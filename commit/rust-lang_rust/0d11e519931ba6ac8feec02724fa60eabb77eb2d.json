{"sha": "0d11e519931ba6ac8feec02724fa60eabb77eb2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMTFlNTE5OTMxYmE2YWM4ZmVlYzAyNzI0ZmE2MGVhYmI3N2ViMmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-03T15:31:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-03T15:31:32Z"}, "message": "Auto merge of #46334 - mikhail-m1:slice_pattern_array_drop, r=arielb1\n\ncreate a drop ladder for an array if any value is moved out\n\nr? @arielb1\nfirst commit for fix https://github.com/rust-lang/rust/issues/34708 (note: this still handles the subslice case in a very broken manner)", "tree": {"sha": "c38dd71318591167dff06cc596e8da2731f46a78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c38dd71318591167dff06cc596e8da2731f46a78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d11e519931ba6ac8feec02724fa60eabb77eb2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d11e519931ba6ac8feec02724fa60eabb77eb2d", "html_url": "https://github.com/rust-lang/rust/commit/0d11e519931ba6ac8feec02724fa60eabb77eb2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d11e519931ba6ac8feec02724fa60eabb77eb2d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9da2112238c565a7e36ada0a1f9c899961910131", "url": "https://api.github.com/repos/rust-lang/rust/commits/9da2112238c565a7e36ada0a1f9c899961910131", "html_url": "https://github.com/rust-lang/rust/commit/9da2112238c565a7e36ada0a1f9c899961910131"}, {"sha": "7be2fd853a865372f04a732a67dd8014845f3ef2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7be2fd853a865372f04a732a67dd8014845f3ef2", "html_url": "https://github.com/rust-lang/rust/commit/7be2fd853a865372f04a732a67dd8014845f3ef2"}], "stats": {"total": 96, "additions": 87, "deletions": 9}, "files": [{"sha": "1cbe0dcc017f9150361c68e56da0c158766f4cf7", "filename": "src/librustc_mir/dataflow/drop_flag_effects.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d11e519931ba6ac8feec02724fa60eabb77eb2d/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d11e519931ba6ac8feec02724fa60eabb77eb2d/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fdrop_flag_effects.rs?ref=0d11e519931ba6ac8feec02724fa60eabb77eb2d", "patch": "@@ -61,7 +61,12 @@ fn place_contents_drop_state_cannot_differ<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx,\n                                                             place: &mir::Place<'tcx>) -> bool {\n     let ty = place.ty(mir, tcx).to_ty(tcx);\n     match ty.sty {\n-        ty::TyArray(..) | ty::TySlice(..) | ty::TyRef(..) | ty::TyRawPtr(..) => {\n+        ty::TyArray(..) => {\n+            debug!(\"place_contents_drop_state_cannot_differ place: {:?} ty: {:?} => false\",\n+                   place, ty);\n+            false\n+        }\n+        ty::TySlice(..) | ty::TyRef(..) | ty::TyRawPtr(..) => {\n             debug!(\"place_contents_drop_state_cannot_differ place: {:?} ty: {:?} refd => true\",\n                    place, ty);\n             true"}, {"sha": "9ca044b764806f6a3a2e952e73d13bad28e38798", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0d11e519931ba6ac8feec02724fa60eabb77eb2d/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d11e519931ba6ac8feec02724fa60eabb77eb2d/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=0d11e519931ba6ac8feec02724fa60eabb77eb2d", "patch": "@@ -280,6 +280,9 @@ impl<'a, 'tcx> DropElaborator<'a, 'tcx> for DropShimElaborator<'a, 'tcx> {\n     fn downcast_subpath(&self, _path: Self::Path, _variant: usize) -> Option<Self::Path> {\n         Some(())\n     }\n+    fn array_subpath(&self, _path: Self::Path, _index: u32, _size: u32) -> Option<Self::Path> {\n+        None\n+    }\n }\n \n /// Build a `Clone::clone` shim for `self_ty`. Here, `def_id` is `Clone::clone`."}, {"sha": "b075d2637da9ba53ac1d15a4e1625a90134e46d2", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0d11e519931ba6ac8feec02724fa60eabb77eb2d/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d11e519931ba6ac8feec02724fa60eabb77eb2d/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=0d11e519931ba6ac8feec02724fa60eabb77eb2d", "patch": "@@ -257,6 +257,20 @@ impl<'a, 'b, 'tcx> DropElaborator<'a, 'tcx> for Elaborator<'a, 'b, 'tcx> {\n         })\n     }\n \n+    fn array_subpath(&self, path: Self::Path, index: u32, size: u32) -> Option<Self::Path> {\n+        dataflow::move_path_children_matching(self.ctxt.move_data(), path, |p| {\n+            match p {\n+                &Projection {\n+                    elem: ProjectionElem::ConstantIndex{offset, min_length: _, from_end: false}, ..\n+                } => offset == index,\n+                &Projection {\n+                    elem: ProjectionElem::ConstantIndex{offset, min_length: _, from_end: true}, ..\n+                } => size - offset == index,\n+                _ => false\n+            }\n+        })\n+    }\n+\n     fn deref_subpath(&self, path: Self::Path) -> Option<Self::Path> {\n         dataflow::move_path_children_matching(self.ctxt.move_data(), path, |p| {\n             match p {"}, {"sha": "3331bc9e59e0b44078909998f9a18a2ff5ec8aeb", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 27, "deletions": 7, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0d11e519931ba6ac8feec02724fa60eabb77eb2d/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d11e519931ba6ac8feec02724fa60eabb77eb2d/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=0d11e519931ba6ac8feec02724fa60eabb77eb2d", "patch": "@@ -19,7 +19,7 @@ use rustc::ty::util::IntTypeExt;\n use rustc_data_structures::indexed_vec::Idx;\n use util::patch::MirPatch;\n \n-use std::iter;\n+use std::{iter, u32};\n \n #[derive(Debug, PartialEq, Eq, Copy, Clone)]\n pub enum DropFlagState {\n@@ -95,6 +95,7 @@ pub trait DropElaborator<'a, 'tcx: 'a> : fmt::Debug {\n     fn field_subpath(&self, path: Self::Path, field: Field) -> Option<Self::Path>;\n     fn deref_subpath(&self, path: Self::Path) -> Option<Self::Path>;\n     fn downcast_subpath(&self, path: Self::Path, variant: usize) -> Option<Self::Path>;\n+    fn array_subpath(&self, path: Self::Path, index: u32, size: u32) -> Option<Self::Path>;\n }\n \n #[derive(Debug)]\n@@ -632,18 +633,36 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n         loop_block\n     }\n \n-    fn open_drop_for_array(&mut self, ety: Ty<'tcx>) -> BasicBlock {\n-        debug!(\"open_drop_for_array({:?})\", ety);\n+    fn open_drop_for_array(&mut self, ety: Ty<'tcx>, opt_size: Option<u64>) -> BasicBlock {\n+        debug!(\"open_drop_for_array({:?}, {:?})\", ety, opt_size);\n \n         // if size_of::<ety>() == 0 {\n         //     index_based_loop\n         // } else {\n         //     ptr_based_loop\n         // }\n \n-        let tcx = self.tcx();\n+        if let Some(size) = opt_size {\n+            assert!(size <= (u32::MAX as u64),\n+                    \"move out check doesn't implemented for array bigger then u32\");\n+            let size = size as u32;\n+            let fields: Vec<(Place<'tcx>, Option<D::Path>)> = (0..size).map(|i| {\n+                (self.place.clone().elem(ProjectionElem::ConstantIndex{\n+                    offset: i,\n+                    min_length: size,\n+                    from_end: false\n+                }),\n+                 self.elaborator.array_subpath(self.path, i, size))\n+            }).collect();\n+\n+            if fields.iter().any(|(_,path)| path.is_some()) {\n+                let (succ, unwind) = self.drop_ladder_bottom();\n+                return self.drop_ladder(fields, succ, unwind).0\n+            }\n+        }\n \n         let move_ = |place: &Place<'tcx>| Operand::Move(place.clone());\n+        let tcx = self.tcx();\n         let size = &Place::Local(self.new_temp(tcx.types.usize));\n         let size_is_zero = &Place::Local(self.new_temp(tcx.types.bool));\n         let base_block = BasicBlockData {\n@@ -779,9 +798,10 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n                 let succ = self.succ;\n                 self.complete_drop(Some(DropFlagMode::Deep), succ, unwind)\n             }\n-            ty::TyArray(ety, _) | ty::TySlice(ety) => {\n-                self.open_drop_for_array(ety)\n-            }\n+            ty::TyArray(ety, size) => self.open_drop_for_array(\n+                ety, size.val.to_const_int().and_then(|v| v.to_u64())),\n+            ty::TySlice(ety) => self.open_drop_for_array(ety, None),\n+\n             _ => bug!(\"open drop from non-ADT `{:?}`\", ty)\n         }\n     }"}, {"sha": "09318e7256fd7c5277641de20bd3eec7dca35d6d", "filename": "src/test/run-pass/dynamic-drop.rs", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/0d11e519931ba6ac8feec02724fa60eabb77eb2d/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d11e519931ba6ac8feec02724fa60eabb77eb2d/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdynamic-drop.rs?ref=0d11e519931ba6ac8feec02724fa60eabb77eb2d", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-wasm32-bare compiled with panic=abort by default\n \n-#![feature(generators, generator_trait, untagged_unions)]\n+#![feature(generators, generator_trait, untagged_unions, slice_patterns, advanced_slice_patterns)]\n \n use std::cell::{Cell, RefCell};\n use std::ops::Generator;\n@@ -195,6 +195,33 @@ fn vec_unreachable(a: &Allocator) {\n     let _x = vec![a.alloc(), a.alloc(), a.alloc(), return];\n }\n \n+fn slice_pattern_first(a: &Allocator) {\n+    let[_x, ..] = [a.alloc(), a.alloc(), a.alloc()];\n+}\n+\n+fn slice_pattern_middle(a: &Allocator) {\n+    let[_, _x, _] = [a.alloc(), a.alloc(), a.alloc()];\n+}\n+\n+fn slice_pattern_two(a: &Allocator) {\n+    let[_x, _, _y, _] = [a.alloc(), a.alloc(), a.alloc(), a.alloc()];\n+}\n+\n+fn slice_pattern_last(a: &Allocator) {\n+    let[.., _y] = [a.alloc(), a.alloc(), a.alloc(), a.alloc()];\n+}\n+\n+fn slice_pattern_one_of(a: &Allocator, i: usize) {\n+    let array = [a.alloc(), a.alloc(), a.alloc(), a.alloc()];\n+    let _x = match i {\n+        0 => { let [a, ..] = array; a }\n+        1 => { let [_, a, ..] = array; a }\n+        2 => { let [_, _, a, _] = array; a }\n+        3 => { let [_, _, _, a] = array; a }\n+        _ => panic!(\"unmatched\"),\n+    };\n+}\n+\n fn run_test<F>(mut f: F)\n     where F: FnMut(&Allocator)\n {\n@@ -264,5 +291,14 @@ fn main() {\n \n     run_test(|a| mixed_drop_and_nondrop(a));\n \n+    run_test(|a| slice_pattern_first(a));\n+    run_test(|a| slice_pattern_middle(a));\n+    run_test(|a| slice_pattern_two(a));\n+    run_test(|a| slice_pattern_last(a));\n+    run_test(|a| slice_pattern_one_of(a, 0));\n+    run_test(|a| slice_pattern_one_of(a, 1));\n+    run_test(|a| slice_pattern_one_of(a, 2));\n+    run_test(|a| slice_pattern_one_of(a, 3));\n+\n     run_test_nopanic(|a| union1(a));\n }"}]}