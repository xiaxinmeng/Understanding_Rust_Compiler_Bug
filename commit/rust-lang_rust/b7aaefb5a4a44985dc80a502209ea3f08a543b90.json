{"sha": "b7aaefb5a4a44985dc80a502209ea3f08a543b90", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YWFlZmI1YTRhNDQ5ODVkYzgwYTUwMjIwOWVhM2YwOGE1NDNiOTA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-26T14:44:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-26T14:44:31Z"}, "message": "Minor incremental tests cleanup", "tree": {"sha": "cedbc35ee1c618d44265e67e557e225aa4885630", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cedbc35ee1c618d44265e67e557e225aa4885630"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7aaefb5a4a44985dc80a502209ea3f08a543b90", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7aaefb5a4a44985dc80a502209ea3f08a543b90", "html_url": "https://github.com/rust-lang/rust/commit/b7aaefb5a4a44985dc80a502209ea3f08a543b90", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7aaefb5a4a44985dc80a502209ea3f08a543b90/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ece8fa81bbff7cad8da2e28fb810699ae4045a16", "url": "https://api.github.com/repos/rust-lang/rust/commits/ece8fa81bbff7cad8da2e28fb810699ae4045a16", "html_url": "https://github.com/rust-lang/rust/commit/ece8fa81bbff7cad8da2e28fb810699ae4045a16"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "5e3e9203cda63a47e498a0418d2b2226e49ed541", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b7aaefb5a4a44985dc80a502209ea3f08a543b90/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7aaefb5a4a44985dc80a502209ea3f08a543b90/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=b7aaefb5a4a44985dc80a502209ea3f08a543b90", "patch": "@@ -28,9 +28,9 @@ pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n         db\n     }\n \n-    fn with_position(fixture: &str) -> (Self, FilePosition) {\n+    fn with_position(ra_fixture: &str) -> (Self, FilePosition) {\n         let mut db = Self::default();\n-        let pos = with_files(&mut db, fixture);\n+        let pos = with_files(&mut db, ra_fixture);\n         (db, pos.unwrap())\n     }\n "}, {"sha": "496fc6b081da1a79d50c6b5ffd369def1d155408", "filename": "crates/ra_hir_def/src/nameres/tests/incremental.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b7aaefb5a4a44985dc80a502209ea3f08a543b90/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7aaefb5a4a44985dc80a502209ea3f08a543b90/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs?ref=b7aaefb5a4a44985dc80a502209ea3f08a543b90", "patch": "@@ -4,16 +4,16 @@ use ra_db::SourceDatabaseExt;\n \n use super::*;\n \n-fn check_def_map_is_not_recomputed(initial: &str, file_change: &str) {\n-    let (mut db, pos) = TestDB::with_position(initial);\n+fn check_def_map_is_not_recomputed(ra_fixture_initial: &str, ra_fixture_change: &str) {\n+    let (mut db, pos) = TestDB::with_position(ra_fixture_initial);\n     let krate = db.test_crate();\n     {\n         let events = db.log_executed(|| {\n             db.crate_def_map(krate);\n         });\n         assert!(format!(\"{:?}\", events).contains(\"crate_def_map\"), \"{:#?}\", events)\n     }\n-    db.set_file_text(pos.file_id, Arc::new(file_change.to_string()));\n+    db.set_file_text(pos.file_id, Arc::new(ra_fixture_change.to_string()));\n \n     {\n         let events = db.log_executed(|| {\n@@ -26,7 +26,7 @@ fn check_def_map_is_not_recomputed(initial: &str, file_change: &str) {\n #[test]\n fn typing_inside_a_function_should_not_invalidate_def_map() {\n     check_def_map_is_not_recomputed(\n-        \"\n+        r\"\n         //- /lib.rs\n         mod foo;<|>\n \n@@ -41,7 +41,7 @@ fn typing_inside_a_function_should_not_invalidate_def_map() {\n         //- /foo/bar.rs\n         pub struct Baz;\n         \",\n-        \"\n+        r\"\n         mod foo;\n \n         use crate::foo::bar::Baz;\n@@ -54,7 +54,7 @@ fn typing_inside_a_function_should_not_invalidate_def_map() {\n #[test]\n fn adding_inner_items_should_not_invalidate_def_map() {\n     check_def_map_is_not_recomputed(\n-        \"\n+        r\"\n         //- /lib.rs\n         struct S { a: i32}\n         enum E { A }\n@@ -72,7 +72,7 @@ fn adding_inner_items_should_not_invalidate_def_map() {\n         //- /foo/bar.rs\n         pub struct Baz;\n         \",\n-        \"\n+        r\"\n         struct S { a: i32, b: () }\n         enum E { A, B }\n         trait T {\n@@ -92,7 +92,7 @@ fn adding_inner_items_should_not_invalidate_def_map() {\n #[test]\n fn typing_inside_a_macro_should_not_invalidate_def_map() {\n     let (mut db, pos) = TestDB::with_position(\n-        \"\n+        r\"\n         //- /lib.rs\n         macro_rules! m {\n             ($ident:ident) => {"}]}