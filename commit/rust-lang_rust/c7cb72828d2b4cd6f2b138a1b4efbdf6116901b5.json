{"sha": "c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3Y2I3MjgyOGQyYjRjZDZmMmIxMzhhMWI0ZWZiZGY2MTE2OTAxYjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-05-12T15:46:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2021-05-13T08:49:20Z"}, "message": "introduce a unit testing feature `rustc_evaluate_where_clauses`\n\nThis attribute will cause us to invoke evaluate on every where clause of an\ninvoked function and to generate an error with the result.\n\nWithout this, it is very difficult to observe the effects of invoking the trait\nevaluator.", "tree": {"sha": "4822b62d1e98329b1ed9796f769ddc2e2f484fd0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4822b62d1e98329b1ed9796f769ddc2e2f484fd0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5", "html_url": "https://github.com/rust-lang/rust/commit/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "506e75cbf8cb5305e49a41326307004ca3976029", "url": "https://api.github.com/repos/rust-lang/rust/commits/506e75cbf8cb5305e49a41326307004ca3976029", "html_url": "https://github.com/rust-lang/rust/commit/506e75cbf8cb5305e49a41326307004ca3976029"}], "stats": {"total": 177, "additions": 174, "deletions": 3}, "files": [{"sha": "f54e090e4e05ec8ec4c03f78e33661191b2d8712", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5", "patch": "@@ -565,6 +565,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         template!(Word, List: \"delay_span_bug_from_inside_query\")\n     ),\n     rustc_attr!(TEST, rustc_dump_user_substs, AssumedUsed, template!(Word)),\n+    rustc_attr!(TEST, rustc_evaluate_where_clauses, AssumedUsed, template!(Word)),\n     rustc_attr!(TEST, rustc_if_this_changed, AssumedUsed, template!(Word, List: \"DepNode\")),\n     rustc_attr!(TEST, rustc_then_this_would_need, AssumedUsed, template!(List: \"DepNode\")),\n     rustc_attr!("}, {"sha": "93cb34999c3a7e69d46e8ebfebcc7ed8f535ce9c", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5", "patch": "@@ -1010,6 +1010,7 @@ symbols! {\n         rustc_dump_program_clauses,\n         rustc_dump_user_substs,\n         rustc_error,\n+        rustc_evaluate_where_clauses,\n         rustc_expected_cgu_reuse,\n         rustc_if_this_changed,\n         rustc_inherit_overflow_checks,"}, {"sha": "cb8f336721ad6a4d06c1c175e493e4575e803b32", "filename": "compiler/rustc_typeck/src/check/callee.rs", "status": "modified", "additions": 37, "deletions": 3, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcallee.rs?ref=c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5", "patch": "@@ -6,8 +6,14 @@ use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{Namespace, Res};\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n-use rustc_infer::{infer, traits};\n+use rustc_infer::{\n+    infer,\n+    traits::{self, Obligation},\n+};\n+use rustc_infer::{\n+    infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind},\n+    traits::ObligationCause,\n+};\n use rustc_middle::ty::adjustment::{\n     Adjust, Adjustment, AllowTwoPhase, AutoBorrow, AutoBorrowMutability,\n };\n@@ -17,6 +23,7 @@ use rustc_span::symbol::{sym, Ident};\n use rustc_span::Span;\n use rustc_target::spec::abi;\n use rustc_trait_selection::autoderef::Autoderef;\n+use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n use std::iter;\n \n /// Checks that it is legal to call methods of the trait corresponding\n@@ -294,7 +301,34 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         expected: Expectation<'tcx>,\n     ) -> Ty<'tcx> {\n         let (fn_sig, def_id) = match *callee_ty.kind() {\n-            ty::FnDef(def_id, _) => (callee_ty.fn_sig(self.tcx), Some(def_id)),\n+            ty::FnDef(def_id, subst) => {\n+                // Unit testing: function items annotated with\n+                // `#[rustc_evaluate_where_clauses]` trigger special output\n+                // to let us test the trait evaluation system.\n+                if self.tcx.has_attr(def_id, sym::rustc_evaluate_where_clauses) {\n+                    let predicates = self.tcx.predicates_of(def_id);\n+                    let predicates = predicates.instantiate(self.tcx, subst);\n+                    for (predicate, predicate_span) in\n+                        predicates.predicates.iter().zip(&predicates.spans)\n+                    {\n+                        let obligation = Obligation::new(\n+                            ObligationCause::dummy_with_span(callee_expr.span),\n+                            self.param_env,\n+                            predicate.clone(),\n+                        );\n+                        let result = self.infcx.evaluate_obligation(&obligation);\n+                        self.tcx\n+                            .sess\n+                            .struct_span_err(\n+                                callee_expr.span,\n+                                &format!(\"evaluate({:?}) = {:?}\", predicate, result),\n+                            )\n+                            .span_label(*predicate_span, \"predicate\")\n+                            .emit();\n+                    }\n+                }\n+                (callee_ty.fn_sig(self.tcx), Some(def_id))\n+            }\n             ty::FnPtr(sig) => (sig, None),\n             ref t => {\n                 let mut unit_variant = None;"}, {"sha": "eb1ffe51ffcdda9186ff8551a15403447d3dc4c4", "filename": "src/test/ui/cycle-me.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5/src%2Ftest%2Fui%2Fcycle-me.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5/src%2Ftest%2Fui%2Fcycle-me.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcycle-me.rs?ref=c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5", "patch": "@@ -0,0 +1,31 @@\n+#![feature(rustc_attrs)]\n+\n+// A (reached depth 0)\n+//   ...\n+//      B // depth 1 -- reached depth = 0\n+//          C // depth 2 -- reached depth = 1 (should be 0)\n+//              B\n+//          A // depth 0\n+//   D (reached depth 1)\n+//      C (cache -- reached depth = 2)\n+\n+struct A {\n+    b: B,\n+    c: C,\n+}\n+\n+struct B {\n+    c: C,\n+    a: Option<Box<A>>,\n+}\n+\n+struct C {\n+    b: Option<Box<B>>,\n+}\n+\n+#[rustc_evaluate_where_clauses]\n+fn test<X: Send>() {}\n+\n+fn main() {\n+    test::<A>();\n+}"}, {"sha": "1b357575cb8b317e7fdd27acaf6ca5794db8a131", "filename": "src/test/ui/traits/issue-83538-tainted-cache-after-cycle.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5/src%2Ftest%2Fui%2Ftraits%2Fissue-83538-tainted-cache-after-cycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5/src%2Ftest%2Fui%2Ftraits%2Fissue-83538-tainted-cache-after-cycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-83538-tainted-cache-after-cycle.rs?ref=c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5", "patch": "@@ -0,0 +1,66 @@\n+// Regression test for issue #83538. The problem here is that we have\n+// two cycles:\n+//\n+// * `Ty` embeds `Box<Ty>` indirectly, which depends on `Global: 'static`, which is OkModuloRegions.\n+// * But `Ty` also references `First`, which has a cycle on itself. That should just be `Ok`.\n+//\n+// But our caching mechanism was blending both cycles and giving the incorrect result.\n+\n+#![feature(rustc_attrs)]\n+#![allow(bad_style)]\n+\n+struct First {\n+    b: Vec<First>,\n+}\n+\n+pub struct Second {\n+    d: Vec<First>,\n+}\n+\n+struct Third<f> {\n+    g: Vec<f>,\n+}\n+\n+enum Ty {\n+    j(Fourth, Fifth, Sixth),\n+}\n+\n+struct Fourth {\n+    o: Vec<Ty>,\n+}\n+\n+struct Fifth {\n+    bounds: First,\n+}\n+\n+struct Sixth {\n+    p: Box<Ty>,\n+}\n+\n+#[rustc_evaluate_where_clauses]\n+fn forward()\n+where\n+    Vec<First>: Unpin,\n+    Third<Ty>: Unpin,\n+{\n+}\n+\n+#[rustc_evaluate_where_clauses]\n+fn reverse()\n+where\n+    Third<Ty>: Unpin,\n+    Vec<First>: Unpin,\n+{\n+}\n+\n+fn main() {\n+    // The only ERROR included here is the one that is totally wrong:\n+\n+    forward();\n+    //~^ ERROR evaluate(Binder(TraitPredicate(<std::vec::Vec<First> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n+    //~| ERROR evaluate(Binder(TraitPredicate(<Third<Ty> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n+\n+    reverse();\n+    //~^ ERROR evaluate(Binder(TraitPredicate(<std::vec::Vec<First> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n+    //~| ERROR evaluate(Binder(TraitPredicate(<Third<Ty> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n+}"}, {"sha": "82e00c3b97f4fd85990e365552d4314c2a7da59c", "filename": "src/test/ui/traits/issue-83538-tainted-cache-after-cycle.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5/src%2Ftest%2Fui%2Ftraits%2Fissue-83538-tainted-cache-after-cycle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5/src%2Ftest%2Fui%2Ftraits%2Fissue-83538-tainted-cache-after-cycle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fissue-83538-tainted-cache-after-cycle.stderr?ref=c7cb72828d2b4cd6f2b138a1b4efbdf6116901b5", "patch": "@@ -0,0 +1,38 @@\n+error: evaluate(Binder(TraitPredicate(<std::vec::Vec<First> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n+  --> $DIR/issue-83538-tainted-cache-after-cycle.rs:59:5\n+   |\n+LL |     Vec<First>: Unpin,\n+   |                 ----- predicate\n+...\n+LL |     forward();\n+   |     ^^^^^^^\n+\n+error: evaluate(Binder(TraitPredicate(<Third<Ty> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n+  --> $DIR/issue-83538-tainted-cache-after-cycle.rs:59:5\n+   |\n+LL |     Third<Ty>: Unpin,\n+   |                ----- predicate\n+...\n+LL |     forward();\n+   |     ^^^^^^^\n+\n+error: evaluate(Binder(TraitPredicate(<Third<Ty> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n+  --> $DIR/issue-83538-tainted-cache-after-cycle.rs:63:5\n+   |\n+LL |     Third<Ty>: Unpin,\n+   |                ----- predicate\n+...\n+LL |     reverse();\n+   |     ^^^^^^^\n+\n+error: evaluate(Binder(TraitPredicate(<std::vec::Vec<First> as std::marker::Unpin>), [])) = Ok(EvaluatedToOkModuloRegions)\n+  --> $DIR/issue-83538-tainted-cache-after-cycle.rs:63:5\n+   |\n+LL |     Vec<First>: Unpin,\n+   |                 ----- predicate\n+...\n+LL |     reverse();\n+   |     ^^^^^^^\n+\n+error: aborting due to 4 previous errors\n+"}]}