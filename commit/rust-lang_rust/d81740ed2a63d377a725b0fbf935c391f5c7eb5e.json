{"sha": "d81740ed2a63d377a725b0fbf935c391f5c7eb5e", "node_id": "C_kwDOAAsO6NoAKGQ4MTc0MGVkMmE2M2QzNzdhNzI1YjBmYmY5MzVjMzkxZjVjN2ViNWU", "commit": {"author": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-20T02:27:26Z"}, "committer": {"name": "David Tolnay", "email": "dtolnay@gmail.com", "date": "2022-01-20T02:32:18Z"}, "message": "Grow scan_stack in the conventional direction\n\nThe pretty printer algorithm involves 2 VecDeques: a ring-buffer of\ntokens and a deque of ring-buffer indices. Confusingly, those two deques\nwere being grown in opposite directions for no good reason. Ring-buffer\npushes would go on the \"back\" of the ring-buffer (i.e. higher indices)\nwhile scan_stack pushes would go on the \"front\" (i.e. lower indices).\nThis commit flips the scan_stack accesses to grow the scan_stack and\nring-buffer in the same direction, where push does the same\noperation as a Vec push i.e. inserting on the high-index end.", "tree": {"sha": "eb49e205515e3a021513bbbf383df93d061f99ac", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eb49e205515e3a021513bbbf383df93d061f99ac"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d81740ed2a63d377a725b0fbf935c391f5c7eb5e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEERijF2Cz/ZdaBZKeK+boUO5X/bYIFAmHoybwACgkQ+boUO5X/\nbYJO6Q/7Bb3IOCpU8l15W9rsqBQB6ssAb+XokmSVImyV6qOet3s2NIjMFzhdF6iK\nNsMvXyRxlc5v9zmIzZce6YWAg7JAtTfp1ppXJdsRJ39LirTAbMkYpm1dFZ7oM+A/\np1J2xTBoiR1r6vCKExCRCg1k8FRq1RuUTdc5kuhzQxIXUEIQAJ+g7riN5YaK3fdy\nU6SYXiGqXScp+Y6ZuDC2ec4ghr8QDrm1bCwXm5lRkyKf9UZsZmbViGGxa/S6NtoI\nD18DDjTclXNyG2oIosDsnEB3pOmwMjzYVTATT5nC/jdsH/ExQnqXpDob/Yf6I0hl\nNlsSNhKGtM1vYw2We4drGogGWwWzNhLdSCzDtnXhWeeZbZyvDBeA14Rkd282ohGp\na0HLzYdscywZQmvUHjhsTe6PO3kQjLX00LFwMZQTLaMeCEJS9KvN4YwUM5ESwbpy\nMj4/p2kMXuKU1HlyhbNPpNS/cV78EyeM8OS/SyaQj85EXCYIf3Ew5F2TzPz5HSLr\n1hW/Ac90O/O9g2Mrot0aiwb8ieTb8IVlHj2rp0XZ3vrYlPFVNd2PDdwY6aIowk0D\ncCpBd7VohTQZz4sTfgqPf9YyD8pQOtY6xNbf02fin6xzvWhC+QMYFuClE0XrW3ot\nrpSgWX2wXt4pXDKy9TACgIK15sO7uXTEUDiipwa1EneddeO4ug8=\n=Y86c\n-----END PGP SIGNATURE-----", "payload": "tree eb49e205515e3a021513bbbf383df93d061f99ac\nparent eec6016ec3e0cc6be3ae75007586b6a56372b382\nauthor David Tolnay <dtolnay@gmail.com> 1642645646 -0800\ncommitter David Tolnay <dtolnay@gmail.com> 1642645938 -0800\n\nGrow scan_stack in the conventional direction\n\nThe pretty printer algorithm involves 2 VecDeques: a ring-buffer of\ntokens and a deque of ring-buffer indices. Confusingly, those two deques\nwere being grown in opposite directions for no good reason. Ring-buffer\npushes would go on the \"back\" of the ring-buffer (i.e. higher indices)\nwhile scan_stack pushes would go on the \"front\" (i.e. lower indices).\nThis commit flips the scan_stack accesses to grow the scan_stack and\nring-buffer in the same direction, where push does the same\noperation as a Vec push i.e. inserting on the high-index end.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d81740ed2a63d377a725b0fbf935c391f5c7eb5e", "html_url": "https://github.com/rust-lang/rust/commit/d81740ed2a63d377a725b0fbf935c391f5c7eb5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d81740ed2a63d377a725b0fbf935c391f5c7eb5e/comments", "author": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtolnay", "id": 1940490, "node_id": "MDQ6VXNlcjE5NDA0OTA=", "avatar_url": "https://avatars.githubusercontent.com/u/1940490?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtolnay", "html_url": "https://github.com/dtolnay", "followers_url": "https://api.github.com/users/dtolnay/followers", "following_url": "https://api.github.com/users/dtolnay/following{/other_user}", "gists_url": "https://api.github.com/users/dtolnay/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtolnay/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtolnay/subscriptions", "organizations_url": "https://api.github.com/users/dtolnay/orgs", "repos_url": "https://api.github.com/users/dtolnay/repos", "events_url": "https://api.github.com/users/dtolnay/events{/privacy}", "received_events_url": "https://api.github.com/users/dtolnay/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eec6016ec3e0cc6be3ae75007586b6a56372b382", "url": "https://api.github.com/repos/rust-lang/rust/commits/eec6016ec3e0cc6be3ae75007586b6a56372b382", "html_url": "https://github.com/rust-lang/rust/commit/eec6016ec3e0cc6be3ae75007586b6a56372b382"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "0e3e7909afb8463829dd08482e46bf9d6d93bcb1", "filename": "compiler/rustc_ast_pretty/src/pp.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d81740ed2a63d377a725b0fbf935c391f5c7eb5e/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d81740ed2a63d377a725b0fbf935c391f5c7eb5e/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpp.rs?ref=d81740ed2a63d377a725b0fbf935c391f5c7eb5e", "patch": "@@ -266,15 +266,15 @@ impl Printer {\n             self.buf.clear();\n         }\n         let right = self.buf.push(BufEntry { token: Token::Begin(b), size: -self.right_total });\n-        self.scan_stack.push_front(right);\n+        self.scan_stack.push_back(right);\n     }\n \n     fn scan_end(&mut self) {\n         if self.scan_stack.is_empty() {\n             self.print_end();\n         } else {\n             let right = self.buf.push(BufEntry { token: Token::End, size: -1 });\n-            self.scan_stack.push_front(right);\n+            self.scan_stack.push_back(right);\n         }\n     }\n \n@@ -287,7 +287,7 @@ impl Printer {\n             self.check_stack(0);\n         }\n         let right = self.buf.push(BufEntry { token: Token::Break(b), size: -self.right_total });\n-        self.scan_stack.push_front(right);\n+        self.scan_stack.push_back(right);\n         self.right_total += b.blank_space;\n     }\n \n@@ -304,8 +304,8 @@ impl Printer {\n \n     fn check_stream(&mut self) {\n         while self.right_total - self.left_total > self.space {\n-            if *self.scan_stack.back().unwrap() == self.buf.index_of_first() {\n-                self.scan_stack.pop_back().unwrap();\n+            if *self.scan_stack.front().unwrap() == self.buf.index_of_first() {\n+                self.scan_stack.pop_front().unwrap();\n                 self.buf.first_mut().unwrap().size = SIZE_INFINITY;\n             }\n             self.advance_left();\n@@ -345,25 +345,25 @@ impl Printer {\n     }\n \n     fn check_stack(&mut self, mut k: usize) {\n-        while let Some(&x) = self.scan_stack.front() {\n+        while let Some(&x) = self.scan_stack.back() {\n             let mut entry = &mut self.buf[x];\n             match entry.token {\n                 Token::Begin(_) => {\n                     if k == 0 {\n                         break;\n                     }\n-                    self.scan_stack.pop_front().unwrap();\n+                    self.scan_stack.pop_back().unwrap();\n                     entry.size += self.right_total;\n                     k -= 1;\n                 }\n                 Token::End => {\n                     // paper says + not =, but that makes no sense.\n-                    self.scan_stack.pop_front().unwrap();\n+                    self.scan_stack.pop_back().unwrap();\n                     entry.size = 1;\n                     k += 1;\n                 }\n                 _ => {\n-                    self.scan_stack.pop_front().unwrap();\n+                    self.scan_stack.pop_back().unwrap();\n                     entry.size += self.right_total;\n                     if k == 0 {\n                         break;"}]}