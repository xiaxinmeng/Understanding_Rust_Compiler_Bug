{"sha": "c5579ca340b346f1b685887f7784c2e7f2090dcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM1NTc5Y2EzNDBiMzQ2ZjFiNjg1ODg3Zjc3ODRjMmU3ZjIwOTBkY2I=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-12T15:30:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T15:25:12Z"}, "message": "Fallout: Port Vec to use `Unique`", "tree": {"sha": "75ad2381a7e6664d17c4638f346d722105c02f46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/75ad2381a7e6664d17c4638f346d722105c02f46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5579ca340b346f1b685887f7784c2e7f2090dcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5579ca340b346f1b685887f7784c2e7f2090dcb", "html_url": "https://github.com/rust-lang/rust/commit/c5579ca340b346f1b685887f7784c2e7f2090dcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5579ca340b346f1b685887f7784c2e7f2090dcb/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2529ac10d7ba68a03ce94873076afa9eb52e365", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2529ac10d7ba68a03ce94873076afa9eb52e365", "html_url": "https://github.com/rust-lang/rust/commit/f2529ac10d7ba68a03ce94873076afa9eb52e365"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "1a03f5b31c0bfb73a02e523ca0b2b55d157c3f4d", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c5579ca340b346f1b685887f7784c2e7f2090dcb/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5579ca340b346f1b685887f7784c2e7f2090dcb/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=c5579ca340b346f1b685887f7784c2e7f2090dcb", "patch": "@@ -57,13 +57,13 @@ use core::default::Default;\n use core::fmt;\n use core::hash::{self, Hash};\n use core::iter::{repeat, FromIterator, IntoIterator};\n-use core::marker::{self, ContravariantLifetime, InvariantType};\n+use core::marker::PhantomData;\n use core::mem;\n-use core::nonzero::NonZero;\n use core::num::{Int, UnsignedInt};\n use core::ops::{Index, IndexMut, Deref, Add};\n use core::ops;\n use core::ptr;\n+use core::ptr::Unique;\n use core::raw::Slice as RawSlice;\n use core::slice;\n use core::usize;\n@@ -137,10 +137,9 @@ use core::usize;\n #[unsafe_no_drop_flag]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Vec<T> {\n-    ptr: NonZero<*mut T>,\n+    ptr: Unique<T>,\n     len: usize,\n     cap: usize,\n-    _own: marker::PhantomData<T>,\n }\n \n unsafe impl<T: Send> Send for Vec<T> { }\n@@ -249,10 +248,9 @@ impl<T> Vec<T> {\n     pub unsafe fn from_raw_parts(ptr: *mut T, length: usize,\n                                  capacity: usize) -> Vec<T> {\n         Vec {\n-            ptr: NonZero::new(ptr),\n+            ptr: Unique::new(ptr),\n             len: length,\n             cap: capacity,\n-            _own: marker::PhantomData,\n         }\n     }\n \n@@ -373,7 +371,7 @@ impl<T> Vec<T> {\n                                      self.len * mem::size_of::<T>(),\n                                      mem::min_align_of::<T>()) as *mut T;\n                 if ptr.is_null() { ::alloc::oom() }\n-                self.ptr = NonZero::new(ptr);\n+                self.ptr = Unique::new(ptr);\n             }\n             self.cap = self.len;\n         }\n@@ -655,7 +653,7 @@ impl<T> Vec<T> {\n             unsafe {\n                 let ptr = alloc_or_realloc(*self.ptr, old_size, size);\n                 if ptr.is_null() { ::alloc::oom() }\n-                self.ptr = NonZero::new(ptr);\n+                self.ptr = Unique::new(ptr);\n             }\n             self.cap = max(self.cap, 2) * 2;\n         }\n@@ -756,7 +754,7 @@ impl<T> Vec<T> {\n             Drain {\n                 ptr: begin,\n                 end: end,\n-                marker: ContravariantLifetime,\n+                marker: PhantomData,\n             }\n         }\n     }\n@@ -871,6 +869,8 @@ impl<T> Vec<T> {\n                 end_t: unsafe { start.offset(offset) },\n                 start_u: start as *mut U,\n                 end_u: start as *mut U,\n+\n+                _marker: PhantomData,\n             };\n             //  start_t\n             //  start_u\n@@ -967,8 +967,7 @@ impl<T> Vec<T> {\n             let mut pv = PartialVecZeroSized::<T,U> {\n                 num_t: vec.len(),\n                 num_u: 0,\n-                marker_t: InvariantType,\n-                marker_u: InvariantType,\n+                marker: PhantomData,\n             };\n             unsafe { mem::forget(vec); }\n \n@@ -1226,7 +1225,7 @@ impl<T> Vec<T> {\n             unsafe {\n                 let ptr = alloc_or_realloc(*self.ptr, self.cap * mem::size_of::<T>(), size);\n                 if ptr.is_null() { ::alloc::oom() }\n-                self.ptr = NonZero::new(ptr);\n+                self.ptr = Unique::new(ptr);\n             }\n             self.cap = capacity;\n         }\n@@ -1779,10 +1778,10 @@ impl<T> Drop for IntoIter<T> {\n #[unsafe_no_drop_flag]\n #[unstable(feature = \"collections\",\n            reason = \"recently added as part of collections reform 2\")]\n-pub struct Drain<'a, T> {\n+pub struct Drain<'a, T:'a> {\n     ptr: *const T,\n     end: *const T,\n-    marker: ContravariantLifetime<'a>,\n+    marker: PhantomData<&'a T>,\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1867,9 +1866,9 @@ impl<'a, T> Drop for Drain<'a, T> {\n \n /// Wrapper type providing a `&Vec<T>` reference via `Deref`.\n #[unstable(feature = \"collections\")]\n-pub struct DerefVec<'a, T> {\n+pub struct DerefVec<'a, T:'a> {\n     x: Vec<T>,\n-    l: ContravariantLifetime<'a>\n+    l: PhantomData<&'a T>,\n }\n \n #[unstable(feature = \"collections\")]\n@@ -1897,7 +1896,7 @@ pub fn as_vec<'a, T>(x: &'a [T]) -> DerefVec<'a, T> {\n     unsafe {\n         DerefVec {\n             x: Vec::from_raw_parts(x.as_ptr() as *mut T, x.len(), x.len()),\n-            l: ContravariantLifetime::<'a>\n+            l: PhantomData,\n         }\n     }\n }\n@@ -1921,6 +1920,8 @@ struct PartialVecNonZeroSized<T,U> {\n     end_u: *mut U,\n     start_t: *mut T,\n     end_t: *mut T,\n+\n+    _marker: PhantomData<U>,\n }\n \n /// An owned, partially type-converted vector of zero-sized elements.\n@@ -1930,8 +1931,7 @@ struct PartialVecNonZeroSized<T,U> {\n struct PartialVecZeroSized<T,U> {\n     num_t: usize,\n     num_u: usize,\n-    marker_t: InvariantType<T>,\n-    marker_u: InvariantType<U>,\n+    marker: PhantomData<::core::cell::Cell<(T,U)>>,\n }\n \n #[unsafe_destructor]"}, {"sha": "cc2324c697cc5dd57cabba0f2d853c235bcb8af2", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5579ca340b346f1b685887f7784c2e7f2090dcb/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5579ca340b346f1b685887f7784c2e7f2090dcb/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=c5579ca340b346f1b685887f7784c2e7f2090dcb", "patch": "@@ -859,7 +859,7 @@ pub struct IntoIter<V> {\n }\n \n #[unstable(feature = \"collections\")]\n-pub struct Drain<'a, V> {\n+pub struct Drain<'a, V:'a> {\n     iter: FilterMap<\n     Enumerate<vec::Drain<'a, Option<V>>>,\n     fn((usize, Option<V>)) -> Option<(usize, V)>>"}]}