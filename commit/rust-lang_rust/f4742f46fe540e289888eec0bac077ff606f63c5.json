{"sha": "f4742f46fe540e289888eec0bac077ff606f63c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NzQyZjQ2ZmU1NDBlMjg5ODg4ZWVjMGJhYzA3N2ZmNjA2ZjYzYzU=", "commit": {"author": {"name": "Tomas Koutsky", "email": "tomas@stepnivlk.net", "date": "2019-03-15T16:42:34Z"}, "committer": {"name": "stepnivlk", "email": "tomas@stepnivlk.net", "date": "2019-03-16T12:14:06Z"}, "message": "Add def getting methods to librustc/ty/context", "tree": {"sha": "c5dc8a353e87b3863bee2d02048e20549ae6fc79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5dc8a353e87b3863bee2d02048e20549ae6fc79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4742f46fe540e289888eec0bac077ff606f63c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4742f46fe540e289888eec0bac077ff606f63c5", "html_url": "https://github.com/rust-lang/rust/commit/f4742f46fe540e289888eec0bac077ff606f63c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4742f46fe540e289888eec0bac077ff606f63c5/comments", "author": null, "committer": null, "parents": [{"sha": "16e7e05e95a6a5a1e0dba54ae722274bd7d725f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/16e7e05e95a6a5a1e0dba54ae722274bd7d725f7", "html_url": "https://github.com/rust-lang/rust/commit/16e7e05e95a6a5a1e0dba54ae722274bd7d725f7"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "c199b8273263cd4e7d184d08bc0de2d76e212195", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=f4742f46fe540e289888eec0bac077ff606f63c5", "patch": "@@ -92,8 +92,8 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     }\n \n     fn lookup_and_handle_method(&mut self, id: hir::HirId) {\n-        if let Some(def) = self.tables.type_dependent_defs().get(id) {\n-            self.check_def_id(def.def_id());\n+        if let Some(def_id) = self.tables.type_dependent_def_id(id) {\n+            self.check_def_id(def_id);\n         } else {\n             bug!(\"no type-dependent def for method\");\n         }"}, {"sha": "db640b581d35382f7351a295cec4ce7fc15335f7", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=f4742f46fe540e289888eec0bac077ff606f63c5", "patch": "@@ -559,8 +559,7 @@ impl<'a, 'gcx, 'tcx> ExprUseVisitor<'a, 'gcx, 'tcx> {\n             }\n             ty::Error => { }\n             _ => {\n-                if let Some(def) = self.mc.tables.type_dependent_defs().get(call.hir_id) {\n-                    let def_id = def.def_id();\n+                if let Some(def_id) = self.mc.tables.type_dependent_def_id(call.hir_id) {\n                     let call_scope = region::Scope {\n                         id: call.hir_id.local_id,\n                         data: region::ScopeData::Node"}, {"sha": "9a71020d65d03254b363bd34f6e6deddb5e989c0", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=f4742f46fe540e289888eec0bac077ff606f63c5", "patch": "@@ -97,7 +97,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n                 Some(self.tables.qpath_def(qpath, expr.hir_id))\n             }\n             hir::ExprKind::MethodCall(..) => {\n-                self.tables.type_dependent_defs().get(expr.hir_id).cloned()\n+                self.tables.type_dependent_def(expr.hir_id)\n             }\n             _ => None\n         };"}, {"sha": "2fc95641693ef2008668e69240b746c86f0f8edb", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=f4742f46fe540e289888eec0bac077ff606f63c5", "patch": "@@ -482,6 +482,15 @@ impl<'tcx> TypeckTables<'tcx> {\n         }\n     }\n \n+    pub fn type_dependent_def(&self, id: HirId) -> Option<Def> {\n+        validate_hir_id_for_typeck_tables(self.local_id_root, id, false);\n+        self.type_dependent_defs.get(&id.local_id).cloned()\n+    }\n+\n+    pub fn type_dependent_def_id(&self, id: HirId) -> Option<DefId> {\n+        self.type_dependent_def(id).map(|def| def.def_id())\n+    }\n+\n     pub fn type_dependent_defs_mut(&mut self) -> LocalTableInContextMut<'_, Def> {\n         LocalTableInContextMut {\n             local_id_root: self.local_id_root,"}, {"sha": "2612efd83164c4084ac593c1e22a5115ed618ce7", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=f4742f46fe540e289888eec0bac077ff606f63c5", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                 }\n             },\n             hir::ExprKind::MethodCall(..) => {\n-                cx.tables.type_dependent_defs().get(expr.hir_id).cloned()\n+                cx.tables.type_dependent_def(expr.hir_id)\n             },\n             _ => None\n         };"}, {"sha": "8ca75831235f750b4ca1f6aeb4a6090dc0ab0e25", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=f4742f46fe540e289888eec0bac077ff606f63c5", "patch": "@@ -835,13 +835,11 @@ fn method_callee<'a, 'gcx, 'tcx>(\n     let (def_id, substs, user_ty) = match overloaded_callee {\n         Some((def_id, substs)) => (def_id, substs, None),\n         None => {\n-            let type_dependent_defs = cx.tables().type_dependent_defs();\n-            let def = type_dependent_defs\n-                .get(expr.hir_id)\n+            let def = cx.tables().type_dependent_def(expr.hir_id)\n                 .unwrap_or_else(|| {\n                     span_bug!(expr.span, \"no type-dependent def for method callee\")\n                 });\n-            let user_ty = user_substs_applied_to_def(cx, expr.hir_id, def);\n+            let user_ty = user_substs_applied_to_def(cx, expr.hir_id, &def);\n             debug!(\"method_callee: user_ty={:?}\", user_ty);\n             (def.def_id(), cx.tables().node_substs(expr.hir_id), user_ty)\n         }"}, {"sha": "fcd51062cd97adde2588f78d5794210710df7537", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=f4742f46fe540e289888eec0bac077ff606f63c5", "patch": "@@ -406,8 +406,7 @@ fn check_expr_kind<'a, 'tcx>(\n             for index in hirvec.iter() {\n                 method_call_result &= v.check_expr(index);\n             }\n-            if let Some(def) = v.tables.type_dependent_defs().get(e.hir_id) {\n-                let def_id = def.def_id();\n+            if let Some(def_id) = v.tables.type_dependent_def_id(e.hir_id) {\n                 match v.tcx.associated_item(def_id).container {\n                     ty::ImplContainer(_) => method_call_result & v.handle_const_fn_call(def_id),\n                     ty::TraitContainer(_) => NotPromotable,"}, {"sha": "98ee871489db8e29641dfb58923939b27ea779c1", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=f4742f46fe540e289888eec0bac077ff606f63c5", "patch": "@@ -1041,8 +1041,8 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n             hir::ExprKind::MethodCall(_, span, _) => {\n                 // Method calls have to be checked specially.\n                 self.span = span;\n-                if let Some(def) = self.tables.type_dependent_defs().get(expr.hir_id) {\n-                    if self.visit(self.tcx.type_of(def.def_id())) {\n+                if let Some(def_id) = self.tables.type_dependent_def_id(expr.hir_id) {\n+                    if self.visit(self.tcx.type_of(def_id)) {\n                         return;\n                     }\n                 } else {\n@@ -1071,7 +1071,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n                 _ => None,\n             }\n             hir::QPath::TypeRelative(..) => {\n-                self.tables.type_dependent_defs().get(id).cloned()\n+                self.tables.type_dependent_def(id)\n             }\n         };\n         if let Some(def) = def {"}, {"sha": "f6a43e888d206cb3b51ea57d339be6a7066b32d5", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=f4742f46fe540e289888eec0bac077ff606f63c5", "patch": "@@ -565,8 +565,8 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n             }\n             ast::ExprKind::MethodCall(ref seg, ..) => {\n                 let expr_hir_id = self.tcx.hir().definitions().node_to_hir_id(expr.id);\n-                let method_id = match self.tables.type_dependent_defs().get(expr_hir_id) {\n-                    Some(id) => id.def_id(),\n+                let method_id = match self.tables.type_dependent_def_id(expr_hir_id) {\n+                    Some(id) => id,\n                     None => {\n                         debug!(\"Could not resolve method id for {:?}\", expr);\n                         return None;"}, {"sha": "ceb33439c3ec7094a646116afd00deb54e0ba7b7", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4742f46fe540e289888eec0bac077ff606f63c5/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=f4742f46fe540e289888eec0bac077ff606f63c5", "patch": "@@ -4757,10 +4757,10 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 (self.to_ty(qself), qself, segment)\n             }\n         };\n-        if let Some(cached_def) = self.tables.borrow().type_dependent_defs().get(hir_id) {\n+        if let Some(cached_def) = self.tables.borrow().type_dependent_def(hir_id) {\n             // Return directly on cache hit. This is useful to avoid doubly reporting\n             // errors with default match binding modes. See #44614.\n-            return (*cached_def, Some(ty), slice::from_ref(&**item_segment))\n+            return (cached_def, Some(ty), slice::from_ref(&**item_segment))\n         }\n         let item_name = item_segment.ident;\n         let def = match self.resolve_ufcs(span, item_name, ty, hir_id) {"}]}