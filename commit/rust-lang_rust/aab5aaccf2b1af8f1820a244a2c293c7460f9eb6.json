{"sha": "aab5aaccf2b1af8f1820a244a2c293c7460f9eb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhYjVhYWNjZjJiMWFmOGYxODIwYTI0NGEyYzI5M2M3NDYwZjllYjY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-21T17:15:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-21T17:15:09Z"}, "message": "Merge #5838\n\n5838: :arrow_up: autocfg\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "60f971e2be8341c7759defc6662f83d6c47d0fdd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60f971e2be8341c7759defc6662f83d6c47d0fdd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfQAEeCRBK7hj4Ov3rIwAAdHIIABf0IWx3ZyLVOSljmTU/FBj+\nzz7XO+6HCtCNvbXlZ844/B+hWkwxrsqNFzDZM3cL68Qv+nIgFcMUUoEUNh49wftg\nI92ysY+DdGJ96eauKXbNl29hf0t/v93YEJW8SQo/WexTdmkMU9WiA2oEfc6X6fs5\nxcnDsrJDOs308qnL9I4RGnY2qBft0+6+wvQvrtrcdrxySwmBAxxOe59uFrXutPEg\nc6uESlVeTXO59CQy3tHmAojdkDyFpevqDqw1px1PBPpC36iA6QGzF4exlNuDgalS\nuqgDKxxDv5S3XEYjsKIcPq7WVRxPk89SNDf9Qb7iECBbpBWJSWQ5dJA0SCa6CyQ=\n=Iyeb\n-----END PGP SIGNATURE-----\n", "payload": "tree 60f971e2be8341c7759defc6662f83d6c47d0fdd\nparent df54561a689a9eb7b1962b69a397a1221200c116\nparent 95f33bb5f73a7f9b7922eef14b996c0a489a6404\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1598030109 +0000\ncommitter GitHub <noreply@github.com> 1598030109 +0000\n\nMerge #5838\n\n5838: :arrow_up: autocfg\n r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6", "html_url": "https://github.com/rust-lang/rust/commit/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df54561a689a9eb7b1962b69a397a1221200c116", "url": "https://api.github.com/repos/rust-lang/rust/commits/df54561a689a9eb7b1962b69a397a1221200c116", "html_url": "https://github.com/rust-lang/rust/commit/df54561a689a9eb7b1962b69a397a1221200c116"}, {"sha": "95f33bb5f73a7f9b7922eef14b996c0a489a6404", "url": "https://api.github.com/repos/rust-lang/rust/commits/95f33bb5f73a7f9b7922eef14b996c0a489a6404", "html_url": "https://github.com/rust-lang/rust/commit/95f33bb5f73a7f9b7922eef14b996c0a489a6404"}], "stats": {"total": 40, "additions": 21, "deletions": 19}, "files": [{"sha": "46d9469c0cf00a45d7cbb872b4097511cd9f0e0f", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=aab5aaccf2b1af8f1820a244a2c293c7460f9eb6", "patch": "@@ -76,9 +76,9 @@ dependencies = [\n \n [[package]]\n name = \"autocfg\"\n-version = \"1.0.0\"\n+version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f8aac770f1885fd7e387acedd76065302551364496e46b3dd00860b2f8359b9d\"\n+checksum = \"cdb031dd78e28731d87d56cc8ffef4a8f36ca26c38fe2de700543e627f8a464a\"\n \n [[package]]\n name = \"backtrace\"\n@@ -1688,9 +1688,9 @@ dependencies = [\n \n [[package]]\n name = \"ungrammar\"\n-version = \"1.1.1\"\n+version = \"1.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c4e20e58a08ee1bcf8a4695cf74550cf054d6c489105f594beacb2c684210aad\"\n+checksum = \"bab6142ac77be714b1ea78faca6efaed5478c50724786b0fe80d8528d10692b3\"\n \n [[package]]\n name = \"unicode-bidi\""}, {"sha": "c4770f33611f32012f641dfbcaed18c1b3193914", "filename": "crates/assists/src/handlers/auto_import.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=aab5aaccf2b1af8f1820a244a2c293c7460f9eb6", "patch": "@@ -239,7 +239,7 @@ impl ImportCandidate {\n             return None;\n         }\n         Some(Self::TraitMethod(\n-            sema.type_of_expr(&method_call.expr()?)?,\n+            sema.type_of_expr(&method_call.receiver()?)?,\n             method_call.name_ref()?.syntax().to_string(),\n         ))\n     }"}, {"sha": "4043c219cde34885e4d93cb9b4727df53a9ae2a4", "filename": "crates/assists/src/handlers/replace_unwrap_with_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Freplace_unwrap_with_match.rs?ref=aab5aaccf2b1af8f1820a244a2c293c7460f9eb6", "patch": "@@ -42,7 +42,7 @@ pub(crate) fn replace_unwrap_with_match(acc: &mut Assists, ctx: &AssistContext)\n     if name.text() != \"unwrap\" {\n         return None;\n     }\n-    let caller = method_call.expr()?;\n+    let caller = method_call.receiver()?;\n     let ty = ctx.sema.type_of_expr(&caller)?;\n     let happy_variant = TryEnum::from_ty(&ctx.sema, &ty)?.happy_case();\n     let target = method_call.syntax().text_range();"}, {"sha": "1594d4f0ff9937fb00054a2b5769869eb6b7373d", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=aab5aaccf2b1af8f1820a244a2c293c7460f9eb6", "patch": "@@ -573,7 +573,7 @@ impl<'db> SemanticsImpl<'db> {\n \n     fn is_unsafe_method_call(&self, method_call_expr: &ast::MethodCallExpr) -> bool {\n         method_call_expr\n-            .expr()\n+            .receiver()\n             .and_then(|expr| {\n                 let field_expr = match expr {\n                     ast::Expr::FieldExpr(field_expr) => field_expr,"}, {"sha": "30ac12a12e431369112ad294b514db88c393c2f6", "filename": "crates/hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fbody%2Flower.rs?ref=aab5aaccf2b1af8f1820a244a2c293c7460f9eb6", "patch": "@@ -329,7 +329,7 @@ impl ExprCollector<'_> {\n                 self.alloc_expr(Expr::Call { callee, args }, syntax_ptr)\n             }\n             ast::Expr::MethodCallExpr(e) => {\n-                let receiver = self.collect_expr_opt(e.expr());\n+                let receiver = self.collect_expr_opt(e.receiver());\n                 let args = if let Some(arg_list) = e.arg_list() {\n                     arg_list.args().map(|e| self.collect_expr(e)).collect()\n                 } else {"}, {"sha": "5adac7ebcc1e86f6c0ffa10acdf84b86ac2fa120", "filename": "crates/ide/src/completion/completion_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=aab5aaccf2b1af8f1820a244a2c293c7460f9eb6", "patch": "@@ -457,7 +457,7 @@ impl<'a> CompletionContext<'a> {\n         if let Some(method_call_expr) = ast::MethodCallExpr::cast(parent) {\n             // As above\n             self.dot_receiver = method_call_expr\n-                .expr()\n+                .receiver()\n                 .map(|e| e.syntax().text_range())\n                 .and_then(|r| find_node_with_range(original_file, r));\n             self.is_call = true;"}, {"sha": "aefc869499a8721f1020859599a47d8cb8679281", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=aab5aaccf2b1af8f1820a244a2c293c7460f9eb6", "patch": "@@ -724,7 +724,8 @@ fn highlight_method_call(\n             hir::Access::Shared => (),\n             hir::Access::Exclusive => h |= HighlightModifier::Mutable,\n             hir::Access::Owned => {\n-                if let Some(receiver_ty) = method_call.expr().and_then(|it| sema.type_of_expr(&it))\n+                if let Some(receiver_ty) =\n+                    method_call.receiver().and_then(|it| sema.type_of_expr(&it))\n                 {\n                     if !receiver_ty.is_copy(sema.db) {\n                         h |= HighlightModifier::Consuming"}, {"sha": "948862a775be0434055573957dc80d78733a3aa2", "filename": "crates/ssr/src/matching.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/crates%2Fssr%2Fsrc%2Fmatching.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/crates%2Fssr%2Fsrc%2Fmatching.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Fmatching.rs?ref=aab5aaccf2b1af8f1820a244a2c293c7460f9eb6", "patch": "@@ -546,10 +546,12 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n         // information on the placeholder match about autoderef and autoref. This allows us to use\n         // the placeholder in a context where autoderef and autoref don't apply.\n         if code_resolved_function.self_param(self.sema.db).is_some() {\n-            if let (Some(pattern_type), Some(expr)) = (&pattern_ufcs.qualifier_type, &code.expr()) {\n+            if let (Some(pattern_type), Some(expr)) =\n+                (&pattern_ufcs.qualifier_type, &code.receiver())\n+            {\n                 let deref_count = self.check_expr_type(pattern_type, expr)?;\n                 let pattern_receiver = pattern_args.next();\n-                self.attempt_match_opt(phase, pattern_receiver.clone(), code.expr())?;\n+                self.attempt_match_opt(phase, pattern_receiver.clone(), code.receiver())?;\n                 if let Phase::Second(match_out) = phase {\n                     if let Some(placeholder_value) = pattern_receiver\n                         .and_then(|n| self.get_placeholder_for_node(n.syntax()))\n@@ -568,7 +570,7 @@ impl<'db, 'sema> Matcher<'db, 'sema> {\n                 }\n             }\n         } else {\n-            self.attempt_match_opt(phase, pattern_args.next(), code.expr())?;\n+            self.attempt_match_opt(phase, pattern_args.next(), code.receiver())?;\n         }\n         let mut code_args =\n             code.arg_list().ok_or_else(|| match_error!(\"Code method call has no args\"))?.args();"}, {"sha": "7e7ce37bdc30af7bec076c381b5a778d950fc4e2", "filename": "crates/ssr/src/replacing.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/crates%2Fssr%2Fsrc%2Freplacing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/crates%2Fssr%2Fsrc%2Freplacing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fssr%2Fsrc%2Freplacing.rs?ref=aab5aaccf2b1af8f1820a244a2c293c7460f9eb6", "patch": "@@ -3,7 +3,7 @@\n use crate::{resolving::ResolvedRule, Match, SsrMatches};\n use itertools::Itertools;\n use rustc_hash::{FxHashMap, FxHashSet};\n-use syntax::ast::{self, AstToken};\n+use syntax::ast::{self, AstNode, AstToken};\n use syntax::{SyntaxElement, SyntaxKind, SyntaxNode, SyntaxToken, TextRange, TextSize};\n use test_utils::mark;\n use text_edit::TextEdit;\n@@ -93,7 +93,6 @@ impl ReplacementRenderer<'_> {\n     }\n \n     fn render_node(&mut self, node: &SyntaxNode) {\n-        use syntax::ast::AstNode;\n         if let Some(mod_path) = self.match_info.rendered_template_paths.get(&node) {\n             self.out.push_str(&mod_path.to_string());\n             // Emit everything except for the segment's name-ref, since we already effectively\n@@ -206,11 +205,10 @@ impl ReplacementRenderer<'_> {\n /// method call doesn't count. e.g. if the token is `$a`, then `$a.foo()` will return true, while\n /// `($a + $b).foo()` or `x.foo($a)` will return false.\n fn token_is_method_call_receiver(token: &SyntaxToken) -> bool {\n-    use syntax::ast::AstNode;\n     // Find the first method call among the ancestors of `token`, then check if the only token\n     // within the receiver is `token`.\n     if let Some(receiver) =\n-        token.ancestors().find_map(ast::MethodCallExpr::cast).and_then(|call| call.expr())\n+        token.ancestors().find_map(ast::MethodCallExpr::cast).and_then(|call| call.receiver())\n     {\n         let tokens = receiver.syntax().descendants_with_tokens().filter_map(|node_or_token| {\n             match node_or_token {\n@@ -226,7 +224,6 @@ fn token_is_method_call_receiver(token: &SyntaxToken) -> bool {\n }\n \n fn parse_as_kind(code: &str, kind: SyntaxKind) -> Option<SyntaxNode> {\n-    use syntax::ast::AstNode;\n     if ast::Expr::can_cast(kind) {\n         if let Ok(expr) = ast::Expr::parse(code) {\n             return Some(expr.syntax().clone());"}, {"sha": "6317407c6f0036b403109e39b50c7837df9ffad8", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=aab5aaccf2b1af8f1820a244a2c293c7460f9eb6", "patch": "@@ -66,6 +66,7 @@ impl ParamList {\n     pub fn comma_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![,]) }\n     pub fn params(&self) -> AstChildren<Param> { support::children(&self.syntax) }\n     pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n+    pub fn pipe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![|]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct RetType {\n@@ -809,7 +810,7 @@ pub struct MethodCallExpr {\n impl ast::AttrsOwner for MethodCallExpr {}\n impl ast::ArgListOwner for MethodCallExpr {}\n impl MethodCallExpr {\n-    pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n+    pub fn receiver(&self) -> Option<Expr> { support::child(&self.syntax) }\n     pub fn dot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![.]) }\n     pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n     pub fn generic_arg_list(&self) -> Option<GenericArgList> { support::child(&self.syntax) }"}, {"sha": "200e8aa5043dac896a0c603be5f27be020a9141a", "filename": "xtask/src/codegen/gen_syntax.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aab5aaccf2b1af8f1820a244a2c293c7460f9eb6/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_syntax.rs?ref=aab5aaccf2b1af8f1820a244a2c293c7460f9eb6", "patch": "@@ -477,6 +477,7 @@ impl Field {\n                     \"#\" => \"pound\",\n                     \"?\" => \"question_mark\",\n                     \",\" => \"comma\",\n+                    \"|\" => \"pipe\",\n                     _ => name,\n                 };\n                 format_ident!(\"{}_token\", name)"}]}