{"sha": "58e901b6fd1163172149fd422565523b17eed5f0", "node_id": "C_kwDOAAsO6NoAKDU4ZTkwMWI2ZmQxMTYzMTcyMTQ5ZmQ0MjI1NjU1MjNiMTdlZWQ1ZjA", "commit": {"author": {"name": "Nikita Tomashevich", "email": "quant3234@gmail.com", "date": "2023-01-19T14:35:09Z"}, "committer": {"name": "IQuant", "email": "quant3234@gmail.com", "date": "2023-02-14T15:31:45Z"}, "message": "Port \"BorrowedTooLong\" diagnostic", "tree": {"sha": "e723cfd20c43c421fb1f9646650642198d605f41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e723cfd20c43c421fb1f9646650642198d605f41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58e901b6fd1163172149fd422565523b17eed5f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58e901b6fd1163172149fd422565523b17eed5f0", "html_url": "https://github.com/rust-lang/rust/commit/58e901b6fd1163172149fd422565523b17eed5f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58e901b6fd1163172149fd422565523b17eed5f0/comments", "author": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "committer": {"login": "IntQuant", "id": 25219447, "node_id": "MDQ6VXNlcjI1MjE5NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/25219447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/IntQuant", "html_url": "https://github.com/IntQuant", "followers_url": "https://api.github.com/users/IntQuant/followers", "following_url": "https://api.github.com/users/IntQuant/following{/other_user}", "gists_url": "https://api.github.com/users/IntQuant/gists{/gist_id}", "starred_url": "https://api.github.com/users/IntQuant/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/IntQuant/subscriptions", "organizations_url": "https://api.github.com/users/IntQuant/orgs", "repos_url": "https://api.github.com/users/IntQuant/repos", "events_url": "https://api.github.com/users/IntQuant/events{/privacy}", "received_events_url": "https://api.github.com/users/IntQuant/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fc5ba65e1a6f2e7600c98579d4a0f488560c5bf", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fc5ba65e1a6f2e7600c98579d4a0f488560c5bf", "html_url": "https://github.com/rust-lang/rust/commit/8fc5ba65e1a6f2e7600c98579d4a0f488560c5bf"}], "stats": {"total": 52, "additions": 45, "deletions": 7}, "files": [{"sha": "0fcde81174038ef93cc0bb9a6eaeddeba01277f3", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58e901b6fd1163172149fd422565523b17eed5f0/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/58e901b6fd1163172149fd422565523b17eed5f0/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=58e901b6fd1163172149fd422565523b17eed5f0", "patch": "@@ -142,12 +142,14 @@ infer_region_explanation = {$pref_kind ->\n     *[should_not_happen] [{$pref_kind}]\n     [ref_valid_for] ...the reference is valid for\n     [content_valid_for] ...but the borrowed content is only valid for\n-    [type_valid_for] object type is valid for\n+    [type_obj_valid_for] object type is valid for\n     [source_pointer_valid_for] source pointer is only valid for\n     [type_satisfy] type must satisfy\n     [type_outlive] type must outlive\n     [lf_instantiated_with] lifetime parameter instantiated with\n     [lf_must_outlive] but lifetime parameter must outlive\n+    [type_valid_for] the type is valid for\n+    [borrow_lasts_for] but the borrow lasts for\n     [empty] {\"\"}\n }{$pref_kind ->\n     [empty] {\"\"}\n@@ -156,7 +158,6 @@ infer_region_explanation = {$pref_kind ->\n     *[should_not_happen] [{$desc_kind}]\n     [restatic] the static lifetime\n     [revar] lifetime {$desc_arg}\n-\n     [as_defined] the lifetime `{$desc_arg}` as defined here\n     [as_defined_anon] the anonymous lifetime as defined here\n     [defined_here] the anonymous lifetime defined here\n@@ -173,6 +174,7 @@ infer_outlives_content = lifetime of reference outlives lifetime of borrowed con\n infer_outlives_bound = lifetime of the source pointer does not outlive lifetime bound of the object type\n infer_fullfill_req_lifetime = the type `{$ty}` does not fulfill the required lifetime\n infer_lf_bound_not_satisfied = lifetime bound not satisfied\n+infer_borrowed_too_long = a value of type `{$ty}` is borrowed for too long\n \n infer_mismatched_static_lifetime = incompatible lifetime on type\n infer_does_not_outlive_static_from_impl = ...does not necessarily outlive the static lifetime introduced by the compatible `impl`"}, {"sha": "6efe72bfc365b0364d6a33c0b309a8e29a8fcd1e", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/58e901b6fd1163172149fd422565523b17eed5f0/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e901b6fd1163172149fd422565523b17eed5f0/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=58e901b6fd1163172149fd422565523b17eed5f0", "patch": "@@ -970,3 +970,13 @@ pub struct LfBoundNotSatisfied<'a> {\n     #[subdiagnostic]\n     pub notes: Vec<note_and_explain::RegionExplanation<'a>>,\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(infer_borrowed_too_long, code = \"E0490\")]\n+pub struct BorrowedTooLong<'a> {\n+    #[primary_span]\n+    pub span: Span,\n+    pub ty: Ty<'a>,\n+    #[subdiagnostic]\n+    pub notes: Vec<note_and_explain::RegionExplanation<'a>>,\n+}"}, {"sha": "e779fdd6e55093006182e8f081e0b12fdf63a8ef", "filename": "compiler/rustc_infer/src/errors/note_and_explain.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/58e901b6fd1163172149fd422565523b17eed5f0/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e901b6fd1163172149fd422565523b17eed5f0/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fnote_and_explain.rs?ref=58e901b6fd1163172149fd422565523b17eed5f0", "patch": "@@ -123,12 +123,14 @@ pub enum PrefixKind {\n     Empty,\n     RefValidFor,\n     ContentValidFor,\n-    TypeValidFor,\n+    TypeObjValidFor,\n     SourcePointerValidFor,\n     TypeSatisfy,\n     TypeOutlive,\n     LfInstantiatedWith,\n     LfMustOutlive,\n+    TypeValidFor,\n+    BorrowLastsFor,\n }\n \n pub enum SuffixKind {\n@@ -143,12 +145,14 @@ impl IntoDiagnosticArg for PrefixKind {\n             Self::Empty => \"empty\",\n             Self::RefValidFor => \"ref_valid_for\",\n             Self::ContentValidFor => \"content_valid_for\",\n-            Self::TypeValidFor => \"type_valid_for\",\n+            Self::TypeObjValidFor => \"type_obj_valid_for\",\n             Self::SourcePointerValidFor => \"source_pointer_valid_for\",\n             Self::TypeSatisfy => \"type_satisfy\",\n             Self::TypeOutlive => \"type_outlive\",\n             Self::LfInstantiatedWith => \"lf_instantiated_with\",\n             Self::LfMustOutlive => \"lf_must_outlive\",\n+            Self::TypeValidFor => \"type_valid_for\",\n+            Self::BorrowLastsFor => \"borrow_lasts_for\",\n         }\n         .into();\n         rustc_errors::DiagnosticArgValue::Str(kind)"}, {"sha": "e470d9d9053712ae898beb377526a0ed6f94d10b", "filename": "compiler/rustc_infer/src/infer/error_reporting/note.rs", "status": "modified", "additions": 25, "deletions": 3, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/58e901b6fd1163172149fd422565523b17eed5f0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58e901b6fd1163172149fd422565523b17eed5f0/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnote.rs?ref=58e901b6fd1163172149fd422565523b17eed5f0", "patch": "@@ -1,6 +1,6 @@\n use crate::errors::{\n-    note_and_explain, FullfillReqLifetime, LfBoundNotSatisfied, OutlivesBound, OutlivesContent,\n-    RegionOriginNote,\n+    note_and_explain, BorrowedTooLong, FullfillReqLifetime, LfBoundNotSatisfied, OutlivesBound,\n+    OutlivesContent, RegionOriginNote,\n };\n use crate::infer::error_reporting::{note_and_explain_region, TypeErrCtxt};\n use crate::infer::{self, SubregionOrigin};\n@@ -147,7 +147,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                     self.tcx,\n                     sub,\n                     None,\n-                    note_and_explain::PrefixKind::TypeValidFor,\n+                    note_and_explain::PrefixKind::TypeObjValidFor,\n                     note_and_explain::SuffixKind::Empty,\n                 );\n                 let pointer_valid = note_and_explain::RegionExplanation::new(\n@@ -200,6 +200,28 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                 }\n                 .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic)\n             }\n+            infer::DataBorrowed(ty, span) => {\n+                let type_valid = note_and_explain::RegionExplanation::new(\n+                    self.tcx,\n+                    sub,\n+                    None,\n+                    note_and_explain::PrefixKind::TypeValidFor,\n+                    note_and_explain::SuffixKind::Empty,\n+                );\n+                let borrow_lasts_for = note_and_explain::RegionExplanation::new(\n+                    self.tcx,\n+                    sup,\n+                    None,\n+                    note_and_explain::PrefixKind::BorrowLastsFor,\n+                    note_and_explain::SuffixKind::Empty,\n+                );\n+                BorrowedTooLong {\n+                    span,\n+                    ty: self.resolve_vars_if_possible(ty),\n+                    notes: type_valid.into_iter().chain(borrow_lasts_for).collect(),\n+                }\n+                .into_diagnostic(&self.tcx.sess.parse_sess.span_diagnostic)\n+            }\n             infer::ReferenceOutlivesReferent(ty, span) => {\n                 let mut err = struct_span_err!(\n                     self.tcx.sess,"}]}