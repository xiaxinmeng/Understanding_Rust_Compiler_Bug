{"sha": "e19b2289594746ce733588ac444df3fefaad4912", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxOWIyMjg5NTk0NzQ2Y2U3MzM1ODhhYzQ0NGRmM2ZlZmFhZDQ5MTI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-07T20:18:03Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-03-07T21:24:02Z"}, "message": "Improve recovery for missing trait in a trait impl", "tree": {"sha": "3d4ba1b9ff6378ba7cbcac3cc9656f7c8c74e15c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d4ba1b9ff6378ba7cbcac3cc9656f7c8c74e15c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e19b2289594746ce733588ac444df3fefaad4912", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e19b2289594746ce733588ac444df3fefaad4912", "html_url": "https://github.com/rust-lang/rust/commit/e19b2289594746ce733588ac444df3fefaad4912", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e19b2289594746ce733588ac444df3fefaad4912/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00887f39d199bc63730d0dd19f8726451fdd5758", "url": "https://api.github.com/repos/rust-lang/rust/commits/00887f39d199bc63730d0dd19f8726451fdd5758", "html_url": "https://github.com/rust-lang/rust/commit/00887f39d199bc63730d0dd19f8726451fdd5758"}], "stats": {"total": 31, "additions": 15, "deletions": 16}, "files": [{"sha": "64f413e6dd8eee9728bdf54274c16e80d6bf4c6c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e19b2289594746ce733588ac444df3fefaad4912/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19b2289594746ce733588ac444df3fefaad4912/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e19b2289594746ce733588ac444df3fefaad4912", "patch": "@@ -6716,16 +6716,16 @@ impl<'a> Parser<'a> {\n             ast::ImplPolarity::Positive\n         };\n \n-        let possible_missing_trait = self.look_ahead(0, |t| t.is_keyword(keywords::For));\n-\n         // Parse both types and traits as a type, then reinterpret if necessary.\n-        let ty_first = self.parse_ty().map_err(|mut err| {\n-            if possible_missing_trait {\n-                err.help(\"did you forget a trait name after `impl`?\");\n-            }\n-\n-            err\n-        })?;\n+        let err_path = |span| ast::Path::from_ident(Ident::new(keywords::Invalid.name(), span));\n+        let ty_first = if self.token.is_keyword(keywords::For) &&\n+                          self.look_ahead(1, |t| t != &token::Lt) {\n+            let span = self.prev_span.between(self.span);\n+            self.struct_span_err(span, \"missing trait in a trait impl\").emit();\n+            P(Ty { node: TyKind::Path(None, err_path(span)), span, id: ast::DUMMY_NODE_ID })\n+        } else {\n+            self.parse_ty()?\n+        };\n \n         // If `for` is missing we try to recover.\n         let has_for = self.eat_keyword(keywords::For);\n@@ -6734,7 +6734,7 @@ impl<'a> Parser<'a> {\n         let ty_second = if self.token == token::DotDot {\n             // We need to report this error after `cfg` expansion for compatibility reasons\n             self.bump(); // `..`, do not add it to expected tokens\n-            Some(P(Ty { node: TyKind::Err, span: self.prev_span, id: ast::DUMMY_NODE_ID }))\n+            Some(DummyResult::raw_ty(self.prev_span, true))\n         } else if has_for || self.token.can_begin_type() {\n             Some(self.parse_ty()?)\n         } else {\n@@ -6764,7 +6764,7 @@ impl<'a> Parser<'a> {\n                     TyKind::Path(None, path) => path,\n                     _ => {\n                         self.span_err(ty_first.span, \"expected a trait, found type\");\n-                        ast::Path::from_ident(Ident::new(keywords::Invalid.name(), ty_first.span))\n+                        err_path(ty_first.span)\n                     }\n                 };\n                 let trait_ref = TraitRef { path, ref_id: ty_first.id };"}, {"sha": "b68f56814678c87d261aa200742e32d040991d26", "filename": "src/test/ui/issues/issue-56031.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e19b2289594746ce733588ac444df3fefaad4912/src%2Ftest%2Fui%2Fissues%2Fissue-56031.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e19b2289594746ce733588ac444df3fefaad4912/src%2Ftest%2Fui%2Fissues%2Fissue-56031.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56031.rs?ref=e19b2289594746ce733588ac444df3fefaad4912", "patch": "@@ -1,5 +1,6 @@\n struct T;\n \n impl for T {}\n+//~^ ERROR missing trait in a trait impl\n \n fn main() {}"}, {"sha": "3d7acee0a56eb9fbd3cf83c93ff43a3c179319bc", "filename": "src/test/ui/issues/issue-56031.stderr", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e19b2289594746ce733588ac444df3fefaad4912/src%2Ftest%2Fui%2Fissues%2Fissue-56031.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e19b2289594746ce733588ac444df3fefaad4912/src%2Ftest%2Fui%2Fissues%2Fissue-56031.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-56031.stderr?ref=e19b2289594746ce733588ac444df3fefaad4912", "patch": "@@ -1,10 +1,8 @@\n-error: expected `<`, found `T`\n-  --> $DIR/issue-56031.rs:3:10\n+error: missing trait in a trait impl\n+  --> $DIR/issue-56031.rs:3:5\n    |\n LL | impl for T {}\n-   |          ^ expected `<` here\n-   |\n-   = help: did you forget a trait name after `impl`?\n+   |     ^\n \n error: aborting due to previous error\n "}]}