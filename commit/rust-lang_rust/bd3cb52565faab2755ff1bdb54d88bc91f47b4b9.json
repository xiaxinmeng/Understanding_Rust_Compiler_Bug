{"sha": "bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "node_id": "C_kwDOAAsO6NoAKGJkM2NiNTI1NjVmYWFiMjc1NWZmMWJkYjU0ZDg4YmM5MWY0N2I0Yjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-16T17:22:57Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-01-16T17:22:57Z"}, "message": "Auto merge of #92970 - matthiaskrgr:rollup-tcx7cfb, r=matthiaskrgr\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #92487 (Fix unclosed boxes in pretty printing of TraitAlias)\n - #92581 (ARMv6K Horizon - Enable default libraries)\n - #92619 (Add diagnostic items for macros)\n - #92635 (rustdoc: Yet more intra-doc links cleanup)\n - #92646 (feat: rustc_pass_by_value lint attribute)\n - #92706 (Clarify explicitly that BTree{Map,Set} are ordered.)\n - #92710 (Include Projections when elaborating TypeOutlives)\n - #92746 (Parse `Ty?` as `Option<Ty>` and provide structured suggestion)\n - #92792 (rustdoc: fix intra-link for generic trait impls)\n - #92814 (remove unused FIXME)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "62cae2960feaabe7d5bd0362032102cd48621b3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/62cae2960feaabe7d5bd0362032102cd48621b3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "html_url": "https://github.com/rust-lang/rust/commit/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48e89b00caa94829a5f07e0f1ecb33bf37431244", "url": "https://api.github.com/repos/rust-lang/rust/commits/48e89b00caa94829a5f07e0f1ecb33bf37431244", "html_url": "https://github.com/rust-lang/rust/commit/48e89b00caa94829a5f07e0f1ecb33bf37431244"}, {"sha": "2b6b49e1d7f1d818b48dbbca11c49f672e25e6ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b6b49e1d7f1d818b48dbbca11c49f672e25e6ca", "html_url": "https://github.com/rust-lang/rust/commit/2b6b49e1d7f1d818b48dbbca11c49f672e25e6ca"}], "stats": {"total": 1268, "additions": 906, "deletions": 362}, "files": [{"sha": "32a4a0751d8d2d1145953f98c080ea9cdf8e6c29", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -1357,9 +1357,7 @@ impl<'a> State<'a> {\n                 self.bclose(item.span, empty);\n             }\n             ast::ItemKind::TraitAlias(ref generics, ref bounds) => {\n-                self.head(\"\");\n-                self.print_visibility(&item.vis);\n-                self.word_nbsp(\"trait\");\n+                self.head(visibility_qualified(&item.vis, \"trait\"));\n                 self.print_ident(item.ident);\n                 self.print_generic_params(&generics.params);\n                 let mut real_bounds = Vec::with_capacity(bounds.len());\n@@ -1377,6 +1375,8 @@ impl<'a> State<'a> {\n                 self.print_type_bounds(\"=\", &real_bounds);\n                 self.print_where_clause(&generics.where_clause);\n                 self.word(\";\");\n+                self.end(); // end inner head-block\n+                self.end(); // end outer head-block\n             }\n             ast::ItemKind::MacCall(ref mac) => {\n                 self.print_mac(mac);"}, {"sha": "46817bc9c3f08ebba8105127544f250a0ed36b75", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -623,6 +623,11 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         lang, Normal, template!(NameValueStr: \"name\"), DuplicatesOk, lang_items,\n         \"language items are subject to change\",\n     ),\n+    rustc_attr!(\n+        rustc_pass_by_value, Normal,\n+        template!(Word), WarnFollowing,\n+        \"#[rustc_pass_by_value] is used to mark types that must be passed by value instead of reference.\"\n+    ),\n     BuiltinAttribute {\n         name: sym::rustc_diagnostic_item,\n         type_: Normal,"}, {"sha": "1fd226291d12afca04b846cbc102dbfa7d4acf34", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -705,9 +705,7 @@ impl<'a> State<'a> {\n                 self.bclose(item.span);\n             }\n             hir::ItemKind::TraitAlias(ref generics, ref bounds) => {\n-                self.head(\"\");\n-                self.print_visibility(&item.vis);\n-                self.word_nbsp(\"trait\");\n+                self.head(visibility_qualified(&item.vis, \"trait\"));\n                 self.print_ident(item.ident);\n                 self.print_generic_params(&generics.params);\n                 let mut real_bounds = Vec::with_capacity(bounds.len());\n@@ -725,6 +723,8 @@ impl<'a> State<'a> {\n                 self.print_bounds(\"=\", real_bounds);\n                 self.print_where_clause(&generics.where_clause);\n                 self.word(\";\");\n+                self.end(); // end inner head-block\n+                self.end(); // end outer head-block\n             }\n         }\n         self.ann.post(self, AnnNode::Item(item))"}, {"sha": "7919e409253925a804346fdf36906041ca391a27", "filename": "compiler/rustc_index/src/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_index%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_index%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Flib.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -9,7 +9,3 @@\n pub mod bit_set;\n pub mod interval;\n pub mod vec;\n-\n-// FIXME(#56935): Work around ICEs during cross-compilation.\n-#[allow(unused)]\n-extern crate rustc_macros;"}, {"sha": "a5276afc5bfa7ed03b59fd2cc5ccecaa4378a70c", "filename": "compiler/rustc_infer/src/infer/outlives/obligations.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Foutlives%2Fobligations.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -164,7 +164,7 @@ impl<'cx, 'tcx> InferCtxt<'cx, 'tcx> {\n             \"cannot process registered region obligations in a snapshot\"\n         );\n \n-        debug!(\"process_registered_region_obligations()\");\n+        debug!(?param_env, \"process_registered_region_obligations()\");\n \n         let my_region_obligations = self.take_registered_region_obligations();\n \n@@ -356,6 +356,8 @@ where\n         let trait_bounds: Vec<_> =\n             self.verify_bound.projection_declared_bounds_from_trait(projection_ty).collect();\n \n+        debug!(?trait_bounds);\n+\n         // Compute the bounds we can derive from the environment. This\n         // is an \"approximate\" match -- in some cases, these bounds\n         // may not apply."}, {"sha": "674c75fdee56113bb3b1b29067d7b7ecb235d549", "filename": "compiler/rustc_infer/src/traits/util.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Futil.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -241,10 +241,19 @@ impl<'tcx> Elaborator<'tcx> {\n \n                             Component::UnresolvedInferenceVariable(_) => None,\n \n-                            Component::Projection(_) | Component::EscapingProjection(_) => {\n-                                // We can probably do more here. This\n-                                // corresponds to a case like `<T as\n-                                // Foo<'a>>::U: 'b`.\n+                            Component::Projection(projection) => {\n+                                // We might end up here if we have `Foo<<Bar as Baz>::Assoc>: 'a`.\n+                                // With this, we can deduce that `<Bar as Baz>::Assoc: 'a`.\n+                                let ty =\n+                                    tcx.mk_projection(projection.item_def_id, projection.substs);\n+                                Some(ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(\n+                                    ty, r_min,\n+                                )))\n+                            }\n+\n+                            Component::EscapingProjection(_) => {\n+                                // We might be able to do more here, but we don't\n+                                // want to deal with escaping vars right now.\n                                 None\n                             }\n                         })"}, {"sha": "7353cd6b876b9642bbae981bd9b7d610c9f35015", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 1, "deletions": 32, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -5,10 +5,7 @@ use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext}\n use rustc_ast as ast;\n use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n-use rustc_hir::{\n-    GenericArg, HirId, Item, ItemKind, MutTy, Mutability, Node, Path, PathSegment, QPath, Ty,\n-    TyKind,\n-};\n+use rustc_hir::{GenericArg, HirId, Item, ItemKind, Node, Path, PathSegment, QPath, Ty, TyKind};\n use rustc_middle::ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n@@ -58,13 +55,6 @@ declare_tool_lint! {\n     report_in_external_macro: true\n }\n \n-declare_tool_lint! {\n-    pub rustc::TY_PASS_BY_REFERENCE,\n-    Allow,\n-    \"passing `Ty` or `TyCtxt` by reference\",\n-    report_in_external_macro: true\n-}\n-\n declare_tool_lint! {\n     pub rustc::USAGE_OF_QUALIFIED_TY,\n     Allow,\n@@ -74,7 +64,6 @@ declare_tool_lint! {\n \n declare_lint_pass!(TyTyKind => [\n     USAGE_OF_TY_TYKIND,\n-    TY_PASS_BY_REFERENCE,\n     USAGE_OF_QUALIFIED_TY,\n ]);\n \n@@ -131,26 +120,6 @@ impl<'tcx> LateLintPass<'tcx> for TyTyKind {\n                     }\n                 }\n             }\n-            TyKind::Rptr(_, MutTy { ty: inner_ty, mutbl: Mutability::Not }) => {\n-                if let Some(impl_did) = cx.tcx.impl_of_method(ty.hir_id.owner.to_def_id()) {\n-                    if cx.tcx.impl_trait_ref(impl_did).is_some() {\n-                        return;\n-                    }\n-                }\n-                if let Some(t) = is_ty_or_ty_ctxt(cx, &inner_ty) {\n-                    cx.struct_span_lint(TY_PASS_BY_REFERENCE, ty.span, |lint| {\n-                        lint.build(&format!(\"passing `{}` by reference\", t))\n-                            .span_suggestion(\n-                                ty.span,\n-                                \"try passing by value\",\n-                                t,\n-                                // Changing type of function argument\n-                                Applicability::MaybeIncorrect,\n-                            )\n-                            .emit();\n-                    })\n-                }\n-            }\n             _ => {}\n         }\n     }"}, {"sha": "4aa8505c9408dda782d97e677578a9bac5feec44", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -56,6 +56,7 @@ mod non_ascii_idents;\n mod non_fmt_panic;\n mod nonstandard_style;\n mod noop_method_call;\n+mod pass_by_value;\n mod passes;\n mod redundant_semicolon;\n mod traits;\n@@ -85,6 +86,7 @@ use non_ascii_idents::*;\n use non_fmt_panic::NonPanicFmt;\n use nonstandard_style::*;\n use noop_method_call::*;\n+use pass_by_value::*;\n use redundant_semicolon::*;\n use traits::*;\n use types::*;\n@@ -490,15 +492,17 @@ fn register_internals(store: &mut LintStore) {\n     store.register_late_pass(|| Box::new(ExistingDocKeyword));\n     store.register_lints(&TyTyKind::get_lints());\n     store.register_late_pass(|| Box::new(TyTyKind));\n+    store.register_lints(&PassByValue::get_lints());\n+    store.register_late_pass(|| Box::new(PassByValue));\n     store.register_group(\n         false,\n         \"rustc::internal\",\n         None,\n         vec![\n             LintId::of(DEFAULT_HASH_TYPES),\n             LintId::of(USAGE_OF_TY_TYKIND),\n+            LintId::of(PASS_BY_VALUE),\n             LintId::of(LINT_PASS_IMPL_WITHOUT_MACRO),\n-            LintId::of(TY_PASS_BY_REFERENCE),\n             LintId::of(USAGE_OF_QUALIFIED_TY),\n             LintId::of(EXISTING_DOC_KEYWORD),\n         ],"}, {"sha": "26d0560bf89bbb692c495f01cdd807e63ea0bb98", "filename": "compiler/rustc_lint/src/pass_by_value.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fpass_by_value.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -0,0 +1,94 @@\n+use crate::{LateContext, LateLintPass, LintContext};\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_hir::def::Res;\n+use rustc_hir::{GenericArg, PathSegment, QPath, TyKind};\n+use rustc_middle::ty;\n+use rustc_span::symbol::sym;\n+\n+declare_tool_lint! {\n+    /// The `rustc_pass_by_value` lint marks a type with `#[rustc_pass_by_value]` requiring it to always be passed by value.\n+    /// This is usually used for types that are thin wrappers around references, so there is no benefit to an extra\n+    /// layer of indirection. (Example: `Ty` which is a reference to a `TyS`)\n+    pub rustc::PASS_BY_VALUE,\n+    Warn,\n+    \"pass by reference of a type flagged as `#[rustc_pass_by_value]`\",\n+    report_in_external_macro: true\n+}\n+\n+declare_lint_pass!(PassByValue => [PASS_BY_VALUE]);\n+\n+impl<'tcx> LateLintPass<'tcx> for PassByValue {\n+    fn check_ty(&mut self, cx: &LateContext<'_>, ty: &'tcx hir::Ty<'tcx>) {\n+        match &ty.kind {\n+            TyKind::Rptr(_, hir::MutTy { ty: inner_ty, mutbl: hir::Mutability::Not }) => {\n+                if let Some(impl_did) = cx.tcx.impl_of_method(ty.hir_id.owner.to_def_id()) {\n+                    if cx.tcx.impl_trait_ref(impl_did).is_some() {\n+                        return;\n+                    }\n+                }\n+                if let Some(t) = path_for_pass_by_value(cx, &inner_ty) {\n+                    cx.struct_span_lint(PASS_BY_VALUE, ty.span, |lint| {\n+                        lint.build(&format!(\"passing `{}` by reference\", t))\n+                            .span_suggestion(\n+                                ty.span,\n+                                \"try passing by value\",\n+                                t,\n+                                // Changing type of function argument\n+                                Applicability::MaybeIncorrect,\n+                            )\n+                            .emit();\n+                    })\n+                }\n+            }\n+            _ => {}\n+        }\n+    }\n+}\n+\n+fn path_for_pass_by_value(cx: &LateContext<'_>, ty: &hir::Ty<'_>) -> Option<String> {\n+    if let TyKind::Path(QPath::Resolved(_, path)) = &ty.kind {\n+        match path.res {\n+            Res::Def(_, def_id) if cx.tcx.has_attr(def_id, sym::rustc_pass_by_value) => {\n+                let name = cx.tcx.item_name(def_id).to_ident_string();\n+                let path_segment = path.segments.last().unwrap();\n+                return Some(format!(\"{}{}\", name, gen_args(cx, path_segment)));\n+            }\n+            Res::SelfTy(None, Some((did, _))) => {\n+                if let ty::Adt(adt, substs) = cx.tcx.type_of(did).kind() {\n+                    if cx.tcx.has_attr(adt.did, sym::rustc_pass_by_value) {\n+                        return Some(cx.tcx.def_path_str_with_substs(adt.did, substs));\n+                    }\n+                }\n+            }\n+            _ => (),\n+        }\n+    }\n+\n+    None\n+}\n+\n+fn gen_args(cx: &LateContext<'_>, segment: &PathSegment<'_>) -> String {\n+    if let Some(args) = &segment.args {\n+        let params = args\n+            .args\n+            .iter()\n+            .map(|arg| match arg {\n+                GenericArg::Lifetime(lt) => lt.name.ident().to_string(),\n+                GenericArg::Type(ty) => {\n+                    cx.tcx.sess.source_map().span_to_snippet(ty.span).unwrap_or_default()\n+                }\n+                GenericArg::Const(c) => {\n+                    cx.tcx.sess.source_map().span_to_snippet(c.span).unwrap_or_default()\n+                }\n+                GenericArg::Infer(_) => String::from(\"_\"),\n+            })\n+            .collect::<Vec<_>>();\n+\n+        if !params.is_empty() {\n+            return format!(\"<{}>\", params.join(\", \"));\n+        }\n+    }\n+\n+    String::new()\n+}"}, {"sha": "e7b99995ca4aecca6a3587915600fb0ee06e7a5f", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -961,6 +961,7 @@ pub struct FreeRegionInfo {\n /// [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/ty.html\n #[derive(Copy, Clone)]\n #[rustc_diagnostic_item = \"TyCtxt\"]\n+#[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n pub struct TyCtxt<'tcx> {\n     gcx: &'tcx GlobalCtxt<'tcx>,\n }"}, {"sha": "d6e89e52b95ed45f37f7eb84ebad6ff90a96bba2", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -464,6 +464,7 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TyS<'tcx> {\n }\n \n #[rustc_diagnostic_item = \"Ty\"]\n+#[cfg_attr(not(bootstrap), rustc_pass_by_value)]\n pub type Ty<'tcx> = &'tcx TyS<'tcx>;\n \n impl ty::EarlyBoundRegion {"}, {"sha": "612d4508565129a2342d014e0c8d1b4a5d696712", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -1,5 +1,5 @@\n use super::pat::Expected;\n-use super::ty::AllowPlus;\n+use super::ty::{AllowPlus, IsAsCast};\n use super::{\n     BlockMode, Parser, PathStyle, RecoverColon, RecoverComma, Restrictions, SemiColonMode, SeqSep,\n     TokenExpectType, TokenType,\n@@ -1032,6 +1032,34 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Swift lets users write `Ty?` to mean `Option<Ty>`. Parse the construct and recover from it.\n+    pub(super) fn maybe_recover_from_question_mark(\n+        &mut self,\n+        ty: P<Ty>,\n+        is_as_cast: IsAsCast,\n+    ) -> P<Ty> {\n+        if let IsAsCast::Yes = is_as_cast {\n+            return ty;\n+        }\n+        if self.token == token::Question {\n+            self.bump();\n+            self.struct_span_err(self.prev_token.span, \"invalid `?` in type\")\n+                .span_label(self.prev_token.span, \"`?` is only allowed on expressions, not types\")\n+                .multipart_suggestion(\n+                    \"if you meant to express that the type might not contain a value, use the `Option` wrapper type\",\n+                    vec![\n+                        (ty.span.shrink_to_lo(), \"Option<\".to_string()),\n+                        (self.prev_token.span, \">\".to_string()),\n+                    ],\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+            self.mk_ty(ty.span.to(self.prev_token.span), TyKind::Err)\n+        } else {\n+            ty\n+        }\n+    }\n+\n     pub(super) fn maybe_recover_from_bad_type_plus(\n         &mut self,\n         allow_plus: AllowPlus,"}, {"sha": "cd3846d5a224ef33934f5192650515c41ce22020", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -682,7 +682,7 @@ impl<'a> Parser<'a> {\n         // Save the state of the parser before parsing type normally, in case there is a\n         // LessThan comparison after this cast.\n         let parser_snapshot_before_type = self.clone();\n-        let cast_expr = match self.parse_ty_no_plus() {\n+        let cast_expr = match self.parse_as_cast_ty() {\n             Ok(rhs) => mk_expr(self, lhs, rhs),\n             Err(mut type_err) => {\n                 // Rewind to before attempting to parse the type with generics, to recover\n@@ -808,7 +808,7 @@ impl<'a> Parser<'a> {\n                 \"casts cannot be followed by {}\",\n                 match with_postfix.kind {\n                     ExprKind::Index(_, _) => \"indexing\",\n-                    ExprKind::Try(_) => \"?\",\n+                    ExprKind::Try(_) => \"`?`\",\n                     ExprKind::Field(_, _) => \"a field access\",\n                     ExprKind::MethodCall(_, _, _) => \"a method call\",\n                     ExprKind::Call(_, _) => \"a function call\","}, {"sha": "566b77a5e9e555f841b8010f72619ec5ad1738eb", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -44,6 +44,11 @@ pub(super) enum RecoverQPath {\n     No,\n }\n \n+pub(super) enum IsAsCast {\n+    Yes,\n+    No,\n+}\n+\n /// Signals whether parsing a type should recover `->`.\n ///\n /// More specifically, when parsing a function like:\n@@ -100,6 +105,7 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n             None,\n+            IsAsCast::No,\n         )\n     }\n \n@@ -113,6 +119,7 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n             Some(ty_params),\n+            IsAsCast::No,\n         )\n     }\n \n@@ -126,6 +133,7 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n             None,\n+            IsAsCast::No,\n         )\n     }\n \n@@ -142,9 +150,22 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n             None,\n+            IsAsCast::No,\n         )\n     }\n \n+    /// Parses a type following an `as` cast. Similar to `parse_ty_no_plus`, but signaling origin\n+    /// for better diagnostics involving `?`.\n+    pub(super) fn parse_as_cast_ty(&mut self) -> PResult<'a, P<Ty>> {\n+        self.parse_ty_common(\n+            AllowPlus::No,\n+            AllowCVariadic::No,\n+            RecoverQPath::Yes,\n+            RecoverReturnSign::Yes,\n+            None,\n+            IsAsCast::Yes,\n+        )\n+    }\n     /// Parse a type without recovering `:` as `->` to avoid breaking code such as `where fn() : for<'a>`\n     pub(super) fn parse_ty_for_where_clause(&mut self) -> PResult<'a, P<Ty>> {\n         self.parse_ty_common(\n@@ -153,6 +174,7 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::OnlyFatArrow,\n             None,\n+            IsAsCast::No,\n         )\n     }\n \n@@ -171,6 +193,7 @@ impl<'a> Parser<'a> {\n                 recover_qpath,\n                 recover_return_sign,\n                 None,\n+                IsAsCast::No,\n             )?;\n             FnRetTy::Ty(ty)\n         } else if recover_return_sign.can_recover(&self.token.kind) {\n@@ -191,6 +214,7 @@ impl<'a> Parser<'a> {\n                 recover_qpath,\n                 recover_return_sign,\n                 None,\n+                IsAsCast::No,\n             )?;\n             FnRetTy::Ty(ty)\n         } else {\n@@ -205,6 +229,7 @@ impl<'a> Parser<'a> {\n         recover_qpath: RecoverQPath,\n         recover_return_sign: RecoverReturnSign,\n         ty_generics: Option<&Generics>,\n+        is_as_cast: IsAsCast,\n     ) -> PResult<'a, P<Ty>> {\n         let allow_qpath_recovery = recover_qpath == RecoverQPath::Yes;\n         maybe_recover_from_interpolated_ty_qpath!(self, allow_qpath_recovery);\n@@ -280,6 +305,7 @@ impl<'a> Parser<'a> {\n         // Try to recover from use of `+` with incorrect priority.\n         self.maybe_report_ambiguous_plus(allow_plus, impl_dyn_multi, &ty);\n         self.maybe_recover_from_bad_type_plus(allow_plus, &ty)?;\n+        let ty = self.maybe_recover_from_question_mark(ty, is_as_cast);\n         self.maybe_recover_from_bad_qpath(ty, allow_qpath_recovery)\n     }\n "}, {"sha": "41d4d5115a47cc1528b8b1df96cd6522dd583555", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -114,6 +114,7 @@ impl CheckAttrVisitor<'_> {\n                 }\n                 sym::must_not_suspend => self.check_must_not_suspend(&attr, span, target),\n                 sym::must_use => self.check_must_use(hir_id, &attr, span, target),\n+                sym::rustc_pass_by_value => self.check_pass_by_value(&attr, span, target),\n                 sym::rustc_const_unstable\n                 | sym::rustc_const_stable\n                 | sym::unstable\n@@ -1066,6 +1067,24 @@ impl CheckAttrVisitor<'_> {\n         is_valid\n     }\n \n+    /// Warns against some misuses of `#[pass_by_value]`\n+    fn check_pass_by_value(&self, attr: &Attribute, span: &Span, target: Target) -> bool {\n+        match target {\n+            Target::Struct | Target::Enum | Target::TyAlias => true,\n+            _ => {\n+                self.tcx\n+                    .sess\n+                    .struct_span_err(\n+                        attr.span,\n+                        \"`pass_by_value` attribute should be applied to a struct, enum or type alias.\",\n+                    )\n+                    .span_label(*span, \"is not a struct, enum or type alias\")\n+                    .emit();\n+                false\n+            }\n+        }\n+    }\n+\n     /// Warns against some misuses of `#[must_use]`\n     fn check_must_use(\n         &self,"}, {"sha": "14ac286476ca9205376f79829c441b618208ecc7", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -336,8 +336,10 @@ symbols! {\n         asm_sym,\n         asm_unwind,\n         assert,\n+        assert_eq_macro,\n         assert_inhabited,\n         assert_macro,\n+        assert_ne_macro,\n         assert_receiver_is_total_eq,\n         assert_uninit_valid,\n         assert_zero_valid,\n@@ -407,6 +409,7 @@ symbols! {\n         cfg_doctest,\n         cfg_eval,\n         cfg_hide,\n+        cfg_macro,\n         cfg_panic,\n         cfg_sanitize,\n         cfg_target_abi,\n@@ -434,15 +437,18 @@ symbols! {\n         coerce_unsized,\n         cold,\n         column,\n+        column_macro,\n         compare_and_swap,\n         compare_exchange,\n         compare_exchange_weak,\n         compile_error,\n+        compile_error_macro,\n         compiler_builtins,\n         compiler_fence,\n         concat,\n         concat_bytes,\n         concat_idents,\n+        concat_macro,\n         conservative_impl_trait,\n         console,\n         const_allocate,\n@@ -522,10 +528,13 @@ symbols! {\n         custom_inner_attributes,\n         custom_test_frameworks,\n         d,\n+        dbg_macro,\n         dead_code,\n         dealloc,\n         debug,\n+        debug_assert_eq_macro,\n         debug_assert_macro,\n+        debug_assert_ne_macro,\n         debug_assertions,\n         debug_struct,\n         debug_trait_builder,\n@@ -597,6 +606,9 @@ symbols! {\n         encode,\n         end,\n         env,\n+        env_macro,\n+        eprint_macro,\n+        eprintln_macro,\n         eq,\n         ermsb_target_feature,\n         exact_div,\n@@ -644,6 +656,7 @@ symbols! {\n         field,\n         field_init_shorthand,\n         file,\n+        file_macro,\n         fill,\n         finish,\n         flags,\n@@ -666,6 +679,7 @@ symbols! {\n         format,\n         format_args,\n         format_args_capture,\n+        format_args_macro,\n         format_args_nl,\n         format_macro,\n         freeze,\n@@ -732,7 +746,10 @@ symbols! {\n         in_band_lifetimes,\n         include,\n         include_bytes,\n+        include_bytes_macro,\n+        include_macro,\n         include_str,\n+        include_str_macro,\n         inclusive_range_syntax,\n         index,\n         index_mut,\n@@ -780,6 +797,7 @@ symbols! {\n         lifetime,\n         likely,\n         line,\n+        line_macro,\n         link,\n         link_args,\n         link_cfg,\n@@ -823,6 +841,7 @@ symbols! {\n         masked,\n         match_beginning_vert,\n         match_default_bindings,\n+        matches_macro,\n         maxnumf32,\n         maxnumf64,\n         may_dangle,\n@@ -859,6 +878,7 @@ symbols! {\n         modifiers,\n         module,\n         module_path,\n+        module_path_macro,\n         more_qualified_paths,\n         more_struct_aliases,\n         movbe_target_feature,\n@@ -942,6 +962,7 @@ symbols! {\n         optin_builtin_traits,\n         option,\n         option_env,\n+        option_env_macro,\n         options,\n         or,\n         or_patterns,\n@@ -1005,6 +1026,8 @@ symbols! {\n         prelude_import,\n         preserves_flags,\n         primitive,\n+        print_macro,\n+        println_macro,\n         proc_dash_macro: \"proc-macro\",\n         proc_macro,\n         proc_macro_attribute,\n@@ -1147,6 +1170,7 @@ symbols! {\n         rustc_paren_sugar,\n         rustc_partition_codegened,\n         rustc_partition_reused,\n+        rustc_pass_by_value,\n         rustc_peek,\n         rustc_peek_definite_init,\n         rustc_peek_liveness,\n@@ -1292,6 +1316,7 @@ symbols! {\n         str,\n         str_alloc,\n         stringify,\n+        stringify_macro,\n         struct_field_attributes,\n         struct_inherit,\n         struct_variant,\n@@ -1335,6 +1360,8 @@ symbols! {\n         then_with,\n         thread,\n         thread_local,\n+        thread_local_macro,\n+        todo_macro,\n         tool_attributes,\n         tool_lints,\n         trace_macros,\n@@ -1385,6 +1412,7 @@ symbols! {\n         underscore_imports,\n         underscore_lifetimes,\n         uniform_paths,\n+        unimplemented_macro,\n         unit,\n         universal_impl_trait,\n         unix,\n@@ -1393,6 +1421,7 @@ symbols! {\n         unpin,\n         unreachable,\n         unreachable_code,\n+        unreachable_macro,\n         unrestricted_attribute_tokens,\n         unsafe_block_in_unsafe_fn,\n         unsafe_cell,\n@@ -1423,6 +1452,7 @@ symbols! {\n         var,\n         variant_count,\n         vec,\n+        vec_macro,\n         version,\n         vis,\n         visible_private_types,\n@@ -1447,7 +1477,9 @@ symbols! {\n         wrapping_sub,\n         wreg,\n         write_bytes,\n+        write_macro,\n         write_str,\n+        writeln_macro,\n         x87_reg,\n         xer,\n         xmm_reg,"}, {"sha": "3e3a6ac82a439ba80e2be3dd44afa4d6219c1b63", "filename": "compiler/rustc_target/src/spec/armv6k_nintendo_3ds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Farmv6k_nintendo_3ds.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -36,6 +36,7 @@ pub fn target() -> Target {\n             features: \"+vfp2\".to_string(),\n             pre_link_args,\n             exe_suffix: \".elf\".to_string(),\n+            no_default_libraries: false,\n             ..Default::default()\n         },\n     }"}, {"sha": "669b6023397ee03f7f253601b51c6ac2ddcf534f", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -206,7 +206,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             })?);\n \n             if let ty::Projection(..) = placeholder_self_ty.kind() {\n-                for predicate in tcx.predicates_of(def_id).instantiate_own(tcx, substs).predicates {\n+                let predicates = tcx.predicates_of(def_id).instantiate_own(tcx, substs).predicates;\n+                debug!(?predicates, \"projection predicates\");\n+                for predicate in predicates {\n                     let normalized = normalize_with_depth_to(\n                         self,\n                         obligation.param_env,"}, {"sha": "794b9356e7c28df02b1bc3f1dce5df8b776fee9a", "filename": "library/alloc/src/collections/btree/map.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -34,7 +34,7 @@ pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n // An empty map is represented either by the absence of a root node or by a\n // root node that is an empty leaf.\n \n-/// A map based on a [B-Tree].\n+/// An ordered map based on a [B-Tree].\n ///\n /// B-Trees represent a fundamental compromise between cache-efficiency and actually minimizing\n /// the amount of work performed in a search. In theory, a binary search tree (BST) is the optimal\n@@ -68,6 +68,10 @@ pub(super) const MIN_LEN: usize = node::MIN_LEN_AFTER_SPLIT;\n /// incorrect results, aborts, memory leaks, or non-termination) but will not be undefined\n /// behavior.\n ///\n+/// Iterators obtained from functions such as [`BTreeMap::iter`], [`BTreeMap::values`], or\n+/// [`BTreeMap::keys`] produce their items in order by key, and take worst-case logarithmic and\n+/// amortized constant time per item returned.\n+///\n /// [B-Tree]: https://en.wikipedia.org/wiki/B-tree\n /// [`Cell`]: core::cell::Cell\n /// [`RefCell`]: core::cell::RefCell"}, {"sha": "31df4e98ed746884fca583ba22b16855cd476406", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -15,7 +15,7 @@ use super::Recover;\n \n // FIXME(conventions): implement bounded iterators\n \n-/// A set based on a B-Tree.\n+/// An ordered set based on a B-Tree.\n ///\n /// See [`BTreeMap`]'s documentation for a detailed discussion of this collection's performance\n /// benefits and drawbacks.\n@@ -27,6 +27,9 @@ use super::Recover;\n /// incorrect results, aborts, memory leaks, or non-termination) but will not be undefined\n /// behavior.\n ///\n+/// Iterators returned by [`BTreeSet::iter`] produce their items in order, and take worst-case\n+/// logarithmic and amortized constant time per item returned.\n+///\n /// [`Ord`]: core::cmp::Ord\n /// [`Cell`]: core::cell::Cell\n /// [`RefCell`]: core::cell::RefCell"}, {"sha": "628a5b155673c9cc1cb9f4ce72799b2bc926e9ea", "filename": "library/alloc/src/collections/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fmod.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -14,15 +14,15 @@ pub mod vec_deque;\n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod btree_map {\n-    //! A map based on a B-Tree.\n+    //! An ordered map based on a B-Tree.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::btree::map::*;\n }\n \n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub mod btree_set {\n-    //! A set based on a B-Tree.\n+    //! An ordered set based on a B-Tree.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub use super::btree::set::*;\n }"}, {"sha": "d3e9e65c3fe57b493001b6c77c9afc99287ff126", "filename": "library/alloc/src/macros.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/library%2Falloc%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/library%2Falloc%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fmacros.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -37,6 +37,7 @@\n #[cfg(not(test))]\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_diagnostic_item = \"vec_macro\"]\n #[allow_internal_unstable(box_syntax, liballoc_internals)]\n macro_rules! vec {\n     () => ("}, {"sha": "d5cda360bba3ae962e9c721e2ac1c11bf329078d", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -31,6 +31,7 @@ macro_rules! panic {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"assert_eq_macro\")]\n #[allow_internal_unstable(core_panic)]\n macro_rules! assert_eq {\n     ($left:expr, $right:expr $(,)?) => ({\n@@ -80,6 +81,7 @@ macro_rules! assert_eq {\n /// ```\n #[macro_export]\n #[stable(feature = \"assert_ne\", since = \"1.13.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"assert_ne_macro\")]\n #[allow_internal_unstable(core_panic)]\n macro_rules! assert_ne {\n     ($left:expr, $right:expr $(,)?) => ({\n@@ -236,6 +238,7 @@ macro_rules! debug_assert {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"debug_assert_eq_macro\")]\n macro_rules! debug_assert_eq {\n     ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert_eq!($($arg)*); })\n }\n@@ -261,6 +264,7 @@ macro_rules! debug_assert_eq {\n /// ```\n #[macro_export]\n #[stable(feature = \"assert_ne\", since = \"1.13.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"debug_assert_ne_macro\")]\n macro_rules! debug_assert_ne {\n     ($($arg:tt)*) => (if $crate::cfg!(debug_assertions) { $crate::assert_ne!($($arg)*); })\n }\n@@ -320,6 +324,7 @@ pub macro debug_assert_matches($($arg:tt)*) {\n /// ```\n #[macro_export]\n #[stable(feature = \"matches_macro\", since = \"1.42.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"matches_macro\")]\n macro_rules! matches {\n     ($expression:expr, $(|)? $( $pattern:pat_param )|+ $( if $guard: expr )? $(,)?) => {\n         match $expression {\n@@ -475,6 +480,7 @@ macro_rules! r#try {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"write_macro\")]\n macro_rules! write {\n     ($dst:expr, $($arg:tt)*) => ($dst.write_fmt($crate::format_args!($($arg)*)))\n }\n@@ -525,6 +531,7 @@ macro_rules! write {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"writeln_macro\")]\n #[allow_internal_unstable(format_args_nl)]\n macro_rules! writeln {\n     ($dst:expr $(,)?) => (\n@@ -589,6 +596,7 @@ macro_rules! writeln {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"unreachable_macro\")]\n #[allow_internal_unstable(core_panic)]\n macro_rules! unreachable {\n     () => ({\n@@ -675,6 +683,7 @@ macro_rules! unreachable {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"unimplemented_macro\")]\n #[allow_internal_unstable(core_panic)]\n macro_rules! unimplemented {\n     () => ($crate::panicking::panic(\"not implemented\"));\n@@ -737,6 +746,7 @@ macro_rules! unimplemented {\n /// ```\n #[macro_export]\n #[stable(feature = \"todo_macro\", since = \"1.40.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"todo_macro\")]\n #[allow_internal_unstable(core_panic)]\n macro_rules! todo {\n     () => ($crate::panicking::panic(\"not yet implemented\"));\n@@ -786,6 +796,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"compile_error_macro\", since = \"1.20.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"compile_error_macro\")]\n     macro_rules! compile_error {\n         ($msg:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n@@ -835,6 +846,7 @@ pub(crate) mod builtin {\n     /// assert_eq!(s, format!(\"hello {}\", \"world\"));\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"format_args_macro\")]\n     #[allow_internal_unsafe]\n     #[allow_internal_unstable(fmt_internals)]\n     #[rustc_builtin_macro]\n@@ -905,6 +917,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"env_macro\")]\n     macro_rules! env {\n         ($name:expr $(,)?) => {{ /* compiler built-in */ }};\n         ($name:expr, $error_msg:expr $(,)?) => {{ /* compiler built-in */ }};\n@@ -930,6 +943,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"option_env_macro\")]\n     macro_rules! option_env {\n         ($name:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n@@ -1015,6 +1029,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"concat_macro\")]\n     macro_rules! concat {\n         ($($e:expr),* $(,)?) => {{ /* compiler built-in */ }};\n     }\n@@ -1040,6 +1055,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"line_macro\")]\n     macro_rules! line {\n         () => {\n             /* compiler built-in */\n@@ -1079,6 +1095,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"column_macro\")]\n     macro_rules! column {\n         () => {\n             /* compiler built-in */\n@@ -1104,6 +1121,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"file_macro\")]\n     macro_rules! file {\n         () => {\n             /* compiler built-in */\n@@ -1128,6 +1146,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"stringify_macro\")]\n     macro_rules! stringify {\n         ($($t:tt)*) => {\n             /* compiler built-in */\n@@ -1169,6 +1188,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"include_str_macro\")]\n     macro_rules! include_str {\n         ($file:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n@@ -1208,6 +1228,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"include_bytes_macro\")]\n     macro_rules! include_bytes {\n         ($file:expr $(,)?) => {{ /* compiler built-in */ }};\n     }\n@@ -1232,6 +1253,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"module_path_macro\")]\n     macro_rules! module_path {\n         () => {\n             /* compiler built-in */\n@@ -1265,6 +1287,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"cfg_macro\")]\n     macro_rules! cfg {\n         ($($cfg:tt)*) => {\n             /* compiler built-in */\n@@ -1315,6 +1338,7 @@ pub(crate) mod builtin {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[rustc_builtin_macro]\n     #[macro_export]\n+    #[cfg_attr(not(test), rustc_diagnostic_item = \"include_macro\")]\n     macro_rules! include {\n         ($file:expr $(,)?) => {{ /* compiler built-in */ }};\n     }"}, {"sha": "23cbfaeef485ab0711b0f85b12d2bb4fc317f204", "filename": "library/std/src/macros.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/library%2Fstd%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/library%2Fstd%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fmacros.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -57,6 +57,7 @@ macro_rules! panic {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"print_macro\")]\n #[allow_internal_unstable(print_internals)]\n macro_rules! print {\n     ($($arg:tt)*) => ($crate::io::_print($crate::format_args!($($arg)*)));\n@@ -90,6 +91,7 @@ macro_rules! print {\n /// ```\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"println_macro\")]\n #[allow_internal_unstable(print_internals, format_args_nl)]\n macro_rules! println {\n     () => ($crate::print!(\"\\n\"));\n@@ -121,6 +123,7 @@ macro_rules! println {\n /// ```\n #[macro_export]\n #[stable(feature = \"eprint\", since = \"1.19.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"eprint_macro\")]\n #[allow_internal_unstable(print_internals)]\n macro_rules! eprint {\n     ($($arg:tt)*) => ($crate::io::_eprint($crate::format_args!($($arg)*)));\n@@ -149,6 +152,7 @@ macro_rules! eprint {\n /// ```\n #[macro_export]\n #[stable(feature = \"eprint\", since = \"1.19.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"eprintln_macro\")]\n #[allow_internal_unstable(print_internals, format_args_nl)]\n macro_rules! eprintln {\n     () => ($crate::eprint!(\"\\n\"));\n@@ -282,6 +286,7 @@ macro_rules! eprintln {\n /// [`debug!`]: https://docs.rs/log/*/log/macro.debug.html\n /// [`log`]: https://crates.io/crates/log\n #[macro_export]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"dbg_macro\")]\n #[stable(feature = \"dbg_macro\", since = \"1.32.0\")]\n macro_rules! dbg {\n     // NOTE: We cannot use `concat!` to make a static string as a format argument"}, {"sha": "1be3ed757ba295c97ebf613d2ff38563e1c3f4f8", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -142,6 +142,7 @@ impl<T: 'static> fmt::Debug for LocalKey<T> {\n /// [`std::thread::LocalKey`]: crate::thread::LocalKey\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg_attr(not(test), rustc_diagnostic_item = \"thread_local_macro\")]\n #[allow_internal_unstable(thread_local_internals)]\n macro_rules! thread_local {\n     // empty (base case for the recursion)"}, {"sha": "1544fae962cb497f954b5bac7b3f89e600f04e01", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 171, "deletions": 158, "changes": 329, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -6,13 +6,12 @@ use rustc_ast as ast;\n use rustc_data_structures::{fx::FxHashMap, stable_set::FxHashSet};\n use rustc_errors::{Applicability, DiagnosticBuilder};\n use rustc_expand::base::SyntaxExtensionKind;\n-use rustc_hir as hir;\n use rustc_hir::def::{\n     DefKind,\n     Namespace::{self, *},\n     PerNS,\n };\n-use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_ID};\n use rustc_middle::ty::{DefIdTree, Ty, TyCtxt};\n use rustc_middle::{bug, span_bug, ty};\n use rustc_resolve::ParentScope;\n@@ -109,6 +108,45 @@ impl Res {\n             Res::Primitive(_) => None,\n         }\n     }\n+\n+    /// Used for error reporting.\n+    fn disambiguator_suggestion(self) -> Suggestion {\n+        let kind = match self {\n+            Res::Primitive(_) => return Suggestion::Prefix(\"prim\"),\n+            Res::Def(kind, _) => kind,\n+        };\n+        if kind == DefKind::Macro(MacroKind::Bang) {\n+            return Suggestion::Macro;\n+        } else if kind == DefKind::Fn || kind == DefKind::AssocFn {\n+            return Suggestion::Function;\n+        } else if kind == DefKind::Field {\n+            return Suggestion::RemoveDisambiguator;\n+        }\n+\n+        let prefix = match kind {\n+            DefKind::Struct => \"struct\",\n+            DefKind::Enum => \"enum\",\n+            DefKind::Trait => \"trait\",\n+            DefKind::Union => \"union\",\n+            DefKind::Mod => \"mod\",\n+            DefKind::Const | DefKind::ConstParam | DefKind::AssocConst | DefKind::AnonConst => {\n+                \"const\"\n+            }\n+            DefKind::Static => \"static\",\n+            DefKind::Macro(MacroKind::Derive) => \"derive\",\n+            // Now handle things that don't have a specific disambiguator\n+            _ => match kind\n+                .ns()\n+                .expect(\"tried to calculate a disambiguator for a def without a namespace?\")\n+            {\n+                Namespace::TypeNS => \"type\",\n+                Namespace::ValueNS => \"value\",\n+                Namespace::MacroNS => \"macro\",\n+            },\n+        };\n+\n+        Suggestion::Prefix(prefix)\n+    }\n }\n \n impl TryFrom<ResolveRes> for Res {\n@@ -346,7 +384,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n     /// In particular, this will return an error whenever there aren't three\n     /// full path segments left in the link.\n     ///\n-    /// [enum struct variant]: hir::VariantData::Struct\n+    /// [enum struct variant]: rustc_hir::VariantData::Struct\n     fn variant_field<'path>(\n         &self,\n         path_str: &'path str,\n@@ -667,10 +705,8 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         }))\n     }\n \n-    /// Returns:\n-    /// - None if no associated item was found\n-    /// - Some((_, _, Some(_))) if an item was found and should go through a side channel\n-    /// - Some((_, _, None)) otherwise\n+    /// Resolve an associated item, returning its containing page's `Res`\n+    /// and the fragment targeting the associated item on its page.\n     fn resolve_associated_item(\n         &mut self,\n         root_res: Res,\n@@ -903,7 +939,18 @@ fn traits_implemented_by<'a>(\n                 ty\n             );\n             // Fast path: if this is a primitive simple `==` will work\n-            let saw_impl = impl_type == ty;\n+            // NOTE: the `match` is necessary; see #92662.\n+            // this allows us to ignore generics because the user input\n+            // may not include the generic placeholders\n+            // e.g. this allows us to match Foo (user comment) with Foo<T> (actual type)\n+            let saw_impl = impl_type == ty\n+                || match (impl_type.kind(), ty.kind()) {\n+                    (ty::Adt(impl_def, _), ty::Adt(ty_def, _)) => {\n+                        debug!(\"impl def_id: {:?}, ty def_id: {:?}\", impl_def.did, ty_def.did);\n+                        impl_def.did == ty_def.did\n+                    }\n+                    _ => false,\n+                };\n \n             if saw_impl { Some(trait_) } else { None }\n         })\n@@ -958,17 +1005,7 @@ impl<'a, 'tcx> DocVisitor for LinkCollector<'a, 'tcx> {\n             {\n                 self.cx.tcx.parent(did)\n             }\n-            Some(did) => match self.cx.tcx.parent(did) {\n-                // HACK(jynelson): `clean` marks associated types as `TypedefItem`, not as `AssocTypeItem`.\n-                // Fixing this breaks `fn render_deref_methods`.\n-                // As a workaround, see if the parent of the item is an `impl`; if so this must be an associated item,\n-                // regardless of what rustdoc wants to call it.\n-                Some(parent) => {\n-                    let parent_kind = self.cx.tcx.def_kind(parent);\n-                    Some(if parent_kind == DefKind::Impl { parent } else { did })\n-                }\n-                None => Some(did),\n-            },\n+            Some(did) => Some(did),\n         };\n \n         // FIXME(jynelson): this shouldn't go through stringification, rustdoc should just use the DefId directly\n@@ -1277,79 +1314,9 @@ impl LinkCollector<'_, '_> {\n             }\n         }\n \n-        let report_mismatch = |specified: Disambiguator, resolved: Disambiguator| {\n-            // The resolved item did not match the disambiguator; give a better error than 'not found'\n-            let msg = format!(\"incompatible link kind for `{}`\", path_str);\n-            let callback = |diag: &mut DiagnosticBuilder<'_>, sp: Option<rustc_span::Span>| {\n-                let note = format!(\n-                    \"this link resolved to {} {}, which is not {} {}\",\n-                    resolved.article(),\n-                    resolved.descr(),\n-                    specified.article(),\n-                    specified.descr()\n-                );\n-                if let Some(sp) = sp {\n-                    diag.span_label(sp, &note);\n-                } else {\n-                    diag.note(&note);\n-                }\n-                suggest_disambiguator(resolved, diag, path_str, &ori_link.link, sp);\n-            };\n-            report_diagnostic(self.cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, &diag_info, callback);\n-        };\n-\n-        let verify = |kind: DefKind, id: DefId| {\n-            let (kind, id) = if let Some(UrlFragment::Item(ItemFragment(_, id))) = fragment {\n-                (self.cx.tcx.def_kind(id), id)\n-            } else {\n-                (kind, id)\n-            };\n-            debug!(\"intra-doc link to {} resolved to {:?} (id: {:?})\", path_str, res, id);\n-\n-            // Disallow e.g. linking to enums with `struct@`\n-            debug!(\"saw kind {:?} with disambiguator {:?}\", kind, disambiguator);\n-            match (kind, disambiguator) {\n-                | (DefKind::Const | DefKind::ConstParam | DefKind::AssocConst | DefKind::AnonConst, Some(Disambiguator::Kind(DefKind::Const)))\n-                // NOTE: this allows 'method' to mean both normal functions and associated functions\n-                // This can't cause ambiguity because both are in the same namespace.\n-                | (DefKind::Fn | DefKind::AssocFn, Some(Disambiguator::Kind(DefKind::Fn)))\n-                // These are namespaces; allow anything in the namespace to match\n-                | (_, Some(Disambiguator::Namespace(_)))\n-                // If no disambiguator given, allow anything\n-                | (_, None)\n-                // All of these are valid, so do nothing\n-                => {}\n-                (actual, Some(Disambiguator::Kind(expected))) if actual == expected => {}\n-                (_, Some(specified @ Disambiguator::Kind(_) | specified @ Disambiguator::Primitive)) => {\n-                    report_mismatch(specified, Disambiguator::Kind(kind));\n-                    return None;\n-                }\n-            }\n-\n-            // item can be non-local e.g. when using #[doc(primitive = \"pointer\")]\n-            if let Some((src_id, dst_id)) = id\n-                .as_local()\n-                // The `expect_def_id()` should be okay because `local_def_id_to_hir_id`\n-                // would presumably panic if a fake `DefIndex` were passed.\n-                .and_then(|dst_id| {\n-                    item.def_id.expect_def_id().as_local().map(|src_id| (src_id, dst_id))\n-                })\n-            {\n-                if self.cx.tcx.privacy_access_levels(()).is_exported(src_id)\n-                    && !self.cx.tcx.privacy_access_levels(()).is_exported(dst_id)\n-                {\n-                    privacy_error(self.cx, &diag_info, path_str);\n-                }\n-            }\n-\n-            Some(())\n-        };\n-\n         match res {\n             Res::Primitive(prim) => {\n                 if let Some(UrlFragment::Item(ItemFragment(_, id))) = fragment {\n-                    let kind = self.cx.tcx.def_kind(id);\n-\n                     // We're actually resolving an associated item of a primitive, so we need to\n                     // verify the disambiguator (if any) matches the type of the associated item.\n                     // This case should really follow the same flow as the `Res::Def` branch below,\n@@ -1358,7 +1325,16 @@ impl LinkCollector<'_, '_> {\n                     // doesn't allow statements like `use str::trim;`, making this a (hopefully)\n                     // valid omission. See https://github.com/rust-lang/rust/pull/80660#discussion_r551585677\n                     // for discussion on the matter.\n-                    verify(kind, id)?;\n+                    let kind = self.cx.tcx.def_kind(id);\n+                    self.verify_disambiguator(\n+                        path_str,\n+                        &ori_link,\n+                        kind,\n+                        id,\n+                        disambiguator,\n+                        item,\n+                        &diag_info,\n+                    )?;\n \n                     // FIXME: it would be nice to check that the feature gate was enabled in the original crate, not just ignore it altogether.\n                     // However I'm not sure how to check that across crates.\n@@ -1372,7 +1348,9 @@ impl LinkCollector<'_, '_> {\n                     match disambiguator {\n                         Some(Disambiguator::Primitive | Disambiguator::Namespace(_)) | None => {}\n                         Some(other) => {\n-                            report_mismatch(other, Disambiguator::Primitive);\n+                            self.report_disambiguator_mismatch(\n+                                path_str, &ori_link, other, res, &diag_info,\n+                            );\n                             return None;\n                         }\n                     }\n@@ -1386,13 +1364,106 @@ impl LinkCollector<'_, '_> {\n                 })\n             }\n             Res::Def(kind, id) => {\n-                verify(kind, id)?;\n+                let (kind_for_dis, id_for_dis) =\n+                    if let Some(UrlFragment::Item(ItemFragment(_, id))) = fragment {\n+                        (self.cx.tcx.def_kind(id), id)\n+                    } else {\n+                        (kind, id)\n+                    };\n+                self.verify_disambiguator(\n+                    path_str,\n+                    &ori_link,\n+                    kind_for_dis,\n+                    id_for_dis,\n+                    disambiguator,\n+                    item,\n+                    &diag_info,\n+                )?;\n                 let id = clean::register_res(self.cx, rustc_hir::def::Res::Def(kind, id));\n                 Some(ItemLink { link: ori_link.link, link_text, did: id, fragment })\n             }\n         }\n     }\n \n+    fn verify_disambiguator(\n+        &self,\n+        path_str: &str,\n+        ori_link: &MarkdownLink,\n+        kind: DefKind,\n+        id: DefId,\n+        disambiguator: Option<Disambiguator>,\n+        item: &Item,\n+        diag_info: &DiagnosticInfo<'_>,\n+    ) -> Option<()> {\n+        debug!(\"intra-doc link to {} resolved to {:?}\", path_str, (kind, id));\n+\n+        // Disallow e.g. linking to enums with `struct@`\n+        debug!(\"saw kind {:?} with disambiguator {:?}\", kind, disambiguator);\n+        match (kind, disambiguator) {\n+                | (DefKind::Const | DefKind::ConstParam | DefKind::AssocConst | DefKind::AnonConst, Some(Disambiguator::Kind(DefKind::Const)))\n+                // NOTE: this allows 'method' to mean both normal functions and associated functions\n+                // This can't cause ambiguity because both are in the same namespace.\n+                | (DefKind::Fn | DefKind::AssocFn, Some(Disambiguator::Kind(DefKind::Fn)))\n+                // These are namespaces; allow anything in the namespace to match\n+                | (_, Some(Disambiguator::Namespace(_)))\n+                // If no disambiguator given, allow anything\n+                | (_, None)\n+                // All of these are valid, so do nothing\n+                => {}\n+                (actual, Some(Disambiguator::Kind(expected))) if actual == expected => {}\n+                (_, Some(specified @ Disambiguator::Kind(_) | specified @ Disambiguator::Primitive)) => {\n+                    self.report_disambiguator_mismatch(path_str,ori_link,specified, Res::Def(kind, id),diag_info);\n+                    return None;\n+                }\n+            }\n+\n+        // item can be non-local e.g. when using #[doc(primitive = \"pointer\")]\n+        if let Some((src_id, dst_id)) = id\n+            .as_local()\n+            // The `expect_def_id()` should be okay because `local_def_id_to_hir_id`\n+            // would presumably panic if a fake `DefIndex` were passed.\n+            .and_then(|dst_id| {\n+                item.def_id.expect_def_id().as_local().map(|src_id| (src_id, dst_id))\n+            })\n+        {\n+            if self.cx.tcx.privacy_access_levels(()).is_exported(src_id)\n+                && !self.cx.tcx.privacy_access_levels(()).is_exported(dst_id)\n+            {\n+                privacy_error(self.cx, diag_info, path_str);\n+            }\n+        }\n+\n+        Some(())\n+    }\n+\n+    fn report_disambiguator_mismatch(\n+        &self,\n+        path_str: &str,\n+        ori_link: &MarkdownLink,\n+        specified: Disambiguator,\n+        resolved: Res,\n+        diag_info: &DiagnosticInfo<'_>,\n+    ) {\n+        // The resolved item did not match the disambiguator; give a better error than 'not found'\n+        let msg = format!(\"incompatible link kind for `{}`\", path_str);\n+        let callback = |diag: &mut DiagnosticBuilder<'_>, sp: Option<rustc_span::Span>| {\n+            let note = format!(\n+                \"this link resolved to {} {}, which is not {} {}\",\n+                resolved.article(),\n+                resolved.descr(),\n+                specified.article(),\n+                specified.descr(),\n+            );\n+            if let Some(sp) = sp {\n+                diag.span_label(sp, &note);\n+            } else {\n+                diag.note(&note);\n+            }\n+            suggest_disambiguator(resolved, diag, path_str, &ori_link.link, sp);\n+        };\n+        report_diagnostic(self.cx.tcx, BROKEN_INTRA_DOC_LINKS, &msg, &diag_info, callback);\n+    }\n+\n     fn report_rawptr_assoc_feature_gate(&self, dox: &str, ori_link: &MarkdownLink, item: &Item) {\n         let span =\n             super::source_span_for_markdown_range(self.cx.tcx, dox, &ori_link.range, &item.attrs)\n@@ -1413,7 +1484,6 @@ impl LinkCollector<'_, '_> {\n         diag: DiagnosticInfo<'_>,\n         cache_resolution_failure: bool,\n     ) -> Option<(Res, Option<UrlFragment>)> {\n-        // Try to look up both the result and the corresponding side channel value\n         if let Some(ref cached) = self.visited_links.get(&key) {\n             match cached {\n                 Some(cached) => {\n@@ -1686,53 +1756,6 @@ impl Disambiguator {\n         }\n     }\n \n-    fn from_res(res: Res) -> Self {\n-        match res {\n-            Res::Def(kind, _) => Disambiguator::Kind(kind),\n-            Res::Primitive(_) => Disambiguator::Primitive,\n-        }\n-    }\n-\n-    /// Used for error reporting.\n-    fn suggestion(self) -> Suggestion {\n-        let kind = match self {\n-            Disambiguator::Primitive => return Suggestion::Prefix(\"prim\"),\n-            Disambiguator::Kind(kind) => kind,\n-            Disambiguator::Namespace(_) => panic!(\"display_for cannot be used on namespaces\"),\n-        };\n-        if kind == DefKind::Macro(MacroKind::Bang) {\n-            return Suggestion::Macro;\n-        } else if kind == DefKind::Fn || kind == DefKind::AssocFn {\n-            return Suggestion::Function;\n-        } else if kind == DefKind::Field {\n-            return Suggestion::RemoveDisambiguator;\n-        }\n-\n-        let prefix = match kind {\n-            DefKind::Struct => \"struct\",\n-            DefKind::Enum => \"enum\",\n-            DefKind::Trait => \"trait\",\n-            DefKind::Union => \"union\",\n-            DefKind::Mod => \"mod\",\n-            DefKind::Const | DefKind::ConstParam | DefKind::AssocConst | DefKind::AnonConst => {\n-                \"const\"\n-            }\n-            DefKind::Static => \"static\",\n-            DefKind::Macro(MacroKind::Derive) => \"derive\",\n-            // Now handle things that don't have a specific disambiguator\n-            _ => match kind\n-                .ns()\n-                .expect(\"tried to calculate a disambiguator for a def without a namespace?\")\n-            {\n-                Namespace::TypeNS => \"type\",\n-                Namespace::ValueNS => \"value\",\n-                Namespace::MacroNS => \"macro\",\n-            },\n-        };\n-\n-        Suggestion::Prefix(prefix)\n-    }\n-\n     fn ns(self) -> Namespace {\n         match self {\n             Self::Namespace(n) => n,\n@@ -1754,9 +1777,9 @@ impl Disambiguator {\n     fn descr(self) -> &'static str {\n         match self {\n             Self::Namespace(n) => n.descr(),\n-            // HACK(jynelson): by looking at the source I saw the DefId we pass\n-            // for `expected.descr()` doesn't matter, since it's not a crate\n-            Self::Kind(k) => k.descr(DefId::local(hir::def_id::DefIndex::from_usize(0))),\n+            // HACK(jynelson): the source of `DefKind::descr` only uses the DefId for\n+            // printing \"module\" vs \"crate\" so using the wrong ID is not a huge problem\n+            Self::Kind(k) => k.descr(CRATE_DEF_ID.to_def_id()),\n             Self::Primitive => \"builtin type\",\n         }\n     }\n@@ -2080,16 +2103,7 @@ fn resolution_failure(\n                     ResolutionFailure::NotResolved { .. } => unreachable!(\"handled above\"),\n                     ResolutionFailure::Dummy => continue,\n                     ResolutionFailure::WrongNamespace { res, expected_ns } => {\n-                        if let Res::Def(kind, _) = res {\n-                            let disambiguator = Disambiguator::Kind(kind);\n-                            suggest_disambiguator(\n-                                disambiguator,\n-                                diag,\n-                                path_str,\n-                                diag_info.ori_link,\n-                                sp,\n-                            )\n-                        }\n+                        suggest_disambiguator(res, diag, path_str, diag_info.ori_link, sp);\n \n                         format!(\n                             \"this link resolves to {}, which is not in the {} namespace\",\n@@ -2224,23 +2238,22 @@ fn ambiguity_error(\n         }\n \n         for res in candidates {\n-            let disambiguator = Disambiguator::from_res(res);\n-            suggest_disambiguator(disambiguator, diag, path_str, diag_info.ori_link, sp);\n+            suggest_disambiguator(res, diag, path_str, diag_info.ori_link, sp);\n         }\n     });\n }\n \n /// In case of an ambiguity or mismatched disambiguator, suggest the correct\n /// disambiguator.\n fn suggest_disambiguator(\n-    disambiguator: Disambiguator,\n+    res: Res,\n     diag: &mut DiagnosticBuilder<'_>,\n     path_str: &str,\n     ori_link: &str,\n     sp: Option<rustc_span::Span>,\n ) {\n-    let suggestion = disambiguator.suggestion();\n-    let help = format!(\"to link to the {}, {}\", disambiguator.descr(), suggestion.descr());\n+    let suggestion = res.disambiguator_suggestion();\n+    let help = format!(\"to link to the {}, {}\", res.descr(), suggestion.descr());\n \n     if let Some(sp) = sp {\n         let mut spans = suggestion.as_help_span(path_str, ori_link, sp);"}, {"sha": "2d66566119bc3027accb42f24cf09c473ebd14bd", "filename": "src/test/rustdoc-ui/intra-doc/disambiguator-mismatch.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -73,4 +73,9 @@ trait T {}\n //~^ ERROR incompatible link kind for `f`\n //~| NOTE this link resolved\n //~| HELP add parentheses\n+\n+/// Link to [fn@std]\n+//~^ ERROR unresolved link to `std`\n+//~| NOTE this link resolves to the crate `std`\n+//~| HELP to link to the crate, prefix with `mod@`\n pub fn f() {}"}, {"sha": "ad9102c506f7fb792dc291b64071b9c3ff43da63", "filename": "src/test/rustdoc-ui/intra-doc/disambiguator-mismatch.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-doc%2Fdisambiguator-mismatch.stderr?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -138,5 +138,16 @@ LL - /// Link to [const@f]\n LL + /// Link to [f()]\n    | \n \n-error: aborting due to 12 previous errors\n+error: unresolved link to `std`\n+  --> $DIR/disambiguator-mismatch.rs:77:14\n+   |\n+LL | /// Link to [fn@std]\n+   |              ^^^^^^ this link resolves to the crate `std`, which is not in the value namespace\n+   |\n+help: to link to the crate, prefix with `mod@`\n+   |\n+LL | /// Link to [mod@std]\n+   |              ~~~~\n+\n+error: aborting due to 13 previous errors\n "}, {"sha": "ab088ab789d43b15d886cd3ec7a4402deb84e5e7", "filename": "src/test/rustdoc/intra-doc/extern-type.rs", "status": "modified", "additions": 22, "deletions": 2, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-type.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -4,14 +4,34 @@ extern {\n     pub type ExternType;\n }\n \n+pub trait T {\n+    fn test(&self) {}\n+}\n+\n+pub trait G<N> {\n+    fn g(&self, n: N) {}\n+}\n+\n impl ExternType {\n-    pub fn f(&self) {\n+    pub fn f(&self) {}\n+}\n \n-    }\n+impl T for ExternType {\n+    fn test(&self) {}\n+}\n+\n+impl G<usize> for ExternType {\n+    fn g(&self, n: usize) {}\n }\n \n // @has 'extern_type/foreigntype.ExternType.html'\n // @has 'extern_type/fn.links_to_extern_type.html' \\\n // 'href=\"foreigntype.ExternType.html#method.f\"'\n+// @has 'extern_type/fn.links_to_extern_type.html' \\\n+// 'href=\"foreigntype.ExternType.html#method.test\"'\n+// @has 'extern_type/fn.links_to_extern_type.html' \\\n+// 'href=\"foreigntype.ExternType.html#method.g\"'\n /// See also [ExternType::f]\n+/// See also [ExternType::test]\n+/// See also [ExternType::g]\n pub fn links_to_extern_type() {}"}, {"sha": "ba8595abfa9590b094cf442a721baf569b3b2e83", "filename": "src/test/rustdoc/intra-doc/generic-trait-impl.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Frustdoc%2Fintra-doc%2Fgeneric-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Frustdoc%2Fintra-doc%2Fgeneric-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fgeneric-trait-impl.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -0,0 +1,20 @@\n+#![deny(rustdoc::broken_intra_doc_links)]\n+\n+// Test intra-doc links on trait implementations with generics\n+// regression test for issue #92662\n+\n+use std::marker::PhantomData;\n+\n+pub trait Bar<T> {\n+    fn bar(&self);\n+}\n+\n+pub struct Foo<U>(PhantomData<U>);\n+\n+impl<T, U> Bar<T> for Foo<U> {\n+    fn bar(&self) {}\n+}\n+\n+// @has generic_trait_impl/fn.main.html '//a[@href=\"struct.Foo.html#method.bar\"]' 'Foo::bar'\n+/// link to [`Foo::bar`]\n+pub fn main() {}"}, {"sha": "7a65723d77b21182efe2a94a716be9d7e0403e9a", "filename": "src/test/rustdoc/intra-doc/prim-self.rs", "status": "renamed", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fprim-self.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -1,13 +1,15 @@\n #![deny(rustdoc::broken_intra_doc_links)]\n+#![allow(incomplete_features)] // inherent_associated_types\n #![feature(lang_items)]\n #![feature(no_core)]\n #![feature(rustdoc_internals)]\n+#![feature(inherent_associated_types)]\n #![no_core]\n \n #[lang = \"usize\"]\n /// [Self::f]\n /// [Self::MAX]\n-// @has intra_link_prim_self/primitive.usize.html\n+// @has prim_self/primitive.usize.html\n // @has - '//a[@href=\"primitive.usize.html#method.f\"]' 'Self::f'\n // @has - '//a[@href=\"primitive.usize.html#associatedconstant.MAX\"]' 'Self::MAX'\n impl usize {\n@@ -17,10 +19,9 @@ impl usize {\n     /// 10 and 2^32 are basically the same.\n     pub const MAX: usize = 10;\n \n-    // FIXME(#8995) uncomment this when associated types in inherent impls are supported\n-    // @ has - '//a[@href=\"{{channel}}/std/primitive.usize.html#associatedtype.ME\"]' 'Self::ME'\n-    // / [Self::ME]\n-    //pub type ME = usize;\n+    // @has - '//a[@href=\"primitive.usize.html#associatedtype.ME\"]' 'Self::ME'\n+    /// [Self::ME]\n+    pub type ME = usize;\n }\n \n #[doc(primitive = \"usize\")]", "previous_filename": "src/test/rustdoc/intra-link-prim-self.rs"}, {"sha": "63bf7fa5768a718992c85318e13a0dc197481b75", "filename": "src/test/rustdoc/intra-doc/self-cache.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Frustdoc%2Fintra-doc%2Fself-cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Frustdoc%2Fintra-doc%2Fself-cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fself-cache.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "previous_filename": "src/test/rustdoc/intra-link-self-cache.rs"}, {"sha": "2751a37f7419d788fc8f1591e6a500a49615c1ee", "filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref.stderr", "status": "removed", "additions": 0, "deletions": 80, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/48e89b00caa94829a5f07e0f1ecb33bf37431244/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48e89b00caa94829a5f07e0f1ecb33bf37431244/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref.stderr?ref=48e89b00caa94829a5f07e0f1ecb33bf37431244", "patch": "@@ -1,80 +0,0 @@\n-error: passing `Ty<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:13:13\n-   |\n-LL |     ty_ref: &Ty<'_>,\n-   |             ^^^^^^^ help: try passing by value: `Ty<'_>`\n-   |\n-note: the lint level is defined here\n-  --> $DIR/pass_ty_by_ref.rs:4:9\n-   |\n-LL | #![deny(rustc::ty_pass_by_reference)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:15:18\n-   |\n-LL |     ty_ctxt_ref: &TyCtxt<'_>,\n-   |                  ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n-\n-error: passing `Ty<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:19:28\n-   |\n-LL | fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n-   |                            ^^^^^^^ help: try passing by value: `Ty<'_>`\n-\n-error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:19:55\n-   |\n-LL | fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n-   |                                                       ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n-\n-error: passing `Ty<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:26:17\n-   |\n-LL |         ty_ref: &Ty<'_>,\n-   |                 ^^^^^^^ help: try passing by value: `Ty<'_>`\n-\n-error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:28:22\n-   |\n-LL |         ty_ctxt_ref: &TyCtxt<'_>,\n-   |                      ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n-\n-error: passing `Ty<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:31:41\n-   |\n-LL |     fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>);\n-   |                                         ^^^^^^^ help: try passing by value: `Ty<'_>`\n-\n-error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:31:68\n-   |\n-LL |     fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>);\n-   |                                                                    ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n-\n-error: passing `Ty<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:53:17\n-   |\n-LL |         ty_ref: &Ty<'_>,\n-   |                 ^^^^^^^ help: try passing by value: `Ty<'_>`\n-\n-error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:55:22\n-   |\n-LL |         ty_ctxt_ref: &TyCtxt<'_>,\n-   |                      ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n-\n-error: passing `Ty<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:59:38\n-   |\n-LL |     fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n-   |                                      ^^^^^^^ help: try passing by value: `Ty<'_>`\n-\n-error: passing `TyCtxt<'_>` by reference\n-  --> $DIR/pass_ty_by_ref.rs:59:65\n-   |\n-LL |     fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n-   |                                                                 ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n-\n-error: aborting due to 12 previous errors\n-"}, {"sha": "15a06e721ddcb440692273b9badcf03035863513", "filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref_self.stderr", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/48e89b00caa94829a5f07e0f1ecb33bf37431244/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48e89b00caa94829a5f07e0f1ecb33bf37431244/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Fpass_ty_by_ref_self.stderr?ref=48e89b00caa94829a5f07e0f1ecb33bf37431244", "patch": "@@ -1,20 +0,0 @@\n-error: passing `TyCtxt<'tcx>` by reference\n-  --> $DIR/pass_ty_by_ref_self.rs:18:15\n-   |\n-LL |     fn by_ref(&self) {}\n-   |               ^^^^^ help: try passing by value: `TyCtxt<'tcx>`\n-   |\n-note: the lint level is defined here\n-  --> $DIR/pass_ty_by_ref_self.rs:8:9\n-   |\n-LL | #![deny(rustc::ty_pass_by_reference)]\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: passing `Ty<'tcx>` by reference\n-  --> $DIR/pass_ty_by_ref_self.rs:31:21\n-   |\n-LL |     fn by_ref(self: &Ty<'tcx>) {}\n-   |                     ^^^^^^^^^ help: try passing by value: `Ty<'tcx>`\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "402c41f376602f8b07266cc732bf342aecf81468", "filename": "src/test/ui-fulldeps/internal-lints/rustc_pass_by_value.rs", "status": "renamed", "additions": 55, "deletions": 1, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -1,7 +1,8 @@\n // compile-flags: -Z unstable-options\n \n+#![feature(rustc_attrs)]\n #![feature(rustc_private)]\n-#![deny(rustc::ty_pass_by_reference)]\n+#![deny(rustc::pass_by_value)]\n #![allow(unused)]\n \n extern crate rustc_middle;\n@@ -61,4 +62,57 @@ impl Foo {\n     //~^^ ERROR passing `TyCtxt<'_>` by reference\n }\n \n+#[rustc_pass_by_value]\n+enum CustomEnum {\n+    A,\n+    B,\n+}\n+\n+impl CustomEnum {\n+    fn test(\n+        value: CustomEnum,\n+        reference: &CustomEnum, //~ ERROR passing `CustomEnum` by reference\n+    ) {\n+    }\n+}\n+\n+#[rustc_pass_by_value]\n+struct CustomStruct {\n+    s: u8,\n+}\n+\n+#[rustc_pass_by_value]\n+type CustomAlias<'a> = &'a CustomStruct; //~ ERROR passing `CustomStruct` by reference\n+\n+impl CustomStruct {\n+    fn test(\n+        value: CustomStruct,\n+        reference: &CustomStruct, //~ ERROR passing `CustomStruct` by reference\n+    ) {\n+    }\n+\n+    fn test_alias(\n+        value: CustomAlias,\n+        reference: &CustomAlias, //~ ERROR passing `CustomAlias<>` by reference\n+    ) {\n+    }\n+}\n+\n+#[rustc_pass_by_value]\n+struct WithParameters<T, const N: usize, M = u32> {\n+    slice: [T; N],\n+    m: M,\n+}\n+\n+impl<T> WithParameters<T, 1> {\n+    fn test<'a>(\n+        value: WithParameters<T, 1>,\n+        reference: &'a WithParameters<T, 1>, //~ ERROR passing `WithParameters<T, 1>` by reference\n+        reference_with_m: &WithParameters<T, 1, u32>, //~ ERROR passing `WithParameters<T, 1, u32>` by reference\n+    ) -> &'a WithParameters<T, 1> {\n+        //~^ ERROR passing `WithParameters<T, 1>` by reference\n+        reference as &WithParameters<_, 1> //~ ERROR passing `WithParameters<_, 1>` by reference\n+    }\n+}\n+\n fn main() {}", "previous_filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref.rs"}, {"sha": "7f6e57b38f38d936c37b5a9541d4cf343a9f3393", "filename": "src/test/ui-fulldeps/internal-lints/rustc_pass_by_value.stderr", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value.stderr?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -0,0 +1,128 @@\n+error: passing `Ty<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:14:13\n+   |\n+LL |     ty_ref: &Ty<'_>,\n+   |             ^^^^^^^ help: try passing by value: `Ty<'_>`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/rustc_pass_by_value.rs:5:9\n+   |\n+LL | #![deny(rustc::pass_by_value)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: passing `TyCtxt<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:16:18\n+   |\n+LL |     ty_ctxt_ref: &TyCtxt<'_>,\n+   |                  ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n+\n+error: passing `Ty<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:20:28\n+   |\n+LL | fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n+   |                            ^^^^^^^ help: try passing by value: `Ty<'_>`\n+\n+error: passing `TyCtxt<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:20:55\n+   |\n+LL | fn ty_multi_ref(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n+   |                                                       ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n+\n+error: passing `Ty<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:27:17\n+   |\n+LL |         ty_ref: &Ty<'_>,\n+   |                 ^^^^^^^ help: try passing by value: `Ty<'_>`\n+\n+error: passing `TyCtxt<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:29:22\n+   |\n+LL |         ty_ctxt_ref: &TyCtxt<'_>,\n+   |                      ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n+\n+error: passing `Ty<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:32:41\n+   |\n+LL |     fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>);\n+   |                                         ^^^^^^^ help: try passing by value: `Ty<'_>`\n+\n+error: passing `TyCtxt<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:32:68\n+   |\n+LL |     fn ty_multi_ref_in_trait(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>);\n+   |                                                                    ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n+\n+error: passing `Ty<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:54:17\n+   |\n+LL |         ty_ref: &Ty<'_>,\n+   |                 ^^^^^^^ help: try passing by value: `Ty<'_>`\n+\n+error: passing `TyCtxt<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:56:22\n+   |\n+LL |         ty_ctxt_ref: &TyCtxt<'_>,\n+   |                      ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n+\n+error: passing `Ty<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:60:38\n+   |\n+LL |     fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n+   |                                      ^^^^^^^ help: try passing by value: `Ty<'_>`\n+\n+error: passing `TyCtxt<'_>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:60:65\n+   |\n+LL |     fn ty_multi_ref_assoc(ty_multi: &&Ty<'_>, ty_ctxt_multi: &&&&TyCtxt<'_>) {}\n+   |                                                                 ^^^^^^^^^^^ help: try passing by value: `TyCtxt<'_>`\n+\n+error: passing `CustomEnum` by reference\n+  --> $DIR/rustc_pass_by_value.rs:74:20\n+   |\n+LL |         reference: &CustomEnum,\n+   |                    ^^^^^^^^^^^ help: try passing by value: `CustomEnum`\n+\n+error: passing `CustomStruct` by reference\n+  --> $DIR/rustc_pass_by_value.rs:85:24\n+   |\n+LL | type CustomAlias<'a> = &'a CustomStruct;\n+   |                        ^^^^^^^^^^^^^^^^ help: try passing by value: `CustomStruct`\n+\n+error: passing `CustomStruct` by reference\n+  --> $DIR/rustc_pass_by_value.rs:90:20\n+   |\n+LL |         reference: &CustomStruct,\n+   |                    ^^^^^^^^^^^^^ help: try passing by value: `CustomStruct`\n+\n+error: passing `CustomAlias<>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:96:20\n+   |\n+LL |         reference: &CustomAlias,\n+   |                    ^^^^^^^^^^^^ help: try passing by value: `CustomAlias<>`\n+\n+error: passing `WithParameters<T, 1>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:110:20\n+   |\n+LL |         reference: &'a WithParameters<T, 1>,\n+   |                    ^^^^^^^^^^^^^^^^^^^^^^^^ help: try passing by value: `WithParameters<T, 1>`\n+\n+error: passing `WithParameters<T, 1, u32>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:111:27\n+   |\n+LL |         reference_with_m: &WithParameters<T, 1, u32>,\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try passing by value: `WithParameters<T, 1, u32>`\n+\n+error: passing `WithParameters<T, 1>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:112:10\n+   |\n+LL |     ) -> &'a WithParameters<T, 1> {\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try passing by value: `WithParameters<T, 1>`\n+\n+error: passing `WithParameters<_, 1>` by reference\n+  --> $DIR/rustc_pass_by_value.rs:114:22\n+   |\n+LL |         reference as &WithParameters<_, 1>\n+   |                      ^^^^^^^^^^^^^^^^^^^^^ help: try passing by value: `WithParameters<_, 1>`\n+\n+error: aborting due to 20 previous errors\n+"}, {"sha": "2868517774d46bc2c9b72dfe1d92cd0e0bac7cb1", "filename": "src/test/ui-fulldeps/internal-lints/rustc_pass_by_value_self.rs", "status": "renamed", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -5,10 +5,10 @@\n // Considering that all other `internal-lints` are tested here\n // this seems like the cleaner solution though.\n #![feature(rustc_attrs)]\n-#![deny(rustc::ty_pass_by_reference)]\n+#![deny(rustc::pass_by_value)]\n #![allow(unused)]\n \n-#[rustc_diagnostic_item = \"TyCtxt\"]\n+#[rustc_pass_by_value]\n struct TyCtxt<'tcx> {\n     inner: &'tcx (),\n }\n@@ -18,17 +18,37 @@ impl<'tcx> TyCtxt<'tcx> {\n     fn by_ref(&self) {} //~ ERROR passing `TyCtxt<'tcx>` by reference\n }\n \n-\n struct TyS<'tcx> {\n     inner: &'tcx (),\n }\n \n-#[rustc_diagnostic_item = \"Ty\"]\n+#[rustc_pass_by_value]\n type Ty<'tcx> = &'tcx TyS<'tcx>;\n \n impl<'tcx> TyS<'tcx> {\n     fn by_value(self: Ty<'tcx>) {}\n     fn by_ref(self: &Ty<'tcx>) {} //~ ERROR passing `Ty<'tcx>` by reference\n }\n \n+#[rustc_pass_by_value]\n+struct Foo;\n+\n+impl Foo {\n+    fn with_ref(&self) {} //~ ERROR passing `Foo` by reference\n+}\n+\n+#[rustc_pass_by_value]\n+struct WithParameters<T, const N: usize, M = u32> {\n+    slice: [T; N],\n+    m: M,\n+}\n+\n+impl<T> WithParameters<T, 1> {\n+    fn with_ref(&self) {} //~ ERROR passing `WithParameters<T, 1_usize>` by reference\n+}\n+\n+impl<T> WithParameters<T, 1, u8> {\n+    fn with_ref(&self) {} //~ ERROR passing `WithParameters<T, 1_usize, u8>` by reference\n+}\n+\n fn main() {}", "previous_filename": "src/test/ui-fulldeps/internal-lints/pass_ty_by_ref_self.rs"}, {"sha": "54a7cf7cab7570bf01f976f02e9df27ebfef6952", "filename": "src/test/ui-fulldeps/internal-lints/rustc_pass_by_value_self.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Finternal-lints%2Frustc_pass_by_value_self.stderr?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -0,0 +1,38 @@\n+error: passing `TyCtxt<'tcx>` by reference\n+  --> $DIR/rustc_pass_by_value_self.rs:18:15\n+   |\n+LL |     fn by_ref(&self) {}\n+   |               ^^^^^ help: try passing by value: `TyCtxt<'tcx>`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/rustc_pass_by_value_self.rs:8:9\n+   |\n+LL | #![deny(rustc::pass_by_value)]\n+   |         ^^^^^^^^^^^^^^^^^^^^\n+\n+error: passing `Ty<'tcx>` by reference\n+  --> $DIR/rustc_pass_by_value_self.rs:30:21\n+   |\n+LL |     fn by_ref(self: &Ty<'tcx>) {}\n+   |                     ^^^^^^^^^ help: try passing by value: `Ty<'tcx>`\n+\n+error: passing `Foo` by reference\n+  --> $DIR/rustc_pass_by_value_self.rs:37:17\n+   |\n+LL |     fn with_ref(&self) {}\n+   |                 ^^^^^ help: try passing by value: `Foo`\n+\n+error: passing `WithParameters<T, 1_usize>` by reference\n+  --> $DIR/rustc_pass_by_value_self.rs:47:17\n+   |\n+LL |     fn with_ref(&self) {}\n+   |                 ^^^^^ help: try passing by value: `WithParameters<T, 1_usize>`\n+\n+error: passing `WithParameters<T, 1_usize, u8>` by reference\n+  --> $DIR/rustc_pass_by_value_self.rs:51:17\n+   |\n+LL |     fn with_ref(&self) {}\n+   |                 ^^^^^ help: try passing by value: `WithParameters<T, 1_usize, u8>`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "72ade5774d749898fba7524c13e2a95cbcf6c42f", "filename": "src/test/ui/generic-associated-types/issue-92096.migrate.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.migrate.stderr?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -0,0 +1,18 @@\n+error[E0311]: the parameter type `C` may not live long enough\n+  --> $DIR/issue-92096.rs:20:33\n+   |\n+LL | fn call_connect<C>(c: &'_ C) -> impl '_ + Future + Send\n+   |                 -               ^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `C` will meet its required lifetime bounds\n+   |                 |\n+   |                 help: consider adding an explicit lifetime bound...: `C: 'a`\n+\n+error[E0311]: the parameter type `C` may not live long enough\n+  --> $DIR/issue-92096.rs:20:33\n+   |\n+LL | fn call_connect<C>(c: &'_ C) -> impl '_ + Future + Send\n+   |                 -               ^^^^^^^^^^^^^^^^^^^^^^^ ...so that the type `C` will meet its required lifetime bounds\n+   |                 |\n+   |                 help: consider adding an explicit lifetime bound...: `C: 'a`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "066132a5d98bb8bea0323094eb2f72dcf672b3e2", "filename": "src/test/ui/generic-associated-types/issue-92096.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92096.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -0,0 +1,29 @@\n+// edition:2018\n+// [nll] check-pass\n+// revisions: migrate nll\n+// Explicitly testing nll with revision, so ignore compare-mode=nll\n+// ignore-compare-mode-nll\n+\n+#![cfg_attr(nll, feature(nll))]\n+#![feature(generic_associated_types)]\n+\n+use std::future::Future;\n+\n+trait Client {\n+    type Connecting<'a>: Future + Send\n+    where\n+        Self: 'a;\n+\n+    fn connect(&'_ self) -> Self::Connecting<'_>;\n+}\n+\n+fn call_connect<C>(c: &'_ C) -> impl '_ + Future + Send\n+//[migrate]~^ ERROR the parameter\n+//[migrate]~| ERROR the parameter\n+where\n+    C: Client + Send + Sync,\n+{\n+    async move { c.connect().await }\n+}\n+\n+fn main() {}"}, {"sha": "db26493ecadfab926b1df9c68cf74ccba707e815", "filename": "src/test/ui/generic-associated-types/issue-92280.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92280.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92280.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-92280.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+#![allow(non_camel_case_types)]\n+\n+trait HasAssoc {\n+    type Assoc;\n+}\n+\n+trait Iterate<S: HasAssoc> {\n+    type Iter<'a>\n+    where\n+        Self: 'a;\n+}\n+\n+struct KeySegment_Broken<T> {\n+    key: T,\n+}\n+impl<S: HasAssoc> Iterate<S> for KeySegment_Broken<S::Assoc> {\n+    type Iter<'a>\n+    where\n+        Self: 'a,\n+    = ();\n+}\n+\n+fn main() {}"}, {"sha": "004ab386b3ff071d6a10b72f2c0337d023eee37d", "filename": "src/test/ui/macros/stringify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -589,7 +589,7 @@ fn test_item() {\n         stringify_item!(\n             pub trait Trait<T> = Sized where T: 'a;\n         ),\n-        \"\", // FIXME\n+        \"pub trait Trait<T> = Sized where T: 'a;\",\n     );\n \n     // ItemKind::Impl"}, {"sha": "23f245a51681b559cdfc627ae0a7cd7fd1420030", "filename": "src/test/ui/parser/issues/issue-35813-postfix-after-cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -117,9 +117,9 @@ static bar2: &[i32] = &(&[1i32,2,3]: &[i32; 3][0..1]);\n \n pub fn cast_then_try() -> Result<u64,u64> {\n     Err(0u64) as Result<u64,u64>?;\n-    //~^ ERROR: casts cannot be followed by ?\n+    //~^ ERROR: casts cannot be followed by `?`\n     Err(0u64): Result<u64,u64>?;\n-    //~^ ERROR: casts cannot be followed by ?\n+    //~^ ERROR: casts cannot be followed by `?`\n     Ok(1)\n }\n "}, {"sha": "e96b67da3364df8b9204fb8ff2a6c75515a1a8b5", "filename": "src/test/ui/parser/issues/issue-35813-postfix-after-cast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.stderr?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -265,7 +265,7 @@ help: try surrounding the expression in parentheses\n LL | static bar2: &[i32] = &((&[1i32,2,3]: &[i32; 3])[0..1]);\n    |                         +                      +\n \n-error: casts cannot be followed by ?\n+error: casts cannot be followed by `?`\n   --> $DIR/issue-35813-postfix-after-cast.rs:119:5\n    |\n LL |     Err(0u64) as Result<u64,u64>?;\n@@ -276,7 +276,7 @@ help: try surrounding the expression in parentheses\n LL |     (Err(0u64) as Result<u64,u64>)?;\n    |     +                            +\n \n-error: casts cannot be followed by ?\n+error: casts cannot be followed by `?`\n   --> $DIR/issue-35813-postfix-after-cast.rs:121:5\n    |\n LL |     Err(0u64): Result<u64,u64>?;"}, {"sha": "9fa8086c2c9bf4af8b6fe37ae05539cbae98d8a0", "filename": "src/test/ui/parser/issues/issue-84148-1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-1.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -1,4 +1,3 @@\n fn f(t:for<>t?)\n-//~^ ERROR: expected parameter name\n-//~| ERROR: expected one of\n-//~| ERROR: expected one of\n+//~^ ERROR: expected one of\n+//~| ERROR: invalid `?` in type"}, {"sha": "9261067c22158c032256790ebe7e93eaf29065fe", "filename": "src/test/ui/parser/issues/issue-84148-1.stderr", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-1.stderr?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -1,23 +1,19 @@\n-error: expected parameter name, found `?`\n+error: invalid `?` in type\n   --> $DIR/issue-84148-1.rs:1:14\n    |\n LL | fn f(t:for<>t?)\n-   |              ^ expected parameter name\n-\n-error: expected one of `(`, `)`, `+`, `,`, `::`, or `<`, found `?`\n-  --> $DIR/issue-84148-1.rs:1:14\n+   |              ^ `?` is only allowed on expressions, not types\n    |\n-LL | fn f(t:for<>t?)\n-   |              ^\n-   |              |\n-   |              expected one of `(`, `)`, `+`, `,`, `::`, or `<`\n-   |              help: missing `,`\n+help: if you meant to express that the type might not contain a value, use the `Option` wrapper type\n+   |\n+LL | fn f(t:Option<for<>t>)\n+   |        +++++++      ~\n \n error: expected one of `->`, `where`, or `{`, found `<eof>`\n   --> $DIR/issue-84148-1.rs:1:15\n    |\n LL | fn f(t:for<>t?)\n    |               ^ expected one of `->`, `where`, or `{`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "2f6a7facfb271d8653c41957b67b06666a93f9bf", "filename": "src/test/ui/parser/issues/issue-84148-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-2.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -1,4 +1,3 @@\n // error-pattern: this file contains an unclosed delimiter\n-// error-pattern: expected parameter name\n-// error-pattern: expected one of\n+// error-pattern: invalid `?` in type\n fn f(t:for<>t?"}, {"sha": "71d543f9b73447804f775612ac98fc8050996fcf", "filename": "src/test/ui/parser/issues/issue-84148-2.stderr", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-2.stderr?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -1,31 +1,27 @@\n error: this file contains an unclosed delimiter\n-  --> $DIR/issue-84148-2.rs:4:16\n+  --> $DIR/issue-84148-2.rs:3:16\n    |\n LL | fn f(t:for<>t?\n    |     -          ^\n    |     |\n    |     unclosed delimiter\n \n-error: expected parameter name, found `?`\n-  --> $DIR/issue-84148-2.rs:4:14\n+error: invalid `?` in type\n+  --> $DIR/issue-84148-2.rs:3:14\n    |\n LL | fn f(t:for<>t?\n-   |              ^ expected parameter name\n-\n-error: expected one of `(`, `)`, `+`, `,`, `::`, or `<`, found `?`\n-  --> $DIR/issue-84148-2.rs:4:14\n+   |              ^ `?` is only allowed on expressions, not types\n    |\n-LL | fn f(t:for<>t?\n-   |              ^\n-   |              |\n-   |              expected one of `(`, `)`, `+`, `,`, `::`, or `<`\n-   |              help: missing `,`\n+help: if you meant to express that the type might not contain a value, use the `Option` wrapper type\n+   |\n+LL | fn f(t:Option<for<>t>\n+   |        +++++++      ~\n \n error: expected one of `->`, `where`, or `{`, found `<eof>`\n-  --> $DIR/issue-84148-2.rs:4:16\n+  --> $DIR/issue-84148-2.rs:3:16\n    |\n LL | fn f(t:for<>t?\n    |                ^ expected one of `->`, `where`, or `{`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "6ea24484e033eaf353212c446a7077130bdd946d", "filename": "src/test/ui/parser/trailing-question-in-type.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-type.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-type.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-type.fixed?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+fn foo() -> Option<i32> { //~ ERROR invalid `?` in type\n+    let x: Option<i32> = Some(1); //~ ERROR invalid `?` in type\n+    x\n+}\n+\n+fn main() {\n+    let _: Option<i32> = foo();\n+}"}, {"sha": "b1c508365cff5aefd697c852bd0d42b54e21edf2", "filename": "src/test/ui/parser/trailing-question-in-type.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-type.rs?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+fn foo() -> i32? { //~ ERROR invalid `?` in type\n+    let x: i32? = Some(1); //~ ERROR invalid `?` in type\n+    x\n+}\n+\n+fn main() {\n+    let _: Option<i32> = foo();\n+}"}, {"sha": "a3cd419c0c718a940d11ecb1443d088a703803fb", "filename": "src/test/ui/parser/trailing-question-in-type.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/bd3cb52565faab2755ff1bdb54d88bc91f47b4b9/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-type.stderr?ref=bd3cb52565faab2755ff1bdb54d88bc91f47b4b9", "patch": "@@ -0,0 +1,24 @@\n+error: invalid `?` in type\n+  --> $DIR/trailing-question-in-type.rs:3:16\n+   |\n+LL | fn foo() -> i32? {\n+   |                ^ `?` is only allowed on expressions, not types\n+   |\n+help: if you meant to express that the type might not contain a value, use the `Option` wrapper type\n+   |\n+LL | fn foo() -> Option<i32> {\n+   |             +++++++   ~\n+\n+error: invalid `?` in type\n+  --> $DIR/trailing-question-in-type.rs:4:15\n+   |\n+LL |     let x: i32? = Some(1);\n+   |               ^ `?` is only allowed on expressions, not types\n+   |\n+help: if you meant to express that the type might not contain a value, use the `Option` wrapper type\n+   |\n+LL |     let x: Option<i32> = Some(1);\n+   |            +++++++   ~\n+\n+error: aborting due to 2 previous errors\n+"}]}