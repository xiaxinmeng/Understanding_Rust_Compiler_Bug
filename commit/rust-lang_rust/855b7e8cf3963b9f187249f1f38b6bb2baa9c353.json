{"sha": "855b7e8cf3963b9f187249f1f38b6bb2baa9c353", "node_id": "C_kwDOAAsO6NoAKDg1NWI3ZThjZjM5NjNiOWYxODcyNDlmMWYzOGI2YmIyYmFhOWMzNTM", "commit": {"author": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2023-01-02T19:40:00Z"}, "committer": {"name": "Nixon Enraght-Moony", "email": "nixon.emoony@gmail.com", "date": "2023-01-03T14:54:46Z"}, "message": "jsondoclint: Add `--verbose` flag.\n\nWithout verbose:\n    0:61941:36627 not in index or paths, but refered to at '$.index[\"0:62007\"].inner.for.inner.id' and 12 more\n\nWith verbose:\n    0:10808:27206 not in index or paths, but refered to at '$.index[\"0:10813\"].inner.for.inner.id', '$.index[\"0:52495\"].inner.for.inner.id', '$.index[\"a:0:2666:215-0:10808:27206\"].inner.for.inner.id', '$.index[\"a:0:2680:223-0:10808:27206\"].inner.for.inner.id', '$.index[\"a:0:2730:7845-0:10808:27206\"].inner.for.inner.id', '$.index[\"a:0:7731:21706-0:10808:27206\"].inner.for.inner.id', '$.index[\"a:0:7732:21705-0:10808:27206\"].inner.for.inner.id'", "tree": {"sha": "7f912993b94525792049b827d4002cc6f367c0b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f912993b94525792049b827d4002cc6f367c0b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/855b7e8cf3963b9f187249f1f38b6bb2baa9c353", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/855b7e8cf3963b9f187249f1f38b6bb2baa9c353", "html_url": "https://github.com/rust-lang/rust/commit/855b7e8cf3963b9f187249f1f38b6bb2baa9c353", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/855b7e8cf3963b9f187249f1f38b6bb2baa9c353/comments", "author": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aDotInTheVoid", "id": 28781354, "node_id": "MDQ6VXNlcjI4NzgxMzU0", "avatar_url": "https://avatars.githubusercontent.com/u/28781354?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aDotInTheVoid", "html_url": "https://github.com/aDotInTheVoid", "followers_url": "https://api.github.com/users/aDotInTheVoid/followers", "following_url": "https://api.github.com/users/aDotInTheVoid/following{/other_user}", "gists_url": "https://api.github.com/users/aDotInTheVoid/gists{/gist_id}", "starred_url": "https://api.github.com/users/aDotInTheVoid/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aDotInTheVoid/subscriptions", "organizations_url": "https://api.github.com/users/aDotInTheVoid/orgs", "repos_url": "https://api.github.com/users/aDotInTheVoid/repos", "events_url": "https://api.github.com/users/aDotInTheVoid/events{/privacy}", "received_events_url": "https://api.github.com/users/aDotInTheVoid/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7680b164b00af55e7af64bdc8027b6deb4fb8233", "url": "https://api.github.com/repos/rust-lang/rust/commits/7680b164b00af55e7af64bdc8027b6deb4fb8233", "html_url": "https://github.com/rust-lang/rust/commit/7680b164b00af55e7af64bdc8027b6deb4fb8233"}], "stats": {"total": 32, "additions": 26, "deletions": 6}, "files": [{"sha": "89965dc24039c1e7e27709ea53d1e7b6f6730a44", "filename": "src/tools/jsondoclint/src/main.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/855b7e8cf3963b9f187249f1f38b6bb2baa9c353/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/855b7e8cf3963b9f187249f1f38b6bb2baa9c353/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fjsondoclint%2Fsrc%2Fmain.rs?ref=855b7e8cf3963b9f187249f1f38b6bb2baa9c353", "patch": "@@ -24,10 +24,14 @@ enum ErrorKind {\n struct Cli {\n     /// The path to the json file to be linted\n     path: String,\n+\n+    /// Show verbose output\n+    #[arg(long)]\n+    verbose: bool,\n }\n \n fn main() -> Result<()> {\n-    let Cli { path } = Cli::parse();\n+    let Cli { path, verbose } = Cli::parse();\n \n     let contents = fs::read_to_string(&path)?;\n     let krate: Crate = serde_json::from_str(&contents)?;\n@@ -53,11 +57,27 @@ fn main() -> Result<()> {\n                             err.id.0,\n                             json_find::to_jsonpath(&sel)\n                         ),\n-                        [sel, ..] => eprintln!(\n-                            \"{} not in index or paths, but refered to at '{}' and more\",\n-                            err.id.0,\n-                            json_find::to_jsonpath(&sel)\n-                        ),\n+                        [sel, ..] => {\n+                            if verbose {\n+                                let sels = sels\n+                                    .iter()\n+                                    .map(json_find::to_jsonpath)\n+                                    .map(|i| format!(\"'{i}'\"))\n+                                    .collect::<Vec<_>>()\n+                                    .join(\", \");\n+                                eprintln!(\n+                                    \"{} not in index or paths, but refered to at {sels}\",\n+                                    err.id.0\n+                                );\n+                            } else {\n+                                eprintln!(\n+                                    \"{} not in index or paths, but refered to at '{}' and {} more\",\n+                                    err.id.0,\n+                                    json_find::to_jsonpath(&sel),\n+                                    sels.len() - 1,\n+                                )\n+                            }\n+                        }\n                     }\n                 }\n                 ErrorKind::Custom(msg) => eprintln!(\"{}: {}\", err.id.0, msg),"}]}