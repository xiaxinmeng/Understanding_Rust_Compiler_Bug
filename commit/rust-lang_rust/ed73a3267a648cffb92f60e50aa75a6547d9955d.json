{"sha": "ed73a3267a648cffb92f60e50aa75a6547d9955d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNzNhMzI2N2E2NDhjZmZiOTJmNjBlNTBhYTc1YTY1NDdkOTk1NWQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-23T21:37:41Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-08-24T17:27:38Z"}, "message": "address pnkfelix nits", "tree": {"sha": "dc2399e896e9f2dd734f16955c822d03e7b1c60d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dc2399e896e9f2dd734f16955c822d03e7b1c60d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed73a3267a648cffb92f60e50aa75a6547d9955d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed73a3267a648cffb92f60e50aa75a6547d9955d", "html_url": "https://github.com/rust-lang/rust/commit/ed73a3267a648cffb92f60e50aa75a6547d9955d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed73a3267a648cffb92f60e50aa75a6547d9955d/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5778fec665ae2660426293bcfd3b30530d22e3b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5778fec665ae2660426293bcfd3b30530d22e3b5", "html_url": "https://github.com/rust-lang/rust/commit/5778fec665ae2660426293bcfd3b30530d22e3b5"}], "stats": {"total": 87, "additions": 59, "deletions": 28}, "files": [{"sha": "424139e752736eff0efdd5c1ff17c7025db1c6f8", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed73a3267a648cffb92f60e50aa75a6547d9955d/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed73a3267a648cffb92f60e50aa75a6547d9955d/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ed73a3267a648cffb92f60e50aa75a6547d9955d", "patch": "@@ -371,7 +371,7 @@ pub struct TypeckTables<'tcx> {\n     /// other items.\n     node_substs: ItemLocalMap<&'tcx Substs<'tcx>>,\n \n-    /// Stores the substitutions that the user explicit gave (if any)\n+    /// Stores the substitutions that the user explicitly gave (if any)\n     /// attached to `id`. These will not include any inferred\n     /// values. The canonical form is used to capture things like `_`\n     /// or other unspecified values."}, {"sha": "4a0b4b0c88580ffcd8f822333acdd72f788c8ed8", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ed73a3267a648cffb92f60e50aa75a6547d9955d/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed73a3267a648cffb92f60e50aa75a6547d9955d/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=ed73a3267a648cffb92f60e50aa75a6547d9955d", "patch": "@@ -344,7 +344,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         func: Operand::Constant(box Constant {\n                             span: test.span,\n                             ty: mty,\n-                            user_ty: None, // FIXME\n+\n+                            // FIXME(#47184): This constant comes from user\n+                            // input (a constant in a pattern).  Are\n+                            // there forms where users can add type\n+                            // annotations here?  For example, an\n+                            // associated constant? Need to\n+                            // experiment.\n+                            user_ty: None,\n+\n                             literal: method,\n                         }),\n                         args: vec![val, expect],"}, {"sha": "e2a22167b7e45627a9e562de61b50a46d1b64e43", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ed73a3267a648cffb92f60e50aa75a6547d9955d/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed73a3267a648cffb92f60e50aa75a6547d9955d/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ed73a3267a648cffb92f60e50aa75a6547d9955d", "patch": "@@ -867,7 +867,7 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                        cfg_fn!(rustc_attrs))),\n     (\"rustc_dump_user_substs\", Whitelisted, Gated(Stability::Unstable,\n                                        \"rustc_attrs\",\n-                                       \"the `#[rustc_error]` attribute \\\n+                                       \"this attribute \\\n                                         is just used for rustc unit tests \\\n                                         and will never be stable\",\n                                        cfg_fn!(rustc_attrs))),"}, {"sha": "bb4e922fdc0d23cebb585281ecbebdd1583d839e", "filename": "src/test/ui/hr-subtype/hr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "status": "modified", "additions": 27, "deletions": 11, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/ed73a3267a648cffb92f60e50aa75a6547d9955d/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed73a3267a648cffb92f60e50aa75a6547d9955d/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_inv_x_vs_free_inv_y.nll.stderr?ref=ed73a3267a648cffb92f60e50aa75a6547d9955d", "patch": "@@ -18,17 +18,33 @@ LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n LL | |                                     fn(Inv<'y>)) }\n    | |__________________________________________________- in this macro invocation\n \n-error: compilation successful\n-  --> $DIR/hr-subtype.rs:110:1\n+error: unsatisfied lifetime constraints\n+  --> $DIR/hr-subtype.rs:43:13\n    |\n-LL | / fn main() {\n-LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n-LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n-LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-LL | | //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n-LL | | //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n-LL | | }\n-   | |_^\n+LL |           fn subtype<'x,'y:'x,'z:'y>() {\n+   |                      -- -- lifetime `'y` defined here\n+   |                      |\n+   |                      lifetime `'x` defined here\n+LL |               gimme::<$t2>(None::<$t1>);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n+...\n+LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n+LL | |                                     fn(Inv<'y>)) }\n+   | |__________________________________________________- in this macro invocation\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/hr-subtype.rs:49:13\n+   |\n+LL |           fn supertype<'x,'y:'x,'z:'y>() {\n+   |                        -- -- lifetime `'y` defined here\n+   |                        |\n+   |                        lifetime `'x` defined here\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n+...\n+LL | / check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n+LL | |                                     fn(Inv<'y>)) }\n+   | |__________________________________________________- in this macro invocation\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n "}, {"sha": "c33e6fbfde72ca9bd87f752b655f7f284ba3b333", "filename": "src/test/ui/hr-subtype/hr-subtype.free_x_vs_free_y.nll.stderr", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ed73a3267a648cffb92f60e50aa75a6547d9955d/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed73a3267a648cffb92f60e50aa75a6547d9955d/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhr-subtype%2Fhr-subtype.free_x_vs_free_y.nll.stderr?ref=ed73a3267a648cffb92f60e50aa75a6547d9955d", "patch": "@@ -8,17 +8,19 @@ LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n LL | |                             fn(&'y u32)) }\n    | |__________________________________________- in this macro invocation\n \n-error: compilation successful\n-  --> $DIR/hr-subtype.rs:110:1\n+error: unsatisfied lifetime constraints\n+  --> $DIR/hr-subtype.rs:49:13\n    |\n-LL | / fn main() {\n-LL | | //[bound_a_vs_bound_a]~^ ERROR compilation successful\n-LL | | //[bound_a_vs_bound_b]~^^ ERROR compilation successful\n-LL | | //[bound_inv_a_vs_bound_inv_b]~^^^ ERROR compilation successful\n-LL | | //[bound_co_a_vs_bound_co_b]~^^^^ ERROR compilation successful\n-LL | | //[free_x_vs_free_x]~^^^^^ ERROR compilation successful\n-LL | | }\n-   | |_^\n+LL |           fn supertype<'x,'y:'x,'z:'y>() {\n+   |                        -- -- lifetime `'y` defined here\n+   |                        |\n+   |                        lifetime `'x` defined here\n+LL |               gimme::<$t1>(None::<$t2>);\n+   |               ^^^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'x` must outlive `'y`\n+...\n+LL | / check! { free_x_vs_free_y: (fn(&'x u32),\n+LL | |                             fn(&'y u32)) }\n+   | |__________________________________________- in this macro invocation\n \n error: aborting due to previous error\n "}, {"sha": "7f726d13a33ed4a53e1846c027c007379bb6a35f", "filename": "src/test/ui/nll/user-annotations/dump-fn-method.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ed73a3267a648cffb92f60e50aa75a6547d9955d/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed73a3267a648cffb92f60e50aa75a6547d9955d/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.rs?ref=ed73a3267a648cffb92f60e50aa75a6547d9955d", "patch": "@@ -16,6 +16,7 @@\n #![feature(nll)]\n #![feature(rustc_attrs)]\n \n+// Note: we reference the names T and U in the comments below.\n trait Bazoom<T> {\n     fn method<U>(&self, arg: T, arg2: U) { }\n }\n@@ -36,6 +37,8 @@ fn main() {\n     x(22);\n \n     // Here: we only want the `T` to be given, the rest should be variables.\n+    //\n+    // (`T` refers to the declaration of `Bazoom`)\n     let x = <_ as Bazoom<u32>>::method::<_>; //~ ERROR [?0, u32, ?1]\n     x(&22, 44, 66);\n \n@@ -45,6 +48,8 @@ fn main() {\n \n     // Here: we want in particular that *only* the method `U`\n     // annotation is given, the rest are variables.\n+    //\n+    // (`U` refers to the declaration of `Bazoom`)\n     let y = 22_u32;\n     y.method::<u32>(44, 66); //~ ERROR [?0, ?1, u32]\n "}, {"sha": "6531f87dd9878377e86357220548120e643ac5ed", "filename": "src/test/ui/nll/user-annotations/dump-fn-method.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed73a3267a648cffb92f60e50aa75a6547d9955d/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ed73a3267a648cffb92f60e50aa75a6547d9955d/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fuser-annotations%2Fdump-fn-method.stderr?ref=ed73a3267a648cffb92f60e50aa75a6547d9955d", "patch": "@@ -1,23 +1,23 @@\n error: user substs: Canonical { variables: [], value: [u32] }\n-  --> $DIR/dump-fn-method.rs:35:13\n+  --> $DIR/dump-fn-method.rs:36:13\n    |\n LL |     let x = foo::<u32>; //~ ERROR [u32]\n    |             ^^^^^^^^^^\n \n error: user substs: Canonical { variables: [CanonicalVarInfo { kind: Ty(General) }, CanonicalVarInfo { kind: Ty(General) }], value: [?0, u32, ?1] }\n-  --> $DIR/dump-fn-method.rs:39:13\n+  --> $DIR/dump-fn-method.rs:42:13\n    |\n LL |     let x = <_ as Bazoom<u32>>::method::<_>; //~ ERROR [?0, u32, ?1]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: user substs: Canonical { variables: [], value: [u8, u16, u32] }\n-  --> $DIR/dump-fn-method.rs:43:13\n+  --> $DIR/dump-fn-method.rs:46:13\n    |\n LL |     let x = <u8 as Bazoom<u16>>::method::<u32>; //~ ERROR [u8, u16, u32]\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: user substs: Canonical { variables: [CanonicalVarInfo { kind: Ty(General) }, CanonicalVarInfo { kind: Ty(General) }], value: [?0, ?1, u32] }\n-  --> $DIR/dump-fn-method.rs:49:5\n+  --> $DIR/dump-fn-method.rs:54:5\n    |\n LL |     y.method::<u32>(44, 66); //~ ERROR [?0, ?1, u32]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^"}]}