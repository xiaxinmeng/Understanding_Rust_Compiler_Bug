{"sha": "a987bbb97c12235b4abb9d4fa742ab1f40401df5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5ODdiYmI5N2MxMjIzNWI0YWJiOWQ0ZmE3NDJhYjFmNDA0MDFkZjU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-26T22:38:53Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T18:22:55Z"}, "message": "Remove hir::Crate::attrs.", "tree": {"sha": "1efde67058d33c33c83b5cfbcb8569d57bc022ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1efde67058d33c33c83b5cfbcb8569d57bc022ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a987bbb97c12235b4abb9d4fa742ab1f40401df5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a987bbb97c12235b4abb9d4fa742ab1f40401df5", "html_url": "https://github.com/rust-lang/rust/commit/a987bbb97c12235b4abb9d4fa742ab1f40401df5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a987bbb97c12235b4abb9d4fa742ab1f40401df5/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c05c90275c264a800f15ca7a52019c0874ad58a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c05c90275c264a800f15ca7a52019c0874ad58a8", "html_url": "https://github.com/rust-lang/rust/commit/c05c90275c264a800f15ca7a52019c0874ad58a8"}], "stats": {"total": 92, "additions": 47, "deletions": 45}, "files": [{"sha": "1389d6dad59f36d876312ebf9e825e6c0ac23f7a", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a987bbb97c12235b4abb9d4fa742ab1f40401df5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a987bbb97c12235b4abb9d4fa742ab1f40401df5/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=a987bbb97c12235b4abb9d4fa742ab1f40401df5", "patch": "@@ -568,7 +568,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         visit::walk_crate(&mut item::ItemLowerer { lctx: &mut self }, c);\n \n         let module = self.lower_mod(&c.items, c.span);\n-        let attrs = self.lower_attrs(hir::CRATE_HIR_ID, &c.attrs);\n+        self.lower_attrs(hir::CRATE_HIR_ID, &c.attrs);\n         let body_ids = body_ids(&self.bodies);\n         let proc_macros =\n             c.proc_macros.iter().map(|id| self.node_id_to_hir_id[*id].unwrap()).collect();\n@@ -599,7 +599,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         self.attrs.push_owner(Idx::new(self.resolver.definitions().def_index_count() - 1));\n \n         hir::Crate {\n-            item: hir::CrateItem { module, attrs, span: c.span },\n+            item: hir::CrateItem { module, span: c.span },\n             exported_macros: self.arena.alloc_from_iter(self.exported_macros),\n             non_exported_macro_attrs: self.arena.alloc_from_iter(self.non_exported_macro_attrs),\n             items: self.items,"}, {"sha": "854aaac757fb013a32b17c1cbe73ffd8314bdc31", "filename": "compiler/rustc_codegen_ssa/src/back/write.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a987bbb97c12235b4abb9d4fa742ab1f40401df5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a987bbb97c12235b4abb9d4fa742ab1f40401df5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fwrite.rs?ref=a987bbb97c12235b4abb9d4fa742ab1f40401df5", "patch": "@@ -433,12 +433,10 @@ pub fn start_async_codegen<B: ExtraBackendMethods>(\n     let sess = tcx.sess;\n \n     let crate_name = tcx.crate_name(LOCAL_CRATE);\n-    let no_builtins = tcx.sess.contains_name(&tcx.hir().krate().item.attrs, sym::no_builtins);\n-    let is_compiler_builtins =\n-        tcx.sess.contains_name(&tcx.hir().krate().item.attrs, sym::compiler_builtins);\n-    let subsystem = tcx\n-        .sess\n-        .first_attr_value_str_by_name(&tcx.hir().krate().item.attrs, sym::windows_subsystem);\n+    let crate_attrs = tcx.hir().attrs(rustc_hir::CRATE_HIR_ID);\n+    let no_builtins = tcx.sess.contains_name(crate_attrs, sym::no_builtins);\n+    let is_compiler_builtins = tcx.sess.contains_name(crate_attrs, sym::compiler_builtins);\n+    let subsystem = tcx.sess.first_attr_value_str_by_name(crate_attrs, sym::windows_subsystem);\n     let windows_subsystem = subsystem.map(|subsystem| {\n         if subsystem != sym::windows && subsystem != sym::console {\n             tcx.sess.fatal(&format!("}, {"sha": "da1c3ac8ec75c98060a5fb32e0a281ac1b44808f", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a987bbb97c12235b4abb9d4fa742ab1f40401df5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a987bbb97c12235b4abb9d4fa742ab1f40401df5/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=a987bbb97c12235b4abb9d4fa742ab1f40401df5", "patch": "@@ -629,7 +629,6 @@ pub struct ModuleItems {\n #[derive(Encodable, Debug, HashStable_Generic)]\n pub struct CrateItem<'hir> {\n     pub module: Mod<'hir>,\n-    pub attrs: &'hir [Attribute],\n     pub span: Span,\n }\n "}, {"sha": "0eb1dc742baa37100ecba426ffd1683c3df9b428", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a987bbb97c12235b4abb9d4fa742ab1f40401df5/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a987bbb97c12235b4abb9d4fa742ab1f40401df5/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=a987bbb97c12235b4abb9d4fa742ab1f40401df5", "patch": "@@ -168,7 +168,7 @@ pub fn print_crate<'a>(\n     // When printing the AST, we sometimes need to inject `#[no_std]` here.\n     // Since you can't compile the HIR, it's not necessary.\n \n-    s.print_mod(&krate.item.module, &krate.item.attrs);\n+    s.print_mod(&krate.item.module, krate.attrs[hir::CRATE_HIR_ID]);\n     s.print_remaining_comments();\n     s.s.eof()\n }"}, {"sha": "5fb2c1cb9c9236e314a052cf1fb00dd062225da2", "filename": "compiler/rustc_incremental/src/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a987bbb97c12235b4abb9d4fa742ab1f40401df5/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a987bbb97c12235b4abb9d4fa742ab1f40401df5/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fassert_module_sources.rs?ref=a987bbb97c12235b4abb9d4fa742ab1f40401df5", "patch": "@@ -44,7 +44,7 @@ pub fn assert_module_sources(tcx: TyCtxt<'_>) {\n \n         let ams = AssertModuleSource { tcx, available_cgus };\n \n-        for attr in tcx.hir().krate().item.attrs {\n+        for attr in tcx.hir().attrs(rustc_hir::CRATE_HIR_ID) {\n             ams.check_attr(attr);\n         }\n     })"}, {"sha": "b3bdaf5bdc7d0de54c486117f36e42b3817836fd", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a987bbb97c12235b4abb9d4fa742ab1f40401df5/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a987bbb97c12235b4abb9d4fa742ab1f40401df5/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=a987bbb97c12235b4abb9d4fa742ab1f40401df5", "patch": "@@ -38,7 +38,7 @@ fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> LintLevelMap {\n \n     builder.levels.id_to_set.reserve(krate.exported_macros.len() + 1);\n \n-    let push = builder.levels.push(&krate.item.attrs, &store, true);\n+    let push = builder.levels.push(tcx.hir().attrs(hir::CRATE_HIR_ID), &store, true);\n     builder.levels.register_id(hir::CRATE_HIR_ID);\n     for macro_def in krate.exported_macros {\n         builder.levels.register_id(macro_def.hir_id());"}, {"sha": "ff947c0357e38e6b74061bf42185db08ea97dd57", "filename": "compiler/rustc_metadata/src/link_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a987bbb97c12235b4abb9d4fa742ab1f40401df5/compiler%2Frustc_metadata%2Fsrc%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a987bbb97c12235b4abb9d4fa742ab1f40401df5/compiler%2Frustc_metadata%2Fsrc%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flink_args.rs?ref=a987bbb97c12235b4abb9d4fa742ab1f40401df5", "patch": "@@ -8,7 +8,7 @@ crate fn collect(tcx: TyCtxt<'_>) -> Vec<String> {\n     let mut collector = Collector { tcx, args: Vec::new() };\n     tcx.hir().krate().visit_all_item_likes(&mut collector);\n \n-    for attr in tcx.hir().krate().item.attrs.iter() {\n+    for attr in tcx.hir().attrs(hir::CRATE_HIR_ID).iter() {\n         if attr.has_name(sym::link_args) {\n             if let Some(linkarg) = attr.value_str() {\n                 collector.add_link_args(linkarg);"}, {"sha": "eb05d8b6bee56ffb62a9ef7fc12f180a2e064fe3", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a987bbb97c12235b4abb9d4fa742ab1f40401df5/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a987bbb97c12235b4abb9d4fa742ab1f40401df5/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=a987bbb97c12235b4abb9d4fa742ab1f40401df5", "patch": "@@ -2,7 +2,7 @@ use rustc_ast::entry::EntryPointType;\n use rustc_errors::struct_span_err;\n use rustc_hir::def_id::{CrateNum, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n-use rustc_hir::{ForeignItem, HirId, ImplItem, Item, ItemKind, TraitItem};\n+use rustc_hir::{ForeignItem, HirId, ImplItem, Item, ItemKind, TraitItem, CRATE_HIR_ID};\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::TyCtxt;\n@@ -60,7 +60,7 @@ fn entry_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<(LocalDefId, EntryFnType)\n     }\n \n     // If the user wants no main function at all, then stop here.\n-    if tcx.sess.contains_name(&tcx.hir().krate().item.attrs, sym::no_main) {\n+    if tcx.sess.contains_name(&tcx.hir().attrs(CRATE_HIR_ID), sym::no_main) {\n         return None;\n     }\n "}, {"sha": "07256a8203e8996e2b01d8fd4b576159f30cb3d7", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a987bbb97c12235b4abb9d4fa742ab1f40401df5/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a987bbb97c12235b4abb9d4fa742ab1f40401df5/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=a987bbb97c12235b4abb9d4fa742ab1f40401df5", "patch": "@@ -1118,6 +1118,7 @@ impl<'tcx> DumpVisitor<'tcx> {\n             .map(|i| id_from_def_id(i.def_id.to_def_id()))\n             .collect();\n         let span = self.span_from_span(krate.item.span);\n+        let attrs = self.tcx.hir().attrs(id);\n \n         self.dumper.dump_def(\n             &Access { public: true, reachable: true },\n@@ -1131,9 +1132,9 @@ impl<'tcx> DumpVisitor<'tcx> {\n                 children,\n                 parent: None,\n                 decl_id: None,\n-                docs: self.save_ctxt.docs_for_attrs(krate.item.attrs),\n+                docs: self.save_ctxt.docs_for_attrs(attrs),\n                 sig: None,\n-                attributes: lower_attributes(krate.item.attrs.to_owned(), &self.save_ctxt),\n+                attributes: lower_attributes(attrs.to_owned(), &self.save_ctxt),\n             },\n         );\n         intravisit::walk_crate(self, krate);"}, {"sha": "64375964e70685417736d11a8feb10270b4ff278", "filename": "src/librustdoc/doctest.rs", "status": "modified", "additions": 21, "deletions": 19, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a987bbb97c12235b4abb9d4fa742ab1f40401df5/src%2Flibrustdoc%2Fdoctest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a987bbb97c12235b4abb9d4fa742ab1f40401df5/src%2Flibrustdoc%2Fdoctest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctest.rs?ref=a987bbb97c12235b4abb9d4fa742ab1f40401df5", "patch": "@@ -106,25 +106,27 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n \n     let tests = interface::run_compiler(config, |compiler| {\n         compiler.enter(|queries| {\n-            let lower_to_hir = queries.lower_to_hir()?;\n-\n-            let mut opts = scrape_test_config(lower_to_hir.peek().0);\n-            opts.display_warnings |= options.display_warnings;\n-            let enable_per_target_ignores = options.enable_per_target_ignores;\n-            let mut collector = Collector::new(\n-                queries.crate_name()?.peek().to_string(),\n-                options,\n-                false,\n-                opts,\n-                Some(compiler.session().parse_sess.clone_source_map()),\n-                None,\n-                enable_per_target_ignores,\n-            );\n+            let _lower_to_hir = queries.lower_to_hir()?;\n \n+            let crate_name = queries.crate_name()?.peek().to_string();\n             let mut global_ctxt = queries.global_ctxt()?.take();\n \n-            global_ctxt.enter(|tcx| {\n+            let collector = global_ctxt.enter(|tcx| {\n                 let krate = tcx.hir().krate();\n+                let crate_attrs = tcx.hir().attrs(CRATE_HIR_ID);\n+\n+                let mut opts = scrape_test_config(crate_attrs);\n+                opts.display_warnings |= options.display_warnings;\n+                let enable_per_target_ignores = options.enable_per_target_ignores;\n+                let mut collector = Collector::new(\n+                    crate_name,\n+                    options,\n+                    false,\n+                    opts,\n+                    Some(compiler.session().parse_sess.clone_source_map()),\n+                    None,\n+                    enable_per_target_ignores,\n+                );\n \n                 let mut hir_collector = HirCollector {\n                     sess: compiler.session(),\n@@ -143,6 +145,8 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n                         intravisit::walk_crate(this, krate);\n                     },\n                 );\n+\n+                collector\n             });\n             compiler.session().abort_if_errors();\n \n@@ -167,15 +171,13 @@ crate fn run(options: Options) -> Result<(), ErrorReported> {\n }\n \n // Look for `#![doc(test(no_crate_inject))]`, used by crates in the std facade.\n-fn scrape_test_config(krate: &::rustc_hir::Crate<'_>) -> TestOptions {\n+fn scrape_test_config(attrs: &[ast::Attribute]) -> TestOptions {\n     use rustc_ast_pretty::pprust;\n \n     let mut opts =\n         TestOptions { no_crate_inject: false, display_warnings: false, attrs: Vec::new() };\n \n-    let test_attrs: Vec<_> = krate\n-        .item\n-        .attrs\n+    let test_attrs: Vec<_> = attrs\n         .iter()\n         .filter(|a| a.has_name(sym::doc))\n         .flat_map(|a| a.meta_item_list().unwrap_or_else(Vec::new))"}, {"sha": "8deccd6f9d77734f5fdfb07b7f37c100a5222072", "filename": "src/tools/clippy/clippy_lints/src/doc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a987bbb97c12235b4abb9d4fa742ab1f40401df5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a987bbb97c12235b4abb9d4fa742ab1f40401df5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdoc.rs?ref=a987bbb97c12235b4abb9d4fa742ab1f40401df5", "patch": "@@ -208,8 +208,9 @@ impl_lint_pass!(DocMarkdown =>\n );\n \n impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n-    fn check_crate(&mut self, cx: &LateContext<'tcx>, krate: &'tcx hir::Crate<'_>) {\n-        check_attrs(cx, &self.valid_idents, &krate.item.attrs);\n+    fn check_crate(&mut self, cx: &LateContext<'tcx>, _: &'tcx hir::Crate<'_>) {\n+        let attrs = cx.tcx.hir().attrs(hir::CRATE_HIR_ID);\n+        check_attrs(cx, &self.valid_idents, attrs);\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {"}, {"sha": "9b626d81ebd813e03e940a3cfaca1d8239057873", "filename": "src/tools/clippy/clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a987bbb97c12235b4abb9d4fa742ab1f40401df5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a987bbb97c12235b4abb9d4fa742ab1f40401df5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops.rs?ref=a987bbb97c12235b4abb9d4fa742ab1f40401df5", "patch": "@@ -578,7 +578,7 @@ impl<'tcx> LateLintPass<'tcx> for Loops {\n             // also check for empty `loop {}` statements, skipping those in #[panic_handler]\n             if block.stmts.is_empty() && block.expr.is_none() && !is_in_panic_handler(cx, expr) {\n                 let msg = \"empty `loop {}` wastes CPU cycles\";\n-                let help = if is_no_std_crate(cx.tcx.hir().krate()) {\n+                let help = if is_no_std_crate(cx) {\n                     \"you should either use `panic!()` or add a call pausing or sleeping the thread to the loop body\"\n                 } else {\n                     \"you should either use `panic!()` or add `std::thread::sleep(..);` to the loop body\""}, {"sha": "1b274c79d3820b5a948efb4578adb3bf220b0e3f", "filename": "src/tools/clippy/clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a987bbb97c12235b4abb9d4fa742ab1f40401df5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a987bbb97c12235b4abb9d4fa742ab1f40401df5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmain_recursion.rs?ref=a987bbb97c12235b4abb9d4fa742ab1f40401df5", "patch": "@@ -32,8 +32,8 @@ pub struct MainRecursion {\n impl_lint_pass!(MainRecursion => [MAIN_RECURSION]);\n \n impl LateLintPass<'_> for MainRecursion {\n-    fn check_crate(&mut self, _: &LateContext<'_>, krate: &Crate<'_>) {\n-        self.has_no_std_attr = is_no_std_crate(krate);\n+    fn check_crate(&mut self, cx: &LateContext<'_>, _: &Crate<'_>) {\n+        self.has_no_std_attr = is_no_std_crate(cx);\n     }\n \n     fn check_expr_post(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {"}, {"sha": "a1eb8e29850b835270fcebd2d19352d771a636c0", "filename": "src/tools/clippy/clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a987bbb97c12235b4abb9d4fa742ab1f40401df5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a987bbb97c12235b4abb9d4fa742ab1f40401df5/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_doc.rs?ref=a987bbb97c12235b4abb9d4fa742ab1f40401df5", "patch": "@@ -127,7 +127,8 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n     }\n \n     fn check_crate(&mut self, cx: &LateContext<'tcx>, krate: &'tcx hir::Crate<'_>) {\n-        self.check_missing_docs_attrs(cx, &krate.item.attrs, krate.item.span, \"the\", \"crate\");\n+        let attrs = cx.tcx.hir().attrs(hir::CRATE_HIR_ID);\n+        self.check_missing_docs_attrs(cx, attrs, krate.item.span, \"the\", \"crate\");\n     }\n \n     fn check_item(&mut self, cx: &LateContext<'tcx>, it: &'tcx hir::Item<'_>) {"}, {"sha": "4cd7ed5c45da3e79277597da183795ecf7c167dc", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a987bbb97c12235b4abb9d4fa742ab1f40401df5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a987bbb97c12235b4abb9d4fa742ab1f40401df5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=a987bbb97c12235b4abb9d4fa742ab1f40401df5", "patch": "@@ -61,7 +61,7 @@ use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::Node;\n use rustc_hir::{\n-    def, Arm, Block, Body, Constness, Crate, Expr, ExprKind, FnDecl, HirId, ImplItem, ImplItemKind, Item, ItemKind,\n+    def, Arm, Block, Body, Constness, Expr, ExprKind, FnDecl, HirId, ImplItem, ImplItemKind, Item, ItemKind,\n     MatchSource, Param, Pat, PatKind, Path, PathSegment, QPath, TraitItem, TraitItemKind, TraitRef, TyKind, Unsafety,\n };\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -1510,8 +1510,8 @@ pub fn is_must_use_func_call(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     did.map_or(false, |did| must_use_attr(&cx.tcx.get_attrs(did)).is_some())\n }\n \n-pub fn is_no_std_crate(krate: &Crate<'_>) -> bool {\n-    krate.item.attrs.iter().any(|attr| {\n+pub fn is_no_std_crate(cx: &LateContext<'_>) -> bool {\n+    cx.tcx.hir().attrs(hir::CRATE_HIR_ID).iter().any(|attr| {\n         if let ast::AttrKind::Normal(ref attr, _) = attr.kind {\n             attr.path == sym::no_std\n         } else {"}]}