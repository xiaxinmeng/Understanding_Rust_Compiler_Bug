{"sha": "ce36ab2b064c2aa716084d79717c64cc04bb6532", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlMzZhYjJiMDY0YzJhYTcxNjA4NGQ3OTcxN2M2NGNjMDRiYjY1MzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-15T09:37:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-11-15T09:37:24Z"}, "message": "Auto merge of #66438 - JohnTitor:rollup-qpv3wia, r=JohnTitor\n\nRollup of 12 pull requests\n\nSuccessful merges:\n\n - #65557 (rename Error::iter_chain() and remove Error::iter_sources())\n - #66013 (Avoid hashing the key twice in `get_query()`.)\n - #66306 (Remove cannot mutate statics in initializer of another static error)\n - #66338 (Update mdbook.)\n - #66388 (Do not ICE on recovery from unmet associated type bound obligation)\n - #66390 (Fix ICE when trying to suggest `Type<>` instead of `Type()`)\n - #66391 (Do not ICE in `if` without `else` in `async fn`)\n - #66398 (Remove some stack frames from `.async` calls)\n - #66410 (miri: helper methods for max values of machine's usize/isize)\n - #66418 (Link to tracking issue in HIR const-check error code description)\n - #66419 (Don't warn labels beginning with `_` on unused_labels lint)\n - #66428 (Cleanup unused function)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "77f5ba79a6eda736ab42329b9294a8e4c91fe259", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77f5ba79a6eda736ab42329b9294a8e4c91fe259"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce36ab2b064c2aa716084d79717c64cc04bb6532", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce36ab2b064c2aa716084d79717c64cc04bb6532", "html_url": "https://github.com/rust-lang/rust/commit/ce36ab2b064c2aa716084d79717c64cc04bb6532", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce36ab2b064c2aa716084d79717c64cc04bb6532/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e8c4e6fb1c952048fb823e59f4c9c6487bf9a58", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8c4e6fb1c952048fb823e59f4c9c6487bf9a58", "html_url": "https://github.com/rust-lang/rust/commit/9e8c4e6fb1c952048fb823e59f4c9c6487bf9a58"}, {"sha": "a173353daa657d90fff06e6223f48ee383bf9d13", "url": "https://api.github.com/repos/rust-lang/rust/commits/a173353daa657d90fff06e6223f48ee383bf9d13", "html_url": "https://github.com/rust-lang/rust/commit/a173353daa657d90fff06e6223f48ee383bf9d13"}], "stats": {"total": 738, "additions": 354, "deletions": 384}, "files": [{"sha": "bb2bd3c314caa03e060138c2cdfbe430def582b5", "filename": "Cargo.lock", "status": "modified", "additions": 172, "deletions": 175, "changes": 347, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -54,7 +54,7 @@ version = \"0.11.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ee49baf6cb617b853aa8d93bf420db2383fab46d314482ca2803b40d5fde979b\"\n dependencies = [\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -104,7 +104,7 @@ checksum = \"9a7d5b8723950951411ee34d271d99dddcc2035a16ab25310ea2c8cfd4369652\"\n dependencies = [\n  \"libc\",\n  \"termion\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -212,12 +212,6 @@ dependencies = [\n  \"toml\",\n ]\n \n-[[package]]\n-name = \"build_const\"\n-version = \"0.2.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"39092a32794787acd8525ee150305ff051b0aa6cc2abaf193924f5ab05425f39\"\n-\n [[package]]\n name = \"build_helper\"\n version = \"0.1.0\"\n@@ -311,7 +305,7 @@ dependencies = [\n  \"num_cpus\",\n  \"opener\",\n  \"openssl\",\n- \"percent-encoding 2.0.0\",\n+ \"percent-encoding 2.1.0\",\n  \"pretty_env_logger\",\n  \"remove_dir_all\",\n  \"rustc-workspace-hack\",\n@@ -330,7 +324,7 @@ dependencies = [\n  \"unicode-width\",\n  \"url 2.1.0\",\n  \"walkdir\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -482,7 +476,7 @@ dependencies = [\n  \"itertools 0.8.0\",\n  \"lazy_static 1.3.0\",\n  \"matches\",\n- \"pulldown-cmark 0.6.0\",\n+ \"pulldown-cmark 0.6.1\",\n  \"quine-mc_cluskey\",\n  \"regex-syntax\",\n  \"semver\",\n@@ -511,6 +505,26 @@ dependencies = [\n  \"cc\",\n ]\n \n+[[package]]\n+name = \"codespan\"\n+version = \"0.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"de67bdcd653002a6dba3eb53850ce3a485547225d81cb6c2bbdbc5a0cba5d15d\"\n+dependencies = [\n+ \"unicode-segmentation\",\n+]\n+\n+[[package]]\n+name = \"codespan-reporting\"\n+version = \"0.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"efd1d915d9e2b2ad696b2cd73215a84823ef3f0e3084d90304204415921b62c6\"\n+dependencies = [\n+ \"codespan\",\n+ \"termcolor\",\n+ \"unicode-width\",\n+]\n+\n [[package]]\n name = \"colored\"\n version = \"1.6.0\"\n@@ -564,7 +578,7 @@ dependencies = [\n  \"serde\",\n  \"serde_json\",\n  \"walkdir\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -585,7 +599,7 @@ dependencies = [\n  \"serde_derive\",\n  \"serde_json\",\n  \"tempfile\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -594,6 +608,34 @@ version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"8ff012e225ce166d4422e0e78419d901719760f62ae2b7969ca6b564d1b54a9e\"\n \n+[[package]]\n+name = \"cookie\"\n+version = \"0.12.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"888604f00b3db336d2af898ec3c1d5d0ddf5e6d462220f2ededc33a87ac4bbd5\"\n+dependencies = [\n+ \"time\",\n+ \"url 1.7.2\",\n+]\n+\n+[[package]]\n+name = \"cookie_store\"\n+version = \"0.7.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"46750b3f362965f197996c4448e4a0935e791bf7d6631bfce9ee0af3d24c919c\"\n+dependencies = [\n+ \"cookie\",\n+ \"failure\",\n+ \"idna 0.1.5\",\n+ \"log\",\n+ \"publicsuffix\",\n+ \"serde\",\n+ \"serde_json\",\n+ \"time\",\n+ \"try_from\",\n+ \"url 1.7.2\",\n+]\n+\n [[package]]\n name = \"core\"\n version = \"0.0.0\"\n@@ -623,22 +665,13 @@ version = \"0.29.0\"\n dependencies = [\n  \"curl\",\n  \"failure\",\n- \"percent-encoding 2.0.0\",\n+ \"percent-encoding 2.1.0\",\n  \"serde\",\n  \"serde_derive\",\n  \"serde_json\",\n  \"url 2.1.0\",\n ]\n \n-[[package]]\n-name = \"crc\"\n-version = \"1.8.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d663548de7f5cca343f1e0a48d14dcfb0e9eb4e079ec58883b7251539fa10aeb\"\n-dependencies = [\n- \"build_const\",\n-]\n-\n [[package]]\n name = \"crc32fast\"\n version = \"1.1.2\"\n@@ -754,7 +787,7 @@ dependencies = [\n  \"commoncrypto\",\n  \"hex 0.3.2\",\n  \"openssl\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -769,7 +802,7 @@ dependencies = [\n  \"openssl-sys\",\n  \"schannel\",\n  \"socket2\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -785,7 +818,7 @@ dependencies = [\n  \"openssl-sys\",\n  \"pkg-config\",\n  \"vcpkg\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -901,7 +934,7 @@ dependencies = [\n  \"cfg-if\",\n  \"libc\",\n  \"redox_users\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -921,6 +954,12 @@ version = \"0.4.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ea57b42383d091c85abcc2706240b94ab2a8fa1fc81c10ff23c4de06e2a90b5e\"\n \n+[[package]]\n+name = \"dunce\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d0ad6bf6a88548d1126045c413548df1453d9be094a8ab9fd59bf1fdd338da4f\"\n+\n [[package]]\n name = \"either\"\n version = \"1.5.0\"\n@@ -1050,15 +1089,15 @@ checksum = \"86d4de0081402f5e88cdac65c8dcdcc73118c1a7a465e2a05f0da05843a8ea33\"\n \n [[package]]\n name = \"flate2\"\n-version = \"1.0.6\"\n+version = \"1.0.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"2291c165c8e703ee54ef3055ad6188e3d51108e2ded18e9f2476e774fc5ad3d4\"\n+checksum = \"ad3c5233c9a940c8719031b423d7e6c16af66e031cb0420b0896f5245bf181d3\"\n dependencies = [\n+ \"cfg-if\",\n  \"crc32fast\",\n  \"libc\",\n  \"libz-sys\",\n- \"miniz-sys\",\n- \"miniz_oxide_c_api\",\n+ \"miniz_oxide\",\n ]\n \n [[package]]\n@@ -1107,7 +1146,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"9564fc758e15025b46aa6643b1b77d047d1a56a1aea6e01002ac0c7026876213\"\n dependencies = [\n  \"libc\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -1359,7 +1398,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"a3753954f7bd71f0e671afb8b5a992d1724cf43b7f95a563cd4a0bde94659ca8\"\n dependencies = [\n  \"scopeguard 1.0.0\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -1378,9 +1417,9 @@ dependencies = [\n \n [[package]]\n name = \"http\"\n-version = \"0.1.16\"\n+version = \"0.1.19\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fe67e3678f2827030e89cc4b9e7ecd16d52f132c0b940ab5005f88e821500f6a\"\n+checksum = \"d7e06e336150b178206af098a055e3621e8336027e2b4d126bda0bc64824baaf\"\n dependencies = [\n  \"bytes\",\n  \"fnv\",\n@@ -1539,7 +1578,7 @@ dependencies = [\n  \"remove_dir_all\",\n  \"tar\",\n  \"walkdir\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n  \"xz2\",\n ]\n \n@@ -1704,7 +1743,7 @@ dependencies = [\n  \"num_cpus\",\n  \"tokio\",\n  \"tokio-codec\",\n- \"unicase 2.5.1\",\n+ \"unicase\",\n ]\n \n [[package]]\n@@ -1744,19 +1783,6 @@ dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n \n-[[package]]\n-name = \"libflate\"\n-version = \"0.1.25\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"90c6f86f4b0caa347206f916f8b687b51d77c6ef8ff18d52dd007491fd580529\"\n-dependencies = [\n- \"adler32\",\n- \"byteorder\",\n- \"crc32fast\",\n- \"rle-decode-fast\",\n- \"take_mut\",\n-]\n-\n [[package]]\n name = \"libgit2-sys\"\n version = \"0.9.0\"\n@@ -1926,9 +1952,9 @@ checksum = \"7ffc5c5338469d4d3ea17d269fa8ea3512ad247247c30bd2df69e68309ed0a08\"\n \n [[package]]\n name = \"mdbook\"\n-version = \"0.3.3\"\n+version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9a070268274c566082efb6b2ace7743e43ba91a70d5c6982981e96d3c05ac81c\"\n+checksum = \"031bdd9d4893c983e2f69ebc4b59070feee8276a584c4aabdcb351235ea28016\"\n dependencies = [\n  \"ammonia\",\n  \"chrono\",\n@@ -1942,7 +1968,7 @@ dependencies = [\n  \"log\",\n  \"memchr\",\n  \"open\",\n- \"pulldown-cmark 0.5.3\",\n+ \"pulldown-cmark 0.6.1\",\n  \"regex\",\n  \"serde\",\n  \"serde_derive\",\n@@ -1955,25 +1981,29 @@ dependencies = [\n \n [[package]]\n name = \"mdbook-linkcheck\"\n-version = \"0.3.0\"\n+version = \"0.5.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"77d1f0ba4d1e6b86fa18e8853d026d7d76a97eb7eb5eb052ed80901e43b7fc10\"\n+checksum = \"c0a04db564ca37c47771f8455c825dc941ea851ff0deffcf55a04c512406b409\"\n dependencies = [\n- \"env_logger 0.6.2\",\n+ \"codespan\",\n+ \"codespan-reporting\",\n+ \"dunce\",\n+ \"either\",\n+ \"env_logger 0.7.1\",\n  \"failure\",\n+ \"http\",\n  \"log\",\n  \"mdbook\",\n- \"memchr\",\n- \"pulldown-cmark 0.5.3\",\n+ \"percent-encoding 2.1.0\",\n+ \"pulldown-cmark 0.6.1\",\n  \"rayon\",\n  \"regex\",\n  \"reqwest\",\n  \"semver\",\n  \"serde\",\n  \"serde_derive\",\n  \"serde_json\",\n- \"structopt 0.2.18\",\n- \"url 1.7.2\",\n+ \"structopt\",\n ]\n \n [[package]]\n@@ -2000,7 +2030,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"e2ffa2c986de11a9df78620c01eeaaf27d94d3ff02bf81bfcca953102dd0c6ff\"\n dependencies = [\n  \"libc\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -2024,19 +2054,17 @@ version = \"0.3.13\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"3e27ca21f40a310bd06d9031785f4801710d566c184a6e15bad4f1d9b65f9425\"\n dependencies = [\n- \"unicase 2.5.1\",\n+ \"unicase\",\n ]\n \n [[package]]\n name = \"mime_guess\"\n-version = \"2.0.0-alpha.6\"\n+version = \"2.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"30de2e4613efcba1ec63d8133f344076952090c122992a903359be5a4f99c3ed\"\n+checksum = \"1a0ed03949aef72dbdf3116a383d7b38b4768e6f960528cd6a6044aa9ed68599\"\n dependencies = [\n  \"mime\",\n- \"phf\",\n- \"phf_codegen\",\n- \"unicase 1.4.2\",\n+ \"unicase\",\n ]\n \n [[package]]\n@@ -2048,37 +2076,15 @@ dependencies = [\n  \"macro-utils\",\n ]\n \n-[[package]]\n-name = \"miniz-sys\"\n-version = \"0.1.11\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"0300eafb20369952951699b68243ab4334f4b10a88f411c221d444b36c40e649\"\n-dependencies = [\n- \"cc\",\n- \"libc\",\n-]\n-\n [[package]]\n name = \"miniz_oxide\"\n-version = \"0.2.0\"\n+version = \"0.3.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5ad30a47319c16cde58d0314f5d98202a80c9083b5f61178457403dfb14e509c\"\n+checksum = \"6f3f74f726ae935c3f514300cc6773a0c9492abc5e972d42ba0c0ebb88757625\"\n dependencies = [\n  \"adler32\",\n ]\n \n-[[package]]\n-name = \"miniz_oxide_c_api\"\n-version = \"0.2.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"28edaef377517fd9fe3e085c37d892ce7acd1fbeab9239c5a36eec352d8a8b7e\"\n-dependencies = [\n- \"cc\",\n- \"crc\",\n- \"libc\",\n- \"miniz_oxide\",\n-]\n-\n [[package]]\n name = \"mio\"\n version = \"0.6.16\"\n@@ -2107,7 +2113,7 @@ dependencies = [\n  \"log\",\n  \"mio\",\n  \"miow 0.3.3\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -2140,7 +2146,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"396aa0f2003d7df8395cb93e09871561ccc3e785f0acb369170e8cc74ddf9226\"\n dependencies = [\n  \"socket2\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -2190,7 +2196,7 @@ checksum = \"42550d9fb7b6684a6d404d9fa7250c2eb2646df731d1c06afc06dcee9e1bcf88\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -2247,7 +2253,7 @@ version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"998c59e83d9474c01127a96e023b7a04bb061dd286bf8bb939d31dc8d31a7448\"\n dependencies = [\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -2359,7 +2365,7 @@ dependencies = [\n  \"tokio\",\n  \"tokio-named-pipes\",\n  \"tokio-uds\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -2393,7 +2399,7 @@ dependencies = [\n  \"rand 0.6.1\",\n  \"rustc_version\",\n  \"smallvec 0.6.10\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -2408,7 +2414,7 @@ dependencies = [\n  \"redox_syscall\",\n  \"rustc_version\",\n  \"smallvec 0.6.10\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -2419,9 +2425,9 @@ checksum = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n \n [[package]]\n name = \"percent-encoding\"\n-version = \"2.0.0\"\n+version = \"2.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ba4f28a6faf4ffea762ba8f4baef48c61a6db348647c73095034041fc79dd954\"\n+checksum = \"d4fd5641d01c8f18a23da7b6fe29298ff4b55afcccdf78973b24cf3175fee32e\"\n \n [[package]]\n name = \"pest\"\n@@ -2512,7 +2518,6 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"234f71a15de2288bcb7e3b6515828d22af7ec8598ee6d24c3b526fa0a80b67a0\"\n dependencies = [\n  \"siphasher\",\n- \"unicase 1.4.2\",\n ]\n \n [[package]]\n@@ -2619,28 +2624,40 @@ dependencies = [\n  \"core\",\n ]\n \n+[[package]]\n+name = \"publicsuffix\"\n+version = \"1.5.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"9bf259a81de2b2eb9850ec990ec78e6a25319715584fd7652b9b26f96fcb1510\"\n+dependencies = [\n+ \"error-chain\",\n+ \"idna 0.2.0\",\n+ \"lazy_static 1.3.0\",\n+ \"regex\",\n+ \"url 2.1.0\",\n+]\n+\n [[package]]\n name = \"pulldown-cmark\"\n version = \"0.5.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"77043da1282374688ee212dc44b3f37ff929431de9c9adc3053bd3cee5630357\"\n dependencies = [\n  \"bitflags\",\n- \"getopts\",\n  \"memchr\",\n- \"unicase 2.5.1\",\n+ \"unicase\",\n ]\n \n [[package]]\n name = \"pulldown-cmark\"\n-version = \"0.6.0\"\n+version = \"0.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"85b0ad0d4c1702965ee6bb5b4ff5e71f83850b497d497e9444302987bf9e26a4\"\n+checksum = \"1c205cc82214f3594e2d50686730314f817c67ffa80fe800cf0db78c3c2b9d9e\"\n dependencies = [\n  \"bitflags\",\n  \"getopts\",\n  \"memchr\",\n- \"unicase 2.5.1\",\n+ \"unicase\",\n ]\n \n [[package]]\n@@ -2712,7 +2729,7 @@ dependencies = [\n  \"rand_pcg\",\n  \"rand_xorshift 0.1.0\",\n  \"rustc_version\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -2807,7 +2824,7 @@ dependencies = [\n  \"libc\",\n  \"rand_core 0.4.0\",\n  \"rdrand\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -2934,45 +2951,43 @@ version = \"0.5.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"4a83fa3702a688b9359eccba92d153ac33fd2e8462f9e0e3fdf155239ea7792e\"\n dependencies = [\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n name = \"reqwest\"\n-version = \"0.9.11\"\n+version = \"0.9.22\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e542d9f077c126af32536b6aacc75bb7325400eab8cd0743543be5d91660780d\"\n+checksum = \"2c2064233e442ce85c77231ebd67d9eca395207dec2127fe0bbedde4bd29a650\"\n dependencies = [\n  \"base64\",\n  \"bytes\",\n+ \"cookie\",\n+ \"cookie_store\",\n  \"encoding_rs\",\n+ \"flate2\",\n  \"futures\",\n  \"http\",\n  \"hyper\",\n  \"hyper-tls\",\n- \"libflate\",\n  \"log\",\n  \"mime\",\n  \"mime_guess\",\n  \"native-tls\",\n  \"serde\",\n  \"serde_json\",\n  \"serde_urlencoded\",\n+ \"time\",\n  \"tokio\",\n  \"tokio-executor\",\n  \"tokio-io\",\n  \"tokio-threadpool\",\n  \"tokio-timer\",\n  \"url 1.7.2\",\n  \"uuid\",\n+ \"winreg\",\n ]\n \n-[[package]]\n-name = \"rle-decode-fast\"\n-version = \"1.0.1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"cabe4fa914dec5870285fa7f71f602645da47c486e68486d2b4ceb4a343e90ac\"\n-\n [[package]]\n name = \"rls\"\n version = \"1.40.0\"\n@@ -3100,6 +3115,7 @@ name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n  \"clap\",\n+ \"codespan-reporting\",\n  \"failure\",\n  \"mdbook\",\n  \"mdbook-linkcheck\",\n@@ -3397,7 +3413,7 @@ dependencies = [\n  \"smallvec 0.6.10\",\n  \"syn 0.15.35\",\n  \"url 2.1.0\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -3946,7 +3962,7 @@ dependencies = [\n  \"rustfmt-config_proc_macro\",\n  \"serde\",\n  \"serde_json\",\n- \"structopt 0.3.1\",\n+ \"structopt\",\n  \"term 0.6.0\",\n  \"toml\",\n  \"unicode-segmentation\",\n@@ -3976,7 +3992,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"0e1a231dc10abf6749cfa5d7767f25888d484201accbd919b66ab5413c502d56\"\n dependencies = [\n  \"lazy_static 1.3.0\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -4187,7 +4203,7 @@ dependencies = [\n  \"cfg-if\",\n  \"libc\",\n  \"redox_syscall\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -4280,36 +4296,14 @@ version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"8ea5119cdb4c55b55d432abb513a0429384878c15dde60cc77b1c99de1a95a6a\"\n \n-[[package]]\n-name = \"structopt\"\n-version = \"0.2.18\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"16c2cdbf9cc375f15d1b4141bc48aeef444806655cd0e904207edc8d68d86ed7\"\n-dependencies = [\n- \"clap\",\n- \"structopt-derive 0.2.18\",\n-]\n-\n [[package]]\n name = \"structopt\"\n version = \"0.3.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"2ac9d6e93dd792b217bf89cda5c14566e3043960c6f9da890c2ba5d09d07804c\"\n dependencies = [\n  \"clap\",\n- \"structopt-derive 0.3.1\",\n-]\n-\n-[[package]]\n-name = \"structopt-derive\"\n-version = \"0.2.18\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"53010261a84b37689f9ed7d395165029f9cc7abb9f56bbfe86bee2597ed25107\"\n-dependencies = [\n- \"heck\",\n- \"proc-macro2 0.4.30\",\n- \"quote 0.6.12\",\n- \"syn 0.15.35\",\n+ \"structopt-derive\",\n ]\n \n [[package]]\n@@ -4453,12 +4447,6 @@ dependencies = [\n  \"unicode-width\",\n ]\n \n-[[package]]\n-name = \"take_mut\"\n-version = \"0.2.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f764005d11ee5f36500a149ace24e00e3da98b0158b3e2d53a7495660d3f4d60\"\n-\n [[package]]\n name = \"tar\"\n version = \"0.4.20\"\n@@ -4482,7 +4470,7 @@ dependencies = [\n  \"rand 0.7.0\",\n  \"redox_syscall\",\n  \"remove_dir_all\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -4512,7 +4500,7 @@ checksum = \"0dd90505d5006a4422d3520b30c781d480b3f36768c2fa2187c3e950bc110464\"\n dependencies = [\n  \"byteorder\",\n  \"dirs\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -4591,13 +4579,13 @@ dependencies = [\n \n [[package]]\n name = \"time\"\n-version = \"0.1.40\"\n+version = \"0.1.42\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"d825be0eb33fda1a7e68012d51e9c7f451dc1a69391e7fdc197060bb8c56667b\"\n+checksum = \"db8dcfca086c1143c9270ac42a2bbd8a7ee477b78ac8e45b19abfb0cbede4b6f\"\n dependencies = [\n  \"libc\",\n  \"redox_syscall\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -4713,7 +4701,7 @@ dependencies = [\n  \"tokio-io\",\n  \"tokio-reactor\",\n  \"tokio-signal\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -4757,7 +4745,7 @@ dependencies = [\n  \"tokio-executor\",\n  \"tokio-io\",\n  \"tokio-reactor\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -4876,6 +4864,15 @@ version = \"0.2.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"e604eb7b43c06650e854be16a2a03155743d3752dd1c943f6829e26b7a36e382\"\n \n+[[package]]\n+name = \"try_from\"\n+version = \"0.3.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"283d3b89e1368717881a9d51dad843cc435380d8109c9e47d38780a324698d8b\"\n+dependencies = [\n+ \"cfg-if\",\n+]\n+\n [[package]]\n name = \"typenum\"\n version = \"1.10.0\"\n@@ -4894,15 +4891,6 @@ version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"535c204ee4d8434478593480b8f86ab45ec9aae0e83c568ca81abf0fd0e88f86\"\n \n-[[package]]\n-name = \"unicase\"\n-version = \"1.4.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7f4765f83163b74f957c797ad9253caf97f103fb064d3999aea9568d09fc8a33\"\n-dependencies = [\n- \"version_check\",\n-]\n-\n [[package]]\n name = \"unicase\"\n version = \"2.5.1\"\n@@ -4929,9 +4917,9 @@ checksum = \"6a0180bc61fc5a987082bfa111f4cc95c4caff7f9799f3e46df09163a937aa25\"\n \n [[package]]\n name = \"unicode-segmentation\"\n-version = \"1.2.1\"\n+version = \"1.6.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"aa6024fc12ddfd1c6dbc14a80fa2324d4568849869b779f6bd37e5e4c03344d1\"\n+checksum = \"e83e153d1053cbb5a118eeff7fd5be06ed99153f00dbcd8ae310c5fb2b22edc0\"\n \n [[package]]\n name = \"unicode-width\"\n@@ -5000,7 +4988,7 @@ checksum = \"75b414f6c464c879d7f9babf951f23bc3743fb7313c081b2e6ca719067ea9d61\"\n dependencies = [\n  \"idna 0.2.0\",\n  \"matches\",\n- \"percent-encoding 2.0.0\",\n+ \"percent-encoding 2.1.0\",\n  \"serde\",\n ]\n \n@@ -5076,7 +5064,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"9d9d7ed3431229a144296213105a390676cc49c9b6a72bd19f3176c98e129fa1\"\n dependencies = [\n  \"same-file\",\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n  \"winapi-util\",\n ]\n \n@@ -5110,9 +5098,9 @@ checksum = \"167dc9d6949a9b857f3451275e911c3f44255842c1f7a76f33c55103a909087a\"\n \n [[package]]\n name = \"winapi\"\n-version = \"0.3.6\"\n+version = \"0.3.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"92c1eb33641e276cfa214a0522acad57be5c56b10cb348b3c5117db75f3ac4b0\"\n+checksum = \"8093091eeb260906a183e6ae1abdba2ef5ef2257a21801128899c3fc699229c6\"\n dependencies = [\n  \"winapi-i686-pc-windows-gnu\",\n  \"winapi-x86_64-pc-windows-gnu\",\n@@ -5136,7 +5124,7 @@ version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"7168bab6e1daee33b4557efd0e95d5ca70a03706d39fa5f3fe7a236f584b03c9\"\n dependencies = [\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n ]\n \n [[package]]\n@@ -5151,10 +5139,19 @@ version = \"1.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"561ed901ae465d6185fa7864d63fbd5720d0ef718366c9a4dc83cf6170d7e9ba\"\n dependencies = [\n- \"winapi 0.3.6\",\n+ \"winapi 0.3.8\",\n  \"winapi-util\",\n ]\n \n+[[package]]\n+name = \"winreg\"\n+version = \"0.6.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b2986deb581c4fe11b621998a5e53361efe6b48a151178d0cd9eeffa4dc6acc9\"\n+dependencies = [\n+ \"winapi 0.3.8\",\n+]\n+\n [[package]]\n name = \"ws2_32-sys\"\n version = \"0.2.1\""}, {"sha": "dbbb7f926bc952c892435a185156721a7b337abf", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -1862,15 +1862,16 @@ impl<'a> LoweringContext<'a> {\n                         if let Ok(snippet) = self.sess.source_map().span_to_snippet(data.span) {\n                             // Do not suggest going from `Trait()` to `Trait<>`\n                             if data.inputs.len() > 0 {\n-                                let split = snippet.find('(').unwrap();\n-                                let trait_name = &snippet[0..split];\n-                                let args = &snippet[split + 1 .. snippet.len() - 1];\n-                                err.span_suggestion(\n-                                    data.span,\n-                                    \"use angle brackets instead\",\n-                                    format!(\"{}<{}>\", trait_name, args),\n-                                    Applicability::MaybeIncorrect,\n-                                );\n+                                if let Some(split) = snippet.find('(') {\n+                                    let trait_name = &snippet[0..split];\n+                                    let args = &snippet[split + 1 .. snippet.len() - 1];\n+                                    err.span_suggestion(\n+                                        data.span,\n+                                        \"use angle brackets instead\",\n+                                        format!(\"{}<{}>\", trait_name, args),\n+                                        Applicability::MaybeIncorrect,\n+                                    );\n+                                }\n                             }\n                         };\n                         err.emit();"}, {"sha": "38877dee71106fea5d63515805ffc28337599cfd", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -59,6 +59,7 @@\n #![feature(log_syntax)]\n #![feature(associated_type_bounds)]\n #![feature(rustc_attrs)]\n+#![feature(hash_raw_entry)]\n \n #![recursion_limit=\"512\"]\n "}, {"sha": "7c77b2c0711b9ee698c6d6fda501fcaefd9de304", "filename": "src/librustc/mir/interpret/pointer.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fpointer.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -1,4 +1,5 @@\n use std::fmt::{self, Display};\n+use std::convert::TryFrom;\n \n use crate::mir;\n use crate::ty::layout::{self, HasDataLayout, Size};\n@@ -40,6 +41,18 @@ pub trait PointerArithmetic: layout::HasDataLayout {\n         self.data_layout().pointer_size\n     }\n \n+    #[inline]\n+    fn usize_max(&self) -> u64 {\n+        let max_usize_plus_1 = 1u128 << self.pointer_size().bits();\n+        u64::try_from(max_usize_plus_1-1).unwrap()\n+    }\n+\n+    #[inline]\n+    fn isize_max(&self) -> i64 {\n+        let max_isize_plus_1 = 1u128 << (self.pointer_size().bits()-1);\n+        i64::try_from(max_isize_plus_1-1).unwrap()\n+    }\n+\n     /// Helper function: truncate given value-\"overflowed flag\" pair to pointer size and\n     /// update \"overflowed flag\" if there was an overflow.\n     /// This should be called by all the other methods before returning!"}, {"sha": "52a784d3fc0be105dd428eec5881e37c451501f4", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -14,12 +14,13 @@ use errors::Level;\n use errors::Diagnostic;\n use errors::FatalError;\n use errors::Handler;\n-use rustc_data_structures::fx::{FxHashMap};\n+use rustc_data_structures::fx::{FxHasher, FxHashMap};\n use rustc_data_structures::sync::{Lrc, Lock};\n use rustc_data_structures::sharded::Sharded;\n use rustc_data_structures::thin_vec::ThinVec;\n #[cfg(not(parallel_compiler))]\n use rustc_data_structures::cold_path;\n+use std::hash::{Hash, Hasher};\n use std::mem;\n use std::ptr;\n use std::collections::hash_map::Entry;\n@@ -82,8 +83,17 @@ impl<'a, 'tcx, Q: QueryDescription<'tcx>> JobOwner<'a, 'tcx, Q> {\n     pub(super) fn try_get(tcx: TyCtxt<'tcx>, span: Span, key: &Q::Key) -> TryGetJob<'a, 'tcx, Q> {\n         let cache = Q::query_cache(tcx);\n         loop {\n-            let mut lock = cache.get_shard_by_value(key).lock();\n-            if let Some(value) = lock.results.get(key) {\n+            // We compute the key's hash once and then use it for both the\n+            // shard lookup and the hashmap lookup. This relies on the fact\n+            // that both of them use `FxHasher`.\n+            let mut state = FxHasher::default();\n+            key.hash(&mut state);\n+            let key_hash = state.finish();\n+\n+            let mut lock = cache.get_shard_by_hash(key_hash).lock();\n+            if let Some((_, value)) =\n+                lock.results.raw_entry().from_key_hashed_nocheck(key_hash, key)\n+            {\n                 tcx.prof.query_cache_hit(Q::NAME);\n                 let result = (value.value.clone(), value.index);\n                 #[cfg(debug_assertions)]"}, {"sha": "a28a5e0f0415a575a8c32683f36153c7674b3b9f", "filename": "src/librustc_data_structures/sharded.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc_data_structures%2Fsharded.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc_data_structures%2Fsharded.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fsharded.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -60,6 +60,7 @@ impl<T> Sharded<T> {\n         }\n     }\n \n+    /// The shard is selected by hashing `val` with `FxHasher`.\n     #[inline]\n     pub fn get_shard_by_value<K: Hash + ?Sized>(&self, val: &K) -> &Lock<T> {\n         if SHARDS == 1 {\n@@ -69,6 +70,11 @@ impl<T> Sharded<T> {\n         }\n     }\n \n+    /// Get a shard with a pre-computed hash value. If `get_shard_by_value` is\n+    /// ever used in combination with `get_shard_by_hash` on a single `Sharded`\n+    /// instance, then `hash` must be computed with `FxHasher`. Otherwise,\n+    /// `hash` can be computed with any hasher, so long as that hasher is used\n+    /// consistently for each `Sharded` instance.\n     #[inline]\n     pub fn get_shard_by_hash(&self, hash: u64) -> &Lock<T> {\n         let hash_len = mem::size_of::<usize>();"}, {"sha": "b299102fd6934e8e552c69e294114e481553154a", "filename": "src/librustc_error_codes/error_codes/E0744.md", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc_error_codes%2Ferror_codes%2FE0744.md", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc_error_codes%2Ferror_codes%2FE0744.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0744.md?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -15,3 +15,10 @@ const _: i32 = {\n     x\n };\n ```\n+\n+This will be allowed at some point in the future, but the implementation is not\n+yet complete. See the tracking issue for [conditionals] or [loops] in a const\n+context for the current status.\n+\n+[conditionals]: https://github.com/rust-lang/rust/issues/49146\n+[loops]: https://github.com/rust-lang/rust/issues/52000"}, {"sha": "74b22d8e14366af24025dabaf7fd15ac9fdad5cc", "filename": "src/librustc_mir/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -326,17 +326,7 @@ impl Visitor<'tcx> for Validator<'_, 'mir, 'tcx> {\n                 let is_thread_local = self.tcx.has_attr(*def_id, sym::thread_local);\n                 if is_thread_local {\n                     self.check_op(ops::ThreadLocalAccess);\n-                } else if self.const_kind() == ConstKind::Static && context.is_mutating_use() {\n-                    // this is not strictly necessary as miri will also bail out\n-                    // For interior mutability we can't really catch this statically as that\n-                    // goes through raw pointers and intermediate temporaries, so miri has\n-                    // to catch this anyway\n-\n-                    self.tcx.sess.span_err(\n-                        self.span,\n-                        \"cannot mutate statics in the initializer of another static\",\n-                    );\n-                } else {\n+                } else if self.const_kind() != ConstKind::Static || !context.is_mutating_use() {\n                     self.check_op(ops::StaticAccess);\n                 }\n             }"}, {"sha": "964efdec2b9d227e4016a522ef60c3b47c9624f4", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -787,19 +787,6 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n \n                 // Only allow statics (not consts) to refer to other statics.\n                 if self.mode == Mode::Static || self.mode == Mode::StaticMut {\n-                    if self.mode == Mode::Static\n-                        && context.is_mutating_use()\n-                        && !self.suppress_errors\n-                    {\n-                        // this is not strictly necessary as miri will also bail out\n-                        // For interior mutability we can't really catch this statically as that\n-                        // goes through raw pointers and intermediate temporaries, so miri has\n-                        // to catch this anyway\n-                        self.tcx.sess.span_err(\n-                            self.span,\n-                            \"cannot mutate statics in the initializer of another static\",\n-                        );\n-                    }\n                     return;\n                 }\n                 unleash_miri!(self);"}, {"sha": "6b0683879740a6eaa83c2f956640a30e7a6a7004", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -1767,7 +1767,9 @@ impl<'a, 'b> LateResolutionVisitor<'a, '_> {\n \n     fn with_resolved_label(&mut self, label: Option<Label>, id: NodeId, f: impl FnOnce(&mut Self)) {\n         if let Some(label) = label {\n-            self.diagnostic_metadata.unused_labels.insert(id, label.ident.span);\n+            if label.ident.as_str().as_bytes()[1] != b'_' {\n+                self.diagnostic_metadata.unused_labels.insert(id, label.ident.span);\n+            }\n             self.with_label_rib(NormalRibKind, |this| {\n                 let ident = label.ident.modern_and_legacy();\n                 this.label_ribs.last_mut().unwrap().bindings.insert(ident, id);"}, {"sha": "6e37c0dbbdf9d2534f4ed921e6410854aa78b64a", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -244,7 +244,13 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n         // can be reborrowed without needing to spill to a temporary.\n         // If this were not the case, then we could conceivably have\n         // to create intermediate temporaries.)\n-        let ty = self.fcx.tables.borrow().expr_ty(expr);\n-        self.record(ty, scope, Some(expr), expr.span);\n+        //\n+        // The type table might not have information for this expression\n+        // if it is in a malformed scope. (#66387)\n+        if let Some(ty) = self.fcx.tables.borrow().expr_ty_opt(expr) {\n+            self.record(ty, scope, Some(expr), expr.span);\n+        } else {\n+            self.fcx.tcx.sess.delay_span_bug(expr.span, \"no type for node\");\n+        }\n     }\n }"}, {"sha": "a8418c5f3499b504bb9c6ec5711322cdabec2e71", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -3108,7 +3108,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         fallback_has_occurred: bool,\n         mutate_fullfillment_errors: impl Fn(&mut Vec<traits::FulfillmentError<'tcx>>),\n     ) {\n-        if let Err(mut errors) = self.fulfillment_cx.borrow_mut().select_where_possible(self) {\n+        let result = self.fulfillment_cx.borrow_mut().select_where_possible(self);\n+        if let Err(mut errors) = result {\n             mutate_fullfillment_errors(&mut errors);\n             self.report_fulfillment_errors(&errors, self.inh.body_id, fallback_has_occurred);\n         }"}, {"sha": "752b93f2ac5e35a2f8cd7a68015f0e0442e50814", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -1081,14 +1081,13 @@ function getSearchElement() {\n                 val = paths[paths.length - 1];\n                 var contains = paths.slice(0, paths.length > 1 ? paths.length - 1 : 1);\n \n+                var lev;\n+                var lev_distance;\n                 for (j = 0; j < nSearchWords; ++j) {\n-                    var lev;\n-                    var lev_distance;\n                     ty = searchIndex[j];\n                     if (!ty || (filterCrates !== undefined && ty.crate !== filterCrates)) {\n                         continue;\n                     }\n-                    var lev_distance;\n                     var lev_add = 0;\n                     if (paths.length > 1) {\n                         lev = checkPath(contains, paths[paths.length - 1], ty);\n@@ -1633,7 +1632,7 @@ function getSearchElement() {\n             }\n \n             var filterCrates = getFilterCrates();\n-            showResults(execSearch(query, index, filterCrates), filterCrates);\n+            showResults(execSearch(query, index, filterCrates));\n         }\n \n         function buildIndex(rawSearchIndex) {"}, {"sha": "df24b6635f41160c06690c7cde48fa0dcf15002e", "filename": "src/libstd/error.rs", "status": "modified", "additions": 12, "deletions": 80, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -725,6 +725,9 @@ impl dyn Error {\n     /// Returns an iterator starting with the current error and continuing with\n     /// recursively calling [`source`].\n     ///\n+    /// If you want to omit the current error and only use its sources,\n+    /// use `skip(1)`.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -763,7 +766,7 @@ impl dyn Error {\n     /// // let err : Box<Error> = b.into(); // or\n     /// let err = &b as &(dyn Error);\n     ///\n-    /// let mut iter = err.iter_chain();\n+    /// let mut iter = err.chain();\n     ///\n     /// assert_eq!(\"B\".to_string(), iter.next().unwrap().to_string());\n     /// assert_eq!(\"A\".to_string(), iter.next().unwrap().to_string());\n@@ -774,98 +777,27 @@ impl dyn Error {\n     /// [`source`]: trait.Error.html#method.source\n     #[unstable(feature = \"error_iter\", issue = \"58520\")]\n     #[inline]\n-    pub fn iter_chain(&self) -> ErrorIter<'_> {\n-        ErrorIter {\n+    pub fn chain(&self) -> Chain<'_> {\n+        Chain {\n             current: Some(self),\n         }\n     }\n-\n-    /// Returns an iterator starting with the [`source`] of this error\n-    /// and continuing with recursively calling [`source`].\n-    ///\n-    /// # Examples\n-    ///\n-    /// ```\n-    /// #![feature(error_iter)]\n-    /// use std::error::Error;\n-    /// use std::fmt;\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct A;\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct B(Option<Box<dyn Error + 'static>>);\n-    ///\n-    /// #[derive(Debug)]\n-    /// struct C(Option<Box<dyn Error + 'static>>);\n-    ///\n-    /// impl fmt::Display for A {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"A\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl fmt::Display for B {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"B\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl fmt::Display for C {\n-    ///     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-    ///         write!(f, \"C\")\n-    ///     }\n-    /// }\n-    ///\n-    /// impl Error for A {}\n-    ///\n-    /// impl Error for B {\n-    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n-    ///         self.0.as_ref().map(|e| e.as_ref())\n-    ///     }\n-    /// }\n-    ///\n-    /// impl Error for C {\n-    ///     fn source(&self) -> Option<&(dyn Error + 'static)> {\n-    ///         self.0.as_ref().map(|e| e.as_ref())\n-    ///     }\n-    /// }\n-    ///\n-    /// let b = B(Some(Box::new(A)));\n-    /// let c = C(Some(Box::new(b)));\n-    ///\n-    /// // let err : Box<Error> = c.into(); // or\n-    /// let err = &c as &(dyn Error);\n-    ///\n-    /// let mut iter = err.iter_sources();\n-    ///\n-    /// assert_eq!(\"B\".to_string(), iter.next().unwrap().to_string());\n-    /// assert_eq!(\"A\".to_string(), iter.next().unwrap().to_string());\n-    /// assert!(iter.next().is_none());\n-    /// assert!(iter.next().is_none());\n-    /// ```\n-    ///\n-    /// [`source`]: trait.Error.html#method.source\n-    #[inline]\n-    #[unstable(feature = \"error_iter\", issue = \"58520\")]\n-    pub fn iter_sources(&self) -> ErrorIter<'_> {\n-        ErrorIter {\n-            current: self.source(),\n-        }\n-    }\n }\n \n-/// An iterator over [`Error`]\n+/// An iterator over an [`Error`] and its sources.\n+///\n+/// If you want to omit the initial error and only process\n+/// its sources, use `skip(1)`.\n ///\n /// [`Error`]: trait.Error.html\n #[unstable(feature = \"error_iter\", issue = \"58520\")]\n #[derive(Copy, Clone, Debug)]\n-pub struct ErrorIter<'a> {\n+pub struct Chain<'a> {\n     current: Option<&'a (dyn Error + 'static)>,\n }\n \n #[unstable(feature = \"error_iter\", issue = \"58520\")]\n-impl<'a> Iterator for ErrorIter<'a> {\n+impl<'a> Iterator for Chain<'a> {\n     type Item = &'a (dyn Error + 'static);\n \n     fn next(&mut self) -> Option<Self::Item> {"}, {"sha": "6de3f1d545b57fbfbe9a837b63d0c9516a182182", "filename": "src/libstd/future.rs", "status": "modified", "additions": 12, "deletions": 33, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibstd%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Flibstd%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffuture.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -40,10 +40,11 @@ impl<T: Generator<Yield = ()>> Future for GenFuture<T> {\n     fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n         // Safe because we're !Unpin + !Drop mapping to a ?Unpin value\n         let gen = unsafe { Pin::map_unchecked_mut(self, |s| &mut s.0) };\n-        set_task_context(cx, || match gen.resume() {\n+        let _guard = unsafe { set_task_context(cx) };\n+        match gen.resume() {\n             GeneratorState::Yielded(()) => Poll::Pending,\n             GeneratorState::Complete(x) => Poll::Ready(x),\n-        })\n+        }\n     }\n }\n \n@@ -61,35 +62,23 @@ impl Drop for SetOnDrop {\n     }\n }\n \n-#[doc(hidden)]\n-#[unstable(feature = \"gen_future\", issue = \"50547\")]\n-/// Sets the thread-local task context used by async/await futures.\n-pub fn set_task_context<F, R>(cx: &mut Context<'_>, f: F) -> R\n-where\n-    F: FnOnce() -> R\n-{\n+// Safety: the returned guard must drop before `cx` is dropped and before\n+// any previous guard is dropped.\n+unsafe fn set_task_context(cx: &mut Context<'_>) -> SetOnDrop {\n     // transmute the context's lifetime to 'static so we can store it.\n-    let cx = unsafe {\n-        core::mem::transmute::<&mut Context<'_>, &mut Context<'static>>(cx)\n-    };\n+    let cx = core::mem::transmute::<&mut Context<'_>, &mut Context<'static>>(cx);\n     let old_cx = TLS_CX.with(|tls_cx| {\n         tls_cx.replace(Some(NonNull::from(cx)))\n     });\n-    let _reset = SetOnDrop(old_cx);\n-    f()\n+    SetOnDrop(old_cx)\n }\n \n #[doc(hidden)]\n #[unstable(feature = \"gen_future\", issue = \"50547\")]\n-/// Retrieves the thread-local task context used by async/await futures.\n-///\n-/// This function acquires exclusive access to the task context.\n-///\n-/// Panics if no context has been set or if the context has already been\n-/// retrieved by a surrounding call to get_task_context.\n-pub fn get_task_context<F, R>(f: F) -> R\n+/// Polls a future in the current thread-local task waker.\n+pub fn poll_with_tls_context<F>(f: Pin<&mut F>) -> Poll<F::Output>\n where\n-    F: FnOnce(&mut Context<'_>) -> R\n+    F: Future\n {\n     let cx_ptr = TLS_CX.with(|tls_cx| {\n         // Clear the entry so that nested `get_task_waker` calls\n@@ -108,15 +97,5 @@ where\n     //\n     // The pointer that was inserted came from an `&mut Context<'_>`,\n     // so it is safe to treat as mutable.\n-    unsafe { f(cx_ptr.as_mut()) }\n-}\n-\n-#[doc(hidden)]\n-#[unstable(feature = \"gen_future\", issue = \"50547\")]\n-/// Polls a future in the current thread-local task waker.\n-pub fn poll_with_tls_context<F>(f: Pin<&mut F>) -> Poll<F::Output>\n-where\n-    F: Future\n-{\n-    get_task_context(|cx| F::poll(f, cx))\n+    unsafe { F::poll(f, cx_ptr.as_mut()) }\n }"}, {"sha": "aa5a8db61210d0afe2ee5ae1c23cdcb5e12143cf", "filename": "src/test/ui/async-await/issue-66387-if-without-else.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -0,0 +1,10 @@\n+// edition:2018\n+async fn f() -> i32 {\n+    if true { //~ ERROR if may be missing an else clause\n+        return 0;\n+    }\n+    // An `if` block without `else` causes the type table not to have a type for this expr.\n+    // Check that we do not unconditionally access the type table and we don't ICE.\n+}\n+\n+fn main() {}"}, {"sha": "32952059525a0037f4ade960bd24696904dbb33d", "filename": "src/test/ui/async-await/issue-66387-if-without-else.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-66387-if-without-else.stderr?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -0,0 +1,16 @@\n+error[E0317]: if may be missing an else clause\n+  --> $DIR/issue-66387-if-without-else.rs:3:5\n+   |\n+LL | /     if true {\n+LL | |         return 0;\n+LL | |     }\n+   | |_____^ expected (), found i32\n+   |\n+   = note: expected type `()`\n+              found type `i32`\n+   = note: `if` expressions without `else` evaluate to `()`\n+   = help: consider adding an `else` block that evaluates to the expected type\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0317`."}, {"sha": "648caae30b4275fdf4dedfeae2a3122d97a759f6", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -7,7 +7,8 @@ use std::cell::UnsafeCell;\n \n static mut FOO: u32 = 42;\n static BOO: () = unsafe {\n-    FOO = 5; //~ ERROR cannot mutate statics in the initializer of another static\n+    FOO = 5;\n+    //~^ could not evaluate static initializer [E0080]\n };\n \n fn main() {}"}, {"sha": "cb4d35b9a18095e96cecc8b9e68da0d8658c8a95", "filename": "src/test/ui/consts/const-eval/assign-to-static-within-other-static.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fassign-to-static-within-other-static.stderr?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -1,8 +1,9 @@\n-error: cannot mutate statics in the initializer of another static\n+error[E0080]: could not evaluate static initializer\n   --> $DIR/assign-to-static-within-other-static.rs:10:5\n    |\n LL |     FOO = 5;\n-   |     ^^^^^^^\n+   |     ^^^^^^^ tried to modify a static's initial value from another static's initializer\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "94b6587eb815a2d12d78222d45fe1c7faa581240", "filename": "src/test/ui/error-codes/E0017.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -4,6 +4,5 @@ const C: i32 = 2;\n const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n                                               //~| ERROR cannot borrow\n-                                              //~| ERROR cannot mutate statics\n static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n fn main() {}"}, {"sha": "47863f02214057e2ac319f03fd7067f256a21fe8", "filename": "src/test/ui/error-codes/E0017.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0017.stderr?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -10,25 +10,19 @@ error[E0017]: references in statics may only refer to immutable values\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ statics require immutable values\n \n-error: cannot mutate statics in the initializer of another static\n-  --> $DIR/E0017.rs:5:39\n-   |\n-LL | static STATIC_REF: &'static mut i32 = &mut X;\n-   |                                       ^^^^^^\n-\n error[E0596]: cannot borrow immutable static item `X` as mutable\n   --> $DIR/E0017.rs:5:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ cannot borrow as mutable\n \n error[E0017]: references in statics may only refer to immutable values\n-  --> $DIR/E0017.rs:8:38\n+  --> $DIR/E0017.rs:7:38\n    |\n LL | static CONST_REF: &'static mut i32 = &mut C;\n    |                                      ^^^^^^ statics require immutable values\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0017, E0596.\n For more information about an error, try `rustc --explain E0017`."}, {"sha": "3aa4ac9655cc976cdad4944451b19a9ef795b391", "filename": "src/test/ui/error-codes/E0388.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -4,7 +4,6 @@ const C: i32 = 2;\n const CR: &'static mut i32 = &mut C; //~ ERROR E0017\n static STATIC_REF: &'static mut i32 = &mut X; //~ ERROR E0017\n                                               //~| ERROR cannot borrow\n-                                              //~| ERROR cannot mutate statics\n static CONST_REF: &'static mut i32 = &mut C; //~ ERROR E0017\n \n fn main() {}"}, {"sha": "b52d5260b13c82444cbaf444b35425e9c4c6e4a5", "filename": "src/test/ui/error-codes/E0388.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0388.stderr?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -10,25 +10,19 @@ error[E0017]: references in statics may only refer to immutable values\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ statics require immutable values\n \n-error: cannot mutate statics in the initializer of another static\n-  --> $DIR/E0388.rs:5:39\n-   |\n-LL | static STATIC_REF: &'static mut i32 = &mut X;\n-   |                                       ^^^^^^\n-\n error[E0596]: cannot borrow immutable static item `X` as mutable\n   --> $DIR/E0388.rs:5:39\n    |\n LL | static STATIC_REF: &'static mut i32 = &mut X;\n    |                                       ^^^^^^ cannot borrow as mutable\n \n error[E0017]: references in statics may only refer to immutable values\n-  --> $DIR/E0388.rs:8:38\n+  --> $DIR/E0388.rs:7:38\n    |\n LL | static CONST_REF: &'static mut i32 = &mut C;\n    |                                      ^^^^^^ statics require immutable values\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0017, E0596.\n For more information about an error, try `rustc --explain E0017`."}, {"sha": "d8abdd5206ef460532b240624b4cc1491f02e33f", "filename": "src/test/ui/issues/issue-66353.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Fissues%2Fissue-66353.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Fissues%2Fissue-66353.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66353.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -0,0 +1,15 @@\n+// #66353: ICE when trying to recover from incorrect associated type\n+\n+trait _Func<T> {\n+    fn func(_: Self);\n+}\n+\n+trait _A {\n+    type AssocT;\n+}\n+\n+fn main() {\n+    _Func::< <() as _A>::AssocT >::func(());\n+    //~^ ERROR the trait bound `(): _A` is not satisfied\n+    //~| ERROR the trait bound `(): _Func<_>` is not satisfied\n+}"}, {"sha": "8fd50300ca63e7d1c7967fad26f02916c857eeec", "filename": "src/test/ui/issues/issue-66353.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Fissues%2Fissue-66353.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Fissues%2Fissue-66353.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-66353.stderr?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -0,0 +1,18 @@\n+error[E0277]: the trait bound `(): _A` is not satisfied\n+  --> $DIR/issue-66353.rs:12:14\n+   |\n+LL |     _Func::< <() as _A>::AssocT >::func(());\n+   |              ^^^^^^^^^^^^^^^^^^ the trait `_A` is not implemented for `()`\n+\n+error[E0277]: the trait bound `(): _Func<_>` is not satisfied\n+  --> $DIR/issue-66353.rs:12:41\n+   |\n+LL |     fn func(_: Self);\n+   |     ----------------- required by `_Func::func`\n+...\n+LL |     _Func::< <() as _A>::AssocT >::func(());\n+   |                                         ^^ the trait `_Func<_>` is not implemented for `()`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "4b620864aabf5de39ace711f416c11a2fe09d755", "filename": "src/test/ui/label/label-beginning-with-underscore.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Flabel%2Flabel-beginning-with-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftest%2Fui%2Flabel%2Flabel-beginning-with-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel-beginning-with-underscore.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -0,0 +1,10 @@\n+// check-pass\n+\n+#![deny(unused_labels)]\n+\n+fn main() {\n+    // `unused_label` shouldn't warn labels beginning with `_`\n+    '_unused: loop {\n+        break;\n+    }\n+}"}, {"sha": "327de29037cc33aed28b92c9f1c617e0100fbb35", "filename": "src/tools/rustbook/Cargo.toml", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftools%2Frustbook%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftools%2Frustbook%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2FCargo.toml?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -6,12 +6,15 @@ license = \"MIT OR Apache-2.0\"\n edition = \"2018\"\n \n [features]\n-linkcheck = [\"mdbook-linkcheck\"]\n+linkcheck = [\"mdbook-linkcheck\", \"codespan-reporting\"]\n \n [dependencies]\n clap = \"2.25.0\"\n failure = \"0.1\"\n-mdbook-linkcheck = { version = \"0.3.0\", optional = true }\n+mdbook-linkcheck = { version = \"0.5.0\", optional = true }\n+# Keep in sync with mdbook-linkcheck.\n+codespan-reporting = { version = \"0.5\", optional = true }\n+\n \n # A noop dependency that changes in the Rust repository, it's a bit of a hack.\n # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`"}, {"sha": "fc283156693767ab0aca5de50a6d4b46fdd7a05a", "filename": "src/tools/rustbook/src/main.rs", "status": "modified", "additions": 5, "deletions": 29, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -12,8 +12,6 @@ use mdbook::MDBook;\n use failure::Error;\n #[cfg(feature = \"linkcheck\")]\n use mdbook::renderer::RenderContext;\n-#[cfg(feature = \"linkcheck\")]\n-use mdbook_linkcheck::{self, errors::BrokenLinks};\n \n fn main() {\n     let d_message = \"-d, --dest-dir=[dest-dir]\n@@ -57,26 +55,7 @@ fn main() {\n             {\n                 if let Err(err) = linkcheck(sub_matches) {\n                     eprintln!(\"Error: {}\", err);\n-\n-                    // HACK: ignore timeouts\n-                    let actually_broken = err\n-                        .downcast::<BrokenLinks>()\n-                        .map(|broken_links| {\n-                            broken_links\n-                                .links()\n-                                .iter()\n-                                .inspect(|cause| eprintln!(\"\\tCaused By: {}\", cause))\n-                                .fold(false, |already_broken, cause| {\n-                                    already_broken || !format!(\"{}\", cause).contains(\"timed out\")\n-                                })\n-                        })\n-                        .unwrap_or(false);\n-\n-                    if actually_broken {\n-                        std::process::exit(101);\n-                    } else {\n-                        std::process::exit(0);\n-                    }\n+                    std::process::exit(101);\n                 }\n             }\n \n@@ -99,8 +78,9 @@ pub fn linkcheck(args: &ArgMatches<'_>) -> Result<(), Error> {\n     let book = MDBook::load(&book_dir).unwrap();\n     let cfg = book.config;\n     let render_ctx = RenderContext::new(&book_dir, book.book, cfg, &book_dir);\n-\n-    mdbook_linkcheck::check_links(&render_ctx)\n+    let cache_file = render_ctx.destination.join(\"cache.json\");\n+    let color = codespan_reporting::term::termcolor::ColorChoice::Auto;\n+    mdbook_linkcheck::run(&cache_file, color, &render_ctx)\n }\n \n // Build command implementation\n@@ -124,11 +104,7 @@ fn get_book_dir(args: &ArgMatches<'_>) -> PathBuf {\n     if let Some(dir) = args.value_of(\"dir\") {\n         // Check if path is relative from current dir, or absolute...\n         let p = Path::new(dir);\n-        if p.is_relative() {\n-            env::current_dir().unwrap().join(dir)\n-        } else {\n-            p.to_path_buf()\n-        }\n+        if p.is_relative() { env::current_dir().unwrap().join(dir) } else { p.to_path_buf() }\n     } else {\n         env::current_dir().unwrap()\n     }"}, {"sha": "e65f7a62cacb70f131ad77cddb61165f4dce1d0e", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce36ab2b064c2aa716084d79717c64cc04bb6532/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=ce36ab2b064c2aa716084d79717c64cc04bb6532", "patch": "@@ -55,6 +55,9 @@ const EXCEPTIONS: &[&str] = &[\n     \"sized-chunks\",       // MPL-2.0+, cargo via im-rc\n     // FIXME: this dependency violates the documentation comment above:\n     \"fortanix-sgx-abi\",   // MPL-2.0+, libstd but only for `sgx` target\n+    \"dunce\",              // CC0-1.0 mdbook-linkcheck\n+    \"codespan-reporting\", // Apache-2.0 mdbook-linkcheck\n+    \"codespan\",           // Apache-2.0 mdbook-linkcheck\n ];\n \n /// Which crates to check against the whitelist?"}]}