{"sha": "883ece499fef22b4703f5b04133bb2beff08c794", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4M2VjZTQ5OWZlZjIyYjQ3MDNmNWIwNDEzM2JiMmJlZmYwOGM3OTQ=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-06-25T17:58:33Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-07-02T13:49:09Z"}, "message": "rustc_passes/dead: avoid using TypeckTables::empty for MarkSymbolVisitor.", "tree": {"sha": "9dbd19d802d25362c543043edacba314155e3087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9dbd19d802d25362c543043edacba314155e3087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/883ece499fef22b4703f5b04133bb2beff08c794", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/883ece499fef22b4703f5b04133bb2beff08c794", "html_url": "https://github.com/rust-lang/rust/commit/883ece499fef22b4703f5b04133bb2beff08c794", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/883ece499fef22b4703f5b04133bb2beff08c794/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1b58ab73fdd97bde191e7d639c36849aad2b941c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1b58ab73fdd97bde191e7d639c36849aad2b941c", "html_url": "https://github.com/rust-lang/rust/commit/1b58ab73fdd97bde191e7d639c36849aad2b941c"}], "stats": {"total": 45, "additions": 26, "deletions": 19}, "files": [{"sha": "87348894a5ad9296012efde1930e7d201247bcd3", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 26, "deletions": 19, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/883ece499fef22b4703f5b04133bb2beff08c794/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883ece499fef22b4703f5b04133bb2beff08c794/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=883ece499fef22b4703f5b04133bb2beff08c794", "patch": "@@ -37,10 +37,10 @@ fn should_explore(tcx: TyCtxt<'_>, hir_id: hir::HirId) -> bool {\n     }\n }\n \n-struct MarkSymbolVisitor<'a, 'tcx> {\n+struct MarkSymbolVisitor<'tcx> {\n     worklist: Vec<hir::HirId>,\n     tcx: TyCtxt<'tcx>,\n-    tables: &'a ty::TypeckTables<'tcx>,\n+    maybe_typeck_tables: Option<&'tcx ty::TypeckTables<'tcx>>,\n     live_symbols: FxHashSet<hir::HirId>,\n     repr_has_repr_c: bool,\n     in_pat: bool,\n@@ -50,7 +50,15 @@ struct MarkSymbolVisitor<'a, 'tcx> {\n     struct_constructors: FxHashMap<hir::HirId, hir::HirId>,\n }\n \n-impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n+impl<'tcx> MarkSymbolVisitor<'tcx> {\n+    /// Gets the type-checking side-tables for the current body.\n+    /// As this will ICE if called outside bodies, only call when working with\n+    /// `Expr` or `Pat` nodes (they are guaranteed to be found only in bodies).\n+    #[track_caller]\n+    fn tables(&self) -> &'tcx ty::TypeckTables<'tcx> {\n+        self.maybe_typeck_tables.expect(\"`MarkSymbolVisitor::tables` called outside of body\")\n+    }\n+\n     fn check_def_id(&mut self, def_id: DefId) {\n         if let Some(def_id) = def_id.as_local() {\n             let hir_id = self.tcx.hir().as_local_hir_id(def_id);\n@@ -107,17 +115,17 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     }\n \n     fn lookup_and_handle_method(&mut self, id: hir::HirId) {\n-        if let Some(def_id) = self.tables.type_dependent_def_id(id) {\n+        if let Some(def_id) = self.tables().type_dependent_def_id(id) {\n             self.check_def_id(def_id);\n         } else {\n             bug!(\"no type-dependent def for method\");\n         }\n     }\n \n     fn handle_field_access(&mut self, lhs: &hir::Expr<'_>, hir_id: hir::HirId) {\n-        match self.tables.expr_ty_adjusted(lhs).kind {\n+        match self.tables().expr_ty_adjusted(lhs).kind {\n             ty::Adt(def, _) => {\n-                let index = self.tcx.field_index(hir_id, self.tables);\n+                let index = self.tcx.field_index(hir_id, self.tables());\n                 self.insert_def_id(def.non_enum_variant().fields[index].did);\n             }\n             ty::Tuple(..) => {}\n@@ -131,15 +139,15 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n         res: Res,\n         pats: &[hir::FieldPat<'_>],\n     ) {\n-        let variant = match self.tables.node_type(lhs.hir_id).kind {\n+        let variant = match self.tables().node_type(lhs.hir_id).kind {\n             ty::Adt(adt, _) => adt.variant_of_res(res),\n             _ => span_bug!(lhs.span, \"non-ADT in struct pattern\"),\n         };\n         for pat in pats {\n             if let PatKind::Wild = pat.pat.kind {\n                 continue;\n             }\n-            let index = self.tcx.field_index(pat.hir_id, self.tables);\n+            let index = self.tcx.field_index(pat.hir_id, self.tables());\n             self.insert_def_id(variant.fields[index].did);\n         }\n     }\n@@ -204,26 +212,25 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n     fn mark_as_used_if_union(&mut self, adt: &ty::AdtDef, fields: &[hir::Field<'_>]) {\n         if adt.is_union() && adt.non_enum_variant().fields.len() > 1 && adt.did.is_local() {\n             for field in fields {\n-                let index = self.tcx.field_index(field.hir_id, self.tables);\n+                let index = self.tcx.field_index(field.hir_id, self.tables());\n                 self.insert_def_id(adt.non_enum_variant().fields[index].did);\n             }\n         }\n     }\n }\n \n-impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n+impl<'tcx> Visitor<'tcx> for MarkSymbolVisitor<'tcx> {\n     type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n \n     fn visit_nested_body(&mut self, body: hir::BodyId) {\n-        let old_tables = self.tables;\n-        self.tables = self.tcx.body_tables(body);\n+        let old_maybe_typeck_tables = self.maybe_typeck_tables.replace(self.tcx.body_tables(body));\n         let body = self.tcx.hir().body(body);\n         self.visit_body(body);\n-        self.tables = old_tables;\n+        self.maybe_typeck_tables = old_maybe_typeck_tables;\n     }\n \n     fn visit_variant_data(\n@@ -248,7 +255,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'tcx>) {\n         match expr.kind {\n             hir::ExprKind::Path(ref qpath @ hir::QPath::TypeRelative(..)) => {\n-                let res = self.tables.qpath_res(qpath, expr.hir_id);\n+                let res = self.tables().qpath_res(qpath, expr.hir_id);\n                 self.handle_res(res);\n             }\n             hir::ExprKind::MethodCall(..) => {\n@@ -258,9 +265,9 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n                 self.handle_field_access(&lhs, expr.hir_id);\n             }\n             hir::ExprKind::Struct(ref qpath, ref fields, _) => {\n-                let res = self.tables.qpath_res(qpath, expr.hir_id);\n+                let res = self.tables().qpath_res(qpath, expr.hir_id);\n                 self.handle_res(res);\n-                if let ty::Adt(ref adt, _) = self.tables.expr_ty(expr).kind {\n+                if let ty::Adt(ref adt, _) = self.tables().expr_ty(expr).kind {\n                     self.mark_as_used_if_union(adt, fields);\n                 }\n             }\n@@ -283,11 +290,11 @@ impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n     fn visit_pat(&mut self, pat: &'tcx hir::Pat<'tcx>) {\n         match pat.kind {\n             PatKind::Struct(ref path, ref fields, _) => {\n-                let res = self.tables.qpath_res(path, pat.hir_id);\n+                let res = self.tables().qpath_res(path, pat.hir_id);\n                 self.handle_field_pattern_match(pat, res, fields);\n             }\n             PatKind::Path(ref qpath) => {\n-                let res = self.tables.qpath_res(qpath, pat.hir_id);\n+                let res = self.tables().qpath_res(qpath, pat.hir_id);\n                 self.handle_res(res);\n             }\n             _ => (),\n@@ -473,7 +480,7 @@ fn find_live<'tcx>(\n     let mut symbol_visitor = MarkSymbolVisitor {\n         worklist,\n         tcx,\n-        tables: &ty::TypeckTables::empty(None),\n+        maybe_typeck_tables: None,\n         live_symbols: Default::default(),\n         repr_has_repr_c: false,\n         in_pat: false,"}]}