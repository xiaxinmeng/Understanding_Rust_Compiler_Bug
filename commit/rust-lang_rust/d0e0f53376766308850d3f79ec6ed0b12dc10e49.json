{"sha": "d0e0f53376766308850d3f79ec6ed0b12dc10e49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwZTBmNTMzNzY3NjYzMDg4NTBkM2Y3OWVjNmVkMGIxMmRjMTBlNDk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-29T11:13:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-29T11:13:39Z"}, "message": "Auto merge of #42887 - GuillaumeGomez:remove-err-methods, r=nikomatsakis\n\nRemove err methods\n\nTo be merged after #42519.\n\ncc @Susurrus @QuietMisdreavus", "tree": {"sha": "6547158eacbe76ad8ace38ea92f9f313079dc53a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6547158eacbe76ad8ace38ea92f9f313079dc53a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0e0f53376766308850d3f79ec6ed0b12dc10e49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0e0f53376766308850d3f79ec6ed0b12dc10e49", "html_url": "https://github.com/rust-lang/rust/commit/d0e0f53376766308850d3f79ec6ed0b12dc10e49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0e0f53376766308850d3f79ec6ed0b12dc10e49/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "html_url": "https://github.com/rust-lang/rust/commit/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a"}, {"sha": "5acc1deaf8ddcf540a7d58a50046f02a1a728a8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5acc1deaf8ddcf540a7d58a50046f02a1a728a8f", "html_url": "https://github.com/rust-lang/rust/commit/5acc1deaf8ddcf540a7d58a50046f02a1a728a8f"}], "stats": {"total": 131, "additions": 99, "deletions": 32}, "files": [{"sha": "9500e4a36048d8115c02a36dc93f8f82c4f8c56b", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d0e0f53376766308850d3f79ec6ed0b12dc10e49/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e0f53376766308850d3f79ec6ed0b12dc10e49/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=d0e0f53376766308850d3f79ec6ed0b12dc10e49", "patch": "@@ -1191,28 +1191,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n     // types using one of these methods, and should not call span_err directly for such\n     // errors.\n \n-    pub fn type_error_message<M>(&self,\n-                                 sp: Span,\n-                                 mk_msg: M,\n-                                 actual_ty: Ty<'tcx>)\n-        where M: FnOnce(String) -> String,\n-    {\n-        self.type_error_struct(sp, mk_msg, actual_ty).emit();\n-    }\n-\n-    // FIXME: this results in errors without an error code. Deprecate?\n-    pub fn type_error_struct<M>(&self,\n-                                sp: Span,\n-                                mk_msg: M,\n-                                actual_ty: Ty<'tcx>)\n-                                -> DiagnosticBuilder<'tcx>\n-        where M: FnOnce(String) -> String,\n-    {\n-        self.type_error_struct_with_diag(sp, |actual_ty| {\n-            self.tcx.sess.struct_span_err(sp, &mk_msg(actual_ty))\n-        }, actual_ty)\n-    }\n-\n     pub fn type_error_struct_with_diag<M>(&self,\n                                           sp: Span,\n                                           mk_diag: M,"}, {"sha": "7bd24c939caf0beef8e405216da7da4decfc25cb", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d0e0f53376766308850d3f79ec6ed0b12dc10e49/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e0f53376766308850d3f79ec6ed0b12dc10e49/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=d0e0f53376766308850d3f79ec6ed0b12dc10e49", "patch": "@@ -239,12 +239,10 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n         }\n \n         let tstr = fcx.ty_to_string(self.cast_ty);\n-        let mut err =\n-            fcx.type_error_struct(self.span,\n-                                  |actual| {\n-                                      format!(\"cast to unsized type: `{}` as `{}`\", actual, tstr)\n-                                  },\n-                                  self.expr_ty);\n+        let mut err = type_error_struct!(fcx.tcx.sess, self.span, self.expr_ty, E0620,\n+                                         \"cast to unsized type: `{}` as `{}`\",\n+                                         fcx.resolve_type_vars_if_possible(&self.expr_ty),\n+                                         tstr);\n         match self.expr_ty.sty {\n             ty::TyRef(_, ty::TypeAndMut { mutbl: mt, .. }) => {\n                 let mtstr = match mt {"}, {"sha": "a8d0be2bd04d9884a6216a3761ff3c9384059386", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d0e0f53376766308850d3f79ec6ed0b12dc10e49/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e0f53376766308850d3f79ec6ed0b12dc10e49/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d0e0f53376766308850d3f79ec6ed0b12dc10e49", "patch": "@@ -4716,9 +4716,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             // If not, error.\n             if alternative.is_ty_var() || alternative.references_error() {\n                 if !self.is_tainted_by_errors() {\n-                    self.type_error_message(sp, |_actual| {\n-                        \"the type of this value must be known in this context\".to_string()\n-                    }, ty);\n+                    type_error_struct!(self.tcx.sess, sp, ty, E0619,\n+                                       \"the type of this value must be known in this context\")\n+                        .emit();\n                 }\n                 self.demand_suptype(sp, self.tcx.types.err, ty);\n                 ty = self.tcx.types.err;"}, {"sha": "1b17faccc87f810d193bd59a19e8969c114d231f", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 61, "deletions": 1, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/d0e0f53376766308850d3f79ec6ed0b12dc10e49/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e0f53376766308850d3f79ec6ed0b12dc10e49/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=d0e0f53376766308850d3f79ec6ed0b12dc10e49", "patch": "@@ -4665,6 +4665,67 @@ i_am_a_function();\n ```\n \"##,\n \n+E0619: r##\"\n+The type-checker needed to know the type of an expression, but that type had not\n+yet been inferred.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0619\n+let mut x = vec![];\n+match x.pop() {\n+    Some(v) => {\n+        // Here, the type of `v` is not (yet) known, so we\n+        // cannot resolve this method call:\n+        v.to_uppercase(); // error: the type of this value must be known in\n+                          //        this context\n+    }\n+    None => {}\n+}\n+```\n+\n+Type inference typically proceeds from the top of the function to the bottom,\n+figuring out types as it goes. In some cases -- notably method calls and\n+overloadable operators like `*` -- the type checker may not have enough\n+information *yet* to make progress. This can be true even if the rest of the\n+function provides enough context (because the type-checker hasn't looked that\n+far ahead yet). In this case, type annotations can be used to help it along.\n+\n+To fix this error, just specify the type of the variable. Example:\n+\n+```\n+let mut x: Vec<String> = vec![]; // We precise the type of the vec elements.\n+match x.pop() {\n+    Some(v) => {\n+        v.to_uppercase(); // Since rustc now knows the type of the vec elements,\n+                          // we can use `v`'s methods.\n+    }\n+    None => {}\n+}\n+```\n+\"##,\n+\n+E0620: r##\"\n+A cast to an unsized type was attempted.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0620\n+let x = &[1_usize, 2] as [usize]; // error: cast to unsized type: `&[usize; 2]`\n+                                  //        as `[usize]`\n+```\n+\n+In Rust, some types don't have a known size at compile-time. For example, in a\n+slice type like `[u32]`, the number of elements is not known at compile-time and\n+hence the overall size cannot be computed. As a result, such types can only be\n+manipulated through a reference (e.g., `&T` or `&mut T`) or other pointer-type\n+(e.g., `Box` or `Rc`). Try casting to a reference instead:\n+\n+```\n+let x = &[1_usize, 2] as &[usize]; // ok!\n+```\n+\"##,\n+\n }\n \n register_diagnostics! {\n@@ -4736,5 +4797,4 @@ register_diagnostics! {\n     E0568, // auto-traits can not have predicates,\n     E0588, // packed struct cannot transitively contain a `[repr(align)]` struct\n     E0592, // duplicate definitions with name `{}`\n-    E0619, // intrinsic must be a function\n }"}, {"sha": "8ef90d899319238f7de1874f9c7d410fb0e03e95", "filename": "src/test/compile-fail/E0619.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d0e0f53376766308850d3f79ec6ed0b12dc10e49/src%2Ftest%2Fcompile-fail%2FE0619.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e0f53376766308850d3f79ec6ed0b12dc10e49/src%2Ftest%2Fcompile-fail%2FE0619.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0619.rs?ref=d0e0f53376766308850d3f79ec6ed0b12dc10e49", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x;\n+\n+    match x {\n+        (..) => {} //~ ERROR E0619\n+        _ => {}\n+    }\n+}"}, {"sha": "5e945dfa5c8207e15b4b6915e4f7d08c8785fd6e", "filename": "src/test/compile-fail/E0620.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d0e0f53376766308850d3f79ec6ed0b12dc10e49/src%2Ftest%2Fcompile-fail%2FE0620.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0e0f53376766308850d3f79ec6ed0b12dc10e49/src%2Ftest%2Fcompile-fail%2FE0620.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0620.rs?ref=d0e0f53376766308850d3f79ec6ed0b12dc10e49", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let _foo = &[1_usize, 2] as [usize]; //~ ERROR E0620\n+}"}]}