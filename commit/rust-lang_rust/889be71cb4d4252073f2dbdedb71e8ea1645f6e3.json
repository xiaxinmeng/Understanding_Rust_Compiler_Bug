{"sha": "889be71cb4d4252073f2dbdedb71e8ea1645f6e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4OWJlNzFjYjRkNDI1MjA3M2YyZGJkZWRiNzFlOGVhMTY0NWY2ZTM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-05T22:58:25Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-07-05T23:10:29Z"}, "message": "Comments only: change TODOs to FIXMEs and annotate them", "tree": {"sha": "f1ec5573b95225ba92358ee9b9832c50995f8f44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1ec5573b95225ba92358ee9b9832c50995f8f44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/889be71cb4d4252073f2dbdedb71e8ea1645f6e3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/889be71cb4d4252073f2dbdedb71e8ea1645f6e3", "html_url": "https://github.com/rust-lang/rust/commit/889be71cb4d4252073f2dbdedb71e8ea1645f6e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50d2e7e07e79f3f055832756469eb974fe719de1", "url": "https://api.github.com/repos/rust-lang/rust/commits/50d2e7e07e79f3f055832756469eb974fe719de1", "html_url": "https://github.com/rust-lang/rust/commit/50d2e7e07e79f3f055832756469eb974fe719de1"}], "stats": {"total": 39, "additions": 19, "deletions": 20}, "files": [{"sha": "187640a54cf9a71fe30e1fbb4218d3ca68e5f86f", "filename": "src/libstd/rope.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Flibstd%2Frope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Flibstd%2Frope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frope.rs?ref=889be71cb4d4252073f2dbdedb71e8ea1645f6e3", "patch": "@@ -588,7 +588,8 @@ mod node {\n      *     Used for rebalancing and to allocate stacks for traversals.\n      */\n     type concat = {\n-        left:     @node,//TODO: Perhaps a `vec` instead of `left`/`right`\n+        //FIXME (#2744): Perhaps a `vec` instead of `left`/`right`\n+        left:     @node,\n         right:    @node,\n         char_len: uint,\n         byte_len: uint,\n@@ -732,7 +733,8 @@ mod node {\n     }\n \n     pure fn byte_len(node: @node) -> uint {\n-        alt(*node) {//TODO: Could we do this without the pattern-matching?\n+        //FIXME (#2744): Could we do this without the pattern-matching?\n+        alt(*node) {\n           leaf(y)  { ret y.byte_len; }\n           concat(y){ ret y.byte_len; }\n         }\n@@ -805,7 +807,7 @@ mod node {\n             alt(leaf_iterator::next(it)) {\n               option::none { break; }\n               option::some(x) {\n-                //TODO: Replace with memcpy or something similar\n+                //FIXME (#2744): Replace with memcpy or something similar\n                 let mut local_buf: ~[u8] =\n                     unsafe::reinterpret_cast(*x.content);\n                 let mut i = x.byte_offset;"}, {"sha": "c76417bce0870158ab518525cb68a244c1b4eb36", "filename": "src/libstd/term.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Flibstd%2Fterm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Flibstd%2Fterm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fterm.rs?ref=889be71cb4d4252073f2dbdedb71e8ea1645f6e3", "patch": "@@ -2,7 +2,7 @@\n \n import core::option;\n \n-// TODO: Windows support.\n+// FIXME (#2807): Windows support.\n \n const color_black: u8 = 0u8;\n const color_red: u8 = 1u8;"}, {"sha": "1a3626e46603a97c696265a60513dbd4de981679", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=889be71cb4d4252073f2dbdedb71e8ea1645f6e3", "patch": "@@ -55,7 +55,7 @@ fn find<K: copy, V: copy>(m: &const tree_edge<K, V>, k: K) -> option<V> {\n     alt copy *m {\n       none { none }\n \n-      // TODO: was that an optimization?\n+      // FIXME (#2808): was that an optimization?\n       some(node) {\n         if k == node.key {\n             some(node.value)"}, {"sha": "43a6183b4d591dcc809359ae679605740cf08def", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=889be71cb4d4252073f2dbdedb71e8ea1645f6e3", "patch": "@@ -368,7 +368,7 @@ enum inline_attr {\n \n /// True if something like #[inline] is found in the list of attrs.\n fn find_inline_attr(attrs: ~[ast::attribute]) -> inline_attr {\n-    // TODO---validate the usage of #[inline] and #[inline(always)]\n+    // FIXME (#2809)---validate the usage of #[inline] and #[inline(always)]\n     do vec::foldl(ia_none, attrs) |ia,attr| {\n         alt attr.node.value.node {\n           ast::meta_word(@\"inline\") { ia_hint }"}, {"sha": "64da3a7dcbdb39acc6e090e556b5df6108571488", "filename": "src/libsyntax/ext/auto_serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Flibsyntax%2Fext%2Fauto_serialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fauto_serialize.rs?ref=889be71cb4d4252073f2dbdedb71e8ea1645f6e3", "patch": "@@ -58,7 +58,7 @@ Similarly, the code to deserialize an instance of a non-built-in type\n where `c_Ti` is the code to deserialize an instance of `Ti` using the\n deserializer `d`.\n \n-TODO--Hygiene. Search for \"__\" strings.  We also assume \"std\" is the\n+FIXME (#2810)--Hygiene. Search for \"__\" strings.  We also assume \"std\" is the\n standard library.\n \n Misc notes:"}, {"sha": "333ff95c74d84dbc98cf92079c8ddd5ff3d059f4", "filename": "src/libsyntax/parse/lexer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Flibsyntax%2Fparse%2Flexer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Flibsyntax%2Fparse%2Flexer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer.rs?ref=889be71cb4d4252073f2dbdedb71e8ea1645f6e3", "patch": "@@ -23,7 +23,8 @@ enum tt_frame_up { /* to break a circularity */\n     tt_frame_up(option<tt_frame>)\n }\n \n-/* TODO: figure out how to have a uniquely linked stack, and change to `~` */\n+/* FIXME (#2811): figure out how to have a uniquely linked stack,\n+   and change to `~` */\n /// an unzipping of `token_tree`s\n type tt_frame = @{\n     readme: ~[ast::token_tree],"}, {"sha": "2ef5fb17dd853e84e955a5dfef3f390ad713b514", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=889be71cb4d4252073f2dbdedb71e8ea1645f6e3", "patch": "@@ -58,8 +58,8 @@ mod write {\n         let td = mk_target_data(\n             sess.targ_cfg.target_strs.data_layout);\n         llvm::LLVMAddTargetData(td.lltd, pm.llpm);\n-        // TODO: run the linter here also, once there are llvm-c bindings for\n-        // it.\n+        // FIXME (#2812): run the linter here also, once there are llvm-c\n+        // bindings for it.\n \n         // Generate a pre-optimization intermediate file if -save-temps was\n         // specified."}, {"sha": "2f165b7ff0297a515b9eb7e940dd98354f69cd30", "filename": "src/rustc/middle/astencode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Frustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Frustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fastencode.rs?ref=889be71cb4d4252073f2dbdedb71e8ea1645f6e3", "patch": "@@ -162,7 +162,7 @@ impl translation_routines for extended_decode_ctxt {\n         {crate: ast::local_crate, node: self.tr_id(did.node)}\n     }\n     fn tr_span(_span: span) -> span {\n-        ast_util::dummy_sp() // TODO...\n+        ast_util::dummy_sp() // FIXME (#1972): handle span properly\n     }\n }\n "}, {"sha": "6580feab3301cc9adcdedd5584a8e6a11f67b6e3", "filename": "src/rustc/middle/ty.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Frustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Frustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Fty.rs?ref=889be71cb4d4252073f2dbdedb71e8ea1645f6e3", "patch": "@@ -2758,9 +2758,6 @@ fn lookup_field_type(tcx: ctxt, class_id: def_id, id: def_id,\n            some(tpt) { tpt.ty }\n            none {\n                let tpt = csearch::get_field_type(tcx, class_id, id);\n-               // ok b/c fields are monomorphic\n-               // TODO: Comment might be a lie, what if it mentions\n-               // class-bound ty params?\n                tcx.tcache.insert(id, tpt);\n                tpt.ty\n            }"}, {"sha": "84ed98be6f4b282b6f397e273fddc75be89c8567", "filename": "src/rustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=889be71cb4d4252073f2dbdedb71e8ea1645f6e3", "patch": "@@ -344,7 +344,8 @@ fn convert(ccx: @crate_ctxt, it: @ast::item) {\n               inputs: t_args,\n               output: t_res,\n               ret_style: ast::return_val,\n-              constraints: ~[]}); // tjc TODO\n+              constraints: ~[]}); // FIXME (#2813): allow ctors to have\n+         // constraints, or remove constraints from the language\n         write_ty_to_tcx(tcx, ctor.node.id, t_ctor);\n         tcx.tcache.insert(local_def(ctor.node.id),\n                           {bounds: tpt.bounds,"}, {"sha": "ab72c5637ff16beafc4a384983f6c50858f70aa9", "filename": "src/rustc/middle/typeck/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer.rs?ref=889be71cb4d4252073f2dbdedb71e8ea1645f6e3", "patch": "@@ -554,8 +554,8 @@ impl transaction_methods for infer_ctxt {\n \n         let r <- self.try(f);\n \n-        // TODO---could use a vec::clear() that ran destructors but kept\n-        // the vec at its currently allocated length\n+        // FIXME (#2814)---could use a vec::clear() that ran destructors but\n+        // kept the vec at its currently allocated length\n         self.tvb.bindings = ~[];\n         self.rb.bindings = ~[];\n "}, {"sha": "8e7ba1d3e3a3f55038ca9e677d11a5cc5a6a08e0", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=889be71cb4d4252073f2dbdedb71e8ea1645f6e3", "patch": "@@ -235,7 +235,7 @@ fn main(argv: ~[str]) {\n \n         out.write_line(#fmt[\"Usage: %s <filename> ...\", argv[0]]);\n \n-        // TODO: run something just to make sure the code hasn't\n+        // FIXME (#2815): run something just to make sure the code hasn't\n         // broken yet. This is the unit test mode of this program.\n \n         ret;"}, {"sha": "c897c676329f2f46d4bcfd58b39d75a0716859a2", "filename": "src/test/run-pass/unchecked-predicates.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs", "raw_url": "https://github.com/rust-lang/rust/raw/889be71cb4d4252073f2dbdedb71e8ea1645f6e3/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funchecked-predicates.rs?ref=889be71cb4d4252073f2dbdedb71e8ea1645f6e3", "patch": "@@ -1,6 +1,4 @@\n // Uses foldl to exhibit the unchecked block syntax.\n-// TODO: since list's head/tail require the predicate \"is_not_empty\" now and\n-// we have unit tests for list, this test might me not necessary anymore?\n use std;\n \n import std::list::*;"}]}