{"sha": "3d365f6a01c4ebd7847ef7ec64afdcc54129a055", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMzY1ZjZhMDFjNGViZDc4NDdlZjdlYzY0YWZkY2M1NDEyOWEwNTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-03-12T20:01:06Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-03-23T21:40:25Z"}, "message": "rustdoc: interpret all leading feature attributes in examples as crate attributes\n\nThis makes it possible to write `#![feature(foo)]` in doc tests.", "tree": {"sha": "24f60f950205e06ca502a0839252439f2bd80e99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24f60f950205e06ca502a0839252439f2bd80e99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d365f6a01c4ebd7847ef7ec64afdcc54129a055", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d365f6a01c4ebd7847ef7ec64afdcc54129a055", "html_url": "https://github.com/rust-lang/rust/commit/3d365f6a01c4ebd7847ef7ec64afdcc54129a055", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d365f6a01c4ebd7847ef7ec64afdcc54129a055/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "809a554fca2d0ebc2ba50077016fe282a4064752", "url": "https://api.github.com/repos/rust-lang/rust/commits/809a554fca2d0ebc2ba50077016fe282a4064752", "html_url": "https://github.com/rust-lang/rust/commit/809a554fca2d0ebc2ba50077016fe282a4064752"}], "stats": {"total": 57, "additions": 47, "deletions": 10}, "files": [{"sha": "643554e656333919fde728da9e58b143798c8019", "filename": "src/doc/trpl/documentation.md", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3d365f6a01c4ebd7847ef7ec64afdcc54129a055/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/3d365f6a01c4ebd7847ef7ec64afdcc54129a055/src%2Fdoc%2Ftrpl%2Fdocumentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fdocumentation.md?ref=3d365f6a01c4ebd7847ef7ec64afdcc54129a055", "patch": "@@ -237,14 +237,17 @@ fn main() {\n }\n ```\n \n-Here's the full algorithm:\n-\n-1. Given a code block, if it does not contain `fn main()`, it is wrapped in\n-   `fn main() { your_code }`\n-2. Given that result, if it contains no `extern crate` directives but it also\n-   contains the name of the crate being tested, then `extern crate <name>` is\n-   injected at the top.\n-3. Some common allow attributes are added for documentation examples at the top.\n+Here's the full algorithm rustdoc uses to postprocess examples:\n+\n+1. Any leading `#![foo]` attributes are left intact as crate attributes.\n+2. Some common `allow` attributes are inserted, including\n+   `unused_variables`, `unused_assignments`, `unused_mut`,\n+   `unused_attributes`, and `dead_code`. Small examples often trigger\n+   these lints.\n+3. If the example does not contain `extern crate`, then `extern crate\n+   <mycrate>;` is inserted.\n+2. Finally, if the example does not contain `fn main`, the remainder of the\n+   text is wrapped in `fn main() { your_code }`\n \n Sometimes, this isn't enough, though. For example, all of these code samples\n with `///` we've been talking about? The raw text:"}, {"sha": "aa0f60d0d1c9081b4cb6ffcb2c6b4703399c9c00", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3d365f6a01c4ebd7847ef7ec64afdcc54129a055/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d365f6a01c4ebd7847ef7ec64afdcc54129a055/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=3d365f6a01c4ebd7847ef7ec64afdcc54129a055", "patch": "@@ -51,6 +51,7 @@ extern crate rustc_back;\n extern crate serialize;\n extern crate syntax;\n extern crate \"test\" as testing;\n+extern crate unicode;\n #[macro_use] extern crate log;\n \n extern crate \"serialize\" as rustc_serialize; // used by deriving"}, {"sha": "3bd466caf0b7f5a9ec144e026bc0fc49daab39fd", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/3d365f6a01c4ebd7847ef7ec64afdcc54129a055/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d365f6a01c4ebd7847ef7ec64afdcc54129a055/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=3d365f6a01c4ebd7847ef7ec64afdcc54129a055", "patch": "@@ -219,7 +219,14 @@ fn runtest(test: &str, cratename: &str, libs: SearchPaths,\n }\n \n pub fn maketest(s: &str, cratename: Option<&str>, lints: bool, dont_insert_main: bool) -> String {\n+    let (crate_attrs, everything_else) = partition_source(s);\n+\n     let mut prog = String::new();\n+\n+    // First push any outer attributes from the example, assuming they\n+    // are intended to be crate attributes.\n+    prog.push_str(&crate_attrs);\n+\n     if lints {\n         prog.push_str(r\"\n #![allow(unused_variables, unused_assignments, unused_mut, unused_attributes, dead_code)]\n@@ -240,16 +247,42 @@ pub fn maketest(s: &str, cratename: Option<&str>, lints: bool, dont_insert_main:\n         }\n     }\n     if dont_insert_main || s.contains(\"fn main\") {\n-        prog.push_str(s);\n+        prog.push_str(&everything_else);\n     } else {\n         prog.push_str(\"fn main() {\\n    \");\n-        prog.push_str(&s.replace(\"\\n\", \"\\n    \"));\n+        prog.push_str(&everything_else.replace(\"\\n\", \"\\n    \"));\n         prog.push_str(\"\\n}\");\n     }\n \n+    info!(\"final test program: {}\", prog);\n+\n     return prog\n }\n \n+fn partition_source(s: &str) -> (String, String) {\n+    use unicode::str::UnicodeStr;\n+\n+    let mut after_header = false;\n+    let mut before = String::new();\n+    let mut after = String::new();\n+\n+    for line in s.lines() {\n+        let trimline = StrExt::trim(line);\n+        let header = trimline.is_whitespace() ||\n+            trimline.starts_with(\"#![feature\");\n+        if !header || after_header {\n+            after_header = true;\n+            after.push_str(line);\n+            after.push_str(\"\\n\");\n+        } else {\n+            before.push_str(line);\n+            before.push_str(\"\\n\");\n+        }\n+    }\n+\n+    return (before, after);\n+}\n+\n pub struct Collector {\n     pub tests: Vec<testing::TestDescAndFn>,\n     names: Vec<String>,"}]}