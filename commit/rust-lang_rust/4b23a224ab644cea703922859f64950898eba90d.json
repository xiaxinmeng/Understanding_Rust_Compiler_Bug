{"sha": "4b23a224ab644cea703922859f64950898eba90d", "node_id": "C_kwDOAAsO6NoAKDRiMjNhMjI0YWI2NDRjZWE3MDM5MjI4NTlmNjQ5NTA4OThlYmE5MGQ", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-21T03:58:38Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-03-03T05:02:34Z"}, "message": "Label opaque type for 'captures lifetime' error message", "tree": {"sha": "a5762cc92db9f4cd7f416714be44207ad7f3745d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5762cc92db9f4cd7f416714be44207ad7f3745d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b23a224ab644cea703922859f64950898eba90d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b23a224ab644cea703922859f64950898eba90d", "html_url": "https://github.com/rust-lang/rust/commit/4b23a224ab644cea703922859f64950898eba90d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b23a224ab644cea703922859f64950898eba90d/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13471d3b2046cce78181dde6cfc146c09f55e29e", "url": "https://api.github.com/repos/rust-lang/rust/commits/13471d3b2046cce78181dde6cfc146c09f55e29e", "html_url": "https://github.com/rust-lang/rust/commit/13471d3b2046cce78181dde6cfc146c09f55e29e"}], "stats": {"total": 118, "additions": 88, "deletions": 30}, "files": [{"sha": "ef6dc24a444e262f21ad2f895da32a383ba9d72d", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -281,16 +281,20 @@ pub fn unexpected_hidden_region_diagnostic<'tcx>(\n     span: Span,\n     hidden_ty: Ty<'tcx>,\n     hidden_region: ty::Region<'tcx>,\n-    opaque_ty: ty::OpaqueTypeKey<'tcx>,\n+    opaque_ty_key: ty::OpaqueTypeKey<'tcx>,\n ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n-    let opaque_ty = tcx.mk_opaque(opaque_ty.def_id.to_def_id(), opaque_ty.substs);\n+    let opaque_ty = tcx.mk_opaque(opaque_ty_key.def_id.to_def_id(), opaque_ty_key.substs);\n+\n     let mut err = struct_span_err!(\n         tcx.sess,\n         span,\n         E0700,\n         \"hidden type for `{opaque_ty}` captures lifetime that does not appear in bounds\",\n     );\n \n+    let opaque_ty_span = tcx.def_span(opaque_ty_key.def_id);\n+    err.span_label(opaque_ty_span, \"opaque type defined here\");\n+\n     // Explain the region we are capturing.\n     match *hidden_region {\n         ty::ReEarlyBound(_) | ty::ReFree(_) | ty::ReStatic => {"}, {"sha": "5ae1d78a92b785509032aaace5b39dd2431d43db", "filename": "tests/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -17,8 +17,9 @@ error[E0700]: hidden type for `impl Trait<'a>` captures lifetime that does not a\n   --> $DIR/ret-impl-trait-one.rs:16:80\n    |\n LL |   async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n-   |  ____________________________________--__________________________________________^\n-   | |                                    |\n+   |  ____________________________________--___________________________--------------_^\n+   | |                                    |                            |\n+   | |                                    |                            opaque type defined here\n    | |                                    hidden type `(&'a u8, &'b u8)` captures the lifetime `'b` as defined here\n LL | |\n LL | |     (a, b)"}, {"sha": "bc8f559fdee9e5a255e99e332b2251b939e31702", "filename": "tests/ui/impl-trait/hidden-lifetimes.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fhidden-lifetimes.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `impl Swap + 'a` captures lifetime that does not a\n   --> $DIR/hidden-lifetimes.rs:29:5\n    |\n LL | fn hide_ref<'a, 'b, T: 'static>(x: &'a mut &'b T) -> impl Swap + 'a {\n-   |                 -- hidden type `&'a mut &'b T` captures the lifetime `'b` as defined here\n+   |                 --                                   -------------- opaque type defined here\n+   |                 |\n+   |                 hidden type `&'a mut &'b T` captures the lifetime `'b` as defined here\n LL |     x\n    |     ^\n    |\n@@ -15,7 +17,9 @@ error[E0700]: hidden type for `impl Swap + 'a` captures lifetime that does not a\n   --> $DIR/hidden-lifetimes.rs:46:5\n    |\n LL | fn hide_rc_refcell<'a, 'b: 'a, T: 'static>(x: Rc<RefCell<&'b T>>) -> impl Swap + 'a {\n-   |                        -- hidden type `Rc<RefCell<&'b T>>` captures the lifetime `'b` as defined here\n+   |                        --                                            -------------- opaque type defined here\n+   |                        |\n+   |                        hidden type `Rc<RefCell<&'b T>>` captures the lifetime `'b` as defined here\n LL |     x\n    |     ^\n    |"}, {"sha": "d56e1273f241007954e27da3e3a408f9f767f296", "filename": "tests/ui/impl-trait/impl-fn-hrtb-bounds-2.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fimpl-fn-hrtb-bounds-2.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -1,6 +1,8 @@\n error[E0700]: hidden type for `impl Debug` captures lifetime that does not appear in bounds\n   --> $DIR/impl-fn-hrtb-bounds-2.rs:5:9\n    |\n+LL | fn a() -> impl Fn(&u8) -> impl Debug {\n+   |                           ---------- opaque type defined here\n LL |     |x| x\n    |     --- ^\n    |     |"}, {"sha": "5b0b1cc5e426f605a8ae8cb8030f5d0598a8e5fe", "filename": "tests/ui/impl-trait/multiple-lifetimes/error-handling-2.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling-2.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -1,6 +1,9 @@\n error[E0700]: hidden type for `E<'b, 'c>` captures lifetime that does not appear in bounds\n   --> $DIR/error-handling-2.rs:22:5\n    |\n+LL | type E<'a, 'b> = impl Sized;\n+   |                  ---------- opaque type defined here\n+LL |\n LL | fn foo<'a: 'b, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        -- hidden type `*mut &'a i32` captures the lifetime `'a` as defined here\n ..."}, {"sha": "68ac22a05f4dd8368be1670380f0390c4cb316cb", "filename": "tests/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `impl Trait<'d, 'e>` captures lifetime that does n\n   --> $DIR/ordinary-bounds-unrelated.rs:28:33\n    |\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n-   |                     -- hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n+   |                     --                                                   ------------------ opaque type defined here\n+   |                     |\n+   |                     hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n ...\n LL |     if condition() { a } else { b }\n    |                                 ^"}, {"sha": "493a9e66eaf868dccc0da6cc9b76cc6fe505aeda", "filename": "tests/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `impl Trait<'a, 'b>` captures lifetime that does n\n   --> $DIR/ordinary-bounds-unsuited.rs:31:33\n    |\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n-   |                     -- hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n+   |                     --                                       ------------------ opaque type defined here\n+   |                     |\n+   |                     hidden type `Ordinary<'b>` captures the lifetime `'b` as defined here\n ...\n LL |     if condition() { a } else { b }\n    |                                 ^"}, {"sha": "55e3cd95064baa26a4e054b15047180b6ac66126", "filename": "tests/ui/impl-trait/must_outlive_least_region_or_bound.stderr", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -2,8 +2,9 @@ error[E0700]: hidden type for `impl Copy` captures lifetime that does not appear\n   --> $DIR/must_outlive_least_region_or_bound.rs:3:35\n    |\n LL | fn elided(x: &i32) -> impl Copy { x }\n-   |              ----                 ^\n-   |              |\n+   |              ----     ---------   ^\n+   |              |        |\n+   |              |        opaque type defined here\n    |              hidden type `&i32` captures the anonymous lifetime defined here\n    |\n help: to declare that `impl Copy` captures `'_`, you can add an explicit `'_` lifetime bound\n@@ -15,8 +16,9 @@ error[E0700]: hidden type for `impl Copy` captures lifetime that does not appear\n   --> $DIR/must_outlive_least_region_or_bound.rs:6:44\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n-   |             --                             ^\n-   |             |\n+   |             --                 ---------   ^\n+   |             |                  |\n+   |             |                  opaque type defined here\n    |             hidden type `&'a i32` captures the lifetime `'a` as defined here\n    |\n help: to declare that `impl Copy` captures `'a`, you can add an explicit `'a` lifetime bound\n@@ -100,7 +102,9 @@ error[E0700]: hidden type for `impl Fn(&'a u32)` captures lifetime that does not\n   --> $DIR/must_outlive_least_region_or_bound.rs:38:5\n    |\n LL | fn move_lifetime_into_fn<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Fn(&'a u32) {\n-   |                              -- hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:38:5: 38:13]` captures the lifetime `'b` as defined here\n+   |                              --                             ---------------- opaque type defined here\n+   |                              |\n+   |                              hidden type `[closure@$DIR/must_outlive_least_region_or_bound.rs:38:5: 38:13]` captures the lifetime `'b` as defined here\n LL |     move |_| println!(\"{}\", y)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "907822ebbc3ab67ddbc798fb640d943ccf55019a", "filename": "tests/ui/impl-trait/nested-return-type4.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fimpl-trait%2Fnested-return-type4.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fimpl-trait%2Fnested-return-type4.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fnested-return-type4.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `impl Future<Output = impl Sized>` captures lifeti\n   --> $DIR/nested-return-type4.rs:4:5\n    |\n LL | fn test<'s: 's>(s: &'s str) -> impl std::future::Future<Output = impl Sized> {\n-   |         -- hidden type `[async block@$DIR/nested-return-type4.rs:4:5: 4:31]` captures the lifetime `'s` as defined here\n+   |         --                     --------------------------------------------- opaque type defined here\n+   |         |\n+   |         hidden type `[async block@$DIR/nested-return-type4.rs:4:5: 4:31]` captures the lifetime `'s` as defined here\n LL |     async move { let _s = s; }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "e4556bc21a7f9af07a0b843df217094b852b1b5a", "filename": "tests/ui/impl-trait/region-escape-via-bound.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fregion-escape-via-bound.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `impl Trait<'y>` captures lifetime that does not a\n   --> $DIR/region-escape-via-bound.rs:17:5\n    |\n LL | fn foo<'x, 'y>(x: Cell<&'x u32>) -> impl Trait<'y>\n-   |        -- hidden type `Cell<&'x u32>` captures the lifetime `'x` as defined here\n+   |        --                           -------------- opaque type defined here\n+   |        |\n+   |        hidden type `Cell<&'x u32>` captures the lifetime `'x` as defined here\n ...\n LL |     x\n    |     ^"}, {"sha": "488cb821c10512f6bd1384cc1a4e9ed387d0cee2", "filename": "tests/ui/impl-trait/static-return-lifetime-infered.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `impl Iterator<Item = u32>` captures lifetime that\n   --> $DIR/static-return-lifetime-infered.rs:7:9\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                         ----- hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:7:27: 7:30]>` captures the anonymous lifetime defined here\n+   |                         -----     ----------------------- opaque type defined here\n+   |                         |\n+   |                         hidden type `Map<std::slice::Iter<'_, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:7:27: 7:30]>` captures the anonymous lifetime defined here\n LL |         self.x.iter().map(|a| a.0)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n@@ -15,7 +17,9 @@ error[E0700]: hidden type for `impl Iterator<Item = u32>` captures lifetime that\n   --> $DIR/static-return-lifetime-infered.rs:11:9\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                    -- hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:11:27: 11:30]>` captures the lifetime `'a` as defined here\n+   |                    --               ----------------------- opaque type defined here\n+   |                    |\n+   |                    hidden type `Map<std::slice::Iter<'a, (u32, u32)>, [closure@$DIR/static-return-lifetime-infered.rs:11:27: 11:30]>` captures the lifetime `'a` as defined here\n LL |         self.x.iter().map(|a| a.0)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "b514db461b478c75da107c95c6e939aeb5707bda", "filename": "tests/ui/lifetimes/issue-105227.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Flifetimes%2Fissue-105227.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Flifetimes%2Fissue-105227.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flifetimes%2Fissue-105227.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `impl Iterator<Item = char>` captures lifetime tha\n   --> $DIR/issue-105227.rs:7:5\n    |\n LL | fn chars0(v :(& str, &str)) -> impl Iterator<Item = char> {\n-   |               ----- hidden type `std::iter::Chain<Chars<'_>, Chars<'_>>` captures the anonymous lifetime defined here\n+   |               -----            -------------------------- opaque type defined here\n+   |               |\n+   |               hidden type `std::iter::Chain<Chars<'_>, Chars<'_>>` captures the anonymous lifetime defined here\n LL |\n LL |     v.0.chars().chain(v.1.chars())\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -16,7 +18,9 @@ error[E0700]: hidden type for `impl Iterator<Item = char>` captures lifetime tha\n   --> $DIR/issue-105227.rs:13:5\n    |\n LL | fn chars1(v0 : & str, v1 : &str) -> impl Iterator<Item = char> {\n-   |                ----- hidden type `std::iter::Chain<Chars<'_>, Chars<'_>>` captures the anonymous lifetime defined here\n+   |                -----                -------------------------- opaque type defined here\n+   |                |\n+   |                hidden type `std::iter::Chain<Chars<'_>, Chars<'_>>` captures the anonymous lifetime defined here\n LL |\n LL |     v0.chars().chain(v1.chars())\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -31,7 +35,10 @@ error[E0700]: hidden type for `impl Iterator<Item = char>` captures lifetime tha\n    |\n LL | fn chars2<'b>(v0 : &str, v1 : &'_ str, v2 : &'b str) ->\n    |                    ---- hidden type `std::iter::Chain<Chars<'_>, Chars<'_>>` captures the anonymous lifetime defined here\n-...\n+LL |\n+LL |     (impl Iterator<Item = char>, &'b str)\n+   |      -------------------------- opaque type defined here\n+LL | {\n LL |     (v0.chars().chain(v1.chars()), v2)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "4d3a901531614078f60b5c04901d0162cd8a1a1c", "filename": "tests/ui/nll/issue-73159-rpit-static.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fnll%2Fissue-73159-rpit-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fnll%2Fissue-73159-rpit-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fissue-73159-rpit-static.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -4,6 +4,7 @@ error[E0700]: hidden type for `impl Iterator<Item = u8>` captures lifetime that\n LL | impl<'a> Foo<'a> {\n    |      -- hidden type `Copied<std::slice::Iter<'a, u8>>` captures the lifetime `'a` as defined here\n LL |     fn make_it(&self) -> impl Iterator<Item = u8> {\n+   |                          ------------------------ opaque type defined here\n LL |         self.0.iter().copied()\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n "}, {"sha": "e0d476a33b23bb61b922ae5b33d1be2f16cb7723", "filename": "tests/ui/nll/member-constraints/min-choice-reject-ambiguous.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fnll%2Fmember-constraints%2Fmin-choice-reject-ambiguous.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fnll%2Fmember-constraints%2Fmin-choice-reject-ambiguous.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmember-constraints%2Fmin-choice-reject-ambiguous.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -24,7 +24,9 @@ error[E0700]: hidden type for `impl Cap<'b> + Cap<'c>` captures lifetime that do\n   --> $DIR/min-choice-reject-ambiguous.rs:39:5\n    |\n LL | fn test_ambiguous<'a, 'b, 'c>(s: &'a u8) -> impl Cap<'b> + Cap<'c>\n-   |                   -- hidden type `&'a u8` captures the lifetime `'a` as defined here\n+   |                   --                        ---------------------- opaque type defined here\n+   |                   |\n+   |                   hidden type `&'a u8` captures the lifetime `'a` as defined here\n ...\n LL |     s\n    |     ^"}, {"sha": "483b5822b9d35af3e72cadb5fcb329e70e61037b", "filename": "tests/ui/nll/member-constraints/nested-impl-trait-fail.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fmember-constraints%2Fnested-impl-trait-fail.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `impl IntoIterator<Item = impl Cap<'a> + Cap<'b>>`\n   --> $DIR/nested-impl-trait-fail.rs:17:5\n    |\n LL | fn fail_early_bound<'s, 'a, 'b>(a: &'s u8) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b>>\n-   |                     -- hidden type `[&'s u8; 1]` captures the lifetime `'s` as defined here\n+   |                     --                        ------------------------------------------------ opaque type defined here\n+   |                     |\n+   |                     hidden type `[&'s u8; 1]` captures the lifetime `'s` as defined here\n ...\n LL |     [a]\n    |     ^^^\n@@ -20,7 +22,9 @@ error[E0700]: hidden type for `impl Cap<'a> + Cap<'b>` captures lifetime that do\n   --> $DIR/nested-impl-trait-fail.rs:17:5\n    |\n LL | fn fail_early_bound<'s, 'a, 'b>(a: &'s u8) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b>>\n-   |                     -- hidden type `&'s u8` captures the lifetime `'s` as defined here\n+   |                     --                                                 ---------------------- opaque type defined here\n+   |                     |\n+   |                     hidden type `&'s u8` captures the lifetime `'s` as defined here\n ...\n LL |     [a]\n    |     ^^^\n@@ -40,6 +44,8 @@ error[E0700]: hidden type for `impl IntoIterator<Item = impl Cap<'a> + Cap<'b>>`\n LL | fn fail_late_bound<'s, 'a, 'b>(\n    |                    -- hidden type `[&'s u8; 1]` captures the lifetime `'s` as defined here\n ...\n+LL | ) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b>> {\n+   |      ------------------------------------------------ opaque type defined here\n LL |     [a]\n    |     ^^^\n    |\n@@ -58,6 +64,8 @@ error[E0700]: hidden type for `impl Cap<'a> + Cap<'b>` captures lifetime that do\n LL | fn fail_late_bound<'s, 'a, 'b>(\n    |                    -- hidden type `&'s u8` captures the lifetime `'s` as defined here\n ...\n+LL | ) -> impl IntoIterator<Item = impl Cap<'a> + Cap<'b>> {\n+   |                               ---------------------- opaque type defined here\n LL |     [a]\n    |     ^^^\n    |"}, {"sha": "7fcb68252cfdb3f4d47db40e35f23921903fa826", "filename": "tests/ui/nll/ty-outlives/impl-trait-captures.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnll%2Fty-outlives%2Fimpl-trait-captures.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `Opaque(DefId(0:13 ~ impl_trait_captures[1afc]::fo\n   --> $DIR/impl-trait-captures.rs:11:5\n    |\n LL | fn foo<'a, T>(x: &T) -> impl Foo<'a> {\n-   |                  -- hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_)) T` captures the anonymous lifetime defined here\n+   |                  --     ------------ opaque type defined here\n+   |                  |\n+   |                  hidden type `&ReFree(DefId(0:8 ~ impl_trait_captures[1afc]::foo), BrNamed(DefId(0:12 ~ impl_trait_captures[1afc]::foo::'_), '_)) T` captures the anonymous lifetime defined here\n LL |     x\n    |     ^\n    |"}, {"sha": "944cdc5f55de69b680531b9ffddc63faf9ba2930", "filename": "tests/ui/self/arbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait-async.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -2,8 +2,9 @@ error[E0700]: hidden type for `impl Clone` captures lifetime that does not appea\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait-async.rs:8:48\n    |\n LL |     async fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                          -----                 ^^^^^^^^\n-   |                          |\n+   |                          -----      ---------- ^^^^^^^^\n+   |                          |          |\n+   |                          |          opaque type defined here\n    |                          hidden type `Pin<&Foo>` captures the anonymous lifetime defined here\n    |\n help: to declare that `impl Clone` captures `'_`, you can add an explicit `'_` lifetime bound"}, {"sha": "8a9b397ca7005fab44b21cde65e0a7e5a8067b59", "filename": "tests/ui/self/arbitrary_self_types_pin_lifetime_impl_trait.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fself%2Farbitrary_self_types_pin_lifetime_impl_trait.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -2,8 +2,9 @@ error[E0700]: hidden type for `impl Clone` captures lifetime that does not appea\n   --> $DIR/arbitrary_self_types_pin_lifetime_impl_trait.rs:6:44\n    |\n LL |     fn f(self: Pin<&Self>) -> impl Clone { self }\n-   |                    -----                   ^^^^\n-   |                    |\n+   |                    -----      ----------   ^^^^\n+   |                    |          |\n+   |                    |          opaque type defined here\n    |                    hidden type `Pin<&Foo>` captures the anonymous lifetime defined here\n    |\n help: to declare that `impl Clone` captures `'_`, you can add an explicit `'_` lifetime bound"}, {"sha": "93cfa60b5ab89d9fc31c676e68cf8e9c128b10f7", "filename": "tests/ui/suggestions/lifetimes/missing-lifetimes-in-signature.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Flifetimes%2Fmissing-lifetimes-in-signature.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -10,7 +10,9 @@ error[E0700]: hidden type for `impl FnOnce()` captures lifetime that does not ap\n   --> $DIR/missing-lifetimes-in-signature.rs:19:5\n    |\n LL |   fn foo<G, T>(g: G, dest: &mut T) -> impl FnOnce()\n-   |                            ------ hidden type `[closure@$DIR/missing-lifetimes-in-signature.rs:19:5: 19:12]` captures the anonymous lifetime defined here\n+   |                            ------     ------------- opaque type defined here\n+   |                            |\n+   |                            hidden type `[closure@$DIR/missing-lifetimes-in-signature.rs:19:5: 19:12]` captures the anonymous lifetime defined here\n ...\n LL | /     move || {\n LL | |"}, {"sha": "e52d5f9de69ed0e10bc841e30797b57388d00c4b", "filename": "tests/ui/type-alias-impl-trait/imply_bounds_from_bounds_param.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fimply_bounds_from_bounds_param.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -2,7 +2,9 @@ error[E0700]: hidden type for `impl PlusOne` captures lifetime that does not app\n   --> $DIR/imply_bounds_from_bounds_param.rs:24:5\n    |\n LL | fn test<'a>(y: &'a mut i32) -> impl PlusOne {\n-   |         -- hidden type `<&'a mut i32 as Callable>::Output` captures the lifetime `'a` as defined here\n+   |         --                     ------------ opaque type defined here\n+   |         |\n+   |         hidden type `<&'a mut i32 as Callable>::Output` captures the lifetime `'a` as defined here\n LL |     <&'a mut i32 as Callable>::call(y)\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |"}, {"sha": "d666e668d365570b09ca450be84f030da4446fb0", "filename": "tests/ui/type-alias-impl-trait/missing_lifetime_bound.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Ftype-alias-impl-trait%2Fmissing_lifetime_bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4b23a224ab644cea703922859f64950898eba90d/tests%2Fui%2Ftype-alias-impl-trait%2Fmissing_lifetime_bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fmissing_lifetime_bound.stderr?ref=4b23a224ab644cea703922859f64950898eba90d", "patch": "@@ -1,6 +1,8 @@\n error[E0700]: hidden type for `Opaque<'a, T>` captures lifetime that does not appear in bounds\n   --> $DIR/missing_lifetime_bound.rs:4:47\n    |\n+LL | type Opaque<'a, T> = impl Sized;\n+   |                      ---------- opaque type defined here\n LL | fn defining<'a, T>(x: &'a i32) -> Opaque<T> { x }\n    |             --                                ^\n    |             |"}]}