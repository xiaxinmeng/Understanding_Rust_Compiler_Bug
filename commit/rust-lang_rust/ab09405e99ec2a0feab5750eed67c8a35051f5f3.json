{"sha": "ab09405e99ec2a0feab5750eed67c8a35051f5f3", "node_id": "C_kwDOAAsO6NoAKGFiMDk0MDVlOTllYzJhMGZlYWI1NzUwZWVkNjdjOGEzNTA1MWY1ZjM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-02-09T04:01:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-09T04:01:26Z"}, "message": "Rollup merge of #107813 - compiler-errors:bad-impl-trait-in-macro-is-ok, r=estebank\n\nDo not eagerly recover for bad `impl Trait` types in macros\n\nFixes #107796\n\ncc #106712, ```@estebank``` and ```@Ezrashaw``` please make sure to use [`Parser::may_recover`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_parse/parser/struct.Parser.html#method.may_recover) for all eager-token-consuming parser recoveries.\n\nThis also fixes a separate regression from #99915, that was introduced before we added `may_recover` though.", "tree": {"sha": "891702b5fb22991effdf2b6109c5d4feb8f2874c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/891702b5fb22991effdf2b6109c5d4feb8f2874c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab09405e99ec2a0feab5750eed67c8a35051f5f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj5HAWCRBK7hj4Ov3rIwAA6eUIACbQGx+HJ69JlAd/Vt/FxpgD\nYkTHXoTa4SyqnBT1ZnKxgbjTwZBeNckKRvXIaXWJaUWBI8qG6IWCjhlyUPJ+mVr+\nIh9wMi8lhTF34A90P50GaonlrfIB/OKpy3fgy5G71E2M5jbBmRRH8vorcWeCsM7O\ng19veQAQadbrzDZh0GeJxwh8wT4pcYJpwwPo8KWFbEpb5/14f5GZXKpy9lp647Ww\nJwVyEtgONf5uz2mHdcD3llGP8Vask1GL2+apsdoBQYsRDwmjvaKFGq7HgSiKWKzE\nF7uXLHaDdRHB96Sutu0RWSdmh4ZHx0WKek5lSE07Cp1DveevPDr/kqyWbuPltOg=\n=D/lC\n-----END PGP SIGNATURE-----\n", "payload": "tree 891702b5fb22991effdf2b6109c5d4feb8f2874c\nparent 46c7c91ce746e9edb94dad5a4d4d5fd682582c78\nparent 0017822b708d2dde46fa603592d322951dc7ba0a\nauthor Michael Goulet <michael@errs.io> 1675915286 -0800\ncommitter GitHub <noreply@github.com> 1675915286 -0800\n\nRollup merge of #107813 - compiler-errors:bad-impl-trait-in-macro-is-ok, r=estebank\n\nDo not eagerly recover for bad `impl Trait` types in macros\n\nFixes #107796\n\ncc #106712, ```@estebank``` and ```@Ezrashaw``` please make sure to use [`Parser::may_recover`](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_parse/parser/struct.Parser.html#method.may_recover) for all eager-token-consuming parser recoveries.\n\nThis also fixes a separate regression from #99915, that was introduced before we added `may_recover` though.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab09405e99ec2a0feab5750eed67c8a35051f5f3", "html_url": "https://github.com/rust-lang/rust/commit/ab09405e99ec2a0feab5750eed67c8a35051f5f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab09405e99ec2a0feab5750eed67c8a35051f5f3/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "46c7c91ce746e9edb94dad5a4d4d5fd682582c78", "url": "https://api.github.com/repos/rust-lang/rust/commits/46c7c91ce746e9edb94dad5a4d4d5fd682582c78", "html_url": "https://github.com/rust-lang/rust/commit/46c7c91ce746e9edb94dad5a4d4d5fd682582c78"}, {"sha": "0017822b708d2dde46fa603592d322951dc7ba0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0017822b708d2dde46fa603592d322951dc7ba0a", "html_url": "https://github.com/rust-lang/rust/commit/0017822b708d2dde46fa603592d322951dc7ba0a"}], "stats": {"total": 37, "additions": 35, "deletions": 2}, "files": [{"sha": "5b92563fc358b68b1bbf824feacef2d9542e4a09", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ab09405e99ec2a0feab5750eed67c8a35051f5f3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab09405e99ec2a0feab5750eed67c8a35051f5f3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=ab09405e99ec2a0feab5750eed67c8a35051f5f3", "patch": "@@ -694,8 +694,9 @@ impl<'a> Parser<'a> {\n         // `where`, so stop if it's it.\n         // We also continue if we find types (not traits), again for error recovery.\n         while self.can_begin_bound()\n-            || self.token.can_begin_type()\n-            || (self.token.is_reserved_ident() && !self.token.is_keyword(kw::Where))\n+            || (self.may_recover()\n+                && (self.token.can_begin_type()\n+                    || (self.token.is_reserved_ident() && !self.token.is_keyword(kw::Where))))\n         {\n             if self.token.is_keyword(kw::Dyn) {\n                 // Account for `&dyn Trait + dyn Other`."}, {"sha": "218cd7678594fd072dff910ad52dc5b670ffd4eb", "filename": "tests/ui/parser/bad-recover-kw-after-impl.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ab09405e99ec2a0feab5750eed67c8a35051f5f3/tests%2Fui%2Fparser%2Fbad-recover-kw-after-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab09405e99ec2a0feab5750eed67c8a35051f5f3/tests%2Fui%2Fparser%2Fbad-recover-kw-after-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fbad-recover-kw-after-impl.rs?ref=ab09405e99ec2a0feab5750eed67c8a35051f5f3", "patch": "@@ -0,0 +1,15 @@\n+// check-pass\n+\n+// edition:2021\n+// for the `impl` + keyword test\n+\n+macro_rules! impl_primitive {\n+    ($ty:ty) => {\n+        compile_error!(\"whoops\");\n+    };\n+    (impl async) => {};\n+}\n+\n+impl_primitive!(impl async);\n+\n+fn main() {}"}, {"sha": "510e08ba091a4058f3e76fb08280e42a1c44c607", "filename": "tests/ui/parser/bad-recover-ty-after-impl.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ab09405e99ec2a0feab5750eed67c8a35051f5f3/tests%2Fui%2Fparser%2Fbad-recover-ty-after-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab09405e99ec2a0feab5750eed67c8a35051f5f3/tests%2Fui%2Fparser%2Fbad-recover-ty-after-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fparser%2Fbad-recover-ty-after-impl.rs?ref=ab09405e99ec2a0feab5750eed67c8a35051f5f3", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+\n+macro_rules! impl_primitive {\n+    ($ty:ty) => { impl_primitive!(impl $ty); };\n+    (impl $ty:ty) => { fn a(_: $ty) {} }\n+}\n+\n+impl_primitive! { u8 }\n+\n+macro_rules! test {\n+    ($ty:ty) => { compile_error!(\"oh no\"); };\n+    (impl &) => {};\n+}\n+\n+test!(impl &);\n+\n+fn main() {}"}]}