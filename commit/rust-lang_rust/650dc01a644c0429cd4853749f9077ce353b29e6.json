{"sha": "650dc01a644c0429cd4853749f9077ce353b29e6", "node_id": "C_kwDOAAsO6NoAKDY1MGRjMDFhNjQ0YzA0MjljZDQ4NTM3NDlmOTA3N2NlMzUzYjI5ZTY", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2023-05-05T03:46:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-05-05T03:46:28Z"}, "message": "Rollup merge of #111223 - jyn514:free-args, r=clubby789\n\nUse `free-args` consistently in bootstrap\n\nPreviously, this was only passed to miri and compiletest. Extended it to all other tests and binaries as well.\n\ncc https://rust-lang.zulipchat.com/#narrow/stream/326414-t-infra.2Fbootstrap/topic/Running.20a.20single.20doctest\n\nr? `@clubby789`", "tree": {"sha": "ed35a767748983cfed5de4965d86393c393a9656", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed35a767748983cfed5de4965d86393c393a9656"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/650dc01a644c0429cd4853749f9077ce353b29e6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkVHwUCRBK7hj4Ov3rIwAADWwIAIcjHda0HG0OF6uOm7xbsB78\nHgvKY3toEJGfe6ItdWWTYfOHubdJXtTaM+Hu4d9KKjU8K+SEsOZSZUsRQd3Ge0yQ\ng/alBNk+4wzl5TwHGxllMyXCGbtKkFEP5M49wQ8rEHSsPI0Xt4EtW0aaTYbETJ5b\nWLMP/T/HtLFKXKSpAn3kmqQfyaMynpiNBUyByPTknX5Ppn8G26qzVCymxd6kSOhv\nCnOTpNqD1mcwXYdIrpZYqtWEPHbM5Z0m3hKm7MLHw3Ie22J1iefrH4ims+g14DuJ\nYOjif+573uZYWwsaNPR9O9mRFcoTwugKxIaANL6NjuJ9ftYEoVgR8I5apl21nVg=\n=M7/a\n-----END PGP SIGNATURE-----\n", "payload": "tree ed35a767748983cfed5de4965d86393c393a9656\nparent 17a6c08718dff2a5bdad20a946f46fdab392ebca\nparent 0b6a79efbd42479c1e58c036af876e7b3d602bc9\nauthor Yuki Okushi <jtitor@2k36.org> 1683258388 +0900\ncommitter GitHub <noreply@github.com> 1683258388 +0900\n\nRollup merge of #111223 - jyn514:free-args, r=clubby789\n\nUse `free-args` consistently in bootstrap\n\nPreviously, this was only passed to miri and compiletest. Extended it to all other tests and binaries as well.\n\ncc https://rust-lang.zulipchat.com/#narrow/stream/326414-t-infra.2Fbootstrap/topic/Running.20a.20single.20doctest\n\nr? `@clubby789`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/650dc01a644c0429cd4853749f9077ce353b29e6", "html_url": "https://github.com/rust-lang/rust/commit/650dc01a644c0429cd4853749f9077ce353b29e6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/650dc01a644c0429cd4853749f9077ce353b29e6/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17a6c08718dff2a5bdad20a946f46fdab392ebca", "url": "https://api.github.com/repos/rust-lang/rust/commits/17a6c08718dff2a5bdad20a946f46fdab392ebca", "html_url": "https://github.com/rust-lang/rust/commit/17a6c08718dff2a5bdad20a946f46fdab392ebca"}, {"sha": "0b6a79efbd42479c1e58c036af876e7b3d602bc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b6a79efbd42479c1e58c036af876e7b3d602bc9", "html_url": "https://github.com/rust-lang/rust/commit/0b6a79efbd42479c1e58c036af876e7b3d602bc9"}], "stats": {"total": 58, "additions": 30, "deletions": 28}, "files": [{"sha": "ac51dc51aeb0282ed36a87a14d0e555b7f22de7f", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/650dc01a644c0429cd4853749f9077ce353b29e6/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/650dc01a644c0429cd4853749f9077ce353b29e6/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=650dc01a644c0429cd4853749f9077ce353b29e6", "patch": "@@ -1442,6 +1442,28 @@ impl Config {\n         git\n     }\n \n+    pub(crate) fn test_args(&self) -> Vec<&str> {\n+        let mut test_args = match self.cmd {\n+            Subcommand::Test { ref test_args, .. } | Subcommand::Bench { ref test_args, .. } => {\n+                test_args.iter().flat_map(|s| s.split_whitespace()).collect()\n+            }\n+            _ => vec![],\n+        };\n+        test_args.extend(self.free_args.iter().map(|s| s.as_str()));\n+        test_args\n+    }\n+\n+    pub(crate) fn args(&self) -> Vec<&str> {\n+        let mut args = match self.cmd {\n+            Subcommand::Run { ref args, .. } => {\n+                args.iter().flat_map(|s| s.split_whitespace()).collect()\n+            }\n+            _ => vec![],\n+        };\n+        args.extend(self.free_args.iter().map(|s| s.as_str()));\n+        args\n+    }\n+\n     /// Bootstrap embeds a version number into the name of shared libraries it uploads in CI.\n     /// Return the version it would have used for the given commit.\n     pub(crate) fn artifact_version_part(&self, commit: &str) -> String {"}, {"sha": "2a0ebee9a6b5b06ede0db2037c59b340e11c4dde", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/650dc01a644c0429cd4853749f9077ce353b29e6/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/650dc01a644c0429cd4853749f9077ce353b29e6/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=650dc01a644c0429cd4853749f9077ce353b29e6", "patch": "@@ -745,15 +745,6 @@ impl Subcommand {\n         }\n     }\n \n-    pub fn test_args(&self) -> Vec<&str> {\n-        match *self {\n-            Subcommand::Test { ref test_args, .. } | Subcommand::Bench { ref test_args, .. } => {\n-                test_args.iter().flat_map(|s| s.split_whitespace()).collect()\n-            }\n-            _ => vec![],\n-        }\n-    }\n-\n     pub fn rustc_args(&self) -> Vec<&str> {\n         match *self {\n             Subcommand::Test { ref rustc_args, .. } => {\n@@ -763,15 +754,6 @@ impl Subcommand {\n         }\n     }\n \n-    pub fn args(&self) -> Vec<&str> {\n-        match *self {\n-            Subcommand::Run { ref args, .. } => {\n-                args.iter().flat_map(|s| s.split_whitespace()).collect()\n-            }\n-            _ => vec![],\n-        }\n-    }\n-\n     pub fn fail_fast(&self) -> bool {\n         match *self {\n             Subcommand::Test { fail_fast, .. } => fail_fast,"}, {"sha": "cb15d9a6325b3d3a752978852404bf46876a8536", "filename": "src/bootstrap/run.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/650dc01a644c0429cd4853749f9077ce353b29e6/src%2Fbootstrap%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/650dc01a644c0429cd4853749f9077ce353b29e6/src%2Fbootstrap%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Frun.rs?ref=650dc01a644c0429cd4853749f9077ce353b29e6", "patch": "@@ -105,7 +105,7 @@ impl Step for BumpStage0 {\n \n     fn run(self, builder: &Builder<'_>) -> Self::Output {\n         let mut cmd = builder.tool_cmd(Tool::BumpStage0);\n-        cmd.args(builder.config.cmd.args());\n+        cmd.args(builder.config.args());\n         builder.run(&mut cmd);\n     }\n }\n@@ -182,8 +182,7 @@ impl Step for Miri {\n         miri.add_rustc_lib_path(builder, compiler);\n         // Forward arguments.\n         miri.arg(\"--\").arg(\"--target\").arg(target.rustc_target_arg());\n-        miri.args(builder.config.cmd.args());\n-        miri.args(&builder.config.free_args);\n+        miri.args(builder.config.args());\n \n         // miri tests need to know about the stage sysroot\n         miri.env(\"MIRI_SYSROOT\", &miri_sysroot);"}, {"sha": "28813266a4d9e9f18793b7474e4041f37f7cbf2c", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/650dc01a644c0429cd4853749f9077ce353b29e6/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/650dc01a644c0429cd4853749f9077ce353b29e6/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=650dc01a644c0429cd4853749f9077ce353b29e6", "patch": "@@ -263,7 +263,7 @@ impl Step for Cargotest {\n             builder,\n             cmd.arg(&cargo)\n                 .arg(&out_dir)\n-                .args(builder.config.cmd.test_args())\n+                .args(builder.config.test_args())\n                 .env(\"RUSTC\", builder.rustc(compiler))\n                 .env(\"RUSTDOC\", builder.rustdoc(compiler)),\n         );\n@@ -634,7 +634,7 @@ impl Step for Miri {\n             .arg(builder.src.join(\"src/tools/miri/test-cargo-miri/Cargo.toml\"));\n         cargo.arg(\"--target\").arg(target.rustc_target_arg());\n         cargo.arg(\"--tests\"); // don't run doctests, they are too confused by the staging\n-        cargo.arg(\"--\").args(builder.config.cmd.test_args());\n+        cargo.arg(\"--\").args(builder.config.test_args());\n \n         // Tell `cargo miri` where to find things.\n         cargo.env(\"MIRI_SYSROOT\", &miri_sysroot);\n@@ -1060,7 +1060,7 @@ impl Step for RustdocGUI {\n                 }\n             }\n         }\n-        for test_arg in builder.config.cmd.test_args() {\n+        for test_arg in builder.config.test_args() {\n             command.arg(test_arg);\n         }\n         builder.run(&mut command);\n@@ -1555,8 +1555,7 @@ note: if you're sure you want to do this, please open an issue as to why. In the\n             .filter_map(|p| util::is_valid_test_suite_arg(p, suite_path, builder))\n             .collect();\n \n-        test_args.append(&mut builder.config.cmd.test_args());\n-        test_args.extend(builder.config.free_args.iter().map(|s| s.as_str()));\n+        test_args.append(&mut builder.config.test_args());\n \n         // On Windows, replace forward slashes in test-args by backslashes\n         // so the correct filters are passed to libtest\n@@ -1962,7 +1961,7 @@ fn markdown_test(builder: &Builder<'_>, compiler: Compiler, markdown: &Path) ->\n     cmd.arg(markdown);\n     cmd.env(\"RUSTC_BOOTSTRAP\", \"1\");\n \n-    let test_args = builder.config.cmd.test_args().join(\" \");\n+    let test_args = builder.config.test_args().join(\" \");\n     cmd.arg(\"--test-args\").arg(test_args);\n \n     if builder.config.verbose_tests {\n@@ -2099,7 +2098,7 @@ fn prepare_cargo_test(\n         cargo.arg(\"-p\").arg(krate);\n     }\n \n-    cargo.arg(\"--\").args(&builder.config.cmd.test_args()).args(libtest_args);\n+    cargo.arg(\"--\").args(&builder.config.test_args()).args(libtest_args);\n     if !builder.config.verbose_tests {\n         cargo.arg(\"--quiet\");\n     }"}]}