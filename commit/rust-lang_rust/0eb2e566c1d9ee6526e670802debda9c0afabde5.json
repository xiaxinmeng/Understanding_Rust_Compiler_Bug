{"sha": "0eb2e566c1d9ee6526e670802debda9c0afabde5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlYjJlNTY2YzFkOWVlNjUyNmU2NzA4MDJkZWJkYTljMGFmYWJkZTU=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-05T22:29:15Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-10T11:12:28Z"}, "message": "Combine comment-handling logic into struct\n\nThis also permits sharing the underlying code between pprust and\nhir::print.", "tree": {"sha": "8d58a0b3023f11899414e649898d804486a87aff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d58a0b3023f11899414e649898d804486a87aff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0eb2e566c1d9ee6526e670802debda9c0afabde5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0eb2e566c1d9ee6526e670802debda9c0afabde5", "html_url": "https://github.com/rust-lang/rust/commit/0eb2e566c1d9ee6526e670802debda9c0afabde5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0eb2e566c1d9ee6526e670802debda9c0afabde5/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b5e39723dc8193a2c80289b062f87d618a59d11", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b5e39723dc8193a2c80289b062f87d618a59d11", "html_url": "https://github.com/rust-lang/rust/commit/9b5e39723dc8193a2c80289b062f87d618a59d11"}], "stats": {"total": 136, "additions": 65, "deletions": 71}, "files": [{"sha": "3af72dbb43c34b804bebf1588cd98858a44aa93e", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 8, "deletions": 34, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/0eb2e566c1d9ee6526e670802debda9c0afabde5/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eb2e566c1d9ee6526e670802debda9c0afabde5/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=0eb2e566c1d9ee6526e670802debda9c0afabde5", "patch": "@@ -2,10 +2,9 @@ use rustc_target::spec::abi::Abi;\n use syntax::ast;\n use syntax::source_map::{SourceMap, Spanned};\n use syntax::parse::ParseSess;\n-use syntax::parse::lexer::comments;\n use syntax::print::pp::{self, Breaks};\n use syntax::print::pp::Breaks::{Consistent, Inconsistent};\n-use syntax::print::pprust::PrintState;\n+use syntax::print::pprust::{Comments, PrintState};\n use syntax::symbol::kw;\n use syntax::util::parser::{self, AssocOp, Fixity};\n use syntax_pos::{self, BytePos, FileName};\n@@ -71,9 +70,7 @@ impl PpAnn for hir::Crate {\n \n pub struct State<'a> {\n     pub s: pp::Printer<'a>,\n-    cm: Option<&'a SourceMap>,\n-    comments: Vec<comments::Comment>,\n-    cur_cmnt: usize,\n+    comments: Option<Comments<'a>>,\n     ann: &'a (dyn PpAnn + 'a),\n }\n \n@@ -82,13 +79,9 @@ impl<'a> PrintState<'a> for State<'a> {\n         &mut self.s\n     }\n \n-    fn comments(&mut self) -> &mut Vec<comments::Comment> {\n+    fn comments(&mut self) -> &mut Option<Comments<'a>> {\n         &mut self.comments\n     }\n-\n-    fn cur_cmnt(&mut self) -> &mut usize {\n-        &mut self.cur_cmnt\n-    }\n }\n \n #[allow(non_upper_case_globals)]\n@@ -122,12 +115,9 @@ impl<'a> State<'a> {\n                           out: &'a mut String,\n                           ann: &'a dyn PpAnn)\n                           -> State<'a> {\n-        let comments = comments::gather_comments(sess, filename, input);\n         State {\n             s: pp::mk_printer(out),\n-            cm: Some(cm),\n-            comments: comments,\n-            cur_cmnt: 0,\n+            comments: Some(Comments::new(cm, sess, filename, input)),\n             ann,\n         }\n     }\n@@ -140,9 +130,7 @@ pub fn to_string<F>(ann: &dyn PpAnn, f: F) -> String\n     {\n         let mut printer = State {\n             s: pp::mk_printer(&mut wr),\n-            cm: None,\n-            comments: Vec::new(),\n-            cur_cmnt: 0,\n+            comments: None,\n             ann,\n         };\n         f(&mut printer);\n@@ -2151,23 +2139,9 @@ impl<'a> State<'a> {\n                                         span: syntax_pos::Span,\n                                         next_pos: Option<BytePos>)\n                                         {\n-        let cm = match self.cm {\n-            Some(cm) => cm,\n-            _ => return,\n-        };\n-        if let Some(ref cmnt) = self.next_comment() {\n-            if (*cmnt).style != comments::Trailing {\n-                return;\n-            }\n-            let span_line = cm.lookup_char_pos(span.hi());\n-            let comment_line = cm.lookup_char_pos((*cmnt).pos);\n-            let mut next = (*cmnt).pos + BytePos(1);\n-            if let Some(p) = next_pos {\n-                next = p;\n-            }\n-            if span.hi() < (*cmnt).pos && (*cmnt).pos < next &&\n-               span_line.line == comment_line.line {\n-                self.print_comment(cmnt);\n+        if let Some(cmnts) = self.comments() {\n+            if let Some(cmnt) = cmnts.trailing_comment(span, next_pos) {\n+                self.print_comment(&cmnt);\n             }\n         }\n     }"}, {"sha": "638384acc4c36951a8cf0b1b0005cdf58188e8ce", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 57, "deletions": 37, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/0eb2e566c1d9ee6526e670802debda9c0afabde5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0eb2e566c1d9ee6526e670802debda9c0afabde5/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0eb2e566c1d9ee6526e670802debda9c0afabde5", "patch": "@@ -43,11 +43,53 @@ pub struct NoAnn;\n \n impl PpAnn for NoAnn {}\n \n+pub struct Comments<'a> {\n+    cm: &'a SourceMap,\n+    comments: Vec<comments::Comment>,\n+    current: usize,\n+}\n+\n+impl<'a> Comments<'a> {\n+    pub fn new(\n+        cm: &'a SourceMap,\n+        sess: &ParseSess,\n+        filename: FileName,\n+        input: String,\n+    ) -> Comments<'a> {\n+        let comments = comments::gather_comments(sess, filename, input);\n+        Comments {\n+            cm,\n+            comments,\n+            current: 0,\n+        }\n+    }\n+\n+    pub fn next(&self) -> Option<comments::Comment> {\n+        self.comments.get(self.current).cloned()\n+    }\n+\n+    pub fn trailing_comment(\n+        &mut self,\n+        span: syntax_pos::Span,\n+        next_pos: Option<BytePos>,\n+    ) -> Option<comments::Comment> {\n+        if let Some(cmnt) = self.next() {\n+            if cmnt.style != comments::Trailing { return None; }\n+            let span_line = self.cm.lookup_char_pos(span.hi());\n+            let comment_line = self.cm.lookup_char_pos(cmnt.pos);\n+            let next = next_pos.unwrap_or_else(|| cmnt.pos + BytePos(1));\n+            if span.hi() < cmnt.pos && cmnt.pos < next && span_line.line == comment_line.line {\n+                return Some(cmnt);\n+            }\n+        }\n+\n+        None\n+    }\n+}\n+\n pub struct State<'a> {\n     pub s: pp::Printer<'a>,\n-    cm: Option<&'a SourceMap>,\n-    comments: Vec<comments::Comment>,\n-    cur_cmnt: usize,\n+    comments: Option<Comments<'a>>,\n     ann: &'a (dyn PpAnn+'a),\n     is_expanded: bool\n }\n@@ -98,12 +140,9 @@ impl<'a> State<'a> {\n                           out: &'a mut String,\n                           ann: &'a dyn PpAnn,\n                           is_expanded: bool) -> State<'a> {\n-        let comments = comments::gather_comments(sess, filename, input);\n         State {\n             s: pp::mk_printer(out),\n-            cm: Some(cm),\n-            comments,\n-            cur_cmnt: 0,\n+            comments: Some(Comments::new(cm, sess, filename, input)),\n             ann,\n             is_expanded,\n         }\n@@ -117,9 +156,7 @@ pub fn to_string<F>(f: F) -> String where\n     {\n         let mut printer = State {\n             s: pp::mk_printer(&mut wr),\n-            cm: None,\n-            comments: Vec::new(),\n-            cur_cmnt: 0,\n+            comments: None,\n             ann: &NoAnn,\n             is_expanded: false\n         };\n@@ -415,8 +452,7 @@ fn visibility_qualified(vis: &ast::Visibility, s: &str) -> String {\n \n pub trait PrintState<'a> {\n     fn writer(&mut self) -> &mut pp::Printer<'a>;\n-    fn comments(&mut self) -> &mut Vec<comments::Comment>;\n-    fn cur_cmnt(&mut self) -> &mut usize;\n+    fn comments(&mut self) -> &mut Option<Comments<'a>>;\n \n     fn word_space<S: Into<Cow<'static, str>>>(&mut self, w: S) {\n         self.writer().word(w);\n@@ -537,17 +573,13 @@ pub trait PrintState<'a> {\n                 self.writer().hardbreak();\n             }\n         }\n-        *self.cur_cmnt() = *self.cur_cmnt() + 1;\n+        if let Some(cm) = self.comments() {\n+            cm.current += 1;\n+        }\n     }\n \n     fn next_comment(&mut self) -> Option<comments::Comment> {\n-        let cur_cmnt = *self.cur_cmnt();\n-        let cmnts = &*self.comments();\n-        if cur_cmnt < cmnts.len() {\n-            Some(cmnts[cur_cmnt].clone())\n-        } else {\n-            None\n-        }\n+        self.comments().as_mut().and_then(|c| c.next())\n     }\n \n     fn print_literal(&mut self, lit: &ast::Lit) {\n@@ -744,13 +776,9 @@ impl<'a> PrintState<'a> for State<'a> {\n         &mut self.s\n     }\n \n-    fn comments(&mut self) -> &mut Vec<comments::Comment> {\n+    fn comments(&mut self) -> &mut Option<Comments<'a>> {\n         &mut self.comments\n     }\n-\n-    fn cur_cmnt(&mut self) -> &mut usize {\n-        &mut self.cur_cmnt\n-    }\n }\n \n impl<'a> State<'a> {\n@@ -2913,18 +2941,10 @@ impl<'a> State<'a> {\n \n     crate fn maybe_print_trailing_comment(&mut self, span: syntax_pos::Span,\n                                         next_pos: Option<BytePos>)\n-        {\n-        let cm = match self.cm {\n-            Some(cm) => cm,\n-            _ => return,\n-        };\n-        if let Some(ref cmnt) = self.next_comment() {\n-            if cmnt.style != comments::Trailing { return; }\n-            let span_line = cm.lookup_char_pos(span.hi());\n-            let comment_line = cm.lookup_char_pos(cmnt.pos);\n-            let next = next_pos.unwrap_or_else(|| cmnt.pos + BytePos(1));\n-            if span.hi() < cmnt.pos && cmnt.pos < next && span_line.line == comment_line.line {\n-                self.print_comment(cmnt);\n+    {\n+        if let Some(cmnts) = self.comments() {\n+            if let Some(cmnt) = cmnts.trailing_comment(span, next_pos) {\n+                self.print_comment(&cmnt);\n             }\n         }\n     }"}]}