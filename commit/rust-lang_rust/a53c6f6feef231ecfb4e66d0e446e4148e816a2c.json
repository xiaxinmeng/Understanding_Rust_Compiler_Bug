{"sha": "a53c6f6feef231ecfb4e66d0e446e4148e816a2c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1M2M2ZjZmZWVmMjMxZWNmYjRlNjZkMGU0NDZlNDE0OGU4MTZhMmM=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-26T10:21:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-26T11:20:46Z"}, "message": "Allow redirecting logs to a specific file\n\nThere's a surprising lack of crates which are like env_logger, but\nalso allow writing to a file. Let's write our own then!", "tree": {"sha": "e2cbb7e27e4fb667ace5d59ca785c2eb24869e62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e2cbb7e27e4fb667ace5d59ca785c2eb24869e62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a53c6f6feef231ecfb4e66d0e446e4148e816a2c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a53c6f6feef231ecfb4e66d0e446e4148e816a2c", "html_url": "https://github.com/rust-lang/rust/commit/a53c6f6feef231ecfb4e66d0e446e4148e816a2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a53c6f6feef231ecfb4e66d0e446e4148e816a2c/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f647edcb080f50e01762a31eebd9ca94c982c768", "url": "https://api.github.com/repos/rust-lang/rust/commits/f647edcb080f50e01762a31eebd9ca94c982c768", "html_url": "https://github.com/rust-lang/rust/commit/f647edcb080f50e01762a31eebd9ca94c982c768"}], "stats": {"total": 114, "additions": 103, "deletions": 11}, "files": [{"sha": "45dc62ea79a488435a4055764bcc112984f740df", "filename": "crates/rust-analyzer/src/bin/args.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a53c6f6feef231ecfb4e66d0e446e4148e816a2c/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53c6f6feef231ecfb4e66d0e446e4148e816a2c/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fargs.rs?ref=a53c6f6feef231ecfb4e66d0e446e4148e816a2c", "patch": "@@ -13,6 +13,7 @@ use vfs::AbsPathBuf;\n \n pub(crate) struct Args {\n     pub(crate) verbosity: Verbosity,\n+    pub(crate) log_file: Option<PathBuf>,\n     pub(crate) command: Command,\n }\n \n@@ -53,7 +54,11 @@ impl Args {\n \n         if matches.contains(\"--version\") {\n             matches.finish().or_else(handle_extra_flags)?;\n-            return Ok(Args { verbosity: Verbosity::Normal, command: Command::Version });\n+            return Ok(Args {\n+                verbosity: Verbosity::Normal,\n+                log_file: None,\n+                command: Command::Version,\n+            });\n         }\n \n         let verbosity = match (\n@@ -68,8 +73,9 @@ impl Args {\n             (false, true, false) => Verbosity::Verbose,\n             (false, true, true) => bail!(\"Invalid flags: -q conflicts with -v\"),\n         };\n+        let log_file = matches.opt_value_from_str(\"--log-file\")?;\n \n-        let help = Ok(Args { verbosity, command: Command::Help });\n+        let help = Ok(Args { verbosity, log_file: None, command: Command::Help });\n         let subcommand = match matches.subcommand()? {\n             Some(it) => it,\n             None => {\n@@ -78,7 +84,7 @@ impl Args {\n                     return help;\n                 }\n                 matches.finish().or_else(handle_extra_flags)?;\n-                return Ok(Args { verbosity, command: Command::RunServer });\n+                return Ok(Args { verbosity, log_file, command: Command::RunServer });\n             }\n         };\n         let command = match subcommand.as_str() {\n@@ -345,7 +351,7 @@ ARGS:\n                 return help;\n             }\n         };\n-        Ok(Args { verbosity, command })\n+        Ok(Args { verbosity, log_file, command })\n     }\n }\n "}, {"sha": "3bcb1ae37d4c77a99ff4202672f7359930de8e05", "filename": "crates/rust-analyzer/src/bin/logger.rs", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/a53c6f6feef231ecfb4e66d0e446e4148e816a2c/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53c6f6feef231ecfb4e66d0e446e4148e816a2c/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs?ref=a53c6f6feef231ecfb4e66d0e446e4148e816a2c", "patch": "@@ -0,0 +1,73 @@\n+//! Simple logger that logs either to stderr or to a file, using `env_logger`\n+//! filter syntax. Amusingly, there's no crates.io crate that can do this and\n+//! only this.\n+\n+use std::{\n+    fs::File,\n+    io::{BufWriter, Write},\n+};\n+\n+use env_logger::filter::{Builder, Filter};\n+use log::{Log, Metadata, Record};\n+use parking_lot::Mutex;\n+\n+pub(crate) struct Logger {\n+    filter: Filter,\n+    file: Option<Mutex<BufWriter<File>>>,\n+}\n+\n+impl Logger {\n+    pub(crate) fn new(log_file: Option<File>, filter: Option<&str>) -> Logger {\n+        let filter = {\n+            let mut builder = Builder::new();\n+            if let Some(filter) = filter {\n+                builder.parse(filter);\n+            }\n+            builder.build()\n+        };\n+\n+        let file = log_file.map(|it| Mutex::new(BufWriter::new(it)));\n+\n+        Logger { filter, file }\n+    }\n+\n+    pub(crate) fn install(self) {\n+        let max_level = self.filter.filter();\n+        let _ = log::set_boxed_logger(Box::new(self)).map(|()| log::set_max_level(max_level));\n+    }\n+}\n+\n+impl Log for Logger {\n+    fn enabled(&self, metadata: &Metadata) -> bool {\n+        self.filter.enabled(metadata)\n+    }\n+\n+    fn log(&self, record: &Record) {\n+        if !self.filter.matches(record) {\n+            return;\n+        }\n+        match &self.file {\n+            Some(w) => {\n+                let _ = writeln!(\n+                    w.lock(),\n+                    \"[{} {}] {}\",\n+                    record.level(),\n+                    record.module_path().unwrap_or_default(),\n+                    record.args(),\n+                );\n+            }\n+            None => eprintln!(\n+                \"[{} {}] {}\",\n+                record.level(),\n+                record.module_path().unwrap_or_default(),\n+                record.args(),\n+            ),\n+        }\n+    }\n+\n+    fn flush(&self) {\n+        if let Some(w) = &self.file {\n+            let _ = w.lock().flush();\n+        }\n+    }\n+}"}, {"sha": "26676897092211531768764e6f2d71caddbd869c", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 19, "deletions": 6, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/a53c6f6feef231ecfb4e66d0e446e4148e816a2c/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a53c6f6feef231ecfb4e66d0e446e4148e816a2c/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=a53c6f6feef231ecfb4e66d0e446e4148e816a2c", "patch": "@@ -2,8 +2,9 @@\n //!\n //! Based on cli flags, either spawns an LSP server, or runs a batch analysis\n mod args;\n+mod logger;\n \n-use std::{convert::TryFrom, process};\n+use std::{convert::TryFrom, env, fs, path::PathBuf, process};\n \n use lsp_server::Connection;\n use project_model::ProjectManifest;\n@@ -26,8 +27,8 @@ fn main() {\n }\n \n fn try_main() -> Result<()> {\n-    setup_logging()?;\n     let args = args::Args::parse()?;\n+    setup_logging(args.log_file)?;\n     match args.command {\n         args::Command::RunServer => run_server()?,\n         args::Command::ProcMacro => proc_macro_srv::cli::run()?,\n@@ -52,9 +53,21 @@ fn try_main() -> Result<()> {\n     Ok(())\n }\n \n-fn setup_logging() -> Result<()> {\n-    std::env::set_var(\"RUST_BACKTRACE\", \"short\");\n-    env_logger::try_init_from_env(\"RA_LOG\")?;\n+fn setup_logging(log_file: Option<PathBuf>) -> Result<()> {\n+    env::set_var(\"RUST_BACKTRACE\", \"short\");\n+\n+    let log_file = match log_file {\n+        Some(path) => {\n+            if let Some(parent) = path.parent() {\n+                let _ = fs::create_dir_all(parent);\n+            }\n+            Some(fs::File::create(path)?)\n+        }\n+        None => None,\n+    };\n+    let filter = env::var(\"RA_LOG\").ok();\n+    logger::Logger::new(log_file, filter.as_deref()).install();\n+\n     profile::init();\n     Ok(())\n }\n@@ -95,7 +108,7 @@ fn run_server() -> Result<()> {\n         {\n             Some(it) => it,\n             None => {\n-                let cwd = std::env::current_dir()?;\n+                let cwd = env::current_dir()?;\n                 AbsPathBuf::assert(cwd)\n             }\n         };"}, {"sha": "8c966288b75c6d1b162ea906f7057c65d49fc756", "filename": "docs/user/manual.adoc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a53c6f6feef231ecfb4e66d0e446e4148e816a2c/docs%2Fuser%2Fmanual.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/a53c6f6feef231ecfb4e66d0e446e4148e816a2c/docs%2Fuser%2Fmanual.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fmanual.adoc?ref=a53c6f6feef231ecfb4e66d0e446e4148e816a2c", "patch": "@@ -351,7 +351,7 @@ Relative paths are interpreted relative to `rust-project.json` file location or\n \n See https://github.com/rust-analyzer/rust-project.json-example for a small example.\n \n-You can set `RA_LOG` environmental variable to `\"'rust_analyzer=info\"` to inspect how rust-analyzer handles config and project loading.\n+You can set `RA_LOG` environmental variable to `rust_analyzer=info` to inspect how rust-analyzer handles config and project loading.\n \n == Features\n "}]}