{"sha": "3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlMjJlMGMzYmM1NDgyNWYwOTYxMTFiYzg2ZWE2ZTRhNmIwNzZiYTA=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-28T23:05:07Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-10-28T23:05:50Z"}, "message": "Use token description in \"expected/found\" parse messages", "tree": {"sha": "1ee646f9aee37b8f86ef84f5265d8809e6512bcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ee646f9aee37b8f86ef84f5265d8809e6512bcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "html_url": "https://github.com/rust-lang/rust/commit/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e6f30ec3e6bda159063fcd126dcb14725fef92d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6f30ec3e6bda159063fcd126dcb14725fef92d", "html_url": "https://github.com/rust-lang/rust/commit/3e6f30ec3e6bda159063fcd126dcb14725fef92d"}], "stats": {"total": 114, "additions": 67, "deletions": 47}, "files": [{"sha": "003f83a5c6e231b624d145124618dc7c2e0cac40", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -611,6 +611,7 @@ impl<'a> Parser<'a> {\n             t if t.is_special_ident() => \"reserved identifier\",\n             t if t.is_used_keyword() => \"keyword\",\n             t if t.is_unused_keyword() => \"reserved keyword\",\n+            token::DocComment(..) => \"doc comment\",\n             _ => return None,\n         })\n     }\n@@ -644,8 +645,8 @@ impl<'a> Parser<'a> {\n                 Ok(())\n             } else {\n                 let token_str = pprust::token_to_string(t);\n-                let this_token_str = self.this_token_to_string();\n-                let mut err = self.fatal(&format!(\"expected `{}`, found `{}`\",\n+                let this_token_str = self.this_token_descr();\n+                let mut err = self.fatal(&format!(\"expected `{}`, found {}\",\n                                                   token_str,\n                                                   this_token_str));\n \n@@ -1444,17 +1445,17 @@ impl<'a> Parser<'a> {\n                             Some(body)\n                         }\n                         _ => {\n-                            let token_str = self.this_token_to_string();\n-                            let mut err = self.fatal(&format!(\"expected `;` or `{{`, found `{}`\",\n+                            let token_str = self.this_token_descr();\n+                            let mut err = self.fatal(&format!(\"expected `;` or `{{`, found {}\",\n                                                               token_str));\n                             err.span_label(self.span, \"expected `;` or `{`\");\n                             return Err(err);\n                         }\n                     }\n                 }\n                 _ => {\n-                    let token_str = self.this_token_to_string();\n-                    let mut err = self.fatal(&format!(\"expected `;` or `{{`, found `{}`\",\n+                    let token_str = self.this_token_descr();\n+                    let mut err = self.fatal(&format!(\"expected `;` or `{{`, found {}\",\n                                                       token_str));\n                     err.span_label(self.span, \"expected `;` or `{`\");\n                     return Err(err);\n@@ -3917,8 +3918,8 @@ impl<'a> Parser<'a> {\n                     etc_span = Some(etc_sp);\n                     break;\n                 }\n-                let token_str = self.this_token_to_string();\n-                let mut err = self.fatal(&format!(\"expected `}}`, found `{}`\", token_str));\n+                let token_str = self.this_token_descr();\n+                let mut err = self.fatal(&format!(\"expected `}}`, found {}\", token_str));\n \n                 err.span_label(self.span, \"expected `}`\");\n                 let mut comma_sp = None;\n@@ -4680,8 +4681,8 @@ impl<'a> Parser<'a> {\n                     } else {\n                         \"\"\n                     };\n-                    let tok_str = self.this_token_to_string();\n-                    let mut err = self.fatal(&format!(\"expected {}`(` or `{{`, found `{}`\",\n+                    let tok_str = self.this_token_descr();\n+                    let mut err = self.fatal(&format!(\"expected {}`(` or `{{`, found {}\",\n                                                       ident_str,\n                                                       tok_str));\n                     err.span_label(self.span, format!(\"expected {}`(` or `{{`\", ident_str));\n@@ -4817,8 +4818,8 @@ impl<'a> Parser<'a> {\n \n         if !self.eat(&token::OpenDelim(token::Brace)) {\n             let sp = self.span;\n-            let tok = self.this_token_to_string();\n-            let mut e = self.span_fatal(sp, &format!(\"expected `{{`, found `{}`\", tok));\n+            let tok = self.this_token_descr();\n+            let mut e = self.span_fatal(sp, &format!(\"expected `{{`, found {}\", tok));\n             let do_not_suggest_help =\n                 self.token.is_keyword(keywords::In) || self.token == token::Colon;\n \n@@ -4880,6 +4881,7 @@ impl<'a> Parser<'a> {\n                 }\n                 _ => ()\n             }\n+            e.span_label(sp, \"expected `{`\");\n             return Err(e);\n         }\n \n@@ -4975,7 +4977,7 @@ impl<'a> Parser<'a> {\n \n     fn warn_missing_semicolon(&self) {\n         self.diagnostic().struct_span_warn(self.span, {\n-            &format!(\"expected `;`, found `{}`\", self.this_token_to_string())\n+            &format!(\"expected `;`, found {}\", self.this_token_descr())\n         }).note({\n             \"This was erroneously allowed and will become a hard error in a future release\"\n         }).emit();\n@@ -6014,9 +6016,9 @@ impl<'a> Parser<'a> {\n             self.expect(&token::Semi)?;\n             body\n         } else {\n-            let token_str = self.this_token_to_string();\n+            let token_str = self.this_token_descr();\n             let mut err = self.fatal(&format!(\n-                \"expected `where`, `{{`, `(`, or `;` after struct name, found `{}`\",\n+                \"expected `where`, `{{`, `(`, or `;` after struct name, found {}\",\n                 token_str\n             ));\n             err.span_label(self.span, \"expected `where`, `{`, `(`, or `;` after struct name\");\n@@ -6038,9 +6040,9 @@ impl<'a> Parser<'a> {\n         } else if self.token == token::OpenDelim(token::Brace) {\n             VariantData::Struct(self.parse_record_struct_body()?, ast::DUMMY_NODE_ID)\n         } else {\n-            let token_str = self.this_token_to_string();\n+            let token_str = self.this_token_descr();\n             let mut err = self.fatal(&format!(\n-                \"expected `where` or `{{` after union name, found `{}`\", token_str));\n+                \"expected `where` or `{{` after union name, found {}\", token_str));\n             err.span_label(self.span, \"expected `where` or `{` after union name\");\n             return Err(err);\n         };\n@@ -6088,9 +6090,9 @@ impl<'a> Parser<'a> {\n             }\n             self.eat(&token::CloseDelim(token::Brace));\n         } else {\n-            let token_str = self.this_token_to_string();\n+            let token_str = self.this_token_descr();\n             let mut err = self.fatal(&format!(\n-                    \"expected `where`, or `{{` after struct name, found `{}`\", token_str));\n+                    \"expected `where`, or `{{` after struct name, found {}\", token_str));\n             err.span_label(self.span, \"expected `where`, or `{` after struct name\");\n             return Err(err);\n         }\n@@ -6166,8 +6168,8 @@ impl<'a> Parser<'a> {\n             }\n             _ => {\n                 let sp = self.sess.source_map().next_point(self.prev_span);\n-                let mut err = self.struct_span_err(sp, &format!(\"expected `,`, or `}}`, found `{}`\",\n-                                                                self.this_token_to_string()));\n+                let mut err = self.struct_span_err(sp, &format!(\"expected `,`, or `}}`, found {}\",\n+                                                                self.this_token_descr()));\n                 if self.token.is_ident() {\n                     // This is likely another field; emit the diagnostic and keep going\n                     err.span_suggestion_with_applicability(\n@@ -6303,8 +6305,8 @@ impl<'a> Parser<'a> {\n         }\n \n         if !self.eat(term) {\n-            let token_str = self.this_token_to_string();\n-            let mut err = self.fatal(&format!(\"expected item, found `{}`\", token_str));\n+            let token_str = self.this_token_descr();\n+            let mut err = self.fatal(&format!(\"expected item, found {}\", token_str));\n             if token_str == \";\" {\n                 let msg = \"consider removing this semicolon\";\n                 err.span_suggestion_short_with_applicability("}, {"sha": "8b6e34c585f9d8daefffbcb265b206fae8b7a3fc", "filename": "src/test/ui/did_you_mean/issue-46836-identifier-not-instead-of-negation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Fissue-46836-identifier-not-instead-of-negation.stderr?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -28,7 +28,7 @@ error: expected `{`, found `;`\n LL |     if not  // lack of braces is [sic]\n    |     -- this `if` statement has a condition, but no block\n LL |         println!(\"Then when?\");\n-   |                               ^\n+   |                               ^ expected `{`\n \n error: unexpected `2` after identifier\n   --> $DIR/issue-46836-identifier-not-instead-of-negation.rs:36:24"}, {"sha": "db81f00a9e364ab5ed11458dc10e5cefb3ff353f", "filename": "src/test/ui/if/if-without-block.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fif%2Fif-without-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fif%2Fif-without-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-block.rs?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -16,3 +16,4 @@ fn main() {\n     }\n }\n //~^ ERROR expected `{`, found `}`\n+//~| NOTE expected `{`"}, {"sha": "c94dac8871dabbfb3d8a0eee37bd1e94270ae687", "filename": "src/test/ui/if/if-without-block.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fif%2Fif-without-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fif%2Fif-without-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fif%2Fif-without-block.stderr?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -5,7 +5,7 @@ LL |     if 5 == {\n    |     -- this `if` statement has a condition, but no block\n ...\n LL | }\n-   | ^\n+   | ^ expected `{`\n \n error: aborting due to previous error\n "}, {"sha": "d50ee64cf52904b77522e592021e59d73e758044", "filename": "src/test/ui/issue-51602.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fissue-51602.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fissue-51602.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-51602.stderr?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -1,4 +1,4 @@\n-error: expected `{`, found `in`\n+error: expected `{`, found keyword `in`\n   --> $DIR/issue-51602.rs:12:10\n    |\n LL |     if i in 1..10 {"}, {"sha": "a5d30b8561ab15daecbd48ad804d85f577aeaa54", "filename": "src/test/ui/issues/issue-39848.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fissues%2Fissue-39848.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fissues%2Fissue-39848.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-39848.stderr?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -7,7 +7,7 @@ LL |         if $tgt.has_$field() {}\n    |         this `if` statement has a condition, but no block\n ...\n LL |     get_opt!(bar, foo);\n-   |                   ^^^\n+   |                   ^^^ expected `{`\n \n error: aborting due to previous error\n "}, {"sha": "1482b204d64ebf57ea5ea80a971f8aa46d247438", "filename": "src/test/ui/issues/issue-46186.stderr", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fissues%2Fissue-46186.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fissues%2Fissue-46186.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46186.stderr?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -2,9 +2,7 @@ error: expected item, found `;`\n   --> $DIR/issue-46186.rs:13:2\n    |\n LL | }; //~ ERROR expected item, found `;`\n-   |  ^ help: consider removing this semicolon\n-   |\n-   = help: braced struct declarations are not followed by a semicolon\n+   |  ^ expected item\n \n error: aborting due to previous error\n "}, {"sha": "5fc3528e74b7404a382bc05e27da60baa8d997e7", "filename": "src/test/ui/issues/issue-49040.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fissues%2Fissue-49040.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fissues%2Fissue-49040.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-49040.stderr?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -2,7 +2,7 @@ error: expected item, found `;`\n   --> $DIR/issue-49040.rs:11:28\n    |\n LL | #![allow(unused_variables)]; //~ ERROR expected item, found `;`\n-   |                            ^ help: consider removing this semicolon\n+   |                            ^ expected item\n \n error: aborting due to previous error\n "}, {"sha": "756648f5658e49bc62a265fcbeea8619780202c6", "filename": "src/test/ui/label/label_break_value_illegal_uses.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -10,6 +10,7 @@ error: expected `{`, found `'b`\n LL |     if true 'b: {} //~ ERROR expected `{`, found `'b`\n    |     --      ^^----\n    |     |       |\n+   |     |       expected `{`\n    |     |       help: try placing this code inside a block: `{ 'b: { } }`\n    |     this `if` statement has a condition, but no block\n \n@@ -19,6 +20,7 @@ error: expected `{`, found `'b`\n LL |     if true {} else 'b: {} //~ ERROR expected `{`, found `'b`\n    |                     ^^----\n    |                     |\n+   |                     expected `{`\n    |                     help: try placing this code inside a block: `{ 'b: { } }`\n \n error: expected one of `.`, `?`, `{`, or an operator, found `'b`"}, {"sha": "dbbfd10b79526994ce21b78d25948a33a324040d", "filename": "src/test/ui/missing/missing-block-hint.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fmissing%2Fmissing-block-hint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fmissing%2Fmissing-block-hint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-block-hint.stderr?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -2,7 +2,7 @@ error: expected `{`, found `=>`\n   --> $DIR/missing-block-hint.rs:13:18\n    |\n LL |         if (foo) => {} //~ ERROR expected `{`, found `=>`\n-   |         --       ^^\n+   |         --       ^^ expected `{`\n    |         |\n    |         this `if` statement has a condition, but no block\n \n@@ -14,6 +14,7 @@ LL |         if (foo)\n LL |             bar; //~ ERROR expected `{`, found `bar`\n    |             ^^^-\n    |             |\n+   |             expected `{`\n    |             help: try placing this code inside a block: `{ bar; }`\n \n error: aborting due to 2 previous errors"}, {"sha": "b4427565a8649162336462c800f6f2994bfff2bb", "filename": "src/test/ui/missing/missing-semicolon-warning.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing%2Fmissing-semicolon-warning.stderr?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -1,4 +1,4 @@\n-warning: expected `;`, found `let`\n+warning: expected `;`, found keyword `let`\n   --> $DIR/missing-semicolon-warning.rs:16:12\n    |\n LL |         $( let x = $e1 )*; //~ WARN expected `;`"}, {"sha": "a321d0e29b276431771a36f138456828045cf3c3", "filename": "src/test/ui/parser/doc-before-identifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fdoc-before-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fdoc-before-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-identifier.rs?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -12,7 +12,7 @@\n \n fn /// document\n foo() {}\n-//~^^ ERROR expected identifier, found `/// document`\n+//~^^ ERROR expected identifier, found doc comment `/// document`\n \n fn main() {\n     foo();"}, {"sha": "73b169ce8e58518f960a3189f266ed4d3af7999b", "filename": "src/test/ui/parser/doc-before-identifier.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fdoc-before-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fdoc-before-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-before-identifier.stderr?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -1,8 +1,8 @@\n-error: expected identifier, found `/// document`\n+error: expected identifier, found doc comment `/// document`\n   --> $DIR/doc-before-identifier.rs:13:4\n    |\n LL | fn /// document\n-   |    ^^^^^^^^^^^^ expected identifier\n+   |    ^^^^^^^^^^^^ expected identifier, found doc comment\n \n error: aborting due to previous error\n "}, {"sha": "c85fe25a7d0d1999e30328bfff25cb21d0221593", "filename": "src/test/ui/parser/doc-comment-in-if-statement.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.rs?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    if true /*!*/ {}\n+    //~^ ERROR expected `{`, found doc comment `/*!*/`\n+}"}, {"sha": "6bcb77385d7d5404696111b3a353fc00245ba756", "filename": "src/test/ui/parser/doc-comment-in-if-statement.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fdoc-comment-in-if-statement.stderr?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -0,0 +1,10 @@\n+error: expected `{`, found doc comment `/*!*/`\n+  --> $DIR/doc-comment-in-if-statement.rs:2:13\n+   |\n+LL |     if true /*!*/ {}\n+   |     --      ^^^^^ expected `{`\n+   |     |\n+   |     this `if` statement has a condition, but no block\n+\n+error: aborting due to previous error\n+"}, {"sha": "f00bfcb45b17f39b7aa87a8adcb64c0724c143b6", "filename": "src/test/ui/parser/import-from-rename.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fimport-from-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fimport-from-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimport-from-rename.stderr?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -1,4 +1,4 @@\n-error: expected `;`, found `as`\n+error: expected `;`, found keyword `as`\n   --> $DIR/import-from-rename.rs:15:16\n    |\n LL | use foo::{bar} as baz;"}, {"sha": "0b124a32df32c1116f8060809ef41d1d0196d3bd", "filename": "src/test/ui/parser/import-glob-rename.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fimport-glob-rename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fimport-glob-rename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fimport-glob-rename.stderr?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -1,4 +1,4 @@\n-error: expected `;`, found `as`\n+error: expected `;`, found keyword `as`\n   --> $DIR/import-glob-rename.rs:15:12\n    |\n LL | use foo::* as baz;"}, {"sha": "749cb7fcc0b1970d7ea25be23b74b9cb57eeaca2", "filename": "src/test/ui/parser/issue-17904-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fissue-17904-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fissue-17904-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17904-2.rs?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -10,6 +10,6 @@\n \n // compile-flags: -Z parse-only -Z continue-parse-after-error\n \n-struct Bar<T> { x: T } where T: Copy //~ ERROR expected item, found `where`\n+struct Bar<T> { x: T } where T: Copy //~ ERROR expected item, found keyword `where`\n \n fn main() {}"}, {"sha": "ff9e1215f103ed55ec7ea12dc55313d4b01f400e", "filename": "src/test/ui/parser/issue-17904-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fissue-17904-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fissue-17904-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-17904-2.stderr?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -1,7 +1,7 @@\n-error: expected item, found `where`\n+error: expected item, found keyword `where`\n   --> $DIR/issue-17904-2.rs:13:24\n    |\n-LL | struct Bar<T> { x: T } where T: Copy //~ ERROR expected item, found `where`\n+LL | struct Bar<T> { x: T } where T: Copy //~ ERROR expected item, found keyword `where`\n    |                        ^^^^^ expected item\n \n error: aborting due to previous error"}, {"sha": "533b947b79ae9914d2b1d2e334eb97ff57b6668d", "filename": "src/test/ui/parser/unsized.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Funsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Funsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funsized.rs?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -12,7 +12,8 @@\n \n // Test syntax checks for `type` keyword.\n \n-struct S1 for type; //~ ERROR expected `where`, `{`, `(`, or `;` after struct name, found `for`\n+struct S1 for type;\n+//~^ ERROR expected `where`, `{`, `(`, or `;` after struct name, found keyword `for`\n \n pub fn main() {\n }"}, {"sha": "cc35c2035eae88aa8a700baf24b6cad928b2e9c7", "filename": "src/test/ui/parser/unsized.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Funsized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Funsized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Funsized.stderr?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -1,7 +1,7 @@\n-error: expected `where`, `{`, `(`, or `;` after struct name, found `for`\n+error: expected `where`, `{`, `(`, or `;` after struct name, found keyword `for`\n   --> $DIR/unsized.rs:15:11\n    |\n-LL | struct S1 for type; //~ ERROR expected `where`, `{`, `(`, or `;` after struct name, found `for`\n+LL | struct S1 for type;\n    |           ^^^ expected `where`, `{`, `(`, or `;` after struct name\n \n error: aborting due to previous error"}, {"sha": "b7426140d8ac5c142fdc99b4b0b5255029891a57", "filename": "src/test/ui/parser/virtual-structs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fvirtual-structs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fvirtual-structs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvirtual-structs.rs?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -12,7 +12,8 @@\n \n // Test diagnostics for the removed struct inheritance feature.\n \n-virtual struct SuperStruct { //~ ERROR expected item, found `virtual`\n+virtual struct SuperStruct {\n+//~^ ERROR expected item, found reserved keyword `virtual`\n     f1: isize,\n }\n "}, {"sha": "659c7701c00d688e218b711244168613642cec60", "filename": "src/test/ui/parser/virtual-structs.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fvirtual-structs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e22e0c3bc54825f096111bc86ea6e4a6b076ba0/src%2Ftest%2Fui%2Fparser%2Fvirtual-structs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fvirtual-structs.stderr?ref=3e22e0c3bc54825f096111bc86ea6e4a6b076ba0", "patch": "@@ -1,7 +1,7 @@\n-error: expected item, found `virtual`\n+error: expected item, found reserved keyword `virtual`\n   --> $DIR/virtual-structs.rs:15:1\n    |\n-LL | virtual struct SuperStruct { //~ ERROR expected item, found `virtual`\n+LL | virtual struct SuperStruct {\n    | ^^^^^^^ expected item\n \n error: aborting due to previous error"}]}