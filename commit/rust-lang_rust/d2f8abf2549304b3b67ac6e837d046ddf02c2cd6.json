{"sha": "d2f8abf2549304b3b67ac6e837d046ddf02c2cd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyZjhhYmYyNTQ5MzA0YjNiNjdhYzZlODM3ZDA0NmRkZjAyYzJjZDY=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-06T22:28:31Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2017-02-08T09:10:06Z"}, "message": "Add more test for rustdoc --test", "tree": {"sha": "ac4d5225b0359c6d60977fc9f1179a0e63301b1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac4d5225b0359c6d60977fc9f1179a0e63301b1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2f8abf2549304b3b67ac6e837d046ddf02c2cd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2f8abf2549304b3b67ac6e837d046ddf02c2cd6", "html_url": "https://github.com/rust-lang/rust/commit/d2f8abf2549304b3b67ac6e837d046ddf02c2cd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2f8abf2549304b3b67ac6e837d046ddf02c2cd6/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0803d4aedc06504cb4cb86f63beb6650ff67a8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0803d4aedc06504cb4cb86f63beb6650ff67a8e", "html_url": "https://github.com/rust-lang/rust/commit/b0803d4aedc06504cb4cb86f63beb6650ff67a8e"}], "stats": {"total": 104, "additions": 79, "deletions": 25}, "files": [{"sha": "51daa8075262228632600e6a17ce339680ac201f", "filename": "src/test/rustdoc/test_option_check/bar.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d2f8abf2549304b3b67ac6e837d046ddf02c2cd6/src%2Ftest%2Frustdoc%2Ftest_option_check%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f8abf2549304b3b67ac6e837d046ddf02c2cd6/src%2Ftest%2Frustdoc%2Ftest_option_check%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftest_option_check%2Fbar.rs?ref=d2f8abf2549304b3b67ac6e837d046ddf02c2cd6", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+// check-test-line-numbers-match\n+\n+/// This looks like another awesome test!\n+///\n+/// ```\n+/// println!(\"foo?\");\n+/// ```\n+pub fn foooo() {}"}, {"sha": "a9578c5f434a23e0ecb291cc0d989699cadd7be2", "filename": "src/test/rustdoc/test_option_check/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d2f8abf2549304b3b67ac6e837d046ddf02c2cd6/src%2Ftest%2Frustdoc%2Ftest_option_check%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f8abf2549304b3b67ac6e837d046ddf02c2cd6/src%2Ftest%2Frustdoc%2Ftest_option_check%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Ftest_option_check%2Ftest.rs?ref=d2f8abf2549304b3b67ac6e837d046ddf02c2cd6", "patch": "@@ -11,6 +11,8 @@\n // compile-flags: --test\n // check-test-line-numbers-match\n \n+pub mod bar;\n+\n /// This is a Foo;\n ///\n /// ```"}, {"sha": "4e527661df72e6872ef02deb532420ef84917ec7", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 58, "deletions": 25, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/d2f8abf2549304b3b67ac6e837d046ddf02c2cd6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2f8abf2549304b3b67ac6e837d046ddf02c2cd6/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=d2f8abf2549304b3b67ac6e837d046ddf02c2cd6", "patch": "@@ -30,6 +30,7 @@ use std::io::{self, BufReader};\n use std::path::{Path, PathBuf};\n use std::process::{Command, Output, ExitStatus};\n use std::str;\n+use std::collections::HashMap;\n \n use extract_gdb_version;\n \n@@ -1902,17 +1903,28 @@ actual:\\n\\\n         }\n     }\n \n-    fn check_rustdoc_test_option(&self, res: ProcRes) {\n-        let mut file = fs::File::open(&self.testpaths.file)\n+    fn get_lines<P: AsRef<Path>>(&self, path: &P,\n+                                 mut other_files: Option<&mut Vec<String>>) -> Vec<usize> {\n+        let mut file = fs::File::open(path)\n                                 .expect(\"markdown_test_output_check_entry File::open failed\");\n         let mut content = String::new();\n         file.read_to_string(&mut content)\n             .expect(\"markdown_test_output_check_entry read_to_string failed\");\n         let mut ignore = false;\n-        let mut v: Vec<usize> =\n-            content.lines()\n-                   .enumerate()\n-                   .filter_map(|(line_nb, line)| {\n+        content.lines()\n+               .enumerate()\n+               .filter_map(|(line_nb, line)| {\n+                   if (line.trim_left().starts_with(\"pub mod \") ||\n+                       line.trim_left().starts_with(\"mod \")) &&\n+                      line.ends_with(\";\") {\n+                       if let Some(ref mut other_files) = other_files {\n+                           other_files.push(line.rsplit(\"mod \")\n+                                      .next()\n+                                      .unwrap()\n+                                      .replace(\";\", \"\"));\n+                       }\n+                       None\n+                   } else {\n                        let sline = line.split(\"///\").last().unwrap_or(\"\");\n                        let line = sline.trim_left();\n                        if line.starts_with(\"```\") {\n@@ -1926,36 +1938,57 @@ actual:\\n\\\n                        } else {\n                            None\n                        }\n-                   })\n-                   .collect();\n+                   }\n+               })\n+               .collect()\n+    }\n+\n+    fn check_rustdoc_test_option(&self, res: ProcRes) {\n+        let mut other_files = Vec::new();\n+        let mut files: HashMap<String, Vec<usize>> = HashMap::new();\n+        files.insert(self.testpaths.file.to_str().unwrap().to_owned(),\n+                     self.get_lines(&self.testpaths.file, Some(&mut other_files)));\n+        for other_file in other_files {\n+            let mut path = self.testpaths.file.clone();\n+            path.set_file_name(&format!(\"{}.rs\", other_file));\n+            files.insert(path.to_str().unwrap().to_owned(), self.get_lines(&path, None));\n+        }\n \n         let mut tested = 0;\n         for _ in res.stdout.split(\"\\n\")\n                            .filter(|s| s.starts_with(\"test \"))\n                            .inspect(|s| {\n                                let tmp: Vec<&str> = s.split(\" - line \").collect();\n                                if tmp.len() == 2 {\n-                                   tested += 1;\n-                                   let line = tmp[1].split(\" ...\")\n-                                                    .next()\n-                                                    .unwrap_or(\"0\")\n-                                                    .parse()\n-                                                    .unwrap_or(0);\n-                                   if let Ok(pos) = v.binary_search(&line) {\n-                                       v.remove(pos);\n-                                   } else {\n-                                       self.fatal_proc_rec(\n-                                           &format!(\"Not found doc test: \\\"{}\\\" in {:?}\", s, v),\n-                                           &res);\n+                                   let path = tmp[0].rsplit(\"test \").next().unwrap();\n+                                   if let Some(ref mut v) = files.get_mut(path) {\n+                                       tested += 1;\n+                                       let line = tmp[1].split(\" ...\")\n+                                                        .next()\n+                                                        .unwrap_or(\"0\")\n+                                                        .parse()\n+                                                        .unwrap_or(0);\n+                                       if let Ok(pos) = v.binary_search(&line) {\n+                                           v.remove(pos);\n+                                       } else {\n+                                           self.fatal_proc_rec(\n+                                               &format!(\"Not found doc test: \\\"{}\\\" in \\\"{}\\\":{:?}\",\n+                                                        s, path, v),\n+                                               &res);\n+                                       }\n                                    }\n                                }\n                            }) {}\n         if tested == 0 {\n-            self.fatal_proc_rec(\"No test has been found\", &res);\n-        } else if v.len() != 0 {\n-            self.fatal_proc_rec(&format!(\"Not found test at line{} {:?}\",\n-                                         if v.len() > 1 { \"s\" } else { \"\" }, v),\n-                                &res);\n+            self.fatal_proc_rec(&format!(\"No test has been found... {:?}\", files), &res);\n+        } else {\n+            for (entry, v) in &files {\n+                if v.len() != 0 {\n+                    self.fatal_proc_rec(&format!(\"Not found test at line{} \\\"{}\\\":{:?}\",\n+                                                 if v.len() > 1 { \"s\" } else { \"\" }, entry, v),\n+                                        &res);\n+                }\n+            }\n         }\n     }\n "}]}