{"sha": "93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzZmZiZjgwYzYzMmE3ZDM4ZmM4YmJkZjYzNTdiZmQyNmE5NmEzNWE=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-23T12:22:29Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-23T13:01:50Z"}, "message": "Make let statements kind of work", "tree": {"sha": "59c9f26c70ffa45f599b711cd2b6233e865ccd8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59c9f26c70ffa45f599b711cd2b6233e865ccd8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a", "html_url": "https://github.com/rust-lang/rust/commit/93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d609370900402db84beb3d7e28487256c6042c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d609370900402db84beb3d7e28487256c6042c2", "html_url": "https://github.com/rust-lang/rust/commit/5d609370900402db84beb3d7e28487256c6042c2"}], "stats": {"total": 61, "additions": 53, "deletions": 8}, "files": [{"sha": "615a1caed438518bea77dc66a8628a0291bc1065", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 36, "deletions": 8, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a", "patch": "@@ -243,8 +243,23 @@ impl InferenceContext {\n         self.type_for.insert(LocalSyntaxPtr::new(node), ty);\n     }\n \n-    fn unify(&mut self, _ty1: &Ty, _ty2: &Ty) -> bool {\n-        unimplemented!()\n+    fn unify(&mut self, ty1: &Ty, ty2: &Ty) -> Option<Ty> {\n+        if *ty1 == Ty::Unknown {\n+            return Some(ty2.clone());\n+        }\n+        if *ty2 == Ty::Unknown {\n+            return Some(ty1.clone());\n+        }\n+        if ty1 == ty2 {\n+            return Some(ty1.clone());\n+        }\n+        // TODO implement actual unification\n+        return None;\n+    }\n+\n+    fn unify_with_coercion(&mut self, ty1: &Ty, ty2: &Ty) -> Option<Ty> {\n+        // TODO implement coercion\n+        self.unify(ty1, ty2)\n     }\n \n     fn infer_path_expr(&mut self, expr: ast::PathExpr) -> Option<Ty> {\n@@ -280,9 +295,8 @@ impl InferenceContext {\n                 } else {\n                     Ty::Unknown\n                 };\n-                if self.unify(&if_ty, &else_ty) {\n-                    // TODO actually, need to take the 'more specific' type (not unknown, never, ...)\n-                    if_ty\n+                if let Some(ty) = self.unify(&if_ty, &else_ty) {\n+                    ty\n                 } else {\n                     // TODO report diagnostic\n                     Ty::Unknown\n@@ -455,9 +469,23 @@ impl InferenceContext {\n         for stmt in node.statements() {\n             match stmt {\n                 ast::Stmt::LetStmt(stmt) => {\n-                    if let Some(expr) = stmt.initializer() {\n-                        self.infer_expr(expr);\n-                    }\n+                    let decl_ty = if let Some(type_ref) = stmt.type_ref() {\n+                        Ty::new(type_ref)\n+                    } else {\n+                        Ty::Unknown\n+                    };\n+                    let ty = if let Some(expr) = stmt.initializer() {\n+                        // TODO pass expectation\n+                        let expr_ty = self.infer_expr(expr);\n+                        self.unify_with_coercion(&expr_ty, &decl_ty)\n+                            .unwrap_or(decl_ty)\n+                    } else {\n+                        decl_ty\n+                    };\n+\n+                    if let Some(pat) = stmt.pat() {\n+                        self.write_ty(pat.syntax(), ty);\n+                    };\n                 }\n                 ast::Stmt::ExprStmt(expr_stmt) => {\n                     if let Some(expr) = expr_stmt.expr() {"}, {"sha": "5641da75b708932a58a742d112eaee82a75a4ba9", "filename": "crates/ra_hir/src/ty/tests/data/0002_let.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0002_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0002_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0002_let.rs?ref=93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a", "patch": "@@ -0,0 +1,5 @@\n+fn test() {\n+    let a = 1isize;\n+    let b: usize = 1;\n+    let c = b;\n+}"}, {"sha": "5f515ee594c95e2ec1b8fb2ed8da2dcd4e9361ad", "filename": "crates/ra_hir/src/ty/tests/data/0002_let.txt", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0002_let.txt", "raw_url": "https://github.com/rust-lang/rust/raw/93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0002_let.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests%2Fdata%2F0002_let.txt?ref=93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a", "patch": "@@ -0,0 +1,7 @@\n+[51; 52) '1': [unknown]\n+[10; 70) '{     ...= b; }': ()\n+[24; 30) '1isize': [unknown]\n+[20; 21) 'a': [unknown]\n+[62; 63) 'c': usize\n+[66; 67) 'b': usize\n+[40; 41) 'b': usize"}, {"sha": "b15c4ef6f0773266db32543fbe03fde06632187c", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a", "patch": "@@ -1561,6 +1561,10 @@ impl<'a> LetStmt<'a> {\n         super::child_opt(self)\n     }\n \n+    pub fn type_ref(self) -> Option<TypeRef<'a>> {\n+        super::child_opt(self)\n+    }\n+\n     pub fn initializer(self) -> Option<Expr<'a>> {\n         super::child_opt(self)\n     }"}, {"sha": "8dca493ee3a1779f1f9a789dda2aed5914aa3b32", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=93ffbf80c632a7d38fc8bbdf6357bfd26a96a35a", "patch": "@@ -499,6 +499,7 @@ Grammar(\n         ),\n         \"LetStmt\": ( options: [\n             [\"pat\", \"Pat\"],\n+            [\"type_ref\", \"TypeRef\"],\n             [\"initializer\", \"Expr\"],\n         ]),\n         \"Condition\": ("}]}