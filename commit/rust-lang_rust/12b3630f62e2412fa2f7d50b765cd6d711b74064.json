{"sha": "12b3630f62e2412fa2f7d50b765cd6d711b74064", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYjM2MzBmNjJlMjQxMmZhMmY3ZDUwYjc2NWNkNmQ3MTFiNzQwNjQ=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2017-12-27T21:56:06Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-01-20T10:09:23Z"}, "message": "Rename Box::into_non_null_raw to Box::into_raw_non_null", "tree": {"sha": "90cc1f5833122368b840ea4b0b7a52bfb4c290e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/90cc1f5833122368b840ea4b0b7a52bfb4c290e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12b3630f62e2412fa2f7d50b765cd6d711b74064", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12b3630f62e2412fa2f7d50b765cd6d711b74064", "html_url": "https://github.com/rust-lang/rust/commit/12b3630f62e2412fa2f7d50b765cd6d711b74064", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12b3630f62e2412fa2f7d50b765cd6d711b74064/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ef5e549c3cec025c6b7c37931bddd68f2fcab4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ef5e549c3cec025c6b7c37931bddd68f2fcab4a", "html_url": "https://github.com/rust-lang/rust/commit/8ef5e549c3cec025c6b7c37931bddd68f2fcab4a"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "6a77bf64baee5f9ffe5d9670ad5eab3405abade5", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12b3630f62e2412fa2f7d50b765cd6d711b74064/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b3630f62e2412fa2f7d50b765cd6d711b74064/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=12b3630f62e2412fa2f7d50b765cd6d711b74064", "patch": "@@ -286,7 +286,7 @@ impl<T> Arc<T> {\n             weak: atomic::AtomicUsize::new(1),\n             data,\n         };\n-        Arc { ptr: Box::into_non_null_raw(x), phantom: PhantomData }\n+        Arc { ptr: Box::into_raw_non_null(x), phantom: PhantomData }\n     }\n \n     /// Returns the contained value, if the `Arc` has exactly one strong reference.\n@@ -991,7 +991,7 @@ impl<T> Weak<T> {\n     pub fn new() -> Weak<T> {\n         unsafe {\n             Weak {\n-                ptr: Box::into_non_null_raw(box ArcInner {\n+                ptr: Box::into_raw_non_null(box ArcInner {\n                     strong: atomic::AtomicUsize::new(0),\n                     weak: atomic::AtomicUsize::new(1),\n                     data: uninitialized(),"}, {"sha": "78a4b337711bda58fdcad7383d337e0e78ded3c9", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/12b3630f62e2412fa2f7d50b765cd6d711b74064/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b3630f62e2412fa2f7d50b765cd6d711b74064/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=12b3630f62e2412fa2f7d50b765cd6d711b74064", "patch": "@@ -295,7 +295,7 @@ impl<T: ?Sized> Box<T> {\n     #[stable(feature = \"box_raw\", since = \"1.4.0\")]\n     #[inline]\n     pub fn into_raw(b: Box<T>) -> *mut T {\n-        Box::into_non_null_raw(b).as_ptr()\n+        Box::into_raw_non_null(b).as_ptr()\n     }\n \n     /// Consumes the `Box`, returning the wrapped pointer as `NonNull<T>`.\n@@ -308,8 +308,8 @@ impl<T: ?Sized> Box<T> {\n     /// function.\n     ///\n     /// Note: this is an associated function, which means that you have\n-    /// to call it as `Box::into_non_null_raw(b)`\n-    /// instead of `b.into_non_null_raw()`. This\n+    /// to call it as `Box::into_raw_non_null(b)`\n+    /// instead of `b.into_raw_non_null()`. This\n     /// is so that there is no conflict with a method on the inner type.\n     ///\n     /// [`Box::from_raw`]: struct.Box.html#method.from_raw\n@@ -319,16 +319,16 @@ impl<T: ?Sized> Box<T> {\n     /// ```\n     /// fn main() {\n     ///     let x = Box::new(5);\n-    ///     let ptr = Box::into_non_null_raw(x);\n+    ///     let ptr = Box::into_raw_non_null(x);\n     /// }\n     /// ```\n     #[stable(feature = \"nonnull\", since = \"1.24.0\")]\n     #[inline]\n-    pub fn into_non_null_raw(b: Box<T>) -> NonNull<T> {\n+    pub fn into_raw_non_null(b: Box<T>) -> NonNull<T> {\n         Box::into_unique(b).into()\n     }\n \n-    #[unstable(feature = \"ptr_internals\", issue = \"0\", reason = \"use into_non_null_raw instead\")]\n+    #[unstable(feature = \"ptr_internals\", issue = \"0\", reason = \"use into_raw_non_null instead\")]\n     #[inline]\n     pub fn into_unique(b: Box<T>) -> Unique<T> {\n         let unique = b.0;"}, {"sha": "3cc810a055f3efc3eeee5b7e60752847964f75e9", "filename": "src/liballoc/linked_list.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/12b3630f62e2412fa2f7d50b765cd6d711b74064/src%2Fliballoc%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b3630f62e2412fa2f7d50b765cd6d711b74064/src%2Fliballoc%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flinked_list.rs?ref=12b3630f62e2412fa2f7d50b765cd6d711b74064", "patch": "@@ -157,7 +157,7 @@ impl<T> LinkedList<T> {\n         unsafe {\n             node.next = self.head;\n             node.prev = None;\n-            let node = Some(Box::into_non_null_raw(node));\n+            let node = Some(Box::into_raw_non_null(node));\n \n             match self.head {\n                 None => self.tail = node,\n@@ -192,7 +192,7 @@ impl<T> LinkedList<T> {\n         unsafe {\n             node.next = None;\n             node.prev = self.tail;\n-            let node = Some(Box::into_non_null_raw(node));\n+            let node = Some(Box::into_raw_non_null(node));\n \n             match self.tail {\n                 None => self.head = node,\n@@ -986,7 +986,7 @@ impl<'a, T> IterMut<'a, T> {\n                     Some(prev) => prev,\n                 };\n \n-                let node = Some(Box::into_non_null_raw(box Node {\n+                let node = Some(Box::into_raw_non_null(box Node {\n                     next: Some(head),\n                     prev: Some(prev),\n                     element,"}, {"sha": "1fa5d34cb5787147091617c92c1499a0e1506cf5", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/12b3630f62e2412fa2f7d50b765cd6d711b74064/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12b3630f62e2412fa2f7d50b765cd6d711b74064/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=12b3630f62e2412fa2f7d50b765cd6d711b74064", "patch": "@@ -311,7 +311,7 @@ impl<T> Rc<T> {\n             // pointers, which ensures that the weak destructor never frees\n             // the allocation while the strong destructor is running, even\n             // if the weak pointer is stored inside the strong one.\n-            ptr: Box::into_non_null_raw(box RcBox {\n+            ptr: Box::into_raw_non_null(box RcBox {\n                 strong: Cell::new(1),\n                 weak: Cell::new(1),\n                 value,\n@@ -1190,7 +1190,7 @@ impl<T> Weak<T> {\n     pub fn new() -> Weak<T> {\n         unsafe {\n             Weak {\n-                ptr: Box::into_non_null_raw(box RcBox {\n+                ptr: Box::into_raw_non_null(box RcBox {\n                     strong: Cell::new(0),\n                     weak: Cell::new(1),\n                     value: uninitialized(),"}]}