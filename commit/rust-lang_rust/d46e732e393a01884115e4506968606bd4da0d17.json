{"sha": "d46e732e393a01884115e4506968606bd4da0d17", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0NmU3MzJlMzkzYTAxODg0MTE1ZTQ1MDY5Njg2MDZiZDRkYTBkMTc=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-05-20T22:40:32Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-05-23T16:51:52Z"}, "message": "Update crate_variances and inferred_outlives_crate", "tree": {"sha": "c795e4b89cf9c3b37dc2edb6a5519981ad933eb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c795e4b89cf9c3b37dc2edb6a5519981ad933eb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d46e732e393a01884115e4506968606bd4da0d17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d46e732e393a01884115e4506968606bd4da0d17", "html_url": "https://github.com/rust-lang/rust/commit/d46e732e393a01884115e4506968606bd4da0d17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d46e732e393a01884115e4506968606bd4da0d17/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a58999c19e58d21734622d3e1b4b2de4c0bc7a5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b", "html_url": "https://github.com/rust-lang/rust/commit/a58999c19e58d21734622d3e1b4b2de4c0bc7a5b"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "c179b05683d1c91258bf53b335f9cc94d8e305c5", "filename": "src/librustc/arena.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d46e732e393a01884115e4506968606bd4da0d17/src%2Flibrustc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46e732e393a01884115e4506968606bd4da0d17/src%2Flibrustc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Farena.rs?ref=d46e732e393a01884115e4506968606bd4da0d17", "patch": "@@ -99,6 +99,8 @@ macro_rules! arena_types {\n             [few] reachable_non_generics: rustc::util::nodemap::DefIdMap<\n                 rustc::middle::exported_symbols::SymbolExportLevel\n             >,\n+            [few] crate_variances: rustc::ty::CrateVariancesMap<'tcx>,\n+            [few] inferred_outlives_crate: rustc::ty::CratePredicatesMap<'tcx>,\n         ], $tcx);\n     )\n }"}, {"sha": "c03cd7e268ef5ceed3e20e678624516bf12ed3fc", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d46e732e393a01884115e4506968606bd4da0d17/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46e732e393a01884115e4506968606bd4da0d17/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=d46e732e393a01884115e4506968606bd4da0d17", "patch": "@@ -244,7 +244,7 @@ rustc_queries! {\n         query static_mutability(_: DefId) -> Option<hir::Mutability> {}\n \n         /// Gets a map with the variance of every item; use `item_variance` instead.\n-        query crate_variances(_: CrateNum) -> Lrc<ty::CrateVariancesMap<'tcx>> {\n+        query crate_variances(_: CrateNum) -> &'tcx ty::CrateVariancesMap<'tcx> {\n             desc { \"computing the variances for items in this crate\" }\n         }\n \n@@ -255,7 +255,7 @@ rustc_queries! {\n     TypeChecking {\n         /// Maps from thee `DefId` of a type to its (inferred) outlives.\n         query inferred_outlives_crate(_: CrateNum)\n-            -> Lrc<ty::CratePredicatesMap<'tcx>> {\n+            -> &'tcx ty::CratePredicatesMap<'tcx> {\n             desc { \"computing the inferred outlives predicates for items in this crate\" }\n         }\n     }"}, {"sha": "57787a75e4aefd683a7a6320aac19899215b4756", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d46e732e393a01884115e4506968606bd4da0d17/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46e732e393a01884115e4506968606bd4da0d17/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=d46e732e393a01884115e4506968606bd4da0d17", "patch": "@@ -4,7 +4,6 @@ use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::ty::query::Providers;\n use rustc::ty::subst::UnpackedKind;\n use rustc::ty::{self, CratePredicatesMap, TyCtxt};\n-use rustc_data_structures::sync::Lrc;\n use syntax::symbol::sym;\n \n mod explicit;\n@@ -74,7 +73,7 @@ fn inferred_outlives_of<'a, 'tcx>(\n fn inferred_outlives_crate<'tcx>(\n     tcx: TyCtxt<'_, 'tcx, 'tcx>,\n     crate_num: CrateNum,\n-) -> Lrc<CratePredicatesMap<'tcx>> {\n+) -> &'tcx CratePredicatesMap<'tcx> {\n     assert_eq!(crate_num, LOCAL_CRATE);\n \n     // Compute a map from each struct/enum/union S to the **explicit**\n@@ -120,7 +119,7 @@ fn inferred_outlives_crate<'tcx>(\n             (def_id, &*predicates)\n         }).collect();\n \n-    Lrc::new(ty::CratePredicatesMap {\n+    tcx.arena.alloc(ty::CratePredicatesMap {\n         predicates,\n     })\n }"}, {"sha": "47c4a9b39c865e024dc91be4c9984783f85ec1db", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d46e732e393a01884115e4506968606bd4da0d17/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d46e732e393a01884115e4506968606bd4da0d17/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=d46e732e393a01884115e4506968606bd4da0d17", "patch": "@@ -9,7 +9,6 @@ use hir::Node;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n use rustc::ty::{self, CrateVariancesMap, TyCtxt};\n use rustc::ty::query::Providers;\n-use rustc_data_structures::sync::Lrc;\n \n /// Defines the `TermsContext` basically houses an arena where we can\n /// allocate terms.\n@@ -36,12 +35,12 @@ pub fn provide(providers: &mut Providers<'_>) {\n }\n \n fn crate_variances<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum)\n-                             -> Lrc<CrateVariancesMap<'tcx>> {\n+                             -> &'tcx CrateVariancesMap<'tcx> {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     let mut arena = arena::TypedArena::default();\n     let terms_cx = terms::determine_parameters_to_be_inferred(tcx, &mut arena);\n     let constraints_cx = constraints::add_constraints_from_crate(terms_cx);\n-    Lrc::new(solve::solve_constraints(constraints_cx))\n+    tcx.arena.alloc(solve::solve_constraints(constraints_cx))\n }\n \n fn variances_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_def_id: DefId)"}]}