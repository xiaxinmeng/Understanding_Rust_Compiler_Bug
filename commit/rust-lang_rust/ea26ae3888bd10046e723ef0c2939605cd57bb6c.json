{"sha": "ea26ae3888bd10046e723ef0c2939605cd57bb6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhMjZhZTM4ODhiZDEwMDQ2ZTcyM2VmMGMyOTM5NjA1Y2Q1N2JiNmM=", "commit": {"author": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2016-01-19T18:43:29Z"}, "committer": {"name": "Florian Hartwig", "email": "florian.j.hartwig@gmail.com", "date": "2016-01-19T19:08:56Z"}, "message": "Add macro check", "tree": {"sha": "09763de686d30aca64e8f816397f934d77d4475a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09763de686d30aca64e8f816397f934d77d4475a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea26ae3888bd10046e723ef0c2939605cd57bb6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea26ae3888bd10046e723ef0c2939605cd57bb6c", "html_url": "https://github.com/rust-lang/rust/commit/ea26ae3888bd10046e723ef0c2939605cd57bb6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea26ae3888bd10046e723ef0c2939605cd57bb6c/comments", "author": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhartwig", "id": 83271, "node_id": "MDQ6VXNlcjgzMjcx", "avatar_url": "https://avatars.githubusercontent.com/u/83271?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhartwig", "html_url": "https://github.com/fhartwig", "followers_url": "https://api.github.com/users/fhartwig/followers", "following_url": "https://api.github.com/users/fhartwig/following{/other_user}", "gists_url": "https://api.github.com/users/fhartwig/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhartwig/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhartwig/subscriptions", "organizations_url": "https://api.github.com/users/fhartwig/orgs", "repos_url": "https://api.github.com/users/fhartwig/repos", "events_url": "https://api.github.com/users/fhartwig/events{/privacy}", "received_events_url": "https://api.github.com/users/fhartwig/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01eda52cb5c2d3a787b2c6e81f3c699370525387", "url": "https://api.github.com/repos/rust-lang/rust/commits/01eda52cb5c2d3a787b2c6e81f3c699370525387", "html_url": "https://github.com/rust-lang/rust/commit/01eda52cb5c2d3a787b2c6e81f3c699370525387"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "16ee08b1894936fba4671690cad29cceffbc900d", "filename": "src/strings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ea26ae3888bd10046e723ef0c2939605cd57bb6c/src%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea26ae3888bd10046e723ef0c2939605cd57bb6c/src%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstrings.rs?ref=ea26ae3888bd10046e723ef0c2939605cd57bb6c", "patch": "@@ -134,13 +134,13 @@ impl LateLintPass for StringLitAsBytes {\n     fn check_expr(&mut self, cx: &LateContext, e: &Expr) {\n         use std::ascii::AsciiExt;\n         use syntax::ast::Lit_::LitStr;\n-        use utils::snippet;\n+        use utils::{snippet, in_macro};\n \n         if let ExprMethodCall(ref name, _, ref args) = e.node {\n             if name.node.as_str() == \"as_bytes\" {\n                 if let ExprLit(ref lit) = args[0].node {\n                     if let LitStr(ref lit_content, _) = lit.node {\n-                        if lit_content.chars().all(|c| c.is_ascii()) {\n+                        if lit_content.chars().all(|c| c.is_ascii()) && !in_macro(cx, e.span) {\n                             let msg = format!(\"calling `as_bytes()` on a string literal. \\\n                                                Consider using a byte string literal instead: \\\n                                                `b{}`\","}]}