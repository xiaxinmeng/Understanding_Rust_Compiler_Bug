{"sha": "cfb97b3393b5a6a43d81c5edbb8d7867ac1d7bf0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmYjk3YjMzOTNiNWE2YTQzZDgxYzVlZGJiOGQ3ODY3YWMxZDdiZjA=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-04T06:39:43Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-04T06:39:43Z"}, "message": "Begin sketching translation of bind_expr. No captures yet, also crashy.", "tree": {"sha": "91a87865e65419fd2341dfe7f6010d901e4500e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91a87865e65419fd2341dfe7f6010d901e4500e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfb97b3393b5a6a43d81c5edbb8d7867ac1d7bf0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfb97b3393b5a6a43d81c5edbb8d7867ac1d7bf0", "html_url": "https://github.com/rust-lang/rust/commit/cfb97b3393b5a6a43d81c5edbb8d7867ac1d7bf0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfb97b3393b5a6a43d81c5edbb8d7867ac1d7bf0/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1517471fbe45781a39afed6367944491ce8f4b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1517471fbe45781a39afed6367944491ce8f4b1", "html_url": "https://github.com/rust-lang/rust/commit/d1517471fbe45781a39afed6367944491ce8f4b1"}], "stats": {"total": 41, "additions": 40, "deletions": 1}, "files": [{"sha": "24d95d4e2dd1c464f65582a95dbb80f8c9b5eb54", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/cfb97b3393b5a6a43d81c5edbb8d7867ac1d7bf0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfb97b3393b5a6a43d81c5edbb8d7867ac1d7bf0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=cfb97b3393b5a6a43d81c5edbb8d7867ac1d7bf0", "patch": "@@ -193,6 +193,11 @@ fn T_fn(vec[TypeRef] inputs, TypeRef output) -> TypeRef {\n                               False);\n }\n \n+fn T_closure(TypeRef tfn) -> TypeRef {\n+    ret T_struct(vec(tfn,\n+                     T_ptr(T_opaque())));\n+}\n+\n fn T_ptr(TypeRef t) -> TypeRef {\n     ret llvm.LLVMPointerType(t, 0u);\n }\n@@ -1932,12 +1937,42 @@ impure fn trans_args(@block_ctxt cx, option.t[ValueRef] llobj,\n     ret tup(bcx, vs);\n }\n \n+impure fn trans_bind(@block_ctxt cx, @ast.expr f,\n+                     vec[option.t[@ast.expr]] args,\n+                     &ast.ann ann) -> result {\n+    auto f_res = trans_lval(cx, f);\n+    auto bcx = f_res.res.bcx;\n+    auto pair_t = T_closure(node_type(cx.fcx.ccx, ann));\n+    auto pair_v = bcx.build.Alloca(pair_t);\n+    if (f_res.is_mem) {\n+        cx.fcx.ccx.sess.unimpl(\"re-binding existing function\");\n+    } else {\n+        auto code_cell =\n+            bcx.build.GEP(pair_v, vec(C_int(0),\n+                                      C_int(abi.fn_field_code)));\n+        bcx.build.Store(f_res.res.val, code_cell);\n+    }\n+    ret res(bcx, pair_v);\n+}\n+\n impure fn trans_call(@block_ctxt cx, @ast.expr f,\n                      vec[@ast.expr] args, &ast.ann ann) -> result {\n     auto f_res = trans_lval(cx, f);\n     auto faddr = f_res.res.val;\n     if (f_res.is_mem) {\n-        faddr = f_res.res.bcx.build.Load(faddr);\n+        alt (f_res.llobj) {\n+            case (some[ValueRef](_)) {\n+                // It's a vtbl entry.\n+                faddr = f_res.res.bcx.build.Load(faddr);\n+            }\n+            case (none[ValueRef]) {\n+                // It's a closure.\n+                auto bcx = f_res.res.bcx;\n+                faddr = bcx.build.GEP(faddr, vec(C_int(0),\n+                                                 C_int(abi.fn_field_code)));\n+                faddr = bcx.build.Load(faddr);\n+            }\n+        }\n     }\n     auto fn_ty = ty.expr_ty(f);\n     auto ret_ty = ty.ann_to_type(ann);\n@@ -2110,6 +2145,10 @@ impure fn trans_expr(@block_ctxt cx, @ast.expr e) -> result {\n             ret copy_ty(rhs_res.bcx, false, lhs_res.res.val, v, t);\n         }\n \n+        case (ast.expr_bind(?f, ?args, ?ann)) {\n+            ret trans_bind(cx, f, args, ann);\n+        }\n+\n         case (ast.expr_call(?f, ?args, ?ann)) {\n             ret trans_call(cx, f, args, ann);\n         }"}]}