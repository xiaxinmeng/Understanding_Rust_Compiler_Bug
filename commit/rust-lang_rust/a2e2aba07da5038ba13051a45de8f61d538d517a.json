{"sha": "a2e2aba07da5038ba13051a45de8f61d538d517a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyZTJhYmEwN2RhNTAzOGJhMTMwNTFhNDVkZThmNjFkNTM4ZDUxN2E=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-08-31T15:57:41Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2017-09-05T14:37:57Z"}, "message": "rustc: Migrate lang items to a query\n\nThis commit moves the calculation of the `LanguageItems` structure into a\nquery rather than being calculated before the `TyCtxt` exists, with the eventual\nend goal of removing some `CrateStore` methods.", "tree": {"sha": "f498c867dccb87bcf880f89874f998702ac101e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f498c867dccb87bcf880f89874f998702ac101e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a2e2aba07da5038ba13051a45de8f61d538d517a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a2e2aba07da5038ba13051a45de8f61d538d517a", "html_url": "https://github.com/rust-lang/rust/commit/a2e2aba07da5038ba13051a45de8f61d538d517a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a2e2aba07da5038ba13051a45de8f61d538d517a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43ae38019167ef02e53cfc202df8b6be0f79c32d", "url": "https://api.github.com/repos/rust-lang/rust/commits/43ae38019167ef02e53cfc202df8b6be0f79c32d", "html_url": "https://github.com/rust-lang/rust/commit/43ae38019167ef02e53cfc202df8b6be0f79c32d"}], "stats": {"total": 421, "additions": 207, "deletions": 214}, "files": [{"sha": "3d003b96583884033e6b59e4d798c720be714266", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -560,6 +560,7 @@ define_dep_nodes!( <'tcx>\n     [] CrateName(CrateNum),\n     [] ItemChildren(DefId),\n     [] ExternModStmtCnum(HirId),\n+    [] GetLangItems,\n );\n \n trait DepNodeParams<'a, 'gcx: 'tcx + 'a, 'tcx: 'a> : fmt::Debug {"}, {"sha": "d79e90690cac2fe24d07d97589067cd2a8409df5", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -469,7 +469,7 @@ impl<'a, 'tcx> DeadVisitor<'a, 'tcx> {\n     fn should_warn_about_field(&mut self, field: &hir::StructField) -> bool {\n         let field_type = self.tcx.type_of(self.tcx.hir.local_def_id(field.id));\n         let is_marker_field = match field_type.ty_to_def_id() {\n-            Some(def_id) => self.tcx.lang_items.items().iter().any(|item| *item == Some(def_id)),\n+            Some(def_id) => self.tcx.lang_items().items().iter().any(|item| *item == Some(def_id)),\n             _ => false\n         };\n         !field.is_positional()"}, {"sha": "73f78477b0a3f191788b3500c31e432f22c30cd2", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -211,9 +211,9 @@ enum OverloadedCallType {\n impl OverloadedCallType {\n     fn from_trait_id(tcx: TyCtxt, trait_id: DefId) -> OverloadedCallType {\n         for &(maybe_function_trait, overloaded_call_type) in &[\n-            (tcx.lang_items.fn_once_trait(), FnOnceOverloadedCall),\n-            (tcx.lang_items.fn_mut_trait(), FnMutOverloadedCall),\n-            (tcx.lang_items.fn_trait(), FnOverloadedCall)\n+            (tcx.lang_items().fn_once_trait(), FnOnceOverloadedCall),\n+            (tcx.lang_items().fn_mut_trait(), FnMutOverloadedCall),\n+            (tcx.lang_items().fn_trait(), FnOverloadedCall)\n         ] {\n             match maybe_function_trait {\n                 Some(function_trait) if function_trait == trait_id => {"}, {"sha": "d08d7eb48b6231720296f3da2f56eda483b97aac", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 26, "deletions": 50, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -21,10 +21,8 @@\n \n pub use self::LangItem::*;\n \n-use hir::map as hir_map;\n-use session::Session;\n use hir::def_id::DefId;\n-use ty;\n+use ty::{self, TyCtxt};\n use middle::weak_lang_items;\n use util::nodemap::FxHashMap;\n \n@@ -116,9 +114,7 @@ impl LanguageItems {\n struct LanguageItemCollector<'a, 'tcx: 'a> {\n     items: LanguageItems,\n \n-    hir_map: &'a hir_map::Map<'tcx>,\n-\n-    session: &'a Session,\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     item_refs: FxHashMap<&'static str, usize>,\n }\n@@ -129,10 +125,11 @@ impl<'a, 'v, 'tcx> ItemLikeVisitor<'v> for LanguageItemCollector<'a, 'tcx> {\n             let item_index = self.item_refs.get(&*value.as_str()).cloned();\n \n             if let Some(item_index) = item_index {\n-                self.collect_item(item_index, self.hir_map.local_def_id(item.id))\n+                let def_id = self.tcx.hir.local_def_id(item.id);\n+                self.collect_item(item_index, def_id);\n             } else {\n-                let span = self.hir_map.span(item.id);\n-                span_err!(self.session, span, E0522,\n+                let span = self.tcx.hir.span(item.id);\n+                span_err!(self.tcx.sess, span, E0522,\n                           \"definition of an unknown language item: `{}`.\",\n                           value);\n             }\n@@ -149,45 +146,41 @@ impl<'a, 'v, 'tcx> ItemLikeVisitor<'v> for LanguageItemCollector<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> LanguageItemCollector<'a, 'tcx> {\n-    pub fn new(session: &'a Session, hir_map: &'a hir_map::Map<'tcx>)\n-               -> LanguageItemCollector<'a, 'tcx> {\n+    fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> LanguageItemCollector<'a, 'tcx> {\n         let mut item_refs = FxHashMap();\n \n         $( item_refs.insert($name, $variant as usize); )*\n \n         LanguageItemCollector {\n-            session,\n-            hir_map,\n+            tcx,\n             items: LanguageItems::new(),\n             item_refs,\n         }\n     }\n \n-    pub fn collect_item(&mut self, item_index: usize,\n-                        item_def_id: DefId) {\n+    fn collect_item(&mut self, item_index: usize, item_def_id: DefId) {\n         // Check for duplicates.\n         match self.items.items[item_index] {\n             Some(original_def_id) if original_def_id != item_def_id => {\n-                let cstore = &self.session.cstore;\n                 let name = LanguageItems::item_name(item_index);\n-                let mut err = match self.hir_map.span_if_local(item_def_id) {\n+                let mut err = match self.tcx.hir.span_if_local(item_def_id) {\n                     Some(span) => struct_span_err!(\n-                        self.session,\n+                        self.tcx.sess,\n                         span,\n                         E0152,\n                         \"duplicate lang item found: `{}`.\",\n                         name),\n-                    None => self.session.struct_err(&format!(\n+                    None => self.tcx.sess.struct_err(&format!(\n                             \"duplicate lang item in crate `{}`: `{}`.\",\n-                            cstore.crate_name_untracked(item_def_id.krate),\n+                            self.tcx.crate_name(item_def_id.krate),\n                             name)),\n                 };\n-                if let Some(span) = self.hir_map.span_if_local(original_def_id) {\n+                if let Some(span) = self.tcx.hir.span_if_local(original_def_id) {\n                     span_note!(&mut err, span,\n                                \"first defined here.\");\n                 } else {\n                     err.note(&format!(\"first defined in crate `{}`.\",\n-                                      cstore.crate_name_untracked(original_def_id.krate)));\n+                                      self.tcx.crate_name(original_def_id.krate)));\n                 }\n                 err.emit();\n             }\n@@ -199,26 +192,6 @@ impl<'a, 'tcx> LanguageItemCollector<'a, 'tcx> {\n         // Matched.\n         self.items.items[item_index] = Some(item_def_id);\n     }\n-\n-    pub fn collect_local_language_items(&mut self, krate: &hir::Crate) {\n-        krate.visit_all_item_likes(self);\n-    }\n-\n-    pub fn collect_external_language_items(&mut self) {\n-        let cstore = &self.session.cstore;\n-\n-        for cnum in cstore.crates() {\n-            for (index, item_index) in cstore.lang_items(cnum) {\n-                let def_id = DefId { krate: cnum, index: index };\n-                self.collect_item(item_index, def_id);\n-            }\n-        }\n-    }\n-\n-    pub fn collect(&mut self, krate: &hir::Crate) {\n-        self.collect_external_language_items();\n-        self.collect_local_language_items(krate);\n-    }\n }\n \n pub fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> {\n@@ -233,14 +206,17 @@ pub fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> {\n     return None;\n }\n \n-pub fn collect_language_items(session: &Session,\n-                              map: &hir_map::Map)\n-                              -> LanguageItems {\n-    let krate: &hir::Crate = map.krate();\n-    let mut collector = LanguageItemCollector::new(session, map);\n-    collector.collect(krate);\n+pub fn collect<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> LanguageItems {\n+    let mut collector = LanguageItemCollector::new(tcx);\n+    for cnum in tcx.sess.cstore.crates() {\n+        for (index, item_index) in tcx.sess.cstore.lang_items(cnum) {\n+            let def_id = DefId { krate: cnum, index: index };\n+            collector.collect_item(item_index, def_id);\n+        }\n+    }\n+    tcx.hir.krate().visit_all_item_likes(&mut collector);\n     let LanguageItemCollector { mut items, .. } = collector;\n-    weak_lang_items::check_crate(krate, session, &mut items);\n+    weak_lang_items::check_crate(tcx, &mut items);\n     items\n }\n \n@@ -366,7 +342,7 @@ language_item_table! {\n \n impl<'a, 'tcx, 'gcx> ty::TyCtxt<'a, 'tcx, 'gcx> {\n     pub fn require_lang_item(&self, lang_item: LangItem) -> DefId {\n-        self.lang_items.require(lang_item).unwrap_or_else(|msg| {\n+        self.lang_items().require(lang_item).unwrap_or_else(|msg| {\n             self.sess.fatal(&msg)\n         })\n     }"}, {"sha": "33f4d4093fe174ca07ea9f0e64e769b6deedfd90", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -392,7 +392,7 @@ fn reachable_set<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, crate_num: CrateNum) ->\n     for (id, _) in &access_levels.map {\n         reachable_context.worklist.push(*id);\n     }\n-    for item in tcx.lang_items.items().iter() {\n+    for item in tcx.lang_items().items().iter() {\n         if let Some(did) = *item {\n             if let Some(node_id) = tcx.hir.as_local_node_id(did) {\n                 reachable_context.worklist.push(node_id);"}, {"sha": "31114f8e302cf2719808ce13bb6aa3681eaaa6d4", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -11,7 +11,6 @@\n //! Validity checking for weak lang items\n \n use session::config;\n-use session::Session;\n use middle::lang_items;\n \n use rustc_back::PanicStrategy;\n@@ -21,38 +20,38 @@ use syntax_pos::Span;\n use hir::intravisit::{Visitor, NestedVisitorMap};\n use hir::intravisit;\n use hir;\n+use ty::TyCtxt;\n \n use std::collections::HashSet;\n \n macro_rules! weak_lang_items {\n     ($($name:ident, $item:ident, $sym:ident;)*) => (\n \n-struct Context<'a> {\n-    sess: &'a Session,\n+struct Context<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     items: &'a mut lang_items::LanguageItems,\n }\n \n /// Checks the crate for usage of weak lang items, returning a vector of all the\n /// language items required by this crate, but not defined yet.\n-pub fn check_crate(krate: &hir::Crate,\n-                   sess: &Session,\n-                   items: &mut lang_items::LanguageItems) {\n+pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                             items: &mut lang_items::LanguageItems) {\n     // These are never called by user code, they're generated by the compiler.\n     // They will never implicitly be added to the `missing` array unless we do\n     // so here.\n     if items.eh_personality().is_none() {\n         items.missing.push(lang_items::EhPersonalityLangItem);\n     }\n-    if sess.target.target.options.custom_unwind_resume &\n+    if tcx.sess.target.target.options.custom_unwind_resume &\n        items.eh_unwind_resume().is_none() {\n         items.missing.push(lang_items::EhUnwindResumeLangItem);\n     }\n \n     {\n-        let mut cx = Context { sess: sess, items: items };\n-        krate.visit_all_item_likes(&mut cx.as_deep_visitor());\n+        let mut cx = Context { tcx, items };\n+        tcx.hir.krate().visit_all_item_likes(&mut cx.as_deep_visitor());\n     }\n-    verify(sess, items);\n+    verify(tcx, items);\n }\n \n pub fn link_name(attrs: &[ast::Attribute]) -> Option<Symbol> {\n@@ -65,10 +64,11 @@ pub fn link_name(attrs: &[ast::Attribute]) -> Option<Symbol> {\n     })\n }\n \n-fn verify(sess: &Session, items: &lang_items::LanguageItems) {\n+fn verify<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                    items: &lang_items::LanguageItems) {\n     // We only need to check for the presence of weak lang items if we're\n     // emitting something that's not an rlib.\n-    let needs_check = sess.crate_types.borrow().iter().any(|kind| {\n+    let needs_check = tcx.sess.crate_types.borrow().iter().any(|kind| {\n         match *kind {\n             config::CrateTypeDylib |\n             config::CrateTypeProcMacro |\n@@ -83,8 +83,8 @@ fn verify(sess: &Session, items: &lang_items::LanguageItems) {\n     }\n \n     let mut missing = HashSet::new();\n-    for cnum in sess.cstore.crates() {\n-        for item in sess.cstore.missing_lang_items(cnum) {\n+    for cnum in tcx.sess.cstore.crates() {\n+        for item in tcx.sess.cstore.missing_lang_items(cnum) {\n             missing.insert(item);\n         }\n     }\n@@ -93,7 +93,7 @@ fn verify(sess: &Session, items: &lang_items::LanguageItems) {\n     // symbols. Other panic runtimes ensure that the relevant symbols are\n     // available to link things together, but they're never exercised.\n     let mut whitelisted = HashSet::new();\n-    if sess.panic_strategy() != PanicStrategy::Unwind {\n+    if tcx.sess.panic_strategy() != PanicStrategy::Unwind {\n         whitelisted.insert(lang_items::EhPersonalityLangItem);\n         whitelisted.insert(lang_items::EhUnwindResumeLangItem);\n     }\n@@ -102,28 +102,28 @@ fn verify(sess: &Session, items: &lang_items::LanguageItems) {\n         if missing.contains(&lang_items::$item) &&\n            !whitelisted.contains(&lang_items::$item) &&\n            items.$name().is_none() {\n-            sess.err(&format!(\"language item required, but not found: `{}`\",\n-                              stringify!($name)));\n+            tcx.sess.err(&format!(\"language item required, but not found: `{}`\",\n+                                  stringify!($name)));\n \n         }\n     )*\n }\n \n-impl<'a> Context<'a> {\n+impl<'a, 'tcx> Context<'a, 'tcx> {\n     fn register(&mut self, name: &str, span: Span) {\n         $(if name == stringify!($name) {\n             if self.items.$name().is_none() {\n                 self.items.missing.push(lang_items::$item);\n             }\n         } else)* {\n-            span_err!(self.sess, span, E0264,\n+            span_err!(self.tcx.sess, span, E0264,\n                       \"unknown external lang item: `{}`\",\n                       name);\n         }\n     }\n }\n \n-impl<'a, 'v> Visitor<'v> for Context<'a> {\n+impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n     fn nested_visit_map<'this>(&'this mut self) -> NestedVisitorMap<'this, 'v> {\n         NestedVisitorMap::None\n     }"}, {"sha": "498dc0cf2559d1167b2d21c3eb6f69c503a68bd2", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -919,7 +919,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 // anyway. In that case, why inundate the user.\n                 if !self.tcx.sess.has_errors() {\n                     if\n-                        self.tcx.lang_items.sized_trait()\n+                        self.tcx.lang_items().sized_trait()\n                         .map_or(false, |sized_id| sized_id == trait_ref.def_id())\n                     {\n                         self.need_type_info(body_id, span, self_ty);"}, {"sha": "fd6d5a86a7fd1ed98f243459fe1ea3f2ce591e75", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -181,7 +181,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     fn generics_require_sized_self(self, def_id: DefId) -> bool {\n-        let sized_def_id = match self.lang_items.sized_trait() {\n+        let sized_def_id = match self.lang_items().sized_trait() {\n             Some(def_id) => def_id,\n             None => { return false; /* No Sized trait, can't require it! */ }\n         };"}, {"sha": "1088ada667fbb3cb16634d84bc01083f3ca4ede5", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -1155,7 +1155,7 @@ fn confirm_generator_candidate<'cx, 'gcx, 'tcx>(\n \n     let tcx = selcx.tcx();\n \n-    let gen_def_id = tcx.lang_items.gen_trait().unwrap();\n+    let gen_def_id = tcx.lang_items().gen_trait().unwrap();\n \n     // Note: we unwrap the binder here but re-create it below (1)\n     let ty::Binder((trait_ref, yield_ty, return_ty)) =\n@@ -1252,7 +1252,7 @@ fn confirm_callable_candidate<'cx, 'gcx, 'tcx>(\n            fn_sig);\n \n     // the `Output` associated type is declared on `FnOnce`\n-    let fn_once_def_id = tcx.lang_items.fn_once_trait().unwrap();\n+    let fn_once_def_id = tcx.lang_items().fn_once_trait().unwrap();\n \n     // Note: we unwrap the binder here but re-create it below (1)\n     let ty::Binder((trait_ref, ret_type)) ="}, {"sha": "201395e6f9024aab1866342bee8ff45e3e1bb88c", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -1235,7 +1235,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         // and applicable impls. There is a certain set of precedence rules here.\n \n         let def_id = obligation.predicate.def_id();\n-        if self.tcx().lang_items.copy_trait() == Some(def_id) {\n+        let lang_items = self.tcx().lang_items();\n+        if lang_items.copy_trait() == Some(def_id) {\n             debug!(\"obligation self ty is {:?}\",\n                    obligation.predicate.0.self_ty());\n \n@@ -1246,16 +1247,16 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             // For other types, we'll use the builtin rules.\n             let copy_conditions = self.copy_conditions(obligation);\n             self.assemble_builtin_bound_candidates(copy_conditions, &mut candidates)?;\n-        } else if self.tcx().lang_items.sized_trait() == Some(def_id) {\n+        } else if lang_items.sized_trait() == Some(def_id) {\n             // Sized is never implementable by end-users, it is\n             // always automatically computed.\n             let sized_conditions = self.sized_conditions(obligation);\n             self.assemble_builtin_bound_candidates(sized_conditions,\n                                                    &mut candidates)?;\n-         } else if self.tcx().lang_items.unsize_trait() == Some(def_id) {\n+         } else if lang_items.unsize_trait() == Some(def_id) {\n              self.assemble_candidates_for_unsizing(obligation, &mut candidates);\n          } else {\n-             if self.tcx().lang_items.clone_trait() == Some(def_id) {\n+             if lang_items.clone_trait() == Some(def_id) {\n                  // Same builtin conditions as `Copy`, i.e. every type which has builtin support\n                  // for `Copy` also has builtin support for `Clone`, + tuples and arrays of `Clone`\n                  // types have builtin support for `Clone`.\n@@ -1453,7 +1454,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                                    candidates: &mut SelectionCandidateSet<'tcx>)\n                                    -> Result<(),SelectionError<'tcx>>\n     {\n-        if self.tcx().lang_items.gen_trait() != Some(obligation.predicate.def_id()) {\n+        if self.tcx().lang_items().gen_trait() != Some(obligation.predicate.def_id()) {\n             return Ok(());\n         }\n \n@@ -1490,7 +1491,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                                    candidates: &mut SelectionCandidateSet<'tcx>)\n                                    -> Result<(),SelectionError<'tcx>>\n     {\n-        let kind = match self.tcx().lang_items.fn_trait_kind(obligation.predicate.0.def_id()) {\n+        let kind = match self.tcx().lang_items().fn_trait_kind(obligation.predicate.0.def_id()) {\n             Some(k) => k,\n             None => { return Ok(()); }\n         };\n@@ -1532,7 +1533,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                                       -> Result<(),SelectionError<'tcx>>\n     {\n         // We provide impl of all fn traits for fn pointers.\n-        if self.tcx().lang_items.fn_trait_kind(obligation.predicate.def_id()).is_none() {\n+        if self.tcx().lang_items().fn_trait_kind(obligation.predicate.def_id()).is_none() {\n             return Ok(());\n         }\n \n@@ -2266,16 +2267,17 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         debug!(\"confirm_builtin_candidate({:?}, {:?})\",\n                obligation, has_nested);\n \n+        let lang_items = self.tcx().lang_items();\n         let obligations = if has_nested {\n             let trait_def = obligation.predicate.def_id();\n             let conditions = match trait_def {\n-                _ if Some(trait_def) == self.tcx().lang_items.sized_trait() => {\n+                _ if Some(trait_def) == lang_items.sized_trait() => {\n                     self.sized_conditions(obligation)\n                 }\n-                _ if Some(trait_def) == self.tcx().lang_items.copy_trait() => {\n+                _ if Some(trait_def) == lang_items.copy_trait() => {\n                     self.copy_conditions(obligation)\n                 }\n-                _ if Some(trait_def) == self.tcx().lang_items.clone_trait() => {\n+                _ if Some(trait_def) == lang_items.clone_trait() => {\n                     self.copy_conditions(obligation)\n                 }\n                 _ => bug!(\"unexpected builtin trait {:?}\", trait_def)\n@@ -2578,7 +2580,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     {\n         debug!(\"confirm_closure_candidate({:?})\", obligation);\n \n-        let kind = match self.tcx().lang_items.fn_trait_kind(obligation.predicate.0.def_id()) {\n+        let kind = match self.tcx().lang_items().fn_trait_kind(obligation.predicate.0.def_id()) {\n             Some(k) => k,\n             None => bug!(\"closure candidate for non-fn trait {:?}\", obligation)\n         };"}, {"sha": "349d77cfc1b244fcbeefd8f30a4baa1f6b7628c1", "filename": "src/librustc/ty/adjustment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fadjustment.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -110,8 +110,8 @@ impl<'a, 'gcx, 'tcx> OverloadedDeref<'tcx> {\n     pub fn method_call(&self, tcx: TyCtxt<'a, 'gcx, 'tcx>, source: Ty<'tcx>)\n                        -> (DefId, &'tcx Substs<'tcx>) {\n         let trait_def_id = match self.mutbl {\n-            hir::MutImmutable => tcx.lang_items.deref_trait(),\n-            hir::MutMutable => tcx.lang_items.deref_mut_trait()\n+            hir::MutImmutable => tcx.lang_items().deref_trait(),\n+            hir::MutMutable => tcx.lang_items().deref_mut_trait()\n         };\n         let method_def_id = tcx.associated_items(trait_def_id.unwrap())\n             .find(|m| m.kind == ty::AssociatedKind::Method).unwrap().def_id;"}, {"sha": "c40edff8ed71b8dc77b3bc1b8bec3bff1abb917f", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -851,8 +851,6 @@ pub struct GlobalCtxt<'tcx> {\n \n     pub inhabitedness_cache: RefCell<FxHashMap<Ty<'tcx>, DefIdForest>>,\n \n-    pub lang_items: middle::lang_items::LanguageItems,\n-\n     /// Set of nodes which mark locals as mutable which end up getting used at\n     /// some point. Local variable definitions not in this set can be warned\n     /// about.\n@@ -992,7 +990,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                                   resolutions: ty::Resolutions,\n                                   named_region_map: resolve_lifetime::NamedRegionMap,\n                                   hir: hir_map::Map<'tcx>,\n-                                  lang_items: middle::lang_items::LanguageItems,\n                                   stability: stability::Index<'tcx>,\n                                   crate_name: &str,\n                                   f: F) -> R\n@@ -1079,7 +1076,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             rcache: RefCell::new(FxHashMap()),\n             normalized_cache: RefCell::new(FxHashMap()),\n             inhabitedness_cache: RefCell::new(FxHashMap()),\n-            lang_items,\n             used_mut_nodes: RefCell::new(NodeSet()),\n             stability: RefCell::new(stability),\n             selection_cache: traits::SelectionCache::new(),\n@@ -1099,6 +1095,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         let cname = self.crate_name(LOCAL_CRATE).as_str();\n         self.sess.consider_optimizing(&cname, msg)\n     }\n+\n+    pub fn lang_items(self) -> Rc<middle::lang_items::LanguageItems> {\n+        self.get_lang_items(LOCAL_CRATE)\n+    }\n }\n \n impl<'gcx: 'tcx, 'tcx> GlobalCtxt<'gcx> {\n@@ -2004,4 +2004,8 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n         assert_eq!(id, LOCAL_CRATE);\n         tcx.crate_name\n     };\n+    providers.get_lang_items = |tcx, id| {\n+        assert_eq!(id, LOCAL_CRATE);\n+        Rc::new(middle::lang_items::collect(tcx))\n+    };\n }"}, {"sha": "2348c4ae76731e84e9496f448e15133d57d4d91b", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -1344,7 +1344,7 @@ impl<'a, 'tcx> Layout {\n                     } else {\n                         let st = Struct::new(dl, &fields, &def.repr,\n                           kind, ty)?;\n-                        let non_zero = Some(def.did) == tcx.lang_items.non_zero();\n+                        let non_zero = Some(def.did) == tcx.lang_items().non_zero();\n                         Univariant { variant: st, non_zero: non_zero }\n                     };\n                     return success(layout);\n@@ -2043,7 +2043,7 @@ impl<'a, 'tcx> SizeSkeleton<'tcx> {\n                     if let Some(SizeSkeleton::Pointer { non_zero, tail }) = v0 {\n                         return Ok(SizeSkeleton::Pointer {\n                             non_zero: non_zero ||\n-                                Some(def.did) == tcx.lang_items.non_zero(),\n+                                Some(def.did) == tcx.lang_items().non_zero(),\n                             tail,\n                         });\n                     } else {"}, {"sha": "163645007906977022dcb4fad27be5b811ca48a2", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -22,6 +22,7 @@ use middle::privacy::AccessLevels;\n use middle::region;\n use middle::region::RegionMaps;\n use middle::resolve_lifetime::{Region, ObjectLifetimeDefault};\n+use middle::lang_items::LanguageItems;\n use mir;\n use mir::transform::{MirSuite, MirPassIndex};\n use session::CompileResult;\n@@ -687,6 +688,12 @@ impl<'tcx> QueryDescription for queries::extern_mod_stmt_cnum<'tcx> {\n     }\n }\n \n+impl<'tcx> QueryDescription for queries::get_lang_items<'tcx> {\n+    fn describe(_tcx: TyCtxt, _: CrateNum) -> String {\n+        format!(\"calculating the lang items map\")\n+    }\n+}\n+\n // If enabled, send a message to the profile-queries thread\n macro_rules! profq_msg {\n     ($tcx:expr, $msg:expr) => {\n@@ -1292,6 +1299,8 @@ define_maps! { <'tcx>\n     [] crate_name: CrateName(CrateNum) -> Symbol,\n     [] item_children: ItemChildren(DefId) -> Rc<Vec<Export>>,\n     [] extern_mod_stmt_cnum: ExternModStmtCnum(HirId) -> Option<CrateNum>,\n+\n+    [] get_lang_items: get_lang_items_node(CrateNum) -> Rc<LanguageItems>,\n }\n \n fn type_param_predicates<'tcx>((item_id, param_id): (DefId, DefId)) -> DepConstructor<'tcx> {\n@@ -1381,3 +1390,7 @@ fn implementations_of_trait_node<'tcx>((krate, trait_id): (CrateNum, DefId))\n fn link_args_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n     DepConstructor::LinkArgs\n }\n+\n+fn get_lang_items_node<'tcx>(_: CrateNum) -> DepConstructor<'tcx> {\n+    DepConstructor::GetLangItems\n+}"}, {"sha": "ad14a311c548c6f6f18aafaa6eff111b5319123b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -1447,10 +1447,10 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n         if attr::contains_name(&attrs, \"fundamental\") {\n             flags = flags | AdtFlags::IS_FUNDAMENTAL;\n         }\n-        if Some(did) == tcx.lang_items.phantom_data() {\n+        if Some(did) == tcx.lang_items().phantom_data() {\n             flags = flags | AdtFlags::IS_PHANTOM_DATA;\n         }\n-        if Some(did) == tcx.lang_items.owned_box() {\n+        if Some(did) == tcx.lang_items().owned_box() {\n             flags = flags | AdtFlags::IS_BOX;\n         }\n         match kind {\n@@ -1746,7 +1746,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                 // we know that `T` is Sized and do not need to check\n                 // it on the impl.\n \n-                let sized_trait = match tcx.lang_items.sized_trait() {\n+                let sized_trait = match tcx.lang_items().sized_trait() {\n                     Some(x) => x,\n                     _ => return vec![ty]\n                 };"}, {"sha": "f21fc8414e78b9c63e59930714a130fdd9dffaa9", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -418,7 +418,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         adt_did: DefId,\n         validate: &mut FnMut(Self, DefId) -> Result<(), ErrorReported>\n     ) -> Option<ty::Destructor> {\n-        let drop_trait = if let Some(def_id) = self.lang_items.drop_trait() {\n+        let drop_trait = if let Some(def_id) = self.lang_items().drop_trait() {\n             def_id\n         } else {\n             return None;"}, {"sha": "c48bd5ac5be267bc8b287d6c2622e2b487076e2d", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -159,7 +159,7 @@ pub fn parameterized(f: &mut fmt::Formatter,\n         }\n \n         write!(f, \"{}\", tcx.item_path_str(path_def_id))?;\n-        Ok(tcx.lang_items.fn_trait_kind(path_def_id))\n+        Ok(tcx.lang_items().fn_trait_kind(path_def_id))\n     })?;\n \n     if !verbose && fn_trait_kind.is_some() && projections.len() == 1 {\n@@ -802,7 +802,7 @@ impl<'tcx> fmt::Display for ty::TypeVariants<'tcx> {\n                     for predicate in bounds.predicates {\n                         if let Some(trait_ref) = predicate.to_opt_poly_trait_ref() {\n                             // Don't print +Sized, but rather +?Sized if absent.\n-                            if Some(trait_ref.def_id()) == tcx.lang_items.sized_trait() {\n+                            if Some(trait_ref.def_id()) == tcx.lang_items().sized_trait() {\n                                 is_sized = true;\n                                 continue;\n                             }"}, {"sha": "afd89f709925c2630f6fa9716b9741e0b4c227d0", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -913,12 +913,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n     let time_passes = sess.time_passes();\n \n-    let lang_items = time(time_passes, \"language item collection\", || {\n-        sess.track_errors(|| {\n-            middle::lang_items::collect_language_items(&sess, &hir_map)\n-        })\n-    })?;\n-\n     let named_region_map = time(time_passes,\n                                 \"lifetime resolution\",\n                                 || middle::resolve_lifetime::krate(sess, &hir_map))?;\n@@ -1028,7 +1022,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n                              resolutions,\n                              named_region_map,\n                              hir_map,\n-                             lang_items,\n                              index,\n                              name,\n                              |tcx| {"}, {"sha": "e0d82f3dafc0daab76f6246016d932926577c5ca", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -547,7 +547,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDebugImplementations {\n             _ => return,\n         }\n \n-        let debug = match cx.tcx.lang_items.debug_trait() {\n+        let debug = match cx.tcx.lang_items().debug_trait() {\n             Some(debug) => debug,\n             None => return,\n         };"}, {"sha": "d3b3396413c13570a019e6e8772dd9d5543e2552", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -991,7 +991,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n                 // \"unsized info\", else just store None\n                 let coerce_unsized_info =\n                     trait_ref.and_then(|t| {\n-                        if Some(t.def_id) == tcx.lang_items.coerce_unsized_trait() {\n+                        if Some(t.def_id) == tcx.lang_items().coerce_unsized_trait() {\n                             Some(tcx.at(item.span).coerce_unsized_info(def_id))\n                         } else {\n                             None\n@@ -1322,7 +1322,8 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n \n     fn encode_lang_items(&mut self, _: ()) -> LazySeq<(DefIndex, usize)> {\n         let tcx = self.tcx;\n-        let lang_items = tcx.lang_items.items().iter();\n+        let lang_items = tcx.lang_items();\n+        let lang_items = lang_items.items().iter();\n         self.lazy_seq(lang_items.enumerate().filter_map(|(i, &opt_def_id)| {\n             if let Some(def_id) = opt_def_id {\n                 if def_id.is_local() {\n@@ -1335,7 +1336,7 @@ impl<'a, 'b: 'a, 'tcx: 'b> IsolatedEncoder<'a, 'b, 'tcx> {\n \n     fn encode_lang_items_missing(&mut self, _: ()) -> LazySeq<lang_items::LangItem> {\n         let tcx = self.tcx;\n-        self.lazy_seq_ref(&tcx.lang_items.missing)\n+        self.lazy_seq_ref(&tcx.lang_items().missing)\n     }\n \n     /// Encodes an index, mapping each trait to its (local) implementations."}, {"sha": "0b91e08fc6d70c8e80c898ca909180f9844d588f", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -299,7 +299,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                 let fail = self.cfg.start_new_block();\n                 if let ty::TyRef(_, mt) = ty.sty {\n                     assert!(ty.is_slice());\n-                    let eq_def_id = self.hir.tcx().lang_items.eq_trait().unwrap();\n+                    let eq_def_id = self.hir.tcx().lang_items().eq_trait().unwrap();\n                     let ty = mt.ty;\n                     let (mty, method) = self.hir.trait_method(eq_def_id, \"eq\", ty, &[ty]);\n "}, {"sha": "023bec57b3f361fc1168596ad0b337095c159785", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -47,7 +47,7 @@ fn make_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n             bug!(\"item {:?} passed to make_shim\", instance),\n         ty::InstanceDef::FnPtrShim(def_id, ty) => {\n             let trait_ = tcx.trait_of_item(def_id).unwrap();\n-            let adjustment = match tcx.lang_items.fn_trait_kind(trait_) {\n+            let adjustment = match tcx.lang_items().fn_trait_kind(trait_) {\n                 Some(ty::ClosureKind::FnOnce) => Adjustment::Identity,\n                 Some(ty::ClosureKind::FnMut) |\n                 Some(ty::ClosureKind::Fn) => Adjustment::Deref,\n@@ -82,7 +82,7 @@ fn make_shim<'a, 'tcx>(tcx: ty::TyCtxt<'a, 'tcx, 'tcx>,\n             )\n         }\n         ty::InstanceDef::ClosureOnceShim { call_once } => {\n-            let fn_mut = tcx.lang_items.fn_mut_trait().unwrap();\n+            let fn_mut = tcx.lang_items().fn_mut_trait().unwrap();\n             let call_mut = tcx.global_tcx()\n                 .associated_items(fn_mut)\n                 .find(|it| it.kind == ty::AssociatedKind::Method)"}, {"sha": "0fb34c96b062d1763a64b4474398427405da575a", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -715,7 +715,7 @@ impl MirPass for StateTransform {\n         let gen_ty = mir.local_decls.raw[1].ty;\n \n         // Compute GeneratorState<yield_ty, return_ty>\n-        let state_did = tcx.lang_items.gen_state().unwrap();\n+        let state_did = tcx.lang_items().gen_state().unwrap();\n         let state_adt_ref = tcx.adt_def(state_did);\n         let state_substs = tcx.mk_substs([Kind::from(yield_ty),\n             Kind::from(mir.return_ty)].iter());"}, {"sha": "46aa391897a9cdf45e6bc8dafa3d4b6c5ba94179", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -338,7 +338,7 @@ impl<'a, 'tcx> Inliner<'a, 'tcx> {\n             TerminatorKind::Call { args, destination: Some(destination), cleanup, .. } => {\n                 debug!(\"Inlined {:?} into {:?}\", callsite.callee, self.source);\n \n-                let is_box_free = Some(callsite.callee) == self.tcx.lang_items.box_free_fn();\n+                let is_box_free = Some(callsite.callee) == self.tcx.lang_items().box_free_fn();\n \n                 let mut local_map = IndexVec::with_capacity(callee_mir.local_decls.len());\n                 let mut scope_map = IndexVec::with_capacity(callee_mir.visibility_scopes.len());"}, {"sha": "3b36ff8ce57c430dfc9e8d6f8adceca104b83da3", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -252,7 +252,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n     }\n \n     fn find_drop_implementation_method_span(&self) -> Option<Span> {\n-        self.tcx.lang_items\n+        self.tcx.lang_items()\n             .drop_trait()\n             .and_then(|drop_trait_id| {\n                 let mut span = None;\n@@ -795,7 +795,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                         self.deny_drop();\n                     }\n \n-                    if Some(def.did) == self.tcx.lang_items.unsafe_cell_type() {\n+                    if Some(def.did) == self.tcx.lang_items().unsafe_cell_type() {\n                         let ty = rvalue.ty(self.mir, self.tcx);\n                         self.add_type(ty);\n                         assert!(self.qualif.intersects(Qualif::MUTABLE_INTERIOR));"}, {"sha": "7fbeb9610f4719f6d9e4d3fb23743eedb2fe720c", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -575,7 +575,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     value: ConstVal::Function(def_id, _), ..\n                 }, ..\n             }) => {\n-                Some(def_id) == self.tcx().lang_items.box_free_fn()\n+                Some(def_id) == self.tcx().lang_items().box_free_fn()\n             }\n             _ => false,\n         }"}, {"sha": "8ea47c2991009c3e2e0d75d86cb09bbae29f0582", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -515,7 +515,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n     {\n         debug!(\"destructor_call_block({:?}, {:?})\", self, succ);\n         let tcx = self.tcx();\n-        let drop_trait = tcx.lang_items.drop_trait().unwrap();\n+        let drop_trait = tcx.lang_items().drop_trait().unwrap();\n         let drop_fn = tcx.associated_items(drop_trait).next().unwrap();\n         let ty = self.lvalue_ty(self.lvalue);\n         let substs = tcx.mk_substs(iter::once(Kind::from(ty)));"}, {"sha": "6f2c448ceb6f91abeafabc8335852dd9d35ff4c6", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -401,7 +401,7 @@ fn check_expr<'a, 'tcx>(v: &mut CheckCrateVisitor<'a, 'tcx>, e: &hir::Expr, node\n         hir::ExprStruct(..) => {\n             if let ty::TyAdt(adt, ..) = v.tables.expr_ty(e).sty {\n                 // unsafe_cell_type doesn't necessarily exist with no_core\n-                if Some(adt.did) == v.tcx.lang_items.unsafe_cell_type() {\n+                if Some(adt.did) == v.tcx.lang_items().unsafe_cell_type() {\n                     v.promotable = false;\n                 }\n             }"}, {"sha": "b56fa34e348e5f7f8b3abd140e1c7a6c444c2987", "filename": "src/librustc_trans/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_trans%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_trans%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcollector.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -432,7 +432,7 @@ fn check_recursion_limit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let recursion_depth = recursion_depths.get(&def_id).cloned().unwrap_or(0);\n     debug!(\" => recursion depth={}\", recursion_depth);\n \n-    let recursion_depth = if Some(def_id) == tcx.lang_items.drop_in_place_fn() {\n+    let recursion_depth = if Some(def_id) == tcx.lang_items().drop_in_place_fn() {\n         // HACK: drop_in_place creates tight monomorphization loops. Give\n         // it more margin.\n         recursion_depth / 4\n@@ -550,7 +550,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n             mir::Rvalue::NullaryOp(mir::NullOp::Box, _) => {\n                 let tcx = self.scx.tcx();\n                 let exchange_malloc_fn_def_id = tcx\n-                    .lang_items\n+                    .lang_items()\n                     .require(ExchangeMallocFnLangItem)\n                     .unwrap_or_else(|e| self.scx.sess().fatal(&e));\n                 let instance = Instance::mono(tcx, exchange_malloc_fn_def_id);"}, {"sha": "d947cd8e71974a57789b8005912e623290bc6a4f", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -423,7 +423,7 @@ pub fn langcall(tcx: TyCtxt,\n                 msg: &str,\n                 li: LangItem)\n                 -> DefId {\n-    match tcx.lang_items.require(li) {\n+    match tcx.lang_items().require(li) {\n         Ok(id) => id,\n         Err(s) => {\n             let msg = format!(\"{} {}\", msg, s);\n@@ -530,7 +530,7 @@ pub fn ty_fn_sig<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n             let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n \n             sig.map_bound(|sig| {\n-                let state_did = tcx.lang_items.gen_state().unwrap();\n+                let state_did = tcx.lang_items().gen_state().unwrap();\n                 let state_adt_ref = tcx.adt_def(state_did);\n                 let state_substs = tcx.mk_substs([Kind::from(sig.yield_ty),\n                     Kind::from(sig.return_ty)].iter());"}, {"sha": "a5830eb17edb14c95e007c7cd06361ec3e3c6c88", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -616,7 +616,7 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n             return llpersonality\n         }\n         let tcx = self.tcx();\n-        let llfn = match tcx.lang_items.eh_personality() {\n+        let llfn = match tcx.lang_items().eh_personality() {\n             Some(def_id) if !base::wants_msvc_seh(self.sess()) => {\n                 callee::resolve_and_get_fn(self, def_id, tcx.intern_substs(&[]))\n             }\n@@ -645,7 +645,7 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n \n         let tcx = self.tcx();\n         assert!(self.sess().target.target.options.custom_unwind_resume);\n-        if let Some(def_id) = tcx.lang_items.eh_unwind_resume() {\n+        if let Some(def_id) = tcx.lang_items().eh_unwind_resume() {\n             let llfn = callee::resolve_and_get_fn(self, def_id, tcx.intern_substs(&[]));\n             unwresume.set(Some(llfn));\n             return llfn;"}, {"sha": "53e2419125573d404af566c09d59b083ef408c41", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -822,7 +822,7 @@ fn trans_msvc_try<'a, 'tcx>(bcx: &Builder<'a, 'tcx>,\n         catchswitch.add_handler(cs, catchpad.llbb());\n \n         let tcx = ccx.tcx();\n-        let tydesc = match tcx.lang_items.msvc_try_filter() {\n+        let tydesc = match tcx.lang_items().msvc_try_filter() {\n             Some(did) => ::consts::get_static(ccx, did),\n             None => bug!(\"msvc_try_filter not defined\"),\n         };"}, {"sha": "949b9fe71ca64eb7c37b90175d6e379eb6c80cd7", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -114,7 +114,7 @@ impl<'mir, 'a, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'tcx> {\n                     }, ..\n                 }),\n                 ref args, ..\n-            } if Some(def_id) == self.cx.ccx.tcx().lang_items.box_free_fn() => {\n+            } if Some(def_id) == self.cx.ccx.tcx().lang_items().box_free_fn() => {\n                 // box_free(x) shares with `drop x` the property that it\n                 // is not guaranteed to be statically dominated by the\n                 // definition of x, so x must always be in an alloca."}, {"sha": "e8b1430b4b07f21d35e0e9a859d0b5274006b1be", "filename": "src/librustc_trans/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_trans%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fconstant.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -610,7 +610,7 @@ impl<'a, 'tcx> MirConstContext<'a, 'tcx> {\n                         match operand.ty.sty {\n                             ty::TyClosure(def_id, substs) => {\n                                 // Get the def_id for FnOnce::call_once\n-                                let fn_once = tcx.lang_items.fn_once_trait().unwrap();\n+                                let fn_once = tcx.lang_items().fn_once_trait().unwrap();\n                                 let call_once = tcx\n                                     .global_tcx().associated_items(fn_once)\n                                     .find(|it| it.kind == ty::AssociatedKind::Method)"}, {"sha": "34dec57543a2b467d1800761cea56a926509fafc", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -482,7 +482,7 @@ impl<'a, 'tcx> MirContext<'a, 'tcx> {\n                 let box_ty = bcx.tcx().mk_box(content_ty);\n \n                 // Allocate space:\n-                let def_id = match bcx.tcx().lang_items.require(ExchangeMallocFnLangItem) {\n+                let def_id = match bcx.tcx().lang_items().require(ExchangeMallocFnLangItem) {\n                     Ok(id) => id,\n                     Err(s) => {\n                         bcx.sess().fatal(&format!(\"allocation of `{}` {}\", box_ty, s));"}, {"sha": "9a7f1524d209f7b0b16e82c159f1197395577acb", "filename": "src/librustc_trans/monomorphize.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_trans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_trans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmonomorphize.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -31,7 +31,7 @@ fn fn_once_adapter_instance<'a, 'tcx>(\n     debug!(\"fn_once_adapter_shim({:?}, {:?})\",\n            closure_did,\n            substs);\n-    let fn_once = tcx.lang_items.fn_once_trait().unwrap();\n+    let fn_once = tcx.lang_items().fn_once_trait().unwrap();\n     let call_once = tcx.associated_items(fn_once)\n         .find(|it| it.kind == ty::AssociatedKind::Method)\n         .unwrap().def_id;\n@@ -132,7 +132,7 @@ fn resolve_associated_item<'a, 'tcx>(\n             }\n         }\n         traits::VtableClosure(closure_data) => {\n-            let trait_closure_kind = tcx.lang_items.fn_trait_kind(trait_id).unwrap();\n+            let trait_closure_kind = tcx.lang_items().fn_trait_kind(trait_id).unwrap();\n             resolve_closure(scx, closure_data.closure_def_id, closure_data.substs,\n                             trait_closure_kind)\n         }\n@@ -149,7 +149,7 @@ fn resolve_associated_item<'a, 'tcx>(\n                 substs: rcvr_substs\n             }\n         }\n-        traits::VtableBuiltin(..) if Some(trait_id) == tcx.lang_items.clone_trait() => {\n+        traits::VtableBuiltin(..) if Some(trait_id) == tcx.lang_items().clone_trait() => {\n             Instance {\n                 def: ty::InstanceDef::CloneShim(def_id, trait_ref.self_ty()),\n                 substs: rcvr_substs\n@@ -187,7 +187,7 @@ pub fn resolve<'a, 'tcx>(\n                 ty::InstanceDef::Intrinsic(def_id)\n             }\n             _ => {\n-                if Some(def_id) == scx.tcx().lang_items.drop_in_place_fn() {\n+                if Some(def_id) == scx.tcx().lang_items().drop_in_place_fn() {\n                     let ty = substs.type_at(0);\n                     if glue::needs_drop_glue(scx, ty) {\n                         debug!(\" => nontrivial drop glue\");\n@@ -224,7 +224,7 @@ pub fn custom_coerce_unsize_info<'scx, 'tcx>(scx: &SharedCrateContext<'scx, 'tcx\n                                              target_ty: Ty<'tcx>)\n                                              -> CustomCoerceUnsized {\n     let trait_ref = ty::Binder(ty::TraitRef {\n-        def_id: scx.tcx().lang_items.coerce_unsized_trait().unwrap(),\n+        def_id: scx.tcx().lang_items().coerce_unsized_trait().unwrap(),\n         substs: scx.tcx().mk_substs_trait(source_ty, &[target_ty])\n     });\n "}, {"sha": "2583d18652dc5dee818e174178bb75f609120034", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -1288,8 +1288,8 @@ fn split_auto_traits<'a, 'b, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n             Def::Trait(trait_did) => {\n                 // Checks whether `trait_did` refers to one of the builtin\n                 // traits, like `Send`, and adds it to `auto_traits` if so.\n-                if Some(trait_did) == tcx.lang_items.send_trait() ||\n-                    Some(trait_did) == tcx.lang_items.sync_trait() {\n+                if Some(trait_did) == tcx.lang_items().send_trait() ||\n+                    Some(trait_did) == tcx.lang_items().sync_trait() {\n                     let segments = &bound.trait_ref.path.segments;\n                     let parameters = &segments[segments.len() - 1].parameters;\n                     if !parameters.types.is_empty() {\n@@ -1402,7 +1402,7 @@ impl<'a, 'gcx, 'tcx> Bounds<'tcx> {\n \n         // If it could be sized, and is, add the sized predicate\n         if self.implicitly_sized {\n-            if let Some(sized) = tcx.lang_items.sized_trait() {\n+            if let Some(sized) = tcx.lang_items().sized_trait() {\n                 let trait_ref = ty::TraitRef {\n                     def_id: sized,\n                     substs: tcx.mk_substs_trait(param_ty, &[])"}, {"sha": "a25deb7685af5902d7722ba4158fd9fc150f664c", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -108,7 +108,7 @@ impl<'a, 'gcx, 'tcx> Autoderef<'a, 'gcx, 'tcx> {\n \n         // <cur_ty as Deref>\n         let trait_ref = TraitRef {\n-            def_id: match tcx.lang_items.deref_trait() {\n+            def_id: match tcx.lang_items().deref_trait() {\n                 Some(f) => f,\n                 None => return None,\n             },"}, {"sha": "866949220b5dfba64c3265a415b41018a523003e", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -28,7 +28,7 @@ use rustc::hir;\n /// to `trait_id` (this only cares about the trait, not the specific\n /// method that is called)\n pub fn check_legal_trait_for_method_call(tcx: TyCtxt, span: Span, trait_id: DefId) {\n-    if tcx.lang_items.drop_trait() == Some(trait_id) {\n+    if tcx.lang_items().drop_trait() == Some(trait_id) {\n         struct_span_err!(tcx.sess, span, E0040, \"explicit use of destructor method\")\n             .span_label(span, \"explicit destructor calls not allowed\")\n             .emit();\n@@ -157,9 +157,9 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                                              MethodCallee<'tcx>)> {\n         // Try the options that are least restrictive on the caller first.\n         for &(opt_trait_def_id, method_name, borrow) in\n-            &[(self.tcx.lang_items.fn_trait(), Symbol::intern(\"call\"), true),\n-              (self.tcx.lang_items.fn_mut_trait(), Symbol::intern(\"call_mut\"), true),\n-              (self.tcx.lang_items.fn_once_trait(), Symbol::intern(\"call_once\"), false)] {\n+            &[(self.tcx.lang_items().fn_trait(), Symbol::intern(\"call\"), true),\n+              (self.tcx.lang_items().fn_mut_trait(), Symbol::intern(\"call_mut\"), true),\n+              (self.tcx.lang_items().fn_once_trait(), Symbol::intern(\"call_once\"), false)] {\n             let trait_def_id = match opt_trait_def_id {\n                 Some(def_id) => def_id,\n                 None => continue,"}, {"sha": "aa2b9c1e0381534240adce13ae3e840c3e97d310", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -139,7 +139,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     })\n                     .next();\n                 let kind = object_type.principal()\n-                    .and_then(|p| self.tcx.lang_items.fn_trait_kind(p.def_id()));\n+                    .and_then(|p| self.tcx.lang_items().fn_trait_kind(p.def_id()));\n                 (sig, kind)\n             }\n             ty::TyInfer(ty::TyVar(vid)) => self.deduce_expectations_from_obligations(vid),\n@@ -204,7 +204,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                     ty::Predicate::ClosureKind(..) => None,\n                 };\n                 opt_trait_ref.and_then(|tr| self.self_type_matches_expected_vid(tr, expected_vid))\n-                    .and_then(|tr| self.tcx.lang_items.fn_trait_kind(tr.def_id()))\n+                    .and_then(|tr| self.tcx.lang_items().fn_trait_kind(tr.def_id()))\n             })\n             .fold(None,\n                   |best, cur| Some(best.map_or(cur, |best| cmp::min(best, cur))));\n@@ -223,7 +223,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         let trait_ref = projection.to_poly_trait_ref(tcx);\n \n-        if tcx.lang_items.fn_trait_kind(trait_ref.def_id()).is_none() {\n+        if tcx.lang_items().fn_trait_kind(trait_ref.def_id()).is_none() {\n             return None;\n         }\n "}, {"sha": "cfcdbcc11959bdba6664f2a9f7d12d4135f6cf34", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -438,8 +438,8 @@ impl<'f, 'gcx, 'tcx> Coerce<'f, 'gcx, 'tcx> {\n     fn coerce_unsized(&self, source: Ty<'tcx>, target: Ty<'tcx>) -> CoerceResult<'tcx> {\n         debug!(\"coerce_unsized(source={:?}, target={:?})\", source, target);\n \n-        let traits = (self.tcx.lang_items.unsize_trait(),\n-                      self.tcx.lang_items.coerce_unsized_trait());\n+        let traits = (self.tcx.lang_items().unsize_trait(),\n+                      self.tcx.lang_items().coerce_unsized_trait());\n         let (unsize_did, coerce_unsized_did) = if let (Some(u), Some(cu)) = traits {\n             (u, cu)\n         } else {"}, {"sha": "852134bbee3154e516d59a08a0b37259a2fec744", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -540,7 +540,7 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n     fn predicates_require_illegal_sized_bound(&self,\n                                               predicates: &ty::InstantiatedPredicates<'tcx>)\n                                               -> bool {\n-        let sized_def_id = match self.tcx.lang_items.sized_trait() {\n+        let sized_def_id = match self.tcx.lang_items().sized_trait() {\n             Some(def_id) => def_id,\n             None => return false,\n         };"}, {"sha": "3771d330f6dd39a025a9f6b57643cad1b3251961", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -393,6 +393,7 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n \n     fn assemble_probe(&mut self, self_ty: Ty<'tcx>) {\n         debug!(\"assemble_probe: self_ty={:?}\", self_ty);\n+        let lang_items = self.tcx.lang_items();\n \n         match self_ty.sty {\n             ty::TyDynamic(ref data, ..) => {\n@@ -408,79 +409,79 @@ impl<'a, 'gcx, 'tcx> ProbeContext<'a, 'gcx, 'tcx> {\n                 self.assemble_inherent_candidates_from_param(self_ty, p);\n             }\n             ty::TyChar => {\n-                let lang_def_id = self.tcx.lang_items.char_impl();\n+                let lang_def_id = lang_items.char_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::TyStr => {\n-                let lang_def_id = self.tcx.lang_items.str_impl();\n+                let lang_def_id = lang_items.str_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::TySlice(_) => {\n-                let lang_def_id = self.tcx.lang_items.slice_impl();\n+                let lang_def_id = lang_items.slice_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::TyRawPtr(ty::TypeAndMut { ty: _, mutbl: hir::MutImmutable }) => {\n-                let lang_def_id = self.tcx.lang_items.const_ptr_impl();\n+                let lang_def_id = lang_items.const_ptr_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::TyRawPtr(ty::TypeAndMut { ty: _, mutbl: hir::MutMutable }) => {\n-                let lang_def_id = self.tcx.lang_items.mut_ptr_impl();\n+                let lang_def_id = lang_items.mut_ptr_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::TyInt(ast::IntTy::I8) => {\n-                let lang_def_id = self.tcx.lang_items.i8_impl();\n+                let lang_def_id = lang_items.i8_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::TyInt(ast::IntTy::I16) => {\n-                let lang_def_id = self.tcx.lang_items.i16_impl();\n+                let lang_def_id = lang_items.i16_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::TyInt(ast::IntTy::I32) => {\n-                let lang_def_id = self.tcx.lang_items.i32_impl();\n+                let lang_def_id = lang_items.i32_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::TyInt(ast::IntTy::I64) => {\n-                let lang_def_id = self.tcx.lang_items.i64_impl();\n+                let lang_def_id = lang_items.i64_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::TyInt(ast::IntTy::I128) => {\n-                let lang_def_id = self.tcx.lang_items.i128_impl();\n+                let lang_def_id = lang_items.i128_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::TyInt(ast::IntTy::Is) => {\n-                let lang_def_id = self.tcx.lang_items.isize_impl();\n+                let lang_def_id = lang_items.isize_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::TyUint(ast::UintTy::U8) => {\n-                let lang_def_id = self.tcx.lang_items.u8_impl();\n+                let lang_def_id = lang_items.u8_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::TyUint(ast::UintTy::U16) => {\n-                let lang_def_id = self.tcx.lang_items.u16_impl();\n+                let lang_def_id = lang_items.u16_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::TyUint(ast::UintTy::U32) => {\n-                let lang_def_id = self.tcx.lang_items.u32_impl();\n+                let lang_def_id = lang_items.u32_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::TyUint(ast::UintTy::U64) => {\n-                let lang_def_id = self.tcx.lang_items.u64_impl();\n+                let lang_def_id = lang_items.u64_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::TyUint(ast::UintTy::U128) => {\n-                let lang_def_id = self.tcx.lang_items.u128_impl();\n+                let lang_def_id = lang_items.u128_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::TyUint(ast::UintTy::Us) => {\n-                let lang_def_id = self.tcx.lang_items.usize_impl();\n+                let lang_def_id = lang_items.usize_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::TyFloat(ast::FloatTy::F32) => {\n-                let lang_def_id = self.tcx.lang_items.f32_impl();\n+                let lang_def_id = lang_items.f32_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             ty::TyFloat(ast::FloatTy::F64) => {\n-                let lang_def_id = self.tcx.lang_items.f64_impl();\n+                let lang_def_id = lang_items.f64_impl();\n                 self.assemble_inherent_impl_for_primitive(lang_def_id);\n             }\n             _ => {}"}, {"sha": "5b327566a13ed3cf4c0508b6143e66a89a47c940", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -45,7 +45,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n             ty::TyFnPtr(_) => true,\n             // If it's not a simple function, look for things which implement FnOnce\n             _ => {\n-                let fn_once = match tcx.lang_items.require(FnOnceTraitLangItem) {\n+                let fn_once = match tcx.lang_items().require(FnOnceTraitLangItem) {\n                     Ok(fn_once) => fn_once,\n                     Err(..) => return false,\n                 };"}, {"sha": "0a8d2129a890d2331f0c65edde3044e9f7b3cd0a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -2296,13 +2296,13 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     fn resolve_lvalue_op(&self, op: LvalueOp, is_mut: bool) -> (Option<DefId>, Symbol) {\n         let (tr, name) = match (op, is_mut) {\n             (LvalueOp::Deref, false) =>\n-                (self.tcx.lang_items.deref_trait(), \"deref\"),\n+                (self.tcx.lang_items().deref_trait(), \"deref\"),\n             (LvalueOp::Deref, true) =>\n-                (self.tcx.lang_items.deref_mut_trait(), \"deref_mut\"),\n+                (self.tcx.lang_items().deref_mut_trait(), \"deref_mut\"),\n             (LvalueOp::Index, false) =>\n-                (self.tcx.lang_items.index_trait(), \"index\"),\n+                (self.tcx.lang_items().index_trait(), \"index\"),\n             (LvalueOp::Index, true) =>\n-                (self.tcx.lang_items.index_mut_trait(), \"index_mut\"),\n+                (self.tcx.lang_items().index_mut_trait(), \"index_mut\"),\n         };\n         (tr, Symbol::intern(name))\n     }"}, {"sha": "a3dd81fdddee33d78a664faa7786ce3e749648b4", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -362,7 +362,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     fn lookup_op_method(&self, lhs_ty: Ty<'tcx>, other_tys: &[Ty<'tcx>], op: Op)\n                         -> Result<MethodCallee<'tcx>, ()>\n     {\n-        let lang = &self.tcx.lang_items;\n+        let lang = self.tcx.lang_items();\n \n         let span = match op {\n             Op::Binary(op, _) => op.span,"}, {"sha": "9c19aef5992e698bd324f5e56199200eacee4de3", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -539,7 +539,7 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n     {\n         let mut err = error_392(self.tcx, span, param_name);\n \n-        let suggested_marker_id = self.tcx.lang_items.phantom_data();\n+        let suggested_marker_id = self.tcx.lang_items().phantom_data();\n         match suggested_marker_id {\n             Some(def_id) => {\n                 err.help("}, {"sha": "fedfa51d61d115efde45a784e9a5e6c73e55e233", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -28,9 +28,9 @@ use rustc::hir::{self, ItemImpl};\n \n pub fn check_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, trait_def_id: DefId) {\n     Checker { tcx, trait_def_id }\n-        .check(tcx.lang_items.drop_trait(), visit_implementation_of_drop)\n-        .check(tcx.lang_items.copy_trait(), visit_implementation_of_copy)\n-        .check(tcx.lang_items.coerce_unsized_trait(),\n+        .check(tcx.lang_items().drop_trait(), visit_implementation_of_drop)\n+        .check(tcx.lang_items().copy_trait(), visit_implementation_of_copy)\n+        .check(tcx.lang_items().coerce_unsized_trait(),\n                visit_implementation_of_coerce_unsized);\n }\n \n@@ -176,9 +176,9 @@ pub fn coerce_unsized_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                      impl_did: DefId)\n                                      -> CoerceUnsizedInfo {\n     debug!(\"compute_coerce_unsized_info(impl_did={:?})\", impl_did);\n-    let coerce_unsized_trait = tcx.lang_items.coerce_unsized_trait().unwrap();\n+    let coerce_unsized_trait = tcx.lang_items().coerce_unsized_trait().unwrap();\n \n-    let unsize_trait = match tcx.lang_items.require(UnsizeTraitLangItem) {\n+    let unsize_trait = match tcx.lang_items().require(UnsizeTraitLangItem) {\n         Ok(id) => id,\n         Err(err) => {\n             tcx.sess.fatal(&format!(\"`CoerceUnsized` implementation {}\", err));"}, {"sha": "15e15abfb3606d4c5fcf1da5e2589dbc209626b2", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -112,6 +112,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for InherentCollect<'a, 'tcx> {\n \n         let def_id = self.tcx.hir.local_def_id(item.id);\n         let self_ty = self.tcx.type_of(def_id);\n+        let lang_items = self.tcx.lang_items();\n         match self_ty.sty {\n             ty::TyAdt(def, _) => {\n                 self.check_def_id(item, def.did);\n@@ -121,133 +122,133 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for InherentCollect<'a, 'tcx> {\n             }\n             ty::TyChar => {\n                 self.check_primitive_impl(def_id,\n-                                          self.tcx.lang_items.char_impl(),\n+                                          lang_items.char_impl(),\n                                           \"char\",\n                                           \"char\",\n                                           item.span);\n             }\n             ty::TyStr => {\n                 self.check_primitive_impl(def_id,\n-                                          self.tcx.lang_items.str_impl(),\n+                                          lang_items.str_impl(),\n                                           \"str\",\n                                           \"str\",\n                                           item.span);\n             }\n             ty::TySlice(_) => {\n                 self.check_primitive_impl(def_id,\n-                                          self.tcx.lang_items.slice_impl(),\n+                                          lang_items.slice_impl(),\n                                           \"slice\",\n                                           \"[T]\",\n                                           item.span);\n             }\n             ty::TyRawPtr(ty::TypeAndMut { ty: _, mutbl: hir::MutImmutable }) => {\n                 self.check_primitive_impl(def_id,\n-                                          self.tcx.lang_items.const_ptr_impl(),\n+                                          lang_items.const_ptr_impl(),\n                                           \"const_ptr\",\n                                           \"*const T\",\n                                           item.span);\n             }\n             ty::TyRawPtr(ty::TypeAndMut { ty: _, mutbl: hir::MutMutable }) => {\n                 self.check_primitive_impl(def_id,\n-                                          self.tcx.lang_items.mut_ptr_impl(),\n+                                          lang_items.mut_ptr_impl(),\n                                           \"mut_ptr\",\n                                           \"*mut T\",\n                                           item.span);\n             }\n             ty::TyInt(ast::IntTy::I8) => {\n                 self.check_primitive_impl(def_id,\n-                                          self.tcx.lang_items.i8_impl(),\n+                                          lang_items.i8_impl(),\n                                           \"i8\",\n                                           \"i8\",\n                                           item.span);\n             }\n             ty::TyInt(ast::IntTy::I16) => {\n                 self.check_primitive_impl(def_id,\n-                                          self.tcx.lang_items.i16_impl(),\n+                                          lang_items.i16_impl(),\n                                           \"i16\",\n                                           \"i16\",\n                                           item.span);\n             }\n             ty::TyInt(ast::IntTy::I32) => {\n                 self.check_primitive_impl(def_id,\n-                                          self.tcx.lang_items.i32_impl(),\n+                                          lang_items.i32_impl(),\n                                           \"i32\",\n                                           \"i32\",\n                                           item.span);\n             }\n             ty::TyInt(ast::IntTy::I64) => {\n                 self.check_primitive_impl(def_id,\n-                                          self.tcx.lang_items.i64_impl(),\n+                                          lang_items.i64_impl(),\n                                           \"i64\",\n                                           \"i64\",\n                                           item.span);\n             }\n             ty::TyInt(ast::IntTy::I128) => {\n                 self.check_primitive_impl(def_id,\n-                                          self.tcx.lang_items.i128_impl(),\n+                                          lang_items.i128_impl(),\n                                           \"i128\",\n                                           \"i128\",\n                                           item.span);\n             }\n             ty::TyInt(ast::IntTy::Is) => {\n                 self.check_primitive_impl(def_id,\n-                                          self.tcx.lang_items.isize_impl(),\n+                                          lang_items.isize_impl(),\n                                           \"isize\",\n                                           \"isize\",\n                                           item.span);\n             }\n             ty::TyUint(ast::UintTy::U8) => {\n                 self.check_primitive_impl(def_id,\n-                                          self.tcx.lang_items.u8_impl(),\n+                                          lang_items.u8_impl(),\n                                           \"u8\",\n                                           \"u8\",\n                                           item.span);\n             }\n             ty::TyUint(ast::UintTy::U16) => {\n                 self.check_primitive_impl(def_id,\n-                                          self.tcx.lang_items.u16_impl(),\n+                                          lang_items.u16_impl(),\n                                           \"u16\",\n                                           \"u16\",\n                                           item.span);\n             }\n             ty::TyUint(ast::UintTy::U32) => {\n                 self.check_primitive_impl(def_id,\n-                                          self.tcx.lang_items.u32_impl(),\n+                                          lang_items.u32_impl(),\n                                           \"u32\",\n                                           \"u32\",\n                                           item.span);\n             }\n             ty::TyUint(ast::UintTy::U64) => {\n                 self.check_primitive_impl(def_id,\n-                                          self.tcx.lang_items.u64_impl(),\n+                                          lang_items.u64_impl(),\n                                           \"u64\",\n                                           \"u64\",\n                                           item.span);\n             }\n             ty::TyUint(ast::UintTy::U128) => {\n                 self.check_primitive_impl(def_id,\n-                                          self.tcx.lang_items.u128_impl(),\n+                                          lang_items.u128_impl(),\n                                           \"u128\",\n                                           \"u128\",\n                                           item.span);\n             }\n             ty::TyUint(ast::UintTy::Us) => {\n                 self.check_primitive_impl(def_id,\n-                                          self.tcx.lang_items.usize_impl(),\n+                                          lang_items.usize_impl(),\n                                           \"usize\",\n                                           \"usize\",\n                                           item.span);\n             }\n             ty::TyFloat(ast::FloatTy::F32) => {\n                 self.check_primitive_impl(def_id,\n-                                          self.tcx.lang_items.f32_impl(),\n+                                          lang_items.f32_impl(),\n                                           \"f32\",\n                                           \"f32\",\n                                           item.span);\n             }\n             ty::TyFloat(ast::FloatTy::F64) => {\n                 self.check_primitive_impl(def_id,\n-                                          self.tcx.lang_items.f64_impl(),\n+                                          lang_items.f64_impl(),\n                                           \"f64\",\n                                           \"f64\",\n                                           item.span);"}, {"sha": "6109fc57b0dfccfa5f6041e627d5e7d304ccc5f0", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -51,7 +51,7 @@ fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {\n \n fn enforce_trait_manually_implementable(tcx: TyCtxt, impl_def_id: DefId, trait_def_id: DefId) {\n     let did = Some(trait_def_id);\n-    let li = &tcx.lang_items;\n+    let li = tcx.lang_items();\n \n     // Disallow *all* explicit impls of `Sized` and `Unsize` for now.\n     if did == li.sized_trait() {"}, {"sha": "e4ca0f82ea1a003a3810bb7c55f2a5f5188f2b72", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -1309,7 +1309,7 @@ fn is_unsized<'gcx: 'tcx, 'tcx>(astconv: &AstConv<'gcx, 'tcx>,\n         }\n     }\n \n-    let kind_id = tcx.lang_items.require(SizedTraitLangItem);\n+    let kind_id = tcx.lang_items().require(SizedTraitLangItem);\n     match unbound {\n         Some(ref tpb) => {\n             // FIXME(#8559) currently requires the unbound to be built-in."}, {"sha": "6062ac96ada787624dd189a60c0c0699c824db3b", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a2e2aba07da5038ba13051a45de8f61d538d517a/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=a2e2aba07da5038ba13051a45de8f61d538d517a", "patch": "@@ -94,17 +94,18 @@ pub fn determine_parameters_to_be_inferred<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>\n }\n \n fn lang_items(tcx: TyCtxt) -> Vec<(ast::NodeId, Vec<ty::Variance>)> {\n+    let lang_items = tcx.lang_items();\n     let all = vec![\n-        (tcx.lang_items.phantom_data(), vec![ty::Covariant]),\n-        (tcx.lang_items.unsafe_cell_type(), vec![ty::Invariant]),\n+        (lang_items.phantom_data(), vec![ty::Covariant]),\n+        (lang_items.unsafe_cell_type(), vec![ty::Invariant]),\n \n         // Deprecated:\n-        (tcx.lang_items.covariant_type(), vec![ty::Covariant]),\n-        (tcx.lang_items.contravariant_type(), vec![ty::Contravariant]),\n-        (tcx.lang_items.invariant_type(), vec![ty::Invariant]),\n-        (tcx.lang_items.covariant_lifetime(), vec![ty::Covariant]),\n-        (tcx.lang_items.contravariant_lifetime(), vec![ty::Contravariant]),\n-        (tcx.lang_items.invariant_lifetime(), vec![ty::Invariant]),\n+        (lang_items.covariant_type(), vec![ty::Covariant]),\n+        (lang_items.contravariant_type(), vec![ty::Contravariant]),\n+        (lang_items.invariant_type(), vec![ty::Invariant]),\n+        (lang_items.covariant_lifetime(), vec![ty::Covariant]),\n+        (lang_items.contravariant_lifetime(), vec![ty::Contravariant]),\n+        (lang_items.invariant_lifetime(), vec![ty::Invariant]),\n \n         ];\n "}]}