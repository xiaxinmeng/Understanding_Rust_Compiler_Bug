{"sha": "539daf4454e3f11424a469e8fba26cacb325176a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzOWRhZjQ0NTRlM2YxMTQyNGE0NjllOGZiYTI2Y2FjYjMyNTE3NmE=", "commit": {"author": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-08T22:27:04Z"}, "committer": {"name": "Veetaha", "email": "gerzoh1@gmail.com", "date": "2020-02-08T22:27:04Z"}, "message": "vscode: refactor platform artifact name query to switch statement, move BinarySource union variants into a namespace", "tree": {"sha": "28f37d3adbfedc75b9d4cf25d50ab20469f48cf3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28f37d3adbfedc75b9d4cf25d50ab20469f48cf3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/539daf4454e3f11424a469e8fba26cacb325176a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/539daf4454e3f11424a469e8fba26cacb325176a", "html_url": "https://github.com/rust-lang/rust/commit/539daf4454e3f11424a469e8fba26cacb325176a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/539daf4454e3f11424a469e8fba26cacb325176a/comments", "author": null, "committer": null, "parents": [{"sha": "bdd88c2fad272f96a8212e5230010f7c02b4d15d", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdd88c2fad272f96a8212e5230010f7c02b4d15d", "html_url": "https://github.com/rust-lang/rust/commit/bdd88c2fad272f96a8212e5230010f7c02b4d15d"}], "stats": {"total": 159, "additions": 89, "deletions": 70}, "files": [{"sha": "2e3d4aba2d882ad71db2b127f25e5863dd795791", "filename": "editors/code/src/client.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/539daf4454e3f11424a469e8fba26cacb325176a/editors%2Fcode%2Fsrc%2Fclient.ts", "raw_url": "https://github.com/rust-lang/rust/raw/539daf4454e3f11424a469e8fba26cacb325176a/editors%2Fcode%2Fsrc%2Fclient.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fclient.ts?ref=539daf4454e3f11424a469e8fba26cacb325176a", "patch": "@@ -10,7 +10,7 @@ export async function createClient(config: Config): Promise<null | lc.LanguageCl\n     // It might be a good idea to test if the uri points to a file.\n     const workspaceFolderPath = workspace.workspaceFolders?.[0]?.uri.fsPath ?? '.';\n \n-    const raLspServerPath = await ensureLanguageServerBinary(config.raLspServerSource);\n+    const raLspServerPath = await ensureLanguageServerBinary(config.langServerSource);\n     if (!raLspServerPath) return null;\n \n     const run: lc.Executable = {"}, {"sha": "f216ab4617dbf0bb26a410d42c712c1bcce5014e", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 53, "deletions": 36, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/539daf4454e3f11424a469e8fba26cacb325176a/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/539daf4454e3f11424a469e8fba26cacb325176a/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=539daf4454e3f11424a469e8fba26cacb325176a", "patch": "@@ -1,6 +1,6 @@\n import * as os from \"os\";\n import * as vscode from 'vscode';\n-import { BinarySource, BinarySourceType } from \"./installation/interfaces\";\n+import { BinarySource } from \"./installation/interfaces\";\n \n const RA_LSP_DEBUG = process.env.__RA_LSP_SERVER_DEBUG;\n \n@@ -18,20 +18,7 @@ export interface CargoFeatures {\n }\n \n export class Config {\n-    readonly raLspServerGithubArtifactName = {\n-        linux: \"ra_lsp_server-linux\",\n-        darwin: \"ra_lsp_server-mac\",\n-        win32: \"ra_lsp_server-windows.exe\",\n-        aix: null,\n-        android: null,\n-        freebsd: null,\n-        openbsd: null,\n-        sunos: null,\n-        cygwin: null,\n-        netbsd: null,\n-    }[process.platform];\n-\n-    raLspServerSource!: null | BinarySource;\n+    langServerSource!: null | BinarySource;\n \n     highlightingOn = true;\n     rainbowHighlightingOn = false;\n@@ -72,6 +59,56 @@ export class Config {\n         return path;\n     }\n \n+    /**\n+     * Name of the binary artifact for `ra_lsp_server` that is published for\n+     * `platform` on GitHub releases. (It is also stored under the same name when\n+     * downloaded by the extension).\n+     */\n+    private static prebuiltLangServerFileName(platform: NodeJS.Platform): null | string {\n+        switch (platform) {\n+            case \"linux\":  return \"ra_lsp_server-linux\";\n+            case \"darwin\": return \"ra_lsp_server-mac\";\n+            case \"win32\":  return \"ra_lsp_server-windows.exe\";\n+\n+            // Users on these platforms yet need to manually build from sources\n+            case \"aix\":\n+            case \"android\":\n+            case \"freebsd\":\n+            case \"openbsd\":\n+            case \"sunos\":\n+            case \"cygwin\":\n+            case \"netbsd\": return null;\n+            // The list of platforms is exhaustive see (`NodeJS.Platform` type definition)\n+        }\n+    }\n+\n+    private static langServerBinarySource(\n+        ctx: vscode.ExtensionContext,\n+        config: vscode.WorkspaceConfiguration\n+    ): null | BinarySource {\n+        const raLspServerPath = RA_LSP_DEBUG ?? config.get<null | string>(\"raLspServerPath\");\n+\n+        if (raLspServerPath) {\n+            return {\n+                type: BinarySource.Type.ExplicitPath,\n+                path: Config.expandPathResolving(raLspServerPath)\n+            };\n+        }\n+\n+        const prebuiltBinaryName = Config.prebuiltLangServerFileName(process.platform);\n+\n+        return !prebuiltBinaryName ? null : {\n+            type: BinarySource.Type.GithubRelease,\n+            dir: ctx.globalStoragePath,\n+            file: prebuiltBinaryName,\n+            repo: {\n+                name: \"rust-analyzer\",\n+                owner: \"rust-analyzer\",\n+            }\n+        };\n+    }\n+\n+\n     // FIXME: revisit the logic for `if (.has(...)) config.get(...)` set default\n     // values only in one place (i.e. remove default values from non-readonly members declarations)\n     private refresh(ctx: vscode.ExtensionContext) {\n@@ -107,27 +144,7 @@ export class Config {\n             this.prevEnhancedTyping = this.enableEnhancedTyping;\n         }\n \n-        {\n-            const raLspServerPath = RA_LSP_DEBUG ?? config.get<null | string>(\"raLspServerPath\");\n-            if (raLspServerPath) {\n-                this.raLspServerSource = {\n-                    type: BinarySourceType.ExplicitPath,\n-                    path: Config.expandPathResolving(raLspServerPath)\n-                };\n-            } else if (this.raLspServerGithubArtifactName) {\n-                this.raLspServerSource = {\n-                    type: BinarySourceType.GithubBinary,\n-                    dir: ctx.globalStoragePath,\n-                    file: this.raLspServerGithubArtifactName,\n-                    repo: {\n-                        name: \"rust-analyzer\",\n-                        owner: \"rust-analyzer\",\n-                    }\n-                };\n-            } else {\n-                this.raLspServerSource = null;\n-            }\n-        }\n+        this.langServerSource = Config.langServerBinarySource(ctx, config);\n \n         if (config.has('cargo-watch.enable')) {\n             this.cargoWatchOptions.enable = config.get<boolean>("}, {"sha": "8039d0b90f63974d32aff2b5c6ec3d8966fd27c9", "filename": "editors/code/src/installation/interfaces.ts", "status": "modified", "additions": 30, "deletions": 28, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/539daf4454e3f11424a469e8fba26cacb325176a/editors%2Fcode%2Fsrc%2Finstallation%2Finterfaces.ts", "raw_url": "https://github.com/rust-lang/rust/raw/539daf4454e3f11424a469e8fba26cacb325176a/editors%2Fcode%2Fsrc%2Finstallation%2Finterfaces.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Finterfaces.ts?ref=539daf4454e3f11424a469e8fba26cacb325176a", "patch": "@@ -11,43 +11,45 @@ export interface ArtifactMetadata {\n     downloadUrl: string;\n }\n \n-/**\n- * Type tag for `BinarySource` discriminated union.\n- */\n-export enum BinarySourceType { ExplicitPath, GithubBinary }\n-\n /**\n  * Represents the source of a binary artifact which is either specified by the user\n  * explicitly, or bundled by this extension from GitHub releases.\n  */\n-export type BinarySource = ExplicitPathSource | GithubBinarySource;\n-\n-\n-export interface ExplicitPathSource {\n-    type: BinarySourceType.ExplicitPath;\n+export type BinarySource = BinarySource.ExplicitPath | BinarySource.GithubRelease;\n \n+export namespace BinarySource {\n     /**\n-     * Filesystem path to the binary specified by the user explicitly.\n+     * Type tag for `BinarySource` discriminated union.\n      */\n-    path: string;\n-}\n+    export const enum Type { ExplicitPath, GithubRelease }\n \n-export interface GithubBinarySource {\n-    type: BinarySourceType.GithubBinary;\n+    export interface ExplicitPath {\n+        type: Type.ExplicitPath;\n \n-    /**\n-     * Repository where the binary is stored.\n-     */\n-    repo: GithubRepo;\n+        /**\n+         * Filesystem path to the binary specified by the user explicitly.\n+         */\n+        path: string;\n+    }\n \n-    /**\n-     * Directory on the filesystem where the bundled binary is stored.\n-     */\n-    dir: string;\n+    export interface GithubRelease {\n+        type: Type.GithubRelease;\n+\n+        /**\n+         * Repository where the binary is stored.\n+         */\n+        repo: GithubRepo;\n+\n+        /**\n+         * Directory on the filesystem where the bundled binary is stored.\n+         */\n+        dir: string;\n+\n+        /**\n+         * Name of the binary file. It is stored under the same name on GitHub releases\n+         * and in local `.dir`.\n+         */\n+        file: string;\n+    }\n \n-    /**\n-     * Name of the binary file. It is stored under the same name on GitHub releases\n-     * and in local `.dir`.\n-     */\n-    file: string;\n }"}, {"sha": "522d59eb536d201c4f974ede92f642f27ed9653e", "filename": "editors/code/src/installation/language_server.ts", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/539daf4454e3f11424a469e8fba26cacb325176a/editors%2Fcode%2Fsrc%2Finstallation%2Flanguage_server.ts", "raw_url": "https://github.com/rust-lang/rust/raw/539daf4454e3f11424a469e8fba26cacb325176a/editors%2Fcode%2Fsrc%2Finstallation%2Flanguage_server.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Finstallation%2Flanguage_server.ts?ref=539daf4454e3f11424a469e8fba26cacb325176a", "patch": "@@ -5,12 +5,12 @@ import * as path from \"path\";\n import { strict as assert } from \"assert\";\n import { promises as fs } from \"fs\";\n \n-import { BinarySource, BinarySourceType, GithubBinarySource } from \"./interfaces\";\n+import { BinarySource } from \"./interfaces\";\n import { fetchLatestArtifactMetadata } from \"./fetch_latest_artifact_metadata\";\n import { downloadFile } from \"./download_file\";\n \n export async function downloadLatestLanguageServer(\n-    {file: artifactFileName, dir: installationDir, repo}: GithubBinarySource\n+    {file: artifactFileName, dir: installationDir, repo}: BinarySource.GithubRelease\n ) {\n     const binaryMetadata = await fetchLatestArtifactMetadata(repo, artifactFileName);\n \n@@ -67,7 +67,7 @@ export async function ensureLanguageServerBinary(\n     }\n \n     switch (langServerSource.type) {\n-        case BinarySourceType.ExplicitPath: {\n+        case BinarySource.Type.ExplicitPath: {\n             if (isBinaryAvailable(langServerSource.path)) {\n                 return langServerSource.path;\n             }\n@@ -78,7 +78,7 @@ export async function ensureLanguageServerBinary(\n             );\n             return null;\n         }\n-        case BinarySourceType.GithubBinary: {\n+        case BinarySource.Type.GithubRelease: {\n             const bundledBinaryPath = path.join(langServerSource.dir, langServerSource.file);\n \n             if (!isBinaryAvailable(bundledBinaryPath)) {\n@@ -106,7 +106,7 @@ export async function ensureLanguageServerBinary(\n                 );\n \n                 vscode.window.showInformationMessage(\n-                    \"Rust analyzer language server was successfully installed\"\n+                    \"Rust analyzer language server was successfully installed \ud83e\udd80\"\n                 );\n             }\n             return bundledBinaryPath;"}]}