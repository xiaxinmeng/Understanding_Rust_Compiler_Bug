{"sha": "e497fb19b02d5b9a44da7d05186569b6790d8386", "node_id": "C_kwDOAAsO6NoAKGU0OTdmYjE5YjAyZDViOWE0NGRhN2QwNTE4NjU2OWI2NzkwZDgzODY", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-07-15T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-07-22T15:00:49Z"}, "message": "Outline `SubstFolder` bug reporting code paths\n\nBug reporting macro `span_bug!` generates quite a bit of code,\nwe don't expect to execute. Outline it into a separate function.", "tree": {"sha": "a8abc51f8807f9ad416073f2745b448c8ac60752", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8abc51f8807f9ad416073f2745b448c8ac60752"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e497fb19b02d5b9a44da7d05186569b6790d8386", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e497fb19b02d5b9a44da7d05186569b6790d8386", "html_url": "https://github.com/rust-lang/rust/commit/e497fb19b02d5b9a44da7d05186569b6790d8386", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e497fb19b02d5b9a44da7d05186569b6790d8386/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "880bde0ced7181ec5bbd9732545a207230628574", "url": "https://api.github.com/repos/rust-lang/rust/commits/880bde0ced7181ec5bbd9732545a207230628574", "html_url": "https://github.com/rust-lang/rust/commit/880bde0ced7181ec5bbd9732545a207230628574"}], "stats": {"total": 125, "additions": 70, "deletions": 55}, "files": [{"sha": "b4fa9837aed91b2aa05b35417d0057f37878e26c", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 70, "deletions": 55, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/e497fb19b02d5b9a44da7d05186569b6790d8386/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e497fb19b02d5b9a44da7d05186569b6790d8386/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=e497fb19b02d5b9a44da7d05186569b6790d8386", "patch": "@@ -11,7 +11,6 @@ use rustc_data_structures::intern::{Interned, WithStableHash};\n use rustc_hir::def_id::DefId;\n use rustc_macros::HashStable;\n use rustc_serialize::{self, Decodable, Encodable};\n-use rustc_span::DUMMY_SP;\n use smallvec::SmallVec;\n \n use core::intrinsics;\n@@ -541,6 +540,16 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n     }\n \n     fn fold_region(&mut self, r: ty::Region<'tcx>) -> ty::Region<'tcx> {\n+        #[cold]\n+        #[inline(never)]\n+        fn region_param_out_of_range(data: ty::EarlyBoundRegion) -> ! {\n+            bug!(\n+                \"Region parameter out of range when substituting in region {} (index={})\",\n+                data.name,\n+                data.index\n+            )\n+        }\n+\n         // Note: This routine only handles regions that are bound on\n         // type declarations and other outer declarations, not those\n         // bound in *fn types*. Region substitution of the bound\n@@ -551,14 +560,7 @@ impl<'a, 'tcx> TypeFolder<'tcx> for SubstFolder<'a, 'tcx> {\n                 let rk = self.substs.get(data.index as usize).map(|k| k.unpack());\n                 match rk {\n                     Some(GenericArgKind::Lifetime(lt)) => self.shift_region_through_binders(lt),\n-                    _ => {\n-                        let msg = format!(\n-                            \"Region parameter out of range \\\n-                             when substituting in region {} (index={})\",\n-                            data.name, data.index\n-                        );\n-                        span_bug!(DUMMY_SP, \"{}\", msg);\n-                    }\n+                    _ => region_param_out_of_range(data),\n                 }\n             }\n             _ => r,\n@@ -596,67 +598,80 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n         let opt_ty = self.substs.get(p.index as usize).map(|k| k.unpack());\n         let ty = match opt_ty {\n             Some(GenericArgKind::Type(ty)) => ty,\n-            Some(kind) => {\n-                span_bug!(\n-                    DUMMY_SP,\n-                    \"expected type for `{:?}` ({:?}/{}) but found {:?} \\\n-                     when substituting, substs={:?}\",\n-                    p,\n-                    source_ty,\n-                    p.index,\n-                    kind,\n-                    self.substs,\n-                );\n-            }\n-            None => {\n-                span_bug!(\n-                    DUMMY_SP,\n-                    \"type parameter `{:?}` ({:?}/{}) out of range \\\n-                     when substituting, substs={:?}\",\n-                    p,\n-                    source_ty,\n-                    p.index,\n-                    self.substs,\n-                );\n-            }\n+            Some(kind) => self.type_param_expected(p, source_ty, kind),\n+            None => self.type_param_out_of_range(p, source_ty),\n         };\n \n         self.shift_vars_through_binders(ty)\n     }\n \n+    #[cold]\n+    #[inline(never)]\n+    fn type_param_expected(&self, p: ty::ParamTy, ty: Ty<'tcx>, kind: GenericArgKind<'tcx>) -> ! {\n+        bug!(\n+            \"expected type for `{:?}` ({:?}/{}) but found {:?} when substituting, substs={:?}\",\n+            p,\n+            ty,\n+            p.index,\n+            kind,\n+            self.substs,\n+        )\n+    }\n+\n+    #[cold]\n+    #[inline(never)]\n+    fn type_param_out_of_range(&self, p: ty::ParamTy, ty: Ty<'tcx>) -> ! {\n+        bug!(\n+            \"type parameter `{:?}` ({:?}/{}) out of range when substituting, substs={:?}\",\n+            p,\n+            ty,\n+            p.index,\n+            self.substs,\n+        )\n+    }\n+\n     fn const_for_param(&self, p: ParamConst, source_ct: ty::Const<'tcx>) -> ty::Const<'tcx> {\n         // Look up the const in the substitutions. It really should be in there.\n         let opt_ct = self.substs.get(p.index as usize).map(|k| k.unpack());\n         let ct = match opt_ct {\n             Some(GenericArgKind::Const(ct)) => ct,\n-            Some(kind) => {\n-                span_bug!(\n-                    DUMMY_SP,\n-                    \"expected const for `{:?}` ({:?}/{}) but found {:?} \\\n-                     when substituting substs={:?}\",\n-                    p,\n-                    source_ct,\n-                    p.index,\n-                    kind,\n-                    self.substs,\n-                );\n-            }\n-            None => {\n-                span_bug!(\n-                    DUMMY_SP,\n-                    \"const parameter `{:?}` ({:?}/{}) out of range \\\n-                     when substituting substs={:?}\",\n-                    p,\n-                    source_ct,\n-                    p.index,\n-                    self.substs,\n-                );\n-            }\n+            Some(kind) => self.const_param_expected(p, source_ct, kind),\n+            None => self.const_param_out_of_range(p, source_ct),\n         };\n \n         self.shift_vars_through_binders(ct)\n     }\n \n+    #[cold]\n+    #[inline(never)]\n+    fn const_param_expected(\n+        &self,\n+        p: ty::ParamConst,\n+        ct: ty::Const<'tcx>,\n+        kind: GenericArgKind<'tcx>,\n+    ) -> ! {\n+        bug!(\n+            \"expected const for `{:?}` ({:?}/{}) but found {:?} when substituting substs={:?}\",\n+            p,\n+            ct,\n+            p.index,\n+            kind,\n+            self.substs,\n+        )\n+    }\n+\n+    #[cold]\n+    #[inline(never)]\n+    fn const_param_out_of_range(&self, p: ty::ParamConst, ct: ty::Const<'tcx>) -> ! {\n+        bug!(\n+            \"const parameter `{:?}` ({:?}/{}) out of range when substituting substs={:?}\",\n+            p,\n+            ct,\n+            p.index,\n+            self.substs,\n+        )\n+    }\n+\n     /// It is sometimes necessary to adjust the De Bruijn indices during substitution. This occurs\n     /// when we are substituting a type with escaping bound vars into a context where we have\n     /// passed through binders. That's quite a mouthful. Let's see an example:"}]}