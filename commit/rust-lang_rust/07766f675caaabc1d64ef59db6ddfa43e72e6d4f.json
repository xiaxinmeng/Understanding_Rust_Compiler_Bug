{"sha": "07766f675caaabc1d64ef59db6ddfa43e72e6d4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3NzY2ZjY3NWNhYWFiYzFkNjRlZjU5ZGI2ZGRmYTQzZTcyZTZkNGY=", "commit": {"author": {"name": "Zack Weinberg", "email": "zackw@panix.com", "date": "2017-04-13T14:48:09Z"}, "committer": {"name": "Zack Weinberg", "email": "zackw@panix.com", "date": "2017-05-10T13:41:42Z"}, "message": "Revise the eprint(ln)! feature.\n\n * Factor out the nigh-identical bodies of `_print` and `_eprint` to a helper\n   function `print_to` (I was sorely tempted to call it `_doprnt`).\n * Update the issue number for the unstable `eprint` feature.\n * Add entries to the \"unstable book\" for `eprint` and `eprint_internal`.\n * Style corrections to the documentation.", "tree": {"sha": "f7d1f4a1d192f2705668b283b4b35cf69063b38c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7d1f4a1d192f2705668b283b4b35cf69063b38c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07766f675caaabc1d64ef59db6ddfa43e72e6d4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07766f675caaabc1d64ef59db6ddfa43e72e6d4f", "html_url": "https://github.com/rust-lang/rust/commit/07766f675caaabc1d64ef59db6ddfa43e72e6d4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07766f675caaabc1d64ef59db6ddfa43e72e6d4f/comments", "author": {"login": "zackw", "id": 325899, "node_id": "MDQ6VXNlcjMyNTg5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/325899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackw", "html_url": "https://github.com/zackw", "followers_url": "https://api.github.com/users/zackw/followers", "following_url": "https://api.github.com/users/zackw/following{/other_user}", "gists_url": "https://api.github.com/users/zackw/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackw/subscriptions", "organizations_url": "https://api.github.com/users/zackw/orgs", "repos_url": "https://api.github.com/users/zackw/repos", "events_url": "https://api.github.com/users/zackw/events{/privacy}", "received_events_url": "https://api.github.com/users/zackw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zackw", "id": 325899, "node_id": "MDQ6VXNlcjMyNTg5OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/325899?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zackw", "html_url": "https://github.com/zackw", "followers_url": "https://api.github.com/users/zackw/followers", "following_url": "https://api.github.com/users/zackw/following{/other_user}", "gists_url": "https://api.github.com/users/zackw/gists{/gist_id}", "starred_url": "https://api.github.com/users/zackw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zackw/subscriptions", "organizations_url": "https://api.github.com/users/zackw/orgs", "repos_url": "https://api.github.com/users/zackw/repos", "events_url": "https://api.github.com/users/zackw/events{/privacy}", "received_events_url": "https://api.github.com/users/zackw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76127275a09d970169952bcf616f966faa9ed6db", "url": "https://api.github.com/repos/rust-lang/rust/commits/76127275a09d970169952bcf616f966faa9ed6db", "html_url": "https://github.com/rust-lang/rust/commit/76127275a09d970169952bcf616f966faa9ed6db"}], "stats": {"total": 115, "additions": 57, "deletions": 58}, "files": [{"sha": "9229f445297df9814e91ef76a300edd891d4060e", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07766f675caaabc1d64ef59db6ddfa43e72e6d4f/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/07766f675caaabc1d64ef59db6ddfa43e72e6d4f/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=07766f675caaabc1d64ef59db6ddfa43e72e6d4f", "patch": "@@ -130,6 +130,8 @@\n     - [derive_eq](library-features/derive-eq.md)\n     - [discriminant_value](library-features/discriminant-value.md)\n     - [error_type_id](library-features/error-type-id.md)\n+    - [eprint](library-features/eprint.md)\n+    - [eprint_internal](library-features/eprint-internal.md)\n     - [exact_size_is_empty](library-features/exact-size-is-empty.md)\n     - [fd](library-features/fd.md)\n     - [fd_read](library-features/fd-read.md)"}, {"sha": "d3230d8bfa83ee9d40202610074ee0069653e1ba", "filename": "src/doc/unstable-book/src/library-features/eprint-internal.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/07766f675caaabc1d64ef59db6ddfa43e72e6d4f/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Feprint-internal.md", "raw_url": "https://github.com/rust-lang/rust/raw/07766f675caaabc1d64ef59db6ddfa43e72e6d4f/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Feprint-internal.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Feprint-internal.md?ref=07766f675caaabc1d64ef59db6ddfa43e72e6d4f", "patch": "@@ -0,0 +1,5 @@\n+# `eprint_internal`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "69f781b224167df372d1e334b0a4fa67d8f7576f", "filename": "src/doc/unstable-book/src/library-features/eprint.md", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/07766f675caaabc1d64ef59db6ddfa43e72e6d4f/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Feprint.md", "raw_url": "https://github.com/rust-lang/rust/raw/07766f675caaabc1d64ef59db6ddfa43e72e6d4f/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Feprint.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Feprint.md?ref=07766f675caaabc1d64ef59db6ddfa43e72e6d4f", "patch": "@@ -0,0 +1,13 @@\n+# `eprint`\n+\n+The tracking issue for this feature is: [#40528]\n+\n+[#40528]: https://github.com/rust-lang/rust/issues/40528\n+\n+------------------------\n+\n+This feature enables the `eprint!` and `eprintln!` global macros,\n+which are just like `print!` and `println!`, respectively, except that\n+they send output to the standard _error_ stream, rather than standard\n+output.  (`panic!` messages have always been written to standard error.)\n+"}, {"sha": "9320bfe9abee5604fa30174322ccee0d2d51d5f5", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/07766f675caaabc1d64ef59db6ddfa43e72e6d4f/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07766f675caaabc1d64ef59db6ddfa43e72e6d4f/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=07766f675caaabc1d64ef59db6ddfa43e72e6d4f", "patch": "@@ -290,7 +290,7 @@ pub use self::util::{copy, sink, Sink, empty, Empty, repeat, Repeat};\n pub use self::stdio::{stdin, stdout, stderr, _print, Stdin, Stdout, Stderr};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use self::stdio::{StdoutLock, StderrLock, StdinLock};\n-#[unstable(feature = \"eprint\", issue=\"39228\")]\n+#[unstable(feature = \"eprint\", issue=\"40528\")]\n pub use self::stdio::_eprint;\n #[unstable(feature = \"libstd_io_internals\", issue = \"0\")]\n #[doc(no_inline, hidden)]"}, {"sha": "363c99c666e3a2145f2929f01ebcb0a9cfdc6625", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 29, "deletions": 50, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/07766f675caaabc1d64ef59db6ddfa43e72e6d4f/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07766f675caaabc1d64ef59db6ddfa43e72e6d4f/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=07766f675caaabc1d64ef59db6ddfa43e72e6d4f", "patch": "@@ -17,7 +17,7 @@ use io::{self, BufReader, LineWriter};\n use sync::{Arc, Mutex, MutexGuard};\n use sys::stdio;\n use sys_common::remutex::{ReentrantMutex, ReentrantMutexGuard};\n-use thread::LocalKeyState;\n+use thread::{LocalKey, LocalKeyState};\n \n /// Stdout used by print! and println! macros\n thread_local! {\n@@ -659,75 +659,54 @@ pub fn set_print(sink: Option<Box<Write + Send>>) -> Option<Box<Write + Send>> {\n     })\n }\n \n-#[unstable(feature = \"print\",\n-           reason = \"implementation detail which may disappear or be replaced at any time\",\n-           issue = \"0\")]\n-#[doc(hidden)]\n-pub fn _print(args: fmt::Arguments) {\n-    // As an implementation of the `println!` macro, we want to try our best to\n-    // not panic wherever possible and get the output somewhere. There are\n-    // currently two possible vectors for panics we take care of here:\n-    //\n-    // 1. If the TLS key for the local stdout has been destroyed, accessing it\n-    //    would cause a panic. Note that we just lump in the uninitialized case\n-    //    here for convenience, we're not trying to avoid a panic.\n-    // 2. If the local stdout is currently in use (e.g. we're in the middle of\n-    //    already printing) then accessing again would cause a panic.\n-    //\n-    // If, however, the actual I/O causes an error, we do indeed panic.\n-    let result = match LOCAL_STDOUT.state() {\n+/// Write `args` to output stream `local_s` if possible, `global_s`\n+/// otherwise. `label` identifies the stream in a panic message.\n+///\n+/// This function is used to print error messages, so it takes extra\n+/// care to avoid causing a panic when `local_stream` is unusable.\n+/// For instance, if the TLS key for the local stream is uninitialized\n+/// or already destroyed, or if the local stream is locked by another\n+/// thread, it will just fall back to the global stream.\n+///\n+/// However, if the actual I/O causes an error, this function does panic.\n+fn print_to<T>(args: fmt::Arguments,\n+               local_s: &'static LocalKey<RefCell<Option<Box<Write+Send>>>>,\n+               global_s: fn() -> T,\n+               label: &str) where T: Write {\n+    let result = match local_s.state() {\n         LocalKeyState::Uninitialized |\n-        LocalKeyState::Destroyed => stdout().write_fmt(args),\n+        LocalKeyState::Destroyed => global_s().write_fmt(args),\n         LocalKeyState::Valid => {\n-            LOCAL_STDOUT.with(|s| {\n+            local_s.with(|s| {\n                 if let Ok(mut borrowed) = s.try_borrow_mut() {\n                     if let Some(w) = borrowed.as_mut() {\n                         return w.write_fmt(args);\n                     }\n                 }\n-                stdout().write_fmt(args)\n+                global_s().write_fmt(args)\n             })\n         }\n     };\n     if let Err(e) = result {\n-        panic!(\"failed printing to stdout: {}\", e);\n+        panic!(\"failed printing to {}: {}\", label, e);\n     }\n }\n \n+#[unstable(feature = \"print\",\n+           reason = \"implementation detail which may disappear or be replaced at any time\",\n+           issue = \"0\")]\n+#[doc(hidden)]\n+pub fn _print(args: fmt::Arguments) {\n+    print_to(args, &LOCAL_STDOUT, stdout, \"stdout\");\n+}\n+\n #[unstable(feature = \"eprint_internal\",\n            reason = \"implementation detail which may disappear or be replaced at any time\",\n            issue = \"0\")]\n #[doc(hidden)]\n pub fn _eprint(args: fmt::Arguments) {\n-    // As an implementation of the `eprintln!` macro, we want to try our best to\n-    // not panic wherever possible and get the output somewhere. There are\n-    // currently two possible vectors for panics we take care of here:\n-    //\n-    // 1. If the TLS key for the local stderr has been destroyed, accessing it\n-    //    would cause a panic. Note that we just lump in the uninitialized case\n-    //    here for convenience, we're not trying to avoid a panic.\n-    // 2. If the local stderr is currently in use (e.g. we're in the middle of\n-    //    already printing) then accessing again would cause a panic.\n-    //\n-    // If, however, the actual I/O causes an error, we do indeed panic.\n     use panicking::LOCAL_STDERR;\n-    let result = match LOCAL_STDERR.state() {\n-        LocalKeyState::Uninitialized |\n-        LocalKeyState::Destroyed => stderr().write_fmt(args),\n-        LocalKeyState::Valid => {\n-            LOCAL_STDERR.with(|s| {\n-                if let Ok(mut borrowed) = s.try_borrow_mut() {\n-                    if let Some(w) = borrowed.as_mut() {\n-                        return w.write_fmt(args);\n-                    }\n-                }\n-                stderr().write_fmt(args)\n-            })\n-        }\n-    };\n-    if let Err(e) = result {\n-        panic!(\"failed printing to stderr: {}\", e);\n-    }\n+    print_to(args, &LOCAL_STDERR, stderr, \"stderr\");\n }\n \n #[cfg(test)]"}, {"sha": "98c635d127f7dee589272a35122e72c4880f6f52", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/07766f675caaabc1d64ef59db6ddfa43e72e6d4f/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07766f675caaabc1d64ef59db6ddfa43e72e6d4f/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=07766f675caaabc1d64ef59db6ddfa43e72e6d4f", "patch": "@@ -113,7 +113,7 @@ macro_rules! print {\n ///\n /// # Panics\n ///\n-/// Panics if writing to `io::stdout()` fails.\n+/// Panics if writing to `io::stdout` fails.\n ///\n /// # Examples\n ///\n@@ -133,17 +133,17 @@ macro_rules! println {\n /// Macro for printing to the standard error.\n ///\n /// Equivalent to the `print!` macro, except that output goes to\n-/// `io::stderr()` instead of `io::stdout()`.  See `print!` for\n+/// `io::stderr` instead of `io::stdout`.  See `print!` for\n /// example usage.\n ///\n /// Use `eprint!` only for error and progress messages.  Use `print!`\n /// instead for the primary output of your program.\n ///\n /// # Panics\n ///\n-/// Panics if writing to `io::stderr()` fails.\n+/// Panics if writing to `io::stderr` fails.\n #[macro_export]\n-#[unstable(feature = \"eprint\", issue=\"39228\")]\n+#[unstable(feature = \"eprint\", issue=\"40528\")]\n #[allow_internal_unstable]\n macro_rules! eprint {\n     ($($arg:tt)*) => ($crate::io::_eprint(format_args!($($arg)*)));\n@@ -152,17 +152,17 @@ macro_rules! eprint {\n /// Macro for printing to the standard error, with a newline.\n ///\n /// Equivalent to the `println!` macro, except that output goes to\n-/// `io::stderr()` instead of `io::stdout()`.  See `println!` for\n+/// `io::stderr` instead of `io::stdout`.  See `println!` for\n /// example usage.\n ///\n /// Use `eprintln!` only for error and progress messages.  Use `println!`\n /// instead for the primary output of your program.\n ///\n /// # Panics\n ///\n-/// Panics if writing to `io::stderr()` fails.\n+/// Panics if writing to `io::stderr` fails.\n #[macro_export]\n-#[unstable(feature = \"eprint\", issue=\"39228\")]\n+#[unstable(feature = \"eprint\", issue=\"40528\")]\n macro_rules! eprintln {\n     () => (eprint!(\"\\n\"));\n     ($fmt:expr) => (eprint!(concat!($fmt, \"\\n\")));"}]}