{"sha": "29ad8e15a2b7e2024941d74ea4ce261cb501ded9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5YWQ4ZTE1YTJiN2UyMDI0OTQxZDc0ZWE0Y2UyNjFjYjUwMWRlZDk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-18T21:23:37Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-18T23:27:48Z"}, "message": "std::rt: Improve the rtabort! macro", "tree": {"sha": "24ff9de3f6473eba4f9bc536f572b4ea9d678027", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24ff9de3f6473eba4f9bc536f572b4ea9d678027"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29ad8e15a2b7e2024941d74ea4ce261cb501ded9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29ad8e15a2b7e2024941d74ea4ce261cb501ded9", "html_url": "https://github.com/rust-lang/rust/commit/29ad8e15a2b7e2024941d74ea4ce261cb501ded9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29ad8e15a2b7e2024941d74ea4ce261cb501ded9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b2dc520340103491088616ba4f58095948f5821", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b2dc520340103491088616ba4f58095948f5821", "html_url": "https://github.com/rust-lang/rust/commit/5b2dc520340103491088616ba4f58095948f5821"}], "stats": {"total": 87, "additions": 72, "deletions": 15}, "files": [{"sha": "7748c43efcd28b7eddf8fd356061d9e4f2c0a715", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/29ad8e15a2b7e2024941d74ea4ce261cb501ded9/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad8e15a2b7e2024941d74ea4ce261cb501ded9/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=29ad8e15a2b7e2024941d74ea4ce261cb501ded9", "patch": "@@ -10,18 +10,16 @@\n \n #[macro_escape];\n \n+macro_rules! rterrln (\n+    ($( $arg:expr),+) => ( {\n+        ::rt::util::dumb_println(fmt!( $($arg),+ ));\n+    } )\n+)\n+\n // Some basic logging\n macro_rules! rtdebug_ (\n     ($( $arg:expr),+) => ( {\n-        dumb_println(fmt!( $($arg),+ ));\n-\n-        fn dumb_println(s: &str) {\n-            use io::WriterUtil;\n-            let dbg = ::libc::STDERR_FILENO as ::io::fd_t;\n-            dbg.write_str(s);\n-            dbg.write_str(\"\\n\");\n-        }\n-\n+        rterrln!( $($arg),+ )\n     } )\n )\n \n@@ -41,8 +39,7 @@ macro_rules! rtassert (\n \n macro_rules! rtabort(\n     ($( $msg:expr),+) => ( {\n-        rtdebug!($($msg),+);\n-        ::rt::util::abort();\n+        ::rt::util::abort(fmt!($($msg),+));\n     } )\n )\n "}, {"sha": "e89df2b1c93f5bcb7aec84c98c0cdae9a7e6466b", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/29ad8e15a2b7e2024941d74ea4ce261cb501ded9/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad8e15a2b7e2024941d74ea4ce261cb501ded9/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=29ad8e15a2b7e2024941d74ea4ce261cb501ded9", "patch": "@@ -82,8 +82,7 @@ pub fn cleanup() {\n         let count_ptr = exchange_count_ptr();\n         let allocations = atomic_load(&*count_ptr);\n         if allocations != 0 {\n-            rtabort!(\"exchange heap not empty on exit\\\n-                    %i dangling allocations\", allocations);\n+            rtabort!(\"exchange heap not empty on exit - %i dangling allocations\", allocations);\n         }\n     }\n }"}, {"sha": "904b2f8bbb932a254daafd57c1e636fa98ac3ce3", "filename": "src/libstd/rt/util.rs", "status": "modified", "additions": 63, "deletions": 2, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/29ad8e15a2b7e2024941d74ea4ce261cb501ded9/src%2Flibstd%2Frt%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ad8e15a2b7e2024941d74ea4ce261cb501ded9/src%2Flibstd%2Frt%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Futil.rs?ref=29ad8e15a2b7e2024941d74ea4ce261cb501ded9", "patch": "@@ -8,7 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use container::Container;\n+use iterator::IteratorUtil;\n use libc;\n+use str::StrSlice;\n \n /// Get the number of cores available\n pub fn num_cpus() -> uint {\n@@ -21,6 +24,64 @@ pub fn num_cpus() -> uint {\n     }\n }\n \n-pub fn abort() -> ! {\n+pub fn dumb_println(s: &str) {\n+    use io::WriterUtil;\n+    let dbg = ::libc::STDERR_FILENO as ::io::fd_t;\n+    dbg.write_str(s);\n+    dbg.write_str(\"\\n\");\n+}\n+\n+pub fn abort(msg: &str) -> ! {\n+    let msg = if !msg.is_empty() { msg } else { \"aborted\" };\n+    let hash = msg.iter().fold(0, |accum, val| accum + (val as uint) );\n+    let quote = match hash % 10 {\n+        0 => \"\n+It was from the artists and poets that the pertinent answers came, and I\n+know that panic would have broken loose had they been able to compare notes.\n+As it was, lacking their original letters, I half suspected the compiler of\n+having asked leading questions, or of having edited the correspondence in\n+corroboration of what he had latently resolved to see.\",\n+        1 => \"\n+There are not many persons who know what wonders are opened to them in the\n+stories and visions of their youth; for when as children we listen and dream,\n+we think but half-formed thoughts, and when as men we try to remember, we are\n+dulled and prosaic with the poison of life. But some of us awake in the night\n+with strange phantasms of enchanted hills and gardens, of fountains that sing\n+in the sun, of golden cliffs overhanging murmuring seas, of plains that stretch\n+down to sleeping cities of bronze and stone, and of shadowy companies of heroes\n+that ride caparisoned white horses along the edges of thick forests; and then\n+we know that we have looked back through the ivory gates into that world of\n+wonder which was ours before we were wise and unhappy.\",\n+        2 => \"\n+Instead of the poems I had hoped for, there came only a shuddering blackness\n+and ineffable loneliness; and I saw at last a fearful truth which no one had\n+ever dared to breathe before \u2014 the unwhisperable secret of secrets \u2014 The fact\n+that this city of stone and stridor is not a sentient perpetuation of Old New\n+York as London is of Old London and Paris of Old Paris, but that it is in fact\n+quite dead, its sprawling body imperfectly embalmed and infested with queer\n+animate things which have nothing to do with it as it was in life.\",\n+        3 => \"\n+The ocean ate the last of the land and poured into the smoking gulf, thereby\n+giving up all it had ever conquered. From the new-flooded lands it flowed\n+again, uncovering death and decay; and from its ancient and immemorial bed it\n+trickled loathsomely, uncovering nighted secrets of the years when Time was\n+young and the gods unborn. Above the waves rose weedy remembered spires. The\n+moon laid pale lilies of light on dead London, and Paris stood up from its damp\n+grave to be sanctified with star-dust. Then rose spires and monoliths that were\n+weedy but not remembered; terrible spires and monoliths of lands that men never\n+knew were lands...\",\n+        4 => \"\n+There was a night when winds from unknown spaces whirled us irresistibly into\n+limitless vacum beyond all thought and entity. Perceptions of the most\n+maddeningly untransmissible sort thronged upon us; perceptions of infinity\n+which at the time convulsed us with joy, yet which are now partly lost to my\n+memory and partly incapable of presentation to others.\",\n+        _ => \"You've met with a terrible fate, haven't you?\"\n+    };\n+    rterrln!(\"%s\", \"\");\n+    rterrln!(\"%s\", quote);\n+    rterrln!(\"%s\", \"\");\n+    rterrln!(\"fatal runtime error: %s\", msg);\n+\n     unsafe { libc::abort(); }\n-}\n\\ No newline at end of file\n+}"}]}