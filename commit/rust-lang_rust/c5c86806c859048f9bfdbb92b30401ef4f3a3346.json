{"sha": "c5c86806c859048f9bfdbb92b30401ef4f3a3346", "node_id": "C_kwDOAAsO6NoAKGM1Yzg2ODA2Yzg1OTA0OGY5YmZkYmI5MmIzMDQwMWVmNGYzYTMzNDY", "commit": {"author": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-09-29T14:31:03Z"}, "committer": {"name": "Jakub Ber\u00e1nek", "email": "berykubik@gmail.com", "date": "2022-10-23T11:48:03Z"}, "message": "Introduce dedicated `-Zdylib-lto` flag for enabling LTO on `dylib`s", "tree": {"sha": "80bd0586eb361e26c5f7f826ecc4f39f3eec9ef7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80bd0586eb361e26c5f7f826ecc4f39f3eec9ef7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c5c86806c859048f9bfdbb92b30401ef4f3a3346", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQGzBAABCgAdFiEEzFQynJm4WzBnfhz8kJzQ0mSDUWsFAmNVKfMACgkQkJzQ0mSD\nUWuIwAwAy5lDTl8+6euqv2NnUxx135ZCC7saNA7krI8mz2knsstr4ACWIMwKRZeU\nrr07MDgnz0eUjy80DSN9Ev58F1x9sE9sKXGVe5CIsVnjym7TFwwWt3acSTELQjnQ\n4YaPTBct5OWlHnSX+JfAt6D+nX8VEkLlbFMPRkv1kzKHxF5dOEnapgNZLNT/8VhY\nz78tS9Js62l+Cx6MLNgYq2cK0tjQ8UeK6f/KSyzapqg9etZ0hF5JZVpFWySUGaNZ\ncSyJ5+e+izLPwNFKwpU5nnfFmQD8aUaxGVjpVpNy6gV0xD9tj9uCEZZjn1DU9K4l\nMLm9JYjJ2urM29hJsWFpiAEOwUIIX3R5v1jK01Dd4d3DHTm+DB7uJFZAeuNe/QwK\nYK19SqXJIMeMb0nJFlJH2D9vzqh3mmuK/NkjE1qMXFFHwDbjEdZWZLwa+FodYzJ9\n4fCsXcyTr+U5eZzewZrM/dfrQBiJzjEhG0LBGfV8UJrckfZhrkYpQTfjx4ajMn/p\nK9YKlrLq\n=J1CA\n-----END PGP SIGNATURE-----", "payload": "tree 80bd0586eb361e26c5f7f826ecc4f39f3eec9ef7\nparent cba16819a1aa2f99c861eba907847db39fea06c5\nauthor Jakub Ber\u00e1nek <berykubik@gmail.com> 1664461863 +0200\ncommitter Jakub Ber\u00e1nek <berykubik@gmail.com> 1666525683 +0200\n\nIntroduce dedicated `-Zdylib-lto` flag for enabling LTO on `dylib`s\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c5c86806c859048f9bfdbb92b30401ef4f3a3346", "html_url": "https://github.com/rust-lang/rust/commit/c5c86806c859048f9bfdbb92b30401ef4f3a3346", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c5c86806c859048f9bfdbb92b30401ef4f3a3346/comments", "author": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kobzol", "id": 4539057, "node_id": "MDQ6VXNlcjQ1MzkwNTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4539057?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kobzol", "html_url": "https://github.com/Kobzol", "followers_url": "https://api.github.com/users/Kobzol/followers", "following_url": "https://api.github.com/users/Kobzol/following{/other_user}", "gists_url": "https://api.github.com/users/Kobzol/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kobzol/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kobzol/subscriptions", "organizations_url": "https://api.github.com/users/Kobzol/orgs", "repos_url": "https://api.github.com/users/Kobzol/repos", "events_url": "https://api.github.com/users/Kobzol/events{/privacy}", "received_events_url": "https://api.github.com/users/Kobzol/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cba16819a1aa2f99c861eba907847db39fea06c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/cba16819a1aa2f99c861eba907847db39fea06c5", "html_url": "https://github.com/rust-lang/rust/commit/cba16819a1aa2f99c861eba907847db39fea06c5"}], "stats": {"total": 79, "additions": 66, "deletions": 13}, "files": [{"sha": "a49cc7f8d662ddd427334895ca2a13e2eb582e78", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c5c86806c859048f9bfdbb92b30401ef4f3a3346/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c86806c859048f9bfdbb92b30401ef4f3a3346/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=c5c86806c859048f9bfdbb92b30401ef4f3a3346", "patch": "@@ -82,10 +82,24 @@ fn prepare_lto(\n                 );\n                 return Err(e);\n             } else if *crate_type == CrateType::Dylib {\n-                diag_handler.warn(\"LTO with dylibs may not be as effective\");\n+                if !cgcx.opts.unstable_opts.dylib_lto {\n+                    return Err(diag_handler\n+                        .fatal(\"lto cannot be used for `dylib` crate type without `-Zdylib-lto`\"));\n+                }\n             }\n         }\n \n+        if cgcx.opts.cg.prefer_dynamic && !cgcx.opts.unstable_opts.dylib_lto {\n+            diag_handler\n+                .struct_err(\"cannot prefer dynamic linking when performing LTO\")\n+                .note(\n+                    \"only 'staticlib', 'bin', and 'cdylib' outputs are \\\n+                               supported with LTO\",\n+                )\n+                .emit();\n+            return Err(FatalError);\n+        }\n+\n         for &(cnum, ref path) in cgcx.each_linked_rlib_for_lto.iter() {\n             let exported_symbols =\n                 cgcx.exported_symbols.as_ref().expect(\"needs exported symbols for LTO\");"}, {"sha": "a0b5e3b6daf44ee9e364d9896a76d50b872e6798", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c5c86806c859048f9bfdbb92b30401ef4f3a3346/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c86806c859048f9bfdbb92b30401ef4f3a3346/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=c5c86806c859048f9bfdbb92b30401ef4f3a3346", "patch": "@@ -39,6 +39,7 @@ use cc::windows_registry;\n use regex::Regex;\n use tempfile::Builder as TempFileBuilder;\n \n+use itertools::Itertools;\n use std::borrow::Borrow;\n use std::cell::OnceCell;\n use std::collections::BTreeSet;\n@@ -49,7 +50,6 @@ use std::ops::Deref;\n use std::path::{Path, PathBuf};\n use std::process::{ExitStatus, Output, Stdio};\n use std::{env, fmt, fs, io, mem, str};\n-use itertools::Itertools;\n \n pub fn ensure_removed(diag_handler: &Handler, path: &Path) {\n     if let Err(e) = fs::remove_file(path) {\n@@ -219,10 +219,15 @@ pub fn each_linked_rlib(\n     let lto_active = matches!(sess.lto(), Lto::Fat | Lto::Thin);\n     if lto_active {\n         for combination in info.dependency_formats.iter().combinations(2) {\n-            let (ty1, list1) = combination[0];\n-            let (ty2, list2) = combination[1];\n+            let (ty1, list1) = &combination[0];\n+            let (ty2, list2) = &combination[1];\n             if list1 != list2 {\n-                return Err(format!(\"{ty1:?} and {ty2:?} do not have equivalent dependency formats (`{list1:?}` vs `{list2:?}`)\"));\n+                return Err(errors::LinkRlibError::IncompatibleDependencyFormats {\n+                    ty1: format!(\"{ty1:?}\"),\n+                    ty2: format!(\"{ty2:?}\"),\n+                    list1: format!(\"{list1:?}\"),\n+                    list2: format!(\"{list2:?}\"),\n+                });\n             }\n         }\n     }"}, {"sha": "ebb531f1c43a5e21e9d89c04bd1fc150ec6cbeba", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c5c86806c859048f9bfdbb92b30401ef4f3a3346/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c86806c859048f9bfdbb92b30401ef4f3a3346/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=c5c86806c859048f9bfdbb92b30401ef4f3a3346", "patch": "@@ -127,6 +127,9 @@ pub enum LinkRlibError {\n \n     #[diag(codegen_ssa_rlib_not_found)]\n     NotFound { crate_name: Symbol },\n+\n+    #[diag(codegen_ssa_rlib_incompatible_dependency_formats)]\n+    IncompatibleDependencyFormats { ty1: String, ty2: String, list1: String, list2: String },\n }\n \n pub struct ThorinErrorWrapper(pub thorin::Error);"}, {"sha": "966a421bcf08c38fb06637a3837cfc78faa211eb", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_ssa.ftl", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c86806c859048f9bfdbb92b30401ef4f3a3346/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c5c86806c859048f9bfdbb92b30401ef4f3a3346/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl?ref=c5c86806c859048f9bfdbb92b30401ef4f3a3346", "patch": "@@ -34,6 +34,8 @@ codegen_ssa_rlib_only_rmeta_found = could not find rlib for: `{$crate_name}`, fo\n \n codegen_ssa_rlib_not_found = could not find rlib for: `{$crate_name}`\n \n+codegen_ssa_rlib_incompatible_dependency_formats = `{$ty1}` and `{$ty2}` do not have equivalent dependency formats (`{$list1}` vs `{$list2}`)\n+\n codegen_ssa_linking_failed = linking with `{$linker_path}` failed: {$exit_status}\n \n codegen_ssa_extern_funcs_not_found = some `extern` functions couldn't be found; some native libraries may need to be installed or have their path specified"}, {"sha": "eb8e65a6d59d38819736f8ee02df36b805116711", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5c86806c859048f9bfdbb92b30401ef4f3a3346/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c86806c859048f9bfdbb92b30401ef4f3a3346/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=c5c86806c859048f9bfdbb92b30401ef4f3a3346", "patch": "@@ -648,6 +648,7 @@ fn test_unstable_options_tracking_hash() {\n     untracked!(dump_mir_dir, String::from(\"abc\"));\n     untracked!(dump_mir_exclude_pass_number, true);\n     untracked!(dump_mir_graphviz, true);\n+    untracked!(dylib_lto, true);\n     untracked!(emit_stack_sizes, true);\n     untracked!(future_incompat_test, true);\n     untracked!(hir_stats, true);"}, {"sha": "3f234a47a3d86bdacdc7c108ffb7070bf42814c9", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c5c86806c859048f9bfdbb92b30401ef4f3a3346/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c86806c859048f9bfdbb92b30401ef4f3a3346/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=c5c86806c859048f9bfdbb92b30401ef4f3a3346", "patch": "@@ -1295,6 +1295,8 @@ options! {\n         an additional `.html` file showing the computed coverage spans.\"),\n     dwarf_version: Option<u32> = (None, parse_opt_number, [TRACKED],\n         \"version of DWARF debug information to emit (default: 2 or 4, depending on platform)\"),\n+    dylib_lto: bool = (false, parse_bool, [UNTRACKED],\n+        \"enables LTO for dylib crate type\"),\n     emit_stack_sizes: bool = (false, parse_bool, [UNTRACKED],\n         \"emit a section containing stack size metadata (default: no)\"),\n     emit_thin_lto: bool = (true, parse_bool, [TRACKED],"}, {"sha": "a46813e4d7a3b825475b743466ee5650ab0174d5", "filename": "config.toml.example", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c5c86806c859048f9bfdbb92b30401ef4f3a3346/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/c5c86806c859048f9bfdbb92b30401ef4f3a3346/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=c5c86806c859048f9bfdbb92b30401ef4f3a3346", "patch": "@@ -638,10 +638,10 @@ changelog-seen = 2\n # If an explicit setting is given, it will be used for all parts of the codebase.\n #new-symbol-mangling = true|false (see comment)\n \n-# Select LTO mode that will be used for compiling rustc. By default, thin local LTO (LTO within a\n-# single crate) is used. You can also select \"thin\" or \"fat\" to apply Thin/Fat LTO on the\n-# `rustc_driver` dylib.\n-#lto = thin-local\n+# Select LTO mode that will be used for compiling rustc. By default, thin local LTO\n+# (LTO within a single crate) is used (like for any Rust crate). You can also select\n+# \"thin\" or \"fat\" to apply Thin/Fat LTO to the `rustc_driver` dylib.\n+#lto = \"thin-local\"\n \n # =============================================================================\n # Options for specific targets"}, {"sha": "9cc119d3301ac89da60d61fe8435c43218ba7434", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c5c86806c859048f9bfdbb92b30401ef4f3a3346/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c86806c859048f9bfdbb92b30401ef4f3a3346/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=c5c86806c859048f9bfdbb92b30401ef4f3a3346", "patch": "@@ -701,6 +701,28 @@ impl Step for Rustc {\n             ));\n         }\n \n+        // cfg(bootstrap): remove if condition once the bootstrap compiler supports dylib LTO\n+        if compiler.stage != 0 {\n+            match builder.config.rust_lto {\n+                RustcLto::Thin | RustcLto::Fat => {\n+                    // Since using LTO for optimizing dylibs is currently experimental,\n+                    // we need to pass -Zdylib-lto.\n+                    cargo.rustflag(\"-Zdylib-lto\");\n+                    // Cargo by default passes `-Cembed-bitcode=no` and doesn't pass `-Clto` when\n+                    // compiling dylibs (and their dependencies), even when LTO is enabled for the\n+                    // crate. Therefore, we need to override `-Clto` and `-Cembed-bitcode` here.\n+                    let lto_type = match builder.config.rust_lto {\n+                        RustcLto::Thin => \"thin\",\n+                        RustcLto::Fat => \"fat\",\n+                        _ => unreachable!(),\n+                    };\n+                    cargo.rustflag(&format!(\"-Clto={}\", lto_type));\n+                    cargo.rustflag(\"-Cembed-bitcode=yes\");\n+                }\n+                RustcLto::ThinLocal => { /* Do nothing, this is the default */ }\n+            }\n+        }\n+\n         builder.info(&format!(\n             \"Building stage{} compiler artifacts ({} -> {})\",\n             compiler.stage, &compiler.host, target"}, {"sha": "a8c403675d82197d618728a179e4e5f3e3a662f1", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c5c86806c859048f9bfdbb92b30401ef4f3a3346/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c5c86806c859048f9bfdbb92b30401ef4f3a3346/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=c5c86806c859048f9bfdbb92b30401ef4f3a3346", "patch": "@@ -321,12 +321,12 @@ impl SplitDebuginfo {\n }\n \n /// LTO mode used for compiling rustc itself.\n-#[derive(Default)]\n+#[derive(Default, Clone)]\n pub enum RustcLto {\n     #[default]\n     ThinLocal,\n     Thin,\n-    Fat\n+    Fat,\n }\n \n impl std::str::FromStr for RustcLto {\n@@ -1201,8 +1201,7 @@ impl Config {\n             config.rust_lto = rust\n                 .lto\n                 .as_deref()\n-                .map(RustcLto::from_str)\n-                .map(|v| v.expect(\"invalid value for rust.lto\"))\n+                .map(|value| RustcLto::from_str(value).unwrap())\n                 .unwrap_or_default();\n         } else {\n             config.rust_profile_use = flags.rust_profile_use;"}, {"sha": "f69ea334f5a3af071ab80b122e4a334e16e5f1aa", "filename": "src/doc/unstable-book/src/compiler-flags/dylib-lto.md", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c5c86806c859048f9bfdbb92b30401ef4f3a3346/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdylib-lto.md", "raw_url": "https://github.com/rust-lang/rust/raw/c5c86806c859048f9bfdbb92b30401ef4f3a3346/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdylib-lto.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fdylib-lto.md?ref=c5c86806c859048f9bfdbb92b30401ef4f3a3346", "patch": "@@ -0,0 +1,4 @@\n+## `dylib-lto`\n+\n+This option enables using LTO for the `dylib` crate type. This is currently only used for compiling\n+`rustc` itself (more specifically, the `librustc_driver` dylib)."}, {"sha": "46f11d2e5d1ebc6baa3b8046d67905b1d5f7e7ad", "filename": "src/test/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c5c86806c859048f9bfdbb92b30401ef4f3a3346/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/c5c86806c859048f9bfdbb92b30401ef4f3a3346/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fz-help.stdout?ref=c5c86806c859048f9bfdbb92b30401ef4f3a3346", "patch": "@@ -36,6 +36,7 @@\n     -Z                       dump-mir-graphviz=val -- in addition to `.mir` files, create graphviz `.dot` files (and with `-Z instrument-coverage`, also create a `.dot` file for the MIR-derived coverage graph) (default: no)\n     -Z                       dump-mir-spanview=val -- in addition to `.mir` files, create `.html` files to view spans for all `statement`s (including terminators), only `terminator` spans, or computed `block` spans (one span encompassing a block's terminator and all statements). If `-Z instrument-coverage` is also enabled, create an additional `.html` file showing the computed coverage spans.\n     -Z                           dwarf-version=val -- version of DWARF debug information to emit (default: 2 or 4, depending on platform)\n+    -Z                               dylib-lto=val -- enables LTO for dylib crate type\n     -Z                        emit-stack-sizes=val -- emit a section containing stack size metadata (default: no)\n     -Z                           emit-thin-lto=val -- emit the bc module with thin LTO info (default: yes)\n     -Z               export-executable-symbols=val -- export symbols from executables, as if they were dynamic libraries"}]}