{"sha": "d31d8a9a919b705fb8d22ba99a693d9f96b8bdd5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMWQ4YTlhOTE5YjcwNWZiOGQyMmJhOTlhNjkzZDlmOTZiOGJkZDU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-04T17:19:40Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-04T17:19:40Z"}, "message": "Auto merge of #32039 - arielb1:pat-enum, r=nagisa\n\nFixes #32004\n\nr? @eddyb", "tree": {"sha": "09f246a100731ddd57a4cdd8906a2deba4e78f6f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/09f246a100731ddd57a4cdd8906a2deba4e78f6f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d31d8a9a919b705fb8d22ba99a693d9f96b8bdd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d31d8a9a919b705fb8d22ba99a693d9f96b8bdd5", "html_url": "https://github.com/rust-lang/rust/commit/d31d8a9a919b705fb8d22ba99a693d9f96b8bdd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d31d8a9a919b705fb8d22ba99a693d9f96b8bdd5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c97524bef9e59a80875110b402b3fc8c139d4d64", "url": "https://api.github.com/repos/rust-lang/rust/commits/c97524bef9e59a80875110b402b3fc8c139d4d64", "html_url": "https://github.com/rust-lang/rust/commit/c97524bef9e59a80875110b402b3fc8c139d4d64"}, {"sha": "f40d12f1809f6fbc9bb53fa49f92665e652d314b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f40d12f1809f6fbc9bb53fa49f92665e652d314b", "html_url": "https://github.com/rust-lang/rust/commit/f40d12f1809f6fbc9bb53fa49f92665e652d314b"}], "stats": {"total": 105, "additions": 58, "deletions": 47}, "files": [{"sha": "548f5ee5e949dbcbdd37f77b4772cc4e553d331e", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 29, "deletions": 47, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/d31d8a9a919b705fb8d22ba99a693d9f96b8bdd5/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31d8a9a919b705fb8d22ba99a693d9f96b8bdd5/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=d31d8a9a919b705fb8d22ba99a693d9f96b8bdd5", "patch": "@@ -203,7 +203,7 @@ pub fn check_pat<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n             check_pat_enum(pcx, pat, path, subpats.as_ref().map(|v| &v[..]), expected, true);\n         }\n         PatKind::Path(ref path) => {\n-            check_pat_enum(pcx, pat, path, None, expected, false);\n+            check_pat_enum(pcx, pat, path, Some(&[]), expected, false);\n         }\n         PatKind::QPath(ref qself, ref path) => {\n             let self_ty = fcx.to_ty(&qself.ty);\n@@ -597,12 +597,12 @@ fn bad_struct_kind_err(sess: &Session, pat: &hir::Pat, path: &hir::Path, lint: b\n     }\n }\n \n-pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n-                                pat: &hir::Pat,\n-                                path: &hir::Path,\n-                                subpats: Option<&'tcx [P<hir::Pat>]>,\n-                                expected: Ty<'tcx>,\n-                                is_tuple_struct_pat: bool)\n+fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n+                            pat: &hir::Pat,\n+                            path: &hir::Path,\n+                            subpats: Option<&'tcx [P<hir::Pat>]>,\n+                            expected: Ty<'tcx>,\n+                            is_tuple_struct_pat: bool)\n {\n     // Typecheck the path.\n     let fcx = pcx.fcx;\n@@ -685,59 +685,41 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n     demand::eqtype(fcx, pat.span, expected, pat_ty);\n \n     let real_path_ty = fcx.node_ty(pat.id);\n-    let (arg_tys, kind_name): (Vec<_>, &'static str) = match real_path_ty.sty {\n+    let (kind_name, variant, expected_substs) = match real_path_ty.sty {\n         ty::TyEnum(enum_def, expected_substs) => {\n             let variant = enum_def.variant_of_def(def);\n-            if variant.kind() == ty::VariantKind::Struct {\n-                report_bad_struct_kind(false);\n-                return;\n-            }\n-            if is_tuple_struct_pat && variant.kind() != ty::VariantKind::Tuple {\n-                // Matching unit variants with tuple variant patterns (`UnitVariant(..)`)\n-                // is allowed for backward compatibility.\n-                let is_special_case = variant.kind() == ty::VariantKind::Unit;\n-                report_bad_struct_kind(is_special_case);\n-                if !is_special_case {\n-                    return\n-                }\n-            }\n-            (variant.fields\n-                    .iter()\n-                    .map(|f| fcx.instantiate_type_scheme(pat.span,\n-                                                         expected_substs,\n-                                                         &f.unsubst_ty()))\n-                    .collect(),\n-             \"variant\")\n+            (\"variant\", variant, expected_substs)\n         }\n         ty::TyStruct(struct_def, expected_substs) => {\n             let variant = struct_def.struct_variant();\n-            if is_tuple_struct_pat && variant.kind() != ty::VariantKind::Tuple {\n-                // Matching unit structs with tuple variant patterns (`UnitVariant(..)`)\n-                // is allowed for backward compatibility.\n-                let is_special_case = variant.kind() == ty::VariantKind::Unit;\n-                report_bad_struct_kind(is_special_case);\n-                return;\n-            }\n-            (variant.fields\n-                    .iter()\n-                    .map(|f| fcx.instantiate_type_scheme(pat.span,\n-                                                         expected_substs,\n-                                                         &f.unsubst_ty()))\n-                    .collect(),\n-             \"struct\")\n+            (\"struct\", variant, expected_substs)\n         }\n         _ => {\n             report_bad_struct_kind(false);\n             return;\n         }\n     };\n \n+    match (is_tuple_struct_pat, variant.kind()) {\n+        (true, ty::VariantKind::Unit) => {\n+            // Matching unit structs with tuple variant patterns (`UnitVariant(..)`)\n+            // is allowed for backward compatibility.\n+            report_bad_struct_kind(true);\n+        }\n+        (_, ty::VariantKind::Struct) => {\n+            report_bad_struct_kind(false);\n+            return\n+        }\n+        _ => {}\n+    }\n+\n     if let Some(subpats) = subpats {\n-        if subpats.len() == arg_tys.len() {\n-            for (subpat, arg_ty) in subpats.iter().zip(arg_tys) {\n-                check_pat(pcx, &subpat, arg_ty);\n+        if subpats.len() == variant.fields.len() {\n+            for (subpat, field) in subpats.iter().zip(&variant.fields) {\n+                let field_ty = fcx.field_ty(subpat.span, field, expected_substs);\n+                check_pat(pcx, &subpat, field_ty);\n             }\n-        } else if arg_tys.is_empty() {\n+        } else if variant.fields.is_empty() {\n             span_err!(tcx.sess, pat.span, E0024,\n                       \"this pattern has {} field{}, but the corresponding {} has no fields\",\n                       subpats.len(), if subpats.len() == 1 {\"\"} else {\"s\"}, kind_name);\n@@ -750,7 +732,7 @@ pub fn check_pat_enum<'a, 'tcx>(pcx: &pat_ctxt<'a, 'tcx>,\n                       \"this pattern has {} field{}, but the corresponding {} has {} field{}\",\n                       subpats.len(), if subpats.len() == 1 {\"\"} else {\"s\"},\n                       kind_name,\n-                      arg_tys.len(), if arg_tys.len() == 1 {\"\"} else {\"s\"});\n+                      variant.fields.len(), if variant.fields.len() == 1 {\"\"} else {\"s\"});\n \n             for pat in subpats {\n                 check_pat(pcx, &pat, tcx.types.err);"}, {"sha": "0227a80fd75d38dea7d279d795450743dc086ecf", "filename": "src/test/compile-fail/issue-32004.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/d31d8a9a919b705fb8d22ba99a693d9f96b8bdd5/src%2Ftest%2Fcompile-fail%2Fissue-32004.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d31d8a9a919b705fb8d22ba99a693d9f96b8bdd5/src%2Ftest%2Fcompile-fail%2Fissue-32004.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-32004.rs?ref=d31d8a9a919b705fb8d22ba99a693d9f96b8bdd5", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+enum Foo {\n+    Bar(i32),\n+    Baz\n+}\n+\n+struct S;\n+\n+fn main() {\n+    match Foo::Baz {\n+        Foo::Bar => {}\n+        //~^ ERROR this pattern has 0 fields, but the corresponding variant\n+        _ => {}\n+    }\n+\n+    match S {\n+        S(()) => {}\n+        //~^ ERROR this pattern has 1 field, but the corresponding struct\n+    }\n+}"}]}