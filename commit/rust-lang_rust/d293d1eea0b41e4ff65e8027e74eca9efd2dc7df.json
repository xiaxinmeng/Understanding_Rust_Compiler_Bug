{"sha": "d293d1eea0b41e4ff65e8027e74eca9efd2dc7df", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyOTNkMWVlYTBiNDFlNGZmNjVlODAyN2U3NGVjYTllZmQyZGM3ZGY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-11-09T01:15:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-09T01:15:24Z"}, "message": "Rollup merge of #55788 - alexcrichton:wincolors, r=petrochenkov\n\nrustc: Request ansi colors if stderr isn't a tty\n\nCurrently Cargo will always capture the output of rustc meaning that\nrustc is never hooked up to a tty. To retain colors Cargo uses the\n`fwdansi` crate to ensure that ansi color codes are translated to\nwindows terminal methods (and ansi codes otherwise just go their natural\nroute on Unix).\n\nCargo passes `--color always` to rustc to ensure that using a pipe\ndoesn't trick it into not emitting colors at all. It turns out, however,\nthat `--color always` ends up still accidentally using the native shell\napi on native windows shells.\n\nThe fix here is to instead pass `AlwaysAnsi` to `termcolor` instead of\n`Always`, ensuring that when `--color always` is passed to rustc and its\noutput isn't a terminal, we're always generating ansi colors regardless\nof the platform.\n\nCloses #55769", "tree": {"sha": "67c50601ac77481c7b2a8410c1c67f32fef2081f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67c50601ac77481c7b2a8410c1c67f32fef2081f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d293d1eea0b41e4ff65e8027e74eca9efd2dc7df", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb5N+sCRBK7hj4Ov3rIwAAdHIIAH5an+UYkpAN05Hp197TxZ6t\nJ57NVrphgAnDOdFWPIfqn35U61eyqhZrv/oZmgy+JsZxIHRT8uqhhbJLr5EmBAa+\nOhFmEb75QqEGksceSchDdHBlPodoBoMOK0rJpCQorW+cqKOQ8BdCOwpUwwMgosCe\n4TY8ed2Vzz523xxCkKWOPhvMSTkyLFQkkmhG6dDICCI1Rr/rxOAy/kn+o4Vi03mx\nM6ySsMR8zUxuDsgQZxbgpvc2q57kWYrBL7/YbG8G2RleaCW9Nm3XlBmqZ1Kfdf9f\nHoq8bwSWrMHUZT6CBZoYWvBYEnjq0/J/Xa02uuV0cAU3U7zMnlweYSQAMPlkRf8=\n=47aG\n-----END PGP SIGNATURE-----\n", "payload": "tree 67c50601ac77481c7b2a8410c1c67f32fef2081f\nparent 667904f049febcb9df31e715144bf138dfe230f1\nparent 255cc1aed33442567c29c95fa445a534575e925c\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1541726124 -0700\ncommitter GitHub <noreply@github.com> 1541726124 -0700\n\nRollup merge of #55788 - alexcrichton:wincolors, r=petrochenkov\n\nrustc: Request ansi colors if stderr isn't a tty\n\nCurrently Cargo will always capture the output of rustc meaning that\nrustc is never hooked up to a tty. To retain colors Cargo uses the\n`fwdansi` crate to ensure that ansi color codes are translated to\nwindows terminal methods (and ansi codes otherwise just go their natural\nroute on Unix).\n\nCargo passes `--color always` to rustc to ensure that using a pipe\ndoesn't trick it into not emitting colors at all. It turns out, however,\nthat `--color always` ends up still accidentally using the native shell\napi on native windows shells.\n\nThe fix here is to instead pass `AlwaysAnsi` to `termcolor` instead of\n`Always`, ensuring that when `--color always` is passed to rustc and its\noutput isn't a terminal, we're always generating ansi colors regardless\nof the platform.\n\nCloses #55769\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d293d1eea0b41e4ff65e8027e74eca9efd2dc7df", "html_url": "https://github.com/rust-lang/rust/commit/d293d1eea0b41e4ff65e8027e74eca9efd2dc7df", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d293d1eea0b41e4ff65e8027e74eca9efd2dc7df/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "667904f049febcb9df31e715144bf138dfe230f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/667904f049febcb9df31e715144bf138dfe230f1", "html_url": "https://github.com/rust-lang/rust/commit/667904f049febcb9df31e715144bf138dfe230f1"}, {"sha": "255cc1aed33442567c29c95fa445a534575e925c", "url": "https://api.github.com/repos/rust-lang/rust/commits/255cc1aed33442567c29c95fa445a534575e925c", "html_url": "https://github.com/rust-lang/rust/commit/255cc1aed33442567c29c95fa445a534575e925c"}], "stats": {"total": 8, "additions": 7, "deletions": 1}, "files": [{"sha": "7e69e98071d4b1fa29ad1453d8f9733f8e1e1424", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d293d1eea0b41e4ff65e8027e74eca9efd2dc7df/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d293d1eea0b41e4ff65e8027e74eca9efd2dc7df/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=d293d1eea0b41e4ff65e8027e74eca9efd2dc7df", "patch": "@@ -108,7 +108,13 @@ pub enum ColorConfig {\n impl ColorConfig {\n     fn to_color_choice(&self) -> ColorChoice {\n         match *self {\n-            ColorConfig::Always => ColorChoice::Always,\n+            ColorConfig::Always => {\n+                if atty::is(atty::Stream::Stderr) {\n+                    ColorChoice::Always\n+                } else {\n+                    ColorChoice::AlwaysAnsi\n+                }\n+            }\n             ColorConfig::Never => ColorChoice::Never,\n             ColorConfig::Auto if atty::is(atty::Stream::Stderr) => {\n                 ColorChoice::Auto"}]}