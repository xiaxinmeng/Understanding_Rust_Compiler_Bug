{"sha": "4c7aae73bc2e7484b27cad5658cf5de9c6bad2b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjN2FhZTczYmMyZTc0ODRiMjdjYWQ1NjU4Y2Y1ZGU5YzZiYWQyYjQ=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-23T08:00:31Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-23T08:02:39Z"}, "message": "adjust all pointer_size checks to use the method", "tree": {"sha": "9013c9b098fd968a665135afcaf62d8afc9d30ec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9013c9b098fd968a665135afcaf62d8afc9d30ec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c7aae73bc2e7484b27cad5658cf5de9c6bad2b4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXa5efAAoJEFbW7qD8Z6xGAtkP/A/eRaRHhePAVyFBbpyagHDo\n8L8BG3MA6PCUuhUCx+k1WXEKdd+PyvwOs7J4prQbWk1obaJWAK/edLF/3yAGf+z3\nEZdiQHDf9R7h13aDqihVxVs8dXnpzIxBvZ5OnZS4gk/oOxlwwMJCZAi86BFmAQUS\nWjkLn3gD5Q7dYzE/08/sTeyk2nT8PsaSQ1dtB3R4LX7KPN0w4SRGPqBP+Sc+a+1b\n52Z9gO4B8tZruhorkjdQIGFuOplPmhrbquQ1WzTOdWL+rbiXB19qAs6sV/Z+xnvA\nCzgwFUykGEC/WTJTfc/E5NP9Dxsd+DgphRgLAGF6UXk8sPOSe9M+9jheWhLObXof\nztdJvScCoh7gTV3KGz0B19qL4GMl1OD1R7HW4iOhL8B1eO0lMzO8O4MKCchUQNOc\nL32pGCDuaVRRpXHogZz2v2E2JSIPKL/D3thrakISnk0VtdN6gvvdiAwlGGUm3W3/\nbaiXXNgfpGgl7tU4Kijccsq9lk2+F7f0zdgZbh9RdL1wtBmdIBFyWpGvZahDcf4P\nfUtXIXJvq0AnbxOf8d11e9Ec03Oh2NPVdHjdvw7XQlCepicgj/BnTUkK2VJBaIsC\nk+bTczEr8NN6rcmx8RQKwauxuf3iozL2DT3Z/ehNjOt+74V8K3Wj2EDEHfP9MC5t\n5kfP7s7Sc57lFv7La8qG\n=6g1r\n-----END PGP SIGNATURE-----", "payload": "tree 9013c9b098fd968a665135afcaf62d8afc9d30ec\nparent d13153c424b77b19096bd5cc52d6ff72cce4323b\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466668831 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1466668959 +0200\n\nadjust all pointer_size checks to use the method"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c7aae73bc2e7484b27cad5658cf5de9c6bad2b4", "html_url": "https://github.com/rust-lang/rust/commit/4c7aae73bc2e7484b27cad5658cf5de9c6bad2b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c7aae73bc2e7484b27cad5658cf5de9c6bad2b4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d13153c424b77b19096bd5cc52d6ff72cce4323b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d13153c424b77b19096bd5cc52d6ff72cce4323b", "html_url": "https://github.com/rust-lang/rust/commit/d13153c424b77b19096bd5cc52d6ff72cce4323b"}], "stats": {"total": 46, "additions": 23, "deletions": 23}, "files": [{"sha": "da5d8cf787f49cca031a77b6cd678fb56116e4d4", "filename": "src/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c7aae73bc2e7484b27cad5658cf5de9c6bad2b4/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c7aae73bc2e7484b27cad5658cf5de9c6bad2b4/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=4c7aae73bc2e7484b27cad5658cf5de9c6bad2b4", "patch": "@@ -16,7 +16,7 @@ pub enum EvalError<'tcx> {\n     PointerOutOfBounds {\n         ptr: Pointer,\n         size: usize,\n-        allocation_size: u64,\n+        allocation_size: usize,\n     },\n     ReadPointerAsBytes,\n     ReadBytesAsPointer,"}, {"sha": "3a31aa4f36c22b1a1f302b2cd91a0b827d4c90ca", "filename": "src/interpreter/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4c7aae73bc2e7484b27cad5658cf5de9c6bad2b4/src%2Finterpreter%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c7aae73bc2e7484b27cad5658cf5de9c6bad2b4/src%2Finterpreter%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fmod.rs?ref=4c7aae73bc2e7484b27cad5658cf5de9c6bad2b4", "patch": "@@ -178,7 +178,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 Ok(ptr)\n             }\n             Str(ref s) => {\n-                let psize = self.memory.pointer_size;\n+                let psize = self.memory.pointer_size();\n                 let static_ptr = self.memory.allocate(s.len());\n                 let ptr = self.memory.allocate(psize * 2);\n                 self.memory.write_bytes(static_ptr, s.as_bytes())?;\n@@ -187,7 +187,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 Ok(ptr)\n             }\n             ByteStr(ref bs) => {\n-                let psize = self.memory.pointer_size;\n+                let psize = self.memory.pointer_size();\n                 let static_ptr = self.memory.allocate(bs.len());\n                 let ptr = self.memory.allocate(psize);\n                 self.memory.write_bytes(static_ptr, bs)?;\n@@ -511,7 +511,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 match lv.extra {\n                     LvalueExtra::None => {},\n                     LvalueExtra::Length(len) => {\n-                        let len_ptr = dest.offset(self.memory.pointer_size as isize);\n+                        let len_ptr = dest.offset(self.memory.pointer_size() as isize);\n                         self.memory.write_usize(len_ptr, len)?;\n                     }\n                     LvalueExtra::DowncastVariant(..) =>\n@@ -537,7 +537,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                         match (&src_pointee_ty.sty, &dest_pointee_ty.sty) {\n                             (&ty::TyArray(_, length), &ty::TySlice(_)) => {\n-                                let len_ptr = dest.offset(self.memory.pointer_size as isize);\n+                                let len_ptr = dest.offset(self.memory.pointer_size() as isize);\n                                 self.memory.write_usize(len_ptr, length as u64)?;\n                             }\n \n@@ -651,7 +651,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 Ok(Size::from_bytes(0))\n             }\n             FatPointer { .. } => {\n-                let bytes = layout::FAT_PTR_ADDR * self.memory.pointer_size;\n+                let bytes = layout::FAT_PTR_ADDR * self.memory.pointer_size();\n                 Ok(Size::from_bytes(bytes as u64))\n             }\n             _ => Err(EvalError::Unimplemented(format!(\"can't handle type: {:?}, with layout: {:?}\", ty, layout))),\n@@ -762,7 +762,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         let ptr = self.memory.read_ptr(base.ptr)?;\n                         let extra = match pointee_ty.sty {\n                             ty::TySlice(_) | ty::TyStr => {\n-                                let len_ptr = base.ptr.offset(self.memory.pointer_size as isize);\n+                                let len_ptr = base.ptr.offset(self.memory.pointer_size() as isize);\n                                 let len = self.memory.read_usize(len_ptr)?;\n                                 LvalueExtra::Length(len)\n                             }\n@@ -811,7 +811,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n     pub fn read_primval(&mut self, ptr: Pointer, ty: Ty<'tcx>) -> EvalResult<'tcx, PrimVal> {\n         use syntax::ast::{IntTy, UintTy};\n-        let val = match (self.memory.pointer_size, &ty.sty) {\n+        let val = match (self.memory.pointer_size(), &ty.sty) {\n             (_, &ty::TyBool)              => PrimVal::Bool(self.memory.read_bool(ptr)?),\n             (_, &ty::TyChar)              => {\n                 let c = self.memory.read_uint(ptr, 4)? as u32;\n@@ -919,7 +919,7 @@ pub fn eval_main<'a, 'tcx: 'a>(\n \n     if mir.arg_decls.len() == 2 {\n         // start function\n-        let ptr_size = ecx.memory().pointer_size;\n+        let ptr_size = ecx.memory().pointer_size();\n         let nargs = ecx.memory_mut().allocate(ptr_size);\n         ecx.memory_mut().write_usize(nargs, 0).unwrap();\n         let args = ecx.memory_mut().allocate(ptr_size);"}, {"sha": "536d9b678ab378fc4c2495902dbdafba33b111cf", "filename": "src/interpreter/terminator.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4c7aae73bc2e7484b27cad5658cf5de9c6bad2b4/src%2Finterpreter%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c7aae73bc2e7484b27cad5658cf5de9c6bad2b4/src%2Finterpreter%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator.rs?ref=4c7aae73bc2e7484b27cad5658cf5de9c6bad2b4", "patch": "@@ -277,7 +277,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             .collect();\n         let args_ptrs = args_res?;\n \n-        let pointer_size = self.memory.pointer_size;\n+        let pointer_size = self.memory.pointer_size();\n \n         match name {\n             \"add_with_overflow\" => self.intrinsic_with_overflow(mir::BinOp::Add, &args[0], &args[1], dest, dest_layout)?,\n@@ -368,7 +368,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         ty::TySlice(_) | ty::TyStr => {\n                             let elem_ty = ty.sequence_element_type(self.tcx);\n                             let elem_size = self.type_size(elem_ty) as u64;\n-                            let ptr_size = self.memory.pointer_size as isize;\n+                            let ptr_size = self.memory.pointer_size() as isize;\n                             let n = self.memory.read_usize(args_ptrs[0].offset(ptr_size))?;\n                             self.memory.write_uint(dest, n * elem_size, pointer_size)?;\n                         }\n@@ -557,7 +557,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         self.memory.deallocate(contents_ptr)?;\n                     }\n                     Err(EvalError::ReadBytesAsPointer) => {\n-                        let size = self.memory.pointer_size;\n+                        let size = self.memory.pointer_size();\n                         let possible_drop_fill = self.memory.read_bytes(ptr, size)?;\n                         if possible_drop_fill.iter().all(|&b| b == mem::POST_DROP_U8) {\n                             return Ok(());"}, {"sha": "89c7ad7b7506f43ff232115f5f5faa708e686e9c", "filename": "src/memory.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4c7aae73bc2e7484b27cad5658cf5de9c6bad2b4/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c7aae73bc2e7484b27cad5658cf5de9c6bad2b4/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=4c7aae73bc2e7484b27cad5658cf5de9c6bad2b4", "patch": "@@ -238,11 +238,11 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n             if !relocations.is_empty() {\n                 print!(\"{:1$}\", \"\", prefix.len()); // Print spaces.\n                 let mut pos = 0;\n-                let relocation_width = (self.pointer_size - 1) * 3;\n+                let relocation_width = (self.pointer_size() - 1) * 3;\n                 for (i, target_id) in relocations {\n                     print!(\"{:1$}\", \"\", (i - pos) * 3);\n                     print!(\"\u2514{0:\u2500^1$}\u2518 \", format!(\"({})\", target_id), relocation_width);\n-                    pos = i + self.pointer_size;\n+                    pos = i + self.pointer_size();\n                 }\n                 println!(\"\");\n             }\n@@ -337,7 +337,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n \n     pub fn read_ptr(&self, ptr: Pointer) -> EvalResult<'tcx, Pointer> {\n-        let size = self.pointer_size;\n+        let size = self.pointer_size();\n         self.check_defined(ptr, size)?;\n         let offset = self.get_bytes_unchecked(ptr, size)?\n             .read_uint::<NativeEndian>(size).unwrap() as usize;\n@@ -350,7 +350,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n \n     pub fn write_ptr(&mut self, dest: Pointer, ptr: Pointer) -> EvalResult<'tcx, ()> {\n         {\n-            let size = self.pointer_size;\n+            let size = self.pointer_size();\n             let mut bytes = self.get_bytes_mut(dest, size)?;\n             bytes.write_uint::<NativeEndian>(ptr.offset as u64, size).unwrap();\n         }\n@@ -359,7 +359,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n \n     pub fn write_primval(&mut self, ptr: Pointer, val: PrimVal) -> EvalResult<'tcx, ()> {\n-        let pointer_size = self.pointer_size;\n+        let pointer_size = self.pointer_size();\n         match val {\n             PrimVal::Bool(b) => self.write_bool(ptr, b),\n             PrimVal::I8(n)   => self.write_int(ptr, n as i64, 1),\n@@ -407,20 +407,20 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     }\n \n     pub fn read_isize(&self, ptr: Pointer) -> EvalResult<'tcx, i64> {\n-        self.read_int(ptr, self.pointer_size)\n+        self.read_int(ptr, self.pointer_size())\n     }\n \n     pub fn write_isize(&mut self, ptr: Pointer, n: i64) -> EvalResult<'tcx, ()> {\n-        let size = self.pointer_size;\n+        let size = self.pointer_size();\n         self.write_int(ptr, n, size)\n     }\n \n     pub fn read_usize(&self, ptr: Pointer) -> EvalResult<'tcx, u64> {\n-        self.read_uint(ptr, self.pointer_size)\n+        self.read_uint(ptr, self.pointer_size())\n     }\n \n     pub fn write_usize(&mut self, ptr: Pointer, n: u64) -> EvalResult<'tcx, ()> {\n-        let size = self.pointer_size;\n+        let size = self.pointer_size();\n         self.write_uint(ptr, n, size)\n     }\n }\n@@ -430,7 +430,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n     fn relocations(&self, ptr: Pointer, size: usize)\n         -> EvalResult<'tcx, btree_map::Range<usize, AllocId>>\n     {\n-        let start = ptr.offset.saturating_sub(self.pointer_size - 1);\n+        let start = ptr.offset.saturating_sub(self.pointer_size() - 1);\n         let end = ptr.offset + size;\n         Ok(self.get(ptr.alloc_id)?.relocations.range(Included(&start), Excluded(&end)))\n     }\n@@ -444,7 +444,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         let start = ptr.offset;\n         let end = start + size;\n         let first = *keys.first().unwrap();\n-        let last = *keys.last().unwrap() + self.pointer_size;\n+        let last = *keys.last().unwrap() + self.pointer_size();\n \n         let alloc = self.get_mut(ptr.alloc_id)?;\n "}]}