{"sha": "341b02398630c6c503f63fdecc1f3ed7b0cc721e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MWIwMjM5ODYzMGM2YzUwM2Y2M2ZkZWNjMWYzZWQ3YjBjYzcyMWU=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-26T07:56:00Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-01T10:18:47Z"}, "message": "hir: remove NodeId from Stmt", "tree": {"sha": "d7365e18f92ed286d2bc94b8c7c65f65b6e112a7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7365e18f92ed286d2bc94b8c7c65f65b6e112a7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/341b02398630c6c503f63fdecc1f3ed7b0cc721e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/341b02398630c6c503f63fdecc1f3ed7b0cc721e", "html_url": "https://github.com/rust-lang/rust/commit/341b02398630c6c503f63fdecc1f3ed7b0cc721e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/341b02398630c6c503f63fdecc1f3ed7b0cc721e/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b4f8f969caa9321b2c4881b00162ee2d68896fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b4f8f969caa9321b2c4881b00162ee2d68896fd", "html_url": "https://github.com/rust-lang/rust/commit/7b4f8f969caa9321b2c4881b00162ee2d68896fd"}], "stats": {"total": 28, "additions": 9, "deletions": 19}, "files": [{"sha": "5be5623cd85ca674e7ae0342a253f194fab48507", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/341b02398630c6c503f63fdecc1f3ed7b0cc721e/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341b02398630c6c503f63fdecc1f3ed7b0cc721e/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=341b02398630c6c503f63fdecc1f3ed7b0cc721e", "patch": "@@ -4427,9 +4427,8 @@ impl<'a> LoweringContext<'a> {\n                         ThinVec::new(),\n                     ))\n                 };\n-                let LoweredNodeId { node_id, hir_id } = self.next_id();\n+                let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n                 let match_stmt = hir::Stmt {\n-                    id: node_id,\n                     hir_id,\n                     node: hir::StmtKind::Expr(match_expr),\n                     span: head_sp,\n@@ -4456,9 +4455,8 @@ impl<'a> LoweringContext<'a> {\n \n                 let body_block = self.with_loop_scope(e.id, |this| this.lower_block(body, false));\n                 let body_expr = P(self.expr_block(body_block, ThinVec::new()));\n-                let LoweredNodeId { node_id, hir_id } = self.next_id();\n+                let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n                 let body_stmt = hir::Stmt {\n-                    id: node_id,\n                     hir_id,\n                     node: hir::StmtKind::Expr(body_expr),\n                     span: body.span,\n@@ -4639,21 +4637,19 @@ impl<'a> LoweringContext<'a> {\n                 let mut ids: SmallVec<[hir::Stmt; 1]> = item_ids\n                     .into_iter()\n                     .map(|item_id| {\n-                        let LoweredNodeId { node_id, hir_id } = self.next_id();\n+                        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n \n                         hir::Stmt {\n-                            id: node_id,\n                             hir_id,\n                             node: hir::StmtKind::Item(item_id),\n                             span: s.span,\n                         }\n                     })\n                     .collect();\n                 ids.push({\n-                    let LoweredNodeId { node_id, hir_id } = self.lower_node_id(s.id);\n+                    let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(s.id);\n \n                     hir::Stmt {\n-                        id: node_id,\n                         hir_id,\n                         node: hir::StmtKind::Local(P(l)),\n                         span: s.span,\n@@ -4667,12 +4663,11 @@ impl<'a> LoweringContext<'a> {\n                 return self.lower_item_id(it)\n                     .into_iter()\n                     .map(|item_id| {\n-                        let LoweredNodeId { node_id, hir_id } = id.take()\n+                        let LoweredNodeId { node_id: _, hir_id } = id.take()\n                           .map(|id| self.lower_node_id(id))\n                           .unwrap_or_else(|| self.next_id());\n \n                         hir::Stmt {\n-                            id: node_id,\n                             hir_id,\n                             node: hir::StmtKind::Item(item_id),\n                             span: s.span,\n@@ -4681,20 +4676,18 @@ impl<'a> LoweringContext<'a> {\n                     .collect();\n             }\n             StmtKind::Expr(ref e) => {\n-                let LoweredNodeId { node_id, hir_id } = self.lower_node_id(s.id);\n+                let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(s.id);\n \n                 hir::Stmt {\n-                    id: node_id,\n                     hir_id,\n                     node: hir::StmtKind::Expr(P(self.lower_expr(e))),\n                     span: s.span,\n                 }\n             },\n             StmtKind::Semi(ref e) => {\n-                let LoweredNodeId { node_id, hir_id } = self.lower_node_id(s.id);\n+                let LoweredNodeId { node_id: _, hir_id } = self.lower_node_id(s.id);\n \n                 hir::Stmt {\n-                    id: node_id,\n                     hir_id,\n                     node: hir::StmtKind::Semi(P(self.lower_expr(e))),\n                     span: s.span,\n@@ -4925,9 +4918,8 @@ impl<'a> LoweringContext<'a> {\n             source,\n         };\n \n-        let LoweredNodeId { node_id, hir_id } = self.next_id();\n+        let LoweredNodeId { node_id: _, hir_id } = self.next_id();\n         hir::Stmt {\n-            id: node_id,\n             hir_id,\n             node: hir::StmtKind::Local(P(local)),\n             span: sp"}, {"sha": "af283b845914273aea4d6119c5ee74e2ac03f546", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/341b02398630c6c503f63fdecc1f3ed7b0cc721e/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341b02398630c6c503f63fdecc1f3ed7b0cc721e/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=341b02398630c6c503f63fdecc1f3ed7b0cc721e", "patch": "@@ -1162,15 +1162,14 @@ impl UnOp {\n /// A statement.\n #[derive(Clone, RustcEncodable, RustcDecodable)]\n pub struct Stmt {\n-    pub id: NodeId,\n     pub hir_id: HirId,\n     pub node: StmtKind,\n     pub span: Span,\n }\n \n impl fmt::Debug for Stmt {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"stmt({}: {})\", self.id,\n+        write!(f, \"stmt({}: {})\", self.hir_id,\n                print::to_string(print::NO_ANN, |s| s.print_stmt(self)))\n     }\n }"}, {"sha": "0b4866ab920ae86bb870d1b02dc6247874c03860", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/341b02398630c6c503f63fdecc1f3ed7b0cc721e/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341b02398630c6c503f63fdecc1f3ed7b0cc721e/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=341b02398630c6c503f63fdecc1f3ed7b0cc721e", "patch": "@@ -495,7 +495,6 @@ impl_stable_hash_for!(enum hir::UnOp {\n });\n \n impl_stable_hash_for!(struct hir::Stmt {\n-    id,\n     hir_id,\n     node,\n     span,"}]}