{"sha": "dfbc74b08bcbe6ecb8589423186a74c5a0103448", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYmM3NGIwOGJjYmU2ZWNiODU4OTQyMzE4NmE3NGM1YTAxMDM0NDg=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-05-14T08:06:21Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-05-14T08:33:48Z"}, "message": "Rustfmt all the things", "tree": {"sha": "048c0569a530191832941169f8b6775e1014732b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/048c0569a530191832941169f8b6775e1014732b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfbc74b08bcbe6ecb8589423186a74c5a0103448", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfbc74b08bcbe6ecb8589423186a74c5a0103448", "html_url": "https://github.com/rust-lang/rust/commit/dfbc74b08bcbe6ecb8589423186a74c5a0103448", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfbc74b08bcbe6ecb8589423186a74c5a0103448/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af80c53450d723824bc532c65687da8dd68ece80", "url": "https://api.github.com/repos/rust-lang/rust/commits/af80c53450d723824bc532c65687da8dd68ece80", "html_url": "https://github.com/rust-lang/rust/commit/af80c53450d723824bc532c65687da8dd68ece80"}], "stats": {"total": 449, "additions": 241, "deletions": 208}, "files": [{"sha": "c83172909127456e6dfc9fe37a35ee11e436859c", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,13 +1,13 @@\n use crate::utils::span_lint;\n use crate::utils::sym;\n+use lazy_static::lazy_static;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use std::f64::consts as f64;\n use syntax::ast::{FloatTy, LitKind};\n use syntax::symbol;\n use syntax::symbol::Symbol;\n-use lazy_static::lazy_static;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for floating point literals that approximate"}, {"sha": "1690c10e291581444172ef1e89e5ac43c93053e5", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -5,8 +5,8 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n use syntax_pos::Span;\n \n use crate::consts::{constant, Constant};\n-use crate::utils::{in_macro_or_desugar, is_direct_expn_of, span_help_and_lint};\n use crate::utils::sym;\n+use crate::utils::{in_macro_or_desugar, is_direct_expn_of, span_help_and_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `assert!(true)` and `assert!(false)` calls."}, {"sha": "754dc3a06ae7b98e25e0cf3d346270478f635adb", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,11 +1,11 @@\n //! checks for attributes\n \n use crate::reexport::*;\n+use crate::utils::sym;\n use crate::utils::{\n-    in_macro_or_desugar, is_present_in_source, last_line_of_span, paths, snippet_opt, span_lint, span_lint_and_sugg,\n-    span_lint_and_then, without_block_comments, match_def_path\n+    in_macro_or_desugar, is_present_in_source, last_line_of_span, match_def_path, paths, snippet_opt, span_lint,\n+    span_lint_and_sugg, span_lint_and_then, without_block_comments,\n };\n-use crate::utils::sym;\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{\n@@ -245,7 +245,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Attributes {\n                                     for lint in lint_list {\n                                         match item.node {\n                                             ItemKind::Use(..) => {\n-                                                if is_word(lint, *sym::unused_imports) || is_word(lint, *sym::deprecated) {\n+                                                if is_word(lint, *sym::unused_imports)\n+                                                    || is_word(lint, *sym::deprecated)\n+                                                {\n                                                     return;\n                                                 }\n                                             },"}, {"sha": "f58b17e9a29db2494dc0ea04049be3a87d5c6993", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,8 +1,9 @@\n+use crate::utils::sym;\n use crate::utils::{\n     get_trait_def_id, implements_trait, in_macro, in_macro_or_desugar, match_type, paths, snippet_opt,\n     span_lint_and_then, SpanlessEq,\n };\n-use crate::utils::sym;\n+use lazy_static::lazy_static;\n use rustc::hir::intravisit::*;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -12,7 +13,6 @@ use rustc_errors::Applicability;\n use syntax::ast::LitKind;\n use syntax::source_map::{dummy_spanned, Span, DUMMY_SP};\n use syntax::symbol::Symbol;\n-use lazy_static::lazy_static;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for boolean expressions that can be written more"}, {"sha": "e9b0ae6797c4d40046b84430014dc17beaa09eeb", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,8 +1,8 @@\n+use crate::utils::sym;\n use crate::utils::{\n     contains_name, get_pat_name, match_type, paths, single_segment_path, snippet_with_applicability,\n     span_lint_and_sugg, walk_ptrs_ty,\n };\n-use crate::utils::sym;\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};"}, {"sha": "637e19bd60e32e40dba021f760c02f6995fd3610", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,5 +1,5 @@\n-use crate::utils::{snippet_opt, span_help_and_lint, span_lint_and_sugg};\n use crate::utils::sym;\n+use crate::utils::{snippet_opt, span_help_and_lint, span_lint_and_sugg};\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;"}, {"sha": "ba1312add7464f64d52c760ebc43c3171e57ca66", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -5,7 +5,7 @@ use rustc::ty;\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n \n-use crate::utils::{any_parent_is_automatically_derived, paths, span_lint_and_sugg, match_def_path};\n+use crate::utils::{any_parent_is_automatically_derived, match_def_path, paths, span_lint_and_sugg};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for literal calls to `Default::default()`."}, {"sha": "61009cc6339502601516aebacd23f49c3bce47e3", "filename": "clippy_lints/src/drop_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fdrop_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fdrop_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_bounds.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{paths, span_lint, match_def_path};\n+use crate::utils::{match_def_path, paths, span_lint};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateLintPass, LintArray, LintPass};"}, {"sha": "a6dcb51fcae83a7966b456b9ed7d632503c47f86", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{is_copy, paths, span_note_and_lint, match_def_path};\n+use crate::utils::{is_copy, match_def_path, paths, span_note_and_lint};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};"}, {"sha": "66ae2966dfbb580bf9771a907cba49c5e01281e4", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,5 +1,5 @@\n-use crate::utils::SpanlessEq;\n use crate::utils::sym;\n+use crate::utils::SpanlessEq;\n use crate::utils::{get_item_name, higher, match_type, paths, snippet, span_lint_and_then, walk_ptrs_ty};\n use if_chain::if_chain;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};"}, {"sha": "11f2770333fb0e826ab1cea11557afe845a9d84b", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,5 +1,5 @@\n-use crate::utils::{is_expn_of, resolve_node, span_lint, span_lint_and_sugg, match_def_path};\n use crate::utils::sym;\n+use crate::utils::{is_expn_of, match_def_path, paths, resolve_node, span_lint, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -42,11 +42,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExplicitWrite {\n             if write_args.len() > 0;\n             if let ExprKind::Call(ref dest_fun, _) = write_args[0].node;\n             if let ExprKind::Path(ref qpath) = dest_fun.node;\n-            if let Some(dest_fun_id) =\n-                resolve_node(cx, qpath, dest_fun.hir_id).opt_def_id();\n-            if let Some(dest_name) = if match_def_path(cx, dest_fun_id, &[*sym::std, *sym::io, *sym::stdio, *sym::stdout]) {\n+            if let Some(dest_fun_id) = resolve_node(cx, qpath, dest_fun.hir_id).opt_def_id();\n+            if let Some(dest_name) = if match_def_path(cx, dest_fun_id, &*paths::STDOUT) {\n                 Some(\"stdout\")\n-            } else if match_def_path(cx, dest_fun_id, &[*sym::std, *sym::io, *sym::stdio, *sym::stderr]) {\n+            } else if match_def_path(cx, dest_fun_id, &*paths::STDERR) {\n                 Some(\"stderr\")\n             } else {\n                 None"}, {"sha": "ee1b888cb07d536dd021b22202ba26cf4e42ad92", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,13 +1,13 @@\n use crate::utils::paths::{BEGIN_PANIC, BEGIN_PANIC_FMT, FROM_TRAIT, OPTION, RESULT};\n-use crate::utils::{is_expn_of, method_chain_args, span_lint_and_then, walk_ptrs_ty, match_def_path};\n use crate::utils::sym;\n+use crate::utils::{is_expn_of, match_def_path, method_chain_args, span_lint_and_then, walk_ptrs_ty};\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::ty::{self, Ty};\n use rustc::{declare_lint_pass, declare_tool_lint};\n-use syntax_pos::Span;\n use syntax::symbol::Symbol;\n+use syntax_pos::Span;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for impls of `From<..>` that contain `panic!()` or `unwrap()`"}, {"sha": "cb9e486a7093c02ca7c2c5373b44e27f5bc9fc48", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,8 +1,8 @@\n use crate::utils::paths;\n use crate::utils::sym;\n use crate::utils::{\n-    in_macro_or_desugar, is_expn_of, last_path_segment, match_type, resolve_node, snippet, span_lint_and_then,\n-    walk_ptrs_ty, match_def_path,\n+    in_macro_or_desugar, is_expn_of, last_path_segment, match_def_path, match_type, resolve_node, snippet,\n+    span_lint_and_then, walk_ptrs_ty,\n };\n use if_chain::if_chain;\n use rustc::hir::*;"}, {"sha": "5d15eb3341b379b734ba9ac23e6c0f6e389b843b", "filename": "clippy_lints/src/identity_conversion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fidentity_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_conversion.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{\n-    in_macro_or_desugar, match_trait_method, same_tys, snippet, snippet_with_macro_callsite, span_lint_and_then,\n-    match_def_path,\n+    in_macro_or_desugar, match_def_path, match_trait_method, same_tys, snippet, snippet_with_macro_callsite,\n+    span_lint_and_then,\n };\n use crate::utils::{paths, resolve_node};\n use rustc::hir::*;"}, {"sha": "368aeb4424f74f8bc4db3fdd4f81ed955a898280", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,5 +1,5 @@\n-use crate::utils::{in_macro_or_desugar, is_expn_of, snippet_opt, span_lint_and_then};\n use crate::utils::sym;\n+use crate::utils::{in_macro_or_desugar, is_expn_of, snippet_opt, span_lint_and_then};\n use rustc::hir::{intravisit::FnKind, Body, ExprKind, FnDecl, HirId, MatchSource};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};"}, {"sha": "6d5c1375bc4f1ec53848ef4671f6baff2e29bb70", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -2,10 +2,10 @@ use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{get_trait_def_id, higher, implements_trait, match_qpath, match_type, paths, span_lint};\n use crate::utils::sym;\n-use syntax::symbol::Symbol;\n+use crate::utils::{get_trait_def_id, higher, implements_trait, match_qpath, match_type, paths, span_lint};\n use lazy_static::lazy_static;\n+use syntax::symbol::Symbol;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for iteration that is guaranteed to be infinite."}, {"sha": "9641e9f9e4bc21a6df940ffc869959485d93510d", "filename": "clippy_lints/src/invalid_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Finvalid_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Finvalid_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finvalid_ref.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{paths, span_help_and_lint, match_def_path};\n+use crate::utils::{match_def_path, paths, span_help_and_lint};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};"}, {"sha": "131f0301c424ff1f6d5c8b1f477556f2caad33f2", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,7 +1,7 @@\n+use crate::utils::sym;\n use crate::utils::{\n     get_item_name, in_macro_or_desugar, snippet_with_applicability, span_lint, span_lint_and_sugg, walk_ptrs_ty,\n };\n-use crate::utils::sym;\n use rustc::hir::def_id::DefId;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n@@ -141,7 +141,8 @@ fn check_trait_items(cx: &LateContext<'_, '_>, visited_trait: &Item, trait_items\n         }\n     }\n \n-    if cx.access_levels.is_exported(visited_trait.hir_id) && trait_items.iter().any(|i| is_named_self(cx, i, *sym::len)) {\n+    if cx.access_levels.is_exported(visited_trait.hir_id) && trait_items.iter().any(|i| is_named_self(cx, i, *sym::len))\n+    {\n         let mut current_and_super_traits = FxHashSet::default();\n         let visited_trait_def_id = cx.tcx.hir().local_def_id_from_hir_id(visited_trait.hir_id);\n         fill_trait_set(visited_trait_def_id, &mut current_and_super_traits, cx);"}, {"sha": "ff75fbaa55f223bcd51bf161ca613eab6b411fcb", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -476,7 +476,9 @@ struct BodyLifetimeChecker {\n impl<'tcx> Visitor<'tcx> for BodyLifetimeChecker {\n     // for lifetimes as parameters of generics\n     fn visit_lifetime(&mut self, lifetime: &'tcx Lifetime) {\n-        if lifetime.name.ident().name != keywords::Invalid.name() && lifetime.name.ident().name != syntax::symbol::keywords::StaticLifetime.name() {\n+        if lifetime.name.ident().name != keywords::Invalid.name()\n+            && lifetime.name.ident().name != syntax::symbol::keywords::StaticLifetime.name()\n+        {\n             self.lifetimes_used_in_body = true;\n         }\n     }"}, {"sha": "9280461548cf45b290fe549378b6bb72ecac687c", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -10,9 +10,9 @@ use rustc::middle::region;\n use rustc::{declare_lint_pass, declare_tool_lint};\n // use rustc::middle::region::CodeExtent;\n use crate::consts::{constant, Constant};\n+use crate::utils::sym;\n use crate::utils::usage::mutated_variables;\n use crate::utils::{in_macro_or_desugar, sext, sugg};\n-use crate::utils::sym;\n use rustc::middle::expr_use_visitor::*;\n use rustc::middle::mem_categorization::cmt_;\n use rustc::middle::mem_categorization::Categorization;\n@@ -594,7 +594,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Loops {\n     fn check_stmt(&mut self, cx: &LateContext<'a, 'tcx>, stmt: &'tcx Stmt) {\n         if let StmtKind::Semi(ref expr) = stmt.node {\n             if let ExprKind::MethodCall(ref method, _, ref args) = expr.node {\n-                if args.len() == 1 && method.ident.name == *sym::collect && match_trait_method(cx, expr, &*paths::ITERATOR) {\n+                if args.len() == 1\n+                    && method.ident.name == *sym::collect\n+                    && match_trait_method(cx, expr, &*paths::ITERATOR)\n+                {\n                     span_lint(\n                         cx,\n                         UNUSED_COLLECT,"}, {"sha": "fb290ee3ac80ed5bc99d932b0798b1b9f148e9ec", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,7 +1,7 @@\n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n-use crate::utils::sym;\n use crate::utils::sugg::Sugg;\n+use crate::utils::sym;\n use crate::utils::{\n     expr_block, in_macro_or_desugar, is_allowed, is_expn_of, match_qpath, match_type, multispan_sugg, remove_blocks,\n     snippet, snippet_with_applicability, span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty,"}, {"sha": "2ce56647ac7482d6fc668ea8486267554bde2ea0", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{paths, snippet, span_lint_and_then, walk_ptrs_ty_depth, match_def_path};\n+use crate::utils::{match_def_path, paths, snippet, span_lint_and_then, walk_ptrs_ty_depth};\n use if_chain::if_chain;\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};"}, {"sha": "3f314d332823e468488677b55a77d23613864e5b", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{paths, span_lint, match_def_path};\n+use crate::utils::{match_def_path, paths, span_lint};\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};"}, {"sha": "2649fd6a519f77cf03bd8c0781b83d20f6f1be51", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_qpath, paths, snippet_with_applicability, span_lint_and_sugg, match_def_path};\n+use crate::utils::{match_def_path, match_qpath, paths, snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n use rustc::hir::{Expr, ExprKind, MutMutable, QPath};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};"}, {"sha": "3e093cf31094e8cf01a2f78e489f8cdef8655744", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 28, "deletions": 13, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -6,6 +6,7 @@ use std::fmt;\n use std::iter;\n \n use if_chain::if_chain;\n+use lazy_static::lazy_static;\n use matches::matches;\n use rustc::hir;\n use rustc::hir::def::{DefKind, Res};\n@@ -16,18 +17,16 @@ use rustc_errors::Applicability;\n use syntax::ast;\n use syntax::source_map::{BytePos, Span};\n use syntax::symbol::{LocalInternedString, Symbol};\n-use lazy_static::lazy_static;\n \n use crate::utils::paths;\n use crate::utils::sugg;\n use crate::utils::sym;\n use crate::utils::{\n     get_arg_name, get_parent_expr, get_trait_def_id, has_iter_method, implements_trait, in_macro, is_copy,\n-    is_ctor_function, is_expn_of, is_self, is_self_ty, iter_input_pats, last_path_segment, match_path, match_qpath,\n-    match_trait_method, match_type, match_var, method_calls, method_chain_args, remove_blocks, return_ty, same_tys,\n-    single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint,\n+    is_ctor_function, is_expn_of, is_self, is_self_ty, iter_input_pats, last_path_segment, match_def_path, match_path,\n+    match_qpath, match_trait_method, match_type, match_var, method_calls, method_chain_args, remove_blocks, return_ty,\n+    same_tys, single_segment_path, snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint,\n     span_lint_and_sugg, span_lint_and_then, span_note_and_lint, walk_ptrs_ty, walk_ptrs_ty_depth, SpanlessEq,\n-    match_def_path,\n };\n \n declare_clippy_lint! {\n@@ -1068,7 +1067,8 @@ fn lint_or_fun_call(cx: &LateContext<'_, '_>, expr: &hir::Expr, method_span: Spa\n \n                 if [\"default\", \"new\"].contains(&path) {\n                     let arg_ty = cx.tables.expr_ty(arg);\n-                    let default_trait_id = if let Some(default_trait_id) = get_trait_def_id(cx, &*paths::DEFAULT_TRAIT) {\n+                    let default_trait_id = if let Some(default_trait_id) = get_trait_def_id(cx, &*paths::DEFAULT_TRAIT)\n+                    {\n                         default_trait_id\n                     } else {\n                         return false;\n@@ -2216,15 +2216,33 @@ fn lint_chars_cmp_with_unwrap<'a, 'tcx>(\n \n /// Checks for the `CHARS_NEXT_CMP` lint with `unwrap()`.\n fn lint_chars_next_cmp_with_unwrap<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, info: &BinaryExprInfo<'_>) -> bool {\n-    lint_chars_cmp_with_unwrap(cx, info, &[*sym::chars, *sym::next, *sym::unwrap], CHARS_NEXT_CMP, \"starts_with\")\n+    lint_chars_cmp_with_unwrap(\n+        cx,\n+        info,\n+        &[*sym::chars, *sym::next, *sym::unwrap],\n+        CHARS_NEXT_CMP,\n+        \"starts_with\",\n+    )\n }\n \n /// Checks for the `CHARS_LAST_CMP` lint with `unwrap()`.\n fn lint_chars_last_cmp_with_unwrap<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, info: &BinaryExprInfo<'_>) -> bool {\n-    if lint_chars_cmp_with_unwrap(cx, info, &[*sym::chars, *sym::last, *sym::unwrap], CHARS_LAST_CMP, \"ends_with\") {\n+    if lint_chars_cmp_with_unwrap(\n+        cx,\n+        info,\n+        &[*sym::chars, *sym::last, *sym::unwrap],\n+        CHARS_LAST_CMP,\n+        \"ends_with\",\n+    ) {\n         true\n     } else {\n-        lint_chars_cmp_with_unwrap(cx, info, &[*sym::chars, *sym::next_back, *sym::unwrap], CHARS_LAST_CMP, \"ends_with\")\n+        lint_chars_cmp_with_unwrap(\n+            cx,\n+            info,\n+            &[*sym::chars, *sym::next_back, *sym::unwrap],\n+            CHARS_LAST_CMP,\n+            \"ends_with\",\n+        )\n     }\n }\n \n@@ -2288,10 +2306,7 @@ fn lint_asref(cx: &LateContext<'_, '_>, expr: &hir::Expr, call_name: &str, as_re\n     }\n }\n \n-fn ty_has_iter_method(\n-    cx: &LateContext<'_, '_>,\n-    self_ref_ty: Ty<'_>,\n-) -> Option<(&'static Lint, Symbol, &'static str)> {\n+fn ty_has_iter_method(cx: &LateContext<'_, '_>, self_ref_ty: Ty<'_>) -> Option<(&'static Lint, Symbol, &'static str)> {\n     if let Some(ty_name) = has_iter_method(cx, self_ref_ty) {\n         let lint = if ty_name == *sym::array || ty_name == *sym::PathBuf {\n             INTO_ITER_ON_ARRAY"}, {"sha": "5a9634571272ffa0bb54b33153ddb61f50827d95", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,5 +1,5 @@\n use crate::consts::{constant_simple, Constant};\n-use crate::utils::{paths, span_lint, match_def_path};\n+use crate::utils::{match_def_path, paths, span_lint};\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};"}, {"sha": "66a5ac6824f78206f1a50247386cd51b4014168b", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -505,7 +505,8 @@ fn check_to_owned(cx: &LateContext<'_, '_>, expr: &Expr, other: &Expr) {\n         },\n         ExprKind::Call(ref path, ref v) if v.len() == 1 => {\n             if let ExprKind::Path(ref path) = path.node {\n-                if match_qpath(path, &[*sym::String, *sym::from_str]) || match_qpath(path, &[*sym::String, *sym::from]) {\n+                if match_qpath(path, &[*sym::String, *sym::from_str]) || match_qpath(path, &[*sym::String, *sym::from])\n+                {\n                     (cx.tables.expr_ty_adjusted(&v[0]), snippet(cx, v[0].span, \"..\"))\n                 } else {\n                     return;"}, {"sha": "94c8e7ff709c262febfadd8da563788e08c2264a", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -5,8 +5,8 @@\n // [`missing_doc`]: https://github.com/rust-lang/rust/blob/d6d05904697d89099b55da3331155392f1db9c00/src/librustc_lint/builtin.rs#L246\n //\n \n-use crate::utils::{in_macro_or_desugar, span_lint};\n use crate::utils::sym;\n+use crate::utils::{in_macro_or_desugar, span_lint};\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintContext, LintPass};"}, {"sha": "461e5885476b24ec9e51569fa1532f31f26b3506", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -2,8 +2,8 @@\n //!\n //! This lint is **warn** by default\n \n-use crate::utils::{in_macro_or_desugar, snippet_opt, span_lint_and_then};\n use crate::utils::sym;\n+use crate::utils::{in_macro_or_desugar, snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n use rustc::hir::{BindingAnnotation, Expr, ExprKind, HirId, Item, MutImmutable, Pat, PatKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};"}, {"sha": "7e2899bc7a9892a7fb8d4cd8375ca0a76fb21f14", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::paths;\n-use crate::utils::sym;\n use crate::utils::sugg::DiagnosticBuilderExt;\n+use crate::utils::sym;\n use crate::utils::{get_trait_def_id, implements_trait, return_ty, same_tys, span_lint_hir_and_then};\n use if_chain::if_chain;\n use rustc::hir;"}, {"sha": "12976e05b087eced7f588b1b02d9d07c03c6d67f", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,5 +1,5 @@\n-use crate::utils::{span_lint, span_lint_and_then};\n use crate::utils::sym;\n+use crate::utils::{span_lint, span_lint_and_then};\n use rustc::lint::{EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_tool_lint, impl_lint_pass};\n use syntax::ast::*;"}, {"sha": "c097f17d30e29776c427f143a2c5a624f00c4b32", "filename": "clippy_lints/src/ok_if_let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fok_if_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fok_if_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fok_if_let.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,5 +1,5 @@\n-use crate::utils::{match_type, method_chain_args, paths, snippet, span_help_and_lint};\n use crate::utils::sym;\n+use crate::utils::{match_type, method_chain_args, paths, snippet, span_help_and_lint};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};"}, {"sha": "fa3e589d92b75b5049fad18633699d5366c74f89", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,5 +1,5 @@\n-use crate::utils::{match_type, paths, span_lint, walk_ptrs_ty};\n use crate::utils::sym;\n+use crate::utils::{match_type, paths, span_lint, walk_ptrs_ty};\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};"}, {"sha": "8f896acbd3d3dd41c341ec616826b6c44af9dd05", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,5 +1,5 @@\n-use crate::utils::{is_direct_expn_of, is_expn_of, paths, resolve_node, span_lint, match_def_path};\n use crate::utils::sym;\n+use crate::utils::{is_direct_expn_of, is_expn_of, match_def_path, paths, resolve_node, span_lint};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};"}, {"sha": "3e146a72ab86bbecfdfdf7956cc67f406bd3d7b4", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,5 +1,5 @@\n-use crate::utils::{is_automatically_derived, span_lint_hir};\n use crate::utils::sym;\n+use crate::utils::{is_automatically_derived, span_lint_hir};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};"}, {"sha": "3234c81de23ee05d440e8c1c00da1617c4b42895", "filename": "clippy_lints/src/path_buf_push_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,5 +1,5 @@\n-use crate::utils::{match_type, paths, span_lint_and_sugg, walk_ptrs_ty};\n use crate::utils::sym;\n+use crate::utils::{match_type, paths, span_lint_and_sugg, walk_ptrs_ty};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};"}, {"sha": "8a6933b2f5a4f652fb2e4b5dcb712d5b8121022b", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -194,7 +194,12 @@ fn check_fn(cx: &LateContext<'_, '_>, decl: &FnDecl, fn_id: HirId, opt_body_id:\n                     );\n                 }\n             } else if match_type(cx, ty, &*paths::STRING) {\n-                if let Some(spans) = get_spans(cx, opt_body_id, idx, &[(*sym::clone, \".to_string()\"), (*sym::as_str, \"\")]) {\n+                if let Some(spans) = get_spans(\n+                    cx,\n+                    opt_body_id,\n+                    idx,\n+                    &[(*sym::clone, \".to_string()\"), (*sym::as_str, \"\")],\n+                ) {\n                     span_lint_and_then(\n                         cx,\n                         PTR_ARG,"}, {"sha": "1949101def9e9a793a5b4aee141c9d42b6ebaea2", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -7,9 +7,9 @@ use rustc_errors::Applicability;\n use syntax::ptr::P;\n \n use crate::utils::paths::*;\n-use crate::utils::sym;\n use crate::utils::sugg::Sugg;\n-use crate::utils::{higher, match_type, span_lint_and_then, SpanlessEq, match_def_path};\n+use crate::utils::sym;\n+use crate::utils::{higher, match_def_path, match_type, span_lint_and_then, SpanlessEq};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for expressions that could be replaced by the question mark operator."}, {"sha": "d5e71fdbec326317faf45b737bbfdc2426b7b4e4", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -213,7 +213,8 @@ fn has_step_by(cx: &LateContext<'_, '_>, expr: &Expr) -> bool {\n     // can't be called on a borrowed range.\n     let ty = cx.tables.expr_ty_adjusted(expr);\n \n-    get_trait_def_id(cx, &*paths::ITERATOR).map_or(false, |iterator_trait| implements_trait(cx, ty, iterator_trait, &[]))\n+    get_trait_def_id(cx, &*paths::ITERATOR)\n+        .map_or(false, |iterator_trait| implements_trait(cx, ty, iterator_trait, &[]))\n }\n \n fn y_plus_one(expr: &Expr) -> Option<&Expr> {"}, {"sha": "53bfc15a509b5ac40f50279a995a39503e5ec3f5", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{\n-    has_drop, in_macro_or_desugar, is_copy, match_type, paths, snippet_opt, span_lint_hir, span_lint_hir_and_then,\n-    walk_ptrs_ty_depth, match_def_path,\n+    has_drop, in_macro_or_desugar, is_copy, match_def_path, match_type, paths, snippet_opt, span_lint_hir,\n+    span_lint_hir_and_then, walk_ptrs_ty_depth,\n };\n use if_chain::if_chain;\n use matches::matches;\n@@ -96,7 +96,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RedundantClone {\n \n             let from_borrow = match_def_path(cx, fn_def_id, &*paths::CLONE_TRAIT_METHOD)\n                 || match_def_path(cx, fn_def_id, &*paths::TO_OWNED_METHOD)\n-                || (match_def_path(cx, fn_def_id, &*paths::TO_STRING_METHOD) && match_type(cx, arg_ty, &*paths::STRING));\n+                || (match_def_path(cx, fn_def_id, &*paths::TO_STRING_METHOD)\n+                    && match_type(cx, arg_ty, &*paths::STRING));\n \n             let from_deref = !from_borrow\n                 && (match_def_path(cx, fn_def_id, &*paths::PATH_TO_PATH_BUF)"}, {"sha": "59b1cc016712ce6e5e1bbe6e42225cfd1a77d099", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,6 +1,6 @@\n use crate::consts::{constant, Constant};\n-use crate::utils::{is_expn_of, match_type, paths, span_help_and_lint, span_lint, match_def_path};\n use crate::utils::sym;\n+use crate::utils::{is_expn_of, match_def_path, match_type, paths, span_help_and_lint, span_lint};\n use if_chain::if_chain;\n use regex_syntax;\n use rustc::hir::*;"}, {"sha": "80ea39a301c044fede73ba69bb932b1570322386", "filename": "clippy_lints/src/replace_consts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Freplace_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Freplace_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freplace_consts.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,13 +1,13 @@\n-use crate::utils::{span_lint_and_sugg, match_def_path};\n use crate::utils::sym;\n+use crate::utils::{match_def_path, span_lint_and_sugg};\n use if_chain::if_chain;\n+use lazy_static::lazy_static;\n use rustc::hir;\n use rustc::hir::def::{DefKind, Res};\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::symbol::Symbol;\n-use lazy_static::lazy_static;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `ATOMIC_X_INIT`, `ONCE_INIT`, and"}, {"sha": "0764a96e263e446b7886fd50604f6ccd72adc1fb", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -7,8 +7,8 @@ use syntax::source_map::Span;\n use syntax::visit::FnKind;\n use syntax_pos::BytePos;\n \n-use crate::utils::{in_macro_or_desugar, match_path_ast, snippet_opt, span_lint_and_then, span_note_and_lint};\n use crate::utils::sym;\n+use crate::utils::{in_macro_or_desugar, match_path_ast, snippet_opt, span_lint_and_then, span_note_and_lint};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for return statements at the end of a block."}, {"sha": "d84602c5c78d045756ca77d044b31b2f89dd1edd", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::sugg::Sugg;\n-use crate::utils::{get_enclosing_block, match_qpath, span_lint_and_then, SpanlessEq};\n use crate::utils::sym;\n+use crate::utils::{get_enclosing_block, match_qpath, span_lint_and_then, SpanlessEq};\n use if_chain::if_chain;\n use rustc::hir::intravisit::{walk_block, walk_expr, walk_stmt, NestedVisitorMap, Visitor};\n use rustc::hir::*;"}, {"sha": "b6b0ca822c81106f53e19984ac59aa5c929b633c", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -4,8 +4,8 @@ use rustc::{declare_lint_pass, declare_tool_lint};\n use rustc_errors::Applicability;\n use syntax::source_map::Spanned;\n \n-use crate::utils::SpanlessEq;\n use crate::utils::sym;\n+use crate::utils::SpanlessEq;\n use crate::utils::{get_parent_expr, is_allowed, match_type, paths, span_lint, span_lint_and_sugg, walk_ptrs_ty};\n \n declare_clippy_lint! {"}, {"sha": "ecc033937ab58d2b9f3c43d32130f4335d196f35", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,5 +1,5 @@\n-use crate::utils::{get_trait_def_id, span_lint, trait_ref_of_method};\n use crate::utils::sym;\n+use crate::utils::{get_trait_def_id, span_lint, trait_ref_of_method};\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};"}, {"sha": "45d80e3f5e3a231191277903e1b0e32fa47f040c", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{last_path_segment, paths, snippet, span_lint, span_lint_and_then, sugg, match_def_path};\n+use crate::utils::{last_path_segment, match_def_path, paths, snippet, span_lint, span_lint_and_then, sugg};\n use if_chain::if_chain;\n use rustc::hir::*;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};"}, {"sha": "90623d531adc7dc211528ffa4fb30da0f8778956", "filename": "clippy_lints/src/transmuting_null.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmuting_null.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,5 +1,5 @@\n use crate::consts::{constant_context, Constant};\n-use crate::utils::{paths, match_qpath, span_lint};\n+use crate::utils::{match_qpath, paths, span_lint};\n use if_chain::if_chain;\n use rustc::hir::{Expr, ExprKind};\n use rustc::lint::{in_external_macro, LateContext, LateLintPass, LintArray, LintContext, LintPass};"}, {"sha": "3dffcc7361bf75b4bf8177941b7d113ed66bd761", "filename": "clippy_lints/src/trivially_copy_pass_by_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrivially_copy_pass_by_ref.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,7 +1,7 @@\n use std::cmp;\n \n-use crate::utils::{in_macro_or_desugar, is_copy, is_self_ty, snippet, span_lint_and_sugg};\n use crate::utils::sym;\n+use crate::utils::{in_macro_or_desugar, is_copy, is_self_ty, snippet, span_lint_and_sugg};\n use if_chain::if_chain;\n use matches::matches;\n use rustc::hir;"}, {"sha": "cf637ceb70686d13ebebd4adf37c49ff3b9472e8", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -22,12 +22,12 @@ use syntax::symbol::Symbol;\n \n use crate::consts::{constant, Constant};\n use crate::utils::paths;\n+use crate::utils::sym;\n use crate::utils::{\n     clip, comparisons, differing_macro_contexts, higher, in_constant, in_macro_or_desugar, int_bits, last_path_segment,\n-    match_path, multispan_sugg, same_tys, sext, snippet, snippet_opt, snippet_with_applicability, span_help_and_lint,\n-    span_lint, span_lint_and_sugg, span_lint_and_then, unsext, match_def_path,\n+    match_def_path, match_path, multispan_sugg, same_tys, sext, snippet, snippet_opt, snippet_with_applicability,\n+    span_help_and_lint, span_lint, span_lint_and_sugg, span_lint_and_then, unsext,\n };\n-use crate::utils::sym;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for use of `Box<Vec<_>>` anywhere in the code."}, {"sha": "9949a086f93aa1cc2a70641afbfdf86752c05cff", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -2,10 +2,10 @@ use if_chain::if_chain;\n use rustc::lint::{LateContext, LateLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n \n+use crate::utils::sym;\n use crate::utils::{\n     higher::if_block, in_macro_or_desugar, match_type, paths, span_lint_and_then, usage::is_potentially_mutated,\n };\n-use crate::utils::sym;\n use rustc::hir::intravisit::*;\n use rustc::hir::*;\n use syntax::source_map::Span;"}, {"sha": "1c71a76f159054ac7145aef1385be95ff0080d63", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -2,8 +2,8 @@\n \n #![deny(clippy::missing_docs_in_private_items)]\n \n-use lazy_static::lazy_static;\n use crate::utils::sym;\n+use lazy_static::lazy_static;\n use std::default::Default;\n use std::io::Read;\n use std::sync::Mutex;"}, {"sha": "610d0c932169b8e90f3e77c1c7074d28c0e7ce29", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -3,8 +3,8 @@\n \n #![deny(clippy::missing_docs_in_private_items)]\n \n-use crate::utils::{is_expn_of, match_def_path, match_qpath, paths, resolve_node};\n use crate::utils::sym;\n+use crate::utils::{is_expn_of, match_def_path, match_qpath, paths, resolve_node};\n use if_chain::if_chain;\n use rustc::lint::LateContext;\n use rustc::{hir, ty};\n@@ -102,7 +102,8 @@ pub fn range<'a, 'b, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'b hir::Expr) -> O\n         },\n         hir::ExprKind::Call(ref path, ref args) => {\n             if let hir::ExprKind::Path(ref path) = path.node {\n-                if match_qpath(path, &*paths::RANGE_INCLUSIVE_STD_NEW) || match_qpath(path, &*paths::RANGE_INCLUSIVE_NEW)\n+                if match_qpath(path, &*paths::RANGE_INCLUSIVE_STD_NEW)\n+                    || match_qpath(path, &*paths::RANGE_INCLUSIVE_NEW)\n                 {\n                     Some(Range {\n                         start: Some(&args[0]),\n@@ -129,7 +130,8 @@ pub fn range<'a, 'b, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'b hir::Expr) -> O\n                     end: Some(get_field(*sym::end, fields)?),\n                     limits: ast::RangeLimits::HalfOpen,\n                 })\n-            } else if match_qpath(path, &*paths::RANGE_TO_INCLUSIVE_STD) || match_qpath(path, &*paths::RANGE_TO_INCLUSIVE)\n+            } else if match_qpath(path, &*paths::RANGE_TO_INCLUSIVE_STD)\n+                || match_qpath(path, &*paths::RANGE_TO_INCLUSIVE)\n             {\n                 Some(Range {\n                     start: None,"}, {"sha": "3ba2cd38c35fda1252ed3431d4987a8a68ab4704", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{match_type, match_def_path, paths, span_help_and_lint, span_lint, walk_ptrs_ty};\n+use crate::utils::{match_def_path, match_type, paths, span_help_and_lint, span_lint, walk_ptrs_ty};\n use if_chain::if_chain;\n use rustc::hir;\n use rustc::hir::def::{DefKind, Res};"}, {"sha": "46c2de74d72030e6051ffb9e12072d2f5ffdaf98", "filename": "clippy_lints/src/utils/paths.rs", "status": "modified", "additions": 113, "deletions": 111, "changes": 224, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Futils%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fpaths.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -4,118 +4,120 @@\n #![allow(default_hash_types)] // we just look at symbol names, which is good enough everywhere else\n \n use super::sym::{self, *};\n-use syntax::symbol::Symbol;\n use lazy_static::lazy_static;\n+use syntax::symbol::Symbol;\n \n lazy_static! {\n-pub static ref ANY_TRAIT: [Symbol; 3] = [*std, *any, *Any];\n-pub static ref ARC: [Symbol; 3] = [*alloc, *sync, *Arc];\n-pub static ref ASMUT_TRAIT: [Symbol; 3] = [*core, *convert, *sym::AsMut];\n-pub static ref ASREF_TRAIT: [Symbol; 3] = [*core, *convert, *sym::AsRef];\n-pub static ref BEGIN_PANIC: [Symbol; 3] = [*std, *panicking, *begin_panic];\n-pub static ref BEGIN_PANIC_FMT: [Symbol; 3] = [*std, *panicking, *begin_panic_fmt];\n-pub static ref BINARY_HEAP: [Symbol; 4] = [*alloc, *collections, *binary_heap, *BinaryHeap];\n-pub static ref BORROW_TRAIT: [Symbol; 3] = [*core, *borrow, *Borrow];\n-pub static ref BTREEMAP: [Symbol; 5] = [*alloc, *collections, *btree, *map, *BTreeMap];\n-pub static ref BTREEMAP_ENTRY: [Symbol; 5] = [*alloc, *collections, *btree, *map, *Entry];\n-pub static ref BTREESET: [Symbol; 5] = [*alloc, *collections, *btree, *set, *BTreeSet];\n-pub static ref CLONE_TRAIT: [Symbol; 3] = [*core, *clone, *sym::Clone];\n-pub static ref CLONE_TRAIT_METHOD: [Symbol; 4] = [*core, *clone, *sym::Clone, *clone];\n-pub static ref CMP_MAX: [Symbol; 3] = [*core, *cmp, *max];\n-pub static ref CMP_MIN: [Symbol; 3] = [*core, *cmp, *min];\n-pub static ref COW: [Symbol; 3] = [*alloc, *borrow, *Cow];\n-pub static ref CSTRING_NEW: [Symbol; 5] = [*std, *ffi, *c_str, *CString, *new];\n-pub static ref DEFAULT_TRAIT: [Symbol; 3] = [*core, *default, *sym::Default];\n-pub static ref DEFAULT_TRAIT_METHOD: [Symbol; 4] = [*core, *default, *sym::Default, *default];\n-pub static ref DEREF_TRAIT_METHOD: [Symbol; 5] = [*core, *ops, *deref, *Deref, *deref];\n-pub static ref DISPLAY_FMT_METHOD: [Symbol; 4] = [*core, *fmt, *Display, *fmt];\n-pub static ref DOUBLE_ENDED_ITERATOR: [Symbol; 4] = [*core, *iter, *traits, *sym::DoubleEndedIterator];\n-pub static ref DROP: [Symbol; 3] = [*core, *mem, *drop];\n-pub static ref DROP_TRAIT: [Symbol; 4] = [*core, *ops, *drop, *sym::Drop];\n-pub static ref DURATION: [Symbol; 3] = [*core, *time, *Duration];\n-pub static ref EARLY_CONTEXT: [Symbol; 4] = [*rustc, *lint, *context, *EarlyContext];\n-pub static ref FMT_ARGUMENTS_NEWV1: [Symbol; 4] = [*core, *fmt, *Arguments, *new_v1];\n-pub static ref FMT_ARGUMENTS_NEWV1FORMATTED: [Symbol; 4] = [*core, *fmt, *Arguments, *new_v1_formatted];\n-pub static ref FROM_FROM: [Symbol; 4] = [*core, *convert, *sym::From, *from];\n-pub static ref FROM_TRAIT: [Symbol; 3] = [*core, *convert, *sym::From];\n-pub static ref HASH: [Symbol; 2] = [*hash, *Hash];\n-pub static ref HASHMAP: [Symbol; 5] = [*std, *collections, *hash, *map, *HashMap];\n-pub static ref HASHMAP_ENTRY: [Symbol; 5] = [*std, *collections, *hash, *map, *Entry];\n-pub static ref HASHSET: [Symbol; 5] = [*std, *collections, *hash, *set, *HashSet];\n-pub static ref INDEX: [Symbol; 3] = [*core, *ops, *Index];\n-pub static ref INDEX_MUT: [Symbol; 3] = [*core, *ops, *IndexMut];\n-pub static ref INIT: [Symbol; 4] = [*core, *intrinsics, *empty_symbol, *init];\n-pub static ref INTO: [Symbol; 3] = [*core, *convert, *sym::Into];\n-pub static ref INTO_ITERATOR: [Symbol; 5] = [*core, *iter, *traits, *collect, *sym::IntoIterator];\n-pub static ref IO_READ: [Symbol; 3] = [*std, *io, *Read];\n-pub static ref IO_WRITE: [Symbol; 3] = [*std, *io, *Write];\n-pub static ref ITERATOR: [Symbol; 5] = [*core, *iter, *traits, *iterator, *sym::Iterator];\n-pub static ref LATE_CONTEXT: [Symbol; 4] = [*rustc, *lint, *context, *LateContext];\n-pub static ref LINKED_LIST: [Symbol; 4] = [*alloc, *collections, *linked_list, *LinkedList];\n-pub static ref LINT: [Symbol; 3] = [*rustc, *lint, *Lint];\n-pub static ref LINT_PASS: [Symbol; 3] = [*rustc, *lint, *LintPass];\n-pub static ref MEM_DISCRIMINANT: [Symbol; 3] = [*core, *mem, *discriminant];\n-pub static ref MEM_FORGET: [Symbol; 3] = [*core, *mem, *forget];\n-pub static ref MEM_REPLACE: [Symbol; 3] = [*core, *mem, *replace];\n-pub static ref MEM_UNINIT: [Symbol; 3] = [*core, *mem, *uninitialized];\n-pub static ref MEM_ZEROED: [Symbol; 3] = [*core, *mem, *zeroed];\n-pub static ref MUTEX: [Symbol; 4] = [*std, *sync, *mutex, *Mutex];\n-pub static ref OPEN_OPTIONS: [Symbol; 3] = [*std, *fs, *OpenOptions];\n-pub static ref OPS_MODULE: [Symbol; 2] = [*core, *ops];\n-pub static ref OPTION: [Symbol; 3] = [*core, *option, *sym::Option];\n-pub static ref OPTION_NONE: [Symbol; 4] = [*core, *option, *sym::Option, *sym::None];\n-pub static ref OPTION_SOME: [Symbol; 4] = [*core, *option, *sym::Option, *sym::Some];\n-pub static ref ORD: [Symbol; 3] = [*core, *cmp, *sym::Ord];\n-pub static ref OS_STRING: [Symbol; 4] = [*std, *ffi, *os_str, *OsString];\n-pub static ref OS_STR_TO_OS_STRING: [Symbol; 5] = [*std, *ffi, *os_str, *OsStr, *to_os_string];\n-pub static ref PARTIAL_ORD: [Symbol; 3] = [*core, *cmp, *sym::PartialOrd];\n-pub static ref PATH: [Symbol; 3] = [*std, *path, *Path];\n-pub static ref PATH_BUF: [Symbol; 3] = [*std, *path, *PathBuf];\n-pub static ref PATH_TO_PATH_BUF: [Symbol; 4] = [*std, *path, *Path, *to_path_buf];\n-pub static ref PTR_NULL: [Symbol; 2] = [*ptr, *null];\n-pub static ref PTR_NULL_MUT: [Symbol; 2] = [*ptr, *null_mut];\n-pub static ref RANGE: [Symbol; 3] = [*core, *ops, *Range];\n-pub static ref RANGE_ARGUMENT_TRAIT: [Symbol; 3] = [*core, *ops, *RangeBounds];\n-pub static ref RANGE_FROM: [Symbol; 3] = [*core, *ops, *RangeFrom];\n-pub static ref RANGE_FROM_STD: [Symbol; 3] = [*std, *ops, *RangeFrom];\n-pub static ref RANGE_FULL: [Symbol; 3] = [*core, *ops, *RangeFull];\n-pub static ref RANGE_FULL_STD: [Symbol; 3] = [*std, *ops, *RangeFull];\n-pub static ref RANGE_INCLUSIVE_NEW: [Symbol; 4] = [*core, *ops, *RangeInclusive, *new];\n-pub static ref RANGE_INCLUSIVE_STD_NEW: [Symbol; 4] = [*std, *ops, *RangeInclusive, *new];\n-pub static ref RANGE_STD: [Symbol; 3] = [*std, *ops, *Range];\n-pub static ref RANGE_TO: [Symbol; 3] = [*core, *ops, *RangeTo];\n-pub static ref RANGE_TO_INCLUSIVE: [Symbol; 3] = [*core, *ops, *RangeToInclusive];\n-pub static ref RANGE_TO_INCLUSIVE_STD: [Symbol; 3] = [*std, *ops, *RangeToInclusive];\n-pub static ref RANGE_TO_STD: [Symbol; 3] = [*std, *ops, *RangeTo];\n-pub static ref RC: [Symbol; 3] = [*alloc, *rc, *Rc];\n-pub static ref RECEIVER: [Symbol; 4] = [*std, *sync, *mpsc, *Receiver];\n-pub static ref REGEX: [Symbol; 3] = [*regex, *re_unicode, *Regex];\n-pub static ref REGEX_BUILDER_NEW: [Symbol; 5] = [*regex, *re_builder, *unicode, *RegexBuilder, *new];\n-pub static ref REGEX_BYTES_BUILDER_NEW: [Symbol; 5] = [*regex, *re_builder, *bytes, *RegexBuilder, *new];\n-pub static ref REGEX_BYTES_NEW: [Symbol; 4] = [*regex, *re_bytes, *Regex, *new];\n-pub static ref REGEX_BYTES_SET_NEW: [Symbol; 5] = [*regex, *re_set, *bytes, *RegexSet, *new];\n-pub static ref REGEX_NEW: [Symbol; 4] = [*regex, *re_unicode, *Regex, *new];\n-pub static ref REGEX_SET_NEW: [Symbol; 5] = [*regex, *re_set, *unicode, *RegexSet, *new];\n-pub static ref REPEAT: [Symbol; 3] = [*core, *iter, *repeat];\n-pub static ref RESULT: [Symbol; 3] = [*core, *result, *sym::Result];\n-pub static ref RESULT_ERR: [Symbol; 4] = [*core, *result, *sym::Result, *sym::Err];\n-pub static ref RESULT_OK: [Symbol; 4] = [*core, *result, *sym::Result, *sym::Ok];\n-pub static ref SERDE_DE_VISITOR: [Symbol; 3] = [*serde, *de, *Visitor];\n-pub static ref SLICE_INTO_VEC: [Symbol; 4] = [*alloc, *slice, *impl_slice_t, *into_vec];\n-pub static ref SLICE_ITER: [Symbol; 3] = [*core, *slice, *Iter];\n-pub static ref STD_MEM_TRANSMUTE: [Symbol; 3] = [*std, *mem, *transmute];\n-pub static ref STD_PTR_NULL: [Symbol; 3] = [*std, *ptr, *null];\n-pub static ref STRING: [Symbol; 3] = [*alloc, *string, *sym::String];\n-pub static ref TO_OWNED: [Symbol; 3] = [*alloc, *borrow, *sym::ToOwned];\n-pub static ref TO_OWNED_METHOD: [Symbol; 4] = [*alloc, *borrow, *sym::ToOwned, *to_owned];\n-pub static ref TO_STRING: [Symbol; 3] = [*alloc, *string, *sym::ToString];\n-pub static ref TO_STRING_METHOD: [Symbol; 4] = [*alloc, *string, *sym::ToString, *to_string];\n-pub static ref TRANSMUTE: [Symbol; 4] = [*core, *intrinsics, *empty_symbol, *transmute];\n-pub static ref TRY_INTO_RESULT: [Symbol; 4] = [*std, *ops, *Try, *into_result];\n-pub static ref UNINIT: [Symbol; 4] = [*core, *intrinsics, *empty_symbol, *uninit];\n-pub static ref VEC: [Symbol; 3] = [*alloc, *vec, *sym::Vec];\n-pub static ref VEC_DEQUE: [Symbol; 4] = [*alloc, *collections, *vec_deque, *VecDeque];\n-pub static ref VEC_FROM_ELEM: [Symbol; 3] = [*alloc, *vec, *from_elem];\n-pub static ref WEAK_ARC: [Symbol; 3] = [*alloc, *sync, *Weak];\n-pub static ref WEAK_RC: [Symbol; 3] = [*alloc, *rc, *Weak];\n+    pub static ref ANY_TRAIT: [Symbol; 3] = [*std, *any, *Any];\n+    pub static ref ARC: [Symbol; 3] = [*alloc, *sync, *Arc];\n+    pub static ref ASMUT_TRAIT: [Symbol; 3] = [*core, *convert, *sym::AsMut];\n+    pub static ref ASREF_TRAIT: [Symbol; 3] = [*core, *convert, *sym::AsRef];\n+    pub static ref BEGIN_PANIC: [Symbol; 3] = [*std, *panicking, *begin_panic];\n+    pub static ref BEGIN_PANIC_FMT: [Symbol; 3] = [*std, *panicking, *begin_panic_fmt];\n+    pub static ref BINARY_HEAP: [Symbol; 4] = [*alloc, *collections, *binary_heap, *BinaryHeap];\n+    pub static ref BORROW_TRAIT: [Symbol; 3] = [*core, *borrow, *Borrow];\n+    pub static ref BTREEMAP: [Symbol; 5] = [*alloc, *collections, *btree, *map, *BTreeMap];\n+    pub static ref BTREEMAP_ENTRY: [Symbol; 5] = [*alloc, *collections, *btree, *map, *Entry];\n+    pub static ref BTREESET: [Symbol; 5] = [*alloc, *collections, *btree, *set, *BTreeSet];\n+    pub static ref CLONE_TRAIT: [Symbol; 3] = [*core, *clone, *sym::Clone];\n+    pub static ref CLONE_TRAIT_METHOD: [Symbol; 4] = [*core, *clone, *sym::Clone, *clone];\n+    pub static ref CMP_MAX: [Symbol; 3] = [*core, *cmp, *max];\n+    pub static ref CMP_MIN: [Symbol; 3] = [*core, *cmp, *min];\n+    pub static ref COW: [Symbol; 3] = [*alloc, *borrow, *Cow];\n+    pub static ref CSTRING_NEW: [Symbol; 5] = [*std, *ffi, *c_str, *CString, *new];\n+    pub static ref DEFAULT_TRAIT: [Symbol; 3] = [*core, *default, *sym::Default];\n+    pub static ref DEFAULT_TRAIT_METHOD: [Symbol; 4] = [*core, *default, *sym::Default, *default];\n+    pub static ref DEREF_TRAIT_METHOD: [Symbol; 5] = [*core, *ops, *deref, *Deref, *deref];\n+    pub static ref DISPLAY_FMT_METHOD: [Symbol; 4] = [*core, *fmt, *Display, *fmt];\n+    pub static ref DOUBLE_ENDED_ITERATOR: [Symbol; 4] = [*core, *iter, *traits, *sym::DoubleEndedIterator];\n+    pub static ref DROP: [Symbol; 3] = [*core, *mem, *drop];\n+    pub static ref DROP_TRAIT: [Symbol; 4] = [*core, *ops, *drop, *sym::Drop];\n+    pub static ref DURATION: [Symbol; 3] = [*core, *time, *Duration];\n+    pub static ref EARLY_CONTEXT: [Symbol; 4] = [*rustc, *lint, *context, *EarlyContext];\n+    pub static ref FMT_ARGUMENTS_NEWV1: [Symbol; 4] = [*core, *fmt, *Arguments, *new_v1];\n+    pub static ref FMT_ARGUMENTS_NEWV1FORMATTED: [Symbol; 4] = [*core, *fmt, *Arguments, *new_v1_formatted];\n+    pub static ref FROM_FROM: [Symbol; 4] = [*core, *convert, *sym::From, *from];\n+    pub static ref FROM_TRAIT: [Symbol; 3] = [*core, *convert, *sym::From];\n+    pub static ref HASH: [Symbol; 2] = [*hash, *Hash];\n+    pub static ref HASHMAP: [Symbol; 5] = [*std, *collections, *hash, *map, *HashMap];\n+    pub static ref HASHMAP_ENTRY: [Symbol; 5] = [*std, *collections, *hash, *map, *Entry];\n+    pub static ref HASHSET: [Symbol; 5] = [*std, *collections, *hash, *set, *HashSet];\n+    pub static ref INDEX: [Symbol; 3] = [*core, *ops, *Index];\n+    pub static ref INDEX_MUT: [Symbol; 3] = [*core, *ops, *IndexMut];\n+    pub static ref INIT: [Symbol; 4] = [*core, *intrinsics, *empty_symbol, *init];\n+    pub static ref INTO: [Symbol; 3] = [*core, *convert, *sym::Into];\n+    pub static ref INTO_ITERATOR: [Symbol; 5] = [*core, *iter, *traits, *collect, *sym::IntoIterator];\n+    pub static ref IO_READ: [Symbol; 3] = [*std, *io, *Read];\n+    pub static ref IO_WRITE: [Symbol; 3] = [*std, *io, *Write];\n+    pub static ref ITERATOR: [Symbol; 5] = [*core, *iter, *traits, *iterator, *sym::Iterator];\n+    pub static ref LATE_CONTEXT: [Symbol; 4] = [*rustc, *lint, *context, *LateContext];\n+    pub static ref LINKED_LIST: [Symbol; 4] = [*alloc, *collections, *linked_list, *LinkedList];\n+    pub static ref LINT: [Symbol; 3] = [*rustc, *lint, *Lint];\n+    pub static ref LINT_PASS: [Symbol; 3] = [*rustc, *lint, *LintPass];\n+    pub static ref MEM_DISCRIMINANT: [Symbol; 3] = [*core, *mem, *discriminant];\n+    pub static ref MEM_FORGET: [Symbol; 3] = [*core, *mem, *forget];\n+    pub static ref MEM_REPLACE: [Symbol; 3] = [*core, *mem, *replace];\n+    pub static ref MEM_UNINIT: [Symbol; 3] = [*core, *mem, *uninitialized];\n+    pub static ref MEM_ZEROED: [Symbol; 3] = [*core, *mem, *zeroed];\n+    pub static ref MUTEX: [Symbol; 4] = [*std, *sync, *mutex, *Mutex];\n+    pub static ref OPEN_OPTIONS: [Symbol; 3] = [*std, *fs, *OpenOptions];\n+    pub static ref OPS_MODULE: [Symbol; 2] = [*core, *ops];\n+    pub static ref OPTION: [Symbol; 3] = [*core, *option, *sym::Option];\n+    pub static ref OPTION_NONE: [Symbol; 4] = [*core, *option, *sym::Option, *sym::None];\n+    pub static ref OPTION_SOME: [Symbol; 4] = [*core, *option, *sym::Option, *sym::Some];\n+    pub static ref ORD: [Symbol; 3] = [*core, *cmp, *sym::Ord];\n+    pub static ref OS_STRING: [Symbol; 4] = [*std, *ffi, *os_str, *OsString];\n+    pub static ref OS_STR_TO_OS_STRING: [Symbol; 5] = [*std, *ffi, *os_str, *OsStr, *to_os_string];\n+    pub static ref PARTIAL_ORD: [Symbol; 3] = [*core, *cmp, *sym::PartialOrd];\n+    pub static ref PATH: [Symbol; 3] = [*std, *path, *Path];\n+    pub static ref PATH_BUF: [Symbol; 3] = [*std, *path, *PathBuf];\n+    pub static ref PATH_TO_PATH_BUF: [Symbol; 4] = [*std, *path, *Path, *to_path_buf];\n+    pub static ref PTR_NULL: [Symbol; 2] = [*ptr, *null];\n+    pub static ref PTR_NULL_MUT: [Symbol; 2] = [*ptr, *null_mut];\n+    pub static ref RANGE: [Symbol; 3] = [*core, *ops, *Range];\n+    pub static ref RANGE_ARGUMENT_TRAIT: [Symbol; 3] = [*core, *ops, *RangeBounds];\n+    pub static ref RANGE_FROM: [Symbol; 3] = [*core, *ops, *RangeFrom];\n+    pub static ref RANGE_FROM_STD: [Symbol; 3] = [*std, *ops, *RangeFrom];\n+    pub static ref RANGE_FULL: [Symbol; 3] = [*core, *ops, *RangeFull];\n+    pub static ref RANGE_FULL_STD: [Symbol; 3] = [*std, *ops, *RangeFull];\n+    pub static ref RANGE_INCLUSIVE_NEW: [Symbol; 4] = [*core, *ops, *RangeInclusive, *new];\n+    pub static ref RANGE_INCLUSIVE_STD_NEW: [Symbol; 4] = [*std, *ops, *RangeInclusive, *new];\n+    pub static ref RANGE_STD: [Symbol; 3] = [*std, *ops, *Range];\n+    pub static ref RANGE_TO: [Symbol; 3] = [*core, *ops, *RangeTo];\n+    pub static ref RANGE_TO_INCLUSIVE: [Symbol; 3] = [*core, *ops, *RangeToInclusive];\n+    pub static ref RANGE_TO_INCLUSIVE_STD: [Symbol; 3] = [*std, *ops, *RangeToInclusive];\n+    pub static ref RANGE_TO_STD: [Symbol; 3] = [*std, *ops, *RangeTo];\n+    pub static ref RC: [Symbol; 3] = [*alloc, *rc, *Rc];\n+    pub static ref RECEIVER: [Symbol; 4] = [*std, *sync, *mpsc, *Receiver];\n+    pub static ref REGEX: [Symbol; 3] = [*regex, *re_unicode, *Regex];\n+    pub static ref REGEX_BUILDER_NEW: [Symbol; 5] = [*regex, *re_builder, *unicode, *RegexBuilder, *new];\n+    pub static ref REGEX_BYTES_BUILDER_NEW: [Symbol; 5] = [*regex, *re_builder, *bytes, *RegexBuilder, *new];\n+    pub static ref REGEX_BYTES_NEW: [Symbol; 4] = [*regex, *re_bytes, *Regex, *new];\n+    pub static ref REGEX_BYTES_SET_NEW: [Symbol; 5] = [*regex, *re_set, *bytes, *RegexSet, *new];\n+    pub static ref REGEX_NEW: [Symbol; 4] = [*regex, *re_unicode, *Regex, *new];\n+    pub static ref REGEX_SET_NEW: [Symbol; 5] = [*regex, *re_set, *unicode, *RegexSet, *new];\n+    pub static ref REPEAT: [Symbol; 3] = [*core, *iter, *repeat];\n+    pub static ref RESULT: [Symbol; 3] = [*core, *result, *sym::Result];\n+    pub static ref RESULT_ERR: [Symbol; 4] = [*core, *result, *sym::Result, *sym::Err];\n+    pub static ref RESULT_OK: [Symbol; 4] = [*core, *result, *sym::Result, *sym::Ok];\n+    pub static ref SERDE_DE_VISITOR: [Symbol; 3] = [*serde, *de, *Visitor];\n+    pub static ref SLICE_INTO_VEC: [Symbol; 4] = [*alloc, *slice, *impl_slice_t, *into_vec];\n+    pub static ref SLICE_ITER: [Symbol; 3] = [*core, *slice, *Iter];\n+    pub static ref STD_MEM_TRANSMUTE: [Symbol; 3] = [*std, *mem, *transmute];\n+    pub static ref STD_PTR_NULL: [Symbol; 3] = [*std, *ptr, *null];\n+    pub static ref STDERR: [Symbol; 4] = [*std, *io, *stdio, *stderr];\n+    pub static ref STDOUT: [Symbol; 4] = [*std, *io, *stdio, *stdout];\n+    pub static ref STRING: [Symbol; 3] = [*alloc, *string, *sym::String];\n+    pub static ref TO_OWNED: [Symbol; 3] = [*alloc, *borrow, *sym::ToOwned];\n+    pub static ref TO_OWNED_METHOD: [Symbol; 4] = [*alloc, *borrow, *sym::ToOwned, *to_owned];\n+    pub static ref TO_STRING: [Symbol; 3] = [*alloc, *string, *sym::ToString];\n+    pub static ref TO_STRING_METHOD: [Symbol; 4] = [*alloc, *string, *sym::ToString, *to_string];\n+    pub static ref TRANSMUTE: [Symbol; 4] = [*core, *intrinsics, *empty_symbol, *transmute];\n+    pub static ref TRY_INTO_RESULT: [Symbol; 4] = [*std, *ops, *Try, *into_result];\n+    pub static ref UNINIT: [Symbol; 4] = [*core, *intrinsics, *empty_symbol, *uninit];\n+    pub static ref VEC: [Symbol; 3] = [*alloc, *vec, *sym::Vec];\n+    pub static ref VEC_DEQUE: [Symbol; 4] = [*alloc, *collections, *vec_deque, *VecDeque];\n+    pub static ref VEC_FROM_ELEM: [Symbol; 3] = [*alloc, *vec, *from_elem];\n+    pub static ref WEAK_ARC: [Symbol; 3] = [*alloc, *sync, *Weak];\n+    pub static ref WEAK_RC: [Symbol; 3] = [*alloc, *rc, *Weak];\n }"}, {"sha": "a0096b2a653b8c561f85a3b2ab1f63ee396ed820", "filename": "clippy_lints/src/utils/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Futils%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fptr.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,5 +1,5 @@\n-use crate::utils::{get_pat_name, match_var, snippet};\n use crate::utils::sym;\n+use crate::utils::{get_pat_name, match_var, snippet};\n use rustc::hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc::hir::*;\n use rustc::lint::LateContext;"}, {"sha": "263d2d42ff4ff446f054b656f41ced31d271e77c", "filename": "clippy_lints/src/utils/sym.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Futils%2Fsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfbc74b08bcbe6ecb8589423186a74c5a0103448/clippy_lints%2Fsrc%2Futils%2Fsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsym.rs?ref=dfbc74b08bcbe6ecb8589423186a74c5a0103448", "patch": "@@ -1,7 +1,7 @@\n #![allow(default_hash_types, non_upper_case_globals)]\n \n-use syntax::symbol::Symbol;\n use lazy_static::lazy_static;\n+use syntax::symbol::Symbol;\n \n macro_rules! symbols_simple {\n     ($($ident:ident,)*) => {\n@@ -26,17 +26,17 @@ macro_rules! symbols_init {\n // exists because concat_idents is flaky\n pub mod assign {\n     pub(crate) use super::AddAssign as Add;\n-    pub(crate) use super::SubAssign as Sub;\n-    pub(crate) use super::MulAssign as Mul;\n-    pub(crate) use super::DivAssign as Div;\n-    pub(crate) use super::RemAssign as Rem;\n     pub(crate) use super::AndAssign as And;\n-    pub(crate) use super::OrAssign as Or;\n     pub(crate) use super::BitAndAssign as BitAnd;\n     pub(crate) use super::BitOrAssign as BitOr;\n     pub(crate) use super::BitXorAssign as BitXor;\n-    pub(crate) use super::ShrAssign as Shr;\n+    pub(crate) use super::DivAssign as Div;\n+    pub(crate) use super::MulAssign as Mul;\n+    pub(crate) use super::OrAssign as Or;\n+    pub(crate) use super::RemAssign as Rem;\n     pub(crate) use super::ShlAssign as Shl;\n+    pub(crate) use super::ShrAssign as Shr;\n+    pub(crate) use super::SubAssign as Sub;\n }\n \n symbols_simple! {\n@@ -387,7 +387,6 @@ symbols_simple! {\n     zip,\n }\n \n-\n symbols_init! {\n     impl_slice_t: \"<impl [T]>\",\n     empty_symbol: \"\","}]}