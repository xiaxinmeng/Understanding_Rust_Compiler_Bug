{"sha": "144ed029c5aa190d16475d19495f170051ec7d46", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0NGVkMDI5YzVhYTE5MGQxNjQ3NWQxOTQ5NWYxNzAwNTFlYzdkNDY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-03T23:39:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-03T23:39:02Z"}, "message": "Rollup merge of #62346 - RalfJung:miri-tests, r=Centril\n\nenable a few more tests in Miri and update the comment for others", "tree": {"sha": "45fe4be125e52366bd645178af380c24c3a60f39", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/45fe4be125e52366bd645178af380c24c3a60f39"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/144ed029c5aa190d16475d19495f170051ec7d46", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdHTyWCRBK7hj4Ov3rIwAAdHIIAFqlKxcvGuMOhADwAYJZ9Peh\nFTrnZPg6fUwzuqDMMKVglZcVB0StXg0DquaHnsirqwT2/zNkeX15TPKL3oeDCebD\nxm/aADoum7OeyBUqsWgIUgjBIfLR/VzXqT/OjV2Kj/m7RDVTkctT/BGdZ1e29tS5\nBVJtqLakSSVlqjQGB93Xd2gjrqKwhmQpvzKrWQff5e6qE2ClDxh7D1Zl9hSfc1vg\neZX7+R2kz8/B5YjI6IXH2anrhE3sb541iJYMEMRcQ5+N02aaBsPmdLsLj9YmHIp8\nynVTVucJoIwqGzQMls8+gkFc/cCurwnoCwz322Ub81ncQxJQBlD2LzrZew6B7no=\n=Fuex\n-----END PGP SIGNATURE-----\n", "payload": "tree 45fe4be125e52366bd645178af380c24c3a60f39\nparent 839e89c3d113ac80bc1bdc9383a3cd64ba4e9582\nparent 4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562197142 +0200\ncommitter GitHub <noreply@github.com> 1562197142 +0200\n\nRollup merge of #62346 - RalfJung:miri-tests, r=Centril\n\nenable a few more tests in Miri and update the comment for others\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/144ed029c5aa190d16475d19495f170051ec7d46", "html_url": "https://github.com/rust-lang/rust/commit/144ed029c5aa190d16475d19495f170051ec7d46", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/144ed029c5aa190d16475d19495f170051ec7d46/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "839e89c3d113ac80bc1bdc9383a3cd64ba4e9582", "url": "https://api.github.com/repos/rust-lang/rust/commits/839e89c3d113ac80bc1bdc9383a3cd64ba4e9582", "html_url": "https://github.com/rust-lang/rust/commit/839e89c3d113ac80bc1bdc9383a3cd64ba4e9582"}, {"sha": "4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e", "html_url": "https://github.com/rust-lang/rust/commit/4dd5edc76ddf4ceebc1b2b4815028b04bb9cc21e"}], "stats": {"total": 12, "additions": 4, "deletions": 8}, "files": [{"sha": "e0c724f557b9d0d9f84475e68ad5a0a5598d7349", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/144ed029c5aa190d16475d19495f170051ec7d46/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/144ed029c5aa190d16475d19495f170051ec7d46/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=144ed029c5aa190d16475d19495f170051ec7d46", "patch": "@@ -761,7 +761,6 @@ fn from_into_inner() {\n     it.next().unwrap();\n     let vec = it.collect::<Vec<_>>();\n     assert_eq!(vec, [2, 3]);\n-    #[cfg(not(miri))] // Miri does not support comparing dangling pointers\n     assert!(ptr != vec.as_ptr());\n }\n "}, {"sha": "d86e21cf40b6e7e36da4238066adf742cd887d58", "filename": "src/libcore/tests/fmt/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/144ed029c5aa190d16475d19495f170051ec7d46/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/144ed029c5aa190d16475d19495f170051ec7d46/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Fmod.rs?ref=144ed029c5aa190d16475d19495f170051ec7d46", "patch": "@@ -3,7 +3,6 @@ mod float;\n mod num;\n \n #[test]\n-#[cfg(not(miri))] // Miri cannot print pointers\n fn test_format_flags() {\n     // No residual flags left by pointer formatting\n     let p = \"\".as_ptr();\n@@ -13,7 +12,6 @@ fn test_format_flags() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri cannot print pointers\n fn test_pointer_formats_data_pointer() {\n     let b: &[u8] = b\"\";\n     let s: &str = \"\";"}, {"sha": "569b3197d09bd64576d7b3fcac10a619071a09c5", "filename": "src/libcore/tests/ptr.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/144ed029c5aa190d16475d19495f170051ec7d46/src%2Flibcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/144ed029c5aa190d16475d19495f170051ec7d46/src%2Flibcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fptr.rs?ref=144ed029c5aa190d16475d19495f170051ec7d46", "patch": "@@ -253,7 +253,6 @@ fn test_unsized_nonnull() {\n \n #[test]\n #[allow(warnings)]\n-#[cfg(not(miri))] // Miri cannot hash pointers\n // Have a symbol for the test below. It doesn\u2019t need to be an actual variadic function, match the\n // ABI, or even point to an actual executable code, because the function itself is never invoked.\n #[no_mangle]\n@@ -293,7 +292,7 @@ fn write_unaligned_drop() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n+#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n fn align_offset_zst() {\n     // For pointers of stride = 0, the pointer is already aligned or it cannot be aligned at\n     // all, because no amount of elements will align the pointer.\n@@ -308,7 +307,7 @@ fn align_offset_zst() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n+#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n fn align_offset_stride1() {\n     // For pointers of stride = 1, the pointer can always be aligned. The offset is equal to\n     // number of bytes."}, {"sha": "42ec9d451f7901dfbb9aeb00ebcb6d083b595290", "filename": "src/libcore/tests/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/144ed029c5aa190d16475d19495f170051ec7d46/src%2Flibcore%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/144ed029c5aa190d16475d19495f170051ec7d46/src%2Flibcore%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fslice.rs?ref=144ed029c5aa190d16475d19495f170051ec7d46", "patch": "@@ -1415,7 +1415,7 @@ pub mod memchr {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n+#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n fn test_align_to_simple() {\n     let bytes = [1u8, 2, 3, 4, 5, 6, 7];\n     let (prefix, aligned, suffix) = unsafe { bytes.align_to::<u16>() };\n@@ -1439,7 +1439,7 @@ fn test_align_to_zst() {\n }\n \n #[test]\n-#[cfg(not(miri))] // Miri cannot compute actual alignment of an allocation\n+#[cfg(not(miri))] // Miri does not compute a maximal `mid` for `align_offset`\n fn test_align_to_non_trivial() {\n     #[repr(align(8))] struct U64(u64, u64);\n     #[repr(align(8))] struct U64U64U32(u64, u64, u32);"}]}