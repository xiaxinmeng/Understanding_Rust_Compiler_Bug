{"sha": "78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZDNlYTU0ODRjM2ViY2M0OWJkZGJhMzlmNWI1YmU1Zjk5YjhjNjU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-16T02:35:48Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-20T01:31:33Z"}, "message": "When encountering an expected named lifetime and none are present, suggest adding one", "tree": {"sha": "28f9862e934730bbcd8cb8917623c9e8cd10412f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28f9862e934730bbcd8cb8917623c9e8cd10412f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "html_url": "https://github.com/rust-lang/rust/commit/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ba08755dfd9ddbb55248a0263a4e81d3602b410", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ba08755dfd9ddbb55248a0263a4e81d3602b410", "html_url": "https://github.com/rust-lang/rust/commit/6ba08755dfd9ddbb55248a0263a4e81d3602b410"}], "stats": {"total": 268, "additions": 229, "deletions": 39}, "files": [{"sha": "345e5184e84b615178d88b1d25e51d6548e4a35b", "filename": "src/librustc_resolve/lifetimes.rs", "status": "modified", "additions": 72, "deletions": 10, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Flibrustc_resolve%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Flibrustc_resolve%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flifetimes.rs?ref=78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "patch": "@@ -2398,6 +2398,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 lifetime_refs.len(),\n                 &lifetime_names,\n                 self.tcx.sess.source_map().span_to_snippet(span).ok().as_ref().map(|s| s.as_str()),\n+                &self.missing_named_lifetime_spots,\n             );\n         }\n \n@@ -2908,19 +2909,80 @@ fn add_missing_lifetime_specifiers_label(\n     count: usize,\n     lifetime_names: &FxHashSet<ast::Ident>,\n     snippet: Option<&str>,\n+    missing_named_lifetime_spots: &[&hir::Generics<'_>],\n ) {\n     if count > 1 {\n         err.span_label(span, format!(\"expected {} lifetime parameters\", count));\n-    } else if let (1, Some(name), Some(\"&\")) =\n-        (lifetime_names.len(), lifetime_names.iter().next(), snippet)\n-    {\n-        err.span_suggestion(\n-            span,\n-            \"consider using the named lifetime\",\n-            format!(\"&{} \", name),\n-            Applicability::MaybeIncorrect,\n-        );\n     } else {\n-        err.span_label(span, \"expected lifetime parameter\");\n+        let mut introduce_suggestion = vec![];\n+        if let Some(generics) = missing_named_lifetime_spots.iter().last() {\n+            introduce_suggestion.push(match &generics.params {\n+                [] => (generics.span, \"<'lifetime>\".to_string()),\n+                [param, ..] => (param.span.shrink_to_lo(), \"'lifetime, \".to_string()),\n+            });\n+        }\n+\n+        match (lifetime_names.len(), lifetime_names.iter().next(), snippet) {\n+            (1, Some(name), Some(\"&\")) => {\n+                err.span_suggestion(\n+                    span,\n+                    \"consider using the named lifetime\",\n+                    format!(\"&{} \", name),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+            (1, Some(name), Some(\"'_\")) => {\n+                err.span_suggestion(\n+                    span,\n+                    \"consider using the named lifetime\",\n+                    name.to_string(),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+            (1, Some(name), Some(snippet)) if !snippet.ends_with(\">\") => {\n+                err.span_suggestion(\n+                    span,\n+                    \"consider using the named lifetime\",\n+                    format!(\"{}<{}>\", snippet, name),\n+                    Applicability::MaybeIncorrect,\n+                );\n+            }\n+            (0, _, Some(\"&\")) => {\n+                err.span_label(span, \"expected named lifetime parameter\");\n+                if !introduce_suggestion.is_empty() {\n+                    introduce_suggestion.push((span, \"&'lifetime \".to_string()));\n+                    err.multipart_suggestion(\n+                        \"consider introducing a named lifetime\",\n+                        introduce_suggestion,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            }\n+            (0, _, Some(\"'_\")) => {\n+                err.span_label(span, \"expected named lifetime parameter\");\n+                if !introduce_suggestion.is_empty() {\n+                    introduce_suggestion.push((span, \"'lifetime\".to_string()));\n+                    err.multipart_suggestion(\n+                        \"consider introducing a named lifetime\",\n+                        introduce_suggestion,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            }\n+            (0, _, Some(snippet)) if !snippet.ends_with(\">\") => {\n+                err.span_label(span, \"expected named lifetime parameter\");\n+                if !introduce_suggestion.is_empty() {\n+                    introduce_suggestion.push((span, format!(\"{}<'lifetime>\", snippet)));\n+                    err.multipart_suggestion(\n+                        \"consider introducing a named lifetime\",\n+                        introduce_suggestion,\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+            }\n+            _ => {\n+                err.span_label(span, \"expected lifetime parameter\");\n+            }\n+        }\n     }\n }"}, {"sha": "cc3438727a817d7d5ab9edb7d19f4c9fd045ddf0", "filename": "src/test/ui/error-codes/E0106.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Ferror-codes%2FE0106.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Ferror-codes%2FE0106.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0106.rs?ref=78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "patch": "@@ -16,7 +16,7 @@ struct Buzz<'a, 'b>(&'a str, &'b str);\n struct Quux {\n     baz: Baz,\n     //~^ ERROR E0106\n-    //~| expected lifetime parameter\n+    //~| expected named lifetime parameter\n     buzz: Buzz,\n     //~^ ERROR E0106\n     //~| expected 2 lifetime parameters"}, {"sha": "bb7efa90c8002d89bc927d4fad6d128b959f2b9a", "filename": "src/test/ui/error-codes/E0106.stderr", "status": "modified", "additions": 28, "deletions": 4, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0106.stderr?ref=78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "patch": "@@ -2,25 +2,49 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/E0106.rs:2:8\n    |\n LL |     x: &bool,\n-   |        ^ expected lifetime parameter\n+   |        ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime\n+   |\n+LL | struct Foo<'lifetime> {\n+LL |     x: &'lifetime bool,\n+   |\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/E0106.rs:7:7\n    |\n LL |     B(&bool),\n-   |       ^ expected lifetime parameter\n+   |       ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime\n+   |\n+LL | enum Bar<'lifetime> {\n+LL |     A(u8),\n+LL |     B(&'lifetime bool),\n+   |\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/E0106.rs:10:14\n    |\n LL | type MyStr = &str;\n-   |              ^ expected lifetime parameter\n+   |              ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime\n+   |\n+LL | type MyStr<'lifetime> = &'lifetime str;\n+   |           ^^^^^^^^^^^   ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/E0106.rs:17:10\n    |\n LL |     baz: Baz,\n-   |          ^^^ expected lifetime parameter\n+   |          ^^^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime\n+   |\n+LL | struct Quux<'lifetime> {\n+LL |     baz: Baz<'lifetime>,\n+   |\n \n error[E0106]: missing lifetime specifiers\n   --> $DIR/E0106.rs:20:11"}, {"sha": "0835970df40f59c0dc16cccaaa9ba98a20eca20c", "filename": "src/test/ui/impl-header-lifetime-elision/assoc-type.stderr", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fassoc-type.stderr?ref=78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "patch": "@@ -2,13 +2,23 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/assoc-type.rs:11:19\n    |\n LL |     type Output = &i32;\n-   |                   ^ expected lifetime parameter\n+   |                   ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime\n+   |\n+LL |     type Output<'lifetime> = &'lifetime i32;\n+   |                ^^^^^^^^^^^   ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/assoc-type.rs:16:20\n    |\n LL |     type Output = &'_ i32;\n-   |                    ^^ expected lifetime parameter\n+   |                    ^^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime\n+   |\n+LL |     type Output<'lifetime> = &'lifetime i32;\n+   |                ^^^^^^^^^^^    ^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "32507e21d27b51f47da03e988dbca9f0bfcf5595", "filename": "src/test/ui/in-band-lifetimes/issue-61124-anon-lifetime-in-struct-declaration.stderr", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fissue-61124-anon-lifetime-in-struct-declaration.stderr?ref=78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "patch": "@@ -2,7 +2,12 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-61124-anon-lifetime-in-struct-declaration.rs:8:19\n    |\n LL | struct Heartbreak(Betrayal);\n-   |                   ^^^^^^^^ expected lifetime parameter\n+   |                   ^^^^^^^^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime\n+   |\n+LL | struct Heartbreak<'lifetime>(Betrayal<'lifetime>);\n+   |                  ^^^^^^^^^^^ ^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "51a8aabb483070f941eea5dfed30b40c5910c89c", "filename": "src/test/ui/issues/issue-19707.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-19707.stderr?ref=78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "patch": "@@ -2,17 +2,25 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-19707.rs:3:28\n    |\n LL | type Foo = fn(&u8, &u8) -> &u8;\n-   |                            ^ expected lifetime parameter\n+   |                            ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+help: consider introducing a named lifetime\n+   |\n+LL | type Foo<'lifetime> = fn(&u8, &u8) -> &'lifetime u8;\n+   |         ^^^^^^^^^^^                   ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-19707.rs:5:27\n    |\n LL | fn bar<F: Fn(&u8, &u8) -> &u8>(f: &F) {}\n-   |                           ^ expected lifetime parameter\n+   |                           ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+help: consider introducing a named lifetime\n+   |\n+LL | fn bar<'lifetime, F: Fn(&u8, &u8) -> &'lifetime u8>(f: &F) {}\n+   |        ^^^^^^^^^^                    ^^^^^^^^^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "8396c932c5b43a390371373c7815de70ae740463", "filename": "src/test/ui/issues/issue-26638.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-26638.stderr?ref=78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "patch": "@@ -2,9 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:1:62\n    |\n LL | fn parse_type(iter: Box<dyn Iterator<Item=&str>+'static>) -> &str { iter.next() }\n-   |                                                              ^ expected lifetime parameter\n+   |                                                              ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `iter`'s 2 lifetimes it is borrowed from\n+help: consider introducing a named lifetime\n+   |\n+LL | fn parse_type<'lifetime>(iter: Box<dyn Iterator<Item=&str>+'static>) -> &'lifetime str { iter.next() }\n+   |              ^^^^^^^^^^^                                                ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-26638.rs:4:40"}, {"sha": "64f89496caaa399420477442c4de97b2e37f1840", "filename": "src/test/ui/issues/issue-30255.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30255.stderr?ref=78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "patch": "@@ -2,25 +2,37 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:9:24\n    |\n LL | fn f(a: &S, b: i32) -> &i32 {\n-   |                        ^ expected lifetime parameter\n+   |                        ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `a`'s 2 lifetimes it is borrowed from\n+help: consider introducing a named lifetime\n+   |\n+LL | fn f<'lifetime>(a: &S, b: i32) -> &'lifetime i32 {\n+   |     ^^^^^^^^^^^                   ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:14:34\n    |\n LL | fn g(a: &S, b: bool, c: &i32) -> &i32 {\n-   |                                  ^ expected lifetime parameter\n+   |                                  ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from one of `a`'s 2 lifetimes or `c`\n+help: consider introducing a named lifetime\n+   |\n+LL | fn g<'lifetime>(a: &S, b: bool, c: &i32) -> &'lifetime i32 {\n+   |     ^^^^^^^^^^^                             ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/issue-30255.rs:19:44\n    |\n LL | fn h(a: &bool, b: bool, c: &S, d: &i32) -> &i32 {\n-   |                                            ^ expected lifetime parameter\n+   |                                            ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `a`, one of `c`'s 2 lifetimes, or `d`\n+help: consider introducing a named lifetime\n+   |\n+LL | fn h<'lifetime>(a: &bool, b: bool, c: &S, d: &i32) -> &'lifetime i32 {\n+   |     ^^^^^^^^^^^                                       ^^^^^^^^^^\n \n error: aborting due to 3 previous errors\n "}, {"sha": "075ea3c691fca32d02c4a28185d0aee3219ab522", "filename": "src/test/ui/lifetimes/lifetime-elision-return-type-requires-explicit-lifetime.stderr", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-elision-return-type-requires-explicit-lifetime.stderr?ref=78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "patch": "@@ -10,17 +10,25 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:7:33\n    |\n LL | fn g(_x: &isize, _y: &isize) -> &isize {\n-   |                                 ^ expected lifetime parameter\n+   |                                 ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `_x` or `_y`\n+help: consider introducing a named lifetime\n+   |\n+LL | fn g<'lifetime>(_x: &isize, _y: &isize) -> &'lifetime isize {\n+   |     ^^^^^^^^^^^                            ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:17:19\n    |\n LL | fn h(_x: &Foo) -> &isize {\n-   |                   ^ expected lifetime parameter\n+   |                   ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say which one of `_x`'s 2 lifetimes it is borrowed from\n+help: consider introducing a named lifetime\n+   |\n+LL | fn h<'lifetime>(_x: &Foo) -> &'lifetime isize {\n+   |     ^^^^^^^^^^^              ^^^^^^^^^^\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/lifetime-elision-return-type-requires-explicit-lifetime.rs:21:20"}, {"sha": "f95b4cb16be2fc9e95b38816f88cba34a6dd0c1e", "filename": "src/test/ui/lifetimes/lifetime-errors/ex1b-return-no-names-if-else.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-errors%2Fex1b-return-no-names-if-else.stderr?ref=78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "patch": "@@ -2,9 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/ex1b-return-no-names-if-else.rs:1:29\n    |\n LL | fn foo(x: &i32, y: &i32) -> &i32 {\n-   |                             ^ expected lifetime parameter\n+   |                             ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\n+help: consider introducing a named lifetime\n+   |\n+LL | fn foo<'lifetime>(x: &i32, y: &i32) -> &'lifetime i32 {\n+   |       ^^^^^^^^^^^                      ^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "19bbadbcd4177c9fa0bb33134ad30b33003fdb70", "filename": "src/test/ui/proc-macro/item-error.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Fproc-macro%2Fitem-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Fproc-macro%2Fitem-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fitem-error.stderr?ref=78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "patch": "@@ -2,7 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/item-error.rs:10:8\n    |\n LL |     a: &u64\n-   |        ^ expected lifetime parameter\n+   |        ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime\n+   |\n+LL | struct A<'lifetime> {\n+LL |     a: &'lifetime u64\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "6e653452f552b44fa28617c1b6be1c13c7c3e3fa", "filename": "src/test/ui/regions/regions-in-enums-anon.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-enums-anon.stderr?ref=78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "patch": "@@ -2,7 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/regions-in-enums-anon.rs:4:9\n    |\n LL |     Bar(&isize)\n-   |         ^ expected lifetime parameter\n+   |         ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime\n+   |\n+LL | enum Foo<'lifetime> {\n+LL |     Bar(&'lifetime isize)\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "b40990e3edbed7e0728550f5776f10cd6fd14e94", "filename": "src/test/ui/regions/regions-in-structs-anon.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs-anon.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs-anon.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-in-structs-anon.stderr?ref=78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "patch": "@@ -2,7 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/regions-in-structs-anon.rs:4:8\n    |\n LL |     x: &isize\n-   |        ^ expected lifetime parameter\n+   |        ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime\n+   |\n+LL | struct Foo<'lifetime> {\n+LL |     x: &'lifetime isize\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "5b665e181412a73d4cc51b5f0fd1ff96651a409b", "filename": "src/test/ui/rfc1623.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Frfc1623.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Frfc1623.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc1623.stderr?ref=78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "patch": "@@ -2,15 +2,15 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/rfc1623.rs:8:42\n    |\n LL | static NON_ELIDABLE_FN: &fn(&u8, &u8) -> &u8 =\n-   |                                          ^ expected lifetime parameter\n+   |                                          ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/rfc1623.rs:10:39\n    |\n LL |     &(non_elidable as fn(&u8, &u8) -> &u8);\n-   |                                       ^ expected lifetime parameter\n+   |                                       ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n "}, {"sha": "3b101bf304a7d6f918b2458a7a006cbb488d8af8", "filename": "src/test/ui/unboxed-closures/unboxed-closure-sugar-lifetime-elision.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funboxed-closures%2Funboxed-closure-sugar-lifetime-elision.stderr?ref=78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "patch": "@@ -2,9 +2,18 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/unboxed-closure-sugar-lifetime-elision.rs:26:39\n    |\n LL |     let _: dyn Foo(&isize, &usize) -> &usize;\n-   |                                       ^ expected lifetime parameter\n+   |                                       ^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or argument 2\n+help: consider introducing a named lifetime\n+   |\n+LL | fn main<'lifetime>() {\n+LL |     eq::< dyn for<'a> Foo<(&'a isize,), Output=&'a isize>,\n+LL |           dyn Foo(&isize) -> &isize                                   >();\n+LL |     eq::< dyn for<'a> Foo<(&'a isize,), Output=(&'a isize, &'a isize)>,\n+LL |           dyn Foo(&isize) -> (&isize, &isize)                           >();\n+LL | \n+ ...\n \n error: aborting due to previous error\n "}, {"sha": "c06891d2308ca517a6db16984c398c32a7872448", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore-in-struct.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr?ref=78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "patch": "@@ -2,7 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/dyn-trait-underscore-in-struct.rs:9:24\n    |\n LL |     x: Box<dyn Debug + '_>,\n-   |                        ^^ expected lifetime parameter\n+   |                        ^^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime\n+   |\n+LL | struct Foo<'lifetime> {\n+LL |     x: Box<dyn Debug + 'lifetime>,\n+   |\n \n error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n   --> $DIR/dyn-trait-underscore-in-struct.rs:9:12"}, {"sha": "bdfb8ce4d83d48671cc883f00a883da41805edb7", "filename": "src/test/ui/underscore-lifetime/in-fn-return-illegal.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-fn-return-illegal.stderr?ref=78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "patch": "@@ -2,9 +2,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/in-fn-return-illegal.rs:5:30\n    |\n LL | fn foo(x: &u32, y: &u32) -> &'_ u32 { loop { } }\n-   |                              ^^ expected lifetime parameter\n+   |                              ^^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from `x` or `y`\n+help: consider introducing a named lifetime\n+   |\n+LL | fn foo<'lifetime>(x: &u32, y: &u32) -> &'lifetime u32 { loop { } }\n+   |       ^^^^^^^^^^^                       ^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "46dc3f899a140a6253f9c588584e304d7dc546e9", "filename": "src/test/ui/underscore-lifetime/in-struct.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fin-struct.stderr?ref=78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "patch": "@@ -2,13 +2,25 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/in-struct.rs:6:9\n    |\n LL |     x: &'_ u32,\n-   |         ^^ expected lifetime parameter\n+   |         ^^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime\n+   |\n+LL | struct Foo<'lifetime> {\n+LL |     x: &'lifetime u32,\n+   |\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/in-struct.rs:10:14\n    |\n LL |     Variant(&'_ u32),\n-   |              ^^ expected lifetime parameter\n+   |              ^^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime\n+   |\n+LL | enum Bar<'lifetime> {\n+LL |     Variant(&'lifetime u32),\n+   |\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6c2159bc661691077892ce88761dc59546221171", "filename": "src/test/ui/underscore-lifetime/underscore-lifetime-binders.stderr", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Funderscore-lifetime-binders.stderr?ref=78d3ea5484c3ebcc49bddba39f5b5be5f99b8c65", "patch": "@@ -14,7 +14,7 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:2:17\n    |\n LL | struct Baz<'a>(&'_ &'a u8);\n-   |                 ^^ expected lifetime parameter\n+   |                 ^^ help: consider using the named lifetime: `'a`\n \n error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:10:33\n@@ -28,9 +28,13 @@ error[E0106]: missing lifetime specifier\n   --> $DIR/underscore-lifetime-binders.rs:16:35\n    |\n LL | fn foo2(_: &'_ u8, y: &'_ u8) -> &'_ u8 { y }\n-   |                                   ^^ expected lifetime parameter\n+   |                                   ^^ expected named lifetime parameter\n    |\n    = help: this function's return type contains a borrowed value, but the signature does not say whether it is borrowed from argument 1 or `y`\n+help: consider introducing a named lifetime\n+   |\n+LL | fn foo2<'lifetime>(_: &'_ u8, y: &'_ u8) -> &'lifetime u8 { y }\n+   |        ^^^^^^^^^^^                           ^^^^^^^^^\n \n error: aborting due to 5 previous errors\n "}]}