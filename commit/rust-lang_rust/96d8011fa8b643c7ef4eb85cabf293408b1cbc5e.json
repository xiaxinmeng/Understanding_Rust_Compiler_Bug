{"sha": "96d8011fa8b643c7ef4eb85cabf293408b1cbc5e", "node_id": "C_kwDOAAsO6NoAKDk2ZDgwMTFmYThiNjQzYzdlZjRlYjg1Y2FiZjI5MzQwOGIxY2JjNWU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-28T04:16:36Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-28T04:18:37Z"}, "message": "better names and a comment", "tree": {"sha": "3963ed5da6c062babf0a2008d0da129fcb0197bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3963ed5da6c062babf0a2008d0da129fcb0197bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e", "html_url": "https://github.com/rust-lang/rust/commit/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7b414adb67d01037f43cf81477428c36836203c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7b414adb67d01037f43cf81477428c36836203c", "html_url": "https://github.com/rust-lang/rust/commit/c7b414adb67d01037f43cf81477428c36836203c"}], "stats": {"total": 51, "additions": 42, "deletions": 9}, "files": [{"sha": "a767338ab85ccbb7a0a75a040e777c73dd5442c7", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=96d8011fa8b643c7ef4eb85cabf293408b1cbc5e", "patch": "@@ -441,8 +441,41 @@ fn compare_asyncness<'tcx>(\n     Ok(())\n }\n \n+/// Given a method def-id in an impl, compare the method signature of the impl\n+/// against the trait that it's implementing. In doing so, infer the hidden types\n+/// that this method's signature provides to satisfy each return-position `impl Trait`\n+/// in the trait signature.\n+///\n+/// The method is also responsible for making sure that the hidden types for each\n+/// RPITIT actually satisfy the bounds of the `impl Trait`, i.e. that if we infer\n+/// `impl Trait = Foo`, that `Foo: Trait` holds.\n+///\n+/// For example, given the sample code:\n+///\n+/// ```\n+/// #![feature(return_position_impl_trait_in_trait)]\n+///\n+/// use std::ops::Deref;\n+///\n+/// trait Foo {\n+///     fn bar() -> impl Deref<Target = impl Sized>;\n+///              // ^- RPITIT #1        ^- RPITIT #2\n+/// }\n+///\n+/// impl Foo for () {\n+///     fn bar() -> Box<String> { Box::new(String::new()) }\n+/// }\n+/// ```\n+///\n+/// The hidden types for the RPITITs in `bar` would be inferred to:\n+///     * `impl Deref` (RPITIT #1) = `Box<String>`\n+///     * `impl Sized` (RPITIT #2) = `String`\n+///\n+/// The relationship between these two types is straightforward in this case, but\n+/// may be more tenuously connected via other `impl`s and normalization rules for\n+/// cases of more complicated nested RPITITs.\n #[instrument(skip(tcx), level = \"debug\", ret)]\n-pub(super) fn collect_trait_impl_trait_tys<'tcx>(\n+pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n ) -> Result<&'tcx FxHashMap<DefId, Ty<'tcx>>, ErrorGuaranteed> {"}, {"sha": "382c3f5294511a40c364060f7b050773bcad737f", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=96d8011fa8b643c7ef4eb85cabf293408b1cbc5e", "patch": "@@ -94,7 +94,7 @@ use std::num::NonZeroU32;\n use crate::require_c_abi_if_c_variadic;\n use crate::util::common::indenter;\n \n-use self::compare_impl_item::collect_trait_impl_trait_tys;\n+use self::compare_impl_item::collect_return_position_impl_trait_in_trait_tys;\n use self::region::region_scope_tree;\n \n pub fn provide(providers: &mut Providers) {\n@@ -103,7 +103,7 @@ pub fn provide(providers: &mut Providers) {\n         adt_destructor,\n         check_mod_item_types,\n         region_scope_tree,\n-        collect_trait_impl_trait_tys,\n+        collect_return_position_impl_trait_in_trait_tys,\n         compare_impl_const: compare_impl_item::compare_impl_const_raw,\n         ..*providers\n     };"}, {"sha": "e167bbf57e62253b97551159e99fb7c4f515716f", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=96d8011fa8b643c7ef4eb85cabf293408b1cbc5e", "patch": "@@ -223,7 +223,7 @@ provide! { tcx, def_id, other, cdata,\n     generator_kind => { table }\n     trait_def => { table }\n     deduced_param_attrs => { table }\n-    collect_trait_impl_trait_tys => {\n+    collect_return_position_impl_trait_in_trait_tys => {\n         Ok(cdata\n             .root\n             .tables"}, {"sha": "717384e2b09449980e42befd0f2a4face0f8866c", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=96d8011fa8b643c7ef4eb85cabf293408b1cbc5e", "patch": "@@ -1197,7 +1197,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n                 record!(self.tables.params_in_repr[def_id] <- params_in_repr);\n             }\n             if should_encode_trait_impl_trait_tys(tcx, def_id)\n-                && let Ok(table) = self.tcx.collect_trait_impl_trait_tys(def_id)\n+                && let Ok(table) = self.tcx.collect_return_position_impl_trait_in_trait_tys(def_id)\n             {\n                 record!(self.tables.trait_impl_trait_tys[def_id] <- table);\n             }"}, {"sha": "37db2274f678fa0ab42f94847d6f43fed9155f91", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=96d8011fa8b643c7ef4eb85cabf293408b1cbc5e", "patch": "@@ -169,7 +169,7 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query collect_trait_impl_trait_tys(key: DefId)\n+    query collect_return_position_impl_trait_in_trait_tys(key: DefId)\n         -> Result<&'tcx FxHashMap<DefId, Ty<'tcx>>, ErrorGuaranteed>\n     {\n         desc { \"comparing an impl and trait method signature, inferring any hidden `impl Trait` types in the process\" }"}, {"sha": "cc53659f827986d7ff4b7a72163730bcb8a5f5eb", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=96d8011fa8b643c7ef4eb85cabf293408b1cbc5e", "patch": "@@ -641,11 +641,11 @@ impl<'tcx> TyCtxt<'tcx> {\n         ty::EarlyBinder(self.type_of(def_id))\n     }\n \n-    pub fn bound_trait_impl_trait_tys(\n+    pub fn bound_return_position_impl_trait_in_trait_tys(\n         self,\n         def_id: DefId,\n     ) -> ty::EarlyBinder<Result<&'tcx FxHashMap<DefId, Ty<'tcx>>, ErrorGuaranteed>> {\n-        ty::EarlyBinder(self.collect_trait_impl_trait_tys(def_id))\n+        ty::EarlyBinder(self.collect_return_position_impl_trait_in_trait_tys(def_id))\n     }\n \n     pub fn bound_fn_sig(self, def_id: DefId) -> ty::EarlyBinder<ty::PolyFnSig<'tcx>> {"}, {"sha": "f7614997585cf910c1173db7d58b9e610e11af59", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96d8011fa8b643c7ef4eb85cabf293408b1cbc5e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=96d8011fa8b643c7ef4eb85cabf293408b1cbc5e", "patch": "@@ -2284,7 +2284,7 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n         obligation.param_env,\n         cause.clone(),\n         obligation.recursion_depth + 1,\n-        tcx.bound_trait_impl_trait_tys(impl_fn_def_id)\n+        tcx.bound_return_position_impl_trait_in_trait_tys(impl_fn_def_id)\n             .map_bound(|tys| {\n                 tys.map_or_else(|_| tcx.ty_error(), |tys| tys[&obligation.predicate.def_id])\n             })"}]}