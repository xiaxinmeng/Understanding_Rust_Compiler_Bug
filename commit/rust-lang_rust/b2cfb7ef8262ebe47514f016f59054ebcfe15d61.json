{"sha": "b2cfb7ef8262ebe47514f016f59054ebcfe15d61", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyY2ZiN2VmODI2MmViZTQ3NTE0ZjAxNmY1OTA1NGViY2ZlMTVkNjE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-15T06:23:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-16T19:12:22Z"}, "message": "rt: Add rust_port_select function", "tree": {"sha": "871bc0980b26b11d700761cad9a8ac245f5fcedc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/871bc0980b26b11d700761cad9a8ac245f5fcedc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b2cfb7ef8262ebe47514f016f59054ebcfe15d61", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b2cfb7ef8262ebe47514f016f59054ebcfe15d61", "html_url": "https://github.com/rust-lang/rust/commit/b2cfb7ef8262ebe47514f016f59054ebcfe15d61", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b2cfb7ef8262ebe47514f016f59054ebcfe15d61/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e62ddf48988087d19934e1fdc6abb6de5f7a6a02", "url": "https://api.github.com/repos/rust-lang/rust/commits/e62ddf48988087d19934e1fdc6abb6de5f7a6a02", "html_url": "https://github.com/rust-lang/rust/commit/e62ddf48988087d19934e1fdc6abb6de5f7a6a02"}], "stats": {"total": 162, "additions": 153, "deletions": 9}, "files": [{"sha": "26f35ea90dbe4c007a5b8482c22f67b2cb601221", "filename": "mk/rt.mk", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2cfb7ef8262ebe47514f016f59054ebcfe15d61/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/b2cfb7ef8262ebe47514f016f59054ebcfe15d61/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=b2cfb7ef8262ebe47514f016f59054ebcfe15d61", "patch": "@@ -52,6 +52,7 @@ RUNTIME_CS_$(1) := \\\n               rt/rust_uv.cpp \\\n               rt/rust_uvtmp.cpp \\\n               rt/rust_log.cpp \\\n+              rt/rust_port_selector.cpp \\\n               rt/circular_buffer.cpp \\\n               rt/isaac/randport.cpp \\\n               rt/rust_srv.cpp \\\n@@ -88,6 +89,7 @@ RUNTIME_HDR_$(1) := rt/globals.h \\\n                rt/rust_stack.h \\\n                rt/rust_task_list.h \\\n                rt/rust_log.h \\\n+               rt/rust_port_selector.h \\\n                rt/circular_buffer.h \\\n                rt/util/array_list.h \\\n                rt/util/indexed_list.h \\"}, {"sha": "ecc73204f29c823ef21b537af135332584adcc5d", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b2cfb7ef8262ebe47514f016f59054ebcfe15d61/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b2cfb7ef8262ebe47514f016f59054ebcfe15d61/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=b2cfb7ef8262ebe47514f016f59054ebcfe15d61", "patch": "@@ -593,6 +593,14 @@ port_recv(uintptr_t *dptr, rust_port *port,\n     return;\n }\n \n+extern \"C\" CDECL void\n+rust_port_select(rust_port **dptr, rust_port **ports,\n+                 size_t n_ports, uintptr_t *yield) {\n+    rust_task *task = rust_task_thread::get_task();\n+    rust_port_selector *selector = task->get_port_selector();\n+    selector->select(task, dptr, ports, n_ports, yield);\n+}\n+\n extern \"C\" CDECL void\n rust_set_exit_status(intptr_t code) {\n     rust_task *task = rust_task_thread::get_task();"}, {"sha": "5f46b9c4ca0a51c75ce3cb86936802bf9c9a9632", "filename": "src/rt/rust_port.cpp", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/b2cfb7ef8262ebe47514f016f59054ebcfe15d61/src%2Frt%2Frust_port.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b2cfb7ef8262ebe47514f016f59054ebcfe15d61/src%2Frt%2Frust_port.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.cpp?ref=b2cfb7ef8262ebe47514f016f59054ebcfe15d61", "patch": "@@ -30,18 +30,34 @@ void rust_port::detach() {\n \n void rust_port::send(void *sptr) {\n     I(task->thread, !lock.lock_held_by_current_thread());\n-    scoped_lock with(lock);\n+    bool did_rendezvous = false;\n+    {\n+        scoped_lock with(lock);\n+\n+        buffer.enqueue(sptr);\n \n-    buffer.enqueue(sptr);\n+        A(kernel, !buffer.is_empty(),\n+          \"rust_chan::transmit with nothing to send.\");\n+\n+        if (task->blocked_on(this)) {\n+            KLOG(kernel, comm, \"dequeued in rendezvous_ptr\");\n+            buffer.dequeue(task->rendezvous_ptr);\n+            task->rendezvous_ptr = 0;\n+            task->wakeup(this);\n+            did_rendezvous = true;\n+        }\n+    }\n \n-    A(kernel, !buffer.is_empty(),\n-      \"rust_chan::transmit with nothing to send.\");\n+    if (!did_rendezvous) {\n+        // If the task wasn't waiting specifically on this port,\n+        // it may be waiting on a group of ports\n \n-    if (task->blocked_on(this)) {\n-        KLOG(kernel, comm, \"dequeued in rendezvous_ptr\");\n-        buffer.dequeue(task->rendezvous_ptr);\n-        task->rendezvous_ptr = 0;\n-        task->wakeup(this);\n+        rust_port_selector *port_selector = task->get_port_selector();\n+        // This check is not definitive. The port selector will take a lock\n+        // and check again whether the task is still blocked.\n+        if (task->blocked_on(port_selector)) {\n+            port_selector->msg_sent_on(this);\n+        }\n     }\n }\n "}, {"sha": "92ece8a7841e3a6214cb01a01617e5b755349d42", "filename": "src/rt/rust_port.h", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b2cfb7ef8262ebe47514f016f59054ebcfe15d61/src%2Frt%2Frust_port.h", "raw_url": "https://github.com/rust-lang/rust/raw/b2cfb7ef8262ebe47514f016f59054ebcfe15d61/src%2Frt%2Frust_port.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port.h?ref=b2cfb7ef8262ebe47514f016f59054ebcfe15d61", "patch": "@@ -1,6 +1,8 @@\n #ifndef RUST_PORT_H\n #define RUST_PORT_H\n \n+#include \"rust_internal.h\"\n+\n class rust_port : public kernel_owned<rust_port>, public rust_cond {\n public:\n     RUST_REFCOUNTED(rust_port)"}, {"sha": "e9c351738f74fdfc5087c9a7fcd3aaf66986d083", "filename": "src/rt/rust_port_selector.cpp", "status": "added", "additions": 83, "deletions": 0, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/b2cfb7ef8262ebe47514f016f59054ebcfe15d61/src%2Frt%2Frust_port_selector.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b2cfb7ef8262ebe47514f016f59054ebcfe15d61/src%2Frt%2Frust_port_selector.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port_selector.cpp?ref=b2cfb7ef8262ebe47514f016f59054ebcfe15d61", "patch": "@@ -0,0 +1,83 @@\n+#include \"rust_port.h\"\n+#include \"rust_port_selector.h\"\n+\n+rust_port_selector::rust_port_selector()\n+    : ports(NULL), n_ports(0) {\n+}\n+\n+void\n+rust_port_selector::select(rust_task *task, rust_port **dptr,\n+\t\t\t   rust_port **ports,\n+\t\t\t   size_t n_ports, uintptr_t *yield) {\n+\n+    I(task->thread, this->ports == NULL);\n+    I(task->thread, this->n_ports == 0);\n+    I(task->thread, dptr != NULL);\n+    I(task->thread, ports != NULL);\n+    I(task->thread, n_ports != 0);\n+    I(task->thread, yield != NULL);\n+\n+    *yield = false;\n+    size_t locks_taken = 0;\n+    bool found_msg = false;\n+\n+    // Take each port's lock as we iterate through them because\n+    // if none of them contain a usable message then we need to\n+    // block the task before any of them can try to send another\n+    // message.\n+\n+    for (size_t i = 0; i < n_ports; i++) {\n+\trust_port *port = ports[i];\n+\tI(task->thread, port != NULL);\n+\n+\tport->lock.lock();\n+\tlocks_taken++;\n+\n+\tif (port->buffer.size() > 0) {\n+\t    *dptr = port;\n+\t    found_msg = true;\n+\t    break;\n+\t}\n+    }\n+\n+    if (!found_msg) {\n+\tthis->ports = ports;\n+\tthis->n_ports = n_ports;\n+\tI(task->thread, task->rendezvous_ptr == NULL);\n+\ttask->rendezvous_ptr = (uintptr_t*)dptr;\n+\t*yield = true;\n+\ttask->block(this, \"waiting for select rendezvous\");\n+    }\n+\n+    for (size_t i = 0; i < locks_taken; i++) {\n+\trust_port *port = ports[i];\n+\tport->lock.unlock();\n+    }\n+}\n+\n+void\n+rust_port_selector::msg_sent_on(rust_port *port) {\n+    rust_task *task = port->task;\n+\n+    I(task->thread, !task->lock.lock_held_by_current_thread());\n+    I(task->thread, !port->lock.lock_held_by_current_thread());\n+    I(task->thread, !rendezvous_lock.lock_held_by_current_thread());\n+\n+    // Prevent two ports from trying to wake up the task\n+    // simultaneously\n+    scoped_lock with(rendezvous_lock);\n+\n+    if (task->blocked_on(this)) {\n+\tfor (size_t i = 0; i < n_ports; i++) {\n+\t    if (port == ports[i]) {\n+\t\t// This was one of the ports we were waiting on\n+\t\tports = NULL;\n+\t\tn_ports = 0;\n+\t\t*task->rendezvous_ptr = (uintptr_t) port;\n+\t\ttask->rendezvous_ptr = NULL;\n+\t\ttask->wakeup(this);\n+\t\treturn;\n+\t    }\n+\t}\n+    }\n+}"}, {"sha": "8b4d902a2493bda7beb7007e049b59635b849f64", "filename": "src/rt/rust_port_selector.h", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b2cfb7ef8262ebe47514f016f59054ebcfe15d61/src%2Frt%2Frust_port_selector.h", "raw_url": "https://github.com/rust-lang/rust/raw/b2cfb7ef8262ebe47514f016f59054ebcfe15d61/src%2Frt%2Frust_port_selector.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_port_selector.h?ref=b2cfb7ef8262ebe47514f016f59054ebcfe15d61", "patch": "@@ -0,0 +1,27 @@\n+#ifndef RUST_PORT_SELECTOR_H\n+#define RUST_PORT_SELECTOR_H\n+\n+#include \"rust_internal.h\"\n+\n+struct rust_task;\n+class rust_port;\n+\n+class rust_port_selector : public rust_cond {\n+ private:\n+    rust_port **ports;\n+    size_t n_ports;\n+    lock_and_signal rendezvous_lock;\n+\n+ public:\n+    rust_port_selector();\n+\n+    void select(rust_task *task,\n+\t\trust_port **dptr,\n+\t\trust_port **ports,\n+\t\tsize_t n_ports,\n+\t\tuintptr_t *yield);\n+\n+    void msg_sent_on(rust_port *port);\n+};\n+\n+#endif /* RUST_PORT_SELECTOR_H */"}, {"sha": "fe1b94d6ea54a064102a46e6e29f7b6f0bb8ab98", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b2cfb7ef8262ebe47514f016f59054ebcfe15d61/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/b2cfb7ef8262ebe47514f016f59054ebcfe15d61/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=b2cfb7ef8262ebe47514f016f59054ebcfe15d61", "patch": "@@ -16,6 +16,7 @@\n #include \"rust_obstack.h\"\n #include \"boxed_region.h\"\n #include \"rust_stack.h\"\n+#include \"rust_port_selector.h\"\n \n // Corresponds to the rust chan (currently _chan) type.\n struct chan_handle {\n@@ -116,6 +117,8 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     uintptr_t next_c_sp;\n     uintptr_t next_rust_sp;\n \n+    rust_port_selector port_selector;\n+\n     // Called when the atomic refcount reaches zero\n     void delete_this();\n \n@@ -206,6 +209,8 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     void call_on_c_stack(void *args, void *fn_ptr);\n     void call_on_rust_stack(void *args, void *fn_ptr);\n     bool have_c_stack() { return c_stack != NULL; }\n+\n+    rust_port_selector *get_port_selector() { return &port_selector; }\n };\n \n // This stuff is on the stack-switching fast path"}, {"sha": "2030f3207067a9df12f6a50effe41356185ac220", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b2cfb7ef8262ebe47514f016f59054ebcfe15d61/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/b2cfb7ef8262ebe47514f016f59054ebcfe15d61/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=b2cfb7ef8262ebe47514f016f59054ebcfe15d61", "patch": "@@ -17,6 +17,7 @@ nano_time\n new_port\n new_task\n port_recv\n+rust_port_select\n rand_free\n rand_new\n rand_next"}]}