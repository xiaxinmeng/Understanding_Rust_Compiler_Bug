{"sha": "2be3ca4427d5b843fe7df6a55dc340a7aa9516c3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZTNjYTQ0MjdkNWI4NDNmZTdkZjZhNTVkYzM0MGE3YWE5NTE2YzM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-07T05:57:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-07T05:57:41Z"}, "message": "Rollup merge of #58136 - abonander:doc-win-stdio-unicode, r=dtolnay\n\nImprove error message and docs for non-UTF-8 bytes in stdio on Windows\n\nThis should make debugging problems like abonander/multipart#106 significantly more straightforward in the future.\n\ncc #23344, @retep998 @alexcrichton\n\nNot sure who do r? so I'll let rust-highfive pick one.", "tree": {"sha": "00b36a5bb5ad97a3144f945d26dd60519e997af2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00b36a5bb5ad97a3144f945d26dd60519e997af2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2be3ca4427d5b843fe7df6a55dc340a7aa9516c3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcW8jWCRBK7hj4Ov3rIwAAdHIIAI3RHx1ysc2QpSgqpvXrZIOa\ne8yyF9MFnLRmvxe8iOilId2nK653Qtd+5P6inkqFQftyJhXRHdpiM35i+gsCqOOy\noAQkBtqQCFKrRqMgSiU64Muc+kmPNZ9HOxRYLG7sLQWGNk8LrRcppExTREDeEBSb\nWTVfaZOL+dD8g+8CA/Q38U6eP/qU0znLqTwT/9f8VP8WSk7eJ5RZ31Xc2kcWMg7O\n1tPxrH4Ph9GWbV+LfRKa/sGS+8fS6U4dnS2tetITHOaLODHyVL9QEe0LwCjoQLgu\n3LGgkkT9Lp4x4jpx4R7Ua46wbWiK/YJTgM4Nx8kFoMrf3r8UwhtXQmV7mv8kmtk=\n=0Mbq\n-----END PGP SIGNATURE-----\n", "payload": "tree 00b36a5bb5ad97a3144f945d26dd60519e997af2\nparent 262b241e1652e8c07442fff261e4701e3871442f\nparent 27c8dfddac4c69a6fd399abe537e1007306c58cf\nauthor kennytm <kennytm@gmail.com> 1549519061 +0800\ncommitter GitHub <noreply@github.com> 1549519061 +0800\n\nRollup merge of #58136 - abonander:doc-win-stdio-unicode, r=dtolnay\n\nImprove error message and docs for non-UTF-8 bytes in stdio on Windows\n\nThis should make debugging problems like abonander/multipart#106 significantly more straightforward in the future.\n\ncc #23344, @retep998 @alexcrichton\n\nNot sure who do r? so I'll let rust-highfive pick one.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2be3ca4427d5b843fe7df6a55dc340a7aa9516c3", "html_url": "https://github.com/rust-lang/rust/commit/2be3ca4427d5b843fe7df6a55dc340a7aa9516c3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2be3ca4427d5b843fe7df6a55dc340a7aa9516c3/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "262b241e1652e8c07442fff261e4701e3871442f", "url": "https://api.github.com/repos/rust-lang/rust/commits/262b241e1652e8c07442fff261e4701e3871442f", "html_url": "https://github.com/rust-lang/rust/commit/262b241e1652e8c07442fff261e4701e3871442f"}, {"sha": "27c8dfddac4c69a6fd399abe537e1007306c58cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/27c8dfddac4c69a6fd399abe537e1007306c58cf", "html_url": "https://github.com/rust-lang/rust/commit/27c8dfddac4c69a6fd399abe537e1007306c58cf"}], "stats": {"total": 49, "additions": 48, "deletions": 1}, "files": [{"sha": "4068c0f9c7de5ca698f1056a004c4be31efaf9dd", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2be3ca4427d5b843fe7df6a55dc340a7aa9516c3/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be3ca4427d5b843fe7df6a55dc340a7aa9516c3/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=2be3ca4427d5b843fe7df6a55dc340a7aa9516c3", "patch": "@@ -131,6 +131,11 @@ fn handle_ebadf<T>(r: io::Result<T>, default: T) -> io::Result<T> {\n ///\n /// [`io::stdin`]: fn.stdin.html\n /// [`BufRead`]: trait.BufRead.html\n+///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to read bytes that are not valid UTF-8 will return\n+/// an error.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stdin {\n     inner: Arc<Mutex<BufReader<Maybe<StdinRaw>>>>,\n@@ -144,6 +149,11 @@ pub struct Stdin {\n /// [`Read`]: trait.Read.html\n /// [`BufRead`]: trait.BufRead.html\n /// [`Stdin::lock`]: struct.Stdin.html#method.lock\n+///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to read bytes that are not valid UTF-8 will return\n+/// an error.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StdinLock<'a> {\n     inner: MutexGuard<'a, BufReader<Maybe<StdinRaw>>>,\n@@ -157,6 +167,11 @@ pub struct StdinLock<'a> {\n ///\n /// [lock]: struct.Stdin.html#method.lock\n ///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to read bytes that are not valid UTF-8 will return\n+/// an error.\n+///\n /// # Examples\n ///\n /// Using implicit synchronization:\n@@ -328,6 +343,11 @@ impl<'a> fmt::Debug for StdinLock<'a> {\n ///\n /// Created by the [`io::stdout`] method.\n ///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n+/// an error.\n+///\n /// [`lock`]: #method.lock\n /// [`io::stdout`]: fn.stdout.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -343,6 +363,11 @@ pub struct Stdout {\n /// This handle implements the [`Write`] trait, and is constructed via\n /// the [`Stdout::lock`] method.\n ///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n+/// an error.\n+///\n /// [`Write`]: trait.Write.html\n /// [`Stdout::lock`]: struct.Stdout.html#method.lock\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -358,6 +383,11 @@ pub struct StdoutLock<'a> {\n ///\n /// [Stdout::lock]: struct.Stdout.html#method.lock\n ///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n+/// an error.\n+///\n /// # Examples\n ///\n /// Using implicit synchronization:\n@@ -476,6 +506,11 @@ impl<'a> fmt::Debug for StdoutLock<'a> {\n /// For more information, see the [`io::stderr`] method.\n ///\n /// [`io::stderr`]: fn.stderr.html\n+///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n+/// an error.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Stderr {\n     inner: Arc<ReentrantMutex<RefCell<Maybe<StderrRaw>>>>,\n@@ -487,6 +522,11 @@ pub struct Stderr {\n /// the [`Stderr::lock`] method.\n ///\n /// [`Stderr::lock`]: struct.Stderr.html#method.lock\n+///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n+/// an error.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct StderrLock<'a> {\n     inner: ReentrantMutexGuard<'a, RefCell<Maybe<StderrRaw>>>,\n@@ -496,6 +536,11 @@ pub struct StderrLock<'a> {\n ///\n /// This handle is not buffered.\n ///\n+/// ### Note: Windows Portability Consideration\n+/// When operating in a console, the Windows implementation of this stream does not support\n+/// non-UTF-8 byte sequences. Attempting to write bytes that are not valid UTF-8 will return\n+/// an error.\n+///\n /// # Examples\n ///\n /// Using implicit synchronization:"}, {"sha": "0ea19a855257b4d8cc3a34f15d1b00f0746db03c", "filename": "src/libstd/sys/windows/stdio.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2be3ca4427d5b843fe7df6a55dc340a7aa9516c3/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2be3ca4427d5b843fe7df6a55dc340a7aa9516c3/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fstdio.rs?ref=2be3ca4427d5b843fe7df6a55dc340a7aa9516c3", "patch": "@@ -188,7 +188,9 @@ impl Output {\n }\n \n fn invalid_encoding() -> io::Error {\n-    io::Error::new(io::ErrorKind::InvalidData, \"text was not valid unicode\")\n+    io::Error::new(io::ErrorKind::InvalidData,\n+                   \"Windows stdio in console mode does not support non-UTF-8 byte sequences; \\\n+                    see https://github.com/rust-lang/rust/issues/23344\")\n }\n \n fn readconsole_input_control(wakeup_mask: c::ULONG) -> c::CONSOLE_READCONSOLE_CONTROL {"}]}