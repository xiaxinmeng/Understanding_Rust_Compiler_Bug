{"sha": "9db970ee082e315cfa04db163fe2e0268b618531", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkYjk3MGVlMDgyZTMxNWNmYTA0ZGIxNjNmZTJlMDI2OGI2MTg1MzE=", "commit": {"author": {"name": "lbrande", "email": "lovbra00@gmail.com", "date": "2021-02-22T15:23:42Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-02-24T10:58:37Z"}, "message": "De Morgan's Law assist now correctly inverts <, <=, >, >=.", "tree": {"sha": "9fef7832ba257eba27566653987b90ca089018de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fef7832ba257eba27566653987b90ca089018de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9db970ee082e315cfa04db163fe2e0268b618531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9db970ee082e315cfa04db163fe2e0268b618531", "html_url": "https://github.com/rust-lang/rust/commit/9db970ee082e315cfa04db163fe2e0268b618531", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9db970ee082e315cfa04db163fe2e0268b618531/comments", "author": {"login": "lbrande", "id": 6149236, "node_id": "MDQ6VXNlcjYxNDkyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/6149236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lbrande", "html_url": "https://github.com/lbrande", "followers_url": "https://api.github.com/users/lbrande/followers", "following_url": "https://api.github.com/users/lbrande/following{/other_user}", "gists_url": "https://api.github.com/users/lbrande/gists{/gist_id}", "starred_url": "https://api.github.com/users/lbrande/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lbrande/subscriptions", "organizations_url": "https://api.github.com/users/lbrande/orgs", "repos_url": "https://api.github.com/users/lbrande/repos", "events_url": "https://api.github.com/users/lbrande/events{/privacy}", "received_events_url": "https://api.github.com/users/lbrande/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7a4a87de2840789e12722afc7df9f4db2db013c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7a4a87de2840789e12722afc7df9f4db2db013c", "html_url": "https://github.com/rust-lang/rust/commit/f7a4a87de2840789e12722afc7df9f4db2db013c"}], "stats": {"total": 81, "additions": 68, "deletions": 13}, "files": [{"sha": "3cd6699c38fdf770a9ff049de371c31c296572e0", "filename": "crates/ide_assists/src/handlers/apply_demorgan.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9db970ee082e315cfa04db163fe2e0268b618531/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db970ee082e315cfa04db163fe2e0268b618531/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fapply_demorgan.rs?ref=9db970ee082e315cfa04db163fe2e0268b618531", "patch": "@@ -11,13 +11,13 @@ use crate::{utils::invert_boolean_expression, AssistContext, AssistId, AssistKin\n //\n // ```\n // fn main() {\n-//     if x != 4 ||$0 y < 3 {}\n+//     if x != 4 ||$0 y < 3.14 {}\n // }\n // ```\n // ->\n // ```\n // fn main() {\n-//     if !(x == 4 && !(y < 3)) {}\n+//     if !(x == 4 && !(y < 3.14)) {}\n // }\n // ```\n pub(crate) fn apply_demorgan(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n@@ -32,11 +32,11 @@ pub(crate) fn apply_demorgan(acc: &mut Assists, ctx: &AssistContext) -> Option<(\n \n     let lhs = expr.lhs()?;\n     let lhs_range = lhs.syntax().text_range();\n-    let not_lhs = invert_boolean_expression(lhs);\n+    let not_lhs = invert_boolean_expression(&ctx.sema, lhs);\n \n     let rhs = expr.rhs()?;\n     let rhs_range = rhs.syntax().text_range();\n-    let not_rhs = invert_boolean_expression(rhs);\n+    let not_rhs = invert_boolean_expression(&ctx.sema, rhs);\n \n     acc.add(\n         AssistId(\"apply_demorgan\", AssistKind::RefactorRewrite),"}, {"sha": "9e0918477b5f05d31a9f9c0864827295cb906860", "filename": "crates/ide_assists/src/handlers/early_return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9db970ee082e315cfa04db163fe2e0268b618531/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db970ee082e315cfa04db163fe2e0268b618531/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fearly_return.rs?ref=9db970ee082e315cfa04db163fe2e0268b618531", "patch": "@@ -111,7 +111,7 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext)\n                     let new_expr = {\n                         let then_branch =\n                             make::block_expr(once(make::expr_stmt(early_expression).into()), None);\n-                        let cond = invert_boolean_expression(cond_expr);\n+                        let cond = invert_boolean_expression(&ctx.sema, cond_expr);\n                         make::expr_if(make::condition(cond, None), then_branch, None)\n                             .indent(if_indent_level)\n                     };"}, {"sha": "b131dc2058be842397e1d75a2979a4909e0c0f6e", "filename": "crates/ide_assists/src/handlers/invert_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9db970ee082e315cfa04db163fe2e0268b618531/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db970ee082e315cfa04db163fe2e0268b618531/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Finvert_if.rs?ref=9db970ee082e315cfa04db163fe2e0268b618531", "patch": "@@ -50,7 +50,7 @@ pub(crate) fn invert_if(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     };\n \n     acc.add(AssistId(\"invert_if\", AssistKind::RefactorRewrite), \"Invert if\", if_range, |edit| {\n-        let flip_cond = invert_boolean_expression(cond.clone());\n+        let flip_cond = invert_boolean_expression(&ctx.sema, cond.clone());\n         edit.replace_ast(cond, flip_cond);\n \n         let else_node = else_block.syntax();"}, {"sha": "701091a6b3d2324fbd14eb8067c66559f5ee3843", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9db970ee082e315cfa04db163fe2e0268b618531/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db970ee082e315cfa04db163fe2e0268b618531/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=9db970ee082e315cfa04db163fe2e0268b618531", "patch": "@@ -147,12 +147,12 @@ fn doctest_apply_demorgan() {\n         \"apply_demorgan\",\n         r#####\"\n fn main() {\n-    if x != 4 ||$0 y < 3 {}\n+    if x != 4 ||$0 y < 3.14 {}\n }\n \"#####,\n         r#####\"\n fn main() {\n-    if !(x == 4 && !(y < 3)) {}\n+    if !(x == 4 && !(y < 3.14)) {}\n }\n \"#####,\n     )"}, {"sha": "38ed74673c99552706d5758211d831170cc5fd4b", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 45, "deletions": 5, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/9db970ee082e315cfa04db163fe2e0268b618531/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db970ee082e315cfa04db163fe2e0268b618531/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=9db970ee082e315cfa04db163fe2e0268b618531", "patch": "@@ -3,8 +3,11 @@\n use std::ops;\n \n use ast::TypeBoundsOwner;\n-use hir::{Adt, HasSource};\n-use ide_db::{helpers::SnippetCap, RootDatabase};\n+use hir::{Adt, HasSource, Semantics};\n+use ide_db::{\n+    helpers::{FamousDefs, SnippetCap},\n+    RootDatabase,\n+};\n use itertools::Itertools;\n use stdx::format_to;\n use syntax::{\n@@ -205,18 +208,34 @@ pub(crate) fn vis_offset(node: &SyntaxNode) -> TextSize {\n         .unwrap_or_else(|| node.text_range().start())\n }\n \n-pub(crate) fn invert_boolean_expression(expr: ast::Expr) -> ast::Expr {\n-    if let Some(expr) = invert_special_case(&expr) {\n+pub(crate) fn invert_boolean_expression(\n+    sema: &Semantics<RootDatabase>,\n+    expr: ast::Expr,\n+) -> ast::Expr {\n+    if let Some(expr) = invert_special_case(sema, &expr) {\n         return expr;\n     }\n     make::expr_prefix(T![!], expr)\n }\n \n-fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n+fn invert_special_case(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> Option<ast::Expr> {\n     match expr {\n         ast::Expr::BinExpr(bin) => match bin.op_kind()? {\n             ast::BinOp::NegatedEqualityTest => bin.replace_op(T![==]).map(|it| it.into()),\n             ast::BinOp::EqualityTest => bin.replace_op(T![!=]).map(|it| it.into()),\n+            // Swap `<` with `>=`, `<=` with `>`, ... if operands `impl Ord`\n+            ast::BinOp::LesserTest if bin_impls_ord(sema, bin) => {\n+                bin.replace_op(T![>=]).map(|it| it.into())\n+            }\n+            ast::BinOp::LesserEqualTest if bin_impls_ord(sema, bin) => {\n+                bin.replace_op(T![>]).map(|it| it.into())\n+            }\n+            ast::BinOp::GreaterTest if bin_impls_ord(sema, bin) => {\n+                bin.replace_op(T![<=]).map(|it| it.into())\n+            }\n+            ast::BinOp::GreaterEqualTest if bin_impls_ord(sema, bin) => {\n+                bin.replace_op(T![<]).map(|it| it.into())\n+            }\n             // Parenthesize other expressions before prefixing `!`\n             _ => Some(make::expr_prefix(T![!], make::expr_paren(expr.clone()))),\n         },\n@@ -247,6 +266,27 @@ fn invert_special_case(expr: &ast::Expr) -> Option<ast::Expr> {\n     }\n }\n \n+fn bin_impls_ord(sema: &Semantics<RootDatabase>, bin: &ast::BinExpr) -> bool {\n+    if let (Some(lhs), Some(rhs)) = (bin.lhs(), bin.rhs()) {\n+        return sema.type_of_expr(&lhs) == sema.type_of_expr(&rhs)\n+            && impls_ord(sema, &lhs)\n+            && impls_ord(sema, &rhs);\n+    }\n+    false\n+}\n+\n+fn impls_ord(sema: &Semantics<RootDatabase>, expr: &ast::Expr) -> bool {\n+    let krate = sema.scope(expr.syntax()).module().map(|it| it.krate());\n+    let famous_defs = FamousDefs(&sema, krate);\n+\n+    if let Some(ty) = sema.type_of_expr(expr) {\n+        if let Some(ord_trait) = famous_defs.core_cmp_Ord() {\n+            return ty.autoderef(sema.db).any(|ty| ty.impls_trait(sema.db, ord_trait, &[]));\n+        }\n+    }\n+    false\n+}\n+\n pub(crate) fn next_prev() -> impl Iterator<Item = Direction> {\n     [Direction::Next, Direction::Prev].iter().copied()\n }"}, {"sha": "f9de8ce0e647a70e8de676d91a71594a1e7d9789", "filename": "crates/ide_db/src/helpers.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9db970ee082e315cfa04db163fe2e0268b618531/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db970ee082e315cfa04db163fe2e0268b618531/crates%2Fide_db%2Fsrc%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers.rs?ref=9db970ee082e315cfa04db163fe2e0268b618531", "patch": "@@ -45,6 +45,10 @@ impl FamousDefs<'_, '_> {\n         self.find_crate(\"core\")\n     }\n \n+    pub fn core_cmp_Ord(&self) -> Option<Trait> {\n+        self.find_trait(\"core:cmp:Ord\")\n+    }\n+\n     pub fn core_convert_From(&self) -> Option<Trait> {\n         self.find_trait(\"core:convert:From\")\n     }"}, {"sha": "bb4e9666b1bb14869610e3014329a33bdccdf960", "filename": "crates/ide_db/src/helpers/famous_defs_fixture.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9db970ee082e315cfa04db163fe2e0268b618531/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9db970ee082e315cfa04db163fe2e0268b618531/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Ffamous_defs_fixture.rs?ref=9db970ee082e315cfa04db163fe2e0268b618531", "patch": "@@ -1,5 +1,15 @@\n //- /libcore.rs crate:core\n //! Signatures of traits, types and functions from the core lib for use in tests.\n+pub mod cmp {\n+\n+    pub trait Ord {\n+        fn cmp(&self, other: &Self) -> Ordering;\n+        fn max(self, other: Self) -> Self;\n+        fn min(self, other: Self) -> Self;\n+        fn clamp(self, min: Self, max: Self) -> Self;\n+    }\n+}\n+\n pub mod convert {\n     pub trait From<T> {\n         fn from(t: T) -> Self;\n@@ -109,6 +119,7 @@ pub mod option {\n \n pub mod prelude {\n     pub use crate::{\n+        cmp::Ord,\n         convert::From,\n         default::Default,\n         iter::{IntoIterator, Iterator},"}]}