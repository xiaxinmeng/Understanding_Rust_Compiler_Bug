{"sha": "2b21f66bebdb0685119b300ed21a15ae9dae22ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMjFmNjZiZWJkYjA2ODUxMTliMzAwZWQyMWExNWFlOWRhZTIyYWI=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-06-12T17:22:52Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-06-12T17:22:52Z"}, "message": "Rollup merge of #51261 - Aaronepower:master, r=Mark-Simulacrum\n\nUpdated RELEASES.md for 1.27.0\n\n[Rendered](https://github.com/Aaronepower/rust/blob/master/RELEASES.md)\nr? @Mark-Simulacrum\ncc @rust-lang/release", "tree": {"sha": "3a0c4c2535c0c947276b1282927b4eb73bd5c398", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3a0c4c2535c0c947276b1282927b4eb73bd5c398"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b21f66bebdb0685119b300ed21a15ae9dae22ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbIAFsCRBK7hj4Ov3rIwAAdHIIACvbYYuzymzwX39NL8Iqt5Lb\nCYNproDM6Mvaslb4X8YkKoVSvy9M74JgpnZPx5YCFnutCAwxjP5E/FD16mYAv8/M\nuHyYSQ1h4ODS7JMVy20BNzdVTeS6vppmTc1zB6tXn282e6bZ51ZsgZcnlq9b4xUM\n42Td/mLBFkKvSRAMZKolNVnq3LaTUh1v5jJAGFfGdyaQ7WPSGiv3fRs3XjnpWYLS\njwDVuZlT4PBsvttwIfwGwS+4H1ItNqzyGjciGaxFuCBNcCDatW4TNNV80xAWQR9K\nFuioA+9YJB1c25C3FTaDutoqTxA9lmOn5i82SudHuza3BR0XK7C92rw37wZmqd0=\n=k31s\n-----END PGP SIGNATURE-----\n", "payload": "tree 3a0c4c2535c0c947276b1282927b4eb73bd5c398\nparent 3f3ba6c3cb1707eaf63640fc6681ae389253fe18\nparent 46f74a3ef5f25f0a47daa4d19643dbf14303a90e\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1528824172 -0600\ncommitter GitHub <noreply@github.com> 1528824172 -0600\n\nRollup merge of #51261 - Aaronepower:master, r=Mark-Simulacrum\n\nUpdated RELEASES.md for 1.27.0\n\n[Rendered](https://github.com/Aaronepower/rust/blob/master/RELEASES.md)\nr? @Mark-Simulacrum\ncc @rust-lang/release\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b21f66bebdb0685119b300ed21a15ae9dae22ab", "html_url": "https://github.com/rust-lang/rust/commit/2b21f66bebdb0685119b300ed21a15ae9dae22ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b21f66bebdb0685119b300ed21a15ae9dae22ab/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f3ba6c3cb1707eaf63640fc6681ae389253fe18", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f3ba6c3cb1707eaf63640fc6681ae389253fe18", "html_url": "https://github.com/rust-lang/rust/commit/3f3ba6c3cb1707eaf63640fc6681ae389253fe18"}, {"sha": "46f74a3ef5f25f0a47daa4d19643dbf14303a90e", "url": "https://api.github.com/repos/rust-lang/rust/commits/46f74a3ef5f25f0a47daa4d19643dbf14303a90e", "html_url": "https://github.com/rust-lang/rust/commit/46f74a3ef5f25f0a47daa4d19643dbf14303a90e"}], "stats": {"total": 156, "additions": 156, "deletions": 0}, "files": [{"sha": "0fafe95d2c4b90d3ee8e20d1879c2749c5a038c8", "filename": "RELEASES.md", "status": "modified", "additions": 156, "deletions": 0, "changes": 156, "blob_url": "https://github.com/rust-lang/rust/blob/2b21f66bebdb0685119b300ed21a15ae9dae22ab/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/2b21f66bebdb0685119b300ed21a15ae9dae22ab/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=2b21f66bebdb0685119b300ed21a15ae9dae22ab", "patch": "@@ -1,3 +1,157 @@\n+Version 1.27.0 (2018-06-21)\n+==========================\n+\n+Language\n+--------\n+- [Removed 'proc' from the reserved keywords list.][49699] This allows `proc` to\n+  be used as an identifer.\n+- [The dyn syntax is now available.][49968] This syntax is equivalent to the\n+  bare `Trait` syntax, and should make it clearer when being used in tandem with\n+  `impl Trait`. Since it is equivalent to the following syntax:\n+  `&Trait == &dyn Trait`, `&mut Trait == &mut dyn Trait`, and\n+  `Box<Trait> == Box<dyn Trait>`.\n+- [Attributes on generic parameters such as types and lifetimes are\n+  now stable.][48851] e.g.\n+  `fn foo<#[lifetime_attr] 'a, #[type_attr] T: 'a>() {}`\n+- [The `#[must_use]` attribute can now also be used on functions as well as\n+  types.][48925] It provides a lint that by default warns users when the\n+  value returned by a function has not been used.\n+\n+Compiler\n+--------\n+- [Added the `armv5te-unknown-linux-musl` target.][50423]\n+\n+Libraries\n+---------\n+- [SIMD (Single Instruction Multiple Data) on x86/x86_64 is now stable.][49664]\n+  This includes [`arch::x86`] & [`arch::x86_64`] modules which contain\n+  SIMD intrinsics, a new macro called `is_x86_feature_detected!`, the\n+  `#[target_feature(enable=\"\")]` attribute, and adding `target_feature = \"\"` to\n+  the `cfg` attribute.\n+- [A lot of methods for `[u8]`, `f32`, and `f64` previously only available in\n+  std are now available in core.][49896]\n+- [The generic `Rhs` type parameter on `ops::{Shl, ShlAssign, Shr}` now defaults\n+  to `Self`.][49630]\n+- [`std::str::replace` now has the `#[must_use]` attribute][50177] to clarify\n+  that the operation isn't done in place.\n+- [`Clone::clone`, `Iterator::collect`, and `ToOwned::to_owned` now have\n+  the `#[must_use]` attribute][49533] to warn about unused potentially\n+  expensive allocations.\n+\n+Stabilized APIs\n+---------------\n+- [`DoubleEndedIterator::rfind`]\n+- [`DoubleEndedIterator::rfold`]\n+- [`DoubleEndedIterator::try_rfold`]\n+- [`Duration::from_micros`]\n+- [`Duration::from_nanos`]\n+- [`Duration::subsec_micros`]\n+- [`Duration::subsec_millis`]\n+- [`HashMap::remove_entry`]\n+- [`Iterator::try_fold`]\n+- [`Iterator::try_for_each`]\n+- [`NonNull::cast`]\n+- [`Option::filter`]\n+- [`String::replace_range`]\n+- [`Take::set_limit`]\n+- [`hint::unreachable_unchecked`]\n+- [`os::unix::process::parent_id`]\n+- [`process::id`]\n+- [`ptr::swap_nonoverlapping`]\n+- [`slice::rsplit_mut`]\n+- [`slice::rsplit`]\n+- [`slice::swap_with_slice`]\n+\n+Cargo\n+-----\n+- [`cargo-metadata` now includes `authors`, `categories`, `keywords`,\n+  `readme`, and `repository` fields.][cargo/5386]\n+- [Added the `--target-dir` optional argument.][cargo/5393] This allows you to specify\n+  a different directory than `target` for placing compilation artifacts.\n+- [Cargo will be adding automatic target inference for binaries, benchmarks,\n+  examples, and tests in the Rust 2018 edition.][cargo/5335] If your project specifies\n+  specific targets e.g. using `[[bin]]` and have other binaries in locations\n+  where cargo would infer a binary, Cargo will produce a warning. You can\n+  disable this feature ahead of time by setting any of the following `autobins`,\n+  `autobenches`, `autoexamples`, `autotests` to false.\n+- [Cargo will now cache compiler information.][cargo/5359] This can be disabled by\n+  setting `CARGO_CACHE_RUSTC_INFO=0` in your environment.\n+\n+Misc\n+----\n+- [Added \u201cThe Rustc book\u201d into the official documentation.][49707]\n+  [\u201cThe Rustc book\u201d] documents and teaches how to use the rustc compiler.\n+- [All books available on `doc.rust-lang.org` are now searchable.][49623]\n+\n+Compatibility Notes\n+-------------------\n+- [Calling a `CharExt` or `StrExt` method directly on core will no longer\n+  work.][49896] e.g. `::core::prelude::v1::StrExt::is_empty(\"\")` will not\n+  compile, `\"\".is_empty()` will still compile.\n+- [`Debug` output on `atomic::{AtomicBool, AtomicIsize, AtomicPtr, AtomicUsize}`\n+  will only print the inner type.][48553] e.g.\n+  `print!(\"{:?}\", AtomicBool::new(true))` will print `true`\n+  not `AtomicBool(true)`.\n+- [`?` can no longer be a separator in macros.][49719] e.g. the following will\n+  no longer compile.\n+  ```rust\n+  macro_rules! barplus {\n+      ($(a)?+) => {}\n+  }\n+  ```\n+- [The maximum number for `repr(align(N))` is now 2\u00b2\u2079.][50378] Previously you\n+  could enter higher numbers but they were not supported by LLVM. Up to 512MB\n+  alignment should cover all use cases.\n+\n+[48553]: https://github.com/rust-lang/rust/pull/48553/\n+[48851]: https://github.com/rust-lang/rust/pull/48851/\n+[48925]: https://github.com/rust-lang/rust/pull/48925/\n+[49533]: https://github.com/rust-lang/rust/pull/49533/\n+[49623]: https://github.com/rust-lang/rust/pull/49623/\n+[49630]: https://github.com/rust-lang/rust/pull/49630/\n+[49664]: https://github.com/rust-lang/rust/pull/49664/\n+[49699]: https://github.com/rust-lang/rust/pull/49699/\n+[49707]: https://github.com/rust-lang/rust/pull/49707/\n+[49719]: https://github.com/rust-lang/rust/pull/49719/\n+[49896]: https://github.com/rust-lang/rust/pull/49896/\n+[49968]: https://github.com/rust-lang/rust/pull/49968/\n+[50177]: https://github.com/rust-lang/rust/pull/50177/\n+[50378]: https://github.com/rust-lang/rust/pull/50378/\n+[50398]: https://github.com/rust-lang/rust/pull/50398/\n+[50423]: https://github.com/rust-lang/rust/pull/50423/\n+[cargo/5203]: https://github.com/rust-lang/cargo/pull/5203/\n+[cargo/5335]: https://github.com/rust-lang/cargo/pull/5335/\n+[cargo/5359]: https://github.com/rust-lang/cargo/pull/5359/\n+[cargo/5386]: https://github.com/rust-lang/cargo/pull/5386/\n+[cargo/5393]: https://github.com/rust-lang/cargo/pull/5393/\n+[`DoubleEndedIterator::rfind`]: https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html#method.rfind\n+[`DoubleEndedIterator::rfold`]: https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html#method.rfold\n+[`DoubleEndedIterator::try_rfold`]: https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html#method.try_rfold\n+[`Duration::from_micros`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.from_micros\n+[`Duration::from_nanos`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.from_nanos\n+[`Duration::subsec_micros`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.subsec_micros\n+[`Duration::subsec_millis`]: https://doc.rust-lang.org/std/time/struct.Duration.html#method.subsec_millis\n+[`HashMap::remove_entry`]: https://doc.rust-lang.org/std/collections/struct.HashMap.html#method.remove_entry\n+[`Iterator::try_fold`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.try_fold\n+[`Iterator::try_for_each`]: https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.try_for_each\n+[`NonNull::cast`]: https://doc.rust-lang.org/std/ptr/struct.NonNull.html#method.cast\n+[`Option::filter`]: https://doc.rust-lang.org/std/option/enum.Option.html#method.filter\n+[`String::replace_range`]: https://doc.rust-lang.org/std/string/struct.String.html#method.replace_range\n+[`Take::set_limit`]: https://doc.rust-lang.org/std/io/struct.Take.html#method.set_limit\n+[`slice::rsplit_mut`]: https://doc.rust-lang.org/std/primitive.slice.html#method.rsplit_mut\n+[`slice::rsplit`]: https://doc.rust-lang.org/std/primitive.slice.html#method.rsplit\n+[`slice::swap_with_slice`]: https://doc.rust-lang.org/std/primitive.slice.html#method.swap_with_slice\n+[`arch::x86_64`]: https://doc.rust-lang.org/std/arch/x86_64/index.html\n+[`arch::x86`]: https://doc.rust-lang.org/std/arch/x86/index.html\n+[`fs::read`]:\n+[`fs::write`]:\n+[`hint::unreachable_unchecked`]: https://doc.rust-lang.org/std/hint/fn.unreachable_unchecked.html\n+[`os::unix::process::parent_id`]: https://doc.rust-lang.org/std/os/unix/process/fn.parent_id.html\n+[`ptr::swap_nonoverlapping`]: https://doc.rust-lang.org/std/ptr/fn.swap_nonoverlapping.html\n+[`process::id`]: https://doc.rust-lang.org/std/process/fn.id.html\n+[\u201cThe Rustc book\u201d]: https://doc.rust-lang.org/rustc\n+\n+\n Version 1.26.2 (2018-06-05)\n ==========================\n \n@@ -8,6 +162,7 @@ Compatibility Notes\n \n [51117]: https://github.com/rust-lang/rust/issues/51117\n \n+\n Version 1.26.1 (2018-05-29)\n ==========================\n \n@@ -17,6 +172,7 @@ Tools\n - [RLS now works on Windows][50646]\n - [Rustfmt stopped badly formatting text in some cases][rustfmt/2695]\n \n+\n Compatibility Notes\n --------\n "}]}