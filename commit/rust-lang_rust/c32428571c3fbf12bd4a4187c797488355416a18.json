{"sha": "c32428571c3fbf12bd4a4187c797488355416a18", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzMjQyODU3MWMzZmJmMTJiZDRhNDE4N2M3OTc0ODgzNTU0MTZhMTg=", "commit": {"author": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-05-23T23:42:06Z"}, "committer": {"name": "Aramis Razzaghipour", "email": "aramisnoah@gmail.com", "date": "2021-05-24T04:54:16Z"}, "message": "Remove hir krate methods", "tree": {"sha": "482c2a1a2a88554f1b1aed4417f3262233e96ab4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/482c2a1a2a88554f1b1aed4417f3262233e96ab4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c32428571c3fbf12bd4a4187c797488355416a18", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEqQsXYYwP2wJc1ykb94j36ZATYAMFAmCrMXgACgkQ94j36ZAT\nYAP/uRAAhRbEtm7qn0DElEGUsslujD+NZNqhJn2RuoRnboI5C4mzRTdHl0WsGo5L\nyG+viGeek7Mv0I2rI+ZYW7w8/CX2aTVIchFmO5OOk6M6kr57JTSqyCZBCQ0iNksf\nBWZ6Ny6o1+n9GadOKJyf3mxfheQ5TbO0BiF9Dl0sEJ8dhVC0n0XcFs6VWjDYO0qw\nXdFF88c+Cn9GCd9kQrCRVcOHcp2zqil2SOXzBQB2A/bm27dFO0YxCSwNMLBdD+iN\nLDG5E9Oy6SEMfosE4cv3itlYsAFeHTrAlq1hacV0BRGxjWLe9Omhqf0j5tbKjZAS\niWoQ6MsDL+GhDR/TnBE4GdIgq++z6a2YTLrbm3QR+7yiVylBF32r1yQTga4FYnVH\nlwZA4Bee3gx8wkobHOzvyJG9Qda+RWYI98prNVdbRwzlyuRs1ja+/uI73SDkMfM4\nHF2uet161Ta1g8jlMm05YxGy7Z6LB91b057C6wSNBN1BaR+j0WJmLDFlxWpaL0pZ\nsbqPQ1FcH3m5wKwQNDZ4d14sNtXlsNVPL+5dtN5G3jFrSSkbgjyH3bRVIn8/Shit\n9wp3vryIraf4A5gxLQR3/QVWSKlP9byyWbGeiRaBBRP+wR2HJHQPsBxZ90ybMIT6\nbBgD1VV6b+nE1HMriyzoAR7LT1DS6GUHzI/wg+kwI7H0Cuj8XUA=\n=3iz8\n-----END PGP SIGNATURE-----", "payload": "tree 482c2a1a2a88554f1b1aed4417f3262233e96ab4\nparent 4fd5248749202e0578d719bc5480171a85358836\nauthor Aramis Razzaghipour <aramisnoah@gmail.com> 1621813326 +1000\ncommitter Aramis Razzaghipour <aramisnoah@gmail.com> 1621832056 +1000\n\nRemove hir krate methods\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c32428571c3fbf12bd4a4187c797488355416a18", "html_url": "https://github.com/rust-lang/rust/commit/c32428571c3fbf12bd4a4187c797488355416a18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c32428571c3fbf12bd4a4187c797488355416a18/comments", "author": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lunacookies", "id": 31783266, "node_id": "MDQ6VXNlcjMxNzgzMjY2", "avatar_url": "https://avatars.githubusercontent.com/u/31783266?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lunacookies", "html_url": "https://github.com/lunacookies", "followers_url": "https://api.github.com/users/lunacookies/followers", "following_url": "https://api.github.com/users/lunacookies/following{/other_user}", "gists_url": "https://api.github.com/users/lunacookies/gists{/gist_id}", "starred_url": "https://api.github.com/users/lunacookies/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lunacookies/subscriptions", "organizations_url": "https://api.github.com/users/lunacookies/orgs", "repos_url": "https://api.github.com/users/lunacookies/repos", "events_url": "https://api.github.com/users/lunacookies/events{/privacy}", "received_events_url": "https://api.github.com/users/lunacookies/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4fd5248749202e0578d719bc5480171a85358836", "url": "https://api.github.com/repos/rust-lang/rust/commits/4fd5248749202e0578d719bc5480171a85358836", "html_url": "https://github.com/rust-lang/rust/commit/4fd5248749202e0578d719bc5480171a85358836"}], "stats": {"total": 70, "additions": 11, "deletions": 59}, "files": [{"sha": "ec5f0c53d3860ee40f0b974acaa394abb50f62cb", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 48, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c32428571c3fbf12bd4a4187c797488355416a18/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32428571c3fbf12bd4a4187c797488355416a18/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=c32428571c3fbf12bd4a4187c797488355416a18", "patch": "@@ -552,10 +552,6 @@ impl Struct {\n         Module { id: self.id.lookup(db.upcast()).container }\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Option<Crate> {\n-        Some(self.module(db).krate())\n-    }\n-\n     pub fn name(self, db: &dyn HirDatabase) -> Name {\n         db.struct_data(self.id).name.clone()\n     }\n@@ -640,10 +636,6 @@ impl Enum {\n         Module { id: self.id.lookup(db.upcast()).container }\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Option<Crate> {\n-        Some(self.module(db).krate())\n-    }\n-\n     pub fn name(self, db: &dyn HirDatabase) -> Name {\n         db.enum_data(self.id).name.clone()\n     }\n@@ -674,10 +666,6 @@ impl Variant {\n         self.parent.module(db)\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Crate {\n-        self.module(db).krate()\n-    }\n-\n     pub fn parent_enum(self, _db: &dyn HirDatabase) -> Enum {\n         self.parent\n     }\n@@ -734,10 +722,6 @@ impl Adt {\n         }\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Crate {\n-        self.module(db).krate()\n-    }\n-\n     pub fn name(self, db: &dyn HirDatabase) -> Name {\n         match self {\n             Adt::Struct(s) => s.name(db),\n@@ -772,10 +756,6 @@ impl VariantDef {\n         }\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Crate {\n-        self.module(db).krate()\n-    }\n-\n     pub fn name(&self, db: &dyn HirDatabase) -> Name {\n         match self {\n             VariantDef::Struct(s) => s.name(db),\n@@ -830,10 +810,6 @@ impl Function {\n         self.id.lookup(db.upcast()).module(db.upcast()).into()\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Option<Crate> {\n-        Some(self.module(db).krate())\n-    }\n-\n     pub fn name(self, db: &dyn HirDatabase) -> Name {\n         db.function_data(self.id).name.clone()\n     }\n@@ -1023,10 +999,6 @@ impl Const {\n         Module { id: self.id.lookup(db.upcast()).module(db.upcast()) }\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Option<Crate> {\n-        Some(self.module(db).krate())\n-    }\n-\n     pub fn name(self, db: &dyn HirDatabase) -> Option<Name> {\n         db.const_data(self.id).name.clone()\n     }\n@@ -1054,10 +1026,6 @@ impl Static {\n         Module { id: self.id.lookup(db.upcast()).module(db.upcast()) }\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Option<Crate> {\n-        Some(self.module(db).krate())\n-    }\n-\n     pub fn name(self, db: &dyn HirDatabase) -> Option<Name> {\n         db.static_data(self.id).name.clone()\n     }\n@@ -1083,10 +1051,6 @@ impl Trait {\n         Module { id: self.id.lookup(db.upcast()).container }\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Crate {\n-        self.module(db).krate()\n-    }\n-\n     pub fn name(self, db: &dyn HirDatabase) -> Name {\n         db.trait_data(self.id).name.clone()\n     }\n@@ -1125,10 +1089,6 @@ impl TypeAlias {\n         Module { id: self.id.lookup(db.upcast()).module(db.upcast()) }\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Crate {\n-        self.module(db).krate()\n-    }\n-\n     pub fn type_ref(self, db: &dyn HirDatabase) -> Option<TypeRef> {\n         db.type_alias_data(self.id).type_ref.as_deref().cloned()\n     }\n@@ -1191,10 +1151,6 @@ impl MacroDef {\n         Some(Module { id: def_map.module_id(module_id) })\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Option<Crate> {\n-        self.module(db).map(Module::krate)\n-    }\n-\n     /// XXX: this parses the file\n     pub fn name(self, db: &dyn HirDatabase) -> Option<Name> {\n         match self.source(db)?.value {\n@@ -1684,10 +1640,6 @@ impl Impl {\n         self.id.lookup(db.upcast()).container.into()\n     }\n \n-    pub fn krate(self, db: &dyn HirDatabase) -> Crate {\n-        Crate { id: self.module(db).id.krate() }\n-    }\n-\n     pub fn is_builtin_derive(self, db: &dyn HirDatabase) -> Option<InFile<ast::Attr>> {\n         let src = self.source(db)?;\n         let item = src.file_id.is_builtin_derive(db.upcast())?;"}, {"sha": "0ada3f92bc6b79772d14d5c441dcae860b1c36bc", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c32428571c3fbf12bd4a4187c797488355416a18/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32428571c3fbf12bd4a4187c797488355416a18/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=c32428571c3fbf12bd4a4187c797488355416a18", "patch": "@@ -219,7 +219,7 @@ fn hint_iterator(\n ) -> Option<SmolStr> {\n     let db = sema.db;\n     let strukt = ty.strip_references().as_adt()?;\n-    let krate = strukt.krate(db);\n+    let krate = strukt.module(db).krate();\n     if krate != famous_defs.core()? {\n         return None;\n     }"}, {"sha": "ce1c76f37182865a5e3284e6286fc936c9b2ff80", "filename": "crates/ide/src/runnables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c32428571c3fbf12bd4a4187c797488355416a18/crates%2Fide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32428571c3fbf12bd4a4187c797488355416a18/crates%2Fide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Frunnables.rs?ref=c32428571c3fbf12bd4a4187c797488355416a18", "patch": "@@ -227,7 +227,7 @@ pub(crate) fn runnable_fn(sema: &Semantics<RootDatabase>, def: hir::Function) ->\n     let func = def.source(sema.db)?;\n     let name_string = def.name(sema.db).to_string();\n \n-    let root = def.krate(sema.db)?.root_module(sema.db);\n+    let root = def.module(sema.db).krate().root_module(sema.db);\n \n     let kind = if name_string == \"main\" && def.module(sema.db) == root {\n         RunnableKind::Bin"}, {"sha": "574a14429722120a67854fdac8e757a2810c5bf4", "filename": "crates/ide/src/syntax_highlighting/highlight.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c32428571c3fbf12bd4a4187c797488355416a18/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c32428571c3fbf12bd4a4187c797488355416a18/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fhighlight.rs?ref=c32428571c3fbf12bd4a4187c797488355416a18", "patch": "@@ -287,7 +287,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n         Definition::Macro(m) => {\n             let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Macro));\n \n-            if m.krate(db) != krate {\n+            if m.module(db).map(hir::Module::krate) != krate {\n                 h |= HlMod::Foreign;\n             }\n \n@@ -296,7 +296,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n         Definition::Field(field) => {\n             let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Field));\n \n-            if Some(field.parent_def(db).krate(db)) != krate {\n+            if Some(field.parent_def(db).module(db).krate()) != krate {\n                 h |= HlMod::Foreign;\n             }\n \n@@ -335,7 +335,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                 if func.is_async(db) {\n                     h |= HlMod::Async;\n                 }\n-                if func.krate(db) != krate {\n+                if Some(func.module(db).krate()) != krate {\n                     h |= HlMod::Foreign;\n                 }\n                 return h;\n@@ -348,7 +348,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                 };\n                 let mut h = Highlight::new(h);\n \n-                if Some(adt.krate(db)) != krate {\n+                if Some(adt.module(db).krate()) != krate {\n                     h |= HlMod::Foreign;\n                 }\n \n@@ -357,7 +357,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n             hir::ModuleDef::Variant(variant) => {\n                 let mut h = Highlight::new(HlTag::Symbol(SymbolKind::Variant));\n \n-                if Some(variant.krate(db)) != krate {\n+                if Some(variant.module(db).krate()) != krate {\n                     h |= HlMod::Foreign;\n                 }\n \n@@ -380,7 +380,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                     }\n                 }\n \n-                if konst.krate(db) != krate {\n+                if Some(konst.module(db).krate()) != krate {\n                     h |= HlMod::Foreign;\n                 }\n \n@@ -393,7 +393,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                     h |= HlMod::Unsafe;\n                 }\n \n-                if Some(trait_.krate(db)) != krate {\n+                if Some(trait_.module(db).krate()) != krate {\n                     h |= HlMod::Foreign;\n                 }\n \n@@ -416,7 +416,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                     }\n                 }\n \n-                if Some(type_.krate(db)) != krate {\n+                if Some(type_.module(db).krate()) != krate {\n                     h |= HlMod::Foreign;\n                 }\n \n@@ -431,7 +431,7 @@ fn highlight_def(db: &RootDatabase, krate: Option<hir::Crate>, def: Definition)\n                     h |= HlMod::Unsafe;\n                 }\n \n-                if s.krate(db) != krate {\n+                if Some(s.module(db).krate()) != krate {\n                     h |= HlMod::Foreign;\n                 }\n "}]}