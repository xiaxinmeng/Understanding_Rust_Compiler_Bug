{"sha": "003a636e760d50f4e1e96101f8e9994ac3758135", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwM2E2MzZlNzYwZDUwZjRlMWU5NjEwMWY4ZTk5OTRhYzM3NTgxMzU=", "commit": {"author": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2021-08-21T02:24:22Z"}, "committer": {"name": "Ariel Davis", "email": "ariel.z.davis@icloud.com", "date": "2021-08-21T02:24:22Z"}, "message": "Add an example for deriving PartialOrd on enums\n\nFor some reason, I always forget which variants are smaller and which\nare larger when you derive PartialOrd on an enum. And the wording in the\ncurrent docs is not entirely clear to me.\n\nSo, I often end up making a small enum, deriving PartialOrd on it, and\nthen writing a `#[test]` with an assert that the top one is smaller than\nthe bottom one (or the other way around) to figure out which way the\nderiving goes.\n\nSo then I figured, it would be great if the standard library docs just\nhad that example, so if I keep forgetting, at least I can figure it out\nquickly by looking at std's docs.", "tree": {"sha": "1cd230a3e5766ff1cb0eb833cade312473bce68c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cd230a3e5766ff1cb0eb833cade312473bce68c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/003a636e760d50f4e1e96101f8e9994ac3758135", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/003a636e760d50f4e1e96101f8e9994ac3758135", "html_url": "https://github.com/rust-lang/rust/commit/003a636e760d50f4e1e96101f8e9994ac3758135", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/003a636e760d50f4e1e96101f8e9994ac3758135/comments", "author": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "azdavis", "id": 6496454, "node_id": "MDQ6VXNlcjY0OTY0NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6496454?v=4", "gravatar_id": "", "url": "https://api.github.com/users/azdavis", "html_url": "https://github.com/azdavis", "followers_url": "https://api.github.com/users/azdavis/followers", "following_url": "https://api.github.com/users/azdavis/following{/other_user}", "gists_url": "https://api.github.com/users/azdavis/gists{/gist_id}", "starred_url": "https://api.github.com/users/azdavis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/azdavis/subscriptions", "organizations_url": "https://api.github.com/users/azdavis/orgs", "repos_url": "https://api.github.com/users/azdavis/repos", "events_url": "https://api.github.com/users/azdavis/events{/privacy}", "received_events_url": "https://api.github.com/users/azdavis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e3d632f8f921d03ccc5b71d97decf980df7dbe4", "html_url": "https://github.com/rust-lang/rust/commit/1e3d632f8f921d03ccc5b71d97decf980df7dbe4"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "4e82b65539460eeaffeb71fe8839a79c93359548", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/003a636e760d50f4e1e96101f8e9994ac3758135/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/003a636e760d50f4e1e96101f8e9994ac3758135/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=003a636e760d50f4e1e96101f8e9994ac3758135", "patch": "@@ -660,6 +660,18 @@ impl<T: Clone> Clone for Reverse<T> {\n /// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n /// [lexicographic](https://en.wikipedia.org/wiki/Lexicographic_order) ordering based on the top-to-bottom declaration order of the struct's members.\n /// When `derive`d on enums, variants are ordered by their top-to-bottom discriminant order.\n+/// This means variants at the top are less than variants at the bottom.\n+/// Here's an example:\n+///\n+/// ```\n+/// #[derive(PartialEq, PartialOrd)]\n+/// enum Size {\n+///     Small,\n+///     Large,\n+/// }\n+///\n+/// assert!(Size::Small < Size::Large);\n+/// ```\n ///\n /// ## Lexicographical comparison\n ///"}]}