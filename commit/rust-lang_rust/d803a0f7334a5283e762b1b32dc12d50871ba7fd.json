{"sha": "d803a0f7334a5283e762b1b32dc12d50871ba7fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4MDNhMGY3MzM0YTUyODNlNzYyYjFiMzJkYzEyZDUwODcxYmE3ZmQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T01:04:52Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:26Z"}, "message": "librustc: De-`@mut` the `enum_var_cache`", "tree": {"sha": "d83eb1d7ef6ba447f6d663a885ef1e57d37eaba7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d83eb1d7ef6ba447f6d663a885ef1e57d37eaba7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d803a0f7334a5283e762b1b32dc12d50871ba7fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d803a0f7334a5283e762b1b32dc12d50871ba7fd", "html_url": "https://github.com/rust-lang/rust/commit/d803a0f7334a5283e762b1b32dc12d50871ba7fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d803a0f7334a5283e762b1b32dc12d50871ba7fd/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab0d7b23124a7f98a1b3014d2165dc217aa8cfbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab0d7b23124a7f98a1b3014d2165dc217aa8cfbe", "html_url": "https://github.com/rust-lang/rust/commit/ab0d7b23124a7f98a1b3014d2165dc217aa8cfbe"}], "stats": {"total": 27, "additions": 18, "deletions": 9}, "files": [{"sha": "6f4518ea95b58540fb8719c6be9972bd9531885d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d803a0f7334a5283e762b1b32dc12d50871ba7fd/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d803a0f7334a5283e762b1b32dc12d50871ba7fd/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=d803a0f7334a5283e762b1b32dc12d50871ba7fd", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-\n use driver::session;\n use metadata::csearch;\n use metadata;\n@@ -311,7 +310,7 @@ struct ctxt_ {\n     needs_unwind_cleanup_cache: RefCell<HashMap<t, bool>>,\n     tc_cache: RefCell<HashMap<uint, TypeContents>>,\n     ast_ty_to_ty_cache: RefCell<HashMap<NodeId, ast_ty_to_ty_cache_entry>>,\n-    enum_var_cache: @mut HashMap<DefId, @~[@VariantInfo]>,\n+    enum_var_cache: RefCell<HashMap<DefId, @~[@VariantInfo]>>,\n     ty_param_defs: @mut HashMap<ast::NodeId, TypeParameterDef>,\n     adjustments: @mut HashMap<ast::NodeId, @AutoAdjustment>,\n     normalized_cache: @mut HashMap<t, t>,\n@@ -997,7 +996,7 @@ pub fn mk_ctxt(s: session::Session,\n         needs_unwind_cleanup_cache: RefCell::new(HashMap::new()),\n         tc_cache: RefCell::new(HashMap::new()),\n         ast_ty_to_ty_cache: RefCell::new(HashMap::new()),\n-        enum_var_cache: @mut HashMap::new(),\n+        enum_var_cache: RefCell::new(HashMap::new()),\n         methods: RefCell::new(HashMap::new()),\n         trait_method_def_ids: RefCell::new(HashMap::new()),\n         trait_methods_cache: RefCell::new(HashMap::new()),\n@@ -3888,9 +3887,12 @@ pub fn type_is_empty(cx: ctxt, t: t) -> bool {\n }\n \n pub fn enum_variants(cx: ctxt, id: ast::DefId) -> @~[@VariantInfo] {\n-    match cx.enum_var_cache.find(&id) {\n-      Some(&variants) => return variants,\n-      _ => { /* fallthrough */ }\n+    {\n+        let enum_var_cache = cx.enum_var_cache.borrow();\n+        match enum_var_cache.get().find(&id) {\n+            Some(&variants) => return variants,\n+            _ => { /* fallthrough */ }\n+        }\n     }\n \n     let result = if ast::LOCAL_CRATE != id.crate {\n@@ -3937,8 +3939,12 @@ pub fn enum_variants(cx: ctxt, id: ast::DefId) -> @~[@VariantInfo] {\n           _ => cx.sess.bug(\"enum_variants: id not bound to an enum\")\n         }\n     };\n-    cx.enum_var_cache.insert(id, result);\n-    result\n+\n+    {\n+        let mut enum_var_cache = cx.enum_var_cache.borrow_mut();\n+        enum_var_cache.get().insert(id, result);\n+        result\n+    }\n }\n \n "}, {"sha": "bcfe31b0eb66c149a288868cfc1f9c48682289f4", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d803a0f7334a5283e762b1b32dc12d50871ba7fd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d803a0f7334a5283e762b1b32dc12d50871ba7fd/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=d803a0f7334a5283e762b1b32dc12d50871ba7fd", "patch": "@@ -3625,7 +3625,10 @@ pub fn check_enum_variants(ccx: @mut CrateCtxt,\n     let variants = do_check(ccx, vs, id, hint);\n \n     // cache so that ty::enum_variants won't repeat this work\n-    ccx.tcx.enum_var_cache.insert(local_def(id), @variants);\n+    {\n+        let mut enum_var_cache = ccx.tcx.enum_var_cache.borrow_mut();\n+        enum_var_cache.get().insert(local_def(id), @variants);\n+    }\n \n     // Check that it is possible to represent this enum:\n     let mut outer = true;"}]}