{"sha": "7d5415b5a2faf5b8f76156eedfd66f94b91660a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNTQxNWI1YTJmYWY1YjhmNzYxNTZlZWRmZDY2Zjk0YjkxNjYwYTA=", "commit": {"author": {"name": "Joe Richey", "email": "joerichey@google.com", "date": "2020-05-27T06:14:55Z"}, "committer": {"name": "Joe Richey", "email": "joerichey@google.com", "date": "2020-05-28T02:10:17Z"}, "message": "Add additional checks for isize overflow\n\nWe now perform the correct checks even if the pointer size differs\nbetween the host and target.\n\nSigned-off-by: Joe Richey <joerichey@google.com>", "tree": {"sha": "4b79f1344157a20e476cfddb2bffe8ff986a3cab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b79f1344157a20e476cfddb2bffe8ff986a3cab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d5415b5a2faf5b8f76156eedfd66f94b91660a0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d5415b5a2faf5b8f76156eedfd66f94b91660a0", "html_url": "https://github.com/rust-lang/rust/commit/7d5415b5a2faf5b8f76156eedfd66f94b91660a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d5415b5a2faf5b8f76156eedfd66f94b91660a0/comments", "author": {"login": "josephlr", "id": 5506060, "node_id": "MDQ6VXNlcjU1MDYwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5506060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josephlr", "html_url": "https://github.com/josephlr", "followers_url": "https://api.github.com/users/josephlr/followers", "following_url": "https://api.github.com/users/josephlr/following{/other_user}", "gists_url": "https://api.github.com/users/josephlr/gists{/gist_id}", "starred_url": "https://api.github.com/users/josephlr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josephlr/subscriptions", "organizations_url": "https://api.github.com/users/josephlr/orgs", "repos_url": "https://api.github.com/users/josephlr/repos", "events_url": "https://api.github.com/users/josephlr/events{/privacy}", "received_events_url": "https://api.github.com/users/josephlr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "josephlr", "id": 5506060, "node_id": "MDQ6VXNlcjU1MDYwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/5506060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/josephlr", "html_url": "https://github.com/josephlr", "followers_url": "https://api.github.com/users/josephlr/followers", "following_url": "https://api.github.com/users/josephlr/following{/other_user}", "gists_url": "https://api.github.com/users/josephlr/gists{/gist_id}", "starred_url": "https://api.github.com/users/josephlr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/josephlr/subscriptions", "organizations_url": "https://api.github.com/users/josephlr/orgs", "repos_url": "https://api.github.com/users/josephlr/repos", "events_url": "https://api.github.com/users/josephlr/events{/privacy}", "received_events_url": "https://api.github.com/users/josephlr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71ef8414bd86cbd79b29f8b1a0145da96e2f2f09", "url": "https://api.github.com/repos/rust-lang/rust/commits/71ef8414bd86cbd79b29f8b1a0145da96e2f2f09", "html_url": "https://github.com/rust-lang/rust/commit/71ef8414bd86cbd79b29f8b1a0145da96e2f2f09"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "ccad4f0a135a16d3557c7d5603b6222d39149709", "filename": "src/librustc_middle/mir/interpret/pointer.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/7d5415b5a2faf5b8f76156eedfd66f94b91660a0/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5415b5a2faf5b8f76156eedfd66f94b91660a0/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Finterpret%2Fpointer.rs?ref=7d5415b5a2faf5b8f76156eedfd66f94b91660a0", "patch": "@@ -24,6 +24,12 @@ pub trait PointerArithmetic: HasDataLayout {\n         u64::try_from(max_usize_plus_1 - 1).unwrap()\n     }\n \n+    #[inline]\n+    fn machine_isize_min(&self) -> i64 {\n+        let max_isize_plus_1 = 1i128 << (self.pointer_size().bits() - 1);\n+        i64::try_from(-max_isize_plus_1).unwrap()\n+    }\n+\n     #[inline]\n     fn machine_isize_max(&self) -> i64 {\n         let max_isize_plus_1 = 1u128 << (self.pointer_size().bits() - 1);\n@@ -42,18 +48,23 @@ pub trait PointerArithmetic: HasDataLayout {\n \n     #[inline]\n     fn overflowing_offset(&self, val: u64, i: u64) -> (u64, bool) {\n+        // We do not need to check if i fits in a machine usize. If it doesn't,\n+        // either the wrapping_add will wrap or res will not fit in a pointer.\n         let res = val.overflowing_add(i);\n         self.truncate_to_ptr(res)\n     }\n \n     #[inline]\n     fn overflowing_signed_offset(&self, val: u64, i: i64) -> (u64, bool) {\n+        // We need to make sure that i fits in a machine isize.\n         let n = uabs(i);\n         if i >= 0 {\n-            self.overflowing_offset(val, n)\n+            let (val, over) = self.overflowing_offset(val, n);\n+            (val, over || i > self.machine_isize_max())\n         } else {\n             let res = val.overflowing_sub(n);\n-            self.truncate_to_ptr(res)\n+            let (val, over) = self.truncate_to_ptr(res);\n+            (val, over || i < self.machine_isize_min())\n         }\n     }\n "}, {"sha": "55f254f57326159992af8525e22d346daa243c96", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7d5415b5a2faf5b8f76156eedfd66f94b91660a0/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5415b5a2faf5b8f76156eedfd66f94b91660a0/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=7d5415b5a2faf5b8f76156eedfd66f94b91660a0", "patch": "@@ -441,9 +441,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // We cannot overflow i64 as a type's size must be <= isize::MAX.\n         let pointee_size = i64::try_from(self.layout_of(pointee_ty)?.size.bytes()).unwrap();\n         // The computed offset, in bytes, cannot overflow an isize.\n-        let offset_bytes = offset_count\n-            .checked_mul(pointee_size)\n-            .ok_or(err_ub_format!(\"inbounds pointer arithmetic: overflow computing offset\"))?;\n+        let offset_bytes =\n+            offset_count.checked_mul(pointee_size).ok_or(err_ub!(PointerArithOverflow))?;\n         // The offset being in bounds cannot rely on \"wrapping around\" the address space.\n         // So, first rule out overflows in the pointer arithmetic.\n         let offset_ptr = ptr.ptr_signed_offset(offset_bytes, self)?;"}, {"sha": "0ab81cc0c5b31bd5af05f6e90f62a2d65b34a864", "filename": "src/test/ui/consts/offset_ub.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d5415b5a2faf5b8f76156eedfd66f94b91660a0/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d5415b5a2faf5b8f76156eedfd66f94b91660a0/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Foffset_ub.stderr?ref=7d5415b5a2faf5b8f76156eedfd66f94b91660a0", "patch": "@@ -51,7 +51,7 @@ error: any use of this value will cause an error\n LL |         intrinsics::offset(self, count)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         inbounds pointer arithmetic: overflow computing offset\n+   |         overflowing in-bounds pointer arithmetic\n    |         inside `std::ptr::const_ptr::<impl *const u16>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |         inside `OVERFLOW` at $DIR/offset_ub.rs:11:43\n    | \n@@ -66,7 +66,7 @@ error: any use of this value will cause an error\n LL |         intrinsics::offset(self, count)\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |         |\n-   |         inbounds pointer arithmetic: overflow computing offset\n+   |         overflowing in-bounds pointer arithmetic\n    |         inside `std::ptr::const_ptr::<impl *const u16>::offset` at $SRC_DIR/libcore/ptr/const_ptr.rs:LL:COL\n    |         inside `UNDERFLOW` at $DIR/offset_ub.rs:12:44\n    | "}]}