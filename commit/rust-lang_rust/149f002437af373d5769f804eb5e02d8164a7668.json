{"sha": "149f002437af373d5769f804eb5e02d8164a7668", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0OWYwMDI0MzdhZjM3M2Q1NzY5ZjgwNGViNWUwMmQ4MTY0YTc2Njg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-19T07:59:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-02-19T07:59:27Z"}, "message": "Auto merge of #22497 - nikomatsakis:suffixes, r=alexcrichton\n\nThe old suffixes now issue warnings unless a feature-gate is given.\r\n\r\nFixes #22496.\r\n\r\nr? @alexcrichton", "tree": {"sha": "3d54ca061a9aab431f41ec6327b23c76d607f252", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d54ca061a9aab431f41ec6327b23c76d607f252"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/149f002437af373d5769f804eb5e02d8164a7668", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/149f002437af373d5769f804eb5e02d8164a7668", "html_url": "https://github.com/rust-lang/rust/commit/149f002437af373d5769f804eb5e02d8164a7668", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/149f002437af373d5769f804eb5e02d8164a7668/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22992358bc74956f53b1a2ab99ae245cd3ca5550", "url": "https://api.github.com/repos/rust-lang/rust/commits/22992358bc74956f53b1a2ab99ae245cd3ca5550", "html_url": "https://github.com/rust-lang/rust/commit/22992358bc74956f53b1a2ab99ae245cd3ca5550"}, {"sha": "811c48fe22ffbe4ca45c32807c846d9a7c02a8f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/811c48fe22ffbe4ca45c32807c846d9a7c02a8f3", "html_url": "https://github.com/rust-lang/rust/commit/811c48fe22ffbe4ca45c32807c846d9a7c02a8f3"}], "stats": {"total": 2058, "additions": 1027, "deletions": 1031}, "files": [{"sha": "d9bfe71e2e42827d3aaeaa43076a7ce34fab346b", "filename": "src/doc/intro.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Fdoc%2Fintro.md", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Fdoc%2Fintro.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fintro.md?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -480,7 +480,7 @@ use std::sync::{Arc,Mutex};\n fn main() {\n     let numbers = Arc::new(Mutex::new(vec![1, 2, 3]));\n \n-    for i in 0us..3 {\n+    for i in 0..3 {\n         let number = numbers.clone();\n         Thread::spawn(move || {\n             let mut array = number.lock().unwrap();\n@@ -541,7 +541,7 @@ use std::thread::Thread;\n fn main() {\n     let vec = vec![1, 2, 3];\n \n-    for i in 0us..3 {\n+    for i in 0..3 {\n         Thread::spawn(move || {\n             println!(\"{}\", vec[i]);\n         });"}, {"sha": "70baebf0d30acf33416294085fc6568f91a66122", "filename": "src/doc/reference.md", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -465,13 +465,9 @@ An _integer literal_ has one of four forms:\n \n Like any literal, an integer literal may be followed (immediately,\n without any spaces) by an _integer suffix_, which forcibly sets the\n-type of the literal. There are 10 valid values for an integer suffix:\n-\n-* Each of the signed and unsigned machine types `u8`, `i8`,\n-  `u16`, `i16`, `u32`, `i32`, `u64` and `i64`\n-  give the literal the corresponding machine type.\n-* The `is` and `us` suffixes give the literal type `isize` or `usize`,\n-  respectively.\n+type of the literal. The integer suffix must be the name of one of the\n+integral types: `u8`, `i8`, `u16`, `i16`, `u32`, `i32`, `u64`, `i64`,\n+`isize`, or `usize`.\n \n The type of an _unsuffixed_ integer literal is determined by type inference.\n If an integer type can be _uniquely_ determined from the surrounding program\n@@ -489,7 +485,7 @@ Examples of integer literals of various forms:\n 0xff_u8;                           // type u8\n 0o70_i16;                          // type i16\n 0b1111_1111_1001_0000_i32;         // type i32\n-0us;                               // type usize\n+0usize;                            // type usize\n ```\n \n ##### Floating-point literals\n@@ -1001,8 +997,8 @@ fn foo<T>(_: T){}\n fn bar(map1: HashMap<String, usize>, map2: hash_map::HashMap<String, usize>){}\n \n fn main() {\n-    // Equivalent to 'std::iter::range_step(0us, 10, 2);'\n-    range_step(0us, 10, 2);\n+    // Equivalent to 'std::iter::range_step(0, 10, 2);'\n+    range_step(0, 10, 2);\n \n     // Equivalent to 'foo(vec![std::option::Option::Some(1.0f64),\n     // std::option::Option::None]);'\n@@ -3126,7 +3122,7 @@ conditional expression evaluates to `false`, the `while` expression completes.\n An example:\n \n ```\n-let mut i = 0us;\n+let mut i = 0;\n \n while i < 10 {\n     println!(\"hello\");\n@@ -3206,7 +3202,7 @@ An example of a for loop over a series of integers:\n \n ```\n # fn bar(b:usize) { }\n-for i in 0us..256 {\n+for i in 0..256 {\n     bar(i);\n }\n ```"}, {"sha": "842957bd601c61cd59fc479fce93e4d17659dd1b", "filename": "src/doc/trpl/concurrency.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Fdoc%2Ftrpl%2Fconcurrency.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Ftrpl%2Fconcurrency.md?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -244,7 +244,7 @@ use std::time::Duration;\n fn main() {\n     let data = Arc::new(Mutex::new(vec![1u32, 2, 3]));\n \n-    for i in 0us..2 {\n+    for i in 0..2 {\n         let data = data.clone();\n         thread::spawn(move || {\n             let mut data = data.lock().unwrap();\n@@ -267,7 +267,7 @@ thread more closely:\n # use std::time::Duration;\n # fn main() {\n #     let data = Arc::new(Mutex::new(vec![1u32, 2, 3]));\n-#     for i in 0us..2 {\n+#     for i in 0..2 {\n #         let data = data.clone();\n thread::spawn(move || {\n     let mut data = data.lock().unwrap();"}, {"sha": "1b5018f4ad73df637c96ec9bd7bdb5ae2262f069", "filename": "src/libcollections/fmt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibcollections%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibcollections%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ffmt.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -27,12 +27,12 @@\n //! Some examples of the `format!` extension are:\n //!\n //! ```\n-//! format!(\"Hello\");                  // => \"Hello\"\n-//! format!(\"Hello, {}!\", \"world\");    // => \"Hello, world!\"\n+//! format!(\"Hello\");                 // => \"Hello\"\n+//! format!(\"Hello, {}!\", \"world\");   // => \"Hello, world!\"\n //! format!(\"The number is {}\", 1);   // => \"The number is 1\"\n-//! format!(\"{:?}\", (3, 4));         // => \"(3, 4)\"\n+//! format!(\"{:?}\", (3, 4));          // => \"(3, 4)\"\n //! format!(\"{value}\", value=4);      // => \"4\"\n-//! format!(\"{} {}\", 1, 2u);          // => \"1 2\"\n+//! format!(\"{} {}\", 1, 2);           // => \"1 2\"\n //! ```\n //!\n //! From these, you can see that the first argument is a format string. It is"}, {"sha": "c45fac1bc9490be142f1b9a0e5ac1dc277124628", "filename": "src/libcore/char.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibcore%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibcore%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -441,18 +441,18 @@ pub fn encode_utf8_raw(code: u32, dst: &mut [u8]) -> Option<usize> {\n         dst[0] = code as u8;\n         Some(1)\n     } else if code < MAX_TWO_B && dst.len() >= 2 {\n-        dst[0] = (code >> 6u & 0x1F_u32) as u8 | TAG_TWO_B;\n+        dst[0] = (code >> 6 & 0x1F_u32) as u8 | TAG_TWO_B;\n         dst[1] = (code & 0x3F_u32) as u8 | TAG_CONT;\n         Some(2)\n     } else if code < MAX_THREE_B && dst.len() >= 3  {\n-        dst[0] = (code >> 12u & 0x0F_u32) as u8 | TAG_THREE_B;\n-        dst[1] = (code >>  6u & 0x3F_u32) as u8 | TAG_CONT;\n+        dst[0] = (code >> 12 & 0x0F_u32) as u8 | TAG_THREE_B;\n+        dst[1] = (code >>  6 & 0x3F_u32) as u8 | TAG_CONT;\n         dst[2] = (code & 0x3F_u32) as u8 | TAG_CONT;\n         Some(3)\n     } else if dst.len() >= 4 {\n-        dst[0] = (code >> 18u & 0x07_u32) as u8 | TAG_FOUR_B;\n-        dst[1] = (code >> 12u & 0x3F_u32) as u8 | TAG_CONT;\n-        dst[2] = (code >>  6u & 0x3F_u32) as u8 | TAG_CONT;\n+        dst[0] = (code >> 18 & 0x07_u32) as u8 | TAG_FOUR_B;\n+        dst[1] = (code >> 12 & 0x3F_u32) as u8 | TAG_CONT;\n+        dst[2] = (code >>  6 & 0x3F_u32) as u8 | TAG_CONT;\n         dst[3] = (code & 0x3F_u32) as u8 | TAG_CONT;\n         Some(4)\n     } else {"}, {"sha": "8b5e46f85fa6ac181b1e7968adaa364214c407ad", "filename": "src/libcoretest/any.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibcoretest%2Fany.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibcoretest%2Fany.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fany.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -35,7 +35,7 @@ fn any_referenced() {\n \n #[test]\n fn any_owning() {\n-    let (a, b, c) = (box 5us as Box<Any>, box TEST as Box<Any>, box Test as Box<Any>);\n+    let (a, b, c) = (box 5_usize as Box<Any>, box TEST as Box<Any>, box Test as Box<Any>);\n \n     assert!(a.is::<uint>());\n     assert!(!b.is::<uint>());\n@@ -52,7 +52,7 @@ fn any_owning() {\n \n #[test]\n fn any_downcast_ref() {\n-    let a = &5us as &Any;\n+    let a = &5_usize as &Any;\n \n     match a.downcast_ref::<uint>() {\n         Some(&5) => {}\n@@ -67,8 +67,8 @@ fn any_downcast_ref() {\n \n #[test]\n fn any_downcast_mut() {\n-    let mut a = 5us;\n-    let mut b = box 7us;\n+    let mut a = 5_usize;\n+    let mut b = box 7_usize;\n \n     let a_r = &mut a as &mut Any;\n     let tmp: &mut uint = &mut *b;\n@@ -113,7 +113,7 @@ fn any_downcast_mut() {\n \n #[test]\n fn any_fixed_vec() {\n-    let test = [0us; 8];\n+    let test = [0_usize; 8];\n     let test = &test as &Any;\n     assert!(test.is::<[uint; 8]>());\n     assert!(!test.is::<[uint; 10]>());"}, {"sha": "bc8461b0b9e09cf9c8c43d8a5d4752be40731959", "filename": "src/libcoretest/fmt/num.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibcoretest%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibcoretest%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Ffmt%2Fnum.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -16,68 +16,68 @@ fn test_format_int() {\n     // Formatting integers should select the right implementation based off\n     // the type of the argument. Also, hex/octal/binary should be defined\n     // for integers, but they shouldn't emit the negative sign.\n-    assert!(format!(\"{}\", 1is) == \"1\");\n+    assert!(format!(\"{}\", 1isize) == \"1\");\n     assert!(format!(\"{}\", 1i8) == \"1\");\n     assert!(format!(\"{}\", 1i16) == \"1\");\n     assert!(format!(\"{}\", 1i32) == \"1\");\n     assert!(format!(\"{}\", 1i64) == \"1\");\n-    assert!(format!(\"{}\", -1is) == \"-1\");\n+    assert!(format!(\"{}\", -1isize) == \"-1\");\n     assert!(format!(\"{}\", -1i8) == \"-1\");\n     assert!(format!(\"{}\", -1i16) == \"-1\");\n     assert!(format!(\"{}\", -1i32) == \"-1\");\n     assert!(format!(\"{}\", -1i64) == \"-1\");\n-    assert!(format!(\"{:?}\", 1is) == \"1\");\n+    assert!(format!(\"{:?}\", 1isize) == \"1\");\n     assert!(format!(\"{:?}\", 1i8) == \"1\");\n     assert!(format!(\"{:?}\", 1i16) == \"1\");\n     assert!(format!(\"{:?}\", 1i32) == \"1\");\n     assert!(format!(\"{:?}\", 1i64) == \"1\");\n-    assert!(format!(\"{:b}\", 1is) == \"1\");\n+    assert!(format!(\"{:b}\", 1isize) == \"1\");\n     assert!(format!(\"{:b}\", 1i8) == \"1\");\n     assert!(format!(\"{:b}\", 1i16) == \"1\");\n     assert!(format!(\"{:b}\", 1i32) == \"1\");\n     assert!(format!(\"{:b}\", 1i64) == \"1\");\n-    assert!(format!(\"{:x}\", 1is) == \"1\");\n+    assert!(format!(\"{:x}\", 1isize) == \"1\");\n     assert!(format!(\"{:x}\", 1i8) == \"1\");\n     assert!(format!(\"{:x}\", 1i16) == \"1\");\n     assert!(format!(\"{:x}\", 1i32) == \"1\");\n     assert!(format!(\"{:x}\", 1i64) == \"1\");\n-    assert!(format!(\"{:X}\", 1is) == \"1\");\n+    assert!(format!(\"{:X}\", 1isize) == \"1\");\n     assert!(format!(\"{:X}\", 1i8) == \"1\");\n     assert!(format!(\"{:X}\", 1i16) == \"1\");\n     assert!(format!(\"{:X}\", 1i32) == \"1\");\n     assert!(format!(\"{:X}\", 1i64) == \"1\");\n-    assert!(format!(\"{:o}\", 1is) == \"1\");\n+    assert!(format!(\"{:o}\", 1isize) == \"1\");\n     assert!(format!(\"{:o}\", 1i8) == \"1\");\n     assert!(format!(\"{:o}\", 1i16) == \"1\");\n     assert!(format!(\"{:o}\", 1i32) == \"1\");\n     assert!(format!(\"{:o}\", 1i64) == \"1\");\n \n-    assert!(format!(\"{}\", 1us) == \"1\");\n+    assert!(format!(\"{}\", 1usize) == \"1\");\n     assert!(format!(\"{}\", 1u8) == \"1\");\n     assert!(format!(\"{}\", 1u16) == \"1\");\n     assert!(format!(\"{}\", 1u32) == \"1\");\n     assert!(format!(\"{}\", 1u64) == \"1\");\n-    assert!(format!(\"{:?}\", 1us) == \"1\");\n+    assert!(format!(\"{:?}\", 1usize) == \"1\");\n     assert!(format!(\"{:?}\", 1u8) == \"1\");\n     assert!(format!(\"{:?}\", 1u16) == \"1\");\n     assert!(format!(\"{:?}\", 1u32) == \"1\");\n     assert!(format!(\"{:?}\", 1u64) == \"1\");\n-    assert!(format!(\"{:b}\", 1us) == \"1\");\n+    assert!(format!(\"{:b}\", 1usize) == \"1\");\n     assert!(format!(\"{:b}\", 1u8) == \"1\");\n     assert!(format!(\"{:b}\", 1u16) == \"1\");\n     assert!(format!(\"{:b}\", 1u32) == \"1\");\n     assert!(format!(\"{:b}\", 1u64) == \"1\");\n-    assert!(format!(\"{:x}\", 1us) == \"1\");\n+    assert!(format!(\"{:x}\", 1usize) == \"1\");\n     assert!(format!(\"{:x}\", 1u8) == \"1\");\n     assert!(format!(\"{:x}\", 1u16) == \"1\");\n     assert!(format!(\"{:x}\", 1u32) == \"1\");\n     assert!(format!(\"{:x}\", 1u64) == \"1\");\n-    assert!(format!(\"{:X}\", 1us) == \"1\");\n+    assert!(format!(\"{:X}\", 1usize) == \"1\");\n     assert!(format!(\"{:X}\", 1u8) == \"1\");\n     assert!(format!(\"{:X}\", 1u16) == \"1\");\n     assert!(format!(\"{:X}\", 1u32) == \"1\");\n     assert!(format!(\"{:X}\", 1u64) == \"1\");\n-    assert!(format!(\"{:o}\", 1us) == \"1\");\n+    assert!(format!(\"{:o}\", 1usize) == \"1\");\n     assert!(format!(\"{:o}\", 1u8) == \"1\");\n     assert!(format!(\"{:o}\", 1u16) == \"1\");\n     assert!(format!(\"{:o}\", 1u32) == \"1\");"}, {"sha": "fd0d3c676a45ab4d1c0c50cb20087092526576dd", "filename": "src/libcoretest/hash/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibcoretest%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibcoretest%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcoretest%2Fhash%2Fmod.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -46,17 +46,17 @@ fn test_writer_hasher() {\n \n     assert_eq!(hash(&()), 0);\n \n-    assert_eq!(hash(&5u8), 5);\n-    assert_eq!(hash(&5u16), 5);\n-    assert_eq!(hash(&5u32), 5);\n-    assert_eq!(hash(&5u64), 5);\n-    assert_eq!(hash(&5us), 5);\n-\n-    assert_eq!(hash(&5i8), 5);\n-    assert_eq!(hash(&5i16), 5);\n-    assert_eq!(hash(&5i32), 5);\n-    assert_eq!(hash(&5i64), 5);\n-    assert_eq!(hash(&5is), 5);\n+    assert_eq!(hash(&5_u8), 5);\n+    assert_eq!(hash(&5_u16), 5);\n+    assert_eq!(hash(&5_u32), 5);\n+    assert_eq!(hash(&5_u64), 5);\n+    assert_eq!(hash(&5_usize), 5);\n+\n+    assert_eq!(hash(&5_i8), 5);\n+    assert_eq!(hash(&5_i16), 5);\n+    assert_eq!(hash(&5_i32), 5);\n+    assert_eq!(hash(&5_i64), 5);\n+    assert_eq!(hash(&5_isize), 5);\n \n     assert_eq!(hash(&false), 0);\n     assert_eq!(hash(&true), 1);\n@@ -76,12 +76,12 @@ fn test_writer_hasher() {\n     // FIXME (#18248) Add tests for hashing Rc<str> and Rc<[T]>\n \n     unsafe {\n-        let ptr: *const i32 = mem::transmute(5us);\n+        let ptr: *const i32 = mem::transmute(5_usize);\n         assert_eq!(hash(&ptr), 5);\n     }\n \n     unsafe {\n-        let ptr: *mut i32 = mem::transmute(5us);\n+        let ptr: *mut i32 = mem::transmute(5_usize);\n         assert_eq!(hash(&ptr), 5);\n     }\n }"}, {"sha": "383108a3bc0e452656f67bbd8ff24bb38226f71b", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -1930,7 +1930,7 @@ pub mod types {\n                     pub iSecurityScheme: c_int,\n                     pub dwMessageSize: DWORD,\n                     pub dwProviderReserved: DWORD,\n-                    pub szProtocol: [u8; WSAPROTOCOL_LEN as usize + 1us],\n+                    pub szProtocol: [u8; WSAPROTOCOL_LEN as usize + 1],\n                 }\n \n                 pub type LPWSAPROTOCOL_INFO = *mut WSAPROTOCOL_INFO;"}, {"sha": "4af322089d53d40d7d3bea7ece5bed39ff48437a", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -713,10 +713,10 @@ pub mod writer {\n         match size {\n             1 => w.write_all(&[0x80u8 | (n as u8)]),\n             2 => w.write_all(&[0x40u8 | ((n >> 8) as u8), n as u8]),\n-            3 => w.write_all(&[0x20u8 | ((n >> 16) as u8), (n >> 8_u) as u8,\n+            3 => w.write_all(&[0x20u8 | ((n >> 16) as u8), (n >> 8) as u8,\n                             n as u8]),\n-            4 => w.write_all(&[0x10u8 | ((n >> 24) as u8), (n >> 16_u) as u8,\n-                            (n >> 8_u) as u8, n as u8]),\n+            4 => w.write_all(&[0x10u8 | ((n >> 24) as u8), (n >> 16) as u8,\n+                            (n >> 8) as u8, n as u8]),\n             _ => Err(old_io::IoError {\n                 kind: old_io::OtherIoError,\n                 desc: \"int too big\",\n@@ -863,7 +863,7 @@ pub mod writer {\n     impl<'a, W: Writer + Seek> Encoder<'a, W> {\n         // used internally to emit things like the vector length and so on\n         fn _emit_tagged_uint(&mut self, t: EbmlEncoderTag, v: uint) -> EncodeResult {\n-            assert!(v <= 0xFFFF_FFFF_u);\n+            assert!(v <= 0xFFFF_FFFF);\n             self.wr_tagged_u32(t as uint, v as u32)\n         }\n "}, {"sha": "eb51046d7c9a75ad2e918255266a87cf9e69d8cf", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -494,13 +494,12 @@ pub struct BoxPointers;\n impl BoxPointers {\n     fn check_heap_type<'a, 'tcx>(&self, cx: &Context<'a, 'tcx>,\n                                  span: Span, ty: Ty<'tcx>) {\n-        let mut n_uniq = 0us;\n+        let mut n_uniq: usize = 0;\n         ty::fold_ty(cx.tcx, ty, |t| {\n             match t.sty {\n                 ty::ty_uniq(_) => {\n                     n_uniq += 1;\n                 }\n-\n                 _ => ()\n             };\n             t"}, {"sha": "d54199a679a266f8cacdf913fa2287a8f76d3d83", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -560,7 +560,7 @@ pub fn parameterized<'tcx,GG>(cx: &ctxt<'tcx>,\n pub fn ty_to_short_str<'tcx>(cx: &ctxt<'tcx>, typ: Ty<'tcx>) -> String {\n     let mut s = typ.repr(cx).to_string();\n     if s.len() >= 32 {\n-        s = (&s[0u..32]).to_string();\n+        s = (&s[0..32]).to_string();\n     }\n     return s;\n }"}, {"sha": "0331b6171f36ca15f503b08d1cb3f492fc8b9120", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -62,7 +62,7 @@ pub fn run(sess: &session::Session, llmod: ModuleRef,\n         let file = path.filename_str().unwrap();\n         let file = &file[3..file.len() - 5]; // chop off lib/.rlib\n         debug!(\"reading {}\", file);\n-        for i in iter::count(0us, 1) {\n+        for i in iter::count(0, 1) {\n             let bc_encoded = time(sess.time_passes(),\n                                   &format!(\"check for {}.{}.bytecode.deflate\", name, i),\n                                   (),"}, {"sha": "ac9a982f2983f58899068d188eedcd003079ad75", "filename": "src/librustc_trans/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcommon.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -443,9 +443,9 @@ impl<'a, 'tcx> FunctionContext<'a, 'tcx> {\n \n     pub fn env_arg_pos(&self) -> uint {\n         if self.caller_expects_out_pointer {\n-            1u\n+            1\n         } else {\n-            0u\n+            0\n         }\n     }\n "}, {"sha": "861a218e0f1b92d3cede63a010392142baa7e28f", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -467,7 +467,7 @@ fn apply_adjustments<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 PointerCast(bcx, lval.val, type_of::type_of(bcx.ccx(), unsized_ty).ptr_to())\n             }\n             ty::UnsizeLength(..) => {\n-                GEPi(bcx, lval.val, &[0u, 0u])\n+                GEPi(bcx, lval.val, &[0, 0])\n             }\n         };\n "}, {"sha": "456e27967f5a67fa374c1bf70de434f5aaad5dd2", "filename": "src/librustc_trans/trans/tvec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftvec.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -76,7 +76,7 @@ pub fn make_drop_glue_unboxed<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 let not_empty = ICmp(bcx,\n                                      llvm::IntNE,\n                                      len,\n-                                     C_uint(ccx, 0us),\n+                                     C_uint(ccx, 0_u32),\n                                      DebugLoc::None);\n                 with_cond(bcx, not_empty, |bcx| {\n                     let llalign = C_uint(ccx, machine::llalign_of_min(ccx, llty));\n@@ -436,7 +436,7 @@ pub fn iter_vec_loop<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n     let loop_counter = {\n         // i = 0\n         let i = alloca(loop_bcx, bcx.ccx().int_type(), \"__i\");\n-        Store(loop_bcx, C_uint(bcx.ccx(), 0us), i);\n+        Store(loop_bcx, C_uint(bcx.ccx(), 0_u32), i);\n \n         Br(loop_bcx, cond_bcx.llbb, DebugLoc::None);\n         i\n@@ -464,7 +464,7 @@ pub fn iter_vec_loop<'blk, 'tcx, F>(bcx: Block<'blk, 'tcx>,\n \n     { // i += 1\n         let i = Load(inc_bcx, loop_counter);\n-        let plusone = Add(inc_bcx, i, C_uint(bcx.ccx(), 1us), DebugLoc::None);\n+        let plusone = Add(inc_bcx, i, C_uint(bcx.ccx(), 1_u32), DebugLoc::None);\n         Store(inc_bcx, plusone, loop_counter);\n \n         Br(inc_bcx, cond_bcx.llbb, DebugLoc::None);"}, {"sha": "68b28784b4254de9460c6048e62a1460503513a2", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -3905,12 +3905,12 @@ mod tests {\n \n         assert_eq!(array2.to_json(), array2);\n         assert_eq!(object.to_json(), object);\n-        assert_eq!(3_i.to_json(), I64(3));\n+        assert_eq!(3_isize.to_json(), I64(3));\n         assert_eq!(4_i8.to_json(), I64(4));\n         assert_eq!(5_i16.to_json(), I64(5));\n         assert_eq!(6_i32.to_json(), I64(6));\n         assert_eq!(7_i64.to_json(), I64(7));\n-        assert_eq!(8_u.to_json(), U64(8));\n+        assert_eq!(8_usize.to_json(), U64(8));\n         assert_eq!(9_u8.to_json(), U64(9));\n         assert_eq!(10_u16.to_json(), U64(10));\n         assert_eq!(11_u32.to_json(), U64(11));\n@@ -3924,22 +3924,22 @@ mod tests {\n         assert_eq!(false.to_json(), Boolean(false));\n         assert_eq!(\"abc\".to_json(), String(\"abc\".to_string()));\n         assert_eq!(\"abc\".to_string().to_json(), String(\"abc\".to_string()));\n-        assert_eq!((1us, 2us).to_json(), array2);\n-        assert_eq!((1us, 2us, 3us).to_json(), array3);\n-        assert_eq!([1us, 2us].to_json(), array2);\n-        assert_eq!((&[1us, 2us, 3us]).to_json(), array3);\n-        assert_eq!((vec![1us, 2us]).to_json(), array2);\n-        assert_eq!(vec!(1us, 2us, 3us).to_json(), array3);\n+        assert_eq!((1_usize, 2_usize).to_json(), array2);\n+        assert_eq!((1_usize, 2_usize, 3_usize).to_json(), array3);\n+        assert_eq!([1_usize, 2_usize].to_json(), array2);\n+        assert_eq!((&[1_usize, 2_usize, 3_usize]).to_json(), array3);\n+        assert_eq!((vec![1_usize, 2_usize]).to_json(), array2);\n+        assert_eq!(vec!(1_usize, 2_usize, 3_usize).to_json(), array3);\n         let mut tree_map = BTreeMap::new();\n-        tree_map.insert(\"a\".to_string(), 1us);\n+        tree_map.insert(\"a\".to_string(), 1 as usize);\n         tree_map.insert(\"b\".to_string(), 2);\n         assert_eq!(tree_map.to_json(), object);\n         let mut hash_map = HashMap::new();\n-        hash_map.insert(\"a\".to_string(), 1us);\n+        hash_map.insert(\"a\".to_string(), 1 as usize);\n         hash_map.insert(\"b\".to_string(), 2);\n         assert_eq!(hash_map.to_json(), object);\n         assert_eq!(Some(15).to_json(), I64(15));\n-        assert_eq!(Some(15us).to_json(), U64(15));\n+        assert_eq!(Some(15 as usize).to_json(), U64(15));\n         assert_eq!(None::<int>.to_json(), Null);\n     }\n "}, {"sha": "c94c16498332924e2fd5348fc12e317983c792e3", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 42, "deletions": 42, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -1123,20 +1123,20 @@ mod tests {\n         ($_20:expr) => ({\n             let _20 = $_20;\n \n-            assert_eq!(20u,   _20.to_uint().unwrap());\n-            assert_eq!(20u8,  _20.to_u8().unwrap());\n-            assert_eq!(20u16, _20.to_u16().unwrap());\n-            assert_eq!(20u32, _20.to_u32().unwrap());\n-            assert_eq!(20u64, _20.to_u64().unwrap());\n-            assert_eq!(20,   _20.to_int().unwrap());\n-            assert_eq!(20i8,  _20.to_i8().unwrap());\n-            assert_eq!(20i16, _20.to_i16().unwrap());\n-            assert_eq!(20i32, _20.to_i32().unwrap());\n-            assert_eq!(20i64, _20.to_i64().unwrap());\n-            assert_eq!(20f32, _20.to_f32().unwrap());\n-            assert_eq!(20f64, _20.to_f64().unwrap());\n-\n-            assert_eq!(_20, NumCast::from(20u).unwrap());\n+            assert_eq!(20usize, _20.to_uint().unwrap());\n+            assert_eq!(20u8,    _20.to_u8().unwrap());\n+            assert_eq!(20u16,   _20.to_u16().unwrap());\n+            assert_eq!(20u32,   _20.to_u32().unwrap());\n+            assert_eq!(20u64,   _20.to_u64().unwrap());\n+            assert_eq!(20,      _20.to_int().unwrap());\n+            assert_eq!(20i8,    _20.to_i8().unwrap());\n+            assert_eq!(20i16,   _20.to_i16().unwrap());\n+            assert_eq!(20i32,   _20.to_i32().unwrap());\n+            assert_eq!(20i64,   _20.to_i64().unwrap());\n+            assert_eq!(20f32,   _20.to_f32().unwrap());\n+            assert_eq!(20f64,   _20.to_f64().unwrap());\n+\n+            assert_eq!(_20, NumCast::from(20usize).unwrap());\n             assert_eq!(_20, NumCast::from(20u8).unwrap());\n             assert_eq!(_20, NumCast::from(20u16).unwrap());\n             assert_eq!(_20, NumCast::from(20u32).unwrap());\n@@ -1149,7 +1149,7 @@ mod tests {\n             assert_eq!(_20, NumCast::from(20f32).unwrap());\n             assert_eq!(_20, NumCast::from(20f64).unwrap());\n \n-            assert_eq!(_20, cast(20u).unwrap());\n+            assert_eq!(_20, cast(20usize).unwrap());\n             assert_eq!(_20, cast(20u8).unwrap());\n             assert_eq!(_20, cast(20u16).unwrap());\n             assert_eq!(_20, cast(20u32).unwrap());\n@@ -1164,18 +1164,18 @@ mod tests {\n         })\n     }\n \n-    #[test] fn test_u8_cast()    { test_cast_20!(20u8)  }\n-    #[test] fn test_u16_cast()   { test_cast_20!(20u16) }\n-    #[test] fn test_u32_cast()   { test_cast_20!(20u32) }\n-    #[test] fn test_u64_cast()   { test_cast_20!(20u64) }\n-    #[test] fn test_uint_cast()  { test_cast_20!(20u)   }\n-    #[test] fn test_i8_cast()    { test_cast_20!(20i8)  }\n-    #[test] fn test_i16_cast()   { test_cast_20!(20i16) }\n-    #[test] fn test_i32_cast()   { test_cast_20!(20i32) }\n-    #[test] fn test_i64_cast()   { test_cast_20!(20i64) }\n-    #[test] fn test_int_cast()   { test_cast_20!(20)   }\n-    #[test] fn test_f32_cast()   { test_cast_20!(20f32) }\n-    #[test] fn test_f64_cast()   { test_cast_20!(20f64) }\n+    #[test] fn test_u8_cast()    { test_cast_20!(20u8)    }\n+    #[test] fn test_u16_cast()   { test_cast_20!(20u16)   }\n+    #[test] fn test_u32_cast()   { test_cast_20!(20u32)   }\n+    #[test] fn test_u64_cast()   { test_cast_20!(20u64)   }\n+    #[test] fn test_uint_cast()  { test_cast_20!(20usize) }\n+    #[test] fn test_i8_cast()    { test_cast_20!(20i8)    }\n+    #[test] fn test_i16_cast()   { test_cast_20!(20i16)   }\n+    #[test] fn test_i32_cast()   { test_cast_20!(20i32)   }\n+    #[test] fn test_i64_cast()   { test_cast_20!(20i64)   }\n+    #[test] fn test_int_cast()   { test_cast_20!(20)      }\n+    #[test] fn test_f32_cast()   { test_cast_20!(20f32)   }\n+    #[test] fn test_f64_cast()   { test_cast_20!(20f64)   }\n \n     #[test]\n     fn test_cast_range_int_min() {\n@@ -1548,18 +1548,18 @@ mod tests {\n     #[test]\n     fn test_saturating_add_uint() {\n         use uint::MAX;\n-        assert_eq!(3u.saturating_add(5u), 8u);\n-        assert_eq!(3u.saturating_add(MAX-1), MAX);\n+        assert_eq!(3_usize.saturating_add(5_usize), 8_usize);\n+        assert_eq!(3_usize.saturating_add(MAX-1), MAX);\n         assert_eq!(MAX.saturating_add(MAX), MAX);\n         assert_eq!((MAX-2).saturating_add(1), MAX-1);\n     }\n \n     #[test]\n     fn test_saturating_sub_uint() {\n         use uint::MAX;\n-        assert_eq!(5u.saturating_sub(3u), 2u);\n-        assert_eq!(3u.saturating_sub(5u), 0u);\n-        assert_eq!(0u.saturating_sub(1u), 0u);\n+        assert_eq!(5_usize.saturating_sub(3_usize), 2_usize);\n+        assert_eq!(3_usize.saturating_sub(5_usize), 0_usize);\n+        assert_eq!(0_usize.saturating_sub(1_usize), 0_usize);\n         assert_eq!((MAX-1).saturating_sub(MAX), 0);\n     }\n \n@@ -1602,14 +1602,14 @@ mod tests {\n \n     #[test]\n     fn test_checked_sub() {\n-        assert_eq!(5u.checked_sub(0), Some(5));\n-        assert_eq!(5u.checked_sub(1), Some(4));\n-        assert_eq!(5u.checked_sub(2), Some(3));\n-        assert_eq!(5u.checked_sub(3), Some(2));\n-        assert_eq!(5u.checked_sub(4), Some(1));\n-        assert_eq!(5u.checked_sub(5), Some(0));\n-        assert_eq!(5u.checked_sub(6), None);\n-        assert_eq!(5u.checked_sub(7), None);\n+        assert_eq!(5_usize.checked_sub(0), Some(5));\n+        assert_eq!(5_usize.checked_sub(1), Some(4));\n+        assert_eq!(5_usize.checked_sub(2), Some(3));\n+        assert_eq!(5_usize.checked_sub(3), Some(2));\n+        assert_eq!(5_usize.checked_sub(4), Some(1));\n+        assert_eq!(5_usize.checked_sub(5), Some(0));\n+        assert_eq!(5_usize.checked_sub(6), None);\n+        assert_eq!(5_usize.checked_sub(7), None);\n     }\n \n     #[test]\n@@ -1763,7 +1763,7 @@ mod bench {\n \n     #[bench]\n     fn bench_pow_function(b: &mut Bencher) {\n-        let v = (0..1024u).collect::<Vec<_>>();\n-        b.iter(|| {v.iter().fold(0u, |old, new| old.pow(*new));});\n+        let v = (0..1024).collect::<Vec<_>>();\n+        b.iter(|| {v.iter().fold(0, |old, new| old.pow(*new));});\n     }\n }"}, {"sha": "f6d05f961e1736efc5e54908730b70c37ba99463", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -262,7 +262,7 @@ pub fn float_to_str_bytes_common<T: Float>(\n \n     // If limited digits, calculate one digit more for rounding.\n     let (limit_digits, digit_count, exact) = match digits {\n-        DigAll          => (false, 0u,      false),\n+        DigAll          => (false, 0,       false),\n         DigMax(count)   => (true,  count+1, false),\n         DigExact(count) => (true,  count+1, true)\n     };\n@@ -289,7 +289,7 @@ pub fn float_to_str_bytes_common<T: Float>(\n     deccum = num.fract();\n     if deccum != _0 || (limit_digits && exact && digit_count > 0) {\n         buf.push(b'.');\n-        let mut dig = 0u;\n+        let mut dig = 0;\n \n         // calculate new digits while\n         // - there is no limit and there are digits left\n@@ -314,7 +314,7 @@ pub fn float_to_str_bytes_common<T: Float>(\n \n             // Decrease the deccumulator one fractional digit at a time\n             deccum = deccum.fract();\n-            dig += 1u;\n+            dig += 1;\n         }\n \n         // If digits are limited, and that limit has been reached,"}, {"sha": "8d4f0344beb62b767bc92927bceb3306ce63708f", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -25,11 +25,11 @@ mod tests {\n \n     #[test]\n     pub fn test_from_str() {\n-        assert_eq!(from_str::<$T>(\"0\"), Some(0u as $T));\n-        assert_eq!(from_str::<$T>(\"3\"), Some(3u as $T));\n-        assert_eq!(from_str::<$T>(\"10\"), Some(10u as $T));\n+        assert_eq!(from_str::<$T>(\"0\"), Some(0 as $T));\n+        assert_eq!(from_str::<$T>(\"3\"), Some(3 as $T));\n+        assert_eq!(from_str::<$T>(\"10\"), Some(10 as $T));\n         assert_eq!(from_str::<u32>(\"123456789\"), Some(123456789 as u32));\n-        assert_eq!(from_str::<$T>(\"00100\"), Some(100u as $T));\n+        assert_eq!(from_str::<$T>(\"00100\"), Some(100 as $T));\n \n         assert_eq!(from_str::<$T>(\"\"), None);\n         assert_eq!(from_str::<$T>(\" \"), None);\n@@ -38,12 +38,12 @@ mod tests {\n \n     #[test]\n     pub fn test_parse_bytes() {\n-        assert_eq!(FromStrRadix::from_str_radix(\"123\", 10), Ok(123u as $T));\n-        assert_eq!(FromStrRadix::from_str_radix(\"1001\", 2), Ok(9u as $T));\n-        assert_eq!(FromStrRadix::from_str_radix(\"123\", 8), Ok(83u as $T));\n-        assert_eq!(FromStrRadix::from_str_radix(\"123\", 16), Ok(291u as u16));\n-        assert_eq!(FromStrRadix::from_str_radix(\"ffff\", 16), Ok(65535u as u16));\n-        assert_eq!(FromStrRadix::from_str_radix(\"z\", 36), Ok(35u as $T));\n+        assert_eq!(FromStrRadix::from_str_radix(\"123\", 10), Ok(123 as $T));\n+        assert_eq!(FromStrRadix::from_str_radix(\"1001\", 2), Ok(9 as $T));\n+        assert_eq!(FromStrRadix::from_str_radix(\"123\", 8), Ok(83 as $T));\n+        assert_eq!(FromStrRadix::from_str_radix(\"123\", 16), Ok(291 as u16));\n+        assert_eq!(FromStrRadix::from_str_radix(\"ffff\", 16), Ok(65535 as u16));\n+        assert_eq!(FromStrRadix::from_str_radix(\"z\", 36), Ok(35 as $T));\n \n         assert_eq!(FromStrRadix::from_str_radix(\"Z\", 10).ok(), None::<$T>);\n         assert_eq!(FromStrRadix::from_str_radix(\"_\", 2).ok(), None::<$T>);"}, {"sha": "c2a6c515acc70b2978fdcd1f494884127549bc25", "filename": "src/libstd/old_io/extensions.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fold_io%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fold_io%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fextensions.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -85,21 +85,21 @@ pub fn u64_to_le_bytes<T, F>(n: u64, size: uint, f: F) -> T where\n     use mem::transmute;\n \n     // LLVM fails to properly optimize this when using shifts instead of the to_le* intrinsics\n-    assert!(size <= 8u);\n+    assert!(size <= 8);\n     match size {\n-      1u => f(&[n as u8]),\n-      2u => f(unsafe { & transmute::<_, [u8; 2]>((n as u16).to_le()) }),\n-      4u => f(unsafe { & transmute::<_, [u8; 4]>((n as u32).to_le()) }),\n-      8u => f(unsafe { & transmute::<_, [u8; 8]>(n.to_le()) }),\n+      1 => f(&[n as u8]),\n+      2 => f(unsafe { & transmute::<_, [u8; 2]>((n as u16).to_le()) }),\n+      4 => f(unsafe { & transmute::<_, [u8; 4]>((n as u32).to_le()) }),\n+      8 => f(unsafe { & transmute::<_, [u8; 8]>(n.to_le()) }),\n       _ => {\n \n         let mut bytes = vec!();\n         let mut i = size;\n         let mut n = n;\n-        while i > 0u {\n+        while i > 0 {\n             bytes.push((n & 255_u64) as u8);\n             n >>= 8;\n-            i -= 1u;\n+            i -= 1;\n         }\n         f(&bytes)\n       }\n@@ -126,19 +126,19 @@ pub fn u64_to_be_bytes<T, F>(n: u64, size: uint, f: F) -> T where\n     use mem::transmute;\n \n     // LLVM fails to properly optimize this when using shifts instead of the to_be* intrinsics\n-    assert!(size <= 8u);\n+    assert!(size <= 8);\n     match size {\n-      1u => f(&[n as u8]),\n-      2u => f(unsafe { & transmute::<_, [u8; 2]>((n as u16).to_be()) }),\n-      4u => f(unsafe { & transmute::<_, [u8; 4]>((n as u32).to_be()) }),\n-      8u => f(unsafe { & transmute::<_, [u8; 8]>(n.to_be()) }),\n+      1 => f(&[n as u8]),\n+      2 => f(unsafe { & transmute::<_, [u8; 2]>((n as u16).to_be()) }),\n+      4 => f(unsafe { & transmute::<_, [u8; 4]>((n as u32).to_be()) }),\n+      8 => f(unsafe { & transmute::<_, [u8; 8]>(n.to_be()) }),\n       _ => {\n         let mut bytes = vec!();\n         let mut i = size;\n-        while i > 0u {\n-            let shift = (i - 1u) * 8u;\n+        while i > 0 {\n+            let shift = (i - 1) * 8;\n             bytes.push((n >> shift) as u8);\n-            i -= 1u;\n+            i -= 1;\n         }\n         f(&bytes)\n       }\n@@ -160,7 +160,7 @@ pub fn u64_from_be_bytes(data: &[u8], start: uint, size: uint) -> u64 {\n     use ptr::{copy_nonoverlapping_memory};\n     use slice::SliceExt;\n \n-    assert!(size <= 8u);\n+    assert!(size <= 8);\n \n     if data.len() - start < size {\n         panic!(\"index out of bounds\");"}, {"sha": "1fd527014a3d62d4e6fcdac2a6df7b20c26c424d", "filename": "src/libstd/old_io/mem.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fold_io%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fold_io%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmem.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -720,7 +720,7 @@ mod test {\n             let buf = [5 as u8; 100].to_vec();\n             {\n                 let mut rdr = MemReader::new(buf);\n-                for _i in 0u..10 {\n+                for _i in 0..10 {\n                     let mut buf = [0 as u8; 10];\n                     rdr.read(&mut buf).unwrap();\n                     assert_eq!(buf, [5; 10]);\n@@ -735,7 +735,7 @@ mod test {\n             let mut buf = [0 as u8; 100];\n             {\n                 let mut wr = BufWriter::new(&mut buf);\n-                for _i in 0u..10 {\n+                for _i in 0..10 {\n                     wr.write(&[5; 10]).unwrap();\n                 }\n             }\n@@ -749,7 +749,7 @@ mod test {\n             let buf = [5 as u8; 100];\n             {\n                 let mut rdr = BufReader::new(&buf);\n-                for _i in 0u..10 {\n+                for _i in 0..10 {\n                     let mut buf = [0 as u8; 10];\n                     rdr.read(&mut buf).unwrap();\n                     assert_eq!(buf, [5; 10]);"}, {"sha": "21282a0c28abb79db5c7762986428f9262228c90", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -1120,37 +1120,37 @@ pub trait Writer {\n     /// Write a big-endian u64 (8 bytes).\n     #[inline]\n     fn write_be_u64(&mut self, n: u64) -> IoResult<()> {\n-        extensions::u64_to_be_bytes(n, 8u, |v| self.write_all(v))\n+        extensions::u64_to_be_bytes(n, 8, |v| self.write_all(v))\n     }\n \n     /// Write a big-endian u32 (4 bytes).\n     #[inline]\n     fn write_be_u32(&mut self, n: u32) -> IoResult<()> {\n-        extensions::u64_to_be_bytes(n as u64, 4u, |v| self.write_all(v))\n+        extensions::u64_to_be_bytes(n as u64, 4, |v| self.write_all(v))\n     }\n \n     /// Write a big-endian u16 (2 bytes).\n     #[inline]\n     fn write_be_u16(&mut self, n: u16) -> IoResult<()> {\n-        extensions::u64_to_be_bytes(n as u64, 2u, |v| self.write_all(v))\n+        extensions::u64_to_be_bytes(n as u64, 2, |v| self.write_all(v))\n     }\n \n     /// Write a big-endian i64 (8 bytes).\n     #[inline]\n     fn write_be_i64(&mut self, n: i64) -> IoResult<()> {\n-        extensions::u64_to_be_bytes(n as u64, 8u, |v| self.write_all(v))\n+        extensions::u64_to_be_bytes(n as u64, 8, |v| self.write_all(v))\n     }\n \n     /// Write a big-endian i32 (4 bytes).\n     #[inline]\n     fn write_be_i32(&mut self, n: i32) -> IoResult<()> {\n-        extensions::u64_to_be_bytes(n as u64, 4u, |v| self.write_all(v))\n+        extensions::u64_to_be_bytes(n as u64, 4, |v| self.write_all(v))\n     }\n \n     /// Write a big-endian i16 (2 bytes).\n     #[inline]\n     fn write_be_i16(&mut self, n: i16) -> IoResult<()> {\n-        extensions::u64_to_be_bytes(n as u64, 2u, |v| self.write_all(v))\n+        extensions::u64_to_be_bytes(n as u64, 2, |v| self.write_all(v))\n     }\n \n     /// Write a big-endian IEEE754 double-precision floating-point (8 bytes).\n@@ -1172,37 +1172,37 @@ pub trait Writer {\n     /// Write a little-endian u64 (8 bytes).\n     #[inline]\n     fn write_le_u64(&mut self, n: u64) -> IoResult<()> {\n-        extensions::u64_to_le_bytes(n, 8u, |v| self.write_all(v))\n+        extensions::u64_to_le_bytes(n, 8, |v| self.write_all(v))\n     }\n \n     /// Write a little-endian u32 (4 bytes).\n     #[inline]\n     fn write_le_u32(&mut self, n: u32) -> IoResult<()> {\n-        extensions::u64_to_le_bytes(n as u64, 4u, |v| self.write_all(v))\n+        extensions::u64_to_le_bytes(n as u64, 4, |v| self.write_all(v))\n     }\n \n     /// Write a little-endian u16 (2 bytes).\n     #[inline]\n     fn write_le_u16(&mut self, n: u16) -> IoResult<()> {\n-        extensions::u64_to_le_bytes(n as u64, 2u, |v| self.write_all(v))\n+        extensions::u64_to_le_bytes(n as u64, 2, |v| self.write_all(v))\n     }\n \n     /// Write a little-endian i64 (8 bytes).\n     #[inline]\n     fn write_le_i64(&mut self, n: i64) -> IoResult<()> {\n-        extensions::u64_to_le_bytes(n as u64, 8u, |v| self.write_all(v))\n+        extensions::u64_to_le_bytes(n as u64, 8, |v| self.write_all(v))\n     }\n \n     /// Write a little-endian i32 (4 bytes).\n     #[inline]\n     fn write_le_i32(&mut self, n: i32) -> IoResult<()> {\n-        extensions::u64_to_le_bytes(n as u64, 4u, |v| self.write_all(v))\n+        extensions::u64_to_le_bytes(n as u64, 4, |v| self.write_all(v))\n     }\n \n     /// Write a little-endian i16 (2 bytes).\n     #[inline]\n     fn write_le_i16(&mut self, n: i16) -> IoResult<()> {\n-        extensions::u64_to_le_bytes(n as u64, 2u, |v| self.write_all(v))\n+        extensions::u64_to_le_bytes(n as u64, 2, |v| self.write_all(v))\n     }\n \n     /// Write a little-endian IEEE754 double-precision floating-point"}, {"sha": "8a4e8668b1092f1a878b788bbfbf6b444e7ec4f9", "filename": "src/libstd/old_io/net/pipe.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -390,7 +390,7 @@ mod tests {\n         };\n \n         let _t = thread::spawn(move|| {\n-            for _ in 0u..times {\n+            for _ in 0..times {\n                 let mut stream = UnixStream::connect(&path2);\n                 match stream.write(&[100]) {\n                     Ok(..) => {}\n@@ -555,7 +555,7 @@ mod tests {\n             tx.send(UnixStream::connect(&addr2).unwrap()).unwrap();\n         });\n         let l = rx.recv().unwrap();\n-        for i in 0u..1001 {\n+        for i in 0..1001 {\n             match a.accept() {\n                 Ok(..) => break,\n                 Err(ref e) if e.kind == TimedOut => {}\n@@ -683,7 +683,7 @@ mod tests {\n         assert_eq!(s.read(&mut [0]).err().unwrap().kind, TimedOut);\n \n         s.set_timeout(Some(20));\n-        for i in 0u..1001 {\n+        for i in 0..1001 {\n             match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,\n@@ -727,7 +727,7 @@ mod tests {\n         assert_eq!(s.read(&mut [0]).err().unwrap().kind, TimedOut);\n \n         tx.send(()).unwrap();\n-        for _ in 0u..100 {\n+        for _ in 0..100 {\n             assert!(s.write(&[0;128 * 1024]).is_ok());\n         }\n     }\n@@ -746,7 +746,7 @@ mod tests {\n \n         let mut s = a.accept().unwrap();\n         s.set_write_timeout(Some(20));\n-        for i in 0u..1001 {\n+        for i in 0..1001 {\n             match s.write(&[0; 128 * 1024]) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,"}, {"sha": "19a6f6e3defa7be42a677cea30cfdc75df58081d", "filename": "src/libstd/old_io/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Ftcp.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -746,7 +746,7 @@ mod test {\n     #[test]\n     fn multiple_connect_serial_ip4() {\n         let addr = next_test_ip4();\n-        let max = 10u;\n+        let max = 10;\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n         let _t = thread::spawn(move|| {\n@@ -766,7 +766,7 @@ mod test {\n     #[test]\n     fn multiple_connect_serial_ip6() {\n         let addr = next_test_ip6();\n-        let max = 10u;\n+        let max = 10;\n         let mut acceptor = TcpListener::bind(addr).listen();\n \n         let _t = thread::spawn(move|| {"}, {"sha": "67b57b250860f961c61cb8a1d47165f602335ab1", "filename": "src/libstd/old_io/net/udp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fudp.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -447,7 +447,7 @@ mod test {\n         let _b = UdpSocket::bind(addr2).unwrap();\n \n         a.set_write_timeout(Some(1000));\n-        for _ in 0u..100 {\n+        for _ in 0..100 {\n             match a.send_to(&[0;4*1024], addr2) {\n                 Ok(()) | Err(IoError { kind: ShortWrite(..), .. }) => {},\n                 Err(IoError { kind: TimedOut, .. }) => break,"}, {"sha": "1f2ef50fcae453627b63568cf7e0b92697cac72b", "filename": "src/libstd/old_io/timer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fold_io%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fold_io%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Ftimer.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -121,7 +121,7 @@ impl Timer {\n     /// let mut timer = Timer::new().unwrap();\n     /// let ten_milliseconds = timer.oneshot(Duration::milliseconds(10));\n     ///\n-    /// for _ in 0u..100 { /* do work */ }\n+    /// for _ in 0..100 { /* do work */ }\n     ///\n     /// // blocks until 10 ms after the `oneshot` call\n     /// ten_milliseconds.recv().unwrap();\n@@ -173,12 +173,12 @@ impl Timer {\n     /// let mut timer = Timer::new().unwrap();\n     /// let ten_milliseconds = timer.periodic(Duration::milliseconds(10));\n     ///\n-    /// for _ in 0u..100 { /* do work */ }\n+    /// for _ in 0..100 { /* do work */ }\n     ///\n     /// // blocks until 10 ms after the `periodic` call\n     /// ten_milliseconds.recv().unwrap();\n     ///\n-    /// for _ in 0u..100 { /* do work */ }\n+    /// for _ in 0..100 { /* do work */ }\n     ///\n     /// // blocks until 20 ms after the `periodic` call (*not* 10ms after the\n     /// // previous `recv`)"}, {"sha": "0a184a01a1d03650522c0c86584afe7d20424970", "filename": "src/libstd/old_path/posix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fold_path%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fold_path%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fposix.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -409,7 +409,7 @@ fn normalize_helper<'a>(v: &'a [u8], is_abs: bool) -> Option<Vec<&'a [u8]>> {\n         return None;\n     }\n     let mut comps: Vec<&'a [u8]> = vec![];\n-    let mut n_up = 0u;\n+    let mut n_up = 0;\n     let mut changed = false;\n     for comp in v.split(is_sep_byte) {\n         if comp.is_empty() { changed = true }"}, {"sha": "02a21321c4cb9ce0b22d9b2e3e31dd6178c71eb6", "filename": "src/libstd/old_path/windows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fold_path%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fold_path%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_path%2Fwindows.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -1063,7 +1063,7 @@ fn normalize_helper<'a>(s: &'a str, prefix: Option<PathPrefix>) -> (bool, Option\n         });\n     }\n     let mut comps: Vec<&'a str> = vec![];\n-    let mut n_up = 0u;\n+    let mut n_up = 0;\n     let mut changed = false;\n     for comp in s_.split(f) {\n         if comp.is_empty() { changed = true }"}, {"sha": "a4213e7373b1e0077579aa764ba492bf77a94fc9", "filename": "src/libstd/os.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -78,7 +78,7 @@ pub fn num_cpus() -> uint {\n     }\n }\n \n-pub const TMPBUF_SZ : uint = 1000u;\n+pub const TMPBUF_SZ : uint = 1000;\n \n /// Returns the current working directory as a `Path`.\n ///\n@@ -1442,7 +1442,7 @@ mod tests {\n \n     fn make_rand_name() -> String {\n         let mut rng = rand::thread_rng();\n-        let n = format!(\"TEST{}\", rng.gen_ascii_chars().take(10u)\n+        let n = format!(\"TEST{}\", rng.gen_ascii_chars().take(10)\n                                      .collect::<String>());\n         assert!(getenv(&n).is_none());\n         n\n@@ -1522,7 +1522,7 @@ mod tests {\n     #[ignore]\n     fn test_env_getenv() {\n         let e = env();\n-        assert!(e.len() > 0u);\n+        assert!(e.len() > 0);\n         for p in &e {\n             let (n, v) = (*p).clone();\n             debug!(\"{}\", n);"}, {"sha": "25d372b406f76fc11fd2b314540d31e9a1ff92f7", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -102,7 +102,7 @@\n //!    let total = 1_000_000;\n //!    let mut in_circle = 0;\n //!\n-//!    for _ in 0u..total {\n+//!    for _ in 0..total {\n //!        let a = between.ind_sample(&mut rng);\n //!        let b = between.ind_sample(&mut rng);\n //!        if a*a + b*b <= 1. {\n@@ -176,7 +176,7 @@\n //! }\n //!\n //! fn free_doors(blocked: &[uint]) -> Vec<uint> {\n-//!     (0u..3).filter(|x| !blocked.contains(x)).collect()\n+//!     (0..3).filter(|x| !blocked.contains(x)).collect()\n //! }\n //!\n //! fn main() {\n@@ -483,14 +483,14 @@ mod test {\n     #[test]\n     fn test_gen_range() {\n         let mut r = thread_rng();\n-        for _ in 0u..1000 {\n+        for _ in 0..1000 {\n             let a = r.gen_range(-3, 42);\n             assert!(a >= -3 && a < 42);\n             assert_eq!(r.gen_range(0, 1), 0);\n             assert_eq!(r.gen_range(-12, -11), -12);\n         }\n \n-        for _ in 0u..1000 {\n+        for _ in 0..1000 {\n             let a = r.gen_range(10, 42);\n             assert!(a >= 10 && a < 42);\n             assert_eq!(r.gen_range(0, 1), 0);\n@@ -510,7 +510,7 @@ mod test {\n     #[should_fail]\n     fn test_gen_range_panic_uint() {\n         let mut r = thread_rng();\n-        r.gen_range(5us, 2us);\n+        r.gen_range(5, 2);\n     }\n \n     #[test]"}, {"sha": "0e2766f3889441331b0ec73c3ecad0ddfb25c8ca", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -377,7 +377,7 @@ mod test {\n     fn test_os_rng_tasks() {\n \n         let mut txs = vec!();\n-        for _ in 0u..20 {\n+        for _ in 0..20 {\n             let (tx, rx) = channel();\n             txs.push(tx);\n \n@@ -391,7 +391,7 @@ mod test {\n                 thread::yield_now();\n                 let mut v = [0u8; 1000];\n \n-                for _ in 0u..100 {\n+                for _ in 0..100 {\n                     r.next_u32();\n                     thread::yield_now();\n                     r.next_u64();"}, {"sha": "b036177af153a50da6ff9f4951ae7ea69d4cdffa", "filename": "src/libstd/sync/barrier.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsync%2Fbarrier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsync%2Fbarrier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fbarrier.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -18,7 +18,7 @@ use sync::{Mutex, Condvar};\n /// use std::thread;\n ///\n /// let barrier = Arc::new(Barrier::new(10));\n-/// for _ in 0u..10 {\n+/// for _ in 0..10 {\n ///     let c = barrier.clone();\n ///     // The same messages will be printed together.\n ///     // You will NOT see any interleaving.\n@@ -120,7 +120,7 @@ mod tests {\n         let barrier = Arc::new(Barrier::new(N));\n         let (tx, rx) = channel();\n \n-        for _ in 0u..N - 1 {\n+        for _ in 0..N - 1 {\n             let c = barrier.clone();\n             let tx = tx.clone();\n             thread::spawn(move|| {\n@@ -138,7 +138,7 @@ mod tests {\n         let mut leader_found = barrier.wait().is_leader();\n \n         // Now, the barrier is cleared and we should get data.\n-        for _ in 0u..N - 1 {\n+        for _ in 0..N - 1 {\n             if rx.recv().unwrap() {\n                 assert!(!leader_found);\n                 leader_found = true;"}, {"sha": "21993e51669d359789f04767c4911391c36350cb", "filename": "src/libstd/sync/mpsc/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmod.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -1147,9 +1147,9 @@ mod test {\n     fn stress() {\n         let (tx, rx) = channel::<int>();\n         let t = thread::spawn(move|| {\n-            for _ in 0u..10000 { tx.send(1).unwrap(); }\n+            for _ in 0..10000 { tx.send(1).unwrap(); }\n         });\n-        for _ in 0u..10000 {\n+        for _ in 0..10000 {\n             assert_eq!(rx.recv().unwrap(), 1);\n         }\n         t.join().ok().unwrap();\n@@ -1209,7 +1209,7 @@ mod test {\n                 assert_eq!(rx.recv().unwrap(), 1);\n             }\n         });\n-        for _ in 0u..40 {\n+        for _ in 0..40 {\n             tx.send(1).unwrap();\n         }\n         t.join().ok().unwrap();\n@@ -1530,7 +1530,7 @@ mod test {\n             tx2.send(()).unwrap();\n         });\n         // make sure the other task has gone to sleep\n-        for _ in 0u..5000 { thread::yield_now(); }\n+        for _ in 0..5000 { thread::yield_now(); }\n \n         // upgrade to a shared chan and send a message\n         let t = tx.clone();\n@@ -1654,9 +1654,9 @@ mod sync_tests {\n     fn stress() {\n         let (tx, rx) = sync_channel::<int>(0);\n         thread::spawn(move|| {\n-            for _ in 0u..10000 { tx.send(1).unwrap(); }\n+            for _ in 0..10000 { tx.send(1).unwrap(); }\n         });\n-        for _ in 0u..10000 {\n+        for _ in 0..10000 {\n             assert_eq!(rx.recv().unwrap(), 1);\n         }\n     }\n@@ -1893,8 +1893,8 @@ mod sync_tests {\n     fn recv_a_lot() {\n         // Regression test that we don't run out of stack in scheduler context\n         let (tx, rx) = sync_channel(10000);\n-        for _ in 0u..10000 { tx.send(()).unwrap(); }\n-        for _ in 0u..10000 { rx.recv().unwrap(); }\n+        for _ in 0..10000 { tx.send(()).unwrap(); }\n+        for _ in 0..10000 { rx.recv().unwrap(); }\n     }\n \n     #[test]\n@@ -1994,7 +1994,7 @@ mod sync_tests {\n             tx2.send(()).unwrap();\n         });\n         // make sure the other task has gone to sleep\n-        for _ in 0u..5000 { thread::yield_now(); }\n+        for _ in 0..5000 { thread::yield_now(); }\n \n         // upgrade to a shared chan and send a message\n         let t = tx.clone();\n@@ -2082,7 +2082,7 @@ mod sync_tests {\n             rx2.recv().unwrap();\n         }\n \n-        for _ in 0u..100 {\n+        for _ in 0..100 {\n             repro()\n         }\n     }"}, {"sha": "a2accb128c310c2298ca6c277bee6792ad57b57d", "filename": "src/libstd/sync/mpsc/mpsc_queue.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fmpsc_queue.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -171,8 +171,8 @@ mod tests {\n \n     #[test]\n     fn test() {\n-        let nthreads = 8u;\n-        let nmsgs = 1000u;\n+        let nthreads = 8;\n+        let nmsgs = 1000;\n         let q = Queue::new();\n         match q.pop() {\n             Empty => {}\n@@ -192,7 +192,7 @@ mod tests {\n             });\n         }\n \n-        let mut i = 0u;\n+        let mut i = 0;\n         while i < nthreads * nmsgs {\n             match q.pop() {\n                 Empty | Inconsistent => {},"}, {"sha": "8fcedd2ab5796cbd0d955ec65c73257c01186a80", "filename": "src/libstd/sync/mpsc/select.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fselect.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -428,10 +428,10 @@ mod test {\n         let (tx3, rx3) = channel::<int>();\n \n         let _t = thread::spawn(move|| {\n-            for _ in 0u..20 { thread::yield_now(); }\n+            for _ in 0..20 { thread::yield_now(); }\n             tx1.send(1).unwrap();\n             rx3.recv().unwrap();\n-            for _ in 0u..20 { thread::yield_now(); }\n+            for _ in 0..20 { thread::yield_now(); }\n         });\n \n         select! {\n@@ -452,7 +452,7 @@ mod test {\n         let (tx3, rx3) = channel::<()>();\n \n         let _t = thread::spawn(move|| {\n-            for _ in 0u..20 { thread::yield_now(); }\n+            for _ in 0..20 { thread::yield_now(); }\n             tx1.send(1).unwrap();\n             tx2.send(2).unwrap();\n             rx3.recv().unwrap();\n@@ -557,7 +557,7 @@ mod test {\n             tx3.send(()).unwrap();\n         });\n \n-        for _ in 0u..1000 { thread::yield_now(); }\n+        for _ in 0..1000 { thread::yield_now(); }\n         drop(tx1.clone());\n         tx2.send(()).unwrap();\n         rx3.recv().unwrap();\n@@ -670,7 +670,7 @@ mod test {\n             tx2.send(()).unwrap();\n         });\n \n-        for _ in 0u..100 { thread::yield_now() }\n+        for _ in 0..100 { thread::yield_now() }\n         tx1.send(()).unwrap();\n         rx2.recv().unwrap();\n     }\n@@ -690,7 +690,7 @@ mod test {\n             tx2.send(()).unwrap();\n         });\n \n-        for _ in 0u..100 { thread::yield_now() }\n+        for _ in 0..100 { thread::yield_now() }\n         tx1.send(()).unwrap();\n         rx2.recv().unwrap();\n     }\n@@ -709,7 +709,7 @@ mod test {\n             tx2.send(()).unwrap();\n         });\n \n-        for _ in 0u..100 { thread::yield_now() }\n+        for _ in 0..100 { thread::yield_now() }\n         tx1.send(()).unwrap();\n         rx2.recv().unwrap();\n     }\n@@ -727,7 +727,7 @@ mod test {\n     fn sync2() {\n         let (tx, rx) = sync_channel::<int>(0);\n         let _t = thread::spawn(move|| {\n-            for _ in 0u..100 { thread::yield_now() }\n+            for _ in 0..100 { thread::yield_now() }\n             tx.send(1).unwrap();\n         });\n         select! {"}, {"sha": "e1a897065092af2ca1485b6354a70c355561b78e", "filename": "src/libstd/sync/mpsc/spsc_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc%2Fspsc_queue.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -325,7 +325,7 @@ mod test {\n             let (tx, rx) = channel();\n             let q2 = q.clone();\n             let _t = thread::spawn(move|| {\n-                for _ in 0u..100000 {\n+                for _ in 0..100000 {\n                     loop {\n                         match q2.pop() {\n                             Some(1) => break,"}, {"sha": "e77c4d2e5ebd4ec7ed498335eb1a3a3a67abe284", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -60,7 +60,7 @@ use sys_common::mutex as sys;\n /// let data = Arc::new(Mutex::new(0));\n ///\n /// let (tx, rx) = channel();\n-/// for _ in 0u..10 {\n+/// for _ in 0..10 {\n ///     let (data, tx) = (data.clone(), tx.clone());\n ///     thread::spawn(move || {\n ///         // The shared static can only be accessed once the lock is held.\n@@ -87,7 +87,7 @@ use sys_common::mutex as sys;\n /// use std::sync::{Arc, Mutex};\n /// use std::thread;\n ///\n-/// let lock = Arc::new(Mutex::new(0u));\n+/// let lock = Arc::new(Mutex::new(0_u32));\n /// let lock2 = lock.clone();\n ///\n /// let _ = thread::spawn(move || -> () {"}, {"sha": "97f985e21e8aba0bbc5068d55db1e2e6432695ea", "filename": "src/libstd/sync/once.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsync%2Fonce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsync%2Fonce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fonce.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -147,10 +147,10 @@ mod test {\n         static mut run: bool = false;\n \n         let (tx, rx) = channel();\n-        for _ in 0u..10 {\n+        for _ in 0..10 {\n             let tx = tx.clone();\n             thread::spawn(move|| {\n-                for _ in 0u..4 { thread::yield_now() }\n+                for _ in 0..4 { thread::yield_now() }\n                 unsafe {\n                     O.call_once(|| {\n                         assert!(!run);\n@@ -170,7 +170,7 @@ mod test {\n             assert!(run);\n         }\n \n-        for _ in 0u..10 {\n+        for _ in 0..10 {\n             rx.recv().unwrap();\n         }\n     }"}, {"sha": "cd833b17867106baa763e5ab4c1defe3fddb2a01", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -503,7 +503,7 @@ mod tests {\n \n         thread::spawn(move|| {\n             let mut lock = arc2.write().unwrap();\n-            for _ in 0u..10 {\n+            for _ in 0..10 {\n                 let tmp = *lock;\n                 *lock = -1;\n                 thread::yield_now();\n@@ -514,7 +514,7 @@ mod tests {\n \n         // Readers try to catch the writer in the act\n         let mut children = Vec::new();\n-        for _ in 0u..5 {\n+        for _ in 0..5 {\n             let arc3 = arc.clone();\n             children.push(thread::spawn(move|| {\n                 let lock = arc3.read().unwrap();"}, {"sha": "a45048be24c06a9e0eb37cba43cb7af6ab2b7017", "filename": "src/libstd/sync/task_pool.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsync%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsync%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ftask_pool.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -63,17 +63,17 @@ impl<'a> Drop for Sentinel<'a> {\n /// use std::iter::AdditiveIterator;\n /// use std::sync::mpsc::channel;\n ///\n-/// let pool = TaskPool::new(4u);\n+/// let pool = TaskPool::new(4);\n ///\n /// let (tx, rx) = channel();\n-/// for _ in 0..8u {\n+/// for _ in 0..8 {\n ///     let tx = tx.clone();\n ///     pool.execute(move|| {\n-///         tx.send(1u).unwrap();\n+///         tx.send(1_u32).unwrap();\n ///     });\n /// }\n ///\n-/// assert_eq!(rx.iter().take(8u).sum(), 8u);\n+/// assert_eq!(rx.iter().take(8).sum(), 8);\n /// ```\n pub struct TaskPool {\n     // How the threadpool communicates with subthreads.\n@@ -142,7 +142,7 @@ mod test {\n     use super::*;\n     use sync::mpsc::channel;\n \n-    const TEST_TASKS: uint = 4u;\n+    const TEST_TASKS: uint = 4;\n \n     #[test]\n     fn test_works() {\n@@ -154,7 +154,7 @@ mod test {\n         for _ in 0..TEST_TASKS {\n             let tx = tx.clone();\n             pool.execute(move|| {\n-                tx.send(1u).unwrap();\n+                tx.send(1).unwrap();\n             });\n         }\n \n@@ -183,7 +183,7 @@ mod test {\n         for _ in 0..TEST_TASKS {\n             let tx = tx.clone();\n             pool.execute(move|| {\n-                tx.send(1u).unwrap();\n+                tx.send(1).unwrap();\n             });\n         }\n "}, {"sha": "5fe84cafb71e2cd6f51b4f8aec3bb5940b7130c0", "filename": "src/libstd/sys/unix/os.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsys%2Funix%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fos.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -175,13 +175,13 @@ pub fn current_exe() -> IoResult<Path> {\n         let mut sz: libc::size_t = 0;\n         let err = sysctl(mib.as_mut_ptr(), mib.len() as ::libc::c_uint,\n                          ptr::null_mut(), &mut sz, ptr::null_mut(),\n-                         0u as libc::size_t);\n+                         0 as libc::size_t);\n         if err != 0 { return Err(IoError::last_error()); }\n         if sz == 0 { return Err(IoError::last_error()); }\n         let mut v: Vec<u8> = Vec::with_capacity(sz as uint);\n         let err = sysctl(mib.as_mut_ptr(), mib.len() as ::libc::c_uint,\n                          v.as_mut_ptr() as *mut libc::c_void, &mut sz,\n-                         ptr::null_mut(), 0u as libc::size_t);\n+                         ptr::null_mut(), 0 as libc::size_t);\n         if err != 0 { return Err(IoError::last_error()); }\n         if sz == 0 { return Err(IoError::last_error()); }\n         v.set_len(sz as uint - 1); // chop off trailing NUL"}, {"sha": "f861255a00a14959e93a8cd4be43f1491661f06a", "filename": "src/libstd/sys/windows/c.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fc.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -105,7 +105,7 @@ pub struct WSAPROTOCOL_INFO {\n     pub iSecurityScheme: libc::c_int,\n     pub dwMessageSize: libc::DWORD,\n     pub dwProviderReserved: libc::DWORD,\n-    pub szProtocol: [u16; (WSAPROTOCOL_LEN as usize) + 1us],\n+    pub szProtocol: [u16; (WSAPROTOCOL_LEN as usize) + 1],\n }\n \n pub type LPWSAPROTOCOL_INFO = *mut WSAPROTOCOL_INFO;"}, {"sha": "96ffc4daddd4eda3e9f9e6e115eed6a4914a0455", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -388,7 +388,7 @@ fn make_command_line(prog: &CString, args: &[CString]) -> String {\n             cmd.push('\"');\n         }\n         let argvec: Vec<char> = arg.chars().collect();\n-        for i in 0u..argvec.len() {\n+        for i in 0..argvec.len() {\n             append_char_at(cmd, &argvec, i);\n         }\n         if quote {"}, {"sha": "117507ad8b7e83a3ac77128f8dabe2f0cca894df", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -141,10 +141,7 @@ pub fn is_path(e: P<Expr>) -> bool {\n /// We want to avoid \"45int\" and \"-3int\" in favor of \"45\" and \"-3\"\n pub fn int_ty_to_string(t: IntTy, val: Option<i64>) -> String {\n     let s = match t {\n-        TyIs(true) if val.is_some() => \"i\",\n-        TyIs(true) => \"int\",\n-        TyIs(false) if val.is_some() => \"is\",\n-        TyIs(false) => \"isize\",\n+        TyIs(_) => \"isize\",\n         TyI8 => \"i8\",\n         TyI16 => \"i16\",\n         TyI32 => \"i32\",\n@@ -173,10 +170,7 @@ pub fn int_ty_max(t: IntTy) -> u64 {\n /// We want to avoid \"42u\" in favor of \"42us\". \"42uint\" is right out.\n pub fn uint_ty_to_string(t: UintTy, val: Option<u64>) -> String {\n     let s = match t {\n-        TyUs(true) if val.is_some() => \"u\",\n-        TyUs(true) => \"uint\",\n-        TyUs(false) if val.is_some() => \"us\",\n-        TyUs(false) => \"usize\",\n+        TyUs(_) => \"usize\",\n         TyU8 => \"u8\",\n         TyU16 => \"u16\",\n         TyU32 => \"u32\","}, {"sha": "d649e497ef71a871f90a5ea32caa72c0bdb9f3a6", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -488,7 +488,7 @@ pub fn parse(sess: &ParseSess,\n                     let match_cur = ei.match_cur;\n                     (&mut ei.matches[match_cur]).push(Rc::new(MatchedNonterminal(\n                         parse_nt(&mut rust_parser, span, &name_string))));\n-                    ei.idx += 1us;\n+                    ei.idx += 1;\n                     ei.match_cur += 1;\n                   }\n                   _ => panic!()"}, {"sha": "0110823ae98c1df2ffa9fc69437d55e09d7cd88d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -588,11 +588,11 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                 match lit.node {\n                     ast::LitInt(_, ty) => {\n                         let msg = if let ast::SignedIntLit(ast::TyIs(true), _) = ty {\n-                            Some(\"the `i` suffix on integers is deprecated; use `is` \\\n-                                  or one of the fixed-sized suffixes\")\n+                            Some(\"the `i` and `is` suffixes on integers are deprecated; \\\n+                                  use `isize` or one of the fixed-sized suffixes\")\n                         } else if let ast::UnsignedIntLit(ast::TyUs(true)) = ty {\n-                            Some(\"the `u` suffix on integers is deprecated; use `us` \\\n-                                 or one of the fixed-sized suffixes\")\n+                            Some(\"the `u` and `us` suffixes on integers are deprecated; \\\n+                                  use `usize` or one of the fixed-sized suffixes\")\n                         } else {\n                             None\n                         };"}, {"sha": "6ea23cf3f04a5791410a1cc54fdcfa8dd90c84ce", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -701,18 +701,18 @@ pub fn integer_lit(s: &str, suffix: Option<&str>, sd: &SpanHandler, sp: Span) ->\n     if let Some(suf) = suffix {\n         if suf.is_empty() { sd.span_bug(sp, \"found empty literal suffix in Some\")}\n         ty = match suf {\n-            \"i\"   => ast::SignedIntLit(ast::TyIs(true), ast::Plus),\n-            \"is\"   => ast::SignedIntLit(ast::TyIs(false), ast::Plus),\n+            \"isize\" => ast::SignedIntLit(ast::TyIs(false), ast::Plus),\n             \"i8\"  => ast::SignedIntLit(ast::TyI8, ast::Plus),\n             \"i16\" => ast::SignedIntLit(ast::TyI16, ast::Plus),\n             \"i32\" => ast::SignedIntLit(ast::TyI32, ast::Plus),\n             \"i64\" => ast::SignedIntLit(ast::TyI64, ast::Plus),\n-            \"u\"   => ast::UnsignedIntLit(ast::TyUs(true)),\n-            \"us\"   => ast::UnsignedIntLit(ast::TyUs(false)),\n+            \"usize\" => ast::UnsignedIntLit(ast::TyUs(false)),\n             \"u8\"  => ast::UnsignedIntLit(ast::TyU8),\n             \"u16\" => ast::UnsignedIntLit(ast::TyU16),\n             \"u32\" => ast::UnsignedIntLit(ast::TyU32),\n             \"u64\" => ast::UnsignedIntLit(ast::TyU64),\n+            \"i\" | \"is\" => ast::SignedIntLit(ast::TyIs(true), ast::Plus),\n+            \"u\" | \"us\" => ast::UnsignedIntLit(ast::TyUs(true)),\n             _ => {\n                 // i<digits> and u<digits> look like widths, so lets\n                 // give an error message along those lines\n@@ -722,6 +722,8 @@ pub fn integer_lit(s: &str, suffix: Option<&str>, sd: &SpanHandler, sp: Span) ->\n                                               &suf[1..]));\n                 } else {\n                     sd.span_err(sp, &*format!(\"illegal suffix `{}` for numeric literal\", suf));\n+                    sd.span_help(sp, \"the suffix must be one of the integral types \\\n+                                      (`u32`, `isize`, etc)\");\n                 }\n \n                 ty"}, {"sha": "6c6cf186e70ae79b10a37529e5c7fd4646c0b080", "filename": "src/libsyntax/print/pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibsyntax%2Fprint%2Fpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibsyntax%2Fprint%2Fpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpp.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -168,7 +168,7 @@ pub fn mk_printer(out: Box<old_io::Writer+'static>, linewidth: usize) -> Printer\n     debug!(\"mk_printer {}\", linewidth);\n     let token: Vec<Token> = repeat(Token::Eof).take(n).collect();\n     let size: Vec<isize> = repeat(0).take(n).collect();\n-    let scan_stack: Vec<usize> = repeat(0us).take(n).collect();\n+    let scan_stack: Vec<usize> = repeat(0).take(n).collect();\n     Printer {\n         out: out,\n         buf_len: n,"}, {"sha": "c147e6aa056dd2a916402ab636ee7dcfadd6e268", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -185,7 +185,7 @@ pub fn parse(file: &mut old_io::Reader, longnames: bool)\n     let magic = try!(file.read_le_u16());\n     if magic != 0x011A {\n         return Err(format!(\"invalid magic number: expected {:x}, found {:x}\",\n-                           0x011Au, magic as uint));\n+                           0x011A as usize, magic as usize));\n     }\n \n     let names_bytes          = try!(file.read_le_i16()) as int;"}, {"sha": "31ce3e91a7717a1a84a324210b43c7249a0c77a9", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -939,7 +939,7 @@ mod bench {\n     #[bench]\n     pub fn sum_many_f64(b: &mut Bencher) {\n         let nums = [-1e30f64, 1e60, 1e30, 1.0, -1e60];\n-        let v = (0us..500).map(|i| nums[i%5]).collect::<Vec<_>>();\n+        let v = (0..500).map(|i| nums[i%5]).collect::<Vec<_>>();\n \n         b.iter(|| {\n             v.sum();"}, {"sha": "21f8a7793dc0ca680ac61cce813eb20576c64ef5", "filename": "src/rustbook/book.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Frustbook%2Fbook.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Frustbook%2Fbook.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustbook%2Fbook.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -143,9 +143,9 @@ pub fn parse_summary<R: Reader>(input: R, src: &Path) -> Result<Book, Vec<String\n             path_to_root: path_to_root,\n             children: vec!(),\n         };\n-        let level = indent.chars().map(|c| {\n+        let level = indent.chars().map(|c| -> usize {\n             match c {\n-                ' ' => 1us,\n+                ' ' => 1,\n                 '\\t' => 4,\n                 _ => unreachable!()\n             }"}, {"sha": "98881eb09bf9bc89848da0b64cee29cfc309cb6e", "filename": "src/test/auxiliary/cci_class_3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_3.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -16,7 +16,7 @@ pub mod kitties {\n     }\n \n     impl cat {\n-        pub fn speak(&mut self) { self.meows += 1u; }\n+        pub fn speak(&mut self) { self.meows += 1_usize; }\n         pub fn meow_count(&mut self) -> uint { self.meows }\n     }\n "}, {"sha": "9d7905cdebd04eb10cb8f1ccca51fe02c1bea8ab", "filename": "src/test/auxiliary/cci_class_4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_4.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -34,8 +34,8 @@ pub mod kitties {\n     impl cat {\n         pub fn meow(&mut self) {\n             println!(\"Meow\");\n-            self.meows += 1u;\n-            if self.meows % 5u == 0u {\n+            self.meows += 1_usize;\n+            if self.meows % 5_usize == 0_usize {\n                 self.how_hungry += 1;\n             }\n         }"}, {"sha": "dd272bf639b9723cb53da920f1c2502b250266ac", "filename": "src/test/auxiliary/cci_class_cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_class_cast.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -26,8 +26,8 @@ pub mod kitty {\n     impl cat {\n         fn meow(&mut self) {\n             println!(\"Meow\");\n-            self.meows += 1u;\n-            if self.meows % 5u == 0u {\n+            self.meows += 1_usize;\n+            if self.meows % 5_usize == 0_usize {\n                 self.how_hungry += 1;\n             }\n         }"}, {"sha": "6ee497370e8e33da19591b74937a8327ba3493fd", "filename": "src/test/auxiliary/cci_impl_lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_impl_lib.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -20,7 +20,7 @@ impl uint_helpers for uint {\n         let mut i = *self;\n         while i < v {\n             f(i);\n-            i += 1u;\n+            i += 1_usize;\n         }\n     }\n }"}, {"sha": "8e00b0dc7be74f444d5234084a323a4b2234160b", "filename": "src/test/auxiliary/cci_iter_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_iter_lib.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -12,10 +12,10 @@\n \n #[inline]\n pub fn iter<T, F>(v: &[T], mut f: F) where F: FnMut(&T) {\n-    let mut i = 0u;\n+    let mut i = 0_usize;\n     let n = v.len();\n     while i < n {\n         f(&v[i]);\n-        i += 1u;\n+        i += 1_usize;\n     }\n }"}, {"sha": "ce041118906ed9a2f9c174e454000d9248493648", "filename": "src/test/auxiliary/cci_no_inline_lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_no_inline_lib.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -13,10 +13,10 @@\n \n // same as cci_iter_lib, more-or-less, but not marked inline\n pub fn iter<F>(v: Vec<uint> , mut f: F) where F: FnMut(uint) {\n-    let mut i = 0u;\n+    let mut i = 0_usize;\n     let n = v.len();\n     while i < n {\n         f(v[i]);\n-        i += 1u;\n+        i += 1_usize;\n     }\n }"}, {"sha": "9c72cb1a6800ad7b25e62f098c2dafad4e4907cf", "filename": "src/test/auxiliary/macro_reexport_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fauxiliary%2Fmacro_reexport_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fauxiliary%2Fmacro_reexport_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_reexport_1.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -11,5 +11,5 @@\n #![crate_type = \"dylib\"]\n #[macro_export]\n macro_rules! reexported {\n-    () => ( 3u )\n+    () => ( 3_usize )\n }"}, {"sha": "e05aa16ba5fbb730f5c30f340f85579aed376e81", "filename": "src/test/auxiliary/roman_numerals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fauxiliary%2Froman_numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Froman_numerals.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -47,7 +47,7 @@ fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n     };\n \n     let mut text = &*text;\n-    let mut total = 0u;\n+    let mut total = 0_usize;\n     while !text.is_empty() {\n         match NUMERALS.iter().find(|&&(rn, _)| text.starts_with(rn)) {\n             Some(&(rn, val)) => {"}, {"sha": "a5178c03443f796bff07ebc61cdb2785bf974657", "filename": "src/test/auxiliary/unboxed-closures-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Funboxed-closures-cross-crate.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -14,9 +14,9 @@ use std::ops::Add;\n \n #[inline]\n pub fn has_closures() -> uint {\n-    let x = 1u;\n+    let x = 1_usize;\n     let mut f = move || x;\n-    let y = 1u;\n+    let y = 1_usize;\n     let g = || y;\n     f() + g()\n }"}, {"sha": "4c3b3f42acaa9470b77c294bd9525e8adcf878ab", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -75,7 +75,7 @@ fn read_line() {\n     let mut path = Path::new(env!(\"CFG_SRC_DIR\"));\n     path.push(\"src/test/bench/shootout-k-nucleotide.data\");\n \n-    for _ in 0u..3 {\n+    for _ in 0..3 {\n         let mut reader = BufferedReader::new(File::open(&path).unwrap());\n         for _line in reader.lines() {\n         }\n@@ -88,7 +88,7 @@ fn vec_plus() {\n     let mut v = Vec::new();\n     let mut i = 0;\n     while i < 1500 {\n-        let rv = repeat(i).take(r.gen_range(0u, i + 1)).collect::<Vec<_>>();\n+        let rv = repeat(i).take(r.gen_range(0, i + 1)).collect::<Vec<_>>();\n         if r.gen() {\n             v.extend(rv.into_iter());\n         } else {\n@@ -106,7 +106,7 @@ fn vec_append() {\n     let mut v = Vec::new();\n     let mut i = 0;\n     while i < 1500 {\n-        let rv = repeat(i).take(r.gen_range(0u, i + 1)).collect::<Vec<_>>();\n+        let rv = repeat(i).take(r.gen_range(0, i + 1)).collect::<Vec<_>>();\n         if r.gen() {\n             let mut t = v.clone();\n             t.push_all(&rv);\n@@ -125,8 +125,8 @@ fn vec_push_all() {\n     let mut r = rand::thread_rng();\n \n     let mut v = Vec::new();\n-    for i in 0u..1500 {\n-        let mut rv = repeat(i).take(r.gen_range(0u, i + 1)).collect::<Vec<_>>();\n+    for i in 0..1500 {\n+        let mut rv = repeat(i).take(r.gen_range(0, i + 1)).collect::<Vec<_>>();\n         if r.gen() {\n             v.push_all(&rv);\n         }\n@@ -139,7 +139,7 @@ fn vec_push_all() {\n \n fn is_utf8_ascii() {\n     let mut v : Vec<u8> = Vec::new();\n-    for _ in 0u..20000 {\n+    for _ in 0..20000 {\n         v.push('b' as u8);\n         if str::from_utf8(&v).is_err() {\n             panic!(\"from_utf8 panicked\");\n@@ -150,7 +150,7 @@ fn is_utf8_ascii() {\n fn is_utf8_multibyte() {\n     let s = \"b\u00a2\u20ac\ud852\udf62\";\n     let mut v : Vec<u8> = Vec::new();\n-    for _ in 0u..5000 {\n+    for _ in 0..5000 {\n         v.push_all(s.as_bytes());\n         if str::from_utf8(&v).is_err() {\n             panic!(\"from_utf8 panicked\");"}, {"sha": "287958f43fb8deee3a67f735b7ce081313136ebd", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -14,15 +14,15 @@ fn main() {\n     let args = env::args();\n     let args = if env::var_os(\"RUST_BENCH\").is_some() {\n         vec!(\"\".to_string(), \"10000000\".to_string())\n-    } else if args.len() <= 1u {\n+    } else if args.len() <= 1 {\n         vec!(\"\".to_string(), \"100000\".to_string())\n     } else {\n         args.collect()\n     };\n \n     let n = args[1].parse().unwrap();\n \n-    for i in 0u..n {\n+    for i in 0..n {\n         let x = i.to_string();\n         println!(\"{}\", x);\n     }"}, {"sha": "b8d8f0cc9e6a9511acb6c5c86681c586174316d0", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -32,7 +32,7 @@ enum request {\n }\n \n fn server(requests: &Receiver<request>, responses: &Sender<uint>) {\n-    let mut count = 0u;\n+    let mut count = 0;\n     let mut done = false;\n     while !done {\n         match requests.recv() {\n@@ -61,10 +61,10 @@ fn run(args: &[String]) {\n     let dur = Duration::span(|| {\n         let (to_child, to_parent, from_parent) = p.take().unwrap();\n         let mut worker_results = Vec::new();\n-        for _ in 0u..workers {\n+        for _ in 0..workers {\n             let to_child = to_child.clone();\n             worker_results.push(thread::spawn(move|| {\n-                for _ in 0u..size / workers {\n+                for _ in 0..size / workers {\n                     //println!(\"worker {}: sending {} bytes\", i, num_bytes);\n                     to_child.send(request::bytes(num_bytes)).unwrap();\n                 }"}, {"sha": "3642eb82fdb0517f4200f1b9c1676e7348380a91", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -57,7 +57,7 @@ fn run(args: &[String]) {\n         let from_parent = if workers == 1 {\n             let (to_child, from_parent) = channel();\n             worker_results.push(thread::spawn(move|| {\n-                for _ in 0u..size / workers {\n+                for _ in 0..size / workers {\n                     //println!(\"worker {}: sending {} bytes\", i, num_bytes);\n                     to_child.send(request::bytes(num_bytes));\n                 }\n@@ -66,10 +66,10 @@ fn run(args: &[String]) {\n             from_parent\n         } else {\n             let (to_child, from_parent) = channel();\n-            for _ in 0u..workers {\n+            for _ in 0..workers {\n                 let to_child = to_child.clone();\n                 worker_results.push(thread::spawn(move|| {\n-                    for _ in 0u..size / workers {\n+                    for _ in 0..size / workers {\n                         //println!(\"worker {}: sending {} bytes\", i, num_bytes);\n                         to_child.send(request::bytes(num_bytes));\n                     }"}, {"sha": "a980b7ed9e75d0d72446f04b633ccc8505a0bbfc", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -50,7 +50,7 @@ fn thread_ring(i: uint, count: uint, num_chan: pipe, num_port: pipe) {\n     let mut num_chan = Some(num_chan);\n     let mut num_port = Some(num_port);\n     // Send/Receive lots of messages.\n-    for j in 0u..count {\n+    for j in 0..count {\n         //println!(\"task %?, iter %?\", i, j);\n         let num_chan2 = num_chan.take().unwrap();\n         let num_port2 = num_port.take().unwrap();\n@@ -84,7 +84,7 @@ fn main() {\n         // create the ring\n         let mut futures = Vec::new();\n \n-        for i in 1u..num_tasks {\n+        for i in 1..num_tasks {\n             //println!(\"spawning %?\", i);\n             let (new_chan, num_port) = init();\n             let num_chan_2 = num_chan.clone();"}, {"sha": "53c52ae3019f015a11204a29d1132b145fb0b4de", "filename": "src/test/bench/noise.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fnoise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fnoise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fnoise.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -104,17 +104,17 @@ fn main() {\n     let mut pixels = [0f32; 256*256];\n     let n2d = Noise2DContext::new();\n \n-    for _ in 0u..100 {\n-        for y in 0u..256 {\n-            for x in 0u..256 {\n+    for _ in 0..100 {\n+        for y in 0..256 {\n+            for x in 0..256 {\n                 let v = n2d.get(x as f32 * 0.1, y as f32 * 0.1);\n                 pixels[y*256+x] = v * 0.5 + 0.5;\n             }\n         }\n     }\n \n-    for y in 0u..256 {\n-        for x in 0u..256 {\n+    for y in 0..256 {\n+        for x in 0..256 {\n             let idx = (pixels[y*256+x] / 0.2) as uint;\n             print!(\"{}\", symbols[idx]);\n         }"}, {"sha": "73e7c8eb073d1884d23be37a9c5de2fea9417489", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -233,7 +233,7 @@ fn main() {\n         std::env::args()\n                        .nth(1)\n                        .and_then(|arg| arg.parse().ok())\n-                       .unwrap_or(600us)\n+                       .unwrap_or(600)\n     };\n \n     print_complements();"}, {"sha": "3ea4a10ea8169f7d148f287b937d599616773f1a", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -77,7 +77,7 @@ fn sort_and_fmt(mm: &HashMap<Vec<u8> , uint>, total: uint) -> String {\n fn find(mm: &HashMap<Vec<u8> , uint>, key: String) -> uint {\n    let key = key.into_ascii_lowercase();\n    match mm.get(key.as_bytes()) {\n-      option::Option::None      => { return 0u; }\n+      option::Option::None      => { return 0; }\n       option::Option::Some(&num) => { return num; }\n    }\n }\n@@ -98,23 +98,23 @@ fn update_freq(mm: &mut HashMap<Vec<u8> , uint>, key: &[u8]) {\n fn windows_with_carry<F>(bb: &[u8], nn: uint, mut it: F) -> Vec<u8> where\n     F: FnMut(&[u8]),\n {\n-   let mut ii = 0u;\n+   let mut ii = 0;\n \n    let len = bb.len();\n-   while ii < len - (nn - 1u) {\n+   while ii < len - (nn - 1) {\n       it(&bb[ii..ii+nn]);\n-      ii += 1u;\n+      ii += 1;\n    }\n \n-   return bb[len - (nn - 1u)..len].to_vec();\n+   return bb[len - (nn - 1)..len].to_vec();\n }\n \n fn make_sequence_processor(sz: uint,\n                            from_parent: &Receiver<Vec<u8>>,\n                            to_parent: &Sender<String>) {\n    let mut freqs: HashMap<Vec<u8>, uint> = HashMap::new();\n    let mut carry = Vec::new();\n-   let mut total: uint = 0u;\n+   let mut total: uint = 0;\n \n    let mut line: Vec<u8>;\n \n@@ -126,20 +126,20 @@ fn make_sequence_processor(sz: uint,\n        carry.push_all(&line);\n        carry = windows_with_carry(&carry, sz, |window| {\n            update_freq(&mut freqs, window);\n-           total += 1u;\n+           total += 1;\n        });\n    }\n \n    let buffer = match sz {\n-       1u => { sort_and_fmt(&freqs, total) }\n-       2u => { sort_and_fmt(&freqs, total) }\n-       3u => { format!(\"{}\\t{}\", find(&freqs, \"GGT\".to_string()), \"GGT\") }\n-       4u => { format!(\"{}\\t{}\", find(&freqs, \"GGTA\".to_string()), \"GGTA\") }\n-       6u => { format!(\"{}\\t{}\", find(&freqs, \"GGTATT\".to_string()), \"GGTATT\") }\n-      12u => { format!(\"{}\\t{}\", find(&freqs, \"GGTATTTTAATT\".to_string()), \"GGTATTTTAATT\") }\n-      18u => { format!(\"{}\\t{}\", find(&freqs, \"GGTATTTTAATTTATAGT\".to_string()),\n+       1 => { sort_and_fmt(&freqs, total) }\n+       2 => { sort_and_fmt(&freqs, total) }\n+       3 => { format!(\"{}\\t{}\", find(&freqs, \"GGT\".to_string()), \"GGT\") }\n+       4 => { format!(\"{}\\t{}\", find(&freqs, \"GGTA\".to_string()), \"GGTA\") }\n+       6 => { format!(\"{}\\t{}\", find(&freqs, \"GGTATT\".to_string()), \"GGTATT\") }\n+      12 => { format!(\"{}\\t{}\", find(&freqs, \"GGTATTTTAATT\".to_string()), \"GGTATTTTAATT\") }\n+      18 => { format!(\"{}\\t{}\", find(&freqs, \"GGTATTTTAATTTATAGT\".to_string()),\n                        \"GGTATTTTAATTTATAGT\") }\n-        _ => { \"\".to_string() }\n+       _ => { \"\".to_string() }\n    };\n \n     to_parent.send(buffer).unwrap();\n@@ -158,7 +158,7 @@ fn main() {\n     let mut rdr = BufferedReader::new(rdr);\n \n     // initialize each sequence sorter\n-    let sizes = vec!(1u,2,3,4,6,12,18);\n+    let sizes: Vec<usize> = vec!(1,2,3,4,6,12,18);\n     let mut streams = (0..sizes.len()).map(|_| {\n         Some(channel::<String>())\n     }).collect::<Vec<_>>();\n@@ -177,7 +177,7 @@ fn main() {\n         });\n \n         to_child\n-    }).collect::<Vec<Sender<Vec<u8> >> >();\n+    }).collect::<Vec<Sender<Vec<u8>>>>();\n \n \n    // latch stores true after we've started\n@@ -187,7 +187,7 @@ fn main() {\n    for line in rdr.lines() {\n        let line = line.unwrap().trim().to_string();\n \n-       if line.len() == 0u { continue; }\n+       if line.len() == 0 { continue; }\n \n        match (line.as_bytes()[0] as char, proc_mode) {\n "}, {"sha": "fb75c67253c6d057d37e962e80d9e5fe7ad03910", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -301,7 +301,7 @@ fn main() {\n     };\n     let input = Arc::new(input);\n \n-    let nb_freqs: Vec<_> = (1u..3).map(|i| {\n+    let nb_freqs: Vec<_> = (1..3).map(|i| {\n         let input = input.clone();\n         (i, thread::scoped(move|| generate_frequencies(&input, i)))\n     }).collect();"}, {"sha": "73dce2910c9b4913260e26cb02ed235f19a04c50", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -222,7 +222,7 @@ fn to_vec(raw_sol: &List<u64>) -> Vec<u8> {\n     let mut sol = repeat('.' as u8).take(50).collect::<Vec<_>>();\n     for &m in raw_sol.iter() {\n         let id = '0' as u8 + get_id(m);\n-        for i in 0us..50 {\n+        for i in 0..50 {\n             if m & 1 << i != 0 {\n                 sol[i] = id;\n             }\n@@ -297,7 +297,7 @@ fn search(\n     let masks_at = &masks[i];\n \n     // for every unused piece\n-    for id in (0us..10).filter(|&id| board & (1 << (id + 50)) == 0) {\n+    for id in (0..10).filter(|&id| board & (1 << (id + 50)) == 0) {\n         // for each mask that fits on the board\n         for m in masks_at[id].iter().filter(|&m| board & *m == 0) {\n             // This check is too costly."}, {"sha": "f7514a3e8848d16788fc26152f6409f82010fc88", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -69,7 +69,7 @@ fn spectralnorm(n: uint) -> f64 {\n     let mut u = repeat(1.0).take(n).collect::<Vec<_>>();\n     let mut v = u.clone();\n     let mut tmp = v.clone();\n-    for _ in 0u..10 {\n+    for _ in 0..10 {\n         mult_AtAv(&u, &mut v, &mut tmp);\n         mult_AtAv(&v, &mut u, &mut tmp);\n     }"}, {"sha": "b45f241e8e5d4291a7d72df40faf1535ac2d3090", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -49,8 +49,8 @@ impl Sudoku {\n     }\n \n     pub fn from_vec(vec: &[[u8;9];9]) -> Sudoku {\n-        let g = (0..9u).map(|i| {\n-            (0..9u).map(|j| { vec[i][j] }).collect()\n+        let g = (0..9).map(|i| {\n+            (0..9).map(|j| { vec[i][j] }).collect()\n         }).collect();\n         return Sudoku::new(g)\n     }\n@@ -68,7 +68,7 @@ impl Sudoku {\n                                        .split(',')\n                                        .collect();\n \n-            if comps.len() == 3u {\n+            if comps.len() == 3 {\n                 let row = comps[0].parse::<u8>().unwrap();\n                 let col = comps[1].parse::<u8>().unwrap();\n                 g[row as uint][col as uint] = comps[2].parse().unwrap();\n@@ -102,7 +102,7 @@ impl Sudoku {\n             }\n         }\n \n-        let mut ptr = 0u;\n+        let mut ptr = 0;\n         let end = work.len();\n         while ptr < end {\n             let (row, col) = work[ptr];\n@@ -111,11 +111,11 @@ impl Sudoku {\n                                 (1 as u8);\n             if self.next_color(row, col, the_color) {\n                 //  yes: advance work list\n-                ptr = ptr + 1u;\n+                ptr = ptr + 1;\n             } else {\n                 // no: redo this field aft recoloring pred; unless there is none\n-                if ptr == 0u { panic!(\"No solution found for this sudoku\"); }\n-                ptr = ptr - 1u;\n+                if ptr == 0 { panic!(\"No solution found for this sudoku\"); }\n+                ptr = ptr - 1;\n             }\n         }\n     }"}, {"sha": "b5aa8e8d791d22003eb1bc1d695bf172e3e228c7", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -12,10 +12,10 @@ use std::env;\n use std::thread;\n \n fn f(n: usize) {\n-    let mut i = 0u;\n+    let mut i = 0;\n     while i < n {\n         let _ = thread::spawn(move|| g()).join();\n-        i += 1u;\n+        i += 1;\n     }\n }\n "}, {"sha": "9b696e05c50df27f5f7c62b341aa113d83ba565b", "filename": "src/test/compile-fail-fulldeps/issue-18986.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-18986.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-18986.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fissue-18986.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,6 +15,6 @@ pub use use_from_trait_xc::Trait;\n \n fn main() {\n     match () {\n-        Trait { x: 42us } => () //~ ERROR use of trait `Trait` in a struct pattern\n+        Trait { x: 42_usize } => () //~ ERROR use of trait `Trait` in a struct pattern\n     }\n }"}, {"sha": "01481af817b7e5caa4bc303c4b1742a1db947603", "filename": "src/test/compile-fail/asm-in-bad-modifier.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -20,8 +20,8 @@ pub fn main() {\n     let x: isize;\n     let y: isize;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5us)); //~ ERROR input operand constraint contains '='\n-        asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5us)); //~ ERROR input operand constraint contains '+'\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"=r\"(5_usize)); //~ ERROR operand constraint contains '='\n+        asm!(\"mov $1, $0\" : \"=r\"(y) : \"+r\"(5_usize)); //~ ERROR operand constraint contains '+'\n     }\n     foo(x);\n     foo(y);"}, {"sha": "02d06c4e1bf806adc18ac37dee7f3a2a10192405", "filename": "src/test/compile-fail/asm-misplaced-option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -21,14 +21,14 @@ pub fn main() {\n     let mut x: isize = 0;\n     unsafe {\n         // extra colon\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5us), \"0\"(x) : : \"cc\");\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize), \"0\"(x) : : \"cc\");\n         //~^ WARNING unrecognized option\n     }\n     assert_eq!(x, 5);\n \n     unsafe {\n         // comma in place of a colon\n-        asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8us) : \"cc\", \"volatile\");\n+        asm!(\"add $2, $1; mov $1, $0\" : \"=r\"(x) : \"r\"(x), \"r\"(8_usize) : \"cc\", \"volatile\");\n         //~^ WARNING expected a clobber, found an option\n     }\n     assert_eq!(x, 13);"}, {"sha": "ff56fb14f7d5753cc2b42845b0fe60482dfcf481", "filename": "src/test/compile-fail/asm-out-assign-imm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -21,7 +21,8 @@ pub fn main() {\n     x = 1; //~ NOTE prior assignment occurs here\n     foo(x);\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5us)); //~ ERROR re-assignment of immutable variable `x`\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize));\n+        //~^ ERROR re-assignment of immutable variable `x`\n     }\n     foo(x);\n }"}, {"sha": "17c19c77ab9abd6ebe988e00b0b72132ef849870", "filename": "src/test/compile-fail/asm-out-no-modifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -19,7 +19,7 @@ fn foo(x: isize) { println!(\"{}\", x); }\n pub fn main() {\n     let x: isize;\n     unsafe {\n-        asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5us)); //~ ERROR output operand constraint lacks '='\n+        asm!(\"mov $1, $0\" : \"r\"(x) : \"r\"(5_usize)); //~ ERROR output operand constraint lacks '='\n     }\n     foo(x);\n }"}, {"sha": "d32ea327d0a8cfceeaec66c6cecffeee40de157a", "filename": "src/test/compile-fail/assign-to-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassign-to-method.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,7 +15,7 @@ struct cat {\n }\n \n impl cat {\n-    pub fn speak(&self) { self.meows += 1us; }\n+    pub fn speak(&self) { self.meows += 1_usize; }\n }\n \n fn cat(in_x : usize, in_y : isize) -> cat {\n@@ -26,6 +26,6 @@ fn cat(in_x : usize, in_y : isize) -> cat {\n }\n \n fn main() {\n-  let nyan : cat = cat(52us, 99);\n+  let nyan : cat = cat(52_usize, 99);\n   nyan.speak = || println!(\"meow\"); //~ ERROR attempted to take value of method\n }"}, {"sha": "b4a90e35c40f105ff9adfbcdf3c560cf147010ef", "filename": "src/test/compile-fail/attr-before-let.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fattr-before-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fattr-before-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-before-let.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     #[attr] //~ ERROR expected item\n-    let _i = 0;\n+    let __isize = 0;\n }"}, {"sha": "58a8314af211cd581dd2666a0d07f53d2d641614", "filename": "src/test/compile-fail/bad-bang-ann-3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann-3.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -11,7 +11,7 @@\n // Tests that a function with a ! annotation always actually fails\n \n fn bad_bang(i: usize) -> ! {\n-    return 7us; //~ ERROR `return` in a function declared as diverging [E0166]\n+    return 7_usize; //~ ERROR `return` in a function declared as diverging [E0166]\n }\n \n-fn main() { bad_bang(5us); }\n+fn main() { bad_bang(5); }"}, {"sha": "03c24c2fa3d3e2f15d8eea4caf1f18afaf7fd895", "filename": "src/test/compile-fail/bad-bang-ann.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-bang-ann.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -11,7 +11,7 @@\n // Tests that a function with a ! annotation always actually fails\n \n fn bad_bang(i: usize) -> ! { //~ ERROR computation may converge in a function marked as diverging\n-    if i < 0us { } else { panic!(); }\n+    if i < 0_usize { } else { panic!(); }\n }\n \n-fn main() { bad_bang(5us); }\n+fn main() { bad_bang(5); }"}, {"sha": "a97cf5d41e809493b774a9fef6f1da5abae75c6c", "filename": "src/test/compile-fail/bad-method-typaram-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-method-typaram-kind.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo<T:'static>() {\n-    1us.bar::<T>(); //~ ERROR `core::marker::Send` is not implemented\n+    1_usize.bar::<T>(); //~ ERROR `core::marker::Send` is not implemented\n }\n \n trait bar {"}, {"sha": "a82aa12dc80c27543b775b21636fbc55e1472717", "filename": "src/test/compile-fail/borrow-immutable-upvar-mutation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrow-immutable-upvar-mutation.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -21,25 +21,25 @@ fn to_fn_mut<A,F:FnMut<A>>(f: F) -> F { f }\n fn main() {\n     // By-ref captures\n     {\n-        let mut x = 0us;\n+        let mut x = 0_usize;\n         let _f = to_fn(|| x = 42); //~ ERROR cannot assign\n \n-        let mut y = 0us;\n+        let mut y = 0_usize;\n         let _g = to_fn(|| set(&mut y)); //~ ERROR cannot borrow\n \n-        let mut z = 0us;\n+        let mut z = 0_usize;\n         let _h = to_fn_mut(|| { set(&mut z); to_fn(|| z = 42); }); //~ ERROR cannot assign\n     }\n \n     // By-value captures\n     {\n-        let mut x = 0us;\n+        let mut x = 0_usize;\n         let _f = to_fn(move || x = 42); //~ ERROR cannot assign\n \n-        let mut y = 0us;\n+        let mut y = 0_usize;\n         let _g = to_fn(move || set(&mut y)); //~ ERROR cannot borrow\n \n-        let mut z = 0us;\n+        let mut z = 0_usize;\n         let _h = to_fn_mut(move || { set(&mut z); to_fn(move || z = 42); }); //~ ERROR cannot assign\n     }\n }"}, {"sha": "dd278faa0dc6a7829dd52b5985dec47b2b0c601e", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-auto-deref-mut.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -56,15 +56,15 @@ impl Point {\n }\n \n fn deref_imm_field(x: Own<Point>) {\n-    let _i = &x.y;\n+    let __isize = &x.y;\n }\n \n fn deref_mut_field1(x: Own<Point>) {\n-    let _i = &mut x.y; //~ ERROR cannot borrow\n+    let __isize = &mut x.y; //~ ERROR cannot borrow\n }\n \n fn deref_mut_field2(mut x: Own<Point>) {\n-    let _i = &mut x.y;\n+    let __isize = &mut x.y;\n }\n \n fn deref_extend_field(x: &Own<Point>) -> &isize {\n@@ -114,7 +114,7 @@ fn assign_field4<'a>(x: &'a mut Own<Point>) {\n // FIXME(eddyb) #12825 This shouldn't attempt to call deref_mut.\n /*\n fn deref_imm_method(x: Own<Point>) {\n-    let _i = x.get();\n+    let __isize = x.get();\n }\n */\n "}, {"sha": "693ed29bd0506c9071cb0b4d0326abb324d3fd69", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-auto-deref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -50,15 +50,15 @@ impl Point {\n }\n \n fn deref_imm_field(x: Rc<Point>) {\n-    let _i = &x.y;\n+    let __isize = &x.y;\n }\n \n fn deref_mut_field1(x: Rc<Point>) {\n-    let _i = &mut x.y; //~ ERROR cannot borrow\n+    let __isize = &mut x.y; //~ ERROR cannot borrow\n }\n \n fn deref_mut_field2(mut x: Rc<Point>) {\n-    let _i = &mut x.y; //~ ERROR cannot borrow\n+    let __isize = &mut x.y; //~ ERROR cannot borrow\n }\n \n fn deref_extend_field(x: &Rc<Point>) -> &isize {\n@@ -86,7 +86,7 @@ fn assign_field3<'a>(x: &'a mut Rc<Point>) {\n }\n \n fn deref_imm_method(x: Rc<Point>) {\n-    let _i = x.get();\n+    let __isize = x.get();\n }\n \n fn deref_mut_method1(x: Rc<Point>) {"}, {"sha": "34b926aab1fa0d88a778a543c5a85db42360551d", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-deref-mut.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -32,15 +32,15 @@ impl<T> DerefMut for Own<T> {\n }\n \n fn deref_imm(x: Own<isize>) {\n-    let _i = &*x;\n+    let __isize = &*x;\n }\n \n fn deref_mut1(x: Own<isize>) {\n-    let _i = &mut *x; //~ ERROR cannot borrow\n+    let __isize = &mut *x; //~ ERROR cannot borrow\n }\n \n fn deref_mut2(mut x: Own<isize>) {\n-    let _i = &mut *x;\n+    let __isize = &mut *x;\n }\n \n fn deref_extend<'a>(x: &'a Own<isize>) -> &'a isize {"}, {"sha": "5b916243b9ee52d24c663649262f8ef24dbdfc91", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-deref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -26,15 +26,15 @@ impl<T> Deref for Rc<T> {\n }\n \n fn deref_imm(x: Rc<isize>) {\n-    let _i = &*x;\n+    let __isize = &*x;\n }\n \n fn deref_mut1(x: Rc<isize>) {\n-    let _i = &mut *x; //~ ERROR cannot borrow\n+    let __isize = &mut *x; //~ ERROR cannot borrow\n }\n \n fn deref_mut2(mut x: Rc<isize>) {\n-    let _i = &mut *x; //~ ERROR cannot borrow\n+    let __isize = &mut *x; //~ ERROR cannot borrow\n }\n \n fn deref_extend<'a>(x: &'a Rc<isize>) -> &'a isize {"}, {"sha": "01a649ae2475d7f2cf0eecaf6ed31636ab0b5cad", "filename": "src/test/compile-fail/borrowck-for-loop-head-linkage.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-head-linkage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-head-linkage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-for-loop-head-linkage.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -11,11 +11,11 @@\n use std::iter::repeat;\n \n fn main() {\n-    let mut vector = vec![1us, 2];\n+    let mut vector = vec![1, 2];\n     for &x in &vector {\n         let cap = vector.capacity();\n         vector.extend(repeat(0));      //~ ERROR cannot borrow\n-        vector[1us] = 5us;   //~ ERROR cannot borrow\n+        vector[1] = 5;   //~ ERROR cannot borrow\n     }\n }\n "}, {"sha": "f24e82d11c5edc831869d100159775c914d704f9", "filename": "src/test/compile-fail/borrowck-lend-flow-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -21,7 +21,7 @@ fn separate_arms() {\n             // fact no outstanding loan of x!\n             x = Some(0);\n         }\n-        Some(ref _i) => {\n+        Some(ref __isize) => {\n             x = Some(1); //~ ERROR cannot assign\n         }\n     }"}, {"sha": "216373707241efe7318e41825a6079c0c22eff6a", "filename": "src/test/compile-fail/borrowck-report-with-custom-diagnostic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -11,7 +11,7 @@\n #![allow(dead_code)]\n fn main() {\n     // Original borrow ends at end of function\n-    let mut x = 1us;\n+    let mut x = 1_usize;\n     let y = &mut x;\n     let z = &x; //~ ERROR cannot borrow\n }\n@@ -21,7 +21,7 @@ fn foo() {\n     match true {\n         true => {\n             // Original borrow ends at end of match arm\n-            let mut x = 1us;\n+            let mut x = 1_usize;\n             let y = &x;\n             let z = &mut x; //~ ERROR cannot borrow\n         }\n@@ -33,7 +33,7 @@ fn foo() {\n fn bar() {\n     // Original borrow ends at end of closure\n     || {\n-        let mut x = 1us;\n+        let mut x = 1_usize;\n         let y = &mut x;\n         let z = &mut x; //~ ERROR cannot borrow\n     };"}, {"sha": "ada45e8c1fc8b1528803fd00c5ab35f58266a4d8", "filename": "src/test/compile-fail/class-method-missing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-method-missing.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -27,5 +27,5 @@ fn cat(in_x : usize) -> cat {\n }\n \n fn main() {\n-  let nyan = cat(0us);\n+  let nyan = cat(0_usize);\n }"}, {"sha": "f25b2e65388ee190801e27ce09f55646d6f9be46", "filename": "src/test/compile-fail/class-missing-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fclass-missing-self.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -16,7 +16,7 @@ impl cat {\n     fn sleep(&self) { loop{} }\n     fn meow(&self) {\n       println!(\"Meow\");\n-      meows += 1us; //~ ERROR unresolved name\n+      meows += 1_usize; //~ ERROR unresolved name\n       sleep();     //~ ERROR unresolved name\n     }\n "}, {"sha": "fa63b16afa6d0835e459e555b3d325efc12d36f8", "filename": "src/test/compile-fail/const-block-non-item-statement.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-const A: usize = { 1us; 2 };\n+const A: usize = { 1_usize; 2 };\n //~^ ERROR: blocks in constants are limited to items and tail expressions\n \n const B: usize = { { } 2 };\n@@ -19,7 +19,7 @@ macro_rules! foo {\n }\n const C: usize = { foo!(); 2 };\n \n-const D: usize = { let x = 4us; 2 };\n+const D: usize = { let x = 4_usize; 2 };\n //~^ ERROR: blocks in constants are limited to items and tail expressions\n \n pub fn main() {"}, {"sha": "966e28a789cc88e7a99fba06719c2a34c33b9017", "filename": "src/test/compile-fail/deriving-non-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -22,10 +22,10 @@ impl S { }\n impl T for S { }\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n-static s: usize = 0us;\n+static s: usize = 0_usize;\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n-const c: usize = 0us;\n+const c: usize = 0_usize;\n \n #[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n mod m { }"}, {"sha": "948e485ccf5148effb18b51c60ee5f2f08f2c3dc", "filename": "src/test/compile-fail/feature-gate-int-uint.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-int-uint.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -8,15 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(dead_code)]\n+#![allow(dead_code, unused_variables)]\n+#![feature(rustc_attrs)]\n \n mod u {\n     type X = uint; //~ WARN the `uint` type is deprecated\n     struct Foo {\n         x: uint //~ WARN the `uint` type is deprecated\n     }\n     fn bar(x: uint) { //~ WARN the `uint` type is deprecated\n-        1u; //~ WARN the `u` suffix on integers is deprecated\n+        1_u; //~ WARN the `u` and `us` suffixes on integers are deprecated\n+        1_us; //~ WARN the `u` and `us` suffixes on integers are deprecated\n     }\n }\n mod i {\n@@ -25,11 +27,11 @@ mod i {\n         x: int //~ WARN the `int` type is deprecated\n     }\n     fn bar(x: int) { //~ WARN the `int` type is deprecated\n-        1i; //~ WARN the `i` suffix on integers is deprecated\n+        1_i; //~ WARN the `i` and `is` suffixes on integers are deprecated\n+        1_is; //~ WARN the `i` and `is` suffixes on integers are deprecated\n     }\n }\n \n-fn main() {\n-    // make compilation fail, after feature gating\n-    let () = 1u8; //~ ERROR\n+#[rustc_error]\n+fn main() { //~ ERROR compilation successful\n }"}, {"sha": "f38172db4447b58ae06dcd7a694877079348486f", "filename": "src/test/compile-fail/import-glob-circular.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -13,13 +13,13 @@\n mod circ1 {\n     pub use circ2::f2;\n     pub fn f1() { println!(\"f1\"); }\n-    pub fn common() -> usize { return 0us; }\n+    pub fn common() -> usize { return 0_usize; }\n }\n \n mod circ2 {\n     pub use circ1::f1;\n     pub fn f2() { println!(\"f2\"); }\n-    pub fn common() -> usize { return 1us; }\n+    pub fn common() -> usize { return 1_usize; }\n }\n \n mod test {"}, {"sha": "b28f2a746fdc40c5d64345bef176d52d33ef0e53", "filename": "src/test/compile-fail/index-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Findex-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Findex-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Findex-bot.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n fn main() {\n-    (return)[0us]; //~ ERROR the type of this value must be known in this context\n+    (return)[0_usize]; //~ ERROR the type of this value must be known in this context\n }"}, {"sha": "2642ac6204ce4d8490f021c563994e7dd52c3b58", "filename": "src/test/compile-fail/infinite-instantiation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-instantiation.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -28,11 +28,11 @@ impl<T:Clone> to_opt for Option<T> {\n }\n \n fn function<T:to_opt + Clone>(counter: usize, t: T) {\n-    if counter > 0us {\n-        function(counter - 1us, t.to_option());\n+    if counter > 0_usize {\n+        function(counter - 1_usize, t.to_option());\n     }\n }\n \n fn main() {\n-    function(22us, 22us);\n+    function(22_usize, 22_usize);\n }"}, {"sha": "e8998dd7a9d48c54f50c97723638ba8ebd0016e2", "filename": "src/test/compile-fail/integral-indexing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fintegral-indexing.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -11,7 +11,7 @@\n pub fn main() {\n     let v: Vec<isize> = vec!(0, 1, 2, 3, 4, 5);\n     let s: String = \"abcdef\".to_string();\n-    v[3us];\n+    v[3_usize];\n     v[3];\n     v[3u8];  //~ERROR the trait `core::ops::Index<u8>` is not implemented\n     //~^ ERROR the trait `core::ops::Index<u8>` is not implemented\n@@ -21,7 +21,7 @@ pub fn main() {\n     //~^ ERROR the trait `core::ops::Index<u32>` is not implemented\n     v[3i32]; //~ERROR the trait `core::ops::Index<i32>` is not implemented\n     //~^ ERROR the trait `core::ops::Index<i32>` is not implemented\n-    s.as_bytes()[3us];\n+    s.as_bytes()[3_usize];\n     s.as_bytes()[3];\n     s.as_bytes()[3u8];  //~ERROR the trait `core::ops::Index<u8>` is not implemented\n     //~^ERROR the trait `core::ops::Index<u8>` is not implemented"}, {"sha": "06f14158b91577f7b4219f5b2bcc767e231fc511", "filename": "src/test/compile-fail/issue-13058.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13058.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -34,7 +34,7 @@ fn check<'r, I: Iterator<Item=usize>, T: Itble<'r, usize, I>>(cont: &T) -> bool\n }\n \n fn main() {\n-    check((3us, 5us));\n+    check((3_usize, 5_usize));\n //~^ ERROR mismatched types\n //~| expected `&_`\n //~| found `(usize, usize)`"}, {"sha": "16128e52d64d1d9804e481c89269cf444541e8bc", "filename": "src/test/compile-fail/issue-13466.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-13466.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -14,7 +14,7 @@ pub fn main() {\n     // The expected arm type `Option<T>` has one type parameter, while\n     // the actual arm `Result<T, E>` has two. typeck should not be\n     // tricked into looking up a non-existing second type parameter.\n-    let _x: usize = match Some(1us) {\n+    let _x: usize = match Some(1_usize) {\n         Ok(u) => u,\n         //~^ ERROR mismatched types\n         //~| expected `core::option::Option<usize>`"}, {"sha": "65731379094a9d1002508944b0d734c07dc9556a", "filename": "src/test/compile-fail/issue-17283.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17283.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -16,7 +16,7 @@ struct Foo {\n }\n \n fn main() {\n-    let x = 1us;\n+    let x = 1_usize;\n     let y: Foo;\n \n     // `x { ... }` should not be interpreted as a struct literal here"}, {"sha": "321b8b260daa9c6c04d2285889b108cce1c08dba", "filename": "src/test/compile-fail/issue-17441.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17441.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -11,16 +11,16 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let _foo = &[1us, 2] as [usize];\n+    let _foo = &[1_usize, 2] as [usize];\n     //~^ ERROR cast to unsized type: `&[usize; 2]` as `[usize]`\n     //~^^ HELP consider using an implicit coercion to `&[usize]` instead\n-    let _bar = box 1us as std::fmt::Show;\n+    let _bar = box 1_usize as std::fmt::Show;\n     //~^ ERROR cast to unsized type: `Box<usize>` as `core::fmt::Show`\n     //~^^ HELP did you mean `Box<core::fmt::Show>`?\n-    let _baz = 1us as std::fmt::Show;\n+    let _baz = 1_usize as std::fmt::Show;\n     //~^ ERROR cast to unsized type: `usize` as `core::fmt::Show`\n     //~^^ HELP consider using a box or reference as appropriate\n-    let _quux = [1us, 2] as [usize];\n+    let _quux = [1_usize, 2] as [usize];\n     //~^ ERROR cast to unsized type: `[usize; 2]` as `[usize]`\n     //~^^ HELP consider using a box or reference as appropriate\n }"}, {"sha": "172f37af834400ba766388c9a2c8a54b4d8b779d", "filename": "src/test/compile-fail/issue-17651.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17651.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -14,7 +14,7 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    (|| box *[0us].as_slice())();\n+    (|| box *[0_usize].as_slice())();\n     //~^ ERROR cannot move out of borrowed content\n     //~^^ ERROR cannot move a value of type [usize]\n }"}, {"sha": "b7f58791bfcc8d32a6968938c8b5222beaccc1db", "filename": "src/test/compile-fail/issue-17718-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-17718-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-17718-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17718-patterns.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -13,7 +13,7 @@ static mut A2: usize = 1;\n const A3: usize = 1;\n \n fn main() {\n-    match 1us {\n+    match 1_usize {\n         A1 => {} //~ ERROR: static variables cannot be referenced in a pattern\n         A2 => {} //~ ERROR: static variables cannot be referenced in a pattern\n         A3 => {}"}, {"sha": "8035cffabda9717aa51317533ca9ac4b19944c0c", "filename": "src/test/compile-fail/issue-17913.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17913.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,14 +15,14 @@\n \n #[cfg(target_pointer_width = \"64\")]\n fn main() {\n-    let n = 0us;\n-    let a = box [&n; 0xF000000000000000us];\n-    println!(\"{}\", a[0xFFFFFFu]);\n+    let n = 0_usize;\n+    let a = box [&n; 0xF000000000000000_usize];\n+    println!(\"{}\", a[0xFFFFFF_usize]);\n }\n \n #[cfg(target_pointer_width = \"32\")]\n fn main() {\n-    let n = 0us;\n-    let a = box [&n; 0xFFFFFFFFu];\n-    println!(\"{}\", a[0xFFFFFFu]);\n+    let n = 0_usize;\n+    let a = box [&n; 0xFFFFFFFF_usize];\n+    println!(\"{}\", a[0xFFFFFF_usize]);\n }"}, {"sha": "bd0474084981f1164d795c996d9865c9c05f9499", "filename": "src/test/compile-fail/issue-17933.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-17933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-17933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17933.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub static X: usize = 1us;\n+pub static X: usize = 1_usize;\n \n fn main() {\n-    match 1us {\n+    match 1_usize {\n         self::X => { },\n         //~^ ERROR static variables cannot be referenced in a pattern, use a `const` instead\n         _       => { },"}, {"sha": "f6da2fc82c34dc52a23733f25b849fb04a14275a", "filename": "src/test/compile-fail/issue-1802-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-1802-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-1802-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1802-2.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -10,5 +10,5 @@\n \n // error-pattern:no valid digits found for number\n fn main() {\n-    log(error, 0bu);\n+    log(error, 0b_usize);\n }"}, {"sha": "91689988f583ddc3337dfcb77f20133e60a12479", "filename": "src/test/compile-fail/issue-18107.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18107.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -16,7 +16,7 @@ fn _create_render(_: &()) ->\n     AbstractRenderer\n //~^ ERROR: the trait `core::marker::Sized` is not implemented\n {\n-    match 0us {\n+    match 0_usize {\n         _ => unimplemented!()\n     }\n }"}, {"sha": "54c51405bd73f8ad7f13068a7441b541fe189463", "filename": "src/test/compile-fail/issue-18252.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18252.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -13,5 +13,5 @@ enum Foo {\n }\n \n fn main() {\n-    let f = Foo::Variant(42us); //~ ERROR uses it like a function\n+    let f = Foo::Variant(42_usize); //~ ERROR uses it like a function\n }"}, {"sha": "dd3844b1a0ef07bae34d0d8d7e60fc1f3aba007c", "filename": "src/test/compile-fail/issue-18566.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -28,7 +28,7 @@ impl Tr for usize {\n }\n \n fn main() {\n-    let s = &mut 1us;\n+    let s = &mut 1_usize;\n \n     MyPtr(s).poke(s);\n     //~^ ERROR cannot borrow `*s` as mutable more than once at a time"}, {"sha": "5ddf06add9d3e280656d55bf6bebc21b4069c9b2", "filename": "src/test/compile-fail/issue-18783.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18783.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -13,15 +13,15 @@\n use std::cell::RefCell;\n \n fn main() {\n-    let mut y = 1us;\n+    let mut y = 1_usize;\n     let c = RefCell::new(vec![]);\n     c.push(box || y = 0);\n     c.push(box || y = 0);\n //~^ ERROR cannot borrow `y` as mutable more than once at a time\n }\n \n fn ufcs() {\n-    let mut y = 1us;\n+    let mut y = 1_usize;\n     let c = RefCell::new(vec![]);\n \n     Push::push(&c, box || y = 0);"}, {"sha": "368f3c16f5188c47debf096ae1caedd17426be68", "filename": "src/test/compile-fail/issue-18959.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18959.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -17,7 +17,7 @@ impl Foo for Thing {\n     fn foo<T>(&self, _: &T) {}\n }\n \n-#[inline(never)] fn foo(b: &Bar) { b.foo(&0us) }\n+#[inline(never)] fn foo(b: &Bar) { b.foo(&0_usize) }\n \n fn main() {\n     let mut thing = Thing;"}, {"sha": "505885e6c41f9bdf7f3d309b79684c1ee44cf57d", "filename": "src/test/compile-fail/issue-2150.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,7 +15,7 @@\n fn fail_len(v: Vec<isize> ) -> usize {\n     let mut i = 3;\n     panic!();\n-    for x in &v { i += 1us; }\n+    for x in &v { i += 1_usize; }\n     //~^ ERROR: unreachable statement\n     return i;\n }"}, {"sha": "6d4777be40b640829dd9bff83ec5c5d1a285b9a0", "filename": "src/test/compile-fail/issue-4517.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4517.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -11,7 +11,7 @@\n fn bar(int_param: usize) {}\n \n fn main() {\n-    let foo: [u8; 4] = [1u8; 4us];\n+    let foo: [u8; 4] = [1u8; 4_usize];\n     bar(foo);\n     //~^ ERROR mismatched types\n     //~| expected `usize`"}, {"sha": "95a4f36d1711cd5d331dadd0fb77b6c802cf5e0e", "filename": "src/test/compile-fail/issue-5544-a.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-5544-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-5544-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5544-a.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    let _i = 18446744073709551616; // 2^64\n+    let __isize = 18446744073709551616; // 2^64\n     //~^ ERROR int literal is too large\n }"}, {"sha": "afff5984b46141d61f0c9b3de054473b83bd0657", "filename": "src/test/compile-fail/issue-5544-b.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-5544-b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-5544-b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5544-b.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    let _i = 0xff_ffff_ffff_ffff_ffff_is;\n+    let __isize = 0xff_ffff_ffff_ffff_ffff__isize;\n     //~^ ERROR int literal is too large\n }"}, {"sha": "9e6000c050a5145d89094f38ddf1bfd6a74374bc", "filename": "src/test/compile-fail/issue-7575.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7575.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -30,17 +30,17 @@ trait UnusedTrait {\n \n impl CtxtFn for usize {\n     fn f8(self, i: usize) -> usize {\n-        i * 4us\n+        i * 4_usize\n     }\n \n     fn f9(i: usize) -> usize {\n-        i * 4us\n+        i * 4_usize\n     }\n }\n \n impl OtherTrait for usize {\n     fn f9(i: usize) -> usize {\n-        i * 8us\n+        i * 8_usize\n     }\n }\n "}, {"sha": "954ae8ebc48dd87df4dff656dee302492a309e1c", "filename": "src/test/compile-fail/issue-8460-const.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8460-const.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -22,7 +22,7 @@ fn main() {\n     //~^ ERROR attempted to divide with overflow in a constant expression\n     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n     //~^ ERROR attempted to divide with overflow in a constant expression\n-    assert!(thread::spawn(move|| { 1is / 0; }).join().is_err());\n+    assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n     //~^ ERROR attempted to divide by zero in a constant expression\n     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n     //~^ ERROR attempted to divide by zero in a constant expression\n@@ -42,7 +42,7 @@ fn main() {\n     //~^ ERROR attempted remainder with overflow in a constant expression\n     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n     //~^ ERROR attempted remainder with overflow in a constant expression\n-    assert!(thread::spawn(move|| { 1is % 0; }).join().is_err());\n+    assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n     //~^ ERROR attempted remainder with a divisor of zero in a constant expression\n     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n     //~^ ERROR attempted remainder with a divisor of zero in a constant expression"}, {"sha": "52cf420a9ffdac248b7ef80266aa0a52f00b0ced", "filename": "src/test/compile-fail/issue-8537.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-8537.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fissue-8537.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8537.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub extern\n-  \"invalid-abi\" //~ ERROR illegal ABI\n+  \"invalid-ab_isize\" //~ ERROR illegal ABI\n fn foo() {}\n \n fn main() {}"}, {"sha": "e6041cddeadb58adb75ac51e95abb70d7faf5352", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -16,7 +16,7 @@ fn foo(_x: Rc<usize>) {}\n fn bar<F:FnOnce() + Send>(_: F) { }\n \n fn main() {\n-    let x = Rc::new(3us);\n+    let x = Rc::new(3_usize);\n     bar(move|| foo(x));\n     //~^ ERROR `core::marker::Send` is not implemented\n }"}, {"sha": "f304c26efb5417fccc7b3c60124e18059390bb8e", "filename": "src/test/compile-fail/lint-dead-code-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-4.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -63,6 +63,6 @@ fn field_match_in_let(f: Bar) -> bool {\n fn main() {\n     field_read(Foo { x: 1, b: false, marker: std::marker::NoCopy });\n     field_match_in_patterns(XYZ::Z);\n-    field_match_in_let(Bar { x: 42us, b: true, _guard: () });\n+    field_match_in_let(Bar { x: 42_usize, b: true, _guard: () });\n     let _ = Baz { x: 0 };\n }"}, {"sha": "345e56e2e5800a6cb776ee1481e84cfcd1a090bb", "filename": "src/test/compile-fail/lint-exceeding-bitshifts.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-exceeding-bitshifts.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -57,7 +57,7 @@ fn main() {\n       let n = 1u8 << (4+3);\n       let n = 1u8 << (4+4); //~ ERROR: bitshift exceeds the type's number of bits\n \n-      let n = 1is << std::isize::BITS; //~ ERROR: bitshift exceeds the type's number of bits\n-      let n = 1us << std::usize::BITS; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1_isize << std::isize::BITS; //~ ERROR: bitshift exceeds the type's number of bits\n+      let n = 1_usize << std::usize::BITS; //~ ERROR: bitshift exceeds the type's number of bits\n }\n "}, {"sha": "b234f08d04a42a1de0b6a5ba3ab167f5b75ee8d5", "filename": "src/test/compile-fail/lint-obsolete-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,7 +15,7 @@\n #![allow(dead_code)]\n #![feature(custom_attribute)]\n \n-#[abi=\"stdcall\"] extern {} //~ ERROR unused attribute\n+#[ab_isize=\"stdcall\"] extern {} //~ ERROR unused attribute\n \n #[fixed_stack_segment] fn f() {} //~ ERROR unused attribute\n "}, {"sha": "c00bd2adaa2876c2c03837b880692f196a4d9a3f", "filename": "src/test/compile-fail/lint-type-limits.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -14,7 +14,7 @@\n fn main() { }\n \n fn foo() {\n-    let mut i = 100us;\n+    let mut i = 100_usize;\n     while i >= 0 { //~ ERROR comparison is useless due to type limits\n         i -= 1;\n     }\n@@ -50,12 +50,12 @@ fn qux() {\n }\n \n fn quy() {\n-    let i = -23us; //~ WARNING negation of unsigned int literal may be unintentional\n+    let i = -23_usize; //~ WARNING negation of unsigned int literal may be unintentional\n                   //~^ WARNING unused variable\n }\n \n fn quz() {\n-    let i = 23us;\n+    let i = 23_usize;\n     let j = -i;   //~ WARNING negation of unsigned int variable may be unintentional\n                   //~^ WARNING unused variable\n }"}, {"sha": "d0bc71edf2c4c04ec59e29c8775ef5b8b7e889ec", "filename": "src/test/compile-fail/liveness-bad-bang-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-bad-bang-2.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -14,4 +14,4 @@ fn bad_bang(i: usize) -> ! { //~ ERROR computation may converge in a function ma\n     println!(\"{}\", 3);\n }\n \n-fn main() { bad_bang(5us); }\n+fn main() { bad_bang(5); }"}, {"sha": "13dbab12b774270a7242aba28419b6c85a961044", "filename": "src/test/compile-fail/macro-no-implicit-reexport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fmacro-no-implicit-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fmacro-no-implicit-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-no-implicit-reexport.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -16,5 +16,5 @@\n extern crate macro_non_reexport_2;\n \n fn main() {\n-    assert_eq!(reexported!(), 3us);  //~ ERROR macro undefined\n+    assert_eq!(reexported!(), 3_usize);  //~ ERROR macro undefined\n }"}, {"sha": "dc8f4fadc76c0a3185d14d80f3e2aaade7d38c34", "filename": "src/test/compile-fail/macro-reexport-not-locally-visible.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-not-locally-visible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-not-locally-visible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-not-locally-visible.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -18,5 +18,5 @@\n extern crate macro_reexport_1;\n \n fn main() {\n-    assert_eq!(reexported!(), 3us);  //~ ERROR macro undefined\n+    assert_eq!(reexported!(), 3_usize);  //~ ERROR macro undefined\n }"}, {"sha": "c60ef2ed28736a72dcb97116bd2ca67c49b45972", "filename": "src/test/compile-fail/match-ill-type1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-ill-type1.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -10,7 +10,7 @@\n \n fn main() {\n     match 1 {\n-        1...2us => 1, //~ ERROR mismatched types in range\n+        1...2_usize => 1, //~ ERROR mismatched types in range\n         _ => 2,\n     };\n }"}, {"sha": "825a485d529565b451ababfd61e0322dd76a1308", "filename": "src/test/compile-fail/match-range-fail-dominate.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-dominate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-dominate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail-dominate.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,21 +15,21 @@\n //error-pattern: unreachable\n \n fn main() {\n-    match 5us {\n-      1us ... 10us => { }\n-      5us ... 6us => { }\n+    match 5 {\n+      1 ... 10 => { }\n+      5 ... 6 => { }\n       _ => {}\n     };\n \n-    match 5us {\n-      3us ... 6us => { }\n-      4us ... 6us => { }\n+    match 5 {\n+      3 ... 6 => { }\n+      4 ... 6 => { }\n       _ => {}\n     };\n \n-    match 5us {\n-      4us ... 6us => { }\n-      4us ... 6us => { }\n+    match 5 {\n+      4 ... 6 => { }\n+      4 ... 6 => { }\n       _ => {}\n     };\n "}, {"sha": "c3292adfa34139cfab55adc0c204c288f7ef2d07", "filename": "src/test/compile-fail/match-range-fail.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-range-fail.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -13,17 +13,17 @@\n //error-pattern: mismatched types\n \n fn main() {\n-    match 5us {\n-      6us ... 1us => { }\n+    match 5 {\n+      6 ... 1 => { }\n       _ => { }\n     };\n \n     match \"wow\" {\n       \"bar\" ... \"foo\" => { }\n     };\n \n-    match 5us {\n-      'c' ... 100us => { }\n+    match 5 {\n+      'c' ... 100 => { }\n       _ => { }\n     };\n }"}, {"sha": "981c4c6f40d574d780c2b9e5740535a004ce7857", "filename": "src/test/compile-fail/method-ambig-two-traits-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-cross-crate.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -18,5 +18,5 @@ trait me2 {\n     fn me(&self) -> usize;\n }\n impl me2 for usize { fn me(&self) -> usize { *self } }\n-fn main() { 1us.me(); } //~ ERROR E0034\n+fn main() { 1_usize.me(); } //~ ERROR E0034\n "}, {"sha": "17312fb186941765e076cf68b765f0d0c28030cd", "filename": "src/test/compile-fail/method-ambig-two-traits-with-default-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-with-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-with-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmethod-ambig-two-traits-with-default-method.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -19,5 +19,5 @@ impl Foo for usize {}\n impl Bar for usize {}\n \n fn main() {\n-    1us.method(); //~ ERROR E0034\n+    1_usize.method(); //~ ERROR E0034\n }"}, {"sha": "b6744d4b33a1021d7b133dbdd4a9e618cc6cc7ae", "filename": "src/test/compile-fail/mutable-class-fields-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields-2.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -29,6 +29,6 @@ fn cat(in_x : usize, in_y : isize) -> cat {\n }\n \n fn main() {\n-  let nyan : cat = cat(52us, 99);\n+  let nyan : cat = cat(52_usize, 99);\n   nyan.eat();\n }"}, {"sha": "94b1047f85ed3720f95b32bace33af613f42ed3d", "filename": "src/test/compile-fail/mutable-class-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmutable-class-fields.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -21,6 +21,6 @@ fn cat(in_x : usize, in_y : isize) -> cat {\n }\n \n fn main() {\n-  let nyan : cat = cat(52us, 99);\n+  let nyan : cat = cat(52_usize, 99);\n   nyan.how_hungry = 0; //~ ERROR cannot assign\n }"}, {"sha": "21f8a982806a93f227e8490a1420770eed674e37", "filename": "src/test/compile-fail/no-method-suggested-traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fno-method-suggested-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fno-method-suggested-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-method-suggested-traits.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -123,8 +123,8 @@ fn main() {\n     //~^^^ HELP `no_method_suggested_traits::foo::PubPub`\n \n     // should have no help:\n-    1us.method3(); //~ ERROR does not implement\n-    std::rc::Rc::new(&mut Box::new(&1us)).method3(); //~ ERROR does not implement\n+    1_usize.method3(); //~ ERROR does not implement\n+    std::rc::Rc::new(&mut Box::new(&1_usize)).method3(); //~ ERROR does not implement\n     no_method_suggested_traits::Foo.method3();  //~ ERROR does not implement\n     std::rc::Rc::new(&mut Box::new(&no_method_suggested_traits::Foo)).method3();\n     //~^ ERROR does not implement"}, {"sha": "0eb91e0419a1da232d991ef9da75f0f093a431ed", "filename": "src/test/compile-fail/non-exhaustive-pattern-witness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnon-exhaustive-pattern-witness.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -27,7 +27,7 @@ fn struct_with_a_nested_enum_and_vector() {\n         Foo { first: true, second: None } => (),\n         Foo { first: true, second: Some(_) } => (),\n         Foo { first: false, second: None } => (),\n-        Foo { first: false, second: Some([1us, 2us, 3us, 4us]) } => ()\n+        Foo { first: false, second: Some([1_usize, 2_usize, 3_usize, 4_usize]) } => ()\n     }\n }\n "}, {"sha": "4b261d89888dcd3b02060865863568edab2cad6a", "filename": "src/test/compile-fail/or-patter-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2For-patter-mismatch.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -12,4 +12,4 @@\n \n enum blah { a(isize, isize, usize), b(isize, isize), }\n \n-fn main() { match blah::a(1, 1, 2us) { blah::a(_, x, y) | blah::b(x, y) => { } } }\n+fn main() { match blah::a(1, 1, 2_usize) { blah::a(_, x, y) | blah::b(x, y) => { } } }"}, {"sha": "ccbdd52a98328dc769f1b9268852d2e50a313c4a", "filename": "src/test/compile-fail/private-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-method.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -30,6 +30,6 @@ mod kitties {\n }\n \n fn main() {\n-  let nyan : kitties::cat = kitties::cat(52us, 99);\n+  let nyan : kitties::cat = kitties::cat(52_usize, 99);\n   nyan.nap();\n }"}, {"sha": "243d835d46e6213d7f8bf9143872d899b5404223", "filename": "src/test/compile-fail/private-struct-field-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-struct-field-cross-crate.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -13,7 +13,7 @@ extern crate cci_class;\n use cci_class::kitties::cat;\n \n fn main() {\n-  let nyan : cat = cat(52us, 99);\n-  assert!((nyan.meows == 52us));\n+  let nyan : cat = cat(52_usize, 99);\n+  assert!((nyan.meows == 52_usize));\n   //~^ ERROR field `meows` of struct `cci_class::kitties::cat` is private\n }"}, {"sha": "45e468b3ab06676c446ac7d1de41d822573c7270", "filename": "src/test/compile-fail/regions-addr-of-self.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-self.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,18 +15,18 @@ struct dog {\n impl dog {\n     pub fn chase_cat(&mut self) {\n         let p: &'static mut usize = &mut self.cats_chased; //~ ERROR cannot infer\n-        *p += 1us;\n+        *p += 1_usize;\n     }\n \n     pub fn chase_cat_2(&mut self) {\n         let p: &mut usize = &mut self.cats_chased;\n-        *p += 1us;\n+        *p += 1_usize;\n     }\n }\n \n fn dog() -> dog {\n     dog {\n-        cats_chased: 0us\n+        cats_chased: 0_usize\n     }\n }\n "}, {"sha": "8cc2dd6afc645bc4203de7a03dd814c20bc0ee77", "filename": "src/test/compile-fail/regions-addr-of-upvar-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-addr-of-upvar-self.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -18,7 +18,7 @@ impl dog {\n     pub fn chase_cat(&mut self) {\n         let _f = || {\n             let p: &'static mut usize = &mut self.food; //~ ERROR cannot infer\n-            *p = 3us;\n+            *p = 3_usize;\n         };\n     }\n }"}, {"sha": "4c361427bf37c6e0507bccfc84527363118ed9d1", "filename": "src/test/compile-fail/regions-creating-enums.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-creating-enums.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -14,8 +14,8 @@ enum ast<'a> {\n }\n \n fn build() {\n-    let x = ast::num(3us);\n-    let y = ast::num(4us);\n+    let x = ast::num(3_usize);\n+    let y = ast::num(4_usize);\n     let z = ast::add(&x, &y);\n     compute(&z);\n }"}, {"sha": "e88c96de9e4ea3f369492872317b830afe7fef84", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-decl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-decl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-decl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-decl.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -14,12 +14,12 @@ struct invariant<'a> {\n     marker: marker::InvariantLifetime<'a>\n }\n \n-fn to_same_lifetime<'r>(bi: invariant<'r>) {\n-    let bj: invariant<'r> = bi;\n+fn to_same_lifetime<'r>(b_isize: invariant<'r>) {\n+    let bj: invariant<'r> = b_isize;\n }\n \n-fn to_longer_lifetime<'r>(bi: invariant<'r>) -> invariant<'static> {\n-    bi //~ ERROR mismatched types\n+fn to_longer_lifetime<'r>(b_isize: invariant<'r>) -> invariant<'static> {\n+    b_isize //~ ERROR mismatched types\n }\n \n fn main() {"}, {"sha": "f280e4d978eed0408fa4f1262cdd7d9d72418e5c", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-3.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -13,12 +13,12 @@ struct invariant<'a> {\n     f: Box<FnOnce(&mut &'a isize) + 'static>,\n }\n \n-fn to_same_lifetime<'r>(bi: invariant<'r>) {\n-    let bj: invariant<'r> = bi;\n+fn to_same_lifetime<'r>(b_isize: invariant<'r>) {\n+    let bj: invariant<'r> = b_isize;\n }\n \n-fn to_longer_lifetime<'r>(bi: invariant<'r>) -> invariant<'static> {\n-    bi //~ ERROR mismatched types\n+fn to_longer_lifetime<'r>(b_isize: invariant<'r>) -> invariant<'static> {\n+    b_isize //~ ERROR mismatched types\n }\n \n fn main() {"}, {"sha": "ced0afcebd97908554e2aecb1210e59c31cdcfd5", "filename": "src/test/compile-fail/regions-infer-invariance-due-to-mutability-4.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-infer-invariance-due-to-mutability-4.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -13,12 +13,12 @@ struct Invariant<'a> {\n     f: Box<for<'b> FnOnce() -> &'b mut &'a isize + 'static>,\n }\n \n-fn to_same_lifetime<'r>(bi: Invariant<'r>) {\n-    let bj: Invariant<'r> = bi;\n+fn to_same_lifetime<'r>(b_isize: Invariant<'r>) {\n+    let bj: Invariant<'r> = b_isize;\n }\n \n-fn to_longer_lifetime<'r>(bi: Invariant<'r>) -> Invariant<'static> {\n-    bi //~ ERROR mismatched types\n+fn to_longer_lifetime<'r>(b_isize: Invariant<'r>) -> Invariant<'static> {\n+    b_isize //~ ERROR mismatched types\n }\n \n fn main() {"}, {"sha": "aa20efa5a12b157822f468aa47f73f795654d87c", "filename": "src/test/compile-fail/regions-return-ref-to-upvar-issue-17403.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-return-ref-to-upvar-issue-17403.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,7 +15,7 @@\n fn main() {\n     // Unboxed closure case\n     {\n-        let mut x = 0us;\n+        let mut x = 0_usize;\n         let mut f = || &mut x; //~ ERROR cannot infer\n         let x = f();\n         let y = f();"}, {"sha": "b45a37d26e58a2d0c41f7df1fd60dcd9924110f3", "filename": "src/test/compile-fail/regions-trait-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-trait-1.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -34,7 +34,7 @@ fn get_v(gc: Box<get_ctxt>) -> usize {\n }\n \n fn main() {\n-    let ctxt = ctxt { v: 22us };\n+    let ctxt = ctxt { v: 22_usize };\n     let hc = has_ctxt { c: &ctxt };\n-    assert_eq!(get_v(box hc as Box<get_ctxt>), 22us);\n+    assert_eq!(get_v(box hc as Box<get_ctxt>), 22_usize);\n }"}, {"sha": "9b3e2668042eaa0545513a8a5b5d4525e7c2a2e3", "filename": "src/test/compile-fail/repeat_count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frepeat_count.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -41,14 +41,14 @@ fn main() {\n     //~| expected usize\n     //~| found &-ptr\n     //~| ERROR expected positive integer for repeat count, found string\n-    let f = [0; -4is];\n+    let f = [0; -4_isize];\n     //~^ ERROR mismatched types\n     //~| expected `usize`\n     //~| found `isize`\n     //~| expected usize\n     //~| found isize\n     //~| ERROR expected positive integer for repeat count, found negative integer\n-    let f = [0us; -1is];\n+    let f = [0_usize; -1_isize];\n     //~^ ERROR mismatched types\n     //~| expected `usize`\n     //~| found `isize`"}, {"sha": "725f83d49575176eaba038150ce2a04ad34a6ee3", "filename": "src/test/compile-fail/shadowed-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fshadowed-lifetime.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -39,5 +39,5 @@ fn main() {\n     // just to ensure that this test fails to compile; when shadowed\n     // lifetimes become either an error or a proper lint, this will\n     // not be needed.\n-    let x: isize = 3us; //~ ERROR mismatched types\n+    let x: isize = 3_usize; //~ ERROR mismatched types\n }"}, {"sha": "a2ad2336d4bc3ee7cc724df65f10be4945a13a47", "filename": "src/test/compile-fail/struct-base-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstruct-base-wrong-type.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -30,7 +30,7 @@ fn main() {\n                                //~| found `Bar`\n                                //~| expected struct `Foo`\n                                //~| found struct `Bar`\n-    let f_i = Foo { a: 2, ..4 }; //~  ERROR mismatched types\n+    let f__isize = Foo { a: 2, ..4 }; //~  ERROR mismatched types\n                                  //~| expected `Foo`\n                                  //~| found `_`\n                                  //~| expected struct `Foo`"}, {"sha": "9c1d318d5889990efb92f1d33bf6abcd0be641be", "filename": "src/test/compile-fail/tail-typeck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftail-typeck.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -12,6 +12,6 @@\n \n fn f() -> isize { return g(); }\n \n-fn g() -> usize { return 0us; }\n+fn g() -> usize { return 0_usize; }\n \n fn main() { let y = f(); }"}, {"sha": "5bfad94867e2544c4291236bb0d11c17dcda23a9", "filename": "src/test/compile-fail/typeck_type_placeholder_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_item.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -14,7 +14,7 @@\n fn test() -> _ { 5 }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n-fn test2() -> (_, _) { (5us, 5us) }\n+fn test2() -> (_, _) { (5, 5) }\n //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n@@ -67,7 +67,7 @@ pub fn main() {\n     fn fn_test() -> _ { 5 }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n \n-    fn fn_test2() -> (_, _) { (5us, 5us) }\n+    fn fn_test2() -> (_, _) { (5, 5) }\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n     //~^^ ERROR the type placeholder `_` is not allowed within types on item signatures\n "}, {"sha": "2cb46cc352beca366f166325584e56cfecc78199", "filename": "src/test/compile-fail/typeck_type_placeholder_lifetime_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftypeck_type_placeholder_lifetime_1.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -16,6 +16,6 @@ struct Foo<'a, T:'a> {\n }\n \n pub fn main() {\n-    let c: Foo<_, _> = Foo { r: &5us };\n+    let c: Foo<_, _> = Foo { r: &5 };\n     //~^ ERROR wrong number of type arguments: expected 1, found 2\n }"}, {"sha": "800126450c9726887796a01a8c5343225e3982ab", "filename": "src/test/compile-fail/unboxed-closure-illegal-move.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-illegal-move.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -22,28 +22,28 @@ fn to_fn_once<A,F:FnOnce<A>>(f: F) -> F { f }\n fn main() {\n     // By-ref cases\n     {\n-        let x = box 0us;\n+        let x = box 0_usize;\n         let f = to_fn(|| drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = box 0us;\n+        let x = box 0_usize;\n         let f = to_fn_mut(|| drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = box 0us;\n+        let x = box 0_usize;\n         let f = to_fn_once(|| drop(x)); // OK -- FnOnce\n     }\n     // By-value cases\n     {\n-        let x = box 0us;\n+        let x = box 0_usize;\n         let f = to_fn(move || drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = box 0us;\n+        let x = box 0_usize;\n         let f = to_fn_mut(move || drop(x)); //~ ERROR cannot move\n     }\n     {\n-        let x = box 0us;\n+        let x = box 0_usize;\n         let f = to_fn_once(move || drop(x)); // this one is ok\n     }\n }"}, {"sha": "b40a91181adde2b63c9ededa0260da8c553ec8a9", "filename": "src/test/compile-fail/unboxed-closure-immutable-capture.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-immutable-capture.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -17,7 +17,7 @@\n fn set(x: &mut usize) { *x = 0; }\n \n fn main() {\n-    let x = 0us;\n+    let x = 0_usize;\n     move || x = 1; //~ ERROR cannot assign\n     move || set(&mut x); //~ ERROR cannot borrow\n     move || x = 1; //~ ERROR cannot assign"}, {"sha": "59c8495371852c809d39db541b7d4a5f5ede996e", "filename": "src/test/compile-fail/unboxed-closure-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-region.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -14,7 +14,7 @@\n // reference cannot escape the region of that variable.\n fn main() {\n     let _f = {\n-        let x = 0us;\n+        let x = 0_usize;\n         || x //~ ERROR cannot infer an appropriate lifetime due to conflicting requirements\n     };\n }"}, {"sha": "1191cfa2600b8a231f1d5d3c5dc4e148e492fcf5", "filename": "src/test/compile-fail/unboxed-closures-borrow-conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-borrow-conflict.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -14,7 +14,7 @@\n // cause borrow conflicts.\n \n fn main() {\n-    let mut x = 0us;\n+    let mut x = 0_usize;\n     let f = || x += 1;\n     let _y = x; //~ ERROR cannot use `x` because it was mutably borrowed\n }"}, {"sha": "91182393ac8e057904fba535410ad10131417291", "filename": "src/test/compile-fail/unboxed-closures-type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closures-type-mismatch.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -14,6 +14,6 @@ use std::ops::FnMut;\n \n pub fn main() {\n     let mut f = |x: isize, y: isize| -> isize { x + y };\n-    let z = f(1us, 2);    //~ ERROR mismatched types\n+    let z = f(1_usize, 2);    //~ ERROR mismatched types\n     println!(\"{}\", z);\n }"}, {"sha": "046337c33f0131dc4c2b4f5f5c58e26ec269a63a", "filename": "src/test/compile-fail/unique-unique-kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-unique-kind.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -12,7 +12,7 @@\n \n use std::rc::Rc;\n \n-fn f<T:Send>(_i: T) {\n+fn f<T:Send>(__isize: T) {\n }\n \n fn main() {"}, {"sha": "91a41ad6a4986d81e8d91f0dad2bd50642c5642a", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -28,7 +28,7 @@ impl<'a> Drop for r<'a> {\n     }\n }\n \n-fn f<T>(_i: Vec<T> , _j: Vec<T> ) {\n+fn f<T>(__isize: Vec<T> , _j: Vec<T> ) {\n }\n \n fn clone<T: Clone>(t: &T) -> T { t.clone() }"}, {"sha": "eb5ffeaf888866712075f36d91c00ecafd816718", "filename": "src/test/compile-fail/unreachable-arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funreachable-arm.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,4 +15,4 @@\n \n enum foo { a(Box<foo>, isize), b(usize), }\n \n-fn main() { match foo::b(1us) { foo::b(_) | foo::a(box _, 1) => { } foo::a(_, 1) => { } } }\n+fn main() { match foo::b(1_usize) { foo::b(_) | foo::a(box _, 1) => { } foo::a(_, 1) => { } } }"}, {"sha": "cc6ff2d8ebcc204b2e9965fc00cb22911a82f6e7", "filename": "src/test/compile-fail/vtable-res-trait-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvtable-res-trait-param.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -23,7 +23,7 @@ impl TraitB for isize {\n }\n \n fn call_it<B:TraitB>(b: B)  -> isize {\n-    let y = 4us;\n+    let y = 4_usize;\n     b.gimme_an_a(y) //~ ERROR the trait `TraitA` is not implemented\n }\n "}, {"sha": "d47dee14f55a3f331a1da3ddb56e0528393ef32c", "filename": "src/test/debuginfo/gdb-pretty-struct-and-enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgdb-pretty-struct-and-enums.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -139,7 +139,7 @@ fn main() {\n     let mixed_enum_tuple_var = MixedEnumTupleVar(106, 107, false);\n     let mixed_enum_struct_var = MixedEnumStructVar { field1: 108.5, field2: 109 };\n \n-    let some = Some(110u);\n+    let some = Some(110_usize);\n     let none: Option<int> = None;\n     let some_fat = Some(\"abc\");\n     let none_fat: Option<&'static str> = None;"}, {"sha": "e097ec2adb1a702134c6115b51ef558adbe813a3", "filename": "src/test/debuginfo/lexical-scope-in-parameterless-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Flexical-scope-in-parameterless-closure.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -18,6 +18,6 @@\n // Nothing to do here really, just make sure it compiles. See issue #8513.\n fn main() {\n     let _ = ||();\n-    let _ = (1u..3).map(|_| 5);\n+    let _ = (1_usize..3).map(|_| 5);\n }\n "}, {"sha": "5b2045d59dc771d0c53ed5184194eaf156765070", "filename": "src/test/debuginfo/no-debug-attribute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fno-debug-attribute.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -26,7 +26,7 @@\n #![omit_gdb_pretty_printer_section]\n \n fn function_with_debuginfo() {\n-    let abc = 10u;\n+    let abc = 10_usize;\n     return (); // #break\n }\n "}, {"sha": "03336c3586094f4fa861af14ca0595e26735e5a1", "filename": "src/test/debuginfo/option-like-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Foption-like-enum.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -129,18 +129,18 @@ fn main() {\n     let some_str: Option<&'static str> = Some(\"abc\");\n     let none_str: Option<&'static str> = None;\n \n-    let some: Option<&u32> = Some(unsafe { std::mem::transmute(0x12345678u) });\n+    let some: Option<&u32> = Some(unsafe { std::mem::transmute(0x12345678_usize) });\n     let none: Option<&u32> = None;\n \n-    let full = MoreFields::Full(454545, unsafe { std::mem::transmute(0x87654321u) }, 9988);\n+    let full = MoreFields::Full(454545, unsafe { std::mem::transmute(0x87654321_usize) }, 9988);\n \n     let empty = MoreFields::Empty;\n     let empty_gdb: &MoreFieldsRepr = unsafe { std::mem::transmute(&MoreFields::Empty) };\n \n     let droid = NamedFields::Droid {\n         id: 675675,\n         range: 10000001,\n-        internals: unsafe { std::mem::transmute(0x43218765u) }\n+        internals: unsafe { std::mem::transmute(0x43218765_usize) }\n     };\n \n     let void_droid = NamedFields::Void;"}, {"sha": "a592484f1a4c66510785d438b3eb17b1ad9a1aa8", "filename": "src/test/debuginfo/type-names.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fdebuginfo%2Ftype-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Ftype-names.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -280,9 +280,9 @@ fn main() {\n \n     // Vectors\n     let fixed_size_vec1 = ([Struct1, Struct1, Struct1], 0i16);\n-    let fixed_size_vec2 = ([0u, 1u, 2u], 0i16);\n+    let fixed_size_vec2 = ([0_usize, 1, 2], 0i16);\n \n-    let vec1 = vec![0u, 2u, 3u];\n+    let vec1 = vec![0_usize, 2, 3];\n     let slice1 = &*vec1;\n     let vec2 = vec![Mod1::Variant2_2(Struct1)];\n     let slice2 = &*vec2;\n@@ -301,29 +301,29 @@ fn main() {\n         &mut Trait2<Mod1::Mod2::Struct3, GenericStruct<usize, isize>>;\n \n     // Bare Functions\n-    let rust_fn = (rust_fn, 0u);\n-    let extern_c_fn = (extern_c_fn, 0u);\n-    let unsafe_fn = (unsafe_fn, 0u);\n-    let extern_stdcall_fn = (extern_stdcall_fn, 0u);\n+    let rust_fn = (rust_fn, 0_usize);\n+    let extern_c_fn = (extern_c_fn, 0_usize);\n+    let unsafe_fn = (unsafe_fn, 0_usize);\n+    let extern_stdcall_fn = (extern_stdcall_fn, 0_usize);\n \n-    let rust_fn_with_return_value = (rust_fn_with_return_value, 0u);\n-    let extern_c_fn_with_return_value = (extern_c_fn_with_return_value, 0u);\n-    let unsafe_fn_with_return_value = (unsafe_fn_with_return_value, 0u);\n-    let extern_stdcall_fn_with_return_value = (extern_stdcall_fn_with_return_value, 0u);\n+    let rust_fn_with_return_value = (rust_fn_with_return_value, 0_usize);\n+    let extern_c_fn_with_return_value = (extern_c_fn_with_return_value, 0_usize);\n+    let unsafe_fn_with_return_value = (unsafe_fn_with_return_value, 0_usize);\n+    let extern_stdcall_fn_with_return_value = (extern_stdcall_fn_with_return_value, 0_usize);\n \n-    let generic_function_int = (generic_function::<isize>, 0u);\n-    let generic_function_struct3 = (generic_function::<Mod1::Mod2::Struct3>, 0u);\n+    let generic_function_int = (generic_function::<isize>, 0_usize);\n+    let generic_function_struct3 = (generic_function::<Mod1::Mod2::Struct3>, 0_usize);\n \n-    let variadic_function = (printf, 0u);\n+    let variadic_function = (printf, 0_usize);\n \n     // Closures\n     // I (mw) am a bit unclear about the current state of closures, their\n     // various forms (boxed, unboxed, proc, capture-by-ref, by-val, once) and\n     // how that maps to rustc's internal representation of these forms.\n     // Once closures have reached their 1.0 form, the tests below should\n     // probably be expanded.\n-    let closure1 = (|x:isize| {}, 0u);\n-    let closure2 = (|x:i8, y: f32| { (x as f32) + y }, 0u);\n+    let closure1 = (|x:isize| {}, 0_usize);\n+    let closure2 = (|x:i8, y: f32| { (x as f32) + y }, 0_usize);\n \n     zzz(); // #break\n }"}, {"sha": "3c442c95e0f59aa0329cc2029ad13207ee0c7c54", "filename": "src/test/debuginfo/var-captured-in-sendable-closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fvar-captured-in-sendable-closure.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -67,7 +67,7 @@ fn main() {\n \n     closure();\n \n-    let constant2 = 6u;\n+    let constant2 = 6_usize;\n \n     // The `self` argument of the following closure should be passed by value\n     // to FnOnce::call_once(self, args), which gets translated a bit differently"}, {"sha": "58f6ae960b1895b2835da025c825d8bae1045872", "filename": "src/test/pretty/empty-lines.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fpretty%2Fempty-lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fpretty%2Fempty-lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fempty-lines.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -13,5 +13,5 @@\n \n fn a() -> uint {\n \n-    1u\n+    1usize\n }"}, {"sha": "83ee2bd08f4adbcad507ae75e4260aa0a359c6c8", "filename": "src/test/pretty/issue-4264.pp", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fpretty%2Fissue-4264.pp", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fpretty%2Fissue-4264.pp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.pp?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -23,15 +23,15 @@\n pub fn foo(_: [i32; (3 as usize)]) { }\n \n pub fn bar() {\n-    const FOO: usize = ((5us as usize) - (4us as usize) as usize);\n+    const FOO: usize = ((5 as usize) - (4 as usize) as usize);\n     let _: [(); (FOO as usize)] = ([(() as ())] as [(); 1]);\n \n-    let _: [(); (1us as usize)] = ([(() as ())] as [(); 1]);\n+    let _: [(); (1usize as usize)] = ([(() as ())] as [(); 1]);\n \n     let _ =\n         (((&((([(1 as i32), (2 as i32), (3 as i32)] as [i32; 3])) as [i32; 3])\n               as &[i32; 3]) as *const _ as *const [i32; 3]) as\n-            *const [i32; (3us as usize)] as *const [i32; 3]);\n+            *const [i32; (3usize as usize)] as *const [i32; 3]);\n \n \n \n@@ -79,16 +79,16 @@\n                                                                                                      core::fmt::Arguments<'_>))\n         as collections::string::String);\n }\n-pub type Foo = [i32; (3us as usize)];\n+pub type Foo = [i32; (3 as usize)];\n pub struct Bar {\n-    pub x: [i32; (3us as usize)],\n+    pub x: [i32; (3 as usize)],\n }\n-pub struct TupleBar([i32; (4us as usize)]);\n-pub enum Baz { BazVariant([i32; (5us as usize)]), }\n+pub struct TupleBar([i32; (4 as usize)]);\n+pub enum Baz { BazVariant([i32; (5 as usize)]), }\n pub fn id<T>(x: T) -> T { (x as T) }\n pub fn use_id() {\n     let _ =\n-        ((id::<[i32; (3us as usize)]> as\n+        ((id::<[i32; (3 as usize)]> as\n              fn([i32; 3]) -> [i32; 3] {id})(([(1 as i32), (2 as i32),\n                                               (3 as i32)] as [i32; 3])) as\n             [i32; 3]);"}, {"sha": "3aa2f4826b24cdaadd5ac816f3cad62793c3a13e", "filename": "src/test/pretty/issue-4264.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fpretty%2Fissue-4264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Fpretty%2Fissue-4264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fissue-4264.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -17,32 +17,32 @@\n pub fn foo(_: [i32; 3]) {}\n \n pub fn bar() {\n-    const FOO: usize = 5us - 4us;\n+    const FOO: usize = 5 - 4;\n     let _: [(); FOO] = [()];\n \n-    let _ : [(); 1us] = [()];\n+    let _ : [(); 1usize] = [()];\n \n-    let _ = &([1,2,3]) as *const _ as *const [i32; 3us];\n+    let _ = &([1,2,3]) as *const _ as *const [i32; 3usize];\n \n     format!(\"test\");\n }\n \n-pub type Foo = [i32; 3us];\n+pub type Foo = [i32; 3];\n \n pub struct Bar {\n-    pub x: [i32; 3us]\n+    pub x: [i32; 3]\n }\n \n-pub struct TupleBar([i32; 4us]);\n+pub struct TupleBar([i32; 4]);\n \n pub enum Baz {\n-    BazVariant([i32; 5us])\n+    BazVariant([i32; 5])\n }\n \n pub fn id<T>(x: T) -> T { x }\n \n pub fn use_id() {\n-    let _ = id::<[i32; 3us]>([1,2,3]);\n+    let _ = id::<[i32; 3]>([1,2,3]);\n }\n \n "}, {"sha": "159c33198a6e40f52ee4d643e5036b405cae0b0f", "filename": "src/test/run-fail/binop-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-fail%2Fbinop-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-fail%2Fbinop-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbinop-panic.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:quux\n fn my_err(s: String) -> ! { println!(\"{}\", s); panic!(\"quux\"); }\n-fn main() { 3u == my_err(\"bye\".to_string()); }\n+fn main() { 3_usize == my_err(\"bye\".to_string()); }"}, {"sha": "6dd329b729500802a0efa0a67f73ae02bbe8c1fe", "filename": "src/test/run-fail/bug-2470-bounds-check-overflow-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-2.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -14,14 +14,14 @@\n use std::uint;\n \n fn main() {\n-    let x = vec!(1u,2u,3u);\n+    let x = vec!(1_usize,2_usize,3_usize);\n \n     // This should cause a bounds-check panic, but may not if we do our\n     // bounds checking by comparing a scaled index value to the vector's\n     // length (in bytes), because the scaling of the index will cause it to\n     // wrap around to a small number.\n \n-    let idx = uint::MAX & !(uint::MAX >> 1u);\n+    let idx = uint::MAX & !(uint::MAX >> 1_usize);\n     println!(\"ov2 idx = 0x%x\", idx);\n \n     // This should panic."}, {"sha": "ec7fde171013324c3fb2c09fe13fb3de2359862f", "filename": "src/test/run-fail/bug-2470-bounds-check-overflow-3.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow-3.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,15 +15,15 @@ use std::u64;\n \n #[cfg(target_arch=\"x86\")]\n fn main() {\n-    let x = vec!(1u,2u,3u);\n+    let x = vec!(1_usize,2_usize,3_usize);\n \n     // This should cause a bounds-check panic, but may not if we do our\n     // bounds checking by truncating the index value to the size of the\n     // machine word, losing relevant bits of the index value.\n \n     // This test is only meaningful on 32-bit hosts.\n \n-    let idx = u64::MAX & !(u64::MAX >> 1u);\n+    let idx = u64::MAX & !(u64::MAX >> 1_usize);\n     println!(\"ov3 idx = 0x%8.8x%8.8x\",\n            (idx >> 32) as uint,\n            idx as uint);\n@@ -35,6 +35,6 @@ fn main() {\n #[cfg(any(target_arch=\"x86_64\", target_arch = \"aarch64\"))]\n fn main() {\n     // This version just panics anyways, for symmetry on 64-bit hosts.\n-    let x = vec!(1u,2u,3u);\n+    let x = vec!(1_usize,2_usize,3_usize);\n     error!(\"ov3 0x%x\",  x[200]);\n }"}, {"sha": "e48d749d9451ec1996845548a862f9be11fe1dab", "filename": "src/test/run-fail/bug-2470-bounds-check-overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fbug-2470-bounds-check-overflow.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -20,7 +20,7 @@ fn main() {\n     // address of the 0th cell in the array (even though the index is\n     // huge).\n \n-    let x = vec!(1u,2u,3u);\n+    let x = vec!(1_usize,2_usize,3_usize);\n \n     let base = x.as_ptr() as uint;\n     let idx = base / mem::size_of::<uint>();"}, {"sha": "f2253b7342eb8d4d8b42c1041f999f28e805c001", "filename": "src/test/run-fail/die-macro-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-fail%2Fdie-macro-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-fail%2Fdie-macro-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fdie-macro-expr.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -11,5 +11,5 @@\n // error-pattern:test\n \n fn main() {\n-    let _i: int = panic!(\"test\");\n+    let __isize: int = panic!(\"test\");\n }"}, {"sha": "225ce5a741b7cb4f4e6e484ee5f512cd537f9b61", "filename": "src/test/run-fail/extern-panic.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-fail%2Fextern-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-fail%2Fextern-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fextern-panic.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -26,10 +26,10 @@ mod rustrt {\n }\n \n extern fn cb(data: libc::uintptr_t) -> libc::uintptr_t {\n-    if data == 1u {\n+    if data == 1_usize {\n         data\n     } else {\n-        count(data - 1u) + count(data - 1u)\n+        count(data - 1_usize) + count(data - 1_usize)\n     }\n }\n \n@@ -41,9 +41,9 @@ fn count(n: uint) -> uint {\n }\n \n fn main() {\n-    for _ in 0..10u {\n+    for _ in 0..10_usize {\n         task::spawn(move|| {\n-            let result = count(5u);\n+            let result = count(5_usize);\n             println!(\"result = %?\", result);\n             panic!();\n         });"}, {"sha": "a1a760c040c75f75eab27e19e3e05e008794ce5c", "filename": "src/test/run-fail/for-each-loop-panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-fail%2Ffor-each-loop-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-fail%2Ffor-each-loop-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Ffor-each-loop-panic.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -10,4 +10,4 @@\n \n // error-pattern:moop\n \n-fn main() { for _ in 0u..10u { panic!(\"moop\"); } }\n+fn main() { for _ in 0_usize..10_usize { panic!(\"moop\"); } }"}, {"sha": "19a57db5ec79d0d01463bdf1e34b11928382de38", "filename": "src/test/run-fail/if-check-panic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-fail%2Fif-check-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-fail%2Fif-check-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fif-check-panic.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -10,9 +10,9 @@\n \n // error-pattern:Number is odd\n fn even(x: uint) -> bool {\n-    if x < 2u {\n+    if x < 2_usize {\n         return false;\n-    } else if x == 2u { return true; } else { return even(x - 2u); }\n+    } else if x == 2_usize { return true; } else { return even(x - 2_usize); }\n }\n \n fn foo(x: uint) {\n@@ -23,4 +23,4 @@ fn foo(x: uint) {\n     }\n }\n \n-fn main() { foo(3u); }\n+fn main() { foo(3_usize); }"}, {"sha": "b4ec986ef25fd8f50141116a5d4aad171cc7a0be", "filename": "src/test/run-make/graphviz-flowgraph/f20.dot-expected.dot", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.dot-expected.dot?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -1,17 +1,17 @@\n digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n-    N2[label=\"expr 2us\"];\n-    N3[label=\"expr 0us\"];\n-    N4[label=\"expr 20us\"];\n-    N5[label=\"expr [2us, 0us, 20us]\"];\n+    N2[label=\"expr 2usize\"];\n+    N3[label=\"expr 0usize\"];\n+    N4[label=\"expr 20usize\"];\n+    N5[label=\"expr [2usize, 0usize, 20usize]\"];\n     N6[label=\"local v\"];\n-    N7[label=\"stmt let v = [2us, 0us, 20us];\"];\n+    N7[label=\"stmt let v = [2usize, 0usize, 20usize];\"];\n     N8[label=\"expr v\"];\n-    N9[label=\"expr 20us\"];\n-    N10[label=\"expr v[20us]\"];\n-    N11[label=\"stmt v[20us];\"];\n-    N12[label=\"block { let v = [2us, 0us, 20us]; v[20us]; }\"];\n+    N9[label=\"expr 20usize\"];\n+    N10[label=\"expr v[20usize]\"];\n+    N11[label=\"stmt v[20usize];\"];\n+    N12[label=\"block { let v = [2usize, 0usize, 20usize]; v[20usize]; }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "d65de18b5470ad11e15c4ec283d0a65d5e7426f1", "filename": "src/test/run-make/graphviz-flowgraph/f20.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff20.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n pub fn expr_index_20() {\n-    let v = [2us, 0us, 20us];\n-    v[20us];\n+    let v = [2_usize, 0_usize, 20_usize];\n+    v[20_usize];\n }"}, {"sha": "23b7d8bbf0970521e6e2e86ed54c26e78fd5cddb", "filename": "src/test/run-make/save-analysis/SubDir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-make%2Fsave-analysis%2FSubDir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-make%2Fsave-analysis%2FSubDir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2FSubDir%2Fmod.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -14,7 +14,7 @@ use sub::sub2 as msalias;\n use sub::sub2;\n use std::old_io::stdio::println;\n \n-static yy: usize = 25us;\n+static yy: usize = 25;\n \n mod sub {\n     pub mod sub2 {"}, {"sha": "db70a2452326673144a0d9c1e9b8504870096e75", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -32,7 +32,7 @@ use std::num::{from_int,from_i8,from_i32};\n use std::mem::size_of;\n \n static uni: &'static str = \"Les Mis\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9\u00e9rables\";\n-static yy: usize = 25us;\n+static yy: usize = 25;\n \n static bob: Option<std::vec::CowVec<'static, isize>> = None;\n \n@@ -45,11 +45,11 @@ fn test_alias<I: Iterator>(i: Option<<I as Iterator>::Item>) {\n     fn foo(x: &Float) {}\n     let _: Option<u8> = from_i32(45);\n \n-    let x = 42us;\n+    let x = 42_usize;\n \n     myflate::deflate_bytes(&[]);\n \n-    let x = (3, 4us);\n+    let x = (3, 4_usize);\n     let y = x.1;\n }\n "}, {"sha": "1e0570c95ac12f75977e06f514d003b990f2d41a", "filename": "src/test/run-make/symbols-are-reasonable/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -16,5 +16,5 @@ impl Foo for uint {}\n \n pub fn dummy() {\n     // force the vtable to be created\n-    let _x = &1u as &Foo;\n+    let _x = &1_usize as &Foo;\n }"}, {"sha": "ce3e69918ffee927e8c77037456fcc472e6b420c", "filename": "src/test/run-make/unicode-input/multiple_files.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fmultiple_files.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -43,11 +43,11 @@ fn main() {\n             .write_str(\"mod unicode_input_multiple_files_chars;\");\n     }\n \n-    for _ in 0u..100 {\n+    for _ in 0..100 {\n         {\n             let randoms = tmpdir.join(\"unicode_input_multiple_files_chars.rs\");\n             let mut w = File::create(&randoms).unwrap();\n-            for _ in 0u..30 {\n+            for _ in 0..30 {\n                 let _ = w.write_char(random_char());\n             }\n         }"}, {"sha": "ef6c799336bd4e5171878fe7ccf1b9339c32fded", "filename": "src/test/run-make/unicode-input/span_length.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Funicode-input%2Fspan_length.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -38,8 +38,8 @@ fn main() {\n     let tmpdir = Path::new(&args[2]);\n     let main_file = tmpdir.join(\"span_main.rs\");\n \n-    for _ in 0u..100 {\n-        let n = thread_rng().gen_range(3u, 20);\n+    for _ in 0..100 {\n+        let n = thread_rng().gen_range(3, 20);\n \n         {\n             let _ = write!(&mut File::create(&main_file).unwrap(),"}, {"sha": "b1bebf0b3e60648b3a051be51a4c535589a53dcb", "filename": "src/test/run-pass/alias-uninit-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -17,7 +17,7 @@ enum sty { ty_nil, }\n struct RawT {struct_: sty, cname: Option<String>, hash: uint}\n \n fn mk_raw_ty(st: sty, cname: Option<String>) -> RawT {\n-    return RawT {struct_: st, cname: cname, hash: 0u};\n+    return RawT {struct_: st, cname: cname, hash: 0_usize};\n }\n \n pub fn main() { mk_raw_ty(sty::ty_nil, None::<String>); }"}, {"sha": "3ac8e4d0ee9ca846ad4b4388aa734fec1148de39", "filename": "src/test/run-pass/asm-in-out-operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-in-out-operand.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -14,7 +14,7 @@\n unsafe fn next_power_of_2(n: u32) -> u32 {\n     let mut tmp = n;\n     asm!(\"dec $0\" : \"+rm\"(tmp) :: \"cc\");\n-    let mut shift = 1u;\n+    let mut shift = 1_usize;\n     while shift <= 16 {\n         asm!(\n             \"shr %cl, $2\n@@ -42,7 +42,7 @@ pub fn main() {\n             \"shl $2, $1\n             add $3, $1\n             mov $1, $0\"\n-            : \"=r\"(x), \"+r\"(y) : \"i\"(3u), \"ir\"(7u) : \"cc\"\n+            : \"=r\"(x), \"+r\"(y) : \"i\"(3_usize), \"ir\"(7_usize) : \"cc\"\n         );\n     }\n     assert_eq!(x, 47);"}, {"sha": "0f6fec133d1ce1985aaaac5159eb9eecd7c7979f", "filename": "src/test/run-pass/asm-out-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fasm-out-assign.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,7 +15,7 @@ pub fn main() {\n     let x: int;\n     unsafe {\n         // Treat the output as initialization.\n-        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5u));\n+        asm!(\"mov $1, $0\" : \"=r\"(x) : \"r\"(5_usize));\n     }\n     assert_eq!(x, 5);\n "}, {"sha": "57e9230336c1e082a0b203cca2ec36801f9f1bff", "filename": "src/test/run-pass/associated-types-constant-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -35,5 +35,5 @@ fn get(x: int) -> <int as SignedUnsigned>::Opposite {\n \n fn main() {\n     let x = get(22);\n-    assert_eq!(22u, x);\n+    assert_eq!(22_usize, x);\n }"}, {"sha": "fe24ab6bbeb1b453a21c8ac791820c2f10aeac7f", "filename": "src/test/run-pass/associated-types-return.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -43,7 +43,7 @@ fn foo2<I: Foo>(x: I) -> <I as Foo>::A {\n \n pub fn main() {\n     let a = 42;\n-    assert!(foo2(a) == 42u);\n+    assert!(foo2(a) == 42_usize);\n \n     let a = Bar;\n     assert!(foo2(a) == 43);"}, {"sha": "3b70e941ac50a8c17ad63d9ff52a3b6e54d1f492", "filename": "src/test/run-pass/associated-types-sugar-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -40,5 +40,5 @@ impl<T: Foo> C for B<T> {\n }\n \n pub fn main() {\n-    let z: uint = bar(2, 4u);\n+    let z: uint = bar(2, 4_usize);\n }"}, {"sha": "7c126fc420aac7f6b5e5522a5dd33b00977c9f1c", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -131,19 +131,19 @@ enum Quark<T> {\n enum CLike { A, B, C }\n \n pub fn main() {\n-    let a = &Plus(@Minus(@Val(3u), @Val(10u)), @Plus(@Val(22u), @Val(5u)));\n+    let a = &Plus(@Minus(@Val(3_usize), @Val(10_usize)), @Plus(@Val(22_usize), @Val(5_usize)));\n     test_rbml(a);\n \n-    let a = &Spanned {lo: 0u, hi: 5u, node: 22u};\n+    let a = &Spanned {lo: 0_usize, hi: 5_usize, node: 22_usize};\n     test_rbml(a);\n \n-    let a = &Point {x: 3u, y: 5u};\n+    let a = &Point {x: 3_usize, y: 5_usize};\n     test_rbml(a);\n \n-    let a = &Top(22u);\n+    let a = &Top(22_usize);\n     test_rbml(a);\n \n-    let a = &Bottom(222u);\n+    let a = &Bottom(222_usize);\n     test_rbml(a);\n \n     let a = &A;"}, {"sha": "9e88eb6da6aea813b1f6472ce2206ead59bec651", "filename": "src/test/run-pass/autoderef-method-on-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -16,10 +16,10 @@ trait double {\n }\n \n impl double for uint {\n-    fn double(self: Box<uint>) -> uint { *self * 2u }\n+    fn double(self: Box<uint>) -> uint { *self * 2_usize }\n }\n \n pub fn main() {\n-    let x = box() (box 3u as Box<double>);\n-    assert_eq!(x.double(), 6u);\n+    let x = box() (box 3_usize as Box<double>);\n+    assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "67dd25ddc5389154872251209486312aee9291ef", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -20,10 +20,10 @@ impl double for uint {\n }\n \n impl double for Box<uint> {\n-    fn double(self) -> uint { *self * 2u }\n+    fn double(self) -> uint { *self * 2_usize }\n }\n \n pub fn main() {\n-    let x = box 3u;\n-    assert_eq!(x.double(), 6u);\n+    let x = box 3_usize;\n+    assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "6437c78161c00f72d4fa104533ebc79216330130", "filename": "src/test/run-pass/autoderef-method-twice-but-not-thrice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -16,10 +16,10 @@ trait double {\n }\n \n impl double for Box<uint> {\n-    fn double(self: Box<Box<uint>>) -> uint { **self * 2u }\n+    fn double(self: Box<Box<uint>>) -> uint { **self * 2_usize }\n }\n \n pub fn main() {\n-    let x = box box box box box 3u;\n-    assert_eq!(x.double(), 6u);\n+    let x = box box box box box 3_usize;\n+    assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "8cbc151f0cd24af4930e5eaeb24296789b1983b1", "filename": "src/test/run-pass/autoderef-method-twice.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -16,10 +16,10 @@ trait double {\n }\n \n impl double for uint {\n-    fn double(self: Box<uint>) -> uint { *self * 2u }\n+    fn double(self: Box<uint>) -> uint { *self * 2_usize }\n }\n \n pub fn main() {\n-    let x = box box 3u;\n-    assert_eq!(x.double(), 6u);\n+    let x = box box 3_usize;\n+    assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "c8fa3c9fd5fb505518d1e71e396f891d0321beb1", "filename": "src/test/run-pass/autoderef-method.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -16,10 +16,10 @@ trait double {\n }\n \n impl double for uint {\n-    fn double(self: Box<uint>) -> uint { *self * 2u }\n+    fn double(self: Box<uint>) -> uint { *self * 2_usize }\n }\n \n pub fn main() {\n-    let x = box 3u;\n-    assert_eq!(x.double(), 6u);\n+    let x = box 3_usize;\n+    assert_eq!(x.double(), 6_usize);\n }"}, {"sha": "87157b9334f167f0bf3a540a5dbcd132e9e37613", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -29,6 +29,6 @@ impl Foo for uint {\n }\n \n pub fn main() {\n-    let x = box 3u;\n+    let x = box 3_usize;\n     assert_eq!(x.foo(), \"box 3\".to_string());\n }"}, {"sha": "b36eb4bf2f62e493caea483f280b0344d69cab3a", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -44,9 +44,9 @@ fn test_bool() {\n \n fn test_ptr() {\n     unsafe {\n-        let p1: *const u8 = ::std::mem::transmute(0u);\n-        let p2: *const u8 = ::std::mem::transmute(0u);\n-        let p3: *const u8 = ::std::mem::transmute(1u);\n+        let p1: *const u8 = ::std::mem::transmute(0_usize);\n+        let p2: *const u8 = ::std::mem::transmute(0_usize);\n+        let p3: *const u8 = ::std::mem::transmute(1_usize);\n \n         assert_eq!(p1, p2);\n         assert!(p1 != p3);"}, {"sha": "8418681b6b1903a112a77e71ccd4632723d65f2c", "filename": "src/test/run-pass/bitwise.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitwise.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -11,12 +11,12 @@\n \n #[cfg(any(target_arch = \"x86\", target_arch = \"arm\"))]\n fn target() {\n-    assert_eq!(-1000 as uint >> 3u, 536870787u);\n+    assert_eq!(-1000 as uint >> 3_usize, 536870787_usize);\n }\n \n #[cfg(any(target_arch = \"x86_64\", target_arch = \"aarch64\"))]\n fn target() {\n-    assert_eq!(-1000 as uint >> 3u, 2305843009213693827u);\n+    assert_eq!(-1000 as uint >> 3_usize, 2305843009213693827_usize);\n }\n \n fn general() {\n@@ -29,12 +29,12 @@ fn general() {\n     println!(\"{}\", b);\n     assert_eq!(b, 1);\n     assert_eq!(a, 2);\n-    assert_eq!(!0xf0i & 0xff, 0xf);\n-    assert_eq!(0xf0i | 0xf, 0xff);\n-    assert_eq!(0xfi << 4, 0xf0);\n-    assert_eq!(0xf0i >> 4, 0xf);\n+    assert_eq!(!0xf0_isize & 0xff, 0xf);\n+    assert_eq!(0xf0_isize | 0xf, 0xff);\n+    assert_eq!(0xf_isize << 4, 0xf0);\n+    assert_eq!(0xf0_isize >> 4, 0xf);\n     assert_eq!(-16 >> 2, -4);\n-    assert_eq!(0b1010_1010i | 0b0101_0101, 0xff);\n+    assert_eq!(0b1010_1010_isize | 0b0101_0101, 0xff);\n }\n \n pub fn main() {"}, {"sha": "d319aaa2f8e18b58e80317f319c50413f484d2b6", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -13,6 +13,6 @@ fn asBlock<F>(f: F) -> uint where F: FnOnce() -> uint {\n }\n \n pub fn main() {\n-   let x = asBlock(|| 22u);\n-   assert_eq!(x, 22u);\n+   let x = asBlock(|| 22_usize);\n+   assert_eq!(x, 22_usize);\n }"}, {"sha": "2dbaec8fbb16796e8d072f80aa8e73e005876c6e", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -26,7 +26,7 @@ fn add_int(x: &mut Ints, v: int) {\n \n fn iter_ints<F>(x: &Ints, mut f: F) -> bool where F: FnMut(&int) -> bool {\n     let l = x.values.len();\n-    (0u..l).all(|i| f(&x.values[i]))\n+    (0_usize..l).all(|i| f(&x.values[i]))\n }\n \n pub fn main() {"}, {"sha": "874dbdc662b2946023f0411681727345acd41132", "filename": "src/test/run-pass/byte-literals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fbyte-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbyte-literals.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -53,9 +53,9 @@ pub fn main() {\n \n     let buf = vec!(97u8, 98, 99, 100);\n     assert_eq!(match &buf[0..3] {\n-         b\"def\" => 1u,\n-         b\"abc\" => 2u,\n-         _ => 3u\n+         b\"def\" => 1_usize,\n+         b\"abc\" => 2_usize,\n+         _ => 3_usize\n     }, 2);\n \n     let expected: &[_] = &[97u8, 92u8, 110u8];"}, {"sha": "1a85797fa6db53917f9e8c81f64eb7fb81f20020", "filename": "src/test/run-pass/capture-clauses-boxed-closures.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture-clauses-boxed-closures.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,8 +15,8 @@ fn each<T, F>(x: &[T], mut f: F) where F: FnMut(&T) {\n }\n \n fn main() {\n-    let mut sum = 0u;\n-    let elems = [ 1u, 2, 3, 4, 5 ];\n+    let mut sum = 0_usize;\n+    let elems = [ 1_usize, 2, 3, 4, 5 ];\n     each(&elems, |val| sum += *val);\n     assert_eq!(sum, 15);\n }"}, {"sha": "dd417f1a9eb73ad53fe6d1d0135a6cded719368a", "filename": "src/test/run-pass/capture-clauses-unboxed-closures.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture-clauses-unboxed-closures.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -17,8 +17,8 @@ fn each<'a,T,F:FnMut(&'a T)>(x: &'a [T], mut f: F) {\n }\n \n fn main() {\n-    let mut sum = 0u;\n-    let elems = [ 1u, 2, 3, 4, 5 ];\n+    let mut sum = 0_usize;\n+    let elems = [ 1_usize, 2, 3, 4, 5 ];\n     each(&elems, |val: &uint| sum += *val);\n     assert_eq!(sum, 15);\n }"}, {"sha": "00c600ed006f87d8125fa0ba0da420e3cb526cf2", "filename": "src/test/run-pass/cci_borrow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fcci_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_borrow.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -17,8 +17,8 @@ extern crate cci_borrow_lib;\n use cci_borrow_lib::foo;\n \n pub fn main() {\n-    let p = box 22u;\n+    let p = box 22_usize;\n     let r = foo(&*p);\n     println!(\"r={}\", r);\n-    assert_eq!(r, 22u);\n+    assert_eq!(r, 22_usize);\n }"}, {"sha": "c4b55b9962fb65027cb8482197db1853c66329d7", "filename": "src/test/run-pass/cci_impl_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -17,7 +17,7 @@ pub fn main() {\n     //let bt0 = sys::frame_address();\n     //println!(\"%?\", bt0);\n \n-    3u.to(10u, |i| {\n+    3_usize.to(10_usize, |i| {\n         println!(\"{}\", i);\n \n         //let bt1 = sys::frame_address();"}, {"sha": "2040bd7ad713236ded387435a86988648ff9d6e3", "filename": "src/test/run-pass/cci_no_inline_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_no_inline_exe.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -21,7 +21,7 @@ pub fn main() {\n     // actually working.\n     //let bt0 = sys::frame_address();\n     //println!(\"%?\", bt0);\n-    iter(vec!(1u, 2u, 3u), |i| {\n+    iter(vec!(1_usize, 2_usize, 3_usize), |i| {\n         println!(\"{}\", i);\n \n         //let bt1 = sys::frame_address();"}, {"sha": "9a388c9bc241d99d0dfc0c2db473bb8af978feb3", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -25,6 +25,6 @@ fn print_out(thing: Box<ToString>, expected: String) {\n }\n \n pub fn main() {\n-  let nyan: Box<ToString> = box cat(0u, 2, \"nyan\".to_string()) as Box<ToString>;\n+  let nyan: Box<ToString> = box cat(0_usize, 2, \"nyan\".to_string()) as Box<ToString>;\n   print_out(nyan, \"nyan\".to_string());\n }"}, {"sha": "4f1654e60317a01a271091b952b10c49ab528074", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -22,11 +22,11 @@ struct dog {\n impl dog {\n     fn bark(&mut self) -> int {\n       println!(\"Woof {} {}\", self.barks, self.volume);\n-      self.barks += 1u;\n-      if self.barks % 3u == 0u {\n+      self.barks += 1_usize;\n+      if self.barks % 3_usize == 0_usize {\n           self.volume += 1;\n       }\n-      if self.barks % 10u == 0u {\n+      if self.barks % 10_usize == 0_usize {\n           self.volume -= 2;\n       }\n       println!(\"Grrr {} {}\", self.barks, self.volume);\n@@ -43,7 +43,7 @@ impl noisy for dog {\n fn dog() -> dog {\n     dog {\n         volume: 0,\n-        barks: 0u\n+        barks: 0_usize\n     }\n }\n \n@@ -70,8 +70,8 @@ impl cat {\n impl cat {\n     fn meow(&mut self) -> uint {\n         println!(\"Meow\");\n-        self.meows += 1u;\n-        if self.meows % 5u == 0u {\n+        self.meows += 1_usize;\n+        if self.meows % 5_usize == 0_usize {\n             self.how_hungry += 1;\n         }\n         self.meows\n@@ -88,14 +88,14 @@ fn cat(in_x: uint, in_y: int, in_name: String) -> cat {\n \n \n fn annoy_neighbors(critter: &mut noisy) {\n-    for _i in 0u..10 { critter.speak(); }\n+    for _i in 0_usize..10 { critter.speak(); }\n }\n \n pub fn main() {\n-  let mut nyan: cat = cat(0u, 2, \"nyan\".to_string());\n+  let mut nyan: cat = cat(0_usize, 2, \"nyan\".to_string());\n   let mut whitefang: dog = dog();\n   annoy_neighbors(&mut nyan);\n   annoy_neighbors(&mut whitefang);\n-  assert_eq!(nyan.meow_count(), 10u);\n+  assert_eq!(nyan.meow_count(), 10_usize);\n   assert_eq!(whitefang.volume, 1);\n }"}, {"sha": "476594c270ec3a2ed781ac81d71abc06fd62754c", "filename": "src/test/run-pass/class-cast-to-trait.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -42,8 +42,8 @@ impl cat {\n impl cat {\n     fn meow(&mut self) {\n       println!(\"Meow\");\n-      self.meows += 1u;\n-      if self.meows % 5u == 0u {\n+      self.meows += 1_usize;\n+      if self.meows % 5_usize == 0_usize {\n           self.how_hungry += 1;\n       }\n     }\n@@ -59,7 +59,7 @@ fn cat(in_x : uint, in_y : int, in_name: String) -> cat {\n \n \n pub fn main() {\n-    let mut nyan = cat(0u, 2, \"nyan\".to_string());\n+    let mut nyan = cat(0_usize, 2, \"nyan\".to_string());\n     let mut nyan: &mut noisy = &mut nyan;\n     nyan.speak();\n }"}, {"sha": "14247ad775487cc7f7dc9d0c6f41d8376608bd63", "filename": "src/test/run-pass/class-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-dtor.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -21,7 +21,7 @@ impl Drop for cat {\n \n fn cat(done: extern fn(uint)) -> cat {\n     cat {\n-        meows: 0u,\n+        meows: 0_usize,\n         done: done\n     }\n }"}, {"sha": "4c7d0e6951ab64c33749a94710b612bba065f7ea", "filename": "src/test/run-pass/class-exports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-exports.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -27,7 +27,7 @@ mod kitty {\n     pub fn cat(in_name: String) -> cat {\n         cat {\n             name: in_name,\n-            meows: 0u\n+            meows: 0_usize\n         }\n     }\n }"}, {"sha": "c3ced512afae4c01beee22a193b1fae1d1ef43a2", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -103,11 +103,11 @@ impl<T> cat<T> {\n \n pub fn main() {\n     let mut nyan: cat<String> = cat::new(0, 2, \"nyan\".to_string());\n-    for _ in 1u..5 { nyan.speak(); }\n+    for _ in 1_usize..5 { nyan.speak(); }\n     assert!(*nyan.find(&1).unwrap() == \"nyan\".to_string());\n     assert_eq!(nyan.find(&10), None);\n     let mut spotty: cat<cat_type> = cat::new(2, 57, cat_type::tuxedo);\n-    for _ in 0u..6 { spotty.speak(); }\n+    for _ in 0_usize..6 { spotty.speak(); }\n     assert_eq!(spotty.len(), 8);\n     assert!((spotty.contains_key(&2)));\n     assert_eq!(spotty.get(&3), &cat_type::tuxedo);"}, {"sha": "bd05221b8c7534142b7abadb4765d5fa8d019b3c", "filename": "src/test/run-pass/class-implement-trait-cross-crate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -40,8 +40,8 @@ impl noisy for cat {\n impl cat {\n     fn meow(&mut self) {\n         println!(\"Meow\");\n-        self.meows += 1u;\n-        if self.meows % 5u == 0u {\n+        self.meows += 1_usize;\n+        if self.meows % 5_usize == 0_usize {\n             self.how_hungry += 1;\n         }\n     }\n@@ -57,9 +57,9 @@ fn cat(in_x : uint, in_y : int, in_name: String) -> cat {\n \n \n pub fn main() {\n-  let mut nyan = cat(0u, 2, \"nyan\".to_string());\n+  let mut nyan = cat(0_usize, 2, \"nyan\".to_string());\n   nyan.eat();\n   assert!((!nyan.eat()));\n-  for _ in 1u..10u { nyan.speak(); };\n+  for _ in 1_usize..10_usize { nyan.speak(); };\n   assert!((nyan.eat()));\n }"}, {"sha": "87e6e5f675e995332da759cfc4a24231eb32f9a3", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -24,8 +24,8 @@ struct cat {\n impl cat {\n     fn meow(&mut self) {\n         println!(\"Meow\");\n-        self.meows += 1u;\n-        if self.meows % 5u == 0u {\n+        self.meows += 1_usize;\n+        if self.meows % 5_usize == 0_usize {\n             self.how_hungry += 1;\n         }\n     }\n@@ -62,10 +62,10 @@ fn make_speak<C:noisy>(mut c: C) {\n }\n \n pub fn main() {\n-    let mut nyan = cat(0u, 2, \"nyan\".to_string());\n+    let mut nyan = cat(0_usize, 2, \"nyan\".to_string());\n     nyan.eat();\n     assert!((!nyan.eat()));\n-    for _ in 1u..10u {\n+    for _ in 1_usize..10_usize {\n         make_speak(nyan.clone());\n     }\n }"}, {"sha": "47cc500e44ecb1ff05c63652ec8c87727c85625d", "filename": "src/test/run-pass/class-method-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -13,8 +13,8 @@ extern crate cci_class_2;\n use cci_class_2::kitties::cat;\n \n pub fn main() {\n-  let nyan : cat = cat(52u, 99);\n-  let kitty = cat(1000u, 2);\n+  let nyan : cat = cat(52_usize, 99);\n+  let kitty = cat(1000_usize, 2);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n   nyan.speak();"}, {"sha": "d62a726dcdd55bb6d077508c7560bf7f05f30807", "filename": "src/test/run-pass/class-methods-cross-crate.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -13,10 +13,10 @@ extern crate cci_class_3;\n use cci_class_3::kitties::cat;\n \n pub fn main() {\n-    let mut nyan : cat = cat(52u, 99);\n-    let kitty = cat(1000u, 2);\n+    let mut nyan : cat = cat(52_usize, 99);\n+    let kitty = cat(1000_usize, 2);\n     assert_eq!(nyan.how_hungry, 99);\n     assert_eq!(kitty.how_hungry, 2);\n     nyan.speak();\n-    assert_eq!(nyan.meow_count(), 53u);\n+    assert_eq!(nyan.meow_count(), 53_usize);\n }"}, {"sha": "18fb03ec935ed59fc2ee67246da1ffed3bb0802a", "filename": "src/test/run-pass/class-methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,7 +15,7 @@ struct cat {\n }\n \n impl cat {\n-    pub fn speak(&mut self) { self.meows += 1u; }\n+    pub fn speak(&mut self) { self.meows += 1_usize; }\n     pub fn meow_count(&mut self) -> uint { self.meows }\n }\n \n@@ -27,10 +27,10 @@ fn cat(in_x: uint, in_y: int) -> cat {\n }\n \n pub fn main() {\n-  let mut nyan: cat = cat(52u, 99);\n-  let kitty = cat(1000u, 2);\n+  let mut nyan: cat = cat(52_usize, 99);\n+  let kitty = cat(1000_usize, 2);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n   nyan.speak();\n-  assert_eq!(nyan.meow_count(), 53u);\n+  assert_eq!(nyan.meow_count(), 53_usize);\n }"}, {"sha": "edbbc4f5b342181dc85d39591065ab035de776a6", "filename": "src/test/run-pass/class-poly-methods-cross-crate.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -13,12 +13,12 @@ extern crate cci_class_6;\n use cci_class_6::kitties::cat;\n \n pub fn main() {\n-  let mut nyan : cat<char> = cat::<char>(52u, 99, vec!('p'));\n-  let mut kitty = cat(1000u, 2, vec!(\"tabby\".to_string()));\n+  let mut nyan : cat<char> = cat::<char>(52_usize, 99, vec!('p'));\n+  let mut kitty = cat(1000_usize, 2, vec!(\"tabby\".to_string()));\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n-  nyan.speak(vec!(1u,2u,3u));\n-  assert_eq!(nyan.meow_count(), 55u);\n+  nyan.speak(vec!(1_usize,2_usize,3_usize));\n+  assert_eq!(nyan.meow_count(), 55_usize);\n   kitty.speak(vec!(\"meow\".to_string(), \"mew\".to_string(), \"purr\".to_string(), \"chirp\".to_string()));\n-  assert_eq!(kitty.meow_count(), 1004u);\n+  assert_eq!(kitty.meow_count(), 1004_usize);\n }"}, {"sha": "b529b0a077210b62012c2e9c5697b06d6941b518", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -32,12 +32,12 @@ fn cat<U>(in_x : uint, in_y : int, in_info: Vec<U> ) -> cat<U> {\n }\n \n pub fn main() {\n-  let mut nyan : cat<int> = cat::<int>(52u, 99, vec!(9));\n-  let mut kitty = cat(1000u, 2, vec!(\"tabby\".to_string()));\n+  let mut nyan : cat<int> = cat::<int>(52_usize, 99, vec!(9));\n+  let mut kitty = cat(1000_usize, 2, vec!(\"tabby\".to_string()));\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n   nyan.speak(vec!(1,2,3));\n-  assert_eq!(nyan.meow_count(), 55u);\n+  assert_eq!(nyan.meow_count(), 55_usize);\n   kitty.speak(vec!(\"meow\".to_string(), \"mew\".to_string(), \"purr\".to_string(), \"chirp\".to_string()));\n-  assert_eq!(kitty.meow_count(), 1004u);\n+  assert_eq!(kitty.meow_count(), 1004_usize);\n }"}, {"sha": "575c32baeac24782509cec1adde66b5fe4b377af", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -39,8 +39,8 @@ impl cat {\n impl cat {\n     fn meow(&mut self) {\n         println!(\"Meow\");\n-        self.meows += 1u;\n-        if self.meows % 5u == 0u {\n+        self.meows += 1_usize;\n+        if self.meows % 5_usize == 0_usize {\n             self.how_hungry += 1;\n         }\n     }\n@@ -67,6 +67,6 @@ fn print_out(thing: Box<ToString>, expected: String) {\n }\n \n pub fn main() {\n-  let nyan: Box<ToString> = box cat(0u, 2, \"nyan\".to_string()) as Box<ToString>;\n+  let nyan: Box<ToString> = box cat(0_usize, 2, \"nyan\".to_string()) as Box<ToString>;\n   print_out(nyan, \"nyan\".to_string());\n }"}, {"sha": "68457095944e30535e2de4df62c6c0785ef97539", "filename": "src/test/run-pass/class-typarams.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-typarams.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,7 +15,7 @@ struct cat<U> {\n }\n \n impl<U> cat<U> {\n-    pub fn speak(&mut self) { self.meows += 1u; }\n+    pub fn speak(&mut self) { self.meows += 1_usize; }\n     pub fn meow_count(&mut self) -> uint { self.meows }\n }\n \n@@ -28,6 +28,6 @@ fn cat<U>(in_x : uint, in_y : int) -> cat<U> {\n \n \n pub fn main() {\n-  let _nyan : cat<int> = cat::<int>(52u, 99);\n-  //  let mut kitty = cat(1000u, 2);\n+  let _nyan : cat<int> = cat::<int>(52_usize, 99);\n+  //  let mut kitty = cat(1000_usize, 2);\n }"}, {"sha": "aae17abcc5fc65d901e4bdc921e141ff57c7d59c", "filename": "src/test/run-pass/classes-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -13,9 +13,9 @@ extern crate cci_class_4;\n use cci_class_4::kitties::cat;\n \n pub fn main() {\n-    let mut nyan = cat(0u, 2, \"nyan\".to_string());\n+    let mut nyan = cat(0_usize, 2, \"nyan\".to_string());\n     nyan.eat();\n     assert!((!nyan.eat()));\n-    for _ in 1u..10u { nyan.speak(); };\n+    for _ in 1_usize..10_usize { nyan.speak(); };\n     assert!((nyan.eat()));\n }"}, {"sha": "8037d77807d1d76e0397328d0911452cdd55e4f2", "filename": "src/test/run-pass/classes-simple-cross-crate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -13,8 +13,8 @@ extern crate cci_class;\n use cci_class::kitties::cat;\n \n pub fn main() {\n-  let nyan : cat = cat(52u, 99);\n-  let kitty = cat(1000u, 2);\n+  let nyan : cat = cat(52_usize, 99);\n+  let kitty = cat(1000_usize, 2);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n }"}, {"sha": "b15d6544fed29ddea62df03404cf82d2ae6056bb", "filename": "src/test/run-pass/classes-simple-method.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -26,8 +26,8 @@ fn cat(in_x : uint, in_y : int) -> cat {\n }\n \n pub fn main() {\n-  let mut nyan : cat = cat(52u, 99);\n-  let kitty = cat(1000u, 2);\n+  let mut nyan : cat = cat(52_usize, 99);\n+  let kitty = cat(1000_usize, 2);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n   nyan.speak();"}, {"sha": "9bf8df3ce4bc99182b2778961fcff012ddffa7a0", "filename": "src/test/run-pass/classes-simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -22,8 +22,8 @@ fn cat(in_x : uint, in_y : int) -> cat {\n }\n \n pub fn main() {\n-  let nyan : cat = cat(52u, 99);\n-  let kitty = cat(1000u, 2);\n+  let nyan : cat = cat(52_usize, 99);\n+  let kitty = cat(1000_usize, 2);\n   assert_eq!(nyan.how_hungry, 99);\n   assert_eq!(kitty.how_hungry, 2);\n }"}, {"sha": "4fabca491be93f88eda6ef8005dad5934bd31280", "filename": "src/test/run-pass/classes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -33,8 +33,8 @@ impl cat {\n impl cat {\n     fn meow(&mut self) {\n         println!(\"Meow\");\n-        self.meows += 1u;\n-        if self.meows % 5u == 0u {\n+        self.meows += 1_usize;\n+        if self.meows % 5_usize == 0_usize {\n             self.how_hungry += 1;\n         }\n     }\n@@ -49,9 +49,9 @@ fn cat(in_x : uint, in_y : int, in_name: String) -> cat {\n }\n \n pub fn main() {\n-  let mut nyan = cat(0u, 2, \"nyan\".to_string());\n+  let mut nyan = cat(0_usize, 2, \"nyan\".to_string());\n   nyan.eat();\n   assert!((!nyan.eat()));\n-  for _ in 1u..10u { nyan.speak(); };\n+  for _ in 1_usize..10_usize { nyan.speak(); };\n   assert!((nyan.eat()));\n }"}, {"sha": "ade18a71259678de4440b813b2837659cfc358af", "filename": "src/test/run-pass/coerce-reborrow-imm-vec-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -18,7 +18,7 @@ fn bip(v: &[uint]) -> Vec<uint> {\n }\n \n pub fn main() {\n-    let mut the_vec = vec!(1u, 2, 3, 100);\n+    let mut the_vec = vec!(1_usize, 2, 3, 100);\n     assert_eq!(the_vec.clone(), bar(&mut the_vec));\n     assert_eq!(the_vec.clone(), bip(&the_vec));\n }"}, {"sha": "9f980e161b0cfe0e631e527266db3853bfab566b", "filename": "src/test/run-pass/coherence-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fcoherence-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fcoherence-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-where-clause.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -39,7 +39,7 @@ where M : MyTrait + Debug + PartialEq\n }\n \n pub fn main() {\n-    test_eq(0u, 0u);\n+    test_eq(0_usize, 0_usize);\n \n     let value = MyType { dummy: 256 + 22 };\n     test_eq(value, value);"}, {"sha": "b0c3a5922b6344f86e7f7dbaf88ce44617569c73", "filename": "src/test/run-pass/concat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconcat.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,12 +15,12 @@ pub fn main() {\n     assert_eq!(concat!(\"qux\", \"quux\",).to_string(), \"quxquux\".to_string());\n \n     assert_eq!(\n-        concat!(1, 2, 3u, 4f32, 4.0, 'a', true),\n+        concat!(1, 2, 3_usize, 4f32, 4.0, 'a', true),\n         \"12344.0atrue\"\n     );\n \n     assert!(match \"12344.0atrue\" {\n-        concat!(1, 2, 3u, 4f32, 4.0, 'a', true) => true,\n+        concat!(1, 2, 3_usize, 4f32, 4.0, 'a', true) => true,\n         _ => false\n     })\n }"}, {"sha": "93a7d3e1c36aa1bf095a89ac9f313e0f1468e861", "filename": "src/test/run-pass/const-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-bound.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -23,7 +23,7 @@ pub fn main() {\n     foo(\"hi\".to_string());\n     foo(~[1, 2, 3]);\n     foo(F{field: 42});\n-    foo((1, 2u));\n+    foo((1, 2_usize));\n     foo(@1);*/\n     foo(box 1);\n }"}, {"sha": "d8b3371325b2f4944774db5390848e583807dca8", "filename": "src/test/run-pass/crate-leading-sep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fcrate-leading-sep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fcrate-leading-sep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-leading-sep.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     use ::std::mem;\n-    mem::drop(2u);\n+    mem::drop(2_usize);\n }"}, {"sha": "8018f681f3833fcd89e270184f86ca0600c2f054", "filename": "src/test/run-pass/double-ref.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fdouble-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fdouble-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdouble-ref.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -9,33 +9,33 @@\n // except according to those terms.\n \n fn check_expr() {\n-    let _:         & uint =     &1u;\n-    let _:       & & uint =    &&1u;\n-    let _:     & & & uint =   &&&1u;\n-    let _:     & & & uint =  & &&1u;\n-    let _:   & & & & uint =  &&&&1u;\n-    let _:   & & & & uint = & &&&1u;\n-    let _: & & & & & uint = &&&&&1u;\n+    let _:         & uint =     &1_usize;\n+    let _:       & & uint =    &&1_usize;\n+    let _:     & & & uint =   &&&1_usize;\n+    let _:     & & & uint =  & &&1_usize;\n+    let _:   & & & & uint =  &&&&1_usize;\n+    let _:   & & & & uint = & &&&1_usize;\n+    let _: & & & & & uint = &&&&&1_usize;\n }\n \n fn check_ty() {\n-    let _:     &uint =         & 1u;\n-    let _:    &&uint =       & & 1u;\n-    let _:   &&&uint =     & & & 1u;\n-    let _:  & &&uint =     & & & 1u;\n-    let _:  &&&&uint =   & & & & 1u;\n-    let _: & &&&uint =   & & & & 1u;\n-    let _: &&&&&uint = & & & & & 1u;\n+    let _:     &uint =         & 1_usize;\n+    let _:    &&uint =       & & 1_usize;\n+    let _:   &&&uint =     & & & 1_usize;\n+    let _:  & &&uint =     & & & 1_usize;\n+    let _:  &&&&uint =   & & & & 1_usize;\n+    let _: & &&&uint =   & & & & 1_usize;\n+    let _: &&&&&uint = & & & & & 1_usize;\n }\n \n fn check_pat() {\n-    let     &_ =         & 1u;\n-    let    &&_ =       & & 1u;\n-    let   &&&_ =     & & & 1u;\n-    let  & &&_ =     & & & 1u;\n-    let  &&&&_ =   & & & & 1u;\n-    let & &&&_ =   & & & & 1u;\n-    let &&&&&_ = & & & & & 1u;\n+    let     &_ =         & 1_usize;\n+    let    &&_ =       & & 1_usize;\n+    let   &&&_ =     & & & 1_usize;\n+    let  & &&_ =     & & & 1_usize;\n+    let  &&&&_ =   & & & & 1_usize;\n+    let & &&&_ =   & & & & 1_usize;\n+    let &&&&&_ = & & & & & 1_usize;\n }\n \n pub fn main() {}"}, {"sha": "f94da9fc747e695fb850e7d2f8f5645df66617d5", "filename": "src/test/run-pass/drop-trait-enum.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -62,7 +62,7 @@ pub fn main() {\n \n     let (sender, receiver) = channel();\n     {\n-        let v = Foo::NestedVariant(box 42u, SendOnDrop { sender: sender.clone() }, sender);\n+        let v = Foo::NestedVariant(box 42_usize, SendOnDrop { sender: sender.clone() }, sender);\n     }\n     assert_eq!(receiver.recv().unwrap(), Message::DestructorRan);\n     assert_eq!(receiver.recv().unwrap(), Message::Dropped);\n@@ -79,10 +79,12 @@ pub fn main() {\n     let (sender, receiver) = channel();\n     let t = {\n         thread::spawn(move|| {\n-            let mut v = Foo::NestedVariant(box 42u, SendOnDrop {\n+            let mut v = Foo::NestedVariant(box 42usize, SendOnDrop {\n                 sender: sender.clone()\n             }, sender.clone());\n-            v = Foo::NestedVariant(box 42u, SendOnDrop { sender: sender.clone() }, sender.clone());\n+            v = Foo::NestedVariant(box 42_usize,\n+                                   SendOnDrop { sender: sender.clone() },\n+                                   sender.clone());\n             v = Foo::SimpleVariant(sender.clone());\n             v = Foo::FailingVariant { on_drop: SendOnDrop { sender: sender } };\n         })"}, {"sha": "b9e08e47b378db61a0913fbd9a5b974deecf0ab1", "filename": "src/test/run-pass/extern-stress.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fextern-stress.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-stress.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -41,7 +41,7 @@ fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n }\n \n pub fn main() {\n-    (0u..100).map(|_| {\n+    (0_usize..100).map(|_| {\n         Thread::scoped(move|| {\n             assert_eq!(count(5), 16);\n         })"}, {"sha": "80428d787f21c5b88b6fb14617e8ba697b794f65", "filename": "src/test/run-pass/extern-yield.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fextern-yield.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-yield.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -38,7 +38,7 @@ fn count(n: libc::uintptr_t) -> libc::uintptr_t {\n }\n \n pub fn main() {\n-    (0..10u).map(|i| {\n+    (0..10_usize).map(|i| {\n         Thread::scoped(move|| {\n             let result = count(5);\n             println!(\"result = {}\", result);"}, {"sha": "592ab7d0e6e36a1e292ccade23cfa30e35f9b8dc", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -32,5 +32,5 @@ fn strlen(str: String) -> uint {\n \n pub fn main() {\n     let len = strlen(\"Rust\".to_string());\n-    assert_eq!(len, 4u);\n+    assert_eq!(len, 4_usize);\n }"}, {"sha": "a15a176c2238d576f1ec0ff7d4b4d9365496c8cd", "filename": "src/test/run-pass/format-no-std.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fformat-no-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fformat-no-std.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -20,13 +20,13 @@ use collections::string::ToString;\n \n #[start]\n fn start(_argc: int, _argv: *const *const u8) -> int {\n-    let s = format!(\"{}\", 1i);\n+    let s = format!(\"{}\", 1_isize);\n     assert_eq!(s, \"1\".to_string());\n \n     let s = format!(\"test\");\n     assert_eq!(s, \"test\".to_string());\n \n-    let s = format!(\"{test}\", test=3i);\n+    let s = format!(\"{test}\", test=3_isize);\n     assert_eq!(s, \"3\".to_string());\n \n     let s = format!(\"hello {}\", \"world\");"}, {"sha": "d2a1a3c71a5fc1d365c9094e3d426b1262acab0f", "filename": "src/test/run-pass/if-check.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fif-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fif-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-check.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n fn even(x: uint) -> bool {\n-    if x < 2u {\n+    if x < 2_usize {\n         return false;\n-    } else if x == 2u { return true; } else { return even(x - 2u); }\n+    } else if x == 2_usize { return true; } else { return even(x - 2_usize); }\n }\n \n fn foo(x: uint) {\n@@ -22,4 +22,4 @@ fn foo(x: uint) {\n     }\n }\n \n-pub fn main() { foo(2u); }\n+pub fn main() { foo(2_usize); }"}, {"sha": "2d2f77b099151037d97b4784f29df0d96cfcfe9a", "filename": "src/test/run-pass/if-let.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fif-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fif-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fif-let.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -23,14 +23,14 @@ pub fn main() {\n     let clause: uint;\n     if let None = Some(\"test\") {\n         clause = 1;\n-    } else if 4u > 5 {\n+    } else if 4_usize > 5 {\n         clause = 2;\n     } else if let Ok(()) = Err::<(),&'static str>(\"test\") {\n         clause = 3;\n     } else {\n         clause = 4;\n     }\n-    assert_eq!(clause, 4u);\n+    assert_eq!(clause, 4_usize);\n \n     if 3 > 4 {\n         panic!(\"bad math\");\n@@ -57,9 +57,9 @@ pub fn main() {\n \n     if false {\n         panic!(\"wat\");\n-    } else if let a@Foo::Two(_) = Foo::Two(42u) {\n+    } else if let a@Foo::Two(_) = Foo::Two(42_usize) {\n         if let Foo::Two(b) = a {\n-            assert_eq!(b, 42u);\n+            assert_eq!(b, 42_usize);\n         } else {\n             panic!(\"panic in nested if-let\");\n         }"}, {"sha": "ab83fb90d3f25ab3f47cdea68d77d7f4021a7b4b", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -60,15 +60,15 @@ pub fn main() {\n     t!(format!(\"{}\", true), \"true\");\n     t!(format!(\"{}\", '\u2603'), \"\u2603\");\n     t!(format!(\"{}\", 10), \"10\");\n-    t!(format!(\"{}\", 10u), \"10\");\n+    t!(format!(\"{}\", 10_usize), \"10\");\n     t!(format!(\"{:?}\", '\u2603'), \"'\\\\u{2603}'\");\n     t!(format!(\"{:?}\", 10), \"10\");\n-    t!(format!(\"{:?}\", 10u), \"10\");\n+    t!(format!(\"{:?}\", 10_usize), \"10\");\n     t!(format!(\"{:?}\", \"true\"), \"\\\"true\\\"\");\n     t!(format!(\"{:?}\", \"foo\\nbar\"), \"\\\"foo\\\\nbar\\\"\");\n-    t!(format!(\"{:o}\", 10u), \"12\");\n-    t!(format!(\"{:x}\", 10u), \"a\");\n-    t!(format!(\"{:X}\", 10u), \"A\");\n+    t!(format!(\"{:o}\", 10_usize), \"12\");\n+    t!(format!(\"{:x}\", 10_usize), \"a\");\n+    t!(format!(\"{:X}\", 10_usize), \"A\");\n     t!(format!(\"{}\", \"foo\"), \"foo\");\n     t!(format!(\"{}\", \"foo\".to_string()), \"foo\");\n     t!(format!(\"{:p}\", 0x1234 as *const isize), \"0x1234\");\n@@ -153,7 +153,7 @@ pub fn main() {\n     // make sure that format! doesn't cause spurious unused-unsafe warnings when\n     // it's inside of an outer unsafe block\n     unsafe {\n-        let a: isize = ::std::mem::transmute(3u);\n+        let a: isize = ::std::mem::transmute(3_usize);\n         format!(\"{}\", a);\n     }\n "}, {"sha": "ea8825d22dffde280dc3530abb4f92007aaa114c", "filename": "src/test/run-pass/integer-literal-radix.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Finteger-literal-radix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Finteger-literal-radix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Finteger-literal-radix.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n pub fn main() {\n-    let a = 0xBEEFi;\n-    let b = 0o755i;\n-    let c = 0b10101i;\n-    let d = -0xBEEFi;\n-    let e = -0o755i;\n-    let f = -0b10101i;\n+    let a = 0xBEEF_isize;\n+    let b = 0o755_isize;\n+    let c = 0b10101_isize;\n+    let d = -0xBEEF_isize;\n+    let e = -0o755_isize;\n+    let f = -0b10101_isize;\n \n     assert_eq!(a, 48879);\n     assert_eq!(b, 493);"}, {"sha": "f852bac404861a8d9683e3fa47c2c7412a773837", "filename": "src/test/run-pass/intrinsic-alignment.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsic-alignment.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -27,17 +27,17 @@ mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub fn main() {\n         unsafe {\n-            assert_eq!(::rusti::pref_align_of::<u64>(), 8u);\n-            assert_eq!(::rusti::min_align_of::<u64>(), 4u);\n+            assert_eq!(::rusti::pref_align_of::<u64>(), 8_usize);\n+            assert_eq!(::rusti::min_align_of::<u64>(), 4_usize);\n         }\n     }\n \n     #[main]\n     #[cfg(any(target_arch = \"x86_64\", target_arch = \"arm\", target_arch = \"aarch64\"))]\n     pub fn main() {\n         unsafe {\n-            assert_eq!(::rusti::pref_align_of::<u64>(), 8u);\n-            assert_eq!(::rusti::min_align_of::<u64>(), 8u);\n+            assert_eq!(::rusti::pref_align_of::<u64>(), 8_usize);\n+            assert_eq!(::rusti::min_align_of::<u64>(), 8_usize);\n         }\n     }\n }\n@@ -48,17 +48,17 @@ mod m {\n     #[cfg(target_arch = \"x86\")]\n     pub fn main() {\n         unsafe {\n-            assert_eq!(::rusti::pref_align_of::<u64>(), 8u);\n-            assert_eq!(::rusti::min_align_of::<u64>(), 8u);\n+            assert_eq!(::rusti::pref_align_of::<u64>(), 8_usize);\n+            assert_eq!(::rusti::min_align_of::<u64>(), 8_usize);\n         }\n     }\n \n     #[main]\n     #[cfg(target_arch = \"x86_64\")]\n     pub fn main() {\n         unsafe {\n-            assert_eq!(::rusti::pref_align_of::<u64>(), 8u);\n-            assert_eq!(::rusti::min_align_of::<u64>(), 8u);\n+            assert_eq!(::rusti::pref_align_of::<u64>(), 8_usize);\n+            assert_eq!(::rusti::min_align_of::<u64>(), 8_usize);\n         }\n     }\n }\n@@ -69,8 +69,8 @@ mod m {\n     #[cfg(any(target_arch = \"arm\", target_arch = \"aarch64\"))]\n     pub fn main() {\n         unsafe {\n-            assert_eq!(::rusti::pref_align_of::<u64>(), 8u);\n-            assert_eq!(::rusti::min_align_of::<u64>(), 8u);\n+            assert_eq!(::rusti::pref_align_of::<u64>(), 8_usize);\n+            assert_eq!(::rusti::min_align_of::<u64>(), 8_usize);\n         }\n     }\n }"}, {"sha": "d9bae6886fa2e6907b59721da70bc20c2495830c", "filename": "src/test/run-pass/issue-11736.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-11736.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11736.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,7 +15,7 @@ use std::num::Float;\n \n fn main() {\n     // Generate sieve of Eratosthenes for n up to 1e6\n-    let n = 1000000u;\n+    let n = 1000000_usize;\n     let mut sieve = Bitv::from_elem(n+1, true);\n     let limit: uint = (n as f32).sqrt() as uint;\n     for i in 2..limit+1 {"}, {"sha": "b7dc98b92e0db21feed21496f54a6ef675e43711", "filename": "src/test/run-pass/issue-12909.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-12909.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-12909.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12909.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,7 +15,7 @@ fn copy<T: Copy>(&x: &T) -> T {\n }\n \n fn main() {\n-    let arr = [(1, 1u), (2, 2), (3, 3)];\n+    let arr = [(1, 1_usize), (2, 2), (3, 3)];\n \n     let v1: Vec<&_> = arr.iter().collect();\n     let v2: Vec<_> = arr.iter().map(copy).collect();"}, {"sha": "a8343712034807fcc5f3480dba8550099a3cb964", "filename": "src/test/run-pass/issue-13352.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-13352.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-13352.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13352.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -18,5 +18,5 @@ fn main() {\n     foo(loop {\n         unsafe { libc::exit(0 as libc::c_int); }\n     });\n-    2u + (loop {});\n+    2_usize + (loop {});\n }"}, {"sha": "6c9c7e2fd3f141978aa78d1c68b4bf36c3cbb86b", "filename": "src/test/run-pass/issue-14393.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-14393.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-14393.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14393.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n fn main() {\n-    match (\"\", 1u) {\n-        (_, 42u) => (),\n+    match (\"\", 1_usize) {\n+        (_, 42_usize) => (),\n         (\"\", _) => (),\n         _ => ()\n     }"}, {"sha": "24340ac3f13d7013e66e9018e1d81122b38ca9fe", "filename": "src/test/run-pass/issue-15189.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-15189.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-15189.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15189.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,7 +15,7 @@ macro_rules! third {\n }\n \n fn main() {\n-    let x = vec!(10u,11u,12u,13u);\n+    let x = vec!(10_usize,11_usize,12_usize,13_usize);\n     let t = third!(x);\n-    assert_eq!(t,12u);\n+    assert_eq!(t,12_usize);\n }"}, {"sha": "a6b8a04eeb60ed63a88133466eb4933fa09885d8", "filename": "src/test/run-pass/issue-15673.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-15673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15673.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -11,5 +11,5 @@\n use std::iter::AdditiveIterator;\n fn main() {\n     let x: [u64; 3] = [1, 2, 3];\n-    assert_eq!(6, (0us..3).map(|i| x[i]).sum());\n+    assert_eq!(6, (0_usize..3).map(|i| x[i]).sum());\n }"}, {"sha": "e66ac8ff53c1f76e6511cd13b9e8987cd31baa44", "filename": "src/test/run-pass/issue-15734.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15734.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -53,12 +53,12 @@ impl<T, M: Index<(uint, uint), Output=T>> Index<uint> for Row<M> {\n }\n \n fn main() {\n-    let m = Mat::new(vec!(1u, 2, 3, 4, 5, 6), 3);\n+    let m = Mat::new(vec!(1_usize, 2, 3, 4, 5, 6), 3);\n     let r = m.row(1);\n \n     assert!(r.index(&2) == &6);\n     assert!(r[2] == 6);\n-    assert!(r[2u] == 6u);\n+    assert!(r[2_usize] == 6_usize);\n     assert!(6 == r[2]);\n \n     let e = r[2];"}, {"sha": "18e1918aea44747e945eb0056b618300c084b109", "filename": "src/test/run-pass/issue-15881-model-lexer-dotdotdot.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-15881-model-lexer-dotdotdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-15881-model-lexer-dotdotdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15881-model-lexer-dotdotdot.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -11,24 +11,24 @@\n // regression test for the model lexer handling the DOTDOTDOT syntax (#15877)\n \n pub fn main() {\n-    match 5u {\n-      1u...5u => {}\n+    match 5_usize {\n+      1_usize...5_usize => {}\n       _ => panic!(\"should match range\"),\n     }\n-    match 5u {\n-      6u...7u => panic!(\"shouldn't match range\"),\n+    match 5_usize {\n+      6_usize...7_usize => panic!(\"shouldn't match range\"),\n       _ => {}\n     }\n-    match 5u {\n-      1u => panic!(\"should match non-first range\"),\n-      2u...6u => {}\n+    match 5_usize {\n+      1_usize => panic!(\"should match non-first range\"),\n+      2_usize...6_usize => {}\n       _ => panic!(\"math is broken\")\n     }\n     match 'c' {\n       'a'...'z' => {}\n       _ => panic!(\"should suppport char ranges\")\n     }\n-    match -3i {\n+    match -3_isize {\n       -7...5 => {}\n       _ => panic!(\"should match signed range\")\n     }"}, {"sha": "45e70f59f3397715a704ee054d3bf01c55150c3a", "filename": "src/test/run-pass/issue-17662.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-17662.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-17662.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17662.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,7 +15,7 @@ extern crate \"issue-17662\" as i;\n struct Bar<'a>;\n \n impl<'a> i::Foo<'a, uint> for Bar<'a> {\n-    fn foo(&self) -> uint { 5u }\n+    fn foo(&self) -> uint { 5_usize }\n }\n \n pub fn main() {"}, {"sha": "a7d9e6a4be6d840596171e06e354e18bb9afd000", "filename": "src/test/run-pass/issue-17877.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-17877.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-17877.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17877.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -10,12 +10,12 @@\n \n fn main() {\n     assert_eq!(match [0u8; 1024] {\n-        _ => 42u,\n-    }, 42u);\n+        _ => 42_usize,\n+    }, 42_usize);\n \n     assert_eq!(match [0u8; 1024] {\n-        [1, _..] => 0u,\n-        [0, _..] => 1u,\n-        _ => 2u\n-    }, 1u);\n+        [1, _..] => 0_usize,\n+        [0, _..] => 1_usize,\n+        _ => 2_usize\n+    }, 1_usize);\n }"}, {"sha": "ec7481ead0482dd29af975617cf66ad6bd2ae045", "filename": "src/test/run-pass/issue-18425.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-18425.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-18425.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18425.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,5 +15,5 @@\n #![feature(box_syntax)]\n \n fn main() {\n-    let _ = [box 1u; 1];\n+    let _ = [box 1_usize; 1];\n }"}, {"sha": "ce56f3e8d72875b996ec4c0ad66dc258997af30b", "filename": "src/test/run-pass/issue-18539.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-18539.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-18539.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18539.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -19,5 +19,5 @@ fn uint_to_foo(_: uint) -> Foo {\n \n #[allow(unused_must_use)]\n fn main() {\n-    (0u..10).map(uint_to_foo);\n+    (0_usize..10).map(uint_to_foo);\n }"}, {"sha": "2f23b8028ecb905fb0feec7f7c80188c2e00004e", "filename": "src/test/run-pass/issue-18767.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-18767.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-18767.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18767.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -12,7 +12,7 @@\n // and doesn't ICE.\n \n fn main() {\n-    for &&x in Some(&0u).iter() {\n+    for &&x in Some(&0_usize).iter() {\n         assert_eq!(x, 0)\n     }\n }"}, {"sha": "0578db8f854fcbadd9e9d9bde0160a1f4582b4b7", "filename": "src/test/run-pass/issue-19499.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-19499.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-19499.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19499.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -16,5 +16,5 @@\n \n fn main() {\n     let n = 0;\n-    let it = Some(1_us).into_iter().inspect(|_| {n;});\n+    let it = Some(1_usize).into_iter().inspect(|_| {n;});\n }"}, {"sha": "235dddefacb4d2548f9299ac8f26086ccd3da82d", "filename": "src/test/run-pass/issue-21306.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-21306.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-21306.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21306.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -11,7 +11,7 @@\n use std::sync::Arc;\n \n fn main() {\n-    let x = 5us;\n+    let x = 5;\n     let command = Arc::new(Box::new(|| { x*2 }));\n     assert_eq!(command(), 10);\n }"}, {"sha": "20ff8d29b7076bc4dc7d7028ad33ac8bc75dabd2", "filename": "src/test/run-pass/issue-2185.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-2185.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2185.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -72,17 +72,17 @@ fn range(lo: uint, hi: uint, it: |uint|) {\n     let mut i = lo;\n     while i < hi {\n         it(i);\n-        i += 1u;\n+        i += 1_usize;\n     }\n }\n \n pub fn main() {\n-    let range: 'static ||uint|| = |a| range(0u, 1000u, a);\n+    let range: 'static ||uint|| = |a| range(0_usize, 1000_usize, a);\n     let filt: 'static ||v: uint|| = |a| filter(\n         range,\n-        |&&n: uint| n % 3u != 0u && n % 5u != 0u,\n+        |&&n: uint| n % 3_usize != 0_usize && n % 5_usize != 0_usize,\n         a);\n-    let sum = foldl(filt, 0u, |accum, &&n: uint| accum + n );\n+    let sum = foldl(filt, 0_usize, |accum, &&n: uint| accum + n );\n \n     println!(\"{}\", sum);\n }"}, {"sha": "395b2c4b459eba638256e89466b0290f8e2661b2", "filename": "src/test/run-pass/issue-2550.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-2550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-2550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2550.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -22,5 +22,5 @@ fn f<T>(_x: T) {\n }\n \n pub fn main() {\n-    f(C(1u));\n+    f(C(1_usize));\n }"}, {"sha": "8767d397b647a19149e766c8d54fca765bf5bac2", "filename": "src/test/run-pass/issue-2989.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-2989.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2989.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -21,7 +21,7 @@ impl methods for () {\n // the position of this function is significant! - if it comes before methods\n // then it works, if it comes after it then it doesn't!\n fn to_bools(bitv: Storage) -> Vec<bool> {\n-    (0us..8).map(|i| {\n+    (0_usize..8).map(|i| {\n         let w = i / 64;\n         let b = i % 64;\n         let x = 1u64 & (bitv.storage[w] >> b);\n@@ -35,7 +35,7 @@ pub fn main() {\n     let bools = vec!(false, false, true, false, false, true, true, false);\n     let bools2 = to_bools(Storage{storage: vec!(0b01100100)});\n \n-    for i in 0u..8 {\n+    for i in 0_usize..8 {\n         println!(\"{} => {} vs {}\", i, bools[i], bools2[i]);\n     }\n "}, {"sha": "e331a1a2d0c1dfd75c0b1ac7fedda7b79612b36f", "filename": "src/test/run-pass/issue-3429.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-3429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-3429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3429.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-  let x = 1u;\n+  let x = 1_usize;\n   let y = || x;\n   let _z = y();\n }"}, {"sha": "4a28c34e5d9f4299683811b7159e100fe59a5823", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -29,7 +29,7 @@ fn foo(name: String, samples_chan: Sender<Msg>) {\n \n         // `box() (...)` syntax is needed to make pretty printer converge in one try:\n         let callback: SamplesFn = box() (move |buffer| {\n-            for i in 0u..buffer.len() {\n+            for i in 0_usize..buffer.len() {\n                 println!(\"{}: {}\", i, buffer[i])\n             }\n         });"}, {"sha": "93429ff10dcd1f9fe356e7f4ece7856e42e35f3f", "filename": "src/test/run-pass/issue-6130.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-6130.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-6130.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6130.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -12,9 +12,9 @@\n \n pub fn main() {\n     let i: uint = 0;\n-    assert!(i <= 0xFFFF_FFFF_u);\n+    assert!(i <= 0xFFFF_FFFF_usize);\n \n     let i: int = 0;\n-    assert!(i >= -0x8000_0000_i);\n-    assert!(i <= 0x7FFF_FFFF_i);\n+    assert!(i >= -0x8000_0000__isize);\n+    assert!(i <= 0x7FFF_FFFF__isize);\n }"}, {"sha": "557ec82233ddebca8a17538b5132abe162ffd6ef", "filename": "src/test/run-pass/issue-6892.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-6892.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-6892.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6892.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -49,7 +49,7 @@ fn main() {\n     assert_eq!(unsafe { NUM_DROPS }, 3);\n     { let _x = FooBar::_Foo(Foo); }\n     assert_eq!(unsafe { NUM_DROPS }, 5);\n-    { let _x = FooBar::_Bar(42u); }\n+    { let _x = FooBar::_Bar(42_usize); }\n     assert_eq!(unsafe { NUM_DROPS }, 6);\n \n     { let _ = Foo; }\n@@ -60,6 +60,6 @@ fn main() {\n     assert_eq!(unsafe { NUM_DROPS }, 9);\n     { let _ = FooBar::_Foo(Foo); }\n     assert_eq!(unsafe { NUM_DROPS }, 11);\n-    { let _ = FooBar::_Bar(42u); }\n+    { let _ = FooBar::_Bar(42_usize); }\n     assert_eq!(unsafe { NUM_DROPS }, 12);\n }"}, {"sha": "00339a4e84b2b470e4b54c5842f8131c30fea2d2", "filename": "src/test/run-pass/issue-8460.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-8460.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8460.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -21,7 +21,7 @@ fn main() {\n     assert!(thread::spawn(move|| { min_val::<i16>() / -1; }).join().is_err());\n     assert!(thread::spawn(move|| { min_val::<i32>() / -1; }).join().is_err());\n     assert!(thread::spawn(move|| { min_val::<i64>() / -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { 1is / zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1isize / zero(); }).join().is_err());\n     assert!(thread::spawn(move|| { 1i8 / zero(); }).join().is_err());\n     assert!(thread::spawn(move|| { 1i16 / zero(); }).join().is_err());\n     assert!(thread::spawn(move|| { 1i32 / zero(); }).join().is_err());\n@@ -31,7 +31,7 @@ fn main() {\n     assert!(thread::spawn(move|| { min_val::<i16>() % -1; }).join().is_err());\n     assert!(thread::spawn(move|| { min_val::<i32>() % -1; }).join().is_err());\n     assert!(thread::spawn(move|| { min_val::<i64>() % -1; }).join().is_err());\n-    assert!(thread::spawn(move|| { 1is % zero(); }).join().is_err());\n+    assert!(thread::spawn(move|| { 1isize % zero(); }).join().is_err());\n     assert!(thread::spawn(move|| { 1i8 % zero(); }).join().is_err());\n     assert!(thread::spawn(move|| { 1i16 % zero(); }).join().is_err());\n     assert!(thread::spawn(move|| { 1i32 % zero(); }).join().is_err());"}, {"sha": "815e00e129143f0ee2d8c60e2cb14e4013ac450c", "filename": "src/test/run-pass/issue-8783.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-8783.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fissue-8783.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-8783.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -13,7 +13,7 @@ use std::default::Default;\n struct X { pub x: uint }\n impl Default for X {\n     fn default() -> X {\n-        X { x: 42u }\n+        X { x: 42_usize }\n     }\n }\n "}, {"sha": "6036af5c6275f9c3a68ebdb1057c07ad2158756b", "filename": "src/test/run-pass/item-attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fitem-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fitem-attributes.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -175,7 +175,7 @@ mod test_foreign_items {\n     #![str = \"s\"]\n     #![char = 'c']\n     #![int = 100]\n-    #![uint = 100u]\n+    #![uint = 100_usize]\n     #![mach_int = 100u32]\n     #![float = 1.0]\n     #![mach_float = 1.0f32]"}, {"sha": "566d34e6d86df763a4c9f13ee51bed0ea8555dae", "filename": "src/test/run-pass/last-use-in-cap-clause.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flast-use-in-cap-clause.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -19,8 +19,8 @@ struct A { a: Box<isize> }\n fn foo() -> Box<FnMut() -> isize + 'static> {\n     let k = box 22;\n     let _u = A {a: k.clone()};\n-    // FIXME(#16640) suffix in `22i` suffix shouldn't be necessary\n-    let result  = || 22i;\n+    // FIXME(#16640) suffix in `22_isize` suffix shouldn't be necessary\n+    let result  = || 22_isize;\n     box result\n }\n "}, {"sha": "c0f674d03714f12d616df55b15d442bdabf13c78", "filename": "src/test/run-pass/let-destruct-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Flet-destruct-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Flet-destruct-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flet-destruct-ref.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    let x = 3u;\n+    let x = 3_usize;\n     let ref y = x;\n     assert_eq!(x, *y);\n }"}, {"sha": "d58d2a7139665bd08fb304999c2fd13e42305e8d", "filename": "src/test/run-pass/loop-break-cont-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Floop-break-cont-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Floop-break-cont-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-break-cont-1.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-  let _i = 0u;\n+  let _i = 0_usize;\n   loop {\n     break;\n   }"}, {"sha": "a15efa2d8ee8e9d4a58330ccb4348a6b0d628b2b", "filename": "src/test/run-pass/loop-break-cont.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Floop-break-cont.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Floop-break-cont.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Floop-break-cont.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -9,37 +9,37 @@\n // except according to those terms.\n \n pub fn main() {\n-  let mut i = 0u;\n+  let mut i = 0_usize;\n   loop {\n     println!(\"a\");\n-    i += 1u;\n-    if i == 10u {\n+    i += 1_usize;\n+    if i == 10_usize {\n       break;\n     }\n   }\n-  assert_eq!(i, 10u);\n+  assert_eq!(i, 10_usize);\n   let mut is_even = false;\n   loop {\n-    if i == 21u {\n+    if i == 21_usize {\n         break;\n     }\n     println!(\"b\");\n     is_even = false;\n-    i += 1u;\n-    if i % 2u != 0u {\n+    i += 1_usize;\n+    if i % 2_usize != 0_usize {\n         continue;\n     }\n     is_even = true;\n   }\n   assert!(!is_even);\n   loop {\n     println!(\"c\");\n-    if i == 22u {\n+    if i == 22_usize {\n         break;\n     }\n     is_even = false;\n-    i += 1u;\n-    if i % 2u != 0u {\n+    i += 1_usize;\n+    if i % 2_usize != 0_usize {\n         continue;\n     }\n     is_even = true;"}, {"sha": "01362f0f83f90ce4e287ffe488842966144a9520", "filename": "src/test/run-pass/macro-delimiter-significance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmacro-delimiter-significance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmacro-delimiter-significance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-delimiter-significance.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    vec![1u, 2, 3].len();\n+    vec![1_usize, 2, 3].len();\n }\n "}, {"sha": "9e2f431c3ecb8561e8c869565688caa3d54fed1b", "filename": "src/test/run-pass/macro-include-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmacro-include-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmacro-include-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-include-items.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -16,5 +16,5 @@ include!(concat!(\"\", \"\", \"../auxiliary/\", \"macro-include-items-item.rs\"));\n \n fn main() {\n     foo();\n-    assert_eq!(include!(concat!(\"\", \"../auxiliary/\", \"macro-include-items-expr.rs\")), 1u);\n+    assert_eq!(include!(concat!(\"\", \"../auxiliary/\", \"macro-include-items-expr.rs\")), 1_usize);\n }"}, {"sha": "069aeb9220e604a70ecd87ebdf9988ca8072bbfe", "filename": "src/test/run-pass/macro-interpolation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-interpolation.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -24,6 +24,6 @@ macro_rules! overly_complicated {\n \n pub fn main() {\n     assert!(overly_complicated!(f, x, Option<uint>, { return Some(x); },\n-                               Some(8u), Some(y), y) == 8u)\n+                               Some(8_usize), Some(y), y) == 8_usize)\n \n }"}, {"sha": "1a77eee824b6d31107c86294bb3d7afc39064eeb", "filename": "src/test/run-pass/macro-of-higher-order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmacro-of-higher-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmacro-of-higher-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-of-higher-order.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -11,7 +11,7 @@\n macro_rules! higher_order {\n     (subst $lhs:tt => $rhs:tt) => ({\n             macro_rules! anon { $lhs => $rhs }\n-            anon!(1u, 2u, \"foo\")\n+            anon!(1_usize, 2_usize, \"foo\")\n     });\n }\n "}, {"sha": "6f2626a5af51ef7b45d8571893ff5d99bf42e014", "filename": "src/test/run-pass/macro-pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmacro-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmacro-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-pat.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -47,9 +47,9 @@ fn f(c: Option<char>) -> uint {\n }\n \n pub fn main() {\n-    assert_eq!(1u, f(Some('x')));\n-    assert_eq!(2u, f(Some('y')));\n-    assert_eq!(3u, f(None));\n+    assert_eq!(1_usize, f(Some('x')));\n+    assert_eq!(2_usize, f(Some('y')));\n+    assert_eq!(3_usize, f(None));\n \n     assert_eq!(1, match Some('x') {\n         Some(char_x!()) => 1,"}, {"sha": "dba623876b0a963b5213459856b3393e5cc8583a", "filename": "src/test/run-pass/macro-reexport-no-intermediate-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmacro-reexport-no-intermediate-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmacro-reexport-no-intermediate-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-reexport-no-intermediate-use.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -16,5 +16,5 @@\n extern crate macro_reexport_2_no_use;\n \n fn main() {\n-    assert_eq!(reexported!(), 3u);\n+    assert_eq!(reexported!(), 3_usize);\n }"}, {"sha": "a6af8c45c2439e1be38e9e26c1850d570965e44c", "filename": "src/test/run-pass/macro-reexport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmacro-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmacro-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-reexport.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -16,5 +16,5 @@\n extern crate macro_reexport_2;\n \n fn main() {\n-    assert_eq!(reexported!(), 3u);\n+    assert_eq!(reexported!(), 3_usize);\n }"}, {"sha": "68719090cff521ae9ffb107efe9ad7fbd858314c", "filename": "src/test/run-pass/match-range.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmatch-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-range.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -11,17 +11,17 @@\n // ignore-lexer-test FIXME #15877\n \n pub fn main() {\n-    match 5u {\n-      1u...5u => {}\n+    match 5_usize {\n+      1_usize...5_usize => {}\n       _ => panic!(\"should match range\"),\n     }\n-    match 5u {\n-      6u...7u => panic!(\"shouldn't match range\"),\n+    match 5_usize {\n+      6_usize...7_usize => panic!(\"shouldn't match range\"),\n       _ => {}\n     }\n-    match 5u {\n-      1u => panic!(\"should match non-first range\"),\n-      2u...6u => {}\n+    match 5_usize {\n+      1_usize => panic!(\"should match non-first range\"),\n+      2_usize...6_usize => {}\n       _ => panic!(\"math is broken\")\n     }\n     match 'c' {"}, {"sha": "eb6b2176e5140d5a0edf1a6a237446172b35ee5d", "filename": "src/test/run-pass/match-vec-alternatives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmatch-vec-alternatives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmatch-vec-alternatives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmatch-vec-alternatives.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -70,7 +70,7 @@ fn main() {\n     assert_eq!(match_vecs_snoc::<uint>(&[], &[]), \"both empty\");\n     assert_eq!(match_vecs_snoc(&[1, 2, 3], &[]), \"one empty\");\n \n-    assert_eq!(match_nested_vecs_cons(None, Ok::<&[_], ()>(&[4u, 2u])),\n+    assert_eq!(match_nested_vecs_cons(None, Ok::<&[_], ()>(&[4_usize, 2_usize])),\n                \"None, Ok(at least two elements)\");\n     assert_eq!(match_nested_vecs_cons::<uint>(None, Err(())), \"None, Ok(less than one element)\");\n     assert_eq!(match_nested_vecs_cons::<bool>(Some::<&[_]>(&[]), Ok::<&[_], ()>(&[])),\n@@ -79,7 +79,7 @@ fn main() {\n     assert_eq!(match_nested_vecs_cons(Some::<&[_]>(&[(42, ())]), Ok::<&[_], ()>(&[(1, ())])),\n                \"Some(non-empty), any\");\n \n-    assert_eq!(match_nested_vecs_snoc(None, Ok::<&[_], ()>(&[4u, 2u])),\n+    assert_eq!(match_nested_vecs_snoc(None, Ok::<&[_], ()>(&[4_usize, 2_usize])),\n                \"None, Ok(at least two elements)\");\n     assert_eq!(match_nested_vecs_snoc::<uint>(None, Err(())), \"None, Ok(less than one element)\");\n     assert_eq!(match_nested_vecs_snoc::<bool>(Some::<&[_]>(&[]), Ok::<&[_], ()>(&[])),"}, {"sha": "de24297c7b51af6f3fcd5d4147d04cd868d73697", "filename": "src/test/run-pass/method-self-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-self-arg.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -54,5 +54,5 @@ fn main() {\n \n     x.foo(&x);\n \n-    unsafe { assert!(COUNT == 2u*3*3*3*5*5*5*7*7*7); }\n+    unsafe { assert!(COUNT == 2_usize*3*3*3*5*5*5*7*7*7); }\n }"}, {"sha": "7463783be59892fe95a343a2eb4a220c5f773e45", "filename": "src/test/run-pass/method-two-trait-defer-resolution-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-two-trait-defer-resolution-2.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -34,7 +34,7 @@ impl<T> Foo for Vec<Box<T>> {\n fn call_foo_copy() -> int {\n     let mut x = Vec::new();\n     let y = x.foo();\n-    x.push(0u);\n+    x.push(0_usize);\n     y\n }\n "}, {"sha": "07d0594b494d966d1f5df70c0e05ffcf9423ac2d", "filename": "src/test/run-pass/move-3-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -27,7 +27,7 @@ fn test(x: bool, foo: Box<Triple>) -> int {\n \n pub fn main() {\n     let x = box Triple{x: 1, y: 2, z: 3};\n-    for _ in 0u..10000u {\n+    for _ in 0_usize..10000_usize {\n         assert_eq!(test(true, x.clone()), 2);\n     }\n     assert_eq!(test(false, x), 5);"}, {"sha": "6b52ea9dfa7a33c19fd424b80993bb21b8548793", "filename": "src/test/run-pass/multidispatch2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmultidispatch2.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -40,7 +40,7 @@ where T : Eq + Debug,\n }\n \n pub fn main() {\n-    test_eq(22u, 0u);\n+    test_eq(22_usize, 0_usize);\n \n     let value = MyType { dummy: 256 + 22 };\n     test_eq(value, value.dummy);"}, {"sha": "eccc2a41a8d2d3f6bd15eb9ab8485a403c46e400", "filename": "src/test/run-pass/numeric-method-autoexport.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -21,22 +21,22 @@ use std::num::ToPrimitive;\n pub fn main() {\n // ints\n     // num\n-    assert_eq!(15is.add(6is), 21is);\n-    assert_eq!(15i8.add(6i8), 21i8);\n-    assert_eq!(15i16.add(6i16), 21i16);\n-    assert_eq!(15i32.add(6i32), 21i32);\n-    assert_eq!(15i64.add(6i64), 21i64);\n+    assert_eq!(15_isize.add(6_isize), 21_isize);\n+    assert_eq!(15_i8.add(6i8), 21_i8);\n+    assert_eq!(15_i16.add(6i16), 21_i16);\n+    assert_eq!(15_i32.add(6i32), 21_i32);\n+    assert_eq!(15_i64.add(6i64), 21_i64);\n \n // uints\n     // num\n-    assert_eq!(15us.add(6us), 21us);\n-    assert_eq!(15u8.add(6u8), 21u8);\n-    assert_eq!(15u16.add(6u16), 21u16);\n-    assert_eq!(15u32.add(6u32), 21u32);\n-    assert_eq!(15u64.add(6u64), 21u64);\n+    assert_eq!(15_usize.add(6_usize), 21_usize);\n+    assert_eq!(15_u8.add(6u8), 21_u8);\n+    assert_eq!(15_u16.add(6u16), 21_u16);\n+    assert_eq!(15_u32.add(6u32), 21_u32);\n+    assert_eq!(15_u64.add(6u64), 21_u64);\n \n // floats\n     // num\n-    assert_eq!(10f32.to_i32().unwrap(), 10);\n-    assert_eq!(10f64.to_i32().unwrap(), 10);\n+    assert_eq!(10_f32.to_i32().unwrap(), 10);\n+    assert_eq!(10_f64.to_i32().unwrap(), 10);\n }"}, {"sha": "998af27c338dc88210fb1f56e02b20a73a178419", "filename": "src/test/run-pass/objects-coerce-freeze-borrored.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-coerce-freeze-borrored.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -40,9 +40,9 @@ fn do_it_imm(obj: &Foo, v: uint) {\n }\n \n pub fn main() {\n-    let mut x = 22_u;\n+    let mut x = 22_usize;\n     let obj = &mut x as &mut Foo;\n     do_it_mut(obj);\n-    do_it_imm(obj, 23u);\n+    do_it_imm(obj, 23_usize);\n     do_it_mut(obj);\n }"}, {"sha": "30a8c270bd7944c36fa43f0833b3621663906de4", "filename": "src/test/run-pass/objects-owned-object-borrowed-method-headerless.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobjects-owned-object-borrowed-method-headerless.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -37,7 +37,7 @@ pub fn main() {\n         box BarStruct{ x: 2 } as Box<FooTrait>\n     );\n \n-    for i in 0u..foos.len() {\n+    for i in 0_usize..foos.len() {\n         assert_eq!(i, foos[i].foo());\n     }\n }"}, {"sha": "654d2429a0ba06fb83428c44aa97eb8fa8751c41", "filename": "src/test/run-pass/or-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2For-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2For-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2For-pattern.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -16,6 +16,6 @@ fn or_alt(q: blah) -> int {\n \n pub fn main() {\n     assert_eq!(or_alt(blah::c), 0);\n-    assert_eq!(or_alt(blah::a(10, 100, 0u)), 110);\n+    assert_eq!(or_alt(blah::a(10, 100, 0_usize)), 110);\n     assert_eq!(or_alt(blah::b(20, 200)), 220);\n }"}, {"sha": "1118638fe071345d3987346dcd925200c1e261f0", "filename": "src/test/run-pass/over-constrained-vregs.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fover-constrained-vregs.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -10,10 +10,10 @@\n \n // Regression test for issue #152.\n pub fn main() {\n-    let mut b: uint = 1u;\n-    while b <= 32u {\n-        0u << b;\n-        b <<= 1u;\n+    let mut b: uint = 1_usize;\n+    while b <= 32_usize {\n+        0_usize << b;\n+        b <<= 1_usize;\n         println!(\"{}\", b);\n     }\n }"}, {"sha": "f40c9dc45cab1c592adc549c22d50c1e557934e3", "filename": "src/test/run-pass/overloaded-autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -22,8 +22,8 @@ struct Point {\n }\n \n pub fn main() {\n-    let box_5 = box 5u;\n-    assert_eq!(Rc::new(5u).to_uint(), Some(5));\n+    let box_5 = box 5_usize;\n+    assert_eq!(Rc::new(5_usize).to_uint(), Some(5));\n     assert_eq!((box &box &Rc::new(box box &box_5)).to_uint(), Some(5));\n     let point = Rc::new(Point {x: 2, y: 4});\n     assert_eq!(point.x, 2);"}, {"sha": "cfe49c38c5267835a1e1b4c57c06895634d5b857", "filename": "src/test/run-pass/packed-struct-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -24,7 +24,7 @@ pub fn main() {\n \n     assert_eq!(mem::size_of::<[Foo; 10]>(), 90);\n \n-    for i in 0u..10 {\n+    for i in 0_usize..10 {\n         assert_eq!(foos[i], Foo { bar: 1, baz: 2});\n     }\n "}, {"sha": "02d8602d59e311618fd820922d239d3aa851e4eb", "filename": "src/test/run-pass/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpath.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -14,4 +14,4 @@ mod foo {\n     pub fn bar(_offset: uint) { }\n }\n \n-pub fn main() { foo::bar(0u); }\n+pub fn main() { foo::bar(0_usize); }"}, {"sha": "7d9c3d324f070c227f8cac3a2db2303981409a65", "filename": "src/test/run-pass/pattern-bound-var-in-for-each.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpattern-bound-var-in-for-each.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -16,13 +16,13 @@ fn foo(src: uint) {\n \n     match Some(src) {\n       Some(src_id) => {\n-        for _i in 0u..10u {\n+        for _i in 0_usize..10_usize {\n             let yyy = src_id;\n-            assert_eq!(yyy, 0u);\n+            assert_eq!(yyy, 0_usize);\n         }\n       }\n       _ => { }\n     }\n }\n \n-pub fn main() { foo(0u); }\n+pub fn main() { foo(0_usize); }"}, {"sha": "7ad93d271a989556b892772fda0a3e2638e78d53", "filename": "src/test/run-pass/placement-new-arena.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/149f002437af373d5769f804eb5e02d8164a7668/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fplacement-new-arena.rs?ref=149f002437af373d5769f804eb5e02d8164a7668", "patch": "@@ -15,7 +15,7 @@ use arena::Arena;\n pub fn main() {\n     let mut arena = Arena::new();\n     let p = &mut arena;\n-    let x = p.alloc(|| 4u);\n+    let x = p.alloc(|| 4_usize);\n     println!(\"{}\", *x);\n-    assert_eq!(*x, 4u);\n+    assert_eq!(*x, 4_usize);\n }"}]}