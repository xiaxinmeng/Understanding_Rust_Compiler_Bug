{"sha": "e618d129030b10ddd55d76c3e451799c7dba3f8d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2MThkMTI5MDMwYjEwZGRkNTVkNzZjM2U0NTE3OTljN2RiYTNmOGQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-10T15:40:52Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-01-10T16:14:01Z"}, "message": "Replace SyntaxKind usage with T! macro where applicable", "tree": {"sha": "5c421defb6843fd005ad24488f7d040aa704e6f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c421defb6843fd005ad24488f7d040aa704e6f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e618d129030b10ddd55d76c3e451799c7dba3f8d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e618d129030b10ddd55d76c3e451799c7dba3f8d", "html_url": "https://github.com/rust-lang/rust/commit/e618d129030b10ddd55d76c3e451799c7dba3f8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e618d129030b10ddd55d76c3e451799c7dba3f8d/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e1430d822e20635170c8da92b928d4d89dd1f680", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1430d822e20635170c8da92b928d4d89dd1f680", "html_url": "https://github.com/rust-lang/rust/commit/e1430d822e20635170c8da92b928d4d89dd1f680"}], "stats": {"total": 94, "additions": 50, "deletions": 44}, "files": [{"sha": "6114091f2472d5c6f8b38083441f43f179be6abd", "filename": "crates/assists/src/handlers/remove_dbg.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_dbg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fremove_dbg.rs?ref=e618d129030b10ddd55d76c3e451799c7dba3f8d", "patch": "@@ -1,6 +1,6 @@\n use syntax::{\n     ast::{self, AstNode},\n-    match_ast, SyntaxElement, SyntaxKind, TextRange, TextSize, T,\n+    match_ast, SyntaxElement, TextRange, TextSize, T,\n };\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n@@ -136,14 +136,14 @@ fn needs_parentheses_around_macro_contents(macro_contents: Vec<SyntaxElement>) -\n             symbol_kind => {\n                 let symbol_not_in_bracket = unpaired_brackets_in_contents.is_empty();\n                 if symbol_not_in_bracket\n-                    && symbol_kind != SyntaxKind::COLON // paths\n-                    && (symbol_kind != SyntaxKind::DOT // field/method access\n+                    && symbol_kind != T![:] // paths\n+                    && (symbol_kind != T![.] // field/method access\n                         || macro_contents // range expressions consist of two SyntaxKind::Dot in macro invocations\n                             .peek()\n-                            .map(|element| element.kind() == SyntaxKind::DOT)\n+                            .map(|element| element.kind() == T![.])\n                             .unwrap_or(false))\n-                    && symbol_kind != SyntaxKind::QUESTION // try operator\n-                    && (symbol_kind.is_punct() || symbol_kind == SyntaxKind::AS_KW)\n+                    && symbol_kind != T![?] // try operator\n+                    && (symbol_kind.is_punct() || symbol_kind == T![as])\n                 {\n                     return true;\n                 }"}, {"sha": "e5522980d7c6f15c6432a1d4c2cd78f564021945", "filename": "crates/completion/src/completions/attribute.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=e618d129030b10ddd55d76c3e451799c7dba3f8d", "patch": "@@ -5,7 +5,7 @@\n \n use itertools::Itertools;\n use rustc_hash::FxHashSet;\n-use syntax::{ast, AstNode, SyntaxKind};\n+use syntax::{ast, AstNode, T};\n \n use crate::{\n     context::CompletionContext,\n@@ -205,8 +205,7 @@ fn complete_lint(\n fn parse_comma_sep_input(derive_input: ast::TokenTree) -> Result<FxHashSet<String>, ()> {\n     match (derive_input.left_delimiter_token(), derive_input.right_delimiter_token()) {\n         (Some(left_paren), Some(right_paren))\n-            if left_paren.kind() == SyntaxKind::L_PAREN\n-                && right_paren.kind() == SyntaxKind::R_PAREN =>\n+            if left_paren.kind() == T!['('] && right_paren.kind() == T![')'] =>\n         {\n             let mut input_derives = FxHashSet::default();\n             let mut current_derive = String::new();\n@@ -218,7 +217,7 @@ fn parse_comma_sep_input(derive_input: ast::TokenTree) -> Result<FxHashSet<Strin\n                 .skip(1)\n                 .take_while(|token| token != &right_paren)\n             {\n-                if SyntaxKind::COMMA == token.kind() {\n+                if T![,] == token.kind() {\n                     if !current_derive.is_empty() {\n                         input_derives.insert(current_derive);\n                         current_derive = String::new();"}, {"sha": "135ae49dc1306af13e620074bf6c542d56811391", "filename": "crates/completion/src/completions/trait_impl.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=e618d129030b10ddd55d76c3e451799c7dba3f8d", "patch": "@@ -93,11 +93,11 @@ fn completion_match(ctx: &CompletionContext) -> Option<(ImplCompletionKind, Synt\n         // `impl .. { const $0 }`\n         // ERROR      0\n         //   CONST_KW <- *\n-        SyntaxKind::CONST_KW => 0,\n+        T![const] => 0,\n         // `impl .. { fn/type $0 }`\n         // FN/TYPE_ALIAS  0\n         //   FN_KW        <- *\n-        SyntaxKind::FN_KW | SyntaxKind::TYPE_KW => 0,\n+        T![fn] | T![type] => 0,\n         // `impl .. { fn/type/const foo$0 }`\n         // FN/TYPE_ALIAS/CONST  1\n         //  NAME                0\n@@ -121,7 +121,7 @@ fn completion_match(ctx: &CompletionContext) -> Option<(ImplCompletionKind, Synt\n     let impl_def = ast::Impl::cast(impl_item.parent()?.parent()?)?;\n     let kind = match impl_item.kind() {\n         // `impl ... { const $0 fn/type/const }`\n-        _ if token.kind() == SyntaxKind::CONST_KW => ImplCompletionKind::Const,\n+        _ if token.kind() == T![const] => ImplCompletionKind::Const,\n         SyntaxKind::CONST | SyntaxKind::ERROR => ImplCompletionKind::Const,\n         SyntaxKind::TYPE_ALIAS => ImplCompletionKind::TypeAlias,\n         SyntaxKind::FN => ImplCompletionKind::Fn,"}, {"sha": "f3ce91dd1b48b2ca3ca107459f22d2c001980bf4", "filename": "crates/completion/src/patterns.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fcompletion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fcompletion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fpatterns.rs?ref=e618d129030b10ddd55d76c3e451799c7dba3f8d", "patch": "@@ -5,7 +5,7 @@ use syntax::{\n     ast::{self, LoopBodyOwner},\n     match_ast, AstNode, Direction, NodeOrToken, SyntaxElement,\n     SyntaxKind::*,\n-    SyntaxNode, SyntaxToken,\n+    SyntaxNode, SyntaxToken, T,\n };\n \n #[cfg(test)]\n@@ -119,7 +119,7 @@ pub(crate) fn unsafe_is_prev(element: SyntaxElement) -> bool {\n     element\n         .into_token()\n         .and_then(|it| previous_non_trivia_token(it))\n-        .filter(|it| it.kind() == UNSAFE_KW)\n+        .filter(|it| it.kind() == T![unsafe])\n         .is_some()\n }\n #[test]\n@@ -131,15 +131,15 @@ pub(crate) fn if_is_prev(element: SyntaxElement) -> bool {\n     element\n         .into_token()\n         .and_then(|it| previous_non_trivia_token(it))\n-        .filter(|it| it.kind() == IF_KW)\n+        .filter(|it| it.kind() == T![if])\n         .is_some()\n }\n \n pub(crate) fn fn_is_prev(element: SyntaxElement) -> bool {\n     element\n         .into_token()\n         .and_then(|it| previous_non_trivia_token(it))\n-        .filter(|it| it.kind() == FN_KW)\n+        .filter(|it| it.kind() == T![fn])\n         .is_some()\n }\n #[test]\n@@ -154,7 +154,7 @@ pub(crate) fn for_is_prev2(element: SyntaxElement) -> bool {\n         .into_token()\n         .and_then(|it| previous_non_trivia_token(it))\n         .and_then(|it| previous_non_trivia_token(it))\n-        .filter(|it| it.kind() == FOR_KW)\n+        .filter(|it| it.kind() == T![for])\n         .is_some()\n }\n #[test]"}, {"sha": "d44d96dd4035a697d65953b1a3fa3f6b7b7eaef6", "filename": "crates/ide/src/references.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Freferences.rs?ref=e618d129030b10ddd55d76c3e451799c7dba3f8d", "patch": "@@ -21,7 +21,7 @@ use ide_db::{\n use syntax::{\n     algo::find_node_at_offset,\n     ast::{self, NameOwner},\n-    match_ast, AstNode, SyntaxKind, SyntaxNode, TextRange, TokenAtOffset,\n+    match_ast, AstNode, SyntaxNode, TextRange, TokenAtOffset, T,\n };\n \n use crate::{display::TryToNav, FilePosition, FileRange, NavigationTarget, RangeInfo, SymbolKind};\n@@ -203,7 +203,7 @@ fn get_struct_def_name_for_struct_literal_search(\n     position: FilePosition,\n ) -> Option<ast::Name> {\n     if let TokenAtOffset::Between(ref left, ref right) = syntax.token_at_offset(position.offset) {\n-        if right.kind() != SyntaxKind::L_CURLY && right.kind() != SyntaxKind::L_PAREN {\n+        if right.kind() != T!['{'] && right.kind() != T!['('] {\n             return None;\n         }\n         if let Some(name) =\n@@ -230,7 +230,7 @@ fn get_enum_def_name_for_struct_literal_search(\n     position: FilePosition,\n ) -> Option<ast::Name> {\n     if let TokenAtOffset::Between(ref left, ref right) = syntax.token_at_offset(position.offset) {\n-        if right.kind() != SyntaxKind::L_CURLY && right.kind() != SyntaxKind::L_PAREN {\n+        if right.kind() != T!['{'] && right.kind() != T!['('] {\n             return None;\n         }\n         if let Some(name) =\n@@ -255,8 +255,7 @@ fn try_find_self_references(\n     syntax: &SyntaxNode,\n     position: FilePosition,\n ) -> Option<RangeInfo<ReferenceSearchResult>> {\n-    let self_token =\n-        syntax.token_at_offset(position.offset).find(|t| t.kind() == SyntaxKind::SELF_KW)?;\n+    let self_token = syntax.token_at_offset(position.offset).find(|t| t.kind() == T![self])?;\n     let parent = self_token.parent();\n     match_ast! {\n         match parent {"}, {"sha": "44620e912d26739118d387fcab3d9c549ec1b006", "filename": "crates/ide/src/syntax_highlighting/macro_rules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fmacro_rules.rs?ref=e618d129030b10ddd55d76c3e451799c7dba3f8d", "patch": "@@ -119,7 +119,7 @@ fn is_metavariable(element: SyntaxElement) -> Option<TextRange> {\n     let tok = element.as_token()?;\n     match tok.kind() {\n         kind if kind == SyntaxKind::IDENT || kind.is_keyword() => {\n-            if let Some(_dollar) = tok.prev_token().filter(|t| t.kind() == SyntaxKind::DOLLAR) {\n+            if let Some(_dollar) = tok.prev_token().filter(|t| t.kind() == T![$]) {\n                 return Some(tok.text_range());\n             }\n         }"}, {"sha": "d61950b96a049a9a37779e15b91f9a5ccfec48d1", "filename": "crates/parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=e618d129030b10ddd55d76c3e451799c7dba3f8d", "patch": "@@ -15,8 +15,16 @@ use super::*;\n //     let _ = b\"e\";\n //     let _ = br\"f\";\n // }\n-pub(crate) const LITERAL_FIRST: TokenSet =\n-    TokenSet::new(&[TRUE_KW, FALSE_KW, INT_NUMBER, FLOAT_NUMBER, BYTE, CHAR, STRING, BYTE_STRING]);\n+pub(crate) const LITERAL_FIRST: TokenSet = TokenSet::new(&[\n+    T![true],\n+    T![false],\n+    INT_NUMBER,\n+    FLOAT_NUMBER,\n+    BYTE,\n+    CHAR,\n+    STRING,\n+    BYTE_STRING,\n+]);\n \n pub(crate) fn literal(p: &mut Parser) -> Option<CompletedMarker> {\n     if !p.at_ts(LITERAL_FIRST) {"}, {"sha": "2070ce163270c446ac06bd6e9b91ad31a6124887", "filename": "crates/parser/src/grammar/items.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems.rs?ref=e618d129030b10ddd55d76c3e451799c7dba3f8d", "patch": "@@ -27,19 +27,19 @@ pub(super) fn mod_contents(p: &mut Parser, stop_on_r_curly: bool) {\n }\n \n pub(super) const ITEM_RECOVERY_SET: TokenSet = TokenSet::new(&[\n-    FN_KW,\n-    STRUCT_KW,\n-    ENUM_KW,\n-    IMPL_KW,\n-    TRAIT_KW,\n-    CONST_KW,\n-    STATIC_KW,\n-    LET_KW,\n-    MOD_KW,\n-    PUB_KW,\n-    CRATE_KW,\n-    USE_KW,\n-    MACRO_KW,\n+    T![fn],\n+    T![struct],\n+    T![enum],\n+    T![impl],\n+    T![trait],\n+    T![const],\n+    T![static],\n+    T![let],\n+    T![mod],\n+    T![pub],\n+    T![crate],\n+    T![use],\n+    T![macro],\n     T![;],\n ]);\n "}, {"sha": "d076974ed2ec7079e79d20e4e7f99dcfa880e924", "filename": "crates/parser/src/grammar/items/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs?ref=e618d129030b10ddd55d76c3e451799c7dba3f8d", "patch": "@@ -110,7 +110,7 @@ fn choose_type_params_over_qpath(p: &Parser) -> bool {\n     if !p.at(T![<]) {\n         return false;\n     }\n-    if p.nth(1) == T![#] || p.nth(1) == T![>] || p.nth(1) == CONST_KW {\n+    if p.nth(1) == T![#] || p.nth(1) == T![>] || p.nth(1) == T![const] {\n         return true;\n     }\n     (p.nth(1) == LIFETIME_IDENT || p.nth(1) == IDENT)"}, {"sha": "da71498a8f9211465f902fb84765fe1c43dea8e2", "filename": "crates/parser/src/grammar/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fpatterns.rs?ref=e618d129030b10ddd55d76c3e451799c7dba3f8d", "patch": "@@ -83,7 +83,7 @@ fn pattern_single_r(p: &mut Parser, recovery_set: TokenSet) {\n }\n \n const PAT_RECOVERY_SET: TokenSet =\n-    TokenSet::new(&[LET_KW, IF_KW, WHILE_KW, LOOP_KW, MATCH_KW, R_PAREN, COMMA]);\n+    TokenSet::new(&[T![let], T![if], T![while], T![loop], T![match], T![')'], T![,]]);\n \n fn atom_pat(p: &mut Parser, recovery_set: TokenSet) -> Option<CompletedMarker> {\n     let m = match p.nth(0) {"}, {"sha": "3de5248da148d4749239b5275ee81033aad9c1ce", "filename": "crates/parser/src/grammar/type_params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Ftype_params.rs?ref=e618d129030b10ddd55d76c3e451799c7dba3f8d", "patch": "@@ -25,7 +25,7 @@ fn generic_param_list(p: &mut Parser) {\n         match p.current() {\n             LIFETIME_IDENT => lifetime_param(p, m),\n             IDENT => type_param(p, m),\n-            CONST_KW => const_param(p, m),\n+            T![const] => const_param(p, m),\n             _ => {\n                 m.abandon(p);\n                 p.err_and_bump(\"expected type parameter\")\n@@ -66,7 +66,7 @@ fn type_param(p: &mut Parser, m: Marker) {\n // test const_param\n // struct S<const N: u32>;\n fn const_param(p: &mut Parser, m: Marker) {\n-    assert!(p.at(CONST_KW));\n+    assert!(p.at(T![const]));\n     p.bump(T![const]);\n     name(p);\n     types::ascription(p);"}, {"sha": "27381ba8078774daebc78b26a66b5b2affcf84c1", "filename": "crates/syntax/src/ast/node_ext.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e618d129030b10ddd55d76c3e451799c7dba3f8d/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=e618d129030b10ddd55d76c3e451799c7dba3f8d", "patch": "@@ -133,7 +133,7 @@ impl ast::Attr {\n             first_token.and_then(|token| token.next_token()).as_ref().map(SyntaxToken::kind);\n \n         match (first_token_kind, second_token_kind) {\n-            (Some(SyntaxKind::POUND), Some(T![!])) => AttrKind::Inner,\n+            (Some(T![#]), Some(T![!])) => AttrKind::Inner,\n             _ => AttrKind::Outer,\n         }\n     }"}]}