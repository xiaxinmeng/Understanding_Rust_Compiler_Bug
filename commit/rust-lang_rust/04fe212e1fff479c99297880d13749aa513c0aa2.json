{"sha": "04fe212e1fff479c99297880d13749aa513c0aa2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0ZmUyMTJlMWZmZjQ3OWM5OTI5Nzg4MGQxMzc0OWFhNTEzYzBhYTI=", "commit": {"author": {"name": "Oliver Schneider", "email": "github6541940@oli-obk.de", "date": "2015-05-23T17:03:19Z"}, "committer": {"name": "Oliver Schneider", "email": "github6541940@oli-obk.de", "date": "2015-05-23T17:03:19Z"}, "message": "Rollup merge of #25710 - Manishearth:no_decorator_clone, r=sfackler\n\nfixes #25683\r\n\r\nI have a very nonscientific measurement of the data via valgrind/massif [here](https://gist.github.com/Manishearth/4c47f15f6835cb3957c4)\r\n\r\nI measured the memory usage for both --pretty=expanded and -Z no-trans\r\n\r\nIt *seems* like there's a 20-25MB decrease during expansion on stage2 librustc; but I'm not quite sure.\r\n\r\nr? @eddyb\r\n\r\n(have not yet run tests, but it compiles fine, might want to wait before giving r+)\r\n\r\ncc @nrc @huon", "tree": {"sha": "50274d3459a6223dc86544209796e31fb4e54c0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50274d3459a6223dc86544209796e31fb4e54c0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04fe212e1fff479c99297880d13749aa513c0aa2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04fe212e1fff479c99297880d13749aa513c0aa2", "html_url": "https://github.com/rust-lang/rust/commit/04fe212e1fff479c99297880d13749aa513c0aa2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04fe212e1fff479c99297880d13749aa513c0aa2/comments", "author": null, "committer": null, "parents": [{"sha": "d5985d3036a62ceb6451cdfdfe2a0fdc6e46765d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5985d3036a62ceb6451cdfdfe2a0fdc6e46765d", "html_url": "https://github.com/rust-lang/rust/commit/d5985d3036a62ceb6451cdfdfe2a0fdc6e46765d"}, {"sha": "6bc5a924842b6b6ef5607dd90b8045ef5489e536", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc5a924842b6b6ef5607dd90b8045ef5489e536", "html_url": "https://github.com/rust-lang/rust/commit/6bc5a924842b6b6ef5607dd90b8045ef5489e536"}], "stats": {"total": 78, "additions": 39, "deletions": 39}, "files": [{"sha": "c2ed3583835a7e0623f855496628cbbaaae32767", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=04fe212e1fff479c99297880d13749aa513c0aa2", "patch": "@@ -154,18 +154,18 @@ pub trait MultiItemDecorator {\n               ecx: &mut ExtCtxt,\n               sp: Span,\n               meta_item: &ast::MetaItem,\n-              item: Annotatable,\n+              item: &Annotatable,\n               push: &mut FnMut(Annotatable));\n }\n \n impl<F> MultiItemDecorator for F\n-    where F : Fn(&mut ExtCtxt, Span, &ast::MetaItem, Annotatable, &mut FnMut(Annotatable))\n+    where F : Fn(&mut ExtCtxt, Span, &ast::MetaItem, &Annotatable, &mut FnMut(Annotatable))\n {\n     fn expand(&self,\n               ecx: &mut ExtCtxt,\n               sp: Span,\n               meta_item: &ast::MetaItem,\n-              item: Annotatable,\n+              item: &Annotatable,\n               push: &mut FnMut(Annotatable)) {\n         (*self)(ecx, sp, meta_item, item, push)\n     }"}, {"sha": "689a4e96aec80bd40c01604b55132a0218fa78a7", "filename": "src/libsyntax/ext/deriving/bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fbounds.rs?ref=04fe212e1fff479c99297880d13749aa513c0aa2", "patch": "@@ -17,7 +17,7 @@ use ext::deriving::generic::ty::*;\n pub fn expand_deriving_unsafe_bound(cx: &mut ExtCtxt,\n                                     span: Span,\n                                     _: &MetaItem,\n-                                    _: Annotatable,\n+                                    _: &Annotatable,\n                                     _: &mut FnMut(Annotatable))\n {\n     cx.span_err(span, \"this unsafe trait should be implemented explicitly\");\n@@ -26,7 +26,7 @@ pub fn expand_deriving_unsafe_bound(cx: &mut ExtCtxt,\n pub fn expand_deriving_copy(cx: &mut ExtCtxt,\n                             span: Span,\n                             mitem: &MetaItem,\n-                            item: Annotatable,\n+                            item: &Annotatable,\n                             push: &mut FnMut(Annotatable))\n {\n     let path = Path::new(vec![\n@@ -45,5 +45,5 @@ pub fn expand_deriving_copy(cx: &mut ExtCtxt,\n         associated_types: Vec::new(),\n     };\n \n-    trait_def.expand(cx, mitem, &item, push);\n+    trait_def.expand(cx, mitem, item, push);\n }"}, {"sha": "a9c05339894d270f1215f603796b2499c49d511a", "filename": "src/libsyntax/ext/deriving/clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fclone.rs?ref=04fe212e1fff479c99297880d13749aa513c0aa2", "patch": "@@ -20,7 +20,7 @@ use ptr::P;\n pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n                              span: Span,\n                              mitem: &MetaItem,\n-                             item: Annotatable,\n+                             item: &Annotatable,\n                              push: &mut FnMut(Annotatable))\n {\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n@@ -48,7 +48,7 @@ pub fn expand_deriving_clone(cx: &mut ExtCtxt,\n         associated_types: Vec::new(),\n     };\n \n-    trait_def.expand(cx, mitem, &item, push)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n fn cs_clone("}, {"sha": "b370757e8fb4b12dfaa623b9a2f5b564be691316", "filename": "src/libsyntax/ext/deriving/cmp/eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Feq.rs?ref=04fe212e1fff479c99297880d13749aa513c0aa2", "patch": "@@ -20,7 +20,7 @@ use ptr::P;\n pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n                           span: Span,\n                           mitem: &MetaItem,\n-                          item: Annotatable,\n+                          item: &Annotatable,\n                           push: &mut FnMut(Annotatable))\n {\n     fn cs_total_eq_assert(cx: &mut ExtCtxt, span: Span, substr: &Substructure) -> P<Expr> {\n@@ -67,5 +67,5 @@ pub fn expand_deriving_eq(cx: &mut ExtCtxt,\n         ),\n         associated_types: Vec::new(),\n     };\n-    trait_def.expand(cx, mitem, &item, push)\n+    trait_def.expand(cx, mitem, item, push)\n }"}, {"sha": "d605e0286f525138baa8eb2675cf743b2b8131e5", "filename": "src/libsyntax/ext/deriving/cmp/ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Ford.rs?ref=04fe212e1fff479c99297880d13749aa513c0aa2", "patch": "@@ -21,7 +21,7 @@ use ptr::P;\n pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n                            span: Span,\n                            mitem: &MetaItem,\n-                           item: Annotatable,\n+                           item: &Annotatable,\n                            push: &mut FnMut(Annotatable))\n {\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n@@ -49,7 +49,7 @@ pub fn expand_deriving_ord(cx: &mut ExtCtxt,\n         associated_types: Vec::new(),\n     };\n \n-    trait_def.expand(cx, mitem, &item, push)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n "}, {"sha": "e5d6408ca1b6dfd0d166693f97e598e388bf9770", "filename": "src/libsyntax/ext/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=04fe212e1fff479c99297880d13749aa513c0aa2", "patch": "@@ -20,7 +20,7 @@ use ptr::P;\n pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n                                   span: Span,\n                                   mitem: &MetaItem,\n-                                  item: Annotatable,\n+                                  item: &Annotatable,\n                                   push: &mut FnMut(Annotatable))\n {\n     // structures are equal if all fields are equal, and non equal, if\n@@ -91,5 +91,5 @@ pub fn expand_deriving_partial_eq(cx: &mut ExtCtxt,\n         ),\n         associated_types: Vec::new(),\n     };\n-    trait_def.expand(cx, mitem, &item, push)\n+    trait_def.expand(cx, mitem, item, push)\n }"}, {"sha": "4eb95343a49a75d5c4f5c5b2e464c353588fbc8c", "filename": "src/libsyntax/ext/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=04fe212e1fff479c99297880d13749aa513c0aa2", "patch": "@@ -23,7 +23,7 @@ use ptr::P;\n pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n                                    span: Span,\n                                    mitem: &MetaItem,\n-                                   item: Annotatable,\n+                                   item: &Annotatable,\n                                    push: &mut FnMut(Annotatable))\n {\n     macro_rules! md {\n@@ -82,7 +82,7 @@ pub fn expand_deriving_partial_ord(cx: &mut ExtCtxt,\n         ],\n         associated_types: Vec::new(),\n     };\n-    trait_def.expand(cx, mitem, &item, push)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n #[derive(Copy, Clone)]"}, {"sha": "99f217a419af84c0a7bb51a1cc2062f2cb8f8796", "filename": "src/libsyntax/ext/deriving/decodable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdecodable.rs?ref=04fe212e1fff479c99297880d13749aa513c0aa2", "patch": "@@ -24,7 +24,7 @@ use ptr::P;\n pub fn expand_deriving_rustc_decodable(cx: &mut ExtCtxt,\n                                        span: Span,\n                                        mitem: &MetaItem,\n-                                       item: Annotatable,\n+                                       item: &Annotatable,\n                                        push: &mut FnMut(Annotatable))\n {\n     expand_deriving_decodable_imp(cx, span, mitem, item, push, \"rustc_serialize\")\n@@ -33,7 +33,7 @@ pub fn expand_deriving_rustc_decodable(cx: &mut ExtCtxt,\n pub fn expand_deriving_decodable(cx: &mut ExtCtxt,\n                                  span: Span,\n                                  mitem: &MetaItem,\n-                                 item: Annotatable,\n+                                 item: &Annotatable,\n                                  push: &mut FnMut(Annotatable))\n {\n     expand_deriving_decodable_imp(cx, span, mitem, item, push, \"serialize\")\n@@ -42,7 +42,7 @@ pub fn expand_deriving_decodable(cx: &mut ExtCtxt,\n fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,\n                                  span: Span,\n                                  mitem: &MetaItem,\n-                                 item: Annotatable,\n+                                 item: &Annotatable,\n                                  push: &mut FnMut(Annotatable),\n                                  krate: &'static str)\n {\n@@ -88,7 +88,7 @@ fn expand_deriving_decodable_imp(cx: &mut ExtCtxt,\n         associated_types: Vec::new(),\n     };\n \n-    trait_def.expand(cx, mitem, &item, push)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n fn decodable_substructure(cx: &mut ExtCtxt, trait_span: Span,"}, {"sha": "ab22b7107003b08ab5283bff83ef8c1c7c068d5e", "filename": "src/libsyntax/ext/deriving/default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fdefault.rs?ref=04fe212e1fff479c99297880d13749aa513c0aa2", "patch": "@@ -20,7 +20,7 @@ use ptr::P;\n pub fn expand_deriving_default(cx: &mut ExtCtxt,\n                                span: Span,\n                                mitem: &MetaItem,\n-                               item: Annotatable,\n+                               item: &Annotatable,\n                                push: &mut FnMut(Annotatable))\n {\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n@@ -47,7 +47,7 @@ pub fn expand_deriving_default(cx: &mut ExtCtxt,\n         ),\n         associated_types: Vec::new(),\n     };\n-    trait_def.expand(cx, mitem, &item, push)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n fn default_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<Expr> {"}, {"sha": "0ef23705f95ac0b78272b7996652d104707e8b11", "filename": "src/libsyntax/ext/deriving/encodable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fencodable.rs?ref=04fe212e1fff479c99297880d13749aa513c0aa2", "patch": "@@ -100,7 +100,7 @@ use ptr::P;\n pub fn expand_deriving_rustc_encodable(cx: &mut ExtCtxt,\n                                        span: Span,\n                                        mitem: &MetaItem,\n-                                       item: Annotatable,\n+                                       item: &Annotatable,\n                                        push: &mut FnMut(Annotatable))\n {\n     expand_deriving_encodable_imp(cx, span, mitem, item, push, \"rustc_serialize\")\n@@ -109,7 +109,7 @@ pub fn expand_deriving_rustc_encodable(cx: &mut ExtCtxt,\n pub fn expand_deriving_encodable(cx: &mut ExtCtxt,\n                                  span: Span,\n                                  mitem: &MetaItem,\n-                                 item: Annotatable,\n+                                 item: &Annotatable,\n                                  push: &mut FnMut(Annotatable))\n {\n     expand_deriving_encodable_imp(cx, span, mitem, item, push, \"serialize\")\n@@ -118,7 +118,7 @@ pub fn expand_deriving_encodable(cx: &mut ExtCtxt,\n fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n                                  span: Span,\n                                  mitem: &MetaItem,\n-                                 item: Annotatable,\n+                                 item: &Annotatable,\n                                  push: &mut FnMut(Annotatable),\n                                  krate: &'static str)\n {\n@@ -164,7 +164,7 @@ fn expand_deriving_encodable_imp(cx: &mut ExtCtxt,\n         associated_types: Vec::new(),\n     };\n \n-    trait_def.expand(cx, mitem, &item, push)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n fn encodable_substructure(cx: &mut ExtCtxt, trait_span: Span,"}, {"sha": "cdb378a34d487c427801dad1efc1666208579bda", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=04fe212e1fff479c99297880d13749aa513c0aa2", "patch": "@@ -19,7 +19,7 @@ use ptr::P;\n pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n                             span: Span,\n                             mitem: &MetaItem,\n-                            item: Annotatable,\n+                            item: &Annotatable,\n                             push: &mut FnMut(Annotatable))\n {\n \n@@ -53,7 +53,7 @@ pub fn expand_deriving_hash(cx: &mut ExtCtxt,\n         associated_types: Vec::new(),\n     };\n \n-    hash_trait_def.expand(cx, mitem, &item, push);\n+    hash_trait_def.expand(cx, mitem, item, push);\n }\n \n fn hash_substructure(cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<Expr> {"}, {"sha": "344515b875f0a91929565c112e5c7f1e6ae664d9", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=04fe212e1fff479c99297880d13749aa513c0aa2", "patch": "@@ -134,7 +134,7 @@ macro_rules! derive_traits {\n                               ecx: &mut ExtCtxt,\n                               sp: Span,\n                               mitem: &MetaItem,\n-                              annotatable: Annotatable,\n+                              annotatable: &Annotatable,\n                               push: &mut FnMut(Annotatable)) {\n                         warn_if_deprecated(ecx, sp, $name);\n                         $func(ecx, sp, mitem, annotatable, push);"}, {"sha": "5eb98d3aa15988d91685be9ef412d30d1c57b125", "filename": "src/libsyntax/ext/deriving/primitive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fprimitive.rs?ref=04fe212e1fff479c99297880d13749aa513c0aa2", "patch": "@@ -21,7 +21,7 @@ use ptr::P;\n pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n                                       span: Span,\n                                       mitem: &MetaItem,\n-                                      item: Annotatable,\n+                                      item: &Annotatable,\n                                       push: &mut FnMut(Annotatable))\n {\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n@@ -69,7 +69,7 @@ pub fn expand_deriving_from_primitive(cx: &mut ExtCtxt,\n         associated_types: Vec::new(),\n     };\n \n-    trait_def.expand(cx, mitem, &item, push)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n fn cs_from(name: &str, cx: &mut ExtCtxt, trait_span: Span, substr: &Substructure) -> P<Expr> {"}, {"sha": "dbde963bda988110886aa9ed79ec09021ee0b4c5", "filename": "src/libsyntax/ext/deriving/show.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fshow.rs?ref=04fe212e1fff479c99297880d13749aa513c0aa2", "patch": "@@ -21,7 +21,7 @@ use ptr::P;\n pub fn expand_deriving_show(cx: &mut ExtCtxt,\n                             span: Span,\n                             mitem: &MetaItem,\n-                            item: Annotatable,\n+                            item: &Annotatable,\n                             push: &mut FnMut(Annotatable))\n {\n     // &mut ::std::fmt::Formatter\n@@ -50,7 +50,7 @@ pub fn expand_deriving_show(cx: &mut ExtCtxt,\n         ],\n         associated_types: Vec::new(),\n     };\n-    trait_def.expand(cx, mitem, &item, push)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n /// We use the debug builders to do the heavy lifting here"}, {"sha": "744849de44582a0ceaa809cd9082e5e70569fb4f", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=04fe212e1fff479c99297880d13749aa513c0aa2", "patch": "@@ -1212,7 +1212,7 @@ fn expand_decorators(a: Annotatable,\n                     dec.expand(fld.cx,\n                                attr.span,\n                                &attr.node.value,\n-                               a.clone(),\n+                               &a,\n                                &mut |ann| items.push(ann));\n                     decorator_items.extend(items.into_iter()\n                         .flat_map(|ann| expand_annotatable(ann, fld).into_iter()));"}, {"sha": "8c1445a172d8d21eb74b5ce6a60af930416a4e55", "filename": "src/test/auxiliary/custom_derive_plugin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin.rs?ref=04fe212e1fff479c99297880d13749aa513c0aa2", "patch": "@@ -37,7 +37,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n fn expand(cx: &mut ExtCtxt,\n           span: Span,\n           mitem: &ast::MetaItem,\n-          item: Annotatable,\n+          item: &Annotatable,\n           push: &mut FnMut(Annotatable)) {\n     let trait_def = TraitDef {\n         span: span,\n@@ -71,5 +71,5 @@ fn expand(cx: &mut ExtCtxt,\n         ],\n     };\n \n-    trait_def.expand(cx, mitem, &item, push)\n+    trait_def.expand(cx, mitem, item, push)\n }"}, {"sha": "01fde91fef57b93ca0bce8f1eae5bf0ef26c3b49", "filename": "src/test/auxiliary/custom_derive_plugin_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcustom_derive_plugin_attr.rs?ref=04fe212e1fff479c99297880d13749aa513c0aa2", "patch": "@@ -39,7 +39,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n fn expand(cx: &mut ExtCtxt,\n           span: Span,\n           mitem: &ast::MetaItem,\n-          item: Annotatable,\n+          item: &Annotatable,\n           push: &mut FnMut(Annotatable)) {\n     let trait_def = TraitDef {\n         span: span,\n@@ -62,7 +62,7 @@ fn expand(cx: &mut ExtCtxt,\n         ],\n     };\n \n-    trait_def.expand(cx, mitem, &item, push)\n+    trait_def.expand(cx, mitem, item, push)\n }\n \n // Mostly copied from syntax::ext::deriving::hash"}, {"sha": "9474533a9b5a756b5abb6250164c36c42623381c", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04fe212e1fff479c99297880d13749aa513c0aa2/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=04fe212e1fff479c99297880d13749aa513c0aa2", "patch": "@@ -108,7 +108,7 @@ fn expand_into_foo_multi(cx: &mut ExtCtxt,\n fn expand_duplicate(cx: &mut ExtCtxt,\n                     sp: Span,\n                     mi: &MetaItem,\n-                    it: Annotatable,\n+                    it: &Annotatable,\n                     push: &mut FnMut(Annotatable))\n {\n     let copy_name = match mi.node {"}]}