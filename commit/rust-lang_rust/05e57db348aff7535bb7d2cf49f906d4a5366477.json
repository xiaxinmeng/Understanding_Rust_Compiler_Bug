{"sha": "05e57db348aff7535bb7d2cf49f906d4a5366477", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1ZTU3ZGIzNDhhZmY3NTM1YmI3ZDJjZjQ5ZjkwNmQ0YTUzNjY0Nzc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-21T04:46:40Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T23:54:30Z"}, "message": "librustc: De-`@mut` `FunctionContext::personality`", "tree": {"sha": "06cf5b82de2e5697ec97d3e8bf906c1e000f6b6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06cf5b82de2e5697ec97d3e8bf906c1e000f6b6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05e57db348aff7535bb7d2cf49f906d4a5366477", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05e57db348aff7535bb7d2cf49f906d4a5366477", "html_url": "https://github.com/rust-lang/rust/commit/05e57db348aff7535bb7d2cf49f906d4a5366477", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05e57db348aff7535bb7d2cf49f906d4a5366477/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd5168b7cd9ae02029226f9384e78b2151a883ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd5168b7cd9ae02029226f9384e78b2151a883ed", "html_url": "https://github.com/rust-lang/rust/commit/cd5168b7cd9ae02029226f9384e78b2151a883ed"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "9b10a469e7605c2df2b09e34dbed405758fb3ac5", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05e57db348aff7535bb7d2cf49f906d4a5366477/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e57db348aff7535bb7d2cf49f906d4a5366477/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=05e57db348aff7535bb7d2cf49f906d4a5366477", "patch": "@@ -1056,11 +1056,11 @@ pub fn get_landing_pad(bcx: @Block) -> BasicBlockRef {\n \n     // We store the retval in a function-central alloca, so that calls to\n     // Resume can find it.\n-    match bcx.fcx.personality {\n+    match bcx.fcx.personality.get() {\n       Some(addr) => Store(pad_bcx, llretval, addr),\n       None => {\n         let addr = alloca(pad_bcx, val_ty(llretval), \"\");\n-        bcx.fcx.personality = Some(addr);\n+        bcx.fcx.personality.set(Some(addr));\n         Store(pad_bcx, llretval, addr);\n       }\n     }\n@@ -1378,7 +1378,7 @@ pub fn cleanup_and_leave(bcx: @Block,\n     match leave {\n       Some(target) => Br(bcx, target),\n       None => {\n-          let ll_load = Load(bcx, bcx.fcx.personality.unwrap());\n+          let ll_load = Load(bcx, bcx.fcx.personality.get().unwrap());\n           Resume(bcx, ll_load);\n       }\n     }\n@@ -1690,7 +1690,7 @@ pub fn new_fn_ctxt_w_id(ccx: @CrateContext,\n           alloca_insert_pt: Cell::new(None),\n           llreturn: Cell::new(None),\n           llself: Cell::new(None),\n-          personality: None,\n+          personality: Cell::new(None),\n           caller_expects_out_pointer: uses_outptr,\n           llargs: RefCell::new(HashMap::new()),\n           lllocals: RefCell::new(HashMap::new()),"}, {"sha": "a83cde0f4f24f43b1a22a635f7cb94de14425237", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05e57db348aff7535bb7d2cf49f906d4a5366477/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05e57db348aff7535bb7d2cf49f906d4a5366477/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=05e57db348aff7535bb7d2cf49f906d4a5366477", "patch": "@@ -232,7 +232,7 @@ pub struct FunctionContext {\n     llself: Cell<Option<ValSelfData>>,\n     // The a value alloca'd for calls to upcalls.rust_personality. Used when\n     // outputting the resume instruction.\n-    personality: Option<ValueRef>,\n+    personality: Cell<Option<ValueRef>>,\n \n     // True if the caller expects this fn to use the out pointer to\n     // return. Either way, your code should write into llretptr, but if"}]}