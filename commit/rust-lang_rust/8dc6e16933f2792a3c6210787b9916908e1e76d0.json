{"sha": "8dc6e16933f2792a3c6210787b9916908e1e76d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkYzZlMTY5MzNmMjc5MmEzYzYyMTA3ODdiOTkxNjkwOGUxZTc2ZDA=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-06T16:38:36Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-07T08:11:20Z"}, "message": "Add support for registering attributes with rustc in plugins\n\nThis lets plugin authors opt attributes out of the `custom_attribute`\nand `unused_attribute` checks.", "tree": {"sha": "1d8ccc8bc92225df1eab9488a40ff362e8760c42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d8ccc8bc92225df1eab9488a40ff362e8760c42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8dc6e16933f2792a3c6210787b9916908e1e76d0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8dc6e16933f2792a3c6210787b9916908e1e76d0", "html_url": "https://github.com/rust-lang/rust/commit/8dc6e16933f2792a3c6210787b9916908e1e76d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8dc6e16933f2792a3c6210787b9916908e1e76d0/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc45fd99f5560c4ca731ba221ffaeb8ad4ba749c", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc45fd99f5560c4ca731ba221ffaeb8ad4ba749c", "html_url": "https://github.com/rust-lang/rust/commit/fc45fd99f5560c4ca731ba221ffaeb8ad4ba749c"}], "stats": {"total": 89, "additions": 72, "deletions": 17}, "files": [{"sha": "c85b30c811cdf07aeabdf5143bbc08d1f24bde73", "filename": "src/librustc/plugin/registry.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/8dc6e16933f2792a3c6210787b9916908e1e76d0/src%2Flibrustc%2Fplugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc6e16933f2792a3c6210787b9916908e1e76d0/src%2Flibrustc%2Fplugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fregistry.rs?ref=8dc6e16933f2792a3c6210787b9916908e1e76d0", "patch": "@@ -20,6 +20,7 @@ use syntax::codemap::Span;\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax::ast;\n+use syntax::feature_gate::AttributeType;\n \n use std::collections::HashMap;\n use std::borrow::ToOwned;\n@@ -54,6 +55,9 @@ pub struct Registry<'a> {\n \n     #[doc(hidden)]\n     pub llvm_passes: Vec<String>,\n+\n+    #[doc(hidden)]\n+    pub attributes: Vec<(String, AttributeType)>,\n }\n \n impl<'a> Registry<'a> {\n@@ -67,6 +71,7 @@ impl<'a> Registry<'a> {\n             lint_passes: vec!(),\n             lint_groups: HashMap::new(),\n             llvm_passes: vec!(),\n+            attributes: vec!(),\n         }\n     }\n \n@@ -130,4 +135,22 @@ impl<'a> Registry<'a> {\n     pub fn register_llvm_pass(&mut self, name: &str) {\n         self.llvm_passes.push(name.to_owned());\n     }\n+\n+\n+    /// Register an attribute with an attribute type\n+    ///\n+    /// Registered attributes will bypass the `custom_attribute` feature gate\n+    ///\n+    /// `Whitelisted` attributes will additionally not trigger the `unused_attribute`\n+    /// lint\n+    ///\n+    /// `CrateLevel` attributes will not be allowed on anything other than a crate\n+    pub fn register_attribute(&mut self, name: String, ty: AttributeType) {\n+        if let AttributeType::Gated(..) = ty {\n+            self.sess.err(\"plugin tried to register a gated attribute. \\\n+                           Only `Normal`, `Whitelisted`, and `CrateLevel` \\\n+                           attributes are allowed\");\n+        }\n+        self.attributes.push((name, ty));\n+    }\n }"}, {"sha": "780fff9b838421627bc5b1487add5de992672a3c", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8dc6e16933f2792a3c6210787b9916908e1e76d0/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc6e16933f2792a3c6210787b9916908e1e76d0/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=8dc6e16933f2792a3c6210787b9916908e1e76d0", "patch": "@@ -23,6 +23,7 @@ use syntax::parse;\n use syntax::parse::token;\n use syntax::parse::ParseSess;\n use syntax::{ast, codemap};\n+use syntax::feature_gate::AttributeType;\n \n use rustc_back::target::Target;\n \n@@ -54,6 +55,7 @@ pub struct Session {\n     pub lint_store: RefCell<lint::LintStore>,\n     pub lints: RefCell<NodeMap<Vec<(lint::LintId, codemap::Span, String)>>>,\n     pub plugin_llvm_passes: RefCell<Vec<String>>,\n+    pub plugin_attributes: RefCell<Vec<(String, AttributeType)>>,\n     pub crate_types: RefCell<Vec<config::CrateType>>,\n     pub crate_metadata: RefCell<Vec<String>>,\n     pub features: RefCell<feature_gate::Features>,\n@@ -416,6 +418,7 @@ pub fn build_session_(sopts: config::Options,\n         lint_store: RefCell::new(lint::LintStore::new()),\n         lints: RefCell::new(NodeMap()),\n         plugin_llvm_passes: RefCell::new(Vec::new()),\n+        plugin_attributes: RefCell::new(Vec::new()),\n         crate_types: RefCell::new(Vec::new()),\n         crate_metadata: RefCell::new(Vec::new()),\n         delayed_span_bug: RefCell::new(None),"}, {"sha": "70ee041b7195230e981b07a792ddfc89dc8a05de", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8dc6e16933f2792a3c6210787b9916908e1e76d0/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc6e16933f2792a3c6210787b9916908e1e76d0/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=8dc6e16933f2792a3c6210787b9916908e1e76d0", "patch": "@@ -444,7 +444,8 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         }\n     });\n \n-    let Registry { syntax_exts, lint_passes, lint_groups, llvm_passes, .. } = registry;\n+    let Registry { syntax_exts, lint_passes, lint_groups,\n+                   llvm_passes, attributes, .. } = registry;\n \n     {\n         let mut ls = sess.lint_store.borrow_mut();\n@@ -457,6 +458,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         }\n \n         *sess.plugin_llvm_passes.borrow_mut() = llvm_passes;\n+        *sess.plugin_attributes.borrow_mut() = attributes.clone();\n     }\n \n     // Lint plugins are registered; now we can process command line flags.\n@@ -511,7 +513,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         let features =\n             syntax::feature_gate::check_crate(sess.codemap(),\n                                               &sess.parse_sess.span_diagnostic,\n-                                              &krate);\n+                                              &krate, &attributes);\n         *sess.features.borrow_mut() = features;\n         sess.abort_if_errors();\n     });\n@@ -541,7 +543,7 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         let features =\n             syntax::feature_gate::check_crate(sess.codemap(),\n                                               &sess.parse_sess.span_diagnostic,\n-                                              &krate);\n+                                              &krate, &attributes);\n         *sess.features.borrow_mut() = features;\n         sess.abort_if_errors();\n     });"}, {"sha": "9242274a7a3b3376691ccb68d86c396aa7165c6b", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8dc6e16933f2792a3c6210787b9916908e1e76d0/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc6e16933f2792a3c6210787b9916908e1e76d0/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=8dc6e16933f2792a3c6210787b9916908e1e76d0", "patch": "@@ -641,9 +641,23 @@ impl LintPass for UnusedAttributes {\n             }\n         }\n \n+        let plugin_attributes = cx.sess().plugin_attributes.borrow_mut();\n+        for &(ref name, ty) in plugin_attributes.iter() {\n+            match ty {\n+                AttributeType::Whitelisted if attr.check_name(&*name) => {\n+                    break;\n+                },\n+                _ => ()\n+            }\n+        }\n+\n         if !attr::is_used(attr) {\n             cx.span_lint(UNUSED_ATTRIBUTES, attr.span, \"unused attribute\");\n-            if KNOWN_ATTRIBUTES.contains(&(&attr.name(), AttributeType::CrateLevel)) {\n+            if KNOWN_ATTRIBUTES.contains(&(&attr.name(), AttributeType::CrateLevel)) ||\n+               plugin_attributes.iter()\n+                                .find(|&&(ref x, t)| &*attr.name() == &*x &&\n+                                                     AttributeType::CrateLevel == t)\n+                                .is_some() {\n                 let msg = match attr.node.style {\n                     ast::AttrOuter => \"crate-level attribute should be an inner \\\n                                        attribute: add an exclamation mark: #![foo]\","}, {"sha": "abb4ce15996cb22a8ad55653574640f974a76b6d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/8dc6e16933f2792a3c6210787b9916908e1e76d0/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dc6e16933f2792a3c6210787b9916908e1e76d0/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=8dc6e16933f2792a3c6210787b9916908e1e76d0", "patch": "@@ -359,6 +359,7 @@ struct Context<'a> {\n     features: Vec<&'static str>,\n     span_handler: &'a SpanHandler,\n     cm: &'a CodeMap,\n+    plugin_attributes: &'a [(String, AttributeType)],\n }\n \n impl<'a> Context<'a> {\n@@ -373,7 +374,7 @@ impl<'a> Context<'a> {\n         self.features.iter().any(|&n| n == feature)\n     }\n \n-    fn check_attribute(&self, attr: &ast::Attribute) {\n+    fn check_attribute(&self, attr: &ast::Attribute, is_macro: bool) {\n         debug!(\"check_attribute(attr = {:?})\", attr);\n         let name = &*attr.name();\n         for &(n, ty) in KNOWN_ATTRIBUTES {\n@@ -385,6 +386,13 @@ impl<'a> Context<'a> {\n                 return;\n             }\n         }\n+        for &(ref n, ref ty) in self.plugin_attributes.iter() {\n+            if &*n == name {\n+                // Plugins can't gate attributes, so we don't check for it\n+                debug!(\"check_attribute: {:?} is registered by a plugin, {:?}\", name, ty);\n+                return;\n+            }\n+        }\n         if name.starts_with(\"rustc_\") {\n             self.gate_feature(\"rustc_attrs\", attr.span,\n                               \"unless otherwise specified, attributes \\\n@@ -395,12 +403,15 @@ impl<'a> Context<'a> {\n                               \"attributes of the form `#[derive_*]` are reserved \\\n                                for the compiler\");\n         } else {\n-            self.gate_feature(\"custom_attribute\", attr.span,\n-                       &format!(\"The attribute `{}` is currently \\\n-                                unknown to the compiler and \\\n-                                may have meaning \\\n-                                added to it in the future\",\n-                                name));\n+            // Only do the custom attribute lint post-expansion\n+            if !is_macro {\n+                self.gate_feature(\"custom_attribute\", attr.span,\n+                           &format!(\"The attribute `{}` is currently \\\n+                                    unknown to the compiler and \\\n+                                    may have meaning \\\n+                                    added to it in the future\",\n+                                    name));\n+            }\n         }\n     }\n }\n@@ -479,7 +490,7 @@ impl<'a, 'v> Visitor<'v> for MacroVisitor<'a> {\n     }\n \n     fn visit_attribute(&mut self, attr: &'v ast::Attribute) {\n-        self.context.check_attribute(attr);\n+        self.context.check_attribute(attr, true);\n     }\n }\n \n@@ -498,7 +509,7 @@ impl<'a> PostExpansionVisitor<'a> {\n impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n         if !self.context.cm.span_allows_unstable(attr.span) {\n-            self.context.check_attribute(attr);\n+            self.context.check_attribute(attr, false);\n         }\n     }\n \n@@ -685,6 +696,7 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n \n fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,\n                         krate: &ast::Crate,\n+                        plugin_attributes: &[(String, AttributeType)],\n                         check: F)\n                        -> Features\n     where F: FnOnce(&mut Context, &ast::Crate)\n@@ -693,6 +705,7 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,\n         features: Vec::new(),\n         span_handler: span_handler,\n         cm: cm,\n+        plugin_attributes: plugin_attributes,\n     };\n \n     let mut accepted_features = Vec::new();\n@@ -765,14 +778,14 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler,\n \n pub fn check_crate_macros(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::Crate)\n -> Features {\n-    check_crate_inner(cm, span_handler, krate,\n+    check_crate_inner(cm, span_handler, krate, &[] as &'static [_],\n                       |ctx, krate| visit::walk_crate(&mut MacroVisitor { context: ctx }, krate))\n }\n \n-pub fn check_crate(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::Crate)\n-                   -> Features\n+pub fn check_crate(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::Crate,\n+                   plugin_attributes: &[(String, AttributeType)]) -> Features\n {\n-    check_crate_inner(cm, span_handler, krate,\n+    check_crate_inner(cm, span_handler, krate, plugin_attributes,\n                       |ctx, krate| visit::walk_crate(&mut PostExpansionVisitor { context: ctx },\n                                                      krate))\n }"}]}