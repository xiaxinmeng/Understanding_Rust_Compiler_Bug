{"sha": "9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "node_id": "C_kwDOAAsO6NoAKDlhZTI1NDY5MDdkOGVmNmQwYmNkOGM4MWY5ZTg5NDU3ZDZiNzlkMDI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-11T22:47:21Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-06-21T21:56:17Z"}, "message": "Only keep a single well-formed query.", "tree": {"sha": "022f0a90c0f491f8e81feaa0238980f3ac618d1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/022f0a90c0f491f8e81feaa0238980f3ac618d1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "html_url": "https://github.com/rust-lang/rust/commit/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21e9336fe81a1fce364349bb7a35a0347c369f34", "url": "https://api.github.com/repos/rust-lang/rust/commits/21e9336fe81a1fce364349bb7a35a0347c369f34", "html_url": "https://github.com/rust-lang/rust/commit/21e9336fe81a1fce364349bb7a35a0347c369f34"}], "stats": {"total": 639, "additions": 209, "deletions": 430}, "files": [{"sha": "1b376f6d1be9f258a49e6896604d8cd0522a6caa", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 0, "deletions": 24, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -65,7 +65,6 @@\n //! example generator inference, and possibly also HIR borrowck.\n \n use crate::hir::*;\n-use crate::itemlikevisit::ParItemLikeVisitor;\n use rustc_ast::walk_list;\n use rustc_ast::{Attribute, Label};\n use rustc_span::symbol::{Ident, Symbol};\n@@ -76,29 +75,6 @@ pub trait IntoVisitor<'hir> {\n     fn into_visitor(&self) -> Self::Visitor;\n }\n \n-pub struct ParDeepVisitor<V>(pub V);\n-\n-impl<'hir, V> ParItemLikeVisitor<'hir> for ParDeepVisitor<V>\n-where\n-    V: IntoVisitor<'hir>,\n-{\n-    fn visit_item(&self, item: &'hir Item<'hir>) {\n-        self.0.into_visitor().visit_item(item);\n-    }\n-\n-    fn visit_trait_item(&self, trait_item: &'hir TraitItem<'hir>) {\n-        self.0.into_visitor().visit_trait_item(trait_item);\n-    }\n-\n-    fn visit_impl_item(&self, impl_item: &'hir ImplItem<'hir>) {\n-        self.0.into_visitor().visit_impl_item(impl_item);\n-    }\n-\n-    fn visit_foreign_item(&self, foreign_item: &'hir ForeignItem<'hir>) {\n-        self.0.into_visitor().visit_foreign_item(foreign_item);\n-    }\n-}\n-\n #[derive(Copy, Clone, Debug)]\n pub enum FnKind<'a> {\n     /// `#[xxx] pub async/const/extern \"Abi\" fn foo()`"}, {"sha": "a490268dc9f94d46b4b6d8edca2ade54a807e656", "filename": "compiler/rustc_hir/src/itemlikevisit.rs", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/21e9336fe81a1fce364349bb7a35a0347c369f34/compiler%2Frustc_hir%2Fsrc%2Fitemlikevisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21e9336fe81a1fce364349bb7a35a0347c369f34/compiler%2Frustc_hir%2Fsrc%2Fitemlikevisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fitemlikevisit.rs?ref=21e9336fe81a1fce364349bb7a35a0347c369f34", "patch": "@@ -1,9 +0,0 @@\n-use super::{ForeignItem, ImplItem, Item, TraitItem};\n-\n-/// A parallel variant of `ItemLikeVisitor`.\n-pub trait ParItemLikeVisitor<'hir> {\n-    fn visit_item(&self, item: &'hir Item<'hir>);\n-    fn visit_trait_item(&self, trait_item: &'hir TraitItem<'hir>);\n-    fn visit_impl_item(&self, impl_item: &'hir ImplItem<'hir>);\n-    fn visit_foreign_item(&self, foreign_item: &'hir ForeignItem<'hir>);\n-}"}, {"sha": "9f32a7da159a2e8feefb33c83cb8965d1327729f", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -27,7 +27,6 @@ pub use rustc_span::def_id;\n mod hir;\n pub mod hir_id;\n pub mod intravisit;\n-pub mod itemlikevisit;\n pub mod lang_items;\n pub mod pat_util;\n mod stable_hash_impls;"}, {"sha": "a27b8470e9573bf14d018fa51eb02ce9fd11719a", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -612,23 +612,6 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    /// A parallel version of `visit_all_item_likes`.\n-    pub fn par_visit_all_item_likes<V>(self, visitor: &V)\n-    where\n-        V: itemlikevisit::ParItemLikeVisitor<'hir> + Sync + Send,\n-    {\n-        let krate = self.krate();\n-        par_for_each_in(&krate.owners.raw, |owner| match owner.map(OwnerInfo::node) {\n-            MaybeOwner::Owner(OwnerNode::Item(item)) => visitor.visit_item(item),\n-            MaybeOwner::Owner(OwnerNode::ForeignItem(item)) => visitor.visit_foreign_item(item),\n-            MaybeOwner::Owner(OwnerNode::ImplItem(item)) => visitor.visit_impl_item(item),\n-            MaybeOwner::Owner(OwnerNode::TraitItem(item)) => visitor.visit_trait_item(item),\n-            MaybeOwner::Owner(OwnerNode::Crate(_))\n-            | MaybeOwner::NonOwner(_)\n-            | MaybeOwner::Phantom => {}\n-        })\n-    }\n-\n     /// If you don't care about nesting, you should use the\n     /// `tcx.hir_module_items()` query or `module_items()` instead.\n     /// Please see notes in `deep_visit_all_item_likes`.\n@@ -867,6 +850,10 @@ impl<'hir> Map<'hir> {\n         )\n     }\n \n+    pub fn expect_owner(self, id: LocalDefId) -> OwnerNode<'hir> {\n+        self.tcx.hir_owner(id).unwrap_or_else(|| bug!(\"expected owner for {:?}\", id)).node\n+    }\n+\n     pub fn expect_item(self, id: LocalDefId) -> &'hir Item<'hir> {\n         match self.tcx.hir_owner(id) {\n             Some(Owner { node: OwnerNode::Item(item), .. }) => item,"}, {"sha": "c2ff95eca70dfdb13abf964ac91d6a17b98903cd", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -1398,13 +1398,7 @@ rustc_queries! {\n         separate_provide_extern\n     }\n \n-    query check_item_well_formed(key: LocalDefId) -> () {\n-        desc { |tcx| \"checking that `{}` is well-formed\", tcx.def_path_str(key.to_def_id()) }\n-    }\n-    query check_trait_item_well_formed(key: LocalDefId) -> () {\n-        desc { |tcx| \"checking that `{}` is well-formed\", tcx.def_path_str(key.to_def_id()) }\n-    }\n-    query check_impl_item_well_formed(key: LocalDefId) -> () {\n+    query check_well_formed(key: LocalDefId) -> () {\n         desc { |tcx| \"checking that `{}` is well-formed\", tcx.def_path_str(key.to_def_id()) }\n     }\n "}, {"sha": "65496ad8fb6bb3e439bb0c391ceb972799e9f4b8", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -32,11 +32,6 @@ use rustc_ty_utils::representability::{self, Representability};\n use std::iter;\n use std::ops::ControlFlow;\n \n-pub fn check_wf_new(tcx: TyCtxt<'_>) {\n-    let visit = wfcheck::CheckTypeWellFormedVisitor::new(tcx);\n-    tcx.hir().par_visit_all_item_likes(&visit);\n-}\n-\n pub(super) fn check_abi(tcx: TyCtxt<'_>, hir_id: hir::HirId, span: Span, abi: Abi) {\n     match tcx.sess.target.is_abi_supported(abi) {\n         Some(true) => (),\n@@ -749,7 +744,7 @@ fn check_opaque_meets_bounds<'tcx>(\n     });\n }\n \n-pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n+fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, id: hir::ItemId) {\n     debug!(\n         \"check_item_type(it.def_id={:?}, it.name={})\",\n         id.def_id,\n@@ -1538,12 +1533,6 @@ pub(super) fn check_mod_item_types(tcx: TyCtxt<'_>, module_def_id: LocalDefId) {\n     }\n }\n \n-pub(super) use wfcheck::check_item_well_formed;\n-\n-pub(super) use wfcheck::check_trait_item as check_trait_item_well_formed;\n-\n-pub(super) use wfcheck::check_impl_item as check_impl_item_well_formed;\n-\n fn async_opaque_type_cycle_error(tcx: TyCtxt<'_>, span: Span) -> ErrorGuaranteed {\n     struct_span_err!(tcx.sess, span, E0733, \"recursion in an `async fn` requires boxing\")\n         .span_label(span, \"recursive `async fn`\")"}, {"sha": "5d43a7421a111479605e850565e0c906c30e77f2", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -93,16 +93,14 @@ mod upvar;\n mod wfcheck;\n pub mod writeback;\n \n-use check::{\n-    check_abi, check_fn, check_impl_item_well_formed, check_item_well_formed, check_mod_item_types,\n-    check_trait_item_well_formed,\n-};\n-pub use check::{check_item_type, check_wf_new};\n+use check::{check_abi, check_fn, check_mod_item_types};\n pub use diverges::Diverges;\n pub use expectation::Expectation;\n pub use fn_ctxt::*;\n use hir::def::CtorOf;\n pub use inherited::{Inherited, InheritedBuilder};\n+use wfcheck::check_well_formed;\n+pub(crate) use wfcheck::check_wf_new;\n \n use crate::astconv::AstConv;\n use crate::check::gather_locals::GatherLocalsVisitor;\n@@ -253,9 +251,7 @@ pub fn provide(providers: &mut Providers) {\n         has_typeck_results,\n         adt_destructor,\n         used_trait_imports,\n-        check_item_well_formed,\n-        check_trait_item_well_formed,\n-        check_impl_item_well_formed,\n+        check_well_formed,\n         check_mod_item_types,\n         region_scope_tree,\n         ..*providers"}, {"sha": "197abe817a0c3151a600b1e1d5ecb80346ec94c4", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 53, "deletions": 90, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -4,24 +4,21 @@ use crate::constrained_generic_params::{identify_constrained_generic_params, Par\n \n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n+use rustc_data_structures::sync::par_for_each_in;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n-use rustc_hir::intravisit as hir_visit;\n-use rustc_hir::intravisit::Visitor;\n-use rustc_hir::itemlikevisit::ParItemLikeVisitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::ItemKind;\n use rustc_infer::infer::outlives::env::OutlivesEnvironment;\n use rustc_infer::infer::outlives::obligations::TypeOutlives;\n use rustc_infer::infer::region_constraints::GenericKind;\n use rustc_infer::infer::{self, InferCtxt, TyCtxtInferExt};\n-use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts, Subst};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n use rustc_middle::ty::{\n-    self, AdtKind, EarlyBinder, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable,\n-    TypeSuperFoldable, TypeVisitor,\n+    self, AdtKind, DefIdTree, EarlyBinder, GenericParamDefKind, ToPredicate, Ty, TyCtxt,\n+    TypeFoldable, TypeSuperFoldable, TypeVisitor,\n };\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{sym, Ident, Symbol};\n@@ -70,6 +67,23 @@ impl<'tcx> CheckWfFcxBuilder<'tcx> {\n     }\n }\n \n+pub(crate) fn check_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n+    let node = tcx.hir().expect_owner(def_id);\n+    match node {\n+        hir::OwnerNode::Crate(_) => {}\n+        hir::OwnerNode::Item(item) => check_item(tcx, item),\n+        hir::OwnerNode::TraitItem(item) => check_trait_item(tcx, item),\n+        hir::OwnerNode::ImplItem(item) => check_impl_item(tcx, item),\n+        hir::OwnerNode::ForeignItem(item) => check_foreign_item(tcx, item),\n+    }\n+\n+    if let Some(generics) = node.generics() {\n+        for param in generics.params {\n+            check_param_wf(tcx, param)\n+        }\n+    }\n+}\n+\n /// Checks that the field types (in a struct def'n) or argument types (in an enum def'n) are\n /// well-formed, meaning that they do not require any constraints not declared in the struct\n /// definition itself. For example, this definition would be illegal:\n@@ -84,8 +98,8 @@ impl<'tcx> CheckWfFcxBuilder<'tcx> {\n /// not included it frequently leads to confusing errors in fn bodies. So it's better to check\n /// the types first.\n #[instrument(skip(tcx), level = \"debug\")]\n-pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n-    let item = tcx.hir().expect_item(def_id);\n+fn check_item<'tcx>(tcx: TyCtxt<'tcx>, item: &'tcx hir::Item<'tcx>) {\n+    let def_id = item.def_id;\n \n     debug!(\n         ?item.def_id,\n@@ -156,20 +170,6 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         hir::ItemKind::Const(ty, ..) => {\n             check_item_type(tcx, item.def_id, ty.span, false);\n         }\n-        hir::ItemKind::ForeignMod { items, .. } => {\n-            for it in items.iter() {\n-                let it = tcx.hir().foreign_item(it.id);\n-                match it.kind {\n-                    hir::ForeignItemKind::Fn(decl, ..) => {\n-                        check_item_fn(tcx, it.def_id, it.ident, it.span, decl)\n-                    }\n-                    hir::ForeignItemKind::Static(ty, ..) => {\n-                        check_item_type(tcx, it.def_id, ty.span, true)\n-                    }\n-                    hir::ForeignItemKind::Type => (),\n-                }\n-            }\n-        }\n         hir::ItemKind::Struct(ref struct_def, ref ast_generics) => {\n             check_type_defn(tcx, item, false, |fcx| vec![fcx.non_enum_variant(struct_def)]);\n \n@@ -191,13 +191,31 @@ pub fn check_item_well_formed(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         hir::ItemKind::TraitAlias(..) => {\n             check_trait(tcx, item);\n         }\n+        // `ForeignItem`s are handled separately.\n+        hir::ItemKind::ForeignMod { .. } => {}\n         _ => {}\n     }\n }\n \n-pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n-    let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    let trait_item = tcx.hir().expect_trait_item(def_id);\n+fn check_foreign_item(tcx: TyCtxt<'_>, item: &hir::ForeignItem<'_>) {\n+    let def_id = item.def_id;\n+\n+    debug!(\n+        ?item.def_id,\n+        item.name = ? tcx.def_path_str(def_id.to_def_id())\n+    );\n+\n+    match item.kind {\n+        hir::ForeignItemKind::Fn(decl, ..) => {\n+            check_item_fn(tcx, item.def_id, item.ident, item.span, decl)\n+        }\n+        hir::ForeignItemKind::Static(ty, ..) => check_item_type(tcx, item.def_id, ty.span, true),\n+        hir::ForeignItemKind::Type => (),\n+    }\n+}\n+\n+fn check_trait_item(tcx: TyCtxt<'_>, trait_item: &hir::TraitItem<'_>) {\n+    let def_id = trait_item.def_id;\n \n     let (method_sig, span) = match trait_item.kind {\n         hir::TraitItemKind::Fn(ref sig, _) => (Some(sig), trait_item.span),\n@@ -207,7 +225,7 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     check_object_unsafe_self_trait_by_name(tcx, trait_item);\n     check_associated_item(tcx, trait_item.def_id, span, method_sig);\n \n-    let encl_trait_def_id = tcx.hir().get_parent_item(hir_id);\n+    let encl_trait_def_id = tcx.local_parent(def_id);\n     let encl_trait = tcx.hir().expect_item(encl_trait_def_id);\n     let encl_trait_def_id = encl_trait.def_id.to_def_id();\n     let fn_lang_item_name = if Some(encl_trait_def_id) == tcx.lang_items().fn_trait() {\n@@ -783,8 +801,8 @@ fn check_object_unsafe_self_trait_by_name(tcx: TyCtxt<'_>, item: &hir::TraitItem\n     }\n }\n \n-pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n-    let impl_item = tcx.hir().expect_impl_item(def_id);\n+fn check_impl_item(tcx: TyCtxt<'_>, impl_item: &hir::ImplItem<'_>) {\n+    let def_id = impl_item.def_id;\n \n     let (method_sig, span) = match impl_item.kind {\n         hir::ImplItemKind::Fn(ref sig, _) => (Some(sig), impl_item.span),\n@@ -793,7 +811,7 @@ pub fn check_impl_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n         _ => (None, impl_item.span),\n     };\n \n-    check_associated_item(tcx, impl_item.def_id, span, method_sig);\n+    check_associated_item(tcx, def_id, span, method_sig);\n }\n \n fn check_param_wf(tcx: TyCtxt<'_>, param: &hir::GenericParam<'_>) {\n@@ -1840,67 +1858,12 @@ fn check_false_global_bounds(fcx: &FnCtxt<'_, '_>, mut span: Span, id: hir::HirI\n     fcx.select_all_obligations_or_error();\n }\n \n-#[derive(Clone, Copy)]\n-pub struct CheckTypeWellFormedVisitor<'tcx> {\n-    tcx: TyCtxt<'tcx>,\n-}\n-\n-impl<'tcx> CheckTypeWellFormedVisitor<'tcx> {\n-    pub fn new(tcx: TyCtxt<'tcx>) -> CheckTypeWellFormedVisitor<'tcx> {\n-        CheckTypeWellFormedVisitor { tcx }\n-    }\n-}\n-\n-impl<'tcx> ParItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n-    fn visit_item(&self, i: &'tcx hir::Item<'tcx>) {\n-        Visitor::visit_item(&mut self.clone(), i);\n-    }\n-\n-    fn visit_trait_item(&self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n-        Visitor::visit_trait_item(&mut self.clone(), trait_item);\n-    }\n-\n-    fn visit_impl_item(&self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n-        Visitor::visit_impl_item(&mut self.clone(), impl_item);\n-    }\n-\n-    fn visit_foreign_item(&self, foreign_item: &'tcx hir::ForeignItem<'tcx>) {\n-        Visitor::visit_foreign_item(&mut self.clone(), foreign_item)\n-    }\n-}\n-\n-impl<'tcx> Visitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n-    type NestedFilter = nested_filter::OnlyBodies;\n-\n-    fn nested_visit_map(&mut self) -> Self::Map {\n-        self.tcx.hir()\n-    }\n-\n-    #[instrument(skip(self, i), level = \"debug\")]\n-    fn visit_item(&mut self, i: &'tcx hir::Item<'tcx>) {\n-        trace!(?i);\n-        self.tcx.ensure().check_item_well_formed(i.def_id);\n-        hir_visit::walk_item(self, i);\n-    }\n-\n-    #[instrument(skip(self, trait_item), level = \"debug\")]\n-    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n-        trace!(?trait_item);\n-        self.tcx.ensure().check_trait_item_well_formed(trait_item.def_id);\n-        hir_visit::walk_trait_item(self, trait_item);\n-    }\n-\n-    #[instrument(skip(self, impl_item), level = \"debug\")]\n-    fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n-        trace!(?impl_item);\n-        self.tcx.ensure().check_impl_item_well_formed(impl_item.def_id);\n-        hir_visit::walk_impl_item(self, impl_item);\n-    }\n-\n-    fn visit_generic_param(&mut self, p: &'tcx hir::GenericParam<'tcx>) {\n-        check_param_wf(self.tcx, p);\n-        hir_visit::walk_generic_param(self, p);\n-    }\n+pub(crate) fn check_wf_new(tcx: TyCtxt<'_>) {\n+    let items = tcx.hir_crate_items(());\n+    par_for_each_in(items.items(), |item| tcx.ensure().check_well_formed(item.def_id));\n+    par_for_each_in(items.impl_items(), |item| tcx.ensure().check_well_formed(item.def_id));\n+    par_for_each_in(items.trait_items(), |item| tcx.ensure().check_well_formed(item.def_id));\n+    par_for_each_in(items.foreign_items(), |item| tcx.ensure().check_well_formed(item.def_id));\n }\n \n ///////////////////////////////////////////////////////////////////////////"}, {"sha": "5487af1a835d8a8741e0bc6a6c2f16774a33b793", "filename": "src/test/ui/associated-item/issue-48027.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-item%2Fissue-48027.stderr?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -1,15 +1,3 @@\n-error[E0283]: type annotations needed\n-  --> $DIR/issue-48027.rs:3:32\n-   |\n-LL |     fn return_n(&self) -> [u8; Bar::X];\n-   |                                ^^^^^^\n-   |                                |\n-   |                                cannot infer type\n-   |                                help: use the fully qualified path to an implementation: `<Type as Bar>::X`\n-   |\n-   = note: cannot satisfy `_: Bar`\n-   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n-\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/issue-48027.rs:6:6\n    |\n@@ -25,6 +13,18 @@ LL |     const X: usize;\n    |           ^ ...because it contains this associated `const`\n    = help: consider moving `X` to another trait\n \n+error[E0283]: type annotations needed\n+  --> $DIR/issue-48027.rs:3:32\n+   |\n+LL |     fn return_n(&self) -> [u8; Bar::X];\n+   |                                ^^^^^^\n+   |                                |\n+   |                                cannot infer type\n+   |                                help: use the fully qualified path to an implementation: `<Type as Bar>::X`\n+   |\n+   = note: cannot satisfy `_: Bar`\n+   = note: associated constants cannot be accessed directly on a `trait`, they can only be accessed through a specific `impl`\n+\n error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0038, E0283."}, {"sha": "bd3ee2abd2c7604da8473500748cdb10eea74504", "filename": "src/test/ui/associated-types/associated-types-no-suitable-supertrait.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fassociated-types-no-suitable-supertrait.stderr?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -1,3 +1,9 @@\n+error[E0277]: the trait bound `(T, U): Get` is not satisfied\n+  --> $DIR/associated-types-no-suitable-supertrait.rs:22:40\n+   |\n+LL |     fn uhoh<U:Get>(&self, foo: U, bar: <(T, U) as Get>::Value) {}\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `(T, U)`\n+\n error[E0277]: the trait bound `Self: Get` is not satisfied\n   --> $DIR/associated-types-no-suitable-supertrait.rs:17:40\n    |\n@@ -9,12 +15,6 @@ help: consider further restricting `Self`\n LL |     fn uhoh<U:Get>(&self, foo: U, bar: <Self as Get>::Value) where Self: Get {}\n    |                                                              +++++++++++++++\n \n-error[E0277]: the trait bound `(T, U): Get` is not satisfied\n-  --> $DIR/associated-types-no-suitable-supertrait.rs:22:40\n-   |\n-LL |     fn uhoh<U:Get>(&self, foo: U, bar: <(T, U) as Get>::Value) {}\n-   |                                        ^^^^^^^^^^^^^^^^^^^^^^ the trait `Get` is not implemented for `(T, U)`\n-\n error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "a89f61a81a57c3e097c1a5a87ec779265db8085c", "filename": "src/test/ui/associated-types/hr-associated-type-bound-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.rs?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -12,7 +12,7 @@ impl X<'_> for u32 //~ overflow evaluating the requirement `for<'b> u32: X<'b>`\n where\n     for<'b> <Self as X<'b>>::U: Clone,\n {\n-    type U = str; //~ overflow evaluating the requirement `for<'b> u32: X<'b>`\n+    type U = str;\n }\n \n fn main() {"}, {"sha": "1d3b7097da6614b841ce0608ac6cce39b5c82d4f", "filename": "src/test/ui/associated-types/hr-associated-type-bound-2.stderr", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-2.stderr?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -18,21 +18,6 @@ LL | impl X<'_> for u32\n    = note: 128 redundant requirements hidden\n    = note: required because of the requirements on the impl of `for<'b> X<'b>` for `u32`\n \n-error[E0275]: overflow evaluating the requirement `for<'b> u32: X<'b>`\n-  --> $DIR/hr-associated-type-bound-2.rs:15:5\n-   |\n-LL |     type U = str;\n-   |     ^^^^^^^^^^^^^\n-   |\n-   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`hr_associated_type_bound_2`)\n-note: required because of the requirements on the impl of `for<'b> X<'b>` for `u32`\n-  --> $DIR/hr-associated-type-bound-2.rs:11:6\n-   |\n-LL | impl X<'_> for u32\n-   |      ^^^^^     ^^^\n-   = note: 128 redundant requirements hidden\n-   = note: required because of the requirements on the impl of `for<'b> X<'b>` for `u32`\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0275`."}, {"sha": "52294f8c94a566c18521f927d4c9a3ccd4d5100c", "filename": "src/test/ui/associated-types/hr-associated-type-bound-param-2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fhr-associated-type-bound-param-2.stderr?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -15,10 +15,10 @@ LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n    |                                   ^^^^^ required by this bound in `Z`\n \n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-2.rs:3:8\n+  --> $DIR/hr-associated-type-bound-param-2.rs:15:14\n    |\n-LL |     T: Z<'a, u16>,\n-   |        ^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n+LL |     type W = str;\n+   |              ^^^ the trait `Clone` is not implemented for `str`\n    |\n    = help: the trait `Clone` is implemented for `String`\n note: required by a bound in `Z`\n@@ -31,10 +31,10 @@ LL |     for<'b> <T as Z<'b, u16>>::W: Clone,\n    |                                   ^^^^^ required by this bound in `Z`\n \n error[E0277]: the trait bound `str: Clone` is not satisfied\n-  --> $DIR/hr-associated-type-bound-param-2.rs:15:14\n+  --> $DIR/hr-associated-type-bound-param-2.rs:3:8\n    |\n-LL |     type W = str;\n-   |              ^^^ the trait `Clone` is not implemented for `str`\n+LL |     T: Z<'a, u16>,\n+   |        ^^^^^^^^^^ the trait `Clone` is not implemented for `str`\n    |\n    = help: the trait `Clone` is implemented for `String`\n note: required by a bound in `Z`"}, {"sha": "365eddaed138e54777b976093fe5f2d225d7440b", "filename": "src/test/ui/associated-types/impl-wf-cycle-1.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.rs?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -13,16 +13,14 @@ trait Grault {\n }\n \n impl<T: Grault> Grault for (T,)\n+//~^ ERROR overflow evaluating the requirement `<(T,) as Grault>::A == _`\n where\n     Self::A: Baz,\n     Self::B: Fiz,\n {\n     type A = ();\n-    //~^ ERROR overflow evaluating the requirement `<(T,) as Grault>::A == _`\n     type B = bool;\n-    //~^ ERROR overflow evaluating the requirement `<(T,) as Grault>::A == _`\n }\n-//~^^^^^^^^^^ ERROR overflow evaluating the requirement `<(T,) as Grault>::A == _`\n \n fn main() {\n     let x: <(_,) as Grault>::A = ();"}, {"sha": "6f60128b8efe453b67947afb72188c961b7be65f", "filename": "src/test/ui/associated-types/impl-wf-cycle-1.stderr", "status": "modified", "additions": 3, "deletions": 31, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-1.stderr?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -2,11 +2,11 @@ error[E0275]: overflow evaluating the requirement `<(T,) as Grault>::A == _`\n   --> $DIR/impl-wf-cycle-1.rs:15:1\n    |\n LL | / impl<T: Grault> Grault for (T,)\n+LL | |\n LL | | where\n LL | |     Self::A: Baz,\n-LL | |     Self::B: Fiz,\n ...  |\n-LL | |\n+LL | |     type B = bool;\n LL | | }\n    | |_^\n    |\n@@ -18,34 +18,6 @@ LL | impl<T: Grault> Grault for (T,)\n    = note: 1 redundant requirement hidden\n    = note: required because of the requirements on the impl of `Grault` for `(T,)`\n \n-error[E0275]: overflow evaluating the requirement `<(T,) as Grault>::A == _`\n-  --> $DIR/impl-wf-cycle-1.rs:20:5\n-   |\n-LL |     type A = ();\n-   |     ^^^^^^^^^^^^\n-   |\n-note: required because of the requirements on the impl of `Grault` for `(T,)`\n-  --> $DIR/impl-wf-cycle-1.rs:15:17\n-   |\n-LL | impl<T: Grault> Grault for (T,)\n-   |                 ^^^^^^     ^^^^\n-   = note: 1 redundant requirement hidden\n-   = note: required because of the requirements on the impl of `Grault` for `(T,)`\n-\n-error[E0275]: overflow evaluating the requirement `<(T,) as Grault>::A == _`\n-  --> $DIR/impl-wf-cycle-1.rs:22:5\n-   |\n-LL |     type B = bool;\n-   |     ^^^^^^^^^^^^^^\n-   |\n-note: required because of the requirements on the impl of `Grault` for `(T,)`\n-  --> $DIR/impl-wf-cycle-1.rs:15:17\n-   |\n-LL | impl<T: Grault> Grault for (T,)\n-   |                 ^^^^^^     ^^^^\n-   = note: 1 redundant requirement hidden\n-   = note: required because of the requirements on the impl of `Grault` for `(T,)`\n-\n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0275`."}, {"sha": "f2f3072e344c2c007b5b14b6b2dad3e3a9dcc9cf", "filename": "src/test/ui/associated-types/impl-wf-cycle-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.rs?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -5,12 +5,11 @@ trait Grault {\n }\n \n impl<T: Grault> Grault for (T,)\n+//~^ ERROR overflow evaluating the requirement `<(T,) as Grault>::A == _`\n where\n     Self::A: Copy,\n {\n     type A = ();\n-    //~^ ERROR overflow evaluating the requirement `<(T,) as Grault>::A == _`\n }\n-//~^^^^^^^ ERROR overflow evaluating the requirement `<(T,) as Grault>::A == _`\n \n fn main() {}"}, {"sha": "ba14ffefae5390c4e35195c0b19fca2972c4c387", "filename": "src/test/ui/associated-types/impl-wf-cycle-2.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fimpl-wf-cycle-2.stderr?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -2,11 +2,11 @@ error[E0275]: overflow evaluating the requirement `<(T,) as Grault>::A == _`\n   --> $DIR/impl-wf-cycle-2.rs:7:1\n    |\n LL | / impl<T: Grault> Grault for (T,)\n+LL | |\n LL | | where\n LL | |     Self::A: Copy,\n LL | | {\n LL | |     type A = ();\n-LL | |\n LL | | }\n    | |_^\n    |\n@@ -16,18 +16,6 @@ note: required because of the requirements on the impl of `Grault` for `(T,)`\n LL | impl<T: Grault> Grault for (T,)\n    |                 ^^^^^^     ^^^^\n \n-error[E0275]: overflow evaluating the requirement `<(T,) as Grault>::A == _`\n-  --> $DIR/impl-wf-cycle-2.rs:11:5\n-   |\n-LL |     type A = ();\n-   |     ^^^^^^^^^^^^\n-   |\n-note: required because of the requirements on the impl of `Grault` for `(T,)`\n-  --> $DIR/impl-wf-cycle-2.rs:7:17\n-   |\n-LL | impl<T: Grault> Grault for (T,)\n-   |                 ^^^^^^     ^^^^\n-\n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0275`."}, {"sha": "5cd781d9a0cc408c69bd1f95ef08f13550592cd3", "filename": "src/test/ui/associated-types/issue-59324.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-types%2Fissue-59324.stderr?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -46,6 +46,12 @@ help: consider further restricting this bound\n LL | pub trait ThriftService<Bug: NotFoo + Foo>:\n    |                                     +++++\n \n+error[E0277]: the trait bound `(): Foo` is not satisfied\n+  --> $DIR/issue-59324.rs:23:29\n+   |\n+LL | fn with_factory<H>(factory: dyn ThriftService<()>) {}\n+   |                             ^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `()`\n+\n error[E0277]: the trait bound `Bug: Foo` is not satisfied\n   --> $DIR/issue-59324.rs:19:10\n    |\n@@ -57,12 +63,6 @@ help: consider further restricting this bound\n LL | pub trait ThriftService<Bug: NotFoo + Foo>:\n    |                                     +++++\n \n-error[E0277]: the trait bound `(): Foo` is not satisfied\n-  --> $DIR/issue-59324.rs:23:29\n-   |\n-LL | fn with_factory<H>(factory: dyn ThriftService<()>) {}\n-   |                             ^^^^^^^^^^^^^^^^^^^^^ the trait `Foo` is not implemented for `()`\n-\n error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "4bba42c7782e3f48a18e10709040055d5c6cec66", "filename": "src/test/ui/const-generics/const-param-elided-lifetime.min.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-elided-lifetime.min.stderr?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -46,15 +46,6 @@ LL | impl<const N: &u8> A<N> {\n    = note: the only supported types are integers, `bool` and `char`\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n-error: `&'static u8` is forbidden as the type of a const generic parameter\n-  --> $DIR/const-param-elided-lifetime.rs:17:21\n-   |\n-LL |     fn foo<const M: &u8>(&self) {}\n-   |                     ^^^\n-   |\n-   = note: the only supported types are integers, `bool` and `char`\n-   = help: more complex types are supported with `#![feature(adt_const_params)]`\n-\n error: `&'static u8` is forbidden as the type of a const generic parameter\n   --> $DIR/const-param-elided-lifetime.rs:22:15\n    |\n@@ -73,6 +64,15 @@ LL | fn bar<const N: &u8>() {}\n    = note: the only supported types are integers, `bool` and `char`\n    = help: more complex types are supported with `#![feature(adt_const_params)]`\n \n+error: `&'static u8` is forbidden as the type of a const generic parameter\n+  --> $DIR/const-param-elided-lifetime.rs:17:21\n+   |\n+LL |     fn foo<const M: &u8>(&self) {}\n+   |                     ^^^\n+   |\n+   = note: the only supported types are integers, `bool` and `char`\n+   = help: more complex types are supported with `#![feature(adt_const_params)]`\n+\n error: aborting due to 10 previous errors\n \n For more information about this error, try `rustc --explain E0637`."}, {"sha": "a1c69a5afb6119fa3070ea451014c050431a40f0", "filename": "src/test/ui/feature-gates/feature-gate-arbitrary-self-types.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary-self-types.stderr?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -1,13 +1,3 @@\n-error[E0658]: `Ptr<Self>` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n-  --> $DIR/feature-gate-arbitrary-self-types.rs:16:18\n-   |\n-LL |     fn foo(self: Ptr<Self>);\n-   |                  ^^^^^^^^^\n-   |\n-   = note: see issue #44874 <https://github.com/rust-lang/rust/issues/44874> for more information\n-   = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n-   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n-\n error[E0658]: `Ptr<Bar>` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n   --> $DIR/feature-gate-arbitrary-self-types.rs:22:18\n    |\n@@ -28,6 +18,16 @@ LL |     fn bar(self: Box<Ptr<Self>>) {}\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n+error[E0658]: `Ptr<Self>` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n+  --> $DIR/feature-gate-arbitrary-self-types.rs:16:18\n+   |\n+LL |     fn foo(self: Ptr<Self>);\n+   |                  ^^^^^^^^^\n+   |\n+   = note: see issue #44874 <https://github.com/rust-lang/rust/issues/44874> for more information\n+   = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n+\n error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0658`."}, {"sha": "a9f611b874527aebd07724f4fcd3586c4c64c26b", "filename": "src/test/ui/feature-gates/feature-gate-arbitrary_self_types-raw-pointer.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-arbitrary_self_types-raw-pointer.stderr?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -8,20 +8,20 @@ LL |     fn foo(self: *const Self) {}\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n-error[E0658]: `*const Self` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n-  --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:9:18\n+error[E0658]: `*const ()` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n+  --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:14:18\n    |\n-LL |     fn bar(self: *const Self);\n+LL |     fn bar(self: *const Self) {}\n    |                  ^^^^^^^^^^^\n    |\n    = note: see issue #44874 <https://github.com/rust-lang/rust/issues/44874> for more information\n    = help: add `#![feature(arbitrary_self_types)]` to the crate attributes to enable\n    = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n \n-error[E0658]: `*const ()` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n-  --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:14:18\n+error[E0658]: `*const Self` cannot be used as the type of `self` without the `arbitrary_self_types` feature\n+  --> $DIR/feature-gate-arbitrary_self_types-raw-pointer.rs:9:18\n    |\n-LL |     fn bar(self: *const Self) {}\n+LL |     fn bar(self: *const Self);\n    |                  ^^^^^^^^^^^\n    |\n    = note: see issue #44874 <https://github.com/rust-lang/rust/issues/44874> for more information"}, {"sha": "a6858154dfb297a945bc21e69590e616f5e78827", "filename": "src/test/ui/higher-rank-trait-bounds/normalize-under-binder/issue-89118.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89118.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89118.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhigher-rank-trait-bounds%2Fnormalize-under-binder%2Fissue-89118.stderr?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -19,44 +19,44 @@ LL |     Ctx<()>: for<'a> BufferUdpStateContext<&'a ()>,\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `StackContext`\n \n error[E0277]: the trait bound `for<'a> &'a (): BufferMut` is not satisfied\n-  --> $DIR/issue-89118.rs:22:20\n+  --> $DIR/issue-89118.rs:29:9\n    |\n-LL |     type Handler = Ctx<C::Dispatcher>;\n-   |                    ^^^^^^^^^^^^^^^^^^ the trait `for<'a> BufferMut` is not implemented for `&'a ()`\n+LL | impl<C> EthernetWorker<C> {}\n+   |         ^^^^^^^^^^^^^^^^^ the trait `for<'a> BufferMut` is not implemented for `&'a ()`\n    |\n note: required because of the requirements on the impl of `for<'a> BufferUdpStateContext<&'a ()>` for `Ctx<()>`\n   --> $DIR/issue-89118.rs:5:23\n    |\n LL | impl<B: BufferMut, C> BufferUdpStateContext<B> for C {}\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^     ^\n-note: required by a bound in `StackContext`\n-  --> $DIR/issue-89118.rs:9:14\n+note: required by a bound in `EthernetWorker`\n+  --> $DIR/issue-89118.rs:28:14\n    |\n-LL | trait StackContext\n-   |       ------------ required by a bound in this\n+LL | struct EthernetWorker<C>(C)\n+   |        -------------- required by a bound in this\n LL | where\n-LL |     Ctx<()>: for<'a> BufferUdpStateContext<&'a ()>,\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `StackContext`\n+LL |     Ctx<()>: for<'a> BufferUdpStateContext<&'a ()>;\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `EthernetWorker`\n \n error[E0277]: the trait bound `for<'a> &'a (): BufferMut` is not satisfied\n-  --> $DIR/issue-89118.rs:29:9\n+  --> $DIR/issue-89118.rs:22:20\n    |\n-LL | impl<C> EthernetWorker<C> {}\n-   |         ^^^^^^^^^^^^^^^^^ the trait `for<'a> BufferMut` is not implemented for `&'a ()`\n+LL |     type Handler = Ctx<C::Dispatcher>;\n+   |                    ^^^^^^^^^^^^^^^^^^ the trait `for<'a> BufferMut` is not implemented for `&'a ()`\n    |\n note: required because of the requirements on the impl of `for<'a> BufferUdpStateContext<&'a ()>` for `Ctx<()>`\n   --> $DIR/issue-89118.rs:5:23\n    |\n LL | impl<B: BufferMut, C> BufferUdpStateContext<B> for C {}\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^     ^\n-note: required by a bound in `EthernetWorker`\n-  --> $DIR/issue-89118.rs:28:14\n+note: required by a bound in `StackContext`\n+  --> $DIR/issue-89118.rs:9:14\n    |\n-LL | struct EthernetWorker<C>(C)\n-   |        -------------- required by a bound in this\n+LL | trait StackContext\n+   |       ------------ required by a bound in this\n LL | where\n-LL |     Ctx<()>: for<'a> BufferUdpStateContext<&'a ()>;\n-   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `EthernetWorker`\n+LL |     Ctx<()>: for<'a> BufferUdpStateContext<&'a ()>,\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `StackContext`\n \n error: aborting due to 3 previous errors\n "}, {"sha": "01a3b7913bb7ec3df4e9425ce56ffa1904a5aab8", "filename": "src/test/ui/issues/issue-20413.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.rs?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -7,7 +7,6 @@ struct NoData<T>;\n \n impl<T> Foo for T where NoData<T>: Foo {\n   //~^ ERROR: overflow evaluating the requirement\n-  //~| ERROR: overflow evaluating the requirement\n   fn answer(self) {\n     let val: NoData<T> = NoData;\n   }\n@@ -27,15 +26,13 @@ struct EvenLessData<T>(Option<T>);\n \n impl<T> Bar for T where EvenLessData<T>: Baz {\n //~^ ERROR: overflow evaluating the requirement\n-//~| ERROR: overflow evaluating the requirement\n   fn answer(self) {\n     let val: EvenLessData<T> = EvenLessData(None);\n   }\n }\n \n impl<T> Baz for T where AlmostNoData<T>: Bar {\n //~^ ERROR: overflow evaluating the requirement\n-//~| ERROR: overflow evaluating the requirement\n   fn answer(self) {\n     let val: NoData<T> = AlmostNoData(None);\n   }"}, {"sha": "ea493c58a33f6f8439874e0e3aee245e1200e5c5", "filename": "src/test/ui/issues/issue-20413.stderr", "status": "modified", "additions": 7, "deletions": 62, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-20413.stderr?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -22,102 +22,47 @@ LL | impl<T> Foo for T where NoData<T>: Foo {\n    = note: 127 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Foo` for `NoData<T>`\n \n-error[E0275]: overflow evaluating the requirement `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Foo`\n-  --> $DIR/issue-20413.rs:8:36\n-   |\n-LL | impl<T> Foo for T where NoData<T>: Foo {\n-   |                                    ^^^\n-   |\n-   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required because of the requirements on the impl of `Foo` for `NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<NoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n-  --> $DIR/issue-20413.rs:8:9\n-   |\n-LL | impl<T> Foo for T where NoData<T>: Foo {\n-   |         ^^^     ^\n-   = note: 127 redundant requirements hidden\n-   = note: required because of the requirements on the impl of `Foo` for `NoData<T>`\n-\n error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Baz`\n-  --> $DIR/issue-20413.rs:28:42\n+  --> $DIR/issue-20413.rs:27:42\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |                                          ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n note: required because of the requirements on the impl of `Bar` for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n-  --> $DIR/issue-20413.rs:28:9\n+  --> $DIR/issue-20413.rs:27:9\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |         ^^^     ^\n note: required because of the requirements on the impl of `Baz` for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n-  --> $DIR/issue-20413.rs:36:9\n+  --> $DIR/issue-20413.rs:34:9\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |         ^^^     ^\n    = note: 126 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Baz` for `EvenLessData<T>`\n \n-error[E0275]: overflow evaluating the requirement `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Baz`\n-  --> $DIR/issue-20413.rs:28:42\n-   |\n-LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n-   |                                          ^^^\n-   |\n-   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required because of the requirements on the impl of `Bar` for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n-  --> $DIR/issue-20413.rs:28:9\n-   |\n-LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n-   |         ^^^     ^\n-note: required because of the requirements on the impl of `Baz` for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n-  --> $DIR/issue-20413.rs:36:9\n-   |\n-LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n-   |         ^^^     ^\n-   = note: 126 redundant requirements hidden\n-   = note: required because of the requirements on the impl of `Baz` for `EvenLessData<T>`\n-\n-error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Bar`\n-  --> $DIR/issue-20413.rs:36:42\n-   |\n-LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n-   |                                          ^^^\n-   |\n-   = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n-note: required because of the requirements on the impl of `Baz` for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n-  --> $DIR/issue-20413.rs:36:9\n-   |\n-LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n-   |         ^^^     ^\n-note: required because of the requirements on the impl of `Bar` for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n-  --> $DIR/issue-20413.rs:28:9\n-   |\n-LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n-   |         ^^^     ^\n-   = note: 126 redundant requirements hidden\n-   = note: required because of the requirements on the impl of `Bar` for `AlmostNoData<T>`\n-\n error[E0275]: overflow evaluating the requirement `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>: Bar`\n-  --> $DIR/issue-20413.rs:36:42\n+  --> $DIR/issue-20413.rs:34:42\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |                                          ^^^\n    |\n    = help: consider increasing the recursion limit by adding a `#![recursion_limit = \"256\"]` attribute to your crate (`issue_20413`)\n note: required because of the requirements on the impl of `Baz` for `EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n-  --> $DIR/issue-20413.rs:36:9\n+  --> $DIR/issue-20413.rs:34:9\n    |\n LL | impl<T> Baz for T where AlmostNoData<T>: Bar {\n    |         ^^^     ^\n note: required because of the requirements on the impl of `Bar` for `AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<EvenLessData<AlmostNoData<T>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n-  --> $DIR/issue-20413.rs:28:9\n+  --> $DIR/issue-20413.rs:27:9\n    |\n LL | impl<T> Bar for T where EvenLessData<T>: Baz {\n    |         ^^^     ^\n    = note: 126 redundant requirements hidden\n    = note: required because of the requirements on the impl of `Bar` for `AlmostNoData<T>`\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 4 previous errors\n \n Some errors have detailed explanations: E0275, E0392.\n For more information about an error, try `rustc --explain E0275`."}, {"sha": "affb4e8d04434d2a60042c7bd1830f4213af4d50", "filename": "src/test/ui/lifetimes/lifetime-doesnt-live-long-enough.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Flifetime-doesnt-live-long-enough.stderr?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -9,6 +9,28 @@ help: consider adding an explicit lifetime bound...\n LL | struct Foo<T: 'static> {\n    |             +++++++++\n \n+error[E0309]: the parameter type `K` may not live long enough\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:41:33\n+   |\n+LL |     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n+   |                                 ^^^^^^^^^^^^^^^^ ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL | impl<K: 'a> Nested<K> {\n+   |       ++++\n+\n+error[E0309]: the parameter type `M` may not live long enough\n+  --> $DIR/lifetime-doesnt-live-long-enough.rs:44:36\n+   |\n+LL |     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n+   |                                    ^^^^^^^^^^^^^^^^ ...so that the reference type `&'a Nested<M>` does not outlive the data it points at\n+   |\n+help: consider adding an explicit lifetime bound...\n+   |\n+LL |     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b + 'a>() {\n+   |                                                            ++++\n+\n error[E0309]: the parameter type `K` may not live long enough\n   --> $DIR/lifetime-doesnt-live-long-enough.rs:24:19\n    |\n@@ -40,28 +62,6 @@ help: consider adding an explicit lifetime bound...\n LL |     fn baz<'a, L: 'a, M: X<&'a Nested<L>>>() {\n    |                 ++++\n \n-error[E0309]: the parameter type `K` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:41:33\n-   |\n-LL |     fn generic_in_parent<'a, L: X<&'a Nested<K>>>() {\n-   |                                 ^^^^^^^^^^^^^^^^ ...so that the reference type `&'a Nested<K>` does not outlive the data it points at\n-   |\n-help: consider adding an explicit lifetime bound...\n-   |\n-LL | impl<K: 'a> Nested<K> {\n-   |       ++++\n-\n-error[E0309]: the parameter type `M` may not live long enough\n-  --> $DIR/lifetime-doesnt-live-long-enough.rs:44:36\n-   |\n-LL |     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b>() {\n-   |                                    ^^^^^^^^^^^^^^^^ ...so that the reference type `&'a Nested<M>` does not outlive the data it points at\n-   |\n-help: consider adding an explicit lifetime bound...\n-   |\n-LL |     fn generic_in_child<'a, 'b, L: X<&'a Nested<M>>, M: 'b + 'a>() {\n-   |                                                            ++++\n-\n error: aborting due to 6 previous errors\n \n Some errors have detailed explanations: E0309, E0310."}, {"sha": "b77c8c7fd5bccfd49ebd340af50db97305ee8cee", "filename": "src/test/ui/suggestions/adt-param-with-implicit-sized-bound.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fadt-param-with-implicit-sized-bound.stderr?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -1,3 +1,29 @@\n+error[E0277]: the size for values of type `T` cannot be known at compilation time\n+  --> $DIR/adt-param-with-implicit-sized-bound.rs:25:9\n+   |\n+LL | struct Struct5<T: ?Sized>{\n+   |                - this type parameter needs to be `std::marker::Sized`\n+LL |     _t: X<T>,\n+   |         ^^^^ doesn't have a size known at compile-time\n+   |\n+note: required by a bound in `X`\n+  --> $DIR/adt-param-with-implicit-sized-bound.rs:18:10\n+   |\n+LL | struct X<T>(T);\n+   |          ^ required by this bound in `X`\n+help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n+  --> $DIR/adt-param-with-implicit-sized-bound.rs:18:10\n+   |\n+LL | struct X<T>(T);\n+   |          ^  - ...if indirection were used here: `Box<T>`\n+   |          |\n+   |          this could be changed to `T: ?Sized`...\n+help: consider removing the `?Sized` bound to make the type parameter `Sized`\n+   |\n+LL - struct Struct5<T: ?Sized>{\n+LL + struct Struct5<T>{\n+   |\n+\n error[E0277]: the size for values of type `Self` cannot be known at compilation time\n   --> $DIR/adt-param-with-implicit-sized-bound.rs:2:19\n    |\n@@ -81,32 +107,6 @@ help: consider relaxing the implicit `Sized` restriction\n LL | struct Struct4<T: ?Sized>{\n    |                 ++++++++\n \n-error[E0277]: the size for values of type `T` cannot be known at compilation time\n-  --> $DIR/adt-param-with-implicit-sized-bound.rs:25:9\n-   |\n-LL | struct Struct5<T: ?Sized>{\n-   |                - this type parameter needs to be `std::marker::Sized`\n-LL |     _t: X<T>,\n-   |         ^^^^ doesn't have a size known at compile-time\n-   |\n-note: required by a bound in `X`\n-  --> $DIR/adt-param-with-implicit-sized-bound.rs:18:10\n-   |\n-LL | struct X<T>(T);\n-   |          ^ required by this bound in `X`\n-help: you could relax the implicit `Sized` bound on `T` if it were used through indirection like `&T` or `Box<T>`\n-  --> $DIR/adt-param-with-implicit-sized-bound.rs:18:10\n-   |\n-LL | struct X<T>(T);\n-   |          ^  - ...if indirection were used here: `Box<T>`\n-   |          |\n-   |          this could be changed to `T: ?Sized`...\n-help: consider removing the `?Sized` bound to make the type parameter `Sized`\n-   |\n-LL - struct Struct5<T: ?Sized>{\n-LL + struct Struct5<T>{\n-   |\n-\n error: aborting due to 5 previous errors\n \n For more information about this error, try `rustc --explain E0277`."}, {"sha": "8a053d1f9b4de85ce774aa8e2c00e1c01012b74a", "filename": "src/test/ui/suggestions/object-unsafe-trait-should-use-where-sized.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fobject-unsafe-trait-should-use-where-sized.stderr?ref=9ae2546907d8ef6d0bcd8c81f9e89457d6b79d02", "patch": "@@ -1,12 +1,3 @@\n-error[E0307]: invalid `self` parameter type: ()\n-  --> $DIR/object-unsafe-trait-should-use-where-sized.rs:6:18\n-   |\n-LL |     fn bar(self: ()) {}\n-   |                  ^^\n-   |\n-   = note: type of `self` must be `Self` or a type that dereferences to it\n-   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n-\n error[E0038]: the trait `Trait` cannot be made into an object\n   --> $DIR/object-unsafe-trait-should-use-where-sized.rs:9:12\n    |\n@@ -35,6 +26,15 @@ help: consider changing method `bar`'s `self` parameter to be `&self`\n LL |     fn bar(self: &Self) {}\n    |                  ~~~~~\n \n+error[E0307]: invalid `self` parameter type: ()\n+  --> $DIR/object-unsafe-trait-should-use-where-sized.rs:6:18\n+   |\n+LL |     fn bar(self: ()) {}\n+   |                  ^^\n+   |\n+   = note: type of `self` must be `Self` or a type that dereferences to it\n+   = help: consider changing to `self`, `&self`, `&mut self`, `self: Box<Self>`, `self: Rc<Self>`, `self: Arc<Self>`, or `self: Pin<P>` (where P is one of the previous types except `Self`)\n+\n error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0038, E0307."}]}