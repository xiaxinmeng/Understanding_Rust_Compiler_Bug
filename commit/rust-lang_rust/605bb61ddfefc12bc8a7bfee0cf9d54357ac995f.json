{"sha": "605bb61ddfefc12bc8a7bfee0cf9d54357ac995f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwNWJiNjFkZGZlZmMxMmJjOGE3YmZlZTBjZjlkNTQzNTdhYzk5NWY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-19T05:57:41Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-19T05:57:41Z"}, "message": "Rollup merge of #70088 - tmiasko:atomic-copy, r=eddyb\n\nUse copy bound in atomic operations to generate simpler MIR", "tree": {"sha": "2a74d472f50888a9211edacc653966d649a8d602", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a74d472f50888a9211edacc653966d649a8d602"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/605bb61ddfefc12bc8a7bfee0cf9d54357ac995f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJecwnVCRBK7hj4Ov3rIwAAdHIIAAA6okWByHYLsCh6srita5qs\ncfRQil10/7vSs0rIQi7WXWI6lhamSpjj75aOxwhniHZlAsad6ESjM3fpMSGFKRVF\nd7LEpiWyQUi6GelCADOAgqosotg0vjzSUE90uZ+b4YOSLXAd/f7S49tw8o0E1S3D\nnevzqH7h+ZpyRwz91k4kEo2NJxQ47JfDPJToijJYcWqsgcSf8nnYTh3pXhDiTlb1\nJ/b7ic9rh203xc8Hpw6wY5i3hI3w/YgKWoAKEOhT72DpCAPi92Z+fbyQX/hfZcIL\n/M/7YtLswZqbXWf8tJJNje/kjkeLLi2BMxAJSLkEeKrWuYseMCeFb565Fh9Thcc=\n=DDpP\n-----END PGP SIGNATURE-----\n", "payload": "tree 2a74d472f50888a9211edacc653966d649a8d602\nparent 637233dfee0776a530d1ee1e4e6dcec987f0cbbe\nparent af0d6fc0070065df30af99fe8f1995548d81e903\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584597461 +0100\ncommitter GitHub <noreply@github.com> 1584597461 +0100\n\nRollup merge of #70088 - tmiasko:atomic-copy, r=eddyb\n\nUse copy bound in atomic operations to generate simpler MIR\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/605bb61ddfefc12bc8a7bfee0cf9d54357ac995f", "html_url": "https://github.com/rust-lang/rust/commit/605bb61ddfefc12bc8a7bfee0cf9d54357ac995f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/605bb61ddfefc12bc8a7bfee0cf9d54357ac995f/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "637233dfee0776a530d1ee1e4e6dcec987f0cbbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/637233dfee0776a530d1ee1e4e6dcec987f0cbbe", "html_url": "https://github.com/rust-lang/rust/commit/637233dfee0776a530d1ee1e4e6dcec987f0cbbe"}, {"sha": "af0d6fc0070065df30af99fe8f1995548d81e903", "url": "https://api.github.com/repos/rust-lang/rust/commits/af0d6fc0070065df30af99fe8f1995548d81e903", "html_url": "https://github.com/rust-lang/rust/commit/af0d6fc0070065df30af99fe8f1995548d81e903"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "220f221cdd36dc2713fb836392d44d706b2cefae", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/605bb61ddfefc12bc8a7bfee0cf9d54357ac995f/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/605bb61ddfefc12bc8a7bfee0cf9d54357ac995f/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=605bb61ddfefc12bc8a7bfee0cf9d54357ac995f", "patch": "@@ -2259,7 +2259,7 @@ fn strongest_failure_ordering(order: Ordering) -> Ordering {\n }\n \n #[inline]\n-unsafe fn atomic_store<T>(dst: *mut T, val: T, order: Ordering) {\n+unsafe fn atomic_store<T: Copy>(dst: *mut T, val: T, order: Ordering) {\n     match order {\n         Release => intrinsics::atomic_store_rel(dst, val),\n         Relaxed => intrinsics::atomic_store_relaxed(dst, val),\n@@ -2270,7 +2270,7 @@ unsafe fn atomic_store<T>(dst: *mut T, val: T, order: Ordering) {\n }\n \n #[inline]\n-unsafe fn atomic_load<T>(dst: *const T, order: Ordering) -> T {\n+unsafe fn atomic_load<T: Copy>(dst: *const T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_load_acq(dst),\n         Relaxed => intrinsics::atomic_load_relaxed(dst),\n@@ -2282,7 +2282,7 @@ unsafe fn atomic_load<T>(dst: *const T, order: Ordering) -> T {\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_swap<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_swap<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xchg_acq(dst, val),\n         Release => intrinsics::atomic_xchg_rel(dst, val),\n@@ -2295,7 +2295,7 @@ unsafe fn atomic_swap<T>(dst: *mut T, val: T, order: Ordering) -> T {\n /// Returns the previous value (like __sync_fetch_and_add).\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_add<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_add<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xadd_acq(dst, val),\n         Release => intrinsics::atomic_xadd_rel(dst, val),\n@@ -2308,7 +2308,7 @@ unsafe fn atomic_add<T>(dst: *mut T, val: T, order: Ordering) -> T {\n /// Returns the previous value (like __sync_fetch_and_sub).\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_sub<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_sub<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xsub_acq(dst, val),\n         Release => intrinsics::atomic_xsub_rel(dst, val),\n@@ -2320,7 +2320,7 @@ unsafe fn atomic_sub<T>(dst: *mut T, val: T, order: Ordering) -> T {\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_compare_exchange<T>(\n+unsafe fn atomic_compare_exchange<T: Copy>(\n     dst: *mut T,\n     old: T,\n     new: T,\n@@ -2346,7 +2346,7 @@ unsafe fn atomic_compare_exchange<T>(\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_compare_exchange_weak<T>(\n+unsafe fn atomic_compare_exchange_weak<T: Copy>(\n     dst: *mut T,\n     old: T,\n     new: T,\n@@ -2372,7 +2372,7 @@ unsafe fn atomic_compare_exchange_weak<T>(\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_and<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_and<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_and_acq(dst, val),\n         Release => intrinsics::atomic_and_rel(dst, val),\n@@ -2384,7 +2384,7 @@ unsafe fn atomic_and<T>(dst: *mut T, val: T, order: Ordering) -> T {\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_nand<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_nand<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_nand_acq(dst, val),\n         Release => intrinsics::atomic_nand_rel(dst, val),\n@@ -2396,7 +2396,7 @@ unsafe fn atomic_nand<T>(dst: *mut T, val: T, order: Ordering) -> T {\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_or<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_or<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_or_acq(dst, val),\n         Release => intrinsics::atomic_or_rel(dst, val),\n@@ -2408,7 +2408,7 @@ unsafe fn atomic_or<T>(dst: *mut T, val: T, order: Ordering) -> T {\n \n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_xor<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_xor<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_xor_acq(dst, val),\n         Release => intrinsics::atomic_xor_rel(dst, val),\n@@ -2421,7 +2421,7 @@ unsafe fn atomic_xor<T>(dst: *mut T, val: T, order: Ordering) -> T {\n /// returns the max value (signed comparison)\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_max<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_max<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_max_acq(dst, val),\n         Release => intrinsics::atomic_max_rel(dst, val),\n@@ -2434,7 +2434,7 @@ unsafe fn atomic_max<T>(dst: *mut T, val: T, order: Ordering) -> T {\n /// returns the min value (signed comparison)\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_min<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_min<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_min_acq(dst, val),\n         Release => intrinsics::atomic_min_rel(dst, val),\n@@ -2447,7 +2447,7 @@ unsafe fn atomic_min<T>(dst: *mut T, val: T, order: Ordering) -> T {\n /// returns the max value (unsigned comparison)\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_umax<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_umax<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_umax_acq(dst, val),\n         Release => intrinsics::atomic_umax_rel(dst, val),\n@@ -2460,7 +2460,7 @@ unsafe fn atomic_umax<T>(dst: *mut T, val: T, order: Ordering) -> T {\n /// returns the min value (unsigned comparison)\n #[inline]\n #[cfg(target_has_atomic = \"8\")]\n-unsafe fn atomic_umin<T>(dst: *mut T, val: T, order: Ordering) -> T {\n+unsafe fn atomic_umin<T: Copy>(dst: *mut T, val: T, order: Ordering) -> T {\n     match order {\n         Acquire => intrinsics::atomic_umin_acq(dst, val),\n         Release => intrinsics::atomic_umin_rel(dst, val),"}]}