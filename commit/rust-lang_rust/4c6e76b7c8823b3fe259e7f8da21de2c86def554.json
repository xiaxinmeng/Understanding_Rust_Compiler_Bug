{"sha": "4c6e76b7c8823b3fe259e7f8da21de2c86def554", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNmU3NmI3Yzg4MjNiM2ZlMjU5ZTdmOGRhMjFkZTJjODZkZWY1NTQ=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-15T04:34:36Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-19T15:51:01Z"}, "message": "libtime: use `#[deriving(Copy)]`", "tree": {"sha": "f47d95463c686b2bee314eaa1a9bd8778bfe6c2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f47d95463c686b2bee314eaa1a9bd8778bfe6c2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c6e76b7c8823b3fe259e7f8da21de2c86def554", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c6e76b7c8823b3fe259e7f8da21de2c86def554", "html_url": "https://github.com/rust-lang/rust/commit/4c6e76b7c8823b3fe259e7f8da21de2c86def554", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c6e76b7c8823b3fe259e7f8da21de2c86def554/comments", "author": null, "committer": null, "parents": [{"sha": "ce9243776932b69359226491187d5d9fc7c2d7b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce9243776932b69359226491187d5d9fc7c2d7b2", "html_url": "https://github.com/rust-lang/rust/commit/ce9243776932b69359226491187d5d9fc7c2d7b2"}], "stats": {"total": 12, "additions": 3, "deletions": 9}, "files": [{"sha": "1b7f5cdc4af5132e9606fcd35d26136cb2019844", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4c6e76b7c8823b3fe259e7f8da21de2c86def554/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c6e76b7c8823b3fe259e7f8da21de2c86def554/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=4c6e76b7c8823b3fe259e7f8da21de2c86def554", "patch": "@@ -76,14 +76,12 @@ mod imp {\n }\n \n /// A record specifying a time value in seconds and nanoseconds.\n-#[deriving(Clone, PartialEq, Eq, PartialOrd, Ord, Encodable, Decodable, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Encodable, Decodable, Show)]\n pub struct Timespec {\n     pub sec: i64,\n     pub nsec: i32,\n }\n \n-impl Copy for Timespec {}\n-\n /*\n  * Timespec assumes that pre-epoch Timespecs have negative sec and positive\n  * nsec fields. Darwin's and Linux's struct timespec functions handle pre-\n@@ -268,7 +266,7 @@ pub fn tzset() {\n /// also called a broken-down time value.\n // FIXME: use c_int instead of i32?\n #[repr(C)]\n-#[deriving(Clone, PartialEq, Eq, Show)]\n+#[deriving(Clone, Copy, PartialEq, Eq, Show)]\n pub struct Tm {\n     /// Seconds after the minute - [0, 60]\n     pub tm_sec: i32,\n@@ -309,8 +307,6 @@ pub struct Tm {\n     pub tm_nsec: i32,\n }\n \n-impl Copy for Tm {}\n-\n pub fn empty_tm() -> Tm {\n     Tm {\n         tm_sec: 0_i32,\n@@ -452,7 +448,7 @@ impl Tm {\n     }\n }\n \n-#[deriving(PartialEq)]\n+#[deriving(Copy, PartialEq)]\n pub enum ParseError {\n     InvalidSecond,\n     InvalidMinute,\n@@ -470,8 +466,6 @@ pub enum ParseError {\n     UnexpectedCharacter(char, char),\n }\n \n-impl Copy for ParseError {}\n-\n impl Show for ParseError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}]}