{"sha": "972ae5afe5c38cbf80552179fc9051d78f983ca1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3MmFlNWFmZTVjMzhjYmY4MDU1MjE3OWZjOTA1MWQ3OGY5ODNjYTE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-29T21:27:53Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T19:52:34Z"}, "message": "Point at the `Sized` obligation in `where` clauses", "tree": {"sha": "47b0e399b269d45d976280e53d651116a2167dd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47b0e399b269d45d976280e53d651116a2167dd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/972ae5afe5c38cbf80552179fc9051d78f983ca1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/972ae5afe5c38cbf80552179fc9051d78f983ca1", "html_url": "https://github.com/rust-lang/rust/commit/972ae5afe5c38cbf80552179fc9051d78f983ca1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/972ae5afe5c38cbf80552179fc9051d78f983ca1/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b2f1db6e464b74067557b1748e79cb11a2c5e59", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b2f1db6e464b74067557b1748e79cb11a2c5e59", "html_url": "https://github.com/rust-lang/rust/commit/4b2f1db6e464b74067557b1748e79cb11a2c5e59"}], "stats": {"total": 48, "additions": 41, "deletions": 7}, "files": [{"sha": "08b980480c576e987e9bebbed7de1481940264f3", "filename": "src/librustc/traits/object_safety.rs", "status": "modified", "additions": 35, "deletions": 4, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/972ae5afe5c38cbf80552179fc9051d78f983ca1/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/972ae5afe5c38cbf80552179fc9051d78f983ca1/src%2Flibrustc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fobject_safety.rs?ref=972ae5afe5c38cbf80552179fc9051d78f983ca1", "patch": "@@ -234,17 +234,48 @@ fn get_sized_bounds(tcx: TyCtxt<'_>, trait_def_id: DefId) -> SmallVec<[Span; 1]>\n     tcx.hir()\n         .get_if_local(trait_def_id)\n         .and_then(|node| match node {\n-            hir::Node::Item(hir::Item { kind: hir::ItemKind::Trait(.., bounds, _), .. }) => Some(\n-                bounds\n+            hir::Node::Item(hir::Item {\n+                kind: hir::ItemKind::Trait(.., generics, bounds, _),\n+                ..\n+            }) => Some(\n+                generics\n+                    .where_clause\n+                    .predicates\n                     .iter()\n-                    .filter_map(|b| match b {\n+                    .filter_map(|pred| {\n+                        match pred {\n+                            hir::WherePredicate::BoundPredicate(pred)\n+                                if pred.bounded_ty.hir_id.owner_def_id() == trait_def_id =>\n+                            {\n+                                // Fetch spans for trait bounds that are Sized:\n+                                // `trait T where Self: Pred`\n+                                Some(pred.bounds.iter().filter_map(|b| match b {\n+                                    hir::GenericBound::Trait(\n+                                        trait_ref,\n+                                        hir::TraitBoundModifier::None,\n+                                    ) if trait_has_sized_self(\n+                                        tcx,\n+                                        trait_ref.trait_ref.trait_def_id(),\n+                                    ) =>\n+                                    {\n+                                        Some(trait_ref.span)\n+                                    }\n+                                    _ => None,\n+                                }))\n+                            }\n+                            _ => None,\n+                        }\n+                    })\n+                    .flatten()\n+                    .chain(bounds.iter().filter_map(|b| match b {\n                         hir::GenericBound::Trait(trait_ref, hir::TraitBoundModifier::None)\n                             if trait_has_sized_self(tcx, trait_ref.trait_ref.trait_def_id()) =>\n                         {\n+                            // Fetch spans for supertraits that are `Sized`: `trait T: Super`\n                             Some(trait_ref.span)\n                         }\n                         _ => None,\n-                    })\n+                    }))\n                     .collect::<SmallVec<[Span; 1]>>(),\n             ),\n             _ => None,"}, {"sha": "1ab33261111f83249b62b994089d11fe2710b012", "filename": "src/test/ui/object-safety/object-safety-sized-2.curr.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/972ae5afe5c38cbf80552179fc9051d78f983ca1/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/972ae5afe5c38cbf80552179fc9051d78f983ca1/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.curr.stderr?ref=972ae5afe5c38cbf80552179fc9051d78f983ca1", "patch": "@@ -1,10 +1,11 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-sized-2.rs:14:30\n    |\n+LL |     where Self : Sized\n+   |                  ----- the trait cannot require that `Self : Sized`\n+...\n LL | fn make_bar<T:Bar>(t: &T) -> &dyn Bar {\n    |                              ^^^^^^^^ the trait `Bar` cannot be made into an object\n-   |\n-   = note: the trait cannot require that `Self : Sized`\n \n error: aborting due to previous error\n "}, {"sha": "fa1c89575198c8d6a530cf7a0c5d1541fc71bb83", "filename": "src/test/ui/object-safety/object-safety-sized-2.object_safe_for_dispatch.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/972ae5afe5c38cbf80552179fc9051d78f983ca1/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/972ae5afe5c38cbf80552179fc9051d78f983ca1/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fobject-safety%2Fobject-safety-sized-2.object_safe_for_dispatch.stderr?ref=972ae5afe5c38cbf80552179fc9051d78f983ca1", "patch": "@@ -1,10 +1,12 @@\n error[E0038]: the trait `Bar` cannot be made into an object\n   --> $DIR/object-safety-sized-2.rs:16:5\n    |\n+LL |     where Self : Sized\n+   |                  ----- the trait cannot require that `Self : Sized`\n+...\n LL |     t\n    |     ^ the trait `Bar` cannot be made into an object\n    |\n-   = note: the trait cannot require that `Self : Sized`\n    = note: required because of the requirements on the impl of `std::ops::CoerceUnsized<&dyn Bar>` for `&T`\n    = note: required by cast to type `&dyn Bar`\n "}]}