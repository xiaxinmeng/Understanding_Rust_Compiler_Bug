{"sha": "13429136b88d39b71e18c2742c9f002a9c885429", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzNDI5MTM2Yjg4ZDM5YjcxZTE4YzI3NDJjOWYwMDJhOWM4ODU0Mjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-07T03:07:16Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-10-07T03:07:16Z"}, "message": "Auto merge of #54451 - alexcrichton:no-mangle-extern-linkage, r=michaelwoerister\n\nrustc: Allow `#[no_mangle]` anywhere in a crate\n\nThis commit updates the compiler to allow the `#[no_mangle]` (and\n`#[export_name]` attributes) to be located anywhere within a crate.\nThese attributes are unconditionally processed, causing the compiler to\nalways generate an exported symbol with the appropriate name.\n\nAfter some discussion on #54135 it was found that not a great reason\nthis hasn't been allowed already, and it seems to match the behavior\nthat many expect! Previously the compiler would only export a\n`#[no_mangle]` symbol if it were *publicly reachable*, meaning that it\nitself is `pub` and it's otherwise publicly reachable from the root of\nthe crate. This new definition is that `#[no_mangle]` *is always\nreachable*, no matter where it is in a crate or whether it has `pub` or\nnot.\n\nThis should make it much easier to declare an exported symbol with a\nknown and unique name, even when it's an internal implementation detail\nof the crate itself. Note that these symbols will persist beyond LTO as\nwell, always making their way to the linker.\n\nAlong the way this commit removes the `private_no_mangle_functions` lint\n(also for statics) as there's no longer any need to lint these\nsituations. Furthermore a good number of tests were updated now that\nsymbol visibility has been changed.\n\nCloses #54135", "tree": {"sha": "5b2115916e783d1164ac9fa9d849f95ad39e069f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5b2115916e783d1164ac9fa9d849f95ad39e069f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13429136b88d39b71e18c2742c9f002a9c885429", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13429136b88d39b71e18c2742c9f002a9c885429", "html_url": "https://github.com/rust-lang/rust/commit/13429136b88d39b71e18c2742c9f002a9c885429", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13429136b88d39b71e18c2742c9f002a9c885429/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dbecb7a6449e497ccc7d14801a4f595aa20147db", "url": "https://api.github.com/repos/rust-lang/rust/commits/dbecb7a6449e497ccc7d14801a4f595aa20147db", "html_url": "https://github.com/rust-lang/rust/commit/dbecb7a6449e497ccc7d14801a4f595aa20147db"}, {"sha": "d7d704537457c613e667e9f0cd9fda32600bfb36", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7d704537457c613e667e9f0cd9fda32600bfb36", "html_url": "https://github.com/rust-lang/rust/commit/d7d704537457c613e667e9f0cd9fda32600bfb36"}], "stats": {"total": 707, "additions": 400, "deletions": 307}, "files": [{"sha": "c57c26434e32af38012a12d1554b05de6e93f83d", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -2467,9 +2467,22 @@ impl CodegenFnAttrs {\n         }\n     }\n \n-    /// True if `#[no_mangle]` or `#[export_name(...)]` is present.\n+    /// True if it looks like this symbol needs to be exported, for example:\n+    ///\n+    /// * `#[no_mangle]` is present\n+    /// * `#[export_name(...)]` is present\n+    /// * `#[linkage]` is present\n     pub fn contains_extern_indicator(&self) -> bool {\n-        self.flags.contains(CodegenFnAttrFlags::NO_MANGLE) || self.export_name.is_some()\n+        self.flags.contains(CodegenFnAttrFlags::NO_MANGLE) ||\n+            self.export_name.is_some() ||\n+            match self.linkage {\n+                // these are private, make sure we don't try to consider\n+                // them external\n+                None |\n+                Some(Linkage::Internal) |\n+                Some(Linkage::Private) => false,\n+                Some(_) => true,\n+            }\n     }\n }\n "}, {"sha": "2ac185b681e48f8cad5678e685794eb49ccf0060", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -18,6 +18,7 @@ use hir::intravisit::{self, Visitor, NestedVisitorMap};\n use hir::itemlikevisit::ItemLikeVisitor;\n \n use hir::def::Def;\n+use hir::CodegenFnAttrFlags;\n use hir::def_id::{DefId, LOCAL_CRATE};\n use lint;\n use middle::privacy;\n@@ -302,14 +303,18 @@ fn has_allow_dead_code_or_lang_attr(tcx: TyCtxt<'_, '_, '_>,\n         return true;\n     }\n \n-    // #[used] also keeps the item alive forcefully,\n-    // e.g. for placing it in a specific section.\n-    if attr::contains_name(attrs, \"used\") {\n+    // Don't lint about global allocators\n+    if attr::contains_name(attrs, \"global_allocator\") {\n         return true;\n     }\n \n-    // Don't lint about global allocators\n-    if attr::contains_name(attrs, \"global_allocator\") {\n+    let def_id = tcx.hir.local_def_id(id);\n+    let cg_attrs = tcx.codegen_fn_attrs(def_id);\n+\n+    // #[used], #[no_mangle], #[export_name], etc also keeps the item alive\n+    // forcefully, e.g. for placing it in a specific section.\n+    if cg_attrs.contains_extern_indicator() ||\n+        cg_attrs.flags.contains(CodegenFnAttrFlags::USED) {\n         return true;\n     }\n "}, {"sha": "55e5663f030b2ef99d5e2b7cb897377ffe77d016", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -352,7 +352,7 @@ impl<'a, 'tcx: 'a> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a,\n         // which are currently akin to allocator symbols.\n         let def_id = self.tcx.hir.local_def_id(item.id);\n         let codegen_attrs = self.tcx.codegen_fn_attrs(def_id);\n-        if codegen_attrs.linkage.is_some() ||\n+        if codegen_attrs.contains_extern_indicator() ||\n             codegen_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL) {\n             self.worklist.push(item.id);\n         }"}, {"sha": "f04e5496ce443fb503c821c7c09b0fae140b422f", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 60, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -1163,18 +1163,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for PluginAsLibrary {\n     }\n }\n \n-declare_lint! {\n-    PRIVATE_NO_MANGLE_FNS,\n-    Warn,\n-    \"functions marked #[no_mangle] should be exported\"\n-}\n-\n-declare_lint! {\n-    PRIVATE_NO_MANGLE_STATICS,\n-    Warn,\n-    \"statics marked #[no_mangle] should be exported\"\n-}\n-\n declare_lint! {\n     NO_MANGLE_CONST_ITEMS,\n     Deny,\n@@ -1192,52 +1180,16 @@ pub struct InvalidNoMangleItems;\n \n impl LintPass for InvalidNoMangleItems {\n     fn get_lints(&self) -> LintArray {\n-        lint_array!(PRIVATE_NO_MANGLE_FNS,\n-                    PRIVATE_NO_MANGLE_STATICS,\n-                    NO_MANGLE_CONST_ITEMS,\n+        lint_array!(NO_MANGLE_CONST_ITEMS,\n                     NO_MANGLE_GENERIC_ITEMS)\n     }\n }\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n     fn check_item(&mut self, cx: &LateContext, it: &hir::Item) {\n-        let suggest_export = |vis: &hir::Visibility, err: &mut DiagnosticBuilder| {\n-            let suggestion = match vis.node {\n-                hir::VisibilityKind::Inherited => {\n-                    // inherited visibility is empty span at item start; need an extra space\n-                    Some(\"pub \".to_owned())\n-                },\n-                hir::VisibilityKind::Restricted { .. } |\n-                hir::VisibilityKind::Crate(_) => {\n-                    Some(\"pub\".to_owned())\n-                },\n-                hir::VisibilityKind::Public => {\n-                    err.help(\"try exporting the item with a `pub use` statement\");\n-                    None\n-                }\n-            };\n-            if let Some(replacement) = suggestion {\n-                err.span_suggestion_with_applicability(\n-                    vis.span,\n-                    \"try making it public\",\n-                    replacement,\n-                    Applicability::MachineApplicable\n-                );\n-            }\n-        };\n-\n         match it.node {\n             hir::ItemKind::Fn(.., ref generics, _) => {\n                 if let Some(no_mangle_attr) = attr::find_by_name(&it.attrs, \"no_mangle\") {\n-                    if attr::contains_name(&it.attrs, \"linkage\") {\n-                        return;\n-                    }\n-                    if !cx.access_levels.is_reachable(it.id) {\n-                        let msg = \"function is marked #[no_mangle], but not exported\";\n-                        let mut err = cx.struct_span_lint(PRIVATE_NO_MANGLE_FNS, it.span, msg);\n-                        suggest_export(&it.vis, &mut err);\n-                        err.emit();\n-                    }\n                     for param in &generics.params {\n                         match param.kind {\n                             GenericParamKind::Lifetime { .. } => {}\n@@ -1261,15 +1213,6 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidNoMangleItems {\n                     }\n                 }\n             }\n-            hir::ItemKind::Static(..) => {\n-                if attr::contains_name(&it.attrs, \"no_mangle\") &&\n-                    !cx.access_levels.is_reachable(it.id) {\n-                        let msg = \"static is marked #[no_mangle], but not exported\";\n-                        let mut err = cx.struct_span_lint(PRIVATE_NO_MANGLE_STATICS, it.span, msg);\n-                        suggest_export(&it.vis, &mut err);\n-                        err.emit();\n-                    }\n-            }\n             hir::ItemKind::Const(..) => {\n                 if attr::contains_name(&it.attrs, \"no_mangle\") {\n                     // Const items do not refer to a particular location in memory, and therefore\n@@ -1785,8 +1728,6 @@ impl LintPass for SoftLints {\n             UNUSED_DOC_COMMENTS,\n             UNCONDITIONAL_RECURSION,\n             PLUGIN_AS_LIBRARY,\n-            PRIVATE_NO_MANGLE_FNS,\n-            PRIVATE_NO_MANGLE_STATICS,\n             NO_MANGLE_CONST_ITEMS,\n             NO_MANGLE_GENERIC_ITEMS,\n             MUTABLE_TRANSMUTES,"}, {"sha": "bdf09007fdd466a51a2f0a24aeac3f1c69e4fd86", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -387,4 +387,8 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/48950\");\n     store.register_removed(\"resolve_trait_on_defaulted_unit\",\n         \"converted into hard error, see https://github.com/rust-lang/rust/issues/48950\");\n+    store.register_removed(\"private_no_mangle_fns\",\n+        \"no longer an warning, #[no_mangle] functions always exported\");\n+    store.register_removed(\"private_no_mangle_statics\",\n+        \"no longer an warning, #[no_mangle] statics always exported\");\n }"}, {"sha": "a0590a800d3cc77494ccf1a8c07a13487b2917c3", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -515,11 +515,11 @@ pub fn update_count_then_panic(msg: Box<dyn Any + Send>) -> ! {\n     rust_panic(&mut RewrapBox(msg))\n }\n \n-/// A private no-mangle function on which to slap yer breakpoints.\n+/// An unmangled function (through `rustc_std_internal_symbol`) on which to slap\n+/// yer breakpoints.\n #[inline(never)]\n-#[no_mangle]\n-#[allow(private_no_mangle_fns)] // yes we get it, but we like breakpoints\n-pub fn rust_panic(mut msg: &mut dyn BoxMeUp) -> ! {\n+#[cfg_attr(not(test), rustc_std_internal_symbol)]\n+fn rust_panic(mut msg: &mut dyn BoxMeUp) -> ! {\n     let code = unsafe {\n         let obj = &mut msg as *mut &mut dyn BoxMeUp;\n         __rust_start_panic(obj as usize)"}, {"sha": "3546284f9a3c595b229207bc41674942616b8d7f", "filename": "src/test/codegen/export-no-mangle.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fcodegen%2Fexport-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fcodegen%2Fexport-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexport-no-mangle.rs?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_type = \"lib\"]\n+\n+mod private {\n+    // CHECK: @FOO =\n+    #[no_mangle]\n+    pub static FOO: u32 = 3;\n+\n+    // CHECK: @BAR =\n+    #[export_name = \"BAR\"]\n+    static BAR: u32 = 3;\n+\n+    // CHECK: void @foo()\n+    #[no_mangle]\n+    pub extern fn foo() {}\n+\n+    // CHECK: void @bar()\n+    #[export_name = \"bar\"]\n+    extern fn bar() {}\n+}"}, {"sha": "3f092b802f99a197d78138570437fef2febabb76", "filename": "src/test/codegen/external-no-mangle-fns.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-fns.rs?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -0,0 +1,63 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -O\n+// `#[no_mangle]`d functions always have external linkage, i.e. no `internal` in their `define`s\n+\n+#![crate_type = \"lib\"]\n+#![no_std]\n+\n+// CHECK: define void @a()\n+#[no_mangle]\n+fn a() {}\n+\n+// CHECK: define void @b()\n+#[no_mangle]\n+pub fn b() {}\n+\n+mod private {\n+    // CHECK: define void @c()\n+    #[no_mangle]\n+    fn c() {}\n+\n+    // CHECK: define void @d()\n+    #[no_mangle]\n+    pub fn d() {}\n+}\n+\n+const HIDDEN: () = {\n+    // CHECK: define void @e()\n+    #[no_mangle]\n+    fn e() {}\n+\n+    // CHECK: define void @f()\n+    #[no_mangle]\n+    pub fn f() {}\n+};\n+\n+// The surrounding item should not accidentally become external\n+// CHECK: define internal {{.*}} void @_ZN22external_no_mangle_fns1x\n+#[inline(never)]\n+fn x() {\n+    // CHECK: define void @g()\n+    #[no_mangle]\n+    fn g() {\n+        x();\n+    }\n+\n+    // CHECK: define void @h()\n+    #[no_mangle]\n+    pub fn h() {}\n+\n+    // side effect to keep `x` around\n+    unsafe {\n+        core::ptr::read_volatile(&42);\n+    }\n+}"}, {"sha": "59d829633e55c497c87be79c04eed3f0bfc88133", "filename": "src/test/codegen/external-no-mangle-statics.rs", "status": "added", "additions": 88, "deletions": 0, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fexternal-no-mangle-statics.rs?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -0,0 +1,88 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -O\n+// `#[no_mangle]`d static variables always have external linkage, i.e. no `internal` in their\n+// definitions\n+\n+#![crate_type = \"lib\"]\n+#![no_std]\n+\n+// CHECK: @A = local_unnamed_addr constant\n+#[no_mangle]\n+static A: u8 = 0;\n+\n+// CHECK: @B = local_unnamed_addr global\n+#[no_mangle]\n+static mut B: u8 = 0;\n+\n+// CHECK: @C = local_unnamed_addr constant\n+#[no_mangle]\n+pub static C: u8 = 0;\n+\n+// CHECK: @D = local_unnamed_addr global\n+#[no_mangle]\n+pub static mut D: u8 = 0;\n+\n+mod private {\n+    // CHECK: @E = local_unnamed_addr constant\n+    #[no_mangle]\n+    static E: u8 = 0;\n+\n+    // CHECK: @F = local_unnamed_addr global\n+    #[no_mangle]\n+    static mut F: u8 = 0;\n+\n+    // CHECK: @G = local_unnamed_addr constant\n+    #[no_mangle]\n+    pub static G: u8 = 0;\n+\n+    // CHECK: @H = local_unnamed_addr global\n+    #[no_mangle]\n+    pub static mut H: u8 = 0;\n+}\n+\n+const HIDDEN: () = {\n+    // CHECK: @I = local_unnamed_addr constant\n+    #[no_mangle]\n+    static I: u8 = 0;\n+\n+    // CHECK: @J = local_unnamed_addr global\n+    #[no_mangle]\n+    static mut J: u8 = 0;\n+\n+    // CHECK: @K = local_unnamed_addr constant\n+    #[no_mangle]\n+    pub static K: u8 = 0;\n+\n+    // CHECK: @L = local_unnamed_addr global\n+    #[no_mangle]\n+    pub static mut L: u8 = 0;\n+};\n+\n+// The surrounding item should not accidentally become external\n+fn x() {\n+    // CHECK: @M = local_unnamed_addr constant\n+    #[no_mangle]\n+    static M: fn() = x;\n+\n+    // CHECK: @N = local_unnamed_addr global\n+    #[no_mangle]\n+    static mut N: u8 = 0;\n+\n+    // CHECK: @O = local_unnamed_addr constant\n+    #[no_mangle]\n+    pub static O: u8 = 0;\n+\n+    // CHECK: @P = local_unnamed_addr global\n+    #[no_mangle]\n+    pub static mut P: u8 = 0;\n+}\n+// CHECK: define internal void @_ZN26external_no_mangle_statics1x{{.*$}}"}, {"sha": "b146e106aa10406a59bc868b9b62dc152774fb6b", "filename": "src/test/codegen/issue-44056-macos-tls-align.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fcodegen%2Fissue-44056-macos-tls-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fcodegen%2Fissue-44056-macos-tls-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fissue-44056-macos-tls-align.rs?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -17,15 +17,13 @@\n #![crate_type = \"rlib\"]\n #![feature(thread_local)]\n \n-// CHECK: @STATIC_VAR_1 = internal thread_local unnamed_addr global <{ [32 x i8] }> zeroinitializer, section \"__DATA,__thread_bss\", align 4\n+// CHECK: @STATIC_VAR_1 = thread_local local_unnamed_addr global <{ [32 x i8] }> zeroinitializer, section \"__DATA,__thread_bss\", align 4\n #[no_mangle]\n-#[allow(private_no_mangle_statics)]\n #[thread_local]\n static mut STATIC_VAR_1: [u32; 8] = [0; 8];\n \n-// CHECK: @STATIC_VAR_2 = internal thread_local unnamed_addr global <{ [32 x i8] }> <{{[^>]*}}>, section \"__DATA,__thread_data\", align 4\n+// CHECK: @STATIC_VAR_2 = thread_local local_unnamed_addr global <{ [32 x i8] }> <{{[^>]*}}>, section \"__DATA,__thread_data\", align 4\n #[no_mangle]\n-#[allow(private_no_mangle_statics)]\n #[thread_local]\n static mut STATIC_VAR_2: [u32; 8] = [4; 8];\n "}, {"sha": "5ddca4763260d51798018de4ee223feed846a73f", "filename": "src/test/codegen/lto-removes-invokes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fcodegen%2Flto-removes-invokes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fcodegen%2Flto-removes-invokes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Flto-removes-invokes.rs?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -20,8 +20,8 @@ fn main() {\n fn foo() {\n     let _a = Box::new(3);\n     bar();\n-// CHECK-LABEL: foo\n-// CHECK: call {{.*}} void @bar\n+// CHECK-LABEL: define void @foo\n+// CHECK: call void @bar\n }\n \n #[inline(never)]"}, {"sha": "f0a9e95ed5af589e75898c473559d3235023e9c0", "filename": "src/test/run-make-fulldeps/extern-fn-reachable/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-reachable%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-reachable%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fextern-fn-reachable%2Fmain.rs?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -20,8 +20,8 @@ pub fn main() {\n         let path = Path::new(\"libdylib.so\");\n         let a = DynamicLibrary::open(Some(&path)).unwrap();\n         assert!(a.symbol::<isize>(\"fun1\").is_ok());\n-        assert!(a.symbol::<isize>(\"fun2\").is_err());\n-        assert!(a.symbol::<isize>(\"fun3\").is_err());\n+        assert!(a.symbol::<isize>(\"fun2\").is_ok());\n+        assert!(a.symbol::<isize>(\"fun3\").is_ok());\n         assert!(a.symbol::<isize>(\"fun4\").is_ok());\n         assert!(a.symbol::<isize>(\"fun5\").is_ok());\n     }"}, {"sha": "741bce921e67e60922a114165920291ac5bd46b1", "filename": "src/test/run-make/thumb-none-cortex-m/Makefile", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Frun-make%2Fthumb-none-cortex-m%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Frun-make%2Fthumb-none-cortex-m%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fthumb-none-cortex-m%2FMakefile?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -25,6 +25,8 @@ CRATE := cortex-m\n CRATE_URL := https://github.com/rust-embedded/cortex-m\n CRATE_SHA1 := a448e9156e2cb1e556e5441fd65426952ef4b927 # 0.5.0\n \n+export RUSTFLAGS := --cap-lints=allow\n+\n all:\n \tenv\n \tmkdir -p $(WORK_DIR)"}, {"sha": "4ea3d0d0d0a07245bbc85fefb246f7421aac44c6", "filename": "src/test/run-pass-fulldeps/auxiliary/linkage-visibility.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flinkage-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flinkage-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Flinkage-visibility.rs?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -39,7 +39,7 @@ pub fn test() {\n     let lib = DynamicLibrary::open(None).unwrap();\n     unsafe {\n         assert!(lib.symbol::<isize>(\"foo\").is_ok());\n-        assert!(lib.symbol::<isize>(\"baz\").is_err());\n-        assert!(lib.symbol::<isize>(\"bar\").is_err());\n+        assert!(lib.symbol::<isize>(\"baz\").is_ok());\n+        assert!(lib.symbol::<isize>(\"bar\").is_ok());\n     }\n }"}, {"sha": "cb9f5ca698dd7b1326201bd675fc41c035111528", "filename": "src/test/run-pass/issues/issue-33992.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33992.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33992.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-33992.rs?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -11,6 +11,7 @@\n // run-pass\n // ignore-windows\n // ignore-macos\n+// ignore-wasm32-bare common linkage not implemented right now\n \n #![feature(linkage)]\n "}, {"sha": "bbddbb7d679a8ded69b3119fba4dffbe869ad8a5", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -393,7 +393,6 @@ mod no_mangle {\n     mod inner { #![no_mangle=\"3500\"] }\n \n     #[no_mangle = \"3500\"] fn f() { }\n-    //~^ WARN function is marked #[no_mangle], but not exported\n \n     #[no_mangle = \"3500\"] struct S;\n "}, {"sha": "3b31b411f3f56785f37b012850a1bf58c1dd7664", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 121, "deletions": 131, "changes": 252, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -173,13 +173,13 @@ LL |     #[deny(x5100)] impl S { }\n    |            ^^^^^\n \n warning: macro_escape is a deprecated synonym for macro_use\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:501:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:500:1\n    |\n LL | #[macro_escape]\n    | ^^^^^^^^^^^^^^^\n \n warning: macro_escape is a deprecated synonym for macro_use\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:504:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:503:17\n    |\n LL |     mod inner { #![macro_escape] }\n    |                 ^^^^^^^^^^^^^^^^\n@@ -523,720 +523,710 @@ warning: unused attribute\n LL | #[automatically_derived = \"3600\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-warning: function is marked #[no_mangle], but not exported\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:395:27\n-   |\n-LL |     #[no_mangle = \"3500\"] fn f() { }\n-   |                           -^^^^^^^^^\n-   |                           |\n-   |                           help: try making it public: `pub`\n-   |\n-   = note: #[warn(private_no_mangle_fns)] on by default\n-\n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:408:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:407:17\n    |\n LL |     mod inner { #![no_link=\"3400\"] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:411:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:410:5\n    |\n LL |     #[no_link = \"3400\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:414:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:413:5\n    |\n LL |     #[no_link = \"3400\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:417:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:416:5\n    |\n LL |     #[no_link = \"3400\"]type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:420:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:419:5\n    |\n LL |     #[no_link = \"3400\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:405:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:404:1\n    |\n LL | #[no_link = \"3400\"]\n    | ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:427:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:426:17\n    |\n LL |     mod inner { #![should_panic=\"3200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:430:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:429:5\n    |\n LL |     #[should_panic = \"3200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:433:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:432:5\n    |\n LL |     #[should_panic = \"3200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:436:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:435:5\n    |\n LL |     #[should_panic = \"3200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:439:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:438:5\n    |\n LL |     #[should_panic = \"3200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:424:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:423:1\n    |\n LL | #[should_panic = \"3200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:446:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:445:17\n    |\n LL |     mod inner { #![ignore=\"3100\"] }\n    |                 ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:449:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:448:5\n    |\n LL |     #[ignore = \"3100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:452:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:451:5\n    |\n LL |     #[ignore = \"3100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:455:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:454:5\n    |\n LL |     #[ignore = \"3100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:458:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:457:5\n    |\n LL |     #[ignore = \"3100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:443:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:442:1\n    |\n LL | #[ignore = \"3100\"]\n    | ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:465:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:464:17\n    |\n LL |     mod inner { #![no_implicit_prelude=\"3000\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:468:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:467:5\n    |\n LL |     #[no_implicit_prelude = \"3000\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:471:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:470:5\n    |\n LL |     #[no_implicit_prelude = \"3000\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:474:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:473:5\n    |\n LL |     #[no_implicit_prelude = \"3000\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:477:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:476:5\n    |\n LL |     #[no_implicit_prelude = \"3000\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:462:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:461:1\n    |\n LL | #[no_implicit_prelude = \"3000\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:484:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:483:17\n    |\n LL |     mod inner { #![reexport_test_harness_main=\"2900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:487:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:486:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:490:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:489:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:493:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:492:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:496:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:495:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:481:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:480:1\n    |\n LL | #[reexport_test_harness_main = \"2900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:507:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:506:5\n    |\n LL |     #[macro_escape] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:510:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:509:5\n    |\n LL |     #[macro_escape] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:513:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:512:5\n    |\n LL |     #[macro_escape] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:516:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:515:5\n    |\n LL |     #[macro_escape] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:524:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:523:17\n    |\n LL |     mod inner { #![no_std=\"2600\"] }\n    |                 ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:524:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:523:17\n    |\n LL |     mod inner { #![no_std=\"2600\"] }\n    |                 ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:528:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:527:5\n    |\n LL |     #[no_std = \"2600\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:528:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:527:5\n    |\n LL |     #[no_std = \"2600\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:532:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:531:5\n    |\n LL |     #[no_std = \"2600\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:532:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:531:5\n    |\n LL |     #[no_std = \"2600\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:536:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:535:5\n    |\n LL |     #[no_std = \"2600\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:536:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:535:5\n    |\n LL |     #[no_std = \"2600\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:540:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:539:5\n    |\n LL |     #[no_std = \"2600\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:540:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:539:5\n    |\n LL |     #[no_std = \"2600\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:520:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:519:1\n    |\n LL | #[no_std = \"2600\"]\n    | ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:520:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:519:1\n    |\n LL | #[no_std = \"2600\"]\n    | ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:679:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:678:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:679:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:678:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:683:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:682:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:683:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:682:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:687:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:686:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:687:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:686:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:691:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:690:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:691:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:690:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:695:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:694:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:695:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:694:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:675:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:674:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:675:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:674:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:704:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:703:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:704:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:703:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:708:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:708:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:712:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:711:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:712:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:711:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:716:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:715:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:716:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:715:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:720:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:719:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:720:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:719:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:699:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:699:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:729:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:728:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:729:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:728:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:733:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:732:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:733:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:732:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:737:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:736:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:737:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:736:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:741:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:740:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:741:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:740:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:745:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:744:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:745:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:744:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:725:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:724:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:725:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:724:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:755:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:754:17\n    |\n LL |     mod inner { #![no_main=\"0400\"] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:755:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:754:17\n    |\n LL |     mod inner { #![no_main=\"0400\"] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:759:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:758:5\n    |\n LL |     #[no_main = \"0400\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:759:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:758:5\n    |\n LL |     #[no_main = \"0400\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:763:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:762:5\n    |\n LL |     #[no_main = \"0400\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:763:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:762:5\n    |\n LL |     #[no_main = \"0400\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:767:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:766:5\n    |\n LL |     #[no_main = \"0400\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:767:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:766:5\n    |\n LL |     #[no_main = \"0400\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:771:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:5\n    |\n LL |     #[no_main = \"0400\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:771:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:5\n    |\n LL |     #[no_main = \"0400\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:751:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:750:1\n    |\n LL | #[no_main = \"0400\"]\n    | ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:751:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:750:1\n    |\n LL | #[no_main = \"0400\"]\n    | ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:793:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:792:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:793:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:792:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:797:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:796:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:797:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:796:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:801:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:800:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:801:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:800:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:805:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:804:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:805:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:804:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:809:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:808:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:809:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:808:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:789:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:788:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:789:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:788:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:818:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:817:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:818:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:817:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:822:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:821:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:822:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:821:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:826:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:825:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:826:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:825:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:830:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:829:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:830:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:829:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:834:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:833:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:834:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:833:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:814:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:813:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:814:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:813:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1314,7 +1304,7 @@ LL | #![proc_macro_derive          = \"2500\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: compilation successful\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:845:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:844:1\n    |\n LL | / fn main() { //~ ERROR compilation successful\n LL | |     println!(\"Hello World\");"}, {"sha": "8188c2c455e40ecb0772582717fcecf762592dbb", "filename": "src/test/ui/lint/lint-unexported-no-mangle.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.rs?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -11,7 +11,7 @@\n // compile-flags:-F private_no_mangle_fns -F no_mangle_const_items -F private_no_mangle_statics\n \n #[no_mangle]\n-fn foo() { //~ ERROR function is marked #[no_mangle], but not exported\n+fn foo() {\n }\n \n #[allow(dead_code)]\n@@ -30,7 +30,7 @@ pub static BAR: u64 = 1;\n \n #[allow(dead_code)]\n #[no_mangle]\n-static PRIVATE_BAR: u64 = 1; //~ ERROR static is marked #[no_mangle], but not exported\n+static PRIVATE_BAR: u64 = 1;\n \n \n fn main() {"}, {"sha": "063915d5b5f9a6c368169b92612311f2a26402e1", "filename": "src/test/ui/lint/lint-unexported-no-mangle.stderr", "status": "modified", "additions": 6, "deletions": 21, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-unexported-no-mangle.stderr?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -1,15 +1,10 @@\n-error: function is marked #[no_mangle], but not exported\n-  --> $DIR/lint-unexported-no-mangle.rs:14:1\n+warning: lint `private_no_mangle_fns` has been removed: `no longer an warning, #[no_mangle] functions always exported`\n    |\n-LL |   fn foo() { //~ ERROR function is marked #[no_mangle], but not exported\n-   |   ^\n-   |   |\n-   |  _help: try making it public: `pub`\n-   | |\n-LL | | }\n-   | |_^\n+   = note: requested on the command line with `-F private_no_mangle_fns`\n+\n+warning: lint `private_no_mangle_statics` has been removed: `no longer an warning, #[no_mangle] statics always exported`\n    |\n-   = note: requested on the command line with `-F private-no-mangle-fns`\n+   = note: requested on the command line with `-F private_no_mangle_statics`\n \n error: const items should never be #[no_mangle]\n   --> $DIR/lint-unexported-no-mangle.rs:19:1\n@@ -29,15 +24,5 @@ LL | pub const PUB_FOO: u64 = 1; //~ ERROR const items should never be #[no_mang\n    | |\n    | help: try a static value: `pub static`\n \n-error: static is marked #[no_mangle], but not exported\n-  --> $DIR/lint-unexported-no-mangle.rs:33:1\n-   |\n-LL | static PRIVATE_BAR: u64 = 1; //~ ERROR static is marked #[no_mangle], but not exported\n-   | -^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   | |\n-   | help: try making it public: `pub`\n-   |\n-   = note: requested on the command line with `-F private-no-mangle-statics`\n-\n-error: aborting due to 4 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "ff50b3b1ab68f6dd21d17d02a39c0c8914de4aee", "filename": "src/test/ui/lint/suggestions.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.rs?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -13,9 +13,6 @@\n #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issue #43896\n #![feature(no_debug)]\n \n-#[no_mangle] static SHENZHOU: usize = 1;\n-//~^ WARN static is marked #[no_mangle]\n-//~| HELP try making it public\n #[no_mangle] const DISCOVERY: usize = 1;\n //~^ ERROR const items should never be #[no_mangle]\n //~| HELP try a static value\n@@ -27,27 +24,25 @@ pub fn defiant<T>(_t: T) {}\n \n #[no_mangle]\n fn rio_grande() {}\n-//~^ WARN function is marked\n-//~| HELP try making it public\n \n mod badlands {\n     // The private-no-mangle lints shouldn't suggest inserting `pub` when the\n     // item is already `pub` (but triggered the lint because, e.g., it's in a\n     // private module). (Issue #47383)\n-    #[no_mangle] pub static DAUNTLESS: bool = true;\n-    //~^ WARN static is marked\n-    //~| HELP try exporting the item with a `pub use` statement\n-    #[no_mangle] pub fn val_jean() {}\n-    //~^ WARN function is marked\n-    //~| HELP try exporting the item with a `pub use` statement\n+    #[no_mangle] pub const DAUNTLESS: bool = true;\n+    //~^ ERROR const items should never be #[no_mangle]\n+    //~| HELP try a static value\n+    #[no_mangle] pub fn val_jean<T>() {}\n+    //~^ WARN functions generic over types must be mangled\n+    //~| HELP remove this attribute\n \n     // ... but we can suggest just-`pub` instead of restricted\n-    #[no_mangle] pub(crate) static VETAR: bool = true;\n-    //~^ WARN static is marked\n-    //~| HELP try making it public\n-    #[no_mangle] pub(crate) fn crossfield() {}\n-    //~^ WARN function is marked\n-    //~| HELP try making it public\n+    #[no_mangle] pub(crate) const VETAR: bool = true;\n+    //~^ ERROR const items should never be #[no_mangle]\n+    //~| HELP try a static value\n+    #[no_mangle] pub(crate) fn crossfield<T>() {}\n+    //~^ WARN functions generic over types must be mangled\n+    //~| HELP remove this attribute\n }\n \n struct Equinox {"}, {"sha": "340a4a48512e2e0bd88fc6686c455da8b730b7b3", "filename": "src/test/ui/lint/suggestions.stderr", "status": "modified", "additions": 31, "deletions": 51, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsuggestions.stderr?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -1,5 +1,5 @@\n warning: unnecessary parentheses around assigned value\n-  --> $DIR/suggestions.rs:64:21\n+  --> $DIR/suggestions.rs:59:21\n    |\n LL |         let mut a = (1);\n    |                     ^^^ help: remove these parentheses\n@@ -11,15 +11,15 @@ LL | #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issu\n    |                     ^^^^^^^^^^^^^\n \n warning: use of deprecated attribute `no_debug`: the `#[no_debug]` attribute was an experimental feature that has been deprecated due to lack of demand. See https://github.com/rust-lang/rust/issues/29721\n-  --> $DIR/suggestions.rs:57:1\n+  --> $DIR/suggestions.rs:52:1\n    |\n LL | #[no_debug] // should suggest removal of deprecated attribute\n    | ^^^^^^^^^^^ help: remove this attribute\n    |\n    = note: #[warn(deprecated)] on by default\n \n warning: variable does not need to be mutable\n-  --> $DIR/suggestions.rs:64:13\n+  --> $DIR/suggestions.rs:59:13\n    |\n LL |         let mut a = (1);\n    |             ----^\n@@ -33,7 +33,7 @@ LL | #![warn(unused_mut, unused_parens)] // UI tests pass `-A unused`\u2014see Issu\n    |         ^^^^^^^^^^\n \n warning: variable does not need to be mutable\n-  --> $DIR/suggestions.rs:70:13\n+  --> $DIR/suggestions.rs:65:13\n    |\n LL |            let mut\n    |   _____________^\n@@ -44,18 +44,8 @@ LL | ||             b = 1;\n    |  |____________|\n    |               help: remove this `mut`\n \n-warning: static is marked #[no_mangle], but not exported\n-  --> $DIR/suggestions.rs:16:14\n-   |\n-LL | #[no_mangle] static SHENZHOU: usize = 1;\n-   |              -^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |              |\n-   |              help: try making it public: `pub`\n-   |\n-   = note: #[warn(private_no_mangle_statics)] on by default\n-\n error: const items should never be #[no_mangle]\n-  --> $DIR/suggestions.rs:19:14\n+  --> $DIR/suggestions.rs:16:14\n    |\n LL | #[no_mangle] const DISCOVERY: usize = 1;\n    |              -----^^^^^^^^^^^^^^^^^^^^^^\n@@ -65,7 +55,7 @@ LL | #[no_mangle] const DISCOVERY: usize = 1;\n    = note: #[deny(no_mangle_const_items)] on by default\n \n warning: functions generic over types must be mangled\n-  --> $DIR/suggestions.rs:25:1\n+  --> $DIR/suggestions.rs:22:1\n    |\n LL | #[no_mangle]\n    | ------------ help: remove this attribute\n@@ -75,58 +65,48 @@ LL | pub fn defiant<T>(_t: T) {}\n    |\n    = note: #[warn(no_mangle_generic_items)] on by default\n \n-warning: function is marked #[no_mangle], but not exported\n-  --> $DIR/suggestions.rs:29:1\n-   |\n-LL | fn rio_grande() {}\n-   | -^^^^^^^^^^^^^^^^^\n-   | |\n-   | help: try making it public: `pub`\n+error: const items should never be #[no_mangle]\n+  --> $DIR/suggestions.rs:32:18\n    |\n-   = note: #[warn(private_no_mangle_fns)] on by default\n+LL |     #[no_mangle] pub const DAUNTLESS: bool = true;\n+   |                  ---------^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                  |\n+   |                  help: try a static value: `pub static`\n \n-warning: static is marked #[no_mangle], but not exported\n-  --> $DIR/suggestions.rs:37:18\n-   |\n-LL |     #[no_mangle] pub static DAUNTLESS: bool = true;\n-   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+warning: functions generic over types must be mangled\n+  --> $DIR/suggestions.rs:35:18\n    |\n-   = help: try exporting the item with a `pub use` statement\n+LL |     #[no_mangle] pub fn val_jean<T>() {}\n+   |     ------------ ^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: remove this attribute\n \n-warning: function is marked #[no_mangle], but not exported\n+error: const items should never be #[no_mangle]\n   --> $DIR/suggestions.rs:40:18\n    |\n-LL |     #[no_mangle] pub fn val_jean() {}\n-   |                  ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = help: try exporting the item with a `pub use` statement\n-\n-warning: static is marked #[no_mangle], but not exported\n-  --> $DIR/suggestions.rs:45:18\n-   |\n-LL |     #[no_mangle] pub(crate) static VETAR: bool = true;\n-   |                  ----------^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     #[no_mangle] pub(crate) const VETAR: bool = true;\n+   |                  ----------------^^^^^^^^^^^^^^^^^^^^\n    |                  |\n-   |                  help: try making it public: `pub`\n+   |                  help: try a static value: `pub static`\n \n-warning: function is marked #[no_mangle], but not exported\n-  --> $DIR/suggestions.rs:48:18\n+warning: functions generic over types must be mangled\n+  --> $DIR/suggestions.rs:43:18\n    |\n-LL |     #[no_mangle] pub(crate) fn crossfield() {}\n-   |                  ----------^^^^^^^^^^^^^^^^^^^\n-   |                  |\n-   |                  help: try making it public: `pub`\n+LL |     #[no_mangle] pub(crate) fn crossfield<T>() {}\n+   |     ------------ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     help: remove this attribute\n \n warning: denote infinite loops with `loop { ... }`\n-  --> $DIR/suggestions.rs:61:5\n+  --> $DIR/suggestions.rs:56:5\n    |\n LL |     while true {\n    |     ^^^^^^^^^^ help: use `loop`\n    |\n    = note: #[warn(while_true)] on by default\n \n warning: the `warp_factor:` in this pattern is redundant\n-  --> $DIR/suggestions.rs:76:23\n+  --> $DIR/suggestions.rs:71:23\n    |\n LL |             Equinox { warp_factor: warp_factor } => {}\n    |                       ------------^^^^^^^^^^^^\n@@ -135,5 +115,5 @@ LL |             Equinox { warp_factor: warp_factor } => {}\n    |\n    = note: #[warn(non_shorthand_field_patterns)] on by default\n \n-error: aborting due to previous error\n+error: aborting due to 3 previous errors\n "}, {"sha": "5b717c45254ccc2dfb4f745c0c30fd734e335ba9", "filename": "src/tools/cargotest/main.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftools%2Fcargotest%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13429136b88d39b71e18c2742c9f002a9c885429/src%2Ftools%2Fcargotest%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargotest%2Fmain.rs?ref=13429136b88d39b71e18c2742c9f002a9c885429", "patch": "@@ -61,11 +61,11 @@ const TEST_REPOS: &'static [Test] = &[\n     Test {\n         name: \"servo\",\n         repo: \"https://github.com/servo/servo\",\n-        sha: \"17e97b9320fdb7cdb33bbc5f4d0fde0653bbf2e4\",\n+        sha: \"987e376ca7a4245dbc3e0c06e963278ee1ac92d1\",\n         lock: None,\n         // Only test Stylo a.k.a. Quantum CSS, the parts of Servo going into Firefox.\n         // This takes much less time to build than all of Servo and supports stable Rust.\n-        packages: &[\"stylo_tests\", \"selectors\"],\n+        packages: &[\"selectors\"],\n     },\n     Test {\n         name: \"webrender\","}]}