{"sha": "d1862b419616d1198b89f57d4e1416f85d4d2101", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxODYyYjQxOTYxNmQxMTk4Yjg5ZjU3ZDRlMTQxNmY4NWQ0ZDIxMDE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-11-24T21:25:03Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-11-26T21:34:24Z"}, "message": "resolve: Fallback to extern prelude in 2015 imports used from global 2018 edition", "tree": {"sha": "1b3633611ecde79fef948a133fca62a8f2f91dd6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1b3633611ecde79fef948a133fca62a8f2f91dd6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d1862b419616d1198b89f57d4e1416f85d4d2101", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d1862b419616d1198b89f57d4e1416f85d4d2101", "html_url": "https://github.com/rust-lang/rust/commit/d1862b419616d1198b89f57d4e1416f85d4d2101", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d1862b419616d1198b89f57d4e1416f85d4d2101/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e121756ef003f13b9dbb6a44b8bc4dce87b84a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e121756ef003f13b9dbb6a44b8bc4dce87b84a8", "html_url": "https://github.com/rust-lang/rust/commit/5e121756ef003f13b9dbb6a44b8bc4dce87b84a8"}], "stats": {"total": 111, "additions": 86, "deletions": 25}, "files": [{"sha": "0be9881f910b78f0fede1bfcbefe59583ebed486", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d1862b419616d1198b89f57d4e1416f85d4d2101/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1862b419616d1198b89f57d4e1416f85d4d2101/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d1862b419616d1198b89f57d4e1416f85d4d2101", "patch": "@@ -104,6 +104,7 @@ enum Weak {\n \n enum ScopeSet {\n     Import(Namespace),\n+    AbsolutePath(Namespace),\n     Macro(MacroKind),\n     Module,\n }\n@@ -1008,6 +1009,9 @@ enum ModuleOrUniformRoot<'a> {\n     /// Regular module.\n     Module(Module<'a>),\n \n+    /// Virtual module that denotes resolution in crate root with fallback to extern prelude.\n+    CrateRootAndExternPrelude,\n+\n     /// Virtual module that denotes resolution in extern prelude.\n     /// Used for paths starting with `::` on 2018 edition or `extern::`.\n     ExternPrelude,\n@@ -1021,9 +1025,11 @@ enum ModuleOrUniformRoot<'a> {\n impl<'a> PartialEq for ModuleOrUniformRoot<'a> {\n     fn eq(&self, other: &Self) -> bool {\n         match (*self, *other) {\n-            (ModuleOrUniformRoot::Module(lhs), ModuleOrUniformRoot::Module(rhs)) =>\n-                ptr::eq(lhs, rhs),\n-            (ModuleOrUniformRoot::ExternPrelude, ModuleOrUniformRoot::ExternPrelude) => true,\n+            (ModuleOrUniformRoot::Module(lhs),\n+             ModuleOrUniformRoot::Module(rhs)) => ptr::eq(lhs, rhs),\n+            (ModuleOrUniformRoot::CrateRootAndExternPrelude,\n+             ModuleOrUniformRoot::CrateRootAndExternPrelude) |\n+            (ModuleOrUniformRoot::ExternPrelude, ModuleOrUniformRoot::ExternPrelude) |\n             (ModuleOrUniformRoot::CurrentScope, ModuleOrUniformRoot::CurrentScope) => true,\n             _ => false,\n         }\n@@ -1243,6 +1249,7 @@ struct UseError<'a> {\n #[derive(Clone, Copy, PartialEq, Debug)]\n enum AmbiguityKind {\n     Import,\n+    AbsolutePath,\n     BuiltinAttr,\n     DeriveHelper,\n     LegacyHelperVsPrelude,\n@@ -1258,6 +1265,8 @@ impl AmbiguityKind {\n         match self {\n             AmbiguityKind::Import =>\n                 \"name vs any other name during import resolution\",\n+            AmbiguityKind::AbsolutePath =>\n+                \"name in the crate root vs extern crate during absolute path resolution\",\n             AmbiguityKind::BuiltinAttr =>\n                 \"built-in attribute vs any other name\",\n             AmbiguityKind::DeriveHelper =>\n@@ -2226,6 +2235,7 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                 ident.span = ident.span.modern();\n                 ident.span.adjust(Mark::root());\n             }\n+            ModuleOrUniformRoot::CrateRootAndExternPrelude |\n             ModuleOrUniformRoot::CurrentScope => {\n                 // No adjustments\n             }\n@@ -3791,6 +3801,12 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                         module = Some(ModuleOrUniformRoot::ExternPrelude);\n                         continue;\n                     }\n+                    if name == keywords::CrateRoot.name() &&\n+                       ident.span.rust_2015() && self.session.rust_2018() {\n+                        // `::a::b` from 2015 macro on 2018 global edition\n+                        module = Some(ModuleOrUniformRoot::CrateRootAndExternPrelude);\n+                        continue;\n+                    }\n                     if name == keywords::CrateRoot.name() ||\n                        name == keywords::Crate.name() ||\n                        name == keywords::DollarCrate.name() {"}, {"sha": "d306e9ebe32b5f3222fd6eb9c93bcabfac66b25b", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d1862b419616d1198b89f57d4e1416f85d4d2101/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1862b419616d1198b89f57d4e1416f85d4d2101/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=d1862b419616d1198b89f57d4e1416f85d4d2101", "patch": "@@ -625,13 +625,14 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n \n         // Go through all the scopes and try to resolve the name.\n         let rust_2015 = orig_ident.span.rust_2015();\n-        let (ns, macro_kind, is_import) = match scope_set {\n-            ScopeSet::Import(ns) => (ns, None, true),\n-            ScopeSet::Macro(macro_kind) => (MacroNS, Some(macro_kind), false),\n-            ScopeSet::Module => (TypeNS, None, false),\n+        let (ns, macro_kind, is_import, is_absolute_path) = match scope_set {\n+            ScopeSet::Import(ns) => (ns, None, true, false),\n+            ScopeSet::AbsolutePath(ns) => (ns, None, false, true),\n+            ScopeSet::Macro(macro_kind) => (MacroNS, Some(macro_kind), false, false),\n+            ScopeSet::Module => (TypeNS, None, false, false),\n         };\n         let mut where_to_resolve = match ns {\n-            _ if is_import && rust_2015 => WhereToResolve::CrateRoot,\n+            _ if is_absolute_path || is_import && rust_2015 => WhereToResolve::CrateRoot,\n             TypeNS | ValueNS => WhereToResolve::Module(parent_scope.module),\n             MacroNS => WhereToResolve::DeriveHelpers,\n         };\n@@ -761,7 +762,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     }\n                 }\n                 WhereToResolve::ExternPrelude => {\n-                    if use_prelude {\n+                    if use_prelude || is_absolute_path {\n                         match self.extern_prelude_get(ident, !record_used) {\n                             Some(binding) => Ok((binding, Flags::PRELUDE)),\n                             None => Err(Determinacy::determined(\n@@ -827,6 +828,8 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n \n                             let ambiguity_error_kind = if is_import {\n                                 Some(AmbiguityKind::Import)\n+                            } else if is_absolute_path {\n+                                Some(AmbiguityKind::AbsolutePath)\n                             } else if innermost_def == builtin || def == builtin {\n                                 Some(AmbiguityKind::BuiltinAttr)\n                             } else if innermost_def == derive_helper || def == derive_helper {\n@@ -894,10 +897,18 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                     LegacyScope::Empty => WhereToResolve::Module(parent_scope.module),\n                     LegacyScope::Uninitialized => unreachable!(),\n                 }\n-                WhereToResolve::CrateRoot => match ns {\n+                WhereToResolve::CrateRoot if is_import => match ns {\n                     TypeNS | ValueNS => WhereToResolve::Module(parent_scope.module),\n                     MacroNS => WhereToResolve::DeriveHelpers,\n                 }\n+                WhereToResolve::CrateRoot if is_absolute_path => match ns {\n+                    TypeNS => {\n+                        ident.span.adjust(Mark::root());\n+                        WhereToResolve::ExternPrelude\n+                    }\n+                    ValueNS | MacroNS => break,\n+                }\n+                WhereToResolve::CrateRoot => unreachable!(),\n                 WhereToResolve::Module(module) => {\n                     match self.hygienic_lexical_parent(module, &mut ident.span) {\n                         Some(parent_module) => WhereToResolve::Module(parent_module),\n@@ -915,6 +926,7 @@ impl<'a, 'cl> Resolver<'a, 'cl> {\n                 WhereToResolve::BuiltinMacros => WhereToResolve::BuiltinAttrs,\n                 WhereToResolve::BuiltinAttrs => WhereToResolve::LegacyPluginHelpers,\n                 WhereToResolve::LegacyPluginHelpers => break, // nowhere else to search\n+                WhereToResolve::ExternPrelude if is_absolute_path => break,\n                 WhereToResolve::ExternPrelude => WhereToResolve::ToolPrelude,\n                 WhereToResolve::ToolPrelude => WhereToResolve::StdLibPrelude,\n                 WhereToResolve::StdLibPrelude => match ns {"}, {"sha": "3bfa862f0dc7dc8a355c8914a2e2037ffa278270", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d1862b419616d1198b89f57d4e1416f85d4d2101/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1862b419616d1198b89f57d4e1416f85d4d2101/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=d1862b419616d1198b89f57d4e1416f85d4d2101", "patch": "@@ -162,6 +162,15 @@ impl<'a, 'crateloader> Resolver<'a, 'crateloader> {\n     ) -> Result<&'a NameBinding<'a>, (Determinacy, Weak)> {\n         let module = match module {\n             ModuleOrUniformRoot::Module(module) => module,\n+            ModuleOrUniformRoot::CrateRootAndExternPrelude => {\n+                assert!(!restricted_shadowing);\n+                let parent_scope = self.dummy_parent_scope();\n+                let binding = self.early_resolve_ident_in_lexical_scope(\n+                    ident, ScopeSet::AbsolutePath(ns), &parent_scope,\n+                    record_used, record_used, path_span,\n+                );\n+                return binding.map_err(|determinacy| (determinacy, Weak::No));\n+            }\n             ModuleOrUniformRoot::ExternPrelude => {\n                 assert!(!restricted_shadowing);\n                 return if let Some(binding) = self.extern_prelude_get(ident, !record_used) {"}, {"sha": "c72331ca2e119e62c39f3f91b9fcd33363742837", "filename": "src/test/ui/editions/auxiliary/edition-imports-2015.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d1862b419616d1198b89f57d4e1416f85d4d2101/src%2Ftest%2Fui%2Feditions%2Fauxiliary%2Fedition-imports-2015.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1862b419616d1198b89f57d4e1416f85d4d2101/src%2Ftest%2Fui%2Feditions%2Fauxiliary%2Fedition-imports-2015.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fauxiliary%2Fedition-imports-2015.rs?ref=d1862b419616d1198b89f57d4e1416f85d4d2101", "patch": "@@ -7,7 +7,7 @@ macro_rules! gen_imports { () => {\n \n     fn check_absolute() {\n         ::absolute::Path;\n-        // ::std::collections::LinkedList::<u8>::new(); // FIXME\n+        ::std::collections::LinkedList::<u8>::new();\n     }\n }}\n \n@@ -27,4 +27,5 @@ macro_rules! gen_gated { () => {\n #[macro_export]\n macro_rules! gen_ambiguous { () => {\n     use Ambiguous;\n+    type A = ::edition_imports_2015::Path;\n }}"}, {"sha": "dcdbf0d050be116f9a8ad1574110d83bc4c5974b", "filename": "src/test/ui/editions/edition-imports-2018.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d1862b419616d1198b89f57d4e1416f85d4d2101/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2018.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1862b419616d1198b89f57d4e1416f85d4d2101/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2018.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2018.rs?ref=d1862b419616d1198b89f57d4e1416f85d4d2101", "patch": "@@ -1,4 +1,3 @@\n-// compile-pass\n // edition:2018\n // aux-build:edition-imports-2015.rs\n \n@@ -22,12 +21,7 @@ mod check {\n }\n \n mod check_glob {\n-    gen_glob!(); // OK\n-\n-    fn check() {\n-        import::Path;\n-        absolute::Path;\n-    }\n+    gen_glob!(); //~ ERROR cannot glob-import all possible crates\n }\n \n fn main() {}"}, {"sha": "944f42ee0451ba6e2f5fe9170266a68e0b865bad", "filename": "src/test/ui/editions/edition-imports-2018.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d1862b419616d1198b89f57d4e1416f85d4d2101/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2018.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1862b419616d1198b89f57d4e1416f85d4d2101/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2018.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-2018.stderr?ref=d1862b419616d1198b89f57d4e1416f85d4d2101", "patch": "@@ -0,0 +1,10 @@\n+error: cannot glob-import all possible crates\n+  --> $DIR/edition-imports-2018.rs:24:5\n+   |\n+LL |     gen_glob!(); //~ ERROR cannot glob-import all possible crates\n+   |     ^^^^^^^^^^^^\n+   |\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n+\n+error: aborting due to previous error\n+"}, {"sha": "562d3c9e70fb1153d392469a43a50dfdc76dab98", "filename": "src/test/ui/editions/edition-imports-virtual-2015-ambiguity.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d1862b419616d1198b89f57d4e1416f85d4d2101/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d1862b419616d1198b89f57d4e1416f85d4d2101/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-ambiguity.rs?ref=d1862b419616d1198b89f57d4e1416f85d4d2101", "patch": "@@ -1,17 +1,20 @@\n // edition:2018\n+// compile-flags:--extern edition_imports_2015\n // aux-build:edition-imports-2015.rs\n // error-pattern: `Ambiguous` is ambiguous\n+// error-pattern: `edition_imports_2015` is ambiguous\n \n-#[macro_use]\n-extern crate edition_imports_2015;\n+mod edition_imports_2015 {\n+    pub struct Path;\n+}\n \n pub struct Ambiguous {}\n \n mod check {\n     pub struct Ambiguous {}\n \n     fn check() {\n-        gen_ambiguous!();\n+        edition_imports_2015::gen_ambiguous!();\n     }\n }\n "}, {"sha": "d0897d081c3574c7112aa9ee60c7841a89a97379", "filename": "src/test/ui/editions/edition-imports-virtual-2015-ambiguity.stderr", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d1862b419616d1198b89f57d4e1416f85d4d2101/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-ambiguity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d1862b419616d1198b89f57d4e1416f85d4d2101/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-ambiguity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Feditions%2Fedition-imports-virtual-2015-ambiguity.stderr?ref=d1862b419616d1198b89f57d4e1416f85d4d2101", "patch": "@@ -1,21 +1,37 @@\n error[E0659]: `Ambiguous` is ambiguous (name vs any other name during import resolution)\n   --> <::edition_imports_2015::gen_ambiguous macros>:1:15\n    |\n-LL | (  ) => { use Ambiguous ; }\n+LL | (  ) => { use Ambiguous ; type A = :: edition_imports_2015 :: Path ; }\n    |               ^^^^^^^^^ ambiguous name\n    |\n note: `Ambiguous` could refer to the struct defined here\n-  --> $DIR/edition-imports-virtual-2015-ambiguity.rs:8:1\n+  --> $DIR/edition-imports-virtual-2015-ambiguity.rs:11:1\n    |\n LL | pub struct Ambiguous {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^\n note: `Ambiguous` could also refer to the struct defined here\n-  --> $DIR/edition-imports-virtual-2015-ambiguity.rs:11:5\n+  --> $DIR/edition-imports-virtual-2015-ambiguity.rs:14:5\n    |\n LL |     pub struct Ambiguous {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n    = help: use `self::Ambiguous` to refer to this struct unambiguously\n \n-error: aborting due to previous error\n+error[E0659]: `edition_imports_2015` is ambiguous (name in the crate root vs extern crate during absolute path resolution)\n+  --> <::edition_imports_2015::gen_ambiguous macros>:1:39\n+   |\n+LL | (  ) => { use Ambiguous ; type A = :: edition_imports_2015 :: Path ; }\n+   |                                       ^^^^^^^^^^^^^^^^^^^^ ambiguous name\n+   |\n+   = note: `edition_imports_2015` could refer to an extern crate passed with `--extern`\n+   = help: use `::edition_imports_2015` to refer to this extern crate unambiguously\n+note: `edition_imports_2015` could also refer to the module defined here\n+  --> $DIR/edition-imports-virtual-2015-ambiguity.rs:7:1\n+   |\n+LL | / mod edition_imports_2015 {\n+LL | |     pub struct Path;\n+LL | | }\n+   | |_^\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0659`."}]}