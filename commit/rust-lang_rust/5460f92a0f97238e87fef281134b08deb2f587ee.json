{"sha": "5460f92a0f97238e87fef281134b08deb2f587ee", "node_id": "C_kwDOAAsO6NoAKDU0NjBmOTJhMGY5NzIzOGU4N2ZlZjI4MTEzNGIwOGRlYjJmNTg3ZWU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-06-02T23:02:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-06-02T23:02:06Z"}, "message": "Rollup merge of #112168 - scottmcm:lower-div-rem-unchecked-to-mir, r=oli-obk\n\nLower `unchecked_div`/`_rem` to MIR's `BinOp::Div`/`Rem`\n\nAs described in <https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.BinOp.html#variant.Div>, the ordinary `BinOp`s for these are already UB for division by zero ([or overflow](https://llvm.org/docs/LangRef.html#sdiv-instruction), [demo](https://rust.godbolt.org/z/71e7P7Exh)), as MIR building is responsible for inserting code to panic for those cases regardless of whether the overflow checks are enabled.\n\nSo we can lower these in the same arm that lowers `wrapping_add` to MIR `BinOp::Add` and such, as all these cases turn into ordinary `Rvalue::BinaryOp`s.", "tree": {"sha": "cb108b149eb72261ac2ddd42adc1e42b4f82bb8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb108b149eb72261ac2ddd42adc1e42b4f82bb8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5460f92a0f97238e87fef281134b08deb2f587ee", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkenTuCRBK7hj4Ov3rIwAAA5IIADrhNuREeIKVwTIWBPDxt27+\n3bTLLe24xE+yBDfkwOCXzIn0D+ZONkOTUQmjSGhcHvs5mwAMNTlY9PMSM8P3ws7U\nbZBUUJeqrLNDLJSC2iRxxuw5nXZzrfKfXfNnhrX2iMZmuajZeYxym6h8VWZiyOxj\n2JeN47poTsml3S1y6mYFyUBEtq1JnnAzdUCqIg9Ths3edXM+/OzBbgOg8Du/gC1E\nx9x8mVYd8Wov6OEOy2B8KjtTau5MvNTg3IM5i0q8XYDcJw4hBl2GQ4nXNNrZylT7\nXsRmgxoUq/zD46q8fr+2b9mM4yB0Uxn3UBLKAP+yMMiaSbMEzrrk3kzlin7UGbg=\n=7X78\n-----END PGP SIGNATURE-----\n", "payload": "tree cb108b149eb72261ac2ddd42adc1e42b4f82bb8b\nparent dd09f4d35c5b6881f0eb757b5fd8c1604be3b06a\nparent adb37d4999cbb83bd670bb767b3c8d08e43e3c7c\nauthor Michael Goulet <michael@errs.io> 1685746926 -0700\ncommitter GitHub <noreply@github.com> 1685746926 -0700\n\nRollup merge of #112168 - scottmcm:lower-div-rem-unchecked-to-mir, r=oli-obk\n\nLower `unchecked_div`/`_rem` to MIR's `BinOp::Div`/`Rem`\n\nAs described in <https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/mir/enum.BinOp.html#variant.Div>, the ordinary `BinOp`s for these are already UB for division by zero ([or overflow](https://llvm.org/docs/LangRef.html#sdiv-instruction), [demo](https://rust.godbolt.org/z/71e7P7Exh)), as MIR building is responsible for inserting code to panic for those cases regardless of whether the overflow checks are enabled.\n\nSo we can lower these in the same arm that lowers `wrapping_add` to MIR `BinOp::Add` and such, as all these cases turn into ordinary `Rvalue::BinaryOp`s.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5460f92a0f97238e87fef281134b08deb2f587ee", "html_url": "https://github.com/rust-lang/rust/commit/5460f92a0f97238e87fef281134b08deb2f587ee", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5460f92a0f97238e87fef281134b08deb2f587ee/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd09f4d35c5b6881f0eb757b5fd8c1604be3b06a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd09f4d35c5b6881f0eb757b5fd8c1604be3b06a", "html_url": "https://github.com/rust-lang/rust/commit/dd09f4d35c5b6881f0eb757b5fd8c1604be3b06a"}, {"sha": "adb37d4999cbb83bd670bb767b3c8d08e43e3c7c", "url": "https://api.github.com/repos/rust-lang/rust/commits/adb37d4999cbb83bd670bb767b3c8d08e43e3c7c", "html_url": "https://github.com/rust-lang/rust/commit/adb37d4999cbb83bd670bb767b3c8d08e43e3c7c"}], "stats": {"total": 215, "additions": 134, "deletions": 81}, "files": [{"sha": "1e83c30bd677a2eb6dfc9a6097d7ea1ee07b0cba", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -475,9 +475,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n         sym::unchecked_add\n         | sym::unchecked_sub\n         | sym::unchecked_mul\n-        | sym::unchecked_div\n         | sym::exact_div\n-        | sym::unchecked_rem\n         | sym::unchecked_shl\n         | sym::unchecked_shr => {\n             intrinsic_args!(fx, args => (x, y); intrinsic);\n@@ -487,8 +485,7 @@ fn codegen_regular_intrinsic_call<'tcx>(\n                 sym::unchecked_add => BinOp::Add,\n                 sym::unchecked_sub => BinOp::Sub,\n                 sym::unchecked_mul => BinOp::Mul,\n-                sym::unchecked_div | sym::exact_div => BinOp::Div,\n-                sym::unchecked_rem => BinOp::Rem,\n+                sym::exact_div => BinOp::Div,\n                 sym::unchecked_shl => BinOp::Shl,\n                 sym::unchecked_shr => BinOp::Shr,\n                 _ => unreachable!(),"}, {"sha": "9ac2424e76be03891843f382491152017aaccf49", "filename": "compiler/rustc_codegen_ssa/src/mir/intrinsic.rs", "status": "modified", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fintrinsic.rs?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -211,8 +211,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 args[1].val.unaligned_volatile_store(bx, dst);\n                 return;\n             }\n-            | sym::unchecked_div\n-            | sym::unchecked_rem\n             | sym::unchecked_shl\n             | sym::unchecked_shr\n             | sym::unchecked_add\n@@ -229,20 +227,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                 bx.exactudiv(args[0].immediate(), args[1].immediate())\n                             }\n                         }\n-                        sym::unchecked_div => {\n-                            if signed {\n-                                bx.sdiv(args[0].immediate(), args[1].immediate())\n-                            } else {\n-                                bx.udiv(args[0].immediate(), args[1].immediate())\n-                            }\n-                        }\n-                        sym::unchecked_rem => {\n-                            if signed {\n-                                bx.srem(args[0].immediate(), args[1].immediate())\n-                            } else {\n-                                bx.urem(args[0].immediate(), args[1].immediate())\n-                            }\n-                        }\n                         sym::unchecked_shl => bx.shl(args[0].immediate(), args[1].immediate()),\n                         sym::unchecked_shr => {\n                             if signed {"}, {"sha": "fffb9a7f26487186745025acbe1b52b0dbde4a8b", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -238,9 +238,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             | sym::unchecked_shr\n             | sym::unchecked_add\n             | sym::unchecked_sub\n-            | sym::unchecked_mul\n-            | sym::unchecked_div\n-            | sym::unchecked_rem => {\n+            | sym::unchecked_mul => {\n                 let l = self.read_immediate(&args[0])?;\n                 let r = self.read_immediate(&args[1])?;\n                 let bin_op = match intrinsic_name {\n@@ -249,8 +247,6 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                     sym::unchecked_add => BinOp::Add,\n                     sym::unchecked_sub => BinOp::Sub,\n                     sym::unchecked_mul => BinOp::Mul,\n-                    sym::unchecked_div => BinOp::Div,\n-                    sym::unchecked_rem => BinOp::Rem,\n                     _ => bug!(),\n                 };\n                 let (val, overflowed, _ty) = self.overflowing_binary_op(bin_op, &l, &r)?;"}, {"sha": "1a65f74f4fe22640eafb8e056b6ce4262f6db4a2", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -1273,13 +1273,18 @@ pub enum BinOp {\n     Mul,\n     /// The `/` operator (division)\n     ///\n-    /// Division by zero is UB, because the compiler should have inserted checks\n-    /// prior to this.\n+    /// For integer types, division by zero is UB, as is `MIN / -1` for signed.\n+    /// The compiler should have inserted checks prior to this.\n+    ///\n+    /// Floating-point division by zero is safe, and does not need guards.\n     Div,\n     /// The `%` operator (modulus)\n     ///\n-    /// Using zero as the modulus (second operand) is UB, because the compiler\n-    /// should have inserted checks prior to this.\n+    /// For integer types, using zero as the modulus (second operand) is UB,\n+    /// as is `MIN % -1` for signed.\n+    /// The compiler should have inserted checks prior to this.\n+    ///\n+    /// Floating-point remainder by zero is safe, and does not need guards.\n     Rem,\n     /// The `^` operator (bitwise xor)\n     BitXor,"}, {"sha": "3a7d58f7125680a76dad7530abc8e14cfd2626fc", "filename": "compiler/rustc_mir_transform/src/lower_intrinsics.rs", "status": "modified", "additions": 28, "deletions": 23, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flower_intrinsics.rs?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -82,30 +82,35 @@ impl<'tcx> MirPass<'tcx> for LowerIntrinsics {\n                         drop(args);\n                         terminator.kind = TerminatorKind::Goto { target };\n                     }\n-                    sym::wrapping_add | sym::wrapping_sub | sym::wrapping_mul => {\n-                        if let Some(target) = *target {\n-                            let lhs;\n-                            let rhs;\n-                            {\n-                                let mut args = args.drain(..);\n-                                lhs = args.next().unwrap();\n-                                rhs = args.next().unwrap();\n-                            }\n-                            let bin_op = match intrinsic_name {\n-                                sym::wrapping_add => BinOp::Add,\n-                                sym::wrapping_sub => BinOp::Sub,\n-                                sym::wrapping_mul => BinOp::Mul,\n-                                _ => bug!(\"unexpected intrinsic\"),\n-                            };\n-                            block.statements.push(Statement {\n-                                source_info: terminator.source_info,\n-                                kind: StatementKind::Assign(Box::new((\n-                                    *destination,\n-                                    Rvalue::BinaryOp(bin_op, Box::new((lhs, rhs))),\n-                                ))),\n-                            });\n-                            terminator.kind = TerminatorKind::Goto { target };\n+                    sym::wrapping_add\n+                    | sym::wrapping_sub\n+                    | sym::wrapping_mul\n+                    | sym::unchecked_div\n+                    | sym::unchecked_rem => {\n+                        let target = target.unwrap();\n+                        let lhs;\n+                        let rhs;\n+                        {\n+                            let mut args = args.drain(..);\n+                            lhs = args.next().unwrap();\n+                            rhs = args.next().unwrap();\n                         }\n+                        let bin_op = match intrinsic_name {\n+                            sym::wrapping_add => BinOp::Add,\n+                            sym::wrapping_sub => BinOp::Sub,\n+                            sym::wrapping_mul => BinOp::Mul,\n+                            sym::unchecked_div => BinOp::Div,\n+                            sym::unchecked_rem => BinOp::Rem,\n+                            _ => bug!(\"unexpected intrinsic\"),\n+                        };\n+                        block.statements.push(Statement {\n+                            source_info: terminator.source_info,\n+                            kind: StatementKind::Assign(Box::new((\n+                                *destination,\n+                                Rvalue::BinaryOp(bin_op, Box::new((lhs, rhs))),\n+                            ))),\n+                        });\n+                        terminator.kind = TerminatorKind::Goto { target };\n                     }\n                     sym::add_with_overflow | sym::sub_with_overflow | sym::mul_with_overflow => {\n                         if let Some(target) = *target {"}, {"sha": "3530f4a807f2c295447f8287760353aecbcf9c85", "filename": "tests/mir-opt/lower_intrinsics.align_of.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.align_of.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -7,7 +7,7 @@\n       bb0: {\n -         _0 = std::intrinsics::min_align_of::<T>() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:42\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:21:5: 21:40\n+-                                          // + span: $DIR/lower_intrinsics.rs:27:5: 27:40\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::min_align_of::<T>}, val: Value(<ZST>) }\n +         _0 = AlignOf(T);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:42\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:42"}, {"sha": "158ce62e209c250cbc73049a18ea1d5c143d7cf3", "filename": "tests/mir-opt/lower_intrinsics.assume.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.assume.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -11,7 +11,7 @@\n           StorageLive(_1);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n -         _1 = std::intrinsics::assume(const true) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:106:9: 106:32\n+-                                          // + span: $DIR/lower_intrinsics.rs:112:9: 112:32\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(bool) {std::intrinsics::assume}, val: Value(<ZST>) }\n +         assume(const true);              // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:38"}, {"sha": "6fc9616d855402deaddb8370c3e193ed28f55fdc", "filename": "tests/mir-opt/lower_intrinsics.discriminant.LowerIntrinsics.diff", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.discriminant.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -31,7 +31,7 @@\n           _3 = &(*_4);                     // scope 0 at $DIR/lower_intrinsics.rs:+1:42: +1:44\n -         _2 = discriminant_value::<T>(move _3) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:45\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:82:5: 82:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:88:5: 88:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a T) -> <T as DiscriminantKind>::Discriminant {discriminant_value::<T>}, val: Value(<ZST>) }\n +         _2 = discriminant((*_3));        // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:45\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:45\n@@ -46,13 +46,13 @@\n           StorageLive(_7);                 // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n           _19 = const _;                   // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n                                            // mir::Constant\n-                                           // + span: $DIR/lower_intrinsics.rs:83:42: 83:44\n+                                           // + span: $DIR/lower_intrinsics.rs:89:42: 89:44\n                                            // + literal: Const { ty: &i32, val: Unevaluated(discriminant, [T], Some(promoted[2])) }\n           _7 = &(*_19);                    // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n           _6 = &(*_7);                     // scope 0 at $DIR/lower_intrinsics.rs:+2:42: +2:44\n -         _5 = discriminant_value::<i32>(move _6) -> [return: bb2, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:83:5: 83:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:89:5: 89:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a i32) -> <i32 as DiscriminantKind>::Discriminant {discriminant_value::<i32>}, val: Value(<ZST>) }\n +         _5 = discriminant((*_6));        // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n +         goto -> bb2;                     // scope 0 at $DIR/lower_intrinsics.rs:+2:5: +2:45\n@@ -67,13 +67,13 @@\n           StorageLive(_11);                // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n           _18 = const _;                   // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n                                            // mir::Constant\n-                                           // + span: $DIR/lower_intrinsics.rs:84:42: 84:45\n+                                           // + span: $DIR/lower_intrinsics.rs:90:42: 90:45\n                                            // + literal: Const { ty: &(), val: Unevaluated(discriminant, [T], Some(promoted[1])) }\n           _11 = &(*_18);                   // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n           _10 = &(*_11);                   // scope 0 at $DIR/lower_intrinsics.rs:+3:42: +3:45\n -         _9 = discriminant_value::<()>(move _10) -> [return: bb3, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:84:5: 84:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:90:5: 90:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a ()) -> <() as DiscriminantKind>::Discriminant {discriminant_value::<()>}, val: Value(<ZST>) }\n +         _9 = discriminant((*_10));       // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n +         goto -> bb3;                     // scope 0 at $DIR/lower_intrinsics.rs:+3:5: +3:46\n@@ -88,13 +88,13 @@\n           StorageLive(_15);                // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n           _17 = const _;                   // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n                                            // mir::Constant\n-                                           // + span: $DIR/lower_intrinsics.rs:85:42: 85:47\n+                                           // + span: $DIR/lower_intrinsics.rs:91:42: 91:47\n                                            // + literal: Const { ty: &E, val: Unevaluated(discriminant, [T], Some(promoted[0])) }\n           _15 = &(*_17);                   // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n           _14 = &(*_15);                   // scope 0 at $DIR/lower_intrinsics.rs:+4:42: +4:47\n -         _13 = discriminant_value::<E>(move _14) -> [return: bb4, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:85:5: 85:41\n+-                                          // + span: $DIR/lower_intrinsics.rs:91:5: 91:41\n -                                          // + literal: Const { ty: for<'a> extern \"rust-intrinsic\" fn(&'a E) -> <E as DiscriminantKind>::Discriminant {discriminant_value::<E>}, val: Value(<ZST>) }\n +         _13 = discriminant((*_14));      // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48\n +         goto -> bb4;                     // scope 0 at $DIR/lower_intrinsics.rs:+4:5: +4:48"}, {"sha": "5b870ccf5ee2830ffd79f253016ce7f68e0aefd7", "filename": "tests/mir-opt/lower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.f_copy_nonoverlapping.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -49,7 +49,7 @@\n           StorageDead(_9);                 // scope 3 at $DIR/lower_intrinsics.rs:+4:90: +4:91\n -         _3 = copy_nonoverlapping::<i32>(move _4, move _8, const 0_usize) -> [return: bb1, unwind unreachable]; // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:99:9: 99:28\n+-                                          // + span: $DIR/lower_intrinsics.rs:105:9: 105:28\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32, *mut i32, usize) {copy_nonoverlapping::<i32>}, val: Value(<ZST>) }\n +         copy_nonoverlapping(dst = move _8, src = move _4, count = const 0_usize); // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95\n +         goto -> bb1;                     // scope 3 at $DIR/lower_intrinsics.rs:+4:9: +4:95"}, {"sha": "582a79f48d8c87149507dde2b2a155989009448f", "filename": "tests/mir-opt/lower_intrinsics.forget.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.forget.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -11,7 +11,7 @@\n           _2 = move _1;                    // scope 0 at $DIR/lower_intrinsics.rs:+1:30: +1:31\n -         _0 = std::intrinsics::forget::<T>(move _2) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:32\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:26:5: 26:29\n+-                                          // + span: $DIR/lower_intrinsics.rs:32:5: 32:29\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(T) {std::intrinsics::forget::<T>}, val: Value(<ZST>) }\n +         _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:32\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:32"}, {"sha": "81ad97077b428a85343fb6ecd2c739cbac1f8e25", "filename": "tests/mir-opt/lower_intrinsics.non_const.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.non_const.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -13,7 +13,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+2:9: +2:18\n           _1 = std::intrinsics::size_of::<T>; // scope 0 at $DIR/lower_intrinsics.rs:+2:21: +2:51\n                                            // mir::Constant\n-                                           // + span: $DIR/lower_intrinsics.rs:37:21: 37:51\n+                                           // + span: $DIR/lower_intrinsics.rs:43:21: 43:51\n                                            // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}, val: Value(<ZST>) }\n           StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+3:5: +3:14\n           _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+3:5: +3:14"}, {"sha": "edc66e2c75ce40e64963a06defe9f80c31d0da36", "filename": "tests/mir-opt/lower_intrinsics.option_payload.LowerIntrinsics.diff", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.option_payload.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -24,7 +24,7 @@\n           _4 = &raw const (*_1);           // scope 1 at $DIR/lower_intrinsics.rs:+2:55: +2:56\n -         _3 = option_payload_ptr::<usize>(move _4) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:137:18: 137:54\n+-                                          // + span: $DIR/lower_intrinsics.rs:143:18: 143:54\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Option<usize>) -> *const usize {option_payload_ptr::<usize>}, val: Value(<ZST>) }\n +         _3 = &raw const (((*_4) as Some).0: usize); // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:18: +2:57\n@@ -37,7 +37,7 @@\n           _6 = &raw const (*_2);           // scope 2 at $DIR/lower_intrinsics.rs:+3:55: +3:56\n -         _5 = option_payload_ptr::<String>(move _6) -> [return: bb2, unwind unreachable]; // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:138:18: 138:54\n+-                                          // + span: $DIR/lower_intrinsics.rs:144:18: 144:54\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Option<String>) -> *const String {option_payload_ptr::<String>}, val: Value(<ZST>) }\n +         _5 = &raw const (((*_6) as Some).0: std::string::String); // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57\n +         goto -> bb2;                     // scope 2 at $DIR/lower_intrinsics.rs:+3:18: +3:57"}, {"sha": "1760efe77d98fde8d6e9f1bbde8e1d30a8af95fe", "filename": "tests/mir-opt/lower_intrinsics.ptr_offset.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.ptr_offset.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -15,7 +15,7 @@\n           _4 = _2;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:33: +1:34\n -         _0 = offset::<*const i32, isize>(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:144:5: 144:29\n+-                                          // + span: $DIR/lower_intrinsics.rs:150:5: 150:29\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32, isize) -> *const i32 {offset::<*const i32, isize>}, val: Value(<ZST>) }\n +         _0 = Offset(move _3, move _4);   // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:35"}, {"sha": "8583766348a6edc3b51a7becdcd8aa1b3300ffc7", "filename": "tests/mir-opt/lower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_primitive.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -13,7 +13,7 @@\n           _2 = &raw const (*_1);           // scope 1 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n -         _0 = read_via_copy::<i32>(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:119:14: 119:45\n+-                                          // + span: $DIR/lower_intrinsics.rs:125:14: 125:45\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const i32) -> i32 {read_via_copy::<i32>}, val: Value(<ZST>) }\n +         _0 = (*_2);                      // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48"}, {"sha": "f64bc9dcf620c313741ecdb96a61625da3a9f55b", "filename": "tests/mir-opt/lower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.read_via_copy_uninhabited.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -13,7 +13,7 @@\n           _2 = &raw const (*_1);           // scope 1 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n -         _0 = read_via_copy::<Never>(move _2) -> unwind unreachable; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:124:14: 124:45\n+-                                          // + span: $DIR/lower_intrinsics.rs:130:14: 130:45\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*const Never) -> Never {read_via_copy::<Never>}, val: Value(<ZST>) }\n +         unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:48\n       }"}, {"sha": "30b5c78e647c8f717d496108dbcd76366eccf29c", "filename": "tests/mir-opt/lower_intrinsics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.rs?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -11,6 +11,12 @@ pub fn wrapping(a: i32, b: i32) {\n     let _z = core::intrinsics::wrapping_mul(a, b);\n }\n \n+// EMIT_MIR lower_intrinsics.unchecked.LowerIntrinsics.diff\n+pub unsafe fn unchecked(a: i32, b: i32) {\n+    let _x = core::intrinsics::unchecked_div(a, b);\n+    let _y = core::intrinsics::unchecked_rem(a, b);\n+}\n+\n // EMIT_MIR lower_intrinsics.size_of.LowerIntrinsics.diff\n pub fn size_of<T>() -> usize {\n     core::intrinsics::size_of::<T>()"}, {"sha": "a880df6a5c23608e86a74f60b3b67f41dc510673", "filename": "tests/mir-opt/lower_intrinsics.size_of.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.size_of.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -7,7 +7,7 @@\n       bb0: {\n -         _0 = std::intrinsics::size_of::<T>() -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:37\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:16:5: 16:35\n+-                                          // + span: $DIR/lower_intrinsics.rs:22:5: 22:35\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn() -> usize {std::intrinsics::size_of::<T>}, val: Value(<ZST>) }\n +         _0 = SizeOf(T);                  // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:37\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:5: +1:37"}, {"sha": "cde7c64c57a56eaa719c7a252cb75a572dcb8666", "filename": "tests/mir-opt/lower_intrinsics.transmute_inhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.transmute_inhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.transmute_inhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_inhabited.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -13,7 +13,7 @@\n           _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n -         _0 = transmute::<std::cmp::Ordering, i8>(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:43:14: 43:33\n+-                                          // + span: $DIR/lower_intrinsics.rs:49:14: 49:33\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(std::cmp::Ordering) -> i8 {transmute::<std::cmp::Ordering, i8>}, val: Value(<ZST>) }\n +         _0 = move _2 as i8 (Transmute);  // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36"}, {"sha": "6fc0f3d3e3fee07fd03c147fb75fd409ef8845c9", "filename": "tests/mir-opt/lower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_ref_dst.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -13,7 +13,7 @@\n           _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+1:34: +1:35\n -         _0 = transmute::<&T, *const T>(move _2) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:53:14: 53:33\n+-                                          // + span: $DIR/lower_intrinsics.rs:59:14: 59:33\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(&T) -> *const T {transmute::<&T, *const T>}, val: Value(<ZST>) }\n +         _0 = move _2 as *const T (Transmute); // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:36"}, {"sha": "e6887a382a2d6c890ea24e0528e79dc4a1972244", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_box_uninhabited.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -12,7 +12,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n -         _1 = transmute::<usize, Box<Never>>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:70:25: 70:44\n+-                                          // + span: $DIR/lower_intrinsics.rs:76:25: 76:44\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> Box<Never> {transmute::<usize, Box<Never>>}, val: Value(<ZST>) }\n +         _1 = const 1_usize as std::boxed::Box<Never> (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52"}, {"sha": "b2a44b7c5611477bba53c8952a592aa18d9c2be4", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_mut_uninhabited.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -12,7 +12,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n -         _1 = transmute::<usize, &mut Never>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:64:25: 64:44\n+-                                          // + span: $DIR/lower_intrinsics.rs:70:25: 70:44\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> &mut Never {transmute::<usize, &mut Never>}, val: Value(<ZST>) }\n +         _1 = const 1_usize as &mut Never (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:25: +1:52"}, {"sha": "c49d3aeff70b699c889d6a8e78bf909fe40b78ba", "filename": "tests/mir-opt/lower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_to_ref_uninhabited.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -12,7 +12,7 @@\n           StorageLive(_1);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:10\n -         _1 = transmute::<usize, &Never>(const 1_usize) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:58:21: 58:40\n+-                                          // + span: $DIR/lower_intrinsics.rs:64:21: 64:40\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(usize) -> &Never {transmute::<usize, &Never>}, val: Value(<ZST>) }\n +         _1 = const 1_usize as &Never (Transmute); // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:21: +1:48"}, {"sha": "06759d74a3205e44cd86c15a0e96488ba7c6d341", "filename": "tests/mir-opt/lower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.transmute_uninhabited.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -13,7 +13,7 @@\n           _2 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+1:47: +1:48\n -         _0 = transmute::<(), Never>(move _2) -> unwind unreachable; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:49\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:48:14: 48:46\n+-                                          // + span: $DIR/lower_intrinsics.rs:54:14: 54:46\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(()) -> Never {transmute::<(), Never>}, val: Value(<ZST>) }\n +         _0 = move _2 as Never (Transmute); // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:49\n +         unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:49"}, {"sha": "9bb43d850ebf327477ee1aa0dc743cc16459faef", "filename": "tests/mir-opt/lower_intrinsics.unchecked.LowerIntrinsics.diff", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.unchecked.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.unchecked.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.unchecked.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -0,0 +1,60 @@\n+- // MIR for `unchecked` before LowerIntrinsics\n++ // MIR for `unchecked` after LowerIntrinsics\n+  \n+  fn unchecked(_1: i32, _2: i32) -> () {\n+      debug a => _1;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:25: +0:26\n+      debug b => _2;                       // in scope 0 at $DIR/lower_intrinsics.rs:+0:33: +0:34\n+      let mut _0: ();                      // return place in scope 0 at $DIR/lower_intrinsics.rs:+0:41: +0:41\n+      let _3: i32;                         // in scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:11\n+      let mut _4: i32;                     // in scope 0 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n+      let mut _5: i32;                     // in scope 0 at $DIR/lower_intrinsics.rs:+1:49: +1:50\n+      let mut _7: i32;                     // in scope 0 at $DIR/lower_intrinsics.rs:+2:46: +2:47\n+      let mut _8: i32;                     // in scope 0 at $DIR/lower_intrinsics.rs:+2:49: +2:50\n+      scope 1 {\n+          debug _x => _3;                  // in scope 1 at $DIR/lower_intrinsics.rs:+1:9: +1:11\n+          let _6: i32;                     // in scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:11\n+          scope 2 {\n+              debug _y => _6;              // in scope 2 at $DIR/lower_intrinsics.rs:+2:9: +2:11\n+          }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_3);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:9: +1:11\n+          StorageLive(_4);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n+          _4 = _1;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:46: +1:47\n+          StorageLive(_5);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:49: +1:50\n+          _5 = _2;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:49: +1:50\n+-         _3 = unchecked_div::<i32>(move _4, move _5) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:51\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:16:14: 16:45\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i32, i32) -> i32 {unchecked_div::<i32>}, val: Value(<ZST>) }\n++         _3 = Div(move _4, move _5);      // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:51\n++         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:51\n+      }\n+  \n+      bb1: {\n+          StorageDead(_5);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:50: +1:51\n+          StorageDead(_4);                 // scope 0 at $DIR/lower_intrinsics.rs:+1:50: +1:51\n+          StorageLive(_6);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:9: +2:11\n+          StorageLive(_7);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:46: +2:47\n+          _7 = _1;                         // scope 1 at $DIR/lower_intrinsics.rs:+2:46: +2:47\n+          StorageLive(_8);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:49: +2:50\n+          _8 = _2;                         // scope 1 at $DIR/lower_intrinsics.rs:+2:49: +2:50\n+-         _6 = unchecked_rem::<i32>(move _7, move _8) -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:51\n+-                                          // mir::Constant\n+-                                          // + span: $DIR/lower_intrinsics.rs:17:14: 17:45\n+-                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(i32, i32) -> i32 {unchecked_rem::<i32>}, val: Value(<ZST>) }\n++         _6 = Rem(move _7, move _8);      // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:51\n++         goto -> bb2;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:51\n+      }\n+  \n+      bb2: {\n+          StorageDead(_8);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:50: +2:51\n+          StorageDead(_7);                 // scope 1 at $DIR/lower_intrinsics.rs:+2:50: +2:51\n+          _0 = const ();                   // scope 0 at $DIR/lower_intrinsics.rs:+0:41: +3:2\n+          StorageDead(_6);                 // scope 1 at $DIR/lower_intrinsics.rs:+3:1: +3:2\n+          StorageDead(_3);                 // scope 0 at $DIR/lower_intrinsics.rs:+3:1: +3:2\n+          return;                          // scope 0 at $DIR/lower_intrinsics.rs:+3:2: +3:2\n+      }\n+  }\n+  "}, {"sha": "83c9c508bc0b06afcef4b53d1a649bf7a3727609", "filename": "tests/mir-opt/lower_intrinsics.unreachable.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.unreachable.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -13,7 +13,7 @@\n           StorageLive(_2);                 // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n -         _2 = std::intrinsics::unreachable() -> unwind unreachable; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:31:14: 31:43\n+-                                          // + span: $DIR/lower_intrinsics.rs:37:14: 37:43\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn() -> ! {std::intrinsics::unreachable}, val: Value(<ZST>) }\n +         unreachable;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:45\n       }"}, {"sha": "4ae4466a60038f0d9ae420cd4e18195fce61d264", "filename": "tests/mir-opt/lower_intrinsics.with_overflow.LowerIntrinsics.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.with_overflow.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.with_overflow.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.with_overflow.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -32,7 +32,7 @@\n           _5 = _2;                         // scope 0 at $DIR/lower_intrinsics.rs:+1:53: +1:54\n -         _3 = add_with_overflow::<i32>(move _4, move _5) -> [return: bb1, unwind unreachable]; // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:55\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:112:14: 112:49\n+-                                          // + span: $DIR/lower_intrinsics.rs:118:14: 118:49\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> (i32, bool) {add_with_overflow::<i32>}, val: Value(<ZST>) }\n +         _3 = CheckedAdd(move _4, move _5); // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:55\n +         goto -> bb1;                     // scope 0 at $DIR/lower_intrinsics.rs:+1:14: +1:55\n@@ -48,7 +48,7 @@\n           _8 = _2;                         // scope 1 at $DIR/lower_intrinsics.rs:+2:53: +2:54\n -         _6 = sub_with_overflow::<i32>(move _7, move _8) -> [return: bb2, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:55\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:113:14: 113:49\n+-                                          // + span: $DIR/lower_intrinsics.rs:119:14: 119:49\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> (i32, bool) {sub_with_overflow::<i32>}, val: Value(<ZST>) }\n +         _6 = CheckedSub(move _7, move _8); // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:55\n +         goto -> bb2;                     // scope 1 at $DIR/lower_intrinsics.rs:+2:14: +2:55\n@@ -64,7 +64,7 @@\n           _11 = _2;                        // scope 2 at $DIR/lower_intrinsics.rs:+3:53: +3:54\n -         _9 = mul_with_overflow::<i32>(move _10, move _11) -> [return: bb3, unwind unreachable]; // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:55\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:114:14: 114:49\n+-                                          // + span: $DIR/lower_intrinsics.rs:120:14: 120:49\n -                                          // + literal: Const { ty: extern \"rust-intrinsic\" fn(i32, i32) -> (i32, bool) {mul_with_overflow::<i32>}, val: Value(<ZST>) }\n +         _9 = CheckedMul(move _10, move _11); // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:55\n +         goto -> bb3;                     // scope 2 at $DIR/lower_intrinsics.rs:+3:14: +3:55"}, {"sha": "2eabd7f626b69accde201eb27c0e825b33d87994", "filename": "tests/mir-opt/lower_intrinsics.write_via_move_string.LowerIntrinsics.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.write_via_move_string.LowerIntrinsics.diff", "raw_url": "https://github.com/rust-lang/rust/raw/5460f92a0f97238e87fef281134b08deb2f587ee/tests%2Fmir-opt%2Flower_intrinsics.write_via_move_string.LowerIntrinsics.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Flower_intrinsics.write_via_move_string.LowerIntrinsics.diff?ref=5460f92a0f97238e87fef281134b08deb2f587ee", "patch": "@@ -17,7 +17,7 @@\n           _4 = move _2;                    // scope 1 at $DIR/lower_intrinsics.rs:+1:50: +1:51\n -         _0 = write_via_move::<String>(move _3, move _4) -> [return: bb1, unwind unreachable]; // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:52\n -                                          // mir::Constant\n--                                          // + span: $DIR/lower_intrinsics.rs:129:14: 129:46\n+-                                          // + span: $DIR/lower_intrinsics.rs:135:14: 135:46\n -                                          // + literal: Const { ty: unsafe extern \"rust-intrinsic\" fn(*mut String, String) {write_via_move::<String>}, val: Value(<ZST>) }\n +         (*_3) = move _4;                 // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:52\n +         goto -> bb1;                     // scope 1 at $DIR/lower_intrinsics.rs:+1:14: +1:52"}]}