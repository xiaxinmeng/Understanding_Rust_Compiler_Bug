{"sha": "76386bd65e650b5289b142daa310a4b98230c3db", "node_id": "C_kwDOAAsO6NoAKDc2Mzg2YmQ2NWU2NTBiNTI4OWIxNDJkYWEzMTBhNGI5ODIzMGMzZGI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-14T23:20:03Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-14T04:27:01Z"}, "message": "Make dyn* cast into a coercion", "tree": {"sha": "b19f517615b9b5dcf35370d2ba8285a7f94f151d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b19f517615b9b5dcf35370d2ba8285a7f94f151d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76386bd65e650b5289b142daa310a4b98230c3db", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76386bd65e650b5289b142daa310a4b98230c3db", "html_url": "https://github.com/rust-lang/rust/commit/76386bd65e650b5289b142daa310a4b98230c3db", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76386bd65e650b5289b142daa310a4b98230c3db/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edabf59ca4646b3fc1a961c26431215001043f6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/edabf59ca4646b3fc1a961c26431215001043f6a", "html_url": "https://github.com/rust-lang/rust/commit/edabf59ca4646b3fc1a961c26431215001043f6a"}], "stats": {"total": 141, "additions": 73, "deletions": 68}, "files": [{"sha": "7587283014069869573f9d949c86b390bb8ab570", "filename": "compiler/rustc_hir_analysis/src/check/cast.rs", "status": "modified", "additions": 5, "deletions": 58, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/76386bd65e650b5289b142daa310a4b98230c3db/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76386bd65e650b5289b142daa310a4b98230c3db/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcast.rs?ref=76386bd65e650b5289b142daa310a4b98230c3db", "patch": "@@ -35,13 +35,12 @@ use crate::type_error_struct;\n use hir::def_id::LOCAL_CRATE;\n use rustc_errors::{struct_span_err, Applicability, DelayDm, DiagnosticBuilder, ErrorGuaranteed};\n use rustc_hir as hir;\n-use rustc_infer::traits::{Obligation, ObligationCause, ObligationCauseCode};\n use rustc_middle::mir::Mutability;\n use rustc_middle::ty::adjustment::AllowTwoPhase;\n use rustc_middle::ty::cast::{CastKind, CastTy};\n use rustc_middle::ty::error::TypeError;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{self, Binder, Ty, TypeAndMut, TypeVisitable, VariantDef};\n+use rustc_middle::ty::{self, Ty, TypeAndMut, TypeVisitable, VariantDef};\n use rustc_session::lint;\n use rustc_session::Session;\n use rustc_span::symbol::sym;\n@@ -218,58 +217,10 @@ pub fn check_cast<'tcx>(\n     cast_span: Span,\n     span: Span,\n ) -> CastCheckResult<'tcx> {\n-    if cast_ty.is_dyn_star() {\n-        check_dyn_star_cast(fcx, expr, expr_ty, cast_ty)\n-    } else {\n-        match CastCheck::new(fcx, expr, expr_ty, cast_ty, cast_span, span) {\n-            Ok(check) => CastCheckResult::Deferred(check),\n-            Err(e) => CastCheckResult::Err(e),\n-        }\n-    }\n-}\n-\n-fn check_dyn_star_cast<'tcx>(\n-    fcx: &FnCtxt<'_, 'tcx>,\n-    expr: &'tcx hir::Expr<'tcx>,\n-    expr_ty: Ty<'tcx>,\n-    cast_ty: Ty<'tcx>,\n-) -> CastCheckResult<'tcx> {\n-    // Find the bounds in the dyn*. For eaxmple, if we have\n-    //\n-    //    let x = 22_usize as dyn* (Clone + Debug + 'static)\n-    //\n-    // this would return `existential_predicates = [?Self: Clone, ?Self: Debug]` and `region = 'static`.\n-    let (existential_predicates, region) = match cast_ty.kind() {\n-        ty::Dynamic(predicates, region, ty::DynStar) => (predicates, region),\n-        _ => panic!(\"Invalid dyn* cast_ty\"),\n-    };\n-\n-    let cause = ObligationCause::new(\n-        expr.span,\n-        fcx.body_id,\n-        // FIXME(dyn-star): Use a better obligation cause code\n-        ObligationCauseCode::MiscObligation,\n-    );\n-\n-    // For each existential predicate (e.g., `?Self: Clone`) substitute\n-    // the type of the expression (e.g., `usize` in our example above)\n-    // and then require that the resulting predicate (e.g., `usize: Clone`)\n-    // holds (it does).\n-    for existential_predicate in existential_predicates.iter() {\n-        let predicate = existential_predicate.with_self_ty(fcx.tcx, expr_ty);\n-        fcx.register_predicate(Obligation::new(cause.clone(), fcx.param_env, predicate));\n+    match CastCheck::new(fcx, expr, expr_ty, cast_ty, cast_span, span) {\n+        Ok(check) => CastCheckResult::Deferred(check),\n+        Err(e) => CastCheckResult::Err(e),\n     }\n-\n-    // Enforce the region bound `'static` (e.g., `usize: 'static`, in our example).\n-    fcx.register_predicate(Obligation::new(\n-        cause,\n-        fcx.param_env,\n-        fcx.tcx.mk_predicate(Binder::dummy(ty::PredicateKind::TypeOutlives(\n-            ty::OutlivesPredicate(expr_ty, *region),\n-        ))),\n-    ));\n-\n-    CastCheckResult::Ok\n }\n \n impl<'a, 'tcx> CastCheck<'tcx> {\n@@ -934,11 +885,7 @@ impl<'a, 'tcx> CastCheck<'tcx> {\n \n             (Int(_) | Float, Int(_) | Float) => Ok(CastKind::NumericCast),\n \n-            // FIXME(dyn-star): this needs more conditions...\n-            (_, DynStar) => Ok(CastKind::DynStarCast),\n-\n-            // FIXME(dyn-star): do we want to allow dyn* upcasting or other casts?\n-            (DynStar, _) => Err(CastError::IllegalCast),\n+            (_, DynStar) | (DynStar, _) => bug!(\"should be handled by `try_coerce`\"),\n         }\n     }\n "}, {"sha": "44e6438239774c7dd264989ca5341afbfa585024", "filename": "compiler/rustc_hir_analysis/src/check/coercion.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/76386bd65e650b5289b142daa310a4b98230c3db/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76386bd65e650b5289b142daa310a4b98230c3db/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcoercion.rs?ref=76386bd65e650b5289b142daa310a4b98230c3db", "patch": "@@ -216,6 +216,9 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n             ty::Ref(r_b, _, mutbl_b) => {\n                 return self.coerce_borrowed_pointer(a, b, r_b, mutbl_b);\n             }\n+            ty::Dynamic(predicates, region, ty::DynStar) if self.tcx.features().dyn_star => {\n+                return self.coerce_dyn_star(a, b, predicates, region);\n+            }\n             _ => {}\n         }\n \n@@ -745,6 +748,53 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n         Ok(coercion)\n     }\n \n+    fn coerce_dyn_star(\n+        &self,\n+        a: Ty<'tcx>,\n+        b: Ty<'tcx>,\n+        predicates: &'tcx ty::List<ty::Binder<'tcx, ty::ExistentialPredicate<'tcx>>>,\n+        b_region: ty::Region<'tcx>,\n+    ) -> CoerceResult<'tcx> {\n+        if !self.tcx.features().dyn_star {\n+            return Err(TypeError::Mismatch);\n+        }\n+\n+        if let ty::Dynamic(a_data, _, _) = a.kind()\n+            && let ty::Dynamic(b_data, _, _) = b.kind()\n+        {\n+            if a_data.principal_def_id() == b_data.principal_def_id() {\n+                return self.unify_and(a, b, |_| vec![]);\n+            } else {\n+                bug!(\"dyn* trait upcasting is not supported\");\n+            }\n+        }\n+\n+        let obligations = predicates\n+            .iter()\n+            .map(|predicate| {\n+                // For each existential predicate (e.g., `?Self: Clone`) substitute\n+                // the type of the expression (e.g., `usize` in our example above)\n+                // and then require that the resulting predicate (e.g., `usize: Clone`)\n+                // holds (it does).\n+                let predicate = predicate.with_self_ty(self.tcx, a);\n+                Obligation::new(self.cause.clone(), self.param_env, predicate)\n+            })\n+            // Enforce the region bound `'static` (e.g., `usize: 'static`, in our example).\n+            .chain([Obligation::new(\n+                self.cause.clone(),\n+                self.param_env,\n+                self.tcx.mk_predicate(ty::Binder::dummy(ty::PredicateKind::TypeOutlives(\n+                    ty::OutlivesPredicate(a, b_region),\n+                ))),\n+            )])\n+            .collect();\n+\n+        Ok(InferOk {\n+            value: (vec![Adjustment { kind: Adjust::DynStar, target: b }], b),\n+            obligations,\n+        })\n+    }\n+\n     fn coerce_from_safe_fn<F, G>(\n         &self,\n         a: Ty<'tcx>,"}, {"sha": "039c653e5bc64de9f55a55eaadee28906bfd37a3", "filename": "compiler/rustc_hir_analysis/src/expr_use_visitor.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76386bd65e650b5289b142daa310a4b98230c3db/compiler%2Frustc_hir_analysis%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76386bd65e650b5289b142daa310a4b98230c3db/compiler%2Frustc_hir_analysis%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fexpr_use_visitor.rs?ref=76386bd65e650b5289b142daa310a4b98230c3db", "patch": "@@ -583,7 +583,9 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         for adjustment in adjustments {\n             debug!(\"walk_adjustment expr={:?} adj={:?}\", expr, adjustment);\n             match adjustment.kind {\n-                adjustment::Adjust::NeverToAny | adjustment::Adjust::Pointer(_) => {\n+                adjustment::Adjust::NeverToAny\n+                | adjustment::Adjust::Pointer(_)\n+                | adjustment::Adjust::DynStar => {\n                     // Creating a closure/fn-pointer or unsizing consumes\n                     // the input and stores it into the resulting rvalue.\n                     self.delegate_consume(&place_with_id, place_with_id.hir_id);"}, {"sha": "362f1c3430041a45e668c263b825e7f790a2fbc9", "filename": "compiler/rustc_hir_analysis/src/mem_categorization.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76386bd65e650b5289b142daa310a4b98230c3db/compiler%2Frustc_hir_analysis%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76386bd65e650b5289b142daa310a4b98230c3db/compiler%2Frustc_hir_analysis%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fmem_categorization.rs?ref=76386bd65e650b5289b142daa310a4b98230c3db", "patch": "@@ -292,7 +292,8 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n \n             adjustment::Adjust::NeverToAny\n             | adjustment::Adjust::Pointer(_)\n-            | adjustment::Adjust::Borrow(_) => {\n+            | adjustment::Adjust::Borrow(_)\n+            | adjustment::Adjust::DynStar => {\n                 // Result is an rvalue.\n                 Ok(self.cat_rvalue(expr.hir_id, expr.span, target))\n             }"}, {"sha": "c022ea9e5b4708597a4b44ef3763cf2ab2e81e41", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/76386bd65e650b5289b142daa310a4b98230c3db/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76386bd65e650b5289b142daa310a4b98230c3db/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=76386bd65e650b5289b142daa310a4b98230c3db", "patch": "@@ -1824,7 +1824,6 @@ impl<'tcx> Rvalue<'tcx> {\n             // While the model is undecided, we should be conservative. See\n             // <https://www.ralfj.de/blog/2022/04/11/provenance-exposed.html>\n             Rvalue::Cast(CastKind::PointerExposeAddress, _, _) => false,\n-            Rvalue::Cast(CastKind::DynStar, _, _) => false,\n \n             Rvalue::Use(_)\n             | Rvalue::CopyForDeref(_)\n@@ -1841,7 +1840,8 @@ impl<'tcx> Rvalue<'tcx> {\n                 | CastKind::FnPtrToPtr\n                 | CastKind::PtrToPtr\n                 | CastKind::Pointer(_)\n-                | CastKind::PointerFromExposedAddress,\n+                | CastKind::PointerFromExposedAddress\n+                | CastKind::DynStar,\n                 _,\n                 _,\n             )"}, {"sha": "4682ac96b5297ba2dde0aff44b4c47a906c606e5", "filename": "compiler/rustc_middle/src/ty/adjustment.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76386bd65e650b5289b142daa310a4b98230c3db/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76386bd65e650b5289b142daa310a4b98230c3db/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs?ref=76386bd65e650b5289b142daa310a4b98230c3db", "patch": "@@ -101,6 +101,9 @@ pub enum Adjust<'tcx> {\n     Borrow(AutoBorrow<'tcx>),\n \n     Pointer(PointerCast),\n+\n+    /// Cast into a dyn* object.\n+    DynStar,\n }\n \n /// An overloaded autoderef step, representing a `Deref(Mut)::deref(_mut)`"}, {"sha": "c7a7c3e3fa8eefd6f42747e13488e362416d1322", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/76386bd65e650b5289b142daa310a4b98230c3db/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76386bd65e650b5289b142daa310a4b98230c3db/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=76386bd65e650b5289b142daa310a4b98230c3db", "patch": "@@ -159,6 +159,7 @@ impl<'tcx> Cx<'tcx> {\n             Adjust::Borrow(AutoBorrow::RawPtr(mutability)) => {\n                 ExprKind::AddressOf { mutability, arg: self.thir.exprs.push(expr) }\n             }\n+            Adjust::DynStar => ExprKind::Cast { source: self.thir.exprs.push(expr) },\n         };\n \n         Expr { temp_lifetime, ty: adjustment.target, span, kind }"}, {"sha": "67e3ab7ab35f18de488362f40e110101f3489862", "filename": "src/test/ui/dyn-star/const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76386bd65e650b5289b142daa310a4b98230c3db/src%2Ftest%2Fui%2Fdyn-star%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76386bd65e650b5289b142daa310a4b98230c3db/src%2Ftest%2Fui%2Fdyn-star%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fconst.rs?ref=76386bd65e650b5289b142daa310a4b98230c3db", "patch": "@@ -6,7 +6,7 @@ use std::fmt::Debug;\n \n fn make_dyn_star() {\n     let i = 42usize;\n-    let dyn_i: dyn* Debug = i as dyn* Debug;\n+    let dyn_i: dyn* Debug = i;\n }\n \n fn main() {"}, {"sha": "1478498c0a9f3c5edeabe7943c7f556172258016", "filename": "src/test/ui/dyn-star/drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76386bd65e650b5289b142daa310a4b98230c3db/src%2Ftest%2Fui%2Fdyn-star%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76386bd65e650b5289b142daa310a4b98230c3db/src%2Ftest%2Fui%2Fdyn-star%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fdrop.rs?ref=76386bd65e650b5289b142daa310a4b98230c3db", "patch": "@@ -15,7 +15,7 @@ impl Drop for Foo {\n }\n \n fn make_dyn_star(i: Foo) {\n-    let _dyn_i: dyn* Debug = i as dyn* Debug;\n+    let _dyn_i: dyn* Debug = i;\n }\n \n fn main() {"}, {"sha": "d8261387efa9e77fcf957a725a0e04ffefbd8021", "filename": "src/test/ui/dyn-star/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76386bd65e650b5289b142daa310a4b98230c3db/src%2Ftest%2Fui%2Fdyn-star%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76386bd65e650b5289b142daa310a4b98230c3db/src%2Ftest%2Fui%2Fdyn-star%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Ferror.rs?ref=76386bd65e650b5289b142daa310a4b98230c3db", "patch": "@@ -7,7 +7,7 @@ trait Foo {}\n \n fn make_dyn_star() {\n     let i = 42;\n-    let dyn_i: dyn* Foo = i as dyn* Foo; //~ ERROR trait bound `{integer}: Foo` is not satisfied\n+    let dyn_i: dyn* Foo = i; //~ ERROR trait bound `{integer}: Foo` is not satisfied\n }\n \n fn main() {}"}, {"sha": "ae54b9ca707d0e184e03bf2953682d2806fc46f8", "filename": "src/test/ui/dyn-star/error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76386bd65e650b5289b142daa310a4b98230c3db/src%2Ftest%2Fui%2Fdyn-star%2Ferror.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/76386bd65e650b5289b142daa310a4b98230c3db/src%2Ftest%2Fui%2Fdyn-star%2Ferror.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Ferror.stderr?ref=76386bd65e650b5289b142daa310a4b98230c3db", "patch": "@@ -1,7 +1,7 @@\n error[E0277]: the trait bound `{integer}: Foo` is not satisfied\n   --> $DIR/error.rs:10:27\n    |\n-LL |     let dyn_i: dyn* Foo = i as dyn* Foo;\n+LL |     let dyn_i: dyn* Foo = i;\n    |                           ^ the trait `Foo` is not implemented for `{integer}`\n \n error: aborting due to previous error"}, {"sha": "4f9393abb30e2c445151009fa057e4ac176ee7b7", "filename": "src/test/ui/dyn-star/make-dyn-star.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/76386bd65e650b5289b142daa310a4b98230c3db/src%2Ftest%2Fui%2Fdyn-star%2Fmake-dyn-star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76386bd65e650b5289b142daa310a4b98230c3db/src%2Ftest%2Fui%2Fdyn-star%2Fmake-dyn-star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fmake-dyn-star.rs?ref=76386bd65e650b5289b142daa310a4b98230c3db", "patch": "@@ -5,7 +5,7 @@\n use std::fmt::Debug;\n \n fn make_dyn_star(i: usize) {\n-    let _dyn_i: dyn* Debug = i as dyn* Debug;\n+    let _dyn_i: dyn* Debug = i;\n }\n \n fn main() {"}, {"sha": "5a77640f0d932f108bada3be5cf9dfb21bc36913", "filename": "src/test/ui/dyn-star/method.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/76386bd65e650b5289b142daa310a4b98230c3db/src%2Ftest%2Fui%2Fdyn-star%2Fmethod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76386bd65e650b5289b142daa310a4b98230c3db/src%2Ftest%2Fui%2Fdyn-star%2Fmethod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdyn-star%2Fmethod.rs?ref=76386bd65e650b5289b142daa310a4b98230c3db", "patch": "@@ -1,4 +1,5 @@\n // run-pass\n+\n #![feature(dyn_star)]\n #![allow(incomplete_features)]\n \n@@ -17,7 +18,7 @@ fn invoke_dyn_star(i: dyn* Foo) -> usize {\n }\n \n fn make_and_invoke_dyn_star(i: usize) -> usize {\n-    let dyn_i: dyn* Foo = i as dyn* Foo;\n+    let dyn_i: dyn* Foo = i;\n     invoke_dyn_star(dyn_i)\n }\n "}]}