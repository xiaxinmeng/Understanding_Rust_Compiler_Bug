{"sha": "168cd3a2f57ff418ebf87433bff678c85cad6a18", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE2OGNkM2EyZjU3ZmY0MThlYmY4NzQzM2JmZjY3OGM4NWNhZDZhMTg=", "commit": {"author": {"name": "Jonathan S", "email": "gereeter@gmail.com", "date": "2014-03-17T00:39:38Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-18T20:49:45Z"}, "message": "Relaxed the memory ordering on the implementation of UnsafeArc", "tree": {"sha": "177d9452075071cbf81475b206bd326132fe7a57", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/177d9452075071cbf81475b206bd326132fe7a57"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/168cd3a2f57ff418ebf87433bff678c85cad6a18", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/168cd3a2f57ff418ebf87433bff678c85cad6a18", "html_url": "https://github.com/rust-lang/rust/commit/168cd3a2f57ff418ebf87433bff678c85cad6a18", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/168cd3a2f57ff418ebf87433bff678c85cad6a18/comments", "author": null, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c297cff7771a84c417913b2023353cf44f9e260c", "url": "https://api.github.com/repos/rust-lang/rust/commits/c297cff7771a84c417913b2023353cf44f9e260c", "html_url": "https://github.com/rust-lang/rust/commit/c297cff7771a84c417913b2023353cf44f9e260c"}], "stats": {"total": 36, "additions": 29, "deletions": 7}, "files": [{"sha": "56c71a5e4ff795108c7c359e62380972980b0f00", "filename": "src/libstd/sync/arc.rs", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/168cd3a2f57ff418ebf87433bff678c85cad6a18/src%2Flibstd%2Fsync%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/168cd3a2f57ff418ebf87433bff678c85cad6a18/src%2Flibstd%2Fsync%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Farc.rs?ref=168cd3a2f57ff418ebf87433bff678c85cad6a18", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2013-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -26,7 +26,7 @@ use clone::Clone;\n use kinds::Send;\n use ops::Drop;\n use ptr::RawPtr;\n-use sync::atomics::{AtomicUint, SeqCst, Relaxed, Acquire};\n+use sync::atomics::{fence, AtomicUint, Relaxed, Acquire, Release};\n use vec;\n \n /// An atomically reference counted pointer.\n@@ -109,8 +109,16 @@ impl<T: Send> UnsafeArc<T> {\n impl<T: Send> Clone for UnsafeArc<T> {\n     fn clone(&self) -> UnsafeArc<T> {\n         unsafe {\n-            // This barrier might be unnecessary, but I'm not sure...\n-            let old_count = (*self.data).count.fetch_add(1, Acquire);\n+            // Using a relaxed ordering is alright here, as knowledge of the original reference\n+            // prevents other threads from erroneously deleting the object.\n+            //\n+            // As explained in the [Boost documentation][1],\n+            //  Increasing the reference counter can always be done with memory_order_relaxed: New\n+            //  references to an object can only be formed from an existing reference, and passing\n+            //  an existing reference from one thread to another must already provide any required\n+            //  synchronization.\n+            // [1]: (www.boost.org/doc/libs/1_55_0/doc/html/atomic/usage_examples.html)\n+            let old_count = (*self.data).count.fetch_add(1, Relaxed);\n             // FIXME(#12049): this needs some sort of debug assertion\n             if cfg!(test) { assert!(old_count >= 1); }\n             return UnsafeArc { data: self.data };\n@@ -127,12 +135,26 @@ impl<T> Drop for UnsafeArc<T>{\n             if self.data.is_null() {\n                 return\n             }\n-            // Must be acquire+release, not just release, to make sure this\n-            // doesn't get reordered to after the unwrapper pointer load.\n-            let old_count = (*self.data).count.fetch_sub(1, SeqCst);\n+            // Because `fetch_sub` is already atomic, we do not need to synchronize with other\n+            // threads unless we are going to delete the object.\n+            let old_count = (*self.data).count.fetch_sub(1, Release);\n             // FIXME(#12049): this needs some sort of debug assertion\n             if cfg!(test) { assert!(old_count >= 1); }\n             if old_count == 1 {\n+                // This fence is needed to prevent reordering of use of the data and deletion of\n+                // the data. Because it is marked `Release`, the decreasing of the reference count\n+                // sychronizes with this `Acquire` fence. This means that use of the data happens\n+                // before decreasing the refernce count, which happens before this fence, which\n+                // happens before the deletion of the data.\n+                //\n+                // As explained in the [Boost documentation][1],\n+                //  It is important to enforce any possible access to the object in one thread\n+                //  (through an existing reference) to *happen before* deleting the object in a\n+                //  different thread. This is achieved by a \"release\" operation after dropping a\n+                //  reference (any access to the object through this reference must obviously\n+                //  happened before), and an \"acquire\" operation before deleting the object.\n+                // [1]: (www.boost.org/doc/libs/1_55_0/doc/html/atomic/usage_examples.html)\n+                fence(Acquire);\n                 let _: ~ArcData<T> = cast::transmute(self.data);\n             }\n         }"}]}