{"sha": "8f4f0bebe706e926ed5c7a2b9f48650730b7633d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNGYwYmViZTcwNmU5MjZlZDVjN2EyYjlmNDg2NTA3MzBiNzYzM2Q=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-10T04:49:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-06-10T04:49:23Z"}, "message": "auto merge of #7038 : alexcrichton/rust/issue-6935, r=catamorphism\n\nTracks the `type_target` and `value_target` source imports separately to correctly warn about unused imports.", "tree": {"sha": "280ca439058f8f96108c76885c7f643d232575e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/280ca439058f8f96108c76885c7f643d232575e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f4f0bebe706e926ed5c7a2b9f48650730b7633d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f4f0bebe706e926ed5c7a2b9f48650730b7633d", "html_url": "https://github.com/rust-lang/rust/commit/8f4f0bebe706e926ed5c7a2b9f48650730b7633d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f4f0bebe706e926ed5c7a2b9f48650730b7633d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6e5e97fc78994cb08008a8d76b71d91714385131", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e5e97fc78994cb08008a8d76b71d91714385131", "html_url": "https://github.com/rust-lang/rust/commit/6e5e97fc78994cb08008a8d76b71d91714385131"}, {"sha": "b6cccb3d815ea37272bb7806aff5cee851f424f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6cccb3d815ea37272bb7806aff5cee851f424f2", "html_url": "https://github.com/rust-lang/rust/commit/b6cccb3d815ea37272bb7806aff5cee851f424f2"}], "stats": {"total": 79, "additions": 59, "deletions": 20}, "files": [{"sha": "2d2eeff199fc50a1c31a43426e7ada23cd2cb656", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 33, "deletions": 12, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/8f4f0bebe706e926ed5c7a2b9f48650730b7633d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f4f0bebe706e926ed5c7a2b9f48650730b7633d/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=8f4f0bebe706e926ed5c7a2b9f48650730b7633d", "patch": "@@ -366,25 +366,31 @@ pub struct ImportResolution {\n     /// The privacy of this `use` directive (whether it's `use` or\n     /// `pub use`.\n     privacy: Privacy,\n-    id: node_id,\n \n     // The number of outstanding references to this name. When this reaches\n     // zero, outside modules can count on the targets being correct. Before\n     // then, all bets are off; future imports could override this name.\n-\n     outstanding_references: uint,\n \n     /// The value that this `use` directive names, if there is one.\n     value_target: Option<Target>,\n+    /// The source node of the `use` directive leading to the value target\n+    /// being non-none\n+    value_id: node_id,\n+\n     /// The type that this `use` directive names, if there is one.\n     type_target: Option<Target>,\n+    /// The source node of the `use` directive leading to the type target\n+    /// being non-none\n+    type_id: node_id,\n }\n \n pub fn ImportResolution(privacy: Privacy,\n                         id: node_id) -> ImportResolution {\n     ImportResolution {\n         privacy: privacy,\n-        id: id,\n+        type_id: id,\n+        value_id: id,\n         outstanding_references: 0,\n         value_target: None,\n         type_target: None,\n@@ -399,6 +405,13 @@ impl ImportResolution {\n             ValueNS     => return copy self.value_target\n         }\n     }\n+\n+    fn id(&self, namespace: Namespace) -> node_id {\n+        match namespace {\n+            TypeNS  => self.type_id,\n+            ValueNS => self.value_id,\n+        }\n+    }\n }\n \n /// The link from a module up to its nearest parent node.\n@@ -1920,7 +1933,8 @@ impl Resolver {\n \n                         // the source of this name is different now\n                         resolution.privacy = privacy;\n-                        resolution.id = id;\n+                        resolution.type_id = id;\n+                        resolution.value_id = id;\n                     }\n                     None => {\n                         debug!(\"(building import directive) creating new\");\n@@ -2118,7 +2132,7 @@ impl Resolver {\n                                                        containing_module,\n                                                        target,\n                                                        source,\n-                                                       import_directive.span);\n+                                                       import_directive);\n                     }\n                     GlobImport => {\n                         let privacy = import_directive.privacy;\n@@ -2181,7 +2195,7 @@ impl Resolver {\n                                  containing_module: @mut Module,\n                                  target: ident,\n                                  source: ident,\n-                                 span: span)\n+                                 directive: &ImportDirective)\n                                  -> ResolveResult<()> {\n         debug!(\"(resolving single import) resolving `%s` = `%s::%s` from \\\n                 `%s`\",\n@@ -2270,9 +2284,10 @@ impl Resolver {\n                                     return UnboundResult;\n                                 }\n                                 Some(target) => {\n-                                    this.used_imports.insert(import_resolution.id);\n+                                    let id = import_resolution.id(namespace);\n+                                    this.used_imports.insert(id);\n                                     return BoundResult(target.target_module,\n-                                                    target.bindings);\n+                                                       target.bindings);\n                                 }\n                             }\n                         }\n@@ -2323,8 +2338,10 @@ impl Resolver {\n \n         match value_result {\n             BoundResult(target_module, name_bindings) => {\n+                debug!(\"(resolving single import) found value target\");\n                 import_resolution.value_target =\n                     Some(Target(target_module, name_bindings));\n+                import_resolution.value_id = directive.id;\n             }\n             UnboundResult => { /* Continue. */ }\n             UnknownResult => {\n@@ -2333,8 +2350,10 @@ impl Resolver {\n         }\n         match type_result {\n             BoundResult(target_module, name_bindings) => {\n+                debug!(\"(resolving single import) found type target\");\n                 import_resolution.type_target =\n                     Some(Target(target_module, name_bindings));\n+                import_resolution.type_id = directive.id;\n             }\n             UnboundResult => { /* Continue. */ }\n             UnknownResult => {\n@@ -2383,6 +2402,7 @@ impl Resolver {\n             }\n         }\n \n+        let span = directive.span;\n         if resolve_fail {\n             self.session.span_err(span, fmt!(\"unresolved import: there is no `%s` in `%s`\",\n                                              *self.session.str_of(source),\n@@ -2774,7 +2794,7 @@ impl Resolver {\n                     Some(target) => {\n                         debug!(\"(resolving item in lexical scope) using \\\n                                 import resolution\");\n-                        self.used_imports.insert(import_resolution.id);\n+                        self.used_imports.insert(import_resolution.id(namespace));\n                         return Success(copy target);\n                     }\n                 }\n@@ -3043,7 +3063,7 @@ impl Resolver {\n                             import_resolution.privacy == Public => {\n                         debug!(\"(resolving name in module) resolved to \\\n                                 import\");\n-                        self.used_imports.insert(import_resolution.id);\n+                        self.used_imports.insert(import_resolution.id(namespace));\n                         return Success(copy target);\n                     }\n                     Some(_) => {\n@@ -4525,7 +4545,8 @@ impl Resolver {\n                                     namespace)) {\n                             (Some(def), Some(Public)) => {\n                                 // Found it.\n-                                self.used_imports.insert(import_resolution.id);\n+                                let id = import_resolution.id(namespace);\n+                                self.used_imports.insert(id);\n                                 return ImportNameDefinition(def);\n                             }\n                             (Some(_), _) | (None, _) => {\n@@ -5140,7 +5161,7 @@ impl Resolver {\n                                                     &mut found_traits,\n                                                     trait_def_id, name);\n                                                 self.used_imports.insert(\n-                                                    import_resolution.id);\n+                                                    import_resolution.type_id);\n                                             }\n                                         }\n                                         _ => {"}, {"sha": "4b80c52471505ff5957837ea79ad9c4b76c7fe73", "filename": "src/test/compile-fail/lint-unused-import-tricky-names.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/8f4f0bebe706e926ed5c7a2b9f48650730b7633d/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f4f0bebe706e926ed5c7a2b9f48650730b7633d/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-names.rs?ref=8f4f0bebe706e926ed5c7a2b9f48650730b7633d", "patch": "@@ -11,19 +11,37 @@\n #[deny(unused_imports)];\n \n // Regression test for issue #6633\n+mod issue6633 {\n+    use self::foo::name::name; //~ ERROR: unused import\n+    use self::foo::name;\n \n-use foo::name::name; //~ ERROR: unused import\n-use foo::name;\n-\n-pub mod foo {\n-    pub mod name {\n-        pub type a = int;\n+    pub mod foo {\n         pub mod name {\n-            pub type a = float;\n+            pub type a = int;\n+            pub mod name {\n+                pub type a = float;\n+            }\n         }\n     }\n+\n+    fn bar() -> name::a { 1 }\n }\n \n-fn bar() -> name::a { 1 }\n+// Regression test for issue #6935\n+mod issue6935 {\n+    use self::a::foo::a::foo;\n+    use self::a::foo; //~ ERROR: unused import\n+\n+    pub mod a {\n+        pub mod foo {\n+            pub mod a {\n+                pub fn foo() {}\n+            }\n+        }\n+    }\n+\n+    fn bar() { foo(); }\n+}\n \n fn main(){}\n+"}]}