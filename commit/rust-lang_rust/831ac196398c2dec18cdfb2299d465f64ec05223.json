{"sha": "831ac196398c2dec18cdfb2299d465f64ec05223", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMWFjMTk2Mzk4YzJkZWMxOGNkZmIyMjk5ZDQ2NWY2NGVjMDUyMjM=", "commit": {"author": {"name": "chaz-kiker", "email": "chaz-kiker@lambdastudents.com", "date": "2021-07-20T20:04:32Z"}, "committer": {"name": "chaz-kiker", "email": "chaz-kiker@lambdastudents.com", "date": "2021-07-22T20:42:42Z"}, "message": "Squash all commits.\n\nadd test for issue 86507\n\nadd stderr for issue 86507\n\nupdate issue-86507 UI test\n\nadd comment for the expected error in UI test file\n\nadd proper 'refers to <ref_type>' in suggestion\n\nupdate diagnostic phrasing; update test to match new phrasing; re-organize logic for checking T: Sync\n\nevaluate additional obligation to figure out if T is Sync\n\nrun './x.py test tidy --bless'\n\nincorporate changes from review; reorganize logic for readability", "tree": {"sha": "a00c43a0d5cdff89670ac1d2b61a66f23f9bf345", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a00c43a0d5cdff89670ac1d2b61a66f23f9bf345"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/831ac196398c2dec18cdfb2299d465f64ec05223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/831ac196398c2dec18cdfb2299d465f64ec05223", "html_url": "https://github.com/rust-lang/rust/commit/831ac196398c2dec18cdfb2299d465f64ec05223", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/831ac196398c2dec18cdfb2299d465f64ec05223/comments", "author": {"login": "chazkiker2", "id": 70249988, "node_id": "MDQ6VXNlcjcwMjQ5OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/70249988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chazkiker2", "html_url": "https://github.com/chazkiker2", "followers_url": "https://api.github.com/users/chazkiker2/followers", "following_url": "https://api.github.com/users/chazkiker2/following{/other_user}", "gists_url": "https://api.github.com/users/chazkiker2/gists{/gist_id}", "starred_url": "https://api.github.com/users/chazkiker2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chazkiker2/subscriptions", "organizations_url": "https://api.github.com/users/chazkiker2/orgs", "repos_url": "https://api.github.com/users/chazkiker2/repos", "events_url": "https://api.github.com/users/chazkiker2/events{/privacy}", "received_events_url": "https://api.github.com/users/chazkiker2/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chazkiker2", "id": 70249988, "node_id": "MDQ6VXNlcjcwMjQ5OTg4", "avatar_url": "https://avatars.githubusercontent.com/u/70249988?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chazkiker2", "html_url": "https://github.com/chazkiker2", "followers_url": "https://api.github.com/users/chazkiker2/followers", "following_url": "https://api.github.com/users/chazkiker2/following{/other_user}", "gists_url": "https://api.github.com/users/chazkiker2/gists{/gist_id}", "starred_url": "https://api.github.com/users/chazkiker2/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chazkiker2/subscriptions", "organizations_url": "https://api.github.com/users/chazkiker2/orgs", "repos_url": "https://api.github.com/users/chazkiker2/repos", "events_url": "https://api.github.com/users/chazkiker2/events{/privacy}", "received_events_url": "https://api.github.com/users/chazkiker2/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c0ca08c662399c1c864310d1a20867d3ab68027", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c0ca08c662399c1c864310d1a20867d3ab68027", "html_url": "https://github.com/rust-lang/rust/commit/5c0ca08c662399c1c864310d1a20867d3ab68027"}], "stats": {"total": 83, "additions": 78, "deletions": 5}, "files": [{"sha": "9a33875d6e493f293d9e1efb9c24004b2821681e", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 30, "deletions": 5, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/831ac196398c2dec18cdfb2299d465f64ec05223/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831ac196398c2dec18cdfb2299d465f64ec05223/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=831ac196398c2dec18cdfb2299d465f64ec05223", "patch": "@@ -1857,12 +1857,37 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 }\n             }\n             GeneratorInteriorOrUpvar::Upvar(upvar_span) => {\n+                // `Some(ref_ty)` if `target_ty` is `&T` and `T` fails to impl `Sync`\n+                let refers_to_non_sync = match target_ty.kind() {\n+                    ty::Ref(_, ref_ty, _) => match self.evaluate_obligation(&obligation) {\n+                        Ok(eval) if !eval.may_apply() => Some(ref_ty),\n+                        _ => None,\n+                    },\n+                    _ => None,\n+                };\n+\n+                let (span_label, span_note) = match refers_to_non_sync {\n+                    // if `target_ty` is `&T` and `T` fails to impl `Sync`,\n+                    // include suggestions to make `T: Sync` so that `&T: Send`\n+                    Some(ref_ty) => (\n+                        format!(\n+                            \"has type `{}` which {}, because `{}` is not `Sync`\",\n+                            target_ty, trait_explanation, ref_ty\n+                        ),\n+                        format!(\n+                            \"captured value {} because `&` references cannot be sent unless their referent is `Sync`\",\n+                            trait_explanation\n+                        ),\n+                    ),\n+                    None => (\n+                        format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n+                        format!(\"captured value {}\", trait_explanation),\n+                    ),\n+                };\n+\n                 let mut span = MultiSpan::from_span(upvar_span);\n-                span.push_span_label(\n-                    upvar_span,\n-                    format!(\"has type `{}` which {}\", target_ty, trait_explanation),\n-                );\n-                err.span_note(span, &format!(\"captured value {}\", trait_explanation));\n+                span.push_span_label(upvar_span, span_label);\n+                err.span_note(span, &span_note);\n             }\n         }\n "}, {"sha": "317f0317664b6733f3287fb87bc5cfdad7705738", "filename": "src/test/ui/async-await/issue-86507.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/831ac196398c2dec18cdfb2299d465f64ec05223/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.rs", "raw_url": "https://github.com/rust-lang/rust/raw/831ac196398c2dec18cdfb2299d465f64ec05223/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.rs?ref=831ac196398c2dec18cdfb2299d465f64ec05223", "patch": "@@ -0,0 +1,25 @@\n+// edition:2018\n+\n+use ::core::pin::Pin;\n+use ::core::future::Future;\n+use ::core::marker::Send;\n+\n+trait Foo {\n+    fn bar<'me, 'async_trait, T: Send>(x: &'me T)\n+        -> Pin<Box<dyn Future<Output = ()> + Send + 'async_trait>>\n+        where 'me: 'async_trait;\n+}\n+\n+impl Foo for () {\n+    fn bar<'me, 'async_trait, T: Send>(x: &'me T)\n+        -> Pin<Box<dyn Future<Output = ()> + Send + 'async_trait>>\n+        where 'me:'async_trait {\n+            Box::pin( //~ ERROR future cannot be sent between threads safely\n+                async move {\n+                    let x = x;\n+                }\n+            )\n+         }\n+}\n+\n+fn main() { }"}, {"sha": "51e8f61085b22987afacccefb43e68d51c1e01f8", "filename": "src/test/ui/async-await/issue-86507.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/831ac196398c2dec18cdfb2299d465f64ec05223/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/831ac196398c2dec18cdfb2299d465f64ec05223/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-86507.stderr?ref=831ac196398c2dec18cdfb2299d465f64ec05223", "patch": "@@ -0,0 +1,23 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/issue-86507.rs:17:13\n+   |\n+LL | /             Box::pin(\n+LL | |                 async move {\n+LL | |                     let x = x;\n+LL | |                 }\n+LL | |             )\n+   | |_____________^ future created by async block is not `Send`\n+   |\n+note: captured value is not `Send` because `&` references cannot be sent unless their referent is `Sync`\n+  --> $DIR/issue-86507.rs:19:29\n+   |\n+LL |                     let x = x;\n+   |                             ^ has type `&T` which is not `Send`, because `T` is not `Sync`\n+   = note: required for the cast to the object type `dyn Future<Output = ()> + Send`\n+help: consider further restricting type parameter `T`\n+   |\n+LL |         where 'me:'async_trait, T: std::marker::Sync {\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}