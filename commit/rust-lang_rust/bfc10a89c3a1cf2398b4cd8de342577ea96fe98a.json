{"sha": "bfc10a89c3a1cf2398b4cd8de342577ea96fe98a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYzEwYTg5YzNhMWNmMjM5OGI0Y2Q4ZGUzNDI1NzdlYTk2ZmU5OGE=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-17T18:09:52Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-09-22T17:05:58Z"}, "message": "Allow errors to abort const checking when emitted\n\nThis is a hack for parity with `qualify_min_const_fn`, which only\nemitted a single error.", "tree": {"sha": "22c7bb46c4c80b8b3da5c2a778233314b237dbf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/22c7bb46c4c80b8b3da5c2a778233314b237dbf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfc10a89c3a1cf2398b4cd8de342577ea96fe98a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfc10a89c3a1cf2398b4cd8de342577ea96fe98a", "html_url": "https://github.com/rust-lang/rust/commit/bfc10a89c3a1cf2398b4cd8de342577ea96fe98a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfc10a89c3a1cf2398b4cd8de342577ea96fe98a/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fb9587a3ce4c689f7cab3aa5112aad9d421301f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fb9587a3ce4c689f7cab3aa5112aad9d421301f", "html_url": "https://github.com/rust-lang/rust/commit/7fb9587a3ce4c689f7cab3aa5112aad9d421301f"}], "stats": {"total": 26, "additions": 22, "deletions": 4}, "files": [{"sha": "1f0c93eed551e1d54a2fba44cf5bbe505499ba19", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfc10a89c3a1cf2398b4cd8de342577ea96fe98a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc10a89c3a1cf2398b4cd8de342577ea96fe98a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=bfc10a89c3a1cf2398b4cd8de342577ea96fe98a", "patch": "@@ -62,6 +62,8 @@ pub enum Status {\n \n /// An operation that is not *always* allowed in a const context.\n pub trait NonConstOp: std::fmt::Debug {\n+    const STOPS_CONST_CHECKING: bool = false;\n+\n     /// Returns an enum indicating whether this operation is allowed within the given item.\n     fn status_in_item(&self, _ccx: &ConstCx<'_, '_>) -> Status {\n         Status::Forbidden"}, {"sha": "2c6e12e40bc704e2cfeec92ade2c09e70e1a155f", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bfc10a89c3a1cf2398b4cd8de342577ea96fe98a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfc10a89c3a1cf2398b4cd8de342577ea96fe98a/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=bfc10a89c3a1cf2398b4cd8de342577ea96fe98a", "patch": "@@ -176,6 +176,8 @@ pub struct Validator<'mir, 'tcx> {\n \n     /// The span of the current statement.\n     span: Span,\n+\n+    const_checking_stopped: bool,\n }\n \n impl Deref for Validator<'mir, 'tcx> {\n@@ -188,7 +190,12 @@ impl Deref for Validator<'mir, 'tcx> {\n \n impl Validator<'mir, 'tcx> {\n     pub fn new(ccx: &'mir ConstCx<'mir, 'tcx>) -> Self {\n-        Validator { span: ccx.body.span, ccx, qualifs: Default::default() }\n+        Validator {\n+            span: ccx.body.span,\n+            ccx,\n+            qualifs: Default::default(),\n+            const_checking_stopped: false,\n+        }\n     }\n \n     pub fn check_body(&mut self) {\n@@ -226,13 +233,22 @@ impl Validator<'mir, 'tcx> {\n \n     /// Emits an error if an expression cannot be evaluated in the current context.\n     pub fn check_op(&mut self, op: impl NonConstOp) {\n-        ops::non_const(self.ccx, op, self.span);\n+        self.check_op_spanned(op, self.span);\n     }\n \n     /// Emits an error at the given `span` if an expression cannot be evaluated in the current\n     /// context.\n-    pub fn check_op_spanned(&mut self, op: impl NonConstOp, span: Span) {\n-        ops::non_const(self.ccx, op, span);\n+    pub fn check_op_spanned<O: NonConstOp>(&mut self, op: O, span: Span) {\n+        // HACK: This is for strict equivalence with the old `qualify_min_const_fn` pass, which\n+        // only emitted one error per function. It should be removed and the test output updated.\n+        if self.const_checking_stopped {\n+            return;\n+        }\n+\n+        let err_emitted = ops::non_const(self.ccx, op, span);\n+        if err_emitted && O::STOPS_CONST_CHECKING {\n+            self.const_checking_stopped = true;\n+        }\n     }\n \n     fn check_static(&mut self, def_id: DefId, span: Span) {"}]}