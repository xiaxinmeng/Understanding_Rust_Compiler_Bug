{"sha": "cf90e4f32b677ac1cea2a14d1d041c0c0cb3db28", "node_id": "C_kwDOAAsO6NoAKGNmOTBlNGYzMmI2NzdhYzFjZWEyYTE0ZDFkMDQxYzBjMGNiM2RiMjg", "commit": {"author": {"name": "koka", "email": "koka.code@gmail.com", "date": "2022-10-29T15:57:42Z"}, "committer": {"name": "koka", "email": "koka.code@gmail.com", "date": "2022-10-29T15:59:20Z"}, "message": "Simplify the procedure\n\nfix: remove unused import", "tree": {"sha": "7ec7ffde2bb69f15ddb7c6a32b273a1926ec0ed9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7ec7ffde2bb69f15ddb7c6a32b273a1926ec0ed9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf90e4f32b677ac1cea2a14d1d041c0c0cb3db28", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQTeiB5r8ReBHCJcHiKlkXpAaXd0zQUCY11N2gAKCRClkXpAaXd0\nzeHtAP4m1ndhTWNR7ZuviavH8Xs1uy+W04ir+kkS9RLB93fIpgEA/JEW65H1EM5J\ndAr+oqUvO54eBwyuw7wRKWIQGitGPwY=\n=J1S8\n-----END PGP SIGNATURE-----", "payload": "tree 7ec7ffde2bb69f15ddb7c6a32b273a1926ec0ed9\nparent 4a7f5cac9dee32f3c8e43425339a2413b645bf39\nauthor koka <koka.code@gmail.com> 1667059062 +0900\ncommitter koka <koka.code@gmail.com> 1667059160 +0900\n\nSimplify the procedure\n\nfix: remove unused import\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf90e4f32b677ac1cea2a14d1d041c0c0cb3db28", "html_url": "https://github.com/rust-lang/rust/commit/cf90e4f32b677ac1cea2a14d1d041c0c0cb3db28", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf90e4f32b677ac1cea2a14d1d041c0c0cb3db28/comments", "author": {"login": "koka831", "id": 14945055, "node_id": "MDQ6VXNlcjE0OTQ1MDU1", "avatar_url": "https://avatars.githubusercontent.com/u/14945055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koka831", "html_url": "https://github.com/koka831", "followers_url": "https://api.github.com/users/koka831/followers", "following_url": "https://api.github.com/users/koka831/following{/other_user}", "gists_url": "https://api.github.com/users/koka831/gists{/gist_id}", "starred_url": "https://api.github.com/users/koka831/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koka831/subscriptions", "organizations_url": "https://api.github.com/users/koka831/orgs", "repos_url": "https://api.github.com/users/koka831/repos", "events_url": "https://api.github.com/users/koka831/events{/privacy}", "received_events_url": "https://api.github.com/users/koka831/received_events", "type": "User", "site_admin": false}, "committer": {"login": "koka831", "id": 14945055, "node_id": "MDQ6VXNlcjE0OTQ1MDU1", "avatar_url": "https://avatars.githubusercontent.com/u/14945055?v=4", "gravatar_id": "", "url": "https://api.github.com/users/koka831", "html_url": "https://github.com/koka831", "followers_url": "https://api.github.com/users/koka831/followers", "following_url": "https://api.github.com/users/koka831/following{/other_user}", "gists_url": "https://api.github.com/users/koka831/gists{/gist_id}", "starred_url": "https://api.github.com/users/koka831/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/koka831/subscriptions", "organizations_url": "https://api.github.com/users/koka831/orgs", "repos_url": "https://api.github.com/users/koka831/repos", "events_url": "https://api.github.com/users/koka831/events{/privacy}", "received_events_url": "https://api.github.com/users/koka831/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a7f5cac9dee32f3c8e43425339a2413b645bf39", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a7f5cac9dee32f3c8e43425339a2413b645bf39", "html_url": "https://github.com/rust-lang/rust/commit/4a7f5cac9dee32f3c8e43425339a2413b645bf39"}], "stats": {"total": 55, "additions": 6, "deletions": 49}, "files": [{"sha": "04398832253307be610ef1da72c05d5b33fa7d20", "filename": "crates/ide-assists/src/handlers/unnecessary_async.rs", "status": "modified", "additions": 6, "deletions": 49, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/cf90e4f32b677ac1cea2a14d1d041c0c0cb3db28/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funnecessary_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf90e4f32b677ac1cea2a14d1d041c0c0cb3db28/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funnecessary_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Funnecessary_async.rs?ref=cf90e4f32b677ac1cea2a14d1d041c0c0cb3db28", "patch": "@@ -1,14 +1,12 @@\n-use hir::AssocItem;\n use ide_db::{\n     assists::{AssistId, AssistKind},\n     base_db::FileId,\n     defs::Definition,\n     search::FileReference,\n     syntax_helpers::node_ext::full_path_of_name_ref,\n-    traits::resolve_target_trait,\n };\n use syntax::{\n-    ast::{self, HasName, NameLike, NameRef},\n+    ast::{self, NameLike, NameRef},\n     AstNode, SyntaxKind, TextRange,\n };\n \n@@ -46,16 +44,13 @@ pub(crate) fn unnecessary_async(acc: &mut Assists, ctx: &AssistContext<'_>) -> O\n     if function.body()?.syntax().descendants().find_map(ast::AwaitExpr::cast).is_some() {\n         return None;\n     }\n-    // Do nothing if the method is an async member of trait.\n-    if let Some(fname) = function.name() {\n-        if let Some(trait_item) = find_corresponding_trait_member(ctx, fname.to_string()) {\n-            if let AssocItem::Function(method) = trait_item {\n-                if method.is_async(ctx.db()) {\n-                    return None;\n-                }\n-            }\n+    // Do nothing if the method is a member of trait.\n+    if let Some(impl_) = function.syntax().ancestors().nth(2).and_then(ast::Impl::cast) {\n+        if let Some(_) = impl_.trait_() {\n+            return None;\n         }\n     }\n+\n     // Remove the `async` keyword plus whitespace after it, if any.\n     let async_range = {\n         let async_token = function.async_token()?;\n@@ -99,23 +94,6 @@ pub(crate) fn unnecessary_async(acc: &mut Assists, ctx: &AssistContext<'_>) -> O\n     )\n }\n \n-fn find_corresponding_trait_member(\n-    ctx: &AssistContext<'_>,\n-    function_name: String,\n-) -> Option<AssocItem> {\n-    let impl_ = ctx.find_node_at_offset::<ast::Impl>()?;\n-    let trait_ = resolve_target_trait(&ctx.sema, &impl_)?;\n-\n-    trait_\n-        .items(ctx.db())\n-        .iter()\n-        .find(|item| match item.name(ctx.db()) {\n-            Some(method_name) => method_name.to_string() == function_name,\n-            _ => false,\n-        })\n-        .cloned()\n-}\n-\n fn find_all_references(\n     ctx: &AssistContext<'_>,\n     def: &Definition,\n@@ -283,27 +261,6 @@ pub async fn f(s: &S) { s.f2() }\"#,\n         check_assist_not_applicable(unnecessary_async, \"pub async fn f() { $0f2() }\")\n     }\n \n-    #[test]\n-    fn applies_on_unnecessary_async_on_trait_method() {\n-        check_assist(\n-            unnecessary_async,\n-            r#\"\n-trait Trait {\n-    fn foo();\n-}\n-impl Trait for () {\n-    $0async fn foo() {}\n-}\"#,\n-            r#\"\n-trait Trait {\n-    fn foo();\n-}\n-impl Trait for () {\n-    fn foo() {}\n-}\"#,\n-        );\n-    }\n-\n     #[test]\n     fn does_not_apply_on_async_trait_method() {\n         check_assist_not_applicable("}]}