{"sha": "ee3c8350189de045ec71997874eaa6cebf99fbf3", "node_id": "C_kwDOAAsO6NoAKGVlM2M4MzUwMTg5ZGUwNDVlYzcxOTk3ODc0ZWFhNmNlYmY5OWZiZjM", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-08-31T13:09:26Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-09-01T14:54:27Z"}, "message": "Always import all tracing macros for the entire crate instead of piecemeal by module", "tree": {"sha": "99f69443bfbee138c580b1a96ccc853e8a7d9a85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99f69443bfbee138c580b1a96ccc853e8a7d9a85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee3c8350189de045ec71997874eaa6cebf99fbf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee3c8350189de045ec71997874eaa6cebf99fbf3", "html_url": "https://github.com/rust-lang/rust/commit/ee3c8350189de045ec71997874eaa6cebf99fbf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee3c8350189de045ec71997874eaa6cebf99fbf3/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7", "html_url": "https://github.com/rust-lang/rust/commit/d3b22c726721639c1ab104a8ff8b3a17fd5e99d7"}], "stats": {"total": 195, "additions": 76, "deletions": 119}, "files": [{"sha": "e5435e3a3d4fad4037927e7eaae246f1d8652f7e", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -26,6 +26,9 @@\n #[macro_use]\n extern crate rustc_macros;\n \n+#[macro_use]\n+extern crate tracing;\n+\n pub mod util {\n     pub mod classify;\n     pub mod comments;"}, {"sha": "6a1578498e6894468552c4729ecb0cf2c4b9531e", "filename": "compiler/rustc_ast/src/util/literal.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Futil%2Fliteral.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -9,7 +9,6 @@ use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n \n use std::ascii;\n-use tracing::debug;\n \n pub enum LitError {\n     NotLiteral,"}, {"sha": "219e1b81d1ea64d3226d9eb93787b1ed2d98fe4d", "filename": "compiler/rustc_ast_lowering/src/index.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Findex.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -11,8 +11,6 @@ use rustc_session::Session;\n use rustc_span::source_map::SourceMap;\n use rustc_span::{Span, DUMMY_SP};\n \n-use tracing::debug;\n-\n /// A visitor that walks over the HIR and collects `Node`s into a HIR map.\n pub(super) struct NodeCollector<'a, 'hir> {\n     /// Source map"}, {"sha": "897c7215805e0753e784601eb16518b94e9556bc", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -13,7 +13,6 @@ use rustc_span::symbol::{kw, Ident};\n use rustc_span::{BytePos, Span, DUMMY_SP};\n \n use smallvec::smallvec;\n-use tracing::debug;\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     #[instrument(level = \"trace\", skip(self))]"}, {"sha": "ca5b7a64155157f80c250cd9e8c8e07b9897ebbe", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -11,8 +11,6 @@ use rustc_span::source_map::Spanned;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n \n-use tracing::debug;\n-\n macro_rules! gate_feature_fn {\n     ($visitor: expr, $has_feature: expr, $span: expr, $name: expr, $explain: expr, $help: expr) => {{\n         let (visitor, has_feature, span, name, explain, help) ="}, {"sha": "af25982e2887bb33656b99017083f8c460d7a619", "filename": "compiler/rustc_ast_passes/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Flib.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -12,6 +12,9 @@\n #![feature(let_else)]\n #![recursion_limit = \"256\"]\n \n+#[macro_use]\n+extern crate tracing;\n+\n pub mod ast_validation;\n mod errors;\n pub mod feature_gate;"}, {"sha": "35c3df768995a0d2907db1cb174122666596a9cc", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -6,7 +6,6 @@ use rustc_errors::Diagnostic;\n use rustc_middle::ty::RegionVid;\n use smallvec::SmallVec;\n use std::collections::BTreeMap;\n-use tracing::debug;\n \n use crate::MirBorrowckCtxt;\n "}, {"sha": "280fa70451141f85f821c2f2b02e0f87f82d5a83", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -16,6 +16,9 @@\n \n extern crate proc_macro;\n \n+#[macro_use]\n+extern crate tracing;\n+\n use crate::deriving::*;\n \n use rustc_expand::base::{MacroExpanderFn, ResolverExpand, SyntaxExtensionKind};"}, {"sha": "7efb6cc61eecbb2325525c4696b5b5b7c9040c8a", "filename": "compiler/rustc_builtin_macros/src/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -335,7 +335,7 @@ pub fn expand_test_or_bench(\n     // extern crate test\n     let test_extern = cx.item(sp, test_id, ast::AttrVec::new(), ast::ItemKind::ExternCrate(None));\n \n-    tracing::debug!(\"synthetic test item:\\n{}\\n\", pprust::item_to_string(&test_const));\n+    debug!(\"synthetic test item:\\n{}\\n\", pprust::item_to_string(&test_const));\n \n     if is_stmt {\n         vec!["}, {"sha": "079c6ff37cfb53222caeaf79014ebda64fa65716", "filename": "compiler/rustc_builtin_macros/src/test_harness.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Ftest_harness.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -15,7 +15,6 @@ use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::PanicStrategy;\n use smallvec::{smallvec, SmallVec};\n use thin_vec::thin_vec;\n-use tracing::debug;\n \n use std::{iter, mem};\n "}, {"sha": "5202ac697e9496f4551bb265de5732ed542fed72", "filename": "compiler/rustc_codegen_llvm/src/asm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fasm.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -19,7 +19,6 @@ use rustc_target::asm::*;\n \n use libc::{c_char, c_uint};\n use smallvec::SmallVec;\n-use tracing::debug;\n \n impl<'ll, 'tcx> AsmBuilderMethods<'tcx> for Builder<'_, 'll, 'tcx> {\n     fn codegen_inline_asm("}, {"sha": "38a366095b41da97c9fe8906b8ab626be71935e5", "filename": "compiler/rustc_codegen_llvm/src/back/archive.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Farchive.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -190,10 +190,10 @@ impl ArchiveBuilderBuilder for LlvmArchiveBuilderBuilder {\n \n             let output_path_z = rustc_fs_util::path_to_c_string(&output_path);\n \n-            tracing::trace!(\"invoking LLVMRustWriteImportLibrary\");\n-            tracing::trace!(\"  dll_name {:#?}\", dll_name_z);\n-            tracing::trace!(\"  output_path {}\", output_path.display());\n-            tracing::trace!(\n+            trace!(\"invoking LLVMRustWriteImportLibrary\");\n+            trace!(\"  dll_name {:#?}\", dll_name_z);\n+            trace!(\"  output_path {}\", output_path.display());\n+            trace!(\n                 \"  import names: {}\",\n                 dll_imports\n                     .iter()"}, {"sha": "a89df00e248e30e385fe2bc35202e4879d866780", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -18,7 +18,6 @@ use rustc_middle::dep_graph::WorkProduct;\n use rustc_middle::middle::exported_symbols::{SymbolExportInfo, SymbolExportLevel};\n use rustc_session::cgu_reuse_tracker::CguReuse;\n use rustc_session::config::{self, CrateType, Lto};\n-use tracing::{debug, info};\n \n use std::ffi::{CStr, CString};\n use std::fs::File;"}, {"sha": "a695df8409bb4621326aa87929be8851337a418a", "filename": "compiler/rustc_codegen_llvm/src/back/write.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Fwrite.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -28,7 +28,6 @@ use rustc_session::Session;\n use rustc_span::symbol::sym;\n use rustc_span::InnerSpan;\n use rustc_target::spec::{CodeModel, RelocModel, SanitizerSet, SplitDebuginfo};\n-use tracing::debug;\n \n use libc::{c_char, c_int, c_uint, c_void, size_t};\n use std::ffi::CString;"}, {"sha": "63b63c6a1fab5d42d89c48ca7dea9dfc90ddd69e", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -27,7 +27,6 @@ use std::ffi::CStr;\n use std::iter;\n use std::ops::Deref;\n use std::ptr;\n-use tracing::{debug, instrument};\n \n // All Builders must have an llfn associated with them\n #[must_use]"}, {"sha": "b83c1e8f08f3182ee2178faa1a03b98862d3985c", "filename": "compiler/rustc_codegen_llvm/src/callee.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcallee.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -11,7 +11,6 @@ use crate::context::CodegenCx;\n use crate::llvm;\n use crate::value::Value;\n use rustc_codegen_ssa::traits::*;\n-use tracing::debug;\n \n use rustc_middle::ty::layout::{FnAbiOf, HasTyCtxt};\n use rustc_middle::ty::{self, Instance, TypeVisitable};"}, {"sha": "13e437cfbf7fb1b52d06589eb20c068ad140a131", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -21,7 +21,6 @@ use rustc_target::spec::Target;\n \n use libc::{c_char, c_uint};\n use std::fmt::Write;\n-use tracing::debug;\n \n /*\n * A note on nomenclature of linking: \"extern\", \"foreign\", and \"upcall\"."}, {"sha": "a559f7f3d57035a58da56542d948fdad98a9274a", "filename": "compiler/rustc_codegen_llvm/src/consts.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fconsts.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -23,7 +23,6 @@ use rustc_target::abi::{\n     AddressSpace, Align, HasDataLayout, Primitive, Scalar, Size, WrappingRange,\n };\n use std::ops::Range;\n-use tracing::debug;\n \n pub fn const_alloc_to_llvm<'ll>(cx: &CodegenCx<'ll, '_>, alloc: ConstAllocation<'_>) -> &'ll Value {\n     let alloc = alloc.inner();"}, {"sha": "0d1df6fb1acd99e437c9fbcf3d4bc59b984b4578", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mapgen.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmapgen.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -16,8 +16,6 @@ use rustc_middle::ty::TyCtxt;\n \n use std::ffi::CString;\n \n-use tracing::debug;\n-\n /// Generates and exports the Coverage Map.\n ///\n /// Rust Coverage Map generation supports LLVM Coverage Mapping Format versions"}, {"sha": "964a632b6eeddc77a68711eed82bc4eef8c20e73", "filename": "compiler/rustc_codegen_llvm/src/coverageinfo/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcoverageinfo%2Fmod.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -28,7 +28,6 @@ use std::cell::RefCell;\n use std::ffi::CString;\n \n use std::iter;\n-use tracing::debug;\n \n pub mod mapgen;\n "}, {"sha": "b23fe3fc9d5575ae8971c6dbb4b61cd1905512aa", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -39,7 +39,6 @@ use smallvec::SmallVec;\n use std::cell::OnceCell;\n use std::cell::RefCell;\n use std::iter;\n-use tracing::debug;\n \n mod create_scope_map;\n pub mod gdb;"}, {"sha": "a40cfc8b23fb32217f5b6b0897bea0e4f9e27373", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Futils.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -6,7 +6,7 @@ use super::CodegenUnitDebugContext;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty::layout::{HasParamEnv, LayoutOf};\n use rustc_middle::ty::{self, DefIdTree, Ty};\n-use tracing::trace;\n+use trace;\n \n use crate::common::CodegenCx;\n use crate::llvm;"}, {"sha": "0f663a26732bba8abf5094a095a859784f6f9012", "filename": "compiler/rustc_codegen_llvm/src/declare.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdeclare.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -22,7 +22,6 @@ use rustc_codegen_ssa::traits::TypeMembershipMethods;\n use rustc_middle::ty::Ty;\n use rustc_symbol_mangling::typeid::typeid_for_fnabi;\n use smallvec::SmallVec;\n-use tracing::debug;\n \n /// Declare a function.\n ///"}, {"sha": "1b049dfe9790444e300423cbbef45ccb27370168", "filename": "compiler/rustc_codegen_llvm/src/llvm_util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm_util.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -15,7 +15,6 @@ use rustc_span::symbol::Symbol;\n use rustc_target::spec::{MergeFunctions, PanicStrategy};\n use smallvec::{smallvec, SmallVec};\n use std::ffi::{CStr, CString};\n-use tracing::debug;\n \n use std::mem;\n use std::path::Path;"}, {"sha": "1eceb7f5c87beb362760851e5ce31ae40a66c75f", "filename": "compiler/rustc_codegen_llvm/src/mono_item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fmono_item.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -11,7 +11,6 @@ use rustc_middle::ty::layout::{FnAbiOf, LayoutOf};\n use rustc_middle::ty::{self, Instance, TypeVisitable};\n use rustc_session::config::CrateType;\n use rustc_target::spec::RelocModel;\n-use tracing::debug;\n \n impl<'tcx> PreDefineMethods<'tcx> for CodegenCx<'_, 'tcx> {\n     fn predefine_static("}, {"sha": "dc1165835e7ca271b38986619f20801fb8c5a71e", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -11,7 +11,6 @@ use rustc_target::abi::{Abi, AddressSpace, Align, FieldsShape};\n use rustc_target::abi::{Int, Pointer, F32, F64};\n use rustc_target::abi::{PointeeInfo, Scalar, Size, TyAbiInterface, Variants};\n use smallvec::{smallvec, SmallVec};\n-use tracing::debug;\n \n use std::fmt::Write;\n "}, {"sha": "ed5e092814f157ef222eb75753232a5a481e12ae", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -5,6 +5,9 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n+#[macro_use]\n+extern crate tracing;\n+\n use fluent_bundle::FluentResource;\n use fluent_syntax::parser::ParserError;\n use rustc_data_structures::sync::Lrc;\n@@ -16,7 +19,6 @@ use std::fmt;\n use std::fs;\n use std::io;\n use std::path::{Path, PathBuf};\n-use tracing::{instrument, trace};\n \n #[cfg(not(parallel_compiler))]\n use std::cell::LazyCell as Lazy;"}, {"sha": "7e29dc207accecca9a86275ec477cb9426c2b087", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -12,7 +12,6 @@ use std::fmt::{self, Debug};\n use std::marker::PhantomData;\n use std::ops::{Deref, DerefMut};\n use std::thread::panicking;\n-use tracing::debug;\n \n /// Used for emitting structured error messages and other diagnostic information.\n ///"}, {"sha": "e79ce11a6fc075a8bdf162f7b63256b066c89a29", "filename": "compiler/rustc_errors/src/emitter.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_errors%2Fsrc%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Femitter.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -34,7 +34,6 @@ use std::iter;\n use std::path::Path;\n use termcolor::{Ansi, BufferWriter, ColorChoice, ColorSpec, StandardStream};\n use termcolor::{Buffer, Color, WriteColor};\n-use tracing::*;\n \n /// Default column width, used in tests and when terminal dimensions cannot be determined.\n const DEFAULT_COLUMN_WIDTH: usize = 140;"}, {"sha": "ac0e200b1b73ee783e22affe3e6b48ab2b4a435f", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -15,6 +15,9 @@\n #[macro_use]\n extern crate rustc_macros;\n \n+#[macro_use]\n+extern crate tracing;\n+\n extern crate proc_macro as pm;\n \n mod placeholders;"}, {"sha": "7764ffd246e323d205c992bd61627c9652ce3b05", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -32,7 +32,6 @@ use rustc_span::Span;\n use std::borrow::Cow;\n use std::collections::hash_map::Entry;\n use std::{mem, slice};\n-use tracing::debug;\n \n pub(crate) struct ParserAnyMacro<'a> {\n     parser: Parser<'a>,"}, {"sha": "d85ac960f9b2f10b415cb0a43d2eaa7de8bfc102", "filename": "compiler/rustc_hir/src/definitions.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fdefinitions.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -15,7 +15,6 @@ use rustc_span::symbol::{kw, sym, Symbol};\n \n use std::fmt::{self, Write};\n use std::hash::Hash;\n-use tracing::debug;\n \n /// The `DefPathTable` maps `DefIndex`es to `DefKey`s and vice versa.\n /// Internally the `DefPathTable` holds a tree of `DefKey`s, where each `DefKey`"}, {"sha": "1b33cb9c2da9cbcebbe4be41ca0bd6d1d7665e08", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -17,6 +17,9 @@\n #[macro_use]\n extern crate rustc_macros;\n \n+#[macro_use]\n+extern crate tracing;\n+\n #[macro_use]\n extern crate rustc_data_structures;\n "}, {"sha": "949bd02ad6839a8f1535e453efc2d08d1a704dcf", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -332,7 +332,7 @@ pub fn create_compiler_and_run<R>(config: Config, f: impl FnOnce(&Compiler) -> R\n // JUSTIFICATION: before session exists, only config\n #[allow(rustc::bad_opt_access)]\n pub fn run_compiler<R: Send>(config: Config, f: impl FnOnce(&Compiler) -> R + Send) -> R {\n-    tracing::trace!(\"run_compiler\");\n+    trace!(\"run_compiler\");\n     util::run_in_thread_pool_with_globals(\n         config.opts.edition,\n         config.opts.unstable_opts.threads,"}, {"sha": "1a8d619fafb6212483b49ab045f40f6e07af901f", "filename": "compiler/rustc_interface/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_interface%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Flib.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -8,6 +8,9 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n+#[macro_use]\n+extern crate tracing;\n+\n mod callbacks;\n mod errors;\n pub mod interface;"}, {"sha": "f8b40949e2ed993ab2b2c2917d251bd94c824ba7", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -38,7 +38,6 @@ use rustc_span::symbol::{sym, Symbol};\n use rustc_span::FileName;\n use rustc_trait_selection::traits;\n use rustc_typeck as typeck;\n-use tracing::{info, warn};\n \n use std::any::Any;\n use std::cell::RefCell;\n@@ -165,7 +164,7 @@ pub fn create_resolver(\n     krate: &ast::Crate,\n     crate_name: &str,\n ) -> BoxedResolver {\n-    tracing::trace!(\"create_resolver\");\n+    trace!(\"create_resolver\");\n     BoxedResolver::new(sess, move |sess, resolver_arenas| {\n         Resolver::new(sess, krate, crate_name, metadata_loader, resolver_arenas)\n     })\n@@ -279,7 +278,7 @@ pub fn configure_and_expand(\n     crate_name: &str,\n     resolver: &mut Resolver<'_>,\n ) -> Result<ast::Crate> {\n-    tracing::trace!(\"configure_and_expand\");\n+    trace!(\"configure_and_expand\");\n     pre_expansion_lint(sess, lint_store, resolver.registered_tools(), &krate, crate_name);\n     rustc_builtin_macros::register_builtin_macros(resolver);\n "}, {"sha": "6c725a01b53151ccfb9325f876442a22920facbf", "filename": "compiler/rustc_interface/src/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fqueries.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -166,7 +166,7 @@ impl<'tcx> Queries<'tcx> {\n     pub fn expansion(\n         &self,\n     ) -> Result<&Query<(Lrc<ast::Crate>, Rc<RefCell<BoxedResolver>>, Lrc<LintStore>)>> {\n-        tracing::trace!(\"expansion\");\n+        trace!(\"expansion\");\n         self.expansion.compute(|| {\n             let crate_name = self.crate_name()?.peek().clone();\n             let (krate, lint_store) = self.register_plugins()?.take();"}, {"sha": "f7e70d355cf86e6ff3ad519311676536ed3a6e24", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -1,3 +1,4 @@\n+use info;\n use libloading::Library;\n use rustc_ast as ast;\n use rustc_codegen_ssa::traits::CodegenBackend;\n@@ -31,7 +32,6 @@ use std::path::{Path, PathBuf};\n use std::sync::atomic::{AtomicBool, Ordering};\n use std::sync::OnceLock;\n use std::thread;\n-use tracing::info;\n \n /// Function pointer type that constructs a new CodegenBackend.\n pub type MakeBackendFn = fn() -> Box<dyn CodegenBackend>;"}, {"sha": "4a744748b2bc65158a1502d57d90584e1e06b074", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -59,7 +59,6 @@ use rustc_trait_selection::traits::{self, misc::can_type_implement_copy};\n use crate::nonstandard_style::{method_context, MethodLateContext};\n \n use std::fmt::Write;\n-use tracing::{debug, trace};\n \n // hardwired lints from librustc_middle\n pub use rustc_session::lint::builtin::*;"}, {"sha": "e3b6c0159870072522a93ce2b2a1477e8dd12198", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -45,7 +45,6 @@ use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{sym, Ident, Symbol};\n use rustc_span::{BytePos, Span};\n use rustc_target::abi;\n-use tracing::debug;\n \n use std::cell::Cell;\n use std::iter;\n@@ -417,7 +416,7 @@ impl LintStore {\n                     None => {\n                         // 1. The tool is currently running, so this lint really doesn't exist.\n                         // FIXME: should this handle tools that never register a lint, like rustfmt?\n-                        tracing::debug!(\"lints={:?}\", self.by_name.keys().collect::<Vec<_>>());\n+                        debug!(\"lints={:?}\", self.by_name.keys().collect::<Vec<_>>());\n                         let tool_prefix = format!(\"{}::\", tool_name);\n                         return if self.by_name.keys().any(|lint| lint.starts_with(&tool_prefix)) {\n                             self.no_lint_suggestion(&complete_name)\n@@ -510,7 +509,7 @@ impl LintStore {\n                 CheckLintNameResult::Tool(Err((Some(slice::from_ref(id)), complete_name)))\n             }\n             Some(other) => {\n-                tracing::debug!(\"got renamed lint {:?}\", other);\n+                debug!(\"got renamed lint {:?}\", other);\n                 CheckLintNameResult::NoLint(None)\n             }\n         }"}, {"sha": "27d173ebde82a506d7c1f8493352b137b3fee634", "filename": "compiler/rustc_lint/src/early.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_lint%2Fsrc%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fearly.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -26,7 +26,6 @@ use rustc_span::symbol::Ident;\n use rustc_span::Span;\n \n use std::slice;\n-use tracing::debug;\n \n macro_rules! run_early_pass { ($cx:expr, $f:ident, $($args:expr),*) => ({\n     $cx.pass.$f(&$cx.context, $($args),*);"}, {"sha": "16b7d2cbbaea73ac489f4b4730f76c4eca98a96c", "filename": "compiler/rustc_lint/src/internal.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_lint%2Fsrc%2Finternal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Finternal.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -12,7 +12,6 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n-use tracing::debug;\n \n declare_tool_lint! {\n     pub rustc::DEFAULT_HASH_TYPES,"}, {"sha": "8a336844dc2fac73f02f7c0fb003ae23ac77181c", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -29,7 +29,6 @@ use rustc_span::Span;\n use std::any::Any;\n use std::cell::Cell;\n use std::slice;\n-use tracing::debug;\n \n /// Extract the `LintStore` from the query context.\n /// This function exists because we've erased `LintStore` as `dyn Any` in the context."}, {"sha": "f1d8ef2e47d31cb74d2f37a3056d1af66766f1e8", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -21,7 +21,6 @@ use rustc_session::parse::{add_feature_diagnostics, feature_err};\n use rustc_session::Session;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use tracing::debug;\n \n use crate::errors::{\n     MalformedAttribute, MalformedAttributeSub, OverruledAttribute, OverruledAttributeSub,"}, {"sha": "801249badcc80f996b11a6b1c73c5348933bdca4", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -42,6 +42,8 @@\n extern crate rustc_middle;\n #[macro_use]\n extern crate rustc_session;\n+#[macro_use]\n+extern crate tracing;\n \n mod array_into_iter;\n pub mod builtin;"}, {"sha": "0316651998129037219b6bc7c9e2ac9d4e6adaf2", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -19,7 +19,6 @@ use rustc_target::spec::abi::Abi as SpecAbi;\n use std::cmp;\n use std::iter;\n use std::ops::ControlFlow;\n-use tracing::debug;\n \n declare_lint! {\n     /// The `unused_comparisons` lint detects comparisons made useless by"}, {"sha": "6a5716600b3b34379b3257fcf93121b347a3ead0", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -29,7 +29,6 @@ use proc_macro::bridge::client::ProcMacro;\n use std::ops::Fn;\n use std::path::Path;\n use std::{cmp, env};\n-use tracing::{debug, info};\n \n #[derive(Clone)]\n pub struct CStore {\n@@ -263,7 +262,7 @@ impl<'a> CrateLoader<'a> {\n     fn existing_match(&self, name: Symbol, hash: Option<Svh>, kind: PathKind) -> Option<CrateNum> {\n         for (cnum, data) in self.cstore.iter_crate_data() {\n             if data.name() != name {\n-                tracing::trace!(\"{} did not match {}\", data.name(), name);\n+                trace!(\"{} did not match {}\", data.name(), name);\n                 continue;\n             }\n "}, {"sha": "1a25e987d3a62c5369e772bf5592938838b137a7", "filename": "compiler/rustc_metadata/src/dependency_format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fdependency_format.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -158,11 +158,11 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n         let name = tcx.crate_name(cnum);\n         let src = tcx.used_crate_source(cnum);\n         if src.dylib.is_some() {\n-            tracing::info!(\"adding dylib: {}\", name);\n+            info!(\"adding dylib: {}\", name);\n             add_library(tcx, cnum, RequireDynamic, &mut formats);\n             let deps = tcx.dylib_dependency_formats(cnum);\n             for &(depnum, style) in deps.iter() {\n-                tracing::info!(\"adding {:?}: {}\", style, tcx.crate_name(depnum));\n+                info!(\"adding {:?}: {}\", style, tcx.crate_name(depnum));\n                 add_library(tcx, depnum, style, &mut formats);\n             }\n         }\n@@ -190,7 +190,7 @@ fn calculate_type(tcx: TyCtxt<'_>, ty: CrateType) -> DependencyList {\n             && tcx.dep_kind(cnum) == CrateDepKind::Explicit\n         {\n             assert!(src.rlib.is_some() || src.rmeta.is_some());\n-            tracing::info!(\"adding staticlib: {}\", tcx.crate_name(cnum));\n+            info!(\"adding staticlib: {}\", tcx.crate_name(cnum));\n             add_library(tcx, cnum, RequireStatic, &mut formats);\n             ret[cnum.as_usize() - 1] = Linkage::Static;\n         }"}, {"sha": "337d3cca2aed7fb3acab33145400fca40561ba3a", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -26,6 +26,9 @@ extern crate rustc_middle;\n #[macro_use]\n extern crate rustc_data_structures;\n \n+#[macro_use]\n+extern crate tracing;\n+\n pub use rmeta::{provide, provide_extern};\n \n mod dependency_format;"}, {"sha": "5b7d0c8581ab214217dc49f520d3044fafbfcbfa", "filename": "compiler/rustc_metadata/src/locator.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flocator.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -236,7 +236,6 @@ use std::fmt::Write as _;\n use std::io::{Read, Result as IoResult, Write};\n use std::path::{Path, PathBuf};\n use std::{cmp, fmt, fs};\n-use tracing::{debug, info};\n \n #[derive(Clone)]\n pub(crate) struct CrateLocator<'a> {"}, {"sha": "b28f54fac1a61a2e82c797a805cc0b2f03d392f0", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -42,7 +42,6 @@ use std::iter::TrustedLen;\n use std::mem;\n use std::num::NonZeroUsize;\n use std::path::Path;\n-use tracing::debug;\n \n pub(super) use cstore_impl::provide;\n pub use cstore_impl::provide_extern;"}, {"sha": "34d8edc30cddad783c6a4d447aa39cb5f908ddfd", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -44,7 +44,6 @@ use std::io::{Read, Seek, Write};\n use std::iter;\n use std::num::NonZeroUsize;\n use std::path::{Path, PathBuf};\n-use tracing::{debug, trace};\n \n pub(super) struct EncodeContext<'a, 'tcx> {\n     opaque: opaque::FileEncoder,"}, {"sha": "8085675d75cc549eafb86b03c64b7d6131f0aa53", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -10,7 +10,6 @@ use rustc_span::hygiene::MacroKind;\n use std::convert::TryInto;\n use std::marker::PhantomData;\n use std::num::NonZeroUsize;\n-use tracing::debug;\n \n /// Helper trait, for encoding to, and decoding from, a fixed number of bytes.\n /// Used mainly for Lazy positions and lengths."}, {"sha": "9ed1c064d2b7f3ea651eb303c9e7824dbbdba8ec", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -268,7 +268,7 @@ impl<'tcx> Cx<'tcx> {\n                 // the overall method call for better diagnostics. args[0]\n                 // is guaranteed to exist, since a method call always has a receiver.\n                 let old_adjustment_span = self.adjustment_span.replace((args[0].hir_id, expr_span));\n-                tracing::info!(\"Using method span: {:?}\", expr.span);\n+                info!(\"Using method span: {:?}\", expr.span);\n                 let args = self.mirror_exprs(args);\n                 self.adjustment_span = old_adjustment_span;\n                 ExprKind::Call {"}, {"sha": "63819a2f98df57b17a49a426500e48111befcfa4", "filename": "compiler/rustc_parse/src/lexer/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Fmod.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -14,8 +14,6 @@ use rustc_session::parse::ParseSess;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{edition::Edition, BytePos, Pos, Span};\n \n-use tracing::debug;\n-\n mod tokentrees;\n mod unescape_error_reporting;\n mod unicode_chars;"}, {"sha": "77c4fadab45eacc9f61d5fd4cb4d361cedc62666", "filename": "compiler/rustc_parse/src/lexer/unescape_error_reporting.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Funescape_error_reporting.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -20,13 +20,9 @@ pub(crate) fn emit_unescape_error(\n     range: Range<usize>,\n     error: EscapeError,\n ) {\n-    tracing::debug!(\n+    debug!(\n         \"emit_unescape_error: {:?}, {:?}, {:?}, {:?}, {:?}\",\n-        lit,\n-        span_with_quotes,\n-        mode,\n-        range,\n-        error\n+        lit, span_with_quotes, mode, range, error\n     );\n     let last_char = || {\n         let c = lit[range.clone()].chars().rev().next().unwrap();"}, {"sha": "77a6bde1c164e43ac43c73d6a36e50929da3a671", "filename": "compiler/rustc_parse/src/parser/attr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -7,8 +7,6 @@ use rustc_errors::{error_code, Diagnostic, PResult};\n use rustc_span::{sym, BytePos, Span};\n use std::convert::TryInto;\n \n-use tracing::debug;\n-\n // Public for rustfmt usage\n #[derive(Debug)]\n pub enum InnerAttrPolicy<'a> {"}, {"sha": "dd806e2130e9b062f62a58603524534328ab3298", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -29,7 +29,6 @@ use std::ops::{Deref, DerefMut};\n use std::mem::take;\n \n use crate::parser;\n-use tracing::{debug, trace};\n \n const TURBOFISH_SUGGESTION_STR: &str =\n     \"use `::<...>` instead of `<...>` to specify lifetime, type, or const arguments\";"}, {"sha": "5b75d1d5f221daa69dbaf0d34fc1a0462ec756ba", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -22,7 +22,6 @@ use rustc_span::DUMMY_SP;\n \n use std::convert::TryFrom;\n use std::mem;\n-use tracing::debug;\n \n impl<'a> Parser<'a> {\n     /// Parses a source module as a crate. This is the main entry point for the parser."}, {"sha": "5c8f374255c7fc91635b88391161d743150ecced", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -37,7 +37,6 @@ use rustc_errors::{\n use rustc_session::parse::ParseSess;\n use rustc_span::source_map::{Span, DUMMY_SP};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use tracing::debug;\n \n use std::ops::Range;\n use std::{cmp, mem, slice};"}, {"sha": "fdc1af27f82e4206e3e7d95eec13f6ffb59a4a92", "filename": "compiler/rustc_parse/src/parser/path.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpath.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -13,7 +13,6 @@ use rustc_span::source_map::{BytePos, Span};\n use rustc_span::symbol::{kw, sym, Ident};\n \n use std::mem;\n-use tracing::debug;\n \n /// Specifies how to parse a path.\n #[derive(Copy, Clone, PartialEq)]"}, {"sha": "a9271761358c9c7f1316c10f5553ab703b5f4f03", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -8,6 +8,9 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n+#[macro_use]\n+extern crate tracing;\n+\n mod errors;\n \n use rustc_ast::MacroDef;\n@@ -1784,7 +1787,7 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n     fn leaks_private_dep(&self, item_id: DefId) -> bool {\n         let ret = self.required_visibility.is_public() && self.tcx.is_private_dep(item_id.krate);\n \n-        tracing::debug!(\"leaks_private_dep(item_id={:?})={}\", item_id, ret);\n+        debug!(\"leaks_private_dep(item_id={:?})={}\", item_id, ret);\n         ret\n     }\n }"}, {"sha": "882a92c0ebb62d31257ba7d092d2104081dd22eb", "filename": "compiler/rustc_resolve/src/access_levels.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Faccess_levels.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -39,7 +39,7 @@ impl<'r, 'a> AccessLevelsVisitor<'r, 'a> {\n             visit::walk_crate(&mut visitor, krate);\n         }\n \n-        tracing::info!(\"resolve::access_levels: {:#?}\", r.access_levels);\n+        info!(\"resolve::access_levels: {:#?}\", r.access_levels);\n     }\n \n     fn reset(&mut self) {"}, {"sha": "cd0b2443da58e58c37a40130f8a83601ce330f01", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -36,7 +36,6 @@ use rustc_span::Span;\n \n use std::cell::Cell;\n use std::ptr;\n-use tracing::debug;\n \n type Res = def::Res<NodeId>;\n "}, {"sha": "5955d8df16ee1edfa34f6edf2af8fca6c3cfc69c", "filename": "compiler/rustc_resolve/src/def_collector.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdef_collector.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -8,7 +8,6 @@ use rustc_hir::definitions::*;\n use rustc_span::hygiene::LocalExpnId;\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use tracing::debug;\n \n pub(crate) fn collect_definitions(\n     resolver: &mut Resolver<'_>,"}, {"sha": "4fd6fe4e36c69093babe14a7b3b2e8c214fa83d4", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -25,7 +25,6 @@ use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, Span};\n-use tracing::debug;\n \n use crate::imports::{Import, ImportKind, ImportResolver};\n use crate::late::{PatternSource, Rib};"}, {"sha": "619ce0462203ad84966576aab2aec8e2fcfb0c24", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -23,8 +23,6 @@ use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::Span;\n \n-use tracing::*;\n-\n use std::cell::Cell;\n use std::{mem, ptr};\n "}, {"sha": "dbe4d691f04cdf1a465dc3d1598498294f27b784", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -32,7 +32,6 @@ use smallvec::{smallvec, SmallVec};\n use rustc_span::source_map::{respan, Spanned};\n use std::collections::{hash_map::Entry, BTreeSet};\n use std::mem::{replace, take};\n-use tracing::debug;\n \n mod diagnostics;\n pub(crate) mod lifetimes;\n@@ -3268,11 +3267,9 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n         source: PathSource<'ast>,\n         finalize: Finalize,\n     ) -> PartialRes {\n-        tracing::debug!(\n+        debug!(\n             \"smart_resolve_path_fragment(qself={:?}, path={:?}, finalize={:?})\",\n-            qself,\n-            path,\n-            finalize,\n+            qself, path, finalize,\n         );\n         let ns = source.namespace();\n "}, {"sha": "99d13acbae1b9aa5fd9afecc36f18949557bbc8b", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -33,8 +33,6 @@ use rustc_span::{BytePos, Span};\n use std::iter;\n use std::ops::Deref;\n \n-use tracing::debug;\n-\n type Res = def::Res<ast::NodeId>;\n \n /// A field or associated item from self type suggested in case of resolution failure."}, {"sha": "c16eab222f625d8495bcf99e62d8fed42aef951e", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -1212,7 +1212,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             scope: &wrap_scope,\n             trait_definition_only: self.trait_definition_only,\n         };\n-        let span = tracing::debug_span!(\"scope\", scope = ?TruncatedScopeDebug(&this.scope));\n+        let span = debug_span!(\"scope\", scope = ?TruncatedScopeDebug(&this.scope));\n         {\n             let _enter = span.enter();\n             f(&mut this);"}, {"sha": "4e8f3a2cae879f11c03a2fd23c8cc7bd44230718", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -58,7 +58,6 @@ use smallvec::{smallvec, SmallVec};\n use std::cell::{Cell, RefCell};\n use std::collections::BTreeSet;\n use std::{cmp, fmt, ptr};\n-use tracing::debug;\n \n use diagnostics::{ImportSuggestion, LabelSuggestion, Suggestion};\n use imports::{Import, ImportKind, ImportResolver, NameResolution};"}, {"sha": "ac6c3663b63762d134e8bb21a6567724a08dd022", "filename": "compiler/rustc_save_analysis/src/dump_visitor.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Fdump_visitor.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -44,8 +44,6 @@ use rls_data::{\n     RefKind, Relation, RelationKind, SpanData,\n };\n \n-use tracing::{debug, error};\n-\n #[rustfmt::skip] // https://github.com/rust-lang/rustfmt/issues/5213\n macro_rules! down_cast_data {\n     ($id:ident, $kind:ident, $sp:expr) => {"}, {"sha": "16af53385104646aab85c1876aaf6e4f07b3c1ee", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -7,6 +7,9 @@\n #![deny(rustc::untranslatable_diagnostic)]\n #![deny(rustc::diagnostic_outside_of_impl)]\n \n+#[macro_use]\n+extern crate tracing;\n+\n mod dump_visitor;\n mod dumper;\n #[macro_use]\n@@ -49,8 +52,6 @@ use rls_data::{\n     RefKind, Relation, RelationKind, SpanData,\n };\n \n-use tracing::{debug, error, info};\n-\n pub struct SaveContext<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     maybe_typeck_results: Option<&'tcx ty::TypeckResults<'tcx>>,"}, {"sha": "2336d99363fd3d8ed639b61d96d9891dcb293439", "filename": "compiler/rustc_session/src/cgu_reuse_tracker.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fcgu_reuse_tracker.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -10,7 +10,6 @@ use rustc_span::{Span, Symbol};\n use std::borrow::Cow;\n use std::fmt::{self};\n use std::sync::{Arc, Mutex};\n-use tracing::debug;\n \n #[derive(Copy, Clone, Debug, PartialEq, PartialOrd)]\n pub enum CguReuse {"}, {"sha": "7c50fe2d823bd443a8ad5adb9664c94c6ff8f662", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -2530,7 +2530,7 @@ fn parse_pretty(unstable_opts: &UnstableOptions, efmt: ErrorOutputType) -> Optio\n             ),\n         ),\n     };\n-    tracing::debug!(\"got unpretty option: {first:?}\");\n+    debug!(\"got unpretty option: {first:?}\");\n     Some(first)\n }\n "}, {"sha": "e8edb38f5038ea1f4c55d949a5dc3558050efbbe", "filename": "compiler/rustc_session/src/filesearch.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ffilesearch.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -7,7 +7,6 @@ use std::path::{Path, PathBuf};\n \n use crate::search_paths::{PathKind, SearchPath};\n use rustc_fs_util::fix_windows_verbatim_for_gcc;\n-use tracing::debug;\n \n #[derive(Copy, Clone)]\n pub enum FileMatch {"}, {"sha": "02d5d33c8d5ba24727b27fec54a3a42bbd511fe4", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -14,6 +14,9 @@\n extern crate rustc_macros;\n pub mod errors;\n \n+#[macro_use]\n+extern crate tracing;\n+\n pub mod cgu_reuse_tracker;\n pub mod utils;\n pub use lint::{declare_lint, declare_lint_pass, declare_tool_lint, impl_lint_pass};"}, {"sha": "e8ddb4ed17a3e6da5af4e922736fa11dbe4c029f", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -41,7 +41,6 @@ use rustc_macros::HashStable_Generic;\n use rustc_serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::fmt;\n use std::hash::Hash;\n-use tracing::*;\n \n /// A `SyntaxContext` represents a chain of pairs `(ExpnId, Transparency)` named \"marks\".\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]"}, {"sha": "34e2e92bdfce1efa6fc203f15245ac5d76104a04", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -76,8 +76,6 @@ use md5::Md5;\n use sha1::Sha1;\n use sha2::Sha256;\n \n-use tracing::debug;\n-\n #[cfg(test)]\n mod tests;\n "}, {"sha": "8ffbbff7a7dc59d30106ee8cebda1aa353e6b3c6", "filename": "compiler/rustc_span/src/source_map.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsource_map.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -23,7 +23,6 @@ use std::{convert::TryFrom, unreachable};\n \n use std::fs;\n use std::io;\n-use tracing::debug;\n \n #[cfg(test)]\n mod tests;"}, {"sha": "46c5fe78ffbf65697085e5bcd7874ed70e50595a", "filename": "compiler/rustc_symbol_mangling/src/legacy.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flegacy.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -6,8 +6,6 @@ use rustc_middle::ty::subst::{GenericArg, GenericArgKind};\n use rustc_middle::ty::{self, Instance, Ty, TyCtxt, TypeVisitable};\n use rustc_middle::util::common::record_time;\n \n-use tracing::debug;\n-\n use std::fmt::{self, Write};\n use std::mem::{self, discriminant};\n "}, {"sha": "62f44a48032efd93301b704bf538bdea53813c8f", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -97,6 +97,9 @@\n #[macro_use]\n extern crate rustc_middle;\n \n+#[macro_use]\n+extern crate tracing;\n+\n use rustc_hir::def::DefKind;\n use rustc_hir::def_id::{CrateNum, LOCAL_CRATE};\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n@@ -107,8 +110,6 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, Instance, TyCtxt};\n use rustc_session::config::SymbolManglingVersion;\n \n-use tracing::debug;\n-\n mod legacy;\n mod v0;\n "}, {"sha": "99046bd126f937f74d557cb582c8db8d17457305", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -2014,7 +2014,7 @@ impl<'a, 'tcx> InferCtxtPrivExt<'a, 'tcx> for InferCtxt<'a, 'tcx> {\n         let predicate = self.resolve_vars_if_possible(obligation.predicate);\n         let span = obligation.cause.span;\n \n-        debug!(?predicate, obligation.cause.code = tracing::field::debug(&obligation.cause.code()));\n+        debug!(?predicate, obligation.cause.code = ?obligation.cause.code());\n \n         // Ambiguity errors are often caused as fallout from earlier errors.\n         // We ignore them if this `infcx` is tainted in some cases below."}, {"sha": "211c813b8001c8ae626bc5f783213c3c83fc2010", "filename": "compiler/rustc_transmute/src/layout/tree.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flayout%2Ftree.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -317,7 +317,7 @@ pub(crate) mod rustc {\n                             tcx,\n                         )?,\n                         AdtKind::Enum => {\n-                            tracing::trace!(?adt_def, \"treeifying enum\");\n+                            trace!(?adt_def, \"treeifying enum\");\n                             let mut tree = Tree::uninhabited();\n \n                             for (idx, discr) in adt_def.discriminants(tcx) {\n@@ -381,7 +381,7 @@ pub(crate) mod rustc {\n             let clamp =\n                 |align: Align| align.clamp(min_align, max_align).bytes().try_into().unwrap();\n \n-            let variant_span = tracing::trace_span!(\n+            let variant_span = trace_span!(\n                 \"treeifying variant\",\n                 min_align = ?min_align,\n                 max_align = ?max_align,\n@@ -396,22 +396,22 @@ pub(crate) mod rustc {\n \n             // The layout of the variant is prefixed by the discriminant, if any.\n             if let Some(discr) = discr {\n-                tracing::trace!(?discr, \"treeifying discriminant\");\n+                trace!(?discr, \"treeifying discriminant\");\n                 let discr_layout = alloc::Layout::from_size_align(\n                     layout_summary.discriminant_size,\n                     clamp(layout_summary.discriminant_align),\n                 )\n                 .unwrap();\n-                tracing::trace!(?discr_layout, \"computed discriminant layout\");\n+                trace!(?discr_layout, \"computed discriminant layout\");\n                 variant_layout = variant_layout.extend(discr_layout).unwrap().0;\n                 tree = tree.then(Self::from_disr(discr, tcx, layout_summary.discriminant_size));\n             }\n \n             // Next come fields.\n-            let fields_span = tracing::trace_span!(\"treeifying fields\").entered();\n+            let fields_span = trace_span!(\"treeifying fields\").entered();\n             for field_def in variant_def.fields.iter() {\n                 let field_ty = field_def.ty(tcx, substs_ref);\n-                let _span = tracing::trace_span!(\"treeifying field\", field = ?field_ty).entered();\n+                let _span = trace_span!(\"treeifying field\", field = ?field_ty).entered();\n \n                 // begin with the field's visibility\n                 tree = tree.then(Self::def(Def::Field(field_def)));\n@@ -434,7 +434,7 @@ pub(crate) mod rustc {\n             drop(fields_span);\n \n             // finally: padding\n-            let padding_span = tracing::trace_span!(\"adding trailing padding\").entered();\n+            let padding_span = trace_span!(\"adding trailing padding\").entered();\n             let padding_needed = layout_summary.total_size - variant_layout.size();\n             if padding_needed > 0 {\n                 tree = tree.then(Self::padding(padding_needed));\n@@ -467,7 +467,7 @@ pub(crate) mod rustc {\n             layout.align().abi.bytes().try_into().unwrap(),\n         )\n         .unwrap();\n-        tracing::trace!(?ty, ?layout, \"computed layout for type\");\n+        trace!(?ty, ?layout, \"computed layout for type\");\n         Ok(layout)\n     }\n }"}, {"sha": "248ff1ec24164c9209c84bdd98b009de8e2679d7", "filename": "compiler/rustc_transmute/src/maybe_transmutable/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fmod.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -110,7 +110,7 @@ where\n             // Remove all `Def` nodes from `src`, without checking their visibility.\n             let src = src.prune(&|def| true);\n \n-            tracing::trace!(?src, \"pruned src\");\n+            trace!(?src, \"pruned src\");\n \n             // Remove all `Def` nodes from `dst`, additionally...\n             let dst = if assume_visibility {\n@@ -121,7 +121,7 @@ where\n                 dst.prune(&|def| context.is_accessible_from(def, scope))\n             };\n \n-            tracing::trace!(?dst, \"pruned dst\");\n+            trace!(?dst, \"pruned dst\");\n \n             // Convert `src` from a tree-based representation to an NFA-based representation.\n             // If the conversion fails because `src` is uninhabited, conclude that the transmutation"}, {"sha": "adab343ac98aaa4b225a4b2bcb790d3000f3c2ea", "filename": "compiler/rustc_transmute/src/maybe_transmutable/query_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fquery_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fquery_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Fmaybe_transmutable%2Fquery_context.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -82,7 +82,7 @@ mod rustc {\n                 false\n             };\n \n-            tracing::trace!(?ret, \"ret\");\n+            trace!(?ret, \"ret\");\n             ret\n         }\n "}, {"sha": "661e413fc5b8170defb0d06724fc0b62710b4573", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -15,8 +15,6 @@ use std::collections::btree_map::Entry;\n use std::collections::BTreeMap;\n use std::ops::ControlFlow;\n \n-use tracing::debug;\n-\n // FIXME(#86795): `BoundVarsCollector` here should **NOT** be used\n // outside of `resolve_associated_item`. It's just to address #64494,\n // #83765, and #85848 which are creating bound types/regions that lose"}, {"sha": "2a8c460bb11830921c4e48fdc715d9d3e0980ae2", "filename": "compiler/rustc_typeck/src/check/generator_interior.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee3c8350189de045ec71997874eaa6cebf99fbf3/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior.rs?ref=ee3c8350189de045ec71997874eaa6cebf99fbf3", "patch": "@@ -17,7 +17,6 @@ use rustc_middle::middle::region::{self, Scope, ScopeData, YieldData};\n use rustc_middle::ty::{self, RvalueScopes, Ty, TyCtxt, TypeVisitable};\n use rustc_span::symbol::sym;\n use rustc_span::Span;\n-use tracing::debug;\n \n mod drop_ranges;\n "}]}