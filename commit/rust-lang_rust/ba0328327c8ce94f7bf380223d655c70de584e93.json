{"sha": "ba0328327c8ce94f7bf380223d655c70de584e93", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhMDMyODMyN2M4Y2U5NGY3YmYzODAyMjNkNjU1YzcwZGU1ODRlOTM=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-08-17T13:15:17Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2019-08-17T13:42:05Z"}, "message": "Doc nits\n\nCo-Authored-By: Ralf Jung <post@ralfj.de>", "tree": {"sha": "3c58e7c49b747ac9b87908d6be65fccc2e076000", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c58e7c49b747ac9b87908d6be65fccc2e076000"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba0328327c8ce94f7bf380223d655c70de584e93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba0328327c8ce94f7bf380223d655c70de584e93", "html_url": "https://github.com/rust-lang/rust/commit/ba0328327c8ce94f7bf380223d655c70de584e93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba0328327c8ce94f7bf380223d655c70de584e93/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a641f7c516ac666c72bf9edfbec8648aa0160c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a641f7c516ac666c72bf9edfbec8648aa0160c7", "html_url": "https://github.com/rust-lang/rust/commit/7a641f7c516ac666c72bf9edfbec8648aa0160c7"}], "stats": {"total": 30, "additions": 15, "deletions": 15}, "files": [{"sha": "c61e3183409f267fcf83a9565ece1b58efdd096f", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ba0328327c8ce94f7bf380223d655c70de584e93/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0328327c8ce94f7bf380223d655c70de584e93/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=ba0328327c8ce94f7bf380223d655c70de584e93", "patch": "@@ -123,7 +123,7 @@ impl<T> Box<T> {\n         box x\n     }\n \n-    /// Construct a new box with uninitialized contents.\n+    /// Constructs a new box with uninitialized contents.\n     ///\n     /// # Examples\n     ///\n@@ -161,7 +161,7 @@ impl<T> Box<T> {\n }\n \n impl<T> Box<[T]> {\n-    /// Construct a new boxed slice with uninitialized contents.\n+    /// Constructs a new boxed slice with uninitialized contents.\n     ///\n     /// # Examples\n     ///\n@@ -192,7 +192,7 @@ impl<T> Box<[T]> {\n }\n \n impl<T> Box<mem::MaybeUninit<T>> {\n-    /// Convert to `Box<T>`.\n+    /// Converts to `Box<T>`.\n     ///\n     /// # Safety\n     ///\n@@ -228,7 +228,7 @@ impl<T> Box<mem::MaybeUninit<T>> {\n }\n \n impl<T> Box<[mem::MaybeUninit<T>]> {\n-    /// Convert to `Box<[T]>`.\n+    /// Converts to `Box<[T]>`.\n     ///\n     /// # Safety\n     ///"}, {"sha": "7183336ba5302683ff21c1f32c7a486fa726392f", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba0328327c8ce94f7bf380223d655c70de584e93/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0328327c8ce94f7bf380223d655c70de584e93/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=ba0328327c8ce94f7bf380223d655c70de584e93", "patch": "@@ -327,7 +327,7 @@ impl<T> Rc<T> {\n         }))\n     }\n \n-    /// Construct a new Rc with uninitialized contents.\n+    /// Constructs a new `Rc` with uninitialized contents.\n     ///\n     /// # Examples\n     ///\n@@ -409,7 +409,7 @@ impl<T> Rc<T> {\n }\n \n impl<T> Rc<[T]> {\n-    /// Construct a new reference-counted slice with uninitialized contents.\n+    /// Constructs a new reference-counted slice with uninitialized contents.\n     ///\n     /// # Examples\n     ///\n@@ -441,7 +441,7 @@ impl<T> Rc<[T]> {\n }\n \n impl<T> Rc<mem::MaybeUninit<T>> {\n-    /// Convert to `Rc<T>`.\n+    /// Converts to `Rc<T>`.\n     ///\n     /// # Safety\n     ///\n@@ -480,7 +480,7 @@ impl<T> Rc<mem::MaybeUninit<T>> {\n }\n \n impl<T> Rc<[mem::MaybeUninit<T>]> {\n-    /// Convert to `Rc<[T]>`.\n+    /// Converts to `Rc<[T]>`.\n     ///\n     /// # Safety\n     ///\n@@ -721,7 +721,7 @@ impl<T: ?Sized> Rc<T> {\n     ///\n     /// Any other `Rc` or [`Weak`] pointers to the same value must not be dereferenced\n     /// for the duration of the returned borrow.\n-    /// This is trivially the case if no such pointer exist,\n+    /// This is trivially the case if no such pointers exist,\n     /// for example immediately after `Rc::new`.\n     ///\n     /// # Examples"}, {"sha": "ffab842c7692746931e9b820168e53f5e5669c9d", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ba0328327c8ce94f7bf380223d655c70de584e93/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0328327c8ce94f7bf380223d655c70de584e93/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=ba0328327c8ce94f7bf380223d655c70de584e93", "patch": "@@ -311,7 +311,7 @@ impl<T> Arc<T> {\n         Self::from_inner(Box::into_raw_non_null(x))\n     }\n \n-    /// Construct a Arc box with uninitialized contents.\n+    /// Constructs a new `Arc` with uninitialized contents.\n     ///\n     /// # Examples\n     ///\n@@ -393,7 +393,7 @@ impl<T> Arc<T> {\n }\n \n impl<T> Arc<[T]> {\n-    /// Construct a new reference-counted slice with uninitialized contents.\n+    /// Constructs a new reference-counted slice with uninitialized contents.\n     ///\n     /// # Examples\n     ///\n@@ -425,7 +425,7 @@ impl<T> Arc<[T]> {\n }\n \n impl<T> Arc<mem::MaybeUninit<T>> {\n-    /// Convert to `Arc<T>`.\n+    /// Converts to `Arc<T>`.\n     ///\n     /// # Safety\n     ///\n@@ -464,7 +464,7 @@ impl<T> Arc<mem::MaybeUninit<T>> {\n }\n \n impl<T> Arc<[mem::MaybeUninit<T>]> {\n-    /// Convert to `Arc<[T]>`.\n+    /// Converts to `Arc<[T]>`.\n     ///\n     /// # Safety\n     ///\n@@ -1106,7 +1106,7 @@ impl<T: ?Sized> Arc<T> {\n     ///\n     /// Any other `Arc` or [`Weak`] pointers to the same value must not be dereferenced\n     /// for the duration of the returned borrow.\n-    /// This is trivially the case if no such pointer exist,\n+    /// This is trivially the case if no such pointers exist,\n     /// for example immediately after `Arc::new`.\n     ///\n     /// # Examples"}, {"sha": "24f45394a3bd55e66ddccb7f78866c732eed99c5", "filename": "src/libcore/ptr/unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ba0328327c8ce94f7bf380223d655c70de584e93/src%2Flibcore%2Fptr%2Funique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ba0328327c8ce94f7bf380223d655c70de584e93/src%2Flibcore%2Fptr%2Funique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Funique.rs?ref=ba0328327c8ce94f7bf380223d655c70de584e93", "patch": "@@ -123,7 +123,7 @@ impl<T: ?Sized> Unique<T> {\n         &mut *self.as_ptr()\n     }\n \n-    /// Cast to a pointer of another type\n+    /// Casts to a pointer of another type\n     #[inline]\n     pub const fn cast<U>(self) -> Unique<U> {\n         unsafe {"}]}