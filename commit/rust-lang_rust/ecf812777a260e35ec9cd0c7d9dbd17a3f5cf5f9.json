{"sha": "ecf812777a260e35ec9cd0c7d9dbd17a3f5cf5f9", "node_id": "C_kwDOAAsO6NoAKGVjZjgxMjc3N2EyNjBlMzVlYzljZDBjN2Q5ZGJkMTdhM2Y1Y2Y1Zjk", "commit": {"author": {"name": "Arpad Borsos", "email": "swatinem@swatinem.de", "date": "2022-11-29T22:17:08Z"}, "committer": {"name": "Arpad Borsos", "email": "swatinem@swatinem.de", "date": "2022-12-08T22:27:57Z"}, "message": "Fix Async Generator ABI\n\nThis change was missed when making async generators implement `Future` directly.\nIt did not cause any problems in codegen so far, as `GeneratorState<(), Output>`\nhappens to have the same ABI as `Poll<Output>`.", "tree": {"sha": "a2bd1e3681603ee9730d2dde8658662d353e71e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2bd1e3681603ee9730d2dde8658662d353e71e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ecf812777a260e35ec9cd0c7d9dbd17a3f5cf5f9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZNNjbpmzULCa7LeL/HvKd4JLMpgFAmOSZREACgkQ/HvKd4JL\nMpgD4BAAngo8sKEIdQMjURlYIlQG3BuzpdfsPuf/V5Aa7HJbKgxJ2mVn77HXzii6\nIAmqIrq+RzTanT8CljTOysW45FMw+SJoupP0+KN0tiLREgS0JJf1iOhuf8kDArH2\nQLIhZ9A+uTPl5Zy9kaDZBv3azuIG5UHFklu+kyZMlK32NuHDqLiG+/Iq3NJgO2JA\nNGTAdyEioxreLH9LyYAXWlsZDA2AEz3P+OOlfBMbuhhZFJJi9pP0Mjkj670j/0R8\nNkWS1yn60gwrzsttQykLlQ86zCm2JjUt4gnf3OvWIYlmQ/dFwSvWxTO/r1lVkn5I\naITGzxGh3ZIwNzHO738wNkZPdBQyMP2a8w0m7SgPyz/tR5BoKMuawfywqcsbo016\nLPWf50faq5SQUXbQBPIlp3EVhtftertgN2VLjLv7eGXeA7hxIa543SOCX2gWrirs\nIALPWdPGEXs9M5hGf5+JhpxQM40XyBIyITQ86/+iQSWsSyXKZ9SSZ2hf63Az2gQV\nIIAgvOUW6i5AfxdlNlQ/QUP7FgpjBWdiDpngrwZ/YAKjCkNyDCNVK0j52vov7lEn\nnrRRXydmcLDRxJksUHv2Fx3ka8hM3VgO+K6joC2U824zTrgTJ51a43DAR/wSY3fR\nAf+2azzGfKnySneLmbunxqhBnQMDomoZqSV8V4Ti7xeqFOMrqM4=\n=yqTD\n-----END PGP SIGNATURE-----", "payload": "tree a2bd1e3681603ee9730d2dde8658662d353e71e2\nparent 7632db0e87d8adccc9a83a47795c9411b1455855\nauthor Arpad Borsos <swatinem@swatinem.de> 1669760228 +0100\ncommitter Arpad Borsos <swatinem@swatinem.de> 1670538477 +0100\n\nFix Async Generator ABI\n\nThis change was missed when making async generators implement `Future` directly.\nIt did not cause any problems in codegen so far, as `GeneratorState<(), Output>`\nhappens to have the same ABI as `Poll<Output>`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ecf812777a260e35ec9cd0c7d9dbd17a3f5cf5f9", "html_url": "https://github.com/rust-lang/rust/commit/ecf812777a260e35ec9cd0c7d9dbd17a3f5cf5f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ecf812777a260e35ec9cd0c7d9dbd17a3f5cf5f9/comments", "author": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Swatinem", "id": 580492, "node_id": "MDQ6VXNlcjU4MDQ5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/580492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Swatinem", "html_url": "https://github.com/Swatinem", "followers_url": "https://api.github.com/users/Swatinem/followers", "following_url": "https://api.github.com/users/Swatinem/following{/other_user}", "gists_url": "https://api.github.com/users/Swatinem/gists{/gist_id}", "starred_url": "https://api.github.com/users/Swatinem/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Swatinem/subscriptions", "organizations_url": "https://api.github.com/users/Swatinem/orgs", "repos_url": "https://api.github.com/users/Swatinem/repos", "events_url": "https://api.github.com/users/Swatinem/events{/privacy}", "received_events_url": "https://api.github.com/users/Swatinem/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7632db0e87d8adccc9a83a47795c9411b1455855", "url": "https://api.github.com/repos/rust-lang/rust/commits/7632db0e87d8adccc9a83a47795c9411b1455855", "html_url": "https://github.com/rust-lang/rust/commit/7632db0e87d8adccc9a83a47795c9411b1455855"}], "stats": {"total": 22, "additions": 17, "deletions": 5}, "files": [{"sha": "d644cbccea11b2df6c5080a2191ad3c1c8b8f4f1", "filename": "compiler/rustc_ty_utils/src/abi.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ecf812777a260e35ec9cd0c7d9dbd17a3f5cf5f9/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ecf812777a260e35ec9cd0c7d9dbd17a3f5cf5f9/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fabi.rs?ref=ecf812777a260e35ec9cd0c7d9dbd17a3f5cf5f9", "patch": "@@ -85,7 +85,7 @@ fn fn_sig_for_fn_abi<'tcx>(\n                 bound_vars,\n             )\n         }\n-        ty::Generator(_, substs, _) => {\n+        ty::Generator(did, substs, _) => {\n             let sig = substs.as_generator().poly_sig();\n \n             let bound_vars = tcx.mk_bound_variable_kinds(\n@@ -104,10 +104,22 @@ fn fn_sig_for_fn_abi<'tcx>(\n             let env_ty = tcx.mk_adt(pin_adt_ref, pin_substs);\n \n             let sig = sig.skip_binder();\n-            let state_did = tcx.require_lang_item(LangItem::GeneratorState, None);\n-            let state_adt_ref = tcx.adt_def(state_did);\n-            let state_substs = tcx.intern_substs(&[sig.yield_ty.into(), sig.return_ty.into()]);\n-            let ret_ty = tcx.mk_adt(state_adt_ref, state_substs);\n+            // The `FnSig` and the `ret_ty` here is for a generators main\n+            // `Generator::resume(...) -> GeneratorState` function in case we\n+            // have an ordinary generator, or the `Future::poll(...) -> Poll`\n+            // function in case this is a special generator backing an async construct.\n+            let ret_ty = if tcx.generator_is_async(did) {\n+                let state_did = tcx.require_lang_item(LangItem::Poll, None);\n+                let state_adt_ref = tcx.adt_def(state_did);\n+                let state_substs = tcx.intern_substs(&[sig.return_ty.into()]);\n+                tcx.mk_adt(state_adt_ref, state_substs)\n+            } else {\n+                let state_did = tcx.require_lang_item(LangItem::GeneratorState, None);\n+                let state_adt_ref = tcx.adt_def(state_did);\n+                let state_substs = tcx.intern_substs(&[sig.yield_ty.into(), sig.return_ty.into()]);\n+                tcx.mk_adt(state_adt_ref, state_substs)\n+            };\n+\n             ty::Binder::bind_with_vars(\n                 tcx.mk_fn_sig(\n                     [env_ty, sig.resume_ty].iter(),"}]}