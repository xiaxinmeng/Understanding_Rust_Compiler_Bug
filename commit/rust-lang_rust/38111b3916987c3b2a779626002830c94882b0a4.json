{"sha": "38111b3916987c3b2a779626002830c94882b0a4", "node_id": "C_kwDOAAsO6NoAKDM4MTExYjM5MTY5ODdjM2IyYTc3OTYyNjAwMjgzMGM5NDg4MmIwYTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-21T16:15:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-21T16:15:49Z"}, "message": "Auto merge of #2137 - RalfJung:targets, r=oli-obk\n\nexplain which targets we support to what extent\n\nThis is basically documenting my policy so far: Linux is the target I know best and can spend most time on. Apple is so close to Linux that it can basically ride along without much extra work. I don't have a lot of time to spend on our Windows support.\n\nOf course, if people commit to contributing and maintaining support for a target, we can promise more than what is documented here. :)  But this is what I am willing to promise.\n\nAlso reduce the amount of work we do on the Windows test runner, since that one currently takes 10min longer than the other two.\n\nr? `@oli-obk`", "tree": {"sha": "d6d49d66d481c054eb71d7ac87e26aeab621eb79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6d49d66d481c054eb71d7ac87e26aeab621eb79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38111b3916987c3b2a779626002830c94882b0a4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38111b3916987c3b2a779626002830c94882b0a4", "html_url": "https://github.com/rust-lang/rust/commit/38111b3916987c3b2a779626002830c94882b0a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38111b3916987c3b2a779626002830c94882b0a4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b96610b3de5bc9fd346d90700ba881aca8d503f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b96610b3de5bc9fd346d90700ba881aca8d503f0", "html_url": "https://github.com/rust-lang/rust/commit/b96610b3de5bc9fd346d90700ba881aca8d503f0"}, {"sha": "b4089a77abbfa19b674ebf1343a8ef974c10e67c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4089a77abbfa19b674ebf1343a8ef974c10e67c", "html_url": "https://github.com/rust-lang/rust/commit/b4089a77abbfa19b674ebf1343a8ef974c10e67c"}], "stats": {"total": 29, "additions": 26, "deletions": 3}, "files": [{"sha": "edf74603b6e106b221edd2aa2749862f4b9ff3e5", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/38111b3916987c3b2a779626002830c94882b0a4/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/38111b3916987c3b2a779626002830c94882b0a4/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=38111b3916987c3b2a779626002830c94882b0a4", "patch": "@@ -56,7 +56,8 @@ jobs:\n             ~/.cargo/git/db\n             # contains package information of crates installed via `cargo install`.\n             ~/.cargo/.crates.toml\n-          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}\n+            ~/.cargo/.crates2.json\n+          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-xargo0.3.25\n           restore-keys: ${{ runner.os }}-cargo\n \n       - name: Install rustup-toolchain-install-master and xargo"}, {"sha": "abcfd3e6d050e4166b58e70464d21485b75ab52d", "filename": "README.md", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/38111b3916987c3b2a779626002830c94882b0a4/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/38111b3916987c3b2a779626002830c94882b0a4/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=38111b3916987c3b2a779626002830c94882b0a4", "patch": "@@ -194,6 +194,28 @@ for seed in $({ echo obase=16; seq 255; } | bc); do\n done\n ```\n \n+### Supported targets\n+\n+Miri does not support all targets supported by Rust. The good news, however, is\n+that no matter your host OS/platform, it is easy to run code for *any* target\n+using `--target`!\n+\n+The following targets are tested on CI and thus should always work (to the\n+degree documented below):\n+\n+- The best-supported target is `x86_64-unknown-linux-gnu`. Miri releases are\n+  blocked on things working with this target. Most other Linux targets should\n+  also work well; we do run the test suite on `i686-unknown-linux-gnu` as a\n+  32bit target and `mips64-unknown-linux-gnuabi64` as a big-endian target.\n+- `x86_64-apple-darwin` should work basically as well as Linux. We also test\n+  `aarch64-apple-darwin`. However, we might ship Miri with a nightly even when\n+  some features on these targets regress.\n+- `x86_64-pc-windows-msvc` works, but supports fewer features than the Linux and\n+  Apple targets. For example, file system access and concurrency are not\n+  supported on Windows. We also test `i686-pc-windows-msvc`, with the same\n+  reduced feature set. We might ship Miri with a nightly even when some features\n+  on these targets regress.\n+\n ### Common Problems\n \n When using the above instructions, you may encounter a number of confusing compiler\n@@ -236,7 +258,8 @@ up the sysroot.  If you are using `miri` (the Miri driver) directly, see the\n [miri-flags]: #miri--z-flags-and-environment-variables\n \n Miri adds its own set of `-Z` flags, which are usually set via the `MIRIFLAGS`\n-environment variable:\n+environment variable. Some of these are **unsound**, which means they can lead\n+to Miri failing to detect cases of undefined behavior in a program.\n \n * `-Zmiri-check-number-validity` enables checking of integer and float validity\n   (e.g., they must be initialized and not carry pointer provenance) as part of"}, {"sha": "c19aceb641e3d736d6c67ec52c1565ed4fea872d", "filename": "ci.sh", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/38111b3916987c3b2a779626002830c94882b0a4/ci.sh", "raw_url": "https://github.com/rust-lang/rust/raw/38111b3916987c3b2a779626002830c94882b0a4/ci.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci.sh?ref=38111b3916987c3b2a779626002830c94882b0a4", "patch": "@@ -55,7 +55,6 @@ case $HOST_TARGET in\n     ;;\n   i686-pc-windows-msvc)\n     MIRI_TEST_TARGET=x86_64-unknown-linux-gnu run_tests\n-    MIRI_TEST_TARGET=x86_64-apple-darwin run_tests\n     ;;\n   *)\n     echo \"FATAL: unknown OS\""}]}