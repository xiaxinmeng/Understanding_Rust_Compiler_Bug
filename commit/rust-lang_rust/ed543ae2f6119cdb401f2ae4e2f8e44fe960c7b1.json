{"sha": "ed543ae2f6119cdb401f2ae4e2f8e44fe960c7b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkNTQzYWUyZjYxMTljZGI0MDFmMmFlNGUyZjhlNDRmZTk2MGM3YjE=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-08-13T02:05:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-13T02:05:31Z"}, "message": "Rollup merge of #75189 - kawamuray:bugfix-wasi-append, r=KodrAus\n\nFix wasi::fs::OpenOptions to imply write when append is on\n\nThis PR fixes a bug in `OpenOptions` of `wasi` platform that it currently doesn't imply write mode when only `append` is enabled.\nAs explained in the [doc of OpenOptions#append](https://doc.rust-lang.org/std/fs/struct.OpenOptions.html#method.append), calling `.append(true)` should imply `.write(true)` as well.\n\n## Reproduce\n\nGiven below simple Rust program:\n\n```rust\nuse std::fs::OpenOptions;\nuse std::io::Write;\n\nfn main() {\n    let mut file = OpenOptions::new()\n        .write(true)\n        .create(true)\n        .open(\"foo.txt\")\n        .unwrap();\n    writeln!(file, \"abc\").unwrap();\n}\n```\n\nit can successfully compiled into wasm and execute by `wasmtime` runtime:\n\n```sh\n$ rustc --target wasm32-wasi write.rs\n$ ~/wasmtime/target/debug/wasmtime run --dir=. write.wasm\n$ cat foo.txt\nabc\n```\n\nHowever when I change `.write(true)` to `.append(true)`, it fails to execute by the error \"Capabilities insufficient\":\n\n```sh\n$ ~/wasmtime/target/debug/wasmtime run --dir=. append.wasm\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 76, kind: Other, message: \"Capabilities insufficient\" }', append.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nError: failed to run main module `append.wasm`\n...\n```\n\nThis is because of lacking \"rights\" on the opened file:\n\n```sh\n$ RUST_LOG=trace ~/wasmtime/target/debug/wasmtime run --dir=. append.wasm 2>&1 | grep validate_rights\n TRACE wasi_common::entry                                  >      | validate_rights failed: required rights = HandleRights { base: fd_write (0x40), inheriting: empty (0x0) }; actual rights = HandleRights { base: fd_seek|fd_fdstat_set_flags|fd_sync|fd_tell|fd_advise|fd_filestat_set_times|poll_fd_readwrite (0x88000bc), inheriting: empty (0x0) }\n```", "tree": {"sha": "da361772940f7853b065379d0ad3a746db484cf2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/da361772940f7853b065379d0ad3a746db484cf2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ed543ae2f6119cdb401f2ae4e2f8e44fe960c7b1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfNJ/sCRBK7hj4Ov3rIwAAdHIIABwMkrdFqjjUJMpjLdIP3vHn\nrLus2aJ80sW+yLfFFBsbArZ9rj6pfK9bmlYx4Sme98Fw+Fy8ib7s8mlQRE6kO8K5\nBwcKNcb8nBqplIZZhiOewGYzWvoiv46B4tnGDPfMAUin7Eg3goBORASYEkVBMQDc\n0nwAqCBHxoyhHhn+FwN25RX/2bJ7AFRpsrYAIxKA/WZesyY8DXO7LGSIB0d2aWs+\nBl7MLSpXNiVE1jy/bBx0y4IPW438v/lTumDUgQRZg+j4mBhWdELtovYke6BELzAP\nTS1BAUk79uIbFHUzK/JIbWWMoAHAgI2wuvteV8wfEzPOyG5MogsmdzWBMoMkHwk=\n=CBkm\n-----END PGP SIGNATURE-----\n", "payload": "tree da361772940f7853b065379d0ad3a746db484cf2\nparent 847ba835ce411d47364a93ddf0b4a5c0f27928a9\nparent 165a6e597e6991f18f9684b5aa7667ef4b6e3955\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1597284331 +0900\ncommitter GitHub <noreply@github.com> 1597284331 +0900\n\nRollup merge of #75189 - kawamuray:bugfix-wasi-append, r=KodrAus\n\nFix wasi::fs::OpenOptions to imply write when append is on\n\nThis PR fixes a bug in `OpenOptions` of `wasi` platform that it currently doesn't imply write mode when only `append` is enabled.\nAs explained in the [doc of OpenOptions#append](https://doc.rust-lang.org/std/fs/struct.OpenOptions.html#method.append), calling `.append(true)` should imply `.write(true)` as well.\n\n## Reproduce\n\nGiven below simple Rust program:\n\n```rust\nuse std::fs::OpenOptions;\nuse std::io::Write;\n\nfn main() {\n    let mut file = OpenOptions::new()\n        .write(true)\n        .create(true)\n        .open(\"foo.txt\")\n        .unwrap();\n    writeln!(file, \"abc\").unwrap();\n}\n```\n\nit can successfully compiled into wasm and execute by `wasmtime` runtime:\n\n```sh\n$ rustc --target wasm32-wasi write.rs\n$ ~/wasmtime/target/debug/wasmtime run --dir=. write.wasm\n$ cat foo.txt\nabc\n```\n\nHowever when I change `.write(true)` to `.append(true)`, it fails to execute by the error \"Capabilities insufficient\":\n\n```sh\n$ ~/wasmtime/target/debug/wasmtime run --dir=. append.wasm\nthread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 76, kind: Other, message: \"Capabilities insufficient\" }', append.rs:10:5\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace\nError: failed to run main module `append.wasm`\n...\n```\n\nThis is because of lacking \"rights\" on the opened file:\n\n```sh\n$ RUST_LOG=trace ~/wasmtime/target/debug/wasmtime run --dir=. append.wasm 2>&1 | grep validate_rights\n TRACE wasi_common::entry                                  >      | validate_rights failed: required rights = HandleRights { base: fd_write (0x40), inheriting: empty (0x0) }; actual rights = HandleRights { base: fd_seek|fd_fdstat_set_flags|fd_sync|fd_tell|fd_advise|fd_filestat_set_times|poll_fd_readwrite (0x88000bc), inheriting: empty (0x0) }\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ed543ae2f6119cdb401f2ae4e2f8e44fe960c7b1", "html_url": "https://github.com/rust-lang/rust/commit/ed543ae2f6119cdb401f2ae4e2f8e44fe960c7b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ed543ae2f6119cdb401f2ae4e2f8e44fe960c7b1/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "847ba835ce411d47364a93ddf0b4a5c0f27928a9", "url": "https://api.github.com/repos/rust-lang/rust/commits/847ba835ce411d47364a93ddf0b4a5c0f27928a9", "html_url": "https://github.com/rust-lang/rust/commit/847ba835ce411d47364a93ddf0b4a5c0f27928a9"}, {"sha": "165a6e597e6991f18f9684b5aa7667ef4b6e3955", "url": "https://api.github.com/repos/rust-lang/rust/commits/165a6e597e6991f18f9684b5aa7667ef4b6e3955", "html_url": "https://github.com/rust-lang/rust/commit/165a6e597e6991f18f9684b5aa7667ef4b6e3955"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "8408756f1b3be1cca5bff0c8e8dc031d7163895e", "filename": "library/std/src/sys/wasi/fs.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ed543ae2f6119cdb401f2ae4e2f8e44fe960c7b1/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ed543ae2f6119cdb401f2ae4e2f8e44fe960c7b1/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Ffs.rs?ref=ed543ae2f6119cdb401f2ae4e2f8e44fe960c7b1", "patch": "@@ -46,6 +46,7 @@ pub struct DirEntry {\n pub struct OpenOptions {\n     read: bool,\n     write: bool,\n+    append: bool,\n     dirflags: wasi::Lookupflags,\n     fdflags: wasi::Fdflags,\n     oflags: wasi::Oflags,\n@@ -270,8 +271,9 @@ impl OpenOptions {\n         }\n     }\n \n-    pub fn append(&mut self, set: bool) {\n-        self.fdflag(wasi::FDFLAGS_APPEND, set);\n+    pub fn append(&mut self, append: bool) {\n+        self.append = append;\n+        self.fdflag(wasi::FDFLAGS_APPEND, append);\n     }\n \n     pub fn dsync(&mut self, set: bool) {\n@@ -321,7 +323,7 @@ impl OpenOptions {\n             base |= wasi::RIGHTS_FD_READ;\n             base |= wasi::RIGHTS_FD_READDIR;\n         }\n-        if self.write {\n+        if self.write || self.append {\n             base |= wasi::RIGHTS_FD_WRITE;\n             base |= wasi::RIGHTS_FD_DATASYNC;\n             base |= wasi::RIGHTS_FD_ALLOCATE;"}]}