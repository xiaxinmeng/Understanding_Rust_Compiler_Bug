{"sha": "fcfbfde0b71d2470cb544d3d216eaf61ceb348bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjZmJmZGUwYjcxZDI0NzBjYjU0NGQzZDIxNmVhZjYxY2ViMzQ4YmY=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-09-29T09:20:11Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-10-29T16:09:20Z"}, "message": "Adjust reflection for the possibility of discriminants larger than int.\n\nNot only can discriminants be smaller than int now, but they can be\nlarger than int on 32-bit targets.  This has obvious implications for the\nreflection interface.  Without this change, things fail with LLVM\nassertions when we try to \"extend\" i64 to i32.", "tree": {"sha": "cf2498a05b0bd22e430b441482dbaa335d7c90e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cf2498a05b0bd22e430b441482dbaa335d7c90e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf", "html_url": "https://github.com/rust-lang/rust/commit/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "92109b12029b21e27f9f12a2b4faf4abc0627b64", "url": "https://api.github.com/repos/rust-lang/rust/commits/92109b12029b21e27f9f12a2b4faf4abc0627b64", "html_url": "https://github.com/rust-lang/rust/commit/92109b12029b21e27f9f12a2b4faf4abc0627b64"}], "stats": {"total": 84, "additions": 44, "deletions": 40}, "files": [{"sha": "c002584a7fff93e1bd51e7fd8d9530461eef9420", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=fcfbfde0b71d2470cb544d3d216eaf61ceb348bf", "patch": "@@ -868,6 +868,10 @@ pub fn C_i64(i: i64) -> ValueRef {\n     return C_integral(Type::i64(), i as u64, true);\n }\n \n+pub fn C_u64(i: u64) -> ValueRef {\n+    return C_integral(Type::i64(), i, false);\n+}\n+\n pub fn C_int(cx: &CrateContext, i: int) -> ValueRef {\n     return C_integral(cx.int_type, i as u64, true);\n }"}, {"sha": "7e875243fd0832b2aece2333eb740733ca0ce1e2", "filename": "src/librustc/middle/trans/reflect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Freflect.rs?ref=fcfbfde0b71d2470cb544d3d216eaf61ceb348bf", "patch": "@@ -292,11 +292,11 @@ impl Reflector {\n                                                                sub_path,\n                                                                \"get_disr\");\n \n-                let llfdecl = decl_internal_rust_fn(ccx, [opaqueptrty], ty::mk_int(), sym);\n+                let llfdecl = decl_internal_rust_fn(ccx, [opaqueptrty], ty::mk_u64(), sym);\n                 let fcx = new_fn_ctxt(ccx,\n                                       ~[],\n                                       llfdecl,\n-                                      ty::mk_uint(),\n+                                      ty::mk_u64(),\n                                       None);\n                 let arg = unsafe {\n                     //\n@@ -308,7 +308,7 @@ impl Reflector {\n                 };\n                 let mut bcx = fcx.entry_bcx.unwrap();\n                 let arg = BitCast(bcx, arg, llptrty);\n-                let ret = adt::trans_get_discr(bcx, repr, arg, Some(ccx.int_type));\n+                let ret = adt::trans_get_discr(bcx, repr, arg, Some(Type::i64()));\n                 Store(bcx, ret, fcx.llretptr.unwrap());\n                 match fcx.llreturn {\n                     Some(llreturn) => cleanup_and_Br(bcx, bcx, llreturn),\n@@ -324,7 +324,7 @@ impl Reflector {\n                 for (i, v) in variants.iter().enumerate() {\n                     let name = ccx.sess.str_of(v.name);\n                     let variant_args = ~[this.c_uint(i),\n-                                         C_integral(self.bcx.ccx().int_type, v.disr_val, false),\n+                                         C_u64(v.disr_val),\n                                          this.c_uint(v.args.len()),\n                                          this.c_slice(name)];\n                     do this.bracketed(\"enum_variant\", variant_args) |this| {"}, {"sha": "19fa9abc0da55013e539ee3475b1bd39f60aef80", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=fcfbfde0b71d2470cb544d3d216eaf61ceb348bf", "patch": "@@ -16,7 +16,7 @@ Runtime type reflection\n \n #[allow(missing_doc)];\n \n-use unstable::intrinsics::{Opaque, TyDesc, TyVisitor};\n+use unstable::intrinsics::{Disr, Opaque, TyDesc, TyVisitor};\n use libc::c_void;\n use mem;\n use unstable::raw;\n@@ -396,7 +396,7 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n     }\n \n     fn visit_enter_enum(&mut self, n_variants: uint,\n-                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n                         sz: uint, align: uint)\n                      -> bool {\n         self.align(align);\n@@ -407,7 +407,7 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n     }\n \n     fn visit_enter_enum_variant(&mut self, variant: uint,\n-                                disr_val: int,\n+                                disr_val: Disr,\n                                 n_fields: uint,\n                                 name: &str) -> bool {\n         if ! self.inner.visit_enter_enum_variant(variant, disr_val,\n@@ -426,7 +426,7 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n     }\n \n     fn visit_leave_enum_variant(&mut self, variant: uint,\n-                                disr_val: int,\n+                                disr_val: Disr,\n                                 n_fields: uint,\n                                 name: &str) -> bool {\n         if ! self.inner.visit_leave_enum_variant(variant, disr_val,\n@@ -437,7 +437,7 @@ impl<V:TyVisitor + MovePtr> TyVisitor for MovePtrAdaptor<V> {\n     }\n \n     fn visit_leave_enum(&mut self, n_variants: uint,\n-                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n                         sz: uint, align: uint) -> bool {\n         if ! self.inner.visit_leave_enum(n_variants, get_disr, sz, align) {\n             return false;"}, {"sha": "dd68c57e37e9763f896ca75a10a7827aad31c9c2", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=fcfbfde0b71d2470cb544d3d216eaf61ceb348bf", "patch": "@@ -29,7 +29,7 @@ use reflect::{MovePtr, align};\n use str::StrSlice;\n use to_str::ToStr;\n use vec::OwnedVector;\n-use unstable::intrinsics::{Opaque, TyDesc, TyVisitor, get_tydesc, visit_tydesc};\n+use unstable::intrinsics::{Disr, Opaque, TyDesc, TyVisitor, get_tydesc, visit_tydesc};\n use unstable::raw;\n \n /// Representations\n@@ -92,7 +92,7 @@ num_repr!(f64, \"f64\")\n // New implementation using reflect::MovePtr\n \n enum VariantState {\n-    SearchingFor(int),\n+    SearchingFor(Disr),\n     Matched,\n     AlreadyFound\n }\n@@ -473,7 +473,7 @@ impl<'self> TyVisitor for ReprVisitor<'self> {\n \n     fn visit_enter_enum(&mut self,\n                         _n_variants: uint,\n-                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n                         _sz: uint,\n                         _align: uint) -> bool {\n         let disr = unsafe {\n@@ -484,7 +484,7 @@ impl<'self> TyVisitor for ReprVisitor<'self> {\n     }\n \n     fn visit_enter_enum_variant(&mut self, _variant: uint,\n-                                disr_val: int,\n+                                disr_val: Disr,\n                                 n_fields: uint,\n                                 name: &str) -> bool {\n         let mut write = false;\n@@ -531,7 +531,7 @@ impl<'self> TyVisitor for ReprVisitor<'self> {\n     }\n \n     fn visit_leave_enum_variant(&mut self, _variant: uint,\n-                                _disr_val: int,\n+                                _disr_val: Disr,\n                                 n_fields: uint,\n                                 _name: &str) -> bool {\n         match self.var_stk[self.var_stk.len() - 1] {\n@@ -547,7 +547,7 @@ impl<'self> TyVisitor for ReprVisitor<'self> {\n \n     fn visit_leave_enum(&mut self,\n                         _n_variants: uint,\n-                        _get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        _get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n                         _sz: uint,\n                         _align: uint)\n                         -> bool {"}, {"sha": "20563718a6c1fdd42cb0c647797c411990448c5c", "filename": "src/libstd/unstable/intrinsics.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf/src%2Flibstd%2Funstable%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf/src%2Flibstd%2Funstable%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fintrinsics.rs?ref=fcfbfde0b71d2470cb544d3d216eaf61ceb348bf", "patch": "@@ -75,6 +75,11 @@ pub struct TyDesc {\n #[cfg(not(test))]\n pub enum Opaque { }\n \n+#[cfg(stage0)]\n+pub type Disr = int;\n+#[cfg(not(stage0))]\n+pub type Disr = u64;\n+\n #[lang=\"ty_visitor\"]\n #[cfg(not(test))]\n pub trait TyVisitor {\n@@ -140,19 +145,19 @@ pub trait TyVisitor {\n                        sz: uint, align: uint) -> bool;\n \n     fn visit_enter_enum(&mut self, n_variants: uint,\n-                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n                         sz: uint, align: uint) -> bool;\n     fn visit_enter_enum_variant(&mut self, variant: uint,\n-                                disr_val: int,\n+                                disr_val: Disr,\n                                 n_fields: uint,\n                                 name: &str) -> bool;\n     fn visit_enum_variant_field(&mut self, i: uint, offset: uint, inner: *TyDesc) -> bool;\n     fn visit_leave_enum_variant(&mut self, variant: uint,\n-                                disr_val: int,\n+                                disr_val: Disr,\n                                 n_fields: uint,\n                                 name: &str) -> bool;\n     fn visit_leave_enum(&mut self, n_variants: uint,\n-                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n                         sz: uint, align: uint) -> bool;\n \n     fn visit_enter_fn(&mut self, purity: uint, proto: uint,"}, {"sha": "bc4cb87f06b7a15c6eae185a9abb9bccec7ff788", "filename": "src/test/run-pass/enum-discrim-width-stuff.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs?ref=fcfbfde0b71d2470cb544d3d216eaf61ceb348bf", "patch": "@@ -13,13 +13,8 @@ use std::mem;\n pub fn main() {\n     enum E { V = 0x1717171717171717 }\n     static C: E = V;\n-    let expected: u64 = if mem::size_of::<uint>() < 8 {\n-        0x17171717\n-    } else {\n-        0x1717171717171717\n-    };\n-    assert_eq!(expected, V as u64);\n-    assert_eq!(expected, C as u64);\n+    assert_eq!(V as u64, 0x1717171717171717u64);\n+    assert_eq!(C as u64, 0x1717171717171717u64);\n     assert_eq!(format!(\"{:?}\", V), ~\"V\");\n     assert_eq!(format!(\"{:?}\", C), ~\"V\");\n }"}, {"sha": "de8d9470f102716f0d7957d2f436db20b7b59fdc", "filename": "src/test/run-pass/reflect-visit-data.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-data.rs?ref=fcfbfde0b71d2470cb544d3d216eaf61ceb348bf", "patch": "@@ -15,7 +15,7 @@\n use std::libc::c_void;\n use std::ptr;\n use std::mem;\n-use std::unstable::intrinsics::{TyDesc, get_tydesc, visit_tydesc, TyVisitor, Opaque};\n+use std::unstable::intrinsics::{TyDesc, get_tydesc, visit_tydesc, TyVisitor, Disr, Opaque};\n use std::unstable::raw::Vec;\n \n #[doc = \"High-level interfaces to `std::unstable::intrinsics::visit_ty` reflection system.\"]\n@@ -380,7 +380,7 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n     }\n \n     fn visit_enter_enum(&mut self, n_variants: uint,\n-                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n                         sz: uint, align: uint)\n                      -> bool {\n         self.align(align);\n@@ -389,7 +389,7 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n     }\n \n     fn visit_enter_enum_variant(&mut self, variant: uint,\n-                                disr_val: int,\n+                                disr_val: Disr,\n                                 n_fields: uint,\n                                 name: &str) -> bool {\n         if ! self.inner.visit_enter_enum_variant(variant, disr_val,\n@@ -405,7 +405,7 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n     }\n \n     fn visit_leave_enum_variant(&mut self, variant: uint,\n-                                disr_val: int,\n+                                disr_val: Disr,\n                                 n_fields: uint,\n                                 name: &str) -> bool {\n         if ! self.inner.visit_leave_enum_variant(variant, disr_val,\n@@ -416,7 +416,7 @@ impl<V:TyVisitor + movable_ptr> TyVisitor for ptr_visit_adaptor<V> {\n     }\n \n     fn visit_leave_enum(&mut self, n_variants: uint,\n-                        get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n                         sz: uint, align: uint)\n                      -> bool {\n         if ! self.inner.visit_leave_enum(n_variants, get_disr, sz, align) { return false; }\n@@ -578,24 +578,24 @@ impl TyVisitor for my_visitor {\n                        _sz: uint, _align: uint) -> bool { true }\n \n     fn visit_enter_enum(&mut self, _n_variants: uint,\n-                        _get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        _get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n                         _sz: uint, _align: uint) -> bool {\n         // FIXME (#3732): this needs to rewind between enum variants, or something.\n         true\n     }\n     fn visit_enter_enum_variant(&mut self, _variant: uint,\n-                                _disr_val: int,\n+                                _disr_val: Disr,\n                                 _n_fields: uint,\n                                 _name: &str) -> bool { true }\n     fn visit_enum_variant_field(&mut self, _i: uint, _offset: uint, inner: *TyDesc) -> bool {\n         self.visit_inner(inner)\n     }\n     fn visit_leave_enum_variant(&mut self, _variant: uint,\n-                                _disr_val: int,\n+                                _disr_val: Disr,\n                                 _n_fields: uint,\n                                 _name: &str) -> bool { true }\n     fn visit_leave_enum(&mut self, _n_variants: uint,\n-                        _get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        _get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n                         _sz: uint, _align: uint) -> bool { true }\n \n     fn visit_enter_fn(&mut self, _purity: uint, _proto: uint,"}, {"sha": "e77cb432c3ad0c7567a601a55b38b2df67740832", "filename": "src/test/run-pass/reflect-visit-type.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fcfbfde0b71d2470cb544d3d216eaf61ceb348bf/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freflect-visit-type.rs?ref=fcfbfde0b71d2470cb544d3d216eaf61ceb348bf", "patch": "@@ -10,7 +10,7 @@\n \n #[feature(managed_boxes)];\n \n-use std::unstable::intrinsics::{TyDesc, get_tydesc, visit_tydesc, TyVisitor, Opaque};\n+use std::unstable::intrinsics::{TyDesc, get_tydesc, visit_tydesc, TyVisitor, Disr, Opaque};\n \n struct MyVisitor {\n     types: @mut ~[~str],\n@@ -114,22 +114,22 @@ impl TyVisitor for MyVisitor {\n                        _sz: uint, _align: uint) -> bool { true }\n \n     fn visit_enter_enum(&mut self, _n_variants: uint,\n-                        _get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        _get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n                         _sz: uint, _align: uint) -> bool { true }\n     fn visit_enter_enum_variant(&mut self,\n                                 _variant: uint,\n-                                _disr_val: int,\n+                                _disr_val: Disr,\n                                 _n_fields: uint,\n                                 _name: &str) -> bool { true }\n     fn visit_enum_variant_field(&mut self, _i: uint, _offset: uint, _inner: *TyDesc) -> bool { true }\n     fn visit_leave_enum_variant(&mut self,\n                                 _variant: uint,\n-                                _disr_val: int,\n+                                _disr_val: Disr,\n                                 _n_fields: uint,\n                                 _name: &str) -> bool { true }\n     fn visit_leave_enum(&mut self,\n                         _n_variants: uint,\n-                        _get_disr: extern unsafe fn(ptr: *Opaque) -> int,\n+                        _get_disr: extern unsafe fn(ptr: *Opaque) -> Disr,\n                         _sz: uint, _align: uint) -> bool { true }\n \n     fn visit_enter_fn(&mut self, _purity: uint, _proto: uint,"}]}