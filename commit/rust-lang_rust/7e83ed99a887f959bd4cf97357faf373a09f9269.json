{"sha": "7e83ed99a887f959bd4cf97357faf373a09f9269", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlODNlZDk5YTg4N2Y5NTliZDRjZjk3MzU3ZmFmMzczYTA5ZjkyNjk=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-10T14:04:55Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2020-06-10T14:04:55Z"}, "message": "Respect casing when searching for imports", "tree": {"sha": "31e55b5e2c28b71b5ebc9549da45e84e1c0ec701", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/31e55b5e2c28b71b5ebc9549da45e84e1c0ec701"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e83ed99a887f959bd4cf97357faf373a09f9269", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e83ed99a887f959bd4cf97357faf373a09f9269", "html_url": "https://github.com/rust-lang/rust/commit/7e83ed99a887f959bd4cf97357faf373a09f9269", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e83ed99a887f959bd4cf97357faf373a09f9269/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed2817e599a9c0e812af26587badad6da7a4d949", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed2817e599a9c0e812af26587badad6da7a4d949", "html_url": "https://github.com/rust-lang/rust/commit/ed2817e599a9c0e812af26587badad6da7a4d949"}], "stats": {"total": 87, "additions": 81, "deletions": 6}, "files": [{"sha": "5092bf3366714370e4b6899047c899d842f44ffd", "filename": "crates/ra_assists/src/handlers/auto_import.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7e83ed99a887f959bd4cf97357faf373a09f9269/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e83ed99a887f959bd4cf97357faf373a09f9269/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fauto_import.rs?ref=7e83ed99a887f959bd4cf97357faf373a09f9269", "patch": "@@ -914,6 +914,31 @@ impl fmt::Display for S {}\n fn main() {\n     Cheese;\n }\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn casing() {\n+        // Tests that differently cased names don't interfere and we only suggest the matching one.\n+        check_assist(\n+            auto_import,\n+            r\"\n+                    //- /lib.rs crate:dep\n+\n+                    pub struct FMT;\n+                    pub struct fmt;\n+\n+                    //- /main.rs crate:main deps:dep\n+\n+                    fn main() {\n+                        FMT<|>;\n+                    }\",\n+            r\"use dep::FMT;\n+\n+fn main() {\n+    FMT;\n+}\n \",\n         );\n     }"}, {"sha": "1a9f6cc768b6386e80720907de66eade9d9b9eb1", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e83ed99a887f959bd4cf97357faf373a09f9269/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e83ed99a887f959bd4cf97357faf373a09f9269/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=7e83ed99a887f959bd4cf97357faf373a09f9269", "patch": "@@ -107,7 +107,7 @@ impl Crate {\n         import_map::search_dependencies(\n             db,\n             self.into(),\n-            import_map::Query::new(query).anchor_end().limit(40),\n+            import_map::Query::new(query).anchor_end().case_sensitive().limit(40),\n         )\n         .into_iter()\n         .map(|item| match item {"}, {"sha": "a55d7d83b6b5799531b8020b177c7902b26c296b", "filename": "crates/ra_hir_def/src/import_map.rs", "status": "modified", "additions": 55, "deletions": 5, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7e83ed99a887f959bd4cf97357faf373a09f9269/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e83ed99a887f959bd4cf97357faf373a09f9269/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fimport_map.rs?ref=7e83ed99a887f959bd4cf97357faf373a09f9269", "patch": "@@ -177,13 +177,21 @@ fn cmp((_, lhs): &(&ItemInNs, &ModPath), (_, rhs): &(&ItemInNs, &ModPath)) -> Or\n #[derive(Debug)]\n pub struct Query {\n     query: String,\n+    lowercased: String,\n     anchor_end: bool,\n+    case_sensitive: bool,\n     limit: usize,\n }\n \n impl Query {\n     pub fn new(query: &str) -> Self {\n-        Self { query: query.to_lowercase(), anchor_end: false, limit: usize::max_value() }\n+        Self {\n+            lowercased: query.to_lowercase(),\n+            query: query.to_string(),\n+            anchor_end: false,\n+            case_sensitive: false,\n+            limit: usize::max_value(),\n+        }\n     }\n \n     /// Only returns items whose paths end with the (case-insensitive) query string as their last\n@@ -196,6 +204,11 @@ impl Query {\n     pub fn limit(self, limit: usize) -> Self {\n         Self { limit, ..self }\n     }\n+\n+    /// Respect casing of the query string when matching.\n+    pub fn case_sensitive(self) -> Self {\n+        Self { case_sensitive: true, ..self }\n+    }\n }\n \n /// Searches dependencies of `krate` for an importable path matching `query`.\n@@ -212,7 +225,7 @@ pub fn search_dependencies<'a>(\n     let import_maps: Vec<_> =\n         graph[krate].dependencies.iter().map(|dep| db.import_map(dep.crate_id)).collect();\n \n-    let automaton = fst::automaton::Subsequence::new(&query.query);\n+    let automaton = fst::automaton::Subsequence::new(&query.lowercased);\n \n     let mut op = fst::map::OpBuilder::new();\n     for map in &import_maps {\n@@ -232,17 +245,27 @@ pub fn search_dependencies<'a>(\n             if query.anchor_end {\n                 // Last segment must match query.\n                 let last = path.segments.last().unwrap().to_string();\n-                if last.to_lowercase() != query.query {\n+                if last.to_lowercase() != query.lowercased {\n                     continue;\n                 }\n             }\n \n             // Add the items from this `ModPath` group. Those are all subsequent items in\n             // `importables` whose paths match `path`.\n-            res.extend(importables.iter().copied().take_while(|item| {\n+            let iter = importables.iter().copied().take_while(|item| {\n                 let item_path = &import_map.map[item];\n                 fst_path(item_path) == fst_path(path)\n-            }));\n+            });\n+\n+            if query.case_sensitive {\n+                // FIXME: This does not do a subsequence match.\n+                res.extend(iter.filter(|item| {\n+                    let item_path = &import_map.map[item];\n+                    item_path.to_string().contains(&query.query)\n+                }));\n+            } else {\n+                res.extend(iter);\n+            }\n \n             if res.len() >= query.limit {\n                 res.truncate(query.limit);\n@@ -582,6 +605,33 @@ mod tests {\n         \"###);\n     }\n \n+    #[test]\n+    fn search_casing() {\n+        let ra_fixture = r#\"\n+            //- /main.rs crate:main deps:dep\n+            //- /dep.rs crate:dep\n+\n+            pub struct fmt;\n+            pub struct FMT;\n+        \"#;\n+\n+        let res = search_dependencies_of(ra_fixture, \"main\", Query::new(\"FMT\"));\n+\n+        assert_snapshot!(res, @r###\"\n+        dep::FMT (v)\n+        dep::FMT (t)\n+        dep::fmt (t)\n+        dep::fmt (v)\n+        \"###);\n+\n+        let res = search_dependencies_of(ra_fixture, \"main\", Query::new(\"FMT\").case_sensitive());\n+\n+        assert_snapshot!(res, @r###\"\n+        dep::FMT (v)\n+        dep::FMT (t)\n+        \"###);\n+    }\n+\n     #[test]\n     fn search_limit() {\n         let res = search_dependencies_of("}]}