{"sha": "edd52b197555ed047db0dfb2a881a5f74635be57", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZDUyYjE5NzU1NWVkMDQ3ZGIwZGZiMmE4ODFhNWY3NDYzNWJlNTc=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2017-12-03T22:07:50Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2018-01-13T15:48:00Z"}, "message": "Remove wfcheck for auto traits, remove dead error codes\n\nThe WF checks are now done as an AST validation.", "tree": {"sha": "8a654d346509d762bd674c99fd9952b268f15e0f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a654d346509d762bd674c99fd9952b268f15e0f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edd52b197555ed047db0dfb2a881a5f74635be57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edd52b197555ed047db0dfb2a881a5f74635be57", "html_url": "https://github.com/rust-lang/rust/commit/edd52b197555ed047db0dfb2a881a5f74635be57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edd52b197555ed047db0dfb2a881a5f74635be57/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3", "html_url": "https://github.com/rust-lang/rust/commit/02b5fee7325bc0f1c8adb1dedb4fd617aa9155a3"}], "stats": {"total": 134, "additions": 23, "deletions": 111}, "files": [{"sha": "ba819cbf5388d07236edc862e89ff0759eddfc6f", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=edd52b197555ed047db0dfb2a881a5f74635be57", "patch": "@@ -247,16 +247,16 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n                 if is_auto == IsAuto::Yes {\n                     // Auto traits cannot have generics, super traits nor contain items.\n                     if generics.is_parameterized() {\n-                        self.err_handler().span_err(item.span,\n-                                                    \"auto traits cannot have generics\");\n+                        struct_span_err!(self.session, item.span, E0567,\n+                                        \"Auto traits cannot have generic parameters\").emit();\n                     }\n                     if !bounds.is_empty() {\n-                        self.err_handler().span_err(item.span,\n-                                                    \"auto traits cannot have super traits\");\n+                        struct_span_err!(self.session, item.span, E0568,\n+                                        \"Auto traits cannot have predicates\").emit();\n                     }\n                     if !trait_items.is_empty() {\n-                        self.err_handler().span_err(item.span,\n-                                                    \"auto traits cannot contain items\");\n+                        struct_span_err!(self.session, item.span, E0380,\n+                                \"Auto traits cannot have methods or associated items\").emit();\n                     }\n                 }\n                 self.no_questions_in_bounds(bounds, \"supertraits\", true);"}, {"sha": "2244463518eabf4b2ccec738f0374fc9bf819a5b", "filename": "src/librustc_passes/diagnostics.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Flibrustc_passes%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Flibrustc_passes%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostics.rs?ref=edd52b197555ed047db0dfb2a881a5f74635be57", "patch": "@@ -150,6 +150,13 @@ Trait methods cannot be declared `const` by design. For more information, see\n [RFC 911]: https://github.com/rust-lang/rfcs/pull/911\n \"##,\n \n+E0380: r##\"\n+Auto traits cannot have methods or associated items.\n+For more information see the [opt-in builtin traits RFC][RFC 19].\n+\n+[RFC 19]: https://github.com/rust-lang/rfcs/blob/master/text/0019-opt-in-builtin-traits.md\n+\"##,\n+\n E0449: r##\"\n A visibility qualifier was used when it was unnecessary. Erroneous code\n examples:\n@@ -264,5 +271,7 @@ register_diagnostics! {\n     E0226, // only a single explicit lifetime bound is permitted\n     E0472, // asm! is unsupported on this target\n     E0561, // patterns aren't allowed in function pointer types\n+    E0567, // auto traits can not have type parameters\n+    E0568, // auto traits can not have predicates\n     E0642, // patterns aren't allowed in methods without bodies\n }"}, {"sha": "60d28fb0e087a1b4ab03ab4c3f3c8445da3f958b", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 0, "deletions": 72, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=edd52b197555ed047db0dfb2a881a5f74635be57", "patch": "@@ -275,74 +275,8 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n         });\n     }\n \n-    fn check_auto_trait(&mut self, trait_def_id: DefId, span: Span) {\n-        // We want to ensure:\n-        //\n-        // 1) that there are no items contained within\n-        // the trait definition\n-        //\n-        // 2) that the definition doesn't violate the no-super trait rule\n-        // for auto traits.\n-        //\n-        // 3) that the trait definition does not have any type parameters\n-\n-        let predicates = self.tcx.predicates_of(trait_def_id);\n-\n-        // We must exclude the Self : Trait predicate contained by all\n-        // traits.\n-        let has_predicates =\n-            predicates.predicates.iter().any(|predicate| {\n-                match predicate {\n-                    &ty::Predicate::Trait(ref poly_trait_ref) => {\n-                        let self_ty = poly_trait_ref.0.self_ty();\n-                        !(self_ty.is_self() && poly_trait_ref.def_id() == trait_def_id)\n-                    },\n-                    _ => true,\n-                }\n-            });\n-\n-        let has_ty_params = self.tcx.generics_of(trait_def_id).types.len() > 1;\n-\n-        // We use an if-else here, since the generics will also trigger\n-        // an extraneous error message when we find predicates like\n-        // `T : Sized` for a trait like: `trait Magic<T>`.\n-        //\n-        // We also put the check on the number of items here,\n-        // as it seems confusing to report an error about\n-        // extraneous predicates created by things like\n-        // an associated type inside the trait.\n-        let mut err = None;\n-        if !self.tcx.associated_item_def_ids(trait_def_id).is_empty() {\n-            error_380(self.tcx, span);\n-        } else if has_ty_params {\n-            err = Some(struct_span_err!(self.tcx.sess, span, E0567,\n-                \"traits with auto impls (`e.g. impl \\\n-                    Trait for ..`) can not have type parameters\"));\n-        } else if has_predicates {\n-            err = Some(struct_span_err!(self.tcx.sess, span, E0568,\n-                \"traits with auto impls (`e.g. impl \\\n-                    Trait for ..`) cannot have predicates\"));\n-        }\n-\n-        // Finally if either of the above conditions apply we should add a note\n-        // indicating that this error is the result of a recent soundness fix.\n-        match err {\n-            None => {},\n-            Some(mut e) => {\n-                e.note(\"the new auto trait rules are the result of a \\\n-                          recent soundness fix; see #29859 for more details\");\n-                e.emit();\n-            }\n-        }\n-    }\n-\n     fn check_trait(&mut self, item: &hir::Item) {\n         let trait_def_id = self.tcx.hir.local_def_id(item.id);\n-\n-        if self.tcx.trait_is_auto(trait_def_id) {\n-            self.check_auto_trait(trait_def_id, item.span);\n-        }\n-\n         self.for_item(item).with_fcx(|fcx, this| {\n             let predicates = fcx.tcx.predicates_of(trait_def_id).instantiate_identity(fcx.tcx);\n             let predicates = fcx.normalize_associated_types_in(item.span, &predicates);\n@@ -733,12 +667,6 @@ fn error_192(tcx: TyCtxt, span: Span) {\n                default impls (e.g., `Send` and `Sync`)\")\n }\n \n-fn error_380(tcx: TyCtxt, span: Span) {\n-    span_err!(tcx.sess, span, E0380,\n-              \"traits with default impls (`e.g. impl \\\n-               Trait for ..`) must have no methods or associated items\")\n-}\n-\n fn error_392<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, span: Span, param_name: ast::Name)\n                        -> DiagnosticBuilder<'tcx> {\n     let mut err = struct_span_err!(tcx.sess, span, E0392,"}, {"sha": "4754aaceff45d17a6ce677efa2fa6707b3393bfe", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=edd52b197555ed047db0dfb2a881a5f74635be57", "patch": "@@ -712,9 +712,9 @@ fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let node_id = tcx.hir.as_local_node_id(def_id).unwrap();\n     let item = tcx.hir.expect_item(node_id);\n \n-    let unsafety = match item.node {\n-        hir::ItemTrait(_, unsafety, ..) => unsafety,\n-        hir::ItemTraitAlias(..) => hir::Unsafety::Normal,\n+    let (is_auto, unsafety) = match item.node {\n+        hir::ItemTrait(is_auto, unsafety, ..) => (is_auto == hir::IsAuto::Yes, unsafety),\n+        hir::ItemTraitAlias(..) => (hir::IsAuto::No, hir::Unsafety::Normal),\n         _ => span_bug!(item.span, \"trait_def_of_item invoked on non-trait\"),\n     };\n \n@@ -731,10 +731,6 @@ fn trait_def<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n \n     let def_path_hash = tcx.def_path_hash(def_id);\n-    let is_auto = match item.node {\n-        hir::ItemTrait(hir::IsAuto::Yes, ..) => true,\n-        _ => tcx.hir.trait_is_auto(def_id),\n-    };\n     let def = ty::TraitDef::new(def_id,\n                                 unsafety,\n                                 paren_sugar,"}, {"sha": "11b983fd314da2a6b0493de23249cae22642645d", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=edd52b197555ed047db0dfb2a881a5f74635be57", "patch": "@@ -2531,13 +2531,6 @@ struct Bar<S, T> { x: Foo<S, T> }\n ```\n \"##,\n \n-E0318: r##\"\n-Default impls for a trait must be located in the same crate where the trait was\n-defined. For more information see the [opt-in builtin traits RFC][RFC 19].\n-\n-[RFC 19]: https://github.com/rust-lang/rfcs/blob/master/text/0019-opt-in-builtin-traits.md\n-\"##,\n-\n E0321: r##\"\n A cross-crate opt-out trait was implemented on something which wasn't a struct\n or enum type. Erroneous code example:\n@@ -3170,13 +3163,6 @@ containing the unsized type is the last and only unsized type field in the\n struct.\n \"##,\n \n-E0380: r##\"\n-Default impls are only allowed for traits with no methods or associated items.\n-For more information see the [opt-in builtin traits RFC][RFC 19].\n-\n-[RFC 19]: https://github.com/rust-lang/rfcs/blob/master/text/0019-opt-in-builtin-traits.md\n-\"##,\n-\n E0390: r##\"\n You tried to implement methods for a primitive type. Erroneous code example:\n \n@@ -4729,13 +4715,10 @@ register_diagnostics! {\n //  E0372, // coherence not object safe\n     E0377, // the trait `CoerceUnsized` may only be implemented for a coercion\n            // between structures with the same definition\n-    E0521, // redundant auto implementations of trait\n     E0533, // `{}` does not name a unit variant, unit struct or a constant\n //  E0563, // cannot determine a type for this `impl Trait`: {} // removed in 6383de15\n     E0564, // only named lifetimes are allowed in `impl Trait`,\n            // but `{}` was found in the type `{}`\n-    E0567, // auto traits can not have type parameters\n-    E0568, // auto-traits can not have predicates,\n     E0587, // struct has conflicting packed and align representation hints\n     E0588, // packed struct cannot transitively contain a `[repr(align)]` struct\n     E0592, // duplicate definitions with name `{}`"}, {"sha": "782e352c471b05fa88852f1732ea2b84efeeddbb", "filename": "src/test/compile-fail/auto-trait-validation.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Ftest%2Fcompile-fail%2Fauto-trait-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Ftest%2Fcompile-fail%2Fauto-trait-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-trait-validation.rs?ref=edd52b197555ed047db0dfb2a881a5f74635be57", "patch": "@@ -11,12 +11,9 @@\n #![feature(optin_builtin_traits)]\n \n auto trait Generic<T> {}\n-//~^ ERROR auto traits cannot have generics\n-//~^^ traits with auto impls (`e.g. impl Trait for ..`) can not have type parameters\n+//~^ Auto traits cannot have type parameters [E0567]\n auto trait Bound : Copy {}\n-//~^ ERROR auto traits cannot have super traits\n-//~^^ traits with auto impls (`e.g. impl Trait for ..`) cannot have predicates\n+//~^ Auto traits cannot have predicates [E0568]\n auto trait MyTrait { fn foo() {} }\n-//~^ ERROR auto traits cannot contain items\n-//~^^ traits with default impls (`e.g. impl Trait for ..`) must have no methods or associated items\n+//~^ Auto traits cannot have methods or associated items [E0380]\n fn main() {}"}, {"sha": "751d0a14c57ee12ce6d511bbd88ba903311b1a2d", "filename": "src/test/compile-fail/coherence-default-trait-impl.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs?ref=edd52b197555ed047db0dfb2a881a5f74635be57", "patch": "@@ -14,13 +14,11 @@ auto trait MySafeTrait {}\n \n struct Foo;\n \n-#[allow(auto_impl)]\n unsafe impl MySafeTrait for Foo {}\n //~^ ERROR implementing the trait `MySafeTrait` is not unsafe\n \n unsafe auto trait MyUnsafeTrait {}\n \n-#[allow(auto_impl)]\n impl MyUnsafeTrait for Foo {}\n //~^ ERROR the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n "}, {"sha": "2aa87f8424b9584498dcbd54fe594fe9345d9bc3", "filename": "src/test/compile-fail/issue-23080-2.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-23080-2.rs?ref=edd52b197555ed047db0dfb2a881a5f74635be57", "patch": "@@ -22,4 +22,5 @@ fn call_method<T: Trait>(x: T) {}\n fn main() {\n     // ICE\n     call_method(());\n+    //~^ ERROR\n }"}, {"sha": "59d5dc6c58b47821071dfbdc75a70d981f9b451f", "filename": "src/test/compile-fail/traits-inductive-overflow-supertrait-oibit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edd52b197555ed047db0dfb2a881a5f74635be57/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftraits-inductive-overflow-supertrait-oibit.rs?ref=edd52b197555ed047db0dfb2a881a5f74635be57", "patch": "@@ -22,6 +22,6 @@ fn copy<T: Magic>(x: T) -> (T, T) { (x, x) }\n struct NoClone;\n \n fn main() {\n-    let (a, b) = copy(NoClone);\n+    let (a, b) = copy(NoClone); //~ ERROR\n     println!(\"{:?} {:?}\", a, b);\n }"}]}