{"sha": "6d94167014e1738486601e05bdfb5cdef812d18f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkOTQxNjcwMTRlMTczODQ4NjYwMWUwNWJkZmI1Y2RlZjgxMmQxOGY=", "commit": {"author": {"name": "Cameron Steffen", "email": "CSteffen@trustwave.com", "date": "2017-10-10T04:15:19Z"}, "committer": {"name": "Cameron Steffen", "email": "CSteffen@trustwave.com", "date": "2017-10-10T04:39:45Z"}, "message": "move cstring tests", "tree": {"sha": "1d612a496e465ed97d8528cd1451c968d2c42778", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d612a496e465ed97d8528cd1451c968d2c42778"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d94167014e1738486601e05bdfb5cdef812d18f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d94167014e1738486601e05bdfb5cdef812d18f", "html_url": "https://github.com/rust-lang/rust/commit/6d94167014e1738486601e05bdfb5cdef812d18f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d94167014e1738486601e05bdfb5cdef812d18f/comments", "author": null, "committer": null, "parents": [{"sha": "5eeadcfc436b4b69bdba68ef61e5362b83e68ed2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5eeadcfc436b4b69bdba68ef61e5362b83e68ed2", "html_url": "https://github.com/rust-lang/rust/commit/5eeadcfc436b4b69bdba68ef61e5362b83e68ed2"}], "stats": {"total": 51, "additions": 30, "deletions": 21}, "files": [{"sha": "8b7b0b66bc6a8cad4617bbbe7eea3ef16ada6ac0", "filename": "tests/ui/cstring.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6d94167014e1738486601e05bdfb5cdef812d18f/tests%2Fui%2Fcstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d94167014e1738486601e05bdfb5cdef812d18f/tests%2Fui%2Fcstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.rs?ref=6d94167014e1738486601e05bdfb5cdef812d18f", "patch": "@@ -0,0 +1,8 @@\n+fn main() {}\n+\n+#[allow(result_unwrap_used)]\n+fn temporary_cstring() {\n+    use std::ffi::CString;\n+\n+    CString::new(\"foo\").unwrap().as_ptr();\n+}"}, {"sha": "ddb74ce9cac806b8005c41d083b7693cd15a72d7", "filename": "tests/ui/cstring.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/6d94167014e1738486601e05bdfb5cdef812d18f/tests%2Fui%2Fcstring.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d94167014e1738486601e05bdfb5cdef812d18f/tests%2Fui%2Fcstring.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fcstring.stderr?ref=6d94167014e1738486601e05bdfb5cdef812d18f", "patch": "@@ -0,0 +1,22 @@\n+error: function is never used: `temporary_cstring`\n+ --> $DIR/cstring.rs:4:1\n+  |\n+4 | fn temporary_cstring() {\n+  | ^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: `-D dead-code` implied by `-D warnings`\n+\n+error: you are getting the inner pointer of a temporary `CString`\n+ --> $DIR/cstring.rs:7:5\n+  |\n+7 |     CString::new(\"foo\").unwrap().as_ptr();\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+  |\n+  = note: `-D temporary-cstring-as-ptr` implied by `-D warnings`\n+  = note: that pointer will be invalid outside this expression\n+help: assign the `CString` to a variable to extend its lifetime\n+ --> $DIR/cstring.rs:7:5\n+  |\n+7 |     CString::new(\"foo\").unwrap().as_ptr();\n+  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+"}, {"sha": "a422cffafaba93985970e377588eef91860035c9", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d94167014e1738486601e05bdfb5cdef812d18f/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d94167014e1738486601e05bdfb5cdef812d18f/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=6d94167014e1738486601e05bdfb5cdef812d18f", "patch": "@@ -453,10 +453,3 @@ fn str_extend_chars() {\n     let f = HasChars;\n     s.extend(f.chars());\n }\n-\n-#[allow(result_unwrap_used)]\n-fn temporary_cstring() {\n-    use std::ffi::CString;\n-\n-    CString::new(\"foo\").unwrap().as_ptr();\n-}"}, {"sha": "d80ff30ec716efa8c643bf0ef5eba96da21a45e2", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6d94167014e1738486601e05bdfb5cdef812d18f/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6d94167014e1738486601e05bdfb5cdef812d18f/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=6d94167014e1738486601e05bdfb5cdef812d18f", "patch": "@@ -567,17 +567,3 @@ error: calling `.extend(_.chars())`\n 447 |     s.extend(def.chars());\n     |     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `s.push_str(&def)`\n \n-error: you are getting the inner pointer of a temporary `CString`\n-   --> $DIR/methods.rs:461:5\n-    |\n-461 |     CString::new(\"foo\").unwrap().as_ptr();\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-    |\n-    = note: `-D temporary-cstring-as-ptr` implied by `-D warnings`\n-    = note: that pointer will be invalid outside this expression\n-help: assign the `CString` to a variable to extend its lifetime\n-   --> $DIR/methods.rs:461:5\n-    |\n-461 |     CString::new(\"foo\").unwrap().as_ptr();\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-"}]}