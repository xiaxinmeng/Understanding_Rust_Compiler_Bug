{"sha": "6227e1e3a8e1a47d6ca4dfac0b52a26084bac697", "node_id": "C_kwDOAAsO6NoAKDYyMjdlMWUzYThlMWE0N2Q2Y2E0ZGZhYzBiNTJhMjYwODRiYWM2OTc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-25T11:46:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-25T11:46:55Z"}, "message": "Auto merge of #2422 - RalfJung:integers, r=oli-obk\n\nenable clippy lints against integer casts\n\nCc https://github.com/rust-lang/miri/issues/1236", "tree": {"sha": "18bf253d1b8f156129a94be47e15209e92f4c26a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18bf253d1b8f156129a94be47e15209e92f4c26a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697", "html_url": "https://github.com/rust-lang/rust/commit/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d237be15c83339c0b40691ebadfe049fd8ac796", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d237be15c83339c0b40691ebadfe049fd8ac796", "html_url": "https://github.com/rust-lang/rust/commit/3d237be15c83339c0b40691ebadfe049fd8ac796"}, {"sha": "7f6034862d0a22c7337eb428c67fcdb23b9168ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f6034862d0a22c7337eb428c67fcdb23b9168ae", "html_url": "https://github.com/rust-lang/rust/commit/7f6034862d0a22c7337eb428c67fcdb23b9168ae"}], "stats": {"total": 68, "additions": 46, "deletions": 22}, "files": [{"sha": "99fc086a229cd2c1c0ac2562925dcfb09cc39f8a", "filename": "src/intptrcast.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintptrcast.rs?ref=6227e1e3a8e1a47d6ca4dfac0b52a26084bac697", "patch": "@@ -230,6 +230,7 @@ impl<'mir, 'tcx> GlobalStateInner {\n \n         // Wrapping \"addr - base_addr\"\n         let dl = ecx.data_layout();\n+        #[allow(clippy::cast_possible_wrap)] // we want to wrap here\n         let neg_base_addr = (base_addr as i64).wrapping_neg();\n         Some((\n             alloc_id,"}, {"sha": "caae17b202235e7248f25bc0d59381222a6f0b7d", "filename": "src/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=6227e1e3a8e1a47d6ca4dfac0b52a26084bac697", "patch": "@@ -9,7 +9,7 @@\n #![feature(is_some_with)]\n #![feature(nonzero_ops)]\n #![feature(local_key_cell_methods)]\n-#![warn(rust_2018_idioms)]\n+// Configure clippy and other lints\n #![allow(\n     clippy::collapsible_else_if,\n     clippy::collapsible_if,\n@@ -24,6 +24,13 @@\n     clippy::derive_hash_xor_eq,\n     clippy::too_many_arguments\n )]\n+#![warn(\n+    rust_2018_idioms,\n+    clippy::cast_possible_wrap, // unsigned -> signed\n+    clippy::cast_sign_loss, // signed -> unsigned\n+    clippy::cast_lossless,\n+    clippy::cast_possible_truncation,\n+)]\n \n extern crate rustc_apfloat;\n extern crate rustc_ast;"}, {"sha": "9182b2a72173b912dc84e4fcaada16c7d8f92dd7", "filename": "src/shims/backtrace.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fshims%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fshims%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fbacktrace.rs?ref=6227e1e3a8e1a47d6ca4dfac0b52a26084bac697", "patch": "@@ -171,9 +171,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             );\n         }\n \n-        let lineno: u32 = lo.line as u32;\n+        // `u32` is not enough to fit line/colno, which can be `usize`. It seems unlikely that a\n+        // file would have more than 2^32 lines or columns, but whatever, just default to 0.\n+        let lineno: u32 = u32::try_from(lo.line).unwrap_or(0);\n         // `lo.col` is 0-based - add 1 to make it 1-based for the caller.\n-        let colno: u32 = lo.col.0 as u32 + 1;\n+        let colno: u32 = u32::try_from(lo.col.0 + 1).unwrap_or(0);\n \n         let dest = this.force_allocation(dest)?;\n         if let ty::Adt(adt, _) = dest.layout.ty.kind() {"}, {"sha": "db1ddf6291fd912cf52c8944b0561bfbde1d49b1", "filename": "src/shims/env.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=6227e1e3a8e1a47d6ca4dfac0b52a26084bac697", "patch": "@@ -202,7 +202,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let env_block_ptr = this.read_pointer(env_block_op)?;\n         let result = this.deallocate_ptr(env_block_ptr, None, MiriMemoryKind::Runtime.into());\n         // If the function succeeds, the return value is nonzero.\n-        Ok(result.is_ok() as i32)\n+        Ok(i32::from(result.is_ok()))\n     }\n \n     fn setenv(\n@@ -459,7 +459,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // The reason we need to do this wacky of a conversion is because\n         // `libc::getpid` returns an i32, however, `std::process::id()` return an u32.\n         // So we un-do the conversion that stdlib does and turn it back into an i32.\n-\n+        #[allow(clippy::cast_possible_wrap)]\n         Ok(std::process::id() as i32)\n     }\n "}, {"sha": "208e7ea788f7dbf2c880b6916d09291b1af27f85", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=6227e1e3a8e1a47d6ca4dfac0b52a26084bac697", "patch": "@@ -82,8 +82,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let align = this.min_align(size, kind);\n             let ptr = this.allocate_ptr(Size::from_bytes(size), align, kind.into())?;\n             if zero_init {\n-                // We just allocated this, the access is definitely in-bounds.\n-                this.write_bytes_ptr(ptr.into(), iter::repeat(0u8).take(size as usize)).unwrap();\n+                // We just allocated this, the access is definitely in-bounds and fits into our address space.\n+                this.write_bytes_ptr(\n+                    ptr.into(),\n+                    iter::repeat(0u8).take(usize::try_from(size).unwrap()),\n+                )\n+                .unwrap();\n             }\n             Ok(ptr.into())\n         }\n@@ -526,8 +530,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"memrchr\" => {\n                 let [ptr, val, num] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n-                let val = this.read_scalar(val)?.to_i32()? as u8;\n+                let val = this.read_scalar(val)?.to_i32()?;\n                 let num = this.read_scalar(num)?.to_machine_usize(this)?;\n+                // The docs say val is \"interpreted as unsigned char\".\n+                #[allow(clippy::cast_sign_loss, clippy::cast_possible_truncation)]\n+                let val = val as u8;\n+\n                 if let Some(idx) = this\n                     .read_bytes_ptr(ptr, Size::from_bytes(num))?\n                     .iter()\n@@ -543,8 +551,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"memchr\" => {\n                 let [ptr, val, num] = this.check_shim(abi, Abi::C { unwind: false }, link_name, args)?;\n                 let ptr = this.read_pointer(ptr)?;\n-                let val = this.read_scalar(val)?.to_i32()? as u8;\n+                let val = this.read_scalar(val)?.to_i32()?;\n                 let num = this.read_scalar(num)?.to_machine_usize(this)?;\n+                // The docs say val is \"interpreted as unsigned char\".\n+                #[allow(clippy::cast_sign_loss, clippy::cast_possible_truncation)]\n+                let val = val as u8;\n+\n                 let idx = this\n                     .read_bytes_ptr(ptr, Size::from_bytes(num))?\n                     .iter()"}, {"sha": "4c2d08ffceabce8d6f29b88958a4fa2652ef41ed", "filename": "src/shims/intrinsics/mod.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fshims%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fshims%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics%2Fmod.rs?ref=6227e1e3a8e1a47d6ca4dfac0b52a26084bac697", "patch": "@@ -117,10 +117,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let byte_count = ty_layout.size.checked_mul(count, this).ok_or_else(|| {\n                     err_ub_format!(\"overflow computing total size of `{intrinsic_name}`\")\n                 })?;\n-                this.write_bytes_ptr(\n-                    ptr,\n-                    iter::repeat(val_byte).take(byte_count.bytes() as usize),\n-                )?;\n+                this.write_bytes_ptr(ptr, iter::repeat(val_byte).take(byte_count.bytes_usize()))?;\n             }\n \n             // Floating-point operations"}, {"sha": "633e0322bb83d6146d2c406321b5f2bca55afb69", "filename": "src/shims/tls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fshims%2Ftls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fshims%2Ftls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftls.rs?ref=6227e1e3a8e1a47d6ca4dfac0b52a26084bac697", "patch": "@@ -73,7 +73,7 @@ impl<'tcx> TlsData<'tcx> {\n         self.keys.try_insert(new_key, TlsEntry { data: Default::default(), dtor }).unwrap();\n         trace!(\"New TLS key allocated: {} with dtor {:?}\", new_key, dtor);\n \n-        if max_size.bits() < 128 && new_key >= (1u128 << max_size.bits() as u128) {\n+        if max_size.bits() < 128 && new_key >= (1u128 << max_size.bits()) {\n             throw_unsup_format!(\"we ran out of TLS key space\");\n         }\n         Ok(new_key)"}, {"sha": "dc31237a3199751ed18d67313f5c000a995775e4", "filename": "src/shims/unix/fs.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fshims%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fshims%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Funix%2Ffs.rs?ref=6227e1e3a8e1a47d6ca4dfac0b52a26084bac697", "patch": "@@ -776,15 +776,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // We cap the number of read bytes to the largest value that we are able to fit in both the\n         // host's and target's `isize`. This saves us from having to handle overflows later.\n-        let count = count.min(this.machine_isize_max() as u64).min(isize::MAX as u64);\n+        let count = count\n+            .min(u64::try_from(this.machine_isize_max()).unwrap())\n+            .min(u64::try_from(isize::MAX).unwrap());\n         let communicate = this.machine.communicate();\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.get_mut(&fd) {\n             trace!(\"read: FD mapped to {:?}\", file_descriptor);\n             // We want to read at most `count` bytes. We are sure that `count` is not negative\n             // because it was a target's `usize`. Also we are sure that its smaller than\n-            // `usize::MAX` because it is a host's `isize`.\n-            let mut bytes = vec![0; count as usize];\n+            // `usize::MAX` because it is bounded by the host's `isize`.\n+            let mut bytes = vec![0; usize::try_from(count).unwrap()];\n             // `File::read` never returns a value larger than `count`,\n             // so this cannot fail.\n             let result =\n@@ -827,7 +829,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n         // We cap the number of written bytes to the largest value that we are able to fit in both the\n         // host's and target's `isize`. This saves us from having to handle overflows later.\n-        let count = count.min(this.machine_isize_max() as u64).min(isize::MAX as u64);\n+        let count = count\n+            .min(u64::try_from(this.machine_isize_max()).unwrap())\n+            .min(u64::try_from(isize::MAX).unwrap());\n         let communicate = this.machine.communicate();\n \n         if let Some(file_descriptor) = this.machine.file_handler.handles.get(&fd) {"}, {"sha": "eab5f99c8785170a055b3557515cc5a0375e4e9a", "filename": "src/shims/windows/dlsym.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fshims%2Fwindows%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fshims%2Fwindows%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fdlsym.rs?ref=6227e1e3a8e1a47d6ca4dfac0b52a26084bac697", "patch": "@@ -84,7 +84,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     } else {\n                         io::stderr().write(buf_cont)\n                     };\n-                    res.ok().map(|n| n as u32)\n+                    // We write at most `n` bytes, which is a `u32`, so we cannot have written more than that.\n+                    res.ok().map(|n| u32::try_from(n).unwrap())\n                 } else {\n                     throw_unsup_format!(\n                         \"on Windows, writing to anything except stdout/stderr is not supported\"\n@@ -102,7 +103,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // Return whether this was a success. >= 0 is success.\n                 // For the error code we arbitrarily pick 0xC0000185, STATUS_IO_DEVICE_ERROR.\n                 this.write_scalar(\n-                    Scalar::from_i32(if written.is_some() { 0 } else { 0xC0000185u32 as i32 }),\n+                    Scalar::from_u32(if written.is_some() { 0 } else { 0xC0000185u32 }),\n                     dest,\n                 )?;\n             }"}, {"sha": "29afe52cafd6c003b0c9a494fdc5472975f82c1f", "filename": "src/shims/windows/foreign_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fshims%2Fwindows%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fshims%2Fwindows%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fwindows%2Fforeign_items.rs?ref=6227e1e3a8e1a47d6ca4dfac0b52a26084bac697", "patch": "@@ -116,7 +116,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 // Initialize with `0`.\n                 this.write_bytes_ptr(\n                     system_info.ptr,\n-                    iter::repeat(0u8).take(system_info.layout.size.bytes() as usize),\n+                    iter::repeat(0u8).take(system_info.layout.size.bytes_usize()),\n                 )?;\n                 // Set selected fields.\n                 let word_layout = this.machine.layouts.u16;"}, {"sha": "709b27d191b26b51c3c346cf7737ff6c1042436d", "filename": "src/stacked_borrows/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fstacked_borrows%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6227e1e3a8e1a47d6ca4dfac0b52a26084bac697/src%2Fstacked_borrows%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows%2Fitem.rs?ref=6227e1e3a8e1a47d6ca4dfac0b52a26084bac697", "patch": "@@ -22,7 +22,7 @@ impl Item {\n         assert!(tag.0.get() <= TAG_MASK);\n         let packed_tag = tag.0.get();\n         let packed_perm = perm.to_bits() << PERM_SHIFT;\n-        let packed_protected = (protected as u64) << PROTECTED_SHIFT;\n+        let packed_protected = u64::from(protected) << PROTECTED_SHIFT;\n \n         let new = Self(packed_tag | packed_perm | packed_protected);\n "}]}