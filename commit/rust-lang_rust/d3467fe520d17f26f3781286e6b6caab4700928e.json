{"sha": "d3467fe520d17f26f3781286e6b6caab4700928e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNDY3ZmU1MjBkMTdmMjZmMzc4MTI4NmU2YjZjYWFiNDcwMDkyOGU=", "commit": {"author": {"name": "chansuke", "email": "chansuke@georepublic.de", "date": "2020-08-02T11:57:55Z"}, "committer": {"name": "chansuke", "email": "chansuke@georepublic.de", "date": "2020-10-18T08:59:54Z"}, "message": "`#[deny(unsafe_op_in_unsafe_fn)]` in sys/cloudabi", "tree": {"sha": "0707d124c96bf40b065cec924884bf97660f4277", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0707d124c96bf40b065cec924884bf97660f4277"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3467fe520d17f26f3781286e6b6caab4700928e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3467fe520d17f26f3781286e6b6caab4700928e", "html_url": "https://github.com/rust-lang/rust/commit/d3467fe520d17f26f3781286e6b6caab4700928e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3467fe520d17f26f3781286e6b6caab4700928e/comments", "author": null, "committer": null, "parents": [{"sha": "c38ddb8040edce1b05bc09a0e8439472e9f67623", "url": "https://api.github.com/repos/rust-lang/rust/commits/c38ddb8040edce1b05bc09a0e8439472e9f67623", "html_url": "https://github.com/rust-lang/rust/commit/c38ddb8040edce1b05bc09a0e8439472e9f67623"}], "stats": {"total": 139, "additions": 75, "deletions": 64}, "files": [{"sha": "5c4e3fd85c41caca2352b02a3060b6dea52f2d99", "filename": "library/std/src/sys/cloudabi/abi/cloudabi.rs", "status": "modified", "additions": 70, "deletions": 63, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/d3467fe520d17f26f3781286e6b6caab4700928e/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3467fe520d17f26f3781286e6b6caab4700928e/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fabi%2Fcloudabi.rs?ref=d3467fe520d17f26f3781286e6b6caab4700928e", "patch": "@@ -1910,7 +1910,7 @@ extern \"C\" {\n /// The resolution of the clock.\n #[inline]\n pub unsafe fn clock_res_get(clock_id_: clockid, resolution_: &mut timestamp) -> errno {\n-    cloudabi_sys_clock_res_get(clock_id_, resolution_)\n+    unsafe { cloudabi_sys_clock_res_get(clock_id_, resolution_) }\n }\n \n /// Obtains the time value of a clock.\n@@ -1934,7 +1934,7 @@ pub unsafe fn clock_time_get(\n     precision_: timestamp,\n     time_: *mut timestamp,\n ) -> errno {\n-    cloudabi_sys_clock_time_get(clock_id_, precision_, time_)\n+    unsafe { cloudabi_sys_clock_time_get(clock_id_, precision_, time_) }\n }\n \n /// Wakes up threads waiting on a userspace condition variable.\n@@ -1961,7 +1961,7 @@ pub unsafe fn clock_time_get(\n /// threads, all threads are woken up.\n #[inline]\n pub unsafe fn condvar_signal(condvar_: *mut condvar, scope_: scope, nwaiters_: nthreads) -> errno {\n-    cloudabi_sys_condvar_signal(condvar_, scope_, nwaiters_)\n+    unsafe { cloudabi_sys_condvar_signal(condvar_, scope_, nwaiters_) }\n }\n \n /// Closes a file descriptor.\n@@ -1972,7 +1972,7 @@ pub unsafe fn condvar_signal(condvar_: *mut condvar, scope_: scope, nwaiters_: n\n /// The file descriptor that needs to be closed.\n #[inline]\n pub unsafe fn fd_close(fd_: fd) -> errno {\n-    cloudabi_sys_fd_close(fd_)\n+    unsafe { cloudabi_sys_fd_close(fd_) }\n }\n \n /// Creates a file descriptor.\n@@ -1990,7 +1990,7 @@ pub unsafe fn fd_close(fd_: fd) -> errno {\n /// The file descriptor that has been created.\n #[inline]\n pub unsafe fn fd_create1(type_: filetype, fd_: &mut fd) -> errno {\n-    cloudabi_sys_fd_create1(type_, fd_)\n+    unsafe { cloudabi_sys_fd_create1(type_, fd_) }\n }\n \n /// Creates a pair of file descriptors.\n@@ -2013,7 +2013,8 @@ pub unsafe fn fd_create1(type_: filetype, fd_: &mut fd) -> errno {\n /// The second file descriptor of the pair.\n #[inline]\n pub unsafe fn fd_create2(type_: filetype, fd1_: &mut fd, fd2_: &mut fd) -> errno {\n-    cloudabi_sys_fd_create2(type_, fd1_, fd2_)\n+    // SAFETY: the caller must uphold the safety contract for `cloudabi_sys_fd_create2`.\n+    unsafe { cloudabi_sys_fd_create2(type_, fd1_, fd2_) }\n }\n \n /// Synchronizes the data of a file to disk.\n@@ -2025,7 +2026,9 @@ pub unsafe fn fd_create2(type_: filetype, fd1_: &mut fd, fd2_: &mut fd) -> errno\n /// needs to be synchronized to disk.\n #[inline]\n pub unsafe fn fd_datasync(fd_: fd) -> errno {\n-    cloudabi_sys_fd_datasync(fd_)\n+    // SAFETY: the caller must guarantee that `fd` is valid\n+    // for synchronization.\n+    unsafe { cloudabi_sys_fd_datasync(fd_) }\n }\n \n /// Duplicates a file descriptor.\n@@ -2040,7 +2043,7 @@ pub unsafe fn fd_datasync(fd_: fd) -> errno {\n /// The new file descriptor.\n #[inline]\n pub unsafe fn fd_dup(from_: fd, fd_: &mut fd) -> errno {\n-    cloudabi_sys_fd_dup(from_, fd_)\n+    unsafe { cloudabi_sys_fd_dup(from_, fd_) }\n }\n \n /// Reads from a file descriptor, without using and updating the\n@@ -2064,7 +2067,7 @@ pub unsafe fn fd_dup(from_: fd, fd_: &mut fd) -> errno {\n /// The number of bytes read.\n #[inline]\n pub unsafe fn fd_pread(fd_: fd, iovs_: &[iovec], offset_: filesize, nread_: &mut usize) -> errno {\n-    cloudabi_sys_fd_pread(fd_, iovs_.as_ptr(), iovs_.len(), offset_, nread_)\n+    unsafe { cloudabi_sys_fd_pread(fd_, iovs_.as_ptr(), iovs_.len(), offset_, nread_) }\n }\n \n /// Writes to a file descriptor, without using and updating the\n@@ -2093,7 +2096,7 @@ pub unsafe fn fd_pwrite(\n     offset_: filesize,\n     nwritten_: &mut usize,\n ) -> errno {\n-    cloudabi_sys_fd_pwrite(fd_, iovs_.as_ptr(), iovs_.len(), offset_, nwritten_)\n+    unsafe { cloudabi_sys_fd_pwrite(fd_, iovs_.as_ptr(), iovs_.len(), offset_, nwritten_) }\n }\n \n /// Reads from a file descriptor.\n@@ -2112,7 +2115,7 @@ pub unsafe fn fd_pwrite(\n /// The number of bytes read.\n #[inline]\n pub unsafe fn fd_read(fd_: fd, iovs_: &[iovec], nread_: &mut usize) -> errno {\n-    cloudabi_sys_fd_read(fd_, iovs_.as_ptr(), iovs_.len(), nread_)\n+    unsafe { cloudabi_sys_fd_read(fd_, iovs_.as_ptr(), iovs_.len(), nread_) }\n }\n \n /// Atomically replaces a file descriptor by a copy of another\n@@ -2138,7 +2141,7 @@ pub unsafe fn fd_read(fd_: fd, iovs_: &[iovec], nread_: &mut usize) -> errno {\n /// overwritten.\n #[inline]\n pub unsafe fn fd_replace(from_: fd, to_: fd) -> errno {\n-    cloudabi_sys_fd_replace(from_, to_)\n+    unsafe { cloudabi_sys_fd_replace(from_, to_) }\n }\n \n /// Moves the offset of the file descriptor.\n@@ -2166,7 +2169,7 @@ pub unsafe fn fd_seek(\n     whence_: whence,\n     newoffset_: &mut filesize,\n ) -> errno {\n-    cloudabi_sys_fd_seek(fd_, offset_, whence_, newoffset_)\n+    unsafe { cloudabi_sys_fd_seek(fd_, offset_, whence_, newoffset_) }\n }\n \n /// Gets attributes of a file descriptor.\n@@ -2182,7 +2185,7 @@ pub unsafe fn fd_seek(\n /// attributes are stored.\n #[inline]\n pub unsafe fn fd_stat_get(fd_: fd, buf_: *mut fdstat) -> errno {\n-    cloudabi_sys_fd_stat_get(fd_, buf_)\n+    unsafe { cloudabi_sys_fd_stat_get(fd_, buf_) }\n }\n \n /// Adjusts attributes of a file descriptor.\n@@ -2202,7 +2205,7 @@ pub unsafe fn fd_stat_get(fd_: fd, buf_: *mut fdstat) -> errno {\n /// be adjusted.\n #[inline]\n pub unsafe fn fd_stat_put(fd_: fd, buf_: *const fdstat, flags_: fdsflags) -> errno {\n-    cloudabi_sys_fd_stat_put(fd_, buf_, flags_)\n+    unsafe { cloudabi_sys_fd_stat_put(fd_, buf_, flags_) }\n }\n \n /// Synchronizes the data and metadata of a file to disk.\n@@ -2214,7 +2217,7 @@ pub unsafe fn fd_stat_put(fd_: fd, buf_: *const fdstat, flags_: fdsflags) -> err\n /// and metadata needs to be synchronized to disk.\n #[inline]\n pub unsafe fn fd_sync(fd_: fd) -> errno {\n-    cloudabi_sys_fd_sync(fd_)\n+    unsafe { cloudabi_sys_fd_sync(fd_) }\n }\n \n /// Writes to a file descriptor.\n@@ -2233,7 +2236,7 @@ pub unsafe fn fd_sync(fd_: fd) -> errno {\n /// The number of bytes written.\n #[inline]\n pub unsafe fn fd_write(fd_: fd, iovs_: &[ciovec], nwritten_: &mut usize) -> errno {\n-    cloudabi_sys_fd_write(fd_, iovs_.as_ptr(), iovs_.len(), nwritten_)\n+    unsafe { cloudabi_sys_fd_write(fd_, iovs_.as_ptr(), iovs_.len(), nwritten_) }\n }\n \n /// Provides file advisory information on a file descriptor.\n@@ -2256,7 +2259,7 @@ pub unsafe fn fd_write(fd_: fd, iovs_: &[ciovec], nwritten_: &mut usize) -> errn\n /// The advice.\n #[inline]\n pub unsafe fn file_advise(fd_: fd, offset_: filesize, len_: filesize, advice_: advice) -> errno {\n-    cloudabi_sys_file_advise(fd_, offset_, len_, advice_)\n+    unsafe { cloudabi_sys_file_advise(fd_, offset_, len_, advice_) }\n }\n \n /// Forces the allocation of space in a file.\n@@ -2275,7 +2278,7 @@ pub unsafe fn file_advise(fd_: fd, offset_: filesize, len_: filesize, advice_: a\n /// The length of the area that is allocated.\n #[inline]\n pub unsafe fn file_allocate(fd_: fd, offset_: filesize, len_: filesize) -> errno {\n-    cloudabi_sys_file_allocate(fd_, offset_, len_)\n+    unsafe { cloudabi_sys_file_allocate(fd_, offset_, len_) }\n }\n \n /// Creates a file of a specified type.\n@@ -2296,7 +2299,7 @@ pub unsafe fn file_allocate(fd_: fd, offset_: filesize, len_: filesize) -> errno\n ///     Creates a directory.\n #[inline]\n pub unsafe fn file_create(fd_: fd, path_: &[u8], type_: filetype) -> errno {\n-    cloudabi_sys_file_create(fd_, path_.as_ptr(), path_.len(), type_)\n+    unsafe { cloudabi_sys_file_create(fd_, path_.as_ptr(), path_.len(), type_)}\n }\n \n /// Creates a hard link.\n@@ -2320,7 +2323,7 @@ pub unsafe fn file_create(fd_: fd, path_: &[u8], type_: filetype) -> errno {\n /// should be created.\n #[inline]\n pub unsafe fn file_link(fd1_: lookup, path1_: &[u8], fd2_: fd, path2_: &[u8]) -> errno {\n-    cloudabi_sys_file_link(fd1_, path1_.as_ptr(), path1_.len(), fd2_, path2_.as_ptr(), path2_.len())\n+    unsafe { cloudabi_sys_file_link(fd1_, path1_.as_ptr(), path1_.len(), fd2_, path2_.as_ptr(), path2_.len()) }\n }\n \n /// Opens a file.\n@@ -2362,7 +2365,7 @@ pub unsafe fn file_open(\n     fds_: *const fdstat,\n     fd_: &mut fd,\n ) -> errno {\n-    cloudabi_sys_file_open(dirfd_, path_.as_ptr(), path_.len(), oflags_, fds_, fd_)\n+    unsafe { cloudabi_sys_file_open(dirfd_, path_.as_ptr(), path_.len(), oflags_, fds_, fd_) }\n }\n \n /// Reads directory entries from a directory.\n@@ -2402,7 +2405,7 @@ pub unsafe fn file_readdir(\n     cookie_: dircookie,\n     bufused_: &mut usize,\n ) -> errno {\n-    cloudabi_sys_file_readdir(fd_, buf_.as_mut_ptr() as *mut (), buf_.len(), cookie_, bufused_)\n+    unsafe { cloudabi_sys_file_readdir(fd_, buf_.as_mut_ptr() as *mut (), buf_.len(), cookie_, bufused_) }\n }\n \n /// Reads the contents of a symbolic link.\n@@ -2425,14 +2428,16 @@ pub unsafe fn file_readdir(\n /// The number of bytes placed in the buffer.\n #[inline]\n pub unsafe fn file_readlink(fd_: fd, path_: &[u8], buf_: &mut [u8], bufused_: &mut usize) -> errno {\n-    cloudabi_sys_file_readlink(\n-        fd_,\n-        path_.as_ptr(),\n-        path_.len(),\n-        buf_.as_mut_ptr(),\n-        buf_.len(),\n-        bufused_,\n-    )\n+    unsafe {\n+        cloudabi_sys_file_readlink(\n+            fd_,\n+            path_.as_ptr(),\n+            path_.len(),\n+            buf_.as_mut_ptr(),\n+            buf_.len(),\n+            bufused_,\n+        )\n+    }\n }\n \n /// Renames a file.\n@@ -2456,14 +2461,16 @@ pub unsafe fn file_readlink(fd_: fd, path_: &[u8], buf_: &mut [u8], bufused_: &m\n /// be renamed.\n #[inline]\n pub unsafe fn file_rename(fd1_: fd, path1_: &[u8], fd2_: fd, path2_: &[u8]) -> errno {\n-    cloudabi_sys_file_rename(\n-        fd1_,\n-        path1_.as_ptr(),\n-        path1_.len(),\n-        fd2_,\n-        path2_.as_ptr(),\n-        path2_.len(),\n-    )\n+    unsafe {\n+        cloudabi_sys_file_rename(\n+            fd1_,\n+            path1_.as_ptr(),\n+            path1_.len(),\n+            fd2_,\n+            path2_.as_ptr(),\n+            path2_.len(),\n+        )\n+    }\n }\n \n /// Gets attributes of a file by file descriptor.\n@@ -2479,7 +2486,7 @@ pub unsafe fn file_rename(fd1_: fd, path1_: &[u8], fd2_: fd, path2_: &[u8]) -> e\n /// stored.\n #[inline]\n pub unsafe fn file_stat_fget(fd_: fd, buf_: *mut filestat) -> errno {\n-    cloudabi_sys_file_stat_fget(fd_, buf_)\n+    unsafe { cloudabi_sys_file_stat_fget(fd_, buf_) }\n }\n \n /// Adjusts attributes of a file by file descriptor.\n@@ -2499,7 +2506,7 @@ pub unsafe fn file_stat_fget(fd_: fd, buf_: *mut filestat) -> errno {\n /// be adjusted.\n #[inline]\n pub unsafe fn file_stat_fput(fd_: fd, buf_: *const filestat, flags_: fsflags) -> errno {\n-    cloudabi_sys_file_stat_fput(fd_, buf_, flags_)\n+    unsafe { cloudabi_sys_file_stat_fput(fd_, buf_, flags_) }\n }\n \n /// Gets attributes of a file by path.\n@@ -2520,7 +2527,7 @@ pub unsafe fn file_stat_fput(fd_: fd, buf_: *const filestat, flags_: fsflags) ->\n /// stored.\n #[inline]\n pub unsafe fn file_stat_get(fd_: lookup, path_: &[u8], buf_: *mut filestat) -> errno {\n-    cloudabi_sys_file_stat_get(fd_, path_.as_ptr(), path_.len(), buf_)\n+    unsafe { cloudabi_sys_file_stat_get(fd_, path_.as_ptr(), path_.len(), buf_) }\n }\n \n /// Adjusts attributes of a file by path.\n@@ -2550,7 +2557,7 @@ pub unsafe fn file_stat_put(\n     buf_: *const filestat,\n     flags_: fsflags,\n ) -> errno {\n-    cloudabi_sys_file_stat_put(fd_, path_.as_ptr(), path_.len(), buf_, flags_)\n+    unsafe { cloudabi_sys_file_stat_put(fd_, path_.as_ptr(), path_.len(), buf_, flags_) }\n }\n \n /// Creates a symbolic link.\n@@ -2569,7 +2576,7 @@ pub unsafe fn file_stat_put(\n /// link should be created.\n #[inline]\n pub unsafe fn file_symlink(path1_: &[u8], fd_: fd, path2_: &[u8]) -> errno {\n-    cloudabi_sys_file_symlink(path1_.as_ptr(), path1_.len(), fd_, path2_.as_ptr(), path2_.len())\n+    unsafe { cloudabi_sys_file_symlink(path1_.as_ptr(), path1_.len(), fd_, path2_.as_ptr(), path2_.len()) }\n }\n \n /// Unlinks a file, or removes a directory.\n@@ -2591,7 +2598,7 @@ pub unsafe fn file_symlink(path1_: &[u8], fd_: fd, path2_: &[u8]) -> errno {\n ///     Otherwise, unlink a file.\n #[inline]\n pub unsafe fn file_unlink(fd_: fd, path_: &[u8], flags_: ulflags) -> errno {\n-    cloudabi_sys_file_unlink(fd_, path_.as_ptr(), path_.len(), flags_)\n+    unsafe { cloudabi_sys_file_unlink(fd_, path_.as_ptr(), path_.len(), flags_) }\n }\n \n /// Unlocks a write-locked userspace lock.\n@@ -2618,7 +2625,7 @@ pub unsafe fn file_unlink(fd_: fd, path_: &[u8], flags_: ulflags) -> errno {\n /// shared memory.\n #[inline]\n pub unsafe fn lock_unlock(lock_: *mut lock, scope_: scope) -> errno {\n-    cloudabi_sys_lock_unlock(lock_, scope_)\n+    unsafe { cloudabi_sys_lock_unlock(lock_, scope_) }\n }\n \n /// Provides memory advisory information on a region of memory.\n@@ -2633,7 +2640,7 @@ pub unsafe fn lock_unlock(lock_: *mut lock, scope_: scope) -> errno {\n /// The advice.\n #[inline]\n pub unsafe fn mem_advise(mapping_: &mut [u8], advice_: advice) -> errno {\n-    cloudabi_sys_mem_advise(mapping_.as_mut_ptr() as *mut (), mapping_.len(), advice_)\n+    unsafe { cloudabi_sys_mem_advise(mapping_.as_mut_ptr() as *mut (), mapping_.len(), advice_) }\n }\n \n /// Creates a memory mapping, making the contents of a file\n@@ -2682,7 +2689,7 @@ pub unsafe fn mem_map(\n     off_: filesize,\n     mem_: &mut *mut (),\n ) -> errno {\n-    cloudabi_sys_mem_map(addr_, len_, prot_, flags_, fd_, off_, mem_)\n+    unsafe { cloudabi_sys_mem_map(addr_, len_, prot_, flags_, fd_, off_, mem_) }\n }\n \n /// Changes the protection of a memory mapping.\n@@ -2696,7 +2703,7 @@ pub unsafe fn mem_map(\n /// New protection options.\n #[inline]\n pub unsafe fn mem_protect(mapping_: &mut [u8], prot_: mprot) -> errno {\n-    cloudabi_sys_mem_protect(mapping_.as_mut_ptr() as *mut (), mapping_.len(), prot_)\n+    unsafe { cloudabi_sys_mem_protect(mapping_.as_mut_ptr() as *mut (), mapping_.len(), prot_) }\n }\n \n /// Synchronizes a region of memory with its physical storage.\n@@ -2710,7 +2717,7 @@ pub unsafe fn mem_protect(mapping_: &mut [u8], prot_: mprot) -> errno {\n /// The method of synchronization.\n #[inline]\n pub unsafe fn mem_sync(mapping_: &mut [u8], flags_: msflags) -> errno {\n-    cloudabi_sys_mem_sync(mapping_.as_mut_ptr() as *mut (), mapping_.len(), flags_)\n+    unsafe { cloudabi_sys_mem_sync(mapping_.as_mut_ptr() as *mut (), mapping_.len(), flags_) }\n }\n \n /// Unmaps a region of memory.\n@@ -2721,7 +2728,7 @@ pub unsafe fn mem_sync(mapping_: &mut [u8], flags_: msflags) -> errno {\n /// The pages that needs to be unmapped.\n #[inline]\n pub unsafe fn mem_unmap(mapping_: &mut [u8]) -> errno {\n-    cloudabi_sys_mem_unmap(mapping_.as_mut_ptr() as *mut (), mapping_.len())\n+    unsafe { cloudabi_sys_mem_unmap(mapping_.as_mut_ptr() as *mut (), mapping_.len()) }\n }\n \n /// Concurrently polls for the occurrence of a set of events.\n@@ -2746,7 +2753,7 @@ pub unsafe fn poll(\n     nsubscriptions_: usize,\n     nevents_: *mut usize,\n ) -> errno {\n-    cloudabi_sys_poll(in_, out_, nsubscriptions_, nevents_)\n+    unsafe { cloudabi_sys_poll(in_, out_, nsubscriptions_, nevents_) }\n }\n \n /// Replaces the process by a new executable.\n@@ -2784,7 +2791,7 @@ pub unsafe fn poll(\n /// execution.\n #[inline]\n pub unsafe fn proc_exec(fd_: fd, data_: &[u8], fds_: &[fd]) -> errno {\n-    cloudabi_sys_proc_exec(fd_, data_.as_ptr() as *const (), data_.len(), fds_.as_ptr(), fds_.len())\n+    unsafe { cloudabi_sys_proc_exec(fd_, data_.as_ptr() as *const (), data_.len(), fds_.as_ptr(), fds_.len()) }\n }\n \n /// Terminates the process normally.\n@@ -2797,7 +2804,7 @@ pub unsafe fn proc_exec(fd_: fd, data_: &[u8], fds_: &[fd]) -> errno {\n /// through [`event.union.proc_terminate.exitcode`](struct.event_proc_terminate.html#structfield.exitcode).\n #[inline]\n pub unsafe fn proc_exit(rval_: exitcode) -> ! {\n-    cloudabi_sys_proc_exit(rval_)\n+    unsafe { cloudabi_sys_proc_exit(rval_) }\n }\n \n /// Forks the process of the calling thread.\n@@ -2822,7 +2829,7 @@ pub unsafe fn proc_exit(rval_: exitcode) -> ! {\n /// initial thread of the child process.\n #[inline]\n pub unsafe fn proc_fork(fd_: &mut fd, tid_: &mut tid) -> errno {\n-    cloudabi_sys_proc_fork(fd_, tid_)\n+    unsafe { cloudabi_sys_proc_fork(fd_, tid_) }\n }\n \n /// Sends a signal to the process of the calling thread.\n@@ -2837,7 +2844,7 @@ pub unsafe fn proc_fork(fd_: &mut fd, tid_: &mut tid) -> errno {\n /// [`event.union.proc_terminate.signal`](struct.event_proc_terminate.html#structfield.signal).\n #[inline]\n pub unsafe fn proc_raise(sig_: signal) -> errno {\n-    cloudabi_sys_proc_raise(sig_)\n+    unsafe { cloudabi_sys_proc_raise(sig_) }\n }\n \n /// Obtains random data from the kernel random number generator.\n@@ -2853,7 +2860,7 @@ pub unsafe fn proc_raise(sig_: signal) -> errno {\n /// data.\n #[inline]\n pub unsafe fn random_get(buf_: &mut [u8]) -> errno {\n-    cloudabi_sys_random_get(buf_.as_mut_ptr() as *mut (), buf_.len())\n+    unsafe { cloudabi_sys_random_get(buf_.as_mut_ptr() as *mut (), buf_.len()) }\n }\n \n /// Receives a message on a socket.\n@@ -2871,7 +2878,7 @@ pub unsafe fn random_get(buf_: &mut [u8]) -> errno {\n /// Output parameters.\n #[inline]\n pub unsafe fn sock_recv(sock_: fd, in_: *const recv_in, out_: *mut recv_out) -> errno {\n-    cloudabi_sys_sock_recv(sock_, in_, out_)\n+    unsafe { cloudabi_sys_sock_recv(sock_, in_, out_) }\n }\n \n /// Sends a message on a socket.\n@@ -2888,7 +2895,7 @@ pub unsafe fn sock_recv(sock_: fd, in_: *const recv_in, out_: *mut recv_out) ->\n /// Output parameters.\n #[inline]\n pub unsafe fn sock_send(sock_: fd, in_: *const send_in, out_: *mut send_out) -> errno {\n-    cloudabi_sys_sock_send(sock_, in_, out_)\n+    unsafe { cloudabi_sys_sock_send(sock_, in_, out_) }\n }\n \n /// Shuts down socket send and receive channels.\n@@ -2903,7 +2910,7 @@ pub unsafe fn sock_send(sock_: fd, in_: *const send_in, out_: *mut send_out) ->\n /// down.\n #[inline]\n pub unsafe fn sock_shutdown(sock_: fd, how_: sdflags) -> errno {\n-    cloudabi_sys_sock_shutdown(sock_, how_)\n+    unsafe { cloudabi_sys_sock_shutdown(sock_, how_) }\n }\n \n /// Creates a new thread within the current process.\n@@ -2917,7 +2924,7 @@ pub unsafe fn sock_shutdown(sock_: fd, how_: sdflags) -> errno {\n /// The thread ID of the new thread.\n #[inline]\n pub unsafe fn thread_create(attr_: *mut threadattr, tid_: &mut tid) -> errno {\n-    cloudabi_sys_thread_create(attr_, tid_)\n+    unsafe { cloudabi_sys_thread_create(attr_, tid_) }\n }\n \n /// Terminates the calling thread.\n@@ -2937,11 +2944,11 @@ pub unsafe fn thread_create(attr_: *mut threadattr, tid_: &mut tid) -> errno {\n /// shared memory.\n #[inline]\n pub unsafe fn thread_exit(lock_: *mut lock, scope_: scope) -> ! {\n-    cloudabi_sys_thread_exit(lock_, scope_)\n+    unsafe { cloudabi_sys_thread_exit(lock_, scope_) }\n }\n \n /// Temporarily yields execution of the calling thread.\n #[inline]\n pub unsafe fn thread_yield() -> errno {\n-    cloudabi_sys_thread_yield()\n+    unsafe { cloudabi_sys_thread_yield() }\n }"}, {"sha": "13f1bc8826e61b92810f957b50483207a4735901", "filename": "library/std/src/sys/cloudabi/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d3467fe520d17f26f3781286e6b6caab4700928e/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3467fe520d17f26f3781286e6b6caab4700928e/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmod.rs?ref=d3467fe520d17f26f3781286e6b6caab4700928e", "patch": "@@ -1,3 +1,5 @@\n+#![deny(unsafe_op_in_unsafe_fn)]\n+\n use crate::io::ErrorKind;\n use crate::mem;\n "}, {"sha": "9dafcbc1fba0bb9b5e21964c06e2f94f2a8b8ff6", "filename": "library/std/src/sys/cloudabi/mutex.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d3467fe520d17f26f3781286e6b6caab4700928e/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3467fe520d17f26f3781286e6b6caab4700928e/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcloudabi%2Fmutex.rs?ref=d3467fe520d17f26f3781286e6b6caab4700928e", "patch": "@@ -103,7 +103,9 @@ impl ReentrantMutex {\n             };\n             let mut event = MaybeUninit::<abi::event>::uninit();\n             let mut nevents = MaybeUninit::<usize>::uninit();\n-            let ret = abi::poll(&subscription, event.as_mut_ptr(), 1, nevents.as_mut_ptr());\n+            // SAFE: The caller must to ensure that `event` and `nevents` are initialized.\n+            let ret =\n+                unsafe { abi::poll(&subscription, event.as_mut_ptr(), 1, nevents.as_mut_ptr()) };\n             assert_eq!(ret, abi::errno::SUCCESS, \"Failed to acquire mutex\");\n             let event = event.assume_init();\n             assert_eq!(event.error, abi::errno::SUCCESS, \"Failed to acquire mutex\");"}]}