{"sha": "b07b36bbf30c9b7c9120e34b518d47244e981019", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwN2IzNmJiZjMwYzliN2M5MTIwZTM0YjUxOGQ0NzI0NGU5ODEwMTk=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-27T04:17:29Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-03-27T05:45:22Z"}, "message": "test: Fix tests", "tree": {"sha": "ed575b02692136d3b729f063424207465d5b828e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed575b02692136d3b729f063424207465d5b828e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b07b36bbf30c9b7c9120e34b518d47244e981019", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b07b36bbf30c9b7c9120e34b518d47244e981019", "html_url": "https://github.com/rust-lang/rust/commit/b07b36bbf30c9b7c9120e34b518d47244e981019", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b07b36bbf30c9b7c9120e34b518d47244e981019/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f41a510631ca8e41f16c8a0097a179d067ce4f7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/f41a510631ca8e41f16c8a0097a179d067ce4f7d", "html_url": "https://github.com/rust-lang/rust/commit/f41a510631ca8e41f16c8a0097a179d067ce4f7d"}], "stats": {"total": 50, "additions": 26, "deletions": 24}, "files": [{"sha": "d11153990d71f2f00192d8a67e45d67eb573da5b", "filename": "doc/rust.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b07b36bbf30c9b7c9120e34b518d47244e981019/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/b07b36bbf30c9b7c9120e34b518d47244e981019/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=b07b36bbf30c9b7c9120e34b518d47244e981019", "patch": "@@ -830,12 +830,12 @@ An example of re-exporting:\n ~~~~\n # fn main() { }\n mod quux {\n+    pub use quux::foo::*;\n+\n     pub mod foo {\n         pub fn bar() { }\n         pub fn baz() { }\n     }\n-\n-    pub use quux::foo::*;\n }\n ~~~~\n \n@@ -2008,8 +2008,8 @@ then the expression completes.\n Some examples of call expressions:\n \n ~~~~\n-# fn add(x: int, y: int) -> int { 0 }\n # use core::from_str::FromStr::from_str;\n+# fn add(x: int, y: int) -> int { 0 }\n \n let x: int = add(1, 2);\n let pi = from_str::<f32>(\"3.14\");"}, {"sha": "6932cf7e47ffd6a022e29617ac08359204b88c3b", "filename": "doc/tutorial.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b07b36bbf30c9b7c9120e34b518d47244e981019/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/b07b36bbf30c9b7c9120e34b518d47244e981019/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=b07b36bbf30c9b7c9120e34b518d47244e981019", "patch": "@@ -2054,9 +2054,9 @@ name and a double colon.  The compiler uses type inference to decide which\n implementation to use.\n \n ~~~~\n-trait Shape { fn new(area: float) -> Self; }\n # use core::float::consts::pi;\n # use core::float::sqrt;\n+trait Shape { fn new(area: float) -> Self; }\n struct Circle { radius: float }\n struct Square { length: float }\n \n@@ -2211,11 +2211,11 @@ trait Circle : Shape { fn radius(&self) -> float; }\n Now, we can implement `Circle` on a type only if we also implement `Shape`.\n \n ~~~~\n+# use core::float::consts::pi;\n+# use core::float::sqrt;\n # trait Shape { fn area(&self) -> float; }\n # trait Circle : Shape { fn radius(&self) -> float; }\n # struct Point { x: float, y: float }\n-# use core::float::consts::pi;\n-# use core::float::sqrt;\n # fn square(x: float) -> float { x * x }\n struct CircleStruct { center: Point, radius: float }\n impl Circle for CircleStruct {\n@@ -2247,10 +2247,10 @@ fn radius_times_area<T: Circle>(c: T) -> float {\n Likewise, supertrait methods may also be called on trait objects.\n \n ~~~ {.xfail-test}\n-# trait Shape { fn area(&self) -> float; }\n-# trait Circle : Shape { fn radius(&self) -> float; }\n # use core::float::consts::pi;\n # use core::float::sqrt;\n+# trait Shape { fn area(&self) -> float; }\n+# trait Circle : Shape { fn radius(&self) -> float; }\n # struct Point { x: float, y: float }\n # struct CircleStruct { center: Point, radius: float }\n # impl Circle for CircleStruct { fn radius(&self) -> float { sqrt(self.area() / pi) } }"}, {"sha": "e085f2312dc508f8be73062e4f1a55efd48a87c7", "filename": "src/test/auxiliary/pub_use_mods_xcrate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07b36bbf30c9b7c9120e34b518d47244e981019/src%2Ftest%2Fauxiliary%2Fpub_use_mods_xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07b36bbf30c9b7c9120e34b518d47244e981019/src%2Ftest%2Fauxiliary%2Fpub_use_mods_xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fpub_use_mods_xcrate.rs?ref=b07b36bbf30c9b7c9120e34b518d47244e981019", "patch": "@@ -9,13 +9,13 @@\n // except according to those terms.\n \n pub mod a {\n+    pub use a::b::c;\n+\n     pub mod b {\n         pub mod c {\n             fn f(){}\n             fn g(){}\n         }\n     }\n-\n-    pub use a::b::c;\n }\n "}, {"sha": "8d0675d0884e5c5c8fc06e1a04f75d263e1142d9", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b07b36bbf30c9b7c9120e34b518d47244e981019/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07b36bbf30c9b7c9120e34b518d47244e981019/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=b07b36bbf30c9b7c9120e34b518d47244e981019", "patch": "@@ -12,7 +12,7 @@ extern mod std;\n use std::arena;\n use methods = std::arena::Arena;\n \n-enum tree {\n+enum tree<'self> {\n     nil,\n     node(&'self tree<'self>, &'self tree<'self>, int),\n }\n@@ -26,9 +26,10 @@ fn item_check(t: &tree) -> int {\n     }\n }\n \n-fn bottom_up_tree(arena: &'r arena::Arena,\n-                  item: int,\n-                  depth: int) -> &'r tree<'r> {\n+fn bottom_up_tree<'r>(arena: &'r arena::Arena,\n+                      item: int,\n+                      depth: int)\n+                   -> &'r tree<'r> {\n     if depth > 0 {\n         return arena.alloc(\n             || node(bottom_up_tree(arena, 2 * item - 1, depth - 1),"}, {"sha": "7d97932d9af6bde40f84f83604113133a2372dff", "filename": "src/test/compile-fail/issue-4366.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b07b36bbf30c9b7c9120e34b518d47244e981019/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07b36bbf30c9b7c9120e34b518d47244e981019/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs?ref=b07b36bbf30c9b7c9120e34b518d47244e981019", "patch": "@@ -13,6 +13,8 @@\n // ensures that 'use foo:*' doesn't import non-public 'use' statements in the\n // module 'foo'\n \n+use m1::*;\n+\n mod foo {\n     pub fn foo() {}\n }\n@@ -31,7 +33,6 @@ mod a {\n mod m1 {\n     fn foo() {}\n }\n-use m1::*;\n \n fn main() {\n     foo(); //~ ERROR: unresolved name: `foo`"}, {"sha": "f189deef32e5de08a468429288efb264ec4d0bd4", "filename": "src/test/compile-fail/regions-in-enums.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07b36bbf30c9b7c9120e34b518d47244e981019/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07b36bbf30c9b7c9120e34b518d47244e981019/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-enums.rs?ref=b07b36bbf30c9b7c9120e34b518d47244e981019", "patch": "@@ -10,15 +10,15 @@\n \n enum yes0<'lt> {\n     // This will eventually be legal (and in fact the only way):\n-    X3(&'lt uint) //~ ERROR Illegal lifetime 'lt: this lifetime must be declared\n+    X3(&'lt uint) //~ ERROR Illegal lifetime 'lt: only 'self is allowed\n }\n \n enum yes1<'self> {\n     X4(&'self uint)\n }\n \n enum yes2 {\n-    X5(&'foo uint) //~ ERROR Illegal lifetime 'foo: this lifetime must be declared\n+    X5(&'foo uint) //~ ERROR Illegal lifetime 'foo: only 'self is allowed\n }\n \n fn main() {}"}, {"sha": "a30a6772bfd21b24441d21722163d6e7608e6137", "filename": "src/test/compile-fail/regions-in-type-items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b07b36bbf30c9b7c9120e34b518d47244e981019/src%2Ftest%2Fcompile-fail%2Fregions-in-type-items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07b36bbf30c9b7c9120e34b518d47244e981019/src%2Ftest%2Fcompile-fail%2Fregions-in-type-items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-in-type-items.rs?ref=b07b36bbf30c9b7c9120e34b518d47244e981019", "patch": "@@ -17,7 +17,7 @@ struct item_ty_yes1<'self> {\n }\n \n struct item_ty_yes2 {\n-    x: &'a uint //~ ERROR this lifetime must be declared\n+    x: &'a uint //~ ERROR only 'self is allowed\n }\n \n fn main() {}"}, {"sha": "84a4083a628600ab3877806be962753ca2264b77", "filename": "src/test/run-pass/issue-2904.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07b36bbf30c9b7c9120e34b518d47244e981019/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07b36bbf30c9b7c9120e34b518d47244e981019/src%2Ftest%2Frun-pass%2Fissue-2904.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2904.rs?ref=b07b36bbf30c9b7c9120e34b518d47244e981019", "patch": "@@ -12,10 +12,10 @@\n \n /// Map representation\n \n-use core::io::ReaderUtil;\n-\n extern mod std;\n \n+use core::io::ReaderUtil;\n+\n enum square {\n     bot,\n     wall,"}, {"sha": "b800ffefeb6948fd5c6e3bd0f2f5abb43987b6be", "filename": "src/test/run-pass/trait-inheritance-num.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07b36bbf30c9b7c9120e34b518d47244e981019/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07b36bbf30c9b7c9120e34b518d47244e981019/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num.rs?ref=b07b36bbf30c9b7c9120e34b518d47244e981019", "patch": "@@ -10,10 +10,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+extern mod std;\n+\n use core::cmp::{Eq, Ord};\n use core::num::NumCast::from;\n-\n-extern mod std;\n use std::cmp::FuzzyEq;\n \n pub trait NumExt: NumCast + Eq + Ord {}"}, {"sha": "66d7ee96bb250d716a7453da537cd9917e456093", "filename": "src/test/run-pass/trait-inheritance-num2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b07b36bbf30c9b7c9120e34b518d47244e981019/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b07b36bbf30c9b7c9120e34b518d47244e981019/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-num2.rs?ref=b07b36bbf30c9b7c9120e34b518d47244e981019", "patch": "@@ -12,10 +12,10 @@\n \n // A more complex example of numeric extensions\n \n+extern mod std;\n+\n use core::cmp::{Eq, Ord};\n use core::num::NumCast::from;\n-\n-extern mod std;\n use std::cmp::FuzzyEq;\n \n pub trait TypeExt {}"}]}