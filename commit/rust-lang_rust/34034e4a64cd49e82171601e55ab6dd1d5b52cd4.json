{"sha": "34034e4a64cd49e82171601e55ab6dd1d5b52cd4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MDM0ZTRhNjRjZDQ5ZTgyMTcxNjAxZTU1YWI2ZGQxZDViNTJjZDQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-25T11:45:00Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-25T11:45:00Z"}, "message": "Merge #6353\n\n6353: Get rid of FAKE_PLACEHOLDER r=flodiebold a=flodiebold\n\nThe lifetime placeholder can be replaced by the static lifetime, and for array\r\nsizes we should just be using a concrete const.\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>", "tree": {"sha": "7b99a3e6e3fd6a93d656b42a11b5d2645e6ed6ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b99a3e6e3fd6a93d656b42a11b5d2645e6ed6ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34034e4a64cd49e82171601e55ab6dd1d5b52cd4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJflWU8CRBK7hj4Ov3rIwAAdHIIAIOuzAnYdmhMBCAW02EJwd+P\n977bSnS33K2MZyoo1y9bAvISvCpcc0YUqW4iwqnCp0CWNmnb0c0EG+vnz3aSkus/\nK+mYbQgqB5Zytp6uTmM7KyY3TD6iHCFbBIpHbbgZgv/l9dUUFajtdMw+fi0gH0G8\nsNP0Q8TCoMuOXArHOwz/o5csryRH5dxyoS2vzndbxMVgVvp8KJ2h2W8udM9RSggU\nc+pRGbeK46BQDKcehx360ljHaDcTBK5ISkUP6ysenkPOZZT2hmj9sJxGJh+cvmoU\nU/U/JQEfKrqWDG+SI3B5NleCCoJMbShwuMOtupQEuyZeOXg0cbb+UMykNS4LO7w=\n=vTf9\n-----END PGP SIGNATURE-----\n", "payload": "tree 7b99a3e6e3fd6a93d656b42a11b5d2645e6ed6ad\nparent bf84e4958ee31c59e5b78f60059d69a73ef659bb\nparent 6b5f82bceae70691fdd36f3dd5b5076874648c97\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1603626300 +0000\ncommitter GitHub <noreply@github.com> 1603626300 +0000\n\nMerge #6353\n\n6353: Get rid of FAKE_PLACEHOLDER r=flodiebold a=flodiebold\n\nThe lifetime placeholder can be replaced by the static lifetime, and for array\r\nsizes we should just be using a concrete const.\n\nCo-authored-by: Florian Diebold <florian.diebold@freiheit.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34034e4a64cd49e82171601e55ab6dd1d5b52cd4", "html_url": "https://github.com/rust-lang/rust/commit/34034e4a64cd49e82171601e55ab6dd1d5b52cd4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34034e4a64cd49e82171601e55ab6dd1d5b52cd4/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf84e4958ee31c59e5b78f60059d69a73ef659bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf84e4958ee31c59e5b78f60059d69a73ef659bb", "html_url": "https://github.com/rust-lang/rust/commit/bf84e4958ee31c59e5b78f60059d69a73ef659bb"}, {"sha": "6b5f82bceae70691fdd36f3dd5b5076874648c97", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b5f82bceae70691fdd36f3dd5b5076874648c97", "html_url": "https://github.com/rust-lang/rust/commit/6b5f82bceae70691fdd36f3dd5b5076874648c97"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "dd7affcec811cceb77f631aca891d7e34efff66b", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/34034e4a64cd49e82171601e55ab6dd1d5b52cd4/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34034e4a64cd49e82171601e55ab6dd1d5b52cd4/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=34034e4a64cd49e82171601e55ab6dd1d5b52cd4", "patch": "@@ -4,8 +4,8 @@\n //! conversions.\n \n use chalk_ir::{\n-    cast::Cast, fold::shift::Shift, interner::HasInterner, PlaceholderIndex, Scalar, TypeName,\n-    UniverseIndex,\n+    cast::Cast, fold::shift::Shift, interner::HasInterner, LifetimeData, PlaceholderIndex, Scalar,\n+    TypeName, UniverseIndex,\n };\n use chalk_solve::rust_ir;\n \n@@ -76,7 +76,7 @@ impl ToChalk for Ty {\n                 );\n                 let bounded_ty = chalk_ir::DynTy {\n                     bounds: make_binders(where_clauses, 1),\n-                    lifetime: FAKE_PLACEHOLDER.to_lifetime(&Interner),\n+                    lifetime: LifetimeData::Static.intern(&Interner),\n                 };\n                 chalk_ir::TyData::Dyn(bounded_ty).intern(&Interner)\n             }\n@@ -161,9 +161,6 @@ impl ToChalk for Ty {\n     }\n }\n \n-const FAKE_PLACEHOLDER: PlaceholderIndex =\n-    PlaceholderIndex { ui: UniverseIndex::ROOT, idx: usize::MAX };\n-\n /// We currently don't model lifetimes, but Chalk does. So, we have to insert a\n /// fake lifetime here, because Chalks built-in logic may expect it to be there.\n fn ref_to_chalk(\n@@ -172,7 +169,7 @@ fn ref_to_chalk(\n     subst: Substs,\n ) -> chalk_ir::Ty<Interner> {\n     let arg = subst[0].clone().to_chalk(db);\n-    let lifetime = FAKE_PLACEHOLDER.to_lifetime(&Interner);\n+    let lifetime = LifetimeData::Static.intern(&Interner);\n     chalk_ir::ApplicationTy {\n         name: TypeName::Ref(mutability.to_chalk(db)),\n         substitution: chalk_ir::Substitution::from_iter(\n@@ -205,7 +202,11 @@ fn array_to_chalk(db: &dyn HirDatabase, subst: Substs) -> chalk_ir::Ty<Interner>\n         substitution: chalk_ir::Substitution::empty(&Interner),\n     }\n     .intern(&Interner);\n-    let const_ = FAKE_PLACEHOLDER.to_const(&Interner, usize_ty);\n+    let const_ = chalk_ir::ConstData {\n+        ty: usize_ty,\n+        value: chalk_ir::ConstValue::Concrete(chalk_ir::ConcreteConst { interned: () }),\n+    }\n+    .intern(&Interner);\n     chalk_ir::ApplicationTy {\n         name: TypeName::Array,\n         substitution: chalk_ir::Substitution::from_iter("}]}