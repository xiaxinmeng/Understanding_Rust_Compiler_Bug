{"sha": "c61f06fde9757e6f1208399be7473f5a50d6e10b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MWYwNmZkZTk3NTdlNmYxMjA4Mzk5YmU3NDczZjVhNTBkNmUxMGI=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-09-14T21:13:47Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-09-14T21:13:47Z"}, "message": "Fix vector indexing notation, remove reference to 'slices'.", "tree": {"sha": "a947c7ecaeb12f62e4e344abe7a86dde54a2a901", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a947c7ecaeb12f62e4e344abe7a86dde54a2a901"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c61f06fde9757e6f1208399be7473f5a50d6e10b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c61f06fde9757e6f1208399be7473f5a50d6e10b", "html_url": "https://github.com/rust-lang/rust/commit/c61f06fde9757e6f1208399be7473f5a50d6e10b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c61f06fde9757e6f1208399be7473f5a50d6e10b/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c782c10dfb4017f0bb0cccdb7b9c897642c50e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c782c10dfb4017f0bb0cccdb7b9c897642c50e7", "html_url": "https://github.com/rust-lang/rust/commit/7c782c10dfb4017f0bb0cccdb7b9c897642c50e7"}], "stats": {"total": 26, "additions": 4, "deletions": 22}, "files": [{"sha": "8ed378e53bb740eb1df73a63f39d05bf395f85c1", "filename": "doc/rust.texi", "status": "modified", "additions": 4, "deletions": 22, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c61f06fde9757e6f1208399be7473f5a50d6e10b/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/c61f06fde9757e6f1208399be7473f5a50d6e10b/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=c61f06fde9757e6f1208399be7473f5a50d6e10b", "patch": "@@ -2399,15 +2399,11 @@ The vector type-constructor represents a homogeneous array of values of a\n given type. A vector has a fixed size. The kind of a vector type depends on\n the kind of its member type, as with other simple structural types.\n \n-Vectors can be sliced. A slice expression builds a new vector by copying a\n-contiguous range -- given by a pair of indices representing a half-open\n-interval -- out of the sliced vector.\n-\n An example of a vector type and its use:\n @example\n let v: [int] = [7, 5, 3];\n-let i: int = v.(2);\n-let v2: [int] = v.(0,1); // Form a slice.\n+let i: int = v[2];\n+assert (i == 3);\n @end example\n \n Vectors always @emph{allocate} a storage region sufficient to store the first\n@@ -3368,26 +3364,12 @@ A @code{cont} expression is only permitted in the body of a loop.\n A @dfn{for loop} is controlled by a vector or string. The for loop\n bounds-checks the underlying sequence @emph{once} when initiating the loop,\n then repeatedly copies each value of the underlying sequence into the element\n-variable, executing the loop body once per copy. To perform a for loop on a\n-sub-range of a vector or string, form a temporary slice over the sub-range and\n-run the loop over the slice.\n+variable, executing the loop body once per copy.\n \n-Example of 4 for loops, all identical:\n+Example a for loop:\n @example\n let v: [foo] = [a, b, c];\n \n-for (foo e in v.(0, vec::len(v))) @{\n-    bar(e);\n-@}\n-\n-for (foo e in v.(0,)) @{\n-    bar(e);\n-@}\n-\n-for (foo e in v.(,)) @{\n-    bar(e);\n-@}\n-\n for (foo e in v) @{\n     bar(e);\n @}"}]}