{"sha": "9284829b3bd5aec5f624e5edb08a21b0e71f783e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyODQ4MjliM2JkNWFlYzVmNjI0ZTVlZGIwOGEyMWIwZTcxZjc4M2U=", "commit": {"author": {"name": "Tim Chevalier", "email": "catamorphism@gmail.com", "date": "2012-07-08T06:11:39Z"}, "committer": {"name": "Tim Chevalier", "email": "catamorphism@gmail.com", "date": "2012-07-08T06:11:39Z"}, "message": "Merge pull request #2838 from gwillen/tutorial-class\n\ntutorial: add classes", "tree": {"sha": "4843cd58fd00630a1a09b91aac930c7c0911f764", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4843cd58fd00630a1a09b91aac930c7c0911f764"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9284829b3bd5aec5f624e5edb08a21b0e71f783e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9284829b3bd5aec5f624e5edb08a21b0e71f783e", "html_url": "https://github.com/rust-lang/rust/commit/9284829b3bd5aec5f624e5edb08a21b0e71f783e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9284829b3bd5aec5f624e5edb08a21b0e71f783e/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02ef651f95b2d2dc1e71c77fe5364adc8bdaa4c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/02ef651f95b2d2dc1e71c77fe5364adc8bdaa4c8", "html_url": "https://github.com/rust-lang/rust/commit/02ef651f95b2d2dc1e71c77fe5364adc8bdaa4c8"}, {"sha": "417fa4ba7fac610299b7baf67b3ad5b08e40ef8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/417fa4ba7fac610299b7baf67b3ad5b08e40ef8b", "html_url": "https://github.com/rust-lang/rust/commit/417fa4ba7fac610299b7baf67b3ad5b08e40ef8b"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "3e80d56084713e1be4fef7cc87e0f63a22118c7a", "filename": "doc/tutorial.md", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/9284829b3bd5aec5f624e5edb08a21b0e71f783e/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/9284829b3bd5aec5f624e5edb08a21b0e71f783e/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=9284829b3bd5aec5f624e5edb08a21b0e71f783e", "patch": "@@ -1792,6 +1792,85 @@ fn contains(v: ~[int], elt: int) -> bool {\n \n `for` syntax only works with stack closures.\n \n+# Classes\n+\n+Rust lets users define new types with fields and methods, called 'classes', in\n+the style of object-oriented languages.\n+\n+(Warning: Rust's classes are in the process of changing rapidly. Some more\n+information about some of the potential changes is [here][classchanges].)\n+\n+[classchanges]: http://pcwalton.github.com/blog/2012/06/03/maximally-minimal-classes-for-rust/\n+\n+An example of a class:\n+\n+~~~~\n+class example {\n+  let mut x: int;\n+  let y: int;\n+\n+  priv {\n+    let mut private_member: int;\n+    fn private_method() {}\n+  }\n+\n+  new(x: int) {\n+    // Constructor\n+    self.x = x;\n+    self.y = 7;\n+    self.a();\n+  }\n+\n+  fn a() {\n+    io::println(\"a\");\n+  }\n+\n+  drop {\n+    // Destructor\n+    self.x = 0;\n+  }\n+}\n+\n+fn main() {\n+  let x: example = example(1);\n+  let y: @example = @example(2);\n+  x.a();\n+  x.x = 5;\n+}\n+~~~~\n+\n+Fields and methods are declared just like functions and local variables, using\n+'fn' and 'let'. As usual, 'let mut' can be used to create mutable fields. At\n+minimum, Rust classes must have at least one field.\n+\n+Rust classes must also have a constructor, and can optionally have a destructor\n+as well. The constructor and destructor are declared as shown in the example:\n+like methods named 'new' and 'drop', but without 'fn', and without arguments\n+for drop.\n+\n+In the constructor, the compiler will enforce that all fields are initialized\n+before doing anything which might allow them to be accessed. This includes\n+returning from the constructor, calling any method on 'self', calling any\n+function with 'self' as an argument, or taking a reference to 'self'. Mutation\n+of immutable fields is possible only in the constructor, and only before doing\n+any of these things; afterwards it is an error.\n+\n+Private fields and methods are declared as shown above, using a `priv { ... }`\n+block within the class. They are accessible only from within the same instance\n+of the same class. (For example, even from within class A, you cannot call\n+private methods, or access private fields, on other instances of class A; only\n+on `self`.) This accessibility restriction may change in the future.\n+\n+As mentioned below, in the section on copying types, classes with destructors\n+are considered 'resource' types and are not copyable.\n+\n+Declaring a class also declares its constructor as a function of the same name.\n+You can construct an instance of the class, as in the example, by calling that\n+function. The function and the type, though they have the same name, are\n+otherwise independent. As with other Rust types, you can use `@` or `~` to\n+construct a heap-allocated instance of a class, either shared or unique; just\n+call e.g. `@example(...)` as shown above.\n+\n # Argument passing\n \n Rust datatypes are not trivial to copy (the way, for example,"}]}