{"sha": "c0af0b0213529437ed60a9df6faa91383eaf7faa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwYWYwYjAyMTM1Mjk0MzdlZDYwYTlkZjZmYWE5MTM4M2VhZjdmYWE=", "commit": {"author": {"name": "Collins Abitekaniza", "email": "abtcolns@gmail.com", "date": "2018-07-03T18:59:32Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-09-12T19:31:47Z"}, "message": "clear_if_dirty in Builder::cargo with passed mode", "tree": {"sha": "b5cee0dbfce0d93d407371f548c12f25cc093cc7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5cee0dbfce0d93d407371f548c12f25cc093cc7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c0af0b0213529437ed60a9df6faa91383eaf7faa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c0af0b0213529437ed60a9df6faa91383eaf7faa", "html_url": "https://github.com/rust-lang/rust/commit/c0af0b0213529437ed60a9df6faa91383eaf7faa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c0af0b0213529437ed60a9df6faa91383eaf7faa/comments", "author": {"login": "collin5", "id": 11579108, "node_id": "MDQ6VXNlcjExNTc5MTA4", "avatar_url": "https://avatars.githubusercontent.com/u/11579108?v=4", "gravatar_id": "", "url": "https://api.github.com/users/collin5", "html_url": "https://github.com/collin5", "followers_url": "https://api.github.com/users/collin5/followers", "following_url": "https://api.github.com/users/collin5/following{/other_user}", "gists_url": "https://api.github.com/users/collin5/gists{/gist_id}", "starred_url": "https://api.github.com/users/collin5/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/collin5/subscriptions", "organizations_url": "https://api.github.com/users/collin5/orgs", "repos_url": "https://api.github.com/users/collin5/repos", "events_url": "https://api.github.com/users/collin5/events{/privacy}", "received_events_url": "https://api.github.com/users/collin5/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6810f5286b6b91daab06fc3dccb27d8c46f14349", "url": "https://api.github.com/repos/rust-lang/rust/commits/6810f5286b6b91daab06fc3dccb27d8c46f14349", "html_url": "https://github.com/rust-lang/rust/commit/6810f5286b6b91daab06fc3dccb27d8c46f14349"}], "stats": {"total": 116, "additions": 64, "deletions": 52}, "files": [{"sha": "8afe162c17c00bb6b20b6145c0276d714de9feb0", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c0af0b0213529437ed60a9df6faa91383eaf7faa/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0af0b0213529437ed60a9df6faa91383eaf7faa/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=c0af0b0213529437ed60a9df6faa91383eaf7faa", "patch": "@@ -708,6 +708,68 @@ impl<'a> Builder<'a> {\n     ) -> Command {\n         let mut cargo = Command::new(&self.initial_cargo);\n         let out_dir = self.stage_out(compiler, mode);\n+\n+        let mut my_out = match cmd {\n+            \"build\" => self.cargo_out(compiler, mode, target),\n+\n+            // This is the intended out directory for crate documentation.\n+            \"doc\" =>  self.crate_doc_out(target),\n+\n+            _ => self.stage_out(compiler, mode),\n+        };\n+\n+        // This is for the original compiler, but if we're forced to use stage 1, then\n+        // std/test/rustc stamps won't exist in stage 2, so we need to get those from stage 1, since\n+        // we copy the libs forward.\n+        let compiler = if self.force_use_stage1(compiler, target) {\n+            self.compiler(1, compiler.host)\n+        } else {\n+            compiler\n+        };\n+\n+        let libstd_stamp = match cmd {\n+            \"check\" => check::libstd_stamp(self, compiler, target),\n+            _ => compile::libstd_stamp(self, compiler, target),\n+        };\n+\n+        let libtest_stamp = match cmd {\n+            \"check\" => check::libtest_stamp(self, compiler, target),\n+            _ => compile::libstd_stamp(self, compiler, target),\n+        };\n+\n+        let librustc_stamp = match cmd {\n+            \"check\" => check::librustc_stamp(self, compiler, target),\n+            _ => compile::librustc_stamp(self, compiler, target),\n+        };\n+\n+        if cmd == \"doc\" {\n+            if mode == Mode::Rustc || mode == Mode::ToolRustc {\n+                // This is the intended out directory for compiler documentation.\n+                my_out = self.compiler_doc_out(target);\n+            }\n+            let rustdoc = self.rustdoc(compiler.host);\n+            self.clear_if_dirty(&my_out, &rustdoc);\n+        } else {\n+            match mode {\n+                Mode::Std => {\n+                    self.clear_if_dirty(&my_out, &self.rustc(compiler));\n+                },\n+                Mode::Rustc => {\n+                    self.clear_if_dirty(&my_out, &libstd_stamp);\n+                    self.clear_if_dirty(&my_out, &libtest_stamp);\n+                },\n+                Mode::Test => {\n+                    self.clear_if_dirty(&my_out, &libstd_stamp);\n+                },\n+                Mode::ToolRustc => {\n+                    self.clear_if_dirty(&my_out, &libstd_stamp);\n+                    self.clear_if_dirty(&my_out, &libtest_stamp);\n+                    self.clear_if_dirty(&my_out, &librustc_stamp);\n+                }\n+                _ => { }\n+            }\n+        }\n+\n         cargo\n             .env(\"CARGO_TARGET_DIR\", out_dir)\n             .arg(cmd);"}, {"sha": "551538083930c0e5f833383f453918c528cadfb4", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0af0b0213529437ed60a9df6faa91383eaf7faa/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0af0b0213529437ed60a9df6faa91383eaf7faa/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=c0af0b0213529437ed60a9df6faa91383eaf7faa", "patch": "@@ -40,9 +40,6 @@ impl Step for Std {\n         let target = self.target;\n         let compiler = builder.compiler(0, builder.config.build);\n \n-        let out_dir = builder.stage_out(compiler, Mode::Std);\n-        builder.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n-\n         let mut cargo = builder.cargo(compiler, Mode::Std, target, \"check\");\n         std_cargo(builder, &compiler, target, &mut cargo);\n \n@@ -88,10 +85,6 @@ impl Step for Rustc {\n         let compiler = builder.compiler(0, builder.config.build);\n         let target = self.target;\n \n-        let stage_out = builder.stage_out(compiler, Mode::Rustc);\n-        builder.clear_if_dirty(&stage_out, &libstd_stamp(builder, compiler, target));\n-        builder.clear_if_dirty(&stage_out, &libtest_stamp(builder, compiler, target));\n-\n         let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"check\");\n         rustc_cargo(builder, &mut cargo);\n \n@@ -180,9 +173,6 @@ impl Step for Test {\n         let compiler = builder.compiler(0, builder.config.build);\n         let target = self.target;\n \n-        let out_dir = builder.stage_out(compiler, Mode::Test);\n-        builder.clear_if_dirty(&out_dir, &libstd_stamp(builder, compiler, target));\n-\n         let mut cargo = builder.cargo(compiler, Mode::Test, target, \"check\");\n         test_cargo(builder, &compiler, target, &mut cargo);\n "}, {"sha": "c59247e1fd610da97f39c5ec177b9d299e04d26e", "filename": "src/bootstrap/compile.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c0af0b0213529437ed60a9df6faa91383eaf7faa/src%2Fbootstrap%2Fcompile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0af0b0213529437ed60a9df6faa91383eaf7faa/src%2Fbootstrap%2Fcompile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcompile.rs?ref=c0af0b0213529437ed60a9df6faa91383eaf7faa", "patch": "@@ -107,8 +107,6 @@ impl Step for Std {\n             copy_musl_third_party_objects(builder, target, &libdir);\n         }\n \n-        let out_dir = builder.cargo_out(compiler, Mode::Std, target);\n-        builder.clear_if_dirty(&out_dir, &builder.rustc(compiler));\n         let mut cargo = builder.cargo(compiler, Mode::Std, target, \"build\");\n         std_cargo(builder, &compiler, target, &mut cargo);\n \n@@ -387,8 +385,6 @@ impl Step for Test {\n             return;\n         }\n \n-        let out_dir = builder.cargo_out(compiler, Mode::Test, target);\n-        builder.clear_if_dirty(&out_dir, &libstd_stamp(builder, compiler, target));\n         let mut cargo = builder.cargo(compiler, Mode::Test, target, \"build\");\n         test_cargo(builder, &compiler, target, &mut cargo);\n \n@@ -519,9 +515,6 @@ impl Step for Rustc {\n             compiler: builder.compiler(self.compiler.stage, builder.config.build),\n             target: builder.config.build,\n         });\n-        let cargo_out = builder.cargo_out(compiler, Mode::Rustc, target);\n-        builder.clear_if_dirty(&cargo_out, &libstd_stamp(builder, compiler, target));\n-        builder.clear_if_dirty(&cargo_out, &libtest_stamp(builder, compiler, target));\n \n         let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"build\");\n         rustc_cargo(builder, &mut cargo);"}, {"sha": "17ccb04a7146d861a8eaaaccbad16e71a42bf07a", "filename": "src/bootstrap/doc.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c0af0b0213529437ed60a9df6faa91383eaf7faa/src%2Fbootstrap%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0af0b0213529437ed60a9df6faa91383eaf7faa/src%2Fbootstrap%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdoc.rs?ref=c0af0b0213529437ed60a9df6faa91383eaf7faa", "patch": "@@ -455,7 +455,6 @@ impl Step for Std {\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n         let compiler = builder.compiler(stage, builder.config.build);\n-        let rustdoc = builder.rustdoc(compiler.host);\n         let compiler = if builder.force_use_stage1(compiler, target) {\n             builder.compiler(1, compiler.host)\n         } else {\n@@ -480,7 +479,6 @@ impl Step for Std {\n         // This way rustdoc generates output directly into the output, and rustdoc\n         // will also directly handle merging.\n         let my_out = builder.crate_doc_out(target);\n-        builder.clear_if_dirty(&my_out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &my_out, &out_dir));\n \n         let mut cargo = builder.cargo(compiler, Mode::Std, target, \"doc\");\n@@ -535,7 +533,6 @@ impl Step for Test {\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n         let compiler = builder.compiler(stage, builder.config.build);\n-        let rustdoc = builder.rustdoc(compiler.host);\n         let compiler = if builder.force_use_stage1(compiler, target) {\n             builder.compiler(1, compiler.host)\n         } else {\n@@ -551,7 +548,6 @@ impl Step for Test {\n \n         // See docs in std above for why we symlink\n         let my_out = builder.crate_doc_out(target);\n-        builder.clear_if_dirty(&my_out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &my_out, &out_dir));\n \n         let mut cargo = builder.cargo(compiler, Mode::Test, target, \"doc\");\n@@ -603,7 +599,6 @@ impl Step for WhitelistedRustc {\n         let out = builder.doc_out(target);\n         t!(fs::create_dir_all(&out));\n         let compiler = builder.compiler(stage, builder.config.build);\n-        let rustdoc = builder.rustdoc(compiler.host);\n         let compiler = if builder.force_use_stage1(compiler, target) {\n             builder.compiler(1, compiler.host)\n         } else {\n@@ -619,7 +614,6 @@ impl Step for WhitelistedRustc {\n \n         // See docs in std above for why we symlink\n         let my_out = builder.crate_doc_out(target);\n-        builder.clear_if_dirty(&my_out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &my_out, &out_dir));\n \n         let mut cargo = builder.cargo(compiler, Mode::Rustc, target, \"doc\");\n@@ -678,7 +672,6 @@ impl Step for Rustc {\n \n         // Get the correct compiler for this stage.\n         let compiler = builder.compiler(stage, builder.config.build);\n-        let rustdoc = builder.rustdoc(compiler.host);\n         let compiler = if builder.force_use_stage1(compiler, target) {\n             builder.compiler(1, compiler.host)\n         } else {\n@@ -699,7 +692,6 @@ impl Step for Rustc {\n         // We do not symlink to the same shared folder that already contains std library\n         // documentation from previous steps as we do not want to include that.\n         let out_dir = builder.stage_out(compiler, Mode::Rustc).join(target).join(\"doc\");\n-        builder.clear_if_dirty(&out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &out, &out_dir));\n \n         // Build cargo command.\n@@ -780,7 +772,6 @@ impl Step for Rustdoc {\n \n         // Get the correct compiler for this stage.\n         let compiler = builder.compiler(stage, builder.config.build);\n-        let rustdoc = builder.rustdoc(compiler.host);\n         let compiler = if builder.force_use_stage1(compiler, target) {\n             builder.compiler(1, compiler.host)\n         } else {\n@@ -803,7 +794,6 @@ impl Step for Rustdoc {\n             .join(target)\n             .join(\"doc\");\n         t!(fs::create_dir_all(&out_dir));\n-        builder.clear_if_dirty(&out, &rustdoc);\n         t!(symlink_dir_force(&builder.config, &out, &out_dir));\n \n         // Build cargo command."}, {"sha": "4cdb3080d8d5b360936aeefa1863348adb5d40fc", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c0af0b0213529437ed60a9df6faa91383eaf7faa/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c0af0b0213529437ed60a9df6faa91383eaf7faa/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=c0af0b0213529437ed60a9df6faa91383eaf7faa", "patch": "@@ -19,7 +19,7 @@ use Mode;\n use Compiler;\n use builder::{Step, RunConfig, ShouldRun, Builder};\n use util::{exe, add_lib_path};\n-use compile::{self, libtest_stamp, libstd_stamp, librustc_stamp};\n+use compile;\n use native;\n use channel::GitInfo;\n use cache::Interned;\n@@ -39,33 +39,10 @@ impl Step for CleanTools {\n         run.never()\n     }\n \n-    fn run(self, builder: &Builder) {\n-        let compiler = self.compiler;\n-        let target = self.target;\n+    fn run(self, _builder: &Builder) {\n         let cause = self.cause;\n \n-        // This is for the original compiler, but if we're forced to use stage 1, then\n-        // std/test/rustc stamps won't exist in stage 2, so we need to get those from stage 1, since\n-        // we copy the libs forward.\n-        let tools_dir = builder.stage_out(compiler, Mode::ToolRustc);\n-        let compiler = if builder.force_use_stage1(compiler, target) {\n-            builder.compiler(1, compiler.host)\n-        } else {\n-            compiler\n-        };\n-\n         for &cur_mode in &[Mode::Std, Mode::Test, Mode::Rustc] {\n-            let stamp = match cur_mode {\n-                Mode::Std => libstd_stamp(builder, compiler, target),\n-                Mode::Test => libtest_stamp(builder, compiler, target),\n-                Mode::Rustc => librustc_stamp(builder, compiler, target),\n-                _ => panic!(),\n-            };\n-\n-            if builder.clear_if_dirty(&tools_dir, &stamp) {\n-                break;\n-            }\n-\n             // If we are a rustc tool, and std changed, we also need to clear ourselves out -- our\n             // dependencies depend on std. Therefore, we iterate up until our own mode.\n             if cause == cur_mode {"}]}