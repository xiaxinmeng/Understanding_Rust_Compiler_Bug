{"sha": "c297e20e03452c659b6d3f026ce4beee42ed8738", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyOTdlMjBlMDM0NTJjNjU5YjZkM2YwMjZjZTRiZWVlNDJlZDg3Mzg=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-09-21T18:32:06Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-09-27T01:58:38Z"}, "message": "Add accessors to Command.", "tree": {"sha": "0c20b7dc582d780b8a00cdbb2965767b24cf3ce9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c20b7dc582d780b8a00cdbb2965767b24cf3ce9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c297e20e03452c659b6d3f026ce4beee42ed8738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c297e20e03452c659b6d3f026ce4beee42ed8738", "html_url": "https://github.com/rust-lang/rust/commit/c297e20e03452c659b6d3f026ce4beee42ed8738", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c297e20e03452c659b6d3f026ce4beee42ed8738/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "623fb90b5a1f324e0ec44085116bf858cef19a00", "url": "https://api.github.com/repos/rust-lang/rust/commits/623fb90b5a1f324e0ec44085116bf858cef19a00", "html_url": "https://github.com/rust-lang/rust/commit/623fb90b5a1f324e0ec44085116bf858cef19a00"}], "stats": {"total": 311, "additions": 303, "deletions": 8}, "files": [{"sha": "3d238b7f764efcaf920ca5b378f3c73b27f67cae", "filename": "library/std/src/process.rs", "status": "modified", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/c297e20e03452c659b6d3f026ce4beee42ed8738/library%2Fstd%2Fsrc%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c297e20e03452c659b6d3f026ce4beee42ed8738/library%2Fstd%2Fsrc%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprocess.rs?ref=c297e20e03452c659b6d3f026ce4beee42ed8738", "patch": "@@ -110,6 +110,8 @@ use crate::path::Path;\n use crate::str;\n use crate::sys::pipe::{read2, AnonPipe};\n use crate::sys::process as imp;\n+#[unstable(feature = \"command_access\", issue = \"44434\")]\n+pub use crate::sys_common::process::CommandEnvs;\n use crate::sys_common::{AsInner, AsInnerMut, FromInner, IntoInner};\n \n /// Representation of a running or exited child process.\n@@ -894,6 +896,98 @@ impl Command {\n             .map(Child::from_inner)\n             .and_then(|mut p| p.wait())\n     }\n+\n+    /// Returns the path to the program that was given to [`Command::new`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(command_access)]\n+    /// use std::process::Command;\n+    ///\n+    /// let cmd = Command::new(\"echo\");\n+    /// assert_eq!(cmd.get_program(), \"echo\");\n+    /// ```\n+    #[unstable(feature = \"command_access\", issue = \"44434\")]\n+    pub fn get_program(&self) -> &OsStr {\n+        self.inner.get_program()\n+    }\n+\n+    /// Returns an iterator of the arguments that will be passed to the program.\n+    ///\n+    /// This does not include the path to the program as the first argument;\n+    /// it only includes the arguments specified with [`Command::arg`] and\n+    /// [`Command::args`].\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(command_access)]\n+    /// use std::ffi::OsStr;\n+    /// use std::process::Command;\n+    ///\n+    /// let mut cmd = Command::new(\"echo\");\n+    /// cmd.arg(\"first\").arg(\"second\");\n+    /// let args: Vec<&OsStr> = cmd.get_args().collect();\n+    /// assert_eq!(args, &[\"first\", \"second\"]);\n+    /// ```\n+    #[unstable(feature = \"command_access\", issue = \"44434\")]\n+    pub fn get_args(&self) -> CommandArgs<'_> {\n+        CommandArgs { inner: self.inner.get_args() }\n+    }\n+\n+    /// Returns an iterator of the environment variables that will be set when\n+    /// the process is spawned.\n+    ///\n+    /// Each element is a tuple `(&OsStr, Option<&OsStr>)`, where the first\n+    /// value is the key, and the second is the value, which is [`None`] if\n+    /// the environment variable is to be explicitly removed.\n+    ///\n+    /// This only includes environment variables explicitly set with\n+    /// [`Command::env`], [`Command::envs`], and [`Command::env_remove`]. It\n+    /// does not include environment variables that will be inherited by the\n+    /// child process.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(command_access)]\n+    /// use std::ffi::OsStr;\n+    /// use std::process::Command;\n+    ///\n+    /// let mut cmd = Command::new(\"ls\");\n+    /// cmd.env(\"TERM\", \"dumb\").env_remove(\"TZ\");\n+    /// let envs: Vec<(&OsStr, Option<&OsStr>)> = cmd.get_envs().collect();\n+    /// assert_eq!(envs, &[\n+    ///     (OsStr::new(\"TERM\"), Some(OsStr::new(\"dumb\"))),\n+    ///     (OsStr::new(\"TZ\"), None)\n+    /// ]);\n+    /// ```\n+    #[unstable(feature = \"command_access\", issue = \"44434\")]\n+    pub fn get_envs(&self) -> CommandEnvs<'_> {\n+        self.inner.get_envs()\n+    }\n+\n+    /// Returns the working directory for the child process.\n+    ///\n+    /// This returns [`None`] if the working directory will not be changed.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// # #![feature(command_access)]\n+    /// use std::path::Path;\n+    /// use std::process::Command;\n+    ///\n+    /// let mut cmd = Command::new(\"ls\");\n+    /// assert_eq!(cmd.get_current_dir(), None);\n+    /// cmd.current_dir(\"/bin\");\n+    /// assert_eq!(cmd.get_current_dir(), Some(Path::new(\"/bin\")));\n+    /// ```\n+    #[unstable(feature = \"command_access\", issue = \"44434\")]\n+    pub fn get_current_dir(&self) -> Option<&Path> {\n+        self.inner.get_current_dir()\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -918,6 +1012,37 @@ impl AsInnerMut<imp::Command> for Command {\n     }\n }\n \n+/// An iterator over the command arguments.\n+///\n+/// This struct is created by [`Command::get_args`]. See its documentation for\n+/// more.\n+#[unstable(feature = \"command_access\", issue = \"44434\")]\n+#[derive(Debug)]\n+pub struct CommandArgs<'a> {\n+    inner: imp::CommandArgs<'a>,\n+}\n+\n+#[unstable(feature = \"command_access\", issue = \"44434\")]\n+impl<'a> Iterator for CommandArgs<'a> {\n+    type Item = &'a OsStr;\n+    fn next(&mut self) -> Option<&'a OsStr> {\n+        self.inner.next()\n+    }\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.inner.size_hint()\n+    }\n+}\n+\n+#[unstable(feature = \"command_access\", issue = \"44434\")]\n+impl<'a> ExactSizeIterator for CommandArgs<'a> {\n+    fn len(&self) -> usize {\n+        self.inner.len()\n+    }\n+    fn is_empty(&self) -> bool {\n+        self.inner.is_empty()\n+    }\n+}\n+\n /// The output of a finished process.\n ///\n /// This is returned in a Result by either the [`output`] method of a"}, {"sha": "1b7b93f9d4a5f93ad8ba68e35ec8065c5268d08e", "filename": "library/std/src/sys/unix/process/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c297e20e03452c659b6d3f026ce4beee42ed8738/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c297e20e03452c659b6d3f026ce4beee42ed8738/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fmod.rs?ref=c297e20e03452c659b6d3f026ce4beee42ed8738", "patch": "@@ -1,6 +1,7 @@\n-pub use self::process_common::{Command, ExitCode, Stdio, StdioPipes};\n+pub use self::process_common::{Command, CommandArgs, ExitCode, Stdio, StdioPipes};\n pub use self::process_inner::{ExitStatus, Process};\n pub use crate::ffi::OsString as EnvKey;\n+pub use crate::sys_common::process::CommandEnvs;\n \n mod process_common;\n #[cfg(not(target_os = \"fuchsia\"))]"}, {"sha": "9ddd4ad4000ef659bc7fbb36ebec7576f050b4c0", "filename": "library/std/src/sys/unix/process/process_common.rs", "status": "modified", "additions": 51, "deletions": 2, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/c297e20e03452c659b6d3f026ce4beee42ed8738/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c297e20e03452c659b6d3f026ce4beee42ed8738/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=c297e20e03452c659b6d3f026ce4beee42ed8738", "patch": "@@ -7,11 +7,12 @@ use crate::collections::BTreeMap;\n use crate::ffi::{CStr, CString, OsStr, OsString};\n use crate::fmt;\n use crate::io;\n+use crate::path::Path;\n use crate::ptr;\n use crate::sys::fd::FileDesc;\n use crate::sys::fs::File;\n use crate::sys::pipe::{self, AnonPipe};\n-use crate::sys_common::process::CommandEnv;\n+use crate::sys_common::process::{CommandEnv, CommandEnvs};\n \n #[cfg(not(target_os = \"fuchsia\"))]\n use crate::sys::fs::OpenOptions;\n@@ -184,11 +185,30 @@ impl Command {\n     pub fn saw_nul(&self) -> bool {\n         self.saw_nul\n     }\n+\n+    pub fn get_program(&self) -> &OsStr {\n+        OsStr::from_bytes(self.program.as_bytes())\n+    }\n+\n+    pub fn get_args(&self) -> CommandArgs<'_> {\n+        let mut iter = self.args.iter();\n+        iter.next();\n+        CommandArgs { iter }\n+    }\n+\n+    pub fn get_envs(&self) -> CommandEnvs<'_> {\n+        self.env.iter()\n+    }\n+\n+    pub fn get_current_dir(&self) -> Option<&Path> {\n+        self.cwd.as_ref().map(|cs| Path::new(OsStr::from_bytes(cs.as_bytes())))\n+    }\n+\n     pub fn get_argv(&self) -> &Vec<*const c_char> {\n         &self.argv.0\n     }\n \n-    pub fn get_program(&self) -> &CStr {\n+    pub fn get_program_cstr(&self) -> &CStr {\n         &*self.program\n     }\n \n@@ -402,3 +422,32 @@ impl ExitCode {\n         self.0 as i32\n     }\n }\n+\n+pub struct CommandArgs<'a> {\n+    iter: crate::slice::Iter<'a, CString>,\n+}\n+\n+impl<'a> Iterator for CommandArgs<'a> {\n+    type Item = &'a OsStr;\n+    fn next(&mut self) -> Option<&'a OsStr> {\n+        self.iter.next().map(|cs| OsStr::from_bytes(cs.as_bytes()))\n+    }\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.iter.size_hint()\n+    }\n+}\n+\n+impl<'a> ExactSizeIterator for CommandArgs<'a> {\n+    fn len(&self) -> usize {\n+        self.iter.len()\n+    }\n+    fn is_empty(&self) -> bool {\n+        self.iter.is_empty()\n+    }\n+}\n+\n+impl<'a> fmt::Debug for CommandArgs<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_list().entries(self.iter.clone()).finish()\n+    }\n+}"}, {"sha": "b64636c3f3d1514ba53db9cb3dac33b167479611", "filename": "library/std/src/sys/unix/process/process_fuchsia.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c297e20e03452c659b6d3f026ce4beee42ed8738/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c297e20e03452c659b6d3f026ce4beee42ed8738/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_fuchsia.rs?ref=c297e20e03452c659b6d3f026ce4beee42ed8738", "patch": "@@ -120,7 +120,7 @@ impl Command {\n                 | FDIO_SPAWN_CLONE_NAMESPACE\n                 | FDIO_SPAWN_CLONE_ENVIRON // this is ignored when envp is non-null\n                 | FDIO_SPAWN_CLONE_UTC_CLOCK,\n-            self.get_program().as_ptr(),\n+            self.get_program_cstr().as_ptr(),\n             self.get_argv().as_ptr(),\n             envp,\n             actions.len() as size_t,"}, {"sha": "50f5e78cf2a88c0cb2766bae201020b44fcbc01a", "filename": "library/std/src/sys/unix/process/process_unix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c297e20e03452c659b6d3f026ce4beee42ed8738/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c297e20e03452c659b6d3f026ce4beee42ed8738/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fprocess%2Fprocess_unix.rs?ref=c297e20e03452c659b6d3f026ce4beee42ed8738", "patch": "@@ -245,7 +245,7 @@ impl Command {\n             *sys::os::environ() = envp.as_ptr();\n         }\n \n-        libc::execvp(self.get_program().as_ptr(), self.get_argv().as_ptr());\n+        libc::execvp(self.get_program_cstr().as_ptr(), self.get_argv().as_ptr());\n         Err(io::Error::last_os_error())\n     }\n \n@@ -383,7 +383,7 @@ impl Command {\n             let envp = envp.map(|c| c.as_ptr()).unwrap_or_else(|| *sys::os::environ() as *const _);\n             let ret = libc::posix_spawnp(\n                 &mut p.pid,\n-                self.get_program().as_ptr(),\n+                self.get_program_cstr().as_ptr(),\n                 file_actions.0.as_ptr(),\n                 attrs.0.as_ptr(),\n                 self.get_argv().as_ptr() as *const _,"}, {"sha": "3ede2291d5a917ddf8fc51ada341869f6c2c6f95", "filename": "library/std/src/sys/unsupported/process.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c297e20e03452c659b6d3f026ce4beee42ed8738/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c297e20e03452c659b6d3f026ce4beee42ed8738/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fprocess.rs?ref=c297e20e03452c659b6d3f026ce4beee42ed8738", "patch": "@@ -1,10 +1,12 @@\n use crate::ffi::OsStr;\n use crate::fmt;\n use crate::io;\n+use crate::marker::PhantomData;\n+use crate::path::Path;\n use crate::sys::fs::File;\n use crate::sys::pipe::AnonPipe;\n use crate::sys::{unsupported, Void};\n-use crate::sys_common::process::CommandEnv;\n+use crate::sys_common::process::{CommandEnv, CommandEnvs};\n \n pub use crate::ffi::OsString as EnvKey;\n \n@@ -49,6 +51,22 @@ impl Command {\n \n     pub fn stderr(&mut self, _stderr: Stdio) {}\n \n+    pub fn get_program(&self) -> &OsStr {\n+        panic!(\"unsupported\")\n+    }\n+\n+    pub fn get_args(&self) -> CommandArgs<'_> {\n+        CommandArgs { _p: PhantomData }\n+    }\n+\n+    pub fn get_envs(&self) -> CommandEnvs<'_> {\n+        self.env.iter()\n+    }\n+\n+    pub fn get_current_dir(&self) -> Option<&Path> {\n+        None\n+    }\n+\n     pub fn spawn(\n         &mut self,\n         _default: Stdio,\n@@ -147,3 +165,22 @@ impl Process {\n         match self.0 {}\n     }\n }\n+\n+pub struct CommandArgs<'a> {\n+    _p: PhantomData<&'a ()>,\n+}\n+\n+impl<'a> Iterator for CommandArgs<'a> {\n+    type Item = &'a OsStr;\n+    fn next(&mut self) -> Option<&'a OsStr> {\n+        None\n+    }\n+}\n+\n+impl<'a> ExactSizeIterator for CommandArgs<'a> {}\n+\n+impl<'a> fmt::Debug for CommandArgs<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_list().finish()\n+    }\n+}"}, {"sha": "243065b94b125419d17dcc7b4aa5d47bf03728db", "filename": "library/std/src/sys/windows/process.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c297e20e03452c659b6d3f026ce4beee42ed8738/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c297e20e03452c659b6d3f026ce4beee42ed8738/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fprocess.rs?ref=c297e20e03452c659b6d3f026ce4beee42ed8738", "patch": "@@ -22,7 +22,7 @@ use crate::sys::handle::Handle;\n use crate::sys::mutex::Mutex;\n use crate::sys::pipe::{self, AnonPipe};\n use crate::sys::stdio;\n-use crate::sys_common::process::CommandEnv;\n+use crate::sys_common::process::{CommandEnv, CommandEnvs};\n use crate::sys_common::AsInner;\n \n use libc::{c_void, EXIT_FAILURE, EXIT_SUCCESS};\n@@ -134,6 +134,23 @@ impl Command {\n         self.flags = flags;\n     }\n \n+    pub fn get_program(&self) -> &OsStr {\n+        &self.program\n+    }\n+\n+    pub fn get_args(&self) -> CommandArgs<'_> {\n+        let iter = self.args.iter();\n+        CommandArgs { iter }\n+    }\n+\n+    pub fn get_envs(&self) -> CommandEnvs<'_> {\n+        self.env.iter()\n+    }\n+\n+    pub fn get_current_dir(&self) -> Option<&Path> {\n+        self.cwd.as_ref().map(|cwd| Path::new(cwd))\n+    }\n+\n     pub fn spawn(\n         &mut self,\n         default: Stdio,\n@@ -529,3 +546,32 @@ fn make_dirp(d: Option<&OsString>) -> io::Result<(*const u16, Vec<u16>)> {\n         None => Ok((ptr::null(), Vec::new())),\n     }\n }\n+\n+pub struct CommandArgs<'a> {\n+    iter: crate::slice::Iter<'a, OsString>,\n+}\n+\n+impl<'a> Iterator for CommandArgs<'a> {\n+    type Item = &'a OsStr;\n+    fn next(&mut self) -> Option<&'a OsStr> {\n+        self.iter.next().map(|s| s.as_ref())\n+    }\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.iter.size_hint()\n+    }\n+}\n+\n+impl<'a> ExactSizeIterator for CommandArgs<'a> {\n+    fn len(&self) -> usize {\n+        self.iter.len()\n+    }\n+    fn is_empty(&self) -> bool {\n+        self.iter.is_empty()\n+    }\n+}\n+\n+impl<'a> fmt::Debug for CommandArgs<'a> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.debug_list().entries(self.iter.clone()).finish()\n+    }\n+}"}, {"sha": "fe89b11043c0ff879703925a2f4307030f157971", "filename": "library/std/src/sys_common/process.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/c297e20e03452c659b6d3f026ce4beee42ed8738/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c297e20e03452c659b6d3f026ce4beee42ed8738/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fprocess.rs?ref=c297e20e03452c659b6d3f026ce4beee42ed8738", "patch": "@@ -92,4 +92,41 @@ impl CommandEnv {\n             self.saw_path = true;\n         }\n     }\n+\n+    pub fn iter(&self) -> CommandEnvs<'_> {\n+        let iter = self.vars.iter();\n+        CommandEnvs { iter }\n+    }\n+}\n+\n+/// An iterator over the command environment variables.\n+///\n+/// This struct is created by\n+/// [`Command::get_envs`][crate::process::Command::get_envs]. See its\n+/// documentation for more.\n+#[unstable(feature = \"command_access\", issue = \"44434\")]\n+#[derive(Debug)]\n+pub struct CommandEnvs<'a> {\n+    iter: crate::collections::btree_map::Iter<'a, EnvKey, Option<OsString>>,\n+}\n+\n+#[unstable(feature = \"command_access\", issue = \"44434\")]\n+impl<'a> Iterator for CommandEnvs<'a> {\n+    type Item = (&'a OsStr, Option<&'a OsStr>);\n+    fn next(&mut self) -> Option<Self::Item> {\n+        self.iter.next().map(|(key, value)| (key.as_ref(), value.as_deref()))\n+    }\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        self.iter.size_hint()\n+    }\n+}\n+\n+#[unstable(feature = \"command_access\", issue = \"44434\")]\n+impl<'a> ExactSizeIterator for CommandEnvs<'a> {\n+    fn len(&self) -> usize {\n+        self.iter.len()\n+    }\n+    fn is_empty(&self) -> bool {\n+        self.iter.is_empty()\n+    }\n }"}]}