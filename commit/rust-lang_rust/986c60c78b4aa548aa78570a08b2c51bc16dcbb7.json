{"sha": "986c60c78b4aa548aa78570a08b2c51bc16dcbb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4NmM2MGM3OGI0YWE1NDhhYTc4NTcwYTA4YjJjNTFiYzE2ZGNiYjc=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-05-29T06:06:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-29T06:06:57Z"}, "message": "Rollup merge of #72324 - Amanieu:atomic_minmax, r=dtolnay\n\nStabilize AtomicN::fetch_min and AtomicN::fetch_max\n\nSome architectures (ARMv8.1 LSE and RISC-V) have specific instructions for atomic min/max which the compiler can only generate through explicit instrinsics.", "tree": {"sha": "77171f3109e505e6689dcd5a8709c352300d0906", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/77171f3109e505e6689dcd5a8709c352300d0906"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/986c60c78b4aa548aa78570a08b2c51bc16dcbb7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe0KaCCRBK7hj4Ov3rIwAAdHIIAAlv2PbMberK7RGv1n10xm2i\nuKt0JEUYS5H40JspMbcLeWgmSNlymW9eJD95wOXaUoUagI8caez0W5wehsSiBbTl\nyKGGfSdHPA+r9fP6XfYdWMDGSaRhKpq+ERNkbYsMtTeeHPrjN6HISJLwVvLRKFpM\n5X05+fVAA5L6LoUGTDR+UKfviV1odp8Ti/t2HnAHYKhz5nxdtVxuNSAIXzBgHpIS\nXxPOF0cw/gt3pOlayPaI2Oyc3jjgmjVPj1gnJj38kExPLd7Gro1Hn96PvnOtjLVx\nVVN2ETjIEt9XmK4jbAOuyf3Nxl0IodDp129tFPHagH1/c1HpMR1Fmde8mHQROlo=\n=8mBx\n-----END PGP SIGNATURE-----\n", "payload": "tree 77171f3109e505e6689dcd5a8709c352300d0906\nparent d472f8e4624277163f33f9070bf0474669d3844e\nparent 1d7a731f3dfc416d761963cf1bbb0abee9764665\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1590732417 +0900\ncommitter GitHub <noreply@github.com> 1590732417 +0900\n\nRollup merge of #72324 - Amanieu:atomic_minmax, r=dtolnay\n\nStabilize AtomicN::fetch_min and AtomicN::fetch_max\n\nSome architectures (ARMv8.1 LSE and RISC-V) have specific instructions for atomic min/max which the compiler can only generate through explicit instrinsics.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/986c60c78b4aa548aa78570a08b2c51bc16dcbb7", "html_url": "https://github.com/rust-lang/rust/commit/986c60c78b4aa548aa78570a08b2c51bc16dcbb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/986c60c78b4aa548aa78570a08b2c51bc16dcbb7/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d472f8e4624277163f33f9070bf0474669d3844e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d472f8e4624277163f33f9070bf0474669d3844e", "html_url": "https://github.com/rust-lang/rust/commit/d472f8e4624277163f33f9070bf0474669d3844e"}, {"sha": "1d7a731f3dfc416d761963cf1bbb0abee9764665", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d7a731f3dfc416d761963cf1bbb0abee9764665", "html_url": "https://github.com/rust-lang/rust/commit/1d7a731f3dfc416d761963cf1bbb0abee9764665"}], "stats": {"total": 12, "additions": 2, "deletions": 10}, "files": [{"sha": "449aac85bc7731fe75aa4fa1f404550720299e0c", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/986c60c78b4aa548aa78570a08b2c51bc16dcbb7/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/986c60c78b4aa548aa78570a08b2c51bc16dcbb7/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=986c60c78b4aa548aa78570a08b2c51bc16dcbb7", "patch": "@@ -1878,7 +1878,6 @@ using [`Release`] makes the load part [`Relaxed`].\n # Examples\n \n ```\n-#![feature(atomic_min_max)]\n \", $extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\n \n let foo = \", stringify!($atomic_type), \"::new(23);\n@@ -1889,7 +1888,6 @@ assert_eq!(foo.load(Ordering::SeqCst), 42);\n If you want to obtain the maximum value in one step, you can use the following:\n \n ```\n-#![feature(atomic_min_max)]\n \", $extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\n \n let foo = \", stringify!($atomic_type), \"::new(23);\n@@ -1898,9 +1896,7 @@ let max_foo = foo.fetch_max(bar, Ordering::SeqCst).max(bar);\n assert!(max_foo == 42);\n ```\"),\n                 #[inline]\n-                #[unstable(feature = \"atomic_min_max\",\n-                       reason = \"easier and faster min/max than writing manual CAS loop\",\n-                       issue = \"48655\")]\n+                #[stable(feature = \"atomic_min_max\", since = \"1.45.0\")]\n                 #[$cfg_cas]\n                 pub fn fetch_max(&self, val: $int_type, order: Ordering) -> $int_type {\n                     // SAFETY: data races are prevented by atomic intrinsics.\n@@ -1929,7 +1925,6 @@ using [`Release`] makes the load part [`Relaxed`].\n # Examples\n \n ```\n-#![feature(atomic_min_max)]\n \", $extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\n \n let foo = \", stringify!($atomic_type), \"::new(23);\n@@ -1942,7 +1937,6 @@ assert_eq!(foo.load(Ordering::Relaxed), 22);\n If you want to obtain the minimum value in one step, you can use the following:\n \n ```\n-#![feature(atomic_min_max)]\n \", $extra_feature, \"use std::sync::atomic::{\", stringify!($atomic_type), \", Ordering};\n \n let foo = \", stringify!($atomic_type), \"::new(23);\n@@ -1951,9 +1945,7 @@ let min_foo = foo.fetch_min(bar, Ordering::SeqCst).min(bar);\n assert_eq!(min_foo, 12);\n ```\"),\n                 #[inline]\n-                #[unstable(feature = \"atomic_min_max\",\n-                       reason = \"easier and faster min/max than writing manual CAS loop\",\n-                       issue = \"48655\")]\n+                #[stable(feature = \"atomic_min_max\", since = \"1.45.0\")]\n                 #[$cfg_cas]\n                 pub fn fetch_min(&self, val: $int_type, order: Ordering) -> $int_type {\n                     // SAFETY: data races are prevented by atomic intrinsics."}]}