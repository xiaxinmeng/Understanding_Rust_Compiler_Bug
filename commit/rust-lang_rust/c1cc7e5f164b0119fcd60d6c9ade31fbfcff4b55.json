{"sha": "c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxY2M3ZTVmMTY0YjAxMTlmY2Q2MGQ2YzlhZGUzMWZiZmNmZjRiNTU=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-09-17T02:30:28Z"}, "committer": {"name": "Derek Guenther", "email": "dguenther9@gmail.com", "date": "2014-02-09T05:40:16Z"}, "message": "Add new syntax extension fourcc!()\n\nfourcc!() allows you to embed FourCC (or OSType) values that are\nevaluated as u32 literals. It takes a 4-byte ASCII string and produces\nthe u32 resulting in interpreting those 4 bytes as a u32, using either\nthe platform-native endianness, or explicitly as big or little endian.", "tree": {"sha": "c773589dde45c66030ad5d99fb9ee03355bb2a8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c773589dde45c66030ad5d99fb9ee03355bb2a8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55", "html_url": "https://github.com/rust-lang/rust/commit/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dguenther", "id": 767083, "node_id": "MDQ6VXNlcjc2NzA4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/767083?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dguenther", "html_url": "https://github.com/dguenther", "followers_url": "https://api.github.com/users/dguenther/followers", "following_url": "https://api.github.com/users/dguenther/following{/other_user}", "gists_url": "https://api.github.com/users/dguenther/gists{/gist_id}", "starred_url": "https://api.github.com/users/dguenther/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dguenther/subscriptions", "organizations_url": "https://api.github.com/users/dguenther/orgs", "repos_url": "https://api.github.com/users/dguenther/repos", "events_url": "https://api.github.com/users/dguenther/events{/privacy}", "received_events_url": "https://api.github.com/users/dguenther/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b66ec3483bd5081bcc829efb88ceb841189b754d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b66ec3483bd5081bcc829efb88ceb841189b754d", "html_url": "https://github.com/rust-lang/rust/commit/b66ec3483bd5081bcc829efb88ceb841189b754d"}], "stats": {"total": 206, "additions": 206, "deletions": 0}, "files": [{"sha": "bf240d8b47c521b0b19045fd7026492a2ae8d81f", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55", "patch": "@@ -194,6 +194,9 @@ pub fn syntax_expander_table() -> SyntaxEnv {\n     syntax_expanders.insert(intern(\"bytes\"),\n                             builtin_normal_expander(\n                                     ext::bytes::expand_syntax_ext));\n+    syntax_expanders.insert(intern(\"fourcc\"),\n+                            builtin_normal_tt_no_ctxt(\n+                                    ext::fourcc::expand_syntax_ext));\n     syntax_expanders.insert(intern(\"concat_idents\"),\n                             builtin_normal_expander(\n                                     ext::concat_idents::expand_syntax_ext));"}, {"sha": "dd5452535a28a8432fc35c099caaaa1c23175c90", "filename": "src/libsyntax/ext/fourcc.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Flibsyntax%2Fext%2Ffourcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Flibsyntax%2Fext%2Ffourcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ffourcc.rs?ref=c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55", "patch": "@@ -0,0 +1,106 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/* The compiler code necessary to support the fourcc! extension. */\n+\n+// fourcc!() is called with a single 4-character string, and an optional ident\n+// that is either `big` or `little`. If the ident is omitted it is assumed to\n+// be the platform-native value. It returns a u32.\n+\n+use ast;\n+use attr::contains;\n+use codemap::{Span, mk_sp};\n+use ext::base::*;\n+use ext::base;\n+use ext::build::AstBuilder;\n+use parse;\n+use parse::token;\n+\n+use std::ascii::AsciiCast;\n+\n+pub fn expand_syntax_ext(cx: @ExtCtxt, sp: Span, tts: &[ast::token_tree]) -> base::MacResult {\n+    let (expr, endian) = parse_tts(cx, tts);\n+\n+    let little = match endian {\n+        None => target_endian_little(cx, sp),\n+        Some(Ident{ident, span}) => match cx.str_of(ident).as_slice() {\n+            \"little\" => true,\n+            \"big\" => false,\n+            _ => {\n+                cx.span_err(span, \"invalid endian directive in fourcc!\");\n+                target_endian_little(cx, sp)\n+            }\n+        }\n+    };\n+\n+    let s = match expr.node {\n+        // expression is a literal\n+        ast::ExprLit(lit) => match lit.node {\n+            // string literal\n+            ast::lit_str(s) => {\n+                if !s.is_ascii() {\n+                    cx.span_err(expr.span, \"non-ascii string literal in fourcc!\");\n+                } else if s.len() != 4 {\n+                    cx.span_err(expr.span, \"string literal with len != 4 in fourcc!\");\n+                }\n+                s\n+            }\n+            _ => {\n+                cx.span_err(expr.span, \"unsupported literal in fourcc!\");\n+                return MRExpr(cx.expr_lit(sp, ast::lit_uint(0u64, ast::ty_u32)));\n+            }\n+        },\n+        _ => {\n+            cx.span_err(expr.span, \"non-literal in fourcc!\");\n+            return MRExpr(cx.expr_lit(sp, ast::lit_uint(0u64, ast::ty_u32)));\n+        }\n+    };\n+\n+    let mut val = 0u32;\n+    if little {\n+        for byte in s.byte_rev_iter().take(4) {\n+            val = (val << 8) | (byte as u32);\n+        }\n+    } else {\n+        for byte in s.byte_iter().take(4) {\n+            val = (val << 8) | (byte as u32);\n+        }\n+    }\n+    let e = cx.expr_lit(sp, ast::lit_uint(val as u64, ast::ty_u32));\n+    MRExpr(e)\n+}\n+\n+struct Ident {\n+    ident: ast::Ident,\n+    span: Span\n+}\n+\n+fn parse_tts(cx: @ExtCtxt, tts: &[ast::token_tree]) -> (@ast::Expr, Option<Ident>) {\n+    let p = parse::new_parser_from_tts(cx.parse_sess(), cx.cfg(), tts.to_owned());\n+    let ex = p.parse_expr();\n+    let id = if *p.token == token::EOF {\n+        None\n+    } else {\n+        p.expect(&token::COMMA);\n+        let lo = p.span.lo;\n+        let ident = p.parse_ident();\n+        let hi = p.last_span.hi;\n+        Some(Ident{ident: ident, span: mk_sp(lo, hi)})\n+    };\n+    if *p.token != token::EOF {\n+        p.unexpected();\n+    }\n+    (ex, id)\n+}\n+\n+fn target_endian_little(cx: @ExtCtxt, sp: Span) -> bool {\n+    let meta = cx.meta_name_value(sp, @\"target_endian\", ast::lit_str(@\"little\"));\n+    contains(cx.cfg(), meta)\n+}"}, {"sha": "5999cf0d8fe3fa98fad3420a6b17246ddfe64d65", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55", "patch": "@@ -95,6 +95,7 @@ pub mod ext {\n     pub mod bytes;\n     pub mod concat;\n     pub mod concat_idents;\n+    pub mod fourcc;\n     pub mod log_syntax;\n     pub mod source_util;\n "}, {"sha": "11e2264001f922c82b0b5483dbc8cc99ada0aced", "filename": "src/test/compile-fail/syntax-extension-fourcc-bad-len.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-bad-len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-bad-len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-bad-len.rs?ref=c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let val = fourcc!(\"foo\"); //~ ERROR string literal with len != 4 in fourcc!\n+    let val2 = fourcc!(\"fooba\"); //~ ERROR string literal with len != 4 in fourcc!\n+}"}, {"sha": "ebad65ce740c123005cc652a5dec04fa279ede1b", "filename": "src/test/compile-fail/syntax-extension-fourcc-invalid-endian.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-invalid-endian.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-invalid-endian.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-invalid-endian.rs?ref=c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let val = fourcc!(\"foo \", bork); //~ ERROR invalid endian directive in fourcc!\n+}"}, {"sha": "94a963298e2e89c33755e39659aeee09467fa185", "filename": "src/test/compile-fail/syntax-extension-fourcc-non-ascii-str.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-ascii-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-ascii-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-ascii-str.rs?ref=c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let v = fourcc!(\"foo\u03bb\"); //~ ERROR non-ascii string literal in fourcc!\n+}"}, {"sha": "baefd267e90135f37ff3d67610852ec867a79277", "filename": "src/test/compile-fail/syntax-extension-fourcc-non-literal.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-non-literal.rs?ref=c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let val = fourcc!(foo); //~ ERROR non-literal in fourcc!\n+}"}, {"sha": "ee191a7d96dbaf2fabf83962a3d49b4202c3a27d", "filename": "src/test/compile-fail/syntax-extension-fourcc-unsupported-literal.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-unsupported-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-unsupported-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fsyntax-extension-fourcc-unsupported-literal.rs?ref=c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let val = fourcc!(45f); //~ ERROR unsupported literal in fourcc!\n+}"}, {"sha": "a5202144b77ee244afbf6f23b0126e8ea681a813", "filename": "src/test/run-pass/syntax-extension-fourcc.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Ftest%2Frun-pass%2Fsyntax-extension-fourcc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55/src%2Ftest%2Frun-pass%2Fsyntax-extension-fourcc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-fourcc.rs?ref=c1cc7e5f164b0119fcd60d6c9ade31fbfcff4b55", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static static_val: u32 = fourcc!(\"foo \");\n+static static_val_le: u32 = fourcc!(\"foo \", little);\n+static static_val_be: u32 = fourcc!(\"foo \", big);\n+\n+fn main() {\n+    let val = fourcc!(\"foo \");\n+    let exp = if cfg!(target_endian = \"big\") { 0x666f6f20u32 } else { 0x206f6f66u32 };\n+    assert_eq!(val, exp);\n+\n+    let val = fourcc!(\"foo \", big);\n+    assert_eq!(val, 0x666f6f20u32);\n+\n+    let val = fourcc!(\"foo \", little);\n+    assert_eq!(val, 0x206f6f66u32);\n+\n+    let exp = if cfg!(target_endian = \"big\") { 0x666f6f20u32 } else { 0x206f6f66u32 };\n+    assert_eq!(static_val, exp);\n+    assert_eq!(static_val_le, 0x206f6f66u32);\n+    assert_eq!(static_val_be, 0x666f6f20u32);\n+}"}]}