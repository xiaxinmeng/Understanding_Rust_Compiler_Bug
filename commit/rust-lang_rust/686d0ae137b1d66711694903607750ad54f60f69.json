{"sha": "686d0ae137b1d66711694903607750ad54f60f69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4NmQwYWUxMzdiMWQ2NjcxMTY5NDkwMzYwNzc1MGFkNTRmNjBmNjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-27T21:01:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-27T21:01:47Z"}, "message": "Auto merge of #50290 - kennytm:rollup, r=kennytm\n\nRollup of 9 pull requests\n\nSuccessful merges:\n\n - #49858 (std: Mark `ptr::Unique` with `#[doc(hidden)]`)\n - #49968 (Stabilize dyn trait)\n - #50192 (Add some utilities to `libsyntax`)\n - #50251 (rustc: Disable threads in LLD for wasm)\n - #50263 (rustc: Emit `uwtable` for allocator shims)\n - #50269 (Update `parking_lot` dependencies)\n - #50273 (Allow #[inline] on closures)\n - #50284 (fix search load page failure)\n - #50257 (Don't ICE on tuple struct ctor with incorrect arg count)\n\nFailed merges:", "tree": {"sha": "1dd2f252f99403f026008b2d787ea363bb3984b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dd2f252f99403f026008b2d787ea363bb3984b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/686d0ae137b1d66711694903607750ad54f60f69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/686d0ae137b1d66711694903607750ad54f60f69", "html_url": "https://github.com/rust-lang/rust/commit/686d0ae137b1d66711694903607750ad54f60f69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/686d0ae137b1d66711694903607750ad54f60f69/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9975254ee6510cd1360417d3d145b56fb70b2e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9975254ee6510cd1360417d3d145b56fb70b2e7", "html_url": "https://github.com/rust-lang/rust/commit/a9975254ee6510cd1360417d3d145b56fb70b2e7"}, {"sha": "dc6b167e224f3a782fa7b1e6f5cff21f5238f97e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc6b167e224f3a782fa7b1e6f5cff21f5238f97e", "html_url": "https://github.com/rust-lang/rust/commit/dc6b167e224f3a782fa7b1e6f5cff21f5238f97e"}], "stats": {"total": 547, "additions": 298, "deletions": 249}, "files": [{"sha": "a6f78a7e6b442a5b5a565802767e2a59c8989471", "filename": "src/Cargo.lock", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1325,16 +1325,16 @@ dependencies = [\n \n [[package]]\n name = \"parking_lot\"\n-version = \"0.5.4\"\n+version = \"0.5.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot_core 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot_core 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"parking_lot_core\"\n-version = \"0.2.13\"\n+version = \"0.2.14\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.40 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1755,8 +1755,8 @@ dependencies = [\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ena 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot_core 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot_core 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-ap-serialize 110.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1896,8 +1896,8 @@ dependencies = [\n  \"cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"ena 0.9.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"parking_lot_core 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"parking_lot_core 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_cratesio_shim 0.0.0\",\n  \"serialize 0.0.0\",\n  \"stable_deref_trait 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -3096,8 +3096,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum openssl-sys 0.9.28 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0bbd90640b148b46305c1691eed6039b5c8509bed16991e3562a01eeb76902a3\"\n \"checksum ordermap 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a86ed3f5f244b372d6b1a00b72ef7f8876d0bc6a78a4c9985c53614041512063\"\n \"checksum owning_ref 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"cdf84f41639e037b484f93433aa3897863b561ed65c6e59c7073d7c561710f37\"\n-\"checksum parking_lot 0.5.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"9fd9d732f2de194336fb02fe11f9eed13d9e76f13f4315b4d88a14ca411750cd\"\n-\"checksum parking_lot_core 0.2.13 (registry+https://github.com/rust-lang/crates.io-index)\" = \"538ef00b7317875071d5e00f603f24d16f0b474c1a5fc0ccb8b454ca72eafa79\"\n+\"checksum parking_lot 0.5.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4d05f1349491390b1730afba60bb20d55761bef489a954546b58b4b34e1e2ac\"\n+\"checksum parking_lot_core 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4db1a8ccf734a7bce794cc19b3df06ed87ab2f3907036b693c68f56b4d4537fa\"\n \"checksum percent-encoding 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"31010dd2e1ac33d5b46a5b413495239882813e0369f8ed8a5e266f173602f831\"\n \"checksum pest 1.0.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0fce5d8b5cc33983fc74f78ad552b5522ab41442c4ca91606e4236eb4b5ceefc\"\n \"checksum pest_derive 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ab94faafeb93f4c5e3ce81ca0e5a779529a602ad5d09ae6d21996bfb8b6a52bf\""}, {"sha": "1b4f86dcfac1c07174e3efc4c8217b7824435a68", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -184,6 +184,7 @@ impl<T: ?Sized> Box<T> {\n \n     #[unstable(feature = \"ptr_internals\", issue = \"0\", reason = \"use into_raw_non_null instead\")]\n     #[inline]\n+    #[doc(hidden)]\n     pub fn into_unique(b: Box<T>) -> Unique<T> {\n         let unique = b.0;\n         mem::forget(b);"}, {"sha": "c61bdfc9c4f37b1a2c7b501bf85fae2202c50c7a", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -2513,6 +2513,7 @@ impl<T: ?Sized> PartialOrd for *mut T {\n            reason = \"use NonNull instead and consider PhantomData<T> \\\n                      (if you also use #[may_dangle]), Send, and/or Sync\")]\n #[allow(deprecated)]\n+#[doc(hidden)]\n pub struct Unique<T: ?Sized> {\n     pointer: NonZero<*const T>,\n     // NOTE: this marker has no consequences for variance, but is necessary"}, {"sha": "f51dbc3772f06ee1c3302304fe69f802b653c2e3", "filename": "src/libproc_macro/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibproc_macro%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibproc_macro%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Flib.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -270,7 +270,7 @@ impl Span {\n     /// `self` was generated from, if any.\n     #[unstable(feature = \"proc_macro\", issue = \"38356\")]\n     pub fn parent(&self) -> Option<Span> {\n-        self.0.ctxt().outer().expn_info().map(|i| Span(i.call_site))\n+        self.0.parent().map(Span)\n     }\n \n     /// The span for the origin source code that `self` was generated from. If"}, {"sha": "19f8d15662d84f7a0c93862e7d7becb2e3b76eb2", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -30,6 +30,7 @@ enum Target {\n     ForeignMod,\n     Expression,\n     Statement,\n+    Closure,\n     Other,\n }\n \n@@ -103,14 +104,14 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n         self.check_repr(item, target);\n     }\n \n-    /// Check if an `#[inline]` is applied to a function.\n+    /// Check if an `#[inline]` is applied to a function or a closure.\n     fn check_inline(&self, attr: &hir::Attribute, span: &Span, target: Target) {\n-        if target != Target::Fn {\n+        if target != Target::Fn && target != Target::Closure {\n             struct_span_err!(self.tcx.sess,\n                              attr.span,\n                              E0518,\n-                             \"attribute should be applied to function\")\n-                .span_label(*span, \"not a function\")\n+                             \"attribute should be applied to function or closure\")\n+                .span_label(*span, \"not a function or closure\")\n                 .emit();\n         }\n     }\n@@ -286,9 +287,13 @@ impl<'a, 'tcx> CheckAttrVisitor<'a, 'tcx> {\n     }\n \n     fn check_expr_attributes(&self, expr: &hir::Expr) {\n+        let target = match expr.node {\n+            hir::ExprClosure(..) => Target::Closure,\n+            _ => Target::Expression,\n+        };\n         for attr in expr.attrs.iter() {\n             if attr.check_name(\"inline\") {\n-                self.check_inline(attr, &expr.span, Target::Expression);\n+                self.check_inline(attr, &expr.span, target);\n             }\n             if attr.check_name(\"repr\") {\n                 self.emit_repr_error("}, {"sha": "e4b9fc1385d4070904d0f850aa0068d27f9fee35", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -4107,15 +4107,13 @@ impl<'a> LoweringContext<'a> {\n     }\n \n     fn maybe_lint_bare_trait(&self, span: Span, id: NodeId, is_global: bool) {\n-        if self.sess.features_untracked().dyn_trait {\n-            self.sess.buffer_lint_with_diagnostic(\n-                builtin::BARE_TRAIT_OBJECT,\n-                id,\n-                span,\n-                \"trait objects without an explicit `dyn` are deprecated\",\n-                builtin::BuiltinLintDiagnostics::BareTraitObject(span, is_global),\n-            )\n-        }\n+        self.sess.buffer_lint_with_diagnostic(\n+            builtin::BARE_TRAIT_OBJECT,\n+            id,\n+            span,\n+            \"trait objects without an explicit `dyn` are deprecated\",\n+            builtin::BuiltinLintDiagnostics::BareTraitObject(span, is_global),\n+        )\n     }\n \n     fn wrap_in_try_constructor("}, {"sha": "24892dfcc8f7d63d034b3dd15635990708235136", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -45,8 +45,8 @@\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![feature(drain_filter)]\n-#![feature(dyn_trait)]\n #![feature(entry_or_default)]\n+#![cfg_attr(stage0, feature(dyn_trait))]\n #![feature(from_ref)]\n #![feature(fs_read_write)]\n #![cfg_attr(windows, feature(libc))]"}, {"sha": "047d4bb893096103d38a4f6c3a6af6132ea3133d", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -979,6 +979,12 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                      ArgKind::Arg(format!(\"{}\", field.name), \"_\".to_string())\n                  }).collect::<Vec<_>>())\n             }\n+            hir::map::NodeStructCtor(ref variant_data) => {\n+                (self.tcx.sess.codemap().def_span(self.tcx.hir.span(variant_data.id())),\n+                 variant_data.fields()\n+                    .iter().map(|_| ArgKind::Arg(\"_\".to_owned(), \"_\".to_owned()))\n+                    .collect())\n+            }\n             _ => panic!(\"non-FnLike node found: {:?}\", node),\n         }\n     }"}, {"sha": "75b7a10097df4e0b5ac9f544b33134f067227b90", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -24,7 +24,7 @@ Rust MIR: a lowered representation of Rust. Also: an experiment!\n #![feature(const_fn)]\n #![feature(core_intrinsics)]\n #![feature(decl_macro)]\n-#![feature(dyn_trait)]\n+#![cfg_attr(stage0, feature(dyn_trait))]\n #![feature(fs_read_write)]\n #![feature(macro_vis_matcher)]\n #![feature(exhaustive_patterns)]"}, {"sha": "871fe98ec01879612afa2b7830f558ffaa05c3a8", "filename": "src/librustc_trans/allocator.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustc_trans%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustc_trans%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fallocator.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -11,6 +11,7 @@\n use std::ffi::CString;\n use std::ptr;\n \n+use attributes;\n use libc::c_uint;\n use rustc::middle::allocator::AllocatorKind;\n use rustc::ty::TyCtxt;\n@@ -67,6 +68,9 @@ pub(crate) unsafe fn trans(tcx: TyCtxt, mods: &ModuleLlvm, kind: AllocatorKind)\n         if tcx.sess.target.target.options.default_hidden_visibility {\n             llvm::LLVMRustSetVisibility(llfn, llvm::Visibility::Hidden);\n         }\n+       if tcx.sess.target.target.options.requires_uwtable {\n+           attributes::emit_uwtable(llfn, true);\n+       }\n \n         let callee = CString::new(kind.fn_name(method.name)).unwrap();\n         let callee = llvm::LLVMRustGetOrInsertFunction(llmod,"}, {"sha": "ea3f5b408604ee8f4afa1698589bc3f1b51bcac9", "filename": "src/librustc_trans/back/linker.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustc_trans%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustc_trans%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flinker.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -959,7 +959,11 @@ impl Linker for WasmLd {\n     }\n \n     fn finalize(&mut self) -> Command {\n-        self.cmd.arg(\"--threads\");\n+        // There have been reports in the wild (rustwasm/wasm-bindgen#119) of\n+        // using threads causing weird hangs and bugs. Disable it entirely as\n+        // this isn't yet the bottleneck of compilation at all anyway.\n+        self.cmd.arg(\"--no-threads\");\n+\n         self.cmd.arg(\"-z\").arg(\"stack-size=1048576\");\n \n         // FIXME we probably shouldn't pass this but instead pass an explicit"}, {"sha": "958960d3a36fd3660850b5d24cdcb72199f844eb", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -71,6 +71,8 @@ This API is completely unstable and subject to change.\n \n #![allow(non_camel_case_types)]\n \n+#![cfg_attr(stage0, feature(dyn_trait))]\n+\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n #![feature(crate_visibility_modifier)]\n@@ -81,7 +83,6 @@ This API is completely unstable and subject to change.\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]\n #![feature(slice_sort_by_cached_key)]\n-#![feature(dyn_trait)]\n #![feature(never_type)]\n \n #[macro_use] extern crate log;"}, {"sha": "5e93b20ea17fdb978b06693c5c38b4fb51c69bac", "filename": "src/librustdoc/html/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustdoc%2Fhtml%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Flayout.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -146,9 +146,9 @@ pub fn render<T: fmt::Display, S: fmt::Display>(\n         window.rootPath = \\\"{root_path}\\\";\\\n         window.currentCrate = \\\"{krate}\\\";\\\n     </script>\\\n+    <script src=\\\"{root_path}aliases.js\\\"></script>\\\n     <script src=\\\"{root_path}main{suffix}.js\\\"></script>\\\n     <script defer src=\\\"{root_path}search-index.js\\\"></script>\\\n-    <script defer src=\\\"{root_path}aliases.js\\\"></script>\\\n </body>\\\n </html>\",\n     css_extension = if css_file_extension {"}, {"sha": "8efb51bccd80529d909975bff4ef9a0e8fca6e2c", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -13,6 +13,8 @@\n        html_root_url = \"https://doc.rust-lang.org/nightly/\",\n        html_playground_url = \"https://play.rust-lang.org/\")]\n \n+#![cfg_attr(stage0, feature(dyn_trait))]\n+\n #![feature(ascii_ctype)]\n #![feature(rustc_private)]\n #![feature(box_patterns)]\n@@ -23,7 +25,6 @@\n #![feature(test)]\n #![feature(vec_remove_item)]\n #![feature(entry_and_modify)]\n-#![feature(dyn_trait)]\n \n extern crate arena;\n extern crate getopts;"}, {"sha": "a4a83712a083a730029d66aacb1542a13db6d45d", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -375,9 +375,6 @@ declare_features! (\n     // Future-proofing enums/structs with #[non_exhaustive] attribute (RFC 2008)\n     (active, non_exhaustive, \"1.22.0\", Some(44109), None),\n \n-    // Trait object syntax with `dyn` prefix\n-    (active, dyn_trait, \"1.22.0\", Some(44662), Some(Edition::Edition2018)),\n-\n     // `crate` as visibility modifier, synonymous to `pub(crate)`\n     (active, crate_visibility_modifier, \"1.23.0\", Some(45388), Some(Edition::Edition2018)),\n \n@@ -592,6 +589,8 @@ declare_features! (\n     (accepted, cfg_target_feature, \"1.27.0\", Some(29717), None),\n     // Allows #[target_feature(...)]\n     (accepted, target_feature, \"1.27.0\", None, None),\n+    // Trait object syntax with `dyn` prefix\n+    (accepted, dyn_trait, \"1.27.0\", Some(44662), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1657,10 +1656,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, never_type, ty.span,\n                                    \"The `!` type is experimental\");\n             }\n-            ast::TyKind::TraitObject(_, ast::TraitObjectSyntax::Dyn) => {\n-                gate_feature_post!(&self, dyn_trait, ty.span,\n-                                   \"`dyn Trait` syntax is unstable\");\n-            }\n             _ => {}\n         }\n         visit::walk_ty(self, ty)"}, {"sha": "658408519b9c7ead442eb045feb90ac82e258f1a", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -21,6 +21,7 @@ use symbol::{Ident, Symbol};\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n use std::collections::HashMap;\n+use rustc_data_structures::fx::FxHashSet;\n use std::fmt;\n \n /// A SyntaxContext represents a chain of macro expansions (represented by marks).\n@@ -117,6 +118,32 @@ impl Mark {\n             true\n         })\n     }\n+\n+    /// Computes a mark such that both input marks are descendants of (or equal to) the returned\n+    /// mark. That is, the following holds:\n+    ///\n+    /// ```rust\n+    /// let la = least_ancestor(a, b);\n+    /// assert!(a.is_descendant_of(la))\n+    /// assert!(b.is_descendant_of(la))\n+    /// ```\n+    pub fn least_ancestor(mut a: Mark, mut b: Mark) -> Mark {\n+        HygieneData::with(|data| {\n+            // Compute the path from a to the root\n+            let mut a_path = FxHashSet::<Mark>();\n+            while a != Mark::root() {\n+                a_path.insert(a);\n+                a = data.marks[a.0 as usize].parent;\n+            }\n+\n+            // While the path from b to the root hasn't intersected, move up the tree\n+            while !a_path.contains(&b) {\n+                b = data.marks[b.0 as usize].parent;\n+            }\n+\n+            b\n+        })\n+    }\n }\n \n pub struct HygieneData {\n@@ -238,6 +265,22 @@ impl SyntaxContext {\n         })\n     }\n \n+    /// Pulls a single mark off of the syntax context. This effectively moves the\n+    /// context up one macro definition level. That is, if we have a nested macro\n+    /// definition as follows:\n+    ///\n+    /// ```rust\n+    /// macro_rules! f {\n+    ///    macro_rules! g {\n+    ///        ...\n+    ///    }\n+    /// }\n+    /// ```\n+    ///\n+    /// and we have a SyntaxContext that is referring to something declared by an invocation\n+    /// of g (call it g1), calling remove_mark will result in the SyntaxContext for the\n+    /// invocation of f that created g1.\n+    /// Returns the mark that was removed.\n     pub fn remove_mark(&mut self) -> Mark {\n         HygieneData::with(|data| {\n             let outer_mark = data.syntax_contexts[self.0 as usize].outer_mark;"}, {"sha": "8d37b4aa3968f5c84deaa5cd3383eb13ba21e4d2", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -291,6 +291,12 @@ impl Span {\n         self.ctxt().outer().expn_info().map(|info| info.call_site.source_callsite()).unwrap_or(self)\n     }\n \n+    /// The `Span` for the tokens in the previous macro expansion from which `self` was generated,\n+    /// if any\n+    pub fn parent(self) -> Option<Span> {\n+        self.ctxt().outer().expn_info().map(|i| i.call_site)\n+    }\n+\n     /// Return the source callee.\n     ///\n     /// Returns None if the supplied span has no expansion trace,"}, {"sha": "250905dbdcd8ca91b9aaacfcb81588f60f43f27c", "filename": "src/test/compile-fail/attr-usage-inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fcompile-fail%2Fattr-usage-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fcompile-fail%2Fattr-usage-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-usage-inline.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -13,7 +13,7 @@\n #[inline]\n fn f() {}\n \n-#[inline] //~ ERROR: attribute should be applied to function\n+#[inline] //~ ERROR: attribute should be applied to function or closure\n struct S;\n \n fn main() {}"}, {"sha": "2891cd59e3e1f1f82f5e3d5102f48ea618248dba", "filename": "src/test/compile-fail/impl-trait/where-allowed.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimpl-trait%2Fwhere-allowed.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -10,7 +10,6 @@\n \n //! A simple test for testing many permutations of allowedness of\n //! impl Trait\n-#![feature(dyn_trait)]\n use std::fmt::Debug;\n \n // Allowed"}, {"sha": "2bd45deeab4df7e2d091c5941dafa0f977026143", "filename": "src/test/compile-fail/issue-31769.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fcompile-fail%2Fissue-31769.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fcompile-fail%2Fissue-31769.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-31769.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n fn main() {\n-    #[inline] struct Foo;  //~ ERROR attribute should be applied to function\n+    #[inline] struct Foo;  //~ ERROR attribute should be applied to function or closure\n     #[repr(C)] fn foo() {} //~ ERROR attribute should be applied to struct, enum or union\n }"}, {"sha": "0dfa9f6f0d3417f7c196d6590ed705ee9992a1ef", "filename": "src/test/compile-fail/issue-43988.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fcompile-fail%2Fissue-43988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fcompile-fail%2Fissue-43988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43988.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -14,12 +14,12 @@ fn main() {\n \n     #[inline]\n     let _a = 4;\n-    //~^^ ERROR attribute should be applied to function\n+    //~^^ ERROR attribute should be applied to function or closure\n \n \n     #[inline(XYZ)]\n     let _b = 4;\n-    //~^^ ERROR attribute should be applied to function\n+    //~^^ ERROR attribute should be applied to function or closure\n \n     #[repr(nothing)]\n     let _x = 0;\n@@ -40,7 +40,7 @@ fn main() {\n \n     #[inline(ABC)]\n     foo();\n-    //~^^ ERROR attribute should be applied to function\n+    //~^^ ERROR attribute should be applied to function or closure\n \n     let _z = #[repr] 1;\n     //~^ ERROR attribute should not be applied to an expression"}, {"sha": "a2c840a70980b5937970ca3d18cf03a20233370f", "filename": "src/test/compile-fail/mir_check_cast_unsize.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_unsize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_unsize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmir_check_cast_unsize.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -11,7 +11,6 @@\n // compile-flags: -Z borrowck=mir\n \n #![allow(dead_code)]\n-#![feature(dyn_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "1b1a238a941e50dc876311c5df1795d6c49af387", "filename": "src/test/compile-fail/trait-bounds-not-on-struct.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-not-on-struct.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(dyn_trait)]\n #![allow(bare_trait_object)]\n \n struct Foo;"}, {"sha": "66a6e6afed34b12952feeadd1c6712b61046efdd", "filename": "src/test/run-fail/rfc-1937-termination-trait/termination-trait-for-box-dyn-error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Frun-fail%2Frfc-1937-termination-trait%2Ftermination-trait-for-box-dyn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Frun-fail%2Frfc-1937-termination-trait%2Ftermination-trait-for-box-dyn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Frfc-1937-termination-trait%2Ftermination-trait-for-box-dyn-error.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -11,8 +11,6 @@\n // compile-pass\n // failure-status: 1\n \n-#![feature(dyn_trait)]\n-\n use std::error::Error;\n use std::io;\n "}, {"sha": "010667942424c6f3f4b10a53bfc37e8ba060f48f", "filename": "src/test/run-pass/dyn-trait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Frun-pass%2Fdyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Frun-pass%2Fdyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdyn-trait.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-pretty `dyn ::foo` parses differently in the current edition\n \n-#![feature(dyn_trait)]\n-\n use std::fmt::Display;\n \n static BYTE: u8 = 33;"}, {"sha": "8cbb7d21af7086748f4c7dc2fc13a1ddbaa8a43a", "filename": "src/test/run-pass/issue-49632.rs", "status": "renamed", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Frun-pass%2Fissue-49632.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Frun-pass%2Fissue-49632.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-49632.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,7 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-trait Trait {}\n-type A = Box<dyn Trait>; //~ ERROR `dyn Trait` syntax is unstable\n+#![feature(stmt_expr_attributes)]\n \n-fn main() {}\n+pub fn main() {\n+    let _x = #[inline(always)] || {};\n+    let _y = #[inline(never)] || {};\n+    let _z = #[inline] || {};\n+}", "previous_filename": "src/test/ui/feature-gate-dyn-trait.rs"}, {"sha": "183bb55353052140888580034783ebf0f58d85c8", "filename": "src/test/run-pass/rfc-1937-termination-trait/termination-trait-for-box-dyn-error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-box-dyn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-box-dyn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-1937-termination-trait%2Ftermination-trait-for-box-dyn-error.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(dyn_trait)]\n-\n use std::error::Error;\n \n fn main() -> Result<(), Box<dyn Error>> {"}, {"sha": "27d5d3645fdfc358dd20c034940cb1853aa28ec3", "filename": "src/test/ui/error-codes/E0518.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Ferror-codes%2FE0518.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Ferror-codes%2FE0518.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0518.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,19 +1,19 @@\n-error[E0518]: attribute should be applied to function\n+error[E0518]: attribute should be applied to function or closure\n   --> $DIR/E0518.rs:11:1\n    |\n LL | #[inline(always)] //~ ERROR: E0518\n    | ^^^^^^^^^^^^^^^^^\n LL | struct Foo;\n-   | ----------- not a function\n+   | ----------- not a function or closure\n \n-error[E0518]: attribute should be applied to function\n+error[E0518]: attribute should be applied to function or closure\n   --> $DIR/E0518.rs:14:1\n    |\n LL |   #[inline(never)] //~ ERROR: E0518\n    |   ^^^^^^^^^^^^^^^^\n LL | / impl Foo {\n LL | | }\n-   | |_- not a function\n+   | |_- not a function or closure\n \n error: aborting due to 2 previous errors\n "}, {"sha": "6e6bdf1cbf0deb26c0116fda4ff05685f044e377", "filename": "src/test/ui/feature-gate-dyn-trait.stderr", "status": "removed", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a9975254ee6510cd1360417d3d145b56fb70b2e7/src%2Ftest%2Fui%2Ffeature-gate-dyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a9975254ee6510cd1360417d3d145b56fb70b2e7/src%2Ftest%2Fui%2Ffeature-gate-dyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-dyn-trait.stderr?ref=a9975254ee6510cd1360417d3d145b56fb70b2e7", "patch": "@@ -1,11 +0,0 @@\n-error[E0658]: `dyn Trait` syntax is unstable (see issue #44662)\n-  --> $DIR/feature-gate-dyn-trait.rs:12:14\n-   |\n-LL | type A = Box<dyn Trait>; //~ ERROR `dyn Trait` syntax is unstable\n-   |              ^^^^^^^^^\n-   |\n-   = help: add #![feature(dyn_trait)] to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "b03faad988ebc1c79093695feced71f553b8643b", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-inline.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -19,21 +19,21 @@\n #![inline                     = \"2100\"]\n \n #[inline = \"2100\"]\n-//~^ ERROR attribute should be applied to function\n+//~^ ERROR attribute should be applied to function or closure\n mod inline {\n     mod inner { #![inline=\"2100\"] }\n-    //~^ ERROR attribute should be applied to function\n+    //~^ ERROR attribute should be applied to function or closure\n \n     #[inline = \"2100\"] fn f() { }\n \n     #[inline = \"2100\"] struct S;\n-    //~^ ERROR attribute should be applied to function\n+    //~^ ERROR attribute should be applied to function or closure\n \n     #[inline = \"2100\"] type T = S;\n-    //~^ ERROR attribute should be applied to function\n+    //~^ ERROR attribute should be applied to function or closure\n \n     #[inline = \"2100\"] impl S { }\n-    //~^ ERROR attribute should be applied to function\n+    //~^ ERROR attribute should be applied to function or closure\n }\n \n fn main() {}"}, {"sha": "4d63c3f50125d4348489c8fd583aea6111e7ce4f", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-inline.stderr", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-inline.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,41 +1,41 @@\n-error[E0518]: attribute should be applied to function\n+error[E0518]: attribute should be applied to function or closure\n   --> $DIR/issue-43106-gating-of-inline.rs:21:1\n    |\n LL |   #[inline = \"2100\"]\n    |   ^^^^^^^^^^^^^^^^^^\n-LL |   //~^ ERROR attribute should be applied to function\n+LL |   //~^ ERROR attribute should be applied to function or closure\n LL | / mod inline {\n LL | |     mod inner { #![inline=\"2100\"] }\n-LL | |     //~^ ERROR attribute should be applied to function\n+LL | |     //~^ ERROR attribute should be applied to function or closure\n LL | |\n ...  |\n-LL | |     //~^ ERROR attribute should be applied to function\n+LL | |     //~^ ERROR attribute should be applied to function or closure\n LL | | }\n-   | |_- not a function\n+   | |_- not a function or closure\n \n-error[E0518]: attribute should be applied to function\n+error[E0518]: attribute should be applied to function or closure\n   --> $DIR/issue-43106-gating-of-inline.rs:24:17\n    |\n LL |     mod inner { #![inline=\"2100\"] }\n-   |     ------------^^^^^^^^^^^^^^^^^-- not a function\n+   |     ------------^^^^^^^^^^^^^^^^^-- not a function or closure\n \n-error[E0518]: attribute should be applied to function\n+error[E0518]: attribute should be applied to function or closure\n   --> $DIR/issue-43106-gating-of-inline.rs:29:5\n    |\n LL |     #[inline = \"2100\"] struct S;\n-   |     ^^^^^^^^^^^^^^^^^^ --------- not a function\n+   |     ^^^^^^^^^^^^^^^^^^ --------- not a function or closure\n \n-error[E0518]: attribute should be applied to function\n+error[E0518]: attribute should be applied to function or closure\n   --> $DIR/issue-43106-gating-of-inline.rs:32:5\n    |\n LL |     #[inline = \"2100\"] type T = S;\n-   |     ^^^^^^^^^^^^^^^^^^ ----------- not a function\n+   |     ^^^^^^^^^^^^^^^^^^ ----------- not a function or closure\n \n-error[E0518]: attribute should be applied to function\n+error[E0518]: attribute should be applied to function or closure\n   --> $DIR/issue-43106-gating-of-inline.rs:35:5\n    |\n LL |     #[inline = \"2100\"] impl S { }\n-   |     ^^^^^^^^^^^^^^^^^^ ---------- not a function\n+   |     ^^^^^^^^^^^^^^^^^^ ---------- not a function or closure\n \n error: aborting due to 5 previous errors\n "}, {"sha": "57a0040600a255d506e893c997c8b983494b9479", "filename": "src/test/ui/impl_trait_projections.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fimpl_trait_projections.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fimpl_trait_projections.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl_trait_projections.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -7,8 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(dyn_trait)]\n-\n use std::fmt::Debug;\n use std::option;\n "}, {"sha": "f6d58984ecef747ae3994640d005c6380d7ae928", "filename": "src/test/ui/impl_trait_projections.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl_trait_projections.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,29 +1,29 @@\n error[E0667]: `impl Trait` is not allowed in path parameters\n-  --> $DIR/impl_trait_projections.rs:23:51\n+  --> $DIR/impl_trait_projections.rs:21:51\n    |\n LL | fn projection_is_disallowed(x: impl Iterator) -> <impl Iterator>::Item {\n    |                                                   ^^^^^^^^^^^^^\n \n error[E0667]: `impl Trait` is not allowed in path parameters\n-  --> $DIR/impl_trait_projections.rs:30:9\n+  --> $DIR/impl_trait_projections.rs:28:9\n    |\n LL |     -> <impl Iterator as Iterator>::Item\n    |         ^^^^^^^^^^^^^\n \n error[E0667]: `impl Trait` is not allowed in path parameters\n-  --> $DIR/impl_trait_projections.rs:37:27\n+  --> $DIR/impl_trait_projections.rs:35:27\n    |\n LL |     -> <::std::ops::Range<impl Debug> as Iterator>::Item\n    |                           ^^^^^^^^^^\n \n error[E0667]: `impl Trait` is not allowed in path parameters\n-  --> $DIR/impl_trait_projections.rs:44:29\n+  --> $DIR/impl_trait_projections.rs:42:29\n    |\n LL |     -> <dyn Iterator<Item = impl Debug> as Iterator>::Item\n    |                             ^^^^^^^^^^\n \n error[E0223]: ambiguous associated type\n-  --> $DIR/impl_trait_projections.rs:23:50\n+  --> $DIR/impl_trait_projections.rs:21:50\n    |\n LL | fn projection_is_disallowed(x: impl Iterator) -> <impl Iterator>::Item {\n    |                                                  ^^^^^^^^^^^^^^^^^^^^^ ambiguous associated type"}, {"sha": "4cf7feddd46541376fbe52cd6b875e5cdf82d895", "filename": "src/test/ui/in-band-lifetimes/impl/dyn-trait.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,11 +1,11 @@\n warning: not reporting region error due to nll\n-  --> $DIR/dyn-trait.rs:33:16\n+  --> $DIR/dyn-trait.rs:32:16\n    |\n LL |     static_val(x); //~ ERROR cannot infer\n    |                ^\n \n error: free region `'a` does not outlive free region `'static`\n-  --> $DIR/dyn-trait.rs:33:5\n+  --> $DIR/dyn-trait.rs:32:5\n    |\n LL |     static_val(x); //~ ERROR cannot infer\n    |     ^^^^^^^^^^^^^"}, {"sha": "c27bbe77fbf19fba4c91d64a867de1384916169f", "filename": "src/test/ui/in-band-lifetimes/impl/dyn-trait.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -13,7 +13,6 @@\n \n #![allow(warnings)]\n \n-#![feature(dyn_trait)]\n #![feature(in_band_lifetimes)]\n \n use std::fmt::Debug;"}, {"sha": "201470abe674cde98effb422f391cf95108a27a3", "filename": "src/test/ui/in-band-lifetimes/impl/dyn-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,11 +1,11 @@\n error[E0495]: cannot infer an appropriate lifetime due to conflicting requirements\n-  --> $DIR/dyn-trait.rs:33:16\n+  --> $DIR/dyn-trait.rs:32:16\n    |\n LL |     static_val(x); //~ ERROR cannot infer\n    |                ^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 32:1...\n-  --> $DIR/dyn-trait.rs:32:1\n+note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 31:1...\n+  --> $DIR/dyn-trait.rs:31:1\n    |\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "9eb11148a8bcef45200484c0163c2371927fe782", "filename": "src/test/ui/mismatched_types/closure-arg-count.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -39,7 +39,13 @@ fn main() {\n \n     let _it = vec![1, 2, 3].into_iter().map(usize::checked_add);\n     //~^ ERROR function is expected to take\n+\n+    call(Foo);\n+    //~^ ERROR function is expected to take\n }\n \n fn foo() {}\n fn qux(x: usize, y: usize) {}\n+\n+fn call<F, R>(_: F) where F: FnOnce() -> R {}\n+struct Foo(u8);"}, {"sha": "6270e794498766f17fcba58f4b3e8e130e07b981", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 16, "deletions": 1, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -116,6 +116,21 @@ error[E0593]: function is expected to take 1 argument, but it takes 2 arguments\n LL |     let _it = vec![1, 2, 3].into_iter().map(usize::checked_add);\n    |                                         ^^^ expected function that takes 1 argument\n \n-error: aborting due to 12 previous errors\n+error[E0593]: function is expected to take 0 arguments, but it takes 1 argument\n+  --> $DIR/closure-arg-count.rs:43:5\n+   |\n+LL |     call(Foo);\n+   |     ^^^^ expected function that takes 0 arguments\n+...\n+LL | struct Foo(u8);\n+   | --------------- takes 1 argument\n+   |\n+note: required by `call`\n+  --> $DIR/closure-arg-count.rs:50:1\n+   |\n+LL | fn call<F, R>(_: F) where F: FnOnce() -> R {}\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 13 previous errors\n \n For more information about this error, try `rustc --explain E0593`."}, {"sha": "4767b75d89c1aab8517287f772c082b6e074295c", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -15,7 +15,6 @@\n // Iterator>::Item`, to be exact).\n \n #![allow(warnings)]\n-#![feature(dyn_trait)]\n #![feature(rustc_attrs)]\n \n trait Anything { }"}, {"sha": "3689ca74adb8c304dc0b29796a0def435feba9ed", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-closure.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-closure.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,17 +1,17 @@\n warning: not reporting region error due to nll\n-  --> $DIR/projection-no-regions-closure.rs:36:31\n+  --> $DIR/projection-no-regions-closure.rs:35:31\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                               ^^^^^^^^^^^^^^^^^^\n \n warning: not reporting region error due to nll\n-  --> $DIR/projection-no-regions-closure.rs:54:31\n+  --> $DIR/projection-no-regions-closure.rs:53:31\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                               ^^^^^^^^^^^^^^^^^^\n \n note: External requirements\n-  --> $DIR/projection-no-regions-closure.rs:36:23\n+  --> $DIR/projection-no-regions-closure.rs:35:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -26,15 +26,15 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n \n error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n-  --> $DIR/projection-no-regions-closure.rs:36:23\n+  --> $DIR/projection-no-regions-closure.rs:35:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: ReEarlyBound(0, 'a)`...\n \n note: No external requirements\n-  --> $DIR/projection-no-regions-closure.rs:32:1\n+  --> $DIR/projection-no-regions-closure.rs:31:1\n    |\n LL | / fn no_region<'a, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n LL | | where\n@@ -51,7 +51,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-no-regions-closure.rs:46:23\n+  --> $DIR/projection-no-regions-closure.rs:45:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -66,7 +66,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    = note: where <T as std::iter::Iterator>::Item: '_#2r\n \n note: No external requirements\n-  --> $DIR/projection-no-regions-closure.rs:42:1\n+  --> $DIR/projection-no-regions-closure.rs:41:1\n    |\n LL | / fn correct_region<'a, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n LL | | where\n@@ -82,7 +82,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-no-regions-closure.rs:54:23\n+  --> $DIR/projection-no-regions-closure.rs:53:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -98,15 +98,15 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    = note: where <T as std::iter::Iterator>::Item: '_#3r\n \n error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n-  --> $DIR/projection-no-regions-closure.rs:54:23\n+  --> $DIR/projection-no-regions-closure.rs:53:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: ReEarlyBound(0, 'a)`...\n \n note: No external requirements\n-  --> $DIR/projection-no-regions-closure.rs:50:1\n+  --> $DIR/projection-no-regions-closure.rs:49:1\n    |\n LL | / fn wrong_region<'a, 'b, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n LL | | where\n@@ -124,7 +124,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-no-regions-closure.rs:65:23\n+  --> $DIR/projection-no-regions-closure.rs:64:23\n    |\n LL |     with_signature(x, |mut y| Box::new(y.next()))\n    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -140,7 +140,7 @@ LL |     with_signature(x, |mut y| Box::new(y.next()))\n    = note: where <T as std::iter::Iterator>::Item: '_#3r\n \n note: No external requirements\n-  --> $DIR/projection-no-regions-closure.rs:60:1\n+  --> $DIR/projection-no-regions-closure.rs:59:1\n    |\n LL | / fn outlives_region<'a, 'b, T>(x: Box<T>) -> Box<dyn Anything + 'a>\n LL | | where"}, {"sha": "dea2daf7e8eeb9f40a9fea46854707c1e1ee9bc5", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -11,7 +11,6 @@\n // compile-flags:-Zborrowck=mir -Zverbose\n \n #![allow(warnings)]\n-#![feature(dyn_trait)]\n \n trait Anything { }\n "}, {"sha": "3199ec151335dbc08ea55ab622af0e1def56f3ad", "filename": "src/test/ui/nll/ty-outlives/projection-no-regions-fn.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-no-regions-fn.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,25 +1,25 @@\n warning: not reporting region error due to nll\n-  --> $DIR/projection-no-regions-fn.rs:24:5\n+  --> $DIR/projection-no-regions-fn.rs:23:5\n    |\n LL |     Box::new(x.next())\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: not reporting region error due to nll\n-  --> $DIR/projection-no-regions-fn.rs:40:5\n+  --> $DIR/projection-no-regions-fn.rs:39:5\n    |\n LL |     Box::new(x.next())\n    |     ^^^^^^^^^^^^^^^^^^\n \n error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n-  --> $DIR/projection-no-regions-fn.rs:24:5\n+  --> $DIR/projection-no-regions-fn.rs:23:5\n    |\n LL |     Box::new(x.next())\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as std::iter::Iterator>::Item: ReEarlyBound(0, 'a)`...\n \n error[E0309]: the associated type `<T as std::iter::Iterator>::Item` may not live long enough\n-  --> $DIR/projection-no-regions-fn.rs:40:5\n+  --> $DIR/projection-no-regions-fn.rs:39:5\n    |\n LL |     Box::new(x.next())\n    |     ^^^^^^^^^^^^^^^^^^"}, {"sha": "77024c4119ff95a3b2d63ecd15884c9fdf8babdd", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -25,7 +25,6 @@\n // compile-flags:-Zborrowck=mir -Zverbose\n \n #![allow(warnings)]\n-#![feature(dyn_trait)]\n #![feature(rustc_attrs)]\n \n use std::cell::Cell;"}, {"sha": "e1218830dbb64ee53dfedfb8545db3b0941f0a45", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-closure.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-closure.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,23 +1,23 @@\n warning: not reporting region error due to nll\n-  --> $DIR/projection-one-region-closure.rs:56:39\n+  --> $DIR/projection-one-region-closure.rs:55:39\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^\n \n warning: not reporting region error due to nll\n-  --> $DIR/projection-one-region-closure.rs:68:39\n+  --> $DIR/projection-one-region-closure.rs:67:39\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^\n \n warning: not reporting region error due to nll\n-  --> $DIR/projection-one-region-closure.rs:90:39\n+  --> $DIR/projection-one-region-closure.rs:89:39\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^\n \n note: External requirements\n-  --> $DIR/projection-one-region-closure.rs:56:29\n+  --> $DIR/projection-one-region-closure.rs:55:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -33,21 +33,21 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where '_#1r: '_#2r\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/projection-one-region-closure.rs:56:29\n+  --> $DIR/projection-one-region-closure.rs:55:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:8 ~ projection_one_region_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:16), 'a))`...\n \n error: free region `ReEarlyBound(0, 'b)` does not outlive free region `ReFree(DefId(0/0:8 ~ projection_one_region_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:16), 'a))`\n-  --> $DIR/projection-one-region-closure.rs:56:20\n+  --> $DIR/projection-one-region-closure.rs:55:20\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                    ^^^^\n \n note: No external requirements\n-  --> $DIR/projection-one-region-closure.rs:52:1\n+  --> $DIR/projection-one-region-closure.rs:51:1\n    |\n LL | / fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -64,7 +64,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-one-region-closure.rs:68:29\n+  --> $DIR/projection-one-region-closure.rs:67:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -81,21 +81,21 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where '_#2r: '_#3r\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/projection-one-region-closure.rs:68:29\n+  --> $DIR/projection-one-region-closure.rs:67:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n \n error: free region `ReEarlyBound(1, 'b)` does not outlive free region `ReEarlyBound(0, 'a)`\n-  --> $DIR/projection-one-region-closure.rs:68:20\n+  --> $DIR/projection-one-region-closure.rs:67:20\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                    ^^^^\n \n note: No external requirements\n-  --> $DIR/projection-one-region-closure.rs:63:1\n+  --> $DIR/projection-one-region-closure.rs:62:1\n    |\n LL | / fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -113,7 +113,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-one-region-closure.rs:90:29\n+  --> $DIR/projection-one-region-closure.rs:89:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -130,21 +130,21 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where '_#2r: '_#3r\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/projection-one-region-closure.rs:90:29\n+  --> $DIR/projection-one-region-closure.rs:89:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n \n error: free region `ReEarlyBound(1, 'b)` does not outlive free region `ReEarlyBound(0, 'a)`\n-  --> $DIR/projection-one-region-closure.rs:90:20\n+  --> $DIR/projection-one-region-closure.rs:89:20\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                    ^^^^\n \n note: No external requirements\n-  --> $DIR/projection-one-region-closure.rs:75:1\n+  --> $DIR/projection-one-region-closure.rs:74:1\n    |\n LL | / fn projection_outlives<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -162,7 +162,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-one-region-closure.rs:103:29\n+  --> $DIR/projection-one-region-closure.rs:102:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -179,7 +179,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where '_#2r: '_#3r\n \n note: No external requirements\n-  --> $DIR/projection-one-region-closure.rs:97:1\n+  --> $DIR/projection-one-region-closure.rs:96:1\n    |\n LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where"}, {"sha": "fb1009c9cc8e852b980fa65102f3441ad2ece902", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -17,7 +17,6 @@\n // compile-flags:-Zborrowck=mir -Zverbose\n \n #![allow(warnings)]\n-#![feature(dyn_trait)]\n #![feature(rustc_attrs)]\n \n use std::cell::Cell;"}, {"sha": "76554e29f62eac41ba9e161e730610f7905a10f1", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-closure.stderr", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-closure.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,23 +1,23 @@\n warning: not reporting region error due to nll\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:48:39\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:47:39\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^\n \n warning: not reporting region error due to nll\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:59:39\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:58:39\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^\n \n warning: not reporting region error due to nll\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:80:39\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:79:39\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^\n \n note: External requirements\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:48:29\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:47:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -32,13 +32,13 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where '_#1r: '_#2r\n \n error: free region `ReEarlyBound(0, 'b)` does not outlive free region `ReFree(DefId(0/0:8 ~ projection_one_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:16), 'a))`\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:48:20\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:47:20\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                    ^^^^\n \n note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:44:1\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:43:1\n    |\n LL | / fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -55,7 +55,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:59:29\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:58:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -71,13 +71,13 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where '_#2r: '_#3r\n \n error: free region `ReEarlyBound(1, 'b)` does not outlive free region `ReEarlyBound(0, 'a)`\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:59:20\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:58:20\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                    ^^^^\n \n note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:54:1\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:53:1\n    |\n LL | / fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -95,7 +95,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:80:29\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:79:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -111,13 +111,13 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where '_#2r: '_#3r\n \n error: free region `ReEarlyBound(1, 'b)` does not outlive free region `ReEarlyBound(0, 'a)`\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:80:20\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:79:20\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                    ^^^^\n \n note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:65:1\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:64:1\n    |\n LL | / fn projection_outlives<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -135,7 +135,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:91:29\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:90:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -151,7 +151,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where '_#2r: '_#3r\n \n note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:86:1\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:85:1\n    |\n LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -169,7 +169,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:103:29\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:102:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -184,7 +184,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where '_#1r: '_#2r\n \n note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-closure.rs:95:1\n+  --> $DIR/projection-one-region-trait-bound-closure.rs:94:1\n    |\n LL | / fn one_region<'a, T>(cell: Cell<&'a ()>, t: T)\n LL | | where"}, {"sha": "1f2f40196f8ee033805864d8c32dfb2cefa001c0", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -16,7 +16,6 @@\n // compile-pass\n \n #![allow(warnings)]\n-#![feature(dyn_trait)]\n #![feature(rustc_attrs)]\n \n use std::cell::Cell;"}, {"sha": "136e143e80edfab1dcc4c092d339b12e846c0870", "filename": "src/test/ui/nll/ty-outlives/projection-one-region-trait-bound-static-closure.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-one-region-trait-bound-static-closure.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,5 +1,5 @@\n note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-static-closure.rs:47:29\n+  --> $DIR/projection-one-region-trait-bound-static-closure.rs:46:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -12,7 +12,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n            ]\n \n note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-static-closure.rs:43:1\n+  --> $DIR/projection-one-region-trait-bound-static-closure.rs:42:1\n    |\n LL | / fn no_relationships_late<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -28,7 +28,7 @@ LL | | }\n            ]\n \n note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-static-closure.rs:56:29\n+  --> $DIR/projection-one-region-trait-bound-static-closure.rs:55:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -42,7 +42,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n            ]\n \n note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-static-closure.rs:51:1\n+  --> $DIR/projection-one-region-trait-bound-static-closure.rs:50:1\n    |\n LL | / fn no_relationships_early<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -60,7 +60,7 @@ LL | | }\n            ]\n \n note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-static-closure.rs:75:29\n+  --> $DIR/projection-one-region-trait-bound-static-closure.rs:74:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -74,7 +74,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n            ]\n \n note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-static-closure.rs:60:1\n+  --> $DIR/projection-one-region-trait-bound-static-closure.rs:59:1\n    |\n LL | / fn projection_outlives<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -92,7 +92,7 @@ LL | | }\n            ]\n \n note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-static-closure.rs:84:29\n+  --> $DIR/projection-one-region-trait-bound-static-closure.rs:83:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -106,7 +106,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n            ]\n \n note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-static-closure.rs:79:1\n+  --> $DIR/projection-one-region-trait-bound-static-closure.rs:78:1\n    |\n LL | / fn elements_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -124,7 +124,7 @@ LL | | }\n            ]\n \n note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-static-closure.rs:96:29\n+  --> $DIR/projection-one-region-trait-bound-static-closure.rs:95:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -137,7 +137,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n            ]\n \n note: No external requirements\n-  --> $DIR/projection-one-region-trait-bound-static-closure.rs:88:1\n+  --> $DIR/projection-one-region-trait-bound-static-closure.rs:87:1\n    |\n LL | / fn one_region<'a, T>(cell: Cell<&'a ()>, t: T)\n LL | | where"}, {"sha": "5307d0880d4dad27f673d5d0fb9b51b4d540a224", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -18,7 +18,6 @@\n // compile-flags:-Zborrowck=mir -Zverbose\n \n #![allow(warnings)]\n-#![feature(dyn_trait)]\n #![feature(rustc_attrs)]\n \n use std::cell::Cell;"}, {"sha": "c7f456929609e841db440ecdc19913ebe727ba51", "filename": "src/test/ui/nll/ty-outlives/projection-two-region-trait-bound-closure.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fprojection-two-region-trait-bound-closure.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,29 +1,29 @@\n warning: not reporting region error due to nll\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:49:39\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:48:39\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^\n \n warning: not reporting region error due to nll\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:60:39\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:59:39\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^\n \n warning: not reporting region error due to nll\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:81:39\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:80:39\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^\n \n warning: not reporting region error due to nll\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:109:39\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:108:39\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                                       ^^^^^^^\n \n note: External requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:49:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -39,15 +39,15 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n error[E0309]: the associated type `<T as Anything<'_#5r, '_#6r>>::AssocType` may not live long enough\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:49:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:48:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Anything<'_#5r, '_#6r>>::AssocType: ReFree(DefId(0/0:8 ~ projection_two_region_trait_bound_closure[317d]::no_relationships_late[0]), BrNamed(crate0:DefIndex(1:18), 'a))`...\n \n note: No external requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:45:1\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:44:1\n    |\n LL | / fn no_relationships_late<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -65,7 +65,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:60:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:59:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -82,15 +82,15 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:60:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:59:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReEarlyBound(0, 'a)`...\n \n note: No external requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:55:1\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:54:1\n    |\n LL | / fn no_relationships_early<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -109,7 +109,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:81:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:80:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -126,15 +126,15 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n error[E0309]: the associated type `<T as Anything<'_#6r, '_#7r>>::AssocType` may not live long enough\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:81:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:80:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `<T as Anything<'_#6r, '_#7r>>::AssocType: ReEarlyBound(0, 'a)`...\n \n note: No external requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:66:1\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:65:1\n    |\n LL | / fn projection_outlives<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -153,7 +153,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:92:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:91:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -170,7 +170,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n note: No external requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:87:1\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:86:1\n    |\n LL | / fn elements_outlive1<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -189,7 +189,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:101:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:100:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -206,7 +206,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#3r)>>::AssocType: '_#4r\n \n note: No external requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:96:1\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:95:1\n    |\n LL | / fn elements_outlive2<'a, 'b, 'c, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -225,7 +225,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:109:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:108:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -240,13 +240,13 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n \n error: free region `ReEarlyBound(0, 'b)` does not outlive free region `ReFree(DefId(0/0:13 ~ projection_two_region_trait_bound_closure[317d]::two_regions[0]), BrNamed(crate0:DefIndex(1:43), 'a))`\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:109:20\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:108:20\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                    ^^^^\n \n note: No external requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:105:1\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:104:1\n    |\n LL | / fn two_regions<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -263,7 +263,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:120:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:119:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -279,7 +279,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where <T as Anything<ReClosureBound('_#2r), ReClosureBound('_#2r)>>::AssocType: '_#3r\n \n note: No external requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:115:1\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:114:1\n    |\n LL | / fn two_regions_outlive<'a, 'b, T>(cell: Cell<&'a ()>, t: T)\n LL | | where\n@@ -297,7 +297,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:132:29\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:131:29\n    |\n LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -312,7 +312,7 @@ LL |     with_signature(cell, t, |cell, t| require(cell, t));\n    = note: where <T as Anything<ReClosureBound('_#1r), ReClosureBound('_#1r)>>::AssocType: '_#2r\n \n note: No external requirements\n-  --> $DIR/projection-two-region-trait-bound-closure.rs:124:1\n+  --> $DIR/projection-two-region-trait-bound-closure.rs:123:1\n    |\n LL | / fn one_region<'a, T>(cell: Cell<&'a ()>, t: T)\n LL | | where"}, {"sha": "7ff4b484af17bed565cc30144f14892dbf6a2b57", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -11,7 +11,6 @@\n // compile-flags:-Zborrowck=mir -Zverbose\n \n #![allow(warnings)]\n-#![feature(dyn_trait)]\n #![feature(rustc_attrs)]\n \n use std::cell::Cell;"}, {"sha": "b4f51401a90f6534515efca6f445c1f43f10c5e4", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-approximate-lower-bound.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-approximate-lower-bound.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,23 +1,23 @@\n warning: not reporting region error due to nll\n-  --> $DIR/ty-param-closure-approximate-lower-bound.rs:35:31\n+  --> $DIR/ty-param-closure-approximate-lower-bound.rs:34:31\n    |\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                               ^^^^^^^^^^^^\n \n warning: not reporting region error due to nll\n-  --> $DIR/ty-param-closure-approximate-lower-bound.rs:43:31\n+  --> $DIR/ty-param-closure-approximate-lower-bound.rs:42:31\n    |\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                               ^^^^^^\n \n warning: not reporting region error due to nll\n-  --> $DIR/ty-param-closure-approximate-lower-bound.rs:43:31\n+  --> $DIR/ty-param-closure-approximate-lower-bound.rs:42:31\n    |\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                               ^^^^^^^^^^^^\n \n note: External requirements\n-  --> $DIR/ty-param-closure-approximate-lower-bound.rs:35:24\n+  --> $DIR/ty-param-closure-approximate-lower-bound.rs:34:24\n    |\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n@@ -31,7 +31,7 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    = note: where T: '_#1r\n \n note: No external requirements\n-  --> $DIR/ty-param-closure-approximate-lower-bound.rs:33:1\n+  --> $DIR/ty-param-closure-approximate-lower-bound.rs:32:1\n    |\n LL | / fn generic<T>(value: T) {\n LL | |     let cell = Cell::new(&());\n@@ -47,7 +47,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/ty-param-closure-approximate-lower-bound.rs:43:24\n+  --> $DIR/ty-param-closure-approximate-lower-bound.rs:42:24\n    |\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n@@ -61,15 +61,15 @@ LL |     twice(cell, value, |a, b| invoke(a, b));\n    = note: where T: '_#1r\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/ty-param-closure-approximate-lower-bound.rs:43:24\n+  --> $DIR/ty-param-closure-approximate-lower-bound.rs:42:24\n    |\n LL |     twice(cell, value, |a, b| invoke(a, b));\n    |                        ^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:6 ~ ty_param_closure_approximate_lower_bound[317d]::generic_fail[0]), BrNamed(crate0:DefIndex(1:15), 'a))`...\n \n note: No external requirements\n-  --> $DIR/ty-param-closure-approximate-lower-bound.rs:42:1\n+  --> $DIR/ty-param-closure-approximate-lower-bound.rs:41:1\n    |\n LL | / fn generic_fail<'a, T>(cell: Cell<&'a ()>, value: T) {\n LL | |     twice(cell, value, |a, b| invoke(a, b));"}, {"sha": "b5cbd07b99c18fb67a34775cabdd3ea693259d99", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -11,7 +11,6 @@\n // compile-flags:-Zborrowck=mir -Zverbose\n \n #![allow(warnings)]\n-#![feature(dyn_trait)]\n #![feature(rustc_attrs)]\n \n use std::fmt::Debug;"}, {"sha": "59a8a39a7b0857359cbf8d220c3b6ee4ed7053cf", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-return-type.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-return-type.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,17 +1,17 @@\n warning: not reporting region error due to nll\n-  --> $DIR/ty-param-closure-outlives-from-return-type.rs:37:27\n+  --> $DIR/ty-param-closure-outlives-from-return-type.rs:36:27\n    |\n LL |     with_signature(x, |y| y)\n    |                           ^\n \n warning: not reporting region error due to nll\n-  --> $DIR/ty-param-closure-outlives-from-return-type.rs:53:5\n+  --> $DIR/ty-param-closure-outlives-from-return-type.rs:52:5\n    |\n LL |     x\n    |     ^\n \n note: External requirements\n-  --> $DIR/ty-param-closure-outlives-from-return-type.rs:37:23\n+  --> $DIR/ty-param-closure-outlives-from-return-type.rs:36:23\n    |\n LL |     with_signature(x, |y| y)\n    |                       ^^^^^\n@@ -26,15 +26,15 @@ LL |     with_signature(x, |y| y)\n    = note: where T: '_#2r\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/ty-param-closure-outlives-from-return-type.rs:37:23\n+  --> $DIR/ty-param-closure-outlives-from-return-type.rs:36:23\n    |\n LL |     with_signature(x, |y| y)\n    |                       ^^^^^\n    |\n    = help: consider adding an explicit lifetime bound `T: ReEarlyBound(0, 'a)`...\n \n note: No external requirements\n-  --> $DIR/ty-param-closure-outlives-from-return-type.rs:26:1\n+  --> $DIR/ty-param-closure-outlives-from-return-type.rs:25:1\n    |\n LL | / fn no_region<'a, T>(x: Box<T>) -> Box<dyn Debug + 'a>\n LL | | where\n@@ -51,7 +51,7 @@ LL | | }\n            ]\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/ty-param-closure-outlives-from-return-type.rs:53:5\n+  --> $DIR/ty-param-closure-outlives-from-return-type.rs:52:5\n    |\n LL |     x\n    |     ^"}, {"sha": "edaaeac080d4df999d6a34893a2fea66f27f3cc6", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -15,7 +15,6 @@\n // compile-flags:-Zborrowck=mir -Zverbose\n \n #![allow(warnings)]\n-#![feature(dyn_trait)]\n #![feature(rustc_attrs)]\n \n use std::cell::Cell;"}, {"sha": "a53ce21b7e6d22d253754d85fefe7279f65f2c84", "filename": "src/test/ui/nll/ty-outlives/ty-param-closure-outlives-from-where-clause.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-closure-outlives-from-where-clause.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,17 +1,17 @@\n warning: not reporting region error due to nll\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:45:9\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:44:9\n    |\n LL |         require(&x, &y)\n    |         ^^^^^^^\n \n warning: not reporting region error due to nll\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:79:9\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:78:9\n    |\n LL |         require(&x, &y)\n    |         ^^^^^^^\n \n note: External requirements\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:38:26\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:37:26\n    |\n LL |       with_signature(a, b, |x, y| {\n    |  __________________________^\n@@ -32,7 +32,7 @@ LL | |     })\n    = note: where T: '_#1r\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:38:26\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:37:26\n    |\n LL |       with_signature(a, b, |x, y| {\n    |  __________________________^\n@@ -47,7 +47,7 @@ LL | |     })\n    = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:6 ~ ty_param_closure_outlives_from_where_clause[317d]::no_region[0]), BrNamed(crate0:DefIndex(1:14), 'a))`...\n \n note: No external requirements\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:37:1\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:36:1\n    |\n LL | / fn no_region<'a, T>(a: Cell<&'a ()>, b: T) {\n LL | |     with_signature(a, b, |x, y| {\n@@ -63,7 +63,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:55:26\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:54:26\n    |\n LL |       with_signature(a, b, |x, y| {\n    |  __________________________^\n@@ -85,7 +85,7 @@ LL | |     })\n    = note: where T: '_#2r\n \n note: No external requirements\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:51:1\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:50:1\n    |\n LL | / fn correct_region<'a, T>(a: Cell<&'a ()>, b: T)\n LL | | where\n@@ -102,7 +102,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:76:26\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:75:26\n    |\n LL |       with_signature(a, b, |x, y| {\n    |  __________________________^\n@@ -123,7 +123,7 @@ LL | |     })\n    = note: where T: '_#2r\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:76:26\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:75:26\n    |\n LL |       with_signature(a, b, |x, y| {\n    |  __________________________^\n@@ -137,7 +137,7 @@ LL | |     })\n    = help: consider adding an explicit lifetime bound `T: ReFree(DefId(0/0:8 ~ ty_param_closure_outlives_from_where_clause[317d]::wrong_region[0]), BrNamed(crate0:DefIndex(1:20), 'a))`...\n \n note: No external requirements\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:72:1\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:71:1\n    |\n LL | / fn wrong_region<'a, 'b, T>(a: Cell<&'a ()>, b: T)\n LL | | where\n@@ -154,7 +154,7 @@ LL | | }\n            ]\n \n note: External requirements\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:90:26\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:89:26\n    |\n LL |       with_signature(a, b, |x, y| {\n    |  __________________________^\n@@ -174,7 +174,7 @@ LL | |     })\n    = note: where T: '_#3r\n \n note: No external requirements\n-  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:85:1\n+  --> $DIR/ty-param-closure-outlives-from-where-clause.rs:84:1\n    |\n LL | / fn outlives_region<'a, 'b, T>(a: Cell<&'a ()>, b: T)\n LL | | where"}, {"sha": "c0c483b3957d42bbf6af4296c7adf7ba14324e82", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn-body-nll-feature.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body-nll-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body-nll-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body-nll-feature.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -15,7 +15,6 @@\n #![feature(nll)]\n \n #![allow(warnings)]\n-#![feature(dyn_trait)]\n \n use std::cell::Cell;\n "}, {"sha": "dec15f47a03012cb5f1431bd79f6c26a75ff26ca", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn-body-nll-feature.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body-nll-feature.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body-nll-feature.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body-nll-feature.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,5 +1,5 @@\n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/ty-param-fn-body-nll-feature.rs:31:5\n+  --> $DIR/ty-param-fn-body-nll-feature.rs:30:5\n    |\n LL |     outlives(cell, t)\n    |     ^^^^^^^^^^^^^^^^^"}, {"sha": "6226108ef196f1e0a7fc809868d7275305020044", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn-body.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -14,7 +14,6 @@\n // function body.\n \n #![allow(warnings)]\n-#![feature(dyn_trait)]\n \n use std::cell::Cell;\n "}, {"sha": "537f12234708e2ccc174f398f388276adb553990", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn-body.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn-body.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,11 +1,11 @@\n warning: not reporting region error due to nll\n-  --> $DIR/ty-param-fn-body.rs:30:5\n+  --> $DIR/ty-param-fn-body.rs:29:5\n    |\n LL |     outlives(cell, t)\n    |     ^^^^^^^^\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/ty-param-fn-body.rs:30:5\n+  --> $DIR/ty-param-fn-body.rs:29:5\n    |\n LL |     outlives(cell, t)\n    |     ^^^^^^^^^^^^^^^^^"}, {"sha": "258d77eb2b078eef79f3deb837e090a86bdaaa78", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -11,7 +11,6 @@\n // compile-flags:-Zborrowck=mir\n \n #![allow(warnings)]\n-#![feature(dyn_trait)]\n \n use std::fmt::Debug;\n "}, {"sha": "5ce50d8118578f0b6bcbd50fd5a5a02327dbae53", "filename": "src/test/ui/nll/ty-outlives/ty-param-fn.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fty-outlives%2Fty-param-fn.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,25 +1,25 @@\n warning: not reporting region error due to nll\n-  --> $DIR/ty-param-fn.rs:22:5\n+  --> $DIR/ty-param-fn.rs:21:5\n    |\n LL |     x\n    |     ^\n \n warning: not reporting region error due to nll\n-  --> $DIR/ty-param-fn.rs:38:5\n+  --> $DIR/ty-param-fn.rs:37:5\n    |\n LL |     x\n    |     ^\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/ty-param-fn.rs:22:5\n+  --> $DIR/ty-param-fn.rs:21:5\n    |\n LL |     x\n    |     ^\n    |\n    = help: consider adding an explicit lifetime bound `T: 'a`...\n \n error[E0309]: the parameter type `T` may not live long enough\n-  --> $DIR/ty-param-fn.rs:38:5\n+  --> $DIR/ty-param-fn.rs:37:5\n    |\n LL |     x\n    |     ^"}, {"sha": "9bb6653d770803e7065064a2696ab99ee3e5bbe1", "filename": "src/test/ui/raw-literal-keywords.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fraw-literal-keywords.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fraw-literal-keywords.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-literal-keywords.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -10,7 +10,6 @@\n \n // compile-flags: -Z parse-only\n \n-#![feature(dyn_trait)]\n #![feature(raw_identifiers)]\n \n fn test_if() {"}, {"sha": "022f80ae8a4ecb31ba854774a2e9a7b961dd8b8d", "filename": "src/test/ui/raw-literal-keywords.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fraw-literal-keywords.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Fraw-literal-keywords.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fraw-literal-keywords.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,17 +1,17 @@\n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `true`\n-  --> $DIR/raw-literal-keywords.rs:17:10\n+  --> $DIR/raw-literal-keywords.rs:16:10\n    |\n LL |     r#if true { } //~ ERROR found `true`\n    |          ^^^^ expected one of 8 possible tokens here\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `Test`\n-  --> $DIR/raw-literal-keywords.rs:21:14\n+  --> $DIR/raw-literal-keywords.rs:20:14\n    |\n LL |     r#struct Test; //~ ERROR found `Test`\n    |              ^^^^ expected one of 8 possible tokens here\n \n error: expected one of `!`, `.`, `::`, `;`, `?`, `{`, `}`, or an operator, found `Test`\n-  --> $DIR/raw-literal-keywords.rs:25:13\n+  --> $DIR/raw-literal-keywords.rs:24:13\n    |\n LL |     r#union Test; //~ ERROR found `Test`\n    |             ^^^^ expected one of 8 possible tokens here"}, {"sha": "6c83205d0504c593667707aa57dcb6abeb147897", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore-in-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -13,8 +13,6 @@\n //\n // cc #48468\n \n-#![feature(dyn_trait)]\n-\n use std::fmt::Debug;\n \n struct Foo {"}, {"sha": "1017217828a7bbd98f097def50719d00113d75d4", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore-in-struct.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore-in-struct.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,11 +1,11 @@\n error[E0106]: missing lifetime specifier\n-  --> $DIR/dyn-trait-underscore-in-struct.rs:21:24\n+  --> $DIR/dyn-trait-underscore-in-struct.rs:19:24\n    |\n LL |     x: Box<dyn Debug + '_>, //~ ERROR missing lifetime specifier\n    |                        ^^ expected lifetime parameter\n \n error[E0228]: the lifetime bound for this object type cannot be deduced from context; please supply an explicit bound\n-  --> $DIR/dyn-trait-underscore-in-struct.rs:21:12\n+  --> $DIR/dyn-trait-underscore-in-struct.rs:19:12\n    |\n LL |     x: Box<dyn Debug + '_>, //~ ERROR missing lifetime specifier\n    |            ^^^^^^^^^^^^^^"}, {"sha": "cdc0c78e6941463cfa16390f5793deda1f671744", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.nll.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.nll.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,29 +1,29 @@\n warning: not reporting region error due to nll\n-  --> $DIR/dyn-trait-underscore.rs:20:14\n+  --> $DIR/dyn-trait-underscore.rs:18:14\n    |\n LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n    |              ^^^^^\n \n warning: not reporting region error due to nll\n-  --> $DIR/dyn-trait-underscore.rs:20:20\n+  --> $DIR/dyn-trait-underscore.rs:18:20\n    |\n LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n    |                    ^^^^\n \n warning: not reporting region error due to nll\n-  --> $DIR/dyn-trait-underscore.rs:20:5\n+  --> $DIR/dyn-trait-underscore.rs:18:5\n    |\n LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n    |     ^^^^^^^^\n \n warning: not reporting region error due to nll\n-  --> $DIR/dyn-trait-underscore.rs:20:5\n+  --> $DIR/dyn-trait-underscore.rs:18:5\n    |\n LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n error: free region `` does not outlive free region `'static`\n-  --> $DIR/dyn-trait-underscore.rs:18:52\n+  --> $DIR/dyn-trait-underscore.rs:16:52\n    |\n LL |   fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n    |  ____________________________________________________^"}, {"sha": "247492fb7b77b4125f79289f11a70484e1d9440b", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.rs?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -13,8 +13,6 @@\n //\n // cc #48468\n \n-#![feature(dyn_trait)]\n-\n fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime"}, {"sha": "98249d3f2b567cbfac23e87ff46a620e8dc97b8c", "filename": "src/test/ui/underscore-lifetime/dyn-trait-underscore.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/686d0ae137b1d66711694903607750ad54f60f69/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funderscore-lifetime%2Fdyn-trait-underscore.stderr?ref=686d0ae137b1d66711694903607750ad54f60f69", "patch": "@@ -1,19 +1,19 @@\n error[E0495]: cannot infer an appropriate lifetime for autoref due to conflicting requirements\n-  --> $DIR/dyn-trait-underscore.rs:20:20\n+  --> $DIR/dyn-trait-underscore.rs:18:20\n    |\n LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n    |                    ^^^^\n    |\n-note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the function body at 18:1...\n-  --> $DIR/dyn-trait-underscore.rs:18:1\n+note: first, the lifetime cannot outlive the anonymous lifetime #1 defined on the function body at 16:1...\n+  --> $DIR/dyn-trait-underscore.rs:16:1\n    |\n LL | / fn a<T>(items: &[T]) -> Box<dyn Iterator<Item=&T>> {\n LL | |     //                      ^^^^^^^^^^^^^^^^^^^^^ bound *here* defaults to `'static`\n LL | |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n LL | | }\n    | |_^\n note: ...so that reference does not outlive borrowed content\n-  --> $DIR/dyn-trait-underscore.rs:20:14\n+  --> $DIR/dyn-trait-underscore.rs:18:14\n    |\n LL |     Box::new(items.iter()) //~ ERROR cannot infer an appropriate lifetime\n    |              ^^^^^"}]}