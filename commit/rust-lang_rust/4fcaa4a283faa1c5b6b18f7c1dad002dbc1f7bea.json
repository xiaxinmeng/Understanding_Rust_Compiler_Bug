{"sha": "4fcaa4a283faa1c5b6b18f7c1dad002dbc1f7bea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmY2FhNGEyODNmYWExYzViNmIxOGY3YzFkYWQwMDJkYmMxZjdiZWE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-05T18:37:21Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-09T17:17:29Z"}, "message": "review comments", "tree": {"sha": "47bdb36d2db3cc2d0b81802666e1b9562743c2eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47bdb36d2db3cc2d0b81802666e1b9562743c2eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fcaa4a283faa1c5b6b18f7c1dad002dbc1f7bea", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fcaa4a283faa1c5b6b18f7c1dad002dbc1f7bea", "html_url": "https://github.com/rust-lang/rust/commit/4fcaa4a283faa1c5b6b18f7c1dad002dbc1f7bea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fcaa4a283faa1c5b6b18f7c1dad002dbc1f7bea/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "722bb515e2b5f93aad4cfdbc3de664af9ac445c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/722bb515e2b5f93aad4cfdbc3de664af9ac445c1", "html_url": "https://github.com/rust-lang/rust/commit/722bb515e2b5f93aad4cfdbc3de664af9ac445c1"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "3d473ec0bc7dc7db143074e9b8e210aa000d87ed", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4fcaa4a283faa1c5b6b18f7c1dad002dbc1f7bea/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcaa4a283faa1c5b6b18f7c1dad002dbc1f7bea/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=4fcaa4a283faa1c5b6b18f7c1dad002dbc1f7bea", "patch": "@@ -1053,6 +1053,13 @@ impl Mutability {\n             MutImmutable => MutImmutable,\n         }\n     }\n+\n+    pub fn not(self) -> Self {\n+        match self {\n+            MutMutable => MutImmutable,\n+            MutImmutable => MutMutable,\n+        }\n+    }\n }\n \n #[derive(Copy, Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, Hash, HashStable)]"}, {"sha": "5851a074fa3f16ac159202be730598635ab3597f", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4fcaa4a283faa1c5b6b18f7c1dad002dbc1f7bea/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcaa4a283faa1c5b6b18f7c1dad002dbc1f7bea/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=4fcaa4a283faa1c5b6b18f7c1dad002dbc1f7bea", "patch": "@@ -215,10 +215,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let mut needs_mut = false;\n         if let ty::Ref(region, t_type, mutability) = self_ty.kind {\n-            let trait_type = match mutability {\n-                hir::Mutability::MutMutable => self.tcx.mk_imm_ref(region, t_type),\n-                hir::Mutability::MutImmutable => self.tcx.mk_mut_ref(region, t_type),\n-            };\n+            let trait_type = self.tcx.mk_ref(region, ty::TypeAndMut {\n+                ty: t_type,\n+                mutbl: mutability.not(),\n+            });\n             match self.lookup_probe(\n                 span,\n                 segment.ident,"}, {"sha": "c3ca58c834dbc71f7764b6d7b15c5ee1cf32f54a", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4fcaa4a283faa1c5b6b18f7c1dad002dbc1f7bea/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fcaa4a283faa1c5b6b18f7c1dad002dbc1f7bea/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=4fcaa4a283faa1c5b6b18f7c1dad002dbc1f7bea", "patch": "@@ -564,24 +564,26 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let msg = format!(\"the `{}` method cannot be invoked on a trait object\", item_name);\n                 let mut err = self.sess().struct_span_err(span, &msg);\n                 if !candidates.is_empty() {\n-                    let help = format!(\"{an}other candidate{s} {were} found in the following \\\n-                                        trait{s}, perhaps add a `use` for {one_of_them}:\",\n-                                    an = if candidates.len() == 1 {\"an\" } else { \"\" },\n-                                    s = pluralise!(candidates.len()),\n-                                    were = if candidates.len() == 1 { \"was\" } else { \"were\" },\n-                                    one_of_them = if candidates.len() == 1 {\n-                                        \"it\"\n-                                    } else {\n-                                        \"one_of_them\"\n-                                    });\n+                    let help = format!(\n+                        \"{an}other candidate{s} {were} found in the following trait{s}, perhaps \\\n+                         add a `use` for {one_of_them}:\",\n+                        an = if candidates.len() == 1 {\"an\" } else { \"\" },\n+                        s = pluralise!(candidates.len()),\n+                        were = if candidates.len() == 1 { \"was\" } else { \"were\" },\n+                        one_of_them = if candidates.len() == 1 {\n+                            \"it\"\n+                        } else {\n+                            \"one_of_them\"\n+                        },\n+                    );\n                     self.suggest_use_candidates(&mut err, help, candidates);\n                 }\n                 if let ty::Ref(region, t_type, mutability) = rcvr_ty.kind {\n-                    let trait_type = match mutability {\n-                        hir::Mutability::MutMutable => self.tcx.mk_imm_ref(region, t_type),\n-                        hir::Mutability::MutImmutable => self.tcx.mk_mut_ref(region, t_type),\n-                    };\n                     if needs_mut {\n+                        let trait_type = self.tcx.mk_ref(region, ty::TypeAndMut {\n+                            ty: t_type,\n+                            mutbl: mutability.not(),\n+                        });\n                         err.note(&format!(\"you need `{}` instead of `{}`\", trait_type, rcvr_ty));\n                     }\n                 }"}]}