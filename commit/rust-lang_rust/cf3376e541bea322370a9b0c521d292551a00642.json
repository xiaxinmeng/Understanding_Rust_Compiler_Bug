{"sha": "cf3376e541bea322370a9b0c521d292551a00642", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMzM3NmU1NDFiZWEzMjIzNzBhOWIwYzUyMWQyOTI1NTFhMDA2NDI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-17T07:34:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-05-17T07:34:39Z"}, "message": "rustup", "tree": {"sha": "630d6a2e1c9b7df2cca2ba4df9611772e7edd1b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/630d6a2e1c9b7df2cca2ba4df9611772e7edd1b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf3376e541bea322370a9b0c521d292551a00642", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf3376e541bea322370a9b0c521d292551a00642", "html_url": "https://github.com/rust-lang/rust/commit/cf3376e541bea322370a9b0c521d292551a00642", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf3376e541bea322370a9b0c521d292551a00642/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c6fefa5f5acd93ad60ce51704652a2b134a640a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6fefa5f5acd93ad60ce51704652a2b134a640a3", "html_url": "https://github.com/rust-lang/rust/commit/c6fefa5f5acd93ad60ce51704652a2b134a640a3"}], "stats": {"total": 8, "additions": 3, "deletions": 5}, "files": [{"sha": "144ddc11968c7110bf51f4f53ffa150b173ae319", "filename": "benches/helpers/miri_helper.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf3376e541bea322370a9b0c521d292551a00642/benches%2Fhelpers%2Fmiri_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3376e541bea322370a9b0c521d292551a00642/benches%2Fhelpers%2Fmiri_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fhelpers%2Fmiri_helper.rs?ref=cf3376e541bea322370a9b0c521d292551a00642", "patch": "@@ -3,7 +3,6 @@ extern crate rustc_hir;\n extern crate rustc_interface;\n \n use rustc_driver::Compilation;\n-use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_interface::{interface, Queries};\n \n use crate::test::Bencher;\n@@ -22,7 +21,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls<'_> {\n \n         queries.global_ctxt().unwrap().peek_mut().enter(|tcx| {\n             let (entry_def_id, _) =\n-                tcx.entry_fn(LOCAL_CRATE).expect(\"no main or start function found\");\n+                tcx.entry_fn(()).expect(\"no main or start function found\");\n \n             self.bencher.iter(|| {\n                 let config = miri::MiriConfig::default();"}, {"sha": "600ef9d5a6e346f34c3eb0cb70f6aef8a6ada674", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf3376e541bea322370a9b0c521d292551a00642/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/cf3376e541bea322370a9b0c521d292551a00642/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=cf3376e541bea322370a9b0c521d292551a00642", "patch": "@@ -1 +1 @@\n-c6dd87a6b4a62cf5d2cb6207b1dcea652ea1aa60\n+3396a383bb1d1fdad8ceeb74f16cf08e0bd62a1b"}, {"sha": "4a1ea3a542862b30440d77e017fbf81e58c0fd57", "filename": "src/bin/miri.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf3376e541bea322370a9b0c521d292551a00642/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf3376e541bea322370a9b0c521d292551a00642/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=cf3376e541bea322370a9b0c521d292551a00642", "patch": "@@ -16,7 +16,6 @@ use log::debug;\n \n use rustc_driver::Compilation;\n use rustc_errors::emitter::{ColorConfig, HumanReadableErrorType};\n-use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::{config::ErrorOutputType, CtfeBacktrace};\n \n@@ -34,7 +33,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n \n         queries.global_ctxt().unwrap().peek_mut().enter(|tcx| {\n             init_late_loggers(tcx);\n-            let (entry_def_id, _) = if let Some((entry_def, x)) = tcx.entry_fn(LOCAL_CRATE) {\n+            let (entry_def_id, _) = if let Some((entry_def, x)) = tcx.entry_fn(()) {\n                 (entry_def, x)\n             } else {\n                 let output_ty = ErrorOutputType::HumanReadable(HumanReadableErrorType::Default("}]}