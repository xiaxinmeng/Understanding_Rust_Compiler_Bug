{"sha": "76755ce176222128c354647941cea65ac30ff4bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc2NzU1Y2UxNzYyMjIxMjhjMzU0NjQ3OTQxY2VhNjVhYzMwZmY0YmQ=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-26T01:34:39Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-06-26T15:11:51Z"}, "message": "Split glob import map to per-ns, switch ExprCollector to use a simpler push_res", "tree": {"sha": "c79df926033b6eb94522c5dcf6f17734640eeb13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c79df926033b6eb94522c5dcf6f17734640eeb13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/76755ce176222128c354647941cea65ac30ff4bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/76755ce176222128c354647941cea65ac30ff4bd", "html_url": "https://github.com/rust-lang/rust/commit/76755ce176222128c354647941cea65ac30ff4bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/76755ce176222128c354647941cea65ac30ff4bd/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de9e964e4ac21897bd48adbe37f379d74422919f", "url": "https://api.github.com/repos/rust-lang/rust/commits/de9e964e4ac21897bd48adbe37f379d74422919f", "html_url": "https://github.com/rust-lang/rust/commit/de9e964e4ac21897bd48adbe37f379d74422919f"}], "stats": {"total": 143, "additions": 110, "deletions": 33}, "files": [{"sha": "3ced648e56ffd9c9d255ac857f4f4b5d89821bf7", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/76755ce176222128c354647941cea65ac30ff4bd/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76755ce176222128c354647941cea65ac30ff4bd/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=76755ce176222128c354647941cea65ac30ff4bd", "patch": "@@ -26,7 +26,7 @@ use crate::{\n         dummy_expr_id, ArithOp, Array, BinaryOp, BindingAnnotation, CmpOp, Expr, ExprId, Literal,\n         LogicOp, MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n     },\n-    item_scope::{BuiltinShadowMode, ImportType},\n+    item_scope::BuiltinShadowMode,\n     item_tree::{FileItemTreeId, ItemTree, ItemTreeNode},\n     path::{GenericArgs, Path},\n     type_ref::{Mutability, Rawness, TypeRef},\n@@ -81,7 +81,6 @@ pub(super) fn lower(\n             map\n         },\n         expander,\n-        import_types: FxHashMap::default(),\n     }\n     .collect(params, body)\n }\n@@ -94,7 +93,6 @@ struct ExprCollector<'a> {\n     source_map: BodySourceMap,\n \n     item_trees: FxHashMap<HirFileId, Arc<ItemTree>>,\n-    import_types: FxHashMap<Name, ImportType>,\n }\n \n impl ExprCollector<'_> {\n@@ -713,10 +711,8 @@ impl ExprCollector<'_> {\n                     _ => true,\n                 };\n                 self.body.item_scope.push_res(\n-                    &mut self.import_types,\n                     name.as_name(),\n                     crate::per_ns::PerNs::from_def(def, vis, has_constructor),\n-                    ImportType::Named,\n                 );\n             }\n         }"}, {"sha": "d0923df6d8a4722a51c613c34c3969a57cc065fb", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 56, "deletions": 21, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/76755ce176222128c354647941cea65ac30ff4bd/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76755ce176222128c354647941cea65ac30ff4bd/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=76755ce176222128c354647941cea65ac30ff4bd", "patch": "@@ -4,12 +4,12 @@\n use hir_expand::name::Name;\n use once_cell::sync::Lazy;\n use ra_db::CrateId;\n-use rustc_hash::FxHashMap;\n+use rustc_hash::{FxHashMap, FxHashSet};\n use test_utils::mark;\n \n use crate::{\n     db::DefDatabase, per_ns::PerNs, visibility::Visibility, AdtId, BuiltinType, HasModule, ImplId,\n-    Lookup, MacroDefId, ModuleDefId, TraitId,\n+    LocalModuleId, Lookup, MacroDefId, ModuleDefId, TraitId,\n };\n \n #[derive(Copy, Clone)]\n@@ -19,13 +19,6 @@ pub(crate) enum ImportType {\n }\n \n impl ImportType {\n-    fn is_glob(&self) -> bool {\n-        match self {\n-            ImportType::Glob => true,\n-            ImportType::Named => false,\n-        }\n-    }\n-\n     fn is_named(&self) -> bool {\n         match self {\n             ImportType::Glob => false,\n@@ -34,6 +27,13 @@ impl ImportType {\n     }\n }\n \n+#[derive(Debug, Default)]\n+pub struct PerNsGlobImports {\n+    types: FxHashSet<(LocalModuleId, Name)>,\n+    values: FxHashSet<(LocalModuleId, Name)>,\n+    macros: FxHashSet<(LocalModuleId, Name)>,\n+}\n+\n #[derive(Debug, Default, PartialEq, Eq)]\n pub struct ItemScope {\n     visible: FxHashMap<Name, PerNs>,\n@@ -145,30 +145,65 @@ impl ItemScope {\n         self.legacy_macros.insert(name, mac);\n     }\n \n-    pub(crate) fn push_res(\n+    pub(crate) fn push_res(&mut self, name: Name, def: PerNs) -> bool {\n+        let mut changed = false;\n+        let existing = self.visible.entry(name).or_default();\n+\n+        if existing.types.is_none() && def.types.is_some() {\n+            existing.types = def.types;\n+            changed = true;\n+        }\n+\n+        if existing.values.is_none() && def.values.is_some() {\n+            existing.values = def.values;\n+            changed = true;\n+        }\n+\n+        if existing.macros.is_none() && def.macros.is_some() {\n+            existing.macros = def.macros;\n+            changed = true;\n+        }\n+\n+        changed\n+    }\n+\n+    pub(crate) fn push_res_with_import(\n         &mut self,\n-        existing_import_map: &mut FxHashMap<Name, ImportType>,\n-        name: Name,\n+        glob_imports: &mut PerNsGlobImports,\n+        lookup: (LocalModuleId, Name),\n         def: PerNs,\n         def_import_type: ImportType,\n     ) -> bool {\n         let mut changed = false;\n-        let existing = self.visible.entry(name.clone()).or_default();\n-        let existing_import_type = existing_import_map.entry(name).or_insert(def_import_type);\n+        let existing = self.visible.entry(lookup.1.clone()).or_default();\n \n         macro_rules! check_changed {\n-            ($changed:ident, ($existing:ident/$def:ident).$field:ident, $existing_import_type:ident, $def_import_type:ident) => {\n+            (\n+                $changed:ident,\n+                ( $existing:ident / $def:ident ) . $field:ident,\n+                $glob_imports:ident [ $lookup:ident ],\n+                $def_import_type:ident\n+            ) => {\n                 match ($existing.$field, $def.$field) {\n                     (None, Some(_)) => {\n-                        *existing_import_type = $def_import_type;\n+                        match $def_import_type {\n+                            ImportType::Glob => {\n+                                $glob_imports.$field.insert($lookup.clone());\n+                            }\n+                            ImportType::Named => {\n+                                $glob_imports.$field.remove(&$lookup);\n+                            }\n+                        }\n+\n                         $existing.$field = $def.$field;\n                         $changed = true;\n                     }\n                     (Some(_), Some(_))\n-                        if $existing_import_type.is_glob() && $def_import_type.is_named() =>\n+                        if $glob_imports.$field.contains(&$lookup)\n+                            && $def_import_type.is_named() =>\n                     {\n                         mark::hit!(import_shadowed);\n-                        *$existing_import_type = $def_import_type;\n+                        $glob_imports.$field.remove(&$lookup);\n                         $existing.$field = $def.$field;\n                         $changed = true;\n                     }\n@@ -177,9 +212,9 @@ impl ItemScope {\n             };\n         }\n \n-        check_changed!(changed, (existing / def).types, existing_import_type, def_import_type);\n-        check_changed!(changed, (existing / def).values, existing_import_type, def_import_type);\n-        check_changed!(changed, (existing / def).macros, existing_import_type, def_import_type);\n+        check_changed!(changed, (existing / def).types, glob_imports[lookup], def_import_type);\n+        check_changed!(changed, (existing / def).values, glob_imports[lookup], def_import_type);\n+        check_changed!(changed, (existing / def).macros, glob_imports[lookup], def_import_type);\n \n         changed\n     }"}, {"sha": "e74f67b3d9f07cdfce3979846832971274ea9dfa", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/76755ce176222128c354647941cea65ac30ff4bd/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76755ce176222128c354647941cea65ac30ff4bd/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=76755ce176222128c354647941cea65ac30ff4bd", "patch": "@@ -20,7 +20,7 @@ use test_utils::mark;\n use crate::{\n     attr::Attrs,\n     db::DefDatabase,\n-    item_scope::ImportType,\n+    item_scope::{ImportType, PerNsGlobImports},\n     item_tree::{\n         self, FileItemTreeId, ItemTree, ItemTreeId, MacroCall, Mod, ModItem, ModKind, StructDefKind,\n     },\n@@ -81,7 +81,7 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: CrateDefMap) -> Cr\n         mod_dirs: FxHashMap::default(),\n         cfg_options,\n         proc_macros,\n-        import_types: FxHashMap::default(),\n+        from_glob_import: Default::default(),\n     };\n     collector.collect();\n     collector.finish()\n@@ -188,7 +188,7 @@ struct DefCollector<'a> {\n     mod_dirs: FxHashMap<LocalModuleId, ModDir>,\n     cfg_options: &'a CfgOptions,\n     proc_macros: Vec<(Name, ProcMacroExpander)>,\n-    import_types: FxHashMap<Name, ImportType>,\n+    from_glob_import: PerNsGlobImports,\n }\n \n impl DefCollector<'_> {\n@@ -595,9 +595,9 @@ impl DefCollector<'_> {\n         let scope = &mut self.def_map.modules[module_id].scope;\n         let mut changed = false;\n         for (name, res) in resolutions {\n-            changed |= scope.push_res(\n-                &mut self.import_types,\n-                name.clone(),\n+            changed |= scope.push_res_with_import(\n+                &mut self.from_glob_import,\n+                (module_id, name.clone()),\n                 res.with_visibility(vis),\n                 import_type,\n             );\n@@ -1184,7 +1184,7 @@ mod tests {\n             mod_dirs: FxHashMap::default(),\n             cfg_options: &CfgOptions::default(),\n             proc_macros: Default::default(),\n-            import_types: FxHashMap::default(),\n+            from_glob_import: Default::default(),\n         };\n         collector.collect();\n         collector.def_map"}, {"sha": "7d8197f8b0200bd4a2cc4df4841c2d015548945f", "filename": "crates/ra_hir_ty/src/tests/simple.rs", "status": "modified", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/76755ce176222128c354647941cea65ac30ff4bd/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/76755ce176222128c354647941cea65ac30ff4bd/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fsimple.rs?ref=76755ce176222128c354647941cea65ac30ff4bd", "patch": "@@ -1739,6 +1739,52 @@ fn main() {\n     assert_eq!(t, \"u32\");\n }\n \n+// This test is actually testing the shadowing behavior within ra_hir_def. It\n+// lives here because the testing infrastructure in ra_hir_def isn't currently\n+// capable of asserting the necessary conditions.\n+#[test]\n+fn should_be_shadowing_imports() {\n+    let t = type_at(\n+        r#\"\n+mod a {\n+    pub fn foo() -> i8 {0}\n+    pub struct foo { a: i8 }\n+}\n+mod b { pub fn foo () -> u8 {0} }\n+mod c { pub struct foo { a: u8 } }\n+mod d {\n+    pub use super::a::*;\n+    pub use super::c::foo;\n+    pub use super::b::foo;\n+}\n+\n+fn main() {\n+    d::foo()<|>;\n+}\"#,\n+    );\n+    assert_eq!(t, \"u8\");\n+\n+    let t = type_at(\n+        r#\"\n+mod a {\n+    pub fn foo() -> i8 {0}\n+    pub struct foo { a: i8 }\n+}\n+mod b { pub fn foo () -> u8 {0} }\n+mod c { pub struct foo { a: u8 } }\n+mod d {\n+    pub use super::a::*;\n+    pub use super::c::foo;\n+    pub use super::b::foo;\n+}\n+\n+fn main() {\n+    d::foo{a:0<|>};\n+}\"#,\n+    );\n+    assert_eq!(t, \"u8\");\n+}\n+\n #[test]\n fn closure_return() {\n     assert_snapshot!("}]}