{"sha": "689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4OWVmMmRhYmZhM2IyYjM3OWM5NTNlNWZiNjhjZTJjODA1YzIyMzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-25T20:32:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-25T20:32:20Z"}, "message": "auto merge of #19255 : aturon/rust/merge-sync, r=alexcrichton,alexcrichton\n\nThis patch merges the `libsync` crate into `libstd`, undoing part of the\r\nfacade. This is in preparation for ultimately merging `librustrt`, as\r\nwell as the upcoming rewrite of `sync`.\r\n\r\nBecause this removes the `libsync` crate, it is a:\r\n\r\n[breaking-change]\r\n\r\nHowever, all uses of `libsync` should be able to reroute through\r\n`std::sync` and `std::comm` instead.\r\n\r\nr? @alexcrichton", "tree": {"sha": "76415678264ee616839facf83a997830dd45fee8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76415678264ee616839facf83a997830dd45fee8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "html_url": "https://github.com/rust-lang/rust/commit/689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0e06f71747749e33ca590c334658bddde97a7e54", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e06f71747749e33ca590c334658bddde97a7e54", "html_url": "https://github.com/rust-lang/rust/commit/0e06f71747749e33ca590c334658bddde97a7e54"}, {"sha": "985acfdb67d550d0259fcdcfbeed0a86ec3da9d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/985acfdb67d550d0259fcdcfbeed0a86ec3da9d0", "html_url": "https://github.com/rust-lang/rust/commit/985acfdb67d550d0259fcdcfbeed0a86ec3da9d0"}], "stats": {"total": 262, "additions": 103, "deletions": 159}, "files": [{"sha": "77cea02f43b733811fca4de307494316aee1c9e3", "filename": "mk/crates.mk", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "patch": "@@ -50,7 +50,7 @@\n ################################################################################\n \n TARGET_CRATES := libc std flate arena term \\\n-                 serialize sync getopts collections test time rand \\\n+                 serialize getopts collections test time rand \\\n                  log regex graphviz core rbml alloc rustrt \\\n                  unicode\n HOST_CRATES := syntax rustc rustc_trans rustdoc regex_macros fmt_macros \\\n@@ -63,7 +63,7 @@ DEPS_libc := core\n DEPS_unicode := core\n DEPS_alloc := core libc native:jemalloc\n DEPS_rustrt := alloc core libc collections native:rustrt_native\n-DEPS_std := core libc rand alloc collections rustrt sync unicode \\\n+DEPS_std := core libc rand alloc collections rustrt unicode \\\n \tnative:rust_builtin native:backtrace\n DEPS_graphviz := std\n DEPS_syntax := std term serialize log fmt_macros arena libc\n@@ -81,7 +81,6 @@ DEPS_glob := std\n DEPS_serialize := std log\n DEPS_rbml := std log serialize\n DEPS_term := std log\n-DEPS_sync := core alloc rustrt collections\n DEPS_getopts := std\n DEPS_collections := core alloc unicode\n DEPS_num := std"}, {"sha": "9162edcb53001631ede052c8a29b51564f6f8a1c", "filename": "src/etc/licenseck.py", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Fetc%2Flicenseck.py", "raw_url": "https://github.com/rust-lang/rust/raw/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Fetc%2Flicenseck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flicenseck.py?ref=689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "patch": "@@ -38,10 +38,9 @@\n     \"rt/isaac/randport.cpp\", # public domain\n     \"rt/isaac/rand.h\", # public domain\n     \"rt/isaac/standard.h\", # public domain\n-    \"libsync/mpsc_queue.rs\", # BSD\n-    \"libsync/spsc_queue.rs\", # BSD\n-    \"libsync/mpmc_bounded_queue.rs\", # BSD\n-    \"libsync/mpsc_intrusive.rs\", # BSD\n+    \"libstd/sync/mpsc_queue.rs\", # BSD\n+    \"libstd/sync/spsc_queue.rs\", # BSD\n+    \"libstd/sync/mpmc_bounded_queue.rs\", # BSD\n     \"test/bench/shootout-binarytrees.rs\", # BSD\n     \"test/bench/shootout-chameneos-redux.rs\", # BSD\n     \"test/bench/shootout-fannkuch-redux.rs\", # BSD"}, {"sha": "2b66e91c00db05eadc1a06bf47a502775ef9ba2e", "filename": "src/libstd/comm/mod.rs", "status": "renamed", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "patch": "@@ -338,12 +338,11 @@ macro_rules! test (\n \n             extern crate rustrt;\n \n-            use std::prelude::*;\n+            use prelude::*;\n \n             use comm::*;\n             use super::*;\n-            use super::super::*;\n-            use std::task;\n+            use task;\n \n             $(#[$a])* #[test] fn f() { $b }\n         }\n@@ -1019,9 +1018,9 @@ impl<T: Send> Drop for Receiver<T> {\n \n #[cfg(test)]\n mod test {\n-    use std::prelude::*;\n+    use prelude::*;\n \n-    use std::os;\n+    use os;\n     use super::*;\n \n     pub fn stress_factor() -> uint {\n@@ -1554,8 +1553,8 @@ mod test {\n \n #[cfg(test)]\n mod sync_tests {\n-    use std::prelude::*;\n-    use std::os;\n+    use prelude::*;\n+    use os;\n \n     pub fn stress_factor() -> uint {\n         match os::getenv(\"RUST_TEST_STRESS\") {", "previous_filename": "src/libsync/comm/mod.rs"}, {"sha": "bc34c3e8c5295093176a28b69da3dda17cea5483", "filename": "src/libstd/comm/oneshot.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fcomm%2Foneshot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fcomm%2Foneshot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Foneshot.rs?ref=689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "patch": "@@ -44,7 +44,7 @@ use core::mem;\n use rustrt::local::Local;\n use rustrt::task::{Task, BlockedTask};\n \n-use atomic;\n+use sync::atomic;\n use comm::Receiver;\n \n // Various states you can find a port in.", "previous_filename": "src/libsync/comm/oneshot.rs"}, {"sha": "621556f75ce3fe9d41ee6ff3ae5b278d8d402046", "filename": "src/libstd/comm/select.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fcomm%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fcomm%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fselect.rs?ref=689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "patch": "@@ -325,9 +325,9 @@ impl Iterator<*mut Handle<'static, ()>> for Packets {\n #[cfg(test)]\n #[allow(unused_imports)]\n mod test {\n-    use std::prelude::*;\n+    use prelude::*;\n \n-    use super::super::*;\n+    use super::*;\n \n     // Don't use the libstd version so we can pull in the right Select structure\n     // (std::comm points at the wrong one)", "previous_filename": "src/libsync/comm/select.rs"}, {"sha": "6396edbdbd148eff3912c404475105662d650754", "filename": "src/libstd/comm/shared.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fcomm%2Fshared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fcomm%2Fshared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fshared.rs?ref=689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "patch": "@@ -30,8 +30,8 @@ use rustrt::mutex::NativeMutex;\n use rustrt::task::{Task, BlockedTask};\n use rustrt::thread::Thread;\n \n-use atomic;\n-use mpsc_queue as mpsc;\n+use sync::atomic;\n+use sync::mpsc_queue as mpsc;\n \n const DISCONNECTED: int = int::MIN;\n const FUDGE: int = 1024;", "previous_filename": "src/libsync/comm/shared.rs"}, {"sha": "23d042960b16bbc37e0d47c8de77f5adc12cb957", "filename": "src/libstd/comm/stream.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fcomm%2Fstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fcomm%2Fstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fstream.rs?ref=689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "patch": "@@ -31,9 +31,9 @@ use rustrt::local::Local;\n use rustrt::task::{Task, BlockedTask};\n use rustrt::thread::Thread;\n \n-use atomic;\n+use sync::atomic;\n+use sync::spsc_queue as spsc;\n use comm::Receiver;\n-use spsc_queue as spsc;\n \n const DISCONNECTED: int = int::MIN;\n #[cfg(test)]", "previous_filename": "src/libsync/comm/stream.rs"}, {"sha": "a2e839e134c7dc912aceb1b5335e227e9c695a03", "filename": "src/libstd/comm/sync.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fcomm%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fcomm%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fsync.rs?ref=689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "patch": "@@ -39,14 +39,14 @@ pub use self::Failure::*;\n use self::Blocker::*;\n \n use alloc::boxed::Box;\n-use collections::Vec;\n+use vec::Vec;\n use core::mem;\n use core::cell::UnsafeCell;\n use rustrt::local::Local;\n use rustrt::mutex::{NativeMutex, LockGuard};\n use rustrt::task::{Task, BlockedTask};\n \n-use atomic;\n+use sync::atomic;\n \n pub struct Packet<T> {\n     /// Only field outside of the mutex. Just done for kicks, but mainly because", "previous_filename": "src/libsync/comm/sync.rs"}, {"sha": "80249808546b8c72961dbc7c923d555f1462f1ad", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "patch": "@@ -124,7 +124,6 @@ extern crate unicode;\n extern crate core;\n extern crate \"collections\" as core_collections;\n extern crate \"rand\" as core_rand;\n-extern crate \"sync\" as core_sync;\n extern crate libc;\n extern crate rustrt;\n \n@@ -173,8 +172,6 @@ pub use rustrt::c_str;\n \n pub use unicode::char;\n \n-pub use core_sync::comm;\n-\n /* Exported macros */\n \n pub mod macros;\n@@ -236,6 +233,7 @@ pub mod hash;\n \n pub mod task;\n pub mod sync;\n+pub mod comm;\n \n #[cfg(unix)]\n #[path = \"sys/unix/mod.rs\"] mod sys;"}, {"sha": "2bb551881138284d11e77c26ae0347a4a182e9b2", "filename": "src/libstd/sync/atomic.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fatomic.rs?ref=689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "patch": "@@ -178,7 +178,7 @@ impl<T: Send> Drop for AtomicOption<T> {\n \n #[cfg(test)]\n mod test {\n-    use std::prelude::*;\n+    use prelude::*;\n     use super::*;\n \n     #[test]", "previous_filename": "src/libsync/atomic.rs"}, {"sha": "33f6f77eb62a3115f9db537bb5d4e1a98bf1fdfe", "filename": "src/libstd/sync/deque.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Fdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Fdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fdeque.rs?ref=689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "patch": "@@ -57,13 +57,13 @@ use core::prelude::*;\n use alloc::arc::Arc;\n use alloc::heap::{allocate, deallocate};\n use alloc::boxed::Box;\n-use collections::Vec;\n+use vec::Vec;\n use core::kinds::marker;\n use core::mem::{forget, min_align_of, size_of, transmute};\n use core::ptr;\n use rustrt::exclusive::Exclusive;\n \n-use atomic::{AtomicInt, AtomicPtr, SeqCst};\n+use sync::atomic::{AtomicInt, AtomicPtr, SeqCst};\n \n // Once the queue is less than 1/K full, then it will be downsized. Note that\n // the deque requires that this number be less than 2.\n@@ -410,16 +410,16 @@ impl<T: Send> Drop for Buffer<T> {\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::*;\n+    use prelude::*;\n     use super::{Data, BufferPool, Abort, Empty, Worker, Stealer};\n \n-    use std::mem;\n+    use mem;\n     use rustrt::thread::Thread;\n-    use std::rand;\n-    use std::rand::Rng;\n-    use atomic::{AtomicBool, INIT_ATOMIC_BOOL, SeqCst,\n-                  AtomicUint, INIT_ATOMIC_UINT};\n-    use std::vec;\n+    use rand;\n+    use rand::Rng;\n+    use sync::atomic::{AtomicBool, INIT_ATOMIC_BOOL, SeqCst,\n+                       AtomicUint, INIT_ATOMIC_UINT};\n+    use vec;\n \n     #[test]\n     fn smoke() {", "previous_filename": "src/libsync/deque.rs"}, {"sha": "6b63f7ae6188101396ca0df06c1aface12fb654b", "filename": "src/libstd/sync/lock.rs", "status": "renamed", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Flock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Flock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Flock.rs?ref=689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "patch": "@@ -27,7 +27,7 @@ use core::cell::UnsafeCell;\n use rustrt::local::Local;\n use rustrt::task::Task;\n \n-use raw;\n+use super::raw;\n \n /****************************************************************************\n  * Poisoning helpers\n@@ -158,7 +158,7 @@ impl<'a> Condvar<'a> {\n /// # Example\n ///\n /// ```\n-/// use sync::{Mutex, Arc};\n+/// use std::sync::{Mutex, Arc};\n ///\n /// let mutex = Arc::new(Mutex::new(1i));\n /// let mutex2 = mutex.clone();\n@@ -259,7 +259,7 @@ impl<'a, T: Send> DerefMut<T> for MutexGuard<'a, T> {\n /// # Example\n ///\n /// ```\n-/// use sync::{RWLock, Arc};\n+/// use std::sync::{RWLock, Arc};\n ///\n /// let lock1 = Arc::new(RWLock::new(1i));\n /// let lock2 = lock1.clone();\n@@ -395,7 +395,7 @@ impl<'a, T: Send + Sync> DerefMut<T> for RWLockWriteGuard<'a, T> {\n /// of some computation.\n ///\n /// ```rust\n-/// use sync::{Arc, Barrier};\n+/// use std::sync::{Arc, Barrier};\n ///\n /// let barrier = Arc::new(Barrier::new(10));\n /// for _ in range(0u, 10) {\n@@ -458,12 +458,12 @@ impl Barrier {\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::*;\n-    use std::comm::Empty;\n-    use std::task;\n-    use std::task::try_future;\n+    use prelude::*;\n+    use comm::Empty;\n+    use task;\n+    use task::try_future;\n+    use sync::Arc;\n \n-    use Arc;\n     use super::{Mutex, Barrier, RWLock};\n \n     #[test]", "previous_filename": "src/libsync/lock.rs"}, {"sha": "944b852db35f981619e7fcfd26d7873abf9688f3", "filename": "src/libstd/sync/mod.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmod.rs?ref=689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "patch": "@@ -17,17 +17,41 @@\n \n #![experimental]\n \n-#[stable]\n-pub use core_sync::atomic;\n+pub use self::one::{Once, ONCE_INIT};\n+\n+pub use alloc::arc::{Arc, Weak};\n+pub use self::lock::{Mutex, MutexGuard, Condvar, Barrier,\n+                     RWLock, RWLockReadGuard, RWLockWriteGuard};\n \n-pub use core_sync::{deque, mpmc_bounded_queue, mpsc_queue, spsc_queue};\n-pub use core_sync::{Arc, Weak, Mutex, MutexGuard, Condvar, Barrier};\n-pub use core_sync::{RWLock, RWLockReadGuard, RWLockWriteGuard};\n-pub use core_sync::{Semaphore, SemaphoreGuard};\n-pub use core_sync::one::{Once, ONCE_INIT};\n+// The mutex/rwlock in this module are not meant for reexport\n+pub use self::raw::{Semaphore, SemaphoreGuard};\n \n pub use self::future::Future;\n pub use self::task_pool::TaskPool;\n \n+// Core building blocks for all primitives in this crate\n+\n+#[stable]\n+pub mod atomic;\n+\n+// Concurrent data structures\n+\n+pub mod spsc_queue;\n+pub mod mpsc_queue;\n+pub mod mpmc_bounded_queue;\n+pub mod deque;\n+\n+// Low-level concurrency primitives\n+\n+mod raw;\n+mod mutex;\n+mod one;\n+\n+// Higher level primitives based on those above\n+\n+mod lock;\n+\n+// Task management\n+\n mod future;\n mod task_pool;"}, {"sha": "dca2d4098c6a6152e4b73f2ef0d4b2b820ed739b", "filename": "src/libstd/sync/mpmc_bounded_queue.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs?ref=689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "patch": "@@ -33,11 +33,11 @@\n use core::prelude::*;\n \n use alloc::arc::Arc;\n-use collections::Vec;\n+use vec::Vec;\n use core::num::UnsignedInt;\n use core::cell::UnsafeCell;\n \n-use atomic::{AtomicUint,Relaxed,Release,Acquire};\n+use sync::atomic::{AtomicUint,Relaxed,Release,Acquire};\n \n struct Node<T> {\n     sequence: AtomicUint,\n@@ -165,7 +165,7 @@ impl<T: Send> Clone for Queue<T> {\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::*;\n+    use prelude::*;\n     use super::Queue;\n \n     #[test]", "previous_filename": "src/libsync/mpmc_bounded_queue.rs"}, {"sha": "09212e4dfb65c060e47b44c450baf438af256352", "filename": "src/libstd/sync/mpsc_queue.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc_queue.rs?ref=689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "patch": "@@ -48,7 +48,7 @@ use alloc::boxed::Box;\n use core::mem;\n use core::cell::UnsafeCell;\n \n-use atomic::{AtomicPtr, Release, Acquire, AcqRel, Relaxed};\n+use sync::atomic::{AtomicPtr, Release, Acquire, AcqRel, Relaxed};\n \n /// A result of the `pop` function.\n pub enum PopResult<T> {\n@@ -159,7 +159,7 @@ impl<T: Send> Drop for Queue<T> {\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::*;\n+    use prelude::*;\n \n     use alloc::arc::Arc;\n ", "previous_filename": "src/libsync/mpsc_queue.rs"}, {"sha": "c9e90210c30f33529e8bedab8cbc3a490f51fcda", "filename": "src/libstd/sync/mutex.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "patch": "@@ -28,8 +28,8 @@ pub const BLOCKED: uint = 1 << 1;\n ///\n /// # Example\n ///\n-/// ```rust\n-/// use sync::mutex::Mutex;\n+/// ```rust,ignore\n+/// use std::sync::mutex::Mutex;\n ///\n /// let m = Mutex::new();\n /// let guard = m.lock();\n@@ -57,8 +57,8 @@ pub struct Mutex {\n ///\n /// # Example\n ///\n-/// ```rust\n-/// use sync::mutex::{StaticMutex, MUTEX_INIT};\n+/// ```rust,ignore\n+/// use std::sync::mutex::{StaticMutex, MUTEX_INIT};\n ///\n /// static LOCK: StaticMutex = MUTEX_INIT;\n ///\n@@ -156,7 +156,7 @@ impl Drop for Mutex {\n \n #[cfg(test)]\n mod test {\n-    use std::prelude::*;\n+    use prelude::*;\n     use super::{Mutex, StaticMutex, MUTEX_INIT};\n \n     #[test]", "previous_filename": "src/libsync/mutex.rs"}, {"sha": "f710a6da59bd7ab87e1eaedd96cb815323c9fc61", "filename": "src/libstd/sync/one.rs", "status": "renamed", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Fone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Fone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fone.rs?ref=689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "patch": "@@ -18,7 +18,7 @@ use core::prelude::*;\n use core::int;\n use core::atomic;\n \n-use mutex::{StaticMutex, MUTEX_INIT};\n+use super::mutex::{StaticMutex, MUTEX_INIT};\n \n /// A synchronization primitive which can be used to run a one-time global\n /// initialization. Useful for one-time initialization for FFI or related\n@@ -27,8 +27,8 @@ use mutex::{StaticMutex, MUTEX_INIT};\n ///\n /// # Example\n ///\n-/// ```rust\n-/// use sync::one::{Once, ONCE_INIT};\n+/// ```rust,ignore\n+/// use std::sync::one::{Once, ONCE_INIT};\n ///\n /// static START: Once = ONCE_INIT;\n ///\n@@ -120,8 +120,8 @@ impl Once {\n \n #[cfg(test)]\n mod test {\n-    use std::prelude::*;\n-    use std::task;\n+    use prelude::*;\n+    use task;\n     use super::{ONCE_INIT, Once};\n \n     #[test]", "previous_filename": "src/libsync/one.rs"}, {"sha": "ff3f2c9462c83fee6ba829a65b6f7bb31a72e34c", "filename": "src/libstd/sync/raw.rs", "status": "renamed", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fraw.rs?ref=689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "patch": "@@ -15,6 +15,10 @@\n //! `sync` crate which wrap values directly and provide safer abstractions for\n //! containing data.\n \n+// A side-effect of merging libsync into libstd; will go away once\n+// libsync rewrite lands\n+#![allow(dead_code)]\n+\n use core::prelude::*;\n use self::ReacquireOrderLock::*;\n \n@@ -23,9 +27,9 @@ use core::finally::Finally;\n use core::kinds::marker;\n use core::mem;\n use core::cell::UnsafeCell;\n-use collections::Vec;\n+use vec::Vec;\n \n-use mutex;\n+use super::mutex;\n use comm::{Receiver, Sender, channel};\n \n /****************************************************************************\n@@ -518,8 +522,8 @@ impl RWLock {\n     ///\n     /// # Example\n     ///\n-    /// ```rust\n-    /// use sync::raw::RWLock;\n+    /// ```{rust,ignore}\n+    /// use std::sync::raw::RWLock;\n     ///\n     /// let lock = RWLock::new();\n     /// let write = lock.write();\n@@ -622,14 +626,13 @@ impl<'a> Drop for RWLockReadGuard<'a> {\n mod tests {\n     pub use self::RWLockMode::*;\n \n-    use std::prelude::*;\n-\n-    use Arc;\n+    use sync::Arc;\n+    use prelude::*;\n     use super::{Semaphore, Mutex, RWLock, Condvar};\n \n-    use std::mem;\n-    use std::result;\n-    use std::task;\n+    use mem;\n+    use result;\n+    use task;\n \n     /************************************************************************\n      * Semaphore tests\n@@ -837,7 +840,7 @@ mod tests {\n     }\n     #[test]\n     fn test_mutex_killed_simple() {\n-        use std::any::Any;\n+        use any::Any;\n \n         // Mutex must get automatically unlocked if panicked/killed within.\n         let m = Arc::new(Mutex::new());\n@@ -1077,7 +1080,7 @@ mod tests {\n     }\n     #[cfg(test)]\n     fn rwlock_kill_helper(mode1: RWLockMode, mode2: RWLockMode) {\n-        use std::any::Any;\n+        use any::Any;\n \n         // Mutex must get automatically unlocked if panicked/killed within.\n         let x = Arc::new(RWLock::new());", "previous_filename": "src/libsync/raw.rs"}, {"sha": "f0eabe6173718e102e0303f3d9f0153ed927b8d6", "filename": "src/libstd/sync/spsc_queue.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Fspsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/689ef2dabfa3b2b379c953e5fb68ce2c805c2231/src%2Flibstd%2Fsync%2Fspsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fspsc_queue.rs?ref=689ef2dabfa3b2b379c953e5fb68ce2c805c2231", "patch": "@@ -42,7 +42,7 @@ use core::mem;\n use core::cell::UnsafeCell;\n use alloc::arc::Arc;\n \n-use atomic::{AtomicPtr, Relaxed, AtomicUint, Acquire, Release};\n+use sync::atomic::{AtomicPtr, Relaxed, AtomicUint, Acquire, Release};\n \n // Node within the linked list queue of messages to send\n struct Node<T> {\n@@ -294,7 +294,7 @@ impl<T: Send> Drop for Queue<T> {\n \n #[cfg(test)]\n mod test {\n-    use std::prelude::*;\n+    use prelude::*;\n \n     use super::{queue};\n ", "previous_filename": "src/libsync/spsc_queue.rs"}, {"sha": "9d6f6513a658fd84565642f2e16a59e7fccc669b", "filename": "src/libsync/lib.rs", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/0e06f71747749e33ca590c334658bddde97a7e54/src%2Flibsync%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e06f71747749e33ca590c334658bddde97a7e54/src%2Flibsync%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flib.rs?ref=0e06f71747749e33ca590c334658bddde97a7e54", "patch": "@@ -1,78 +0,0 @@\n-// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Core concurrency-enabled mechanisms and primitives.\n-//!\n-//! This crate contains the implementations of Rust's core synchronization\n-//! primitives. This includes channels, mutexes, condition variables, etc.\n-//!\n-//! The interface of this crate is experimental, and it is not recommended to\n-//! use this crate specifically. Instead, its functionality is reexported\n-//! through `std::sync`.\n-\n-#![crate_name = \"sync\"]\n-#![experimental]\n-#![crate_type = \"rlib\"]\n-#![crate_type = \"dylib\"]\n-#![license = \"MIT/ASL2\"]\n-#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-       html_root_url = \"http://doc.rust-lang.org/nightly/\",\n-       html_playground_url = \"http://play.rust-lang.org/\")]\n-\n-#![feature(phase, globs, macro_rules, unsafe_destructor)]\n-#![feature(import_shadowing)]\n-#![deny(missing_docs)]\n-#![no_std]\n-\n-#[phase(plugin, link)] extern crate core;\n-extern crate alloc;\n-extern crate collections;\n-extern crate rustrt;\n-\n-#[cfg(test)] extern crate test;\n-#[cfg(test)] #[phase(plugin, link)] extern crate std;\n-\n-pub use alloc::arc::{Arc, Weak};\n-pub use lock::{Mutex, MutexGuard, Condvar, Barrier,\n-               RWLock, RWLockReadGuard, RWLockWriteGuard};\n-\n-// The mutex/rwlock in this module are not meant for reexport\n-pub use raw::{Semaphore, SemaphoreGuard};\n-\n-// Core building blocks for all primitives in this crate\n-\n-pub mod atomic;\n-\n-// Concurrent data structures\n-\n-pub mod spsc_queue;\n-pub mod mpsc_queue;\n-pub mod mpmc_bounded_queue;\n-pub mod deque;\n-\n-// Low-level concurrency primitives\n-\n-pub mod raw;\n-pub mod mutex;\n-pub mod one;\n-\n-// Message-passing based communication\n-\n-pub mod comm;\n-\n-// Higher level primitives based on those above\n-\n-mod lock;\n-\n-#[cfg(not(test))]\n-mod std {\n-    pub use core::{fmt, option, cmp, clone};\n-}"}]}