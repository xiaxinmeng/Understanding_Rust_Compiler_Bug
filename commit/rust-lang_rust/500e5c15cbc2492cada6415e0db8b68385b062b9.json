{"sha": "500e5c15cbc2492cada6415e0db8b68385b062b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMGU1YzE1Y2JjMjQ5MmNhZGE2NDE1ZTBkYjhiNjgzODViMDYyYjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-20T23:37:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-20T23:37:01Z"}, "message": "Auto merge of #33758 - GuillaumeGomez:rollup, r=Manishearth\n\nRollup of 6 pull requests\n\n- Successful merges: #33668, #33676, #33683, #33734, #33739, #33745\n- Failed merges: #33578", "tree": {"sha": "9815b773db902a664c08dd0a2f7e7aea88a5a2ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9815b773db902a664c08dd0a2f7e7aea88a5a2ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/500e5c15cbc2492cada6415e0db8b68385b062b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/500e5c15cbc2492cada6415e0db8b68385b062b9", "html_url": "https://github.com/rust-lang/rust/commit/500e5c15cbc2492cada6415e0db8b68385b062b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/500e5c15cbc2492cada6415e0db8b68385b062b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "179539f6eb61f75244a0dde641b6e4e09c0921ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/179539f6eb61f75244a0dde641b6e4e09c0921ec", "html_url": "https://github.com/rust-lang/rust/commit/179539f6eb61f75244a0dde641b6e4e09c0921ec"}, {"sha": "4a3ba87d82f0751c0328c0d275fb854ae4586c80", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a3ba87d82f0751c0328c0d275fb854ae4586c80", "html_url": "https://github.com/rust-lang/rust/commit/4a3ba87d82f0751c0328c0d275fb854ae4586c80"}], "stats": {"total": 440, "additions": 415, "deletions": 25}, "files": [{"sha": "a101f397c3793d2fb66a1db0c5372f2e1d5ebb80", "filename": "src/doc/book/casting-between-types.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Fdoc%2Fbook%2Fcasting-between-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Fdoc%2Fbook%2Fcasting-between-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fcasting-between-types.md?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -135,14 +135,14 @@ cast four bytes into a `u32`:\n ```rust,ignore\n let a = [0u8, 0u8, 0u8, 0u8];\n \n-let b = a as u32; // four eights makes 32\n+let b = a as u32; // four u8s makes a u32\n ```\n \n This errors with:\n \n ```text\n error: non-scalar cast: `[u8; 4]` as `u32`\n-let b = a as u32; // four eights makes 32\n+let b = a as u32; // four u8s makes a u32\n         ^~~~~~~~\n ```\n "}, {"sha": "a40608b0762d66a4e74966312d48ff5c1c182e85", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -86,7 +86,7 @@ macro_rules! assert {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! assert_eq {\n     ($left:expr , $right:expr) => ({\n-        match (&($left), &($right)) {\n+        match (&$left, &$right) {\n             (left_val, right_val) => {\n                 if !(*left_val == *right_val) {\n                     panic!(\"assertion failed: `(left == right)` \\"}, {"sha": "1bdab88d71da08226d7238b0c2a1c32106ad7e4a", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -26,8 +26,9 @@\n //! [1]: http://llvm.org/docs/LangRef.html#memory-model-for-concurrent-operations\n //!\n //! Atomic variables are safe to share between threads (they implement `Sync`)\n-//! but they do not themselves provide the mechanism for sharing. The most\n-//! common way to share an atomic variable is to put it into an `Arc` (an\n+//! but they do not themselves provide the mechanism for sharing and follow the\n+//! [threading model](../../../std/thread/index.html#the-threading-model) of rust.\n+//! The most common way to share an atomic variable is to put it into an `Arc` (an\n //! atomically-reference-counted shared pointer).\n //!\n //! Most atomic types may be stored in static variables, initialized using\n@@ -48,12 +49,16 @@\n //!     let spinlock = Arc::new(AtomicUsize::new(1));\n //!\n //!     let spinlock_clone = spinlock.clone();\n-//!     thread::spawn(move|| {\n+//!     let thread = thread::spawn(move|| {\n //!         spinlock_clone.store(0, Ordering::SeqCst);\n //!     });\n //!\n //!     // Wait for the other thread to release the lock\n //!     while spinlock.load(Ordering::SeqCst) != 0 {}\n+//!\n+//!     if let Err(panic) = thread.join() {\n+//!         println!(\"Thread had an error: {:?}\", panic);\n+//!     }\n //! }\n //! ```\n //!"}, {"sha": "28506fd20fe53bc3884290069474916c1a39a23f", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -1286,8 +1286,12 @@ impl<'a> LoweringContext<'a> {\n                                     maybe_expr.as_ref().map(|x| self.lower_expr(x)))\n                 }\n                 ExprKind::Paren(ref ex) => {\n-                    // merge attributes into the inner expression.\n                     return self.lower_expr(ex).map(|mut ex| {\n+                        // include parens in span, but only if it is a super-span.\n+                        if e.span.contains(ex.span) {\n+                            ex.span = e.span;\n+                        }\n+                        // merge attributes into the inner expression.\n                         ex.attrs.update(|attrs| {\n                             attrs.prepend(e.attrs.clone())\n                         });"}, {"sha": "c1e83588570e7eeec7e6d01d870ee7811057b22b", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -152,7 +152,7 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n                 ty::TyEnum(def, _) if def.has_dtor() => {\n                     let mut err = struct_span_err!(bccx, move_from.span, E0509,\n                                                    \"cannot move out of type `{}`, \\\n-                                                   which defines the `Drop` trait\",\n+                                                   which implements the `Drop` trait\",\n                                                    b.ty);\n                     err.span_label(move_from.span, &format!(\"cannot move out of here\"));\n                     err"}, {"sha": "992e07fa7449dc676ee6ce76fd0f14332e0dbd14", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -617,7 +617,13 @@ pub fn coerce_unsized_into<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n         (&ty::TyRawPtr(..), &ty::TyRawPtr(..)) => {\n             let (base, info) = if common::type_is_fat_ptr(bcx.tcx(), src_ty) {\n                 // fat-ptr to fat-ptr unsize preserves the vtable\n-                load_fat_ptr(bcx, src, src_ty)\n+                // i.e. &'a fmt::Debug+Send => &'a fmt::Debug\n+                // So we need to pointercast the base to ensure\n+                // the types match up.\n+                let (base, info) = load_fat_ptr(bcx, src, src_ty);\n+                let llcast_ty = type_of::fat_ptr_base_ty(bcx.ccx(), dst_ty);\n+                let base = PointerCast(bcx, base, llcast_ty);\n+                (base, info)\n             } else {\n                 let base = load_ty(bcx, src, src_ty);\n                 unsize_thin_ptr(bcx, base, src_ty, dst_ty)"}, {"sha": "5945e8813a48ddc96101b5e700075973537b2cde", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -262,14 +262,17 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                         assert!(common::type_is_fat_ptr(bcx.tcx(), cast_ty));\n \n                         match operand.val {\n-                            OperandValue::FatPtr(..) => {\n+                            OperandValue::FatPtr(lldata, llextra) => {\n                                 // unsize from a fat pointer - this is a\n                                 // \"trait-object-to-supertrait\" coercion, for\n                                 // example,\n                                 //   &'a fmt::Debug+Send => &'a fmt::Debug,\n-                                // and is a no-op at the LLVM level\n+                                // So we need to pointercast the base to ensure\n+                                // the types match up.\n                                 self.set_operand_dropped(&bcx, source);\n-                                operand.val\n+                                let llcast_ty = type_of::fat_ptr_base_ty(bcx.ccx(), cast_ty);\n+                                let lldata = bcx.pointercast(lldata, llcast_ty);\n+                                OperandValue::FatPtr(lldata, llextra)\n                             }\n                             OperandValue::Immediate(lldata) => {\n                                 // \"standard\" unsize"}, {"sha": "e5acb9b6699bd2ea5bb6ce9924a6c8192f22a89e", "filename": "src/librustc_trans/type_of.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Flibrustc_trans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Flibrustc_trans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftype_of.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -157,6 +157,17 @@ pub fn sizing_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Typ\n     llsizingty\n }\n \n+pub fn fat_ptr_base_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> Type {\n+    match ty.sty {\n+        ty::TyBox(t) |\n+        ty::TyRef(_, ty::TypeAndMut { ty: t, .. }) |\n+        ty::TyRawPtr(ty::TypeAndMut { ty: t, .. }) if !type_is_sized(ccx.tcx(), t) => {\n+            in_memory_type_of(ccx, t).ptr_to()\n+        }\n+        _ => bug!(\"expected fat ptr ty but got {:?}\", ty)\n+    }\n+}\n+\n fn unsized_info_ty<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, ty: Ty<'tcx>) -> Type {\n     let unsized_part = ccx.tcx().struct_tail(ty);\n     match unsized_part.sty {"}, {"sha": "35fd6e8942fe7286129df10e40d62be568d46985", "filename": "src/test/compile-fail/E0036.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0036.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0036.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0036.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Test;\n+\n+impl Test {\n+    fn method<T>(&self, v: &[T]) -> usize {\n+        v.len()\n+    }\n+}\n+\n+fn main() {\n+    let x = Test;\n+    let v = &[0];\n+    x.method::<i32, i32>(v); //~ ERROR E0036\n+}"}, {"sha": "26d2f339763aa6c91639202dd6d118b8c0d14f23", "filename": "src/test/compile-fail/E0038.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0038.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0038.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0038.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Trait {\n+    fn foo(&self) -> Self;\n+}\n+\n+fn call_foo(x: Box<Trait>) { //~ ERROR E0038\n+    let y = x.foo();\n+}\n+\n+fn main() {\n+}"}, {"sha": "f998778a50d66b0cf8fab95bdc60c9410fa1e097", "filename": "src/test/compile-fail/E0040.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0040.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0040.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0040.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct Foo {\n+    x: i32,\n+}\n+\n+impl Drop for Foo {\n+    fn drop(&mut self) {\n+        println!(\"kaboom\");\n+    }\n+}\n+\n+fn main() {\n+    let mut x = Foo { x: -7 };\n+    x.drop(); //~ ERROR E0040\n+}"}, {"sha": "48fe230003129f5614f77c60d92435424110ecbe", "filename": "src/test/compile-fail/E0044.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0044.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0044.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0044.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern { fn some_func<T>(x: T); } //~ ERROR E0044\n+\n+fn main() {\n+}"}, {"sha": "edec911d3c070e6b14eb0fbc5190af2bb84506a7", "filename": "src/test/compile-fail/E0045.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0045.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0045.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0045.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern \"rust-call\" { fn foo(x: u8, ...); } //~ ERROR E0045\n+\n+fn main() {\n+}"}, {"sha": "63bd0a5ca285826a84c5458c37845d4fa215bc3c", "filename": "src/test/compile-fail/E0046.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0046.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0046.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0046.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn foo();\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {} //~ ERROR E0046\n+\n+fn main() {\n+}"}, {"sha": "5867e11e9acc606e890b16c7964c74fa2865ff7e", "filename": "src/test/compile-fail/E0049.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0049.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0049.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0049.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn foo<T: Default>(x: T) -> Self;\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    fn foo(x: bool) -> Self { Bar } //~ ERROR E0049\n+}\n+\n+fn main() {\n+}"}, {"sha": "2f7dc96361f9c60b1e174222135589ca932c4707", "filename": "src/test/compile-fail/E0050.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0050.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0050.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0050.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn foo(&self, x: u8) -> bool;\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    fn foo(&self) -> bool { true } //~ ERROR E0050\n+}\n+\n+fn main() {\n+}"}, {"sha": "4effda3c49e8e6c4e0c7f65d677f851377130fe4", "filename": "src/test/compile-fail/E0053.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0053.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0053.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0053.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+trait Foo {\n+    fn foo(x: u16);\n+    fn bar(&self);\n+}\n+\n+struct Bar;\n+\n+impl Foo for Bar {\n+    fn foo(x: i16) { } //~ ERROR E0053\n+    fn bar(&mut self) { } //~ ERROR E0053\n+}\n+\n+fn main() {\n+}"}, {"sha": "158cd6ff9bbc41678eacc6063b0849e2f1617228", "filename": "src/test/compile-fail/E0054.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0054.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0054.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0054.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -0,0 +1,14 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let x = 5;\n+    let x_is_nonzero = x as bool; //~ ERROR E0054\n+}"}, {"sha": "cb78f4b3bb59765ee184c5ee6727adfbac696448", "filename": "src/test/compile-fail/E0055.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0055.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0055.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0055.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![recursion_limit=\"2\"]\n+struct Foo;\n+\n+impl Foo {\n+    fn foo(&self) {}\n+}\n+\n+fn main() {\n+    let foo = Foo;\n+    let ref_foo = &&Foo;\n+    ref_foo.foo(); //~ ERROR E0055\n+                   //~^ ERROR E0275\n+}"}, {"sha": "1fb5498b099c932632e2dee59c15c78c3f67561f", "filename": "src/test/compile-fail/E0057.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0057.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0057.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0057.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let f = |x| x * 3;\n+    let a = f(); //~ ERROR E0057\n+    let b = f(4);\n+    let c = f(2, 3); //~ ERROR E0057\n+}"}, {"sha": "4ae9b2f91d25f55f7c77f931a1253528a1d69bd8", "filename": "src/test/compile-fail/E0059.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0059.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0059.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0059.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unboxed_closures)]\n+\n+fn foo<F: Fn<i32>>(f: F) -> F::Output { f(3) } //~ ERROR E0059\n+\n+fn main() {\n+}"}, {"sha": "b4a289874979206a59f328f4e05607d41d445902", "filename": "src/test/compile-fail/E0060.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0060.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0060.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0060.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern \"C\" {\n+    fn printf(_: *const u8, ...) -> u32;\n+}\n+\n+fn main() {\n+    unsafe { printf(); } //~ ERROR E0060\n+}"}, {"sha": "4a8eac2a9e2268d98e85dda3b9d6cb13d4edb998", "filename": "src/test/compile-fail/E0061.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2FE0061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2FE0061.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn f(a: u16, b: &str) {}\n+\n+fn main() {\n+    f(0); //~ ERROR E0061\n+}"}, {"sha": "5d9c9d0bd461516d42c3de0cded3bc2eeeeb9dc2", "filename": "src/test/compile-fail/borrowck/borrowck-move-error-with-note.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-error-with-note.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-error-with-note.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-error-with-note.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -37,7 +37,7 @@ impl Drop for S {\n \n fn move_in_match() {\n     match (S {f: \"foo\".to_string(), g: \"bar\".to_string()}) {\n-        S {         //~ ERROR cannot move out of type `S`, which defines the `Drop` trait\n+        S {         //~ ERROR cannot move out of type `S`, which implements the `Drop` trait\n         //~| cannot move out of here\n             f: _s,  //~ NOTE to prevent move\n             g: _t   //~ NOTE and here"}, {"sha": "16302d276cee27faafc9ea046b2f742a411cb0eb", "filename": "src/test/compile-fail/borrowck/borrowck-move-out-of-struct-with-dtor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-struct-with-dtor.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -16,17 +16,17 @@ impl Drop for S {\n fn move_in_match() {\n     match (S {f:\"foo\".to_string()}) {\n         S {f:_s} => {}\n-        //~^ ERROR cannot move out of type `S`, which defines the `Drop` trait\n+        //~^ ERROR cannot move out of type `S`, which implements the `Drop` trait\n     }\n }\n \n fn move_in_let() {\n     let S {f:_s} = S {f:\"foo\".to_string()};\n-    //~^ ERROR cannot move out of type `S`, which defines the `Drop` trait\n+    //~^ ERROR cannot move out of type `S`, which implements the `Drop` trait\n }\n \n fn move_in_fn_arg(S {f:_s}: S) {\n-    //~^ ERROR cannot move out of type `S`, which defines the `Drop` trait\n+    //~^ ERROR cannot move out of type `S`, which implements the `Drop` trait\n }\n \n fn main() {}"}, {"sha": "f5fedb8d487eedb409c306768cdfbcea487cddbb", "filename": "src/test/compile-fail/borrowck/borrowck-move-out-of-tuple-struct-with-dtor.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-move-out-of-tuple-struct-with-dtor.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -16,17 +16,17 @@ impl Drop for S {\n fn move_in_match() {\n     match S(\"foo\".to_string()) {\n         S(_s) => {}\n-        //~^ ERROR cannot move out of type `S`, which defines the `Drop` trait\n+        //~^ ERROR cannot move out of type `S`, which implements the `Drop` trait\n     }\n }\n \n fn move_in_let() {\n     let S(_s) = S(\"foo\".to_string());\n-    //~^ ERROR cannot move out of type `S`, which defines the `Drop` trait\n+    //~^ ERROR cannot move out of type `S`, which implements the `Drop` trait\n }\n \n fn move_in_fn_arg(S(_s): S) {\n-    //~^ ERROR cannot move out of type `S`, which defines the `Drop` trait\n+    //~^ ERROR cannot move out of type `S`, which implements the `Drop` trait\n }\n \n fn main() {}"}, {"sha": "c364788a9cc8d26a9d90d7d242e762e154957e17", "filename": "src/test/compile-fail/borrowck/borrowck-struct-update-with-dtor.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-struct-update-with-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-struct-update-with-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-struct-update-with-dtor.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -19,11 +19,13 @@ struct T { a: isize, mv: Box<isize> }\n impl Drop for T { fn drop(&mut self) { } }\n \n fn f(s0:S) {\n-    let _s2 = S{a: 2, ..s0}; //~error: cannot move out of type `S`, which defines the `Drop` trait\n+    let _s2 = S{a: 2, ..s0};\n+    //~^ error: cannot move out of type `S`, which implements the `Drop` trait\n }\n \n fn g(s0:T) {\n-    let _s2 = T{a: 2, ..s0}; //~error: cannot move out of type `T`, which defines the `Drop` trait\n+    let _s2 = T{a: 2, ..s0};\n+    //~^ error: cannot move out of type `T`, which implements the `Drop` trait\n }\n \n fn main() { }"}, {"sha": "38049209903d19af25449c4d44ae30d8deb6178f", "filename": "src/test/compile-fail/disallowed-deconstructing-destructing-struct-match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-match.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -23,6 +23,6 @@ fn main() {\n \n     match x {\n         X { x: y } => println!(\"contents: {}\", y)\n-        //~^ ERROR cannot move out of type `X`, which defines the `Drop` trait\n+        //~^ ERROR cannot move out of type `X`, which implements the `Drop` trait\n     }\n }"}, {"sha": "790b774bd2133fc0ad1db7b5f49f3a6b9b9d488a", "filename": "src/test/compile-fail/issue-2392.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2Fissue-2392.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2Fissue-2392.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2392.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -81,11 +81,11 @@ impl FuncContainerOuter {\n     fn run(&self) {\n         unsafe {\n             (*self.container).f1(1); //~ ERROR no method named `f1` found\n-            //~^ NOTE use `(*self.container.f1)(...)`\n+            //~^ NOTE use `((*self.container).f1)(...)`\n             (*self.container).f2(1); //~ ERROR no method named `f2` found\n-            //~^ NOTE use `(*self.container.f2)(...)`\n+            //~^ NOTE use `((*self.container).f2)(...)`\n             (*self.container).f3(1); //~ ERROR no method named `f3` found\n-            //~^ NOTE use `(*self.container.f3)(...)`\n+            //~^ NOTE use `((*self.container).f3)(...)`\n         }\n     }\n }"}, {"sha": "8ed5050f3de3c28a0386cd1ff82c4b518c40b2a5", "filename": "src/test/compile-fail/paren-span.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2Fparen-span.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Fcompile-fail%2Fparen-span.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fparen-span.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -0,0 +1,31 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Be smart about span of parenthesized expression in macro.\n+\n+macro_rules! paren {\n+    ($e:expr) => (($e))\n+    //            ^^^^ do not highlight here\n+}\n+\n+mod m {\n+    pub struct S {\n+        x: i32\n+    }\n+    pub fn make() -> S {\n+        S { x: 0 }\n+    }\n+}\n+\n+fn main() {\n+    let s = m::make();\n+    paren!(s.x); //~ ERROR field `x` of struct `m::S` is private\n+    //     ^^^ highlight here\n+}"}, {"sha": "a4b85bc7a091d89f3bb6fc71ba0482c7d2a67898", "filename": "src/test/run-pass/issue-33387.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Frun-pass%2Fissue-33387.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500e5c15cbc2492cada6415e0db8b68385b062b9/src%2Ftest%2Frun-pass%2Fissue-33387.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-33387.rs?ref=500e5c15cbc2492cada6415e0db8b68385b062b9", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(rustc_attrs)]\n+\n+use std::sync::Arc;\n+\n+trait Foo {\n+    fn get(&self) -> [u8; 2];\n+}\n+\n+impl Foo for [u8; 2] {\n+    fn get(&self) -> [u8; 2] {\n+        *self\n+    }\n+}\n+\n+struct Bar<T: ?Sized>(T);\n+\n+#[rustc_mir]\n+fn unsize_fat_ptr<'a>(x: &'a Bar<Foo + Send + 'a>) -> &'a Bar<Foo + 'a> {\n+    x\n+}\n+\n+#[rustc_mir]\n+fn unsize_nested_fat_ptr(x: Arc<Foo + Send>) -> Arc<Foo> {\n+    x\n+}\n+\n+#[rustc_mir]\n+fn main() {\n+    let x: Box<Bar<Foo + Send>> = Box::new(Bar([1,2]));\n+    assert_eq!(unsize_fat_ptr(&*x).0.get(), [1, 2]);\n+\n+    let x: Arc<Foo + Send> = Arc::new([3, 4]);\n+    assert_eq!(unsize_nested_fat_ptr(x).get(), [3, 4]);\n+}"}]}