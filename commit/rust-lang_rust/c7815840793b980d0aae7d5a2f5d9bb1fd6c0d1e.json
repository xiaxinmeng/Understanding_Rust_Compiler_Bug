{"sha": "c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "node_id": "C_kwDOAAsO6NoAKGM3ODE1ODQwNzkzYjk4MGQwYWFlN2Q1YTJmNWQ5YmIxZmQ2YzBkMWU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-19T05:08:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-04-19T05:08:54Z"}, "message": "Auto merge of #110522 - matthiaskrgr:rollup-9m7rw3u, r=matthiaskrgr\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #110432 (Report more detailed reason why `Index` impl is not satisfied)\n - #110451 (Minor changes to `IndexVec::ensure_contains_elem` & related methods)\n - #110476 (Delay a good path bug on drop for `TypeErrCtxt` (instead of a regular delayed bug))\n - #110498 (Switch to `EarlyBinder` for `collect_return_position_impl_trait_in_trait_tys`)\n - #110507 (boostrap: print output during building tools)\n - #110510 (Fix ICE for transmutability in candidate assembly)\n - #110513 (make `non_upper_case_globals` lint not report trait impls)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2c9118a05482830a703dd76de1fe8c1835bc3a23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c9118a05482830a703dd76de1fe8c1835bc3a23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "html_url": "https://github.com/rust-lang/rust/commit/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e7f72c57d83a6e64f54b436dc3373871c3c4bb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e7f72c57d83a6e64f54b436dc3373871c3c4bb0", "html_url": "https://github.com/rust-lang/rust/commit/9e7f72c57d83a6e64f54b436dc3373871c3c4bb0"}, {"sha": "78490ada7c987cc13b7029fa5929d0c51b4c2a98", "url": "https://api.github.com/repos/rust-lang/rust/commits/78490ada7c987cc13b7029fa5929d0c51b4c2a98", "html_url": "https://github.com/rust-lang/rust/commit/78490ada7c987cc13b7029fa5929d0c51b4c2a98"}], "stats": {"total": 360, "additions": 303, "deletions": 57}, "files": [{"sha": "08e7a4dfe5d5df9b371348c52ed200b243358cd7", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -89,18 +89,18 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n         lctx.with_hir_id_owner(owner, |lctx| f(lctx));\n \n         for (def_id, info) in lctx.children {\n-            self.owners.ensure_contains_elem(def_id, || hir::MaybeOwner::Phantom);\n-            debug_assert!(matches!(self.owners[def_id], hir::MaybeOwner::Phantom));\n-            self.owners[def_id] = info;\n+            let owner = self.owners.ensure_contains_elem(def_id, || hir::MaybeOwner::Phantom);\n+            debug_assert!(matches!(owner, hir::MaybeOwner::Phantom));\n+            *owner = info;\n         }\n     }\n \n     pub(super) fn lower_node(\n         &mut self,\n         def_id: LocalDefId,\n     ) -> hir::MaybeOwner<&'hir hir::OwnerInfo<'hir>> {\n-        self.owners.ensure_contains_elem(def_id, || hir::MaybeOwner::Phantom);\n-        if let hir::MaybeOwner::Phantom = self.owners[def_id] {\n+        let owner = self.owners.ensure_contains_elem(def_id, || hir::MaybeOwner::Phantom);\n+        if let hir::MaybeOwner::Phantom = owner {\n             let node = self.ast_index[def_id];\n             match node {\n                 AstOwner::NonOwner => {}"}, {"sha": "537c2a0618348a694efca024bf4666f82a4f3433", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -368,8 +368,8 @@ fn index_crate<'a>(\n     krate: &'a Crate,\n ) -> IndexVec<LocalDefId, AstOwner<'a>> {\n     let mut indexer = Indexer { node_id_to_def_id, index: IndexVec::new() };\n-    indexer.index.ensure_contains_elem(CRATE_DEF_ID, || AstOwner::NonOwner);\n-    indexer.index[CRATE_DEF_ID] = AstOwner::Crate(krate);\n+    *indexer.index.ensure_contains_elem(CRATE_DEF_ID, || AstOwner::NonOwner) =\n+        AstOwner::Crate(krate);\n     visit::walk_crate(&mut indexer, krate);\n     return indexer.index;\n \n@@ -386,22 +386,21 @@ fn index_crate<'a>(\n \n         fn visit_item(&mut self, item: &'a ast::Item) {\n             let def_id = self.node_id_to_def_id[&item.id];\n-            self.index.ensure_contains_elem(def_id, || AstOwner::NonOwner);\n-            self.index[def_id] = AstOwner::Item(item);\n+            *self.index.ensure_contains_elem(def_id, || AstOwner::NonOwner) = AstOwner::Item(item);\n             visit::walk_item(self, item)\n         }\n \n         fn visit_assoc_item(&mut self, item: &'a ast::AssocItem, ctxt: visit::AssocCtxt) {\n             let def_id = self.node_id_to_def_id[&item.id];\n-            self.index.ensure_contains_elem(def_id, || AstOwner::NonOwner);\n-            self.index[def_id] = AstOwner::AssocItem(item, ctxt);\n+            *self.index.ensure_contains_elem(def_id, || AstOwner::NonOwner) =\n+                AstOwner::AssocItem(item, ctxt);\n             visit::walk_assoc_item(self, item, ctxt);\n         }\n \n         fn visit_foreign_item(&mut self, item: &'a ast::ForeignItem) {\n             let def_id = self.node_id_to_def_id[&item.id];\n-            self.index.ensure_contains_elem(def_id, || AstOwner::NonOwner);\n-            self.index[def_id] = AstOwner::ForeignItem(item);\n+            *self.index.ensure_contains_elem(def_id, || AstOwner::NonOwner) =\n+                AstOwner::ForeignItem(item);\n             visit::walk_foreign_item(self, item);\n         }\n     }"}, {"sha": "fe87aae8ed1110810aa1a718825f2df102448498", "filename": "compiler/rustc_hir_analysis/src/check/compare_impl_item.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcompare_impl_item.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -579,7 +579,7 @@ fn compare_asyncness<'tcx>(\n pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     impl_m_def_id: LocalDefId,\n-) -> Result<&'tcx FxHashMap<DefId, Ty<'tcx>>, ErrorGuaranteed> {\n+) -> Result<&'tcx FxHashMap<DefId, ty::EarlyBinder<Ty<'tcx>>>, ErrorGuaranteed> {\n     let impl_m = tcx.opt_associated_item(impl_m_def_id.to_def_id()).unwrap();\n     let trait_m = tcx.opt_associated_item(impl_m.trait_item_def_id.unwrap()).unwrap();\n     let impl_trait_ref =\n@@ -782,14 +782,14 @@ pub(super) fn collect_return_position_impl_trait_in_trait_tys<'tcx>(\n                     })\n                 });\n                 debug!(%ty);\n-                collected_tys.insert(def_id, ty);\n+                collected_tys.insert(def_id, ty::EarlyBinder(ty));\n             }\n             Err(err) => {\n                 let reported = tcx.sess.delay_span_bug(\n                     return_span,\n                     format!(\"could not fully resolve: {ty} => {err:?}\"),\n                 );\n-                collected_tys.insert(def_id, tcx.ty_error(reported));\n+                collected_tys.insert(def_id, ty::EarlyBinder(tcx.ty_error(reported)));\n             }\n         }\n     }"}, {"sha": "f82fad474224be20ee4bdccf7a025590596504e5", "filename": "compiler/rustc_hir_analysis/src/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcollect%2Ftype_of.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -251,7 +251,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::EarlyBinder<Ty\n         match tcx.collect_return_position_impl_trait_in_trait_tys(fn_def_id) {\n             Ok(map) => {\n                 let assoc_item = tcx.associated_item(def_id);\n-                return ty::EarlyBinder(map[&assoc_item.trait_item_def_id.unwrap()]);\n+                return map[&assoc_item.trait_item_def_id.unwrap()];\n             }\n             Err(_) => {\n                 return ty::EarlyBinder(tcx.ty_error_with_message("}, {"sha": "0c0a7515d9c3bfb0a20bf076356b0dd409a33262", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -38,6 +38,7 @@ use rustc_infer::infer;\n use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKind};\n use rustc_infer::infer::DefineOpaqueTypes;\n use rustc_infer::infer::InferOk;\n+use rustc_infer::traits::query::NoSolution;\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::middle::stability;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment, AllowTwoPhase};\n@@ -53,6 +54,8 @@ use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_target::abi::FieldIdx;\n use rustc_target::spec::abi::Abi::RustIntrinsic;\n use rustc_trait_selection::infer::InferCtxtExt;\n+use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt;\n+use rustc_trait_selection::traits::ObligationCtxt;\n use rustc_trait_selection::traits::{self, ObligationCauseCode};\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -2800,6 +2803,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     element_ty\n                 }\n                 None => {\n+                    // Attempt to *shallowly* search for an impl which matches,\n+                    // but has nested obligations which are unsatisfied.\n+                    for (base_t, _) in self.autoderef(base.span, base_t).silence_errors() {\n+                        if let Some((_, index_ty, element_ty)) =\n+                            self.find_and_report_unsatisfied_index_impl(expr.hir_id, base, base_t)\n+                        {\n+                            self.demand_coerce(idx, idx_t, index_ty, None, AllowTwoPhase::No);\n+                            return element_ty;\n+                        }\n+                    }\n+\n                     let mut err = type_error_struct!(\n                         self.tcx.sess,\n                         expr.span,\n@@ -2843,6 +2857,82 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// Try to match an implementation of `Index` against a self type, and report\n+    /// the unsatisfied predicates that result from confirming this impl.\n+    ///\n+    /// Given an index expression, sometimes the `Self` type shallowly but does not\n+    /// deeply satisfy an impl predicate. Instead of simply saying that the type\n+    /// does not support being indexed, we want to point out exactly what nested\n+    /// predicates cause this to be, so that the user can add them to fix their code.\n+    fn find_and_report_unsatisfied_index_impl(\n+        &self,\n+        index_expr_hir_id: HirId,\n+        base_expr: &hir::Expr<'_>,\n+        base_ty: Ty<'tcx>,\n+    ) -> Option<(ErrorGuaranteed, Ty<'tcx>, Ty<'tcx>)> {\n+        let index_trait_def_id = self.tcx.lang_items().index_trait()?;\n+        let index_trait_output_def_id = self.tcx.get_diagnostic_item(sym::IndexOutput)?;\n+\n+        let mut relevant_impls = vec![];\n+        self.tcx.for_each_relevant_impl(index_trait_def_id, base_ty, |impl_def_id| {\n+            relevant_impls.push(impl_def_id);\n+        });\n+        let [impl_def_id] = relevant_impls[..] else {\n+            // Only report unsatisfied impl predicates if there's one impl\n+            return None;\n+        };\n+\n+        self.commit_if_ok(|_| {\n+            let ocx = ObligationCtxt::new_in_snapshot(self);\n+            let impl_substs = self.fresh_substs_for_item(base_expr.span, impl_def_id);\n+            let impl_trait_ref =\n+                self.tcx.impl_trait_ref(impl_def_id).unwrap().subst(self.tcx, impl_substs);\n+            let cause = self.misc(base_expr.span);\n+\n+            // Match the impl self type against the base ty. If this fails,\n+            // we just skip this impl, since it's not particularly useful.\n+            let impl_trait_ref = ocx.normalize(&cause, self.param_env, impl_trait_ref);\n+            ocx.eq(&cause, self.param_env, impl_trait_ref.self_ty(), base_ty)?;\n+\n+            // Register the impl's predicates. One of these predicates\n+            // must be unsatisfied, or else we wouldn't have gotten here\n+            // in the first place.\n+            ocx.register_obligations(traits::predicates_for_generics(\n+                |idx, span| {\n+                    traits::ObligationCause::new(\n+                        base_expr.span,\n+                        self.body_id,\n+                        if span.is_dummy() {\n+                            traits::ExprItemObligation(impl_def_id, index_expr_hir_id, idx)\n+                        } else {\n+                            traits::ExprBindingObligation(impl_def_id, span, index_expr_hir_id, idx)\n+                        },\n+                    )\n+                },\n+                self.param_env,\n+                self.tcx.predicates_of(impl_def_id).instantiate(self.tcx, impl_substs),\n+            ));\n+\n+            // Normalize the output type, which we can use later on as the\n+            // return type of the index expression...\n+            let element_ty = ocx.normalize(\n+                &cause,\n+                self.param_env,\n+                self.tcx.mk_projection(index_trait_output_def_id, impl_trait_ref.substs),\n+            );\n+\n+            let errors = ocx.select_where_possible();\n+            // There should be at least one error reported. If not, we\n+            // will still delay a span bug in `report_fulfillment_errors`.\n+            Ok::<_, NoSolution>((\n+                self.err_ctxt().report_fulfillment_errors(&errors),\n+                impl_trait_ref.substs.type_at(1),\n+                element_ty,\n+            ))\n+        })\n+        .ok()\n+    }\n+\n     fn point_at_index_if_possible(\n         &self,\n         errors: &mut Vec<traits::FulfillmentError<'tcx>>,"}, {"sha": "d3685d21f2521396e134c7bc77b001d9aeca48c8", "filename": "compiler/rustc_hir_typeck/src/generator_interior/drop_ranges/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fgenerator_interior%2Fdrop_ranges%2Fmod.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -268,8 +268,7 @@ impl DropRangesBuilder {\n \n     fn node_mut(&mut self, id: PostOrderId) -> &mut NodeInfo {\n         let size = self.num_values();\n-        self.nodes.ensure_contains_elem(id, || NodeInfo::new(size));\n-        &mut self.nodes[id]\n+        self.nodes.ensure_contains_elem(id, || NodeInfo::new(size))\n     }\n \n     fn add_control_edge(&mut self, from: PostOrderId, to: PostOrderId) {"}, {"sha": "4605d42a15b7d16c409d51570245a69334f4b5c7", "filename": "compiler/rustc_index/src/interval.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_index%2Fsrc%2Finterval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_index%2Fsrc%2Finterval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Finterval.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -261,8 +261,7 @@ impl<R: Idx, C: Step + Idx> SparseIntervalMatrix<R, C> {\n     }\n \n     fn ensure_row(&mut self, row: R) -> &mut IntervalSet<C> {\n-        self.rows.ensure_contains_elem(row, || IntervalSet::new(self.column_size));\n-        &mut self.rows[row]\n+        self.rows.ensure_contains_elem(row, || IntervalSet::new(self.column_size))\n     }\n \n     pub fn union_row(&mut self, row: R, from: &IntervalSet<C>) -> bool"}, {"sha": "18e779f786e145436fbcba36a4c9e2c4627283df", "filename": "compiler/rustc_index/src/vec.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_index%2Fsrc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_index%2Fsrc%2Fvec.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -236,12 +236,16 @@ impl<I: Idx, T> IndexVec<I, T> {\n     /// `elem`; if that is already true, then has no\n     /// effect. Otherwise, inserts new values as needed by invoking\n     /// `fill_value`.\n+    ///\n+    /// Returns a reference to the `elem` entry.\n     #[inline]\n-    pub fn ensure_contains_elem(&mut self, elem: I, fill_value: impl FnMut() -> T) {\n+    pub fn ensure_contains_elem(&mut self, elem: I, fill_value: impl FnMut() -> T) -> &mut T {\n         let min_new_len = elem.index() + 1;\n         if self.len() < min_new_len {\n             self.raw.resize_with(min_new_len, fill_value);\n         }\n+\n+        &mut self[elem]\n     }\n \n     #[inline]\n@@ -446,20 +450,17 @@ impl<I: Idx, J: Idx> IndexSlice<I, J> {\n impl<I: Idx, T> IndexVec<I, Option<T>> {\n     #[inline]\n     pub fn insert(&mut self, index: I, value: T) -> Option<T> {\n-        self.ensure_contains_elem(index, || None);\n-        self[index].replace(value)\n+        self.ensure_contains_elem(index, || None).replace(value)\n     }\n \n     #[inline]\n     pub fn get_or_insert_with(&mut self, index: I, value: impl FnOnce() -> T) -> &mut T {\n-        self.ensure_contains_elem(index, || None);\n-        self[index].get_or_insert_with(value)\n+        self.ensure_contains_elem(index, || None).get_or_insert_with(value)\n     }\n \n     #[inline]\n     pub fn remove(&mut self, index: I) -> Option<T> {\n-        self.ensure_contains_elem(index, || None);\n-        self[index].take()\n+        self.get_mut(index)?.take()\n     }\n }\n "}, {"sha": "b0c376a26f614f8749fd6ddb2faf6314c18e7935", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -74,7 +74,6 @@ use rustc_middle::ty::{\n     self, error::TypeError, List, Region, Ty, TyCtxt, TypeFoldable, TypeSuperVisitable,\n     TypeVisitable, TypeVisitableExt,\n };\n-use rustc_span::DUMMY_SP;\n use rustc_span::{sym, symbol::kw, BytePos, DesugaringKind, Pos, Span};\n use rustc_target::spec::abi;\n use std::ops::{ControlFlow, Deref};\n@@ -138,7 +137,7 @@ impl Drop for TypeErrCtxt<'_, '_> {\n             self.infcx\n                 .tcx\n                 .sess\n-                .delay_span_bug(DUMMY_SP, \"used a `TypeErrCtxt` without failing compilation\");\n+                .delay_good_path_bug(\"used a `TypeErrCtxt` without raising an error or lint\");\n         }\n     }\n }"}, {"sha": "648a7c6eed66d3d72c8bec8bbaed84edaeb7fd54", "filename": "compiler/rustc_lint/src/nonstandard_style.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fnonstandard_style.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -494,6 +494,15 @@ impl<'tcx> LateLintPass<'tcx> for NonUpperCaseGlobals {\n             hir::ItemKind::Const(..) => {\n                 NonUpperCaseGlobals::check_upper_case(cx, \"constant\", &it.ident);\n             }\n+            // we only want to check inherent associated consts, trait consts\n+            // are linted at def-site.\n+            hir::ItemKind::Impl(hir::Impl { of_trait: None, items, .. }) => {\n+                for it in *items {\n+                    if let hir::AssocItemKind::Const = it.kind {\n+                        NonUpperCaseGlobals::check_upper_case(cx, \"associated constant\", &it.ident);\n+                    }\n+                }\n+            }\n             _ => {}\n         }\n     }\n@@ -504,12 +513,6 @@ impl<'tcx> LateLintPass<'tcx> for NonUpperCaseGlobals {\n         }\n     }\n \n-    fn check_impl_item(&mut self, cx: &LateContext<'_>, ii: &hir::ImplItem<'_>) {\n-        if let hir::ImplItemKind::Const(..) = ii.kind {\n-            NonUpperCaseGlobals::check_upper_case(cx, \"associated constant\", &ii.ident);\n-        }\n-    }\n-\n     fn check_pat(&mut self, cx: &LateContext<'_>, p: &hir::Pat<'_>) {\n         // Lint for constants that look like binding identifiers (#7526)\n         if let PatKind::Path(hir::QPath::Resolved(None, ref path)) = p.kind {"}, {"sha": "a6a34765324fe0929d2f0e7f23137fafa0f46bf4", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -416,7 +416,7 @@ define_tables! {\n     macro_definition: Table<DefIndex, LazyValue<ast::DelimArgs>>,\n     proc_macro: Table<DefIndex, MacroKind>,\n     deduced_param_attrs: Table<DefIndex, LazyArray<DeducedParamAttrs>>,\n-    trait_impl_trait_tys: Table<DefIndex, LazyValue<FxHashMap<DefId, Ty<'static>>>>,\n+    trait_impl_trait_tys: Table<DefIndex, LazyValue<FxHashMap<DefId, ty::EarlyBinder<Ty<'static>>>>>,\n     doc_link_resolutions: Table<DefIndex, LazyValue<DocLinkResMap>>,\n     doc_link_traits_in_scope: Table<DefIndex, LazyArray<DefId>>,\n }"}, {"sha": "66e2518fa56e530f05ece3d629ecab6d34f2d684", "filename": "compiler/rustc_metadata/src/rmeta/table.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Ftable.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -413,8 +413,8 @@ impl<I: Idx, const N: usize, T: FixedSizeEncoding<ByteArray = [u8; N]>> TableBui\n             // > Space requirements could perhaps be optimized by using the HAMT `popcnt`\n             // > trick (i.e. divide things into buckets of 32 or 64 items and then\n             // > store bit-masks of which item in each bucket is actually serialized).\n-            self.blocks.ensure_contains_elem(i, || [0; N]);\n-            value.write_to_bytes(&mut self.blocks[i]);\n+            let block = self.blocks.ensure_contains_elem(i, || [0; N]);\n+            value.write_to_bytes(block);\n         }\n     }\n "}, {"sha": "60d7cf59d04702d675cca287076532adf4c278d7", "filename": "compiler/rustc_middle/src/arena.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_middle%2Fsrc%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Farena.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -114,7 +114,11 @@ macro_rules! arena_types {\n \n             [] dep_kind: rustc_middle::dep_graph::DepKindStruct<'tcx>,\n \n-            [decode] trait_impl_trait_tys: rustc_data_structures::fx::FxHashMap<rustc_hir::def_id::DefId, rustc_middle::ty::Ty<'tcx>>,\n+            [decode] trait_impl_trait_tys:\n+                rustc_data_structures::fx::FxHashMap<\n+                    rustc_hir::def_id::DefId,\n+                    rustc_middle::ty::EarlyBinder<rustc_middle::ty::Ty<'tcx>>\n+                >,\n             [] bit_set_u32: rustc_index::bit_set::BitSet<u32>,\n             [] external_constraints: rustc_middle::traits::solve::ExternalConstraintsData<'tcx>,\n             [decode] doc_link_resolutions: rustc_hir::def::DocLinkResMap,"}, {"sha": "7e26e05025ff15592c6e14d4dbc3d82e9a76fc7d", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -181,7 +181,7 @@ rustc_queries! {\n     }\n \n     query collect_return_position_impl_trait_in_trait_tys(key: DefId)\n-        -> Result<&'tcx FxHashMap<DefId, Ty<'tcx>>, ErrorGuaranteed>\n+        -> Result<&'tcx FxHashMap<DefId, ty::EarlyBinder<Ty<'tcx>>>, ErrorGuaranteed>\n     {\n         desc { \"comparing an impl and trait method signature, inferring any hidden `impl Trait` types in the process\" }\n         cache_on_disk_if { key.is_local() }"}, {"sha": "dbe2eebe3360417958e34211de1e52d7ac2af97e", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -694,13 +694,6 @@ impl<'tcx> TyCtxt<'tcx> {\n         if visitor.found_recursion { Err(expanded_type) } else { Ok(expanded_type) }\n     }\n \n-    pub fn bound_return_position_impl_trait_in_trait_tys(\n-        self,\n-        def_id: DefId,\n-    ) -> ty::EarlyBinder<Result<&'tcx FxHashMap<DefId, Ty<'tcx>>, ErrorGuaranteed>> {\n-        ty::EarlyBinder(self.collect_return_position_impl_trait_in_trait_tys(def_id))\n-    }\n-\n     pub fn bound_explicit_item_bounds(\n         self,\n         def_id: DefId,"}, {"sha": "40869fdc467ddeef5fbbed15b77e51edb3883e26", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -807,7 +807,9 @@ impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for &'tcx UnordSet<LocalDefId>\n     }\n }\n \n-impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>> for &'tcx FxHashMap<DefId, Ty<'tcx>> {\n+impl<'a, 'tcx> Decodable<CacheDecoder<'a, 'tcx>>\n+    for &'tcx FxHashMap<DefId, ty::EarlyBinder<Ty<'tcx>>>\n+{\n     fn decode(d: &mut CacheDecoder<'a, 'tcx>) -> Self {\n         RefDecodable::decode(d)\n     }"}, {"sha": "d6ee7ac34aaca594650508f57f810e63ff6725bc", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -204,6 +204,7 @@ symbols! {\n         HashSet,\n         Hasher,\n         Implied,\n+        IndexOutput,\n         Input,\n         Into,\n         IntoDiagnostic,"}, {"sha": "5e042ffc6036744d89064a12f93b152ef7b70f1e", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -2277,11 +2277,10 @@ fn confirm_impl_trait_in_trait_candidate<'tcx>(\n         obligation.param_env,\n         cause.clone(),\n         obligation.recursion_depth + 1,\n-        tcx.bound_return_position_impl_trait_in_trait_tys(impl_fn_def_id)\n-            .map_bound(|tys| {\n-                tys.map_or_else(|guar| tcx.ty_error(guar), |tys| tys[&obligation.predicate.def_id])\n-            })\n-            .subst(tcx, impl_fn_substs),\n+        tcx.collect_return_position_impl_trait_in_trait_tys(impl_fn_def_id).map_or_else(\n+            |guar| tcx.ty_error(guar),\n+            |tys| tys[&obligation.predicate.def_id].subst(tcx, impl_fn_substs),\n+        ),\n         &mut obligations,\n     );\n "}, {"sha": "a019d00461be15ca0f92106c51ca06af7b579d0b", "filename": "compiler/rustc_trait_selection/src/traits/select/candidate_assembly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fcandidate_assembly.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -775,7 +775,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         obligation: &TraitObligation<'tcx>,\n         candidates: &mut SelectionCandidateSet<'tcx>,\n     ) {\n-        if obligation.has_non_region_param() {\n+        if obligation.predicate.has_non_region_param() {\n             return;\n         }\n "}, {"sha": "f3754484f6a0609e53a6aedad5a0351e40e38ec9", "filename": "library/core/src/ops/index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/library%2Fcore%2Fsrc%2Fops%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Findex.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -59,6 +59,7 @@\n pub trait Index<Idx: ?Sized> {\n     /// The returned type after indexing.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_diagnostic_item = \"IndexOutput\"]\n     type Output: ?Sized;\n \n     /// Performs the indexing (`container[index]`) operation."}, {"sha": "79eec6f848c272052f2ec594daa3a6e27989a00c", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -121,7 +121,7 @@ impl Step for ToolBuild {\n         builder.info(&msg);\n \n         let mut cargo = Command::from(cargo);\n-        let is_expected = builder.try_run_quiet(&mut cargo);\n+        let is_expected = builder.try_run(&mut cargo);\n \n         builder.save_toolstate(\n             tool,"}, {"sha": "893c15f5d731c54f999dda846de8413e384f6ad1", "filename": "src/tools/clippy/tests/ui/crashes/ice-5207.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-5207.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-5207.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-5207.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -1,5 +1,8 @@\n-// Regression test for https://github.com/rust-lang/rust-clippy/issues/5207\n+// compile-flags: --cap-lints=warn\n+// ^ for https://github.com/rust-lang/rust-clippy/issues/10645\n \n+// Regression test for https://github.com/rust-lang/rust-clippy/issues/5207\n+#![warn(clippy::future_not_send)]\n pub async fn bar<'a, T: 'a>(_: T) {}\n \n fn main() {}"}, {"sha": "367e9a08b75634e74bcbe0cf30a164fc7ff23a20", "filename": "src/tools/clippy/tests/ui/crashes/ice-5207.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-5207.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-5207.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-5207.stderr?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -0,0 +1,16 @@\n+warning: future cannot be sent between threads safely\n+  --> $DIR/ice-5207.rs:6:35\n+   |\n+LL | pub async fn bar<'a, T: 'a>(_: T) {}\n+   |                                   ^ future returned by `bar` is not `Send`\n+   |\n+note: captured value is not `Send`\n+  --> $DIR/ice-5207.rs:6:29\n+   |\n+LL | pub async fn bar<'a, T: 'a>(_: T) {}\n+   |                             ^ has type `T` which is not `Send`\n+   = note: `T` doesn't implement `std::marker::Send`\n+   = note: `-D clippy::future-not-send` implied by `-D warnings`\n+\n+warning: 1 warning emitted\n+"}, {"sha": "4409611c200fc2f392dd2a3bc4c764ef001259d9", "filename": "tests/ui/lint/lint-non-uppercase-trait-assoc-const.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/tests%2Fui%2Flint%2Flint-non-uppercase-trait-assoc-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/tests%2Fui%2Flint%2Flint-non-uppercase-trait-assoc-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-non-uppercase-trait-assoc-const.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -0,0 +1,15 @@\n+#![deny(non_upper_case_globals)]\n+\n+trait Trait {\n+    const item: usize;\n+    //~^ ERROR associated constant `item` should have an upper case name [non_upper_case_globals]\n+}\n+\n+struct Foo;\n+\n+impl Trait for Foo {\n+    const item: usize = 5;\n+    // ^^^ there should be no error here (in the trait `impl`)\n+}\n+\n+fn main() {}"}, {"sha": "98d8d1dd27f3580225990297fe561b6d5c4f13a4", "filename": "tests/ui/lint/lint-non-uppercase-trait-assoc-const.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/tests%2Fui%2Flint%2Flint-non-uppercase-trait-assoc-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/tests%2Fui%2Flint%2Flint-non-uppercase-trait-assoc-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Flint-non-uppercase-trait-assoc-const.stderr?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -0,0 +1,14 @@\n+error: associated constant `item` should have an upper case name\n+  --> $DIR/lint-non-uppercase-trait-assoc-const.rs:4:11\n+   |\n+LL |     const item: usize;\n+   |           ^^^^ help: convert the identifier to upper case: `ITEM`\n+   |\n+note: the lint level is defined here\n+  --> $DIR/lint-non-uppercase-trait-assoc-const.rs:1:9\n+   |\n+LL | #![deny(non_upper_case_globals)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "358733b9832c2a0e266f477c7513cf738403650e", "filename": "tests/ui/transmutability/issue-110467.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/tests%2Fui%2Ftransmutability%2Fissue-110467.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/tests%2Fui%2Ftransmutability%2Fissue-110467.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmutability%2Fissue-110467.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -0,0 +1,17 @@\n+// check-pass\n+#![crate_type = \"lib\"]\n+#![feature(transmutability)]\n+use std::mem::BikeshedIntrinsicFrom;\n+pub struct Context;\n+\n+pub fn is_maybe_transmutable<Src, Dst>()\n+where\n+    Dst: BikeshedIntrinsicFrom<Src, Context>,\n+{\n+}\n+\n+// The `T` here should not have any effect on checking\n+// if transmutability is allowed or not.\n+fn function_with_generic<T>() {\n+    is_maybe_transmutable::<(), ()>();\n+}"}, {"sha": "2564b530004e5f61e3b6b0fad4c5641c2d94e600", "filename": "tests/ui/typeck/bad-index-due-to-nested.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/tests%2Fui%2Ftypeck%2Fbad-index-due-to-nested.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/tests%2Fui%2Ftypeck%2Fbad-index-due-to-nested.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fbad-index-due-to-nested.rs?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -0,0 +1,27 @@\n+use std::hash::Hash;\n+use std::marker::PhantomData;\n+use std::ops::Index;\n+\n+struct HashMap<K, V>(PhantomData<(K, V)>);\n+\n+impl<K, V> Index<&K> for HashMap<K, V>\n+where\n+    K: Hash,\n+    V: Copy,\n+{\n+    type Output = V;\n+\n+    fn index(&self, k: &K) -> &V {\n+        todo!()\n+    }\n+}\n+\n+fn index<'a, K, V>(map: &'a HashMap<K, V>, k: K) -> &'a V {\n+    map[k]\n+    //~^ ERROR the trait bound `K: Hash` is not satisfied\n+    //~| ERROR the trait bound `V: Copy` is not satisfied\n+    //~| ERROR mismatched types\n+    //~| ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "e03b06b336eefc0d989275b87816796ffede031c", "filename": "tests/ui/typeck/bad-index-due-to-nested.stderr", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/tests%2Fui%2Ftypeck%2Fbad-index-due-to-nested.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e/tests%2Fui%2Ftypeck%2Fbad-index-due-to-nested.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftypeck%2Fbad-index-due-to-nested.stderr?ref=c7815840793b980d0aae7d5a2f5d9bb1fd6c0d1e", "patch": "@@ -0,0 +1,64 @@\n+error[E0277]: the trait bound `K: Hash` is not satisfied\n+  --> $DIR/bad-index-due-to-nested.rs:20:5\n+   |\n+LL |     map[k]\n+   |     ^^^ the trait `Hash` is not implemented for `K`\n+   |\n+note: required by a bound in `<HashMap<K, V> as Index<&K>>`\n+  --> $DIR/bad-index-due-to-nested.rs:9:8\n+   |\n+LL |     K: Hash,\n+   |        ^^^^ required by this bound in `<HashMap<K, V> as Index<&K>>`\n+help: consider restricting type parameter `K`\n+   |\n+LL | fn index<'a, K: std::hash::Hash, V>(map: &'a HashMap<K, V>, k: K) -> &'a V {\n+   |               +++++++++++++++++\n+\n+error[E0277]: the trait bound `V: Copy` is not satisfied\n+  --> $DIR/bad-index-due-to-nested.rs:20:5\n+   |\n+LL |     map[k]\n+   |     ^^^ the trait `Copy` is not implemented for `V`\n+   |\n+note: required by a bound in `<HashMap<K, V> as Index<&K>>`\n+  --> $DIR/bad-index-due-to-nested.rs:10:8\n+   |\n+LL |     V: Copy,\n+   |        ^^^^ required by this bound in `<HashMap<K, V> as Index<&K>>`\n+help: consider restricting type parameter `V`\n+   |\n+LL | fn index<'a, K, V: std::marker::Copy>(map: &'a HashMap<K, V>, k: K) -> &'a V {\n+   |                  +++++++++++++++++++\n+\n+error[E0308]: mismatched types\n+  --> $DIR/bad-index-due-to-nested.rs:20:9\n+   |\n+LL | fn index<'a, K, V>(map: &'a HashMap<K, V>, k: K) -> &'a V {\n+   |              - this type parameter\n+LL |     map[k]\n+   |         ^\n+   |         |\n+   |         expected `&K`, found type parameter `K`\n+   |         help: consider borrowing here: `&k`\n+   |\n+   = note:   expected reference `&K`\n+           found type parameter `K`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/bad-index-due-to-nested.rs:20:5\n+   |\n+LL | fn index<'a, K, V>(map: &'a HashMap<K, V>, k: K) -> &'a V {\n+   |                 - this type parameter               ----- expected `&'a V` because of return type\n+LL |     map[k]\n+   |     ^^^^^^\n+   |     |\n+   |     expected `&V`, found type parameter `V`\n+   |     help: consider borrowing here: `&map[k]`\n+   |\n+   = note:   expected reference `&'a V`\n+           found type parameter `V`\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0277, E0308.\n+For more information about an error, try `rustc --explain E0277`."}]}