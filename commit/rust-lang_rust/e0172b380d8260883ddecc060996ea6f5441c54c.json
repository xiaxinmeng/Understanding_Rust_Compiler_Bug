{"sha": "e0172b380d8260883ddecc060996ea6f5441c54c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwMTcyYjM4MGQ4MjYwODgzZGRlY2MwNjA5OTZlYTZmNTQ0MWM1NGM=", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-08-01T21:37:38Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2021-08-01T21:37:38Z"}, "message": "Write docs for SyncOnceCell From and Default impl", "tree": {"sha": "1d56ecb8707924148fb740d37b5093e9db7e18ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d56ecb8707924148fb740d37b5093e9db7e18ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e0172b380d8260883ddecc060996ea6f5441c54c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e0172b380d8260883ddecc060996ea6f5441c54c", "html_url": "https://github.com/rust-lang/rust/commit/e0172b380d8260883ddecc060996ea6f5441c54c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e0172b380d8260883ddecc060996ea6f5441c54c/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e21ef2a4eca12180e24a345d66066fc1e4e36da", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e21ef2a4eca12180e24a345d66066fc1e4e36da", "html_url": "https://github.com/rust-lang/rust/commit/4e21ef2a4eca12180e24a345d66066fc1e4e36da"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "132733a0525106034097eb4889776bdc2b5cf29a", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e0172b380d8260883ddecc060996ea6f5441c54c/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e0172b380d8260883ddecc060996ea6f5441c54c/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=e0172b380d8260883ddecc060996ea6f5441c54c", "patch": "@@ -87,6 +87,19 @@ impl<T: UnwindSafe> UnwindSafe for SyncOnceCell<T> {}\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T> Default for SyncOnceCell<T> {\n+    /// Creates a new empty cell.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// #![feature(once_cell)]\n+    ///\n+    /// use std::lazy::SyncOnceCell;\n+    ///\n+    /// fn main() {\n+    ///     assert_eq!(SyncOnceCell::<()>::new(), SyncOnceCell::default());\n+    /// }\n+    /// ```\n     fn default() -> SyncOnceCell<T> {\n         SyncOnceCell::new()\n     }\n@@ -118,6 +131,23 @@ impl<T: Clone> Clone for SyncOnceCell<T> {\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n impl<T> From<T> for SyncOnceCell<T> {\n+    /// Create a new cell with its contents set to `value`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```\n+    /// #![feature(once_cell)]\n+    ///\n+    /// use std::lazy::SyncOnceCell;\n+    ///\n+    /// # fn main() -> Result<(), i32> {\n+    /// let a = SyncOnceCell::from(3);\n+    /// let b = SyncOnceCell::new();\n+    /// b.set(3)?;\n+    /// assert_eq!(a, b);\n+    /// Ok(())\n+    /// # }\n+    /// ```\n     fn from(value: T) -> Self {\n         let cell = Self::new();\n         match cell.set(value) {"}]}