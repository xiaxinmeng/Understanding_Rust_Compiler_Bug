{"sha": "83d5c240711840202dda6d4581ba1f420c916c21", "node_id": "C_kwDOAAsO6NoAKDgzZDVjMjQwNzExODQwMjAyZGRhNmQ0NTgxYmExZjQyMGM5MTZjMjE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-10-27T16:25:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-27T16:25:46Z"}, "message": "Rollup merge of #90288 - JakobDegen:import_diagnostics, r=davidtwco\n\nAdd hint for people missing `TryFrom`, `TryInto`, `FromIterator` import pre-2021\n\nAdds a hint anytime a `TryFrom`, `TryInto`, `FromIterator` import is suggested noting that these traits are automatically imported in Edition 2021.", "tree": {"sha": "91010c0f61b84887c2c5b2d2e65af746f95d3c7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91010c0f61b84887c2c5b2d2e65af746f95d3c7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83d5c240711840202dda6d4581ba1f420c916c21", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJheX2KCRBK7hj4Ov3rIwAA20MIAIr5UOKMOO6n/dtuWfeqCgrv\nFKSzUjW4qDZPz2kyDBP0AHSzWLkcnZOHYbT//gD+1rcJ7IrFU+cn9SYOTfMRiH8a\n6PFC2FJEPwO2Yz7FVywe+XzsjoMbt+11YE/4JgJ8tYdjRrA7kpgRo8Le4WTaxl46\ndenPPvVpdXRTow2kJqXmhZcvgiqFfuPaJUGLHaMKjYvapRD1wXLSJQhHejAtNObE\nEB/6YPWEPv3AsGDK7hZggsENg64TSMNhA1A+VknWJ6bT0+yfpd+4CHyOg7ht/ndj\nzjry6xW2UJ6jFQ4RpmhK1hzRfpfaFotYjrmEAZ3gvUXxqO8A2GtxJAHcCOVSBAY=\n=cpxP\n-----END PGP SIGNATURE-----\n", "payload": "tree 91010c0f61b84887c2c5b2d2e65af746f95d3c7d\nparent 17d17420285b312ea75faddad79d8552e685c85e\nparent cb336f1f677374e463ffa1a1fcc32ce398cb4cbe\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1635351946 +0200\ncommitter GitHub <noreply@github.com> 1635351946 +0200\n\nRollup merge of #90288 - JakobDegen:import_diagnostics, r=davidtwco\n\nAdd hint for people missing `TryFrom`, `TryInto`, `FromIterator` import pre-2021\n\nAdds a hint anytime a `TryFrom`, `TryInto`, `FromIterator` import is suggested noting that these traits are automatically imported in Edition 2021.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83d5c240711840202dda6d4581ba1f420c916c21", "html_url": "https://github.com/rust-lang/rust/commit/83d5c240711840202dda6d4581ba1f420c916c21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83d5c240711840202dda6d4581ba1f420c916c21/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17d17420285b312ea75faddad79d8552e685c85e", "url": "https://api.github.com/repos/rust-lang/rust/commits/17d17420285b312ea75faddad79d8552e685c85e", "html_url": "https://github.com/rust-lang/rust/commit/17d17420285b312ea75faddad79d8552e685c85e"}, {"sha": "cb336f1f677374e463ffa1a1fcc32ce398cb4cbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb336f1f677374e463ffa1a1fcc32ce398cb4cbe", "html_url": "https://github.com/rust-lang/rust/commit/cb336f1f677374e463ffa1a1fcc32ce398cb4cbe"}], "stats": {"total": 179, "additions": 172, "deletions": 7}, "files": [{"sha": "ccfab263bd48ea4c56d8cec004c74ba1d64ba2cb", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 49, "deletions": 7, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/83d5c240711840202dda6d4581ba1f420c916c21/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d5c240711840202dda6d4581ba1f420c916c21/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=83d5c240711840202dda6d4581ba1f420c916c21", "patch": "@@ -66,6 +66,8 @@ crate struct ImportSuggestion {\n     pub descr: &'static str,\n     pub path: Path,\n     pub accessible: bool,\n+    /// An extra note that should be issued if this item is suggested\n+    pub note: Option<String>,\n }\n \n /// Adjust the impl span so that just the `impl` keyword is taken by removing\n@@ -872,11 +874,38 @@ impl<'a> Resolver<'a> {\n                         }\n \n                         if candidates.iter().all(|v: &ImportSuggestion| v.did != did) {\n+                            // See if we're recommending TryFrom, TryInto, or FromIterator and add\n+                            // a note about editions\n+                            let note = if let Some(did) = did {\n+                                let requires_note = !did.is_local()\n+                                    && this.cstore().item_attrs(did, this.session).iter().any(\n+                                        |attr| {\n+                                            if attr.has_name(sym::rustc_diagnostic_item) {\n+                                                [sym::TryInto, sym::TryFrom, sym::FromIterator]\n+                                                    .map(|x| Some(x))\n+                                                    .contains(&attr.value_str())\n+                                            } else {\n+                                                false\n+                                            }\n+                                        },\n+                                    );\n+\n+                                requires_note.then(|| {\n+                                    format!(\n+                                        \"'{}' is included in the prelude starting in Edition 2021\",\n+                                        path_names_to_string(&path)\n+                                    )\n+                                })\n+                            } else {\n+                                None\n+                            };\n+\n                             candidates.push(ImportSuggestion {\n                                 did,\n                                 descr: res.descr(),\n                                 path,\n                                 accessible: child_accessible,\n+                                note,\n                             });\n                         }\n                     }\n@@ -1764,12 +1793,14 @@ crate fn show_candidates(\n         return;\n     }\n \n-    let mut accessible_path_strings: Vec<(String, &str, Option<DefId>)> = Vec::new();\n-    let mut inaccessible_path_strings: Vec<(String, &str, Option<DefId>)> = Vec::new();\n+    let mut accessible_path_strings: Vec<(String, &str, Option<DefId>, &Option<String>)> =\n+        Vec::new();\n+    let mut inaccessible_path_strings: Vec<(String, &str, Option<DefId>, &Option<String>)> =\n+        Vec::new();\n \n     candidates.iter().for_each(|c| {\n         (if c.accessible { &mut accessible_path_strings } else { &mut inaccessible_path_strings })\n-            .push((path_names_to_string(&c.path), c.descr, c.did))\n+            .push((path_names_to_string(&c.path), c.descr, c.did, &c.note))\n     });\n \n     // we want consistent results across executions, but candidates are produced\n@@ -1792,6 +1823,10 @@ crate fn show_candidates(\n         let instead = if instead { \" instead\" } else { \"\" };\n         let mut msg = format!(\"consider importing {} {}{}\", determiner, kind, instead);\n \n+        for note in accessible_path_strings.iter().map(|cand| cand.3.as_ref()).flatten() {\n+            err.note(note);\n+        }\n+\n         if let Some(span) = use_placement_span {\n             for candidate in &mut accessible_path_strings {\n                 // produce an additional newline to separate the new use statement\n@@ -1820,7 +1855,7 @@ crate fn show_candidates(\n         assert!(!inaccessible_path_strings.is_empty());\n \n         if inaccessible_path_strings.len() == 1 {\n-            let (name, descr, def_id) = &inaccessible_path_strings[0];\n+            let (name, descr, def_id, note) = &inaccessible_path_strings[0];\n             let msg = format!(\"{} `{}` exists but is inaccessible\", descr, name);\n \n             if let Some(local_def_id) = def_id.and_then(|did| did.as_local()) {\n@@ -1832,12 +1867,15 @@ crate fn show_candidates(\n             } else {\n                 err.note(&msg);\n             }\n+            if let Some(note) = (*note).as_deref() {\n+                err.note(note);\n+            }\n         } else {\n-            let (_, descr_first, _) = &inaccessible_path_strings[0];\n+            let (_, descr_first, _, _) = &inaccessible_path_strings[0];\n             let descr = if inaccessible_path_strings\n                 .iter()\n                 .skip(1)\n-                .all(|(_, descr, _)| descr == descr_first)\n+                .all(|(_, descr, _, _)| descr == descr_first)\n             {\n                 descr_first.to_string()\n             } else {\n@@ -1848,7 +1886,7 @@ crate fn show_candidates(\n             let mut has_colon = false;\n \n             let mut spans = Vec::new();\n-            for (name, _, def_id) in &inaccessible_path_strings {\n+            for (name, _, def_id, _) in &inaccessible_path_strings {\n                 if let Some(local_def_id) = def_id.and_then(|did| did.as_local()) {\n                     let span = definitions.def_span(local_def_id);\n                     let span = session.source_map().guess_head_span(span);\n@@ -1868,6 +1906,10 @@ crate fn show_candidates(\n                 multi_span.push_span_label(span, format!(\"`{}`: not accessible\", name));\n             }\n \n+            for note in inaccessible_path_strings.iter().map(|cand| cand.3.as_ref()).flatten() {\n+                err.note(note);\n+            }\n+\n             err.span_note(multi_span, &msg);\n         }\n     }"}, {"sha": "5f90fcdfa64e2cc205525adfa782b98bdb29484b", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/83d5c240711840202dda6d4581ba1f420c916c21/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d5c240711840202dda6d4581ba1f420c916c21/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=83d5c240711840202dda6d4581ba1f420c916c21", "patch": "@@ -1502,6 +1502,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                                 descr: \"module\",\n                                 path,\n                                 accessible: true,\n+                                note: None,\n                             },\n                         ));\n                     } else {"}, {"sha": "28b19981c2d40766f4442dbed32fca63481e827d", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/83d5c240711840202dda6d4581ba1f420c916c21/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d5c240711840202dda6d4581ba1f420c916c21/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=83d5c240711840202dda6d4581ba1f420c916c21", "patch": "@@ -1203,6 +1203,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let mut candidates = valid_out_of_scope_traits;\n             candidates.sort();\n             candidates.dedup();\n+\n+            // `TryFrom` and `FromIterator` have no methods\n+            let edition_fix = candidates\n+                .iter()\n+                .find(|did| self.tcx.is_diagnostic_item(sym::TryInto, **did))\n+                .map(|&d| d);\n+\n             err.help(\"items from traits can only be used if the trait is in scope\");\n             let msg = format!(\n                 \"the following {traits_are} implemented but not in scope; \\\n@@ -1212,6 +1219,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             );\n \n             self.suggest_use_candidates(err, msg, candidates);\n+            if let Some(did) = edition_fix {\n+                err.note(&format!(\n+                    \"'{}' is included in the prelude starting in Edition 2021\",\n+                    with_crate_prefix(|| self.tcx.def_path_str(did))\n+                ));\n+            }\n+\n             true\n         } else {\n             false"}, {"sha": "d945b4c94ca2f128d6d628484b6d24bd519b11bc", "filename": "src/test/ui/rust-2021/future-prelude-collision-shadow.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/83d5c240711840202dda6d4581ba1f420c916c21/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83d5c240711840202dda6d4581ba1f420c916c21/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr?ref=83d5c240711840202dda6d4581ba1f420c916c21", "patch": "@@ -15,6 +15,7 @@ LL |     fn try_into(self) -> Result<T, Self::Error>;\n    |        the method is available for `Rc<u8>` here\n    |\n    = help: items from traits can only be used if the trait is in scope\n+   = note: 'std::convert::TryInto' is included in the prelude starting in Edition 2021\n help: consider wrapping the receiver expression with the appropriate type\n    |\n LL |         let _: u32 = Box::new(3u8).try_into().unwrap();"}, {"sha": "f03b42bbe47518d95f4202d66e3736e046cc532d", "filename": "src/test/ui/suggestions/suggest-tryinto-edition-change.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/83d5c240711840202dda6d4581ba1f420c916c21/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83d5c240711840202dda6d4581ba1f420c916c21/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.rs?ref=83d5c240711840202dda6d4581ba1f420c916c21", "patch": "@@ -0,0 +1,31 @@\n+// Make sure that trying to access `TryInto`, `TryFrom`, `FromIterator` in pre-2021 mentions\n+// Edition 2021 change\n+// edition:2018\n+\n+fn test() {\n+    let _i: i16 = 0_i32.try_into().unwrap();\n+    //~^ ERROR no method named `try_into` found for type `i32` in the current scope\n+    //~| NOTE method not found in `i32`\n+    //~| NOTE 'std::convert::TryInto' is included in the prelude starting in Edition 2021\n+\n+    let _i: i16 = TryFrom::try_from(0_i32).unwrap();\n+    //~^ ERROR failed to resolve: use of undeclared type\n+    //~| NOTE not found in this scope\n+    //~| NOTE 'std::convert::TryFrom' is included in the prelude starting in Edition 2021\n+    //~| NOTE 'core::convert::TryFrom' is included in the prelude starting in Edition 2021\n+\n+    let _i: i16 = TryInto::try_into(0_i32).unwrap();\n+    //~^ ERROR failed to resolve: use of undeclared type\n+    //~| NOTE not found in this scope\n+    //~| NOTE 'std::convert::TryInto' is included in the prelude starting in Edition 2021\n+    //~| NOTE 'core::convert::TryInto' is included in the prelude starting in Edition 2021\n+\n+    let _v: Vec<_> = FromIterator::from_iter(&[1]);\n+    //~^ ERROR failed to resolve: use of undeclared type\n+    //~| NOTE 'std::iter::FromIterator' is included in the prelude starting in Edition 2021\n+    //~| NOTE 'core::iter::FromIterator' is included in the prelude starting in Edition 2021\n+}\n+\n+fn main() {\n+    test();\n+}"}, {"sha": "86f48716b16b50df0ea6f1dcb8af619f0c537363", "filename": "src/test/ui/suggestions/suggest-tryinto-edition-change.stderr", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/83d5c240711840202dda6d4581ba1f420c916c21/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/83d5c240711840202dda6d4581ba1f420c916c21/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr?ref=83d5c240711840202dda6d4581ba1f420c916c21", "patch": "@@ -0,0 +1,76 @@\n+error[E0433]: failed to resolve: use of undeclared type `TryFrom`\n+  --> $DIR/suggest-tryinto-edition-change.rs:11:19\n+   |\n+LL |     let _i: i16 = TryFrom::try_from(0_i32).unwrap();\n+   |                   ^^^^^^^ not found in this scope\n+   |\n+   = note: 'std::convert::TryFrom' is included in the prelude starting in Edition 2021\n+   = note: 'core::convert::TryFrom' is included in the prelude starting in Edition 2021\n+help: consider importing one of these items\n+   |\n+LL | use core::convert::TryFrom;\n+   |\n+LL | use std::convert::TryFrom;\n+   |\n+\n+error[E0433]: failed to resolve: use of undeclared type `TryInto`\n+  --> $DIR/suggest-tryinto-edition-change.rs:17:19\n+   |\n+LL |     let _i: i16 = TryInto::try_into(0_i32).unwrap();\n+   |                   ^^^^^^^ not found in this scope\n+   |\n+   = note: 'std::convert::TryInto' is included in the prelude starting in Edition 2021\n+   = note: 'core::convert::TryInto' is included in the prelude starting in Edition 2021\n+help: consider importing one of these items\n+   |\n+LL | use core::convert::TryInto;\n+   |\n+LL | use std::convert::TryInto;\n+   |\n+\n+error[E0433]: failed to resolve: use of undeclared type `FromIterator`\n+  --> $DIR/suggest-tryinto-edition-change.rs:23:22\n+   |\n+LL |     let _v: Vec<_> = FromIterator::from_iter(&[1]);\n+   |                      ^^^^^^^^^^^^\n+   |\n+  ::: $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n+   |\n+LL | pub trait IntoIterator {\n+   | ---------------------- similarly named trait `IntoIterator` defined here\n+   |\n+   = note: 'std::iter::FromIterator' is included in the prelude starting in Edition 2021\n+   = note: 'core::iter::FromIterator' is included in the prelude starting in Edition 2021\n+help: a trait with a similar name exists\n+   |\n+LL |     let _v: Vec<_> = IntoIterator::from_iter(&[1]);\n+   |                      ~~~~~~~~~~~~\n+help: consider importing one of these items\n+   |\n+LL | use core::iter::FromIterator;\n+   |\n+LL | use std::iter::FromIterator;\n+   |\n+\n+error[E0599]: no method named `try_into` found for type `i32` in the current scope\n+  --> $DIR/suggest-tryinto-edition-change.rs:6:25\n+   |\n+LL |     let _i: i16 = 0_i32.try_into().unwrap();\n+   |                         ^^^^^^^^ method not found in `i32`\n+   |\n+  ::: $SRC_DIR/core/src/convert/mod.rs:LL:COL\n+   |\n+LL |     fn try_into(self) -> Result<T, Self::Error>;\n+   |        -------- the method is available for `i32` here\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+   = note: 'std::convert::TryInto' is included in the prelude starting in Edition 2021\n+help: the following trait is implemented but not in scope; perhaps add a `use` for it:\n+   |\n+LL | use std::convert::TryInto;\n+   |\n+\n+error: aborting due to 4 previous errors\n+\n+Some errors have detailed explanations: E0433, E0599.\n+For more information about an error, try `rustc --explain E0433`."}]}