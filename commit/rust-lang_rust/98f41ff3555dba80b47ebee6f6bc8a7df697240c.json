{"sha": "98f41ff3555dba80b47ebee6f6bc8a7df697240c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ZjQxZmYzNTU1ZGJhODBiNDdlYmVlNmY2YmM4YTdkZjY5NzI0MGM=", "commit": {"author": {"name": "Sean Patrick Santos", "email": "SeanPatrickSantos@gmail.com", "date": "2015-05-04T08:33:59Z"}, "committer": {"name": "Sean Patrick Santos", "email": "SeanPatrickSantos@gmail.com", "date": "2015-05-17T21:30:32Z"}, "message": "Tidy the code that checks for type parameters in associated const paths.", "tree": {"sha": "e10fe06a9a79a5bec2cc2f0502c123b7df632e05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e10fe06a9a79a5bec2cc2f0502c123b7df632e05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98f41ff3555dba80b47ebee6f6bc8a7df697240c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98f41ff3555dba80b47ebee6f6bc8a7df697240c", "html_url": "https://github.com/rust-lang/rust/commit/98f41ff3555dba80b47ebee6f6bc8a7df697240c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98f41ff3555dba80b47ebee6f6bc8a7df697240c/comments", "author": {"login": "quantheory", "id": 1740206, "node_id": "MDQ6VXNlcjE3NDAyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1740206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quantheory", "html_url": "https://github.com/quantheory", "followers_url": "https://api.github.com/users/quantheory/followers", "following_url": "https://api.github.com/users/quantheory/following{/other_user}", "gists_url": "https://api.github.com/users/quantheory/gists{/gist_id}", "starred_url": "https://api.github.com/users/quantheory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quantheory/subscriptions", "organizations_url": "https://api.github.com/users/quantheory/orgs", "repos_url": "https://api.github.com/users/quantheory/repos", "events_url": "https://api.github.com/users/quantheory/events{/privacy}", "received_events_url": "https://api.github.com/users/quantheory/received_events", "type": "User", "site_admin": false}, "committer": {"login": "quantheory", "id": 1740206, "node_id": "MDQ6VXNlcjE3NDAyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1740206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/quantheory", "html_url": "https://github.com/quantheory", "followers_url": "https://api.github.com/users/quantheory/followers", "following_url": "https://api.github.com/users/quantheory/following{/other_user}", "gists_url": "https://api.github.com/users/quantheory/gists{/gist_id}", "starred_url": "https://api.github.com/users/quantheory/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/quantheory/subscriptions", "organizations_url": "https://api.github.com/users/quantheory/orgs", "repos_url": "https://api.github.com/users/quantheory/repos", "events_url": "https://api.github.com/users/quantheory/events{/privacy}", "received_events_url": "https://api.github.com/users/quantheory/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "666575861405712d302fe32cbe563ced8d98b8ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/666575861405712d302fe32cbe563ced8d98b8ad", "html_url": "https://github.com/rust-lang/rust/commit/666575861405712d302fe32cbe563ced8d98b8ad"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "c9ef93519590073262ec2c10b2cfdc2d029534cc", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 27, "deletions": 24, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/98f41ff3555dba80b47ebee6f6bc8a7df697240c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98f41ff3555dba80b47ebee6f6bc8a7df697240c/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=98f41ff3555dba80b47ebee6f6bc8a7df697240c", "patch": "@@ -3763,21 +3763,34 @@ pub fn resolve_ty_and_def_ufcs<'a, 'b, 'tcx>(fcx: &FnCtxt<'b, 'tcx>,\n                                                         &'a [ast::PathSegment],\n                                                         def::Def)>\n {\n+\n+    // Associated constants can't depend on generic types.\n+    fn have_disallowed_generic_consts<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n+                                                def: def::Def,\n+                                                ty: Ty<'tcx>,\n+                                                span: Span,\n+                                                node_id: ast::NodeId) -> bool {\n+        match def {\n+            def::DefAssociatedConst(..) => {\n+                if ty::type_has_params(ty) || ty::type_has_self(ty) {\n+                    fcx.sess().span_err(span,\n+                                        \"Associated consts cannot depend \\\n+                                         on type parameters or Self.\");\n+                    fcx.write_error(node_id);\n+                    return true;\n+                }\n+            }\n+            _ => {}\n+        }\n+        false\n+    }\n+\n     // If fully resolved already, we don't have to do anything.\n     if path_res.depth == 0 {\n-        // Associated constants can't depend on generic types.\n         if let Some(ty) = opt_self_ty {\n-            match path_res.full_def() {\n-                def::DefAssociatedConst(..) => {\n-                    if ty::type_has_params(ty) || ty::type_has_self(ty) {\n-                        fcx.sess().span_err(span,\n-                                            \"Associated consts cannot depend \\\n-                                             on type parameters or Self.\");\n-                        fcx.write_error(node_id);\n-                        return None;\n-                    }\n-                }\n-                _ => {}\n+            if have_disallowed_generic_consts(fcx, path_res.full_def(), ty,\n+                                              span, node_id) {\n+                return None;\n             }\n         }\n         Some((opt_self_ty, &path.segments, path_res.base_def))\n@@ -3795,18 +3808,8 @@ pub fn resolve_ty_and_def_ufcs<'a, 'b, 'tcx>(fcx: &FnCtxt<'b, 'tcx>,\n         let item_name = item_segment.identifier.name;\n         match method::resolve_ufcs(fcx, span, item_name, ty, node_id) {\n             Ok((def, lp)) => {\n-                // Associated constants can't depend on generic types.\n-                match def {\n-                    def::DefAssociatedConst(..) => {\n-                        if ty::type_has_params(ty) || ty::type_has_self(ty) {\n-                            fcx.sess().span_err(span,\n-                                                \"Associated consts cannot depend \\\n-                                                 on type parameters or Self.\");\n-                            fcx.write_error(node_id);\n-                            return None;\n-                        }\n-                    }\n-                    _ => {}\n+                if have_disallowed_generic_consts(fcx, def, ty, span, node_id) {\n+                    return None;\n                 }\n                 // Write back the new resolution.\n                 fcx.ccx.tcx.def_map.borrow_mut()"}]}