{"sha": "d170b6bf8005c5672aea1769f162df6b0689f218", "node_id": "C_kwDOAAsO6NoAKGQxNzBiNmJmODAwNWM1NjcyYWVhMTc2OWYxNjJkZjZiMDY4OWYyMTg", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-24T08:32:31Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-03-24T08:32:31Z"}, "message": "Sync from rust 1459b3128e288a85fcc4dd1fee7ada2cdcf28794", "tree": {"sha": "a90fea47c1784342b7c1a1002cb0286aade72ebf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a90fea47c1784342b7c1a1002cb0286aade72ebf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d170b6bf8005c5672aea1769f162df6b0689f218", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d170b6bf8005c5672aea1769f162df6b0689f218", "html_url": "https://github.com/rust-lang/rust/commit/d170b6bf8005c5672aea1769f162df6b0689f218", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d170b6bf8005c5672aea1769f162df6b0689f218/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae0a22cb89e83a88f5f7d1ffd3ef877303ae7f82", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae0a22cb89e83a88f5f7d1ffd3ef877303ae7f82", "html_url": "https://github.com/rust-lang/rust/commit/ae0a22cb89e83a88f5f7d1ffd3ef877303ae7f82"}, {"sha": "7ac6cc905e082e6f5af7138c6fff829a91cb146b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7ac6cc905e082e6f5af7138c6fff829a91cb146b", "html_url": "https://github.com/rust-lang/rust/commit/7ac6cc905e082e6f5af7138c6fff829a91cb146b"}], "stats": {"total": 33, "additions": 9, "deletions": 24}, "files": [{"sha": "66eaf41ad08ac823d3cf2b7142f5a91c456257de", "filename": "src/base.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d170b6bf8005c5672aea1769f162df6b0689f218/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d170b6bf8005c5672aea1769f162df6b0689f218/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=d170b6bf8005c5672aea1769f162df6b0689f218", "patch": "@@ -336,17 +336,10 @@ fn codegen_fn_body(fx: &mut FunctionCx<'_, '_, '_>, start_block: Block) {\n                 crate::abi::codegen_return(fx);\n             }\n             TerminatorKind::Assert { cond, expected, msg, target, cleanup: _ } => {\n-                if !fx.tcx.sess.overflow_checks() {\n-                    let overflow_not_to_check = match msg {\n-                        AssertKind::OverflowNeg(..) => true,\n-                        AssertKind::Overflow(op, ..) => op.is_checkable(),\n-                        _ => false,\n-                    };\n-                    if overflow_not_to_check {\n-                        let target = fx.get_block(*target);\n-                        fx.bcx.ins().jump(target, &[]);\n-                        continue;\n-                    }\n+                if !fx.tcx.sess.overflow_checks() && msg.is_optional_overflow_check() {\n+                    let target = fx.get_block(*target);\n+                    fx.bcx.ins().jump(target, &[]);\n+                    continue;\n                 }\n                 let cond = codegen_operand(fx, cond).load_scalar(fx);\n \n@@ -706,6 +699,10 @@ fn codegen_stmt<'tcx>(\n                     let operand = codegen_operand(fx, operand);\n                     operand.coerce_dyn_star(fx, lval);\n                 }\n+                Rvalue::Cast(CastKind::Transmute, ref operand, _to_ty) => {\n+                    let operand = codegen_operand(fx, operand);\n+                    lval.write_cvalue_transmute(fx, operand);\n+                }\n                 Rvalue::Discriminant(place) => {\n                     let place = codegen_place(fx, place);\n                     let value = place.to_cvalue(fx);"}, {"sha": "03f2a65fccad2444c5097d364b1219cad916751b", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d170b6bf8005c5672aea1769f162df6b0689f218/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d170b6bf8005c5672aea1769f162df6b0689f218/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=d170b6bf8005c5672aea1769f162df6b0689f218", "patch": "@@ -557,16 +557,6 @@ fn codegen_regular_intrinsic_call<'tcx>(\n             fx.bcx.ins().band(ptr, mask);\n         }\n \n-        sym::transmute => {\n-            intrinsic_args!(fx, args => (from); intrinsic);\n-\n-            if ret.layout().abi.is_uninhabited() {\n-                crate::base::codegen_panic(fx, \"Transmuting to uninhabited type.\", source_info);\n-                return;\n-            }\n-\n-            ret.write_cvalue_transmute(fx, from);\n-        }\n         sym::write_bytes | sym::volatile_set_memory => {\n             intrinsic_args!(fx, args => (dst, val, count); intrinsic);\n             let val = val.load_scalar(fx);"}, {"sha": "94806e0d798ed5a239c40aab8be54d771e453c53", "filename": "src/vtable.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d170b6bf8005c5672aea1769f162df6b0689f218/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d170b6bf8005c5672aea1769f162df6b0689f218/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=d170b6bf8005c5672aea1769f162df6b0689f218", "patch": "@@ -48,9 +48,7 @@ pub(crate) fn get_ptr_and_method_ref<'tcx>(\n ) -> (Pointer, Value) {\n     let (ptr, vtable) = 'block: {\n         if let Abi::Scalar(_) = arg.layout().abi {\n-            'descend_newtypes: while !arg.layout().ty.is_unsafe_ptr()\n-                && !arg.layout().ty.is_region_ptr()\n-            {\n+            'descend_newtypes: while !arg.layout().ty.is_unsafe_ptr() && !arg.layout().ty.is_ref() {\n                 for i in 0..arg.layout().fields.count() {\n                     let field = arg.value_field(fx, mir::Field::new(i));\n                     if !field.layout().is_zst() {"}]}