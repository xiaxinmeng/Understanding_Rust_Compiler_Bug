{"sha": "24ebbb442014d0bca9f32b36c25f739bf18146bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZWJiYjQ0MjAxNGQwYmNhOWYzMmIzNmMyNWY3MzliZjE4MTQ2YmY=", "commit": {"author": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2014-08-07T20:40:12Z"}, "committer": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2014-08-07T20:40:12Z"}, "message": "windows: Fix INVALID_HANDLE_VALUE\nMade INVALID_HANDLE_VALUE actually a HANDLE.\nRemoved all useless casts during INVALID_HANDLE_VALUE comparisons.\n\nSigned-off-by: Peter Atashian <retep998@gmail.com>", "tree": {"sha": "3b57f5cadd35cbec3c1f983793aed1149db2116b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b57f5cadd35cbec3c1f983793aed1149db2116b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24ebbb442014d0bca9f32b36c25f739bf18146bf", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24ebbb442014d0bca9f32b36c25f739bf18146bf", "html_url": "https://github.com/rust-lang/rust/commit/24ebbb442014d0bca9f32b36c25f739bf18146bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24ebbb442014d0bca9f32b36c25f739bf18146bf/comments", "author": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "committer": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "feb219d23fd4236fc69ec86e34c088e232289534", "url": "https://api.github.com/repos/rust-lang/rust/commits/feb219d23fd4236fc69ec86e34c088e232289534", "html_url": "https://github.com/rust-lang/rust/commit/feb219d23fd4236fc69ec86e34c088e232289534"}], "stats": {"total": 35, "additions": 17, "deletions": 18}, "files": [{"sha": "e368a5644159c7126b27386e07385a75c4ae28c0", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/24ebbb442014d0bca9f32b36c25f739bf18146bf/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ebbb442014d0bca9f32b36c25f739bf18146bf/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=24ebbb442014d0bca9f32b36c25f739bf18146bf", "patch": "@@ -1142,8 +1142,7 @@ pub mod types {\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {\n-                use types::os::arch::c95::{c_short, time_t,\n-                                                 c_long};\n+                use types::os::arch::c95::{c_short, time_t, c_long};\n                 use types::os::arch::extra::{int64, time64_t};\n                 use types::os::arch::posix88::{dev_t, ino_t};\n \n@@ -1947,7 +1946,7 @@ pub mod consts {\n         }\n         pub mod extra {\n             use types::os::arch::c95::c_int;\n-            use types::os::arch::extra::{WORD, DWORD, BOOL};\n+            use types::os::arch::extra::{WORD, DWORD, BOOL, HANDLE};\n \n             pub static TRUE : BOOL = 1;\n             pub static FALSE : BOOL = 0;\n@@ -1976,7 +1975,7 @@ pub mod consts {\n             pub static ERROR_IO_PENDING: c_int = 997;\n             pub static ERROR_FILE_INVALID : c_int = 1006;\n             pub static ERROR_NOT_FOUND: c_int = 1168;\n-            pub static INVALID_HANDLE_VALUE : c_int = -1;\n+            pub static INVALID_HANDLE_VALUE: HANDLE = -1 as HANDLE;\n \n             pub static DELETE : DWORD = 0x00010000;\n             pub static READ_CONTROL : DWORD = 0x00020000;"}, {"sha": "fe29c0245297cd34709e4d189ac1aa02d49710cc", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/24ebbb442014d0bca9f32b36c25f739bf18146bf/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ebbb442014d0bca9f32b36c25f739bf18146bf/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=24ebbb442014d0bca9f32b36c25f739bf18146bf", "patch": "@@ -320,7 +320,7 @@ pub fn open(path: &CString, fm: rtio::FileMode, fa: rtio::FileAccess)\n                           dwFlagsAndAttributes,\n                           ptr::mut_null())\n     };\n-    if handle == libc::INVALID_HANDLE_VALUE as libc::HANDLE {\n+    if handle == libc::INVALID_HANDLE_VALUE {\n         Err(super::last_error())\n     } else {\n         let fd = unsafe {\n@@ -368,7 +368,7 @@ pub fn readdir(p: &CString) -> IoResult<Vec<CString>> {\n         let wfd_ptr = malloc_raw(rust_list_dir_wfd_size() as uint);\n         let find_handle = libc::FindFirstFileW(path.as_ptr(),\n                                                wfd_ptr as libc::HANDLE);\n-        if find_handle as libc::c_int != libc::INVALID_HANDLE_VALUE {\n+        if find_handle != libc::INVALID_HANDLE_VALUE {\n             let mut paths = vec!();\n             let mut more_files = 1 as libc::c_int;\n             while more_files != 0 {\n@@ -440,7 +440,7 @@ pub fn readlink(p: &CString) -> IoResult<CString> {\n                           libc::FILE_ATTRIBUTE_NORMAL,\n                           ptr::mut_null())\n     };\n-    if handle as int == libc::INVALID_HANDLE_VALUE as int {\n+    if handle == libc::INVALID_HANDLE_VALUE {\n         return Err(super::last_error())\n     }\n     // Specify (sz - 1) because the documentation states that it's the size"}, {"sha": "717915e5d23bde51c181ace0c4768f436dec4738", "filename": "src/libnative/io/pipe_win32.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24ebbb442014d0bca9f32b36c25f739bf18146bf/src%2Flibnative%2Fio%2Fpipe_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ebbb442014d0bca9f32b36c25f739bf18146bf/src%2Flibnative%2Fio%2Fpipe_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fpipe_win32.rs?ref=24ebbb442014d0bca9f32b36c25f739bf18146bf", "patch": "@@ -223,7 +223,7 @@ impl UnixStream {\n                 libc::FILE_FLAG_OVERLAPPED,\n                 ptr::mut_null())\n         };\n-        if result != libc::INVALID_HANDLE_VALUE as libc::HANDLE {\n+        if result != libc::INVALID_HANDLE_VALUE {\n             return Some(result)\n         }\n \n@@ -238,7 +238,7 @@ impl UnixStream {\n                     libc::FILE_FLAG_OVERLAPPED,\n                     ptr::mut_null())\n             };\n-            if result != libc::INVALID_HANDLE_VALUE as libc::HANDLE {\n+            if result != libc::INVALID_HANDLE_VALUE {\n                 return Some(result)\n             }\n         }\n@@ -253,7 +253,7 @@ impl UnixStream {\n                     libc::FILE_FLAG_OVERLAPPED,\n                     ptr::mut_null())\n             };\n-            if result != libc::INVALID_HANDLE_VALUE as libc::HANDLE {\n+            if result != libc::INVALID_HANDLE_VALUE {\n                 return Some(result)\n             }\n         }\n@@ -565,7 +565,7 @@ impl UnixListener {\n         // and such.\n         let addr_v = try!(to_utf16(addr));\n         let ret = unsafe { pipe(addr_v.as_ptr(), true) };\n-        if ret == libc::INVALID_HANDLE_VALUE as libc::HANDLE {\n+        if ret == libc::INVALID_HANDLE_VALUE {\n             Err(super::last_error())\n         } else {\n             Ok(UnixListener { handle: ret, name: addr.clone() })\n@@ -680,7 +680,7 @@ impl UnixAcceptor {\n         // create a second server pipe. If this fails, we disconnect the\n         // connected client and return an error (see comments above).\n         let new_handle = unsafe { pipe(name.as_ptr(), false) };\n-        if new_handle == libc::INVALID_HANDLE_VALUE as libc::HANDLE {\n+        if new_handle == libc::INVALID_HANDLE_VALUE {\n             let ret = Err(super::last_error());\n             // If our disconnection fails, then there's not really a whole lot\n             // that we can do, so fail the task."}, {"sha": "d83e36a5e2a9c6e0835e8683ab642f10acedc894", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/24ebbb442014d0bca9f32b36c25f739bf18146bf/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ebbb442014d0bca9f32b36c25f739bf18146bf/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=24ebbb442014d0bca9f32b36c25f739bf18146bf", "patch": "@@ -359,13 +359,13 @@ fn spawn_process_os(cfg: ProcessConfig,\n                                               libc::OPEN_EXISTING,\n                                               0,\n                                               ptr::mut_null());\n-                    if *slot == INVALID_HANDLE_VALUE as libc::HANDLE {\n+                    if *slot == INVALID_HANDLE_VALUE {\n                         return Err(super::last_error())\n                     }\n                 }\n                 Some(ref fd) => {\n                     let orig = get_osfhandle(fd.fd()) as HANDLE;\n-                    if orig == INVALID_HANDLE_VALUE as HANDLE {\n+                    if orig == INVALID_HANDLE_VALUE {\n                         return Err(super::last_error())\n                     }\n                     if DuplicateHandle(cur_proc, orig, cur_proc, slot,\n@@ -450,9 +450,9 @@ fn zeroed_startupinfo() -> libc::types::os::arch::extra::STARTUPINFO {\n         wShowWindow: 0,\n         cbReserved2: 0,\n         lpReserved2: ptr::mut_null(),\n-        hStdInput: libc::INVALID_HANDLE_VALUE as libc::HANDLE,\n-        hStdOutput: libc::INVALID_HANDLE_VALUE as libc::HANDLE,\n-        hStdError: libc::INVALID_HANDLE_VALUE as libc::HANDLE,\n+        hStdInput: libc::INVALID_HANDLE_VALUE,\n+        hStdOutput: libc::INVALID_HANDLE_VALUE,\n+        hStdError: libc::INVALID_HANDLE_VALUE,\n     }\n }\n "}, {"sha": "cb8be9c899757d4c24a97f6cc3393100c34cba5a", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24ebbb442014d0bca9f32b36c25f739bf18146bf/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24ebbb442014d0bca9f32b36c25f739bf18146bf/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=24ebbb442014d0bca9f32b36c25f739bf18146bf", "patch": "@@ -197,7 +197,7 @@ mod imp {\n                                   libc::FILE_ATTRIBUTE_NORMAL,\n                                   ptr::mut_null())\n             };\n-            if handle as uint == libc::INVALID_HANDLE_VALUE as uint {\n+            if handle == libc::INVALID_HANDLE_VALUE {\n                 fail!(\"create file error: {}\", os::last_os_error());\n             }\n             let mut overlapped: libc::OVERLAPPED = unsafe { mem::zeroed() };"}]}