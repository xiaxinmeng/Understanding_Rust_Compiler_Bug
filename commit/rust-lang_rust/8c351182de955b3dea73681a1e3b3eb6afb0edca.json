{"sha": "8c351182de955b3dea73681a1e3b3eb6afb0edca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjMzUxMTgyZGU5NTViM2RlYTczNjgxYTFlM2IzZWI2YWZiMGVkY2E=", "commit": {"author": {"name": "Josh White", "email": "jwhite927@gmail.com", "date": "2020-02-08T19:24:35Z"}, "committer": {"name": "Josh White", "email": "jwhite927@gmail.com", "date": "2020-02-08T19:24:35Z"}, "message": "Corrected E0637.md based on test failures", "tree": {"sha": "f3f5e3f62230ef2c6806218b8a062924606266eb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3f5e3f62230ef2c6806218b8a062924606266eb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c351182de955b3dea73681a1e3b3eb6afb0edca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c351182de955b3dea73681a1e3b3eb6afb0edca", "html_url": "https://github.com/rust-lang/rust/commit/8c351182de955b3dea73681a1e3b3eb6afb0edca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c351182de955b3dea73681a1e3b3eb6afb0edca/comments", "author": {"login": "jwhite927", "id": 48882175, "node_id": "MDQ6VXNlcjQ4ODgyMTc1", "avatar_url": "https://avatars.githubusercontent.com/u/48882175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwhite927", "html_url": "https://github.com/jwhite927", "followers_url": "https://api.github.com/users/jwhite927/followers", "following_url": "https://api.github.com/users/jwhite927/following{/other_user}", "gists_url": "https://api.github.com/users/jwhite927/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwhite927/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwhite927/subscriptions", "organizations_url": "https://api.github.com/users/jwhite927/orgs", "repos_url": "https://api.github.com/users/jwhite927/repos", "events_url": "https://api.github.com/users/jwhite927/events{/privacy}", "received_events_url": "https://api.github.com/users/jwhite927/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jwhite927", "id": 48882175, "node_id": "MDQ6VXNlcjQ4ODgyMTc1", "avatar_url": "https://avatars.githubusercontent.com/u/48882175?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwhite927", "html_url": "https://github.com/jwhite927", "followers_url": "https://api.github.com/users/jwhite927/followers", "following_url": "https://api.github.com/users/jwhite927/following{/other_user}", "gists_url": "https://api.github.com/users/jwhite927/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwhite927/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwhite927/subscriptions", "organizations_url": "https://api.github.com/users/jwhite927/orgs", "repos_url": "https://api.github.com/users/jwhite927/repos", "events_url": "https://api.github.com/users/jwhite927/events{/privacy}", "received_events_url": "https://api.github.com/users/jwhite927/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a804d476a670e29f2ac55d97c72ae0bd456b3f84", "url": "https://api.github.com/repos/rust-lang/rust/commits/a804d476a670e29f2ac55d97c72ae0bd456b3f84", "html_url": "https://github.com/rust-lang/rust/commit/a804d476a670e29f2ac55d97c72ae0bd456b3f84"}], "stats": {"total": 73, "additions": 23, "deletions": 50}, "files": [{"sha": "f21b1749ec735a5f7fae04eef2bfdefd5bf6ff82", "filename": "src/librustc_error_codes/error_codes/E0637.md", "status": "modified", "additions": 23, "deletions": 50, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/8c351182de955b3dea73681a1e3b3eb6afb0edca/src%2Flibrustc_error_codes%2Ferror_codes%2FE0637.md", "raw_url": "https://github.com/rust-lang/rust/raw/8c351182de955b3dea73681a1e3b3eb6afb0edca/src%2Flibrustc_error_codes%2Ferror_codes%2FE0637.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0637.md?ref=8c351182de955b3dea73681a1e3b3eb6afb0edca", "patch": "@@ -1,59 +1,32 @@\n-An underscore `_` character has been used as the identifier for a lifetime,\n-or a const generic has been borrowed without an explicit lifetime.\n+An underscore `_` character has been used as the identifier for a lifetime.\n \n-Erroneous example with an underscore:\n+Erroneous example:\n ```compile_fail,E0106,E0637\n-fn foo<'_>(str1: &'_ str, str2: &'_ str) -> &'_ str {}\n-    // ^^ `'_` is a reserved lifetime name\n-```\n-Lifetimes are named with `'ident`, where ident is the name of the lifetime or\n-loop. The `_` character, which represents the ignore pattern, cannot be used\n-as the identifier because it is a reserved lifetime name. To fix\n-this, use a lowercase letter, or a series of lowercase letters as the lifetime\n-identifier. Often a single lowercase letter, such as `'a`, is sufficient.  For\n-more information, see [the book][bk-no].\n-\n-Corrected underscore example:\n-```\n-fn foo<'a>(str1: &'a str, str2: &'a str) -> &'a str {}\n-```\n-\n-Erroneous example with const generic:\n-```compile_fail,E0261,E0637,E0658\n-struct A<const N: &u8>;\n-//~^ ERROR `&` without an explicit lifetime name cannot be used here\n-trait B {}\n-\n-impl<const N: &u8> A<N> {\n-//~^ ERROR `&` without an explicit lifetime name cannot be used here\n-    fn foo<const M: &u8>(&self) {}\n-    //~^ ERROR `&` without an explicit lifetime name cannot be used here\n+fn longest<'_>(str1: &'_ str, str2: &'_ str) -> &'_ str {\n+         //^^ `'_` is a reserved lifetime name\n+    if str1.len() > str2.len() {\n+        str1\n+    } else {\n+        str2\n+    }\n }\n-\n-impl<const N: &u8> B for A<N> {}\n-//~^ ERROR `&` without an explicit lifetime name cannot be used here\n-\n-fn bar<const N: &u8>() {}\n-//~^ ERROR `&` without an explicit lifetime name cannot be used here\n ```\n+`'_`, cannot be used as a lifetime identifier because it is a reserved for the\n+anonymous lifetime. To fix this, use a lowercase letter such as 'a, or a series\n+of lowercase letters such as `'foo`.  For more information, see [the book][bk-no].\n+For more information on using the anonymous lifetime in rust nightly, see [the\n+nightly book][bk-al].\n \n-Const generics cannot be borrowed without specifying a lifetime.The\n-compiler handles memory allocation of constants differently than that of\n-variables and it cannot infer the lifetime of the borrowed constant.\n-To fix this, explicitly specify a lifetime for the const generic.\n-\n-Corrected const generic example:\n+Corrected example:\n ```\n-struct A<const N: &'a u8>;\n-\n-trait B {}\n-\n-impl<const N: &'a u8> A<N> {\n-    fn foo<const M: &'a u8>(&self) {}\n+fn longest<'a>(str1: &'a str, str2: &'a str) -> &'a str {\n+    if str1.len() > str2.len() {\n+        str1\n+    } else {\n+        str2\n+    }\n }\n-\n-impl<const N: &'a u8> B for A<N> {}\n-\n-fn bar<const N: &'a u8>() {}\n ```\n+\n [bk-no]: https://doc.rust-lang.org/book/appendix-02-operators.html#non-operator-symbols\n+[bk-al]: https://doc.rust-lang.org/nightly/edition-guide/rust-2018/ownership-and-lifetimes/the-anonymous-lifetime.html"}]}