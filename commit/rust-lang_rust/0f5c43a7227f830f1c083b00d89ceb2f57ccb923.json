{"sha": "0f5c43a7227f830f1c083b00d89ceb2f57ccb923", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmNWM0M2E3MjI3ZjgzMGYxYzA4M2IwMGQ4OWNlYjJmNTdjY2I5MjM=", "commit": {"author": {"name": "Grzegorz Bartoszek", "email": "grzegorz.bartoszek@thaumatec.com", "date": "2019-01-22T11:33:47Z"}, "committer": {"name": "Grzegorz Bartoszek", "email": "grzegorz.bartoszek@thaumatec.com", "date": "2019-01-22T13:07:53Z"}, "message": "Added \"make_return\" and \"blockify\" convenience methods in Sugg and used them in \"needless_bool\".", "tree": {"sha": "78f5ea72ba0035a7b7563d4b24da9647d69c36bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78f5ea72ba0035a7b7563d4b24da9647d69c36bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f5c43a7227f830f1c083b00d89ceb2f57ccb923", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f5c43a7227f830f1c083b00d89ceb2f57ccb923", "html_url": "https://github.com/rust-lang/rust/commit/0f5c43a7227f830f1c083b00d89ceb2f57ccb923", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f5c43a7227f830f1c083b00d89ceb2f57ccb923/comments", "author": null, "committer": null, "parents": [{"sha": "9d5b14864827d8b4655842b29a1bd803e15e3f17", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d5b14864827d8b4655842b29a1bd803e15e3f17", "html_url": "https://github.com/rust-lang/rust/commit/9d5b14864827d8b4655842b29a1bd803e15e3f17"}], "stats": {"total": 43, "additions": 35, "deletions": 8}, "files": [{"sha": "3b1fea465f51b1ad74ae5a9300049fd8582c265f", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f5c43a7227f830f1c083b00d89ceb2f57ccb923/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5c43a7227f830f1c083b00d89ceb2f57ccb923/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=0f5c43a7227f830f1c083b00d89ceb2f57ccb923", "patch": "@@ -70,16 +70,14 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBool {\n             let reduce = |ret, not| {\n                 let mut applicability = Applicability::MachineApplicable;\n                 let snip = Sugg::hir_with_applicability(cx, pred, \"<predicate>\", &mut applicability);\n-                let snip = if not { !snip } else { snip };\n+                let mut snip = if not { !snip } else { snip };\n \n-                let mut hint = if ret {\n-                    format!(\"return {}\", snip)\n-                } else {\n-                    snip.to_string()\n-                };\n+                if ret {\n+                    snip = snip.make_return();\n+                }\n \n                 if parent_node_is_if_expr(&e, &cx) {\n-                    hint = format!(\"{{ {} }}\", hint);\n+                    snip = snip.blockify()\n                 }\n \n                 span_lint_and_sugg(\n@@ -88,7 +86,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBool {\n                     e.span,\n                     \"this if-then-else expression returns a bool literal\",\n                     \"you can reduce it to\",\n-                    hint,\n+                    snip.to_string(),\n                     applicability,\n                 );\n             };"}, {"sha": "b95ce17ed93d52f7da0147e6bb784ea37fff31de", "filename": "clippy_lints/src/utils/sugg.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/0f5c43a7227f830f1c083b00d89ceb2f57ccb923/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f5c43a7227f830f1c083b00d89ceb2f57ccb923/clippy_lints%2Fsrc%2Futils%2Fsugg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fsugg.rs?ref=0f5c43a7227f830f1c083b00d89ceb2f57ccb923", "patch": "@@ -206,6 +206,17 @@ impl<'a> Sugg<'a> {\n         make_unop(\"&mut *\", self)\n     }\n \n+    /// Convenience method to transform suggestion into a return call\n+    pub fn make_return(self) -> Sugg<'static> {\n+        Sugg::NonParen(Cow::Owned(format!(\"return {}\", self)))\n+    }\n+\n+    /// Convenience method to transform suggestion into a block\n+    /// where the suggestion is a trailing expression\n+    pub fn blockify(self) -> Sugg<'static> {\n+        Sugg::NonParen(Cow::Owned(format!(\"{{ {} }}\", self)))\n+    }\n+\n     /// Convenience method to create the `<lhs>..<rhs>` or `<lhs>...<rhs>`\n     /// suggestion.\n     #[allow(dead_code)]\n@@ -578,3 +589,21 @@ impl<'a, 'b, 'c, T: LintContext<'c>> DiagnosticBuilderExt<'c, T> for rustc_error\n         self.span_suggestion_with_applicability(remove_span, msg, String::new(), applicability);\n     }\n }\n+\n+#[cfg(test)]\n+mod test {\n+    use super::Sugg;\n+    use std::borrow::Cow;\n+\n+    const SUGGESTION: Sugg<'static> = Sugg::NonParen(Cow::Borrowed(\"function_call()\"));\n+\n+    #[test]\n+    fn make_return_transform_sugg_into_a_return_call() {\n+        assert_eq!(\"return function_call()\", SUGGESTION.make_return().to_string());\n+    }\n+\n+    #[test]\n+    fn blockify_transforms_sugg_into_a_block() {\n+        assert_eq!(\"{ function_call() }\", SUGGESTION.blockify().to_string());\n+    }\n+}"}]}