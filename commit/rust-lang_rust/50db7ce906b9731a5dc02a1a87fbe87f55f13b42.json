{"sha": "50db7ce906b9731a5dc02a1a87fbe87f55f13b42", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwZGI3Y2U5MDZiOTczMWE1ZGMwMmExYTg3ZmJlODdmNTVmMTNiNDI=", "commit": {"author": {"name": "Stefan Plantikow", "email": "stefan.plantikow@googlemail.com", "date": "2011-12-14T01:52:02Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-12-14T22:54:16Z"}, "message": "Moved std::math to std::core\n\n- merges math and float into core::float\n- Splits core::ctypes into core::ctypes and core::mtypes\n- cmath is not exported\n- stdtest::math passes", "tree": {"sha": "ec713d268f93cabe060e4ae98be71ac9f5c22199", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec713d268f93cabe060e4ae98be71ac9f5c22199"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50db7ce906b9731a5dc02a1a87fbe87f55f13b42", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50db7ce906b9731a5dc02a1a87fbe87f55f13b42", "html_url": "https://github.com/rust-lang/rust/commit/50db7ce906b9731a5dc02a1a87fbe87f55f13b42", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50db7ce906b9731a5dc02a1a87fbe87f55f13b42/comments", "author": {"login": "boggle", "id": 50886, "node_id": "MDQ6VXNlcjUwODg2", "avatar_url": "https://avatars.githubusercontent.com/u/50886?v=4", "gravatar_id": "", "url": "https://api.github.com/users/boggle", "html_url": "https://github.com/boggle", "followers_url": "https://api.github.com/users/boggle/followers", "following_url": "https://api.github.com/users/boggle/following{/other_user}", "gists_url": "https://api.github.com/users/boggle/gists{/gist_id}", "starred_url": "https://api.github.com/users/boggle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/boggle/subscriptions", "organizations_url": "https://api.github.com/users/boggle/orgs", "repos_url": "https://api.github.com/users/boggle/repos", "events_url": "https://api.github.com/users/boggle/events{/privacy}", "received_events_url": "https://api.github.com/users/boggle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d0901cb4da43d9316762445f764904a6b4fe1cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d0901cb4da43d9316762445f764904a6b4fe1cf", "html_url": "https://github.com/rust-lang/rust/commit/6d0901cb4da43d9316762445f764904a6b4fe1cf"}], "stats": {"total": 822, "additions": 789, "deletions": 33}, "files": [{"sha": "f0fc6f87dc5f4339f78b0ca1118f73dc01b7735f", "filename": "src/libcore/cmath.rs", "status": "added", "additions": 82, "deletions": 0, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/50db7ce906b9731a5dc02a1a87fbe87f55f13b42/src%2Flibcore%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50db7ce906b9731a5dc02a1a87fbe87f55f13b42/src%2Flibcore%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmath.rs?ref=50db7ce906b9731a5dc02a1a87fbe87f55f13b42", "patch": "@@ -0,0 +1,82 @@\n+import ctypes::c_int;\n+\n+#[link_name = \"m\"]\n+#[abi = \"cdecl\"]\n+native mod f64 {\n+\n+    // Alpabetically sorted by link_name\n+\n+    pure fn acos(n: f64) -> f64;\n+    pure fn asin(n: f64) -> f64;\n+    pure fn atan(n: f64) -> f64;\n+    pure fn atan2(a: f64, b: f64) -> f64;\n+    pure fn ceil(n: f64) -> f64;\n+    pure fn cos(n: f64) -> f64;\n+    pure fn cosh(n: f64) -> f64;\n+    pure fn exp(n: f64) -> f64;\n+    #[link_name=\"fabs\"] pure fn abs(n: f64) -> f64;\n+    pure fn floor(n: f64) -> f64;\n+    pure fn fmod(x: f64, y: f64) -> f64;\n+    pure fn frexp(n: f64, &value: c_int) -> f64;\n+    pure fn ldexp(x: f64, n: c_int) -> f64;\n+    #[link_name=\"log\"] pure fn ln(n: f64) -> f64;\n+    #[link_name=\"log1p\"] pure fn ln1p(n: f64) -> f64;\n+    pure fn log10(n: f64) -> f64;\n+    pure fn log2(n: f64) -> f64;\n+    pure fn modf(n: f64, iptr: *f64) -> f64;\n+    pure fn pow(n: f64, e: f64) -> f64;\n+    pure fn rint(n: f64) -> f64;\n+    pure fn round(n: f64) -> f64;\n+    pure fn sin(n: f64) -> f64;\n+    pure fn sinh(n: f64) -> f64;\n+    pure fn sqrt(n: f64) -> f64;\n+    pure fn tan(n: f64) -> f64;\n+    pure fn tanh(n: f64) -> f64;\n+    pure fn trunc(n: f64) -> f64;\n+}\n+\n+#[link_name = \"m\"]\n+#[abi = \"cdecl\"]\n+native mod f32 {\n+\n+    // Alpabetically sorted by link_name\n+\n+    #[link_name=\"acosf\"] pure fn acos(n: f32) -> f32;\n+    #[link_name=\"asinf\"] pure fn asin(n: f32) -> f32;\n+    #[link_name=\"atanf\"] pure fn atan(n: f32) -> f32;\n+    #[link_name=\"atan2f\"] pure fn atan2(a: f32, b: f32) -> f32;\n+    #[link_name=\"ceilf\"] pure fn ceil(n: f32) -> f32;\n+    #[link_name=\"cosf\"] pure fn cos(n: f32) -> f32;\n+    #[link_name=\"coshf\"] pure fn cosh(n: f32) -> f32;\n+    #[link_name=\"expf\"] pure fn exp(n: f32) -> f32;\n+    #[link_name=\"fabsf\"] pure fn abs(n: f32) -> f32;\n+    #[link_name=\"floorf\"] pure fn floor(n: f32) -> f32;\n+    #[link_name=\"frexpf\"] pure fn frexp(n: f64, &value: c_int) -> f32;\n+    #[link_name=\"fmodf\"] pure fn fmod(x: f32, y: f32) -> f32;\n+    #[link_name=\"ldexpf\"] pure fn ldexp(x: f32, n: c_int) -> f32;\n+    #[link_name=\"logf\"] pure fn ln(n: f32) -> f32;\n+    #[link_name=\"log1p\"] pure fn ln1p(n: f64) -> f64;\n+    #[link_name=\"log2f\"] pure fn log2(n: f32) -> f32;\n+    #[link_name=\"log10f\"] pure fn log10(n: f32) -> f32;\n+    #[link_name=\"modff\"] pure fn modf(n: f32, iptr: *f32) -> f32;\n+    #[link_name=\"powf\"] pure fn pow(n: f32, e: f32) -> f32;\n+    #[link_name=\"rintf\"] pure fn rint(n: f32) -> f32;\n+    #[link_name=\"roundf\"] pure fn round(n: f32) -> f32;\n+    #[link_name=\"sinf\"] pure fn sin(n: f32) -> f32;\n+    #[link_name=\"sinhf\"] pure fn sinh(n: f32) -> f32;\n+    #[link_name=\"sqrtf\"] pure fn sqrt(n: f32) -> f32;\n+    #[link_name=\"tanf\"] pure fn tan(n: f32) -> f32;\n+    #[link_name=\"tanhf\"] pure fn tanh(n: f32) -> f32;\n+    #[link_name=\"truncf\"] pure fn trunc(n: f32) -> f32;\n+}\n+\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:\n+//\n+"}, {"sha": "e35b2c0397e7a388aff9fceabb58b39d36761b5d", "filename": "src/libcore/core.rc", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/50db7ce906b9731a5dc02a1a87fbe87f55f13b42/src%2Flibcore%2Fcore.rc", "raw_url": "https://github.com/rust-lang/rust/raw/50db7ce906b9731a5dc02a1a87fbe87f55f13b42/src%2Flibcore%2Fcore.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rc?ref=50db7ce906b9731a5dc02a1a87fbe87f55f13b42", "patch": "@@ -7,16 +7,19 @@\n #[license = \"BSD\"];\n #[crate_type = \"lib\"];\n \n-export box, char, float, int, str, ptr, uint, u8, u32, u64, vec, bool;\n+export box, char, float, f32, f64, int, str, ptr;\n+export uint, u8, u32, u64, vec, bool;\n export either, option, result;\n-export ctypes, sys, unsafe, comm, task;\n+export ctypes, mtypes, sys, unsafe, comm, task;\n export extfmt;\n \n // Built-in-type support modules\n \n mod box;\n mod char;\n mod float;\n+mod f32;\n+mod f64;\n mod int;\n mod str;\n mod ptr;\n@@ -38,6 +41,8 @@ mod result;\n // Runtime and language-primitive support\n \n mod ctypes;\n+mod mtypes;\n+mod cmath;\n mod sys;\n mod unsafe;\n mod comm;"}, {"sha": "def6c5f11569e68ef9ec37c535c9498d09cd460a", "filename": "src/libcore/ctypes.rs", "status": "modified", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/50db7ce906b9731a5dc02a1a87fbe87f55f13b42/src%2Flibcore%2Fctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50db7ce906b9731a5dc02a1a87fbe87f55f13b42/src%2Flibcore%2Fctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fctypes.rs?ref=50db7ce906b9731a5dc02a1a87fbe87f55f13b42", "patch": "@@ -72,36 +72,6 @@ when interoperating with C void pointers can help in documentation.\n */\n type void = int;\n \n-// machine type equivalents of rust int, uint, float\n-\n-/*\n-Type: m_int\n-\n-FIXME: What C type does this represent?\n-*/\n-#[cfg(target_arch=\"x86\")]\n-type m_int = i32;\n-#[cfg(target_arch=\"x86_64\")]\n-type m_int = i64;\n-\n-/*\n-Type: m_uint\n-\n-FIXME: What C type does this represent?\n-*/\n-#[cfg(target_arch=\"x86\")]\n-type m_uint = u32;\n-#[cfg(target_arch=\"x86_64\")]\n-type m_uint = u64;\n-\n-// This *must* match with \"import m_float = fXX\" in std::math per arch\n-/*\n-Type: m_float\n-\n-FIXME: What C type does this represent?\n-*/\n-type m_float = f64;\n-\n /*\n Type: size_t\n "}, {"sha": "41110fbd7f50e5b08e18c684dbd7dc368c6b80b6", "filename": "src/libcore/f32.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/50db7ce906b9731a5dc02a1a87fbe87f55f13b42/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50db7ce906b9731a5dc02a1a87fbe87f55f13b42/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=50db7ce906b9731a5dc02a1a87fbe87f55f13b42", "patch": "@@ -0,0 +1,125 @@\n+\n+/*\n+Module: f32\n+\n+Floating point operations and constants for `f32`\n+\n+This exposes the same operations as `math`, just for `f32` even though\n+they do not show up in the docs right now!\n+*/\n+\n+import cmath::f32::*;\n+\n+export\n+    acos, asin, atan, atan2, ceil, cos, cosh, exp, abs, floor, fmod,\n+    frexp, ldexp, ln, ln1p, log10, log2, modf, rint, round, pow, sin,\n+    sinh, sqrt, tan, tanh, trunc, t;\n+\n+export consts;\n+\n+type t = f32;\n+\n+/* Module: consts */\n+mod consts {\n+\n+    /*\n+    Const: pi\n+\n+    Archimedes' constant\n+    */\n+    const pi: f32 = 3.14159265358979323846264338327950288f32;\n+\n+    /*\n+    Const: frac_pi_2\n+\n+    pi/2.0\n+    */\n+    const frac_pi_2: f32 = 1.57079632679489661923132169163975144f32;\n+\n+    /*\n+    Const: frac_pi_4\n+\n+    pi/4.0\n+    */\n+    const frac_pi_4: f32 = 0.785398163397448309615660845819875721f32;\n+\n+    /*\n+    Const: frac_1_pi\n+\n+    1.0/pi\n+    */\n+    const frac_1_pi: f32 = 0.318309886183790671537767526745028724f32;\n+\n+    /*\n+    Const: frac_2_pi\n+\n+    2.0/pi\n+    */\n+    const frac_2_pi: f32 = 0.636619772367581343075535053490057448f32;\n+\n+    /*\n+    Const: frac_2_sqrtpi\n+\n+    2.0/sqrt(pi)\n+    */\n+    const frac_2_sqrtpi: f32 = 1.12837916709551257389615890312154517f32;\n+\n+    /*\n+    Const: sqrt2\n+\n+    sqrt(2.0)\n+    */\n+    const sqrt2: f32 = 1.41421356237309504880168872420969808f32;\n+\n+    /*\n+    Const: frac_1_sqrt2\n+\n+    1.0/sqrt(2.0)\n+    */\n+    const frac_1_sqrt2: f32 = 0.707106781186547524400844362104849039f32;\n+\n+    /*\n+    Const: e\n+\n+    Euler's number\n+    */\n+    const e: f32 = 2.71828182845904523536028747135266250f32;\n+\n+    /*\n+    Const: log2_e\n+\n+    log2(e)\n+    */\n+    const log2_e: f32 = 1.44269504088896340735992468100189214f32;\n+\n+    /*\n+    Const: log10_e\n+\n+    log10(e)\n+    */\n+    const log10_e: f32 = 0.434294481903251827651128918916605082f32;\n+\n+    /*\n+    Const: ln_2\n+\n+    ln(2.0)\n+    */\n+    const ln_2: f32 = 0.693147180559945309417232121458176568f32;\n+\n+    /*\n+    Const: ln_10\n+\n+    ln(10.0)\n+    */\n+    const ln_10: f32 = 2.30258509299404568401799145468436421f32;\n+}\n+\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:\n+//"}, {"sha": "7784933f452814249c059ab743deb27f4b20980f", "filename": "src/libcore/f64.rs", "status": "added", "additions": 125, "deletions": 0, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/50db7ce906b9731a5dc02a1a87fbe87f55f13b42/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50db7ce906b9731a5dc02a1a87fbe87f55f13b42/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=50db7ce906b9731a5dc02a1a87fbe87f55f13b42", "patch": "@@ -0,0 +1,125 @@\n+\n+/*\n+Module: f64\n+\n+Floating point operations and constants for `f64`s\n+\n+This exposes the same operations as `math`, just for `f64` even though\n+they do not show up in the docs right now!\n+*/\n+\n+import cmath::f64::*;\n+\n+export\n+    acos, asin, atan, atan2, ceil, cos, cosh, exp, abs, floor, fmod,\n+    frexp, ldexp, ln, ln1p, log10, log2, modf, rint, round, pow, sin,\n+    sinh, sqrt, tan, tanh, trunc, t;\n+\n+export consts;\n+\n+type t = f64;\n+\n+/* Module: consts */\n+mod consts {\n+\n+    /*\n+    Const: pi\n+\n+    Archimedes' constant\n+    */\n+    const pi: f64 = 3.14159265358979323846264338327950288f64;\n+\n+    /*\n+    Const: frac_pi_2\n+\n+    pi/2.0\n+    */\n+    const frac_pi_2: f64 = 1.57079632679489661923132169163975144f64;\n+\n+    /*\n+    Const: frac_pi_4\n+\n+    pi/4.0\n+    */\n+    const frac_pi_4: f64 = 0.785398163397448309615660845819875721f64;\n+\n+    /*\n+    Const: frac_1_pi\n+\n+    1.0/pi\n+    */\n+    const frac_1_pi: f64 = 0.318309886183790671537767526745028724f64;\n+\n+    /*\n+    Const: frac_2_pi\n+\n+    2.0/pi\n+    */\n+    const frac_2_pi: f64 = 0.636619772367581343075535053490057448f64;\n+\n+    /*\n+    Const: frac_2_sqrtpi\n+\n+    2.0/sqrt(pi)\n+    */\n+    const frac_2_sqrtpi: f64 = 1.12837916709551257389615890312154517f64;\n+\n+    /*\n+    Const: sqrt2\n+\n+    sqrt(2.0)\n+    */\n+    const sqrt2: f64 = 1.41421356237309504880168872420969808f64;\n+\n+    /*\n+    Const: frac_1_sqrt2\n+\n+    1.0/sqrt(2.0)\n+    */\n+    const frac_1_sqrt2: f64 = 0.707106781186547524400844362104849039f64;\n+\n+    /*\n+    Const: e\n+\n+    Euler's number\n+    */\n+    const e: f64 = 2.71828182845904523536028747135266250f64;\n+\n+    /*\n+    Const: log2_e\n+\n+    log2(e)\n+    */\n+    const log2_e: f64 = 1.44269504088896340735992468100189214f64;\n+\n+    /*\n+    Const: log10_e\n+\n+    log10(e)\n+    */\n+    const log10_e: f64 = 0.434294481903251827651128918916605082f64;\n+\n+    /*\n+    Const: ln_2\n+\n+    ln(2.0)\n+    */\n+    const ln_2: f64 = 0.693147180559945309417232121458176568f64;\n+\n+    /*\n+    Const: ln_10\n+\n+    ln(10.0)\n+    */\n+    const ln_10: f64 = 2.30258509299404568401799145468436421f64;\n+}\n+\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:\n+//"}, {"sha": "1477fdf7d8014549c9c29aeba6c16da098db43cb", "filename": "src/libcore/float.rs", "status": "modified", "additions": 387, "deletions": 0, "changes": 387, "blob_url": "https://github.com/rust-lang/rust/blob/50db7ce906b9731a5dc02a1a87fbe87f55f13b42/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50db7ce906b9731a5dc02a1a87fbe87f55f13b42/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=50db7ce906b9731a5dc02a1a87fbe87f55f13b42", "patch": "@@ -2,6 +2,36 @@\n Module: float\n */\n \n+// Currently this module supports from -lm\n+// C95 + log2 + log1p + trunc + round + rint\n+\n+export t;\n+\n+export consts;\n+\n+export\n+    acos, asin, atan, atan2, ceil, cos, cosh, exp, abs, floor, fmod, frexp,\n+    ldexp, ln, ln1p, log10, log2, modf, rint, round, pow, sin, sinh, sqrt,\n+    tan, tanh, trunc;\n+\n+export to_str_common, to_str_exact, to_str, from_str;\n+export lt, le, eq, ne, gt, eq;\n+export NaN, isNaN, infinity, neg_infinity;\n+export pow_uint_to_uint_as_float;\n+export min, max;\n+export add, sub, mul, div;\n+export positive, negative, nonpositive, nonnegative;\n+\n+import mtypes::m_float;\n+import ctypes::c_int;\n+import ptr;\n+\n+// PORT This must match in width according to architecture\n+import f64;\n+import m_float = f64;\n+\n+type t = m_float;\n+\n /**\n  * Section: String Conversions\n  */\n@@ -332,6 +362,363 @@ pure fn nonnegative(x: float) -> bool {\n   ret x > 0. || (1./x) == infinity;\n }\n \n+/*\n+Module: consts\n+*/\n+mod consts {\n+    /*\n+    Const: pi\n+\n+    Archimedes' constant\n+    */\n+    const pi: float = 3.14159265358979323846264338327950288;\n+\n+    /*\n+    Const: frac_pi_2\n+\n+    pi/2.0\n+    */\n+    const frac_pi_2: float = 1.57079632679489661923132169163975144;\n+\n+    /*\n+    Const: frac_pi_4\n+\n+    pi/4.0\n+    */\n+    const frac_pi_4: float = 0.785398163397448309615660845819875721;\n+\n+    /*\n+    Const: frac_1_pi\n+\n+    1.0/pi\n+    */\n+    const frac_1_pi: float = 0.318309886183790671537767526745028724;\n+\n+    /*\n+    Const: frac_2_pi\n+\n+    2.0/pi\n+    */\n+    const frac_2_pi: float = 0.636619772367581343075535053490057448;\n+\n+    /*\n+    Const: frac_2_sqrtpi\n+\n+    2.0/sqrt(pi)\n+    */\n+    const frac_2_sqrtpi: float = 1.12837916709551257389615890312154517;\n+\n+    /*\n+    Const: sqrt2\n+\n+    sqrt(2.0)\n+    */\n+    const sqrt2: float = 1.41421356237309504880168872420969808;\n+\n+    /*\n+    Const: frac_1_sqrt2\n+\n+    1.0/sqrt(2.0)\n+    */\n+    const frac_1_sqrt2: float = 0.707106781186547524400844362104849039;\n+\n+    /*\n+    Const: e\n+\n+    Euler's number\n+    */\n+    const e: float = 2.71828182845904523536028747135266250;\n+\n+    /*\n+    Const: log2_e\n+\n+    log2(e)\n+    */\n+    const log2_e: float = 1.44269504088896340735992468100189214;\n+\n+    /*\n+    Const: log10_e\n+\n+    log10(e)\n+    */\n+    const log10_e: float = 0.434294481903251827651128918916605082;\n+\n+    /*\n+    Const: ln_2\n+\n+    ln(2.0)\n+    */\n+    const ln_2: float = 0.693147180559945309417232121458176568;\n+\n+    /*\n+    Const: ln_10\n+\n+    ln(10.0)\n+    */\n+    const ln_10: float = 2.30258509299404568401799145468436421;\n+}\n+\n+\n+// FIXME min/max type specialize via libm when overloading works\n+// (in theory fmax/fmin, fmaxf, fminf /should/ be faster)\n+\n+/*\n+Function: min\n+\n+Returns the minimum of two values\n+*/\n+pure fn min<copy T>(x: T, y: T) -> T { x < y ? x : y }\n+\n+/*\n+Function: max\n+\n+Returns the maximum of two values\n+*/\n+pure fn max<copy T>(x: T, y: T) -> T { x < y ? y : x }\n+\n+/*\n+Function: acos\n+\n+Returns the arccosine of an angle (measured in rad)\n+*/\n+pure fn acos(x: float) -> float\n+    { be m_float::acos(x as m_float) as float }\n+\n+/*\n+Function: asin\n+\n+Returns the arcsine of an angle (measured in rad)\n+*/\n+pure fn asin(x: float) -> float\n+    { be m_float::asin(x as m_float) as float }\n+\n+/*\n+Function: atan\n+\n+Returns the arctangents of an angle (measured in rad)\n+*/\n+pure fn atan(x: float) -> float\n+    { be m_float::atan(x as m_float) as float }\n+\n+\n+/*\n+Function: atan2\n+\n+Returns the arctangent of an angle (measured in rad)\n+*/\n+pure fn atan2(y: float, x: float) -> float\n+    { be m_float::atan2(y as m_float, x as m_float) as float }\n+\n+/*\n+Function: ceil\n+\n+Returns the smallest integral value less than or equal to `n`\n+*/\n+pure fn ceil(n: float) -> float\n+    { be m_float::ceil(n as m_float) as float }\n+\n+/*\n+Function: cos\n+\n+Returns the cosine of an angle `x` (measured in rad)\n+*/\n+pure fn cos(x: float) -> float\n+    { be m_float::cos(x as m_float) as float }\n+\n+/*\n+Function: cosh\n+\n+Returns the hyperbolic cosine of `x`\n+\n+*/\n+pure fn cosh(x: float) -> float\n+    { be m_float::cosh(x as m_float) as float }\n+\n+\n+/*\n+Function: exp\n+\n+Returns `consts::e` to the power of `n*\n+*/\n+pure fn exp(n: float) -> float\n+    { be m_float::exp(n as m_float) as float }\n+\n+/*\n+Function: abs\n+\n+Returns the absolute value of  `n`\n+*/\n+pure fn abs(n: float) -> float\n+    { be m_float::abs(n as m_float) as float }\n+\n+/*\n+Function: floor\n+\n+Returns the largest integral value less than or equal to `n`\n+*/\n+pure fn floor(n: float) -> float\n+    { be m_float::floor(n as m_float) as float }\n+\n+/*\n+Function: fmod\n+\n+Returns the floating-point remainder of `x/y`\n+*/\n+pure fn fmod(x: float, y: float) -> float\n+    { be m_float::fmod(x as m_float, y as m_float) as float }\n+\n+/*\n+Function: ln\n+\n+Returns the natural logaritm of `n`\n+*/\n+pure fn ln(n: float) -> float\n+    { be m_float::ln(n as m_float) as float }\n+\n+/*\n+Function: ldexp\n+\n+Returns `x` multiplied by 2 to the power of `n`\n+*/\n+pure fn ldexp(n: float, i: int) -> float\n+    { be m_float::ldexp(n as m_float, i as c_int) as float }\n+\n+/*\n+Function: ln1p\n+\n+Returns the natural logarithm of `1+n` accurately,\n+even for very small values of `n`\n+*/\n+pure fn ln1p(n: float) -> float\n+    { be m_float::ln1p(n as m_float) as float }\n+\n+/*\n+Function: log10\n+\n+Returns the logarithm to base 10 of `n`\n+*/\n+pure fn log10(n: float) -> float\n+    { be m_float::log10(n as m_float) as float }\n+\n+/*\n+Function: log2\n+\n+Returns the logarithm to base 2 of `n`\n+*/\n+pure fn log2(n: float) -> float\n+    { be m_float::log2(n as m_float) as float }\n+\n+/*\n+Function: modf\n+\n+Breaks `n` into integral and fractional parts such that both\n+have the same sign as `n`\n+\n+The integral part is stored in `iptr`.\n+\n+Returns:\n+\n+The fractional part of `n`\n+*/\n+#[no(warn_trivial_casts)] // FIXME Implement\n+pure fn modf(n: float, &iptr: float) -> float { unsafe {\n+    be m_float::modf(n as m_float, ptr::addr_of(iptr) as *m_float) as float\n+} }\n+\n+/*\n+Function: frexp\n+\n+Breaks `n` into a normalized fraction and an integral power of 2\n+\n+The inegral part is stored in iptr.\n+\n+The functions return a number x such that x has a magnitude in the interval\n+[1/2, 1) or 0, and `n == x*(2 to the power of exp)`.\n+\n+Returns:\n+\n+The fractional part of `n`\n+*/\n+pure fn frexp(n: float, &exp: c_int) -> float\n+    { be m_float::frexp(n as m_float, exp) as float }\n+\n+/*\n+Function: pow\n+*/\n+pure fn pow(v: float, e: float) -> float\n+    { be m_float::pow(v as m_float, e as m_float) as float }\n+\n+\n+/*\n+Function: rint\n+\n+Returns the integral value nearest to `x` (according to the\n+prevailing rounding mode) in floating-point format\n+*/\n+pure fn rint(x: float) -> float\n+    { be m_float::rint(x as m_float) as float }\n+\n+/*\n+Function: round\n+\n+\n+Return the integral value nearest to `x` rounding half-way\n+cases away from zero, regardless of the current rounding direction.\n+*/\n+pure fn round(x: float) -> float\n+    { be m_float::round(x as m_float) as float }\n+\n+/*\n+Function: sin\n+\n+Returns the sine of an angle `x` (measured in rad)\n+*/\n+pure fn sin(x: float) -> float\n+    { be m_float::sin(x as m_float) as float }\n+\n+/*\n+Function: sinh\n+\n+Returns the hyperbolic sine of an angle `x` (measured in rad)\n+*/\n+pure fn sinh(x: float) -> float\n+    { be m_float::sinh(x as m_float) as float }\n+\n+/*\n+Function: sqrt\n+\n+Returns the square root of `x`\n+*/\n+pure fn sqrt(x: float) -> float\n+    { be m_float::sqrt(x as m_float) as float }\n+\n+/*\n+Function: tan\n+\n+Returns the tangent of an angle `x` (measured in rad)\n+\n+*/\n+pure fn tan(x: float) -> float\n+    { be m_float::tan(x as m_float) as float }\n+\n+/*\n+Function: tanh\n+\n+Returns the hyperbolic tangent of an angle `x` (measured in rad)\n+\n+*/\n+pure fn tanh(x: float) -> float\n+    { be m_float::tanh(x as m_float) as float }\n+\n+/*\n+Function: trunc\n+\n+Returns the integral value nearest to but no larger in magnitude than `x`\n+\n+*/\n+pure fn trunc(x: float) -> float\n+    { be m_float::trunc(x as m_float) as float }\n+\n //\n // Local Variables:\n // mode: rust"}, {"sha": "d4339dc091c864e5a81a26de4c1ba48cc36311bc", "filename": "src/libcore/mtypes.rs", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/50db7ce906b9731a5dc02a1a87fbe87f55f13b42/src%2Flibcore%2Fmtypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50db7ce906b9731a5dc02a1a87fbe87f55f13b42/src%2Flibcore%2Fmtypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmtypes.rs?ref=50db7ce906b9731a5dc02a1a87fbe87f55f13b42", "patch": "@@ -0,0 +1,62 @@\n+/*\n+\n+Module: mtypes\n+\n+Machine type equivalents of rust int, uint, float, and complex.\n+\n+Types useful for interop with C when writing bindings that exist\n+for different types (float, f32, f64, ...; cf float.rs for an example)\n+*/\n+\n+// PORT Change this when porting to a new architecture\n+\n+/*\n+Type: m_int\n+\n+Machine type equivalent of an int\n+*/\n+#[cfg(target_arch=\"x86\")]\n+type m_int = i32;\n+#[cfg(target_arch=\"x86_64\")]\n+type m_int = i64;\n+\n+// PORT Change this when porting to a new architecture\n+\n+/*\n+Type: m_uint\n+\n+Machine type equivalent of a uint\n+*/\n+#[cfg(target_arch=\"x86\")]\n+type m_uint = u32;\n+#[cfg(target_arch=\"x86_64\")]\n+type m_uint = u64;\n+\n+// PORT *must* match with \"import m_float = fXX\" in std::math per arch\n+\n+/*\n+Type: m_float\n+\n+Machine type equivalent of a float\n+*/\n+type m_float = f64;\n+\n+// PORT  *must* match \"import m_complex = ...\" in std::complex per arch\n+\n+/*\n+FIXME Type m_complex\n+\n+Machine type representing a complex value that uses floats for\n+both the real and the imaginary part.\n+*/\n+// type m_complex = complex_c64::t;\n+\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:\n+//"}, {"sha": "cdcb581e76504339ece2b86285054a8c6d5cfe69", "filename": "src/test/stdtest/math.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/50db7ce906b9731a5dc02a1a87fbe87f55f13b42/src%2Ftest%2Fstdtest%2Fmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50db7ce906b9731a5dc02a1a87fbe87f55f13b42/src%2Ftest%2Fstdtest%2Fmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fstdtest%2Fmath.rs?ref=50db7ce906b9731a5dc02a1a87fbe87f55f13b42", "patch": "@@ -2,7 +2,7 @@ import core::*;\n \n use std;\n \n-import std::math::*;\n+import float::*;\n import float;\n import c_int = ctypes::c_int;\n "}]}