{"sha": "1cdcf508bba11c91f48a3f7ca7870a6c1e575c6f", "node_id": "C_kwDOAAsO6NoAKDFjZGNmNTA4YmJhMTFjOTFmNDhhM2Y3Y2E3ODcwYTZjMWU1NzVjNmY", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-08-21T14:54:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-21T14:54:01Z"}, "message": "Rollup merge of #100663 - clarfonthey:const-reverse, r=scottmcm\n\nMake slice::reverse const\n\nI remember this not being doable for some reason before, but decided to try it again and everything worked out in the tests.", "tree": {"sha": "97454dde51614746b1ec0ce1b66d2f4796a5bb4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97454dde51614746b1ec0ce1b66d2f4796a5bb4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cdcf508bba11c91f48a3f7ca7870a6c1e575c6f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjAkcJCRBK7hj4Ov3rIwAA+psIAG04vUHV7U3d/ef0FFul7+G8\nfi1DePUftekfZzOUd0LfTdRuaoWmgbrVLIVgTFpcDx+xx5UcT/6tYmH729qfkPrr\nhOy7cdq1OG8nn3/lABuyjzDkIla8+KnohlcqAqAYOcGoY/J9TaJ0CtTpGqdzC8Ao\nZAei9Rb2iB5vn6rgaTI21Ore5j2dgwIWVo080uAhUQCRrzHlmMuljcGvFCoVr/kI\n6rkpywqsB+90JNkbznZfPjUgmP76uwzyhX7B3Lm/IRo/BurJAzORV8Xm5s4qFeOT\n1xlCh8ETdKvhZ2MIaTtg9AGRsTOBZt7dw8PC5yxCnIFQkr1oW3p49Znx4YcYtCw=\n=Zc/o\n-----END PGP SIGNATURE-----\n", "payload": "tree 97454dde51614746b1ec0ce1b66d2f4796a5bb4f\nparent a5c16a5381cd71c4d27b32857d04d70345b12de4\nparent ae2b1dbc8915c2a41bc3555cceb65a07c0032b05\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1661093641 +0200\ncommitter GitHub <noreply@github.com> 1661093641 +0200\n\nRollup merge of #100663 - clarfonthey:const-reverse, r=scottmcm\n\nMake slice::reverse const\n\nI remember this not being doable for some reason before, but decided to try it again and everything worked out in the tests.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cdcf508bba11c91f48a3f7ca7870a6c1e575c6f", "html_url": "https://github.com/rust-lang/rust/commit/1cdcf508bba11c91f48a3f7ca7870a6c1e575c6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cdcf508bba11c91f48a3f7ca7870a6c1e575c6f/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5c16a5381cd71c4d27b32857d04d70345b12de4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5c16a5381cd71c4d27b32857d04d70345b12de4", "html_url": "https://github.com/rust-lang/rust/commit/a5c16a5381cd71c4d27b32857d04d70345b12de4"}, {"sha": "ae2b1dbc8915c2a41bc3555cceb65a07c0032b05", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae2b1dbc8915c2a41bc3555cceb65a07c0032b05", "html_url": "https://github.com/rust-lang/rust/commit/ae2b1dbc8915c2a41bc3555cceb65a07c0032b05"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "75c7c4d5581d9d8b6490c260f18282c821cd454e", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1cdcf508bba11c91f48a3f7ca7870a6c1e575c6f/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cdcf508bba11c91f48a3f7ca7870a6c1e575c6f/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=1cdcf508bba11c91f48a3f7ca7870a6c1e575c6f", "patch": "@@ -674,8 +674,9 @@ impl<T> [T] {\n     /// assert!(v == [3, 2, 1]);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[rustc_const_unstable(feature = \"const_reverse\", issue = \"100784\")]\n     #[inline]\n-    pub fn reverse(&mut self) {\n+    pub const fn reverse(&mut self) {\n         let half_len = self.len() / 2;\n         let Range { start, end } = self.as_mut_ptr_range();\n \n@@ -698,18 +699,20 @@ impl<T> [T] {\n         revswap(front_half, back_half, half_len);\n \n         #[inline]\n-        fn revswap<T>(a: &mut [T], b: &mut [T], n: usize) {\n-            debug_assert_eq!(a.len(), n);\n-            debug_assert_eq!(b.len(), n);\n+        const fn revswap<T>(a: &mut [T], b: &mut [T], n: usize) {\n+            debug_assert!(a.len() == n);\n+            debug_assert!(b.len() == n);\n \n             // Because this function is first compiled in isolation,\n             // this check tells LLVM that the indexing below is\n             // in-bounds.  Then after inlining -- once the actual\n             // lengths of the slices are known -- it's removed.\n             let (a, b) = (&mut a[..n], &mut b[..n]);\n \n-            for i in 0..n {\n+            let mut i = 0;\n+            while i < n {\n                 mem::swap(&mut a[i], &mut b[n - 1 - i]);\n+                i += 1;\n             }\n         }\n     }"}]}