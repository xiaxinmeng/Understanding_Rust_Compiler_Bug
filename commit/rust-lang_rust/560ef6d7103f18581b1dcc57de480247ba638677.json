{"sha": "560ef6d7103f18581b1dcc57de480247ba638677", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MGVmNmQ3MTAzZjE4NTgxYjFkY2M1N2RlNDgwMjQ3YmE2Mzg2Nzc=", "commit": {"author": {"name": "Albin Stjerna", "email": "albin.stjerna@gmail.com", "date": "2019-08-07T15:44:35Z"}, "committer": {"name": "Albin Stjerna", "email": "albin.stjerna@gmail.com", "date": "2019-09-04T07:46:44Z"}, "message": "Polonius: emit variable access facts", "tree": {"sha": "36d1ff6eaf93aff2721d4f6fb59661b4040c0dce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/36d1ff6eaf93aff2721d4f6fb59661b4040c0dce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/560ef6d7103f18581b1dcc57de480247ba638677", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/560ef6d7103f18581b1dcc57de480247ba638677", "html_url": "https://github.com/rust-lang/rust/commit/560ef6d7103f18581b1dcc57de480247ba638677", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/560ef6d7103f18581b1dcc57de480247ba638677/comments", "author": null, "committer": null, "parents": [{"sha": "9cd1a1157199b8303bc4fb5af3ae0fab6b91e786", "url": "https://api.github.com/repos/rust-lang/rust/commits/9cd1a1157199b8303bc4fb5af3ae0fab6b91e786", "html_url": "https://github.com/rust-lang/rust/commit/9cd1a1157199b8303bc4fb5af3ae0fab6b91e786"}], "stats": {"total": 61, "additions": 50, "deletions": 11}, "files": [{"sha": "f0beb4d3ae32d773e4afc09aa9a6a07b02f5c589", "filename": "src/librustc_mir/borrow_check/nll/facts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/560ef6d7103f18581b1dcc57de480247ba638677/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560ef6d7103f18581b1dcc57de480247ba638677/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ffacts.rs?ref=560ef6d7103f18581b1dcc57de480247ba638677", "patch": "@@ -68,6 +68,7 @@ impl AllFactsExt for AllFacts {\n                 path_belongs_to_var,\n                 initialized_at,\n                 moved_out_at,\n+                path_accessed_at,\n             ])\n         }\n         Ok(())"}, {"sha": "3f2ec1ba970173910e7ac85ffbc574afad7952fc", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/560ef6d7103f18581b1dcc57de480247ba638677/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560ef6d7103f18581b1dcc57de480247ba638677/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fmod.rs?ref=560ef6d7103f18581b1dcc57de480247ba638677", "patch": "@@ -60,7 +60,7 @@ pub(super) fn generate<'tcx>(\n     if !live_locals.is_empty() {\n         trace::trace(typeck, body, elements, flow_inits, move_data, live_locals);\n \n-        polonius::populate_var_liveness_facts(typeck, body, location_table);\n+        polonius::populate_access_facts(typeck, body, location_table, move_data);\n     }\n }\n "}, {"sha": "d61464b3f387d52d84f904a0592994d419f03326", "filename": "src/librustc_mir/borrow_check/nll/type_check/liveness/polonius.rs", "status": "modified", "additions": 48, "deletions": 10, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/560ef6d7103f18581b1dcc57de480247ba638677/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs", "raw_url": "https://github.com/rust-lang/rust/raw/560ef6d7103f18581b1dcc57de480247ba638677/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fliveness%2Fpolonius.rs?ref=560ef6d7103f18581b1dcc57de480247ba638677", "patch": "@@ -1,23 +1,28 @@\n use crate::borrow_check::location::{LocationIndex, LocationTable};\n+use crate::dataflow::indexes::MovePathIndex;\n+use crate::dataflow::move_paths::{LookupResult, MoveData};\n use crate::util::liveness::{categorize, DefUse};\n-use rustc::mir::visit::{PlaceContext, Visitor};\n-use rustc::mir::{Body, Local, Location};\n+use rustc::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n+use rustc::mir::{Body, Local, Location, Place};\n use rustc::ty::subst::Kind;\n use rustc::ty::Ty;\n \n use super::TypeChecker;\n \n type VarPointRelations = Vec<(Local, LocationIndex)>;\n+type MovePathPointRelations = Vec<(MovePathIndex, LocationIndex)>;\n \n-struct LivenessPointFactsExtractor<'me> {\n+struct UseFactsExtractor<'me> {\n     var_defined: &'me mut VarPointRelations,\n     var_used: &'me mut VarPointRelations,\n     location_table: &'me LocationTable,\n     var_drop_used: &'me mut VarPointRelations,\n+    move_data: &'me MoveData<'me>,\n+    path_accessed_at: &'me mut MovePathPointRelations,\n }\n \n // A Visitor to walk through the MIR and extract point-wise facts\n-impl LivenessPointFactsExtractor<'_> {\n+impl UseFactsExtractor<'_> {\n     fn location_to_index(&self, location: Location) -> LocationIndex {\n         self.location_table.mid_index(location)\n     }\n@@ -36,9 +41,21 @@ impl LivenessPointFactsExtractor<'_> {\n         debug!(\"LivenessFactsExtractor::insert_drop_use()\");\n         self.var_drop_used.push((local, self.location_to_index(location)));\n     }\n+\n+    fn insert_path_access(&mut self, path: MovePathIndex, location: Location) {\n+        debug!(\"LivenessFactsExtractor::insert_path_access({:?}, {:?})\", path, location);\n+        self.path_accessed_at.push((path, self.location_to_index(location)));\n+    }\n+\n+    fn place_to_mpi(&self, place: &Place<'_>) -> Option<MovePathIndex> {\n+        match self.move_data.rev_lookup.find(place.as_ref()) {\n+            LookupResult::Exact(mpi) => Some(mpi),\n+            LookupResult::Parent(mmpi) => mmpi,\n+        }\n+    }\n }\n \n-impl Visitor<'tcx> for LivenessPointFactsExtractor<'_> {\n+impl Visitor<'tcx> for UseFactsExtractor<'_> {\n     fn visit_local(&mut self, &local: &Local, context: PlaceContext, location: Location) {\n         match categorize(context) {\n             Some(DefUse::Def) => self.insert_def(local, location),\n@@ -47,6 +64,24 @@ impl Visitor<'tcx> for LivenessPointFactsExtractor<'_> {\n             _ => (),\n         }\n     }\n+\n+    fn visit_place(&mut self, place: &Place<'tcx>, context: PlaceContext, location: Location) {\n+        self.super_place(place, context, location);\n+        match context {\n+            PlaceContext::NonMutatingUse(_) => {\n+                if let Some(mpi) = self.place_to_mpi(place) {\n+                    self.insert_path_access(mpi, location);\n+                }\n+            }\n+\n+            PlaceContext::MutatingUse(MutatingUseContext::Borrow) => {\n+                if let Some(mpi) = self.place_to_mpi(place) {\n+                    self.insert_path_access(mpi, location);\n+                }\n+            }\n+            _ => (),\n+        }\n+    }\n }\n \n fn add_var_uses_regions(typeck: &mut TypeChecker<'_, 'tcx>, local: Local, ty: Ty<'tcx>) {\n@@ -60,24 +95,27 @@ fn add_var_uses_regions(typeck: &mut TypeChecker<'_, 'tcx>, local: Local, ty: Ty\n     });\n }\n \n-pub(super) fn populate_var_liveness_facts(\n+pub(super) fn populate_access_facts(\n     typeck: &mut TypeChecker<'_, 'tcx>,\n-    mir: &Body<'tcx>,\n+    body: &Body<'tcx>,\n     location_table: &LocationTable,\n+    move_data: &MoveData<'_>,\n ) {\n     debug!(\"populate_var_liveness_facts()\");\n \n     if let Some(facts) = typeck.borrowck_context.all_facts.as_mut() {\n-        LivenessPointFactsExtractor {\n+        UseFactsExtractor {\n             var_defined: &mut facts.var_defined,\n             var_used: &mut facts.var_used,\n             var_drop_used: &mut facts.var_drop_used,\n+            path_accessed_at: &mut facts.path_accessed_at,\n             location_table,\n+            move_data,\n         }\n-        .visit_body(mir);\n+        .visit_body(body);\n     }\n \n-    for (local, local_decl) in mir.local_decls.iter_enumerated() {\n+    for (local, local_decl) in body.local_decls.iter_enumerated() {\n         add_var_uses_regions(typeck, local, local_decl.ty);\n     }\n }"}]}