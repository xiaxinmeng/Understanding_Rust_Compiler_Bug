{"sha": "f998628e5c661f07bf0db7985b2949411a23064c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5OTg2MjhlNWM2NjFmMDdiZjBkYjc5ODViMjk0OTQxMWEyMzA2NGM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-06T13:57:13Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-06-26T14:31:49Z"}, "message": "let `trivial_noop` take ownership of `self`", "tree": {"sha": "61f26450dfed1f28800ef14e6b71bf592f6022fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61f26450dfed1f28800ef14e6b71bf592f6022fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f998628e5c661f07bf0db7985b2949411a23064c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f998628e5c661f07bf0db7985b2949411a23064c", "html_url": "https://github.com/rust-lang/rust/commit/f998628e5c661f07bf0db7985b2949411a23064c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f998628e5c661f07bf0db7985b2949411a23064c/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8147d17d8e3ac5c5dc9562862050f0876c556e88", "url": "https://api.github.com/repos/rust-lang/rust/commits/8147d17d8e3ac5c5dc9562862050f0876c556e88", "html_url": "https://github.com/rust-lang/rust/commit/8147d17d8e3ac5c5dc9562862050f0876c556e88"}], "stats": {"total": 54, "additions": 28, "deletions": 26}, "files": [{"sha": "e6211c4ed7fc4c05f71432b597b9d56e2ffde8ce", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f998628e5c661f07bf0db7985b2949411a23064c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f998628e5c661f07bf0db7985b2949411a23064c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=f998628e5c661f07bf0db7985b2949411a23064c", "patch": "@@ -736,20 +736,21 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         describe_op: impl Fn() -> String,\n         op: impl TypeOp<'gcx, 'tcx, Output = R>,\n     ) -> Result<R, TypeError<'tcx>> {\n-        if let Some(r) = op.trivial_noop() {\n-            return Ok(r);\n-        }\n-\n-        let (r, opt_data) = self.fully_perform_op_and_get_region_constraint_data(\n-            || format!(\"{} at {:?}\", describe_op(), locations),\n-            op,\n-        )?;\n+        match op.trivial_noop() {\n+            Ok(r) => Ok(r),\n+            Err(op) => {\n+                let (r, opt_data) = self.fully_perform_op_and_get_region_constraint_data(\n+                    || format!(\"{} at {:?}\", describe_op(), locations),\n+                    op,\n+                )?;\n+\n+                if let Some(data) = opt_data {\n+                    self.push_region_constraints(locations, data);\n+                }\n \n-        if let Some(data) = opt_data {\n-            self.push_region_constraints(locations, data);\n+                Ok(r)\n+            }\n         }\n-\n-        Ok(r)\n     }\n \n     fn push_region_constraints("}, {"sha": "d85a83ac3fc532563191ba68a97350c3d75b1b82", "filename": "src/librustc_mir/borrow_check/nll/type_check/type_op.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f998628e5c661f07bf0db7985b2949411a23064c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f998628e5c661f07bf0db7985b2949411a23064c/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Ftype_op.rs?ref=f998628e5c661f07bf0db7985b2949411a23064c", "patch": "@@ -13,11 +13,12 @@ use rustc::infer::{InferOk, InferResult};\n use rustc::traits::{Obligation, ObligationCause, PredicateObligation};\n use rustc::ty::{ParamEnv, Predicate, Ty};\n \n-pub(super) trait TypeOp<'gcx, 'tcx> {\n+pub(super) trait TypeOp<'gcx, 'tcx>: Sized {\n     type Output;\n \n-    /// Micro-optimization point: true if this is trivially true.\n-    fn trivial_noop(&self) -> Option<Self::Output>;\n+    /// Micro-optimization: returns `Ok(x)` if we can trivially\n+    /// produce the output, else returns `Err(self)` back.\n+    fn trivial_noop(self) -> Result<Self::Output, Self>;\n \n     /// Produce a description of the operation for the debug logs.\n     fn perform(\n@@ -45,8 +46,8 @@ where\n {\n     type Output = R;\n \n-    fn trivial_noop(&self) -> Option<Self::Output> {\n-        None\n+    fn trivial_noop(self) -> Result<Self::Output, Self> {\n+        Err(self)\n     }\n \n     fn perform(self, type_checker: &mut TypeChecker<'_, 'gcx, 'tcx>) -> InferResult<'tcx, R> {\n@@ -68,11 +69,11 @@ impl<'tcx> Subtype<'tcx> {\n impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for Subtype<'tcx> {\n     type Output = ();\n \n-    fn trivial_noop(&self) -> Option<Self::Output> {\n+    fn trivial_noop(self) -> Result<Self::Output, Self> {\n         if self.sub == self.sup {\n-            Some(())\n+            Ok(())\n         } else {\n-            None\n+            Err(self)\n         }\n     }\n \n@@ -101,11 +102,11 @@ impl<'tcx> Eq<'tcx> {\n impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for Eq<'tcx> {\n     type Output = ();\n \n-    fn trivial_noop(&self) -> Option<Self::Output> {\n+    fn trivial_noop(self) -> Result<Self::Output, Self> {\n         if self.a == self.b {\n-            Some(())\n+            Ok(())\n         } else {\n-            None\n+            Err(self)\n         }\n     }\n \n@@ -141,11 +142,11 @@ impl<'tcx> ProvePredicates<'tcx> {\n impl<'gcx, 'tcx> TypeOp<'gcx, 'tcx> for ProvePredicates<'tcx> {\n     type Output = ();\n \n-    fn trivial_noop(&self) -> Option<Self::Output> {\n+    fn trivial_noop(self) -> Result<Self::Output, Self> {\n         if self.obligations.is_empty() {\n-            Some(())\n+            Ok(())\n         } else {\n-            None\n+            Err(self)\n         }\n     }\n "}]}