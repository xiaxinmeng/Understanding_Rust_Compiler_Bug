{"sha": "2b25c0cd815f032b2c0b34d7d2316fbb20eda8de", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMjVjMGNkODE1ZjAzMmIyYzBiMzRkN2QyMzE2ZmJiMjBlZGE4ZGU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-04-14T16:05:47Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-04-14T16:07:23Z"}, "message": "Don't load the same allocation twice when reading a scalar pair from it", "tree": {"sha": "bcacd5e1cb5808acfd82eec8e419cc7020d2ed55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bcacd5e1cb5808acfd82eec8e419cc7020d2ed55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b25c0cd815f032b2c0b34d7d2316fbb20eda8de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b25c0cd815f032b2c0b34d7d2316fbb20eda8de", "html_url": "https://github.com/rust-lang/rust/commit/2b25c0cd815f032b2c0b34d7d2316fbb20eda8de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b25c0cd815f032b2c0b34d7d2316fbb20eda8de/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ba72b15666b2491415aec703a02c2364fe5e2790", "url": "https://api.github.com/repos/rust-lang/rust/commits/ba72b15666b2491415aec703a02c2364fe5e2790", "html_url": "https://github.com/rust-lang/rust/commit/ba72b15666b2491415aec703a02c2364fe5e2790"}], "stats": {"total": 12, "additions": 5, "deletions": 7}, "files": [{"sha": "f5ae434d00cec714f91b472d4f785350de81c81e", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/2b25c0cd815f032b2c0b34d7d2316fbb20eda8de/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b25c0cd815f032b2c0b34d7d2316fbb20eda8de/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=2b25c0cd815f032b2c0b34d7d2316fbb20eda8de", "patch": "@@ -242,13 +242,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n         };\n \n+        let alloc = self.memory.get_raw(ptr.alloc_id)?;\n+\n         match mplace.layout.abi {\n             Abi::Scalar(..) => {\n-                let scalar = self.memory.get_raw(ptr.alloc_id)?.read_scalar(\n-                    self,\n-                    ptr,\n-                    mplace.layout.size,\n-                )?;\n+                let scalar = alloc.read_scalar(self, ptr, mplace.layout.size)?;\n                 Ok(Some(ImmTy { imm: scalar.into(), layout: mplace.layout }))\n             }\n             Abi::ScalarPair(ref a, ref b) => {\n@@ -261,8 +259,8 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let b_offset = a_size.align_to(b.align(self).abi);\n                 assert!(b_offset.bytes() > 0); // we later use the offset to tell apart the fields\n                 let b_ptr = ptr.offset(b_offset, self)?;\n-                let a_val = self.memory.get_raw(ptr.alloc_id)?.read_scalar(self, a_ptr, a_size)?;\n-                let b_val = self.memory.get_raw(ptr.alloc_id)?.read_scalar(self, b_ptr, b_size)?;\n+                let a_val = alloc.read_scalar(self, a_ptr, a_size)?;\n+                let b_val = alloc.read_scalar(self, b_ptr, b_size)?;\n                 Ok(Some(ImmTy { imm: Immediate::ScalarPair(a_val, b_val), layout: mplace.layout }))\n             }\n             _ => Ok(None),"}]}