{"sha": "5b75e44fb01f0eda10ce8d8df92b80945d894768", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNzVlNDRmYjAxZjBlZGExMGNlOGQ4ZGY5MmI4MDk0NWQ4OTQ3Njg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-01T03:04:56Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-07T15:12:48Z"}, "message": "core: Inherit the intrinsics module", "tree": {"sha": "5d8a2300e8eacc5afa7d1f98a562c125c5189f92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d8a2300e8eacc5afa7d1f98a562c125c5189f92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b75e44fb01f0eda10ce8d8df92b80945d894768", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b75e44fb01f0eda10ce8d8df92b80945d894768", "html_url": "https://github.com/rust-lang/rust/commit/5b75e44fb01f0eda10ce8d8df92b80945d894768", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b75e44fb01f0eda10ce8d8df92b80945d894768/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "836d4b96a91cd6a36228d757004655e26e3f2c46", "url": "https://api.github.com/repos/rust-lang/rust/commits/836d4b96a91cd6a36228d757004655e26e3f2c46", "html_url": "https://github.com/rust-lang/rust/commit/836d4b96a91cd6a36228d757004655e26e3f2c46"}], "stats": {"total": 29, "additions": 25, "deletions": 4}, "files": [{"sha": "770433c45212bf3cacc85147e0db220663e68e0e", "filename": "src/libcore/intrinsics.rs", "status": "renamed", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b75e44fb01f0eda10ce8d8df92b80945d894768/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b75e44fb01f0eda10ce8d8df92b80945d894768/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=5b75e44fb01f0eda10ce8d8df92b80945d894768", "patch": "@@ -41,6 +41,7 @@ A quick refresher on memory ordering:\n \n */\n \n+#![experimental]\n #![allow(missing_doc)]\n \n // This is needed to prevent duplicate lang item definitions.\n@@ -470,7 +471,7 @@ extern \"rust-intrinsic\" {\n /// `TypeId` represents a globally unique identifier for a type\n #[lang=\"type_id\"] // This needs to be kept in lockstep with the code in trans/intrinsic.rs and\n                   // middle/lang_items.rs\n-#[deriving(Eq, Hash, Show, TotalEq)]\n+#[deriving(Eq, TotalEq)]\n #[cfg(not(test))]\n pub struct TypeId {\n     t: u64,\n@@ -482,4 +483,5 @@ impl TypeId {\n     pub fn of<T: 'static>() -> TypeId {\n         unsafe { type_id::<T>() }\n     }\n+    pub fn hash(&self) -> u64 { self.t }\n }", "previous_filename": "src/libstd/intrinsics.rs"}, {"sha": "b76d3b84254a0f29d43306f095e20b6dbda3958a", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b75e44fb01f0eda10ce8d8df92b80945d894768/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b75e44fb01f0eda10ce8d8df92b80945d894768/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=5b75e44fb01f0eda10ce8d8df92b80945d894768", "patch": "@@ -20,3 +20,7 @@\n #![no_std]\n #![feature(globs, macro_rules, managed_boxes)]\n #![deny(missing_doc)]\n+\n+/* Core modules for ownership management */\n+\n+pub mod intrinsics;"}, {"sha": "53d6f2fc0d23e9983bd8be3943a548af2a3c7ca2", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/5b75e44fb01f0eda10ce8d8df92b80945d894768/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b75e44fb01f0eda10ce8d8df92b80945d894768/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=5b75e44fb01f0eda10ce8d8df92b80945d894768", "patch": "@@ -499,6 +499,7 @@ use str::StrSlice;\n use str;\n use slice::{Vector, ImmutableVector};\n use slice;\n+use intrinsics::TypeId;\n \n pub use self::num::radix;\n pub use self::num::Radix;\n@@ -1241,5 +1242,11 @@ impl<T> Show for *mut T {\n     fn fmt(&self, f: &mut Formatter) -> Result { secret_pointer(self, f) }\n }\n \n+impl Show for TypeId {\n+    fn fmt(&self, f: &mut Formatter) -> Result {\n+        write!(f.buf, \"TypeId \\\\{ {} \\\\}\", self.hash())\n+    }\n+}\n+\n // If you expected tests to be here, look instead at the run-pass/ifmt.rs test,\n // it's a lot easier than creating all of the rt::Piece structures here."}, {"sha": "010ddbaa9424efcb617a938557b5f1aa46f8b9c0", "filename": "src/libstd/hash/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b75e44fb01f0eda10ce8d8df92b80945d894768/src%2Flibstd%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b75e44fb01f0eda10ce8d8df92b80945d894768/src%2Flibstd%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash%2Fmod.rs?ref=5b75e44fb01f0eda10ce8d8df92b80945d894768", "patch": "@@ -64,6 +64,7 @@\n #![allow(unused_must_use)]\n \n use container::Container;\n+use intrinsics::TypeId;\n use io::Writer;\n use iter::Iterator;\n use option::{Option, Some, None};\n@@ -284,6 +285,13 @@ impl<S: Writer, T> Hash<S> for *mut T {\n     }\n }\n \n+impl<S: Writer> Hash<S> for TypeId {\n+    #[inline]\n+    fn hash(&self, state: &mut S) {\n+        self.hash().hash(state)\n+    }\n+}\n+\n //////////////////////////////////////////////////////////////////////////////\n \n #[cfg(test)]"}, {"sha": "2c971542960620337f04d83c8f0ded0c96793605", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b75e44fb01f0eda10ce8d8df92b80945d894768/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b75e44fb01f0eda10ce8d8df92b80945d894768/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=5b75e44fb01f0eda10ce8d8df92b80945d894768", "patch": "@@ -122,8 +122,8 @@\n // Make and rand accessible for benchmarking/testcases\n #[cfg(test)] extern crate rand;\n \n-// we wrap some libc stuff\n extern crate libc;\n+extern crate core;\n \n // Make std testable by not duplicating lang items. See #2912\n #[cfg(test)] extern crate realstd = \"std\";\n@@ -133,6 +133,8 @@ extern crate libc;\n #[cfg(test)] pub use ty = realstd::ty;\n #[cfg(test)] pub use owned = realstd::owned;\n \n+pub use core::intrinsics;\n+\n // Run tests with libgreen instead of libnative.\n //\n // FIXME: This egregiously hacks around starting the test runner in a different\n@@ -255,8 +257,6 @@ pub mod reflect;\n #[unstable]\n pub mod unstable;\n #[experimental]\n-pub mod intrinsics;\n-#[experimental]\n pub mod raw;\n \n /* For internal use, not exported */"}]}