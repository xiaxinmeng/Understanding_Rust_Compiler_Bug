{"sha": "d8716f5a3fb32dfaa77e298129dae193b0b8c650", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4NzE2ZjVhM2ZiMzJkZmFhNzdlMjk4MTI5ZGFlMTkzYjBiOGM2NTA=", "commit": {"author": {"name": "daxpedda", "email": "daxpedda@gmail.com", "date": "2020-02-17T01:38:48Z"}, "committer": {"name": "daxpedda", "email": "daxpedda@gmail.com", "date": "2020-02-17T13:43:38Z"}, "message": "Fix ICE.", "tree": {"sha": "38b91b0fb388f100324e9b2d944d16672b7f7aeb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38b91b0fb388f100324e9b2d944d16672b7f7aeb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8716f5a3fb32dfaa77e298129dae193b0b8c650", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3qx/rJh59vdc2+v9Q9YqPqOI5G8FAl5KmIoACgkQQ9YqPqOI\n5G9Gpg/+NiQRn8mdhTo+uRTh0vzdIH/jD7OlDidn2iCIEQiNW94IlJ9pyBh/DLTx\nEKxguGL2643JO+GTGxPoebFY+wPWKWu23pIl2w3w0FE+/wvEpt92KahEJ+bF0+HJ\nPRZdoVd8PeWwCc2tB/Yhqy8vTBUf5Z2uCPnAXYl1+iXyzIGU/JtbiMabBPk7mxx2\nSJOC0B6BTBV79BN/qDw5007DQdLg9d2FuSsusiio9FW9jkFyHM+tWo04lzlWiCH5\nekYRqYMVal8tOntlaBsvbOdg5WeoFMetBEWKVYOXulgl0zeCDt8/xDSv4n0JdAk7\nNvpmRnEvlPRSGRgQnELiEYdNvyTDU2IpPbFUWL2C89PZNOee3U4HcIBUGO5msbfa\nlfFscOCB31D52qL1Hd/lXL7zQrLugWUj6P0lIzu0ApLrrWgao+KEMAe+au7DO3oR\nVGyOhMOOro8sg9dq8WE+Sk7tHW/ktr2C3jZvAYnY9rGmKv15NKqV2ADbZ22YnD6C\ntvn/5N2Oc21xASVxgflBswWM7dlMJhDU4SI5Q/hHnsaFwDDZXedpd4oDgmekSHZY\n+2M0+DkZ1vY7KfiZOw3pnkg/rh9O+Xp8+4+212by5gAd7OI6kYV34QRAaQMAXVo/\ng99d5Sbr7xj044OtRl0WPebVlGFootINbXGZb0Gl1UNo/PNvtQQ=\n=UDqy\n-----END PGP SIGNATURE-----", "payload": "tree 38b91b0fb388f100324e9b2d944d16672b7f7aeb\nparent 0ee393cf01b59d55a54e9e4299797bd0f7339d58\nauthor daxpedda <daxpedda@gmail.com> 1581903528 +0100\ncommitter daxpedda <daxpedda@gmail.com> 1581947018 +0100\n\nFix ICE.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8716f5a3fb32dfaa77e298129dae193b0b8c650", "html_url": "https://github.com/rust-lang/rust/commit/d8716f5a3fb32dfaa77e298129dae193b0b8c650", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8716f5a3fb32dfaa77e298129dae193b0b8c650/comments", "author": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "committer": {"login": "daxpedda", "id": 1645124, "node_id": "MDQ6VXNlcjE2NDUxMjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1645124?v=4", "gravatar_id": "", "url": "https://api.github.com/users/daxpedda", "html_url": "https://github.com/daxpedda", "followers_url": "https://api.github.com/users/daxpedda/followers", "following_url": "https://api.github.com/users/daxpedda/following{/other_user}", "gists_url": "https://api.github.com/users/daxpedda/gists{/gist_id}", "starred_url": "https://api.github.com/users/daxpedda/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/daxpedda/subscriptions", "organizations_url": "https://api.github.com/users/daxpedda/orgs", "repos_url": "https://api.github.com/users/daxpedda/repos", "events_url": "https://api.github.com/users/daxpedda/events{/privacy}", "received_events_url": "https://api.github.com/users/daxpedda/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ee393cf01b59d55a54e9e4299797bd0f7339d58", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ee393cf01b59d55a54e9e4299797bd0f7339d58", "html_url": "https://github.com/rust-lang/rust/commit/0ee393cf01b59d55a54e9e4299797bd0f7339d58"}], "stats": {"total": 45, "additions": 23, "deletions": 22}, "files": [{"sha": "c1285ad364677052842c68be0cd915aa0137a7dc", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 23, "deletions": 22, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d8716f5a3fb32dfaa77e298129dae193b0b8c650/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8716f5a3fb32dfaa77e298129dae193b0b8c650/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=d8716f5a3fb32dfaa77e298129dae193b0b8c650", "patch": "@@ -153,11 +153,11 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DocMarkdown {\n     fn check_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::Item<'_>) {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         match item.kind {\n-            hir::ItemKind::Fn(ref sig, ..) => {\n+            hir::ItemKind::Fn(ref sig, _, body_id) => {\n                 if !(is_entrypoint_fn(cx, cx.tcx.hir().local_def_id(item.hir_id))\n                     || in_external_macro(cx.tcx.sess, item.span))\n                 {\n-                    lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers);\n+                    lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id));\n                 }\n             },\n             hir::ItemKind::Impl {\n@@ -180,7 +180,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DocMarkdown {\n         let headers = check_attrs(cx, &self.valid_idents, &item.attrs);\n         if let hir::TraitItemKind::Method(ref sig, ..) = item.kind {\n             if !in_external_macro(cx.tcx.sess, item.span) {\n-                lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers);\n+                lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, None);\n             }\n         }\n     }\n@@ -190,8 +190,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DocMarkdown {\n         if self.in_trait_impl || in_external_macro(cx.tcx.sess, item.span) {\n             return;\n         }\n-        if let hir::ImplItemKind::Method(ref sig, ..) = item.kind {\n-            lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers);\n+        if let hir::ImplItemKind::Method(ref sig, body_id) = item.kind {\n+            lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id));\n         }\n     }\n }\n@@ -202,6 +202,7 @@ fn lint_for_missing_headers<'a, 'tcx>(\n     span: impl Into<MultiSpan> + Copy,\n     sig: &hir::FnSig<'_>,\n     headers: DocHeaders,\n+    body_id: Option<hir::BodyId>,\n ) {\n     if !cx.access_levels.is_exported(hir_id) {\n         return; // Private functions do not require doc comments\n@@ -222,24 +223,24 @@ fn lint_for_missing_headers<'a, 'tcx>(\n                 span,\n                 \"docs for function returning `Result` missing `# Errors` section\",\n             );\n-        } else {\n-            let def_id = cx.tcx.hir().local_def_id(hir_id);\n+        } else if let (Some(body_id), Some(future)) = (body_id, get_trait_def_id(cx, &paths::FUTURE)) {\n+            let def_id = cx.tcx.hir().body_owner_def_id(body_id);\n             let mir = cx.tcx.optimized_mir(def_id);\n-            if let Some(future) = get_trait_def_id(cx, &paths::FUTURE) {\n-                if implements_trait(cx, mir.return_ty(), future, &[]) {\n-                    use TyKind::*;\n-\n-                    if let Opaque(_, subs) = mir.return_ty().kind {\n-                        if let Some(ty) = subs.types().next() {\n-                            if let Generator(_, subs, _) = ty.kind {\n-                                if match_type(cx, subs.as_generator().return_ty(def_id, cx.tcx), &paths::RESULT) {\n-                                    span_lint(\n-                                        cx,\n-                                        MISSING_ERRORS_DOC,\n-                                        span,\n-                                        \"docs for function returning `Result` missing `# Errors` section\",\n-                                    );\n-                                }\n+            let ret_ty = mir.return_ty();\n+\n+            if implements_trait(cx, ret_ty, future, &[]) {\n+                use TyKind::*;\n+\n+                if let Opaque(_, subs) = ret_ty.kind {\n+                    if let Some(ty) = subs.types().next() {\n+                        if let Generator(_, subs, _) = ty.kind {\n+                            if match_type(cx, subs.as_generator().return_ty(def_id, cx.tcx), &paths::RESULT) {\n+                                span_lint(\n+                                    cx,\n+                                    MISSING_ERRORS_DOC,\n+                                    span,\n+                                    \"docs for function returning `Result` missing `# Errors` section\",\n+                                );\n                             }\n                         }\n                     }"}]}