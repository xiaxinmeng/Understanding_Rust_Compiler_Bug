{"sha": "74380b3336d6d93b74f65f0a1034b29b53aae268", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MzgwYjMzMzZkNmQ5M2I3NGY2NWYwYTEwMzRiMjliNTNhYWUyNjg=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-06-22T23:59:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-06-22T23:59:20Z"}, "message": "Rollup merge of #62068 - ia0:fix_meta_var, r=petrochenkov\n\nFix meta-variable binding errors in macros\n\nThe errors are either:\n- The meta-variable used in the right-hand side is not bound (or defined) in the\n  left-hand side.\n- The meta-variable used in the right-hand side does not repeat with the same\n  kleene operator as its binder in the left-hand side. Either it does not repeat\n  enough, or it uses a different operator somewhere.\n\nThis change should have no semantic impact.\n\nFound by https://github.com/rust-lang/rust/pull/62008", "tree": {"sha": "6b20831f5e7fe26a17165678bc6c0ea78d492621", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b20831f5e7fe26a17165678bc6c0ea78d492621"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74380b3336d6d93b74f65f0a1034b29b53aae268", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdDsDYCRBK7hj4Ov3rIwAAdHIIAB0u0xmTScvew5iX3OK9rpCx\nvtNsk/gwjL16wp6FGKn2owkbaLIRwfaoT6uQVAHCvsk2U9Hcr8L3uc/8i6d9K41g\nKybgP/BCuMPIq0VvsYG+Nv9OslhGxi5hGL+5mTyzcAOpFLzXPYvzbNf6i0f89zjC\nBt+A7ELMqjGfb9Bd27LFRnaj2PZ7xyES0Z3xfoDXX1DCjLVFdBPSsyWtElOAO4Du\nNdqGfjLTkzVVSqFawIpVmWI4qZyPFfNrtniMoZPkmJMSOjkBYpheCU2zUtNpsyw9\nYVgw2mwnhaOpz+eJpcGUQfVO7TLZ3BnBMmz5t/t73khE2HM/qEs/8gjXMgyRtqE=\n=ON26\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b20831f5e7fe26a17165678bc6c0ea78d492621\nparent 07c82e183bc92b76f10bbd7c3165dc959ec1ccad\nparent b8106b59d2faaea57301ad000d7787b70c5b2985\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1561247960 +0200\ncommitter GitHub <noreply@github.com> 1561247960 +0200\n\nRollup merge of #62068 - ia0:fix_meta_var, r=petrochenkov\n\nFix meta-variable binding errors in macros\n\nThe errors are either:\n- The meta-variable used in the right-hand side is not bound (or defined) in the\n  left-hand side.\n- The meta-variable used in the right-hand side does not repeat with the same\n  kleene operator as its binder in the left-hand side. Either it does not repeat\n  enough, or it uses a different operator somewhere.\n\nThis change should have no semantic impact.\n\nFound by https://github.com/rust-lang/rust/pull/62008\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74380b3336d6d93b74f65f0a1034b29b53aae268", "html_url": "https://github.com/rust-lang/rust/commit/74380b3336d6d93b74f65f0a1034b29b53aae268", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74380b3336d6d93b74f65f0a1034b29b53aae268/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07c82e183bc92b76f10bbd7c3165dc959ec1ccad", "url": "https://api.github.com/repos/rust-lang/rust/commits/07c82e183bc92b76f10bbd7c3165dc959ec1ccad", "html_url": "https://github.com/rust-lang/rust/commit/07c82e183bc92b76f10bbd7c3165dc959ec1ccad"}, {"sha": "b8106b59d2faaea57301ad000d7787b70c5b2985", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8106b59d2faaea57301ad000d7787b70c5b2985", "html_url": "https://github.com/rust-lang/rust/commit/b8106b59d2faaea57301ad000d7787b70c5b2985"}], "stats": {"total": 92, "additions": 46, "deletions": 46}, "files": [{"sha": "17ea58438810e20f10684df14daf83d51d8abee6", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=74380b3336d6d93b74f65f0a1034b29b53aae268", "patch": "@@ -2070,19 +2070,19 @@ macro_rules! tuple {\n     () => ();\n     ( $($name:ident,)+ ) => (\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<$($name:Debug),*> Debug for ($($name,)*) where last_type!($($name,)+): ?Sized {\n+        impl<$($name:Debug),+> Debug for ($($name,)+) where last_type!($($name,)+): ?Sized {\n             #[allow(non_snake_case, unused_assignments)]\n             fn fmt(&self, f: &mut Formatter<'_>) -> Result {\n                 let mut builder = f.debug_tuple(\"\");\n-                let ($(ref $name,)*) = *self;\n+                let ($(ref $name,)+) = *self;\n                 $(\n                     builder.field(&$name);\n-                )*\n+                )+\n \n                 builder.finish()\n             }\n         }\n-        peel! { $($name,)* }\n+        peel! { $($name,)+ }\n     )\n }\n "}, {"sha": "38e38642842403bf88843ca2f8a22fd1e2b94f7d", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=74380b3336d6d93b74f65f0a1034b29b53aae268", "patch": "@@ -617,11 +617,11 @@ mod impls {\n \n         ( $($name:ident)+) => (\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($name: Hash),*> Hash for ($($name,)*) where last_type!($($name,)+): ?Sized {\n+            impl<$($name: Hash),+> Hash for ($($name,)+) where last_type!($($name,)+): ?Sized {\n                 #[allow(non_snake_case)]\n                 fn hash<S: Hasher>(&self, state: &mut S) {\n-                    let ($(ref $name,)*) = *self;\n-                    $($name.hash(state);)*\n+                    let ($(ref $name,)+) = *self;\n+                    $($name.hash(state);)+\n                 }\n             }\n         );"}, {"sha": "adfb639bae341ceb0aca1aea55ef4723d32333d6", "filename": "src/libcore/iter/traits/accum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibcore%2Fiter%2Ftraits%2Faccum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibcore%2Fiter%2Ftraits%2Faccum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits%2Faccum.rs?ref=74380b3336d6d93b74f65f0a1034b29b53aae268", "patch": "@@ -72,10 +72,10 @@ macro_rules! integer_sum_product {\n     ($($a:ty)*) => (\n         integer_sum_product!(@impls 0, 1,\n                 #[stable(feature = \"iter_arith_traits\", since = \"1.12.0\")],\n-                $($a)+);\n+                $($a)*);\n         integer_sum_product!(@impls Wrapping(0), Wrapping(1),\n                 #[stable(feature = \"wrapping_iter_arith\", since = \"1.14.0\")],\n-                $(Wrapping<$a>)+);\n+                $(Wrapping<$a>)*);\n     );\n }\n "}, {"sha": "589061b2826818107a82961647e0caf3fd7ce6a8", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=74380b3336d6d93b74f65f0a1034b29b53aae268", "patch": "@@ -15,7 +15,7 @@ macro_rules! panic {\n         $crate::panic!($msg)\n     );\n     ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::panicking::panic_fmt(format_args!($fmt, $($arg)*),\n+        $crate::panicking::panic_fmt(format_args!($fmt, $($arg)+),\n                                      &(file!(), line!(), __rust_unstable_column!()))\n     });\n }\n@@ -558,7 +558,7 @@ macro_rules! unreachable {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n macro_rules! unimplemented {\n     () => (panic!(\"not yet implemented\"));\n-    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)*)));\n+    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)+)));\n }\n \n /// Indicates unfinished code.\n@@ -617,7 +617,7 @@ macro_rules! unimplemented {\n #[unstable(feature = \"todo_macro\", issue = \"59277\")]\n macro_rules! todo {\n     () => (panic!(\"not yet implemented\"));\n-    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)*)));\n+    ($($arg:tt)+) => (panic!(\"not yet implemented: {}\", format_args!($($arg)+)));\n }\n \n /// Creates an array of [`MaybeUninit`]."}, {"sha": "fccb00d768cd852f69f35135d68fedcff29c26fc", "filename": "src/libcore/ptr/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibcore%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibcore%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr%2Fmod.rs?ref=74380b3336d6d93b74f65f0a1034b29b53aae268", "patch": "@@ -2725,12 +2725,12 @@ macro_rules! fnptr_impls_safety_abi {\n \n macro_rules! fnptr_impls_args {\n     ($($Arg: ident),+) => {\n-        fnptr_impls_safety_abi! { extern \"Rust\" fn($($Arg),*) -> Ret, $($Arg),* }\n-        fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),*) -> Ret, $($Arg),* }\n-        fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),* , ...) -> Ret, $($Arg),* }\n-        fnptr_impls_safety_abi! { unsafe extern \"Rust\" fn($($Arg),*) -> Ret, $($Arg),* }\n-        fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),*) -> Ret, $($Arg),* }\n-        fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),* , ...) -> Ret, $($Arg),* }\n+        fnptr_impls_safety_abi! { extern \"Rust\" fn($($Arg),+) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),+) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { extern \"C\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { unsafe extern \"Rust\" fn($($Arg),+) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),+) -> Ret, $($Arg),+ }\n+        fnptr_impls_safety_abi! { unsafe extern \"C\" fn($($Arg),+ , ...) -> Ret, $($Arg),+ }\n     };\n     () => {\n         // No variadic functions with 0 parameters"}, {"sha": "5c2f9ec9848dda7d26b1b6d5b2545cd70313f5ec", "filename": "src/libproc_macro/bridge/rpc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibproc_macro%2Fbridge%2Frpc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibproc_macro%2Fbridge%2Frpc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibproc_macro%2Fbridge%2Frpc.rs?ref=74380b3336d6d93b74f65f0a1034b29b53aae268", "patch": "@@ -59,7 +59,7 @@ macro_rules! rpc_encode_decode {\n         }\n     };\n     (enum $name:ident $(<$($T:ident),+>)? { $($variant:ident $(($field:ident))*),* $(,)? }) => {\n-        impl<S, $($($T: Encode<S>),+)?> Encode<S> for $name $(<$($T),+>)* {\n+        impl<S, $($($T: Encode<S>),+)?> Encode<S> for $name $(<$($T),+>)? {\n             fn encode(self, w: &mut Writer, s: &mut S) {\n                 // HACK(eddyb): `Tag` enum duplicated between the\n                 // two impls as there's no other place to stash it.\n@@ -79,8 +79,8 @@ macro_rules! rpc_encode_decode {\n             }\n         }\n \n-        impl<S, $($($T: for<'s> DecodeMut<'a, 's, S>),+)*> DecodeMut<'a, '_, S>\n-            for $name $(<$($T),+>)*\n+        impl<S, $($($T: for<'s> DecodeMut<'a, 's, S>),+)?> DecodeMut<'a, '_, S>\n+            for $name $(<$($T),+>)?\n         {\n             fn decode(r: &mut Reader<'a>, s: &mut S) -> Self {\n                 // HACK(eddyb): `Tag` enum duplicated between the"}, {"sha": "4fb88dadd1f44628ece3ec4df0707b83f071f11c", "filename": "src/librustc/middle/weak_lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fweak_lang_items.rs?ref=74380b3336d6d93b74f65f0a1034b29b53aae268", "patch": "@@ -147,7 +147,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         let lang_items = self.lang_items();\n         let did = Some(item_def_id);\n \n-        $(lang_items.$name() == did)||+\n+        $(lang_items.$name() == did)||*\n     }\n }\n "}, {"sha": "0709368ad860ef973792a951cd7f16f180e5ab70", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=74380b3336d6d93b74f65f0a1034b29b53aae268", "patch": "@@ -110,7 +110,7 @@ macro_rules! builder_methods_for_value_instructions {\n             unsafe {\n                 llvm::$llvm_capi(self.llbuilder, $($arg,)* UNNAMED)\n             }\n-        })*\n+        })+\n     }\n }\n "}, {"sha": "635edbb927e5c4c1e86cdc6c02e88c057474682f", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=74380b3336d6d93b74f65f0a1034b29b53aae268", "patch": "@@ -423,7 +423,7 @@ macro_rules! newtype_index {\n     (@derives      [$($derives:ident,)*]\n      @attrs        [$(#[$attrs:meta])*]\n      @type         [$type:ident]\n-     @max          [$_max:expr]\n+     @max          [$max:expr]\n      @vis          [$v:vis]\n      @debug_format [$debug_format:tt]\n                    $(#[doc = $doc:expr])*"}, {"sha": "2fb534e8228e6f8fb969fdd6577212626c51cde8", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=74380b3336d6d93b74f65f0a1034b29b53aae268", "patch": "@@ -219,7 +219,7 @@ fn get_type_suggestion(t: Ty<'_>, val: u128, negative: bool) -> Option<String> {\n                             return Some(format!(\"{:?}\", $itypes))\n                         })*\n                         None\n-                    },)*\n+                    },)+\n                     _ => None\n                 }\n             }"}, {"sha": "75821aba4706e1bedc19ba12c221e01f300abfa0", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=74380b3336d6d93b74f65f0a1034b29b53aae268", "patch": "@@ -119,19 +119,19 @@ macro_rules! flavor_mappings {\n     ($((($($flavor:tt)*), $string:expr),)*) => (\n         impl LinkerFlavor {\n             pub const fn one_of() -> &'static str {\n-                concat!(\"one of: \", $($string, \" \",)+)\n+                concat!(\"one of: \", $($string, \" \",)*)\n             }\n \n             pub fn from_str(s: &str) -> Option<Self> {\n                 Some(match s {\n-                    $($string => $($flavor)*,)+\n+                    $($string => $($flavor)*,)*\n                     _ => return None,\n                 })\n             }\n \n             pub fn desc(&self) -> &str {\n                 match *self {\n-                    $($($flavor)* => $string,)+\n+                    $($($flavor)* => $string,)*\n                 }\n             }\n         }"}, {"sha": "2def2a455fb6448158a844a465d29e37fa900f07", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=74380b3336d6d93b74f65f0a1034b29b53aae268", "patch": "@@ -739,33 +739,33 @@ macro_rules! count {\n macro_rules! tuple {\n     () => ();\n     ( $($name:ident,)+ ) => (\n-        impl<$($name:Decodable),*> Decodable for ($($name,)*) {\n+        impl<$($name:Decodable),+> Decodable for ($($name,)+) {\n             #[allow(non_snake_case)]\n-            fn decode<D: Decoder>(d: &mut D) -> Result<($($name,)*), D::Error> {\n-                let len: usize = count!($($name)*);\n+            fn decode<D: Decoder>(d: &mut D) -> Result<($($name,)+), D::Error> {\n+                let len: usize = count!($($name)+);\n                 d.read_tuple(len, |d| {\n                     let mut i = 0;\n                     let ret = ($(d.read_tuple_arg({ i+=1; i-1 }, |d| -> Result<$name, D::Error> {\n                         Decodable::decode(d)\n-                    })?,)*);\n+                    })?,)+);\n                     Ok(ret)\n                 })\n             }\n         }\n-        impl<$($name:Encodable),*> Encodable for ($($name,)*) {\n+        impl<$($name:Encodable),+> Encodable for ($($name,)+) {\n             #[allow(non_snake_case)]\n             fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-                let ($(ref $name,)*) = *self;\n+                let ($(ref $name,)+) = *self;\n                 let mut n = 0;\n-                $(let $name = $name; n += 1;)*\n+                $(let $name = $name; n += 1;)+\n                 s.emit_tuple(n, |s| {\n                     let mut i = 0;\n-                    $(s.emit_tuple_arg({ i+=1; i-1 }, |s| $name.encode(s))?;)*\n+                    $(s.emit_tuple_arg({ i+=1; i-1 }, |s| $name.encode(s))?;)+\n                     Ok(())\n                 })\n             }\n         }\n-        peel! { $($name,)* }\n+        peel! { $($name,)+ }\n     )\n }\n "}, {"sha": "945cf36af46fe42788090c0d975da0133fe84880", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=74380b3336d6d93b74f65f0a1034b29b53aae268", "patch": "@@ -98,20 +98,20 @@ macro_rules! ast_fragments {\n                             }\n                         });\n                     }\n-                    $($(AstFragment::$Kind(ast) => vis.$mut_visit_ast(ast),)*)*\n+                    $($(AstFragment::$Kind(ast) => vis.$mut_visit_ast(ast),)?)*\n                     $($(AstFragment::$Kind(ast) =>\n-                        ast.flat_map_in_place(|ast| vis.$flat_map_ast_elt(ast)),)*)*\n+                        ast.flat_map_in_place(|ast| vis.$flat_map_ast_elt(ast)),)?)*\n                 }\n             }\n \n             pub fn visit_with<'a, V: Visitor<'a>>(&'a self, visitor: &mut V) {\n                 match *self {\n                     AstFragment::OptExpr(Some(ref expr)) => visitor.visit_expr(expr),\n                     AstFragment::OptExpr(None) => {}\n-                    $($(AstFragment::$Kind(ref ast) => visitor.$visit_ast(ast),)*)*\n+                    $($(AstFragment::$Kind(ref ast) => visitor.$visit_ast(ast),)?)*\n                     $($(AstFragment::$Kind(ref ast) => for ast_elt in &ast[..] {\n                         visitor.$visit_ast_elt(ast_elt);\n-                    })*)*\n+                    })?)*\n                 }\n             }\n         }\n@@ -122,10 +122,10 @@ macro_rules! ast_fragments {\n             }\n             $($(fn $mut_visit_ast(&mut self, ast: &mut $AstTy) {\n                 visit_clobber(ast, |ast| self.expand_fragment(AstFragment::$Kind(ast)).$make_ast());\n-            })*)*\n+            })?)*\n             $($(fn $flat_map_ast_elt(&mut self, ast_elt: <$AstTy as IntoIterator>::Item) -> $AstTy {\n                 self.expand_fragment(AstFragment::$Kind(smallvec![ast_elt])).$make_ast()\n-            })*)*\n+            })?)*\n         }\n \n         impl<'a> MacResult for crate::ext::tt::macro_rules::ParserAnyMacro<'a> {"}, {"sha": "e75eff2e85714a48e4ea71778d11ab3fccde832b", "filename": "src/libsyntax_ext/deriving/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fderiving%2Fmod.rs?ref=74380b3336d6d93b74f65f0a1034b29b53aae268", "patch": "@@ -88,7 +88,7 @@ macro_rules! derive_traits {\n                         )\n                     }),\n                 );\n-            )*\n+            )+\n         }\n     }\n }"}, {"sha": "c9d99e5831ac47b5348abdf348042ccd8ef87a8b", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=74380b3336d6d93b74f65f0a1034b29b53aae268", "patch": "@@ -70,7 +70,7 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n         macro_rules! tt {\n             ($ty:ident { $($field:ident $(: $value:expr)*),+ $(,)? }) => (\n                 TokenTree::$ty(self::$ty {\n-                    $($field $(: $value)*,)*\n+                    $($field $(: $value)*,)+\n                     span,\n                 })\n             );"}, {"sha": "bcc7a8a5ae0a3255845de805d45abd2408565780", "filename": "src/test/ui/issues/issue-22814.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Ftest%2Fui%2Fissues%2Fissue-22814.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74380b3336d6d93b74f65f0a1034b29b53aae268/src%2Ftest%2Fui%2Fissues%2Fissue-22814.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22814.rs?ref=74380b3336d6d93b74f65f0a1034b29b53aae268", "patch": "@@ -3,7 +3,7 @@ trait Test {}\n \n macro_rules! test {\n ( $($name:ident)+) => (\n-    impl<$($name: Test),*> Test for ($($name,)*) {\n+    impl<$($name: Test),+> Test for ($($name,)+) {\n     }\n )\n }"}]}