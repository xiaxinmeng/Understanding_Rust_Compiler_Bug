{"sha": "8a5eb689583163eef39e6b595506341ebfe19633", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhNWViNjg5NTgzMTYzZWVmMzllNmI1OTU1MDYzNDFlYmZlMTk2MzM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-05-08T11:59:26Z"}, "committer": {"name": "Oliver Schneider", "email": "git-no-reply-9879165716479413131@oli-obk.de", "date": "2018-05-22T08:54:05Z"}, "message": "Report let bindings and statements as unstable", "tree": {"sha": "3caa678bf5543b2b945904e9e94f339bdd0f9062", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3caa678bf5543b2b945904e9e94f339bdd0f9062"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a5eb689583163eef39e6b595506341ebfe19633", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQJgBAABCgBKFiEEvpMjxK4/cnPNfesJHVy0/Fl8MAQFAlsD2q4sHGdpdC1uby1y\nZXBseS05ODc5MTY1NzE2NDc5NDEzMTMxQG9saS1vYmsuZGUACgkQHVy0/Fl8MASS\neBAAj157DyAVN2Y9gIItHqj8O3pxxRoOcoiPzZY2k6HNeo8sF9OC5Q15M40wRK8v\n30aBZu3uZFSqjCv93gRNSr9u/UhL8lueJsQqxnF0U/X+MOuhRePLucBK61fESZTF\nKrRkgxoyiPGRinwJUnYdOyNFUA1lrPTuRJDKCApjWMuZUiSjhitWLBuUcqCBJzEf\nvx/uNPhsUlFJrUrC1HuqzaxNIMbSNvrF8tFkfPeJA3BjqaCzhOI4hr21puabPe22\nGBXpchllKG7weoW85yjZfriO2LzUEtfIBOAHD1+CrdyHv3TGfoiAtJiFA85CFU1j\nUQ6ldz3gmgYfArpPEeW+XtYBbH6Jxvz6ESe1iRg8apI1/NTVcmKnAtO9+LmcGgtl\nvLtk13Bw5ncnBc0W30Wth8dSxgQGVLgenJMV7F9TzSkIxSnf5I3pf6Xal7Et9S0V\nbQeJV9ADeqBTpJv+JkGsOXehMuN+EhuFGbyMIw0hlleMQFtocHLyygy623OVCQJ7\nEA0fVMPOV29cayuVzCpkr6DyZoe9Ynt7Es0LkD3xlcTohCe4JI5J3UtTlGLRtX1w\neYTrI8W/dCpgQ8JqdeEEg+f8YPyfJ3aMWmxgosqOgW/5mi7v/M5PDzWNnp+1ZQo3\nOLYrYGrdVOOUlaKLVi0fjw1JF2F5a4uLnP8l2lVoU8OF2w0=\n=u2nm\n-----END PGP SIGNATURE-----", "payload": "tree 3caa678bf5543b2b945904e9e94f339bdd0f9062\nparent d7bf358dbd778f2c0a32936b959e868918e082ca\nauthor Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1525780766 +0200\ncommitter Oliver Schneider <git-no-reply-9879165716479413131@oli-obk.de> 1526979245 +0200\n\nReport let bindings and statements as unstable\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a5eb689583163eef39e6b595506341ebfe19633", "html_url": "https://github.com/rust-lang/rust/commit/8a5eb689583163eef39e6b595506341ebfe19633", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a5eb689583163eef39e6b595506341ebfe19633/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7bf358dbd778f2c0a32936b959e868918e082ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7bf358dbd778f2c0a32936b959e868918e082ca", "html_url": "https://github.com/rust-lang/rust/commit/d7bf358dbd778f2c0a32936b959e868918e082ca"}], "stats": {"total": 215, "additions": 150, "deletions": 65}, "files": [{"sha": "bb554b5e806fb102bad276d6a6b730db12237fae", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 13, "deletions": 22, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/8a5eb689583163eef39e6b595506341ebfe19633/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5eb689583163eef39e6b595506341ebfe19633/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=8a5eb689583163eef39e6b595506341ebfe19633", "patch": "@@ -32,7 +32,7 @@ use rustc::middle::lang_items;\n use rustc_target::spec::abi::Abi;\n use syntax::attr;\n use syntax::ast::LitKind;\n-use syntax::feature_gate::{UnstableFeatures, emit_feature_err, GateIssue};\n+use syntax::feature_gate::{UnstableFeatures, feature_err, emit_feature_err, GateIssue};\n use syntax_pos::{Span, DUMMY_SP};\n \n use std::fmt;\n@@ -189,17 +189,12 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n     fn statement_like(&mut self) {\n         self.add(Qualif::NOT_CONST);\n         if self.mode != Mode::Fn {\n-            if self.span.allows_unstable() {\n-                emit_feature_err(&self.tcx.sess.parse_sess, \"const_let\",\n-                                self.span, GateIssue::Language,\n-                                \"statements in const fn are unstable\");\n-            }\n-            let mut err = struct_span_err!(\n-                self.tcx.sess,\n+            let mut err = feature_err(\n+                &self.tcx.sess.parse_sess,\n+                \"const_let\",\n                 self.span,\n-                E0016,\n-                \"blocks in {}s are limited to items and tail expressions\",\n-                self.mode\n+                GateIssue::Language,\n+                &format!(\"statements in {}s are unstable\", self.mode),\n             );\n             if self.tcx.sess.teach(&err.get_code().unwrap()) {\n                 err.note(\"Blocks in constants may only contain items (such as constant, function \\\n@@ -365,7 +360,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n                 TerminatorKind::FalseUnwind { .. } => None,\n \n                 TerminatorKind::Return => {\n-                    if self.tcx.sess.features_untracked().const_let {\n+                    if !self.tcx.sess.features_untracked().const_let {\n                         // Check for unused values. This usually means\n                         // there are extra statements in the AST.\n                         for temp in mir.temps_iter() {\n@@ -466,10 +461,10 @@ impl<'a, 'tcx> Visitor<'tcx> for Qualifier<'a, 'tcx, 'tcx> {\n                 self.not_const();\n             }\n             LocalKind::Var if !self.tcx.sess.features_untracked().const_let => {\n-                if self.mode != Mode::Fn && self.span.allows_unstable() {\n+                if self.mode != Mode::Fn {\n                     emit_feature_err(&self.tcx.sess.parse_sess, \"const_let\",\n                                     self.span, GateIssue::Language,\n-                                    \"let bindings in const fn are unstable\");\n+                                    &format!(\"let bindings in {}s are unstable\",self.mode));\n                 }\n                 self.add(Qualif::NOT_CONST);\n             }\n@@ -1105,15 +1100,11 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                 // Avoid a generic error for other uses of arguments.\n                 if self.qualif.intersects(Qualif::FN_ARGUMENT) {\n                     let decl = &self.mir.local_decls[index];\n-                    if decl.source_info.span.allows_unstable() {\n-                        emit_feature_err(&self.tcx.sess.parse_sess, \"const_let\",\n-                                        decl.source_info.span, GateIssue::Language,\n-                                        \"locals and patterns in const fn are unstable\");\n-                    }\n-                    let mut err = struct_span_err!(\n-                        self.tcx.sess,\n+                    let mut err = feature_err(\n+                        &self.tcx.sess.parse_sess,\n+                        \"const_let\",\n                         decl.source_info.span,\n-                        E0022,\n+                        GateIssue::Language,\n                         \"arguments of constant functions can only be immutable by-value bindings\"\n                     );\n                     if self.tcx.sess.teach(&err.get_code().unwrap()) {"}, {"sha": "f80d55cb342676dd96ec04aef47d924f65a0300f", "filename": "src/test/compile-fail/const-block-non-item-statement-2.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement-2.rs?ref=8a5eb689583163eef39e6b595506341ebfe19633", "patch": "@@ -9,18 +9,20 @@\n // except according to those terms.\n \n const A: usize = { 1; 2 };\n-//~^ ERROR: blocks in constants are limited to items and tail expressions\n+//~^ ERROR statements in constants are unstable\n \n const B: usize = { { } 2 };\n-//~^ ERROR: blocks in constants are limited to items and tail expressions\n+//~^ ERROR statements in constants are unstable\n \n macro_rules! foo {\n-    () => (()) //~ ERROR: blocks in constants are limited to items and tail expressions\n+    () => (()) //~ ERROR statements in constants are unstable\n }\n const C: usize = { foo!(); 2 };\n \n const D: usize = { let x = 4; 2 };\n-//~^ ERROR: blocks in constants are limited to items and tail expressions\n-//~^^ ERROR: blocks in constants are limited to items and tail expressions\n+//~^ ERROR let bindings in constants are unstable\n+//~| ERROR statements in constants are unstable\n+//~| ERROR let bindings in constants are unstable\n+//~| ERROR statements in constants are unstable\n \n pub fn main() {}"}, {"sha": "cfa4b778dde80b48324cb17de35c5eebdaa18610", "filename": "src/test/compile-fail/const-block-non-item-statement-3.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement-3.rs?ref=8a5eb689583163eef39e6b595506341ebfe19633", "patch": "@@ -9,7 +9,9 @@\n // except according to those terms.\n \n type Array = [u32; {  let x = 2; 5 }];\n-//~^ ERROR: blocks in constants are limited to items and tail expressions\n-//~^^ ERROR: blocks in constants are limited to items and tail expressions\n+//~^ ERROR let bindings in constants are unstable\n+//~| ERROR statements in constants are unstable\n+//~| ERROR let bindings in constants are unstable\n+//~| ERROR statements in constants are unstable\n \n pub fn main() {}"}, {"sha": "f974a24c26f72f40511317056bc0c089e6a5c8f3", "filename": "src/test/compile-fail/const-block-non-item-statement.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-block-non-item-statement.rs?ref=8a5eb689583163eef39e6b595506341ebfe19633", "patch": "@@ -10,8 +10,10 @@\n \n enum Foo {\n     Bar = { let x = 1; 3 }\n-    //~^ ERROR: blocks in constants are limited to items and tail expressions\n-    //~^^ ERROR: blocks in constants are limited to items and tail expressions\n+    //~^ ERROR let bindings in constants are unstable\n+    //~| ERROR statements in constants are unstable\n+    //~| ERROR let bindings in constants are unstable\n+    //~| ERROR statements in constants are unstable\n }\n \n pub fn main() {}"}, {"sha": "e239bd701c57104b7db5d8b3c6f4b1fd2f5c58f0", "filename": "src/test/compile-fail/const-fn-destructuring-arg.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fcompile-fail%2Fconst-fn-destructuring-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fcompile-fail%2Fconst-fn-destructuring-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-destructuring-arg.rs?ref=8a5eb689583163eef39e6b595506341ebfe19633", "patch": "@@ -8,16 +8,20 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// test that certain things are disallowed in const fn signatures\n+// test that certain things are disallowed in constant functionssignatures\n \n #![feature(const_fn)]\n \n // no destructuring\n const fn i((\n-            a, //~ ERROR: E0022\n-            b  //~ ERROR: E0022\n+            a,\n+            //~^ ERROR arguments of constant functions can only be immutable by-value bindings\n+            b\n+            //~^ ERROR arguments of constant functions can only be immutable by-value bindings\n            ): (u32, u32)) -> u32 {\n     a + b\n+    //~^ ERROR let bindings in constant functions are unstable\n+    //~| ERROR let bindings in constant functions are unstable\n }\n \n fn main() {}"}, {"sha": "d985bae1f247706d99279ddcd4877741863435dc", "filename": "src/test/compile-fail/const-fn-not-safe-for-const.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-safe-for-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-safe-for-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fconst-fn-not-safe-for-const.rs?ref=8a5eb689583163eef39e6b595506341ebfe19633", "patch": "@@ -38,9 +38,15 @@ const fn get_Y_addr() -> &'static u32 {\n }\n \n const fn get() -> u32 {\n-    let x = 22; //~ ERROR E0016\n-    let y = 44; //~ ERROR E0016\n+    let x = 22;\n+    //~^ ERROR let bindings in constant functions are unstable\n+    //~| ERROR statements in constant functions are unstable\n+    let y = 44;\n+    //~^ ERROR let bindings in constant functions are unstable\n+    //~| ERROR statements in constant functions are unstable\n     x + y\n+    //~^ ERROR let bindings in constant functions are unstable\n+    //~| ERROR let bindings in constant functions are unstable\n }\n \n fn main() {"}, {"sha": "7194c159c1e98a79409b7c11ff291cc36f66c68d", "filename": "src/test/compile-fail/issue-18118.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fcompile-fail%2Fissue-18118.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fcompile-fail%2Fissue-18118.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18118.rs?ref=8a5eb689583163eef39e6b595506341ebfe19633", "patch": "@@ -10,9 +10,12 @@\n \n pub fn main() {\n     const z: &'static isize = {\n-        //~^ ERROR blocks in constants are limited to items and tail expressions\n+        //~^ ERROR let bindings in constants are unstable\n+        //~| ERROR statements in constants are unstable\n         let p = 3;\n-        //~^ ERROR blocks in constants are limited to items and tail expressions\n+        //~^ ERROR let bindings in constants are unstable\n+        //~| ERROR statements in constants are unstable\n         &p //~ ERROR `p` does not live long enough\n+        //~^ ERROR let bindings in constants are unstable\n     };\n }"}, {"sha": "af1f6ef5ed4ac041b9390958671d159c4593f269", "filename": "src/test/compile-fail/issue-37550.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fcompile-fail%2Fissue-37550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fcompile-fail%2Fissue-37550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-37550.rs?ref=8a5eb689583163eef39e6b595506341ebfe19633", "patch": "@@ -11,8 +11,12 @@\n #![feature(const_fn)]\n \n const fn x() {\n-    let t = true; //~ ERROR blocks in constant functions are limited to items and tail expressions\n-    let x = || t; //~ ERROR blocks in constant functions are limited to items and tail expressions\n+    let t = true;\n+    //~^ ERROR let bindings in constant functions are unstable\n+    //~| ERROR statements in constant functions are unstable\n+    let x = || t;\n+    //~^ ERROR let bindings in constant functions are unstable\n+    //~| ERROR statements in constant functions are unstable\n }\n \n fn main() {}"}, {"sha": "2b223bac8e67b7d849f19e6387a916c404878107", "filename": "src/test/compile-fail/issue32829.rs", "status": "modified", "additions": 14, "deletions": 11, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fcompile-fail%2Fissue32829.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fcompile-fail%2Fissue32829.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue32829.rs?ref=8a5eb689583163eef39e6b595506341ebfe19633", "patch": "@@ -14,15 +14,16 @@\n \n const bad : u32 = {\n     {\n-        5; //~ ERROR: blocks in constants are limited to items and tail expressions\n+        5;\n+        //~^ ERROR statements in constants are unstable\n         0\n     }\n };\n \n const bad_two : u32 = {\n     {\n         invalid();\n-        //~^ ERROR: blocks in constants are limited to items and tail expressions\n+        //~^ ERROR statements in constants are unstable\n         //~^^ ERROR: calls in constants are limited to constant functions, tuple structs and tuple variants\n         0\n     }\n@@ -31,55 +32,57 @@ const bad_two : u32 = {\n const bad_three : u32 = {\n     {\n         valid();\n-        //~^ ERROR: blocks in constants are limited to items and tail expressions\n+        //~^ ERROR statements in constants are unstable\n         0\n     }\n };\n \n static bad_four : u32 = {\n     {\n-        5; //~ ERROR: blocks in statics are limited to items and tail expressions\n+        5;\n+        //~^ ERROR statements in statics are unstable\n         0\n     }\n };\n \n static bad_five : u32 = {\n     {\n         invalid();\n-        //~^ ERROR: blocks in statics are limited to items and tail expressions\n-        //~^^ ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n+        //~^ ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n+        //~| ERROR statements in statics are unstable\n         0\n     }\n };\n \n static bad_six : u32 = {\n     {\n         valid();\n-        //~^ ERROR: blocks in statics are limited to items and tail expressions\n+        //~^ ERROR statements in statics are unstable\n         0\n     }\n };\n \n static mut bad_seven : u32 = {\n     {\n-        5; //~ ERROR: blocks in statics are limited to items and tail expressions\n+        5;\n+        //~^ ERROR statements in statics are unstable\n         0\n     }\n };\n \n static mut bad_eight : u32 = {\n     {\n         invalid();\n-        //~^ ERROR: blocks in statics are limited to items and tail expressions\n-        //~^^ ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n+        //~^ ERROR statements in statics are unstable\n+        //~| ERROR: calls in statics are limited to constant functions, tuple structs and tuple variants\n         0\n     }\n };\n \n static mut bad_nine : u32 = {\n     {\n         valid();\n-        //~^ ERROR: blocks in statics are limited to items and tail expressions\n+        //~^ ERROR statements in statics are unstable\n         0\n     }\n };"}, {"sha": "d22c94074fba95efa8b904ec7754ee5107f9d8b6", "filename": "src/test/run-pass/ctfe/const-fn-destructuring-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-fn-destructuring-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-fn-destructuring-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fctfe%2Fconst-fn-destructuring-arg.rs?ref=8a5eb689583163eef39e6b595506341ebfe19633", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// test that certain things are disallowed in const fn signatures\n+// test that certain things are disallowed in constant functionssignatures\n \n #![feature(const_fn, const_let)]\n "}, {"sha": "602d4da24f3836c6760463224762b24e0ccaa6b8", "filename": "src/test/ui/const-eval/const_let.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fui%2Fconst-eval%2Fconst_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fui%2Fconst-eval%2Fconst_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_let.rs?ref=8a5eb689583163eef39e6b595506341ebfe19633", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_let)]\n+\n+fn main() {}\n+\n+struct FakeNeedsDrop;\n+\n+impl Drop for FakeNeedsDrop {\n+    fn drop(&mut self) {}\n+}\n+\n+// ok\n+const X: FakeNeedsDrop = { let x = FakeNeedsDrop; x };\n+\n+// error\n+const Y: FakeNeedsDrop = { let mut x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n+//~^ ERROR constant contains unimplemented expression type\n+\n+// error\n+const Z: () = { let mut x = None; x = Some(FakeNeedsDrop); };\n+//~^ ERROR constant contains unimplemented expression type"}, {"sha": "86e3482fda6b949b6c270ad4f48c4c005851e581", "filename": "src/test/ui/const-eval/const_let.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fui%2Fconst-eval%2Fconst_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fui%2Fconst-eval%2Fconst_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_let.stderr?ref=8a5eb689583163eef39e6b595506341ebfe19633", "patch": "@@ -0,0 +1,15 @@\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const_let.rs:25:55\n+   |\n+LL | const Y: FakeNeedsDrop = { let mut x = FakeNeedsDrop; x = FakeNeedsDrop; x };\n+   |                                                       ^\n+\n+error[E0019]: constant contains unimplemented expression type\n+  --> $DIR/const_let.rs:29:35\n+   |\n+LL | const Z: () = { let mut x = None; x = Some(FakeNeedsDrop); };\n+   |                                   ^\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0019`."}, {"sha": "17dc9f94fe19c80c4ed26e877e121b5b34e43c3e", "filename": "src/test/ui/const-fn-error.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fui%2Fconst-fn-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fui%2Fconst-fn-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.rs?ref=8a5eb689583163eef39e6b595506341ebfe19633", "patch": "@@ -14,7 +14,8 @@ const X : usize = 2;\n \n const fn f(x: usize) -> usize {\n     let mut sum = 0;\n-    //~^ ERROR E0016\n+    //~^ let bindings in constant functions are unstable\n+    //~| statements in constant functions are unstable\n     for i in 0..x {\n         //~^ ERROR E0015\n         //~| ERROR E0019"}, {"sha": "29edc2756afff2fa1978f8bd26c7f154111abef6", "filename": "src/test/ui/const-fn-error.stderr", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fui%2Fconst-fn-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-fn-error.stderr?ref=8a5eb689583163eef39e6b595506341ebfe19633", "patch": "@@ -1,23 +1,33 @@\n-error[E0016]: blocks in constant functions are limited to items and tail expressions\n+error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n   --> $DIR/const-fn-error.rs:16:19\n    |\n LL |     let mut sum = 0;\n    |                   ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constant functions are unstable (see issue #48821)\n+  --> $DIR/const-fn-error.rs:16:19\n+   |\n+LL |     let mut sum = 0;\n+   |                   ^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n \n error[E0015]: calls in constant functions are limited to constant functions, tuple structs and tuple variants\n-  --> $DIR/const-fn-error.rs:18:14\n+  --> $DIR/const-fn-error.rs:19:14\n    |\n LL |     for i in 0..x {\n    |              ^^^^\n \n error[E0019]: constant function contains unimplemented expression type\n-  --> $DIR/const-fn-error.rs:18:14\n+  --> $DIR/const-fn-error.rs:19:14\n    |\n LL |     for i in 0..x {\n    |              ^^^^\n \n error[E0080]: constant evaluation error\n-  --> $DIR/const-fn-error.rs:18:14\n+  --> $DIR/const-fn-error.rs:19:14\n    |\n LL |     for i in 0..x {\n    |              ^^^^ calling non-const fn `<I as std::iter::IntoIterator><std::ops::Range<usize>>::into_iter`\n@@ -26,12 +36,12 @@ LL |     let a : [i32; f(X)];\n    |                   ---- inside call to `f`\n    |\n note: for constant expression here\n-  --> $DIR/const-fn-error.rs:29:13\n+  --> $DIR/const-fn-error.rs:30:13\n    |\n LL |     let a : [i32; f(X)];\n    |             ^^^^^^^^^^^\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 5 previous errors\n \n-Some errors occurred: E0015, E0016, E0019, E0080.\n+Some errors occurred: E0015, E0019, E0080, E0658.\n For more information about an error, try `rustc --explain E0015`."}, {"sha": "05d02e62bc8710d44876e3286780808c2eb68538", "filename": "src/test/ui/feature-gate-const_let.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fui%2Ffeature-gate-const_let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fui%2Ffeature-gate-const_let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-const_let.rs?ref=8a5eb689583163eef39e6b595506341ebfe19633", "patch": "@@ -13,7 +13,9 @@\n #![feature(const_fn)]\n \n const fn foo() -> usize {\n-    let x = 42; //~ ERROR blocks in constant functions are limited to items and tail expressions\n+    let x = 42;\n+    //~^ ERROR statements in constant functions are unstable\n+    //~| ERROR: let bindings in constant functions are unstable\n     42\n }\n "}, {"sha": "6a7f6255678ff2ac117e1ec1481a7107accfe926", "filename": "src/test/ui/feature-gate-const_let.stderr", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fui%2Ffeature-gate-const_let.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8a5eb689583163eef39e6b595506341ebfe19633/src%2Ftest%2Fui%2Ffeature-gate-const_let.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-const_let.stderr?ref=8a5eb689583163eef39e6b595506341ebfe19633", "patch": "@@ -1,9 +1,19 @@\n-error[E0016]: blocks in constant functions are limited to items and tail expressions\n+error[E0658]: let bindings in constant functions are unstable (see issue #48821)\n   --> $DIR/feature-gate-const_let.rs:16:13\n    |\n-LL |     let x = 42; //~ ERROR blocks in constant functions are limited to items and tail expressions\n+LL |     let x = 42;\n    |             ^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n+\n+error[E0658]: statements in constant functions are unstable (see issue #48821)\n+  --> $DIR/feature-gate-const_let.rs:16:13\n+   |\n+LL |     let x = 42;\n+   |             ^^\n+   |\n+   = help: add #![feature(const_let)] to the crate attributes to enable\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0016`.\n+For more information about this error, try `rustc --explain E0658`."}]}