{"sha": "092255976862c1f0121bb4446acd38336a860c4f", "node_id": "C_kwDOAAsO6NoAKDA5MjI1NTk3Njg2MmMxZjAxMjFiYjQ0NDZhY2QzODMzNmE4NjBjNGY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-03T17:31:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-03T17:31:45Z"}, "message": "Auto merge of #102627 - matthiaskrgr:rollup-2xtrqkw, r=matthiaskrgr\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #102439 (rustdoc: re-sugar more cross-crate trait bounds)\n - #102569 (Improve `FromStr` example)\n - #102597 (Avoid ICE in printing RPITIT type)\n - #102607 (Improve documentation of `slice::{from_ptr_range, from_ptr_range_mut}`)\n - #102613 (Fix ICE #101739)\n - #102615 (Cleanup some error code explanations)\n - #102617 (`HirId` for `deferred_transmute_checks`)\n - #102620 (Migrate `.stab` elements style to CSS variables)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "fe9a61e85fa54fc1c93460fbbdced332c112e7b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe9a61e85fa54fc1c93460fbbdced332c112e7b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/092255976862c1f0121bb4446acd38336a860c4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/092255976862c1f0121bb4446acd38336a860c4f", "html_url": "https://github.com/rust-lang/rust/commit/092255976862c1f0121bb4446acd38336a860c4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/092255976862c1f0121bb4446acd38336a860c4f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33d351972ad9c43bc30e87edd2765de9a4898629", "url": "https://api.github.com/repos/rust-lang/rust/commits/33d351972ad9c43bc30e87edd2765de9a4898629", "html_url": "https://github.com/rust-lang/rust/commit/33d351972ad9c43bc30e87edd2765de9a4898629"}, {"sha": "d32921340c8bd37feed11f442e936e21c8dc312c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d32921340c8bd37feed11f442e936e21c8dc312c", "html_url": "https://github.com/rust-lang/rust/commit/d32921340c8bd37feed11f442e936e21c8dc312c"}], "stats": {"total": 411, "additions": 325, "deletions": 86}, "files": [{"sha": "1cb214531e854cd5a2a2a38e77cec0f01b9f4ed5", "filename": "compiler/rustc_error_codes/src/error_codes/E0045.md", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0045.md", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0045.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0045.md?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -3,9 +3,7 @@ Variadic parameters have been used on a non-C ABI function.\n Erroneous code example:\n \n ```compile_fail,E0045\n-#![feature(unboxed_closures)]\n-\n-extern \"rust-call\" {\n+extern \"Rust\" {\n     fn foo(x: u8, ...); // error!\n }\n ```"}, {"sha": "5cbe2a188b02264eb8803471887ad20db31180d7", "filename": "compiler/rustc_error_codes/src/error_codes/E0092.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0092.md", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0092.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0092.md?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -19,6 +19,6 @@ functions are defined in `compiler/rustc_codegen_llvm/src/intrinsic.rs` and in\n #![feature(intrinsics)]\n \n extern \"rust-intrinsic\" {\n-    fn atomic_fence(); // ok!\n+    fn atomic_fence_seqcst(); // ok!\n }\n ```"}, {"sha": "643990ef1c75d59f6719dd5cb8ed78aeb38f1c13", "filename": "compiler/rustc_error_codes/src/error_codes/E0161.md", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0161.md", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0161.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0161.md?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -3,7 +3,6 @@ A value was moved whose size was not known at compile time.\n Erroneous code example:\n \n ```compile_fail,E0161\n-#![feature(box_syntax)]\n trait Bar {\n     fn f(self);\n }\n@@ -13,7 +12,7 @@ impl Bar for i32 {\n }\n \n fn main() {\n-    let b: Box<dyn Bar> = box (0 as i32);\n+    let b: Box<dyn Bar> = Box::new(0i32);\n     b.f();\n     // error: cannot move a value of type dyn Bar: the size of dyn Bar cannot\n     //        be statically determined\n@@ -27,8 +26,6 @@ either `&x` or `&mut x`. Since a reference has a fixed size, this lets you move\n it around as usual. Example:\n \n ```\n-#![feature(box_syntax)]\n-\n trait Bar {\n     fn f(&self);\n }\n@@ -38,7 +35,7 @@ impl Bar for i32 {\n }\n \n fn main() {\n-    let b: Box<dyn Bar> = box (0 as i32);\n+    let b: Box<dyn Bar> = Box::new(0i32);\n     b.f();\n     // ok!\n }"}, {"sha": "e7e6fb682566eb8a6430a97a6b93c6738c76dc56", "filename": "compiler/rustc_error_codes/src/error_codes/E0579.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0579.md", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0579.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0579.md?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -8,9 +8,9 @@ Erroneous code example:\n fn main() {\n     match 5u32 {\n         // This range is ok, albeit pointless.\n-        1 .. 2 => {}\n+        1..2 => {}\n         // This range is empty, and the compiler can tell.\n-        5 .. 5 => {} // error!\n+        5..5 => {} // error!\n     }\n }\n ```"}, {"sha": "3ba3ed10e5c6272b5fb774c48e0aa739c2878b5c", "filename": "compiler/rustc_error_codes/src/error_codes/E0622.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0622.md", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0622.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0622.md?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -5,7 +5,7 @@ Erroneous code example:\n ```compile_fail,E0622\n #![feature(intrinsics)]\n extern \"rust-intrinsic\" {\n-    pub static breakpoint : fn(); // error: intrinsic must be a function\n+    pub static breakpoint: fn(); // error: intrinsic must be a function\n }\n \n fn main() { unsafe { breakpoint(); } }"}, {"sha": "a19d3ef96e9260f81c268ed243a0ed77da7fef91", "filename": "compiler/rustc_error_codes/src/error_codes/E0743.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0743.md", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0743.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0743.md?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -3,8 +3,6 @@ The C-variadic type `...` has been nested inside another type.\n Erroneous code example:\n \n ```compile_fail,E0743\n-#![feature(c_variadic)]\n-\n fn foo2(x: u8, y: &...) {} // error!\n ```\n "}, {"sha": "b9459887c4617d460673bdc39b88aef63a6bf034", "filename": "compiler/rustc_hir_analysis/src/check/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fexpr.rs?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -542,7 +542,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // been resolved or we errored. This is important as we can only check transmute\n                 // on concrete types, but the output type may not be known yet (it would only\n                 // be known if explicitly specified via turbofish).\n-                self.deferred_transmute_checks.borrow_mut().push((from, to, expr.span));\n+                self.deferred_transmute_checks.borrow_mut().push((from, to, expr.hir_id));\n             }\n             if !tcx.features().unsized_fn_params {\n                 // We want to remove some Sized bounds from std functions,"}, {"sha": "44d7973d6320463cc5739a53adfbe39e35345b34", "filename": "compiler/rustc_hir_analysis/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -50,8 +50,8 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub(in super::super) fn check_transmutes(&self) {\n         let mut deferred_transmute_checks = self.deferred_transmute_checks.borrow_mut();\n         debug!(\"FnCtxt::check_transmutes: {} deferred checks\", deferred_transmute_checks.len());\n-        for (from, to, span) in deferred_transmute_checks.drain(..) {\n-            self.check_transmute(span, from, to);\n+        for (from, to, hir_id) in deferred_transmute_checks.drain(..) {\n+            self.check_transmute(from, to, hir_id);\n         }\n     }\n "}, {"sha": "2546227e138583fbb625b8d9fd51d45fe4d598cb", "filename": "compiler/rustc_hir_analysis/src/check/inherited.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Finherited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Finherited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Finherited.rs?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -55,7 +55,7 @@ pub struct Inherited<'a, 'tcx> {\n \n     pub(super) deferred_cast_checks: RefCell<Vec<super::cast::CastCheck<'tcx>>>,\n \n-    pub(super) deferred_transmute_checks: RefCell<Vec<(Ty<'tcx>, Ty<'tcx>, Span)>>,\n+    pub(super) deferred_transmute_checks: RefCell<Vec<(Ty<'tcx>, Ty<'tcx>, hir::HirId)>>,\n \n     pub(super) deferred_asm_checks: RefCell<Vec<(&'tcx hir::InlineAsm<'tcx>, hir::HirId)>>,\n "}, {"sha": "13a800304158b269dddade5a7566e958085a2f6a", "filename": "compiler/rustc_hir_analysis/src/check/intrinsicck.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -1,3 +1,4 @@\n+use hir::HirId;\n use rustc_ast::InlineAsmTemplatePiece;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n@@ -6,7 +7,7 @@ use rustc_index::vec::Idx;\n use rustc_middle::ty::layout::{LayoutError, SizeSkeleton};\n use rustc_middle::ty::{self, Article, FloatTy, IntTy, Ty, TyCtxt, TypeVisitable, UintTy};\n use rustc_session::lint;\n-use rustc_span::{Span, Symbol, DUMMY_SP};\n+use rustc_span::{Symbol, DUMMY_SP};\n use rustc_target::abi::{Pointer, VariantIdx};\n use rustc_target::asm::{InlineAsmReg, InlineAsmRegClass, InlineAsmRegOrRegClass, InlineAsmType};\n \n@@ -40,11 +41,13 @@ fn unpack_option_like<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n }\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n-    pub fn check_transmute(&self, span: Span, from: Ty<'tcx>, to: Ty<'tcx>) {\n+    pub fn check_transmute(&self, from: Ty<'tcx>, to: Ty<'tcx>, hir_id: HirId) {\n+        let tcx = self.tcx;\n+        let span = tcx.hir().span(hir_id);\n         let convert = |ty: Ty<'tcx>| {\n             let ty = self.resolve_vars_if_possible(ty);\n-            let ty = self.tcx.normalize_erasing_regions(self.param_env, ty);\n-            (SizeSkeleton::compute(ty, self.tcx, self.param_env), ty)\n+            let ty = tcx.normalize_erasing_regions(self.param_env, ty);\n+            (SizeSkeleton::compute(ty, tcx, self.param_env), ty)\n         };\n         let (sk_from, from) = convert(from);\n         let (sk_to, to) = convert(to);\n@@ -57,9 +60,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // Special-case transmuting from `typeof(function)` and\n             // `Option<typeof(function)>` to present a clearer error.\n-            let from = unpack_option_like(self.tcx, from);\n-            if let (&ty::FnDef(..), SizeSkeleton::Known(size_to)) = (from.kind(), sk_to) && size_to == Pointer.size(&self.tcx) {\n-                struct_span_err!(self.tcx.sess, span, E0591, \"can't transmute zero-sized type\")\n+            let from = unpack_option_like(tcx, from);\n+            if let (&ty::FnDef(..), SizeSkeleton::Known(size_to)) = (from.kind(), sk_to) && size_to == Pointer.size(&tcx) {\n+                struct_span_err!(tcx.sess, span, E0591, \"can't transmute zero-sized type\")\n                     .note(&format!(\"source type: {from}\"))\n                     .note(&format!(\"target type: {to}\"))\n                     .help(\"cast with `as` to a pointer instead\")\n@@ -83,7 +86,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         };\n \n         let mut err = struct_span_err!(\n-            self.tcx.sess,\n+            tcx.sess,\n             span,\n             E0512,\n             \"cannot transmute between types of different sizes, \\"}, {"sha": "82d7c0a97cb6aa2038c90cf1ffd4b2ec777816a6", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -927,7 +927,7 @@ pub trait PrettyPrinter<'tcx>:\n                         // unless we can find out what generator return type it comes from.\n                         let term = if let Some(ty) = term.skip_binder().ty()\n                             && let ty::Projection(proj) = ty.kind()\n-                            && let assoc = tcx.associated_item(proj.item_def_id)\n+                            && let Some(assoc) = tcx.opt_associated_item(proj.item_def_id)\n                             && assoc.trait_container(tcx) == tcx.lang_items().gen_trait()\n                             && assoc.name == rustc_span::sym::Return\n                         {"}, {"sha": "5c8a76401d23397ce84ef1fcd8383f3e76e6413f", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -11,9 +11,10 @@ use rustc_hir::lang_items::LangItem;\n use rustc_index::bit_set::GrowableBitSet;\n use rustc_infer::infer::InferOk;\n use rustc_infer::infer::LateBoundRegionConversionTime::HigherRankedType;\n-use rustc_middle::ty::{self, GenericParamDefKind, Ty, TyCtxt};\n-use rustc_middle::ty::{GenericArg, GenericArgKind, InternalSubsts, SubstsRef};\n-use rustc_middle::ty::{ToPolyTraitRef, ToPredicate};\n+use rustc_middle::ty::{\n+    self, GenericArg, GenericArgKind, GenericParamDefKind, InternalSubsts, SubstsRef,\n+    ToPolyTraitRef, ToPredicate, Ty, TyCtxt,\n+};\n use rustc_span::def_id::DefId;\n \n use crate::traits::project::{normalize_with_depth, normalize_with_depth_to};\n@@ -289,8 +290,10 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         let scope = type_at(2).skip_binder();\n \n-        let assume =\n-            rustc_transmute::Assume::from_const(self.infcx.tcx, obligation.param_env, const_at(3));\n+        let Some(assume) =\n+            rustc_transmute::Assume::from_const(self.infcx.tcx, obligation.param_env, const_at(3)) else {\n+                return Err(Unimplemented);\n+            };\n \n         let cause = obligation.cause.clone();\n "}, {"sha": "51f2eb8606a7f3d96b5612bf63bea12298e99715", "filename": "compiler/rustc_transmute/src/lib.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/compiler%2Frustc_transmute%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_transmute%2Fsrc%2Flib.rs?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -115,18 +115,23 @@ mod rustc {\n             tcx: TyCtxt<'tcx>,\n             param_env: ParamEnv<'tcx>,\n             c: Const<'tcx>,\n-        ) -> Self {\n+        ) -> Option<Self> {\n             use rustc_middle::ty::ScalarInt;\n             use rustc_middle::ty::TypeVisitable;\n             use rustc_span::symbol::sym;\n \n             let c = c.eval(tcx, param_env);\n \n             if let Some(err) = c.error_reported() {\n-                return Self { alignment: true, lifetimes: true, safety: true, validity: true };\n+                return Some(Self {\n+                    alignment: true,\n+                    lifetimes: true,\n+                    safety: true,\n+                    validity: true,\n+                });\n             }\n \n-            let adt_def = c.ty().ty_adt_def().expect(\"The given `Const` must be an ADT.\");\n+            let adt_def = c.ty().ty_adt_def()?;\n \n             assert_eq!(\n                 tcx.require_lang_item(LangItem::TransmuteOpts, None),\n@@ -148,12 +153,12 @@ mod rustc {\n                 fields[field_idx].unwrap_leaf() == ScalarInt::TRUE\n             };\n \n-            Self {\n+            Some(Self {\n                 alignment: get_field(sym::alignment),\n                 lifetimes: get_field(sym::lifetimes),\n                 safety: get_field(sym::safety),\n                 validity: get_field(sym::validity),\n-            }\n+            })\n         }\n     }\n }"}, {"sha": "3c5abd215a4b76ec244fd6e03decb8543d8b605b", "filename": "library/core/src/slice/raw.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fraw.rs?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -188,6 +188,10 @@ pub const fn from_mut<T>(s: &mut T) -> &mut [T] {\n ///\n /// Note that a range created from [`slice::as_ptr_range`] fulfills these requirements.\n ///\n+/// # Panics\n+///\n+/// This function panics if `T` is a Zero-Sized Type (\u201cZST\u201d).\n+///\n /// # Caveat\n ///\n /// The lifetime for the returned slice is inferred from its usage. To\n@@ -219,9 +223,15 @@ pub const unsafe fn from_ptr_range<'a, T>(range: Range<*const T>) -> &'a [T] {\n     unsafe { from_raw_parts(range.start, range.end.sub_ptr(range.start)) }\n }\n \n-/// Performs the same functionality as [`from_ptr_range`], except that a\n+/// Forms a mutable slice from a pointer range.\n+///\n+/// This is the same functionality as [`from_ptr_range`], except that a\n /// mutable slice is returned.\n ///\n+/// This function is useful for interacting with foreign interfaces which\n+/// use two pointers to refer to a range of elements in memory, as is\n+/// common in C++.\n+///\n /// # Safety\n ///\n /// Behavior is undefined if any of the following conditions are violated:\n@@ -247,6 +257,18 @@ pub const unsafe fn from_ptr_range<'a, T>(range: Range<*const T>) -> &'a [T] {\n ///\n /// Note that a range created from [`slice::as_mut_ptr_range`] fulfills these requirements.\n ///\n+/// # Panics\n+///\n+/// This function panics if `T` is a Zero-Sized Type (\u201cZST\u201d).\n+///\n+/// # Caveat\n+///\n+/// The lifetime for the returned slice is inferred from its usage. To\n+/// prevent accidental misuse, it's suggested to tie the lifetime to whichever\n+/// source lifetime is safe in the context, such as by providing a helper\n+/// function taking the lifetime of a host value for the slice, or by explicit\n+/// annotation.\n+///\n /// # Examples\n ///\n /// ```"}, {"sha": "d3ed811b1575bc03e221a7086fc4d4507f9d36a2", "filename": "library/core/src/str/traits.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -507,26 +507,28 @@ unsafe impl const SliceIndex<str> for ops::RangeToInclusive<usize> {\n ///\n /// ```\n /// use std::str::FromStr;\n-/// use std::num::ParseIntError;\n ///\n /// #[derive(Debug, PartialEq)]\n /// struct Point {\n ///     x: i32,\n ///     y: i32\n /// }\n ///\n+/// #[derive(Debug, PartialEq, Eq)]\n+/// struct ParsePointError;\n+///\n /// impl FromStr for Point {\n-///     type Err = ParseIntError;\n+///     type Err = ParsePointError;\n ///\n ///     fn from_str(s: &str) -> Result<Self, Self::Err> {\n ///         let (x, y) = s\n ///             .strip_prefix('(')\n ///             .and_then(|s| s.strip_suffix(')'))\n ///             .and_then(|s| s.split_once(','))\n-///             .unwrap();\n+///             .ok_or(ParsePointError)?;\n ///\n-///         let x_fromstr = x.parse::<i32>()?;\n-///         let y_fromstr = y.parse::<i32>()?;\n+///         let x_fromstr = x.parse::<i32>().map_err(|_| ParsePointError)?;\n+///         let y_fromstr = y.parse::<i32>().map_err(|_| ParsePointError)?;\n ///\n ///         Ok(Point { x: x_fromstr, y: y_fromstr })\n ///     }\n@@ -538,6 +540,8 @@ unsafe impl const SliceIndex<str> for ops::RangeToInclusive<usize> {\n /// // Implicit calls, through parse\n /// assert_eq!(\"(1,2)\".parse(), expected);\n /// assert_eq!(\"(1,2)\".parse::<Point>(), expected);\n+/// // Invalid input string\n+/// assert!(Point::from_str(\"(1 2)\").is_err());\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait FromStr: Sized {"}, {"sha": "c61175ecebf36ef8312d13634eb2585c466ecf2c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -1176,6 +1176,15 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n             }\n \n             if let ty::TraitContainer = assoc_item.container {\n+                // FIXME(fmease): `tcx.explicit_item_bounds` does not contain the bounds of GATs,\n+                //                e.g. the bounds `Copy`, `Display` & (implicitly) `Sized` in\n+                //                `type Assoc<T: Copy> where T: Display`. This also means that we\n+                //                later incorrectly render `where T: ?Sized`.\n+                //\n+                //                The result of `tcx.explicit_predicates_of` *does* contain them but\n+                //                it does not contain the other bounds / predicates we need.\n+                //                Either merge those two interned lists somehow or refactor\n+                //                `clean_ty_generics` to call `explicit_item_bounds` by itself.\n                 let bounds = tcx.explicit_item_bounds(assoc_item.def_id);\n                 let predicates = ty::GenericPredicates { parent: None, predicates: bounds };\n                 let mut generics ="}, {"sha": "f82ea8969ab4461f296d2fd59f859b671cedd36b", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -14,7 +14,6 @@\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n-use rustc_span::Symbol;\n \n use crate::clean;\n use crate::clean::GenericArgs as PP;\n@@ -26,21 +25,17 @@ pub(crate) fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n     //\n     // We use `FxIndexMap` so that the insertion order is preserved to prevent messing up to\n     // the order of the generated bounds.\n-    let mut params: FxIndexMap<Symbol, (Vec<_>, Vec<_>)> = FxIndexMap::default();\n+    let mut tybounds = FxIndexMap::default();\n     let mut lifetimes = Vec::new();\n     let mut equalities = Vec::new();\n-    let mut tybounds = Vec::new();\n \n     for clause in clauses {\n         match clause {\n-            WP::BoundPredicate { ty, bounds, bound_params } => match ty {\n-                clean::Generic(s) => {\n-                    let (b, p) = params.entry(s).or_default();\n-                    b.extend(bounds);\n-                    p.extend(bound_params);\n-                }\n-                t => tybounds.push((t, (bounds, bound_params))),\n-            },\n+            WP::BoundPredicate { ty, bounds, bound_params } => {\n+                let (b, p): &mut (Vec<_>, Vec<_>) = tybounds.entry(ty).or_default();\n+                b.extend(bounds);\n+                p.extend(bound_params);\n+            }\n             WP::RegionPredicate { lifetime, bounds } => {\n                 lifetimes.push((lifetime, bounds));\n             }\n@@ -49,14 +44,17 @@ pub(crate) fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n     }\n \n     // Look for equality predicates on associated types that can be merged into\n-    // general bound predicates\n+    // general bound predicates.\n     equalities.retain(|&(ref lhs, ref rhs)| {\n-        let Some((self_, trait_did, name)) = lhs.projection() else {\n-            return true;\n-        };\n-        let clean::Generic(generic) = self_ else { return true };\n-        let Some((bounds, _)) = params.get_mut(generic) else { return true };\n-\n+        let Some((ty, trait_did, name)) = lhs.projection() else { return true; };\n+        // FIXME(fmease): We don't handle HRTBs correctly here.\n+        //                Pass `_bound_params` (higher-rank lifetimes) to a modified version of\n+        //                `merge_bounds`. That vector is currently always empty though since we\n+        //                don't keep track of late-bound lifetimes when cleaning projection\n+        //                predicates to cleaned equality predicates while we should first query\n+        //                them with `collect_referenced_late_bound_regions` and then store them\n+        //                (or something similar). For prior art, see `clean::auto_trait`.\n+        let Some((bounds, _bound_params)) = tybounds.get_mut(ty) else { return true };\n         merge_bounds(cx, bounds, trait_did, name, rhs)\n     });\n \n@@ -65,11 +63,6 @@ pub(crate) fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n     clauses.extend(\n         lifetimes.into_iter().map(|(lt, bounds)| WP::RegionPredicate { lifetime: lt, bounds }),\n     );\n-    clauses.extend(params.into_iter().map(|(k, (bounds, params))| WP::BoundPredicate {\n-        ty: clean::Generic(k),\n-        bounds,\n-        bound_params: params,\n-    }));\n     clauses.extend(tybounds.into_iter().map(|(ty, (bounds, bound_params))| WP::BoundPredicate {\n         ty,\n         bounds,"}, {"sha": "5f034723c33a4de2513c28ba3e3c248d83258323", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -1050,6 +1050,13 @@ so that we can apply CSS-filters to change the arrow color in themes */\n \tmargin-bottom: 5px;\n \tfont-size: 0.875rem;\n \tfont-weight: normal;\n+\tcolor: var(--main-color);\n+\tbackground-color: var(--stab-background-color);\n+}\n+\n+.stab.portability > code {\n+\tbackground: none;\n+\tcolor: var(--stab-code-color);\n }\n \n .stab .emoji {"}, {"sha": "219e6509d20076c63d2756cb00ca49bce9dafd4c", "filename": "src/librustdoc/html/static/css/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 10, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fayu.css?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -37,6 +37,8 @@ Original by Dempfi (https://github.com/dempfi/ayu)\n \t--link-color: #39afd7;\n \t--sidebar-link-color: #53b1db;\n \t--sidebar-current-link-background-color: transparent;\n+\t--stab-background-color: #314559;\n+\t--stab-code-color: #e6e1cf;\n }\n \n .slider {\n@@ -155,16 +157,6 @@ details.rustdoc-toggle > summary::before {\n \tcolor: #000;\n }\n \n-.stab {\n-\tcolor: #c5c5c5;\n-\tbackground: #314559 !important;\n-}\n-\n-.stab.portability > code {\n-\tcolor: #e6e1cf;\n-\tbackground: none;\n-}\n-\n .result-name .primitive > i, .result-name .keyword > i {\n \tcolor: #788797;\n }"}, {"sha": "0b598db82ee80dd7578f9eb5ff928619325b34e3", "filename": "src/librustdoc/html/static/css/themes/dark.css", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Fdark.css?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -32,6 +32,8 @@\n \t--link-color: #d2991d;\n \t--sidebar-link-color: #fdbf35;\n \t--sidebar-current-link-background-color: #444;\n+\t--stab-background-color: #314559;\n+\t--stab-code-color: #e6e1cf;\n }\n \n .slider {\n@@ -114,13 +116,6 @@ details.rustdoc-toggle > summary::before {\n \tfilter: invert(69%) sepia(60%) saturate(6613%) hue-rotate(184deg) brightness(100%) contrast(91%);\n }\n \n-.stab { background: #314559; }\n-\n-.stab.portability > code {\n-\tcolor: #e6e1cf;\n-\tbackground: none;\n-}\n-\n .src-line-numbers :target { background-color: transparent; }\n \n /* Code highlighting */"}, {"sha": "fe1cf10bc2fd45e7ec9332c04c49d8c3476a900d", "filename": "src/librustdoc/html/static/css/themes/light.css", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Fthemes%2Flight.css?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -32,6 +32,8 @@\n \t--link-color: #3873ad;\n \t--sidebar-link-color: #356da4;\n \t--sidebar-current-link-background-color: #fff;\n+\t--stab-background-color: #fff5d6;\n+\t--stab-code-color: #000;\n }\n \n .slider {\n@@ -102,9 +104,6 @@ body.source .example-wrap pre.rust a {\n \tfilter: invert(44%) sepia(18%) saturate(23%) hue-rotate(317deg) brightness(96%) contrast(93%);\n }\n \n-.stab { background: #FFF5D6; border-color: #FFC600; }\n-.stab.portability > code { background: none; }\n-\n .src-line-numbers :target { background-color: transparent; }\n \n /* Code highlighting */"}, {"sha": "927a1a42a1f784bf77870265537784d3c59284c2", "filename": "src/test/rustdoc/inline_cross/assoc_item_trait_bounds_with_bindings.out0.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.out0.html", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.out0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.out0.html?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -0,0 +1 @@\n+<h4 class=\"code-header\">type <a href=\"#associatedtype.Out0\" class=\"associatedtype\">Out0</a>: <a class=\"trait\" href=\"../assoc_item_trait_bounds_with_bindings/trait.Support.html\" title=\"trait assoc_item_trait_bounds_with_bindings::Support\">Support</a>&lt;Item = <a class=\"primitive\" href=\"{{channel}}/std/primitive.unit.html\">()</a>&gt;</h4>\n\\ No newline at end of file"}, {"sha": "69d84e1b2c14e88ab373bb4989caa78b30f5d209", "filename": "src/test/rustdoc/inline_cross/assoc_item_trait_bounds_with_bindings.out9.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.out9.html", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.out9.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.out9.html?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -0,0 +1 @@\n+<h4 class=\"code-header\">type <a href=\"#associatedtype.Out9\" class=\"associatedtype\">Out9</a>: <a class=\"trait\" href=\"{{channel}}/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"{{channel}}/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"{{channel}}/std/primitive.bool.html\">bool</a> + <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a></h4>\n\\ No newline at end of file"}, {"sha": "b026f399a56676617bd3f58fef3e614fb7313146", "filename": "src/test/rustdoc/inline_cross/assoc_item_trait_bounds_with_bindings.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.rs?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -0,0 +1,40 @@\n+// Regression test for issues #77763, #84579 and #102142.\n+#![crate_name = \"main\"]\n+\n+// aux-build:assoc_item_trait_bounds_with_bindings.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+extern crate assoc_item_trait_bounds_with_bindings as aux;\n+\n+// FIXME(fmease): Don't render an incorrect `T: ?Sized` where-clause for parameters\n+//                of GATs like `Main::Out{2,4}`. Add a snapshot test once it's fixed.\n+// FIXME(fmease): Print the `for<>` parameter list in the bounds of\n+//                `Main::Out{6,11,12}`.\n+\n+// @has main/trait.Main.html\n+// @has - '//*[@id=\"associatedtype.Out0\"]' 'type Out0: Support<Item = ()>'\n+// @has - '//*[@id=\"associatedtype.Out1\"]' 'type Out1: Support<Item = Self::Item>'\n+// @has - '//*[@id=\"associatedtype.Out2\"]' 'type Out2<T>: Support<Item = T>'\n+// @has - '//*[@id=\"associatedtype.Out3\"]' 'type Out3: Support<Produce<()> = bool>'\n+// @has - '//*[@id=\"associatedtype.Out4\"]' 'type Out4<T>: Support<Produce<T> = T>'\n+// @has - '//*[@id=\"associatedtype.Out5\"]' \"type Out5: Support<Output<'static> = &'static ()>\"\n+// @has - '//*[@id=\"associatedtype.Out6\"]' \"type Out6: Support<Output<'a> = &'a ()>\"\n+// @has - '//*[@id=\"associatedtype.Out7\"]' \"type Out7: Support<Item = String, Produce<i32> = u32> + Unrelated\"\n+// @has - '//*[@id=\"associatedtype.Out8\"]' \"type Out8: Unrelated + Protocol<i16, Q1 = u128, Q0 = ()>\"\n+// @has - '//*[@id=\"associatedtype.Out9\"]' \"type Out9: FnMut(i32) -> bool + Clone\"\n+// @has - '//*[@id=\"associatedtype.Out10\"]' \"type Out10<'q>: Support<Output<'q> = ()>\"\n+// @has - '//*[@id=\"associatedtype.Out11\"]' \"type Out11: Helper<A<'s> = &'s (), B<'r> = ()>\"\n+// @has - '//*[@id=\"associatedtype.Out12\"]' \"type Out12: Helper<B<'w> = Cow<'w, str>, A<'w> = bool>\"\n+//\n+// Snapshots: Check that we do not render any where-clauses for those associated types since all of\n+// the trait bounds contained within were moved to the bounds of the respective item.\n+//\n+// @snapshot out0 - '//*[@id=\"associatedtype.Out0\"]/*[@class=\"code-header\"]'\n+// @snapshot out9 - '//*[@id=\"associatedtype.Out9\"]/*[@class=\"code-header\"]'\n+//\n+// @has - '//*[@id=\"tymethod.make\"]' \\\n+// \"fn make<F>(F, impl FnMut(&str) -> bool)\\\n+// where \\\n+//     F: FnOnce(u32) -> String, \\\n+//     Self::Out2<()>: Protocol<u8, Q0 = Self::Item, Q1 = ()>\"\n+pub use aux::Main;"}, {"sha": "7225f2dca10dbb82445ed1ab0e911370c4a32ee3", "filename": "src/test/rustdoc/inline_cross/auxiliary/assoc_item_trait_bounds_with_bindings.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc_item_trait_bounds_with_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc_item_trait_bounds_with_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc_item_trait_bounds_with_bindings.rs?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -0,0 +1,40 @@\n+pub trait Main {\n+    type Item;\n+\n+    type Out0: Support<Item = ()>;\n+    type Out1: Support<Item = Self::Item>;\n+    type Out2<T>: Support<Item = T>;\n+    type Out3: Support<Produce<()> = bool>;\n+    type Out4<T>: Support<Produce<T> = T>;\n+    type Out5: Support<Output<'static> = &'static ()>;\n+    type Out6: for<'a> Support<Output<'a> = &'a ()>;\n+    type Out7: Support<Item = String, Produce<i32> = u32> + Unrelated;\n+    type Out8: Unrelated + Protocol<i16, Q1 = u128, Q0 = ()>;\n+    type Out9: FnMut(i32) -> bool + Clone;\n+    type Out10<'q>: Support<Output<'q> = ()>;\n+    type Out11: for<'r, 's> Helper<A<'s> = &'s (), B<'r> = ()>;\n+    type Out12: for<'w> Helper<B<'w> = std::borrow::Cow<'w, str>, A<'w> = bool>;\n+\n+    fn make<F>(_: F, _: impl FnMut(&str) -> bool)\n+    where\n+        F: FnOnce(u32) -> String,\n+        Self::Out2<()>: Protocol<u8, Q0 = Self::Item, Q1 = ()>;\n+}\n+\n+pub trait Support {\n+    type Item;\n+    type Output<'a>;\n+    type Produce<T>;\n+}\n+\n+pub trait Protocol<K> {\n+    type Q0;\n+    type Q1;\n+}\n+\n+pub trait Unrelated {}\n+\n+pub trait Helper {\n+    type A<'q>;\n+    type B<'q>;\n+}"}, {"sha": "61c91e64417b346750b23fed59848f9f180486f6", "filename": "src/test/ui/impl-trait/in-trait/issue-102571.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.rs?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -0,0 +1,24 @@\n+#![feature(return_position_impl_trait_in_trait)]\n+#![allow(incomplete_features)]\n+\n+use std::fmt::Display;\n+use std::ops::Deref;\n+\n+trait Foo {\n+    fn bar(self) -> impl Deref<Target = impl Display + ?Sized>;\n+}\n+\n+struct A;\n+\n+impl Foo for A {\n+    fn bar(self) -> &'static str {\n+        \"Hello, world\"\n+    }\n+}\n+\n+fn foo<T: Foo>(t: T) {\n+    let () = t.bar();\n+    //~^ ERROR mismatched types\n+}\n+\n+fn main() {}"}, {"sha": "87219941d9161f1f96eb10af0e004c9adad209b2", "filename": "src/test/ui/impl-trait/in-trait/issue-102571.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fin-trait%2Fissue-102571.stderr?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -0,0 +1,14 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-102571.rs:20:9\n+   |\n+LL |     let () = t.bar();\n+   |         ^^   ------- this expression has type `impl Deref<Target = impl std::fmt::Display + ?Sized>`\n+   |         |\n+   |         expected associated type, found `()`\n+   |\n+   = note: expected associated type `impl Deref<Target = impl std::fmt::Display + ?Sized>`\n+                    found unit type `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "bcb8b158edfc5b71081f5f2324dcc91ffed5d043", "filename": "src/test/ui/transmutability/issue-101739-1.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-1.rs?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -0,0 +1,21 @@\n+#![feature(transmutability)]\n+\n+mod assert {\n+    use std::mem::BikeshedIntrinsicFrom;\n+\n+    pub fn is_transmutable<Src, Context, const ASSUME_ALIGNMENT: bool>()\n+    where\n+        Dst: BikeshedIntrinsicFrom<Src, Context, ASSUME_ALIGNMENT>, //~ ERROR cannot find type `Dst` in this scope\n+        //~^ ERROR mismatched types\n+    {\n+    }\n+}\n+\n+fn via_const() {\n+    struct Context;\n+    struct Src;\n+\n+    assert::is_transmutable::<Src, Context, false>();\n+}\n+\n+fn main() {}"}, {"sha": "5fa741f26fd077fcab991165fa53e51848546d67", "filename": "src/test/ui/transmutability/issue-101739-1.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-1.stderr?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -0,0 +1,16 @@\n+error[E0412]: cannot find type `Dst` in this scope\n+  --> $DIR/issue-101739-1.rs:8:9\n+   |\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context, ASSUME_ALIGNMENT>,\n+   |         ^^^ not found in this scope\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-101739-1.rs:8:50\n+   |\n+LL |         Dst: BikeshedIntrinsicFrom<Src, Context, ASSUME_ALIGNMENT>,\n+   |                                                  ^^^^^^^^^^^^^^^^ expected struct `Assume`, found `bool`\n+\n+error: aborting due to 2 previous errors\n+\n+Some errors have detailed explanations: E0308, E0412.\n+For more information about an error, try `rustc --explain E0308`."}, {"sha": "964a7e49ee614f07767b969c517e17623ab4eb68", "filename": "src/test/ui/transmutability/issue-101739-2.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.rs?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -0,0 +1,37 @@\n+#![crate_type = \"lib\"]\n+#![feature(transmutability)]\n+#![allow(dead_code, incomplete_features, non_camel_case_types)]\n+\n+mod assert {\n+    use std::mem::BikeshedIntrinsicFrom;\n+\n+    pub fn is_transmutable<\n+        Src,\n+        Dst,\n+        Context,\n+        const ASSUME_ALIGNMENT: bool,\n+        const ASSUME_LIFETIMES: bool,\n+        const ASSUME_VALIDITY: bool,\n+        const ASSUME_VISIBILITY: bool,\n+    >()\n+    where\n+        Dst: BikeshedIntrinsicFrom< //~ ERROR this trait takes at most 3 generic arguments but 6 generic arguments were supplied\n+            Src,\n+            Context,\n+            ASSUME_ALIGNMENT,\n+            ASSUME_LIFETIMES,\n+            ASSUME_VALIDITY,\n+            ASSUME_VISIBILITY,\n+        >,\n+    {}\n+}\n+\n+fn via_const() {\n+    struct Context;\n+    #[repr(C)] struct Src;\n+    #[repr(C)] struct Dst;\n+\n+    const FALSE: bool = false;\n+\n+    assert::is_transmutable::<Src, Dst, Context, FALSE, FALSE, FALSE, FALSE>();\n+}"}, {"sha": "3f83d6583b09cc6e723bfdedd1807cff6ebf50a5", "filename": "src/test/ui/transmutability/issue-101739-2.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/092255976862c1f0121bb4446acd38336a860c4f/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftransmutability%2Fissue-101739-2.stderr?ref=092255976862c1f0121bb4446acd38336a860c4f", "patch": "@@ -0,0 +1,20 @@\n+error[E0107]: this trait takes at most 3 generic arguments but 6 generic arguments were supplied\n+  --> $DIR/issue-101739-2.rs:18:14\n+   |\n+LL |           Dst: BikeshedIntrinsicFrom<\n+   |                ^^^^^^^^^^^^^^^^^^^^^ expected at most 3 generic arguments\n+...\n+LL | /             ASSUME_LIFETIMES,\n+LL | |             ASSUME_VALIDITY,\n+LL | |             ASSUME_VISIBILITY,\n+   | |_____________________________- help: remove these generic arguments\n+   |\n+note: trait defined here, with at most 3 generic parameters: `Src`, `Context`, `ASSUME`\n+  --> $SRC_DIR/core/src/mem/transmutability.rs:LL:COL\n+   |\n+LL | pub unsafe trait BikeshedIntrinsicFrom<Src, Context, const ASSUME: Assume = { Assume::NOTHING }>\n+   |                  ^^^^^^^^^^^^^^^^^^^^^ ---  -------  ------------------------------------------\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}]}