{"sha": "6115b13dfc4b863149d55b903fd3a86f9a8d6a37", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxMTViMTNkZmM0Yjg2MzE0OWQ1NWI5MDNmZDNhODZmOWE4ZDZhMzc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-21T20:17:24Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-22T02:10:31Z"}, "message": "rt: Don't switch to the C stack on the upcall_new_stack fast path", "tree": {"sha": "ae134a324bb033b3483fef88971db4a15a7c1345", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae134a324bb033b3483fef88971db4a15a7c1345"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6115b13dfc4b863149d55b903fd3a86f9a8d6a37", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6115b13dfc4b863149d55b903fd3a86f9a8d6a37", "html_url": "https://github.com/rust-lang/rust/commit/6115b13dfc4b863149d55b903fd3a86f9a8d6a37", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6115b13dfc4b863149d55b903fd3a86f9a8d6a37/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a145a601eb97f9d32572fed23030bc1bc319105", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a145a601eb97f9d32572fed23030bc1bc319105", "html_url": "https://github.com/rust-lang/rust/commit/8a145a601eb97f9d32572fed23030bc1bc319105"}], "stats": {"total": 61, "additions": 41, "deletions": 20}, "files": [{"sha": "36505f31a6ddc16aa5763e8d51063612e637a8f3", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6115b13dfc4b863149d55b903fd3a86f9a8d6a37/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6115b13dfc4b863149d55b903fd3a86f9a8d6a37/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=6115b13dfc4b863149d55b903fd3a86f9a8d6a37", "patch": "@@ -509,6 +509,37 @@ rust_task::free_stack(stk_seg *stk) {\n     destroy_stack(&local_region, stk);\n }\n \n+struct new_stack_args {\n+    rust_task *task;\n+    size_t requested_sz;\n+};\n+\n+void\n+new_stack_slow(new_stack_args *args) {\n+    args->task->new_stack(args->requested_sz);\n+}\n+\n+// NB: This runs on the Rust stack\n+// This is the new stack fast path, in which we\n+// reuse the next cached stack segment\n+void\n+rust_task::new_stack_fast(size_t requested_sz) {\n+    // The minimum stack size, in bytes, of a Rust stack, excluding red zone\n+    size_t min_sz = thread->min_stack_size;\n+\n+    // Try to reuse an existing stack segment\n+    if (stk != NULL && stk->prev != NULL) {\n+        size_t prev_sz = user_stack_size(stk->prev);\n+        if (min_sz <= prev_sz && requested_sz <= prev_sz) {\n+            stk = stk->prev;\n+            return;\n+        }\n+    }\n+\n+    new_stack_args args = {this, requested_sz};\n+    call_on_c_stack(&args, (void*)new_stack_slow);\n+}\n+\n void\n rust_task::new_stack(size_t requested_sz) {\n     LOG(this, mem, \"creating new stack for task %\" PRIxPTR, this);\n@@ -572,7 +603,7 @@ rust_task::next_stack(size_t stk_sz, void *args_addr, size_t args_sz) {\n         maybe_next_stack = stk->prev;\n     }\n \n-    new_stack(stk_sz + args_sz);\n+    new_stack_fast(stk_sz + args_sz);\n     A(thread, stk->end - (uintptr_t)stk->data >= stk_sz + args_sz,\n       \"Did not receive enough stack\");\n     uint8_t *new_sp = (uint8_t*)stk->end;"}, {"sha": "4f149ba7c2f67b3c08544f139e25cc35c827fab1", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6115b13dfc4b863149d55b903fd3a86f9a8d6a37/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/6115b13dfc4b863149d55b903fd3a86f9a8d6a37/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=6115b13dfc4b863149d55b903fd3a86f9a8d6a37", "patch": "@@ -33,6 +33,7 @@ typedef unsigned long task_result;\n struct spawn_args;\n struct cleanup_args;\n struct reset_args;\n+struct new_stack_args;\n \n // std::lib::task::task_notification\n //\n@@ -114,7 +115,8 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     // Called when the atomic refcount reaches zero\n     void delete_this();\n \n-    void new_stack(size_t sz);\n+    void new_stack_fast(size_t requested_sz);\n+    void new_stack(size_t requested_sz);\n     void free_stack(stk_seg *stk);\n     size_t get_next_stack_size(size_t min, size_t current, size_t requested);\n \n@@ -128,6 +130,7 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     friend void task_start_wrapper(spawn_args *a);\n     friend void cleanup_task(cleanup_args *a);\n     friend void reset_stack_limit_on_c_stack(reset_args *a);\n+    friend void new_stack_slow(new_stack_args *a);\n \n public:\n "}, {"sha": "cd8b4993cbebcca6e7594218ee39d3da75dea675", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6115b13dfc4b863149d55b903fd3a86f9a8d6a37/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6115b13dfc4b863149d55b903fd3a86f9a8d6a37/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=6115b13dfc4b863149d55b903fd3a86f9a8d6a37", "patch": "@@ -439,26 +439,13 @@ upcall_log_type(const type_desc *tydesc, uint8_t *data, uint32_t level) {\n     UPCALL_SWITCH_STACK(&args, upcall_s_log_type);\n }\n \n-struct s_new_stack_args {\n-    void *result;\n-    size_t stk_sz;\n-    void *args_addr;\n-    size_t args_sz;\n-};\n-\n-extern \"C\" CDECL void\n-upcall_s_new_stack(struct s_new_stack_args *args) {\n-    rust_task *task = rust_task_thread::get_task();\n-    args->result = task->next_stack(args->stk_sz,\n-                                    args->args_addr,\n-                                    args->args_sz);\n-}\n-\n+// NB: This needs to be blazing fast. Don't switch stacks\n extern \"C\" CDECL void *\n upcall_new_stack(size_t stk_sz, void *args_addr, size_t args_sz) {\n-    s_new_stack_args args = {NULL, stk_sz, args_addr, args_sz};\n-    UPCALL_SWITCH_STACK(&args, upcall_s_new_stack);\n-    return args.result;\n+    rust_task *task = rust_task_thread::get_task();\n+    return task->next_stack(stk_sz,\n+                            args_addr,\n+                            args_sz);\n }\n \n // NB: This needs to be blazing fast. Don't switch stacks"}]}