{"sha": "8f071bb8412ae8e208a0d05b8821c024bece1130", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmMDcxYmI4NDEyYWU4ZTIwOGEwZDA1Yjg4MjFjMDI0YmVjZTExMzA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-11T23:36:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-11T23:36:20Z"}, "message": "rustdoc: Add indexes to native mods. Closes #1963", "tree": {"sha": "6d47d2c4677facd8395cb426ee07e7d1ed2bfa8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d47d2c4677facd8395cb426ee07e7d1ed2bfa8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f071bb8412ae8e208a0d05b8821c024bece1130", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f071bb8412ae8e208a0d05b8821c024bece1130", "html_url": "https://github.com/rust-lang/rust/commit/8f071bb8412ae8e208a0d05b8821c024bece1130", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f071bb8412ae8e208a0d05b8821c024bece1130/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb1efb0092ff8b486ed5d8a1a6da699597257756", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb1efb0092ff8b486ed5d8a1a6da699597257756", "html_url": "https://github.com/rust-lang/rust/commit/cb1efb0092ff8b486ed5d8a1a6da699597257756"}], "stats": {"total": 69, "additions": 61, "deletions": 8}, "files": [{"sha": "c1532eba4f854dd7b523312c4dd1f52973d49830", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f071bb8412ae8e208a0d05b8821c024bece1130/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f071bb8412ae8e208a0d05b8821c024bece1130/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=8f071bb8412ae8e208a0d05b8821c024bece1130", "patch": "@@ -63,7 +63,8 @@ type moddoc = {\n \n type nmoddoc = {\n     item: itemdoc,\n-    fns: [fndoc]\n+    fns: [fndoc],\n+    index: option<index>\n };\n \n type constdoc = simpleitemdoc;"}, {"sha": "6bcd93ba9f5f87fee3ac75502ad0143f8a0a25f7", "filename": "src/rustdoc/extract.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f071bb8412ae8e208a0d05b8821c024bece1130/src%2Frustdoc%2Fextract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f071bb8412ae8e208a0d05b8821c024bece1130/src%2Frustdoc%2Fextract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fextract.rs?ref=8f071bb8412ae8e208a0d05b8821c024bece1130", "patch": "@@ -125,7 +125,8 @@ fn nmoddoc_from_mod(\n                 fndoc_from_fn(itemdoc)\n               }\n             }\n-        }\n+        },\n+        index: none\n     }\n }\n "}, {"sha": "f7b49be1ed5f299262aefeeab4baf79c8c2a9013", "filename": "src/rustdoc/markdown_index_pass.rs", "status": "modified", "additions": 45, "deletions": 6, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/8f071bb8412ae8e208a0d05b8821c024bece1130/src%2Frustdoc%2Fmarkdown_index_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f071bb8412ae8e208a0d05b8821c024bece1130/src%2Frustdoc%2Fmarkdown_index_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_index_pass.rs?ref=8f071bb8412ae8e208a0d05b8821c024bece1130", "patch": "@@ -17,8 +17,9 @@ fn run(\n     config: config::config\n ) -> doc::doc {\n     let fold = fold::fold({\n-        fold_mod: fold_mod\n-            with *fold::default_any_fold(config)\n+        fold_mod: fold_mod,\n+        fold_nmod: fold_nmod\n+        with *fold::default_any_fold(config)\n     });\n     fold.fold_doc(fold, doc)\n }\n@@ -31,18 +32,42 @@ fn fold_mod(\n     let doc = fold::default_any_fold_mod(fold, doc);\n \n     {\n-        index: some(build_index(doc, fold.ctxt))\n+        index: some(build_mod_index(doc, fold.ctxt))\n         with doc\n     }\n }\n \n-fn build_index(\n+fn fold_nmod(\n+    fold: fold::fold<config::config>,\n+    doc: doc::nmoddoc\n+) -> doc::nmoddoc {\n+\n+    let doc = fold::default_any_fold_nmod(fold, doc);\n+\n+    {\n+        index: some(build_nmod_index(doc, fold.ctxt))\n+        with doc\n+    }\n+}\n+\n+fn build_mod_index(\n     doc: doc::moddoc,\n     config: config::config\n ) -> doc::index {\n     {\n-        entries: par::anymap(doc.items) {|item|\n-            item_to_entry(item, config)\n+        entries: par::anymap(doc.items) {|doc|\n+            item_to_entry(doc, config)\n+        }\n+    }\n+}\n+\n+fn build_nmod_index(\n+    doc: doc::nmoddoc,\n+    config: config::config\n+) -> doc::index {\n+    {\n+        entries: par::anymap(doc.fns) {|doc|\n+            item_to_entry(doc::fntag(doc), config)\n         }\n     }\n }\n@@ -172,6 +197,20 @@ fn should_add_brief_desc_to_index() {\n     assert option::get(doc.cratemod().index).entries[0].brief == some(\"test\");\n }\n \n+#[test]\n+fn should_index_native_mod_contents() {\n+    let doc = test::mk_doc(\n+        config::doc_per_crate,\n+        \"native mod a { fn b(); }\"\n+    );\n+    assert option::get(doc.cratemod().nmods()[0].index).entries[0] == {\n+        kind: \"Function\",\n+        name: \"b\",\n+        brief: none,\n+        link: \"#function-b\"\n+    };\n+}\n+\n #[cfg(test)]\n mod test {\n     fn mk_doc(output_style: config::output_style, source: str) -> doc::doc {"}, {"sha": "255a6a485c89b756f47fac580551a166cd63a864", "filename": "src/rustdoc/markdown_pass.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8f071bb8412ae8e208a0d05b8821c024bece1130/src%2Frustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f071bb8412ae8e208a0d05b8821c024bece1130/src%2Frustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fmarkdown_pass.rs?ref=8f071bb8412ae8e208a0d05b8821c024bece1130", "patch": "@@ -416,8 +416,20 @@ fn should_not_write_index_if_no_entries() {\n     assert !str::contains(markdown, \"\\n\\n\\n\");\n }\n \n+#[test]\n+fn should_write_index_for_native_mods() {\n+    let markdown = test::render(\"native mod a { fn a(); }\");\n+    assert str::contains(\n+        markdown,\n+        \"\\n\\n* [Function `a`](#function-a)\\n\\n\"\n+    );\n+}\n+\n fn write_nmod(ctxt: ctxt, doc: doc::nmoddoc) {\n     write_common(ctxt, doc.desc(), doc.sections());\n+    if option::is_some(doc.index) {\n+        write_index(ctxt, option::get(doc.index));\n+    }\n \n     for fndoc in doc.fns {\n         write_item_header(ctxt, doc::fntag(fndoc));"}]}