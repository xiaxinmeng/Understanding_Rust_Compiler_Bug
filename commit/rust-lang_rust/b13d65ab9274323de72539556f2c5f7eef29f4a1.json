{"sha": "b13d65ab9274323de72539556f2c5f7eef29f4a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxM2Q2NWFiOTI3NDMyM2RlNzI1Mzk1NTZmMmM1ZjdlZWYyOWY0YTE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-26T00:27:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-26T00:27:13Z"}, "message": "Auto merge of #67580 - RalfJung:miri-unleash-tests, r=oli-obk\n\ntest the unleashed Miri\n\nIn particular, test what happens when we try to drop something. Cc https://github.com/rust-lang/const-eval/issues/17\n\nr? @oli-obk", "tree": {"sha": "267aebdae9f06d1db3d7650a84f158ac3d150a5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/267aebdae9f06d1db3d7650a84f158ac3d150a5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b13d65ab9274323de72539556f2c5f7eef29f4a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b13d65ab9274323de72539556f2c5f7eef29f4a1", "html_url": "https://github.com/rust-lang/rust/commit/b13d65ab9274323de72539556f2c5f7eef29f4a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b13d65ab9274323de72539556f2c5f7eef29f4a1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbf13723bc22f1a850438bf0b103d09e474a1ef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbf13723bc22f1a850438bf0b103d09e474a1ef5", "html_url": "https://github.com/rust-lang/rust/commit/bbf13723bc22f1a850438bf0b103d09e474a1ef5"}, {"sha": "40b8b7c338d2a55a5852fbe2da5b70edfee7dc90", "url": "https://api.github.com/repos/rust-lang/rust/commits/40b8b7c338d2a55a5852fbe2da5b70edfee7dc90", "html_url": "https://github.com/rust-lang/rust/commit/40b8b7c338d2a55a5852fbe2da5b70edfee7dc90"}], "stats": {"total": 78, "additions": 61, "deletions": 17}, "files": [{"sha": "e07db3ffba25edd3de2d08aff01e753276bb70b3", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b13d65ab9274323de72539556f2c5f7eef29f4a1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b13d65ab9274323de72539556f2c5f7eef29f4a1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.rs?ref=b13d65ab9274323de72539556f2c5f7eef29f4a1", "patch": "@@ -6,31 +6,31 @@\n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;\n \n-const BOO: &usize = { //~ ERROR undefined behavior to use this value\n+const REF_INTERIOR_MUT: &usize = { //~ ERROR undefined behavior to use this value\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n     unsafe { &*(&FOO as *const _ as *const usize) }\n     //~^ WARN skipping const checks\n };\n \n-const FOO: usize = {\n+const MUTATE_INTERIOR_MUT: usize = {\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n     FOO.fetch_add(1, Ordering::Relaxed) //~ WARN any use of this value will cause an error\n     //~^ WARN skipping const checks\n     //~| WARN skipping const checks\n };\n \n-const BAR: usize = {\n+const READ_INTERIOR_MUT: usize = {\n     static FOO: AtomicUsize = AtomicUsize::new(0);\n     unsafe { *(&FOO as *const _ as *const usize) } //~ WARN any use of this value will cause an err\n     //~^ WARN skipping const checks\n };\n \n static mut MUTABLE: u32 = 0;\n-const BAD: u32 = unsafe { MUTABLE }; //~ WARN any use of this value will cause an error\n+const READ_MUT: u32 = unsafe { MUTABLE }; //~ WARN any use of this value will cause an error\n //~^ WARN skipping const checks\n \n // ok some day perhaps\n-const BOO_OK: &usize = { //~ ERROR it is undefined behavior to use this value\n+const READ_IMMUT: &usize = { //~ ERROR it is undefined behavior to use this value\n     static FOO: usize = 0;\n     &FOO\n     //~^ WARN skipping const checks"}, {"sha": "eae76c1389b62327a147760e3abbe89b7113680f", "filename": "src/test/ui/consts/miri_unleashed/const_refers_to_static.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b13d65ab9274323de72539556f2c5f7eef29f4a1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b13d65ab9274323de72539556f2c5f7eef29f4a1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fconst_refers_to_static.stderr?ref=b13d65ab9274323de72539556f2c5f7eef29f4a1", "patch": "@@ -23,10 +23,10 @@ LL |     unsafe { *(&FOO as *const _ as *const usize) }\n    |                 ^^^\n \n warning: skipping const checks\n-  --> $DIR/const_refers_to_static.rs:29:27\n+  --> $DIR/const_refers_to_static.rs:29:32\n    |\n-LL | const BAD: u32 = unsafe { MUTABLE };\n-   |                           ^^^^^^^\n+LL | const READ_MUT: u32 = unsafe { MUTABLE };\n+   |                                ^^^^^^^\n \n warning: skipping const checks\n   --> $DIR/const_refers_to_static.rs:35:6\n@@ -37,7 +37,7 @@ LL |     &FOO\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static.rs:9:1\n    |\n-LL | / const BOO: &usize = {\n+LL | / const REF_INTERIOR_MUT: &usize = {\n LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n LL | |     unsafe { &*(&FOO as *const _ as *const usize) }\n LL | |\n@@ -49,7 +49,7 @@ LL | | };\n warning: any use of this value will cause an error\n   --> $DIR/const_refers_to_static.rs:17:5\n    |\n-LL | / const FOO: usize = {\n+LL | / const MUTATE_INTERIOR_MUT: usize = {\n LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n LL | |     FOO.fetch_add(1, Ordering::Relaxed)\n    | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ calling non-const function `std::sync::atomic::AtomicUsize::fetch_add`\n@@ -67,7 +67,7 @@ LL | #![warn(const_err)]\n warning: any use of this value will cause an error\n   --> $DIR/const_refers_to_static.rs:24:14\n    |\n-LL | / const BAR: usize = {\n+LL | / const READ_INTERIOR_MUT: usize = {\n LL | |     static FOO: AtomicUsize = AtomicUsize::new(0);\n LL | |     unsafe { *(&FOO as *const _ as *const usize) }\n    | |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ constant accesses static\n@@ -76,17 +76,17 @@ LL | | };\n    | |__-\n \n warning: any use of this value will cause an error\n-  --> $DIR/const_refers_to_static.rs:29:27\n+  --> $DIR/const_refers_to_static.rs:29:32\n    |\n-LL | const BAD: u32 = unsafe { MUTABLE };\n-   | --------------------------^^^^^^^---\n-   |                           |\n-   |                           constant accesses static\n+LL | const READ_MUT: u32 = unsafe { MUTABLE };\n+   | -------------------------------^^^^^^^---\n+   |                                |\n+   |                                constant accesses static\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/const_refers_to_static.rs:33:1\n    |\n-LL | / const BOO_OK: &usize = {\n+LL | / const READ_IMMUT: &usize = {\n LL | |     static FOO: usize = 0;\n LL | |     &FOO\n LL | |"}, {"sha": "d66ca53dfb8d3aa7e5f4bc310cb22d8e50e89aeb", "filename": "src/test/ui/consts/miri_unleashed/drop.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b13d65ab9274323de72539556f2c5f7eef29f4a1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b13d65ab9274323de72539556f2c5f7eef29f4a1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.rs?ref=b13d65ab9274323de72539556f2c5f7eef29f4a1", "patch": "@@ -0,0 +1,20 @@\n+// compile-flags: -Zunleash-the-miri-inside-of-you\n+// ignore-x86 FIXME: missing sysroot spans (#53081)\n+// error-pattern: calling non-const function `<std::vec::Vec<i32> as std::ops::Drop>::drop`\n+#![deny(const_err)]\n+\n+use std::mem::ManuallyDrop;\n+\n+fn main() {}\n+\n+static TEST_OK: () = {\n+    let v: Vec<i32> = Vec::new();\n+    let _v = ManuallyDrop::new(v);\n+};\n+\n+// Make sure we catch executing bad drop functions.\n+// The actual error is tested by the error-pattern above.\n+static TEST_BAD: () = {\n+    let _v: Vec<i32> = Vec::new();\n+    //~^ WARN skipping const check\n+};"}, {"sha": "5603eeb6dc037a7dae590fdc61b574e9261cf158", "filename": "src/test/ui/consts/miri_unleashed/drop.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b13d65ab9274323de72539556f2c5f7eef29f4a1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b13d65ab9274323de72539556f2c5f7eef29f4a1/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmiri_unleashed%2Fdrop.stderr?ref=b13d65ab9274323de72539556f2c5f7eef29f4a1", "patch": "@@ -0,0 +1,24 @@\n+warning: skipping const checks\n+  --> $DIR/drop.rs:18:9\n+   |\n+LL |     let _v: Vec<i32> = Vec::new();\n+   |         ^^\n+\n+error[E0080]: could not evaluate static initializer\n+  --> $SRC_DIR/libcore/ptr/mod.rs:LL:COL\n+   |\n+LL | / unsafe fn real_drop_in_place<T: ?Sized>(to_drop: &mut T) {\n+LL | |     // Code here does not matter - this is replaced by the\n+LL | |     // real drop glue by the compiler.\n+LL | |     real_drop_in_place(to_drop)\n+LL | | }\n+   | |_^ calling non-const function `<std::vec::Vec<i32> as std::ops::Drop>::drop`\n+   | \n+  ::: $DIR/drop.rs:20:1\n+   |\n+LL |   };\n+   |   - inside call to `std::ptr::real_drop_in_place::<std::vec::Vec<i32>> - shim(Some(std::vec::Vec<i32>))` at $DIR/drop.rs:20:1\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}]}