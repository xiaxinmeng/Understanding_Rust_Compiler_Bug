{"sha": "eff62069ad602090e8d27b83cffd9e77479ed4be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmZjYyMDY5YWQ2MDIwOTBlOGQyN2I4M2NmZmQ5ZTc3NDc5ZWQ0YmU=", "commit": {"author": {"name": "Roman Proskuryakov", "email": "humbug@deeptown.org", "date": "2020-07-05T12:02:01Z"}, "committer": {"name": "Roman Proskuryakov", "email": "humbug@deeptown.org", "date": "2020-07-05T12:47:08Z"}, "message": "Remove the usage of the LengthAtMost32 trait", "tree": {"sha": "6fb5ca35f019a29a7c41ce206d53c17968376c75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6fb5ca35f019a29a7c41ce206d53c17968376c75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eff62069ad602090e8d27b83cffd9e77479ed4be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eff62069ad602090e8d27b83cffd9e77479ed4be", "html_url": "https://github.com/rust-lang/rust/commit/eff62069ad602090e8d27b83cffd9e77479ed4be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eff62069ad602090e8d27b83cffd9e77479ed4be/comments", "author": {"login": "kpp", "id": 467709, "node_id": "MDQ6VXNlcjQ2NzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpp", "html_url": "https://github.com/kpp", "followers_url": "https://api.github.com/users/kpp/followers", "following_url": "https://api.github.com/users/kpp/following{/other_user}", "gists_url": "https://api.github.com/users/kpp/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpp/subscriptions", "organizations_url": "https://api.github.com/users/kpp/orgs", "repos_url": "https://api.github.com/users/kpp/repos", "events_url": "https://api.github.com/users/kpp/events{/privacy}", "received_events_url": "https://api.github.com/users/kpp/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kpp", "id": 467709, "node_id": "MDQ6VXNlcjQ2NzcwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/467709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kpp", "html_url": "https://github.com/kpp", "followers_url": "https://api.github.com/users/kpp/followers", "following_url": "https://api.github.com/users/kpp/following{/other_user}", "gists_url": "https://api.github.com/users/kpp/gists{/gist_id}", "starred_url": "https://api.github.com/users/kpp/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kpp/subscriptions", "organizations_url": "https://api.github.com/users/kpp/orgs", "repos_url": "https://api.github.com/users/kpp/repos", "events_url": "https://api.github.com/users/kpp/events{/privacy}", "received_events_url": "https://api.github.com/users/kpp/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d4a92d4f8dc03409984695d78893fffdd3ff1f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d4a92d4f8dc03409984695d78893fffdd3ff1f9", "html_url": "https://github.com/rust-lang/rust/commit/7d4a92d4f8dc03409984695d78893fffdd3ff1f9"}], "stats": {"total": 932, "additions": 251, "deletions": 681}, "files": [{"sha": "f225aa18853c7214bfb31263212f890265096141", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -130,7 +130,6 @@\n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n use core::any::Any;\n-use core::array::LengthAtMost32;\n use core::borrow;\n use core::cmp::Ordering;\n use core::convert::{From, TryFrom};\n@@ -871,10 +870,7 @@ impl From<Box<str>> for Box<[u8]> {\n }\n \n #[stable(feature = \"box_from_array\", since = \"1.45.0\")]\n-impl<T, const N: usize> From<[T; N]> for Box<[T]>\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<T, const N: usize> From<[T; N]> for Box<[T]> {\n     /// Converts a `[T; N]` into a `Box<[T]>`\n     ///\n     /// This conversion moves the array to newly heap-allocated memory.\n@@ -890,10 +886,7 @@ where\n }\n \n #[stable(feature = \"boxed_slice_try_from\", since = \"1.43.0\")]\n-impl<T, const N: usize> TryFrom<Box<[T]>> for Box<[T; N]>\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<T, const N: usize> TryFrom<Box<[T]>> for Box<[T; N]> {\n     type Error = Box<[T]>;\n \n     fn try_from(boxed_slice: Box<[T]>) -> Result<Self, Self::Error> {"}, {"sha": "ba455b1e5b7a754fc525d63d821ca630f8d894ab", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -9,7 +9,6 @@\n \n // ignore-tidy-filelength\n \n-use core::array::LengthAtMost32;\n use core::cmp::{self, Ordering};\n use core::fmt;\n use core::hash::{Hash, Hasher};\n@@ -2799,9 +2798,9 @@ macro_rules! __impl_slice_eq1 {\n __impl_slice_eq1! { [] VecDeque<A>, Vec<B>, }\n __impl_slice_eq1! { [] VecDeque<A>, &[B], }\n __impl_slice_eq1! { [] VecDeque<A>, &mut [B], }\n-__impl_slice_eq1! { [const N: usize] VecDeque<A>, [B; N], [B; N]: LengthAtMost32 }\n-__impl_slice_eq1! { [const N: usize] VecDeque<A>, &[B; N], [B; N]: LengthAtMost32 }\n-__impl_slice_eq1! { [const N: usize] VecDeque<A>, &mut [B; N], [B; N]: LengthAtMost32 }\n+__impl_slice_eq1! { [const N: usize] VecDeque<A>, [B; N], }\n+__impl_slice_eq1! { [const N: usize] VecDeque<A>, &[B; N], }\n+__impl_slice_eq1! { [const N: usize] VecDeque<A>, &mut [B; N], }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<A: PartialOrd> PartialOrd for VecDeque<A> {"}, {"sha": "fd25e6935af6f6b9843845971bc7798976cac630", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -235,7 +235,6 @@ use crate::boxed::Box;\n use std::boxed::Box;\n \n use core::any::Any;\n-use core::array::LengthAtMost32;\n use core::borrow;\n use core::cell::Cell;\n use core::cmp::Ordering;\n@@ -1522,10 +1521,7 @@ where\n }\n \n #[stable(feature = \"boxed_slice_try_from\", since = \"1.43.0\")]\n-impl<T, const N: usize> TryFrom<Rc<[T]>> for Rc<[T; N]>\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<T, const N: usize> TryFrom<Rc<[T]>> for Rc<[T; N]> {\n     type Error = Rc<[T]>;\n \n     fn try_from(boxed_slice: Rc<[T]>) -> Result<Self, Self::Error> {"}, {"sha": "9a0daa20160730d4b79fce15018f8eeaa7c7274e", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -7,7 +7,6 @@\n //! [arc]: struct.Arc.html\n \n use core::any::Any;\n-use core::array::LengthAtMost32;\n use core::borrow;\n use core::cmp::Ordering;\n use core::convert::{From, TryFrom};\n@@ -2159,10 +2158,7 @@ where\n }\n \n #[stable(feature = \"boxed_slice_try_from\", since = \"1.43.0\")]\n-impl<T, const N: usize> TryFrom<Arc<[T]>> for Arc<[T; N]>\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<T, const N: usize> TryFrom<Arc<[T]>> for Arc<[T; N]> {\n     type Error = Arc<[T]>;\n \n     fn try_from(boxed_slice: Arc<[T]>) -> Result<Self, Self::Error> {"}, {"sha": "3f05719ba9adb628f771ce880f32610d95f7e468", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -59,7 +59,6 @@\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]\n \n-use core::array::LengthAtMost32;\n use core::cmp::{self, Ordering};\n use core::fmt;\n use core::hash::{Hash, Hasher};\n@@ -2379,18 +2378,18 @@ __impl_slice_eq1! { [] &mut [A], Vec<B>, #[stable(feature = \"partialeq_vec_for_r\n __impl_slice_eq1! { [] Cow<'_, [A]>, Vec<B> where A: Clone, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n __impl_slice_eq1! { [] Cow<'_, [A]>, &[B] where A: Clone, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n __impl_slice_eq1! { [] Cow<'_, [A]>, &mut [B] where A: Clone, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n-__impl_slice_eq1! { [const N: usize] Vec<A>, [B; N] where [B; N]: LengthAtMost32, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n-__impl_slice_eq1! { [const N: usize] Vec<A>, &[B; N] where [B; N]: LengthAtMost32, #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [const N: usize] Vec<A>, [B; N], #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n+__impl_slice_eq1! { [const N: usize] Vec<A>, &[B; N], #[stable(feature = \"rust1\", since = \"1.0.0\")] }\n \n // NOTE: some less important impls are omitted to reduce code bloat\n // FIXME(Centril): Reconsider this?\n-//__impl_slice_eq1! { [const N: usize] Vec<A>, &mut [B; N], [B; N]: LengthAtMost32 }\n-//__impl_slice_eq1! { [const N: usize] [A; N], Vec<B>, [A; N]: LengthAtMost32 }\n-//__impl_slice_eq1! { [const N: usize] &[A; N], Vec<B>, [A; N]: LengthAtMost32 }\n-//__impl_slice_eq1! { [const N: usize] &mut [A; N], Vec<B>, [A; N]: LengthAtMost32 }\n-//__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, [B; N], [B; N]: LengthAtMost32 }\n-//__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &[B; N], [B; N]: LengthAtMost32 }\n-//__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &mut [B; N], [B; N]: LengthAtMost32 }\n+//__impl_slice_eq1! { [const N: usize] Vec<A>, &mut [B; N], }\n+//__impl_slice_eq1! { [const N: usize] [A; N], Vec<B>, }\n+//__impl_slice_eq1! { [const N: usize] &[A; N], Vec<B>, }\n+//__impl_slice_eq1! { [const N: usize] &mut [A; N], Vec<B>, }\n+//__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, [B; N], }\n+//__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &[B; N], }\n+//__impl_slice_eq1! { [const N: usize] Cow<'a, [A]>, &mut [B; N], }\n \n /// Implements comparison of vectors, lexicographically.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -2494,10 +2493,7 @@ impl<T: Clone> From<&mut [T]> for Vec<T> {\n }\n \n #[stable(feature = \"vec_from_array\", since = \"1.44.0\")]\n-impl<T, const N: usize> From<[T; N]> for Vec<T>\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<T, const N: usize> From<[T; N]> for Vec<T> {\n     #[cfg(not(test))]\n     fn from(s: [T; N]) -> Vec<T> {\n         <[T]>::into_vec(box s)"}, {"sha": "174f7e26efbace91d244be28e0640b452e73fa58", "filename": "src/libcore/array/iter.rs", "status": "modified", "additions": 10, "deletions": 35, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Flibcore%2Farray%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Flibcore%2Farray%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray%2Fiter.rs?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -1,6 +1,5 @@\n //! Defines the `IntoIter` owned iterator for arrays.\n \n-use super::LengthAtMost32;\n use crate::{\n     fmt,\n     iter::{ExactSizeIterator, FusedIterator, TrustedLen},\n@@ -13,10 +12,7 @@ use crate::{\n ///\n /// [array]: ../../std/primitive.array.html\n #[unstable(feature = \"array_value_iter\", issue = \"65798\")]\n-pub struct IntoIter<T, const N: usize>\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+pub struct IntoIter<T, const N: usize> {\n     /// This is the array we are iterating over.\n     ///\n     /// Elements with index `i` where `alive.start <= i < alive.end` have not\n@@ -39,10 +35,7 @@ where\n     alive: Range<usize>,\n }\n \n-impl<T, const N: usize> IntoIter<T, N>\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<T, const N: usize> IntoIter<T, N> {\n     /// Creates a new iterator over the given `array`.\n     ///\n     /// *Note*: this method might never get stabilized and/or removed in the\n@@ -99,10 +92,7 @@ where\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n-impl<T, const N: usize> Iterator for IntoIter<T, N>\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<T, const N: usize> Iterator for IntoIter<T, N> {\n     type Item = T;\n     fn next(&mut self) -> Option<Self::Item> {\n         if self.alive.start == self.alive.end {\n@@ -146,10 +136,7 @@ where\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n-impl<T, const N: usize> DoubleEndedIterator for IntoIter<T, N>\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<T, const N: usize> DoubleEndedIterator for IntoIter<T, N> {\n     fn next_back(&mut self) -> Option<Self::Item> {\n         if self.alive.start == self.alive.end {\n             return None;\n@@ -182,10 +169,7 @@ where\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n-impl<T, const N: usize> Drop for IntoIter<T, N>\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<T, const N: usize> Drop for IntoIter<T, N> {\n     fn drop(&mut self) {\n         // SAFETY: This is safe: `as_mut_slice` returns exactly the sub-slice\n         // of elements that have not been moved out yet and that remain\n@@ -195,10 +179,7 @@ where\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n-impl<T, const N: usize> ExactSizeIterator for IntoIter<T, N>\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<T, const N: usize> ExactSizeIterator for IntoIter<T, N> {\n     fn len(&self) -> usize {\n         // Will never underflow due to the invariant `alive.start <=\n         // alive.end`.\n@@ -210,20 +191,17 @@ where\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n-impl<T, const N: usize> FusedIterator for IntoIter<T, N> where [T; N]: LengthAtMost32 {}\n+impl<T, const N: usize> FusedIterator for IntoIter<T, N> {}\n \n // The iterator indeed reports the correct length. The number of \"alive\"\n // elements (that will still be yielded) is the length of the range `alive`.\n // This range is decremented in length in either `next` or `next_back`. It is\n // always decremented by 1 in those methods, but only if `Some(_)` is returned.\n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n-unsafe impl<T, const N: usize> TrustedLen for IntoIter<T, N> where [T; N]: LengthAtMost32 {}\n+unsafe impl<T, const N: usize> TrustedLen for IntoIter<T, N> {}\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n-impl<T: Clone, const N: usize> Clone for IntoIter<T, N>\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<T: Clone, const N: usize> Clone for IntoIter<T, N> {\n     fn clone(&self) -> Self {\n         // SAFETY: each point of unsafety is documented inside the unsafe block\n         unsafe {\n@@ -249,10 +227,7 @@ where\n }\n \n #[stable(feature = \"array_value_iter_impls\", since = \"1.40.0\")]\n-impl<T: fmt::Debug, const N: usize> fmt::Debug for IntoIter<T, N>\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<T: fmt::Debug, const N: usize> fmt::Debug for IntoIter<T, N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         // Only print the elements that were not yielded yet: we cannot\n         // access the yielded elements anymore."}, {"sha": "c5e7f659485644c30b179e85d9698d760813249a", "filename": "src/libcore/array/mod.rs", "status": "modified", "additions": 9, "deletions": 42, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Flibcore%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Flibcore%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray%2Fmod.rs?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -125,7 +125,6 @@ impl<T, const N: usize> BorrowMut<[T]> for [T; N] {\n impl<T, const N: usize> TryFrom<&[T]> for [T; N]\n where\n     T: Copy,\n-    [T; N]: LengthAtMost32,\n {\n     type Error = TryFromSliceError;\n \n@@ -135,10 +134,7 @@ where\n }\n \n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n-impl<'a, T, const N: usize> TryFrom<&'a [T]> for &'a [T; N]\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<'a, T, const N: usize> TryFrom<&'a [T]> for &'a [T; N] {\n     type Error = TryFromSliceError;\n \n     fn try_from(slice: &[T]) -> Result<&[T; N], TryFromSliceError> {\n@@ -153,10 +149,7 @@ where\n }\n \n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n-impl<'a, T, const N: usize> TryFrom<&'a mut [T]> for &'a mut [T; N]\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<'a, T, const N: usize> TryFrom<&'a mut [T]> for &'a mut [T; N] {\n     type Error = TryFromSliceError;\n \n     fn try_from(slice: &mut [T]) -> Result<&mut [T; N], TryFromSliceError> {\n@@ -171,30 +164,21 @@ where\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Hash, const N: usize> Hash for [T; N]\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<T: Hash, const N: usize> Hash for [T; N] {\n     fn hash<H: hash::Hasher>(&self, state: &mut H) {\n         Hash::hash(&self[..], state)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: fmt::Debug, const N: usize> fmt::Debug for [T; N]\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<T: fmt::Debug, const N: usize> fmt::Debug for [T; N] {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         fmt::Debug::fmt(&&self[..], f)\n     }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T, const N: usize> IntoIterator for &'a [T; N]\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<'a, T, const N: usize> IntoIterator for &'a [T; N] {\n     type Item = &'a T;\n     type IntoIter = Iter<'a, T>;\n \n@@ -204,10 +188,7 @@ where\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<'a, T, const N: usize> IntoIterator for &'a mut [T; N]\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<'a, T, const N: usize> IntoIterator for &'a mut [T; N] {\n     type Item = &'a mut T;\n     type IntoIter = IterMut<'a, T>;\n \n@@ -220,8 +201,6 @@ where\n impl<A, B, const N: usize> PartialEq<[B; N]> for [A; N]\n where\n     A: PartialEq<B>,\n-    [A; N]: LengthAtMost32,\n-    [B; N]: LengthAtMost32,\n {\n     #[inline]\n     fn eq(&self, other: &[B; N]) -> bool {\n@@ -237,7 +216,6 @@ where\n impl<A, B, const N: usize> PartialEq<[B]> for [A; N]\n where\n     A: PartialEq<B>,\n-    [A; N]: LengthAtMost32,\n {\n     #[inline]\n     fn eq(&self, other: &[B]) -> bool {\n@@ -253,7 +231,6 @@ where\n impl<A, B, const N: usize> PartialEq<[A; N]> for [B]\n where\n     B: PartialEq<A>,\n-    [A; N]: LengthAtMost32,\n {\n     #[inline]\n     fn eq(&self, other: &[A; N]) -> bool {\n@@ -269,7 +246,6 @@ where\n impl<'b, A, B, const N: usize> PartialEq<&'b [B]> for [A; N]\n where\n     A: PartialEq<B>,\n-    [A; N]: LengthAtMost32,\n {\n     #[inline]\n     fn eq(&self, other: &&'b [B]) -> bool {\n@@ -285,7 +261,6 @@ where\n impl<'b, A, B, const N: usize> PartialEq<[A; N]> for &'b [B]\n where\n     B: PartialEq<A>,\n-    [A; N]: LengthAtMost32,\n {\n     #[inline]\n     fn eq(&self, other: &[A; N]) -> bool {\n@@ -301,7 +276,6 @@ where\n impl<'b, A, B, const N: usize> PartialEq<&'b mut [B]> for [A; N]\n where\n     A: PartialEq<B>,\n-    [A; N]: LengthAtMost32,\n {\n     #[inline]\n     fn eq(&self, other: &&'b mut [B]) -> bool {\n@@ -317,7 +291,6 @@ where\n impl<'b, A, B, const N: usize> PartialEq<[A; N]> for &'b mut [B]\n where\n     B: PartialEq<A>,\n-    [A; N]: LengthAtMost32,\n {\n     #[inline]\n     fn eq(&self, other: &[A; N]) -> bool {\n@@ -334,13 +307,10 @@ where\n // __impl_slice_eq2! { [A; $N], &'b mut [B; $N] }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Eq, const N: usize> Eq for [T; N] where [T; N]: LengthAtMost32 {}\n+impl<T: Eq, const N: usize> Eq for [T; N] {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: PartialOrd, const N: usize> PartialOrd for [T; N]\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<T: PartialOrd, const N: usize> PartialOrd for [T; N] {\n     #[inline]\n     fn partial_cmp(&self, other: &[T; N]) -> Option<Ordering> {\n         PartialOrd::partial_cmp(&&self[..], &&other[..])\n@@ -365,10 +335,7 @@ where\n \n /// Implements comparison of arrays lexicographically.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T: Ord, const N: usize> Ord for [T; N]\n-where\n-    [T; N]: LengthAtMost32,\n-{\n+impl<T: Ord, const N: usize> Ord for [T; N] {\n     #[inline]\n     fn cmp(&self, other: &[T; N]) -> Ordering {\n         Ord::cmp(&&self[..], &&other[..])"}, {"sha": "35df3278a6e319e8b09b3f815af1ddaf0f4c0c86", "filename": "src/test/ui/const-generics/array-impls/alloc-traits-impls-length-33.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-impls-length-33.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-impls-length-33.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-impls-length-33.rs?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -0,0 +1,40 @@\n+// check-pass\n+\n+pub fn yes_vec_partial_eq_array<A, B>() -> impl PartialEq<[B; 33]>\n+where\n+    A: PartialEq<B>,\n+{\n+    Vec::<A>::new()\n+}\n+\n+pub fn yes_vec_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 33]>\n+where\n+    A: PartialEq<B>,\n+{\n+    Vec::<A>::new()\n+}\n+\n+use std::collections::VecDeque;\n+\n+pub fn yes_vecdeque_partial_eq_array<A, B>() -> impl PartialEq<[B; 33]>\n+where\n+    A: PartialEq<B>,\n+{\n+    VecDeque::<A>::new()\n+}\n+\n+pub fn yes_vecdeque_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 33]>\n+where\n+    A: PartialEq<B>,\n+{\n+    VecDeque::<A>::new()\n+}\n+\n+pub fn yes_vecdeque_partial_eq_ref_mut_array<'a, A, B>() -> impl PartialEq<&'a mut [B; 33]>\n+where\n+    A: PartialEq<B>,\n+{\n+    VecDeque::<A>::new()\n+}\n+\n+fn main() {}"}, {"sha": "19107e6bf16d5be779e9832384deb4ae2b643f8c", "filename": "src/test/ui/const-generics/array-impls/alloc-traits-no-impls-length-33.rs", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/7d4a92d4f8dc03409984695d78893fffdd3ff1f9/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-no-impls-length-33.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d4a92d4f8dc03409984695d78893fffdd3ff1f9/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-no-impls-length-33.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-no-impls-length-33.rs?ref=7d4a92d4f8dc03409984695d78893fffdd3ff1f9", "patch": "@@ -1,43 +0,0 @@\n-pub fn no_vec_partial_eq_array<A, B>() -> impl PartialEq<[B; 33]>\n-//~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-where\n-    A: PartialEq<B>,\n-{\n-    Vec::<A>::new()\n-}\n-\n-pub fn no_vec_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 33]>\n-//~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-where\n-    A: PartialEq<B>,\n-{\n-    Vec::<A>::new()\n-}\n-\n-use std::collections::VecDeque;\n-\n-pub fn no_vecdeque_partial_eq_array<A, B>() -> impl PartialEq<[B; 33]>\n-//~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-where\n-    A: PartialEq<B>,\n-{\n-    VecDeque::<A>::new()\n-}\n-\n-pub fn no_vecdeque_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 33]>\n-//~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-where\n-    A: PartialEq<B>,\n-{\n-    VecDeque::<A>::new()\n-}\n-\n-pub fn no_vecdeque_partial_eq_ref_mut_array<'a, A, B>() -> impl PartialEq<&'a mut [B; 33]>\n-//~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-where\n-    A: PartialEq<B>,\n-{\n-    VecDeque::<A>::new()\n-}\n-\n-fn main() {}"}, {"sha": "6e5afcdb8bb68ce650dbba5ccee012f483c950f7", "filename": "src/test/ui/const-generics/array-impls/alloc-traits-no-impls-length-33.stderr", "status": "removed", "additions": 0, "deletions": 63, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/7d4a92d4f8dc03409984695d78893fffdd3ff1f9/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d4a92d4f8dc03409984695d78893fffdd3ff1f9/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-traits-no-impls-length-33.stderr?ref=7d4a92d4f8dc03409984695d78893fffdd3ff1f9", "patch": "@@ -1,63 +0,0 @@\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/alloc-traits-no-impls-length-33.rs:1:43\n-   |\n-LL | pub fn no_vec_partial_eq_array<A, B>() -> impl PartialEq<[B; 33]>\n-   |                                           ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[B; 33]`\n-...\n-LL |     Vec::<A>::new()\n-   |     --------------- this returned value is of type `std::vec::Vec<A>`\n-   |\n-   = note: required because of the requirements on the impl of `std::cmp::PartialEq<[B; 33]>` for `std::vec::Vec<A>`\n-   = note: the return type of a function must have a statically known size\n-\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/alloc-traits-no-impls-length-33.rs:9:51\n-   |\n-LL | pub fn no_vec_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 33]>\n-   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[B; 33]`\n-...\n-LL |     Vec::<A>::new()\n-   |     --------------- this returned value is of type `std::vec::Vec<A>`\n-   |\n-   = note: required because of the requirements on the impl of `std::cmp::PartialEq<&'a [B; 33]>` for `std::vec::Vec<A>`\n-   = note: the return type of a function must have a statically known size\n-\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/alloc-traits-no-impls-length-33.rs:19:48\n-   |\n-LL | pub fn no_vecdeque_partial_eq_array<A, B>() -> impl PartialEq<[B; 33]>\n-   |                                                ^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[B; 33]`\n-...\n-LL |     VecDeque::<A>::new()\n-   |     -------------------- this returned value is of type `std::collections::VecDeque<A>`\n-   |\n-   = note: required because of the requirements on the impl of `std::cmp::PartialEq<[B; 33]>` for `std::collections::VecDeque<A>`\n-   = note: the return type of a function must have a statically known size\n-\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/alloc-traits-no-impls-length-33.rs:27:56\n-   |\n-LL | pub fn no_vecdeque_partial_eq_ref_array<'a, A, B>() -> impl PartialEq<&'a [B; 33]>\n-   |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[B; 33]`\n-...\n-LL |     VecDeque::<A>::new()\n-   |     -------------------- this returned value is of type `std::collections::VecDeque<A>`\n-   |\n-   = note: required because of the requirements on the impl of `std::cmp::PartialEq<&'a [B; 33]>` for `std::collections::VecDeque<A>`\n-   = note: the return type of a function must have a statically known size\n-\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/alloc-traits-no-impls-length-33.rs:35:60\n-   |\n-LL | pub fn no_vecdeque_partial_eq_ref_mut_array<'a, A, B>() -> impl PartialEq<&'a mut [B; 33]>\n-   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[B; 33]`\n-...\n-LL |     VecDeque::<A>::new()\n-   |     -------------------- this returned value is of type `std::collections::VecDeque<A>`\n-   |\n-   = note: required because of the requirements on the impl of `std::cmp::PartialEq<&'a mut [B; 33]>` for `std::collections::VecDeque<A>`\n-   = note: the return type of a function must have a statically known size\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "294b405e0edfcfec63d87e99823cc061d6bdfb54", "filename": "src/test/ui/const-generics/array-impls/alloc-types-impls-length-33.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-impls-length-33.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-impls-length-33.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-impls-length-33.rs?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -0,0 +1,25 @@\n+// check-pass\n+\n+use std::{convert::TryFrom, rc::Rc, sync::Arc};\n+\n+pub fn yes_vec() {\n+    let v: Vec<_> = [0; 33].into();\n+}\n+\n+pub fn yes_box() {\n+    let boxed_slice = Box::new([0; 33]) as Box<[i32]>;\n+    let boxed_array = <Box<[i32; 33]>>::try_from(boxed_slice);\n+    let boxed_slice = <Box<[i32]>>::from([0; 33]);\n+}\n+\n+pub fn yes_rc() {\n+    let boxed_slice = Rc::new([0; 33]) as Rc<[i32]>;\n+    let boxed_array = <Rc<[i32; 33]>>::try_from(boxed_slice);\n+}\n+\n+pub fn yes_arc() {\n+    let boxed_slice = Arc::new([0; 33]) as Arc<[i32]>;\n+    let boxed_array = <Arc<[i32; 33]>>::try_from(boxed_slice);\n+}\n+\n+fn main() {}"}, {"sha": "48cf21d489adacdbf6001245e2f10fa22fa71ee7", "filename": "src/test/ui/const-generics/array-impls/alloc-types-no-impls-length-33.rs", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7d4a92d4f8dc03409984695d78893fffdd3ff1f9/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d4a92d4f8dc03409984695d78893fffdd3ff1f9/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.rs?ref=7d4a92d4f8dc03409984695d78893fffdd3ff1f9", "patch": "@@ -1,33 +0,0 @@\n-// ignore-tidy-linelength\n-\n-use std::{convert::TryFrom, rc::Rc, sync::Arc};\n-\n-pub fn no_vec() {\n-    let v: Vec<_> = [0; 33].into();\n-    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-}\n-\n-pub fn no_box() {\n-    let boxed_slice = Box::new([0; 33]) as Box<[i32]>;\n-    let boxed_array = <Box<[i32; 33]>>::try_from(boxed_slice);\n-    //~^ ERROR the trait bound `std::boxed::Box<[i32; 33]>: std::convert::From<std::boxed::Box<[i32]>>` is not satisfied\n-    //~^^ ERROR the trait bound `std::boxed::Box<[i32; 33]>: std::convert::TryFrom<std::boxed::Box<[i32]>>` is not satisfied\n-    let boxed_slice = <Box<[i32]>>::from([0; 33]);\n-    //~^ 15:42: 15:49: arrays only have std trait implementations for lengths 0..=32 [E0277]\n-}\n-\n-pub fn no_rc() {\n-    let boxed_slice = Rc::new([0; 33]) as Rc<[i32]>;\n-    let boxed_array = <Rc<[i32; 33]>>::try_from(boxed_slice);\n-    //~^ ERROR the trait bound `std::rc::Rc<[i32; 33]>: std::convert::From<std::rc::Rc<[i32]>>` is not satisfied\n-    //~^^ ERROR the trait bound `std::rc::Rc<[i32; 33]>: std::convert::TryFrom<std::rc::Rc<[i32]>>` is not satisfied\n-}\n-\n-pub fn no_arc() {\n-    let boxed_slice = Arc::new([0; 33]) as Arc<[i32]>;\n-    let boxed_array = <Arc<[i32; 33]>>::try_from(boxed_slice);\n-    //~^ ERROR the trait bound `std::sync::Arc<[i32; 33]>: std::convert::From<std::sync::Arc<[i32]>>` is not satisfied\n-    //~^^ ERROR the trait bound `std::sync::Arc<[i32; 33]>: std::convert::TryFrom<std::sync::Arc<[i32]>>` is not satisfied\n-}\n-\n-fn main() {}"}, {"sha": "5c01603ab881c116310d13f0d4384c1505d30a55", "filename": "src/test/ui/const-generics/array-impls/alloc-types-no-impls-length-33.stderr", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/7d4a92d4f8dc03409984695d78893fffdd3ff1f9/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d4a92d4f8dc03409984695d78893fffdd3ff1f9/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Falloc-types-no-impls-length-33.stderr?ref=7d4a92d4f8dc03409984695d78893fffdd3ff1f9", "patch": "@@ -1,97 +0,0 @@\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/alloc-types-no-impls-length-33.rs:6:29\n-   |\n-LL |     let v: Vec<_> = [0; 33].into();\n-   |                             ^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[{integer}; 33]`\n-   |\n-   = note: required because of the requirements on the impl of `std::convert::From<[{integer}; 33]>` for `std::vec::Vec<{integer}>`\n-   = note: required because of the requirements on the impl of `std::convert::Into<std::vec::Vec<{integer}>>` for `[{integer}; 33]`\n-\n-error[E0277]: the trait bound `std::boxed::Box<[i32; 33]>: std::convert::From<std::boxed::Box<[i32]>>` is not satisfied\n-  --> $DIR/alloc-types-no-impls-length-33.rs:12:23\n-   |\n-LL |     let boxed_array = <Box<[i32; 33]>>::try_from(boxed_slice);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<std::boxed::Box<[i32]>>` is not implemented for `std::boxed::Box<[i32; 33]>`\n-   |\n-   = help: the following implementations were found:\n-             <std::boxed::Box<(dyn std::error::Error + 'a)> as std::convert::From<E>>\n-             <std::boxed::Box<(dyn std::error::Error + 'static)> as std::convert::From<&str>>\n-             <std::boxed::Box<(dyn std::error::Error + 'static)> as std::convert::From<std::borrow::Cow<'a, str>>>\n-             <std::boxed::Box<(dyn std::error::Error + 'static)> as std::convert::From<std::string::String>>\n-           and 22 others\n-   = note: required because of the requirements on the impl of `std::convert::Into<std::boxed::Box<[i32; 33]>>` for `std::boxed::Box<[i32]>`\n-   = note: required because of the requirements on the impl of `std::convert::TryFrom<std::boxed::Box<[i32]>>` for `std::boxed::Box<[i32; 33]>`\n-\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/alloc-types-no-impls-length-33.rs:15:42\n-   |\n-LL |     let boxed_slice = <Box<[i32]>>::from([0; 33]);\n-   |                                          ^^^^^^^\n-   |                                          |\n-   |                                          expected an implementor of trait `std::convert::From<[{integer}; 33]>`\n-   |                                          help: consider borrowing here: `&[0; 33]`\n-   |\n-   = note: the trait bound `[i32; 33]: std::convert::From<[{integer}; 33]>` is not satisfied\n-   = note: required because of the requirements on the impl of `std::convert::From<[i32; 33]>` for `std::boxed::Box<[i32]>`\n-   = note: required by `std::convert::From::from`\n-\n-error[E0277]: the trait bound `std::boxed::Box<[i32; 33]>: std::convert::TryFrom<std::boxed::Box<[i32]>>` is not satisfied\n-  --> $DIR/alloc-types-no-impls-length-33.rs:12:23\n-   |\n-LL |     let boxed_array = <Box<[i32; 33]>>::try_from(boxed_slice);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::TryFrom<std::boxed::Box<[i32]>>` is not implemented for `std::boxed::Box<[i32; 33]>`\n-   |\n-   = help: the following implementations were found:\n-             <std::boxed::Box<[T; N]> as std::convert::TryFrom<std::boxed::Box<[T]>>>\n-\n-error[E0277]: the trait bound `std::rc::Rc<[i32; 33]>: std::convert::From<std::rc::Rc<[i32]>>` is not satisfied\n-  --> $DIR/alloc-types-no-impls-length-33.rs:21:23\n-   |\n-LL |     let boxed_array = <Rc<[i32; 33]>>::try_from(boxed_slice);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<std::rc::Rc<[i32]>>` is not implemented for `std::rc::Rc<[i32; 33]>`\n-   |\n-   = help: the following implementations were found:\n-             <std::rc::Rc<B> as std::convert::From<std::borrow::Cow<'a, B>>>\n-             <std::rc::Rc<T> as std::convert::From<T>>\n-             <std::rc::Rc<T> as std::convert::From<std::boxed::Box<T>>>\n-             <std::rc::Rc<[T]> as std::convert::From<&[T]>>\n-           and 9 others\n-   = note: required because of the requirements on the impl of `std::convert::Into<std::rc::Rc<[i32; 33]>>` for `std::rc::Rc<[i32]>`\n-   = note: required because of the requirements on the impl of `std::convert::TryFrom<std::rc::Rc<[i32]>>` for `std::rc::Rc<[i32; 33]>`\n-\n-error[E0277]: the trait bound `std::rc::Rc<[i32; 33]>: std::convert::TryFrom<std::rc::Rc<[i32]>>` is not satisfied\n-  --> $DIR/alloc-types-no-impls-length-33.rs:21:23\n-   |\n-LL |     let boxed_array = <Rc<[i32; 33]>>::try_from(boxed_slice);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::TryFrom<std::rc::Rc<[i32]>>` is not implemented for `std::rc::Rc<[i32; 33]>`\n-   |\n-   = help: the following implementations were found:\n-             <std::rc::Rc<[T; N]> as std::convert::TryFrom<std::rc::Rc<[T]>>>\n-\n-error[E0277]: the trait bound `std::sync::Arc<[i32; 33]>: std::convert::From<std::sync::Arc<[i32]>>` is not satisfied\n-  --> $DIR/alloc-types-no-impls-length-33.rs:28:23\n-   |\n-LL |     let boxed_array = <Arc<[i32; 33]>>::try_from(boxed_slice);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::From<std::sync::Arc<[i32]>>` is not implemented for `std::sync::Arc<[i32; 33]>`\n-   |\n-   = help: the following implementations were found:\n-             <std::sync::Arc<B> as std::convert::From<std::borrow::Cow<'a, B>>>\n-             <std::sync::Arc<T> as std::convert::From<T>>\n-             <std::sync::Arc<T> as std::convert::From<std::boxed::Box<T>>>\n-             <std::sync::Arc<[T]> as std::convert::From<&[T]>>\n-           and 9 others\n-   = note: required because of the requirements on the impl of `std::convert::Into<std::sync::Arc<[i32; 33]>>` for `std::sync::Arc<[i32]>`\n-   = note: required because of the requirements on the impl of `std::convert::TryFrom<std::sync::Arc<[i32]>>` for `std::sync::Arc<[i32; 33]>`\n-\n-error[E0277]: the trait bound `std::sync::Arc<[i32; 33]>: std::convert::TryFrom<std::sync::Arc<[i32]>>` is not satisfied\n-  --> $DIR/alloc-types-no-impls-length-33.rs:28:23\n-   |\n-LL |     let boxed_array = <Arc<[i32; 33]>>::try_from(boxed_slice);\n-   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::convert::TryFrom<std::sync::Arc<[i32]>>` is not implemented for `std::sync::Arc<[i32; 33]>`\n-   |\n-   = help: the following implementations were found:\n-             <std::sync::Arc<[T; N]> as std::convert::TryFrom<std::sync::Arc<[T]>>>\n-\n-error: aborting due to 8 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "c609a7c6f92392d79414bcfa7df77fff9a737e1a", "filename": "src/test/ui/const-generics/array-impls/core-traits-impls-length-33.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-impls-length-33.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-impls-length-33.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-impls-length-33.rs?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -0,0 +1,66 @@\n+// check-pass\n+\n+pub fn yes_as_ref() -> impl AsRef<[u8]> {\n+    [0; 33]\n+}\n+\n+pub fn yes_as_mut() -> impl AsMut<[u8]> {\n+    [0; 33]\n+}\n+\n+pub fn yes_borrow() -> impl std::borrow::Borrow<[u8]> {\n+    [0; 33]\n+}\n+\n+pub fn yes_borrow_mut() -> impl std::borrow::BorrowMut<[u8]> {\n+    [0; 33]\n+}\n+\n+pub fn yes_try_from_slice() -> impl std::convert::TryFrom<&'static [u8]> {\n+    [0; 33]\n+}\n+\n+pub fn yes_ref_try_from_slice() -> impl std::convert::TryFrom<&'static [u8]> {\n+    let a: &'static _ = &[0; 33];\n+    a\n+}\n+\n+pub fn yes_hash() -> impl std::hash::Hash {\n+    [0; 33]\n+}\n+\n+pub fn yes_debug() -> impl std::fmt::Debug {\n+    [0; 33]\n+}\n+\n+pub fn yes_ref_into_iterator() -> impl IntoIterator<Item=&'static u8> {\n+    let a: &'static _ = &[0; 33];\n+    a\n+}\n+\n+pub fn yes_partial_eq() -> impl PartialEq<[u8; 33]> {\n+    [0; 33]\n+}\n+\n+pub fn yes_partial_eq_slice() -> impl PartialEq<[u8]> {\n+    [0; 33]\n+}\n+\n+pub fn yes_slice_partial_eq() -> impl PartialEq<[u8; 33]> {\n+    let a: &'static _ = &[0; 33];\n+    &a[..]\n+}\n+\n+pub fn yes_eq() -> impl Eq {\n+    [0; 33]\n+}\n+\n+pub fn yes_partial_ord() -> impl PartialOrd<[u8; 33]> {\n+    [0; 33]\n+}\n+\n+pub fn yes_ord() -> impl Ord {\n+    [0; 33]\n+}\n+\n+fn main() {}"}, {"sha": "8397d204f35cf76e9239a904fd4d865da38607c2", "filename": "src/test/ui/const-generics/array-impls/core-traits-no-impls-length-33.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7d4a92d4f8dc03409984695d78893fffdd3ff1f9/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d4a92d4f8dc03409984695d78893fffdd3ff1f9/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.rs?ref=7d4a92d4f8dc03409984695d78893fffdd3ff1f9", "patch": "@@ -1,29 +0,0 @@\n-pub fn no_debug() {\n-    println!(\"{:?}\", [0_usize; 33]);\n-    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-}\n-\n-pub fn no_hash() {\n-    use std::collections::HashSet;\n-    let mut set = HashSet::new();\n-    set.insert([0_usize; 33]);\n-    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-}\n-\n-pub fn no_partial_eq() -> bool {\n-    [0_usize; 33] == [1_usize; 33]\n-    //~^ ERROR binary operation `==` cannot be applied to type `[usize; 33]`\n-}\n-\n-pub fn no_partial_ord() -> bool {\n-    [0_usize; 33] < [1_usize; 33]\n-    //~^ ERROR binary operation `<` cannot be applied to type `[usize; 33]`\n-}\n-\n-pub fn no_into_iterator() {\n-    for _ in &[0_usize; 33] {\n-        //~^ ERROR the trait bound `&[usize; 33]: std::iter::IntoIterator` is not satisfied\n-    }\n-}\n-\n-fn main() {}"}, {"sha": "76ccc48c32ac1e34d4873509724449559a330eee", "filename": "src/test/ui/const-generics/array-impls/core-traits-no-impls-length-33.stderr", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/7d4a92d4f8dc03409984695d78893fffdd3ff1f9/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d4a92d4f8dc03409984695d78893fffdd3ff1f9/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Fcore-traits-no-impls-length-33.stderr?ref=7d4a92d4f8dc03409984695d78893fffdd3ff1f9", "patch": "@@ -1,51 +0,0 @@\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/core-traits-no-impls-length-33.rs:2:22\n-   |\n-LL |     println!(\"{:?}\", [0_usize; 33]);\n-   |                      ^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[usize; 33]`\n-   |\n-   = note: required because of the requirements on the impl of `std::fmt::Debug` for `[usize; 33]`\n-   = note: required by `std::fmt::Debug::fmt`\n-   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/core-traits-no-impls-length-33.rs:9:16\n-   |\n-LL |     set.insert([0_usize; 33]);\n-   |                ^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[usize; 33]`\n-   |\n-   = note: required because of the requirements on the impl of `std::cmp::Eq` for `[usize; 33]`\n-\n-error[E0369]: binary operation `==` cannot be applied to type `[usize; 33]`\n-  --> $DIR/core-traits-no-impls-length-33.rs:14:19\n-   |\n-LL |     [0_usize; 33] == [1_usize; 33]\n-   |     ------------- ^^ ------------- [usize; 33]\n-   |     |\n-   |     [usize; 33]\n-\n-error[E0369]: binary operation `<` cannot be applied to type `[usize; 33]`\n-  --> $DIR/core-traits-no-impls-length-33.rs:19:19\n-   |\n-LL |     [0_usize; 33] < [1_usize; 33]\n-   |     ------------- ^ ------------- [usize; 33]\n-   |     |\n-   |     [usize; 33]\n-\n-error[E0277]: the trait bound `&[usize; 33]: std::iter::IntoIterator` is not satisfied\n-  --> $DIR/core-traits-no-impls-length-33.rs:24:14\n-   |\n-LL |     for _ in &[0_usize; 33] {\n-   |              ^^^^^^^^^^^^^^ the trait `std::iter::IntoIterator` is not implemented for `&[usize; 33]`\n-   |\n-   = help: the following implementations were found:\n-             <&'a [T; N] as std::iter::IntoIterator>\n-             <&'a [T] as std::iter::IntoIterator>\n-             <&'a mut [T; N] as std::iter::IntoIterator>\n-             <&'a mut [T] as std::iter::IntoIterator>\n-   = note: required by `std::iter::IntoIterator::into_iter`\n-\n-error: aborting due to 5 previous errors\n-\n-Some errors have detailed explanations: E0277, E0369.\n-For more information about an error, try `rustc --explain E0277`."}, {"sha": "0aeba8607e818b774b82c596ffbc57f084f1ac0f", "filename": "src/test/ui/const-generics/array-impls/into-iter-impls-length-33.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-33.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-33.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-impls-length-33.rs?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -0,0 +1,41 @@\n+// check-pass\n+\n+#![feature(array_value_iter)]\n+#![feature(trusted_len)]\n+\n+use std::{\n+    array::IntoIter,\n+    fmt::Debug,\n+    iter::{ExactSizeIterator, FusedIterator, TrustedLen},\n+};\n+\n+pub fn yes_iterator() -> impl Iterator<Item = i32> {\n+    IntoIter::new([0i32; 32])\n+}\n+\n+pub fn yes_double_ended_iterator() -> impl DoubleEndedIterator {\n+    IntoIter::new([0i32; 32])\n+}\n+\n+pub fn yes_exact_size_iterator() -> impl ExactSizeIterator {\n+    IntoIter::new([0i32; 32])\n+}\n+\n+pub fn yes_fused_iterator() -> impl FusedIterator {\n+    IntoIter::new([0i32; 32])\n+}\n+\n+pub fn yes_trusted_len() -> impl TrustedLen {\n+    IntoIter::new([0i32; 32])\n+}\n+\n+pub fn yes_clone() -> impl Clone {\n+    IntoIter::new([0i32; 32])\n+}\n+\n+pub fn yes_debug() -> impl Debug {\n+    IntoIter::new([0i32; 32])\n+}\n+\n+\n+fn main() {}"}, {"sha": "a0bbd2ce64add0adfe8ba440d30b47fade1407c8", "filename": "src/test/ui/const-generics/array-impls/into-iter-no-impls-length-33.rs", "status": "removed", "additions": 0, "deletions": 53, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/7d4a92d4f8dc03409984695d78893fffdd3ff1f9/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-no-impls-length-33.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d4a92d4f8dc03409984695d78893fffdd3ff1f9/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-no-impls-length-33.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-no-impls-length-33.rs?ref=7d4a92d4f8dc03409984695d78893fffdd3ff1f9", "patch": "@@ -1,53 +0,0 @@\n-#![feature(array_value_iter)]\n-#![feature(trusted_len)]\n-\n-use std::{\n-    array::IntoIter,\n-    fmt::Debug,\n-    iter::{ExactSizeIterator, FusedIterator, TrustedLen},\n-};\n-\n-pub fn no_iterator() -> impl Iterator<Item = i32> {\n-    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-    IntoIter::new([0i32; 33])\n-    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-}\n-\n-pub fn no_double_ended_iterator() -> impl DoubleEndedIterator {\n-    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-    IntoIter::new([0i32; 33])\n-    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-}\n-\n-pub fn no_exact_size_iterator() -> impl ExactSizeIterator {\n-    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-    IntoIter::new([0i32; 33])\n-    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-}\n-\n-pub fn no_fused_iterator() -> impl FusedIterator {\n-    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-    IntoIter::new([0i32; 33])\n-    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-}\n-\n-pub fn no_trusted_len() -> impl TrustedLen {\n-    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-    IntoIter::new([0i32; 33])\n-    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-}\n-\n-pub fn no_clone() -> impl Clone {\n-    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-    IntoIter::new([0i32; 33])\n-    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-}\n-\n-pub fn no_debug() -> impl Debug {\n-    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-    IntoIter::new([0i32; 33])\n-    //~^ ERROR arrays only have std trait implementations for lengths 0..=32\n-}\n-\n-\n-fn main() {}"}, {"sha": "ceda31550ff44b766b8dfbfafc48b6f2a43cafa3", "filename": "src/test/ui/const-generics/array-impls/into-iter-no-impls-length-33.stderr", "status": "removed", "additions": 0, "deletions": 143, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/7d4a92d4f8dc03409984695d78893fffdd3ff1f9/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-no-impls-length-33.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d4a92d4f8dc03409984695d78893fffdd3ff1f9/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-no-impls-length-33.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Farray-impls%2Finto-iter-no-impls-length-33.stderr?ref=7d4a92d4f8dc03409984695d78893fffdd3ff1f9", "patch": "@@ -1,143 +0,0 @@\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/into-iter-no-impls-length-33.rs:12:19\n-   |\n-LL |     IntoIter::new([0i32; 33])\n-   |                   ^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n-   |\n-   = note: required by `std::array::IntoIter::<T, N>::new`\n-\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/into-iter-no-impls-length-33.rs:10:25\n-   |\n-LL | pub fn no_iterator() -> impl Iterator<Item = i32> {\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n-LL |\n-LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33_usize>`\n-   |\n-   = note: required because of the requirements on the impl of `std::iter::Iterator` for `std::array::IntoIter<i32, 33_usize>`\n-   = note: the return type of a function must have a statically known size\n-\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/into-iter-no-impls-length-33.rs:18:19\n-   |\n-LL |     IntoIter::new([0i32; 33])\n-   |                   ^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n-   |\n-   = note: required by `std::array::IntoIter::<T, N>::new`\n-\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/into-iter-no-impls-length-33.rs:16:38\n-   |\n-LL | pub fn no_double_ended_iterator() -> impl DoubleEndedIterator {\n-   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n-LL |\n-LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33_usize>`\n-   |\n-   = note: required because of the requirements on the impl of `std::iter::DoubleEndedIterator` for `std::array::IntoIter<i32, 33_usize>`\n-   = note: the return type of a function must have a statically known size\n-\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/into-iter-no-impls-length-33.rs:24:19\n-   |\n-LL |     IntoIter::new([0i32; 33])\n-   |                   ^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n-   |\n-   = note: required by `std::array::IntoIter::<T, N>::new`\n-\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/into-iter-no-impls-length-33.rs:22:36\n-   |\n-LL | pub fn no_exact_size_iterator() -> impl ExactSizeIterator {\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n-LL |\n-LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33_usize>`\n-   |\n-   = note: required because of the requirements on the impl of `std::iter::ExactSizeIterator` for `std::array::IntoIter<i32, 33_usize>`\n-   = note: the return type of a function must have a statically known size\n-\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/into-iter-no-impls-length-33.rs:30:19\n-   |\n-LL |     IntoIter::new([0i32; 33])\n-   |                   ^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n-   |\n-   = note: required by `std::array::IntoIter::<T, N>::new`\n-\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/into-iter-no-impls-length-33.rs:28:31\n-   |\n-LL | pub fn no_fused_iterator() -> impl FusedIterator {\n-   |                               ^^^^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n-LL |\n-LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33_usize>`\n-   |\n-   = note: required because of the requirements on the impl of `std::iter::FusedIterator` for `std::array::IntoIter<i32, 33_usize>`\n-   = note: the return type of a function must have a statically known size\n-\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/into-iter-no-impls-length-33.rs:36:19\n-   |\n-LL |     IntoIter::new([0i32; 33])\n-   |                   ^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n-   |\n-   = note: required by `std::array::IntoIter::<T, N>::new`\n-\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/into-iter-no-impls-length-33.rs:34:28\n-   |\n-LL | pub fn no_trusted_len() -> impl TrustedLen {\n-   |                            ^^^^^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n-LL |\n-LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33_usize>`\n-   |\n-   = note: required because of the requirements on the impl of `std::iter::TrustedLen` for `std::array::IntoIter<i32, 33_usize>`\n-   = note: the return type of a function must have a statically known size\n-\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/into-iter-no-impls-length-33.rs:42:19\n-   |\n-LL |     IntoIter::new([0i32; 33])\n-   |                   ^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n-   |\n-   = note: required by `std::array::IntoIter::<T, N>::new`\n-\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/into-iter-no-impls-length-33.rs:40:22\n-   |\n-LL | pub fn no_clone() -> impl Clone {\n-   |                      ^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n-LL |\n-LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33_usize>`\n-   |\n-   = note: required because of the requirements on the impl of `std::clone::Clone` for `std::array::IntoIter<i32, 33_usize>`\n-   = note: the return type of a function must have a statically known size\n-\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/into-iter-no-impls-length-33.rs:48:19\n-   |\n-LL |     IntoIter::new([0i32; 33])\n-   |                   ^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n-   |\n-   = note: required by `std::array::IntoIter::<T, N>::new`\n-\n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/into-iter-no-impls-length-33.rs:46:22\n-   |\n-LL | pub fn no_debug() -> impl Debug {\n-   |                      ^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[i32; 33]`\n-LL |\n-LL |     IntoIter::new([0i32; 33])\n-   |     ------------------------- this returned value is of type `std::array::IntoIter<i32, 33_usize>`\n-   |\n-   = note: required because of the requirements on the impl of `std::fmt::Debug` for `std::array::IntoIter<i32, 33_usize>`\n-   = note: the return type of a function must have a statically known size\n-\n-error: aborting due to 14 previous errors\n-\n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "2cd035639ee5cca80eb7d322b95638e1c71d560f", "filename": "src/test/ui/const-generics/broken-mir-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.rs?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -1,10 +1,11 @@\n+// run-pass\n+\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n \n use std::fmt::Debug;\n \n #[derive(Debug)]\n struct S<T: Debug, const N: usize>([T; N]);\n-//~^ ERROR arrays only have std trait implementations for lengths 0..=32\n \n fn main() {}"}, {"sha": "c36ef8450976c9aa55f888b5864a98ac438b4e12", "filename": "src/test/ui/const-generics/broken-mir-2.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fbroken-mir-2.stderr?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -1,23 +1,11 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/broken-mir-2.rs:1:12\n+  --> $DIR/broken-mir-2.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/broken-mir-2.rs:7:36\n-   |\n-LL | struct S<T: Debug, const N: usize>([T; N]);\n-   |                                    ^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[T; N]`\n-   |\n-   = note: required because of the requirements on the impl of `std::fmt::Debug` for `[T; N]`\n-   = note: required because of the requirements on the impl of `std::fmt::Debug` for `&[T; N]`\n-   = note: required for the cast to the object type `dyn std::fmt::Debug`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to previous error; 1 warning emitted\n+warning: 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "36272ae86199d68808dd29390d2bf95e7e786ea3", "filename": "src/test/ui/const-generics/derive-debug-array-wrapper.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.rs?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -1,9 +1,11 @@\n+// run-pass\n+\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n \n #[derive(Debug)]\n struct X<const N: usize> {\n-    a: [u32; N], //~ ERROR arrays only have std trait implementations for lengths 0..=32\n+    a: [u32; N],\n }\n \n fn main() {}"}, {"sha": "8f7ab822554a2abefc6a545b225378cb127861e2", "filename": "src/test/ui/const-generics/derive-debug-array-wrapper.stderr", "status": "modified", "additions": 2, "deletions": 14, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fderive-debug-array-wrapper.stderr?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -1,23 +1,11 @@\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/derive-debug-array-wrapper.rs:1:12\n+  --> $DIR/derive-debug-array-wrapper.rs:3:12\n    |\n LL | #![feature(const_generics)]\n    |            ^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-error[E0277]: arrays only have std trait implementations for lengths 0..=32\n-  --> $DIR/derive-debug-array-wrapper.rs:6:5\n-   |\n-LL |     a: [u32; N],\n-   |     ^^^^^^^^^^^ the trait `std::array::LengthAtMost32` is not implemented for `[u32; N]`\n-   |\n-   = note: required because of the requirements on the impl of `std::fmt::Debug` for `[u32; N]`\n-   = note: required because of the requirements on the impl of `std::fmt::Debug` for `&[u32; N]`\n-   = note: required for the cast to the object type `dyn std::fmt::Debug`\n-   = note: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to previous error; 1 warning emitted\n+warning: 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "af494e37349146f91cb3a196a0dc5a1df5d849b0", "filename": "src/test/ui/consts/too_generic_eval_ice.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.rs?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -6,7 +6,8 @@ impl<A, B> Foo<A, B> {\n     pub fn crash() -> bool {\n         [5; Self::HOST_SIZE] == [6; 0]\n         //~^ ERROR constant expression depends on a generic parameter\n-        //~| ERROR binary operation `==` cannot be applied to type `[{integer}; _]`\n+        //~| ERROR constant expression depends on a generic parameter\n+        //~| ERROR can't compare `[{integer}; _]` with `[{integer}; 0]`\n     }\n }\n "}, {"sha": "d5816fbb8e4fb46ec06c514b2aa94cf5bfaf59ca", "filename": "src/test/ui/consts/too_generic_eval_ice.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Ftoo_generic_eval_ice.stderr?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -6,14 +6,22 @@ LL |         [5; Self::HOST_SIZE] == [6; 0]\n    |\n    = note: this may fail depending on what value the parameter takes\n \n-error[E0369]: binary operation `==` cannot be applied to type `[{integer}; _]`\n+error: constant expression depends on a generic parameter\n+  --> $DIR/too_generic_eval_ice.rs:7:30\n+   |\n+LL |         [5; Self::HOST_SIZE] == [6; 0]\n+   |                              ^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error[E0277]: can't compare `[{integer}; _]` with `[{integer}; 0]`\n   --> $DIR/too_generic_eval_ice.rs:7:30\n    |\n LL |         [5; Self::HOST_SIZE] == [6; 0]\n-   |         -------------------- ^^ ------ [{integer}; 0]\n-   |         |\n-   |         [{integer}; _]\n+   |                              ^^ no implementation for `[{integer}; _] == [{integer}; 0]`\n+   |\n+   = help: the trait `std::cmp::PartialEq<[{integer}; 0]>` is not implemented for `[{integer}; _]`\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0369`.\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "561376c8f059d1eb18e9fcee9ada5c40d0f0e47f", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.fixed", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.fixed?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -13,10 +13,10 @@ fn main() {\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n     big.iter();\n-    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n     [0u8; 33].iter();\n-    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n \n     Box::new(small).iter();\n@@ -26,10 +26,10 @@ fn main() {\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n     Box::new(big).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n     Box::new([0u8; 33]).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n \n     Box::new(Box::new(small)).iter();\n@@ -39,10 +39,10 @@ fn main() {\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n     Box::new(Box::new(big)).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n     Box::new(Box::new([0u8; 33])).iter();\n-    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n \n     // Expressions that should not"}, {"sha": "cc310191f0caf3d5d6c5c15bb27ea10e576dac53", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.rs?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -13,10 +13,10 @@ fn main() {\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n     big.into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n     [0u8; 33].into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n \n     Box::new(small).into_iter();\n@@ -26,10 +26,10 @@ fn main() {\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n     Box::new(big).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n     Box::new([0u8; 33]).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n \n     Box::new(Box::new(small)).into_iter();\n@@ -39,10 +39,10 @@ fn main() {\n     //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n     Box::new(Box::new(big)).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n     Box::new(Box::new([0u8; 33])).into_iter();\n-    //~^ WARNING this method call currently resolves to `<&[T] as IntoIterator>::into_iter`\n+    //~^ WARNING this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter`\n     //~| WARNING this was previously accepted by the compiler but is being phased out\n \n     // Expressions that should not"}, {"sha": "b31f444b36e9964fb65ee29c7929b726d1e9271b", "filename": "src/test/ui/iterators/into-iter-on-arrays-lint.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eff62069ad602090e8d27b83cffd9e77479ed4be/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Finto-iter-on-arrays-lint.stderr?ref=eff62069ad602090e8d27b83cffd9e77479ed4be", "patch": "@@ -17,7 +17,7 @@ LL |     [1, 2].into_iter();\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n-warning: this method call currently resolves to `<&[T] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n   --> $DIR/into-iter-on-arrays-lint.rs:15:9\n    |\n LL |     big.into_iter();\n@@ -26,7 +26,7 @@ LL |     big.into_iter();\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n-warning: this method call currently resolves to `<&[T] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n   --> $DIR/into-iter-on-arrays-lint.rs:18:15\n    |\n LL |     [0u8; 33].into_iter();\n@@ -53,7 +53,7 @@ LL |     Box::new([1, 2]).into_iter();\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n-warning: this method call currently resolves to `<&[T] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n   --> $DIR/into-iter-on-arrays-lint.rs:28:19\n    |\n LL |     Box::new(big).into_iter();\n@@ -62,7 +62,7 @@ LL |     Box::new(big).into_iter();\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n-warning: this method call currently resolves to `<&[T] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n   --> $DIR/into-iter-on-arrays-lint.rs:31:25\n    |\n LL |     Box::new([0u8; 33]).into_iter();\n@@ -89,7 +89,7 @@ LL |     Box::new(Box::new([1, 2])).into_iter();\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n-warning: this method call currently resolves to `<&[T] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n   --> $DIR/into-iter-on-arrays-lint.rs:41:29\n    |\n LL |     Box::new(Box::new(big)).into_iter();\n@@ -98,7 +98,7 @@ LL |     Box::new(Box::new(big)).into_iter();\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #66145 <https://github.com/rust-lang/rust/issues/66145>\n \n-warning: this method call currently resolves to `<&[T] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n+warning: this method call currently resolves to `<&[T; N] as IntoIterator>::into_iter` (due to autoref coercions), but that might change in the future when `IntoIterator` impls for arrays are added.\n   --> $DIR/into-iter-on-arrays-lint.rs:44:35\n    |\n LL |     Box::new(Box::new([0u8; 33])).into_iter();"}]}