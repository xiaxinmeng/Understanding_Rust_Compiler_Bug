{"sha": "6beb06ee5ef6f031aab7586211f1818d346033d6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiZWIwNmVlNWVmNmYwMzFhYWI3NTg2MjExZjE4MThkMzQ2MDMzZDY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-28T00:40:10Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-01-28T00:40:10Z"}, "message": "Auto merge of #47746 - varkor:never-type-ice, r=nikomatsakis\n\nFix never-type rvalue ICE\n\nThis fixes #43061.\nr? @nikomatsakis\n\nA small post-mortem as a follow-up to our investigations in https://github.com/rust-lang/rust/pull/47291:\nThe problem as I understand it is that when `NeverToAny` coercions are made, the expression/statement that is coerced may be enclosed in a block. In our case, the statement `x;` was being transformed to something like: `NeverToAny( {x;} )`. Then, `NeverToAny` is transformed into an expression:\nhttps://github.com/rust-lang/rust/blob/000fbbc9b8f88adc6a417f1caef41161f104250f/src/librustc_mir/build/expr/into.rs#L52-L59\nWhich ends up calling `ast_block_stmts` on the block `{x;}`, which triggers this condition:\nhttps://github.com/rust-lang/rust/blob/000fbbc9b8f88adc6a417f1caef41161f104250f/src/librustc_mir/build/block.rs#L141-L147\nIn our case, there is no return expression, so `push_assign_unit` is called. But the block has already been recorded as _diverging_, meaning the result of the block will be assigned to a location of type `!`, rather than `()`. This causes the MIR error.\nI'm assuming the `NeverToAny` coercion code is doing what it's supposed to (there don't seem to be any other problems), so fixing the issue simply consists of checking that the destination for the return value actually _is_ supposed to be a unit. (If no return value is given, the only other possible type for the return value is `!`, which can just be ignored, as it will be unreachable anyway.)\n\nI checked the other cases of `push_assign_unit`, and it didn't look like they could be affected by the divergence issue (blocks are kind of special-cased in this regard as far as I can tell), so this should be sufficient to fix the issue.", "tree": {"sha": "ba541694b09ecbc9a955e0256e240770d70d0d5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba541694b09ecbc9a955e0256e240770d70d0d5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6beb06ee5ef6f031aab7586211f1818d346033d6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6beb06ee5ef6f031aab7586211f1818d346033d6", "html_url": "https://github.com/rust-lang/rust/commit/6beb06ee5ef6f031aab7586211f1818d346033d6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6beb06ee5ef6f031aab7586211f1818d346033d6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d6e5b9da0865fbc9fa54edb324fefe80f358da7", "html_url": "https://github.com/rust-lang/rust/commit/7d6e5b9da0865fbc9fa54edb324fefe80f358da7"}, {"sha": "adcb37e275ee9b06114d4debdfe453cbc89b7716", "url": "https://api.github.com/repos/rust-lang/rust/commits/adcb37e275ee9b06114d4debdfe453cbc89b7716", "html_url": "https://github.com/rust-lang/rust/commit/adcb37e275ee9b06114d4debdfe453cbc89b7716"}], "stats": {"total": 60, "additions": 58, "deletions": 2}, "files": [{"sha": "ef30b1e452230df786add31df2af97b9344bda0d", "filename": "src/librustc_mir/build/block.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6beb06ee5ef6f031aab7586211f1818d346033d6/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6beb06ee5ef6f031aab7586211f1818d346033d6/src%2Flibrustc_mir%2Fbuild%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fblock.rs?ref=6beb06ee5ef6f031aab7586211f1818d346033d6", "patch": "@@ -143,7 +143,17 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         if let Some(expr) = expr {\n             unpack!(block = this.into(destination, block, expr));\n         } else {\n-            this.cfg.push_assign_unit(block, source_info, destination);\n+            // If a block has no trailing expression, then it is given an implicit return type.\n+            // This return type is usually `()`, unless the block is diverging, in which case the\n+            // return type is `!`. For the unit type, we need to actually return the unit, but in\n+            // the case of `!`, no return value is required, as the block will never return.\n+            let tcx = this.hir.tcx();\n+            let ty = destination.ty(&this.local_decls, tcx).to_ty(tcx);\n+            if ty.is_nil() {\n+                // We only want to assign an implicit `()` as the return value of the block if the\n+                // block does not diverge. (Otherwise, we may try to assign a unit to a `!`-type.)\n+                this.cfg.push_assign_unit(block, source_info, destination);\n+            }\n         }\n         // Finally, we pop all the let scopes before exiting out from the scope of block\n         // itself."}, {"sha": "68b23d1ae17e85c57f2eb192237c5946c31c7327", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6beb06ee5ef6f031aab7586211f1818d346033d6/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6beb06ee5ef6f031aab7586211f1818d346033d6/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=6beb06ee5ef6f031aab7586211f1818d346033d6", "patch": "@@ -272,7 +272,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             ExprKind::Continue { .. } |\n             ExprKind::Break { .. } |\n             ExprKind::InlineAsm { .. } |\n-            ExprKind::Return {.. } => {\n+            ExprKind::Return { .. } => {\n                 unpack!(block = this.stmt_expr(block, expr));\n                 this.cfg.push_assign_unit(block, source_info, destination);\n                 block.unit()"}, {"sha": "bda288f40869b225aabd345e3681d8138d4237af", "filename": "src/test/run-pass/never-type-rvalues.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/6beb06ee5ef6f031aab7586211f1818d346033d6/src%2Ftest%2Frun-pass%2Fnever-type-rvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6beb06ee5ef6f031aab7586211f1818d346033d6/src%2Ftest%2Frun-pass%2Fnever-type-rvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnever-type-rvalues.rs?ref=6beb06ee5ef6f031aab7586211f1818d346033d6", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(never_type)]\n+#![allow(dead_code)]\n+#![allow(path_statements)]\n+#![allow(unreachable_patterns)]\n+\n+fn never_direct(x: !) {\n+    x;\n+}\n+\n+fn never_ref_pat(ref x: !) {\n+    *x;\n+}\n+\n+fn never_ref(x: &!) {\n+    let &y = x;\n+    y;\n+}\n+\n+fn never_pointer(x: *const !) {\n+    unsafe {\n+        *x;\n+    }\n+}\n+\n+fn never_slice(x: &[!]) {\n+    x[0];\n+}\n+\n+fn never_match(x: Result<(), !>) {\n+    match x {\n+        Ok(_) => {},\n+        Err(_) => {},\n+    }\n+}\n+\n+pub fn main() { }"}]}