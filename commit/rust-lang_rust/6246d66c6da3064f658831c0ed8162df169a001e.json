{"sha": "6246d66c6da3064f658831c0ed8162df169a001e", "node_id": "C_kwDOAAsO6NoAKDYyNDZkNjZjNmRhMzA2NGY2NTg4MzFjMGVkODE2MmRmMTY5YTAwMWU", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-07-13T14:10:19Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-07-20T13:53:01Z"}, "message": "passes: improved partial stabilization diagnostic\n\nImproves the diagnostic when a feature attribute is specified\nunnecessarily but the feature implies another (i.e. it was partially\nstabilized) to refer to the implied feature.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "511a24b7f63c0ec38322641d45a7751ff5fe4219", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/511a24b7f63c0ec38322641d45a7751ff5fe4219"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6246d66c6da3064f658831c0ed8162df169a001e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6246d66c6da3064f658831c0ed8162df169a001e", "html_url": "https://github.com/rust-lang/rust/commit/6246d66c6da3064f658831c0ed8162df169a001e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6246d66c6da3064f658831c0ed8162df169a001e/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97edb9f336e98c0597210092e2e0ef0ee1576e24", "url": "https://api.github.com/repos/rust-lang/rust/commits/97edb9f336e98c0597210092e2e0ef0ee1576e24", "html_url": "https://github.com/rust-lang/rust/commit/97edb9f336e98c0597210092e2e0ef0ee1576e24"}], "stats": {"total": 129, "additions": 115, "deletions": 14}, "files": [{"sha": "aa5705d3fcdc3c368820455749c6d6906e893ee5", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6246d66c6da3064f658831c0ed8162df169a001e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6246d66c6da3064f658831c0ed8162df169a001e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=6246d66c6da3064f658831c0ed8162df169a001e", "patch": "@@ -951,6 +951,13 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         tcx.arena.alloc_from_iter(self.root.lib_features.decode(self))\n     }\n \n+    /// Iterates over the stability implications in the given crate (when a `#[unstable]` attribute\n+    /// has an `implied_by` meta item, then the mapping from the implied feature to the actual\n+    /// feature is a stability implication).\n+    fn get_stability_implications(self, tcx: TyCtxt<'tcx>) -> &'tcx [(Symbol, Symbol)] {\n+        tcx.arena.alloc_from_iter(self.root.stability_implications.decode(self))\n+    }\n+\n     /// Iterates over the language items in the given crate.\n     fn get_lang_items(self, tcx: TyCtxt<'tcx>) -> &'tcx [(DefId, usize)] {\n         tcx.arena.alloc_from_iter("}, {"sha": "65cae29c58dcbdd21accf3086843208d21f3f1de", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6246d66c6da3064f658831c0ed8162df169a001e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6246d66c6da3064f658831c0ed8162df169a001e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=6246d66c6da3064f658831c0ed8162df169a001e", "patch": "@@ -291,6 +291,9 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n         tcx.arena.alloc_slice(&result)\n     }\n     defined_lib_features => { cdata.get_lib_features(tcx) }\n+    stability_implications => {\n+        cdata.get_stability_implications(tcx).iter().copied().collect()\n+    }\n     is_intrinsic => { cdata.get_is_intrinsic(def_id.index) }\n     defined_lang_items => { cdata.get_lang_items(tcx) }\n     diagnostic_items => { cdata.get_diagnostic_items() }"}, {"sha": "50d983754e89c6204e1dbdc3905da4bda237b821", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6246d66c6da3064f658831c0ed8162df169a001e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6246d66c6da3064f658831c0ed8162df169a001e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=6246d66c6da3064f658831c0ed8162df169a001e", "patch": "@@ -538,6 +538,11 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let lib_features = self.encode_lib_features();\n         let lib_feature_bytes = self.position() - i;\n \n+        // Encode the stability implications.\n+        i = self.position();\n+        let stability_implications = self.encode_stability_implications();\n+        let stability_implications_bytes = self.position() - i;\n+\n         // Encode the language items.\n         i = self.position();\n         let lang_items = self.encode_lang_items();\n@@ -686,6 +691,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             crate_deps,\n             dylib_dependency_formats,\n             lib_features,\n+            stability_implications,\n             lang_items,\n             diagnostic_items,\n             lang_items_missing,\n@@ -710,6 +716,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         let computed_total_bytes = preamble_bytes\n             + dep_bytes\n             + lib_feature_bytes\n+            + stability_implications_bytes\n             + lang_item_bytes\n             + diagnostic_item_bytes\n             + native_lib_bytes\n@@ -761,6 +768,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             p(\"preamble\", preamble_bytes);\n             p(\"dep\", dep_bytes);\n             p(\"lib feature\", lib_feature_bytes);\n+            p(\"stability_implications\", stability_implications_bytes);\n             p(\"lang item\", lang_item_bytes);\n             p(\"diagnostic item\", diagnostic_item_bytes);\n             p(\"native lib\", native_lib_bytes);\n@@ -1777,6 +1785,13 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n         self.lazy_array(lib_features.to_vec())\n     }\n \n+    fn encode_stability_implications(&mut self) -> LazyArray<(Symbol, Symbol)> {\n+        empty_proc_macro!(self);\n+        let tcx = self.tcx;\n+        let implications = tcx.stability_implications(LOCAL_CRATE);\n+        self.lazy_array(implications.iter().map(|(k, v)| (*k, *v)))\n+    }\n+\n     fn encode_diagnostic_items(&mut self) -> LazyArray<(Symbol, DefIndex)> {\n         empty_proc_macro!(self);\n         let tcx = self.tcx;"}, {"sha": "0f291f926477702c9924e57f7dff06361f085aa2", "filename": "compiler/rustc_metadata/src/rmeta/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6246d66c6da3064f658831c0ed8162df169a001e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6246d66c6da3064f658831c0ed8162df169a001e/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fmod.rs?ref=6246d66c6da3064f658831c0ed8162df169a001e", "patch": "@@ -226,6 +226,7 @@ pub(crate) struct CrateRoot {\n     crate_deps: LazyArray<CrateDep>,\n     dylib_dependency_formats: LazyArray<Option<LinkagePreference>>,\n     lib_features: LazyArray<(Symbol, Option<Symbol>)>,\n+    stability_implications: LazyArray<(Symbol, Symbol)>,\n     lang_items: LazyArray<(DefIndex, usize)>,\n     lang_items_missing: LazyArray<lang_items::LangItem>,\n     diagnostic_items: LazyArray<(Symbol, DefIndex)>,"}, {"sha": "0fbad3f0f0f06761c56b77ce6740cfdc936eb1ba", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6246d66c6da3064f658831c0ed8162df169a001e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6246d66c6da3064f658831c0ed8162df169a001e/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=6246d66c6da3064f658831c0ed8162df169a001e", "patch": "@@ -62,6 +62,19 @@ pub struct Index {\n     pub stab_map: FxHashMap<LocalDefId, Stability>,\n     pub const_stab_map: FxHashMap<LocalDefId, ConstStability>,\n     pub depr_map: FxHashMap<LocalDefId, DeprecationEntry>,\n+    /// Mapping from feature name to feature name based on the `implied_by` field of `#[unstable]`\n+    /// attributes. If a `#[unstable(feature = \"implier\", implied_by = \"impliee\")]` attribute\n+    /// exists, then this map will have a `impliee -> implier` entry.\n+    ///\n+    /// This mapping is necessary unless both the `#[stable]` and `#[unstable]` attributes should\n+    /// specify their implications (both `implies` and `implied_by`). If only one of the two\n+    /// attributes do (as in the current implementation, `implied_by` in `#[unstable]`), then this\n+    /// mapping is necessary for diagnostics. When a \"unnecessary feature attribute\" error is\n+    /// reported, only the `#[stable]` attribute information is available, so the map is necessary\n+    /// to know that the feature implies another feature. If it were reversed, and the `#[stable]`\n+    /// attribute had an `implies` meta item, then a map would be necessary when avoiding a \"use of\n+    /// unstable feature\" error for a feature that was implied.\n+    pub implications: FxHashMap<Symbol, Symbol>,\n }\n \n impl Index {"}, {"sha": "466a0fc25f7d11ca3563cdd7a377aa4f55586d02", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6246d66c6da3064f658831c0ed8162df169a001e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6246d66c6da3064f658831c0ed8162df169a001e/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=6246d66c6da3064f658831c0ed8162df169a001e", "patch": "@@ -1634,11 +1634,15 @@ rustc_queries! {\n         storage(ArenaCacheSelector<'tcx>)\n         desc { \"calculating the lib features map\" }\n     }\n-    query defined_lib_features(_: CrateNum)\n-        -> &'tcx [(Symbol, Option<Symbol>)] {\n+    query defined_lib_features(_: CrateNum) -> &'tcx [(Symbol, Option<Symbol>)] {\n         desc { \"calculating the lib features defined in a crate\" }\n         separate_provide_extern\n     }\n+    query stability_implications(_: CrateNum) -> FxHashMap<Symbol, Symbol> {\n+        storage(ArenaCacheSelector<'tcx>)\n+        desc { \"calculating the implications between `#[unstable]` features defined in a crate\" }\n+        separate_provide_extern\n+    }\n     /// Whether the function is an intrinsic\n     query is_intrinsic(def_id: DefId) -> bool {\n         desc { |tcx| \"is_intrinsic({})\", tcx.def_path_str(def_id) }"}, {"sha": "9cacda041f22e730806f05454c90cd1eed8aa65c", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 50, "deletions": 8, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/6246d66c6da3064f658831c0ed8162df169a001e/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6246d66c6da3064f658831c0ed8162df169a001e/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=6246d66c6da3064f658831c0ed8162df169a001e", "patch": "@@ -2,9 +2,9 @@\n //! propagating default levels lexically from parent to children ast nodes.\n \n use attr::StabilityLevel;\n-use rustc_attr::{self as attr, ConstStability, Stability};\n+use rustc_attr::{self as attr, ConstStability, Stability, Unstable};\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n-use rustc_errors::struct_span_err;\n+use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n@@ -265,6 +265,10 @@ impl<'a, 'tcx> Annotator<'a, 'tcx> {\n                 }\n             }\n \n+            if let Stability { level: Unstable { implied_by: Some(implied_by), .. }, feature } = stab {\n+                self.index.implications.insert(implied_by, feature);\n+            }\n+\n             self.index.stab_map.insert(def_id, stab);\n             stab\n         });\n@@ -610,6 +614,7 @@ fn stability_index(tcx: TyCtxt<'_>, (): ()) -> Index {\n         stab_map: Default::default(),\n         const_stab_map: Default::default(),\n         depr_map: Default::default(),\n+        implications: Default::default(),\n     };\n \n     {\n@@ -668,6 +673,7 @@ pub(crate) fn provide(providers: &mut Providers) {\n     *providers = Providers {\n         check_mod_unstable_api_usage,\n         stability_index,\n+        stability_implications: |tcx, _| tcx.stability().implications.clone(),\n         lookup_stability: |tcx, id| tcx.stability().local_stability(id.expect_local()),\n         lookup_const_stability: |tcx, id| tcx.stability().local_const_stability(id.expect_local()),\n         lookup_deprecation_entry: |tcx, id| {\n@@ -946,11 +952,18 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     remaining_lib_features.remove(&sym::libc);\n     remaining_lib_features.remove(&sym::test);\n \n+    let mut implications = tcx.stability_implications(rustc_hir::def_id::LOCAL_CRATE).clone();\n+    for &cnum in tcx.crates(()) {\n+        implications.extend(tcx.stability_implications(cnum));\n+    }\n+\n     let check_features = |remaining_lib_features: &mut FxIndexMap<_, _>, defined_features: &[_]| {\n         for &(feature, since) in defined_features {\n-            if let Some(since) = since {\n-                if let Some(span) = remaining_lib_features.get(&feature) {\n-                    // Warn if the user has enabled an already-stable lib feature.\n+            if let Some(since) = since && let Some(span) = remaining_lib_features.get(&feature) {\n+                // Warn if the user has enabled an already-stable lib feature.\n+                if let Some(implies) = implications.get(&feature) {\n+                    unnecessary_partially_stable_feature_lint(tcx, *span, feature, *implies, since);\n+                } else {\n                     unnecessary_stable_feature_lint(tcx, *span, feature, since);\n                 }\n             }\n@@ -983,12 +996,41 @@ pub fn check_unused_or_stable_features(tcx: TyCtxt<'_>) {\n     // don't lint about unused features. We should re-enable this one day!\n }\n \n+fn unnecessary_partially_stable_feature_lint(\n+    tcx: TyCtxt<'_>,\n+    span: Span,\n+    feature: Symbol,\n+    implies: Symbol,\n+    since: Symbol,\n+) {\n+    tcx.struct_span_lint_hir(lint::builtin::STABLE_FEATURES, hir::CRATE_HIR_ID, span, |lint| {\n+        lint.build(&format!(\n+            \"the feature `{feature}` has been partially stabilized since {since} and is succeeded \\\n+             by the feature `{implies}`\"\n+        ))\n+        .span_suggestion(\n+            span,\n+            &format!(\n+                \"if you are using features which are still unstable, change to using `{implies}`\"\n+            ),\n+            implies,\n+            Applicability::MaybeIncorrect,\n+        )\n+        .span_suggestion(\n+            tcx.sess.source_map().span_extend_to_line(span),\n+            \"if you are using features which are now stable, remove this line\",\n+            \"\",\n+            Applicability::MaybeIncorrect,\n+        )\n+        .emit();\n+    });\n+}\n+\n fn unnecessary_stable_feature_lint(tcx: TyCtxt<'_>, span: Span, feature: Symbol, since: Symbol) {\n     tcx.struct_span_lint_hir(lint::builtin::STABLE_FEATURES, hir::CRATE_HIR_ID, span, |lint| {\n         lint.build(&format!(\n-            \"the feature `{}` has been stable since {} and no longer requires \\\n-                      an attribute to enable\",\n-            feature, since\n+            \"the feature `{feature}` has been stable since {since} and no longer requires an \\\n+             attribute to enable\",\n         ))\n         .emit();\n     });"}, {"sha": "1a2d8e271de043bd20b8c8170cd37148a659469a", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-using-stable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6246d66c6da3064f658831c0ed8162df169a001e/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-stable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6246d66c6da3064f658831c0ed8162df169a001e/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-stable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-stable.rs?ref=6246d66c6da3064f658831c0ed8162df169a001e", "patch": "@@ -1,7 +1,7 @@\n // aux-build:stability-attribute-implies.rs\n #![deny(stable_features)]\n #![feature(foo)]\n-//~^ ERROR the feature `foo` has been stable since 1.62.0 and no longer requires an attribute to enable\n+//~^ ERROR the feature `foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `foobar`\n \n // Tests that the use of `implied_by` in the `#[unstable]` attribute results in a diagnostic\n // mentioning partial stabilization, and that given the implied unstable feature is unused (there"}, {"sha": "c9b3f07cc70b15eab8092a85a745e1e53615bba0", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-using-stable.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6246d66c6da3064f658831c0ed8162df169a001e/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-stable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6246d66c6da3064f658831c0ed8162df169a001e/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-stable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-stable.stderr?ref=6246d66c6da3064f658831c0ed8162df169a001e", "patch": "@@ -1,4 +1,4 @@\n-error: the feature `foo` has been stable since 1.62.0 and no longer requires an attribute to enable\n+error: the feature `foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `foobar`\n   --> $DIR/stability-attribute-implies-using-stable.rs:3:12\n    |\n LL | #![feature(foo)]\n@@ -9,6 +9,14 @@ note: the lint level is defined here\n    |\n LL | #![deny(stable_features)]\n    |         ^^^^^^^^^^^^^^^\n+help: if you are using features which are still unstable, change to using `foobar`\n+   |\n+LL | #![feature(foobar)]\n+   |            ~~~~~~\n+help: if you are using features which are now stable, remove this line\n+   |\n+LL - #![feature(foo)]\n+   |\n \n error: aborting due to previous error\n "}, {"sha": "3c73c5abf3b54dec533b85c5a3e0ee372182f9d6", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-using-unstable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6246d66c6da3064f658831c0ed8162df169a001e/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-unstable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6246d66c6da3064f658831c0ed8162df169a001e/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-unstable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-unstable.rs?ref=6246d66c6da3064f658831c0ed8162df169a001e", "patch": "@@ -1,7 +1,7 @@\n // aux-build:stability-attribute-implies.rs\n #![deny(stable_features)]\n #![feature(foo)]\n-//~^ ERROR the feature `foo` has been stable since 1.62.0 and no longer requires an attribute to enable\n+//~^ ERROR the feature `foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `foobar`\n \n // Tests that the use of `implied_by` in the `#[unstable]` attribute results in a diagnostic\n // mentioning partial stabilization and that given the implied unstable feature is used (there is a"}, {"sha": "9a5c7ef5a476221c5c6432befccaaa0ce29f9b49", "filename": "src/test/ui/stability-attribute/stability-attribute-implies-using-unstable.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6246d66c6da3064f658831c0ed8162df169a001e/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-unstable.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6246d66c6da3064f658831c0ed8162df169a001e/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-unstable.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fstability-attribute%2Fstability-attribute-implies-using-unstable.stderr?ref=6246d66c6da3064f658831c0ed8162df169a001e", "patch": "@@ -1,4 +1,4 @@\n-error: the feature `foo` has been stable since 1.62.0 and no longer requires an attribute to enable\n+error: the feature `foo` has been partially stabilized since 1.62.0 and is succeeded by the feature `foobar`\n   --> $DIR/stability-attribute-implies-using-unstable.rs:3:12\n    |\n LL | #![feature(foo)]\n@@ -9,6 +9,14 @@ note: the lint level is defined here\n    |\n LL | #![deny(stable_features)]\n    |         ^^^^^^^^^^^^^^^\n+help: if you are using features which are still unstable, change to using `foobar`\n+   |\n+LL | #![feature(foobar)]\n+   |            ~~~~~~\n+help: if you are using features which are now stable, remove this line\n+   |\n+LL - #![feature(foo)]\n+   |\n \n error: aborting due to previous error\n "}]}