{"sha": "3d32cf5d9afdd8c375935ac875b2a20f24159e52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkMzJjZjVkOWFmZGQ4YzM3NTkzNWFjODc1YjJhMjBmMjQxNTllNTI=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-12T21:46:19Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-05-19T17:53:07Z"}, "message": "rustc_trans: Apply dllexport attributes for MSVC\n\nThis commit modifies the compiler to emit `dllexport` for all reachable\nfunctions and data on MSVC targets, regardless of whether a dynamic library is\nbeing created or not. More details can be found in the commit itself.", "tree": {"sha": "085a95e9dd8ecb2ca04390d2160e722fd81584d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/085a95e9dd8ecb2ca04390d2160e722fd81584d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d32cf5d9afdd8c375935ac875b2a20f24159e52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d32cf5d9afdd8c375935ac875b2a20f24159e52", "html_url": "https://github.com/rust-lang/rust/commit/3d32cf5d9afdd8c375935ac875b2a20f24159e52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d32cf5d9afdd8c375935ac875b2a20f24159e52/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a2415b82284f81d2fa7d6aa5096e6d2e5d83452", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a2415b82284f81d2fa7d6aa5096e6d2e5d83452", "html_url": "https://github.com/rust-lang/rust/commit/9a2415b82284f81d2fa7d6aa5096e6d2e5d83452"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "4a6c73009f1ada6a82075dfd4a74788f6a3e6380", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3d32cf5d9afdd8c375935ac875b2a20f24159e52/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d32cf5d9afdd8c375935ac875b2a20f24159e52/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=3d32cf5d9afdd8c375935ac875b2a20f24159e52", "patch": "@@ -237,6 +237,9 @@ pub fn get_extern_const<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>, did: ast::DefId,\n             llvm::set_thread_local(c, true);\n         }\n     }\n+    if ccx.use_dll_storage_attrs() {\n+        llvm::SetDLLStorageClass(c, llvm::DLLImportStorageClass);\n+    }\n     ccx.externs().borrow_mut().insert(name.to_string(), c);\n     return c;\n }\n@@ -1940,11 +1943,17 @@ pub fn update_linkage(ccx: &CrateContext,\n     match id {\n         Some(id) if ccx.reachable().contains(&id) => {\n             llvm::SetLinkage(llval, llvm::ExternalLinkage);\n+            if ccx.use_dll_storage_attrs() {\n+                llvm::SetDLLStorageClass(llval, llvm::DLLExportStorageClass);\n+            }\n         },\n         _ => {\n             // `id` does not refer to an item in `ccx.reachable`.\n             if ccx.sess().opts.cg.codegen_units > 1 {\n                 llvm::SetLinkage(llval, llvm::ExternalLinkage);\n+                if ccx.use_dll_storage_attrs() {\n+                    llvm::SetDLLStorageClass(llval, llvm::DLLExportStorageClass);\n+                }\n             } else {\n                 llvm::SetLinkage(llval, llvm::InternalLinkage);\n             }\n@@ -2103,9 +2112,15 @@ fn finish_register_fn(ccx: &CrateContext, sym: String, node_id: ast::NodeId,\n     if ccx.tcx().lang_items.stack_exhausted() == Some(def) {\n         attributes::split_stack(llfn, false);\n         llvm::SetLinkage(llfn, llvm::ExternalLinkage);\n+        if ccx.use_dll_storage_attrs() {\n+            llvm::SetDLLStorageClass(llfn, llvm::DLLExportStorageClass);\n+        }\n     }\n     if ccx.tcx().lang_items.eh_personality() == Some(def) {\n         llvm::SetLinkage(llfn, llvm::ExternalLinkage);\n+        if ccx.use_dll_storage_attrs() {\n+            llvm::SetDLLStorageClass(llfn, llvm::DLLExportStorageClass);\n+        }\n     }\n }\n \n@@ -2172,7 +2187,7 @@ pub fn create_entry_wrapper(ccx: &CrateContext,\n         // FIXME: #16581: Marking a symbol in the executable with `dllexport`\n         // linkage forces MinGW's linker to output a `.reloc` section for ASLR\n         if ccx.sess().target.target.options.is_like_windows {\n-            unsafe { llvm::LLVMRustSetDLLExportStorageClass(llfn) }\n+            llvm::SetDLLStorageClass(llfn, llvm::DLLExportStorageClass);\n         }\n \n         let llbb = unsafe {\n@@ -2589,6 +2604,7 @@ fn internalize_symbols(cx: &SharedCrateContext, reachable: &HashSet<String>) {\n                 if !declared.contains(&name) &&\n                    !reachable.contains(str::from_utf8(&name).unwrap()) {\n                     llvm::SetLinkage(val, llvm::InternalLinkage);\n+                    llvm::SetDLLStorageClass(val, llvm::DefaultStorageClass);\n                 }\n             }\n         }"}, {"sha": "51db0adf5b77508a8235aafea96ab99a9fee37c4", "filename": "src/librustc_trans/trans/context.rs", "status": "modified", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/3d32cf5d9afdd8c375935ac875b2a20f24159e52/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d32cf5d9afdd8c375935ac875b2a20f24159e52/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcontext.rs?ref=3d32cf5d9afdd8c375935ac875b2a20f24159e52", "patch": "@@ -75,6 +75,7 @@ pub struct SharedCrateContext<'tcx> {\n \n     available_monomorphizations: RefCell<FnvHashSet<String>>,\n     available_drop_glues: RefCell<FnvHashMap<DropGlueKind<'tcx>, String>>,\n+    use_dll_storage_attrs: bool,\n }\n \n /// The local portion of a `CrateContext`.  There is one `LocalCrateContext`\n@@ -251,6 +252,51 @@ impl<'tcx> SharedCrateContext<'tcx> {\n             create_context_and_module(&tcx.sess, \"metadata\")\n         };\n \n+        // An interesting part of Windows which MSVC forces our hand on (and\n+        // apparently MinGW didn't) is the usage of `dllimport` and `dllexport`\n+        // attributes in LLVM IR as well as native dependencies (in C these\n+        // correspond to `__declspec(dllimport)`).\n+        //\n+        // Whenever a dynamic library is built by MSVC it must have its public\n+        // interface specified by functions tagged with `dllexport` or otherwise\n+        // they're not available to be linked against. This poses a few problems\n+        // for the compiler, some of which are somewhat fundamental, but we use\n+        // the `use_dll_storage_attrs` variable below to attach the `dllexport`\n+        // attribute to all LLVM functions that are reachable (e.g. they're\n+        // already tagged with external linkage). This is suboptimal for a few\n+        // reasons:\n+        //\n+        // * If an object file will never be included in a dynamic library,\n+        //   there's no need to attach the dllexport attribute. Most object\n+        //   files in Rust are not destined to become part of a dll as binaries\n+        //   are statically linked by default.\n+        // * If the compiler is emitting both an rlib and a dylib, the same\n+        //   source object file is currently used but with MSVC this may be less\n+        //   feasible. The compiler may be able to get around this, but it may\n+        //   involve some invasive changes to deal with this.\n+        //\n+        // The flipside of this situation is that whenever you link to a dll and\n+        // you import a function from it, the import should be tagged with\n+        // `dllimport`. At this time, however, the compiler does not emit\n+        // `dllimport` for any declarations other than constants (where it is\n+        // required), which is again suboptimal for even more reasons!\n+        //\n+        // * Calling a function imported from another dll without using\n+        //   `dllimport` causes the linker/compiler to have extra overhead (one\n+        //   `jmp` instruction on x86) when calling the function.\n+        // * The same object file may be used in different circumstances, so a\n+        //   function may be imported from a dll if the object is linked into a\n+        //   dll, but it may be just linked against if linked into an rlib.\n+        // * The compiler has no knowledge about whether native functions should\n+        //   be tagged dllimport or not.\n+        //\n+        // For now the compiler takes the perf hit (I do not have any numbers to\n+        // this effect) by marking very little as `dllimport` and praying the\n+        // linker will take care of everything. Fixing this problem will likely\n+        // require adding a few attributes to Rust itself (feature gated at the\n+        // start) and then strongly recommending static linkage on MSVC!\n+        let use_dll_storage_attrs = tcx.sess.target.target.options.is_like_msvc;\n+\n         let mut shared_ccx = SharedCrateContext {\n             local_ccxs: Vec::with_capacity(local_count),\n             metadata_llmod: metadata_llmod,\n@@ -277,6 +323,7 @@ impl<'tcx> SharedCrateContext<'tcx> {\n             check_drop_flag_for_sanity: check_drop_flag_for_sanity,\n             available_monomorphizations: RefCell::new(FnvHashSet()),\n             available_drop_glues: RefCell::new(FnvHashMap()),\n+            use_dll_storage_attrs: use_dll_storage_attrs,\n         };\n \n         for i in 0..local_count {\n@@ -365,6 +412,10 @@ impl<'tcx> SharedCrateContext<'tcx> {\n     pub fn stats<'a>(&'a self) -> &'a Stats {\n         &self.stats\n     }\n+\n+    pub fn use_dll_storage_attrs(&self) -> bool {\n+        self.use_dll_storage_attrs\n+    }\n }\n \n impl<'tcx> LocalCrateContext<'tcx> {\n@@ -733,6 +784,10 @@ impl<'b, 'tcx> CrateContext<'b, 'tcx> {\n         // values.\n         self.shared.check_drop_flag_for_sanity\n     }\n+\n+    pub fn use_dll_storage_attrs(&self) -> bool {\n+        self.shared.use_dll_storage_attrs()\n+    }\n }\n \n /// Declare any llvm intrinsics that you might need"}]}