{"sha": "6d2fe52dc5065278c57542487f5d0ab31313d3bf", "node_id": "C_kwDOAAsO6NoAKDZkMmZlNTJkYzUwNjUyNzhjNTc1NDI0ODdmNWQwYWIzMTMxM2QzYmY", "commit": {"author": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2022-12-31T00:53:46Z"}, "committer": {"name": "Joshua Nelson", "email": "github@jyn.dev", "date": "2022-12-31T00:53:46Z"}, "message": "Fix panic on `x build --help`", "tree": {"sha": "4d20897b5f4295026b1520c4716e21a91c92e382", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4d20897b5f4295026b1520c4716e21a91c92e382"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d2fe52dc5065278c57542487f5d0ab31313d3bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d2fe52dc5065278c57542487f5d0ab31313d3bf", "html_url": "https://github.com/rust-lang/rust/commit/6d2fe52dc5065278c57542487f5d0ab31313d3bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d2fe52dc5065278c57542487f5d0ab31313d3bf/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce85c98575e3016cf2007d90a85be321e592aa96", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce85c98575e3016cf2007d90a85be321e592aa96", "html_url": "https://github.com/rust-lang/rust/commit/ce85c98575e3016cf2007d90a85be321e592aa96"}], "stats": {"total": 44, "additions": 22, "deletions": 22}, "files": [{"sha": "2c6d201d18fbeacc697c03f990d8770d04bfa8ff", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6d2fe52dc5065278c57542487f5d0ab31313d3bf/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d2fe52dc5065278c57542487f5d0ab31313d3bf/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=6d2fe52dc5065278c57542487f5d0ab31313d3bf", "patch": "@@ -352,32 +352,32 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\",\n \n         // fn usage()\n         let usage = |exit_code: i32, opts: &Options, verbose: bool, subcommand_help: &str| -> ! {\n-            // We have an unfortunate situation here: some Steps use `builder.in_tree_crates` to determine their paths.\n-            // To determine those crates, we need to run `cargo metadata`, which means we need all submodules to be checked out.\n-            // That takes a while to run, so only do it when paths were explicitly requested, not on all CLI errors.\n-            // `Build::new` won't load submodules for the `setup` command.\n-            let cmd = if verbose {\n-                println!(\"note: updating submodules before printing available paths\");\n-                \"build\"\n-            } else {\n-                \"setup\"\n-            };\n-            let config = Config::parse(&[cmd.to_string()]);\n-            let build = Build::new(config);\n-            let paths = Builder::get_help(&build, subcommand);\n-\n             println!(\"{}\", opts.usage(subcommand_help));\n-            if let Some(s) = paths {\n-                if verbose {\n+            if verbose {\n+                // We have an unfortunate situation here: some Steps use `builder.in_tree_crates` to determine their paths.\n+                // To determine those crates, we need to run `cargo metadata`, which means we need all submodules to be checked out.\n+                // That takes a while to run, so only do it when paths were explicitly requested, not on all CLI errors.\n+                // `Build::new` won't load submodules for the `setup` command.\n+                let cmd = if verbose {\n+                    println!(\"note: updating submodules before printing available paths\");\n+                    \"build\"\n+                } else {\n+                    \"setup\"\n+                };\n+                let config = Config::parse(&[cmd.to_string()]);\n+                let build = Build::new(config);\n+                let paths = Builder::get_help(&build, subcommand);\n+\n+                if let Some(s) = paths {\n                     println!(\"{}\", s);\n                 } else {\n-                    println!(\n-                        \"Run `./x.py {} -h -v` to see a list of available paths.\",\n-                        subcommand.as_str()\n-                    );\n+                    panic!(\"No paths available for subcommand `{}`\", subcommand.as_str());\n                 }\n-            } else if verbose {\n-                panic!(\"No paths available for subcommand `{}`\", subcommand.as_str());\n+            } else {\n+                println!(\n+                    \"Run `./x.py {} -h -v` to see a list of available paths.\",\n+                    subcommand.as_str()\n+                );\n             }\n             crate::detail_exit(exit_code);\n         };"}]}