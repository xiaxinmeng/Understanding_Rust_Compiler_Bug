{"sha": "6f0575f08adca0c8a8f38a301913a1cfe636eb94", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMDU3NWYwOGFkY2EwYzhhOGYzOGEzMDE5MTNhMWNmZTYzNmViOTQ=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-30T19:43:23Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-03-30T21:23:00Z"}, "message": "Fix generic arguments being incorrectly offset in qualified trait casts", "tree": {"sha": "ce24189f7b8c3f71726edb5cb95d05c6ae927d80", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce24189f7b8c3f71726edb5cb95d05c6ae927d80"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f0575f08adca0c8a8f38a301913a1cfe636eb94", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f0575f08adca0c8a8f38a301913a1cfe636eb94", "html_url": "https://github.com/rust-lang/rust/commit/6f0575f08adca0c8a8f38a301913a1cfe636eb94", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f0575f08adca0c8a8f38a301913a1cfe636eb94/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b68e03bf56c00f63fcc65e7879cc64c6d5c4f30", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b68e03bf56c00f63fcc65e7879cc64c6d5c4f30", "html_url": "https://github.com/rust-lang/rust/commit/0b68e03bf56c00f63fcc65e7879cc64c6d5c4f30"}], "stats": {"total": 47, "additions": 46, "deletions": 1}, "files": [{"sha": "4de951fd3e85fcf1442e27239ef532f11de2cf14", "filename": "crates/hir_def/src/path/lower.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6f0575f08adca0c8a8f38a301913a1cfe636eb94/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f0575f08adca0c8a8f38a301913a1cfe636eb94/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fpath%2Flower.rs?ref=6f0575f08adca0c8a8f38a301913a1cfe636eb94", "patch": "@@ -74,6 +74,7 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n                     // <T as Trait<A>>::Foo desugars to Trait<Self=T, A>::Foo\n                     Some(trait_ref) => {\n                         let path = Path::from_src(trait_ref.path()?, hygiene)?;\n+                        let num_segments = path.mod_path.segments.len();\n                         kind = path.mod_path.kind;\n \n                         let mut prefix_segments = path.mod_path.segments;\n@@ -85,7 +86,8 @@ pub(super) fn lower_path(mut path: ast::Path, hygiene: &Hygiene) -> Option<Path>\n                         generic_args.extend(prefix_args);\n \n                         // Insert the type reference (T in the above example) as Self parameter for the trait\n-                        let last_segment = generic_args.last_mut()?;\n+                        let last_segment =\n+                            generic_args.iter_mut().rev().nth(num_segments.saturating_sub(1))?;\n                         if last_segment.is_none() {\n                             *last_segment = Some(Arc::new(GenericArgs::empty()));\n                         };"}, {"sha": "65b71fdfad1cb58c44911d63ed0cdc4573845ae6", "filename": "crates/hir_ty/src/tests/traits.rs", "status": "modified", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6f0575f08adca0c8a8f38a301913a1cfe636eb94/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f0575f08adca0c8a8f38a301913a1cfe636eb94/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Ftraits.rs?ref=6f0575f08adca0c8a8f38a301913a1cfe636eb94", "patch": "@@ -3370,3 +3370,46 @@ fn test() {\n         \"#]],\n     )\n }\n+\n+#[test]\n+fn qualified_path_as_qualified_trait() {\n+    check_infer(\n+        r#\"\n+mod foo {\n+\n+    pub trait Foo {\n+        type Target;\n+    }\n+    pub trait Bar {\n+        type Output;\n+        fn boo() -> Self::Output {\n+            loop {}\n+        }\n+    }\n+}\n+\n+struct F;\n+impl foo::Foo for F {\n+    type Target = ();\n+}\n+impl foo::Bar for F {\n+    type Output = <F as foo::Foo>::Target;\n+}\n+\n+fn foo() {\n+    use foo::Bar;\n+    let x = <F as Bar>::boo();\n+}\n+\n+        \"#,\n+        expect![[r#\"\n+            132..163 '{     ...     }': Bar::Output<Self>\n+            146..153 'loop {}': !\n+            151..153 '{}': ()\n+            306..358 '{     ...o(); }': ()\n+            334..335 'x': ()\n+            338..353 '<F as Bar>::boo': fn boo<F>() -> <F as Bar>::Output\n+            338..355 '<F as ...:boo()': ()\n+        \"#]],\n+    );\n+}"}]}