{"sha": "4d3a31caf08fb4591ce2eaa0c83474d2346d0a23", "node_id": "C_kwDOAAsO6NoAKDRkM2EzMWNhZjA4ZmI0NTkxY2UyZWFhMGM4MzQ3NGQyMzQ2ZDBhMjM", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-09-15T05:41:37Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-09-17T21:15:37Z"}, "message": "Add `Box<[T; N]>: TryFrom<Vec<T>>`\n\nWe have `[T; N]: TryFrom<Vec<T>>` and `Box<[T; N]>: TryFrom<Box<[T]>>`, but not the combination.\n\n`vec.into_boxed_slice().try_into()` isn't quite a replacement for this, as that'll reallocate unnecessarily in the error case.\n\n**Insta-stable, so needs an FCP**", "tree": {"sha": "42d7f4c452b6822b487f459079bb77f3c2b7e510", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/42d7f4c452b6822b487f459079bb77f3c2b7e510"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d3a31caf08fb4591ce2eaa0c83474d2346d0a23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d3a31caf08fb4591ce2eaa0c83474d2346d0a23", "html_url": "https://github.com/rust-lang/rust/commit/4d3a31caf08fb4591ce2eaa0c83474d2346d0a23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d3a31caf08fb4591ce2eaa0c83474d2346d0a23/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "addacb5878b9970ebc1665768a05cb601e7aea15", "url": "https://api.github.com/repos/rust-lang/rust/commits/addacb5878b9970ebc1665768a05cb601e7aea15", "html_url": "https://github.com/rust-lang/rust/commit/addacb5878b9970ebc1665768a05cb601e7aea15"}], "stats": {"total": 51, "additions": 50, "deletions": 1}, "files": [{"sha": "c558b0ce065ec3f9cc95f8853fb649b816201c02", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 50, "deletions": 1, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4d3a31caf08fb4591ce2eaa0c83474d2346d0a23/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d3a31caf08fb4591ce2eaa0c83474d2346d0a23/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=4d3a31caf08fb4591ce2eaa0c83474d2346d0a23", "patch": "@@ -1622,6 +1622,22 @@ impl<T, const N: usize> From<[T; N]> for Box<[T]> {\n     }\n }\n \n+/// Casts a boxed slice to a boxed array.\n+///\n+/// # Safety\n+///\n+/// `boxed_slice.len()` must be exactly `N`.\n+unsafe fn boxed_slice_as_array_unchecked<T, A: Allocator, const N: usize>(\n+    boxed_slice: Box<[T], A>,\n+) -> Box<[T; N], A> {\n+    debug_assert_eq!(boxed_slice.len(), N);\n+\n+    let (ptr, alloc) = Box::into_raw_with_allocator(boxed_slice);\n+    // SAFETY: Pointer and allocator came from an existing box,\n+    // and our safety condition requires that the length is exactly `N`\n+    unsafe { Box::from_raw_in(ptr as *mut [T; N], alloc) }\n+}\n+\n #[stable(feature = \"boxed_slice_try_from\", since = \"1.43.0\")]\n impl<T, const N: usize> TryFrom<Box<[T]>> for Box<[T; N]> {\n     type Error = Box<[T]>;\n@@ -1637,13 +1653,46 @@ impl<T, const N: usize> TryFrom<Box<[T]>> for Box<[T; N]> {\n     /// `boxed_slice.len()` does not equal `N`.\n     fn try_from(boxed_slice: Box<[T]>) -> Result<Self, Self::Error> {\n         if boxed_slice.len() == N {\n-            Ok(unsafe { Box::from_raw(Box::into_raw(boxed_slice) as *mut [T; N]) })\n+            Ok(unsafe { boxed_slice_as_array_unchecked(boxed_slice) })\n         } else {\n             Err(boxed_slice)\n         }\n     }\n }\n \n+#[cfg(not(no_global_oom_handling))]\n+#[stable(feature = \"boxed_array_try_from_vec\", since = \"CURRENT_RUSTC_VERSION\")]\n+impl<T, const N: usize> TryFrom<Vec<T>> for Box<[T; N]> {\n+    type Error = Vec<T>;\n+\n+    /// Attempts to convert a `Vec<T>` into a `Box<[T; N]>`.\n+    ///\n+    /// Like [`Vec::into_boxed_slice`], this is in-place if `vec.capacity() == N`,\n+    /// but will require a reallocation otherwise.\n+    ///\n+    /// # Errors\n+    ///\n+    /// Returns the original `Vec<T>` in the `Err` variant if\n+    /// `boxed_slice.len()` does not equal `N`.\n+    ///\n+    /// # Examples\n+    ///\n+    /// This can be used with [`vec!`] to create an array on the heap:\n+    ///\n+    /// ```\n+    /// let state: Box<[f32; 100]> = vec![1.0; 100].try_into().unwrap();\n+    /// assert_eq!(state.len(), 100);\n+    /// ```\n+    fn try_from(vec: Vec<T>) -> Result<Self, Self::Error> {\n+        if vec.len() == N {\n+            let boxed_slice = vec.into_boxed_slice();\n+            Ok(unsafe { boxed_slice_as_array_unchecked(boxed_slice) })\n+        } else {\n+            Err(vec)\n+        }\n+    }\n+}\n+\n impl<A: Allocator> Box<dyn Any, A> {\n     /// Attempt to downcast the box to a concrete type.\n     ///"}]}