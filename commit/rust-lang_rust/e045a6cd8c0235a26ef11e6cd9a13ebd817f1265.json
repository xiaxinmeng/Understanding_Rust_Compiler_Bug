{"sha": "e045a6cd8c0235a26ef11e6cd9a13ebd817f1265", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwNDVhNmNkOGMwMjM1YTI2ZWYxMWU2Y2Q5YTEzZWJkODE3ZjEyNjU=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-07-13T10:41:22Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-07-13T10:41:22Z"}, "message": "Use callback-based interface to load ThinLTO import data into rustc.", "tree": {"sha": "074eeb68c416a178d201373ae32957d14c45111a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/074eeb68c416a178d201373ae32957d14c45111a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e045a6cd8c0235a26ef11e6cd9a13ebd817f1265", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e045a6cd8c0235a26ef11e6cd9a13ebd817f1265", "html_url": "https://github.com/rust-lang/rust/commit/e045a6cd8c0235a26ef11e6cd9a13ebd817f1265", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e045a6cd8c0235a26ef11e6cd9a13ebd817f1265/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd3f445ed264ffc09ea42bd8d89853242e3a26f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd3f445ed264ffc09ea42bd8d89853242e3a26f4", "html_url": "https://github.com/rust-lang/rust/commit/dd3f445ed264ffc09ea42bd8d89853242e3a26f4"}], "stats": {"total": 154, "additions": 58, "deletions": 96}, "files": [{"sha": "55499552f5c836a87dd041c962d58707b88dc606", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 31, "deletions": 43, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/e045a6cd8c0235a26ef11e6cd9a13ebd817f1265/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e045a6cd8c0235a26ef11e6cd9a13ebd817f1265/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=e045a6cd8c0235a26ef11e6cd9a13ebd817f1265", "patch": "@@ -805,66 +805,54 @@ pub struct ThinLTOImports {\n \n impl ThinLTOImports {\n \n-    pub fn new_empty() -> ThinLTOImports {\n+    pub fn new() -> ThinLTOImports {\n         ThinLTOImports {\n             imports: FxHashMap(),\n         }\n     }\n \n     /// Load the ThinLTO import map from ThinLTOData.\n     unsafe fn from_thin_lto_data(data: *const llvm::ThinLTOData) -> ThinLTOImports {\n-        let raw_data: *const llvm::ThinLTOModuleImports =\n-            llvm::LLVMRustGetThinLTOModuleImports(data);\n \n-        assert!(!raw_data.is_null());\n-\n-        let mut imports = FxHashMap();\n-        let mut module_ptr = raw_data;\n-        let mut module_index = 0;\n-\n-        loop {\n-            let mut entry_ptr: *const llvm::ThinLTOModuleName = *module_ptr;\n-\n-            if entry_ptr.is_null() {\n-                break;\n+        fn module_name_to_str(c_str: &CStr) -> &str {\n+            match c_str.to_str() {\n+                Ok(s) => s,\n+                Err(e) => {\n+                    bug!(\"Encountered non-utf8 LLVM module name `{}`: {}\",\n+                        c_str.to_string_lossy(),\n+                        e)\n+                }\n             }\n+        }\n \n-            let importing_module_name = CStr::from_ptr(*entry_ptr)\n-                .to_str()\n-                .expect(\"Non-utf8 LLVM module name encountered\")\n-                .to_owned();\n-\n-            entry_ptr = entry_ptr.offset(1);\n-\n-            let mut imported_modules = vec![];\n-\n-            loop {\n-                let imported_module_name = *entry_ptr;\n-\n-                if imported_module_name.is_null() {\n-                    break\n-                }\n+        unsafe extern \"C\" fn imported_module_callback(payload: *mut libc::c_void,\n+                                                      importing_module_name: *const libc::c_char,\n+                                                      imported_module_name: *const libc::c_char) {\n+            let map = &mut* (payload as *mut ThinLTOImports);\n \n-                let imported_module_name = CStr::from_ptr(imported_module_name)\n-                    .to_str()\n-                    .expect(\"Non-utf8 LLVM module name encountered\")\n-                    .to_owned();\n+            let importing_module_name = CStr::from_ptr(importing_module_name);\n+            let importing_module_name = module_name_to_str(&importing_module_name);\n+            let imported_module_name = CStr::from_ptr(imported_module_name);\n+            let imported_module_name = module_name_to_str(&imported_module_name);\n \n-                imported_modules.push(imported_module_name);\n-                entry_ptr = entry_ptr.offset(1);\n+            if !map.imports.contains_key(importing_module_name) {\n+                map.imports.insert(importing_module_name.to_owned(), vec![]);\n             }\n \n-            imports.insert(importing_module_name, imported_modules);\n-\n-            module_ptr = module_ptr.offset(1);\n-            module_index += 1;\n+            map.imports\n+               .get_mut(importing_module_name)\n+               .unwrap()\n+               .push(imported_module_name.to_owned());\n         }\n \n-        assert_eq!(module_index, imports.len());\n+        let mut map = ThinLTOImports {\n+            imports: FxHashMap(),\n+        };\n \n-        ThinLTOImports {\n-            imports\n-        }\n+        llvm::LLVMRustGetThinLTOModuleImports(data,\n+                                              imported_module_callback,\n+                                              &mut map as *mut _ as *mut libc::c_void);\n+        map\n     }\n \n     pub fn save_to_file(&self, path: &Path) -> io::Result<()> {"}, {"sha": "e984b73471ac47420ae0536ebf00afc5b26b7895", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e045a6cd8c0235a26ef11e6cd9a13ebd817f1265/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e045a6cd8c0235a26ef11e6cd9a13ebd817f1265/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=e045a6cd8c0235a26ef11e6cd9a13ebd817f1265", "patch": "@@ -1360,7 +1360,7 @@ fn load_thin_lto_imports(sess: &Session) -> lto::ThinLTOImports {\n     );\n \n     if !path.exists() {\n-        return lto::ThinLTOImports::new_empty();\n+        return lto::ThinLTOImports::new();\n     }\n \n     match lto::ThinLTOImports::load_from_file(&path) {"}, {"sha": "551f1cda6f0838f393706a2cfa0607692ffeab54", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e045a6cd8c0235a26ef11e6cd9a13ebd817f1265/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e045a6cd8c0235a26ef11e6cd9a13ebd817f1265/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=e045a6cd8c0235a26ef11e6cd9a13ebd817f1265", "patch": "@@ -350,10 +350,9 @@ pub enum ThinLTOData {}\n /// LLVMRustThinLTOBuffer\n pub enum ThinLTOBuffer {}\n \n-/// LLVMRustThinLTOModuleName\n-pub type ThinLTOModuleName = *const c_char;\n-/// LLVMRustThinLTOModuleImports\n-pub type ThinLTOModuleImports = *const ThinLTOModuleName;\n+// LLVMRustModuleNameCallback\n+pub type ThinLTOModuleNameCallback =\n+    unsafe extern \"C\" fn(*mut c_void, *const c_char, *const c_char);\n \n /// LLVMRustThinLTOModule\n #[repr(C)]\n@@ -1785,7 +1784,9 @@ extern \"C\" {\n     ) -> bool;\n     pub fn LLVMRustGetThinLTOModuleImports(\n         Data: *const ThinLTOData,\n-    ) -> *const ThinLTOModuleImports;\n+        ModuleNameCallback: ThinLTOModuleNameCallback,\n+        CallbackPayload: *mut c_void,\n+    );\n     pub fn LLVMRustFreeThinLTOData(Data: *mut ThinLTOData);\n     pub fn LLVMRustParseBitcodeForThinLTO(\n         Context: ContextRef,"}, {"sha": "1f96b9042ba5091ddc8b4e0cf28ba1257e429bcc", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 20, "deletions": 47, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/e045a6cd8c0235a26ef11e6cd9a13ebd817f1265/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/e045a6cd8c0235a26ef11e6cd9a13ebd817f1265/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=e045a6cd8c0235a26ef11e6cd9a13ebd817f1265", "patch": "@@ -798,11 +798,6 @@ LLVMRustPGOAvailable() {\n #endif\n }\n \n-// We encode the ThinLTO module import map as a nested null-terminated list to\n-// get it into Rust.\n-typedef const char* LLVMRustThinLTOModuleName;\n-typedef LLVMRustThinLTOModuleName* LLVMRustThinLTOModuleImports;\n-\n #if LLVM_VERSION_GE(4, 0)\n \n // Here you'll find an implementation of ThinLTO as used by the Rust compiler\n@@ -1104,50 +1099,28 @@ LLVMRustPrepareThinLTOImport(const LLVMRustThinLTOData *Data, LLVMModuleRef M) {\n   return true;\n }\n \n-/// Converts the LLVMRustThinLTOData::ImportLists map into a nested list. The\n-/// first level is a null-terminated array with an entry for each module. Each\n-/// entry is a pointer that points to a null-termined array of module names. The\n-/// first entry is always the name of the *importing* module, the following\n-/// entries are  the names of the modules it imports from. Each module name is\n-/// a regular C string.\n-extern \"C\" LLVMRustThinLTOModuleImports*\n-LLVMRustGetThinLTOModuleImports(const LLVMRustThinLTOData *Data) {\n-  // Allocate number of module +1. This is a null-terminated array.\n-  LLVMRustThinLTOModuleImports* thinLTOModuleImports =\n-    new LLVMRustThinLTOModuleImports[Data->ImportLists.size() + 1];\n-  size_t module_index = 0;\n-\n-  for (const auto & module : Data->ImportLists) {\n-    StringRef module_id = module.getKey();\n-    const auto& imports = module.getValue();\n-\n-    // Allocate number of imported module + 2, one extra for the name of the\n-    // importing module and another one for null-termination.\n-    LLVMRustThinLTOModuleImports imports_array =\n-      new LLVMRustThinLTOModuleName[imports.size() + 2];\n-\n-    // The first value is always the name of the *importing* module.\n-    imports_array[0] = strndup(module_id.data(), module_id.size());\n-\n-    size_t imports_array_index = 1;\n-    for (const auto imported_module_id : imports.keys()) {\n-      // The following values are the names of the imported modules.\n-      imports_array[imports_array_index] = strndup(imported_module_id.data(),\n-                                                   imported_module_id.size());\n-      imports_array_index += 1;\n-    }\n-\n-    assert(imports_array_index == imports.size() + 1);\n-    imports_array[imports_array_index] = nullptr;\n+extern \"C\" typedef void (*LLVMRustModuleNameCallback)(void*, // payload\n+                                                      const char*, // importing module name\n+                                                      const char*); // imported module name\n \n-    thinLTOModuleImports[module_index] = imports_array;\n-    module_index += 1;\n+// Calls `module_name_callback` for each module import done by ThinLTO.\n+// The callback is provided with regular null-terminated C strings.\n+extern \"C\" void\n+LLVMRustGetThinLTOModuleImports(const LLVMRustThinLTOData *data,\n+                                LLVMRustModuleNameCallback module_name_callback,\n+                                void* callback_payload) {\n+  for (const auto& importing_module : data->ImportLists) {\n+    const std::string importing_module_id = importing_module.getKey().str();\n+\n+    const auto& imports = importing_module.getValue();\n+\n+    for (const auto& imported_module : imports) {\n+      const std::string imported_module_id = imported_module.getKey().str();\n+      module_name_callback(callback_payload,\n+                           importing_module_id.c_str(),\n+                           imported_module_id.c_str());\n+    }\n   }\n-\n-  assert(module_index == Data->ImportLists.size());\n-  thinLTOModuleImports[module_index] = nullptr;\n-\n-  return thinLTOModuleImports;\n }\n \n // This struct and various functions are sort of a hack right now, but the"}]}