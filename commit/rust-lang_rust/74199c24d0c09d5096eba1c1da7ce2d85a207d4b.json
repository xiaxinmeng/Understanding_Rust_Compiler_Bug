{"sha": "74199c24d0c09d5096eba1c1da7ce2d85a207d4b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0MTk5YzI0ZDBjMDlkNTA5NmViYTFjMWRhN2NlMmQ4NWEyMDdkNGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T22:30:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-18T22:30:02Z"}, "message": "Try to write some basic docs.", "tree": {"sha": "bfd9886fffb5d2e30e85ca3a8b836ceee5c1c228", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfd9886fffb5d2e30e85ca3a8b836ceee5c1c228"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74199c24d0c09d5096eba1c1da7ce2d85a207d4b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74199c24d0c09d5096eba1c1da7ce2d85a207d4b", "html_url": "https://github.com/rust-lang/rust/commit/74199c24d0c09d5096eba1c1da7ce2d85a207d4b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74199c24d0c09d5096eba1c1da7ce2d85a207d4b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d622235b303409016d8b764b4ae7f2098223ce4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d622235b303409016d8b764b4ae7f2098223ce4d", "html_url": "https://github.com/rust-lang/rust/commit/d622235b303409016d8b764b4ae7f2098223ce4d"}], "stats": {"total": 23, "additions": 20, "deletions": 3}, "files": [{"sha": "93c80fb754f71f8d83db96d9c1b058b326926d22", "filename": "src/librustc/middle/infer/bivariate.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/74199c24d0c09d5096eba1c1da7ce2d85a207d4b/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74199c24d0c09d5096eba1c1da7ce2d85a207d4b/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fbivariate.rs?ref=74199c24d0c09d5096eba1c1da7ce2d85a207d4b", "patch": "@@ -8,6 +8,23 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+//! Applies the \"bivariance relationship\" to two types and/or regions.\n+//! If (A,B) are bivariant then either A <: B or B <: A. It occurs\n+//! when type/lifetime parameters are unconstrained. Usually this is\n+//! an error, but we permit it in the specific case where a type\n+//! parameter is constrained in a where-clause via an associated type.\n+//!\n+//! There are several ways one could implement bivariance. You could\n+//! just do nothing at all, for example, or you could fully verify\n+//! that one of the two subtyping relationships hold. We choose to\n+//! thread a middle line: we relate types up to regions, but ignore\n+//! all region relationships.\n+//!\n+//! At one point, handling bivariance in this fashion was necessary\n+//! for inference, but I'm actually not sure if that is true anymore.\n+//! In particular, it might be enough to say (A,B) are bivariant for\n+//! all (A,B).\n+\n use middle::ty::{BuiltinBounds};\n use middle::ty::{self, Ty};\n use middle::ty::TyVar;"}, {"sha": "33da3092b2a256f8d4c8232f9eb50827603a87c8", "filename": "src/librustc/middle/infer/sub.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74199c24d0c09d5096eba1c1da7ce2d85a207d4b/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74199c24d0c09d5096eba1c1da7ce2d85a207d4b/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fsub.rs?ref=74199c24d0c09d5096eba1c1da7ce2d85a207d4b", "patch": "@@ -39,7 +39,6 @@ impl<'f, 'tcx> Combine<'tcx> for Sub<'f, 'tcx> {\n     fn tys_with_variance(&self, v: ty::Variance, a: Ty<'tcx>, b: Ty<'tcx>)\n                          -> cres<'tcx, Ty<'tcx>>\n     {\n-        // Once we're equating, it doesn't matter what the variance is.\n         match v {\n             ty::Invariant => self.equate().tys(a, b),\n             ty::Covariant => self.tys(a, b),"}, {"sha": "2411bb17649b55edab6dc57a41d4315f5cd38f6b", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/74199c24d0c09d5096eba1c1da7ce2d85a207d4b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74199c24d0c09d5096eba1c1da7ce2d85a207d4b/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=74199c24d0c09d5096eba1c1da7ce2d85a207d4b", "patch": "@@ -803,8 +803,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             ambiguous: false\n         };\n \n-        // Check for the `PhantomFn` trait. This is really just a special annotation that\n-        // *always* be considered to match, no matter what the type parameters etc.\n+        // Check for the `PhantomFn` trait. This is really just a\n+        // special annotation that is *always* considered to match, no\n+        // matter what the type parameters are etc.\n         if self.tcx().lang_items.phantom_fn() == Some(obligation.predicate.def_id()) {\n             candidates.vec.push(PhantomFnCandidate);\n             return Ok(candidates);"}]}