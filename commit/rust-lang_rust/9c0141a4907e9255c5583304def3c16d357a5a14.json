{"sha": "9c0141a4907e9255c5583304def3c16d357a5a14", "node_id": "C_kwDOAAsO6NoAKDljMDE0MWE0OTA3ZTkyNTVjNTU4MzMwNGRlZjNjMTZkMzU3YTVhMTQ", "commit": {"author": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-01-22T16:13:42Z"}, "committer": {"name": "Deadbeef", "email": "ent3rm4n@gmail.com", "date": "2022-02-21T22:25:30Z"}, "message": "Bless rustdoc test", "tree": {"sha": "2d17591cfbf272fbf487f3dc1feb832d97ed581c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d17591cfbf272fbf487f3dc1feb832d97ed581c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c0141a4907e9255c5583304def3c16d357a5a14", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE3RQPHNISvvEnSKtjbQF6ltjmwvkFAmIUEVoACgkQbQF6ltjm\nwvnQcBAAtxVsXL6303E4ImfScbAOgYN0PWMKXhpgF3SS4ZLHtdYAyL8aUNNqKsjA\nZmHOSSxLnPHBuvAKaGrw7Z6XVgR4O5LPQ24cZesmUB/dFN1iXFfyNzyYrxKHOjQT\n08CPVQnIUk9do+CZxRn8/fL1N1Vu4YDiUt09h6uqpy4ffvvahNF0iBbKMw3IoTA+\nwxZKevL4S2YUe1U8if9XDkkQNbtszbLFRfiQUzK1a6/Rfrm+9T9+FQqSwbF7CtFL\nOLAo409cBUNhrfD/O77HseF0xGBU9Oyq+MUYW0HWGR0wrt/MjFJjqiafhC8DSwvT\nw/W6h5GNE2BQ252JPSLHFJAk1fLn6Qh/X63Yk+GtJ500+TLJ1gWFOM0rznubv6gX\nj0aGw8b9LHFreCEfuy/gcdJdot1vfFu85Xu38UvqhHbHnWa29nxfXvcHpkbhoADK\nMeDT3IrkHkm1vXYij+KB326pj1bo56CVqbvIM3SLvQUf2XktASHF+pDC3WSeoqi2\n1QD4gkLcTNGtf1blrClEQe1plSujt4DptU2e+gAreApZEJ1gkfcY1bNPzJ27NrLp\nJ79teZ4ThDIUFrAvuPqyluVUfXfIrk/8HGNib9YiRm8OdqlH3BWSV7toUh978ul7\nEtYZuQXKP9MsfiL9hpj4p6V0ggY8tH3hyL5e7wpkkqhgejn6tFA=\n=oSxS\n-----END PGP SIGNATURE-----", "payload": "tree 2d17591cfbf272fbf487f3dc1feb832d97ed581c\nparent 5406cbfb1c498812de69200c9ad8db2b5b25eff7\nauthor Deadbeef <ent3rm4n@gmail.com> 1642868022 +0800\ncommitter Deadbeef <ent3rm4n@gmail.com> 1645482330 +1100\n\nBless rustdoc test\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c0141a4907e9255c5583304def3c16d357a5a14", "html_url": "https://github.com/rust-lang/rust/commit/9c0141a4907e9255c5583304def3c16d357a5a14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c0141a4907e9255c5583304def3c16d357a5a14/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5406cbfb1c498812de69200c9ad8db2b5b25eff7", "url": "https://api.github.com/repos/rust-lang/rust/commits/5406cbfb1c498812de69200c9ad8db2b5b25eff7", "html_url": "https://github.com/rust-lang/rust/commit/5406cbfb1c498812de69200c9ad8db2b5b25eff7"}], "stats": {"total": 168, "additions": 83, "deletions": 85}, "files": [{"sha": "699be93b1230f9ba99918320f0f0bb64d521bf70", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 82, "deletions": 84, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/9c0141a4907e9255c5583304def3c16d357a5a14/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c0141a4907e9255c5583304def3c16d357a5a14/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=9c0141a4907e9255c5583304def3c16d357a5a14", "patch": "@@ -143,11 +143,14 @@ impl Buffer {\n     }\n }\n \n-fn comma_sep<T: fmt::Display>(items: impl Iterator<Item = T>) -> impl fmt::Display {\n+fn comma_sep<T: fmt::Display>(\n+    items: impl Iterator<Item = T>,\n+    space_after_comma: bool,\n+) -> impl fmt::Display {\n     display_fn(move |f| {\n         for (i, item) in items.enumerate() {\n             if i != 0 {\n-                write!(f, \", \")?;\n+                write!(f, \",{}\", if space_after_comma { \" \" } else { \"\" })?;\n             }\n             fmt::Display::fmt(&item, f)?;\n         }\n@@ -248,9 +251,9 @@ impl clean::Generics {\n             }\n \n             if f.alternate() {\n-                write!(f, \"<{:#}>\", comma_sep(real_params.map(|g| g.print(cx))))\n+                write!(f, \"<{:#}>\", comma_sep(real_params.map(|g| g.print(cx)), true))\n             } else {\n-                write!(f, \"&lt;{}&gt;\", comma_sep(real_params.map(|g| g.print(cx))))\n+                write!(f, \"&lt;{}&gt;\", comma_sep(real_params.map(|g| g.print(cx)), true))\n             }\n         })\n     }\n@@ -266,10 +269,80 @@ crate fn print_where_clause<'a, 'tcx: 'a>(\n     end_newline: bool,\n ) -> impl fmt::Display + 'a + Captures<'tcx> {\n     display_fn(move |f| {\n-        if gens.where_predicates.is_empty() {\n+        let mut where_predicates = gens.where_predicates.iter().filter(|pred| {\n+            !matches!(pred, clean::WherePredicate::BoundPredicate { bounds, .. } if bounds.is_empty())\n+        }).map(|pred| {\n+            display_fn(move |f| {\n+                if f.alternate() {\n+                    f.write_str(\" \")?;\n+                } else {\n+                    f.write_str(\"<br>\")?;\n+                }\n+\n+                match pred {\n+                    clean::WherePredicate::BoundPredicate { ty, bounds, bound_params } => {\n+                        let bounds = bounds;\n+                        let for_prefix = match bound_params.len() {\n+                            0 => String::new(),\n+                            _ if f.alternate() => {\n+                                format!(\n+                                    \"for&lt;{:#}&gt; \",\n+                                    comma_sep(bound_params.iter().map(|lt| lt.print()), true)\n+                                )\n+                            }\n+                            _ => format!(\n+                                \"for&lt;{}&gt; \",\n+                                comma_sep(bound_params.iter().map(|lt| lt.print()), true)\n+                            ),\n+                        };\n+\n+                        if f.alternate() {\n+                            write!(\n+                                f,\n+                                \"{}{:#}: {:#}\",\n+                                for_prefix,\n+                                ty.print(cx),\n+                                print_generic_bounds(bounds, cx)\n+                            )\n+                        } else {\n+                            write!(\n+                                f,\n+                                \"{}{}: {}\",\n+                                for_prefix,\n+                                ty.print(cx),\n+                                print_generic_bounds(bounds, cx)\n+                            )\n+                        }\n+                    }\n+                    clean::WherePredicate::RegionPredicate { lifetime, bounds } => {\n+                        write!(\n+                            f,\n+                            \"{}: {}\",\n+                            lifetime.print(),\n+                            bounds\n+                                .iter()\n+                                .map(|b| b.print(cx).to_string())\n+                                .collect::<Vec<_>>()\n+                                .join(\" + \")\n+                        )\n+                    }\n+                    clean::WherePredicate::EqPredicate { lhs, rhs } => {\n+                        if f.alternate() {\n+                            write!(f, \"{:#} == {:#}\", lhs.print(cx), rhs.print(cx),)\n+                        } else {\n+                            write!(f, \"{} == {}\", lhs.print(cx), rhs.print(cx),)\n+                        }\n+                    }\n+                }\n+            })\n+        }).peekable();\n+\n+        if where_predicates.peek().is_none() {\n             return Ok(());\n         }\n+\n         let mut clause = String::new();\n+\n         if f.alternate() {\n             clause.push_str(\" where\");\n         } else {\n@@ -280,82 +353,7 @@ crate fn print_where_clause<'a, 'tcx: 'a>(\n             }\n         }\n \n-        #[derive(Clone, Copy)]\n-        enum Print<'a> {\n-            Predicate(&'a clean::WherePredicate),\n-            Comma,\n-        }\n-\n-        for pred in gens.where_predicates.iter().filter(|pred| {\n-            !matches!(pred, clean::WherePredicate::BoundPredicate { bounds, .. } if bounds.is_empty())\n-        }).map(Print::Predicate).intersperse(Print::Comma) {\n-            let pred = match pred {\n-                Print::Predicate(pred) => pred,\n-                Print::Comma => {\n-                    clause.push(',');\n-                    continue;\n-                }\n-            };\n-\n-            if f.alternate() {\n-                clause.push(' ');\n-            } else {\n-                clause.push_str(\"<br>\");\n-            }\n-\n-            match pred {\n-                clean::WherePredicate::BoundPredicate { ty, bounds, bound_params } => {\n-                    let bounds = bounds;\n-                    let for_prefix = match bound_params.len() {\n-                        0 => String::new(),\n-                        _ if f.alternate() => {\n-                            format!(\n-                                \"for&lt;{:#}&gt; \",\n-                                comma_sep(bound_params.iter().map(|lt| lt.print()))\n-                            )\n-                        }\n-                        _ => format!(\n-                            \"for&lt;{}&gt; \",\n-                            comma_sep(bound_params.iter().map(|lt| lt.print()))\n-                        ),\n-                    };\n-\n-                    if f.alternate() {\n-                        clause.push_str(&format!(\n-                            \"{}{:#}: {:#}\",\n-                            for_prefix,\n-                            ty.print(cx),\n-                            print_generic_bounds(bounds, cx)\n-                        ));\n-                    } else {\n-                        clause.push_str(&format!(\n-                            \"{}{}: {}\",\n-                            for_prefix,\n-                            ty.print(cx),\n-                            print_generic_bounds(bounds, cx)\n-                        ));\n-                    }\n-                }\n-                clean::WherePredicate::RegionPredicate { lifetime, bounds } => {\n-                    clause.push_str(&format!(\n-                        \"{}: {}\",\n-                        lifetime.print(),\n-                        bounds\n-                            .iter()\n-                            .map(|b| b.print(cx).to_string())\n-                            .collect::<Vec<_>>()\n-                            .join(\" + \")\n-                    ));\n-                }\n-                clean::WherePredicate::EqPredicate { lhs, rhs } => {\n-                    if f.alternate() {\n-                        clause.push_str(&format!(\"{:#} == {:#}\", lhs.print(cx), rhs.print(cx),));\n-                    } else {\n-                        clause.push_str(&format!(\"{} == {}\", lhs.print(cx), rhs.print(cx),));\n-                    }\n-                }\n-            }\n-        }\n+        clause.push_str(&comma_sep(where_predicates, false).to_string());\n \n         if end_newline {\n             clause.push(',');\n@@ -408,13 +406,13 @@ impl clean::PolyTrait {\n                     write!(\n                         f,\n                         \"for<{:#}> \",\n-                        comma_sep(self.generic_params.iter().map(|g| g.print(cx)))\n+                        comma_sep(self.generic_params.iter().map(|g| g.print(cx)), true)\n                     )?;\n                 } else {\n                     write!(\n                         f,\n                         \"for&lt;{}&gt; \",\n-                        comma_sep(self.generic_params.iter().map(|g| g.print(cx)))\n+                        comma_sep(self.generic_params.iter().map(|g| g.print(cx)), true)\n                     )?;\n                 }\n             }\n@@ -1125,7 +1123,7 @@ impl clean::BareFunctionDecl {\n                 write!(\n                     f,\n                     \"for&lt;{}&gt; \",\n-                    comma_sep(self.generic_params.iter().map(|g| g.print(cx)))\n+                    comma_sep(self.generic_params.iter().map(|g| g.print(cx)), true)\n                 )\n             } else {\n                 Ok(())"}, {"sha": "215ee228eb857dfba2f05370de52b9390a767dc8", "filename": "src/test/rustdoc/const-generics/generic_const_exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9c0141a4907e9255c5583304def3c16d357a5a14/src%2Ftest%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c0141a4907e9255c5583304def3c16d357a5a14/src%2Ftest%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fconst-generics%2Fgeneric_const_exprs.rs?ref=9c0141a4907e9255c5583304def3c16d357a5a14", "patch": "@@ -3,5 +3,5 @@\n #![allow(incomplete_features)]\n // make sure that `ConstEvaluatable` predicates dont cause rustdoc to ICE #77647\n // @has foo/struct.Ice.html '//pre[@class=\"rust struct\"]' \\\n-//      'pub struct Ice<const N: usize> where [(); N + 1]: ;'\n+//      'pub struct Ice<const N: usize>;'\n pub struct Ice<const N: usize> where [(); N + 1]:;"}]}