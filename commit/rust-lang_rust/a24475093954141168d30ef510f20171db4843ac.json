{"sha": "a24475093954141168d30ef510f20171db4843ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNDQ3NTA5Mzk1NDE0MTE2OGQzMGVmNTEwZjIwMTcxZGI0ODQzYWM=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-07-09T15:02:21Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-07-09T15:02:21Z"}, "message": "new 'snippet' utils method, used where applicable", "tree": {"sha": "836435f7022947176a8206a49f7462ee66becef5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/836435f7022947176a8206a49f7462ee66becef5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a24475093954141168d30ef510f20171db4843ac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a24475093954141168d30ef510f20171db4843ac", "html_url": "https://github.com/rust-lang/rust/commit/a24475093954141168d30ef510f20171db4843ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a24475093954141168d30ef510f20171db4843ac/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60ee6a4c0609cc43ff70dbffd307a7d99b4687aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/60ee6a4c0609cc43ff70dbffd307a7d99b4687aa", "html_url": "https://github.com/rust-lang/rust/commit/60ee6a4c0609cc43ff70dbffd307a7d99b4687aa"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "9511bcdee8ddebe5390f04e5e8b48d59a616ae04", "filename": "src/identity_op.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a24475093954141168d30ef510f20171db4843ac/src%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24475093954141168d30ef510f20171db4843ac/src%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fidentity_op.rs?ref=a24475093954141168d30ef510f20171db4843ac", "patch": "@@ -7,6 +7,8 @@ use syntax::ast_util::{is_comparison_binop, binop_to_string};\n use syntax::ptr::P;\n use syntax::codemap::Span;\n \n+use utils::snippet;\n+\n declare_lint! { pub IDENTITY_OP, Warn,\n     \"Warn on identity operations, e.g. '_ + 0'\"}\n     \n@@ -46,10 +48,9 @@ impl LintPass for IdentityOp {\n \n fn check(cx: &Context, e: &Expr, m: i8, span: Span, arg: Span) {\n     if have_lit(cx, e, m) {\n-        let map = cx.sess().codemap();\n         cx.span_lint(IDENTITY_OP, span, &format!(\n             \"The operation is ineffective. Consider reducing it to '{}'\", \n-            &*map.span_to_snippet(arg).unwrap_or(\"..\".to_string())));\n+           snippet(cx, arg, \"..\")));\n     }\n }\n "}, {"sha": "ffa16543f259e05e10362b95c861642638c63475", "filename": "src/misc.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a24475093954141168d30ef510f20171db4843ac/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24475093954141168d30ef510f20171db4843ac/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=a24475093954141168d30ef510f20171db4843ac", "patch": "@@ -8,7 +8,7 @@ use rustc::middle::ty;\n use syntax::codemap::{Span, Spanned};\n \n use types::span_note_and_lint;\n-use utils::match_path;\n+use utils::{match_path, snippet};\n \n pub fn walk_ty<'t>(ty: ty::Ty<'t>) -> ty::Ty<'t> {\n \tmatch ty.sty {\n@@ -43,12 +43,11 @@ impl LintPass for MiscPass {\n                     // In some cases, an exhaustive match is preferred to catch situations when\n                     // an enum is extended. So we only consider cases where a `_` wildcard is used\n                     if arms[1].pats[0].node == PatWild(PatWildSingle) && arms[0].pats.len() == 1 {\n-                        let map = cx.sess().codemap();\n                         span_note_and_lint(cx, SINGLE_MATCH, expr.span,\n                               \"You seem to be trying to use match for destructuring a single type. Did you mean to use `if let`?\",\n                               &*format!(\"Try if let {} = {} {{ ... }}\",\n-                                      &*map.span_to_snippet(arms[0].pats[0].span).unwrap_or(\"..\".to_string()),\n-                                      &*map.span_to_snippet(ex.span).unwrap_or(\"..\".to_string()))\n+                                      snippet(cx, arms[0].pats[0].span, \"..\"),\n+                                      snippet(cx, ex.span, \"..\"))\n                         );\n                     }\n                 }\n@@ -156,11 +155,10 @@ impl LintPass for FloatCmp {\n \t\tif let ExprBinary(ref cmp, ref left, ref right) = expr.node {\n \t\t\tlet op = cmp.node;\n \t\t\tif (op == BiEq || op == BiNe) && (is_float(cx, left) || is_float(cx, right)) {\n-\t\t\t\tlet map = cx.sess().codemap();\n \t\t\t\tcx.span_lint(FLOAT_CMP, expr.span, &format!(\n \t\t\t\t\t\"{}-Comparison of f32 or f64 detected. You may want to change this to 'abs({} - {}) < epsilon' for some suitable value of epsilon\",\n-\t\t\t\t\tbinop_to_string(op), &*map.span_to_snippet(left.span).unwrap_or(\"..\".to_string()), \n-\t\t\t\t\t&*map.span_to_snippet(right.span).unwrap_or(\"..\".to_string())));\n+\t\t\t\t\tbinop_to_string(op), snippet(cx, left.span, \"..\"), \n+\t\t\t\t\tsnippet(cx, right.span, \"..\")));\n \t\t\t}\n \t\t}\n \t}\n@@ -246,8 +244,7 @@ fn check_to_owned(cx: &Context, expr: &Expr, other_span: Span) {\n \t\t\t\tcx.span_lint(CMP_OWNED, expr.span, &format!(\n \t\t\t\t\t\"this creates an owned instance just for comparison. \\\n \t\t\t\t\tConsider using {}.as_slice() to compare without allocation\",\n-\t\t\t\t\tcx.sess().codemap().span_to_snippet(other_span).unwrap_or(\n-\t\t\t\t\t\t\"..\".to_string())))\n+\t\t\t\t\tsnippet(cx, other_span, \"..\")))\n \t\t\t}\n \t\t},\n \t\t&ExprCall(ref path, _) => {\n@@ -257,8 +254,7 @@ fn check_to_owned(cx: &Context, expr: &Expr, other_span: Span) {\n \t\t\t\t\tcx.span_lint(CMP_OWNED, expr.span, &format!(\n \t\t\t\t\t\"this creates an owned instance just for comparison. \\\n \t\t\t\t\tConsider using {}.as_slice() to compare without allocation\",\n-\t\t\t\t\tcx.sess().codemap().span_to_snippet(other_span).unwrap_or(\n-\t\t\t\t\t\t\"..\".to_string())))\n+\t\t\t\t\tsnippet(cx, other_span, \"..\")))\n \t\t\t\t}\n \t\t\t}\n \t\t},"}, {"sha": "7d61316367bfffbb9faf83903259172a4e4328a7", "filename": "src/utils.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a24475093954141168d30ef510f20171db4843ac/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a24475093954141168d30ef510f20171db4843ac/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=a24475093954141168d30ef510f20171db4843ac", "patch": "@@ -2,6 +2,8 @@ use rustc::lint::Context;\n use syntax::ast::{DefId, Name, Path};\n use syntax::codemap::{ExpnInfo, Span};\n use rustc::middle::ty;\n+use std::borrow::{Cow, IntoCow};\n+use std::convert::From;\n \n /// returns true if the macro that expanded the crate was outside of\n /// the current crate or was a compiler plugin\n@@ -40,3 +42,9 @@ pub fn match_path(path: &Path, segments: &[&str]) -> bool {\n \tpath.segments.iter().rev().zip(segments.iter().rev()).all(\n \t\t|(a,b)| a.identifier.as_str() == *b)\n }\n+\n+/// convert a span to a code snippet if available, otherwise use default, e.g.\n+/// `snippet(cx, expr.span, \"..\")`\n+pub fn snippet<'a>(cx: &Context, span: Span, default: &'a str) -> Cow<'a, str> {\n+\tcx.sess().codemap().span_to_snippet(span).map(From::from).unwrap_or(Cow::Borrowed(default))\n+}"}]}