{"sha": "1e9d5c70c1c435cd9ae217ab0adbb053e643b01f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlOWQ1YzcwYzFjNDM1Y2Q5YWUyMTdhYjBhZGJiMDUzZTY0M2IwMWY=", "commit": {"author": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2020-11-12T01:16:31Z"}, "committer": {"name": "Rune Tynan", "email": "runetynan@gmail.com", "date": "2020-11-12T01:16:31Z"}, "message": "Minor stylistic / review changes", "tree": {"sha": "087190f4ab11c14c0e4920740a77a9e78e9ccfe4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/087190f4ab11c14c0e4920740a77a9e78e9ccfe4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e9d5c70c1c435cd9ae217ab0adbb053e643b01f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEETdpCnQmiF6hBYUqdfsyTL4sscx4FAl+sjO8ACgkQfsyTL4ss\ncx4VDA//XXOmmQlVPhPUMTTowOAjNoK7FPIBdFFNKdBPpClKcUgACHIyVGBU13EL\nmzPqydszMxM3MHoIo8B7NlVPWG3Bp1RjvioaQq8VYUvCTVD/VcIjX0ogV84e6q5/\nZK6WVgyNDmZd29eOrQv09mhlkxu/HTy1EeuEiT2nKY9TbFiB+CR7JWVnMm31hANo\nnYjCDy1PUCQbViJnq6E7uUyjncNjeWP5Ty/vQd62cLRqGqZCdtJDYc2ZJ3V0aMSF\nOUS+KAzuPixYh9tcIFN0rApdDuGLXNztAnCJ0RTNRHpawQoBw5CAwh4KdD96bxbm\nxGQTLuEvS5k63zkC/e/RB5prItLEWMKPP8TxyJ8TfJZg6YSqfgwo8Ms68fWUfSqr\nxRceJGP6oQxGTbotrmgUk2k4wKi1Pl5Nz9O+9IRwkiWKpx9dRc+ZyYhJ80OSdCTk\nPvpXs1jy7HP1V5aiNRjh3Wn5XvlAKP+880JDaFuNrp6RiLbMwFhTUGraBAYAGkmI\nX+zjIg28PtNOualpDKNTzcnEUvDrV3zvRbdGft3Tz5sFWXZqfIQjpt7IiDcSb3yv\nAnKYtaTzvcVy3afDdHqjeFuRAefuHAjINt+ZGv8f0CIGDpdRxDUj2OKqgRSDpKsy\n9DH3GesIhz+ZW2C8Zc6YwfEjfH0iQ9FU4Cxk6DYuTLcB7ueQd0A=\n=XgIw\n-----END PGP SIGNATURE-----", "payload": "tree 087190f4ab11c14c0e4920740a77a9e78e9ccfe4\nparent bf04b0428fe6c2f85213ba4f4f3a39fbae2377e7\nauthor Rune Tynan <runetynan@gmail.com> 1605143791 -0500\ncommitter Rune Tynan <runetynan@gmail.com> 1605143791 -0500\n\nMinor stylistic / review changes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e9d5c70c1c435cd9ae217ab0adbb053e643b01f", "html_url": "https://github.com/rust-lang/rust/commit/1e9d5c70c1c435cd9ae217ab0adbb053e643b01f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e9d5c70c1c435cd9ae217ab0adbb053e643b01f/comments", "author": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CraftSpider", "id": 13342132, "node_id": "MDQ6VXNlcjEzMzQyMTMy", "avatar_url": "https://avatars.githubusercontent.com/u/13342132?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CraftSpider", "html_url": "https://github.com/CraftSpider", "followers_url": "https://api.github.com/users/CraftSpider/followers", "following_url": "https://api.github.com/users/CraftSpider/following{/other_user}", "gists_url": "https://api.github.com/users/CraftSpider/gists{/gist_id}", "starred_url": "https://api.github.com/users/CraftSpider/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CraftSpider/subscriptions", "organizations_url": "https://api.github.com/users/CraftSpider/orgs", "repos_url": "https://api.github.com/users/CraftSpider/repos", "events_url": "https://api.github.com/users/CraftSpider/events{/privacy}", "received_events_url": "https://api.github.com/users/CraftSpider/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf04b0428fe6c2f85213ba4f4f3a39fbae2377e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf04b0428fe6c2f85213ba4f4f3a39fbae2377e7", "html_url": "https://github.com/rust-lang/rust/commit/bf04b0428fe6c2f85213ba4f4f3a39fbae2377e7"}], "stats": {"total": 24, "additions": 10, "deletions": 14}, "files": [{"sha": "04cf1bd5b2564ab889d306739a7c9f844c41cdbb", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1e9d5c70c1c435cd9ae217ab0adbb053e643b01f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e9d5c70c1c435cd9ae217ab0adbb053e643b01f/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=1e9d5c70c1c435cd9ae217ab0adbb053e643b01f", "patch": "@@ -525,27 +525,23 @@ fn typeck_with_fallback<'tcx>(\n                 let expected_args = if let ImplicitSelfKind::None = decl.implicit_self { 1 } else { 2 };\n \n                 let err = || {\n-                    if let Node::Item(item) = tcx.hir().get(id) {\n-                        if let hir::ItemKind::Fn(header, ..) = &item.kind {\n-                            tcx.sess.span_err(header.span, \"A function with the \\\"rust-call\\\" ABI must take a single non-self argument that is a tuple\")\n-                        }\n+                    let item = tcx.hir().expect_item(id);\n+\n+                    if let hir::ItemKind::Fn(header, ..) = &item.kind {\n+                        tcx.sess.span_err(header.span, \"A function with the \\\"rust-call\\\" ABI must take a single non-self argument that is a tuple\")\n                     } else {\n-                        bug!(\"Couldn't get span of FnHeader being checked\")\n+                        bug!(\"Item being checked wasn't a function\")\n                     }\n                 };\n \n                 if fn_sig.inputs().len() != expected_args {\n                     err()\n                 } else {\n-                    match fn_sig.inputs()[expected_args - 1].kind() {\n-                        ty::Tuple(_) => (),\n-                        // FIXME(CraftSpider) Add a check on parameter expansion, so we don't just make the ICE happen later on\n-                        //   This will probably require wide-scale changes to support a TupleKind obligation\n-                        //   We can't resolve this without knowing the type of the param\n-                        ty::Param(_) => (),\n-                        _ => {\n-                            err()\n-                        }\n+                    // FIXME(CraftSpider) Add a check on parameter expansion, so we don't just make the ICE happen later on\n+                    //   This will probably require wide-scale changes to support a TupleKind obligation\n+                    //   We can't resolve this without knowing the type of the param\n+                    if !matches!(fn_sig.inputs()[expected_args - 1].kind(), ty::Tuple(_) | ty::Param(_)) {\n+                        err()\n                     }\n                 }\n             }"}]}