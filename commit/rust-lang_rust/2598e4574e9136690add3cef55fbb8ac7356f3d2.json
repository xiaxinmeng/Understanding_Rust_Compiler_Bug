{"sha": "2598e4574e9136690add3cef55fbb8ac7356f3d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1OThlNDU3NGU5MTM2NjkwYWRkM2NlZjU1ZmJiOGFjNzM1NmYzZDI=", "commit": {"author": {"name": "Jon Gjengset", "email": "jon@thesquareplanet.com", "date": "2017-04-05T19:33:24Z"}, "committer": {"name": "Jon Gjengset", "email": "jon@thesquareplanet.com", "date": "2017-04-05T19:46:55Z"}, "message": "Add safe wrapper for atomic_singlethreadfence_*", "tree": {"sha": "b8271dbef34aee84df8fca24eb1b881735dfdecb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b8271dbef34aee84df8fca24eb1b881735dfdecb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2598e4574e9136690add3cef55fbb8ac7356f3d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEDrgUCxKUwmVd3b8M1krJ1nF23HEFAljlSbkACgkQ1krJ1nF2\n3HHPRA//V2Ihyy5F4jdlR6nC7PB+OZRGoDotIuPjOatKZgSlIRFilU5/G473ApDT\n5QqiOjDRB2xx6utqc/OHh8PYkDeFKi91yAMMcMaTrGAiSPNaSfm9YnS5vWyNw/i4\nMB72YtG9kIA9qD8/pGWbPP698IBRO1Li66q28Ju4vOZUXdRrV92l/HLb/ZesGKla\nXKUD8YcpGFTEgZ7y4vCpQBw+otYKK6VPPHw32VXx7H1ZnZCoysVgwWPqZsQhl1Po\nvpEl3ckBGPTn0Nf2/s5ddy/dvwZR/MSjzb6w4945cIscrrMjlDs1KevgZxhhkkyU\n87hU+CfO9M6al7yfh7MDWjElM3LaHTn3eXgWEHnRCJBFJN7mciTn/rqt67dQMtI8\nOQw970rrkE1bGdKSvWxXg0SC77YYU4u3ouPhXjmF3qZ0dLUlJJKzJmeDfFR9ALAe\ngJiOQpc0mwtyH1glXbqf5we0J8jWDqMIX715hj81Y6mFe66aUe9i/5v3XvO9pL6w\nQWH3+1fhe3CH6chjtmtTHWosswKDnK5bI2YmkqXFhZUUMdP3EbanGtm9dLK65QbK\nqev5RxPZBDH6BzQRxNT6O8p08AD7fzoAGa0raLlP8dOUCzhEPd6mVPbLKopo6M7x\nhy8+2cyeqfPk2CYUKCKX5iJzJtxSFzY8LARMIwrjspkKyZKGesQ=\n=C7mb\n-----END PGP SIGNATURE-----", "payload": "tree b8271dbef34aee84df8fca24eb1b881735dfdecb\nparent ad5dfecc6ae23bb7d2b8075d705011918ab4f399\nauthor Jon Gjengset <jon@thesquareplanet.com> 1491420804 -0400\ncommitter Jon Gjengset <jon@thesquareplanet.com> 1491421615 -0400\n\nAdd safe wrapper for atomic_singlethreadfence_*\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2598e4574e9136690add3cef55fbb8ac7356f3d2", "html_url": "https://github.com/rust-lang/rust/commit/2598e4574e9136690add3cef55fbb8ac7356f3d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2598e4574e9136690add3cef55fbb8ac7356f3d2/comments", "author": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonhoo", "id": 176295, "node_id": "MDQ6VXNlcjE3NjI5NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/176295?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonhoo", "html_url": "https://github.com/jonhoo", "followers_url": "https://api.github.com/users/jonhoo/followers", "following_url": "https://api.github.com/users/jonhoo/following{/other_user}", "gists_url": "https://api.github.com/users/jonhoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonhoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonhoo/subscriptions", "organizations_url": "https://api.github.com/users/jonhoo/orgs", "repos_url": "https://api.github.com/users/jonhoo/repos", "events_url": "https://api.github.com/users/jonhoo/events{/privacy}", "received_events_url": "https://api.github.com/users/jonhoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad5dfecc6ae23bb7d2b8075d705011918ab4f399", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad5dfecc6ae23bb7d2b8075d705011918ab4f399", "html_url": "https://github.com/rust-lang/rust/commit/ad5dfecc6ae23bb7d2b8075d705011918ab4f399"}], "stats": {"total": 41, "additions": 41, "deletions": 0}, "files": [{"sha": "948edda832b46970f1bcfef3d4023303cb076689", "filename": "src/libcore/sync/atomic.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/2598e4574e9136690add3cef55fbb8ac7356f3d2/src%2Flibcore%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2598e4574e9136690add3cef55fbb8ac7356f3d2/src%2Flibcore%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsync%2Fatomic.rs?ref=2598e4574e9136690add3cef55fbb8ac7356f3d2", "patch": "@@ -1572,6 +1572,47 @@ pub fn fence(order: Ordering) {\n }\n \n \n+/// A compiler memory barrier.\n+///\n+/// `compiler_barrier` does not emit any machine code, but prevents the compiler from re-ordering\n+/// memory operations across this point. Which reorderings are disallowed is dictated by the given\n+/// [`Ordering`]. Note that `compiler_barrier` does *not* introduce inter-thread memory\n+/// synchronization; for that, a [`fence`] is needed.\n+///\n+/// The re-ordering prevented by the different ordering semantics are:\n+///\n+///  - with [`SeqCst`], no re-ordering of reads and writes across this point is allowed.\n+///  - with [`Release`], preceding reads and writes cannot be moved past subsequent writes.\n+///  - with [`Acquire`], subsequent reads and writes cannot be moved ahead of preceding reads.\n+///  - with [`AcqRel`], both of the above rules are enforced.\n+///\n+/// # Panics\n+///\n+/// Panics if `order` is [`Relaxed`].\n+///\n+/// [`fence`]: fn.fence.html\n+/// [`Ordering`]: enum.Ordering.html\n+/// [`Acquire`]: enum.Ordering.html#variant.Acquire\n+/// [`SeqCst`]: enum.Ordering.html#variant.SeqCst\n+/// [`Release`]: enum.Ordering.html#variant.Release\n+/// [`AcqRel`]: enum.Ordering.html#variant.AcqRel\n+/// [`Relaxed`]: enum.Ordering.html#variant.Relaxed\n+#[inline]\n+#[unstable(feature = \"std_compiler_fences\", issue = \"41091\")]\n+pub fn compiler_barrier(order: Ordering) {\n+    unsafe {\n+        match order {\n+            Acquire => intrinsics::atomic_singlethreadfence_acq(),\n+            Release => intrinsics::atomic_singlethreadfence_rel(),\n+            AcqRel => intrinsics::atomic_singlethreadfence_acqrel(),\n+            SeqCst => intrinsics::atomic_singlethreadfence(),\n+            Relaxed => panic!(\"there is no such thing as a relaxed barrier\"),\n+            __Nonexhaustive => panic!(\"invalid memory ordering\"),\n+        }\n+    }\n+}\n+\n+\n #[cfg(target_has_atomic = \"8\")]\n #[stable(feature = \"atomic_debug\", since = \"1.3.0\")]\n impl fmt::Debug for AtomicBool {"}]}