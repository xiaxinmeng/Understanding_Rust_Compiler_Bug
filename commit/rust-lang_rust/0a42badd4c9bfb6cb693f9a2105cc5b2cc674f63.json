{"sha": "0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhNDJiYWRkNGM5YmZiNmNiNjkzZjlhMjEwNWNjNWIyY2M2NzRmNjM=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-30T17:50:22Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-31T12:55:37Z"}, "message": "Remove AttrId from Attribute constructors", "tree": {"sha": "f95cbb26c336e447ebc9d9a24a70c8c76f0fb786", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f95cbb26c336e447ebc9d9a24a70c8c76f0fb786"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63", "html_url": "https://github.com/rust-lang/rust/commit/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "804f0f3c20455bd8a34a903bcf9449297c3de88c", "url": "https://api.github.com/repos/rust-lang/rust/commits/804f0f3c20455bd8a34a903bcf9449297c3de88c", "html_url": "https://github.com/rust-lang/rust/commit/804f0f3c20455bd8a34a903bcf9449297c3de88c"}], "stats": {"total": 56, "additions": 30, "deletions": 26}, "files": [{"sha": "145d044b521308cf06347ac11f0dbc90df4a15d2", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63", "patch": "@@ -5168,7 +5168,7 @@ impl<'a> LoweringContext<'a> {\n                         let uc_nested = attr::mk_nested_word_item(uc_ident);\n                         attr::mk_list_item(e.span, allow_ident, vec![uc_nested])\n                     };\n-                    attr::mk_attr_outer(e.span, attr::mk_attr_id(), allow)\n+                    attr::mk_attr_outer(e.span, allow)\n                 };\n                 let attrs = vec![attr];\n "}, {"sha": "11c1b1c56c71ba7384af058fe2db5616f5078d04", "filename": "src/libsyntax/attr/mod.rs", "status": "modified", "additions": 16, "deletions": 14, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63/src%2Flibsyntax%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63/src%2Flibsyntax%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr%2Fmod.rs?ref=0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63", "patch": "@@ -6,9 +6,10 @@ pub use builtin::*;\n pub use IntType::*;\n pub use ReprAttr::*;\n pub use StabilityLevel::*;\n+pub use crate::ast::Attribute;\n \n use crate::ast;\n-use crate::ast::{AttrId, Attribute, AttrStyle, Name, Ident, Path, PathSegment};\n+use crate::ast::{AttrId, AttrStyle, Name, Ident, Path, PathSegment};\n use crate::ast::{MetaItem, MetaItemKind, NestedMetaItem};\n use crate::ast::{Lit, LitKind, Expr, Item, Local, Stmt, StmtKind, GenericParam};\n use crate::mut_visit::visit_clobber;\n@@ -328,13 +329,14 @@ impl Attribute {\n             let meta = mk_name_value_item_str(\n                 Ident::with_empty_ctxt(sym::doc),\n                 dummy_spanned(Symbol::intern(&strip_doc_comment_decoration(&comment.as_str()))));\n-            let mut attr = if self.style == ast::AttrStyle::Outer {\n-                mk_attr_outer(self.span, self.id, meta)\n-            } else {\n-                mk_attr_inner(self.span, self.id, meta)\n-            };\n-            attr.is_sugared_doc = true;\n-            f(&attr)\n+            f(&Attribute {\n+                id: self.id,\n+                style: self.style,\n+                path: meta.path,\n+                tokens: meta.node.tokens(meta.span),\n+                is_sugared_doc: true,\n+                span: self.span,\n+            })\n         } else {\n             f(self)\n         }\n@@ -377,9 +379,9 @@ pub fn mk_attr_id() -> AttrId {\n }\n \n /// Returns an inner attribute with the given value and span.\n-pub fn mk_attr_inner(span: Span, id: AttrId, item: MetaItem) -> Attribute {\n+pub fn mk_attr_inner(span: Span, item: MetaItem) -> Attribute {\n     Attribute {\n-        id,\n+        id: mk_attr_id(),\n         style: ast::AttrStyle::Inner,\n         path: item.path,\n         tokens: item.node.tokens(item.span),\n@@ -389,9 +391,9 @@ pub fn mk_attr_inner(span: Span, id: AttrId, item: MetaItem) -> Attribute {\n }\n \n /// Returns an outer attribute with the given value and span.\n-pub fn mk_attr_outer(span: Span, id: AttrId, item: MetaItem) -> Attribute {\n+pub fn mk_attr_outer(span: Span, item: MetaItem) -> Attribute {\n     Attribute {\n-        id,\n+        id: mk_attr_id(),\n         style: ast::AttrStyle::Outer,\n         path: item.path,\n         tokens: item.node.tokens(item.span),\n@@ -400,12 +402,12 @@ pub fn mk_attr_outer(span: Span, id: AttrId, item: MetaItem) -> Attribute {\n     }\n }\n \n-pub fn mk_sugared_doc_attr(id: AttrId, text: Symbol, span: Span) -> Attribute {\n+pub fn mk_sugared_doc_attr(text: Symbol, span: Span) -> Attribute {\n     let style = doc_comment_style(&text.as_str());\n     let lit_kind = LitKind::Str(text, ast::StrStyle::Cooked);\n     let lit = Lit::from_lit_kind(lit_kind, span);\n     Attribute {\n-        id,\n+        id: mk_attr_id(),\n         style,\n         path: Path::from_ident(Ident::with_empty_ctxt(sym::doc).with_span_pos(span)),\n         tokens: MetaItemKind::NameValue(lit).tokens(span),"}, {"sha": "8a7a9e712a303b0294894467ca6fa25378489f73", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63", "patch": "@@ -1135,7 +1135,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn attribute(&self, sp: Span, mi: ast::MetaItem) -> ast::Attribute {\n-        attr::mk_attr_outer(sp, attr::mk_attr_id(), mi)\n+        attr::mk_attr_outer(sp, mi)\n     }\n \n     fn meta_word(&self, sp: Span, w: ast::Name) -> ast::MetaItem {"}, {"sha": "1e9e16d72f8297dab1add89b8c4d60b2918ff2cc", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63", "patch": "@@ -1340,10 +1340,14 @@ impl<'a, 'b> MutVisitor for InvocationCollector<'a, 'b> {\n             }\n \n             let meta = attr::mk_list_item(DUMMY_SP, Ident::with_empty_ctxt(sym::doc), items);\n-            match at.style {\n-                ast::AttrStyle::Inner => *at = attr::mk_attr_inner(at.span, at.id, meta),\n-                ast::AttrStyle::Outer => *at = attr::mk_attr_outer(at.span, at.id, meta),\n-            }\n+            *at = attr::Attribute {\n+                span: at.span,\n+                id: at.id,\n+                style: at.style,\n+                path: meta.path,\n+                tokens: meta.node.tokens(meta.span),\n+                is_sugared_doc: false,\n+            };\n         } else {\n             noop_visit_attribute(at, self)\n         }"}, {"sha": "a42da1123600a999fb6ac1343a2fa6cd3524f52f", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63", "patch": "@@ -53,7 +53,7 @@ impl<'a> Parser<'a> {\n                     just_parsed_doc_comment = false;\n                 }\n                 token::DocComment(s) => {\n-                    let attr = attr::mk_sugared_doc_attr(attr::mk_attr_id(), s, self.token.span);\n+                    let attr = attr::mk_sugared_doc_attr(s, self.token.span);\n                     if attr.style != ast::AttrStyle::Outer {\n                         let mut err = self.fatal(\"expected outer doc comment\");\n                         err.note(\"inner doc comments like this (starting with \\\n@@ -239,7 +239,7 @@ impl<'a> Parser<'a> {\n                 }\n                 token::DocComment(s) => {\n                     // we need to get the position of this token before we bump.\n-                    let attr = attr::mk_sugared_doc_attr(attr::mk_attr_id(), s, self.token.span);\n+                    let attr = attr::mk_sugared_doc_attr(s, self.token.span);\n                     if attr.style == ast::AttrStyle::Inner {\n                         attrs.push(attr);\n                         self.bump();"}, {"sha": "34a47c124528a06760f1db2d5f9ae3df062eced8", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63", "patch": "@@ -123,12 +123,12 @@ pub fn print_crate<'a>(cm: &'a SourceMap,\n         let pi_nested = attr::mk_nested_word_item(ast::Ident::with_empty_ctxt(sym::prelude_import));\n         let list = attr::mk_list_item(\n             DUMMY_SP, ast::Ident::with_empty_ctxt(sym::feature), vec![pi_nested]);\n-        let fake_attr = attr::mk_attr_inner(DUMMY_SP, attr::mk_attr_id(), list);\n+        let fake_attr = attr::mk_attr_inner(DUMMY_SP, list);\n         s.print_attribute(&fake_attr);\n \n         // #![no_std]\n         let no_std_meta = attr::mk_word_item(ast::Ident::with_empty_ctxt(sym::no_std));\n-        let fake_attr = attr::mk_attr_inner(DUMMY_SP, attr::mk_attr_id(), no_std_meta);\n+        let fake_attr = attr::mk_attr_inner(DUMMY_SP, no_std_meta);\n         s.print_attribute(&fake_attr);\n     }\n "}, {"sha": "e1dad909776765bf5ddc0f2fdb97b0aa51bd9709", "filename": "src/libsyntax_ext/standard_library_imports.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63/src%2Flibsyntax_ext%2Fstandard_library_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63/src%2Flibsyntax_ext%2Fstandard_library_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fstandard_library_imports.rs?ref=0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63", "patch": "@@ -42,7 +42,6 @@ pub fn inject(\n         krate.module.items.insert(0, P(ast::Item {\n             attrs: vec![attr::mk_attr_outer(\n                 DUMMY_SP,\n-                attr::mk_attr_id(),\n                 attr::mk_word_item(ast::Ident::with_empty_ctxt(sym::macro_use))\n             )],\n             vis: dummy_spanned(ast::VisibilityKind::Inherited),"}, {"sha": "c65922339e9f5e388b2f0efaf96fd269eef99cdb", "filename": "src/libsyntax_ext/test_harness.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63/src%2Flibsyntax_ext%2Ftest_harness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63/src%2Flibsyntax_ext%2Ftest_harness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_harness.rs?ref=0a42badd4c9bfb6cb693f9a2105cc5b2cc674f63", "patch": "@@ -161,7 +161,6 @@ impl MutVisitor for EntryPointCleaner {\n                     let allow_dead_code_item = attr::mk_list_item(DUMMY_SP, allow_ident,\n                                                                   vec![dc_nested]);\n                     let allow_dead_code = attr::mk_attr_outer(DUMMY_SP,\n-                                                              attr::mk_attr_id(),\n                                                               allow_dead_code_item);\n \n                     ast::Item {"}]}