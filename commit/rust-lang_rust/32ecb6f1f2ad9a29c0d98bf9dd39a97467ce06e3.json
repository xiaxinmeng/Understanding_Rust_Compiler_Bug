{"sha": "32ecb6f1f2ad9a29c0d98bf9dd39a97467ce06e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyZWNiNmYxZjJhZDlhMjljMGQ5OGJmOWRkMzlhOTc0NjdjZTA2ZTM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-20T22:32:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-20T22:32:48Z"}, "message": "Rollup merge of #68381 - mjp41:master, r=Dylan-DPC\n\nAdded minor clarification to specification of GlobalAlloc::realloc.\n\nThe specification of `realloc` is slightly unclear:\n\n```\n    /// * `layout` must be the same layout that was used\n    ///   to allocate that block of memory,\n```\nhttps://github.com/rust-lang/rust/blob/master/src/libcore/alloc.rs#L541-L542\n\nIn the case of an `alloc` or `alloc_zeroed` this is fairly evidently the `layout` parameter passed into the original call.  In the case of a `realloc`, this I assume is `layout` modified to contain `new_size`.  However, I could not find this case specified in the documentation.  Thus technically in a sequence of calls to `realloc`, it would be valid to provide the second call to `realloc` the same `layout` as the first call to `realloc`, which is almost certainly not going to be handled correctly.\n\nThis PR attempts to clarify the specification.", "tree": {"sha": "163b1b90cc71c136f348124ddf8a26c4b50b1663", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/163b1b90cc71c136f348124ddf8a26c4b50b1663"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/32ecb6f1f2ad9a29c0d98bf9dd39a97467ce06e3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeJiqRCRBK7hj4Ov3rIwAAdHIIAFazB/ey6C1Lp9/69Ecbtdno\nM2prc6ZV6dB9TCTpZYM49ygXhtL/7OjB3A+bw+2gi9bAfuzMHBaU5g9jBf0VgtEw\nN0WUlD8RBhpuqM0m3riFv0wSQZNG4v3b/lV7z+GJFDlhORGarSM2sTR7jSKwyfzt\ng4AWapVkSQ81TEXan6dsIJkgrfJOGUfrDJQPsLI84+5jIot5QmEzBOPKsb06cpNY\nu9G0nkarrbFTmAVFjagwaXEjN8ZA0Wx2miDzRxJjJ9pC3xNOm9dnX3EqJGOHxe8x\nhlPTmv7+Cc0uyNe6lBq3Pm1qpJ3WYozmdKAUZknomO/EqP3XohcPCFf6VvbXJuI=\n=+xVc\n-----END PGP SIGNATURE-----\n", "payload": "tree 163b1b90cc71c136f348124ddf8a26c4b50b1663\nparent 67b87c8ba861af77bee44e3375619151fac045bc\nparent 6be3446f92b444cd6584c7948be9f7cf20ce5518\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1579559568 +0900\ncommitter GitHub <noreply@github.com> 1579559568 +0900\n\nRollup merge of #68381 - mjp41:master, r=Dylan-DPC\n\nAdded minor clarification to specification of GlobalAlloc::realloc.\n\nThe specification of `realloc` is slightly unclear:\n\n```\n    /// * `layout` must be the same layout that was used\n    ///   to allocate that block of memory,\n```\nhttps://github.com/rust-lang/rust/blob/master/src/libcore/alloc.rs#L541-L542\n\nIn the case of an `alloc` or `alloc_zeroed` this is fairly evidently the `layout` parameter passed into the original call.  In the case of a `realloc`, this I assume is `layout` modified to contain `new_size`.  However, I could not find this case specified in the documentation.  Thus technically in a sequence of calls to `realloc`, it would be valid to provide the second call to `realloc` the same `layout` as the first call to `realloc`, which is almost certainly not going to be handled correctly.\n\nThis PR attempts to clarify the specification.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/32ecb6f1f2ad9a29c0d98bf9dd39a97467ce06e3", "html_url": "https://github.com/rust-lang/rust/commit/32ecb6f1f2ad9a29c0d98bf9dd39a97467ce06e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/32ecb6f1f2ad9a29c0d98bf9dd39a97467ce06e3/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "67b87c8ba861af77bee44e3375619151fac045bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/67b87c8ba861af77bee44e3375619151fac045bc", "html_url": "https://github.com/rust-lang/rust/commit/67b87c8ba861af77bee44e3375619151fac045bc"}, {"sha": "6be3446f92b444cd6584c7948be9f7cf20ce5518", "url": "https://api.github.com/repos/rust-lang/rust/commits/6be3446f92b444cd6584c7948be9f7cf20ce5518", "html_url": "https://github.com/rust-lang/rust/commit/6be3446f92b444cd6584c7948be9f7cf20ce5518"}], "stats": {"total": 3, "additions": 2, "deletions": 1}, "files": [{"sha": "09f743fb81e4c53885434e20536640904ad3902d", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/32ecb6f1f2ad9a29c0d98bf9dd39a97467ce06e3/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/32ecb6f1f2ad9a29c0d98bf9dd39a97467ce06e3/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=32ecb6f1f2ad9a29c0d98bf9dd39a97467ce06e3", "patch": "@@ -525,7 +525,8 @@ pub unsafe trait GlobalAlloc {\n     /// The memory may or may not have been deallocated,\n     /// and should be considered unusable (unless of course it was\n     /// transferred back to the caller again via the return value of\n-    /// this method).\n+    /// this method). The new memory block is allocated with `layout`, but\n+    /// with the `size` updated to `new_size`.\n     ///\n     /// If this method returns null, then ownership of the memory\n     /// block has not been transferred to this allocator, and the"}]}