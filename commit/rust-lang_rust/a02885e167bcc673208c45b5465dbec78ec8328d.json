{"sha": "a02885e167bcc673208c45b5465dbec78ec8328d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEwMjg4NWUxNjdiY2M2NzMyMDhjNDViNTQ2NWRiZWM3OGVjODMyOGQ=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T16:35:40Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-17T19:50:30Z"}, "message": "rollup merge of #19918: pnkfelix/ast-refactor-make-place-in-exprbox-an-option\n\nThis is to allow us to migrate away from UnUniq in a followup commit,\nand thus unify the code paths related to all forms of `box`.", "tree": {"sha": "9c6b2b91098012462430e3d3fe92c9c344d4c36f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c6b2b91098012462430e3d3fe92c9c344d4c36f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a02885e167bcc673208c45b5465dbec78ec8328d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a02885e167bcc673208c45b5465dbec78ec8328d", "html_url": "https://github.com/rust-lang/rust/commit/a02885e167bcc673208c45b5465dbec78ec8328d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a02885e167bcc673208c45b5465dbec78ec8328d/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b496adaefb440cbe01c3896bb1ef5ab1022227bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/b496adaefb440cbe01c3896bb1ef5ab1022227bb", "html_url": "https://github.com/rust-lang/rust/commit/b496adaefb440cbe01c3896bb1ef5ab1022227bb"}, {"sha": "7d4e7f079552a524440d8b5fb656d52661592aee", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d4e7f079552a524440d8b5fb656d52661592aee", "html_url": "https://github.com/rust-lang/rust/commit/7d4e7f079552a524440d8b5fb656d52661592aee"}], "stats": {"total": 60, "additions": 35, "deletions": 25}, "files": [{"sha": "0e10155beb470de6e21c5e6eab16b3e7a818db23", "filename": "src/librustc/middle/cfg/construct.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcfg%2Fconstruct.rs?ref=a02885e167bcc673208c45b5465dbec78ec8328d", "patch": "@@ -462,15 +462,13 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.straightline(expr, pred, [r, l].iter().map(|&e| &**e))\n             }\n \n+            ast::ExprBox(Some(ref l), ref r) |\n             ast::ExprIndex(ref l, ref r) |\n             ast::ExprBinary(_, ref l, ref r) => { // NB: && and || handled earlier\n                 self.straightline(expr, pred, [l, r].iter().map(|&e| &**e))\n             }\n \n-            ast::ExprBox(ref p, ref e) => {\n-                self.straightline(expr, pred, [p, e].iter().map(|&e| &**e))\n-            }\n-\n+            ast::ExprBox(None, ref e) |\n             ast::ExprAddrOf(_, ref e) |\n             ast::ExprCast(ref e, _) |\n             ast::ExprUnary(_, ref e) |"}, {"sha": "2cb78beff4c8533c6628235988e91f628fa423d1", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=a02885e167bcc673208c45b5465dbec78ec8328d", "patch": "@@ -631,7 +631,10 @@ impl<'d,'t,'tcx,TYPER:mc::Typer<'tcx>> ExprUseVisitor<'d,'t,'tcx,TYPER> {\n             }\n \n             ast::ExprBox(ref place, ref base) => {\n-                self.consume_expr(&**place);\n+                match *place {\n+                    Some(ref place) => self.consume_expr(&**place),\n+                    None => {}\n+                }\n                 self.consume_expr(&**base);\n             }\n "}, {"sha": "c76d9bc6b1faabf03a21ec1d5e9db4fd2b5d93d1", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=a02885e167bcc673208c45b5465dbec78ec8328d", "patch": "@@ -1199,7 +1199,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n \n           ast::ExprIndex(ref l, ref r) |\n           ast::ExprBinary(_, ref l, ref r) |\n-          ast::ExprBox(ref l, ref r) => {\n+          ast::ExprBox(Some(ref l), ref r) => {\n             let r_succ = self.propagate_through_expr(&**r, succ);\n             self.propagate_through_expr(&**l, r_succ)\n           }\n@@ -1210,6 +1210,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             self.propagate_through_expr(&**e1, succ)\n           }\n \n+          ast::ExprBox(None, ref e) |\n           ast::ExprAddrOf(_, ref e) |\n           ast::ExprCast(ref e, _) |\n           ast::ExprUnary(_, ref e) |"}, {"sha": "84b69eb8471b6929b3ac3d6e5b2c674ac6097d70", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=a02885e167bcc673208c45b5465dbec78ec8328d", "patch": "@@ -4320,12 +4320,13 @@ pub fn expr_kind(tcx: &ctxt, expr: &ast::Expr) -> ExprKind {\n \n         ast::ExprLit(_) | // Note: LitStr is carved out above\n         ast::ExprUnary(..) |\n+        ast::ExprBox(None, _) |\n         ast::ExprAddrOf(..) |\n         ast::ExprBinary(..) => {\n             RvalueDatumExpr\n         }\n \n-        ast::ExprBox(ref place, _) => {\n+        ast::ExprBox(Some(ref place), _) => {\n             // Special case `Box<T>` for now:\n             let definition = match tcx.def_map.borrow().get(&place.id) {\n                 Some(&def) => def,"}, {"sha": "c97e6a09529ec897d977770b648a66fb81e6771d", "filename": "src/librustc_trans/trans/debuginfo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo.rs?ref=a02885e167bcc673208c45b5465dbec78ec8328d", "patch": "@@ -3472,7 +3472,8 @@ fn populate_scope_map(cx: &CrateContext,\n                 walk_expr(cx, &**sub_exp, scope_stack, scope_map),\n \n             ast::ExprBox(ref place, ref sub_expr) => {\n-                walk_expr(cx, &**place, scope_stack, scope_map);\n+                place.as_ref().map(\n+                    |e| walk_expr(cx, &**e, scope_stack, scope_map));\n                 walk_expr(cx, &**sub_expr, scope_stack, scope_map);\n             }\n "}, {"sha": "f3b9e98ad4830251af0a78ae5c37450ca5b72658", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a02885e167bcc673208c45b5465dbec78ec8328d", "patch": "@@ -3662,22 +3662,25 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n     let tcx = fcx.ccx.tcx;\n     let id = expr.id;\n     match expr.node {\n-      ast::ExprBox(ref place, ref subexpr) => {\n-          check_expr(fcx, &**place);\n+      ast::ExprBox(ref opt_place, ref subexpr) => {\n+          opt_place.as_ref().map(|place|check_expr(fcx, &**place));\n           check_expr(fcx, &**subexpr);\n \n           let mut checked = false;\n-          if let ast::ExprPath(ref path) = place.node {\n-              // FIXME(pcwalton): For now we hardcode the two permissible\n-              // places: the exchange heap and the managed heap.\n-              let definition = lookup_def(fcx, path.span, place.id);\n-              let def_id = definition.def_id();\n-              let referent_ty = fcx.expr_ty(&**subexpr);\n-              if tcx.lang_items.exchange_heap() == Some(def_id) {\n-                  fcx.write_ty(id, ty::mk_uniq(tcx, referent_ty));\n-                  checked = true\n+          opt_place.as_ref().map(|place| match place.node {\n+              ast::ExprPath(ref path) => {\n+                  // FIXME(pcwalton): For now we hardcode the two permissible\n+                  // places: the exchange heap and the managed heap.\n+                  let definition = lookup_def(fcx, path.span, place.id);\n+                  let def_id = definition.def_id();\n+                  let referent_ty = fcx.expr_ty(&**subexpr);\n+                  if tcx.lang_items.exchange_heap() == Some(def_id) {\n+                      fcx.write_ty(id, ty::mk_uniq(tcx, referent_ty));\n+                      checked = true\n+                  }\n               }\n-          }\n+              _ => {}\n+          });\n \n           if !checked {\n               span_err!(tcx.sess, expr.span, E0066,"}, {"sha": "98d858babb171417dbd5f7374aea069145129185", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a02885e167bcc673208c45b5465dbec78ec8328d", "patch": "@@ -696,7 +696,7 @@ pub struct Expr {\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub enum Expr_ {\n     /// First expr is the place; second expr is the value.\n-    ExprBox(P<Expr>, P<Expr>),\n+    ExprBox(Option<P<Expr>>, P<Expr>),\n     ExprVec(Vec<P<Expr>>),\n     ExprCall(P<Expr>, Vec<P<Expr>>),\n     ExprMethodCall(SpannedIdent, Vec<P<Ty>>, Vec<P<Expr>>),"}, {"sha": "7d2acd08d9430f6dc2204d9f1c86ff459f9db5ee", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=a02885e167bcc673208c45b5465dbec78ec8328d", "patch": "@@ -1282,7 +1282,7 @@ pub fn noop_fold_expr<T: Folder>(Expr {id, node, span}: Expr, folder: &mut T) ->\n         id: folder.new_id(id),\n         node: match node {\n             ExprBox(p, e) => {\n-                ExprBox(folder.fold_expr(p), folder.fold_expr(e))\n+                ExprBox(p.map(|e|folder.fold_expr(e)), folder.fold_expr(e))\n             }\n             ExprVec(exprs) => {\n                 ExprVec(exprs.move_map(|x| folder.fold_expr(x)))"}, {"sha": "6e3cfe5854a4020f4d52b26ca223f335046c7da7", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a02885e167bcc673208c45b5465dbec78ec8328d", "patch": "@@ -2888,14 +2888,17 @@ impl<'a> Parser<'a> {\n                     }\n                     let subexpression = self.parse_prefix_expr();\n                     hi = subexpression.span.hi;\n-                    ex = ExprBox(place, subexpression);\n+                    ex = ExprBox(Some(place), subexpression);\n                     return self.mk_expr(lo, hi, ex);\n                 }\n             }\n \n             // Otherwise, we use the unique pointer default.\n             let subexpression = self.parse_prefix_expr();\n             hi = subexpression.span.hi;\n+            // FIXME (pnkfelix): After working out kinks with box\n+            // desugaring, should be `ExprBox(None, subexpression)`\n+            // instead.\n             ex = self.mk_unary(UnUniq, subexpression);\n           }\n           _ => return self.parse_dot_or_call_expr()"}, {"sha": "cbbfcfef72ea62785a6f7a1a18d9f834f7e9c43c", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a02885e167bcc673208c45b5465dbec78ec8328d", "patch": "@@ -1501,7 +1501,7 @@ impl<'a> State<'a> {\n             ast::ExprBox(ref p, ref e) => {\n                 try!(word(&mut self.s, \"box\"));\n                 try!(word(&mut self.s, \"(\"));\n-                try!(self.print_expr(&**p));\n+                try!(p.as_ref().map_or(Ok(()), |e|self.print_expr(&**e)));\n                 try!(self.word_space(\")\"));\n                 try!(self.print_expr(&**e));\n             }"}, {"sha": "95d7906b443544669577805f2cb183b3e36d3e9b", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a02885e167bcc673208c45b5465dbec78ec8328d/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=a02885e167bcc673208c45b5465dbec78ec8328d", "patch": "@@ -742,7 +742,7 @@ pub fn walk_mac<'v, V: Visitor<'v>>(_: &mut V, _: &'v Mac) {\n pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n     match expression.node {\n         ExprBox(ref place, ref subexpression) => {\n-            visitor.visit_expr(&**place);\n+            place.as_ref().map(|e|visitor.visit_expr(&**e));\n             visitor.visit_expr(&**subexpression)\n         }\n         ExprVec(ref subexpressions) => {"}]}