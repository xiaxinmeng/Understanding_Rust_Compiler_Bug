{"sha": "890cabac8acb566dee2d01bdfd9198546adfa310", "node_id": "C_kwDOAAsO6NoAKDg5MGNhYmFjOGFjYjU2NmRlZTJkMDFiZGZkOTE5ODU0NmFkZmEzMTA", "commit": {"author": {"name": "Nikita Popov", "email": "npopov@redhat.com", "date": "2022-04-19T11:22:39Z"}, "committer": {"name": "Nikita Popov", "email": "npopov@redhat.com", "date": "2022-04-20T07:25:47Z"}, "message": "Stub out various legacy PM functions with LLVM 15", "tree": {"sha": "05c689005230b6e40a784f7f35933dbcefda51aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05c689005230b6e40a784f7f35933dbcefda51aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/890cabac8acb566dee2d01bdfd9198546adfa310", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/890cabac8acb566dee2d01bdfd9198546adfa310", "html_url": "https://github.com/rust-lang/rust/commit/890cabac8acb566dee2d01bdfd9198546adfa310", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/890cabac8acb566dee2d01bdfd9198546adfa310/comments", "author": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikic", "id": 216080, "node_id": "MDQ6VXNlcjIxNjA4MA==", "avatar_url": "https://avatars.githubusercontent.com/u/216080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikic", "html_url": "https://github.com/nikic", "followers_url": "https://api.github.com/users/nikic/followers", "following_url": "https://api.github.com/users/nikic/following{/other_user}", "gists_url": "https://api.github.com/users/nikic/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikic/subscriptions", "organizations_url": "https://api.github.com/users/nikic/orgs", "repos_url": "https://api.github.com/users/nikic/repos", "events_url": "https://api.github.com/users/nikic/events{/privacy}", "received_events_url": "https://api.github.com/users/nikic/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dc307fc7a55faddec71fff574c5789f84741315", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dc307fc7a55faddec71fff574c5789f84741315", "html_url": "https://github.com/rust-lang/rust/commit/7dc307fc7a55faddec71fff574c5789f84741315"}], "stats": {"total": 48, "additions": 46, "deletions": 2}, "files": [{"sha": "3f5957bdb6e8f2ede7e2ae34b00c5b15abc4ec18", "filename": "compiler/rustc_codegen_llvm/src/back/lto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890cabac8acb566dee2d01bdfd9198546adfa310/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890cabac8acb566dee2d01bdfd9198546adfa310/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fback%2Flto.rs?ref=890cabac8acb566dee2d01bdfd9198546adfa310", "patch": "@@ -625,7 +625,7 @@ pub(crate) fn run_pass_manager(\n             if thin {\n                 llvm::LLVMRustPassManagerBuilderPopulateThinLTOPassManager(b, pm);\n             } else {\n-                llvm::LLVMPassManagerBuilderPopulateLTOPassManager(\n+                llvm::LLVMRustPassManagerBuilderPopulateLTOPassManager(\n                     b, pm, /* Internalize = */ False, /* RunInliner = */ True,\n                 );\n             }"}, {"sha": "492cd10b4657c9fd86a4bcc0c3b2af0c70929dab", "filename": "compiler/rustc_codegen_llvm/src/llvm/ffi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/890cabac8acb566dee2d01bdfd9198546adfa310/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/890cabac8acb566dee2d01bdfd9198546adfa310/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fllvm%2Fffi.rs?ref=890cabac8acb566dee2d01bdfd9198546adfa310", "patch": "@@ -1842,7 +1842,7 @@ extern \"C\" {\n         PMB: &PassManagerBuilder,\n         PM: &PassManager<'_>,\n     );\n-    pub fn LLVMPassManagerBuilderPopulateLTOPassManager(\n+    pub fn LLVMRustPassManagerBuilderPopulateLTOPassManager(\n         PMB: &PassManagerBuilder,\n         PM: &PassManager<'_>,\n         Internalize: Bool,"}, {"sha": "3f522b0bcef71b508dde9c51057fe161576e8098", "filename": "compiler/rustc_llvm/llvm-wrapper/PassWrapper.cpp", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/890cabac8acb566dee2d01bdfd9198546adfa310/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/890cabac8acb566dee2d01bdfd9198546adfa310/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2Fllvm-wrapper%2FPassWrapper.cpp?ref=890cabac8acb566dee2d01bdfd9198546adfa310", "patch": "@@ -107,6 +107,7 @@ static LLVMRustPassKind toRust(PassKind Kind) {\n }\n \n extern \"C\" LLVMPassRef LLVMRustFindAndCreatePass(const char *PassName) {\n+#if LLVM_VERSION_LT(15, 0)\n   StringRef SR(PassName);\n   PassRegistry *PR = PassRegistry::getPassRegistry();\n \n@@ -115,36 +116,59 @@ extern \"C\" LLVMPassRef LLVMRustFindAndCreatePass(const char *PassName) {\n     return wrap(PI->createPass());\n   }\n   return nullptr;\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n extern \"C\" LLVMPassRef LLVMRustCreateAddressSanitizerFunctionPass(bool Recover) {\n+#if LLVM_VERSION_LT(15, 0)\n   const bool CompileKernel = false;\n   const bool UseAfterScope = true;\n \n   return wrap(createAddressSanitizerFunctionPass(CompileKernel, Recover, UseAfterScope));\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n extern \"C\" LLVMPassRef LLVMRustCreateModuleAddressSanitizerPass(bool Recover) {\n+#if LLVM_VERSION_LT(15, 0)\n   const bool CompileKernel = false;\n \n   return wrap(createModuleAddressSanitizerLegacyPassPass(CompileKernel, Recover));\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n extern \"C\" LLVMPassRef LLVMRustCreateMemorySanitizerPass(int TrackOrigins, bool Recover) {\n+#if LLVM_VERSION_LT(15, 0)\n   const bool CompileKernel = false;\n \n   return wrap(createMemorySanitizerLegacyPassPass(\n       MemorySanitizerOptions{TrackOrigins, Recover, CompileKernel}));\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n extern \"C\" LLVMPassRef LLVMRustCreateThreadSanitizerPass() {\n+#if LLVM_VERSION_LT(15, 0)\n   return wrap(createThreadSanitizerLegacyPassPass());\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n extern \"C\" LLVMPassRef LLVMRustCreateHWAddressSanitizerPass(bool Recover) {\n+#if LLVM_VERSION_LT(15, 0)\n   const bool CompileKernel = false;\n \n   return wrap(createHWAddressSanitizerLegacyPassPass(CompileKernel, Recover));\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n extern \"C\" LLVMRustPassKind LLVMRustPassKind(LLVMPassRef RustPass) {\n@@ -154,23 +178,40 @@ extern \"C\" LLVMRustPassKind LLVMRustPassKind(LLVMPassRef RustPass) {\n }\n \n extern \"C\" void LLVMRustAddPass(LLVMPassManagerRef PMR, LLVMPassRef RustPass) {\n+#if LLVM_VERSION_LT(15, 0)\n   assert(RustPass);\n   Pass *Pass = unwrap(RustPass);\n   PassManagerBase *PMB = unwrap(PMR);\n   PMB->add(Pass);\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n+}\n+extern \"C\" void LLVMRustPassManagerBuilderPopulateLTOPassManager(\n+  LLVMPassManagerBuilderRef PMB, LLVMPassManagerRef PM, bool Internalize, bool RunInliner) {\n+#if LLVM_VERSION_LT(15, 0)\n+  LLVMPassManagerBuilderPopulateLTOPassManager(PMB, PM, Internalize, RunInliner);\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n extern \"C\"\n void LLVMRustPassManagerBuilderPopulateThinLTOPassManager(\n   LLVMPassManagerBuilderRef PMBR,\n   LLVMPassManagerRef PMR\n ) {\n+#if LLVM_VERSION_LT(15, 0)\n   unwrap(PMBR)->populateThinLTOPassManager(*unwrap(PMR));\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n extern \"C\"\n void LLVMRustAddLastExtensionPasses(\n     LLVMPassManagerBuilderRef PMBR, LLVMPassRef *Passes, size_t NumPasses) {\n+#if LLVM_VERSION_LT(15, 0)\n   auto AddExtensionPasses = [Passes, NumPasses](\n       const PassManagerBuilder &Builder, PassManagerBase &PM) {\n     for (size_t I = 0; I < NumPasses; I++) {\n@@ -183,6 +224,9 @@ void LLVMRustAddLastExtensionPasses(\n                              AddExtensionPasses);\n   unwrap(PMBR)->addExtension(PassManagerBuilder::EP_EnabledOnOptLevel0,\n                              AddExtensionPasses);\n+#else\n+  report_fatal_error(\"Legacy PM not supported with LLVM 15\");\n+#endif\n }\n \n #ifdef LLVM_COMPONENT_X86"}]}