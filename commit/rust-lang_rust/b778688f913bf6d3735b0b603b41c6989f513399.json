{"sha": "b778688f913bf6d3735b0b603b41c6989f513399", "node_id": "C_kwDOAAsO6NoAKGI3Nzg2ODhmOTEzYmY2ZDM3MzViMGI2MDNiNDFjNjk4OWY1MTMzOTk", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-04-29T21:36:48Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-04-29T21:36:48Z"}, "message": "Unify attributes retrieval for JSON and HTML rendering", "tree": {"sha": "d3460f274233b96dfcb020cb29f9eed896342f73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3460f274233b96dfcb020cb29f9eed896342f73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b778688f913bf6d3735b0b603b41c6989f513399", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b778688f913bf6d3735b0b603b41c6989f513399", "html_url": "https://github.com/rust-lang/rust/commit/b778688f913bf6d3735b0b603b41c6989f513399", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b778688f913bf6d3735b0b603b41c6989f513399/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2693e20aa3a4d1a430fcacf48d85e984323e122f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2693e20aa3a4d1a430fcacf48d85e984323e122f", "html_url": "https://github.com/rust-lang/rust/commit/2693e20aa3a4d1a430fcacf48d85e984323e122f"}], "stats": {"total": 155, "additions": 76, "deletions": 79}, "files": [{"sha": "7371b44465bab00b63fe49fc034c20859afaa258", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/b778688f913bf6d3735b0b603b41c6989f513399/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b778688f913bf6d3735b0b603b41c6989f513399/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=b778688f913bf6d3735b0b603b41c6989f513399", "patch": "@@ -11,6 +11,7 @@ use arrayvec::ArrayVec;\n use thin_vec::ThinVec;\n \n use rustc_ast as ast;\n+use rustc_ast_pretty::pprust;\n use rustc_attr::{ConstStability, Deprecation, Stability, StabilityLevel};\n use rustc_const_eval::const_eval::is_unstable_const_fn;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -711,6 +712,78 @@ impl Item {\n         };\n         Some(tcx.visibility(def_id))\n     }\n+\n+    pub(crate) fn attributes(&self, tcx: TyCtxt<'_>, keep_as_is: bool) -> Vec<String> {\n+        const ALLOWED_ATTRIBUTES: &[Symbol] =\n+            &[sym::export_name, sym::link_section, sym::no_mangle, sym::repr, sym::non_exhaustive];\n+\n+        use rustc_abi::IntegerType;\n+        use rustc_middle::ty::ReprFlags;\n+\n+        let mut attrs: Vec<String> = self\n+            .attrs\n+            .other_attrs\n+            .iter()\n+            .filter_map(|attr| {\n+                if keep_as_is {\n+                    Some(pprust::attribute_to_string(attr))\n+                } else if ALLOWED_ATTRIBUTES.contains(&attr.name_or_empty()) {\n+                    Some(\n+                        pprust::attribute_to_string(attr)\n+                            .replace(\"\\\\\\n\", \"\")\n+                            .replace('\\n', \"\")\n+                            .replace(\"  \", \" \"),\n+                    )\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect();\n+        if let Some(def_id) = self.item_id.as_def_id() &&\n+            !def_id.is_local() &&\n+            // This check is needed because `adt_def` will panic if not a compatible type otherwise...\n+            matches!(self.type_(), ItemType::Struct | ItemType::Enum | ItemType::Union)\n+        {\n+            let repr = tcx.adt_def(def_id).repr();\n+            let mut out = Vec::new();\n+            if repr.flags.contains(ReprFlags::IS_C) {\n+                out.push(\"C\");\n+            }\n+            if repr.flags.contains(ReprFlags::IS_TRANSPARENT) {\n+                out.push(\"transparent\");\n+            }\n+            if repr.flags.contains(ReprFlags::IS_SIMD) {\n+                out.push(\"simd\");\n+            }\n+            let pack_s;\n+            if let Some(pack) = repr.pack {\n+                pack_s = format!(\"packed({})\", pack.bytes());\n+                out.push(&pack_s);\n+            }\n+            let align_s;\n+            if let Some(align) = repr.align {\n+                align_s = format!(\"align({})\", align.bytes());\n+                out.push(&align_s);\n+            }\n+            let int_s;\n+            if let Some(int) = repr.int {\n+                int_s = match int {\n+                    IntegerType::Pointer(is_signed) => {\n+                        format!(\"{}size\", if is_signed { 'i' } else { 'u' })\n+                    }\n+                    IntegerType::Fixed(size, is_signed) => {\n+                        format!(\"{}{}\", if is_signed { 'i' } else { 'u' }, size.size().bytes() * 8)\n+                    }\n+                };\n+                out.push(&int_s);\n+            }\n+            if out.is_empty() {\n+                return Vec::new();\n+            }\n+            attrs.push(format!(\"#[repr({})]\", out.join(\", \")));\n+        }\n+        attrs\n+    }\n }\n \n #[derive(Clone, Debug)]"}, {"sha": "91ca048050efe63fc0ce491297cb16683a26c8fc", "filename": "src/librustdoc/html/render/mod.rs", "status": "modified", "additions": 2, "deletions": 73, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/b778688f913bf6d3735b0b603b41c6989f513399/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b778688f913bf6d3735b0b603b41c6989f513399/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fmod.rs?ref=b778688f913bf6d3735b0b603b41c6989f513399", "patch": "@@ -48,7 +48,6 @@ use std::str;\n use std::string::ToString;\n \n use askama::Template;\n-use rustc_ast_pretty::pprust;\n use rustc_attr::{ConstStability, Deprecation, StabilityLevel};\n use rustc_data_structures::captures::Captures;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -1021,76 +1020,6 @@ fn render_assoc_item(\n     }\n }\n \n-const ALLOWED_ATTRIBUTES: &[Symbol] =\n-    &[sym::export_name, sym::link_section, sym::no_mangle, sym::repr, sym::non_exhaustive];\n-\n-fn attributes(it: &clean::Item, tcx: TyCtxt<'_>) -> Vec<String> {\n-    use rustc_abi::IntegerType;\n-    use rustc_middle::ty::ReprFlags;\n-\n-    let mut attrs: Vec<String> = it\n-        .attrs\n-        .other_attrs\n-        .iter()\n-        .filter_map(|attr| {\n-            if ALLOWED_ATTRIBUTES.contains(&attr.name_or_empty()) {\n-                Some(\n-                    pprust::attribute_to_string(attr)\n-                        .replace(\"\\\\\\n\", \"\")\n-                        .replace('\\n', \"\")\n-                        .replace(\"  \", \" \"),\n-                )\n-            } else {\n-                None\n-            }\n-        })\n-        .collect();\n-    if let Some(def_id) = it.item_id.as_def_id() &&\n-        !def_id.is_local() &&\n-        // This check is needed because `adt_def` will panic if not a compatible type otherwise...\n-        matches!(it.type_(), ItemType::Struct | ItemType::Enum | ItemType::Union)\n-    {\n-        let repr = tcx.adt_def(def_id).repr();\n-        let mut out = Vec::new();\n-        if repr.flags.contains(ReprFlags::IS_C) {\n-            out.push(\"C\");\n-        }\n-        if repr.flags.contains(ReprFlags::IS_TRANSPARENT) {\n-            out.push(\"transparent\");\n-        }\n-        if repr.flags.contains(ReprFlags::IS_SIMD) {\n-            out.push(\"simd\");\n-        }\n-        let pack_s;\n-        if let Some(pack) = repr.pack {\n-            pack_s = format!(\"packed({})\", pack.bytes());\n-            out.push(&pack_s);\n-        }\n-        let align_s;\n-        if let Some(align) = repr.align {\n-            align_s = format!(\"align({})\", align.bytes());\n-            out.push(&align_s);\n-        }\n-        let int_s;\n-        if let Some(int) = repr.int {\n-            int_s = match int {\n-                IntegerType::Pointer(is_signed) => {\n-                    format!(\"{}size\", if is_signed { 'i' } else { 'u' })\n-                }\n-                IntegerType::Fixed(size, is_signed) => {\n-                    format!(\"{}{}\", if is_signed { 'i' } else { 'u' }, size.size().bytes() * 8)\n-                }\n-            };\n-            out.push(&int_s);\n-        }\n-        if out.is_empty() {\n-            return Vec::new();\n-        }\n-        attrs.push(format!(\"#[repr({})]\", out.join(\", \")));\n-    }\n-    attrs\n-}\n-\n // When an attribute is rendered inside a `<pre>` tag, it is formatted using\n // a whitespace prefix and newline.\n fn render_attributes_in_pre<'a, 'b: 'a>(\n@@ -1099,7 +1028,7 @@ fn render_attributes_in_pre<'a, 'b: 'a>(\n     tcx: TyCtxt<'b>,\n ) -> impl fmt::Display + Captures<'a> + Captures<'b> {\n     crate::html::format::display_fn(move |f| {\n-        for a in attributes(it, tcx) {\n+        for a in it.attributes(tcx, false) {\n             writeln!(f, \"{}{}\", prefix, a)?;\n         }\n         Ok(())\n@@ -1109,7 +1038,7 @@ fn render_attributes_in_pre<'a, 'b: 'a>(\n // When an attribute is rendered inside a <code> tag, it is formatted using\n // a div to produce a newline after it.\n fn render_attributes_in_code(w: &mut Buffer, it: &clean::Item, tcx: TyCtxt<'_>) {\n-    for a in attributes(it, tcx) {\n+    for a in it.attributes(tcx, false) {\n         write!(w, \"<div class=\\\"code-attribute\\\">{}</div>\", a);\n     }\n }"}, {"sha": "62aab46fa7e8b1a97d05fd3c8225affefc936073", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b778688f913bf6d3735b0b603b41c6989f513399/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b778688f913bf6d3735b0b603b41c6989f513399/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=b778688f913bf6d3735b0b603b41c6989f513399", "patch": "@@ -41,12 +41,7 @@ impl JsonRenderer<'_> {\n             })\n             .collect();\n         let docs = item.attrs.collapsed_doc_value();\n-        let attrs = item\n-            .attrs\n-            .other_attrs\n-            .iter()\n-            .map(rustc_ast_pretty::pprust::attribute_to_string)\n-            .collect();\n+        let attrs = item.attributes(self.tcx, true);\n         let span = item.span(self.tcx);\n         let visibility = item.visibility(self.tcx);\n         let clean::Item { name, item_id, .. } = item;"}]}