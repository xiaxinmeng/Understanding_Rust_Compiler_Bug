{"sha": "d930b2cafba3784e0a2dde608f2c6eddcc285a39", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MzBiMmNhZmJhMzc4NGUwYTJkZGU2MDhmMmM2ZWRkY2MyODVhMzk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-25T05:37:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-25T05:37:54Z"}, "message": "auto merge of #6730 : hjr3/rust/exit_code, r=z0w0\n\nScripts need to know if the tests pass or the program ran correctly.", "tree": {"sha": "3858ccfa5ebb856cb61247f2dede7c88efd6369e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3858ccfa5ebb856cb61247f2dede7c88efd6369e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d930b2cafba3784e0a2dde608f2c6eddcc285a39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d930b2cafba3784e0a2dde608f2c6eddcc285a39", "html_url": "https://github.com/rust-lang/rust/commit/d930b2cafba3784e0a2dde608f2c6eddcc285a39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d930b2cafba3784e0a2dde608f2c6eddcc285a39/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0628c92540c467de03524fae7f7061065de2295c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0628c92540c467de03524fae7f7061065de2295c", "html_url": "https://github.com/rust-lang/rust/commit/0628c92540c467de03524fae7f7061065de2295c"}, {"sha": "264c84b892f531f968b1ab9c9b8e15f2c66cf524", "url": "https://api.github.com/repos/rust-lang/rust/commits/264c84b892f531f968b1ab9c9b8e15f2c66cf524", "html_url": "https://github.com/rust-lang/rust/commit/264c84b892f531f968b1ab9c9b8e15f2c66cf524"}], "stats": {"total": 24, "additions": 14, "deletions": 10}, "files": [{"sha": "6449958e09c0c88106610187847f665923365563", "filename": "src/librust/rust.rc", "status": "modified", "additions": 14, "deletions": 10, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d930b2cafba3784e0a2dde608f2c6eddcc285a39/src%2Flibrust%2Frust.rc", "raw_url": "https://github.com/rust-lang/rust/raw/d930b2cafba3784e0a2dde608f2c6eddcc285a39/src%2Flibrust%2Frust.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rc?ref=d930b2cafba3784e0a2dde608f2c6eddcc285a39", "patch": "@@ -32,16 +32,17 @@ extern mod rustc;\n use core::prelude::*;\n \n use core::run;\n+use core::libc::exit;\n \n enum ValidUsage {\n-    Valid, Invalid\n+    Valid(int), Invalid\n }\n \n impl ValidUsage {\n     fn is_valid(&self) -> bool {\n         match *self {\n-            Valid   => true,\n-            Invalid => false\n+            Valid(_)   => true,\n+            Invalid    => false\n         }\n     }\n }\n@@ -144,7 +145,7 @@ fn cmd_help(args: &[~str]) -> ValidUsage {\n                     UsgStr(msg) => io::println(fmt!(\"%s\\n\", msg)),\n                     UsgCall(f)  => f(),\n                 }\n-                Valid\n+                Valid(0)\n             },\n             None => Invalid\n         }\n@@ -162,8 +163,8 @@ fn cmd_test(args: &[~str]) -> ValidUsage {\n             let test_exec = Path(filename).filestem().unwrap() + \"test~\";\n             invoke(\"rustc\", &[~\"--test\", filename.to_owned(),\n                               ~\"-o\", test_exec.to_owned()], rustc::main);\n-            run::run_program(~\"./\" + test_exec, []);\n-            Valid\n+            let exit_code = run::run_program(~\"./\" + test_exec, []);\n+            Valid(exit_code)\n         }\n         _ => Invalid\n     }\n@@ -175,8 +176,8 @@ fn cmd_run(args: &[~str]) -> ValidUsage {\n             let exec = Path(filename).filestem().unwrap() + \"~\";\n             invoke(\"rustc\", &[filename.to_owned(), ~\"-o\", exec.to_owned()],\n                    rustc::main);\n-            run::run_program(~\"./\"+exec, prog_args);\n-            Valid\n+            let exit_code = run::run_program(~\"./\"+exec, prog_args);\n+            Valid(exit_code)\n         }\n         _ => Invalid\n     }\n@@ -194,7 +195,7 @@ fn do_command(command: &Command, args: &[~str]) -> ValidUsage {\n         Call(f) => f(args),\n         CallMain(prog, f) => {\n             invoke(prog, args, f);\n-            Valid\n+            Valid(0)\n         }\n     }\n }\n@@ -233,7 +234,10 @@ pub fn main() {\n     if !args.is_empty() {\n         for find_cmd(*args.head()).each |command| {\n             let result = do_command(command, args.tail());\n-            if result.is_valid() { return; }\n+            match result {\n+                Valid(exit_code) => unsafe { exit(exit_code.to_i32()) },\n+                _                => loop\n+            }\n         }\n     }\n "}]}