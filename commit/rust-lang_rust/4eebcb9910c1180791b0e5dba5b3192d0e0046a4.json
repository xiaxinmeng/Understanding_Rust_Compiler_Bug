{"sha": "4eebcb9910c1180791b0e5dba5b3192d0e0046a4", "node_id": "C_kwDOAAsO6NoAKDRlZWJjYjk5MTBjMTE4MDc5MWIwZTVkYmE1YjMxOTJkMGUwMDQ2YTQ", "commit": {"author": {"name": "KaDiWa", "email": "kalle.wachsmuth@gmail.com", "date": "2022-08-13T13:50:01Z"}, "committer": {"name": "KaDiWa", "email": "kalle.wachsmuth@gmail.com", "date": "2022-08-13T14:16:52Z"}, "message": "avoid cloning and then iterating", "tree": {"sha": "cea770766afe0e4492d81cac7b22f516ad95cd4f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cea770766afe0e4492d81cac7b22f516ad95cd4f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4eebcb9910c1180791b0e5dba5b3192d0e0046a4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEcFQWTVq3UZxSk8EiC1KuORxnTOUFAmL3slQACgkQC1KuORxn\nTOVjRQ//T3vrh15i/BWzNmrUXMek0mmbYX2UMhIgcLqt1ribksPazKpBLJlXLtM7\nPbc/w1JYGomPaWgXoMx2Zl+udglbUHSqbj9GITbhgDS3lAd7vW2eHKjeiv9tUAQj\nJbI3LvJtmjnUjpD48+ISkcUOY6Xl12aOD6GXLJrGz8GRPaxnIxZyzu4yV3A5yD5N\nhr+CVoH7PLAC6K+8La39CXBJupE67k4r7KOGP31WPeZiQGtoo2cwAbkB8VbFg+ty\nN2tk1dFKQC7mKj7XeOsafhICHf0rIwkiX0/Umo5jD3NIuh2UueWZWGKWePxi7mzl\nL74df8agGqQ5pDvRDH1Tyh7Q6z+xoVnbU+Op9HHdXORtfBVFjDVbstBHfRX8Vk8P\nX5zRi6SXO7iKZ8n2dCewJ0TCR0IQGkGGdWe/I8Ixk26NkH4woydmPzeiHZ8ScRKf\nqAllmlR9o6N2q/evh/l1udfPAciiCkvU87IocphlDtVwg7cs2DoFD5veDOonjbmY\nJsPeUXoyFK7Hg2miFSp2saVMrW6AVkDyj+5zp3dWdvDf9k/Fj9ySuvtHnIoa7/YC\nzCk2ZQN319BZzld71vukZiGuUcD5P0ZRHkBikfFxy2dB8YwYw1CO9x0rf5ozMAmO\nKpnb3zjuBNfJST6ltcVMrti7Sadqx7ws0TaRKangL2YhbjkUbjI=\n=rTWm\n-----END PGP SIGNATURE-----", "payload": "tree cea770766afe0e4492d81cac7b22f516ad95cd4f\nparent 75b7e52e92c3b00fc891b47f5b2efdff0a2be55a\nauthor KaDiWa <kalle.wachsmuth@gmail.com> 1660398601 +0200\ncommitter KaDiWa <kalle.wachsmuth@gmail.com> 1660400212 +0200\n\navoid cloning and then iterating\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4eebcb9910c1180791b0e5dba5b3192d0e0046a4", "html_url": "https://github.com/rust-lang/rust/commit/4eebcb9910c1180791b0e5dba5b3192d0e0046a4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/comments", "author": {"login": "kadiwa4", "id": 25464294, "node_id": "MDQ6VXNlcjI1NDY0Mjk0", "avatar_url": "https://avatars.githubusercontent.com/u/25464294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kadiwa4", "html_url": "https://github.com/kadiwa4", "followers_url": "https://api.github.com/users/kadiwa4/followers", "following_url": "https://api.github.com/users/kadiwa4/following{/other_user}", "gists_url": "https://api.github.com/users/kadiwa4/gists{/gist_id}", "starred_url": "https://api.github.com/users/kadiwa4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kadiwa4/subscriptions", "organizations_url": "https://api.github.com/users/kadiwa4/orgs", "repos_url": "https://api.github.com/users/kadiwa4/repos", "events_url": "https://api.github.com/users/kadiwa4/events{/privacy}", "received_events_url": "https://api.github.com/users/kadiwa4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kadiwa4", "id": 25464294, "node_id": "MDQ6VXNlcjI1NDY0Mjk0", "avatar_url": "https://avatars.githubusercontent.com/u/25464294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kadiwa4", "html_url": "https://github.com/kadiwa4", "followers_url": "https://api.github.com/users/kadiwa4/followers", "following_url": "https://api.github.com/users/kadiwa4/following{/other_user}", "gists_url": "https://api.github.com/users/kadiwa4/gists{/gist_id}", "starred_url": "https://api.github.com/users/kadiwa4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kadiwa4/subscriptions", "organizations_url": "https://api.github.com/users/kadiwa4/orgs", "repos_url": "https://api.github.com/users/kadiwa4/repos", "events_url": "https://api.github.com/users/kadiwa4/events{/privacy}", "received_events_url": "https://api.github.com/users/kadiwa4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "75b7e52e92c3b00fc891b47f5b2efdff0a2be55a", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b7e52e92c3b00fc891b47f5b2efdff0a2be55a", "html_url": "https://github.com/rust-lang/rust/commit/75b7e52e92c3b00fc891b47f5b2efdff0a2be55a"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "708a7eabc0f9b717b4d2aaa7268be9b630e096df", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=4eebcb9910c1180791b0e5dba5b3192d0e0046a4", "patch": "@@ -385,8 +385,7 @@ fn find_type_parameters(\n         // Place bound generic params on a stack, to extract them when a type is encountered.\n         fn visit_poly_trait_ref(&mut self, trait_ref: &'a ast::PolyTraitRef) {\n             let stack_len = self.bound_generic_params_stack.len();\n-            self.bound_generic_params_stack\n-                .extend(trait_ref.bound_generic_params.clone().into_iter());\n+            self.bound_generic_params_stack.extend(trait_ref.bound_generic_params.iter().cloned());\n \n             visit::walk_poly_trait_ref(self, trait_ref);\n "}, {"sha": "ca0ac7829b1a41fdaae7a17cd85b13f310c5de5b", "filename": "compiler/rustc_parse/src/parser/attr_wrapper.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fattr_wrapper.rs?ref=4eebcb9910c1180791b0e5dba5b3192d0e0046a4", "patch": "@@ -116,7 +116,7 @@ impl CreateTokenStream for LazyTokenStreamImpl {\n \n         if !self.replace_ranges.is_empty() {\n             let mut tokens: Vec<_> = tokens.collect();\n-            let mut replace_ranges = self.replace_ranges.clone();\n+            let mut replace_ranges = self.replace_ranges.to_vec();\n             replace_ranges.sort_by_key(|(range, _)| range.start);\n \n             #[cfg(debug_assertions)]\n@@ -146,7 +146,7 @@ impl CreateTokenStream for LazyTokenStreamImpl {\n             // start position, we ensure that any replace range which encloses\n             // another replace range will capture the *replaced* tokens for the inner\n             // range, not the original tokens.\n-            for (range, new_tokens) in replace_ranges.iter().rev() {\n+            for (range, new_tokens) in replace_ranges.into_iter().rev() {\n                 assert!(!range.is_empty(), \"Cannot replace an empty range: {:?}\", range);\n                 // Replace ranges are only allowed to decrease the number of tokens.\n                 assert!(\n@@ -165,7 +165,7 @@ impl CreateTokenStream for LazyTokenStreamImpl {\n \n                 tokens.splice(\n                     (range.start as usize)..(range.end as usize),\n-                    new_tokens.clone().into_iter().chain(filler),\n+                    new_tokens.into_iter().chain(filler),\n                 );\n             }\n             make_token_stream(tokens.into_iter(), self.break_last_token)\n@@ -321,7 +321,7 @@ impl<'a> Parser<'a> {\n             self.capture_state.replace_ranges[replace_ranges_start..replace_ranges_end]\n                 .iter()\n                 .cloned()\n-                .chain(inner_attr_replace_ranges.clone().into_iter())\n+                .chain(inner_attr_replace_ranges.iter().cloned())\n                 .map(|(range, tokens)| {\n                     ((range.start - start_calls)..(range.end - start_calls), tokens)\n                 })"}, {"sha": "7f74778593609440a09458249ea28f603a5b3dfb", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=4eebcb9910c1180791b0e5dba5b3192d0e0046a4", "patch": "@@ -387,7 +387,7 @@ impl<'a> Parser<'a> {\n     /// This is to avoid losing unclosed delims errors `create_snapshot_for_diagnostic` clears.\n     pub(super) fn restore_snapshot(&mut self, snapshot: SnapshotParser<'a>) {\n         *self = snapshot.parser;\n-        self.unclosed_delims.extend(snapshot.unclosed_delims.clone());\n+        self.unclosed_delims.extend(snapshot.unclosed_delims);\n     }\n \n     pub fn unclosed_delims(&self) -> &[UnmatchedBrace] {"}, {"sha": "5cacd7fc681b0a6b28dee60e22cc0e847f12b312", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=4eebcb9910c1180791b0e5dba5b3192d0e0046a4", "patch": "@@ -2300,7 +2300,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         err.multipart_suggestion_verbose(\n                             message,\n                             std::iter::once((span, intro_sugg))\n-                                .chain(spans_suggs.clone())\n+                                .chain(spans_suggs.iter().cloned())\n                                 .collect(),\n                             Applicability::MaybeIncorrect,\n                         );"}, {"sha": "4bab99355012e0792b8e3135040db1be28f11032", "filename": "compiler/rustc_trait_selection/src/traits/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fauto_trait.rs?ref=4eebcb9910c1180791b0e5dba5b3192d0e0046a4", "patch": "@@ -341,7 +341,7 @@ impl<'tcx> AutoTraitFinder<'tcx> {\n                         }\n                     }\n \n-                    let obligations = impl_source.clone().nested_obligations().into_iter();\n+                    let obligations = impl_source.borrow_nested_obligations().iter().cloned();\n \n                     if !self.evaluate_nested_obligations(\n                         ty,"}, {"sha": "ad0da4bed4573caf03c716f585f6bd8968a34a3b", "filename": "compiler/rustc_typeck/src/astconv/generics.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fgenerics.rs?ref=4eebcb9910c1180791b0e5dba5b3192d0e0046a4", "patch": "@@ -298,9 +298,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                                     // show that order to the user as a possible order for the parameters\n                                     let mut param_types_present = defs\n                                         .params\n-                                        .clone()\n-                                        .into_iter()\n-                                        .map(|param| (param.kind.to_ord(), param))\n+                                        .iter()\n+                                        .map(|param| (param.kind.to_ord(), param.clone()))\n                                         .collect::<Vec<(ParamKindOrd, GenericParamDef)>>();\n                                     param_types_present.sort_by_key(|(ord, _)| *ord);\n                                     let (mut param_types_present, ordered_params): ("}, {"sha": "0afc153300bf2449c381744a26b415ab3b8677e0", "filename": "compiler/rustc_typeck/src/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fupvar.rs?ref=4eebcb9910c1180791b0e5dba5b3192d0e0046a4", "patch": "@@ -1217,7 +1217,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 // Combine all the reasons of why the root variable should be captured as a result of\n                 // auto trait implementation issues\n-                auto_trait_migration_reasons.extend(capture_trait_reasons.clone());\n+                auto_trait_migration_reasons.extend(capture_trait_reasons.iter().copied());\n \n                 diagnostics_info.push(MigrationLintNote {\n                     captures_info,"}, {"sha": "029dc8616743abba6ad0516647c988db516b89cf", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=4eebcb9910c1180791b0e5dba5b3192d0e0046a4", "patch": "@@ -525,8 +525,8 @@ where\n                             GenericBound::TraitBound(ref mut p, _) => {\n                                 // Insert regions into the for_generics hash map first, to ensure\n                                 // that we don't end up with duplicate bounds (e.g., for<'b, 'b>)\n-                                for_generics.extend(p.generic_params.clone());\n-                                p.generic_params = for_generics.into_iter().collect();\n+                                for_generics.extend(p.generic_params.drain(..));\n+                                p.generic_params.extend(for_generics);\n                                 self.is_fn_trait(&p.trait_)\n                             }\n                             _ => false,"}, {"sha": "8eb9c07f8a7964d9440383c8519052fa6372c20a", "filename": "src/librustdoc/html/render/search_index.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fsearch_index.rs?ref=4eebcb9910c1180791b0e5dba5b3192d0e0046a4", "patch": "@@ -544,10 +544,15 @@ fn get_fn_inputs_and_outputs<'tcx>(\n             (true, _) => (Some(impl_self), &func.generics),\n             (_, true) => (Some(impl_self), impl_generics),\n             (false, false) => {\n-                let mut params = func.generics.params.clone();\n-                params.extend(impl_generics.params.clone());\n-                let mut where_predicates = func.generics.where_predicates.clone();\n-                where_predicates.extend(impl_generics.where_predicates.clone());\n+                let params =\n+                    func.generics.params.iter().chain(&impl_generics.params).cloned().collect();\n+                let where_predicates = func\n+                    .generics\n+                    .where_predicates\n+                    .iter()\n+                    .chain(&impl_generics.where_predicates)\n+                    .cloned()\n+                    .collect();\n                 combined_generics = clean::Generics { params, where_predicates };\n                 (Some(impl_self), &combined_generics)\n             }"}, {"sha": "a07668a2b6d648741b87fc6adaa95ecaa291164d", "filename": "src/librustdoc/json/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/src%2Flibrustdoc%2Fjson%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/src%2Flibrustdoc%2Fjson%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fmod.rs?ref=4eebcb9910c1180791b0e5dba5b3192d0e0046a4", "patch": "@@ -106,7 +106,9 @@ impl<'tcx> JsonRenderer<'tcx> {\n                 // only need to synthesize items for external traits\n                 if !id.is_local() {\n                     let trait_item = &trait_item.trait_;\n-                    trait_item.items.clone().into_iter().for_each(|i| self.item(i).unwrap());\n+                    for item in &trait_item.items {\n+                        self.item(item.clone()).unwrap();\n+                    }\n                     let item_id = from_item_id(id.into(), self.tcx);\n                     Some((\n                         item_id.clone(),\n@@ -274,10 +276,9 @@ impl<'tcx> FormatRenderer<'tcx> for JsonRenderer<'tcx> {\n             paths: self\n                 .cache\n                 .paths\n-                .clone()\n-                .into_iter()\n-                .chain(self.cache.external_paths.clone().into_iter())\n-                .map(|(k, (path, kind))| {\n+                .iter()\n+                .chain(&self.cache.external_paths)\n+                .map(|(&k, &(ref path, kind))| {\n                     (\n                         from_item_id(k.into(), self.tcx),\n                         types::ItemSummary {"}, {"sha": "6bd41a50a6d42b0032878132f5561897bfbd994a", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=4eebcb9910c1180791b0e5dba5b3192d0e0046a4", "patch": "@@ -1702,7 +1702,7 @@ impl<'test> TestCx<'test> {\n \n     fn compose_and_run_compiler(&self, mut rustc: Command, input: Option<String>) -> ProcRes {\n         let aux_dir = self.build_all_auxiliary(&mut rustc);\n-        self.props.unset_rustc_env.clone().iter().fold(&mut rustc, |rustc, v| rustc.env_remove(v));\n+        self.props.unset_rustc_env.iter().fold(&mut rustc, Command::env_remove);\n         rustc.envs(self.props.rustc_env.clone());\n         self.compose_and_run(\n             rustc,"}, {"sha": "38a4aa9d74967f2c8ed9934a91e87721f2b0ea4b", "filename": "src/tools/unicode-table-generator/src/raw_emitter.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4eebcb9910c1180791b0e5dba5b3192d0e0046a4/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Funicode-table-generator%2Fsrc%2Fraw_emitter.rs?ref=4eebcb9910c1180791b0e5dba5b3192d0e0046a4", "patch": "@@ -121,12 +121,8 @@ impl RawEmitter {\n         for chunk in compressed_words.chunks(chunk_length) {\n             chunks.insert(chunk);\n         }\n-        let chunk_map = chunks\n-            .clone()\n-            .into_iter()\n-            .enumerate()\n-            .map(|(idx, chunk)| (chunk, idx))\n-            .collect::<HashMap<_, _>>();\n+        let chunk_map =\n+            chunks.iter().enumerate().map(|(idx, &chunk)| (chunk, idx)).collect::<HashMap<_, _>>();\n         let mut chunk_indices = Vec::new();\n         for chunk in compressed_words.chunks(chunk_length) {\n             chunk_indices.push(chunk_map[chunk]);"}]}