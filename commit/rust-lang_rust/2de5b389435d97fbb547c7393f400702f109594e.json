{"sha": "2de5b389435d97fbb547c7393f400702f109594e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkZTViMzg5NDM1ZDk3ZmJiNTQ3YzczOTNmNDAwNzAyZjEwOTU5NGU=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-02-05T17:46:43Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-02-14T11:36:51Z"}, "message": "rustc_mir: rename `Qualif::for_ty to `Qualif::any_value_of_ty`.", "tree": {"sha": "5e7945101ab43a9a87e172875d22b53a8d8714fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e7945101ab43a9a87e172875d22b53a8d8714fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2de5b389435d97fbb547c7393f400702f109594e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2de5b389435d97fbb547c7393f400702f109594e", "html_url": "https://github.com/rust-lang/rust/commit/2de5b389435d97fbb547c7393f400702f109594e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2de5b389435d97fbb547c7393f400702f109594e/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af131d55b6bb0e6824cf5921d04cbb5fc02c47d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/af131d55b6bb0e6824cf5921d04cbb5fc02c47d9", "html_url": "https://github.com/rust-lang/rust/commit/af131d55b6bb0e6824cf5921d04cbb5fc02c47d9"}], "stats": {"total": 33, "additions": 19, "deletions": 14}, "files": [{"sha": "f0fd598d31be4ad248915c86474a407973e7f1f5", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 19, "deletions": 14, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/2de5b389435d97fbb547c7393f400702f109594e/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2de5b389435d97fbb547c7393f400702f109594e/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=2de5b389435d97fbb547c7393f400702f109594e", "patch": "@@ -58,9 +58,11 @@ bitflags::bitflags! {\n \n impl<'a, 'tcx> Qualif {\n     /// Compute the qualifications for the given type.\n-    fn for_ty(ty: Ty<'tcx>,\n-              tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-              param_env: ty::ParamEnv<'tcx>) -> Self {\n+    fn any_value_of_ty(\n+        ty: Ty<'tcx>,\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) -> Self {\n         let mut qualif = Self::empty();\n         if !ty.is_freeze(tcx, param_env, DUMMY_SP) {\n             qualif = qualif | Qualif::MUTABLE_INTERIOR;\n@@ -72,10 +74,13 @@ impl<'a, 'tcx> Qualif {\n     }\n \n     /// Remove flags which are impossible for the given type.\n-    fn restrict(&mut self, ty: Ty<'tcx>,\n-                tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                param_env: ty::ParamEnv<'tcx>) {\n-        let ty_qualif = Self::for_ty(ty, tcx, param_env);\n+    fn restrict(\n+        &mut self,\n+        ty: Ty<'tcx>,\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+    ) {\n+        let ty_qualif = Self::any_value_of_ty(ty, tcx, param_env);\n         if !ty_qualif.contains(Qualif::MUTABLE_INTERIOR) {\n             *self = *self - Qualif::MUTABLE_INTERIOR;\n         }\n@@ -117,8 +122,8 @@ struct Qualifier<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Qualifier<'a, 'tcx> {\n-    fn qualif_for_ty(&self, ty: Ty<'tcx>) -> Qualif {\n-        Qualif::for_ty(ty, self.tcx, self.param_env)\n+    fn qualify_any_value_of_ty(&self, ty: Ty<'tcx>) -> Qualif {\n+        Qualif::any_value_of_ty(ty, self.tcx, self.param_env)\n     }\n \n     fn qualify_local(&self, local: Local) -> Qualif {\n@@ -217,7 +222,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx> {\n                 if let ty::LazyConst::Unevaluated(def_id, _) = constant.literal {\n                     // Don't peek inside trait associated constants.\n                     if self.tcx.trait_of_item(*def_id).is_some() {\n-                        self.qualif_for_ty(constant.ty)\n+                        self.qualify_any_value_of_ty(constant.ty)\n                     } else {\n                         let (bits, _) = self.tcx.at(constant.span).mir_const_qualif(*def_id);\n \n@@ -348,7 +353,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx> {\n                 if let AggregateKind::Adt(def, ..) = **kind {\n                     if Some(def.did) == self.tcx.lang_items().unsafe_cell_type() {\n                         let ty = rvalue.ty(self.mir, self.tcx);\n-                        qualif = qualif | self.qualif_for_ty(ty);\n+                        qualif = qualif | self.qualify_any_value_of_ty(ty);\n                         assert!(qualif.contains(Qualif::MUTABLE_INTERIOR));\n                     }\n \n@@ -444,7 +449,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx> {\n         }\n \n         // Be conservative about the returned value of a const fn.\n-        let qualif = self.qualif_for_ty(return_ty);\n+        let qualif = self.qualify_any_value_of_ty(return_ty);\n         if !is_promotable_const_fn && self.mode == Mode::Fn {\n             qualif | Qualif::NOT_PROMOTABLE\n         } else {\n@@ -491,7 +496,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n \n         let mut local_qualif = IndexVec::from_elem(None, &mir.local_decls);\n         for arg in mir.args_iter() {\n-            let qualif = Qualif::for_ty(mir.local_decls[arg].ty, tcx, param_env);\n+            let qualif = Qualif::any_value_of_ty(mir.local_decls[arg].ty, tcx, param_env);\n             local_qualif[arg] = Some(Qualif::NOT_PROMOTABLE | qualif);\n         }\n \n@@ -661,7 +666,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n         // Account for errors in consts by using the\n         // conservative type qualification instead.\n         if qualif.intersects(Qualif::CONST_ERROR) {\n-            qualif = self.qualifier().qualif_for_ty(mir.return_ty());\n+            qualif = self.qualifier().qualify_any_value_of_ty(mir.return_ty());\n         }\n \n "}]}