{"sha": "1e008fec047c2e33cff494a923f01a6984e7fb9e", "node_id": "C_kwDOAAsO6NoAKDFlMDA4ZmVjMDQ3YzJlMzNjZmY0OTRhOTIzZjAxYTY5ODRlN2ZiOWU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-09-02T16:22:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-09-02T16:22:02Z"}, "message": "Rollup merge of #101260 - ChrisDenton:attribute-tag, r=thomcc\n\nUse `FILE_ATTRIBUTE_TAG_INFO` to get reparse tag\n\nI've been looking at this code recently and it just occurred to me we don't actually use the full reparse data at this point, only the tag. [`GetFileInformationByHandleEx`](https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-getfileinformationbyhandleex) can do exactly that by filling a [`FILE_ATTRIBUTE_TAG_INFO`](https://docs.microsoft.com/en-us/windows/win32/api/winbase/ns-winbase-file_attribute_tag_info) struct.\n\nr? ```````@thomcc``````` since you've made changes here recently (which is why I have this code on my mind atm)", "tree": {"sha": "30e4dd1e93107a772602e7def2bec682b81c5284", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/30e4dd1e93107a772602e7def2bec682b81c5284"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1e008fec047c2e33cff494a923f01a6984e7fb9e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjEi2qCRBK7hj4Ov3rIwAAc7UIACjUOXqds3dDR5gr7AowJI9p\n1/GX0zomyJmeKjC3jrMepDGfYX5qAGJdoSjIdYwgaUZ9qO5o6RnYCaoInHokZ9xo\nFw+VKcJ6yBEDQHmXIF6th3hwPQ1ytQhoOAIQn7He73OC3bPCFFyQlLBFnXA37HCS\nWLsJMFNVeuGbaHWkFGgMEqhejJDFL42g48ckzZH3nrIjsFKTEmKYU0Y8HL2ZECDx\nRGDaRfjNXWa6ECXp96kIhKJG3RIti6CHsNGz2Wh0CGFMW4cdey6TLrNJU08RilmU\ni/f9G7hniOl5GGMaDf21u3Wl5gPclhZMwz80Wa1WZ8k3j/60y8N3ISW9wngGGJc=\n=PhiU\n-----END PGP SIGNATURE-----\n", "payload": "tree 30e4dd1e93107a772602e7def2bec682b81c5284\nparent 5a23efd31e0eaee3c8111a0018e541e672ca4a18\nparent 630f831cd06d24732c9a422b8d3d3e2ce9e1a879\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1662135722 +0200\ncommitter GitHub <noreply@github.com> 1662135722 +0200\n\nRollup merge of #101260 - ChrisDenton:attribute-tag, r=thomcc\n\nUse `FILE_ATTRIBUTE_TAG_INFO` to get reparse tag\n\nI've been looking at this code recently and it just occurred to me we don't actually use the full reparse data at this point, only the tag. [`GetFileInformationByHandleEx`](https://docs.microsoft.com/en-us/windows/win32/api/winbase/nf-winbase-getfileinformationbyhandleex) can do exactly that by filling a [`FILE_ATTRIBUTE_TAG_INFO`](https://docs.microsoft.com/en-us/windows/win32/api/winbase/ns-winbase-file_attribute_tag_info) struct.\n\nr? ```````@thomcc``````` since you've made changes here recently (which is why I have this code on my mind atm)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1e008fec047c2e33cff494a923f01a6984e7fb9e", "html_url": "https://github.com/rust-lang/rust/commit/1e008fec047c2e33cff494a923f01a6984e7fb9e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1e008fec047c2e33cff494a923f01a6984e7fb9e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a23efd31e0eaee3c8111a0018e541e672ca4a18", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a23efd31e0eaee3c8111a0018e541e672ca4a18", "html_url": "https://github.com/rust-lang/rust/commit/5a23efd31e0eaee3c8111a0018e541e672ca4a18"}, {"sha": "630f831cd06d24732c9a422b8d3d3e2ce9e1a879", "url": "https://api.github.com/repos/rust-lang/rust/commits/630f831cd06d24732c9a422b8d3d3e2ce9e1a879", "html_url": "https://github.com/rust-lang/rust/commit/630f831cd06d24732c9a422b8d3d3e2ce9e1a879"}], "stats": {"total": 32, "additions": 24, "deletions": 8}, "files": [{"sha": "b4db77700aabd2f8f033d6958a7ff40609e4528c", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1e008fec047c2e33cff494a923f01a6984e7fb9e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e008fec047c2e33cff494a923f01a6984e7fb9e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=1e008fec047c2e33cff494a923f01a6984e7fb9e", "patch": "@@ -454,6 +454,12 @@ pub enum FILE_INFO_BY_HANDLE_CLASS {\n     MaximumFileInfoByHandlesClass,\n }\n \n+#[repr(C)]\n+pub struct FILE_ATTRIBUTE_TAG_INFO {\n+    pub FileAttributes: DWORD,\n+    pub ReparseTag: DWORD,\n+}\n+\n #[repr(C)]\n pub struct FILE_DISPOSITION_INFO {\n     pub DeleteFile: BOOLEAN,"}, {"sha": "c2ad592dfea73379ca8a433aab2179307a7f2ab0", "filename": "library/std/src/sys/windows/fs.rs", "status": "modified", "additions": 18, "deletions": 8, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1e008fec047c2e33cff494a923f01a6984e7fb9e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1e008fec047c2e33cff494a923f01a6984e7fb9e/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Ffs.rs?ref=1e008fec047c2e33cff494a923f01a6984e7fb9e", "patch": "@@ -326,10 +326,15 @@ impl File {\n             cvt(c::GetFileInformationByHandle(self.handle.as_raw_handle(), &mut info))?;\n             let mut reparse_tag = 0;\n             if info.dwFileAttributes & c::FILE_ATTRIBUTE_REPARSE_POINT != 0 {\n-                let mut b =\n-                    Align8([MaybeUninit::<u8>::uninit(); c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n-                if let Ok((_, buf)) = self.reparse_point(&mut b) {\n-                    reparse_tag = (*buf).ReparseTag;\n+                let mut attr_tag: c::FILE_ATTRIBUTE_TAG_INFO = mem::zeroed();\n+                cvt(c::GetFileInformationByHandleEx(\n+                    self.handle.as_raw_handle(),\n+                    c::FileAttributeTagInfo,\n+                    ptr::addr_of_mut!(attr_tag).cast(),\n+                    mem::size_of::<c::FILE_ATTRIBUTE_TAG_INFO>().try_into().unwrap(),\n+                ))?;\n+                if attr_tag.FileAttributes & c::FILE_ATTRIBUTE_REPARSE_POINT != 0 {\n+                    reparse_tag = attr_tag.ReparseTag;\n                 }\n             }\n             Ok(FileAttr {\n@@ -390,10 +395,15 @@ impl File {\n             attr.file_size = info.AllocationSize as u64;\n             attr.number_of_links = Some(info.NumberOfLinks);\n             if attr.file_type().is_reparse_point() {\n-                let mut b =\n-                    Align8([MaybeUninit::<u8>::uninit(); c::MAXIMUM_REPARSE_DATA_BUFFER_SIZE]);\n-                if let Ok((_, buf)) = self.reparse_point(&mut b) {\n-                    attr.reparse_tag = (*buf).ReparseTag;\n+                let mut attr_tag: c::FILE_ATTRIBUTE_TAG_INFO = mem::zeroed();\n+                cvt(c::GetFileInformationByHandleEx(\n+                    self.handle.as_raw_handle(),\n+                    c::FileAttributeTagInfo,\n+                    ptr::addr_of_mut!(attr_tag).cast(),\n+                    mem::size_of::<c::FILE_ATTRIBUTE_TAG_INFO>().try_into().unwrap(),\n+                ))?;\n+                if attr_tag.FileAttributes & c::FILE_ATTRIBUTE_REPARSE_POINT != 0 {\n+                    reparse_tag = attr_tag.ReparseTag;\n                 }\n             }\n             Ok(attr)"}]}