{"sha": "2b000feba57a324534008356909e02394784cfcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiMDAwZmViYTU3YTMyNDUzNDAwODM1NjkwOWUwMjM5NDc4NGNmY2M=", "commit": {"author": {"name": "Oliver Schneider", "email": "git1984941651981@oli-obk.de", "date": "2015-10-27T08:39:07Z"}, "committer": {"name": "Oliver Schneider", "email": "git1984941651981@oli-obk.de", "date": "2015-10-27T08:39:07Z"}, "message": "the const evaluator might run before check_const\n\nSo we cannot assume that the function call was marked NOT_CONST by check_const.", "tree": {"sha": "b1e032b81084df792a692a36cd511eb67813454c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1e032b81084df792a692a36cd511eb67813454c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b000feba57a324534008356909e02394784cfcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b000feba57a324534008356909e02394784cfcc", "html_url": "https://github.com/rust-lang/rust/commit/2b000feba57a324534008356909e02394784cfcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b000feba57a324534008356909e02394784cfcc/comments", "author": null, "committer": null, "parents": [{"sha": "72f42f1174e80fe627c4a49524107f15e134ddca", "url": "https://api.github.com/repos/rust-lang/rust/commits/72f42f1174e80fe627c4a49524107f15e134ddca", "html_url": "https://github.com/rust-lang/rust/commit/72f42f1174e80fe627c4a49524107f15e134ddca"}], "stats": {"total": 24, "additions": 16, "deletions": 8}, "files": [{"sha": "1651e71c49a2aec1449b91a8de689298d6baf727", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2b000feba57a324534008356909e02394784cfcc/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b000feba57a324534008356909e02394784cfcc/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=2b000feba57a324534008356909e02394784cfcc", "patch": "@@ -1031,24 +1031,23 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n               UncheckedExprNoHint // we cannot reason about UncheckedExprHint here\n           };\n           let (\n-            decl,\n-            unsafety,\n-            abi,\n-            block,\n+              decl,\n+              unsafety,\n+              abi,\n+              block,\n+              constness,\n           ) = match try!(eval_const_expr_partial(tcx, callee, sub_ty_hint, fn_args)) {\n               Function(did) => if did.is_local() {\n                   match tcx.map.find(did.index.as_u32()) {\n                       Some(ast_map::NodeItem(it)) => match it.node {\n                           hir::ItemFn(\n                               ref decl,\n                               unsafety,\n-                              _, // no need to check for constness... either check_const\n-                                 // already forbids this or we const eval over whatever\n-                                 // we want\n+                              constness,\n                               abi,\n                               _, // ducktype generics? types are funky in const_eval\n                               ref block,\n-                          ) => (decl, unsafety, abi, block),\n+                          ) => (decl, unsafety, abi, block, constness),\n                           _ => signal!(e, NonConstPath),\n                       },\n                       _ => signal!(e, NonConstPath),\n@@ -1058,6 +1057,15 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n               },\n               _ => signal!(e, NonConstPath),\n           };\n+          if let ExprTypeChecked = ty_hint {\n+              // no need to check for constness... either check_const\n+              // already forbids this or we const eval over whatever\n+              // we want\n+          } else {\n+              // we don't know much about the function, so we force it to be a const fn\n+              // so compilation will fail later in case the const fn's body is not const\n+              assert_eq!(constness, hir::Constness::Const)\n+          }\n           assert_eq!(decl.inputs.len(), args.len());\n           assert_eq!(unsafety, hir::Unsafety::Normal);\n           assert_eq!(abi, abi::Abi::Rust);"}]}