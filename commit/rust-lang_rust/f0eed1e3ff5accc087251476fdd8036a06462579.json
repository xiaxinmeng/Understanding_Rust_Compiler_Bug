{"sha": "f0eed1e3ff5accc087251476fdd8036a06462579", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZWVkMWUzZmY1YWNjYzA4NzI1MTQ3NmZkZDgwMzZhMDY0NjI1Nzk=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2018-08-10T18:48:15Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2018-08-10T19:06:37Z"}, "message": "Make use of match ergonomics in ip methods", "tree": {"sha": "b66eb67ad1a749725004a52b4a656802ef90ebfb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b66eb67ad1a749725004a52b4a656802ef90ebfb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0eed1e3ff5accc087251476fdd8036a06462579", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0eed1e3ff5accc087251476fdd8036a06462579", "html_url": "https://github.com/rust-lang/rust/commit/f0eed1e3ff5accc087251476fdd8036a06462579", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0eed1e3ff5accc087251476fdd8036a06462579/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f1f43fcd4faefb27e3c552e8df7b8924d1d5d77", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f1f43fcd4faefb27e3c552e8df7b8924d1d5d77", "html_url": "https://github.com/rust-lang/rust/commit/2f1f43fcd4faefb27e3c552e8df7b8924d1d5d77"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "2038a7bf7954d6d5b768993f87224342fb2cc6d7", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 36, "deletions": 36, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/f0eed1e3ff5accc087251476fdd8036a06462579/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0eed1e3ff5accc087251476fdd8036a06462579/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=f0eed1e3ff5accc087251476fdd8036a06462579", "patch": "@@ -160,9 +160,9 @@ impl IpAddr {\n     /// ```\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n     pub fn is_unspecified(&self) -> bool {\n-        match *self {\n-            IpAddr::V4(ref a) => a.is_unspecified(),\n-            IpAddr::V6(ref a) => a.is_unspecified(),\n+        match self {\n+            IpAddr::V4(ip) => ip.is_unspecified(),\n+            IpAddr::V6(ip) => ip.is_unspecified(),\n         }\n     }\n \n@@ -185,9 +185,9 @@ impl IpAddr {\n     /// ```\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n     pub fn is_loopback(&self) -> bool {\n-        match *self {\n-            IpAddr::V4(ref a) => a.is_loopback(),\n-            IpAddr::V6(ref a) => a.is_loopback(),\n+        match self {\n+            IpAddr::V4(ip) => ip.is_loopback(),\n+            IpAddr::V6(ip) => ip.is_loopback(),\n         }\n     }\n \n@@ -214,9 +214,9 @@ impl IpAddr {\n     /// }\n     /// ```\n     pub fn is_global(&self) -> bool {\n-        match *self {\n-            IpAddr::V4(ref a) => a.is_global(),\n-            IpAddr::V6(ref a) => a.is_global(),\n+        match self {\n+            IpAddr::V4(ip) => ip.is_global(),\n+            IpAddr::V6(ip) => ip.is_global(),\n         }\n     }\n \n@@ -239,9 +239,9 @@ impl IpAddr {\n     /// ```\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n     pub fn is_multicast(&self) -> bool {\n-        match *self {\n-            IpAddr::V4(ref a) => a.is_multicast(),\n-            IpAddr::V6(ref a) => a.is_multicast(),\n+        match self {\n+            IpAddr::V4(ip) => ip.is_multicast(),\n+            IpAddr::V6(ip) => ip.is_multicast(),\n         }\n     }\n \n@@ -268,9 +268,9 @@ impl IpAddr {\n     /// }\n     /// ```\n     pub fn is_documentation(&self) -> bool {\n-        match *self {\n-            IpAddr::V4(ref a) => a.is_documentation(),\n-            IpAddr::V6(ref a) => a.is_documentation(),\n+        match self {\n+            IpAddr::V4(ip) => ip.is_documentation(),\n+            IpAddr::V6(ip) => ip.is_documentation(),\n         }\n     }\n \n@@ -293,7 +293,7 @@ impl IpAddr {\n     /// ```\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n     pub fn is_ipv4(&self) -> bool {\n-        match *self {\n+        match self {\n             IpAddr::V4(_) => true,\n             IpAddr::V6(_) => false,\n         }\n@@ -318,7 +318,7 @@ impl IpAddr {\n     /// ```\n     #[stable(feature = \"ipaddr_checker\", since = \"1.16.0\")]\n     pub fn is_ipv6(&self) -> bool {\n-        match *self {\n+        match self {\n             IpAddr::V4(_) => false,\n             IpAddr::V6(_) => true,\n         }\n@@ -669,9 +669,9 @@ impl Ipv4Addr {\n #[stable(feature = \"ip_addr\", since = \"1.7.0\")]\n impl fmt::Display for IpAddr {\n     fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n-        match *self {\n-            IpAddr::V4(ref a) => a.fmt(fmt),\n-            IpAddr::V6(ref a) => a.fmt(fmt),\n+        match self {\n+            IpAddr::V4(ip) => ip.fmt(fmt),\n+            IpAddr::V6(ip) => ip.fmt(fmt),\n         }\n     }\n }\n@@ -720,8 +720,8 @@ impl PartialEq for Ipv4Addr {\n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<Ipv4Addr> for IpAddr {\n     fn eq(&self, other: &Ipv4Addr) -> bool {\n-        match *self {\n-            IpAddr::V4(ref v4) => v4 == other,\n+        match self {\n+            IpAddr::V4(v4) => v4 == other,\n             IpAddr::V6(_) => false,\n         }\n     }\n@@ -730,8 +730,8 @@ impl PartialEq<Ipv4Addr> for IpAddr {\n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<IpAddr> for Ipv4Addr {\n     fn eq(&self, other: &IpAddr) -> bool {\n-        match *other {\n-            IpAddr::V4(ref v4) => self == v4,\n+        match other {\n+            IpAddr::V4(v4) => self == v4,\n             IpAddr::V6(_) => false,\n         }\n     }\n@@ -758,8 +758,8 @@ impl PartialOrd for Ipv4Addr {\n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<Ipv4Addr> for IpAddr {\n     fn partial_cmp(&self, other: &Ipv4Addr) -> Option<Ordering> {\n-        match *self {\n-            IpAddr::V4(ref v4) => v4.partial_cmp(other),\n+        match self {\n+            IpAddr::V4(v4) => v4.partial_cmp(other),\n             IpAddr::V6(_) => Some(Ordering::Greater),\n         }\n     }\n@@ -768,8 +768,8 @@ impl PartialOrd<Ipv4Addr> for IpAddr {\n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<IpAddr> for Ipv4Addr {\n     fn partial_cmp(&self, other: &IpAddr) -> Option<Ordering> {\n-        match *other {\n-            IpAddr::V4(ref v4) => self.partial_cmp(v4),\n+        match other {\n+            IpAddr::V4(v4) => self.partial_cmp(v4),\n             IpAddr::V6(_) => Some(Ordering::Less),\n         }\n     }\n@@ -1338,19 +1338,19 @@ impl PartialEq for Ipv6Addr {\n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<IpAddr> for Ipv6Addr {\n     fn eq(&self, other: &IpAddr) -> bool {\n-        match *other {\n+        match other {\n             IpAddr::V4(_) => false,\n-            IpAddr::V6(ref v6) => self == v6,\n+            IpAddr::V6(v6) => self == v6,\n         }\n     }\n }\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialEq<Ipv6Addr> for IpAddr {\n     fn eq(&self, other: &Ipv6Addr) -> bool {\n-        match *self {\n+        match self {\n             IpAddr::V4(_) => false,\n-            IpAddr::V6(ref v6) => v6 == other,\n+            IpAddr::V6(v6) => v6 == other,\n         }\n     }\n }\n@@ -1375,19 +1375,19 @@ impl PartialOrd for Ipv6Addr {\n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<Ipv6Addr> for IpAddr {\n     fn partial_cmp(&self, other: &Ipv6Addr) -> Option<Ordering> {\n-        match *self {\n+        match self {\n             IpAddr::V4(_) => Some(Ordering::Less),\n-            IpAddr::V6(ref v6) => v6.partial_cmp(other),\n+            IpAddr::V6(v6) => v6.partial_cmp(other),\n         }\n     }\n }\n \n #[stable(feature = \"ip_cmp\", since = \"1.16.0\")]\n impl PartialOrd<IpAddr> for Ipv6Addr {\n     fn partial_cmp(&self, other: &IpAddr) -> Option<Ordering> {\n-        match *other {\n+        match other {\n             IpAddr::V4(_) => Some(Ordering::Greater),\n-            IpAddr::V6(ref v6) => self.partial_cmp(v6),\n+            IpAddr::V6(v6) => self.partial_cmp(v6),\n         }\n     }\n }"}]}