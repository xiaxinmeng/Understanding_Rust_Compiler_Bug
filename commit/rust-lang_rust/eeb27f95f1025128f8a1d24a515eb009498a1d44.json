{"sha": "eeb27f95f1025128f8a1d24a515eb009498a1d44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlYjI3Zjk1ZjEwMjUxMjhmOGExZDI0YTUxNWViMDA5NDk4YTFkNDQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-02T14:07:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-10-02T14:45:08Z"}, "message": "Rewrite fixtures on top of Change", "tree": {"sha": "caa275fe16d5f5a71aa568d96419f421d9404407", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caa275fe16d5f5a71aa568d96419f421d9404407"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eeb27f95f1025128f8a1d24a515eb009498a1d44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eeb27f95f1025128f8a1d24a515eb009498a1d44", "html_url": "https://github.com/rust-lang/rust/commit/eeb27f95f1025128f8a1d24a515eb009498a1d44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eeb27f95f1025128f8a1d24a515eb009498a1d44/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8716c4cec3a05ba891b20b5f28df69d925b913ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/8716c4cec3a05ba891b20b5f28df69d925b913ad", "html_url": "https://github.com/rust-lang/rust/commit/8716c4cec3a05ba891b20b5f28df69d925b913ad"}], "stats": {"total": 173, "additions": 90, "deletions": 83}, "files": [{"sha": "48fa73bf07a49a59db7f7d6252c0860952897cb9", "filename": "crates/base_db/src/fixture.rs", "status": "modified", "additions": 90, "deletions": 83, "changes": 173, "blob_url": "https://github.com/rust-lang/rust/blob/eeb27f95f1025128f8a1d24a515eb009498a1d44/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eeb27f95f1025128f8a1d24a515eb009498a1d44/crates%2Fbase_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase_db%2Fsrc%2Ffixture.rs?ref=eeb27f95f1025128f8a1d24a515eb009498a1d44", "patch": "@@ -65,24 +65,26 @@ use test_utils::{extract_range_or_offset, Fixture, RangeOrOffset, CURSOR_MARKER}\n use vfs::{file_set::FileSet, VfsPath};\n \n use crate::{\n-    input::CrateName, CrateGraph, CrateId, Edition, Env, FileId, FilePosition, SourceDatabaseExt,\n-    SourceRoot, SourceRootId,\n+    input::CrateName, Change, CrateGraph, CrateId, Edition, Env, FileId, FilePosition,\n+    SourceDatabaseExt, SourceRoot, SourceRootId,\n };\n \n pub const WORKSPACE: SourceRootId = SourceRootId(0);\n \n pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n     fn with_single_file(text: &str) -> (Self, FileId) {\n+        let fixture = ChangeFixture::parse(text);\n         let mut db = Self::default();\n-        let (_, files) = with_files(&mut db, text);\n-        assert_eq!(files.len(), 1);\n-        (db, files[0])\n+        fixture.change.apply(&mut db);\n+        assert_eq!(fixture.files.len(), 1);\n+        (db, fixture.files[0])\n     }\n \n     fn with_files(ra_fixture: &str) -> Self {\n+        let fixture = ChangeFixture::parse(ra_fixture);\n         let mut db = Self::default();\n-        let (pos, _) = with_files(&mut db, ra_fixture);\n-        assert!(pos.is_none());\n+        fixture.change.apply(&mut db);\n+        assert!(fixture.file_position.is_none());\n         db\n     }\n \n@@ -96,9 +98,10 @@ pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n     }\n \n     fn with_range_or_offset(ra_fixture: &str) -> (Self, FileId, RangeOrOffset) {\n+        let fixture = ChangeFixture::parse(ra_fixture);\n         let mut db = Self::default();\n-        let (pos, _) = with_files(&mut db, ra_fixture);\n-        let (file_id, range_or_offset) = pos.unwrap();\n+        fixture.change.apply(&mut db);\n+        let (file_id, range_or_offset) = fixture.file_position.unwrap();\n         (db, file_id, range_or_offset)\n     }\n \n@@ -113,89 +116,93 @@ pub trait WithFixture: Default + SourceDatabaseExt + 'static {\n \n impl<DB: SourceDatabaseExt + Default + 'static> WithFixture for DB {}\n \n-fn with_files(\n-    db: &mut dyn SourceDatabaseExt,\n-    fixture: &str,\n-) -> (Option<(FileId, RangeOrOffset)>, Vec<FileId>) {\n-    let fixture = Fixture::parse(fixture);\n-\n-    let mut files = Vec::new();\n-    let mut crate_graph = CrateGraph::default();\n-    let mut crates = FxHashMap::default();\n-    let mut crate_deps = Vec::new();\n-    let mut default_crate_root: Option<FileId> = None;\n-\n-    let mut file_set = FileSet::default();\n-    let source_root_id = WORKSPACE;\n-    let source_root_prefix = \"/\".to_string();\n-    let mut file_id = FileId(0);\n-\n-    let mut file_position = None;\n-\n-    for entry in fixture {\n-        let text = if entry.text.contains(CURSOR_MARKER) {\n-            let (range_or_offset, text) = extract_range_or_offset(&entry.text);\n-            assert!(file_position.is_none());\n-            file_position = Some((file_id, range_or_offset));\n-            text.to_string()\n-        } else {\n-            entry.text.clone()\n-        };\n+pub struct ChangeFixture {\n+    file_position: Option<(FileId, RangeOrOffset)>,\n+    files: Vec<FileId>,\n+    change: Change,\n+}\n \n-        let meta = FileMeta::from(entry);\n-        assert!(meta.path.starts_with(&source_root_prefix));\n+impl ChangeFixture {\n+    fn parse(ra_fixture: &str) -> ChangeFixture {\n+        let fixture = Fixture::parse(ra_fixture);\n+        let mut change = Change::new();\n+\n+        let mut files = Vec::new();\n+        let mut crate_graph = CrateGraph::default();\n+        let mut crates = FxHashMap::default();\n+        let mut crate_deps = Vec::new();\n+        let mut default_crate_root: Option<FileId> = None;\n+\n+        let mut file_set = FileSet::default();\n+        let source_root_prefix = \"/\".to_string();\n+        let mut file_id = FileId(0);\n+\n+        let mut file_position = None;\n+\n+        for entry in fixture {\n+            let text = if entry.text.contains(CURSOR_MARKER) {\n+                let (range_or_offset, text) = extract_range_or_offset(&entry.text);\n+                assert!(file_position.is_none());\n+                file_position = Some((file_id, range_or_offset));\n+                text.to_string()\n+            } else {\n+                entry.text.clone()\n+            };\n+\n+            let meta = FileMeta::from(entry);\n+            assert!(meta.path.starts_with(&source_root_prefix));\n+\n+            if let Some(krate) = meta.krate {\n+                let crate_id = crate_graph.add_crate_root(\n+                    file_id,\n+                    meta.edition,\n+                    Some(krate.clone()),\n+                    meta.cfg,\n+                    meta.env,\n+                    Default::default(),\n+                );\n+                let crate_name = CrateName::new(&krate).unwrap();\n+                let prev = crates.insert(crate_name.clone(), crate_id);\n+                assert!(prev.is_none());\n+                for dep in meta.deps {\n+                    let dep = CrateName::new(&dep).unwrap();\n+                    crate_deps.push((crate_name.clone(), dep))\n+                }\n+            } else if meta.path == \"/main.rs\" || meta.path == \"/lib.rs\" {\n+                assert!(default_crate_root.is_none());\n+                default_crate_root = Some(file_id);\n+            }\n+\n+            change.change_file(file_id, Some(Arc::new(text)));\n+            let path = VfsPath::new_virtual_path(meta.path);\n+            file_set.insert(file_id, path.into());\n+            files.push(file_id);\n+            file_id.0 += 1;\n+        }\n \n-        if let Some(krate) = meta.krate {\n-            let crate_id = crate_graph.add_crate_root(\n-                file_id,\n-                meta.edition,\n-                Some(krate.clone()),\n-                meta.cfg,\n-                meta.env,\n+        if crates.is_empty() {\n+            let crate_root = default_crate_root.unwrap();\n+            crate_graph.add_crate_root(\n+                crate_root,\n+                Edition::Edition2018,\n+                None,\n+                CfgOptions::default(),\n+                Env::default(),\n                 Default::default(),\n             );\n-            let crate_name = CrateName::new(&krate).unwrap();\n-            let prev = crates.insert(crate_name.clone(), crate_id);\n-            assert!(prev.is_none());\n-            for dep in meta.deps {\n-                let dep = CrateName::new(&dep).unwrap();\n-                crate_deps.push((crate_name.clone(), dep))\n+        } else {\n+            for (from, to) in crate_deps {\n+                let from_id = crates[&from];\n+                let to_id = crates[&to];\n+                crate_graph.add_dep(from_id, CrateName::new(&to).unwrap(), to_id).unwrap();\n             }\n-        } else if meta.path == \"/main.rs\" || meta.path == \"/lib.rs\" {\n-            assert!(default_crate_root.is_none());\n-            default_crate_root = Some(file_id);\n         }\n \n-        db.set_file_text(file_id, Arc::new(text));\n-        db.set_file_source_root(file_id, source_root_id);\n-        let path = VfsPath::new_virtual_path(meta.path);\n-        file_set.insert(file_id, path.into());\n-        files.push(file_id);\n-        file_id.0 += 1;\n-    }\n+        change.set_roots(vec![SourceRoot::new_local(file_set)]);\n+        change.set_crate_graph(crate_graph);\n \n-    if crates.is_empty() {\n-        let crate_root = default_crate_root.unwrap();\n-        crate_graph.add_crate_root(\n-            crate_root,\n-            Edition::Edition2018,\n-            None,\n-            CfgOptions::default(),\n-            Env::default(),\n-            Default::default(),\n-        );\n-    } else {\n-        for (from, to) in crate_deps {\n-            let from_id = crates[&from];\n-            let to_id = crates[&to];\n-            crate_graph.add_dep(from_id, CrateName::new(&to).unwrap(), to_id).unwrap();\n-        }\n+        ChangeFixture { file_position, files, change }\n     }\n-\n-    db.set_source_root(source_root_id, Arc::new(SourceRoot::new_local(file_set)));\n-    db.set_crate_graph(Arc::new(crate_graph));\n-\n-    (file_position, files)\n }\n \n struct FileMeta {"}]}