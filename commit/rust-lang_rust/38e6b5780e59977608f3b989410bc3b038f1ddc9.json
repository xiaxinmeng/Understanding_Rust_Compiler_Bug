{"sha": "38e6b5780e59977608f3b989410bc3b038f1ddc9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZTZiNTc4MGU1OTk3NzYwOGYzYjk4OTQxMGJjM2IwMzhmMWRkYzk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-14T09:37:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-15T09:01:47Z"}, "message": "s/PState/TyDecoder/", "tree": {"sha": "44501c3017f6b50252d4d667a2b7f641c4ff8571", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44501c3017f6b50252d4d667a2b7f641c4ff8571"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38e6b5780e59977608f3b989410bc3b038f1ddc9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38e6b5780e59977608f3b989410bc3b038f1ddc9", "html_url": "https://github.com/rust-lang/rust/commit/38e6b5780e59977608f3b989410bc3b038f1ddc9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38e6b5780e59977608f3b989410bc3b038f1ddc9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70e2df5b1bedbab6fc1087fc9b3e66dd5e80b044", "url": "https://api.github.com/repos/rust-lang/rust/commits/70e2df5b1bedbab6fc1087fc9b3e66dd5e80b044", "html_url": "https://github.com/rust-lang/rust/commit/70e2df5b1bedbab6fc1087fc9b3e66dd5e80b044"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "a24bf76ca7658571a4bb9f711af1e6e17e3b47c2", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 21, "deletions": 21, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/38e6b5780e59977608f3b989410bc3b038f1ddc9/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/38e6b5780e59977608f3b989410bc3b038f1ddc9/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=38e6b5780e59977608f3b989410bc3b038f1ddc9", "patch": "@@ -65,7 +65,7 @@ pub fn parse_ty_closure_data<'tcx, F>(data: &[u8],\n                                       -> ty::ClosureTy<'tcx> where\n     F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n-    let mut st = PState::new(data, crate_num, pos, tcx, &mut conv);\n+    let mut st = TyDecoder::new(data, crate_num, pos, tcx, &mut conv);\n     st.parse_closure_ty()\n }\n \n@@ -74,7 +74,7 @@ pub fn parse_ty_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum, pos: usize,\n     F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n     debug!(\"parse_ty_data {}\", data_log_string(data, pos));\n-    let mut st = PState::new(data, crate_num, pos, tcx, &mut conv);\n+    let mut st = TyDecoder::new(data, crate_num, pos, tcx, &mut conv);\n     st.parse_ty()\n }\n \n@@ -83,7 +83,7 @@ pub fn parse_region_data<F>(data: &[u8], crate_num: ast::CrateNum, pos: usize, t\n     F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n     debug!(\"parse_region_data {}\", data_log_string(data, pos));\n-    let mut st = PState::new(data, crate_num, pos, tcx, &mut conv);\n+    let mut st = TyDecoder::new(data, crate_num, pos, tcx, &mut conv);\n     st.parse_region()\n }\n \n@@ -93,7 +93,7 @@ pub fn parse_bare_fn_ty_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum, pos\n     F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n     debug!(\"parse_bare_fn_ty_data {}\", data_log_string(data, pos));\n-    let mut st = PState::new(data, crate_num, pos, tcx, &mut conv);\n+    let mut st = TyDecoder::new(data, crate_num, pos, tcx, &mut conv);\n     st.parse_bare_fn_ty()\n }\n \n@@ -103,7 +103,7 @@ pub fn parse_trait_ref_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum, pos:\n     F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n     debug!(\"parse_trait_ref_data {}\", data_log_string(data, pos));\n-    let mut st = PState::new(data, crate_num, pos, tcx, &mut conv);\n+    let mut st = TyDecoder::new(data, crate_num, pos, tcx, &mut conv);\n     st.parse_trait_ref()\n }\n \n@@ -112,7 +112,7 @@ pub fn parse_substs_data<'tcx, F>(data: &[u8], crate_num: ast::CrateNum, pos: us\n     F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n     debug!(\"parse_substs_data{}\", data_log_string(data, pos));\n-    let mut st = PState::new(data, crate_num, pos, tcx, &mut conv);\n+    let mut st = TyDecoder::new(data, crate_num, pos, tcx, &mut conv);\n     st.parse_substs()\n }\n \n@@ -121,7 +121,7 @@ pub fn parse_existential_bounds_data<'tcx, F>(data: &[u8], crate_num: ast::Crate\n                                               -> ty::ExistentialBounds<'tcx> where\n     F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n-    let mut st = PState::new(data, crate_num, pos, tcx, &mut conv);\n+    let mut st = TyDecoder::new(data, crate_num, pos, tcx, &mut conv);\n     st.parse_existential_bounds()\n }\n \n@@ -130,7 +130,7 @@ pub fn parse_builtin_bounds_data<F>(data: &[u8], crate_num: ast::CrateNum,\n                                     -> ty::BuiltinBounds where\n     F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n-    let mut st = PState::new(data, crate_num, pos, tcx, &mut conv);\n+    let mut st = TyDecoder::new(data, crate_num, pos, tcx, &mut conv);\n     st.parse_builtin_bounds()\n }\n \n@@ -139,7 +139,7 @@ pub fn parse_type_param_def_data<'tcx, F>(data: &[u8], start: usize,\n                                           mut conv: F) -> ty::TypeParameterDef<'tcx> where\n     F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n-    let mut st = PState::new(data, crate_num, start, tcx, &mut conv);\n+    let mut st = TyDecoder::new(data, crate_num, start, tcx, &mut conv);\n     st.parse_type_param_def()\n }\n \n@@ -151,28 +151,28 @@ pub fn parse_predicate_data<'tcx, F>(data: &[u8],\n                                      -> ty::Predicate<'tcx> where\n     F: FnMut(DefIdSource, ast::DefId) -> ast::DefId,\n {\n-    let mut st = PState::new(data, crate_num, start, tcx, &mut conv);\n+    let mut st = TyDecoder::new(data, crate_num, start, tcx, &mut conv);\n     st.parse_predicate()\n }\n \n pub type DefIdConvert<'a> = &'a mut FnMut(DefIdSource, ast::DefId) -> ast::DefId;\n \n-pub struct PState<'a, 'tcx: 'a> {\n+pub struct TyDecoder<'a, 'tcx: 'a> {\n     data: &'a [u8],\n     krate: ast::CrateNum,\n     pos: usize,\n     tcx: &'a ty::ctxt<'tcx>,\n     conv_def_id: DefIdConvert<'a>,\n }\n \n-impl<'a,'tcx> PState<'a,'tcx> {\n+impl<'a,'tcx> TyDecoder<'a,'tcx> {\n     pub fn new(data: &'a [u8],\n                crate_num: ast::CrateNum,\n                pos: usize,\n                tcx: &'a ty::ctxt<'tcx>,\n                conv: DefIdConvert<'a>)\n-               -> PState<'a, 'tcx> {\n-        PState {\n+               -> TyDecoder<'a, 'tcx> {\n+        TyDecoder {\n             data: data,\n             krate: crate_num,\n             pos: pos,\n@@ -231,7 +231,7 @@ impl<'a,'tcx> PState<'a,'tcx> {\n     }\n \n     fn parse_vec_per_param_space<T, F>(&mut self, mut f: F) -> VecPerParamSpace<T> where\n-        F: FnMut(&mut PState<'a, 'tcx>) -> T,\n+        F: FnMut(&mut TyDecoder<'a, 'tcx>) -> T,\n     {\n         let mut r = VecPerParamSpace::empty();\n         for &space in &subst::ParamSpace::all() {\n@@ -374,7 +374,7 @@ impl<'a,'tcx> PState<'a,'tcx> {\n     }\n \n     fn parse_opt<T, F>(&mut self, f: F) -> Option<T>\n-        where F: FnOnce(&mut PState<'a, 'tcx>) -> T,\n+        where F: FnOnce(&mut TyDecoder<'a, 'tcx>) -> T,\n     {\n         match self.next() {\n             'n' => None,\n@@ -503,11 +503,11 @@ impl<'a,'tcx> PState<'a,'tcx> {\n                     None => {}\n                 }\n \n-                let mut substate = PState::new(self.data,\n-                                               self.krate,\n-                                               pos,\n-                                               self.tcx,\n-                                               self.conv_def_id);\n+                let mut substate = TyDecoder::new(self.data,\n+                                                  self.krate,\n+                                                  pos,\n+                                                  self.tcx,\n+                                                  self.conv_def_id);\n                 let tt = substate.parse_ty();\n                 tcx.rcache.borrow_mut().insert(key, tt);\n                 return tt;"}]}