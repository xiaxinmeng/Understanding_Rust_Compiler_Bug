{"sha": "4b40bc85cbc1d072179c92ce01655db0272aa598", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiNDBiYzg1Y2JjMWQwNzIxNzljOTJjZTAxNjU1ZGIwMjcyYWE1OTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-02T16:31:26Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-01-02T16:31:26Z"}, "message": "auto merge of #20365 : nick29581/rust/mod, r=huonw\n\nPart of #20361 and #20362", "tree": {"sha": "e9ea8c89e3dbde74c6e87899e440a0ec0649887c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9ea8c89e3dbde74c6e87899e440a0ec0649887c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b40bc85cbc1d072179c92ce01655db0272aa598", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b40bc85cbc1d072179c92ce01655db0272aa598", "html_url": "https://github.com/rust-lang/rust/commit/4b40bc85cbc1d072179c92ce01655db0272aa598", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b40bc85cbc1d072179c92ce01655db0272aa598/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71b46b18a274edc7f7fb60b490e5ebbb9c911462", "url": "https://api.github.com/repos/rust-lang/rust/commits/71b46b18a274edc7f7fb60b490e5ebbb9c911462", "html_url": "https://github.com/rust-lang/rust/commit/71b46b18a274edc7f7fb60b490e5ebbb9c911462"}, {"sha": "dc53461a983ec4f5bc50291e71bfc67fd3d2d815", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc53461a983ec4f5bc50291e71bfc67fd3d2d815", "html_url": "https://github.com/rust-lang/rust/commit/dc53461a983ec4f5bc50291e71bfc67fd3d2d815"}], "stats": {"total": 748, "additions": 383, "deletions": 365}, "files": [{"sha": "82aa40cb0ad79a8ffc2254708fb45ff4fa9334a4", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -551,7 +551,7 @@ impl LintPass for BoxPointers {\n declare_lint! {\n     RAW_POINTER_DERIVING,\n     Warn,\n-    \"uses of #[deriving] with raw pointers are rarely correct\"\n+    \"uses of #[derive] with raw pointers are rarely correct\"\n }\n \n struct RawPtrDerivingVisitor<'a, 'tcx: 'a> {\n@@ -560,7 +560,7 @@ struct RawPtrDerivingVisitor<'a, 'tcx: 'a> {\n \n impl<'a, 'tcx, 'v> Visitor<'v> for RawPtrDerivingVisitor<'a, 'tcx> {\n     fn visit_ty(&mut self, ty: &ast::Ty) {\n-        static MSG: &'static str = \"use of `#[deriving]` with a raw pointer\";\n+        static MSG: &'static str = \"use of `#[derive]` with a raw pointer\";\n         if let ast::TyPtr(..) = ty.node {\n             self.cx.span_lint(RAW_POINTER_DERIVING, ty.span, MSG);\n         }"}, {"sha": "efb9b636247da964337fa9ad1aaf090c7433038c", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -681,9 +681,10 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                     ViewPathSimple(binding, ref full_path, id) => {\n                         let source_name =\n                             full_path.segments.last().unwrap().identifier.name;\n-                        if token::get_name(source_name).get() == \"mod\" {\n+                        if token::get_name(source_name).get() == \"mod\" ||\n+                           token::get_name(source_name).get() == \"self\" {\n                             self.resolve_error(view_path.span,\n-                                \"`mod` imports are only allowed within a { } list\");\n+                                \"`self` imports are only allowed within a { } list\");\n                         }\n \n                         let subclass = SingleImport(binding.name,\n@@ -704,10 +705,10 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                         }).collect::<Vec<Span>>();\n                         if mod_spans.len() > 1 {\n                             self.resolve_error(mod_spans[0],\n-                                \"`mod` import can only appear once in the list\");\n+                                \"`self` import can only appear once in the list\");\n                             for other_span in mod_spans.iter().skip(1) {\n                                 self.session.span_note(*other_span,\n-                                    \"another `mod` import appears here\");\n+                                    \"another `self` import appears here\");\n                             }\n                         }\n \n@@ -720,7 +721,7 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                                         Some(name) => *name,\n                                         None => {\n                                             self.resolve_error(source_item.span,\n-                                                \"`mod` import can only appear in an import list \\\n+                                                \"`self` import can only appear in an import list \\\n                                                  with a non-empty prefix\");\n                                             continue;\n                                         }"}, {"sha": "11328bedcc4938e977ee14649c045b13b61e1089", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -971,6 +971,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         }\n     }\n \n+\n     // Import resolution\n     //\n     // This is a fixed-point algorithm. We resolve imports until our efforts"}, {"sha": "efb4867a016be02ba14721e4c6181b4a45216eba", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -390,6 +390,8 @@ fn initial_syntax_expander_table(ecfg: &expand::ExpansionConfig) -> SyntaxEnv {\n     syntax_expanders.insert(intern(\"log_syntax\"),\n                             builtin_normal_expander(\n                                     ext::log_syntax::expand_syntax_ext));\n+    syntax_expanders.insert(intern(\"derive\"),\n+                            Decorator(box ext::deriving::expand_meta_derive));\n     syntax_expanders.insert(intern(\"deriving\"),\n                             Decorator(box ext::deriving::expand_meta_deriving));\n "}, {"sha": "acfb020fab67ee905559a1ed615c04bb23621b3c", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n //! Some code that abstracts away much of the boilerplate of writing\n-//! `deriving` instances for traits. Among other things it manages getting\n+//! `derive` instances for traits. Among other things it manages getting\n //! access to the fields of the 4 different sorts of structs and enum\n //! variants, as well as creating the method and impl ast instances.\n //!\n@@ -26,7 +26,7 @@\n //!   moment. (`TraitDef.additional_bounds`)\n //!\n //! Unsupported: FIXME #6257: calling methods on reference fields,\n-//! e.g. deriving Eq/Ord/Clone don't work on `struct A(&int)`,\n+//! e.g. derive Eq/Ord/Clone don't work on `struct A(&int)`,\n //! because of how the auto-dereferencing happens.\n //!\n //! The most important thing for implementers is the `Substructure` and\n@@ -209,7 +209,7 @@ use self::ty::{LifetimeBounds, Path, Ptr, PtrTy, Self, Ty};\n pub mod ty;\n \n pub struct TraitDef<'a> {\n-    /// The span for the current #[deriving(Foo)] header.\n+    /// The span for the current #[derive(Foo)] header.\n     pub span: Span,\n \n     pub attributes: Vec<ast::Attribute>,\n@@ -354,7 +354,7 @@ impl<'a> TraitDef<'a> {\n                                      generics)\n             }\n             _ => {\n-                cx.span_err(mitem.span, \"`deriving` may only be applied to structs and enums\");\n+                cx.span_err(mitem.span, \"`derive` may only be applied to structs and enums\");\n                 return;\n             }\n         };\n@@ -718,7 +718,7 @@ impl<'a> MethodDef<'a> {\n     }\n \n     /// ```\n-    /// #[deriving(PartialEq)]\n+    /// #[derive(PartialEq)]\n     /// struct A { x: int, y: int }\n     ///\n     /// // equivalent to:\n@@ -782,7 +782,7 @@ impl<'a> MethodDef<'a> {\n         } else {\n             cx.span_bug(trait_.span,\n                         \"no self arguments to non-static method in generic \\\n-                         `deriving`\")\n+                         `derive`\")\n         };\n \n         // body of the inner most destructuring match\n@@ -822,7 +822,7 @@ impl<'a> MethodDef<'a> {\n     }\n \n     /// ```\n-    /// #[deriving(PartialEq)]\n+    /// #[derive(PartialEq)]\n     /// enum A {\n     ///     A1,\n     ///     A2(int)\n@@ -1185,7 +1185,7 @@ impl<'a> TraitDef<'a> {\n                      cx: &mut ExtCtxt,\n                      mut to_set: Span) -> Span {\n         let trait_name = match self.path.path.last() {\n-            None => cx.span_bug(self.span, \"trait with empty path in generic `deriving`\"),\n+            None => cx.span_bug(self.span, \"trait with empty path in generic `derive`\"),\n             Some(name) => *name\n         };\n         to_set.expn_id = cx.codemap().record_expansion(codemap::ExpnInfo {\n@@ -1215,7 +1215,7 @@ impl<'a> TraitDef<'a> {\n         match (just_spans.is_empty(), named_idents.is_empty()) {\n             (false, false) => cx.span_bug(self.span,\n                                           \"a struct with named and unnamed \\\n-                                          fields in generic `deriving`\"),\n+                                          fields in generic `derive`\"),\n             // named fields\n             (_, false) => Named(named_idents),\n             // tuple structs (includes empty structs)\n@@ -1263,7 +1263,7 @@ impl<'a> TraitDef<'a> {\n                     None\n                 }\n                 _ => {\n-                    cx.span_bug(sp, \"a struct with named and unnamed fields in `deriving`\");\n+                    cx.span_bug(sp, \"a struct with named and unnamed fields in `derive`\");\n                 }\n             };\n             let ident = cx.ident_of(format!(\"{}_{}\", prefix, i)[]);\n@@ -1371,7 +1371,7 @@ pub fn cs_fold<F>(use_foldl: bool,\n             enum_nonmatch_f(cx, trait_span, (all_args[], tuple),\n                             substructure.nonself_args),\n         StaticEnum(..) | StaticStruct(..) => {\n-            cx.span_bug(trait_span, \"static function in `deriving`\")\n+            cx.span_bug(trait_span, \"static function in `derive`\")\n         }\n     }\n }\n@@ -1411,7 +1411,7 @@ pub fn cs_same_method<F>(f: F,\n             enum_nonmatch_f(cx, trait_span, (all_self_args[], tuple),\n                             substructure.nonself_args),\n         StaticEnum(..) | StaticStruct(..) => {\n-            cx.span_bug(trait_span, \"static function in `deriving`\")\n+            cx.span_bug(trait_span, \"static function in `derive`\")\n         }\n     }\n }"}, {"sha": "57d66f0e35524a376637d31e0ff45d0e42864c48", "filename": "src/libsyntax/ext/deriving/mod.rs", "status": "modified", "additions": 20, "deletions": 10, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fmod.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! The compiler code necessary to implement the `#[deriving]` extensions.\n+//! The compiler code necessary to implement the `#[derive]` extensions.\n //!\n //! FIXME (#2810): hygiene. Search for \"__\" strings (in other files too). We also assume \"extra\" is\n //! the standard library, and \"std\" is the core library.\n@@ -45,16 +45,26 @@ pub fn expand_meta_deriving(cx: &mut ExtCtxt,\n                             _span: Span,\n                             mitem: &MetaItem,\n                             item: &Item,\n-                            mut push: Box<FnMut(P<Item>)>) {\n+                            push: Box<FnMut(P<Item>)>) {\n+    cx.span_warn(mitem.span, \"`deriving` is deprecated; use `derive`\");\n+\n+    expand_meta_derive(cx, _span, mitem, item, push)\n+}\n+\n+pub fn expand_meta_derive(cx: &mut ExtCtxt,\n+                          _span: Span,\n+                          mitem: &MetaItem,\n+                          item: &Item,\n+                          mut push: Box<FnMut(P<Item>)>) {\n     match mitem.node {\n         MetaNameValue(_, ref l) => {\n-            cx.span_err(l.span, \"unexpected value in `deriving`\");\n+            cx.span_err(l.span, \"unexpected value in `derive`\");\n         }\n         MetaWord(_) => {\n-            cx.span_warn(mitem.span, \"empty trait list in `deriving`\");\n+            cx.span_warn(mitem.span, \"empty trait list in `derive`\");\n         }\n         MetaList(_, ref titems) if titems.len() == 0 => {\n-            cx.span_warn(mitem.span, \"empty trait list in `deriving`\");\n+            cx.span_warn(mitem.span, \"empty trait list in `derive`\");\n         }\n         MetaList(_, ref titems) => {\n             for titem in titems.iter().rev() {\n@@ -78,15 +88,15 @@ pub fn expand_meta_deriving(cx: &mut ExtCtxt,\n                             }\n                             \"Encodable\" => {\n                                 cx.span_warn(titem.span,\n-                                             \"deriving(Encodable) is deprecated \\\n-                                              in favor of deriving(RustcEncodable)\");\n+                                             \"derive(Encodable) is deprecated \\\n+                                              in favor of derive(RustcEncodable)\");\n \n                                 expand!(encodable::expand_deriving_encodable)\n                             }\n                             \"Decodable\" => {\n                                 cx.span_warn(titem.span,\n-                                             \"deriving(Decodable) is deprecated \\\n-                                              in favor of deriving(RustcDecodable)\");\n+                                             \"derive(Decodable) is deprecated \\\n+                                              in favor of derive(RustcDecodable)\");\n \n                                 expand!(decodable::expand_deriving_decodable)\n                             }\n@@ -111,7 +121,7 @@ pub fn expand_meta_deriving(cx: &mut ExtCtxt,\n \n                             ref tname => {\n                                 cx.span_err(titem.span,\n-                                            format!(\"unknown `deriving` \\\n+                                            format!(\"unknown `derive` \\\n                                                      trait: `{}`\",\n                                                     *tname)[]);\n                             }"}, {"sha": "f84ddcf360ebe4adde54e1a78309066105a027db", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -546,6 +546,10 @@ impl<'a> Parser<'a> {\n     pub fn parse_path_list_item(&mut self) -> ast::PathListItem {\n         let lo = self.span.lo;\n         let node = if self.eat_keyword(keywords::Mod) {\n+            let span = self.last_span;\n+            self.span_warn(span, \"deprecated syntax; use the `self` keyword now\");\n+            ast::PathListMod { id: ast::DUMMY_NODE_ID }\n+        } else if self.eat_keyword(keywords::Self) {\n             ast::PathListMod { id: ast::DUMMY_NODE_ID }\n         } else {\n             let ident = self.parse_ident();"}, {"sha": "877b2c7b7d366905330749d53d528c87391f441a", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -2540,7 +2540,7 @@ impl<'a> State<'a> {\n                             s.print_ident(name)\n                         },\n                         ast::PathListMod { .. } => {\n-                            word(&mut s.s, \"mod\")\n+                            word(&mut s.s, \"self\")\n                         }\n                     }\n                 }));"}, {"sha": "0e90db2835f9ece50bd7d90b16cc3468b57b0090", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -13,7 +13,7 @@ use std::cmp::PartialEq;\n pub trait MyNum : Add<Self,Self> + Sub<Self,Self> + Mul<Self,Self> + PartialEq + Clone {\n }\n \n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n pub struct MyInt {\n     pub val: int\n }"}, {"sha": "1408cfe6eeee48e49026e9deb0c1043a812a937e", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -60,7 +60,7 @@ static OCCURRENCES: [&'static str;5] = [\n \n // Code implementation\n \n-#[deriving(PartialEq, PartialOrd, Ord, Eq)]\n+#[derive(PartialEq, PartialOrd, Ord, Eq)]\n struct Code(u64);\n \n impl Copy for Code {}"}, {"sha": "b27a8710e326b81e689cb8469c11741395d8d3e7", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -14,7 +14,7 @@ use std::os;\n use std::task;\n use std::time::Duration;\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum List<T> {\n     Nil, Cons(T, Box<List<T>>)\n }"}, {"sha": "e4364b12580d3a7476acca07e5954b3be0e2e08d", "filename": "src/test/compile-fail/associated-types-issue-20346.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-20346.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-20346.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-20346.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -14,7 +14,7 @@\n #![feature(associated_types)]\n #![no_implicit_prelude]\n \n-use std::option::Option::{None, Some, mod};\n+use std::option::Option::{self, None, Some};\n use std::vec::Vec;\n \n trait Iterator {"}, {"sha": "5fe88cafacf4c110e6a213ba4b9f6ceb0f757e81", "filename": "src/test/compile-fail/attr-before-eof.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fattr-before-eof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fattr-before-eof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-before-eof.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Show)] //~ERROR expected item after attributes\n+#[derive(Show)] //~ERROR expected item after attributes"}, {"sha": "ac90b7cb4328e6a9d20a6e76f25ff1a2b805aba3", "filename": "src/test/compile-fail/borrowck-init-in-fru.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fru.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fru.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-init-in-fru.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct point {\n     x: int,\n     y: int,"}, {"sha": "3317295f88f5c8cb60cfc8e9d5647bcd616f268e", "filename": "src/test/compile-fail/borrowck-loan-in-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct foo(Box<uint>);\n \n impl Add<foo, foo> for foo {"}, {"sha": "3143da99f487425d6eb82e569a8ef6425332dbce", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n struct Point {\n     x: int,\n     y: int,"}, {"sha": "047ab93530b265fc92e0d14083bbfddac924af5c", "filename": "src/test/compile-fail/borrowck-move-out-of-vec-tail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-out-of-vec-tail.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,7 +10,7 @@\n \n // Test that we do not permit moves from &[] matched by a vec pattern.\n \n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n struct Foo {\n     string: String\n }"}, {"sha": "f3efca369b3104206d4400678245028a89584b44", "filename": "src/test/compile-fail/coherence-blanket-conflicts-with-specific-multidispatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-blanket-conflicts-with-specific-multidispatch.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -24,7 +24,7 @@ impl<T> MyTrait<T> for T { //~ ERROR E0119\n     }\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct MyType {\n     dummy: uint\n }"}, {"sha": "98cf7009f0f08f962daa4e75a3719648f677c373", "filename": "src/test/compile-fail/copy-a-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcopy-a-resource.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct foo {\n   i: int,\n }"}, {"sha": "c0bcbb284a15e961093cc1bb9021f5b8cc6390f0", "filename": "src/test/compile-fail/deriving-bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-bounds.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Copy(Bad))]\n+#[derive(Copy(Bad))]\n //~^ ERROR unexpected value in deriving, expected a trait\n struct Test;\n \n-#[deriving(Sync)]\n+#[derive(Sync)]\n //~^ ERROR Sync is an unsafe trait and it should be implemented explicitly\n struct Test1;\n "}, {"sha": "6b85656bdd9e63e1561ecc2287b654f6560083cd", "filename": "src/test/compile-fail/deriving-meta-unknown-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-meta-unknown-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-meta-unknown-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-meta-unknown-trait.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Eqr)] //~ ERROR unknown `deriving` trait: `Eqr`\n+#[derive(Eqr)] //~ ERROR unknown `derive` trait: `Eqr`\n struct Foo;\n \n pub fn main() {}"}, {"sha": "ac63cc27da1eeba52ecc9b151ba25ead78aa9515", "filename": "src/test/compile-fail/deriving-no-inner-impl-error-message.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-no-inner-impl-error-message.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-no-inner-impl-error-message.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-no-inner-impl-error-message.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,12 +10,12 @@\n \n struct NoCloneOrEq;\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n struct E {\n     x: NoCloneOrEq //~ ERROR binary operation `==` cannot be applied to type `NoCloneOrEq`\n          //~^ ERROR binary operation `!=` cannot be applied to type `NoCloneOrEq`\n }\n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct C {\n     x: NoCloneOrEq\n     //~^ ERROR the trait `core::clone::Clone` is not implemented for the type `NoCloneOrEq`"}, {"sha": "717ce6e11efbaa423499d868d8e3d69ff9f5c5e5", "filename": "src/test/compile-fail/deriving-non-type.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-non-type.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,29 +12,29 @@\n \n struct S;\n \n-#[deriving(PartialEq)] //~ ERROR: `deriving` may only be applied to structs and enums\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n trait T { }\n \n-#[deriving(PartialEq)] //~ ERROR: `deriving` may only be applied to structs and enums\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n impl S { }\n \n-#[deriving(PartialEq)] //~ ERROR: `deriving` may only be applied to structs and enums\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n impl T for S { }\n \n-#[deriving(PartialEq)] //~ ERROR: `deriving` may only be applied to structs and enums\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n static s: uint = 0u;\n \n-#[deriving(PartialEq)] //~ ERROR: `deriving` may only be applied to structs and enums\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n const c: uint = 0u;\n \n-#[deriving(PartialEq)] //~ ERROR: `deriving` may only be applied to structs and enums\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n mod m { }\n \n-#[deriving(PartialEq)] //~ ERROR: `deriving` may only be applied to structs and enums\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n extern \"C\" { }\n \n-#[deriving(PartialEq)] //~ ERROR: `deriving` may only be applied to structs and enums\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n type A = uint;\n \n-#[deriving(PartialEq)] //~ ERROR: `deriving` may only be applied to structs and enums\n+#[derive(PartialEq)] //~ ERROR: `derive` may only be applied to structs and enums\n fn main() { }"}, {"sha": "a3c6c8672c837ae6d703a967d116c67139f56461", "filename": "src/test/compile-fail/deriving-primitive.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -11,22 +11,22 @@\n use std::num::FromPrimitive;\n use std::int;\n \n-#[deriving(FromPrimitive)]\n+#[derive(FromPrimitive)]\n struct A { x: int }\n //~^^ ERROR `FromPrimitive` cannot be derived for structs\n //~^^^ ERROR `FromPrimitive` cannot be derived for structs\n \n-#[deriving(FromPrimitive)]\n+#[derive(FromPrimitive)]\n struct B(int);\n //~^^ ERROR `FromPrimitive` cannot be derived for structs\n //~^^^ ERROR `FromPrimitive` cannot be derived for structs\n \n-#[deriving(FromPrimitive)]\n+#[derive(FromPrimitive)]\n enum C { Foo(int), Bar(uint) }\n //~^^ ERROR `FromPrimitive` cannot be derived for enum variants with arguments\n //~^^^ ERROR `FromPrimitive` cannot be derived for enum variants with arguments\n \n-#[deriving(FromPrimitive)]\n+#[derive(FromPrimitive)]\n enum D { Baz { x: int } }\n //~^^ ERROR `FromPrimitive` cannot be derived for enums with struct variants\n //~^^^ ERROR `FromPrimitive` cannot be derived for enums with struct variants"}, {"sha": "9badb5b262dfed2c424f3ce2fedf83a4ab236231", "filename": "src/test/compile-fail/deriving-span-Clone-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum-struct-variant.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum Enum {\n    A {\n      x: Error //~ ERROR"}, {"sha": "6b71610778c1928ed491b845383488662d09bd27", "filename": "src/test/compile-fail/deriving-span-Clone-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum Enum {\n    A(\n      Error //~ ERROR"}, {"sha": "845da771de8265dc0401056cf40e5d73dfa4dd11", "filename": "src/test/compile-fail/deriving-span-Clone-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct Struct {\n     x: Error //~ ERROR\n }"}, {"sha": "698e5a79bef29cad3d0acacecc30d3260ca8e5ec", "filename": "src/test/compile-fail/deriving-span-Clone-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-tuple-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct Struct(\n     Error //~ ERROR\n );"}, {"sha": "ac718519fe672a8c7d3bfac33a81a4ea7b32e73f", "filename": "src/test/compile-fail/deriving-span-Default-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Default)]\n+#[derive(Default)]\n struct Struct {\n     x: Error //~ ERROR `core::default::Default` is not implemented\n }"}, {"sha": "d0b9a7a3db9d323a7faf14aada23ea0e2b60f174", "filename": "src/test/compile-fail/deriving-span-Default-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-tuple-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Default)]\n+#[derive(Default)]\n struct Struct(\n     Error //~ ERROR\n );"}, {"sha": "d9f4bfe10280bcf33ad6023e3519b629a49a4389", "filename": "src/test/compile-fail/deriving-span-Hash-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum-struct-variant.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Hash)]\n+#[derive(Hash)]\n enum Enum {\n    A {\n      x: Error //~ ERROR"}, {"sha": "1f5a5d5201fb7bb8be0aa4398d2636a4ff0a4465", "filename": "src/test/compile-fail/deriving-span-Hash-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Hash)]\n+#[derive(Hash)]\n enum Enum {\n    A(\n      Error //~ ERROR"}, {"sha": "55a5e9ee6b385021356d414d3b8dae020a86e972", "filename": "src/test/compile-fail/deriving-span-Hash-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Hash)]\n+#[derive(Hash)]\n struct Struct {\n     x: Error //~ ERROR\n }"}, {"sha": "5c81c57dbcc4e55ee6c61b2951034dbbae17f34d", "filename": "src/test/compile-fail/deriving-span-Hash-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-tuple-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Hash)]\n+#[derive(Hash)]\n struct Struct(\n     Error //~ ERROR\n );"}, {"sha": "c340ad8a46a041c7e15263cfaef19b10f62d81f8", "filename": "src/test/compile-fail/deriving-span-PartialEq-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-enum-struct-variant.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n enum Enum {\n    A {\n      x: Error //~ ERROR"}, {"sha": "9051a6371fc8dc09b5cc23851dcd03feef4ce9f7", "filename": "src/test/compile-fail/deriving-span-PartialEq-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-enum.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n enum Enum {\n    A(\n      Error //~ ERROR"}, {"sha": "310d4ecd03f3ac1f2c57ac0b04cd082788991997", "filename": "src/test/compile-fail/deriving-span-PartialEq-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n struct Struct {\n     x: Error //~ ERROR\n //~^ ERROR"}, {"sha": "9b6df0e77e1e0cb1b6446026b94893a2f1549f46", "filename": "src/test/compile-fail/deriving-span-PartialEq-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialEq-tuple-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n struct Struct(\n     Error //~ ERROR\n //~^ ERROR"}, {"sha": "5a2d2063d141245d6e414e89153c62ef98f98fd1", "filename": "src/test/compile-fail/deriving-span-PartialOrd-enum-struct-variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-enum-struct-variant.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,10 +12,10 @@\n \n extern crate rand;\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n struct Error;\n \n-#[deriving(PartialOrd,PartialEq)]\n+#[derive(PartialOrd,PartialEq)]\n enum Enum {\n    A {\n      x: Error //~ ERROR"}, {"sha": "9341b6c3e8b843ce6c708847468ef0e1fee98b3f", "filename": "src/test/compile-fail/deriving-span-PartialOrd-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-enum.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,10 +12,10 @@\n \n extern crate rand;\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n struct Error;\n \n-#[deriving(PartialOrd,PartialEq)]\n+#[derive(PartialOrd,PartialEq)]\n enum Enum {\n    A(\n      Error //~ ERROR"}, {"sha": "8a707566efa19be80dd7fa97f3ead701940b6a79", "filename": "src/test/compile-fail/deriving-span-PartialOrd-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,10 +12,10 @@\n \n extern crate rand;\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n struct Error;\n \n-#[deriving(PartialOrd,PartialEq)]\n+#[derive(PartialOrd,PartialEq)]\n struct Struct {\n     x: Error //~ ERROR\n //~^ ERROR"}, {"sha": "ae1b8b44379a70fb9cc5bf97b4d0f01a89ee1e16", "filename": "src/test/compile-fail/deriving-span-PartialOrd-tuple-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-PartialOrd-tuple-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,10 +12,10 @@\n \n extern crate rand;\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n struct Error;\n \n-#[deriving(PartialOrd,PartialEq)]\n+#[derive(PartialOrd,PartialEq)]\n struct Struct(\n     Error //~ ERROR\n //~^ ERROR"}, {"sha": "4d3542c586b0aaa46c032161a2ceb33a7b35819d", "filename": "src/test/compile-fail/deriving-span-Rand-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum-struct-variant.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Rand)]\n+#[derive(Rand)]\n enum Enum {\n    A {\n      x: Error //~ ERROR"}, {"sha": "dcfdbdc8062ce6f4df1d45e2610fe02b39c4aa17", "filename": "src/test/compile-fail/deriving-span-Rand-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Rand)]\n+#[derive(Rand)]\n enum Enum {\n    A(\n      Error //~ ERROR"}, {"sha": "73d89693b2bc458d2e84685a36d89a5eec6d91c0", "filename": "src/test/compile-fail/deriving-span-Rand-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Rand)]\n+#[derive(Rand)]\n struct Struct {\n     x: Error //~ ERROR\n }"}, {"sha": "8038bf3ff092501ba959bf4815cb2d6f1a5487a4", "filename": "src/test/compile-fail/deriving-span-Rand-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-tuple-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Rand)]\n+#[derive(Rand)]\n struct Struct(\n     Error //~ ERROR\n );"}, {"sha": "aefc990c187c180e1430fa264a092d017887d256", "filename": "src/test/compile-fail/deriving-span-Show-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum Enum {\n    A {\n      x: Error //~ ERROR"}, {"sha": "bdd2c21a1b6a9c4c635ead9cbeac462f365ad4e3", "filename": "src/test/compile-fail/deriving-span-Show-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum Enum {\n    A(\n      Error //~ ERROR"}, {"sha": "f76317e62b42b1ba5d605622ddd8f0f0ce10f174", "filename": "src/test/compile-fail/deriving-span-Show-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct Struct {\n     x: Error //~ ERROR\n }"}, {"sha": "cb64a438e0bb75c29f6d15c18686153b2e563696", "filename": "src/test/compile-fail/deriving-span-Show-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct Struct(\n     Error //~ ERROR\n );"}, {"sha": "6994aa76fff021ef83c4292dc90772ab89e6d9a8", "filename": "src/test/compile-fail/deriving-span-TotalEq-enum-struct-variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,10 +12,10 @@\n \n extern crate rand;\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n struct Error;\n \n-#[deriving(Eq,PartialEq)]\n+#[derive(Eq,PartialEq)]\n enum Enum {\n    A {\n      x: Error //~ ERROR"}, {"sha": "279368d64ab95251c0d16ae37c25c9d2466f463d", "filename": "src/test/compile-fail/deriving-span-TotalEq-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,10 +12,10 @@\n \n extern crate rand;\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n struct Error;\n \n-#[deriving(Eq,PartialEq)]\n+#[derive(Eq,PartialEq)]\n enum Enum {\n    A(\n      Error //~ ERROR"}, {"sha": "8672e8e050ea6452e205cca2a46bb9c03928c142", "filename": "src/test/compile-fail/deriving-span-TotalEq-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,10 +12,10 @@\n \n extern crate rand;\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n struct Error;\n \n-#[deriving(Eq,PartialEq)]\n+#[derive(Eq,PartialEq)]\n struct Struct {\n     x: Error //~ ERROR\n }"}, {"sha": "e79b3b97410fee0873b1e208d5af645502e7537e", "filename": "src/test/compile-fail/deriving-span-TotalEq-tuple-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,10 +12,10 @@\n \n extern crate rand;\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n struct Error;\n \n-#[deriving(Eq,PartialEq)]\n+#[derive(Eq,PartialEq)]\n struct Struct(\n     Error //~ ERROR\n );"}, {"sha": "6d5e1fb75d48ec04723e1cb3608c3c49b88a7189", "filename": "src/test/compile-fail/deriving-span-TotalOrd-enum-struct-variant.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,10 +12,10 @@\n \n extern crate rand;\n \n-#[deriving(Eq,PartialOrd,PartialEq)]\n+#[derive(Eq,PartialOrd,PartialEq)]\n struct Error;\n \n-#[deriving(Ord,Eq,PartialOrd,PartialEq)]\n+#[derive(Ord,Eq,PartialOrd,PartialEq)]\n enum Enum {\n    A {\n      x: Error //~ ERROR"}, {"sha": "5b34290133488f50d9d94d2eb9d0707047098983", "filename": "src/test/compile-fail/deriving-span-TotalOrd-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,10 +12,10 @@\n \n extern crate rand;\n \n-#[deriving(Eq,PartialOrd,PartialEq)]\n+#[derive(Eq,PartialOrd,PartialEq)]\n struct Error;\n \n-#[deriving(Ord,Eq,PartialOrd,PartialEq)]\n+#[derive(Ord,Eq,PartialOrd,PartialEq)]\n enum Enum {\n    A(\n      Error //~ ERROR"}, {"sha": "61d9d8a76a985cd084ead62963a7386691ba6b07", "filename": "src/test/compile-fail/deriving-span-TotalOrd-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,10 +12,10 @@\n \n extern crate rand;\n \n-#[deriving(Eq,PartialOrd,PartialEq)]\n+#[derive(Eq,PartialOrd,PartialEq)]\n struct Error;\n \n-#[deriving(Ord,Eq,PartialOrd,PartialEq)]\n+#[derive(Ord,Eq,PartialOrd,PartialEq)]\n struct Struct {\n     x: Error //~ ERROR\n }"}, {"sha": "caef79687562a421b90b01b3eda5d623babc59f6", "filename": "src/test/compile-fail/deriving-span-TotalOrd-tuple-struct.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,10 +12,10 @@\n \n extern crate rand;\n \n-#[deriving(Eq,PartialOrd,PartialEq)]\n+#[derive(Eq,PartialOrd,PartialEq)]\n struct Error;\n \n-#[deriving(Ord,Eq,PartialOrd,PartialEq)]\n+#[derive(Ord,Eq,PartialOrd,PartialEq)]\n struct Struct(\n     Error //~ ERROR\n );"}, {"sha": "6b09c365235413fdbd9a0ba453b706b626986504", "filename": "src/test/compile-fail/deriving-span-Zero-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Zero)]   //~ ERROR not implemented\n+#[derive(Zero)]   //~ ERROR not implemented\n struct Struct {\n     x: Error\n }"}, {"sha": "c11af72f5c983ec692df8da063d4965162b8821f", "filename": "src/test/compile-fail/deriving-span-Zero-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,7 +15,7 @@ extern crate rand;\n \n struct Error;\n \n-#[deriving(Zero)]   //~ ERROR not implemented\n+#[derive(Zero)]   //~ ERROR not implemented\n struct Struct(\n     Error\n );"}, {"sha": "7ee7e196b6b076a91151fc6fdba2586acd3adbb7", "filename": "src/test/compile-fail/doc-before-attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fdoc-before-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fdoc-before-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdoc-before-attr.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n /// hi\n-#[deriving(Show)] //~ERROR expected item after attributes\n+#[derive(Show)] //~ERROR expected item after attributes"}, {"sha": "fcc08cfcb168035d9204374a1a10324713af80ff", "filename": "src/test/compile-fail/dst-bad-assign-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign-2.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -16,10 +16,10 @@ struct Fat<Sized? T> {\n     ptr: T\n }\n \n-#[deriving(PartialEq,Eq)]\n+#[derive(PartialEq,Eq)]\n struct Bar;\n \n-#[deriving(PartialEq,Eq)]\n+#[derive(PartialEq,Eq)]\n struct Bar1 {\n     f: int\n }"}, {"sha": "eb54f3f8e781fbcc38a7f3ec841e86d7cb3a16ab", "filename": "src/test/compile-fail/dst-bad-assign.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-bad-assign.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -16,10 +16,10 @@ struct Fat<Sized? T> {\n     ptr: T\n }\n \n-#[deriving(PartialEq,Eq)]\n+#[derive(PartialEq,Eq)]\n struct Bar;\n \n-#[deriving(PartialEq,Eq)]\n+#[derive(PartialEq,Eq)]\n struct Bar1 {\n     f: int\n }"}, {"sha": "96f252967a8d0ec2c6b77cc5b03765425e955a74", "filename": "src/test/compile-fail/issue-17728.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fissue-17728.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fissue-17728.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17728.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -30,7 +30,7 @@ trait TraversesWorld {\n }\n \n \n-#[deriving(Show, Eq, PartialEq, Hash)]\n+#[derive(Show, Eq, PartialEq, Hash)]\n enum RoomDirection {\n     West,\n     East,"}, {"sha": "2b5c0b7de2f9baa9eabbc9519125daffead42864", "filename": "src/test/compile-fail/issue-17905.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fissue-17905.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fissue-17905.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-17905.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct Pair<T, V> (T, V);\n \n impl Pair<"}, {"sha": "27a91f891a2df3cba57a626ab7f4a21ce24bd6f8", "filename": "src/test/compile-fail/issue-3344.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3344.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n struct thing(uint);\n impl PartialOrd for thing { //~ ERROR not all trait items implemented, missing: `partial_cmp`\n     fn le(&self, other: &thing) -> bool { true }"}, {"sha": "67ab5508ec2cddc8dea41457f29fa20a0a176d13", "filename": "src/test/compile-fail/issue-3521.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3521.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -11,7 +11,7 @@\n fn main() {\n     let foo = 100;\n \n-    #[deriving(Show)]\n+    #[derive(Show)]\n     enum Stuff {\n         Bar = foo //~ ERROR attempt to use a non-constant value in a constant\n     }"}, {"sha": "6fe8862d77e585983135b47d3bb39d81813a1c39", "filename": "src/test/compile-fail/lint-raw-ptr-deriving.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-deriving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-deriving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-deriving.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -11,24 +11,24 @@\n #![allow(dead_code)]\n #![deny(raw_pointer_deriving)]\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct Foo {\n-    x: *const int //~ ERROR use of `#[deriving]` with a raw pointer\n+    x: *const int //~ ERROR use of `#[derive]` with a raw pointer\n }\n \n-#[deriving(Clone)]\n-struct Bar(*mut int); //~ ERROR use of `#[deriving]` with a raw pointer\n+#[derive(Clone)]\n+struct Bar(*mut int); //~ ERROR use of `#[derive]` with a raw pointer\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum Baz {\n-    A(*const int), //~ ERROR use of `#[deriving]` with a raw pointer\n-    B { x: *mut int } //~ ERROR use of `#[deriving]` with a raw pointer\n+    A(*const int), //~ ERROR use of `#[derive]` with a raw pointer\n+    B { x: *mut int } //~ ERROR use of `#[derive]` with a raw pointer\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct Buzz {\n-    x: (*const int, //~ ERROR use of `#[deriving]` with a raw pointer\n-        *const uint) //~ ERROR use of `#[deriving]` with a raw pointer\n+    x: (*const int, //~ ERROR use of `#[derive]` with a raw pointer\n+        *const uint) //~ ERROR use of `#[derive]` with a raw pointer\n }\n \n fn main() {}"}, {"sha": "1c7a2d7e9d5e7d5eacef10e32bd249fac0460a6f", "filename": "src/test/compile-fail/lint-unnecessary-parens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,7 +10,7 @@\n \n #![deny(unused_parens)]\n \n-#[deriving(Eq, PartialEq)]\n+#[derive(Eq, PartialEq)]\n struct X { y: bool }\n impl X {\n     fn foo(&self) -> bool { self.y }"}, {"sha": "f25d2a9b00c706596f12e46226c2efbee47c1614", "filename": "src/test/compile-fail/liveness-use-after-send.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-use-after-send.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -14,7 +14,7 @@ fn send<T:Send + std::fmt::Show>(ch: _chan<T>, data: T) {\n     panic!();\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct _chan<T>(int);\n \n // Tests that \"log(debug, message);\" is flagged as using"}, {"sha": "f97cad559a15d769dceac6ec465177fedca54323", "filename": "src/test/compile-fail/macros-nonfatal-errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fmacros-nonfatal-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fmacros-nonfatal-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacros-nonfatal-errors.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -14,7 +14,7 @@\n #![feature(asm)]\n #![feature(trace_macros, concat_idents)]\n \n-#[deriving(Default, //~ ERROR\n+#[derive(Default, //~ ERROR\n            Rand, //~ ERROR\n            Zero)] //~ ERROR\n enum CantDeriveThose {}"}, {"sha": "f487ecf9f45829c231d3990ca8cf36c4e8c0e6a3", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -13,11 +13,11 @@\n use std::task;\n use std::rc::Rc;\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct Port<T>(Rc<T>);\n \n fn main() {\n-    #[deriving(Show)]\n+    #[derive(Show)]\n     struct foo {\n       _x: Port<()>,\n     }"}, {"sha": "aceec2aafdfa35bc37d051e1efe2142c595a1f41", "filename": "src/test/compile-fail/noncopyable-class.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnoncopyable-class.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -11,7 +11,7 @@\n // Test that a class with a non-copyable field can't be\n // copied\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct bar {\n   x: int,\n }\n@@ -26,7 +26,7 @@ fn bar(x:int) -> bar {\n     }\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct foo {\n   i: int,\n   j: bar,"}, {"sha": "728f66a6aa76c8a153a91bb2c10c99a61c4b1bcf", "filename": "src/test/compile-fail/nonscalar-cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnonscalar-cast.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,7 +10,7 @@\n \n // error-pattern:non-scalar cast\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct foo {\n     x: int\n }"}, {"sha": "91c6776e52eddb06db8dd37b5cf4a0e204dd5f4a", "filename": "src/test/compile-fail/packed-struct-transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpacked-struct-transmute.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -23,7 +23,7 @@ struct Foo {\n     baz: uint\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct Oof {\n     rab: u8,\n     zab: uint"}, {"sha": "704d8c568c421284126b256ebede10e9a4453dba", "filename": "src/test/compile-fail/unique-pinned-nocopy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-pinned-nocopy.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct r {\n   b: bool,\n }"}, {"sha": "8aabc9b042f7ec06e5f53b26b27a4387303f48b5", "filename": "src/test/compile-fail/unique-vec-res.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funique-vec-res.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,7 +12,7 @@\n \n use std::cell::Cell;\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct r<'a> {\n   i: &'a Cell<int>,\n }"}, {"sha": "e98224bee02f8000b3ec691f76afa03f8e622842", "filename": "src/test/compile-fail/use-mod-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fuse-mod-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fuse-mod-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-mod-2.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -9,10 +9,10 @@\n // except according to those terms.\n \n mod foo {\n-    use self::{mod};\n+    use self::{self};\n     //~^ ERROR unresolved import `self`. There is no `self` in `???`\n \n-    use super::{mod};\n+    use super::{self};\n     //~^ ERROR unresolved import `super`. There is no `super` in `???`\n }\n "}, {"sha": "040674fd6d93bad7e08805a6d35e745c99f5d69d", "filename": "src/test/compile-fail/use-mod-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fuse-mod-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fuse-mod-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-mod-3.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use foo::bar::{\n-    mod //~ ERROR module `bar` is private\n+    self //~ ERROR module `bar` is private\n };\n use foo::bar::{\n     Bar //~ ERROR type `Bar` is inaccessible"}, {"sha": "493991835e8a203e37b27b7f990f38ff7ed031ec", "filename": "src/test/compile-fail/use-mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fuse-mod.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -9,18 +9,18 @@\n // except according to those terms.\n \n use foo::bar::{\n-    mod,\n-//~^ ERROR `mod` import can only appear once in the list\n+    self,\n+//~^ ERROR `self` import can only appear once in the list\n     Bar,\n-    mod\n-//~^ NOTE another `mod` import appears here\n+    self\n+//~^ NOTE another `self` import appears here\n };\n \n-use {mod};\n-//~^ ERROR `mod` import can only appear in an import list with a non-empty prefix\n+use {self};\n+//~^ ERROR `self` import can only appear in an import list with a non-empty prefix\n \n-use foo::mod;\n-//~^ ERROR `mod` imports are only allowed within a { } list\n+use foo::self;\n+//~^ ERROR `self` imports are only allowed within a { } list\n \n mod foo {\n     pub mod bar {"}, {"sha": "28a7ceeeaa2cdba28d5b83714562a71880f3c834", "filename": "src/test/compile-fail/vec-res-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fvec-res-add.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct r {\n   i:int\n }"}, {"sha": "8ac8d5970f31857d5d1da5e2405f21a657c7de77", "filename": "src/test/debuginfo/by-value-non-immediate-argument.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fby-value-non-immediate-argument.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -73,13 +73,13 @@\n \n #![omit_gdb_pretty_printer_section]\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct Struct {\n     a: int,\n     b: f64\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct StructStruct {\n     a: Struct,\n     b: Struct"}, {"sha": "ad7c860c8b9beacc3290ad3d6682e327c6aba581", "filename": "src/test/debuginfo/c-style-enum.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fc-style-enum.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -105,21 +105,21 @@ use self::AutoDiscriminant::{One, Two, Three};\n use self::ManualDiscriminant::{OneHundred, OneThousand, OneMillion};\n use self::SingleVariant::TheOnlyVariant;\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n enum AutoDiscriminant {\n     One,\n     Two,\n     Three\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n enum ManualDiscriminant {\n     OneHundred = 100,\n     OneThousand = 1000,\n     OneMillion = 1000000\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n enum SingleVariant {\n     TheOnlyVariant\n }"}, {"sha": "b2fdb708db55952843b9438ea41c37236a8f8b85", "filename": "src/test/debuginfo/generic-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fdebuginfo%2Fgeneric-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Fdebuginfo%2Fgeneric-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fgeneric-function.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -72,7 +72,7 @@\n \n #![omit_gdb_pretty_printer_section]\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct Struct {\n     a: int,\n     b: f64"}, {"sha": "b38db4c9eb2c659ad34f41fd2be4f6783e90b48c", "filename": "src/test/run-make/extern-fn-with-packed-struct/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fextern-fn-with-packed-struct%2Ftest.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #[repr(packed)]\n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct Foo {\n     a: i8,\n     b: i16,"}, {"sha": "b6137c3eba91bd9e701258ef210feb1bc67fbdf6", "filename": "src/test/run-make/pretty-expanded/input.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-make%2Fpretty-expanded%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-make%2Fpretty-expanded%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fpretty-expanded%2Finput.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -14,9 +14,9 @@\n \n extern crate serialize;\n \n-#[deriving(Encodable)] pub struct A;\n-#[deriving(Encodable)] pub struct B(int);\n-#[deriving(Encodable)] pub struct C { x: int }\n-#[deriving(Encodable)] pub enum D {}\n-#[deriving(Encodable)] pub enum E { y }\n-#[deriving(Encodable)] pub enum F { z(int) }\n+#[derive(Encodable)] pub struct A;\n+#[derive(Encodable)] pub struct B(int);\n+#[derive(Encodable)] pub struct C { x: int }\n+#[derive(Encodable)] pub enum D {}\n+#[derive(Encodable)] pub enum E { y }\n+#[derive(Encodable)] pub enum F { z(int) }"}, {"sha": "78dcaebda4bc448565d913936b37f061b36eca6e", "filename": "src/test/run-make/rustdoc-hidden-line/foo.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2Ffoo.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,16 +10,16 @@\n \n #![crate_name=\"foo\"]\n \n-/// The '# ' lines should be removed from the output, but the #[deriving] should be\n+/// The '# ' lines should be removed from the output, but the #[derive] should be\n /// retained.\n ///\n /// ```rust\n /// mod to_make_deriving_work { // FIXME #4913\n ///\n-/// # #[deriving(PartialEq)] // invisible\n+/// # #[derive(PartialEq)] // invisible\n /// # struct Foo; // invisible\n ///\n-/// #[deriving(PartialEq)] // Bar\n+/// #[derive(PartialEq)] // Bar\n /// struct Bar(Foo);\n ///\n /// fn test() {"}, {"sha": "9f28b55b13396b4d794dea30091dd4f77a1dc275", "filename": "src/test/run-make/rustdoc-hidden-line/verify.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2Fverify.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2Fverify.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-hidden-line%2Fverify.sh?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -3,6 +3,6 @@\n file=\"$1/doc/foo/fn.foo.html\"\n \n grep -v 'invisible' $file &&\n-grep '#.*\\[.*deriving.*(.*Eq.*).*\\].*//.*Bar' $file\n+grep '#.*\\[.*derive.*(.*Eq.*).*\\].*//.*Bar' $file\n \n exit $?"}, {"sha": "0f5e2cb3b6b460322c0f1570cf807c7c93ad39dc", "filename": "src/test/run-pass-fulldeps/macro-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmacro-crate.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -17,7 +17,7 @@\n extern crate macro_crate_test;\n \n #[into_foo]\n-#[deriving(PartialEq, Clone, Show)]\n+#[derive(PartialEq, Clone, Show)]\n fn foo() -> AFakeTypeThatHadBetterGoAway {}\n \n pub fn main() {"}, {"sha": "e76c379177b9962dec61dfa1028c2ebe95d4180f", "filename": "src/test/run-pass-fulldeps/quote-tokens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fquote-tokens.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -33,7 +33,7 @@ fn syntax_extension(cx: &ExtCtxt) {\n     let _g: P<syntax::ast::Expr> = quote_expr!(cx, true);\n     let _h: P<syntax::ast::Expr> = quote_expr!(cx, 'a');\n \n-    let i: Option<P<syntax::ast::Item>> = quote_item!(cx, #[deriving(Eq)] struct Foo; );\n+    let i: Option<P<syntax::ast::Item>> = quote_item!(cx, #[derive(Eq)] struct Foo; );\n     assert!(i.is_some());\n \n     let _j: P<syntax::ast::Method> = quote_method!(cx, fn foo(&self) {});"}, {"sha": "3da245efd79a81165fd5409c8c74160bc39c3f33", "filename": "src/test/run-pass/assert-eq-macro-success.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassert-eq-macro-success.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct Point { x : int }\n \n pub fn main() {"}, {"sha": "24df95ffd3cb6ffa810ebef96959d9ef759b5b68", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -41,7 +41,7 @@ fn test_rbml<'a, 'b, A:\n     assert!(*a1 == a2);\n }\n \n-#[deriving(Decodable, Encodable)]\n+#[derive(Decodable, Encodable)]\n enum Expr {\n     Val(uint),\n     Plus(@Expr, @Expr),\n@@ -108,26 +108,26 @@ impl cmp::Eq for CLike {\n     fn ne(&self, other: &CLike) -> bool { !self.eq(other) }\n }\n \n-#[deriving(Decodable, Encodable, Eq)]\n+#[derive(Decodable, Encodable, Eq)]\n struct Spanned<T> {\n     lo: uint,\n     hi: uint,\n     node: T,\n }\n \n-#[deriving(Decodable, Encodable)]\n+#[derive(Decodable, Encodable)]\n struct SomeStruct { v: Vec<uint> }\n \n-#[deriving(Decodable, Encodable)]\n+#[derive(Decodable, Encodable)]\n struct Point {x: uint, y: uint}\n \n-#[deriving(Decodable, Encodable)]\n+#[derive(Decodable, Encodable)]\n enum Quark<T> {\n     Top(T),\n     Bottom(T)\n }\n \n-#[deriving(Decodable, Encodable)]\n+#[derive(Decodable, Encodable)]\n enum CLike { A, B, C }\n \n pub fn main() {"}, {"sha": "3c1e1f765803bb87071020231f215f520c22a68e", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct Pair<T, U> { a: T, b: U }\n struct Triple { x: int, y: int, z: int }\n "}, {"sha": "dc92910c927a0f6c459440c9daddde8523089f04", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -59,7 +59,7 @@ fn test_ptr() {\n     }\n }\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct p {\n   x: int,\n   y: int,"}, {"sha": "176c7277efddc8c4c14ae09161e42677701002e2", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,7 +10,7 @@\n \n use std::mem::swap;\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct Ints {sum: Box<int>, values: Vec<int> }\n \n fn add_int(x: &mut Ints, v: int) {"}, {"sha": "efea4ffe9be43ae3dd7ae5b92391b898c0c96a5a", "filename": "src/test/run-pass/builtin-superkinds-capabilities-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -17,7 +17,7 @@\n extern crate trait_superkinds_in_metadata;\n use trait_superkinds_in_metadata::{RequiresRequiresShareAndSend, RequiresShare};\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n struct X<T>(T);\n \n impl <T: Sync> RequiresShare for X<T> { }"}, {"sha": "ecbbb3199b9afe9283bafb5254a22feca05d75cf", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -47,7 +47,7 @@ fn dog() -> dog {\n     }\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct cat {\n   meows: uint,\n "}, {"sha": "629cf7c4ef77b344ee36e56dcee19ae32267b136", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -11,7 +11,7 @@\n \n use std::cmp;\n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum cat_type { tuxedo, tabby, tortoiseshell }\n \n impl Copy for cat_type {}"}, {"sha": "cf08cd2709d56c44649e979b34eccc71cf401879", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -13,7 +13,7 @@ trait noisy {\n     fn speak(&mut self);\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct cat {\n     meows : uint,\n "}, {"sha": "413717d9226ba535ec1ad1518fad8f248bee1cd5", "filename": "src/test/run-pass/coerce-to-closure-and-proc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fcoerce-to-closure-and-proc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fcoerce-to-closure-and-proc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-to-closure-and-proc.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -14,10 +14,10 @@ fn id<T>(x: T) -> T {\n     x\n }\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct Foo<T>(T);\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n enum Bar<T> {\n     Baz(T)\n }"}, {"sha": "99c475b72072ec102f8175371a473f2cdf2e51e3", "filename": "src/test/run-pass/coherence-where-clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fcoherence-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fcoherence-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-where-clause.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -23,7 +23,7 @@ impl<T> MyTrait for T\n     }\n }\n \n-#[deriving(Clone,Show,PartialEq)]\n+#[derive(Clone,Show,PartialEq)]\n struct MyType {\n     dummy: uint\n }"}, {"sha": "b2073a8ff28cfb8e4903e6a6b0f9dcb5e0e6ac89", "filename": "src/test/run-pass/const-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,7 +10,7 @@\n \n use std::cmp;\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct foo { a: int, b: int, c: int }\n \n impl cmp::PartialEq for foo {"}, {"sha": "6869a60838c09e695b71fb4696414196161f4e5b", "filename": "src/test/run-pass/deriving-bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-bounds.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n struct Test;\n \n pub fn main() {}"}, {"sha": "ce34852a917a6053cc6a8436516bc2b33b113ed8", "filename": "src/test/run-pass/deriving-clone-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-clone-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-clone-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-enum.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum E {\n     A,\n     B(()),"}, {"sha": "e8e65dcb8a9e8264945abcd8a2b895f886cfeac2", "filename": "src/test/run-pass/deriving-clone-generic-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-enum.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum E<T,U> {\n     A(T),\n     B(T,U),"}, {"sha": "d340fe9d3fbee6142127bac4e51dce5d53ae33a4", "filename": "src/test/run-pass/deriving-clone-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct S<T> {\n     foo: (),\n     bar: (),"}, {"sha": "ecf1fdc6e5fbff60fb191eca2bbb22ef64dfdf73", "filename": "src/test/run-pass/deriving-clone-generic-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-generic-tuple-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct S<T>(T, ());\n \n pub fn main() {"}, {"sha": "51e615b37021a96841685edee6f93c8553a5b2b3", "filename": "src/test/run-pass/deriving-clone-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct S {\n     _int: int,\n     _i8: i8,"}, {"sha": "e2784c26dbbaea4e526e936766034aa018dbeaf7", "filename": "src/test/run-pass/deriving-clone-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-clone-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-clone-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-clone-tuple-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct S((), ());\n \n pub fn main() {}"}, {"sha": "04cb3b7c07647d134b63e4197b1a8ff86acadb9f", "filename": "src/test/run-pass/deriving-cmp-generic-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-enum.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,7 +10,7 @@\n \n // no-pretty-expanded FIXME #15189\n \n-#[deriving(PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(PartialEq, Eq, PartialOrd, Ord)]\n enum E<T> {\n     E0,\n     E1(T),"}, {"sha": "dbac7fa5bcae6707a57aa4fd7150a1905e45321f", "filename": "src/test/run-pass/deriving-cmp-generic-struct-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct-enum.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,7 +10,7 @@\n \n // no-pretty-expanded FIXME #15189\n \n-#[deriving(PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(PartialEq, Eq, PartialOrd, Ord)]\n enum ES<T> {\n     ES1 { x: T },\n     ES2 { x: T, y: T }"}, {"sha": "cd2cbb2d0a9192eb9c4a8b34a65e7ba6b99f4dbb", "filename": "src/test/run-pass/deriving-cmp-generic-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,7 +10,7 @@\n \n // no-pretty-expanded FIXME #15189\n \n-#[deriving(PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(PartialEq, Eq, PartialOrd, Ord)]\n struct S<T> {\n     x: T,\n     y: T"}, {"sha": "0a45b73755eacb910d2f8a953cd07f55bd637b0c", "filename": "src/test/run-pass/deriving-cmp-generic-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-generic-tuple-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,7 +10,7 @@\n \n // no-pretty-expanded FIXME #15189\n \n-#[deriving(PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(PartialEq, Eq, PartialOrd, Ord)]\n struct TS<T>(T,T);\n \n "}, {"sha": "0a139667c0e4904ff3d00d0bd2e3c08ebb44c8ac", "filename": "src/test/run-pass/deriving-cmp-shortcircuit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-cmp-shortcircuit.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -27,7 +27,7 @@ impl Ord for FailCmp {\n     fn cmp(&self, _: &FailCmp) -> Ordering { panic!(\"cmp\") }\n }\n \n-#[deriving(PartialEq,PartialOrd,Eq,Ord)]\n+#[derive(PartialEq,PartialOrd,Eq,Ord)]\n struct ShortCircuit {\n     x: int,\n     y: FailCmp"}, {"sha": "aea6ebd25975c2c93e85661b0aeb2c95eef01127", "filename": "src/test/run-pass/deriving-default-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-default-box.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,7 +10,7 @@\n \n use std::default::Default;\n \n-#[deriving(Default)]\n+#[derive(Default)]\n struct A {\n     foo: Box<[bool]>,\n }"}, {"sha": "b0c5d88c48e177fe3eea8ceec82be603340e4bb6", "filename": "src/test/run-pass/deriving-encodable-decodable-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-box.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -13,7 +13,7 @@ extern crate serialize;\n use serialize::{Encodable, Decodable};\n use serialize::json;\n \n-#[deriving(Encodable, Decodable)]\n+#[derive(Encodable, Decodable)]\n struct A {\n     foo: Box<[bool]>,\n }"}, {"sha": "1176cc303b7a74062014bf8e4bab9ce3b34cfb8d", "filename": "src/test/run-pass/deriving-encodable-decodable-cell-refcell.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -9,20 +9,20 @@\n // except according to those terms.\n \n // This briefly tests the capability of `Cell` and `RefCell` to implement the\n-// `Encodable` and `Decodable` traits via `#[deriving(Encodable, Decodable)]`\n+// `Encodable` and `Decodable` traits via `#[derive(Encodable, Decodable)]`\n \n extern crate serialize;\n \n use std::cell::{Cell, RefCell};\n use serialize::{Encodable, Decodable};\n use serialize::json;\n \n-#[deriving(Encodable, Decodable)]\n+#[derive(Encodable, Decodable)]\n struct A {\n     baz: int\n }\n \n-#[deriving(Encodable, Decodable)]\n+#[derive(Encodable, Decodable)]\n struct B {\n     foo: Cell<bool>,\n     bar: RefCell<A>,"}, {"sha": "2466d0adf7bc305fc2ac2e0d9fdc3e9539a6c2f7", "filename": "src/test/run-pass/deriving-encodable-decodable.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -24,31 +24,31 @@ use rbml::writer::Encoder;\n use rbml::reader::Decoder;\n use serialize::{Encodable, Decodable};\n \n-#[deriving(Encodable, Decodable, Eq, Rand)]\n+#[derive(Encodable, Decodable, Eq, Rand)]\n struct A;\n-#[deriving(Encodable, Decodable, Eq, Rand)]\n+#[derive(Encodable, Decodable, Eq, Rand)]\n struct B(int);\n-#[deriving(Encodable, Decodable, Eq, Rand)]\n+#[derive(Encodable, Decodable, Eq, Rand)]\n struct C(int, int, uint);\n \n-#[deriving(Encodable, Decodable, Eq, Rand)]\n+#[derive(Encodable, Decodable, Eq, Rand)]\n struct D {\n     a: int,\n     b: uint,\n }\n \n-#[deriving(Encodable, Decodable, Eq, Rand)]\n+#[derive(Encodable, Decodable, Eq, Rand)]\n enum E {\n     E1,\n     E2(uint),\n     E3(D),\n     E4{ x: uint },\n }\n \n-#[deriving(Encodable, Decodable, Eq, Rand)]\n+#[derive(Encodable, Decodable, Eq, Rand)]\n enum F { F1 }\n \n-#[deriving(Encodable, Decodable, Eq, Rand)]\n+#[derive(Encodable, Decodable, Eq, Rand)]\n struct G<T> {\n     t: T\n }"}, {"sha": "7ce7c5fd411055c5cff05fac663197491eb42d99", "filename": "src/test/run-pass/deriving-enum-single-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-enum-single-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-enum-single-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-enum-single-variant.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,7 +10,7 @@\n \n pub type task_id = int;\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n pub enum Task {\n     TaskHandle(task_id)\n }"}, {"sha": "6701a321339382f4a503e351a8aa0e553711222f", "filename": "src/test/run-pass/deriving-eq-ord-boxed-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-eq-ord-boxed-slice.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(PartialEq, PartialOrd, Eq, Ord)]\n+#[derive(PartialEq, PartialOrd, Eq, Ord)]\n struct Foo(Box<[u8]>);\n \n pub fn main() {"}, {"sha": "80a6829986d0093051d0fe3d15c7e52d0595e452", "filename": "src/test/run-pass/deriving-global.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-global.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-global.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -15,21 +15,21 @@ mod submod {\n     // if any of these are implemented without global calls for any\n     // function calls, then being in a submodule will (correctly)\n     // cause errors about unrecognised module `std` (or `extra`)\n-    #[deriving(PartialEq, PartialOrd, Eq, Ord,\n+    #[derive(PartialEq, PartialOrd, Eq, Ord,\n                Hash,\n                Clone,\n                Show, Rand,\n                Encodable, Decodable)]\n     enum A { A1(uint), A2(int) }\n \n-    #[deriving(PartialEq, PartialOrd, Eq, Ord,\n+    #[derive(PartialEq, PartialOrd, Eq, Ord,\n                Hash,\n                Clone,\n                Show, Rand,\n                Encodable, Decodable)]\n     struct B { x: uint, y: int }\n \n-    #[deriving(PartialEq, PartialOrd, Eq, Ord,\n+    #[derive(PartialEq, PartialOrd, Eq, Ord,\n                Hash,\n                Clone,\n                Show, Rand,"}, {"sha": "ddad703d7dfdb62121f24fbf769b5d7f0489d9fa", "filename": "src/test/run-pass/deriving-hash.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-hash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-hash.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,7 +12,7 @@\n use std::hash;\n use std::hash::Hash;\n \n-#[deriving(Hash)]\n+#[derive(Hash)]\n struct Person {\n     id: uint,\n     name: String,"}, {"sha": "d191bad10ea66a1a3db248ee22ecaa7e7cb29af1", "filename": "src/test/run-pass/deriving-in-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-in-fn.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub fn main() {\n-    #[deriving(Show)]\n+    #[derive(Show)]\n     struct Foo {\n         foo: int,\n     }"}, {"sha": "97f6ee341a71f7b4a0506d29703f79d0a4188e8a", "filename": "src/test/run-pass/deriving-in-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-in-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-in-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-in-macro.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -13,7 +13,7 @@\n macro_rules! define_vec (\n     () => (\n         mod foo {\n-            #[deriving(PartialEq)]\n+            #[derive(PartialEq)]\n             pub struct bar;\n         }\n     )"}, {"sha": "5b55ef633353495021f941a21e57b5b3cb98979d", "filename": "src/test/run-pass/deriving-meta-empty-trait-list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-meta-empty-trait-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-meta-empty-trait-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-meta-empty-trait-list.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -11,10 +11,10 @@\n // except according to those terms.\n \n \n-#[deriving]   //~ WARNING empty trait list in `deriving`\n+#[derive]   //~ WARNING empty trait list in `derive`\n struct Foo;\n \n-#[deriving()] //~ WARNING empty trait list in `deriving`\n+#[derive()] //~ WARNING empty trait list in `derive`\n struct Bar;\n \n pub fn main() {}"}, {"sha": "c435a1f344d3da0ad136ca7b4e03b8cb2d3bf48f", "filename": "src/test/run-pass/deriving-meta-multiple.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-meta-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-meta-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-meta-multiple.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,9 +12,9 @@\n use std::hash::hash;\n \n // testing multiple separate deriving attributes\n-#[deriving(PartialEq)]\n-#[deriving(Clone)]\n-#[deriving(Hash)]\n+#[derive(PartialEq)]\n+#[derive(Clone)]\n+#[derive(Hash)]\n struct Foo {\n     bar: uint,\n     baz: int"}, {"sha": "54dc2b97b77f3bc798276985f3b60cbde508dc5a", "filename": "src/test/run-pass/deriving-meta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-meta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-meta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-meta.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -11,7 +11,7 @@\n \n use std::hash::hash;\n \n-#[deriving(PartialEq, Clone, Hash)]\n+#[derive(PartialEq, Clone, Hash)]\n struct Foo {\n     bar: uint,\n     baz: int"}, {"sha": "7ea9f6f19a08ada1cae39b9e56ba3399a6408d0c", "filename": "src/test/run-pass/deriving-primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-primitive.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -11,7 +11,7 @@\n use std::num::FromPrimitive;\n use std::int;\n \n-#[deriving(PartialEq, FromPrimitive, Show)]\n+#[derive(PartialEq, FromPrimitive, Show)]\n enum A {\n     Foo = int::MAX,\n     Bar = 1,"}, {"sha": "f1396efedfe12b53499ba2df5072a16cd385e36d", "filename": "src/test/run-pass/deriving-rand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-rand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-rand.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,19 +10,19 @@\n \n use std::rand;\n \n-#[deriving(Rand)]\n+#[derive(Rand)]\n struct A;\n \n-#[deriving(Rand)]\n+#[derive(Rand)]\n struct B(int, int);\n \n-#[deriving(Rand)]\n+#[derive(Rand)]\n struct C {\n     x: f64,\n     y: (u8, u8)\n }\n \n-#[deriving(Rand)]\n+#[derive(Rand)]\n enum D {\n     D0,\n     D1(uint),"}, {"sha": "3277435e485b1fbef8f03d9b94d07a93d8592d1f", "filename": "src/test/run-pass/deriving-self-lifetime-totalord-totaleq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime-totalord-totaleq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime-totalord-totaleq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime-totalord-totaleq.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,7 +12,7 @@\n \n use std::cmp::Ordering::{Less,Equal,Greater};\n \n-#[deriving(Eq,Ord)]\n+#[derive(Eq,Ord)]\n struct A<'a> {\n     x: &'a int\n }"}, {"sha": "44609b6d653ca5d710c74f1e24c95cc5fec6b11c", "filename": "src/test/run-pass/deriving-self-lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-self-lifetime.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-test FIXME #11820: & is unreliable in deriving\n \n-#[deriving(Eq,Ord)]\n+#[derive(Eq,Ord)]\n struct A<'a> {\n     x: &'a int\n }"}, {"sha": "58faab7bfbe529c0b65dbd17de581387ffe7669c", "filename": "src/test/run-pass/deriving-show-2.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-show-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-show-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-show-2.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,25 +10,25 @@\n \n use std::fmt;\n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum A {}\n-#[deriving(Show)]\n+#[derive(Show)]\n enum B { B1, B2, B3 }\n-#[deriving(Show)]\n+#[derive(Show)]\n enum C { C1(int), C2(B), C3(String) }\n-#[deriving(Show)]\n+#[derive(Show)]\n enum D { D1{ a: int } }\n-#[deriving(Show)]\n+#[derive(Show)]\n struct E;\n-#[deriving(Show)]\n+#[derive(Show)]\n struct F(int);\n-#[deriving(Show)]\n+#[derive(Show)]\n struct G(int, int);\n-#[deriving(Show)]\n+#[derive(Show)]\n struct H { a: int }\n-#[deriving(Show)]\n+#[derive(Show)]\n struct I { a: int, b: int }\n-#[deriving(Show)]\n+#[derive(Show)]\n struct J(Custom);\n \n struct Custom;"}, {"sha": "f619c824d5e68d805e06d49b062a33514f795ee6", "filename": "src/test/run-pass/deriving-show.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-show.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-show.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-show.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,16 +10,16 @@\n \n #![feature(macro_rules)]\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct Unit;\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct Tuple(int, uint);\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct Struct { x: int, y: uint }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum Enum {\n     Nullary,\n     Variant(int, uint),"}, {"sha": "d6594290b23e9433d3eb67e0cc97e03e3a4e82b5", "filename": "src/test/run-pass/deriving-via-extension-c-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-via-extension-c-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-via-extension-c-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-c-enum.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n enum Foo {\n     Bar,\n     Baz,"}, {"sha": "5d009655fce01b5abc21821fbc7d0f6a0872616e", "filename": "src/test/run-pass/deriving-via-extension-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-via-extension-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-via-extension-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-enum.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n enum Foo {\n     Bar(int, int),\n     Baz(f64, f64)"}, {"sha": "10bd1b29444d2c1f73de5cfe249db485fe2003f1", "filename": "src/test/run-pass/deriving-via-extension-hash-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-via-extension-hash-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-via-extension-hash-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-hash-enum.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -9,13 +9,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Hash)]\n+#[derive(Hash)]\n enum Foo {\n     Bar(int, char),\n     Baz(char, int)\n }\n \n-#[deriving(Hash)]\n+#[derive(Hash)]\n enum A {\n     B,\n     C,"}, {"sha": "19809def9a10d5fc0d941b3d4334e822db7def4b", "filename": "src/test/run-pass/deriving-via-extension-hash-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-via-extension-hash-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-via-extension-hash-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-hash-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -9,7 +9,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Hash)]\n+#[derive(Hash)]\n struct Foo {\n     x: int,\n     y: int,"}, {"sha": "d3c1c468f7cfb204425565cc85f21f140d461b05", "filename": "src/test/run-pass/deriving-via-extension-struct-empty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-empty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-empty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-empty.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct Foo;\n \n pub fn main() {"}, {"sha": "5e60818731b2a38b3fbd999ef17a38a01c46043a", "filename": "src/test/run-pass/deriving-via-extension-struct-like-enum-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n enum S {\n     X { x: int, y: int },\n     Y"}, {"sha": "a8a06244b208062f722371c08942180efaeb4142", "filename": "src/test/run-pass/deriving-via-extension-struct-tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-tuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-tuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-tuple.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct Foo(int, int, String);\n \n pub fn main() {"}, {"sha": "86a0ec15c838306d94988fdbfb0262d0eaaed2d8", "filename": "src/test/run-pass/deriving-via-extension-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct Foo {\n     x: int,\n     y: int,"}, {"sha": "266c51d1b66721f5759f75970aa67e76c5fdd3f7", "filename": "src/test/run-pass/deriving-via-extension-type-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-via-extension-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-via-extension-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-type-params.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -9,7 +9,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(PartialEq, Hash, Show)]\n+#[derive(PartialEq, Hash, Show)]\n struct Foo<T> {\n     x: int,\n     y: T,"}, {"sha": "71f0acea0bf8c45c7ac99fad6a4977b0c8690f2b", "filename": "src/test/run-pass/deriving-zero.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fderiving-zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-zero.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -11,7 +11,7 @@\n \n use std::num::Zero;\n \n-#[deriving(Zero)]\n+#[derive(Zero)]\n struct Vector2<T>(T, T);\n \n impl<T: Add<T, T>> Add<Vector2<T>, Vector2<T>> for Vector2<T> {\n@@ -24,7 +24,7 @@ impl<T: Add<T, T>> Add<Vector2<T>, Vector2<T>> for Vector2<T> {\n     }\n }\n \n-#[deriving(Zero)]\n+#[derive(Zero)]\n struct Vector3<T> {\n     x: T, y: T, z: T,\n }\n@@ -39,7 +39,7 @@ impl<T: Add<T, T>> Add<Vector3<T>, Vector3<T>> for Vector3<T> {\n     }\n }\n \n-#[deriving(Zero)]\n+#[derive(Zero)]\n struct Matrix3x2<T> {\n     x: Vector2<T>,\n     y: Vector2<T>,"}, {"sha": "16ad2b8e21a00f2e58fa8d52873ef1ca7a291eb5", "filename": "src/test/run-pass/drop-trait-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-enum.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,7 +10,7 @@\n \n use std::task;\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n enum Message {\n     Dropped,\n     DestructorRan"}, {"sha": "c7f37da157f4c893ca44fbd18056fc38891d91bf", "filename": "src/test/run-pass/dst-struct-sole.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct-sole.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -30,7 +30,7 @@ fn foo2<T:ToBar>(x: &Fat<[T]>) {\n     assert!(x.ptr[1].to_bar() == bar);\n }\n \n-#[deriving(PartialEq,Eq)]\n+#[derive(PartialEq,Eq)]\n struct Bar;\n \n impl Copy for Bar {}"}, {"sha": "9c0e5a6f5c89999177c8d4a4341986680a47c1e6", "filename": "src/test/run-pass/dst-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fdst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -46,7 +46,7 @@ fn foo3(x: &Fat<Fat<[int]>>) {\n }\n \n \n-#[deriving(PartialEq,Eq)]\n+#[derive(PartialEq,Eq)]\n struct Bar;\n \n impl Copy for Bar {}"}, {"sha": "0b50609fddfef481265da80697cc735db5703406", "filename": "src/test/run-pass/dst-trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fdst-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-trait.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -14,12 +14,12 @@ struct Fat<T: ?Sized> {\n     ptr: T\n }\n \n-#[deriving(PartialEq,Eq)]\n+#[derive(PartialEq,Eq)]\n struct Bar;\n \n impl Copy for Bar {}\n \n-#[deriving(PartialEq,Eq)]\n+#[derive(PartialEq,Eq)]\n struct Bar1 {\n     f: int\n }"}, {"sha": "58eb4ce2f7a559a4814c0247980937afed6a59cb", "filename": "src/test/run-pass/empty-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-tag.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum chan { chan_t, }\n \n impl Copy for chan {}"}, {"sha": "73abec89a2df9cebedc408d01b93e5702ccb2dda", "filename": "src/test/run-pass/enum-discrim-width-stuff.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-discrim-width-stuff.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -14,7 +14,7 @@ macro_rules! check {\n     ($m:ident, $t:ty, $v:expr) => {{\n         mod $m {\n             use std::mem::size_of;\n-            #[deriving(Show)]\n+            #[derive(Show)]\n             enum E {\n                 V = $v,\n                 A = 0"}, {"sha": "31ed212db999c7eb832c8eb6cbab94d1d9f128ca", "filename": "src/test/run-pass/eq-multidispatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Feq-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Feq-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Feq-multidispatch.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(default_type_params)]\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n struct Bar;\n struct Baz;\n struct Foo;"}, {"sha": "8a67e40844a731cec9c9c4c9b02a2857d2866daa", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -40,12 +40,12 @@ fn select_based_on_unit_circle<'r, T>(\n     shape.select(threshold, a, b)\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct thing {\n     x: A\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct A {\n     a: int\n }"}, {"sha": "f1363c42961e1d5d83045e1570273f36a8a9890d", "filename": "src/test/run-pass/expr-block-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-block-generic.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -23,7 +23,7 @@ fn test_bool() {\n     test_generic::<bool>(true, compare_bool);\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct Pair {\n     a: int,\n     b: int,"}, {"sha": "d9300d0bc335aec9767dd9f1fd0304d4c882ea84", "filename": "src/test/run-pass/expr-if-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-generic.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -22,7 +22,7 @@ fn test_bool() {\n     test_generic::<bool>(true, false, compare_bool);\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct Pair {\n     a: int,\n     b: int,"}, {"sha": "62994068a9e14c9b9127a6f64004d6145614f11a", "filename": "src/test/run-pass/expr-if-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-if-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -23,7 +23,7 @@ fn test_rec() {\n     assert_eq!(rs.i, 100);\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum mood { happy, sad, }\n \n impl Copy for mood {}"}, {"sha": "8e66827e0198f252528d7ee45e8d06ec394b2705", "filename": "src/test/run-pass/expr-match-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fexpr-match-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fexpr-match-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-generic.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -21,7 +21,7 @@ fn test_bool() {\n     test_generic::<bool>(true, compare_bool);\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct Pair {\n     a: int,\n     b: int,"}, {"sha": "8512cf63cddddef7927f4fc5c8fd07f2e935a304", "filename": "src/test/run-pass/expr-match-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-match-struct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -22,7 +22,7 @@ fn test_rec() {\n     assert_eq!(rs.i, 100);\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum mood { happy, sad, }\n \n impl Copy for mood {}"}, {"sha": "a38fe6d6d5059cb99e16813a5a4746d764970d1e", "filename": "src/test/run-pass/extern-pass-TwoU16s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU16s.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -11,7 +11,7 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n pub struct TwoU16s {\n     one: u16, two: u16\n }"}, {"sha": "30b035d56b6591fd86b15b37e4580a4c92a86b7f", "filename": "src/test/run-pass/extern-pass-TwoU32s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU32s.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -11,7 +11,7 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n pub struct TwoU32s {\n     one: u32, two: u32\n }"}, {"sha": "8ca05f09a9c9ae613fd74bbd57265b13315d92fa", "filename": "src/test/run-pass/extern-pass-TwoU64s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU64s.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -11,7 +11,7 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n pub struct TwoU64s {\n     one: u64, two: u64\n }"}, {"sha": "42a1ce788707ebb392fdfce8c13f6cbc121feba0", "filename": "src/test/run-pass/extern-pass-TwoU8s.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern-pass-TwoU8s.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -11,7 +11,7 @@\n // Test a foreign function that accepts and returns a struct\n // by value.\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n pub struct TwoU8s {\n     one: u8, two: u8\n }"}, {"sha": "e2297661d65c1b5907034f63502e412fe7579289", "filename": "src/test/run-pass/functional-struct-upd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ffunctional-struct-upd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ffunctional-struct-upd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffunctional-struct-upd.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct Foo {\n     x: int,\n     y: int"}, {"sha": "e88801f14ed4839fa2015757324139f91d19916f", "filename": "src/test/run-pass/generic-default-type-params.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -49,10 +49,10 @@ fn default_foo(x: Foo) {\n     assert_eq!(x.baz(), (1, 'a'));\n }\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct BazHelper<T>(T);\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n // Ensure that we can use previous type parameters in defaults.\n struct Baz<T, U = BazHelper<T>, V = Option<U>>(T, U, V);\n "}, {"sha": "0db03b46748798f4d7d7f00aad3aac9ca1ab112a", "filename": "src/test/run-pass/generic-derived-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-derived-type.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,7 +10,7 @@\n \n fn g<X>(x: X) -> X { return x; }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct Pair<T> {\n     a: T,\n     b: T"}, {"sha": "0616a7b21b546d94af2217a355fc896d593b2fb7", "filename": "src/test/run-pass/hrtb-opt-in-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhrtb-opt-in-copy.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -20,7 +20,7 @@\n \n use std::kinds::marker;\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n struct Foo<T> { x: T }\n \n type Ty<'tcx> = &'tcx TyS<'tcx>;"}, {"sha": "ea311e6e32c65ede88046e07e1a20c33984aedc4", "filename": "src/test/run-pass/issue-10396.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-10396.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-10396.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10396.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum Foo<'s> {\n     V(&'s str)\n }"}, {"sha": "92862961acaba6cfb4b286d503e0228c2082ba77", "filename": "src/test/run-pass/issue-11552.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-11552.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-11552.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11552.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum Noun\n {\n     Atom(int),"}, {"sha": "9008e8468f46f73cadf5b56b4e24433665691bd0", "filename": "src/test/run-pass/issue-11881.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-11881.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11881.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -21,12 +21,12 @@ use serialize::json;\n use rbml::writer;\n use rbml::io::SeekableMemWriter;\n \n-#[deriving(Encodable)]\n+#[derive(Encodable)]\n struct Foo {\n     baz: bool,\n }\n \n-#[deriving(Encodable)]\n+#[derive(Encodable)]\n struct Bar {\n     froboz: uint,\n }"}, {"sha": "8a95723c7358fb88f031be2628a9b8f18f9fd68c", "filename": "src/test/run-pass/issue-12860.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-12860.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-12860.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-12860.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -13,7 +13,7 @@ extern crate collections;\n \n use std::collections::HashSet;\n \n-#[deriving(PartialEq, Eq, Hash)]\n+#[derive(PartialEq, Eq, Hash)]\n struct XYZ {\n     x: int,\n     y: int,"}, {"sha": "c416d30f776bc9c8dc3dea6a379e21fa36ab57a4", "filename": "src/test/run-pass/issue-13264.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-13264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-13264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13264.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -18,7 +18,7 @@ impl Deref<JSRef> for Root {\n     }\n }\n \n-#[deriving(Copy)]\n+#[derive(Copy)]\n struct JSRef {\n     node: *const Node\n }"}, {"sha": "e223feede02e6cb10fbe680c84a1a83741f57ced", "filename": "src/test/run-pass/issue-13434.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-13434.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-13434.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13434.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct MyStruct;\n \n trait Repro {"}, {"sha": "612ed6b70b448cf77c26f8ed738152b3210911f3", "filename": "src/test/run-pass/issue-14021.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-14021.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-14021.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14021.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -14,7 +14,7 @@ extern crate serialize;\n use serialize::{Encodable, Decodable};\n use serialize::json;\n \n-#[deriving(Encodable, Decodable, PartialEq, Show)]\n+#[derive(Encodable, Decodable, PartialEq, Show)]\n struct UnitLikeStruct;\n \n pub fn main() {"}, {"sha": "bb0fe6a87ab07855f7f6eb31da54d1e184b59ce7", "filename": "src/test/run-pass/issue-14399.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-14399.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-14399.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14399.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -13,7 +13,7 @@\n // value was coerced to a trait object. (v.clone() returns Box<B1>\n // which is coerced to Box<A>).\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct B1;\n \n trait A {}"}, {"sha": "06e9e652ed25bfc06c3ed1f2a7e4c8f5df74d1e6", "filename": "src/test/run-pass/issue-15689-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-15689-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-15689-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15689-1.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n enum Test<'a> {\n     Slice(&'a int)\n }"}, {"sha": "8da82c498b0b7d1eba2f76eb55e570fe94267012", "filename": "src/test/run-pass/issue-15689-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-15689-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-15689-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15689-2.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum Test<'a> {\n     Slice(&'a int)\n }"}, {"sha": "48fdcb09080ae8de30eab8277b43902f009a4c9e", "filename": "src/test/run-pass/issue-15763.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-15763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15763.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct Bar {\n     x: int\n }\n@@ -19,7 +19,7 @@ impl Drop for Bar {\n     }\n }\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct Foo {\n     x: Bar,\n     a: int"}, {"sha": "30ad827c697230d76fdcc2669839bc26240f70fc", "filename": "src/test/run-pass/issue-18738.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-18738.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-18738.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18738.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,18 +8,18 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Eq, PartialEq, PartialOrd, Ord)]\n+#[derive(Eq, PartialEq, PartialOrd, Ord)]\n enum Test<'a> {\n     Int(&'a int),\n     Slice(&'a [u8]),\n }\n \n-#[deriving(Eq, PartialEq, PartialOrd, Ord)]\n+#[derive(Eq, PartialEq, PartialOrd, Ord)]\n struct Version {\n     vendor_info: &'static str\n }\n \n-#[deriving(Eq, PartialEq, PartialOrd, Ord)]\n+#[derive(Eq, PartialEq, PartialOrd, Ord)]\n struct Foo(&'static str);\n \n fn main() {}"}, {"sha": "ac181c8db7185d02f53148c0aae27d33b50ffdb0", "filename": "src/test/run-pass/issue-19037.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-19037.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-19037.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19037.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,7 +10,7 @@\n \n struct Str([u8]);\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct CharSplits<'a, Sep> {\n     string: &'a Str,\n     sep: Sep,"}, {"sha": "b9d0a9a2988f4b50790de346992e959e26523281", "filename": "src/test/run-pass/issue-19135.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-19135.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-19135.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19135.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,7 +10,7 @@\n \n #![feature(unboxed_closures)]\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct LifetimeStruct<'a>;\n \n fn main() {"}, {"sha": "86687fccd61fce377458c7979b75c71ba1108bf5", "filename": "src/test/run-pass/issue-19358.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-19358.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-19358.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19358.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,12 +10,12 @@\n \n trait Trait {}\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct Foo<T: Trait> {\n     foo: T,\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct Bar<T> where T: Trait {\n     bar: T,\n }"}, {"sha": "2a4ca5b421056ff952c50a2c19887b152f59bb39", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -31,7 +31,7 @@ pub mod pipes {\n         payload: Option<T>\n     }\n \n-    #[deriving(PartialEq, Show)]\n+    #[derive(PartialEq, Show)]\n     #[repr(int)]\n     pub enum state {\n         empty,"}, {"sha": "ab2d1d90093487394fe5b8584bcc9caac2c0de24", "filename": "src/test/run-pass/issue-2804.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-2804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2804.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -13,7 +13,7 @@ extern crate collections;\n extern crate serialize;\n \n use std::collections::HashMap;\n-use serialize::json::{mod, Json};\n+use serialize::json::{self, Json};\n use std::option;\n \n enum object {"}, {"sha": "e004c24da136886aad88a57c9b9af760db6b1aa4", "filename": "src/test/run-pass/issue-3556.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-3556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3556.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum Token {\n     Text(String),\n     ETag(Vec<String>, String),"}, {"sha": "4508bc5771cbdcf91764e5147a28abe7467555dd", "filename": "src/test/run-pass/issue-3794.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-3794.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3794.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,7 +12,7 @@ trait T {\n     fn print(&self);\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct S {\n     s: int,\n }"}, {"sha": "f534f744a20305f7aced7081dadf122daa14c4aa", "filename": "src/test/run-pass/issue-3935.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-3935.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-3935.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3935.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n struct Bike {\n     name: String,\n }"}, {"sha": "6ed35e6bc232f2611d8a5a8e91a4e8c1cc3e65d4", "filename": "src/test/run-pass/issue-4252.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-4252.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-4252.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-4252.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -17,10 +17,10 @@ trait X {\n     }\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct Y(int);\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct Z<T> {\n     x: T\n }"}, {"sha": "90900ca46ce01602598f723575279208c698b57f", "filename": "src/test/run-pass/issue-5008-borrowed-traitobject-method-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-5008-borrowed-traitobject-method-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-5008-borrowed-traitobject-method-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-5008-borrowed-traitobject-method-call.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -19,7 +19,7 @@ trait Debuggable {\n     fn debug_name(&self) -> String;\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct Thing {\n     name: String,\n }"}, {"sha": "6e49c0435665df0a693a9acc532cba6c93297279", "filename": "src/test/run-pass/issue-6341.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-6341.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-6341.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6341.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n struct A { x: uint }\n \n impl Drop for A {"}, {"sha": "4d217fbf3351e976086f9531e5fb4c73b270d82c", "filename": "src/test/run-pass/issue-7563.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-7563.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fissue-7563.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7563.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,9 +12,9 @@ trait IDummy {\n     fn do_nothing(&self);\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct A { a: int }\n-#[deriving(Show)]\n+#[derive(Show)]\n struct B<'a> { b: int, pa: &'a A }\n \n     impl IDummy for A {"}, {"sha": "bffa86a2c62e85914ab4e90bf82f83fff8a6d0b5", "filename": "src/test/run-pass/log-knows-the-names-of-variants-in-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants-in-std.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n enum foo {\n   a(uint),\n   b(String),"}, {"sha": "e40723ab1b6316098a79ca377fa1da1e8d8ad5a8", "filename": "src/test/run-pass/log-knows-the-names-of-variants.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-knows-the-names-of-variants.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,14 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum foo {\n   a(uint),\n   b(String),\n   c,\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum bar {\n   d, e, f\n }"}, {"sha": "163efcb1a2ba6cc28a13715be790f57a56b1621b", "filename": "src/test/run-pass/log-poly.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Flog-poly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Flog-poly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog-poly.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum Numbers {\n     Three\n }"}, {"sha": "84bffed59a49c545bda17875bb4fa2407f6aa387", "filename": "src/test/run-pass/monomorphize-abi-alignment.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmonomorphize-abi-alignment.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -28,12 +28,12 @@ impl<T> S<T> {\n     }\n }\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct A((u32, u32));\n \n impl Copy for A {}\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct B(u64);\n \n impl Copy for B {}"}, {"sha": "2da6076d13863f0d053092b9f0849dc900a9ae0f", "filename": "src/test/run-pass/move-1-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-1-unique.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct Triple {\n     x: int,\n     y: int,"}, {"sha": "2820e0d712056fff905533529c54c093ffb29cd0", "filename": "src/test/run-pass/move-3-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmove-3-unique.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct Triple {\n     x: int,\n     y: int,"}, {"sha": "74487f5b57d6be745bb378a4fbc8ebe4916c0232", "filename": "src/test/run-pass/newtype-polymorphic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-polymorphic.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct myvec<X>(Vec<X> );\n \n fn myvec_deref<X:Clone>(mv: myvec<X>) -> Vec<X> {"}, {"sha": "d2523eac31e04873f627075e612fa762fc34aaa8", "filename": "src/test/run-pass/newtype-temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fnewtype-temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fnewtype-temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnewtype-temporary.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct Foo(uint);\n \n fn foo() -> Foo {"}, {"sha": "2394822d9baeaaff2039957c14f246bfa808da80", "filename": "src/test/run-pass/operator-multidispatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -13,7 +13,7 @@\n \n use std::ops;\n \n-#[deriving(Show,PartialEq,Eq)]\n+#[derive(Show,PartialEq,Eq)]\n struct Point {\n     x: int,\n     y: int"}, {"sha": "101b93c1896f1a9b1399714d93a774f8f52452ce", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,7 +12,7 @@\n use std::cmp;\n use std::ops;\n \n-#[deriving(Copy, Show)]\n+#[derive(Copy, Show)]\n struct Point {\n     x: int,\n     y: int"}, {"sha": "baf1b1b023740f40ed6a49d922092be8624b090d", "filename": "src/test/run-pass/overloaded-autoderef-count.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -11,7 +11,7 @@\n use std::cell::Cell;\n use std::ops::{Deref, DerefMut};\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n struct DerefCounter<T> {\n     count_imm: Cell<uint>,\n     count_mut: uint,\n@@ -46,7 +46,7 @@ impl<T> DerefMut<T> for DerefCounter<T> {\n     }\n }\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct Point {\n     x: int,\n     y: int"}, {"sha": "344b27ef35f0b77c5ce2890a9bb44e407d8a17f0", "filename": "src/test/run-pass/overloaded-autoderef.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,7 +12,7 @@ use std::cell::RefCell;\n use std::rc::Rc;\n use std::string::String;\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct Point {\n     x: int,\n     y: int"}, {"sha": "1251394a549d64290d152ecdea4020145d28744d", "filename": "src/test/run-pass/overloaded-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-deref.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,7 +12,7 @@ use std::cell::RefCell;\n use std::rc::Rc;\n use std::string::String;\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct Point {\n     x: int,\n     y: int"}, {"sha": "0347f8a29df28b3e739f2917b39c592b7ceea16a", "filename": "src/test/run-pass/overloaded-index-assoc-list.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -16,7 +16,7 @@ use std::ops::Index;\n struct AssociationList<K,V> {\n     pairs: Vec<AssociationPair<K,V>> }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct AssociationPair<K,V> {\n     key: K,\n     value: V"}, {"sha": "8e5decf5e62e14a6dc39711a68fa2c592bdbf636", "filename": "src/test/run-pass/packed-struct-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpacked-struct-vec.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -13,7 +13,7 @@\n use std::mem;\n \n #[repr(packed)]\n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct Foo {\n     bar: u8,\n     baz: u64"}, {"sha": "b7e362a57aaebd2eca0a631871b48191e8bcbd97", "filename": "src/test/run-pass/rec-align-u32.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Frec-align-u32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u32.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -22,14 +22,14 @@ mod rusti {\n }\n \n // This is the type with the questionable alignment\n-#[deriving(Show)]\n+#[derive(Show)]\n struct Inner {\n     c64: u32\n }\n \n // This is the type that contains the type with the\n // questionable alignment, for testing\n-#[deriving(Show)]\n+#[derive(Show)]\n struct Outer {\n     c8: u8,\n     t: Inner"}, {"sha": "26ec5976f9b4839e8e5c4834d4fe9286960bfe9f", "filename": "src/test/run-pass/rec-align-u64.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Frec-align-u64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frec-align-u64.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -22,14 +22,14 @@ mod rusti {\n }\n \n // This is the type with the questionable alignment\n-#[deriving(Show)]\n+#[derive(Show)]\n struct Inner {\n     c64: u64\n }\n \n // This is the type that contains the type with the\n // questionable alignment, for testing\n-#[deriving(Show)]\n+#[derive(Show)]\n struct Outer {\n     c8: u8,\n     t: Inner"}, {"sha": "6e85011b14316203c2c6a4092033af2ca8d33639", "filename": "src/test/run-pass/regions-mock-tcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-mock-tcx.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -27,7 +27,7 @@ use std::mem;\n \n type Type<'tcx> = &'tcx TypeStructure<'tcx>;\n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum TypeStructure<'tcx> {\n     TypeInt,\n     TypeFunction(Type<'tcx>, Type<'tcx>),\n@@ -91,7 +91,7 @@ impl<'tcx,'ast> TypeContext<'tcx, 'ast> {\n     }\n }\n \n-#[deriving(PartialEq, Eq, Hash)]\n+#[derive(PartialEq, Eq, Hash)]\n struct NodeId {\n     id: uint\n }"}, {"sha": "a67b24f8b1e3f8e827fafffd2496dfa563159909", "filename": "src/test/run-pass/resource-assign-is-not-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fresource-assign-is-not-copy.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,7 +12,7 @@\n \n use std::cell::Cell;\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct r<'a> {\n     i: &'a Cell<int>,\n }"}, {"sha": "2273c399c9a52f28487eca494455d22c84583958", "filename": "src/test/run-pass/show-boxed-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fshow-boxed-slice.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct Foo(Box<[u8]>);\n \n pub fn main() {"}, {"sha": "247fa6453b831642fbee031d080fcbc1ba481239", "filename": "src/test/run-pass/small-enums-with-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fsmall-enums-with-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fsmall-enums-with-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsmall-enums-with-fields.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,7 +12,7 @@\n \n use std::mem::size_of;\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n enum Either<T, U> { Left(T), Right(U) }\n \n macro_rules! check {"}, {"sha": "da40f10e9fa9a3322007e622442bf64ec4dc6d9b", "filename": "src/test/run-pass/struct-lit-functional-no-fields.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fstruct-lit-functional-no-fields.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fstruct-lit-functional-no-fields.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-lit-functional-no-fields.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Show,PartialEq,Clone)]\n+#[derive(Show,PartialEq,Clone)]\n struct Foo<T> {\n     bar: T,\n     baz: T"}, {"sha": "8cc4cd142be09ba3d1377ea08bfb0959e57560cc", "filename": "src/test/run-pass/struct-partial-move-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fstruct-partial-move-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fstruct-partial-move-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-partial-move-1.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n pub struct Partial<T> { x: T, y: T }\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct S { val: int }\n impl S { fn new(v: int) -> S { S { val: v } } }\n impl Drop for S { fn drop(&mut self) { } }"}, {"sha": "aafe9e632b1ed46581281f07d2cea0471bd0a70e", "filename": "src/test/run-pass/struct-partial-move-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fstruct-partial-move-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fstruct-partial-move-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstruct-partial-move-2.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n pub struct Partial<T> { x: T, y: T }\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct S { val: int }\n impl S { fn new(v: int) -> S { S { val: v } } }\n impl Drop for S { fn drop(&mut self) { } }"}, {"sha": "4f6ed55f4259c2a130a158c5d245eedd7af44224", "filename": "src/test/run-pass/structured-compare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fstructured-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructured-compare.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum foo { large, small, }\n \n impl Copy for foo {}"}, {"sha": "8438a5ff47f9afaa9b4908438d05dec81cd6e627", "filename": "src/test/run-pass/tag-align-shape.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-align-shape.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,12 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum a_tag {\n     a_tag_var(u64)\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct t_rec {\n     c8: u8,\n     t: a_tag"}, {"sha": "1155a619a607063e2286e028ba6cdfd5d8c80f17", "filename": "src/test/run-pass/tag-disr-val-shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-disr-val-shape.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum color {\n     red = 0xff0000,\n     green = 0x00ff00,"}, {"sha": "ec41019846bec55584be2bfc7a31a3d1e533cb01", "filename": "src/test/run-pass/task-comm-16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-comm-16.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -45,7 +45,7 @@ fn test_str() {\n     assert_eq!(s1.as_bytes()[3], 't' as u8);\n }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n enum t {\n     tag1,\n     tag2(int),"}, {"sha": "3c319a8c51202470230ebed2afac05c6cb9d91c8", "filename": "src/test/run-pass/trait-inheritance-overloading-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading-simple.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,7 +12,7 @@ use std::cmp::PartialEq;\n \n trait MyNum : PartialEq { }\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct MyInt { val: int }\n \n impl PartialEq for MyInt {"}, {"sha": "739c3e4bdb0d1f1b6367e8bf2cea411bbde1d887", "filename": "src/test/run-pass/trait-inheritance-overloading.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,7 +12,7 @@ use std::cmp::PartialEq;\n \n trait MyNum : Add<Self,Self> + Sub<Self,Self> + Mul<Self,Self> + PartialEq + Clone { }\n \n-#[deriving(Clone, Show)]\n+#[derive(Clone, Show)]\n struct MyInt { val: int }\n \n impl Add<MyInt, MyInt> for MyInt {"}, {"sha": "5bf152f2976b9d6704de1f144eff2df4adc0ef5a", "filename": "src/test/run-pass/tuple-struct-construct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-construct.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(Show)]\n+#[derive(Show)]\n struct Foo(int, int);\n \n pub fn main() {"}, {"sha": "a4bb914b1ab3dc674e973fbad9295b6c3a2594e9", "filename": "src/test/run-pass/tuple-struct-constructor-pointer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ftuple-struct-constructor-pointer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ftuple-struct-constructor-pointer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftuple-struct-constructor-pointer.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct Foo(int);\n-#[deriving(PartialEq, Show)]\n+#[derive(PartialEq, Show)]\n struct Bar(int, int);\n \n pub fn main() {"}, {"sha": "63a59b6f750ea6490f38f2717bd8881d9dd3d120", "filename": "src/test/run-pass/typeclasses-eq-example-static.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example-static.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -18,7 +18,7 @@ trait Equal {\n     fn isEq(a: &Self, b: &Self) -> bool;\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum Color { cyan, magenta, yellow, black }\n \n impl Copy for Color {}\n@@ -35,7 +35,7 @@ impl Equal for Color {\n     }\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum ColorTree {\n     leaf(Color),\n     branch(Box<ColorTree>, Box<ColorTree>)"}, {"sha": "431a9383b3bd3fe546ea80816fbe202dbf0535fe", "filename": "src/test/run-pass/typeclasses-eq-example.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftypeclasses-eq-example.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -17,7 +17,7 @@ trait Equal {\n     fn isEq(&self, a: &Self) -> bool;\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum Color { cyan, magenta, yellow, black }\n \n impl Copy for Color {}\n@@ -34,7 +34,7 @@ impl Equal for Color {\n     }\n }\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n enum ColorTree {\n     leaf(Color),\n     branch(Box<ColorTree>, Box<ColorTree>)"}, {"sha": "52855f826731ca164ad4d77569796fd9a969d109", "filename": "src/test/run-pass/unboxed-closures-monomorphization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funboxed-closures-monomorphization.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -28,7 +28,7 @@ fn main(){\n     let mut f = bar(&x);\n     assert_eq!(f.call_mut(()), &x);\n \n-    #[deriving(Clone, Show, PartialEq)]\n+    #[derive(Clone, Show, PartialEq)]\n     struct Foo(uint, &'static str);\n \n     impl Copy for Foo {}"}, {"sha": "a0cf984cbb901512bcc763c03ea52f2ff7d86fca", "filename": "src/test/run-pass/uninit-empty-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Funinit-empty-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Funinit-empty-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funinit-empty-types.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -12,7 +12,7 @@\n \n use std::mem;\n \n-#[deriving(Clone)]\n+#[derive(Clone)]\n struct Foo;\n \n pub fn main() {"}, {"sha": "3f3cb634d749fa03cc9b4bba4e0ebe0b3f9560a3", "filename": "src/test/run-pass/use-mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fuse-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fuse-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-mod.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-pub use foo::bar::{mod, First};\n+pub use foo::bar::{self, First};\n use self::bar::Second;\n \n mod foo {\n-    pub use self::bar::baz::{mod};\n+    pub use self::bar::baz::{self};\n \n     pub mod bar {\n         pub mod baz {"}, {"sha": "08bd367917ac174e77f818e7a60497e3ef00d7a0", "filename": "src/test/run-pass/vector-sort-panic-safe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fvector-sort-panic-safe.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -30,7 +30,7 @@ static drop_counts: [AtomicUint;  MAX_LEN] =\n \n static creation_count: AtomicUint = INIT_ATOMIC_UINT;\n \n-#[deriving(Clone, PartialEq, PartialOrd, Eq, Ord)]\n+#[derive(Clone, PartialEq, PartialOrd, Eq, Ord)]\n struct DropCounter { x: uint, creation_id: uint }\n \n impl Rand for DropCounter {"}, {"sha": "bfabcb4d87b562df318e59bf34e14076baf277cf", "filename": "src/test/run-pass/while-prelude-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b40bc85cbc1d072179c92ce01655db0272aa598/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fwhile-prelude-drop.rs?ref=4b40bc85cbc1d072179c92ce01655db0272aa598", "patch": "@@ -10,7 +10,7 @@\n \n use std::string::String;\n \n-#[deriving(PartialEq)]\n+#[derive(PartialEq)]\n enum t { a, b(String), }\n \n fn make(i: int) -> t {"}]}