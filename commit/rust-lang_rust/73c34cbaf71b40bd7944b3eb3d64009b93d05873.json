{"sha": "73c34cbaf71b40bd7944b3eb3d64009b93d05873", "node_id": "C_kwDOAAsO6NoAKDczYzM0Y2JhZjcxYjQwYmQ3OTQ0YjNlYjNkNjQwMDliOTNkMDU4NzM", "commit": {"author": {"name": "Jamen Marz", "email": "me@jamen.dev", "date": "2023-03-27T14:14:08Z"}, "committer": {"name": "Jamen Marz", "email": "me@jamen.dev", "date": "2023-03-27T15:08:11Z"}, "message": "Add notes to non-structural const in pattern error message", "tree": {"sha": "d68aa1592da5cdf16a8ff6ebd8557075c6e782f9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d68aa1592da5cdf16a8ff6ebd8557075c6e782f9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73c34cbaf71b40bd7944b3eb3d64009b93d05873", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73c34cbaf71b40bd7944b3eb3d64009b93d05873", "html_url": "https://github.com/rust-lang/rust/commit/73c34cbaf71b40bd7944b3eb3d64009b93d05873", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73c34cbaf71b40bd7944b3eb3d64009b93d05873/comments", "author": {"login": "jamen", "id": 6251703, "node_id": "MDQ6VXNlcjYyNTE3MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/6251703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamen", "html_url": "https://github.com/jamen", "followers_url": "https://api.github.com/users/jamen/followers", "following_url": "https://api.github.com/users/jamen/following{/other_user}", "gists_url": "https://api.github.com/users/jamen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamen/subscriptions", "organizations_url": "https://api.github.com/users/jamen/orgs", "repos_url": "https://api.github.com/users/jamen/repos", "events_url": "https://api.github.com/users/jamen/events{/privacy}", "received_events_url": "https://api.github.com/users/jamen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jamen", "id": 6251703, "node_id": "MDQ6VXNlcjYyNTE3MDM=", "avatar_url": "https://avatars.githubusercontent.com/u/6251703?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jamen", "html_url": "https://github.com/jamen", "followers_url": "https://api.github.com/users/jamen/followers", "following_url": "https://api.github.com/users/jamen/following{/other_user}", "gists_url": "https://api.github.com/users/jamen/gists{/gist_id}", "starred_url": "https://api.github.com/users/jamen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jamen/subscriptions", "organizations_url": "https://api.github.com/users/jamen/orgs", "repos_url": "https://api.github.com/users/jamen/repos", "events_url": "https://api.github.com/users/jamen/events{/privacy}", "received_events_url": "https://api.github.com/users/jamen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "553ecbe8bae12bc43a34ac0b8a63e17026ce1e8a", "url": "https://api.github.com/repos/rust-lang/rust/commits/553ecbe8bae12bc43a34ac0b8a63e17026ce1e8a", "html_url": "https://github.com/rust-lang/rust/commit/553ecbe8bae12bc43a34ac0b8a63e17026ce1e8a"}], "stats": {"total": 178, "additions": 168, "deletions": 10}, "files": [{"sha": "fcc7cbe0715f525c31a499d5c737e74a23f3e1bb", "filename": "compiler/rustc_mir_build/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/compiler%2Frustc_mir_build%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/compiler%2Frustc_mir_build%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fmessages.ftl?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -331,6 +331,10 @@ mir_build_indirect_structural_match =\n mir_build_nontrivial_structural_match =\n     to use a constant of type `{$non_sm_ty}` in a pattern, the constant's initializer must be trivial or `{$non_sm_ty}` must be annotated with `#[derive(PartialEq, Eq)]`\n \n+mir_build_type_not_structural_tip = the traits must be derived, manual `impl`s are not sufficient\n+\n+mir_build_type_not_structural_more_info = see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n+\n mir_build_overlapping_range_endpoints = multiple patterns overlap on their endpoints\n     .range = ... with this range\n     .note = you likely meant to write mutually exclusive ranges"}, {"sha": "cbfca77bd25d3b1a3336f7abfd0f6f13e72c31d6", "filename": "compiler/rustc_mir_build/src/errors.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Ferrors.rs?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -663,6 +663,8 @@ pub struct UnionPattern {\n \n #[derive(Diagnostic)]\n #[diag(mir_build_type_not_structural)]\n+#[note(mir_build_type_not_structural_tip)]\n+#[note(mir_build_type_not_structural_more_info)]\n pub struct TypeNotStructural<'tcx> {\n     #[primary_span]\n     pub span: Span,\n@@ -695,12 +697,16 @@ pub struct PointerPattern;\n \n #[derive(LintDiagnostic)]\n #[diag(mir_build_indirect_structural_match)]\n+#[note(mir_build_type_not_structural_tip)]\n+#[note(mir_build_type_not_structural_more_info)]\n pub struct IndirectStructuralMatch<'tcx> {\n     pub non_sm_ty: Ty<'tcx>,\n }\n \n #[derive(LintDiagnostic)]\n #[diag(mir_build_nontrivial_structural_match)]\n+#[note(mir_build_type_not_structural_tip)]\n+#[note(mir_build_type_not_structural_more_info)]\n pub struct NontrivialStructuralMatch<'tcx> {\n     pub non_sm_ty: Ty<'tcx>,\n }"}, {"sha": "263c27d3d646af634a9b338163ce3416db5fcf75", "filename": "src/tools/clippy/tests/ui/crashes/ice-6254.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6254.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6254.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcrashes%2Fice-6254.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -6,6 +6,8 @@ LL |         FOO_REF_REF => {},\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n    = note: `-D indirect-structural-match` implied by `-D warnings`\n \n error: aborting due to previous error"}, {"sha": "2f6786999ed4d89970cd4cda5df422dd81490699", "filename": "tests/ui/consts/const_in_pattern/cross-crate-fail.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fcross-crate-fail.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -3,12 +3,18 @@ error: to use a constant of type `CustomEq` in a pattern, `CustomEq` must be ann\n    |\n LL |         consts::SOME => panic!(),\n    |         ^^^^^^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `CustomEq` in a pattern, `CustomEq` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/cross-crate-fail.rs:20:9\n    |\n LL |         <Defaulted as consts::AssocConst>::SOME  => panic!(),\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to 2 previous errors\n "}, {"sha": "41de5e7b4fe2e7244a4851f1d903333dc4399855", "filename": "tests/ui/consts/const_in_pattern/custom-eq-branch-warn.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.rs?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -28,6 +28,8 @@ fn main() {\n     match Foo::Qux(CustomEq) {\n         BAR_BAZ => panic!(),\n         //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n+        //~| NOTE the traits must be derived\n+        //~| NOTE StructuralEq.html for details\n         //~| WARN this was previously accepted\n         //~| NOTE see issue #73448\n         //~| NOTE `#[warn(nontrivial_structural_match)]` on by default"}, {"sha": "3f19c67d223ef7e9ef090b0d5cf477794d086196", "filename": "tests/ui/consts/const_in_pattern/custom-eq-branch-warn.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fcustom-eq-branch-warn.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -6,6 +6,8 @@ LL |         BAR_BAZ => panic!(),\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n    = note: `#[warn(nontrivial_structural_match)]` on by default\n \n warning: 1 warning emitted"}, {"sha": "b005f3220e9c4cb1cceacd9d6d8186576bfc4ee1", "filename": "tests/ui/consts/const_in_pattern/incomplete-slice.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fincomplete-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fincomplete-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fincomplete-slice.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -6,6 +6,8 @@ LL |         E_SL => {}\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n    = note: `#[warn(indirect_structural_match)]` on by default\n \n error[E0004]: non-exhaustive patterns: `&_` not covered"}, {"sha": "df155bdb625e69fd99697694199e17e23517080b", "filename": "tests/ui/consts/const_in_pattern/issue-78057.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-78057.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-78057.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fissue-78057.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `Opaque` in a pattern, `Opaque` must be annotat\n    |\n LL |         FOO => {},\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n   --> $DIR/issue-78057.rs:14:9"}, {"sha": "cced6af499f18f5323fc044ee97d553c373b47f8", "filename": "tests/ui/consts/const_in_pattern/no-eq-branch-fail.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fno-eq-branch-fail.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated wit\n    |\n LL |         BAR_BAZ => panic!(),\n    |         ^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to previous error\n "}, {"sha": "958bf373cf40dc43cc20504619cf28934e48371e", "filename": "tests/ui/consts/const_in_pattern/reject_non_partial_eq.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_partial_eq.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `NoPartialEq` in a pattern, `NoPartialEq` must\n    |\n LL |         NO_PARTIAL_EQ_NONE => println!(\"NO_PARTIAL_EQ_NONE\"),\n    |         ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to previous error\n "}, {"sha": "dc6b9a33197f1812aa32195a02c1dfd0eb2185a6", "filename": "tests/ui/consts/const_in_pattern/reject_non_structural.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.rs?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -39,45 +39,67 @@ fn main() {\n     const ENUM: Derive<NoDerive> = Derive::Some(NoDerive);\n     match Derive::Some(NoDerive) { ENUM => dbg!(ENUM), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n \n     const FIELD: OND = TrivialEq(Some(NoDerive)).0;\n     match Some(NoDerive) { FIELD => dbg!(FIELD), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n \n     const NO_DERIVE_SOME: OND = Some(NoDerive);\n     const INDIRECT: OND = NO_DERIVE_SOME;\n     match Some(NoDerive) {INDIRECT => dbg!(INDIRECT), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n \n     const TUPLE: (OND, OND) = (None, Some(NoDerive));\n     match (None, Some(NoDerive)) { TUPLE => dbg!(TUPLE), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n \n     const TYPE_ASCRIPTION: OND = type_ascribe!(Some(NoDerive), OND);\n     match Some(NoDerive) { TYPE_ASCRIPTION => dbg!(TYPE_ASCRIPTION), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n \n     const ARRAY: [OND; 2] = [None, Some(NoDerive)];\n     match [None, Some(NoDerive)] { ARRAY => dbg!(ARRAY), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n \n     const REPEAT: [OND; 2] = [Some(NoDerive); 2];\n     match [Some(NoDerive); 2] { REPEAT => dbg!(REPEAT), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n     //~| ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n \n     trait Trait: Sized { const ASSOC: Option<Self>; }\n     impl Trait for NoDerive { const ASSOC: Option<NoDerive> = Some(NoDerive); }\n     match Some(NoDerive) { NoDerive::ASSOC => dbg!(NoDerive::ASSOC), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n \n     const BLOCK: OND = { NoDerive; Some(NoDerive) };\n     match Some(NoDerive) { BLOCK => dbg!(BLOCK), _ => panic!(\"whoops\"), };\n     //~^ ERROR must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n \n     const ADDR_OF: &OND = &Some(NoDerive);\n     match &Some(NoDerive) { ADDR_OF => dbg!(ADDR_OF), _ => panic!(\"whoops\"), };\n     //~^ WARN must be annotated with `#[derive(PartialEq, Eq)]`\n+    //~| NOTE the traits must be derived\n+    //~| NOTE StructuralEq.html for details\n     //~| WARN previously accepted by the compiler but is being phased out\n     //~| NOTE for more information, see issue #62411\n }"}, {"sha": "b6e439f21397fee2e646cb15ca8e7f9351177002", "filename": "tests/ui/consts/const_in_pattern/reject_non_structural.stderr", "status": "modified", "additions": 42, "deletions": 10, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Freject_non_structural.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -3,69 +3,101 @@ error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be ann\n    |\n LL |     match Derive::Some(NoDerive) { ENUM => dbg!(ENUM), _ => panic!(\"whoops\"), };\n    |                                    ^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:44:28\n+  --> $DIR/reject_non_structural.rs:46:28\n    |\n LL |     match Some(NoDerive) { FIELD => dbg!(FIELD), _ => panic!(\"whoops\"), };\n    |                            ^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:49:27\n+  --> $DIR/reject_non_structural.rs:53:27\n    |\n LL |     match Some(NoDerive) {INDIRECT => dbg!(INDIRECT), _ => panic!(\"whoops\"), };\n    |                           ^^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:53:36\n+  --> $DIR/reject_non_structural.rs:59:36\n    |\n LL |     match (None, Some(NoDerive)) { TUPLE => dbg!(TUPLE), _ => panic!(\"whoops\"), };\n    |                                    ^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:57:28\n+  --> $DIR/reject_non_structural.rs:65:28\n    |\n LL |     match Some(NoDerive) { TYPE_ASCRIPTION => dbg!(TYPE_ASCRIPTION), _ => panic!(\"whoops\"), };\n    |                            ^^^^^^^^^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:61:36\n+  --> $DIR/reject_non_structural.rs:71:36\n    |\n LL |     match [None, Some(NoDerive)] { ARRAY => dbg!(ARRAY), _ => panic!(\"whoops\"), };\n    |                                    ^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:65:33\n+  --> $DIR/reject_non_structural.rs:77:33\n    |\n LL |     match [Some(NoDerive); 2] { REPEAT => dbg!(REPEAT), _ => panic!(\"whoops\"), };\n    |                                 ^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:65:33\n+  --> $DIR/reject_non_structural.rs:77:33\n    |\n LL |     match [Some(NoDerive); 2] { REPEAT => dbg!(REPEAT), _ => panic!(\"whoops\"), };\n    |                                 ^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:71:28\n+  --> $DIR/reject_non_structural.rs:87:28\n    |\n LL |     match Some(NoDerive) { NoDerive::ASSOC => dbg!(NoDerive::ASSOC), _ => panic!(\"whoops\"), };\n    |                            ^^^^^^^^^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:75:28\n+  --> $DIR/reject_non_structural.rs:93:28\n    |\n LL |     match Some(NoDerive) { BLOCK => dbg!(BLOCK), _ => panic!(\"whoops\"), };\n    |                            ^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n warning: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n-  --> $DIR/reject_non_structural.rs:79:29\n+  --> $DIR/reject_non_structural.rs:99:29\n    |\n LL |     match &Some(NoDerive) { ADDR_OF => dbg!(ADDR_OF), _ => panic!(\"whoops\"), };\n    |                             ^^^^^^^\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n note: the lint level is defined here\n   --> $DIR/reject_non_structural.rs:12:9\n    |"}, {"sha": "8c01d2f65ec9002b5965ed602ca5916d87fbf76c", "filename": "tests/ui/consts/const_in_pattern/warn_corner_cases.stderr", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_in_pattern%2Fwarn_corner_cases.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -6,6 +6,8 @@ LL |     match None { Some(_) => panic!(\"whoops\"), INDEX => dbg!(INDEX), };\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n    = note: `#[warn(nontrivial_structural_match)]` on by default\n \n warning: to use a constant of type `NoDerive` in a pattern, the constant's initializer must be trivial or `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n@@ -16,6 +18,8 @@ LL |     match None { Some(_) => panic!(\"whoops\"), CALL => dbg!(CALL), };\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n warning: to use a constant of type `NoDerive` in a pattern, the constant's initializer must be trivial or `NoDerive` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/warn_corner_cases.rs:38:47\n@@ -25,6 +29,8 @@ LL |     match None { Some(_) => panic!(\"whoops\"), METHOD_CALL => dbg!(METHOD_CA\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #73448 <https://github.com/rust-lang/rust/issues/73448>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n warning: 3 warnings emitted\n "}, {"sha": "342d94ed31c87678075dd459c3a77e16f553aba7", "filename": "tests/ui/consts/match_ice.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fmatch_ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fconsts%2Fmatch_ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fmatch_ice.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `S` in a pattern, `S` must be annotated with `#\n    |\n LL |         C => {}\n    |         ^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to previous error\n "}, {"sha": "dbd46da441316c573510f8e632ea573a198bc62d", "filename": "tests/ui/pattern/usefulness/const-partial_eq-fallback-ice.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fpattern%2Fusefulness%2Fconst-partial_eq-fallback-ice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fpattern%2Fusefulness%2Fconst-partial_eq-fallback-ice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fusefulness%2Fconst-partial_eq-fallback-ice.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `MyType` in a pattern, `MyType` must be annotat\n    |\n LL |     if let CONSTANT = &&MyType {\n    |            ^^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to previous error\n "}, {"sha": "08e3d76b538bf6260da8c7f5888ac0c9d4540322", "filename": "tests/ui/pattern/usefulness/consts-opaque.stderr", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fpattern%2Fusefulness%2Fconsts-opaque.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated wit\n    |\n LL |         FOO => {}\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n   --> $DIR/consts-opaque.rs:32:9\n@@ -24,6 +27,9 @@ error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated wit\n    |\n LL |         FOO_REF => {}\n    |         ^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n   --> $DIR/consts-opaque.rs:39:9\n@@ -42,13 +48,18 @@ LL |         FOO_REF_REF => {}\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n    = note: `#[warn(indirect_structural_match)]` on by default\n \n error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/consts-opaque.rs:53:9\n    |\n LL |         BAR => {} // should not be emitting unreachable warning\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n   --> $DIR/consts-opaque.rs:53:9\n@@ -72,6 +83,9 @@ error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated wit\n    |\n LL |         BAR => {}\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n   --> $DIR/consts-opaque.rs:63:9\n@@ -96,12 +110,18 @@ error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated wit\n    |\n LL |         BAR => {}\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: to use a constant of type `Bar` in a pattern, `Bar` must be annotated with `#[derive(PartialEq, Eq)]`\n   --> $DIR/consts-opaque.rs:72:9\n    |\n LL |         BAR => {} // should not be emitting unreachable warning\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n   --> $DIR/consts-opaque.rs:72:9\n@@ -126,6 +146,9 @@ error: to use a constant of type `Baz` in a pattern, `Baz` must be annotated wit\n    |\n LL |         BAZ => {}\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n   --> $DIR/consts-opaque.rs:82:9\n@@ -150,6 +173,9 @@ error: to use a constant of type `Baz` in a pattern, `Baz` must be annotated wit\n    |\n LL |         BAZ => {}\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n   --> $DIR/consts-opaque.rs:92:9\n@@ -165,6 +191,9 @@ error: to use a constant of type `Baz` in a pattern, `Baz` must be annotated wit\n    |\n LL |         BAZ => {}\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: unreachable pattern\n   --> $DIR/consts-opaque.rs:99:9"}, {"sha": "f08ba522a937c37d03f3da258d3d22911de13f32", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-direct-struct-embedded.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-embedded.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be ann\n    |\n LL |         WRAP_DIRECT_INLINE => { panic!(\"WRAP_DIRECT_INLINE matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to previous error\n "}, {"sha": "012ccab176cfaa57ae0ffa79470a751ba474ec74", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-direct-struct-param.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-direct-struct-param.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `NoDerive` in a pattern, `NoDerive` must be ann\n    |\n LL |         WRAP_DIRECT_PARAM => { panic!(\"WRAP_DIRECT_PARAM matched itself\"); }\n    |         ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to previous error\n "}, {"sha": "94ee2216e9e65b610a57744dbee4fa5a451da135", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-doubly-indirect-embedded.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-embedded.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -6,6 +6,8 @@ LL |         WRAP_DOUBLY_INDIRECT_INLINE => { panic!(\"WRAP_DOUBLY_INDIRECT_INLIN\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n note: the lint level is defined here\n   --> $DIR/cant-hide-behind-doubly-indirect-embedded.rs:7:9\n    |"}, {"sha": "666b7b95ec97fc08b5562b857f3270f1b29f519f", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-doubly-indirect-param.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-doubly-indirect-param.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -6,6 +6,8 @@ LL |         WRAP_DOUBLY_INDIRECT_PARAM => { panic!(\"WRAP_DOUBLY_INDIRECT_PARAM\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n note: the lint level is defined here\n   --> $DIR/cant-hide-behind-doubly-indirect-param.rs:7:9\n    |"}, {"sha": "ecbe83f3dec0e036e63ab4ad99c50d44bd9781e8", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-indirect-struct-embedded.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-embedded.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-embedded.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-embedded.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -6,6 +6,8 @@ LL |         WRAP_INDIRECT_INLINE => { panic!(\"WRAP_INDIRECT_INLINE matched itse\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n note: the lint level is defined here\n   --> $DIR/cant-hide-behind-indirect-struct-embedded.rs:7:9\n    |"}, {"sha": "2119908013b79ae7328c6fca88d9fe337574abdb", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/cant-hide-behind-indirect-struct-param.stderr", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fcant-hide-behind-indirect-struct-param.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -6,6 +6,8 @@ LL |         WRAP_INDIRECT_PARAM => { panic!(\"WRAP_INDIRECT_PARAM matched itself\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n note: the lint level is defined here\n   --> $DIR/cant-hide-behind-indirect-struct-param.rs:7:9\n    |"}, {"sha": "46600e7b215a8be83173b7c58d9545b4a404f06a", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/issue-61188-match-slice-forbidden-without-eq.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-61188-match-slice-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-61188-match-slice-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-61188-match-slice-forbidden-without-eq.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `B` in a pattern, `B` must be annotated with `#\n    |\n LL |         A => (),\n    |         ^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to previous error\n "}, {"sha": "435812306deee93d047c959f33078e2d62bde0ff", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/issue-62307-match-ref-ref-forbidden-without-eq.stderr", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fissue-62307-match-ref-ref-forbidden-without-eq.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -6,6 +6,8 @@ LL |         RR_B1 => { println!(\"CLAIM RR0: {:?} matches {:?}\", RR_B1, RR_B0);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n note: the lint level is defined here\n   --> $DIR/issue-62307-match-ref-ref-forbidden-without-eq.rs:13:9\n    |\n@@ -20,6 +22,8 @@ LL |         RR_B1 => { println!(\"CLAIM RR1: {:?} matches {:?}\", RR_B1, RR_B1);\n    |\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #62411 <https://github.com/rust-lang/rust/issues/62411>\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n warning: 2 warnings emitted\n "}, {"sha": "1c4fb914688f62265a2b1b06c6dcc7b922c86d3a", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/match-forbidden-without-eq.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-forbidden-without-eq.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated wit\n    |\n LL |         FOO => { }\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n warning: floating-point types cannot be used in patterns\n   --> $DIR/match-forbidden-without-eq.rs:18:9"}, {"sha": "6adebada0437d3f2cd28fa7e60d84359b6d19dbd", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/match-nonempty-array-forbidden-without-eq.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-nonempty-array-forbidden-without-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-nonempty-array-forbidden-without-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-nonempty-array-forbidden-without-eq.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `B` in a pattern, `B` must be annotated with `#\n    |\n LL |         FOO => { }\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to previous error\n "}, {"sha": "f5b10f0626b3229110875f080e4817265f974260", "filename": "tests/ui/rfc-1445-restrict-constants-in-patterns/match-requires-both-partialeq-and-eq.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-requires-both-partialeq-and-eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/73c34cbaf71b40bd7944b3eb3d64009b93d05873/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-requires-both-partialeq-and-eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-1445-restrict-constants-in-patterns%2Fmatch-requires-both-partialeq-and-eq.stderr?ref=73c34cbaf71b40bd7944b3eb3d64009b93d05873", "patch": "@@ -3,6 +3,9 @@ error: to use a constant of type `Foo` in a pattern, `Foo` must be annotated wit\n    |\n LL |         FOO => { }\n    |         ^^^\n+   |\n+   = note: the traits must be derived, manual `impl`s are not sufficient\n+   = note: see https://doc.rust-lang.org/stable/std/marker/trait.StructuralEq.html for details\n \n error: aborting due to previous error\n "}]}