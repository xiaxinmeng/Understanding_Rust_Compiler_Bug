{"sha": "21d05f64aa10fd15208bd6d96599275b044a0636", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxZDA1ZjY0YWExMGZkMTUyMDhiZDZkOTY1OTkyNzViMDQ0YTA2MzY=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-09-03T10:42:27Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-09-03T11:26:46Z"}, "message": "incr.ThinLTO: Do some cleanup and add some logging.", "tree": {"sha": "8d56fb9561b7ef1d3ad918d340187dc67d2d7f84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8d56fb9561b7ef1d3ad918d340187dc67d2d7f84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21d05f64aa10fd15208bd6d96599275b044a0636", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21d05f64aa10fd15208bd6d96599275b044a0636", "html_url": "https://github.com/rust-lang/rust/commit/21d05f64aa10fd15208bd6d96599275b044a0636", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21d05f64aa10fd15208bd6d96599275b044a0636/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5545751f9f4f99b2374719586d7e901253d15c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5545751f9f4f99b2374719586d7e901253d15c3", "html_url": "https://github.com/rust-lang/rust/commit/d5545751f9f4f99b2374719586d7e901253d15c3"}], "stats": {"total": 119, "additions": 57, "deletions": 62}, "files": [{"sha": "c1dda02264ed16749ce002324fa8b1ca8f1cec70", "filename": "src/librustc_codegen_llvm/back/lto.rs", "status": "modified", "additions": 33, "deletions": 21, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/21d05f64aa10fd15208bd6d96599275b044a0636/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d05f64aa10fd15208bd6d96599275b044a0636/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Flto.rs?ref=21d05f64aa10fd15208bd6d96599275b044a0636", "patch": "@@ -29,7 +29,7 @@ use {ModuleCodegen, ModuleLlvm, ModuleKind};\n use libc;\n \n use std::ffi::{CStr, CString};\n-use std::fs::File;\n+use std::fs::{self, File};\n use std::ptr;\n use std::slice;\n use std::sync::Arc;\n@@ -423,16 +423,10 @@ fn thin_lto(cgcx: &CodegenContext,\n             // because only then it will contain the ThinLTO module summary.\n             if let Some(ref incr_comp_session_dir) = cgcx.incr_comp_session_dir {\n                 if cgcx.config(module.kind).emit_pre_thin_lto_bc {\n-                    use std::io::Write;\n-\n                     let path = incr_comp_session_dir\n                         .join(pre_lto_bitcode_filename(&module.name));\n-                    let mut file = File::create(&path).unwrap_or_else(|e| {\n-                        panic!(\"Failed to create pre-lto-bitcode file `{}`: {}\",\n-                               path.display(),\n-                               e);\n-                    });\n-                    file.write_all(buffer.data()).unwrap_or_else(|e| {\n+\n+                    fs::write(&path, buffer.data()).unwrap_or_else(|e| {\n                         panic!(\"Error writing pre-lto-bitcode file `{}`: {}\",\n                                path.display(),\n                                e);\n@@ -499,12 +493,22 @@ fn thin_lto(cgcx: &CodegenContext,\n             write::llvm_err(&diag_handler, \"failed to prepare thin LTO context\".to_string())\n         })?;\n \n-        let import_map = ThinLTOImports::from_thin_lto_data(data);\n-\n-        let data = ThinData(data);\n         info!(\"thin LTO data created\");\n         timeline.record(\"data\");\n \n+        let import_map = if cgcx.incr_comp_session_dir.is_some() {\n+            ThinLTOImports::from_thin_lto_data(data)\n+        } else {\n+            // If we don't compile incrementally, we don't need to load the\n+            // import data from LLVM.\n+            assert!(green_modules.is_empty());\n+            ThinLTOImports::new()\n+        };\n+        info!(\"thin LTO import map loaded\");\n+        timeline.record(\"import-map-loaded\");\n+\n+        let data = ThinData(data);\n+\n         // Throw our data in an `Arc` as we'll be sharing it across threads. We\n         // also put all memory referenced by the C++ data (buffers, ids, etc)\n         // into the arc as well. After this we'll create a thin module\n@@ -519,25 +523,27 @@ fn thin_lto(cgcx: &CodegenContext,\n         let mut copy_jobs = vec![];\n         let mut opt_jobs = vec![];\n \n+        info!(\"checking which modules can be-reused and which have to be re-optimized.\");\n         for (module_index, module_name) in shared.module_names.iter().enumerate() {\n             let module_name = module_name_to_str(module_name);\n \n+            // If the module hasn't changed and none of the modules it imports\n+            // from has changed, we can re-use the post-ThinLTO version of the\n+            // module.\n             if green_modules.contains_key(module_name) {\n-                let mut imports_all_green = true;\n-                for imported_module in import_map.modules_imported_by(module_name) {\n-                    if !green_modules.contains_key(imported_module) {\n-                        imports_all_green = false;\n-                        break\n-                    }\n-                }\n+                let imports_all_green = import_map.modules_imported_by(module_name)\n+                    .iter()\n+                    .all(|imported_module| green_modules.contains_key(imported_module));\n \n                 if imports_all_green {\n                     let work_product = green_modules[module_name].clone();\n                     copy_jobs.push(work_product);\n+                    info!(\" - {}: re-used\", module_name);\n                     continue\n                 }\n             }\n \n+            info!(\" - {}: re-compiled\", module_name);\n             opt_jobs.push(LtoModuleCodegen::Thin(ThinModule {\n                 shared: shared.clone(),\n                 idx: module_index,\n@@ -872,7 +878,13 @@ pub struct ThinLTOImports {\n }\n \n impl ThinLTOImports {\n-    pub fn modules_imported_by(&self, llvm_module_name: &str) -> &[String] {\n+    fn new() -> ThinLTOImports {\n+        ThinLTOImports {\n+            imports: FxHashMap(),\n+        }\n+    }\n+\n+    fn modules_imported_by(&self, llvm_module_name: &str) -> &[String] {\n         self.imports.get(llvm_module_name).map(|v| &v[..]).unwrap_or(&[])\n     }\n \n@@ -915,4 +927,4 @@ fn module_name_to_str(c_str: &CStr) -> &str {\n                 e)\n         }\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "1c0f89193b20909e8773c6e52d37c732c7c14d9a", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 24, "deletions": 41, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/21d05f64aa10fd15208bd6d96599275b044a0636/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21d05f64aa10fd15208bd6d96599275b044a0636/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=21d05f64aa10fd15208bd6d96599275b044a0636", "patch": "@@ -1311,36 +1311,31 @@ fn execute_work_item(cgcx: &CodegenContext,\n                      timeline: &mut Timeline)\n     -> Result<WorkItemResult, FatalError>\n {\n+    let module_config = cgcx.config(work_item.module_kind());\n+\n     match work_item {\n-        work_item @ WorkItem::Optimize(_) => {\n-            execute_optimize_work_item(cgcx, work_item, timeline)\n+        WorkItem::Optimize(module) => {\n+            execute_optimize_work_item(cgcx, module, module_config, timeline)\n         }\n-        work_item @ WorkItem::CopyPostLtoArtifacts(_) => {\n-            execute_copy_from_cache_work_item(cgcx, work_item, timeline)\n+        WorkItem::CopyPostLtoArtifacts(module) => {\n+            execute_copy_from_cache_work_item(cgcx, module, module_config, timeline)\n         }\n-        work_item @ WorkItem::LTO(_) => {\n-            execute_lto_work_item(cgcx, work_item, timeline)\n+        WorkItem::LTO(module) => {\n+            execute_lto_work_item(cgcx, module, module_config, timeline)\n         }\n     }\n }\n \n fn execute_optimize_work_item(cgcx: &CodegenContext,\n-                              work_item: WorkItem,\n+                              module: ModuleCodegen,\n+                              module_config: &ModuleConfig,\n                               timeline: &mut Timeline)\n     -> Result<WorkItemResult, FatalError>\n {\n-    let config = cgcx.config(work_item.module_kind());\n-\n-    let module = if let WorkItem::Optimize(module) = work_item {\n-        module\n-    } else {\n-        bug!(\"execute_optimize_work_item() called with non-WorkItem::Optimize\");\n-    };\n-\n     let diag_handler = cgcx.create_diag_handler();\n \n     unsafe {\n-        optimize(cgcx, &diag_handler, &module, config, timeline)?;\n+        optimize(cgcx, &diag_handler, &module, module_config, timeline)?;\n     }\n \n     let linker_does_lto = cgcx.opts.debugging_opts.cross_lang_lto.enabled();\n@@ -1394,25 +1389,18 @@ fn execute_optimize_work_item(cgcx: &CodegenContext,\n         Ok(WorkItemResult::NeedsLTO(module))\n     } else {\n         let module = unsafe {\n-            codegen(cgcx, &diag_handler, module, config, timeline)?\n+            codegen(cgcx, &diag_handler, module, module_config, timeline)?\n         };\n         Ok(WorkItemResult::Compiled(module))\n     }\n }\n \n fn execute_copy_from_cache_work_item(cgcx: &CodegenContext,\n-                                     work_item: WorkItem,\n+                                     module: CachedModuleCodegen,\n+                                     module_config: &ModuleConfig,\n                                      _: &mut Timeline)\n     -> Result<WorkItemResult, FatalError>\n {\n-    let config = cgcx.config(work_item.module_kind());\n-\n-    let module = if let WorkItem::CopyPostLtoArtifacts(module) = work_item {\n-        module\n-    } else {\n-        bug!(\"execute_copy_from_cache_work_item() called with wrong WorkItem kind.\")\n-    };\n-\n     let incr_comp_session_dir = cgcx.incr_comp_session_dir\n                                     .as_ref()\n                                     .unwrap();\n@@ -1459,9 +1447,9 @@ fn execute_copy_from_cache_work_item(cgcx: &CodegenContext,\n         }\n     }\n \n-    assert_eq!(object.is_some(), config.emit_obj);\n-    assert_eq!(bytecode.is_some(), config.emit_bc);\n-    assert_eq!(bytecode_compressed.is_some(), config.emit_bc_compressed);\n+    assert_eq!(object.is_some(), module_config.emit_obj);\n+    assert_eq!(bytecode.is_some(), module_config.emit_bc);\n+    assert_eq!(bytecode_compressed.is_some(), module_config.emit_bc_compressed);\n \n     Ok(WorkItemResult::Compiled(CompiledModule {\n         name: module.name,\n@@ -1473,22 +1461,17 @@ fn execute_copy_from_cache_work_item(cgcx: &CodegenContext,\n }\n \n fn execute_lto_work_item(cgcx: &CodegenContext,\n-                         work_item: WorkItem,\n+                         mut module: lto::LtoModuleCodegen,\n+                         module_config: &ModuleConfig,\n                          timeline: &mut Timeline)\n     -> Result<WorkItemResult, FatalError>\n {\n-    let config = cgcx.config(work_item.module_kind());\n-\n-    if let WorkItem::LTO(mut lto) = work_item {\n-        let diag_handler = cgcx.create_diag_handler();\n+    let diag_handler = cgcx.create_diag_handler();\n \n-        unsafe {\n-            let module = lto.optimize(cgcx, timeline)?;\n-            let module = codegen(cgcx, &diag_handler, module, config, timeline)?;\n-            Ok(WorkItemResult::Compiled(module))\n-        }\n-    } else {\n-        bug!(\"execute_lto_work_item() called with wrong WorkItem kind.\")\n+    unsafe {\n+        let module = module.optimize(cgcx, timeline)?;\n+        let module = codegen(cgcx, &diag_handler, module, module_config, timeline)?;\n+        Ok(WorkItemResult::Compiled(module))\n     }\n }\n "}]}