{"sha": "b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52", "node_id": "C_kwDOAAsO6NoAKGI1YjY0Njc4MTA4ZjZjNTQ2MGQ5ZGNmOGE0MTViM2I4ZGM0ZDFhNTI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-12T23:37:52Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-11-14T03:23:41Z"}, "message": "Add rustc_deny_explicit_impl", "tree": {"sha": "7dbaf19eb948aac6146eec11065bd5ed6a8fe502", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7dbaf19eb948aac6146eec11065bd5ed6a8fe502"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52", "html_url": "https://github.com/rust-lang/rust/commit/b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "742d3f02c243964e5b868d90afd60c2907be5853", "url": "https://api.github.com/repos/rust-lang/rust/commits/742d3f02c243964e5b868d90afd60c2907be5853", "html_url": "https://github.com/rust-lang/rust/commit/742d3f02c243964e5b868d90afd60c2907be5853"}], "stats": {"total": 80, "additions": 29, "deletions": 51}, "files": [{"sha": "194bbd83b0f74c296dc97e009c697fc8ebad914e", "filename": "compiler/rustc_error_codes/src/error_codes/E0322.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0322.md", "raw_url": "https://github.com/rust-lang/rust/raw/b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0322.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0322.md?ref=b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52", "patch": "@@ -1,4 +1,5 @@\n-The `Sized` trait was implemented explicitly.\n+A built-in trait was implemented explicitly. All implementations of the trait\n+are provided automatically by the compiler.\n \n Erroneous code example:\n "}, {"sha": "db40c15a7cd3dcdd62b16f45bdab71e4e264ad1b", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52", "patch": "@@ -691,6 +691,10 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n         rustc_allow_incoherent_impl, AttributeType::Normal, template!(Word), ErrorFollowing, @only_local: true,\n         \"#[rustc_allow_incoherent_impl] has to be added to all impl items of an incoherent inherent impl.\"\n     ),\n+    rustc_attr!(\n+        rustc_deny_explicit_impl, AttributeType::Normal, template!(Word), ErrorFollowing, @only_local: false,\n+        \"#[rustc_deny_explicit_impl] enforces that a trait can have no user-provided impls\"\n+    ),\n     rustc_attr!(\n         rustc_has_incoherent_inherent_impls, AttributeType::Normal, template!(Word), ErrorFollowing,\n         \"#[rustc_has_incoherent_inherent_impls] allows the addition of incoherent inherent impls for \\"}, {"sha": "1bf3768fead3619f9fb5781cb8f9314c21f6e256", "filename": "compiler/rustc_hir_analysis/src/coherence/mod.rs", "status": "modified", "additions": 16, "deletions": 50, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fmod.rs?ref=b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52", "patch": "@@ -5,10 +5,11 @@\n // done by the orphan and overlap modules. Then we build up various\n // mappings. That mapping code resides here.\n \n-use rustc_errors::struct_span_err;\n+use rustc_errors::{error_code, struct_span_err};\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt, TypeVisitable};\n+use rustc_span::sym;\n use rustc_trait_selection::traits;\n \n mod builtin;\n@@ -39,61 +40,26 @@ fn enforce_trait_manually_implementable(\n     impl_def_id: LocalDefId,\n     trait_def_id: DefId,\n ) {\n-    let did = Some(trait_def_id);\n-    let li = tcx.lang_items();\n     let impl_header_span = tcx.def_span(impl_def_id);\n \n-    // Disallow *all* explicit impls of `Pointee`, `DiscriminantKind`, `Sized` and `Unsize` for now.\n-    if did == li.pointee_trait() {\n-        struct_span_err!(\n+    // Disallow *all* explicit impls of traits marked `#[rustc_deny_explicit_impl]`\n+    if tcx.has_attr(trait_def_id, sym::rustc_deny_explicit_impl) {\n+        let trait_name = tcx.item_name(trait_def_id);\n+        let mut err = struct_span_err!(\n             tcx.sess,\n             impl_header_span,\n             E0322,\n-            \"explicit impls for the `Pointee` trait are not permitted\"\n-        )\n-        .span_label(impl_header_span, \"impl of `Pointee` not allowed\")\n-        .emit();\n-        return;\n-    }\n-\n-    if did == li.discriminant_kind_trait() {\n-        struct_span_err!(\n-            tcx.sess,\n-            impl_header_span,\n-            E0322,\n-            \"explicit impls for the `DiscriminantKind` trait are not permitted\"\n-        )\n-        .span_label(impl_header_span, \"impl of `DiscriminantKind` not allowed\")\n-        .emit();\n-        return;\n-    }\n-\n-    if did == li.sized_trait() {\n-        struct_span_err!(\n-            tcx.sess,\n-            impl_header_span,\n-            E0322,\n-            \"explicit impls for the `Sized` trait are not permitted\"\n-        )\n-        .span_label(impl_header_span, \"impl of `Sized` not allowed\")\n-        .emit();\n-        return;\n-    }\n-\n-    if did == li.unsize_trait() {\n-        struct_span_err!(\n-            tcx.sess,\n-            impl_header_span,\n-            E0328,\n-            \"explicit impls for the `Unsize` trait are not permitted\"\n-        )\n-        .span_label(impl_header_span, \"impl of `Unsize` not allowed\")\n-        .emit();\n-        return;\n-    }\n+            \"explicit impls for the `{trait_name}` trait are not permitted\"\n+        );\n+        err.span_label(impl_header_span, format!(\"impl of `{trait_name}` not allowed\"));\n+\n+        // Maintain explicit error code for `Unsize`, since it has a useful\n+        // explanation about using `CoerceUnsized` instead.\n+        if Some(trait_def_id) == tcx.lang_items().unsize_trait() {\n+            err.code(error_code!(E0328));\n+        }\n \n-    if tcx.features().unboxed_closures {\n-        // the feature gate allows all Fn traits\n+        err.emit();\n         return;\n     }\n "}, {"sha": "908257c92535fe56a51aedbb9f3504a8807d6e15", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52", "patch": "@@ -1251,6 +1251,7 @@ symbols! {\n         rustc_deallocator,\n         rustc_def_path,\n         rustc_default_body_unstable,\n+        rustc_deny_explicit_impl,\n         rustc_diagnostic_item,\n         rustc_diagnostic_macros,\n         rustc_dirty,"}, {"sha": "3eff6033f8da9e16d29006232c4c8e20a0f470e4", "filename": "library/core/src/marker.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52/library%2Fcore%2Fsrc%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52/library%2Fcore%2Fsrc%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmarker.rs?ref=b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52", "patch": "@@ -96,6 +96,7 @@ unsafe impl<T: Sync + ?Sized> Send for &T {}\n )]\n #[fundamental] // for Default, for example, which requires that `[T]: !Default` be evaluatable\n #[rustc_specialization_trait]\n+#[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n pub trait Sized {\n     // Empty.\n }\n@@ -127,6 +128,7 @@ pub trait Sized {\n /// [nomicon-coerce]: ../../nomicon/coercions.html\n #[unstable(feature = \"unsize\", issue = \"27732\")]\n #[lang = \"unsize\"]\n+#[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n pub trait Unsize<T: ?Sized> {\n     // Empty.\n }\n@@ -693,6 +695,7 @@ impl<T: ?Sized> StructuralEq for PhantomData<T> {}\n     reason = \"this trait is unlikely to ever be stabilized, use `mem::discriminant` instead\"\n )]\n #[lang = \"discriminant_kind\"]\n+#[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n pub trait DiscriminantKind {\n     /// The type of the discriminant, which must satisfy the trait\n     /// bounds required by `mem::Discriminant`.\n@@ -793,6 +796,7 @@ impl<T: ?Sized> Unpin for *mut T {}\n #[lang = \"destruct\"]\n #[rustc_on_unimplemented(message = \"can't drop `{Self}`\", append_const_msg)]\n #[const_trait]\n+#[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n pub trait Destruct {}\n \n /// A marker for tuple types.\n@@ -802,6 +806,7 @@ pub trait Destruct {}\n #[unstable(feature = \"tuple_trait\", issue = \"none\")]\n #[lang = \"tuple_trait\"]\n #[rustc_on_unimplemented(message = \"`{Self}` is not a tuple\")]\n+#[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n pub trait Tuple {}\n \n /// Implementations of `Copy` for primitive types."}, {"sha": "a8604843e96319c679441affd4a7a32972d44fe5", "filename": "library/core/src/ptr/metadata.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmetadata.rs?ref=b5b64678108f6c5460d9dcf8a415b3b8dc4d1a52", "patch": "@@ -50,6 +50,7 @@ use crate::hash::{Hash, Hasher};\n ///\n /// [`to_raw_parts`]: *const::to_raw_parts\n #[lang = \"pointee_trait\"]\n+#[cfg_attr(not(bootstrap), rustc_deny_explicit_impl)]\n pub trait Pointee {\n     /// The type for metadata in pointers and references to `Self`.\n     #[lang = \"metadata_type\"]"}]}