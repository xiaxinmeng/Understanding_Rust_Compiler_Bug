{"sha": "fbe66a6ef36e219f40b07607f558acbd94b19293", "node_id": "C_kwDOAAsO6NoAKGZiZTY2YTZlZjM2ZTIxOWY0MGIwNzYwN2Y1NThhY2JkOTRiMTkyOTM", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-13T17:50:52Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-12-13T17:56:04Z"}, "message": "Address nits\n\nCo-authored-by: Oli Scherer <github35764891676564198441@oli-obk.de>", "tree": {"sha": "bb158aac308fd40c22f3cdf2e487ee14994ad144", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb158aac308fd40c22f3cdf2e487ee14994ad144"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbe66a6ef36e219f40b07607f558acbd94b19293", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbe66a6ef36e219f40b07607f558acbd94b19293", "html_url": "https://github.com/rust-lang/rust/commit/fbe66a6ef36e219f40b07607f558acbd94b19293", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbe66a6ef36e219f40b07607f558acbd94b19293/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7196973c3eae42d4f20eb55e71930d3e35aac329", "url": "https://api.github.com/repos/rust-lang/rust/commits/7196973c3eae42d4f20eb55e71930d3e35aac329", "html_url": "https://github.com/rust-lang/rust/commit/7196973c3eae42d4f20eb55e71930d3e35aac329"}], "stats": {"total": 20, "additions": 5, "deletions": 15}, "files": [{"sha": "57f0cae12bb312bb5afd14d971fed8bac0ad31a1", "filename": "compiler/rustc_hir_analysis/src/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbe66a6ef36e219f40b07607f558acbd94b19293/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe66a6ef36e219f40b07607f558acbd94b19293/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fmod.rs?ref=fbe66a6ef36e219f40b07607f558acbd94b19293", "patch": "@@ -352,7 +352,7 @@ fn bounds_from_generic_predicates<'tcx>(\n         // insert the associated types where they correspond, but for now let's be \"lazy\" and\n         // propose this instead of the following valid resugaring:\n         // `T: Trait, Trait::Assoc = K` \u2192 `T: Trait<Assoc = K>`\n-        where_clauses.push(format!(\"{} = {}\", tcx.def_path_str(p.projection_ty.def_id), p.term,));\n+        where_clauses.push(format!(\"{} = {}\", tcx.def_path_str(p.projection_ty.def_id), p.term));\n     }\n     let where_clauses = if where_clauses.is_empty() {\n         String::new()"}, {"sha": "44650827810abf11095901cb7907f433098996b6", "filename": "compiler/rustc_middle/src/ty/fast_reject.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fbe66a6ef36e219f40b07607f558acbd94b19293/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe66a6ef36e219f40b07607f558acbd94b19293/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ffast_reject.rs?ref=fbe66a6ef36e219f40b07607f558acbd94b19293", "patch": "@@ -126,7 +126,7 @@ pub fn simplify_type<'tcx>(\n             TreatParams::AsPlaceholder => Some(PlaceholderSimplifiedType),\n             TreatParams::AsInfer => None,\n         },\n-        ty::Alias(ty::Opaque, ..) | ty::Alias(ty::Projection, _) => match treat_params {\n+        ty::Alias(..) => match treat_params {\n             // When treating `ty::Param` as a placeholder, projections also\n             // don't unify with anything else as long as they are fully normalized.\n             //\n@@ -225,10 +225,7 @@ impl DeepRejectCtxt {\n         match impl_ty.kind() {\n             // Start by checking whether the type in the impl may unify with\n             // pretty much everything. Just return `true` in that case.\n-            ty::Param(_)\n-            | ty::Alias(ty::Projection, _)\n-            | ty::Error(_)\n-            | ty::Alias(ty::Opaque, ..) => return true,\n+            ty::Param(_) | ty::Error(_) | ty::Alias(..) => return true,\n             // These types only unify with inference variables or their own\n             // variant.\n             ty::Bool\n@@ -326,8 +323,6 @@ impl DeepRejectCtxt {\n                 _ => false,\n             },\n \n-            ty::Alias(ty::Opaque, ..) => true,\n-\n             // Impls cannot contain these types as these cannot be named directly.\n             ty::FnDef(..) | ty::Closure(..) | ty::Generator(..) => false,\n \n@@ -347,7 +342,7 @@ impl DeepRejectCtxt {\n             // projections can unify with other stuff.\n             //\n             // Looking forward to lazy normalization this is the safer strategy anyways.\n-            ty::Alias(ty::Projection, _) => true,\n+            ty::Alias(..) => true,\n \n             ty::Error(_) => true,\n "}, {"sha": "ca9ee04c58c10d2b1811ab8c172615d4ba1bfabf", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/fbe66a6ef36e219f40b07607f558acbd94b19293/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbe66a6ef36e219f40b07607f558acbd94b19293/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=fbe66a6ef36e219f40b07607f558acbd94b19293", "patch": "@@ -1377,12 +1377,7 @@ fn assemble_candidates_from_trait_def<'cx, 'tcx>(\n     // Check whether the self-type is itself a projection.\n     // If so, extract what we know from the trait and try to come up with a good answer.\n     let bounds = match *obligation.predicate.self_ty().kind() {\n-        ty::Alias(ty::Projection, ref data) => {\n-            tcx.bound_item_bounds(data.def_id).subst(tcx, data.substs)\n-        }\n-        ty::Alias(ty::Opaque, ty::AliasTy { def_id, substs }) => {\n-            tcx.bound_item_bounds(def_id).subst(tcx, substs)\n-        }\n+        ty::Alias(_, ref data) => tcx.bound_item_bounds(data.def_id).subst(tcx, data.substs),\n         ty::Infer(ty::TyVar(_)) => {\n             // If the self-type is an inference variable, then it MAY wind up\n             // being a projected type, so induce an ambiguity."}]}