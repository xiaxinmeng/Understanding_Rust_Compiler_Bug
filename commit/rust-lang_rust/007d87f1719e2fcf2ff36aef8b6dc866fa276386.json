{"sha": "007d87f1719e2fcf2ff36aef8b6dc866fa276386", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwN2Q4N2YxNzE5ZTJmY2YyZmYzNmFlZjhiNmRjODY2ZmEyNzYzODY=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-04T15:24:56Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-07-05T01:01:35Z"}, "message": "Permit use of mem::uninitialized via allow(deprecated)", "tree": {"sha": "d9c63e11e69641b1dfa286b92bcd6771a8caf15b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9c63e11e69641b1dfa286b92bcd6771a8caf15b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/007d87f1719e2fcf2ff36aef8b6dc866fa276386", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/007d87f1719e2fcf2ff36aef8b6dc866fa276386", "html_url": "https://github.com/rust-lang/rust/commit/007d87f1719e2fcf2ff36aef8b6dc866fa276386", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/007d87f1719e2fcf2ff36aef8b6dc866fa276386/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a7dded1a249a21540583333204c378bf960a700", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a7dded1a249a21540583333204c378bf960a700", "html_url": "https://github.com/rust-lang/rust/commit/8a7dded1a249a21540583333204c378bf960a700"}], "stats": {"total": 39, "additions": 30, "deletions": 9}, "files": [{"sha": "9fdc93c3ff0f3e01ce3586347f1c30d7a6494bc4", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -170,6 +170,7 @@ impl CodegenCx<'ll, 'tcx> {\n     pub fn const_get_real(&self, v: &'ll Value) -> Option<(f64, bool)> {\n         unsafe {\n             if self.is_const_real(v) {\n+                #[allow(deprecated)]\n                 let mut loses_info: llvm::Bool = ::std::mem::uninitialized();\n                 let r = llvm::LLVMConstRealGetDouble(v, &mut loses_info);\n                 let loses_info = if loses_info == 1 { true } else { false };"}, {"sha": "2bfd3e4ad20e3d29170370a849b4705ccfa3f0f5", "filename": "src/libstd/io/util.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Flibstd%2Fio%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Flibstd%2Fio%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Futil.rs?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -44,6 +44,7 @@ pub fn copy<R: ?Sized, W: ?Sized>(reader: &mut R, writer: &mut W) -> io::Result<\n     where R: Read, W: Write\n {\n     let mut buf = unsafe {\n+        #[allow(deprecated)]\n         let mut buf: [u8; super::DEFAULT_BUF_SIZE] = mem::uninitialized();\n         reader.initializer().initialize(&mut buf);\n         buf"}, {"sha": "3fef7552259c86eb52ac0c38b7d0d370f049f591", "filename": "src/libstd/sys/cloudabi/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fmod.rs?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -1,3 +1,5 @@\n+#![allow(deprecated)] // mem::uninitialized\n+\n use crate::io::ErrorKind;\n use crate::mem;\n "}, {"sha": "3bf9ecf40808be426f49b9f531e95566609780e0", "filename": "src/libstd/sys/sgx/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fmod.rs?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -3,6 +3,8 @@\n //! This module contains the facade (aka platform-specific) implementations of\n //! OS level functionality for Fortanix SGX.\n \n+#![allow(deprecated)]\n+\n use crate::io::ErrorKind;\n use crate::os::raw::c_char;\n use crate::sync::atomic::{AtomicBool, Ordering};"}, {"sha": "14ea68d3788785246dd8458622893daf57a387cd", "filename": "src/libterm/win.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Flibterm%2Fwin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Flibterm%2Fwin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fwin.rs?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -108,6 +108,7 @@ impl<T: Write + Send + 'static> WinConsole<T> {\n         let fg;\n         let bg;\n         unsafe {\n+            #[allow(deprecated)]\n             let mut buffer_info = ::std::mem::uninitialized();\n             if GetConsoleScreenBufferInfo(GetStdHandle(-11i32 as DWORD), &mut buffer_info) != 0 {\n                 fg = bits_to_color(buffer_info.wAttributes);"}, {"sha": "cb857e3bc38d352561278f03ec51216deba01f94", "filename": "src/test/run-make-fulldeps/sanitizer-memory/uninit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2Funinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2Funinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fsanitizer-memory%2Funinit.rs?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -1,6 +1,7 @@\n use std::mem;\n \n fn main() {\n+    #[allow(deprecated)]\n     let xs: [u8; 4] = unsafe { mem::uninitialized() };\n     let y = xs[0] + xs[1];\n }"}, {"sha": "38c34d2dc2e6f8fbc7802b706aa4267a7418d977", "filename": "src/test/run-pass/for-loop-while/for-loop-has-unit-body.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Ffor-loop-has-unit-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Ffor-loop-has-unit-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffor-loop-while%2Ffor-loop-has-unit-body.rs?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -2,6 +2,7 @@\n fn main() {\n     // Check that the tail statement in the body unifies with something\n     for _ in 0..3 {\n+        #[allow(deprecated)]\n         unsafe { std::mem::uninitialized() }\n     }\n "}, {"sha": "d4ce6496cae7733437612843ef850434a1b6d3c2", "filename": "src/test/run-pass/issues/issue-58212.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frun-pass%2Fissues%2Fissue-58212.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frun-pass%2Fissues%2Fissue-58212.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissues%2Fissue-58212.rs?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -4,6 +4,7 @@ trait FromUnchecked {\n \n impl FromUnchecked for [u8; 1] {\n     unsafe fn from_unchecked() {\n+        #[allow(deprecated)]\n         let mut array: Self = std::mem::uninitialized();\n         let _ptr = &mut array as *mut [u8] as *mut u8;\n     }"}, {"sha": "5026ad1ccd4ceae68cd31fdeab74f2c81707d7a5", "filename": "src/test/run-pass/panic-uninitialized-zeroed.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frun-pass%2Fpanic-uninitialized-zeroed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frun-pass%2Fpanic-uninitialized-zeroed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpanic-uninitialized-zeroed.rs?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -3,6 +3,7 @@\n // in a runtime panic.\n \n #![feature(never_type)]\n+#![allow(deprecated)]\n \n use std::{mem, panic};\n "}, {"sha": "773d0ace90ed9dbc25792c4097c68e45768645d1", "filename": "src/test/run-pass/stack-probes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frun-pass%2Fstack-probes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frun-pass%2Fstack-probes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstack-probes.rs?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -49,6 +49,7 @@ fn main() {\n #[allow(unconditional_recursion)]\n fn recurse(array: &[u64]) {\n     unsafe { black_box(array.as_ptr() as u64); }\n+    #[allow(deprecated)]\n     let local: [_; 1024] = unsafe { mem::uninitialized() };\n     recurse(&local);\n }"}, {"sha": "78d8e5e3a5dbf39e9abf8059883df24647bdf652", "filename": "src/test/run-pass/structs-enums/enum-non-c-like-repr-c-and-int.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-non-c-like-repr-c-and-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-non-c-like-repr-c-and-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-non-c-like-repr-c-and-int.rs?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -69,6 +69,7 @@ fn main() {\n     unsafe {\n         // This should be safe, because we don't match on it unless it's fully formed,\n         // and it doesn't have a destructor.\n+        #[allow(deprecated)]\n         let mut dest: MyEnum = mem::uninitialized();\n         while buf.len() > 0 {\n             match parse_my_enum(&mut dest, &mut buf) {"}, {"sha": "1209533efda82097f7564bfa2e4f9294398e83d5", "filename": "src/test/run-pass/structs-enums/enum-non-c-like-repr-c.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-non-c-like-repr-c.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-non-c-like-repr-c.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-non-c-like-repr-c.rs?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -69,6 +69,7 @@ fn main() {\n     unsafe {\n         // This should be safe, because we don't match on it unless it's fully formed,\n         // and it doesn't have a destructor.\n+        #[allow(deprecated)]\n         let mut dest: MyEnum = mem::uninitialized();\n         while buf.len() > 0 {\n             match parse_my_enum(&mut dest, &mut buf) {"}, {"sha": "5dd9c1863d62da2b00b5343e8c4b35d956c59803", "filename": "src/test/run-pass/structs-enums/enum-non-c-like-repr-int.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-non-c-like-repr-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-non-c-like-repr-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fstructs-enums%2Fenum-non-c-like-repr-int.rs?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -65,6 +65,7 @@ fn main() {\n     unsafe {\n         // This should be safe, because we don't match on it unless it's fully formed,\n         // and it doesn't have a destructor.\n+        #[allow(deprecated)]\n         let mut dest: MyEnum = mem::uninitialized();\n         while buf.len() > 0 {\n             match parse_my_enum(&mut dest, &mut buf) {"}, {"sha": "4bc247a3dcab5ba6a13b706e32c710d95e303bf5", "filename": "src/test/run-pass/uninit-empty-types.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frun-pass%2Funinit-empty-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frun-pass%2Funinit-empty-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funinit-empty-types.rs?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -7,6 +7,7 @@ use std::mem;\n #[derive(Clone)]\n struct Foo;\n \n+#[allow(deprecated)]\n pub fn main() {\n     unsafe {\n         let _x: Foo = mem::uninitialized();"}, {"sha": "653c004c04b231c2606ce5f879dca7d4fb0b8d4c", "filename": "src/test/rustdoc/issue-52873.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frustdoc%2Fissue-52873.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Frustdoc%2Fissue-52873.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-52873.rs?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -105,6 +105,7 @@ impl<U: Unsigned, B: Bit> Add<B0> for UInt<U, B> {\n impl<U: Unsigned> Add<U> for UTerm {\n     type Output = U;\n     fn add(self, _: U) -> Self::Output {\n+        #[allow(deprecated)]\n         unsafe { ::std::mem::uninitialized() }\n     }\n }"}, {"sha": "68e5a52e0ac5cba18c9873560dbf5a86768df1b0", "filename": "src/test/ui/const-generics/issue-61422.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissue-61422.rs?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -7,6 +7,7 @@ use std::mem;\n \n fn foo<const SIZE: usize>() {\n     let arr: [u8; SIZE] = unsafe {\n+        #[allow(deprecated)]\n         let mut array: [u8; SIZE] = mem::uninitialized();\n         array\n     };"}, {"sha": "c8540729352b270111be4af7913aa6e94d55972b", "filename": "src/test/ui/issues/issue-48131.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Fui%2Fissues%2Fissue-48131.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Fui%2Fissues%2Fissue-48131.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48131.rs?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -1,6 +1,7 @@\n // This note is annotated because the purpose of the test\n // is to ensure that certain other notes are not generated.\n #![deny(unused_unsafe)] //~ NOTE\n+#![allow(deprecated)]\n \n // (test that no note is generated on this unsafe fn)\n pub unsafe fn a() {"}, {"sha": "6df065b9807f2dff91c3f1c6cc3705c471967851", "filename": "src/test/ui/issues/issue-48131.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Fui%2Fissues%2Fissue-48131.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Fui%2Fissues%2Fissue-48131.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-48131.stderr?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -1,5 +1,5 @@\n error: unnecessary `unsafe` block\n-  --> $DIR/issue-48131.rs:8:9\n+  --> $DIR/issue-48131.rs:9:9\n    |\n LL |         unsafe { /* unnecessary */ }\n    |         ^^^^^^ unnecessary `unsafe` block\n@@ -11,7 +11,7 @@ LL | #![deny(unused_unsafe)]\n    |         ^^^^^^^^^^^^^\n \n error: unnecessary `unsafe` block\n-  --> $DIR/issue-48131.rs:19:13\n+  --> $DIR/issue-48131.rs:20:13\n    |\n LL |             unsafe { /* unnecessary */ }\n    |             ^^^^^^ unnecessary `unsafe` block"}, {"sha": "a5360fa13c4ea22f730ed317413532b976db2976", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.rs?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -1,3 +1,5 @@\n+#![allow(deprecated)]\n+\n enum Void {}\n \n fn main() {"}, {"sha": "25519ab2d6a7d1cfc9130988a68bd7df10b6be6e", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/007d87f1719e2fcf2ff36aef8b6dc866fa276386/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=007d87f1719e2fcf2ff36aef8b6dc866fa276386", "patch": "@@ -1,53 +1,53 @@\n error[E0004]: non-exhaustive patterns: `Err(_)` not covered\n-  --> $DIR/uninhabited-matches-feature-gated.rs:5:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:7:19\n    |\n LL |     let _ = match x {\n    |                   ^ pattern `Err(_)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `&Void` is non-empty\n-  --> $DIR/uninhabited-matches-feature-gated.rs:10:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:12:19\n    |\n LL |     let _ = match x {};\n    |                   ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `(Void,)` is non-empty\n-  --> $DIR/uninhabited-matches-feature-gated.rs:13:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:15:19\n    |\n LL |     let _ = match x {};\n    |                   ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: type `[Void; 1]` is non-empty\n-  --> $DIR/uninhabited-matches-feature-gated.rs:16:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:18:19\n    |\n LL |     let _ = match x {};\n    |                   ^\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `&[_]` not covered\n-  --> $DIR/uninhabited-matches-feature-gated.rs:19:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:21:19\n    |\n LL |     let _ = match x {\n    |                   ^ pattern `&[_]` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0004]: non-exhaustive patterns: `Err(_)` not covered\n-  --> $DIR/uninhabited-matches-feature-gated.rs:27:19\n+  --> $DIR/uninhabited-matches-feature-gated.rs:29:19\n    |\n LL |     let _ = match x {\n    |                   ^ pattern `Err(_)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n error[E0005]: refutable pattern in local binding: `Err(_)` not covered\n-  --> $DIR/uninhabited-matches-feature-gated.rs:32:9\n+  --> $DIR/uninhabited-matches-feature-gated.rs:34:9\n    |\n LL |     let Ok(x) = x;\n    |         ^^^^^ pattern `Err(_)` not covered"}]}