{"sha": "38e23e8f7b97f7add3b9b868766251b0aa060a14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM4ZTIzZThmN2I5N2Y3YWRkM2I5Yjg2ODc2NjI1MWIwYWEwNjBhMTQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-27T21:32:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-01-27T21:32:58Z"}, "message": "Auto merge of #31243 - Manishearth:rollup, r=Manishearth\n\n- Successful merges: #30689, #31186, #31219, #31222, #31226\n- Failed merges:", "tree": {"sha": "0784d6f8f9b059b616e8895974723fb64cfbec9a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0784d6f8f9b059b616e8895974723fb64cfbec9a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/38e23e8f7b97f7add3b9b868766251b0aa060a14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/38e23e8f7b97f7add3b9b868766251b0aa060a14", "html_url": "https://github.com/rust-lang/rust/commit/38e23e8f7b97f7add3b9b868766251b0aa060a14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/38e23e8f7b97f7add3b9b868766251b0aa060a14/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2f4c5c596524ceb7b7dcbf6e87105c81a2fa7ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2f4c5c596524ceb7b7dcbf6e87105c81a2fa7ac", "html_url": "https://github.com/rust-lang/rust/commit/b2f4c5c596524ceb7b7dcbf6e87105c81a2fa7ac"}, {"sha": "5e7dfa7094c8f0e8d892fd489e28edb8c7d0d07e", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e7dfa7094c8f0e8d892fd489e28edb8c7d0d07e", "html_url": "https://github.com/rust-lang/rust/commit/5e7dfa7094c8f0e8d892fd489e28edb8c7d0d07e"}], "stats": {"total": 88, "additions": 78, "deletions": 10}, "files": [{"sha": "e4870aa6a898032210f87bbd9af33ce045735edf", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/38e23e8f7b97f7add3b9b868766251b0aa060a14/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/38e23e8f7b97f7add3b9b868766251b0aa060a14/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=38e23e8f7b97f7add3b9b868766251b0aa060a14", "patch": "@@ -6,6 +6,7 @@ links to the major sections:\n \n * [Feature Requests](#feature-requests)\n * [Bug Reports](#bug-reports)\n+* [The Build System](#the-build-system)\n * [Pull Requests](#pull-requests)\n * [Writing Documentation](#writing-documentation)\n * [Issue Triage](#issue-triage)\n@@ -77,6 +78,66 @@ to do this is to invoke `rustc` like this:\n $ RUST_BACKTRACE=1 rustc ...\n ```\n \n+## The Build System\n+\n+Rust's build system allows you to bootstrap the compiler, run tests &\n+benchmarks, generate documentation, install a fresh build of Rust, and more.\n+It's your best friend when working on Rust, allowing you to compile & test\n+your contributions before submission.\n+\n+All the configuration for the build system lives in [the `mk` directory][mkdir]\n+in the project root. It can be hard to follow in places, as it uses some\n+advanced Make features which make for some challenging reading. If you have\n+questions on the build system internals, try asking in\n+[`#rust-internals`][pound-rust-internals].\n+\n+[mkdir]: https://github.com/rust-lang/rust/tree/master/mk/\n+\n+### Configuration\n+\n+Before you can start building the compiler you need to configure the build for\n+your system. In most cases, that will just mean using the defaults provided\n+for Rust. Configuring involves invoking the `configure` script in the project\n+root.\n+\n+```\n+./configure\n+```\n+\n+There are large number of options accepted by this script to alter the\n+configuration used later in the build process. Some options to note:\n+\n+- `--enable-debug` - Build a debug version of the compiler (disables optimizations)\n+- `--enable-optimize` - Enable optimizations (can be used with `--enable-debug`\n+    to make a debug build with optimizations)\n+- `--disable-valgrind-rpass` - Don't run tests with valgrind\n+- `--enable-clang` - Prefer clang to gcc for building dependencies (e.g., LLVM)\n+- `--enable-ccache` - Invoke clang/gcc with ccache to re-use object files between builds\n+- `--enable-compiler-docs` - Build compiler documentation\n+\n+To see a full list of options, run `./configure --help`.\n+\n+### Useful Targets\n+\n+Some common make targets are:\n+\n+- `make rustc-stage1` - build up to (and including) the first stage. For most\n+  cases we don't need to build the stage2 compiler, so we can save time by not\n+  building it. The stage1 compiler is a fully functioning compiler and\n+  (probably) will be enough to determine if your change works as expected.\n+- `make check` - build the full compiler & run all tests (takes a while). This\n+  is what gets run by the continuous integration system against your pull\n+  request. You should run this before submitting to make sure your tests pass\n+  & everything builds in the correct manner.\n+- `make check-stage1-std NO_REBUILD=1` - test the standard library without\n+  rebuilding the entire compiler\n+- `make check TESTNAME=<path-to-test-file>.rs` - Run a single test file\n+- `make check-stage1-rpass TESTNAME=<path-to-test-file>.rs` - Run a single\n+  rpass test with the stage1 compiler (this will be quicker than running the\n+  command above as we only build the stage1 compiler, not the entire thing).\n+  You can also leave off the `-rpass` to run all stage1 test types.\n+- `make check-stage1-coretest` - Run stage1 tests in `libcore`.\n+\n ## Pull Requests\n \n Pull requests are the primary mechanism we use to change Rust. GitHub itself"}, {"sha": "0c9ed0bf1228125746cb7110b570755ff123c16d", "filename": "src/doc/book/crates-and-modules.md", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/38e23e8f7b97f7add3b9b868766251b0aa060a14/src%2Fdoc%2Fbook%2Fcrates-and-modules.md", "raw_url": "https://github.com/rust-lang/rust/raw/38e23e8f7b97f7add3b9b868766251b0aa060a14/src%2Fdoc%2Fbook%2Fcrates-and-modules.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fcrates-and-modules.md?ref=38e23e8f7b97f7add3b9b868766251b0aa060a14", "patch": "@@ -567,10 +567,11 @@ to it as \"sayings\". Similarly, the first `use` statement pulls in the\n `ja_greetings` as opposed to simply `greetings`. This can help to avoid\n ambiguity when importing similarly-named items from different places.\n \n-The second `use` statement uses a star glob to bring in _all_ symbols from the\n-`sayings::japanese::farewells` module. As you can see we can later refer to\n+The second `use` statement uses a star glob to bring in all public symbols from\n+the `sayings::japanese::farewells` module. As you can see we can later refer to\n the Japanese `goodbye` function with no module qualifiers. This kind of glob\n-should be used sparingly.\n+should be used sparingly. It\u2019s worth noting that it only imports the public\n+symbols, even if the code doing the globbing is in the same module.\n \n The third `use` statement bears more explanation. It's using \"brace expansion\"\n globbing to compress three `use` statements into one (this sort of syntax"}, {"sha": "6782bdb4985ecc61f277551a1159944dce8d7eca", "filename": "src/doc/book/syntax-index.md", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/38e23e8f7b97f7add3b9b868766251b0aa060a14/src%2Fdoc%2Fbook%2Fsyntax-index.md", "raw_url": "https://github.com/rust-lang/rust/raw/38e23e8f7b97f7add3b9b868766251b0aa060a14/src%2Fdoc%2Fbook%2Fsyntax-index.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fsyntax-index.md?ref=38e23e8f7b97f7add3b9b868766251b0aa060a14", "patch": "@@ -2,7 +2,7 @@\n \n ## Keywords\n \n-* `as`: primitive casting.  See [Casting Between Types (`as`)].\n+* `as`: primitive casting, or disambiguating the specific trait containing an item.  See [Casting Between Types (`as`)], [Universal Function Call Syntax (Angle-bracket Form)], [Associated Types].\n * `break`: break out of loop.  See [Loops (Ending Iteration Early)].\n * `const`: constant items and constant raw pointers.  See [`const` and `static`], [Raw Pointers].\n * `continue`: continue to next loop iteration.  See [Loops (Ending Iteration Early)].\n@@ -115,8 +115,11 @@\n * `::path`: path relative to the crate root (*i.e.* an explicitly absolute path).  See [Crates and Modules (Re-exporting with `pub use`)].\n * `self::path`: path relative to the current module (*i.e.* an explicitly relative path).  See [Crates and Modules (Re-exporting with `pub use`)].\n * `super::path`: path relative to the parent of the current module.  See [Crates and Modules (Re-exporting with `pub use`)].\n-* `type::ident`: associated constants, functions, and types.  See [Associated Types].\n+* `type::ident`, `<type as trait>::ident`: associated constants, functions, and types.  See [Associated Types].\n * `<type>::\u2026`: associated item for a type which cannot be directly named (*e.g.* `<&T>::\u2026`, `<[T]>::\u2026`, *etc.*).  See [Associated Types].\n+* `trait::method(\u2026)`: disambiguating a method call by naming the trait which defines it. See [Universal Function Call Syntax].\n+* `type::method(\u2026)`: disambiguating a method call by naming the type for which it's defined. See [Universal Function Call Syntax].\n+* `<type as trait>::method(\u2026)`: disambiguating a method call by naming the trait _and_ type. See [Universal Function Call Syntax (Angle-bracket Form)].\n \n <!-- Generics -->\n \n@@ -132,7 +135,8 @@\n <!-- Constraints -->\n \n * `T: U`: generic parameter `T` constrained to types that implement `U`.  See [Traits].\n-* `T: 'a`: generic type `T` must outlive lifetime `'a`.\n+* `T: 'a`: generic type `T` must outlive lifetime `'a`. When we say that a type 'outlives' the lifetime, we mean that it cannot transitively contain any references with lifetimes shorter than `'a`.\n+* `T : 'static`: The generic type `T` contains no borrowed references other than `'static` ones.\n * `'b: 'a`: generic lifetime `'b` must outlive lifetime `'a`.\n * `T: ?Sized`: allow generic type parameter to be a dynamically-sized type.  See [Unsized Types (`?Sized`)].\n * `'a + trait`, `trait + trait`: compound type constraint.  See [Traits (Multiple Trait Bounds)].\n@@ -234,6 +238,8 @@\n [Traits (`where` clause)]: traits.html#where-clause\n [Traits (Multiple Trait Bounds)]: traits.html#multiple-trait-bounds\n [Traits]: traits.html\n+[Universal Function Call Syntax]: ufcs.html\n+[Universal Function Call Syntax (Angle-bracket Form)]: ufcs.html#angle-bracket-form\n [Unsafe]: unsafe.html\n [Unsized Types (`?Sized`)]: unsized-types.html#sized\n [Variable Bindings]: variable-bindings.html"}, {"sha": "46fdee2bb5a9e77068038107708a12b8735630f9", "filename": "src/doc/reference.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/38e23e8f7b97f7add3b9b868766251b0aa060a14/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/38e23e8f7b97f7add3b9b868766251b0aa060a14/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=38e23e8f7b97f7add3b9b868766251b0aa060a14", "patch": "@@ -2095,7 +2095,7 @@ along with their default settings.  [Compiler\n plugins](book/compiler-plugins.html#lint-plugins) can provide additional lint checks.\n \n ```{.ignore}\n-mod m1 {\n+pub mod m1 {\n     // Missing documentation is ignored here\n     #[allow(missing_docs)]\n     pub fn undocumented_one() -> i32 { 1 }\n@@ -2115,9 +2115,9 @@ check on and off:\n \n ```{.ignore}\n #[warn(missing_docs)]\n-mod m2{\n+pub mod m2{\n     #[allow(missing_docs)]\n-    mod nested {\n+    pub mod nested {\n         // Missing documentation is ignored here\n         pub fn undocumented_one() -> i32 { 1 }\n \n@@ -2137,7 +2137,7 @@ that lint check:\n \n ```{.ignore}\n #[forbid(missing_docs)]\n-mod m3 {\n+pub mod m3 {\n     // Attempting to toggle warning signals an error here\n     #[allow(missing_docs)]\n     /// Returns 2."}]}