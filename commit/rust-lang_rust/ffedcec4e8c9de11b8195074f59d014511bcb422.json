{"sha": "ffedcec4e8c9de11b8195074f59d014511bcb422", "node_id": "C_kwDOAAsO6NoAKGZmZWRjZWM0ZThjOWRlMTFiODE5NTA3NGY1OWQwMTQ1MTFiY2I0MjI", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-30T13:57:18Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-05-01T15:02:01Z"}, "message": "resolve: Pass full `Finalize` in nearly all cases", "tree": {"sha": "5ab9da1f16591160c239badf8377000ea7b99acc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ab9da1f16591160c239badf8377000ea7b99acc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffedcec4e8c9de11b8195074f59d014511bcb422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffedcec4e8c9de11b8195074f59d014511bcb422", "html_url": "https://github.com/rust-lang/rust/commit/ffedcec4e8c9de11b8195074f59d014511bcb422", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffedcec4e8c9de11b8195074f59d014511bcb422/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "900607f49a60e76ca5ca793048723b9ccc2bcd63", "url": "https://api.github.com/repos/rust-lang/rust/commits/900607f49a60e76ca5ca793048723b9ccc2bcd63", "html_url": "https://github.com/rust-lang/rust/commit/900607f49a60e76ca5ca793048723b9ccc2bcd63"}], "stats": {"total": 38, "additions": 18, "deletions": 20}, "files": [{"sha": "0f1c4f38bc74f193d1196a21079eb43f1615f0b0", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ffedcec4e8c9de11b8195074f59d014511bcb422/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffedcec4e8c9de11b8195074f59d014511bcb422/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=ffedcec4e8c9de11b8195074f59d014511bcb422", "patch": "@@ -279,7 +279,7 @@ impl<'a> Resolver<'a> {\n         mut ident: Ident,\n         ns: Namespace,\n         parent_scope: &ParentScope<'a>,\n-        finalize_full: Option<Finalize>,\n+        finalize: Option<Finalize>,\n         ribs: &[Rib<'a>],\n         unusable_binding: Option<&'a NameBinding<'a>>,\n     ) -> Option<LexicalScopeBinding<'a>> {\n@@ -302,7 +302,6 @@ impl<'a> Resolver<'a> {\n         let normalized_ident = Ident { span: normalized_span, ..ident };\n \n         // Walk backwards up the ribs in scope.\n-        let finalize = finalize_full.map(|finalize| finalize.path_span);\n         let mut module = self.graph_root;\n         for i in (0..ribs.len()).rev() {\n             debug!(\"walk rib\\n{:?}\", ribs[i].bindings);\n@@ -316,7 +315,7 @@ impl<'a> Resolver<'a> {\n                     i,\n                     rib_ident,\n                     *res,\n-                    finalize,\n+                    finalize.map(|finalize| finalize.path_span),\n                     *original_rib_ident_def,\n                     ribs,\n                 )));\n@@ -354,7 +353,7 @@ impl<'a> Resolver<'a> {\n         }\n         self.early_resolve_ident_in_lexical_scope(\n             orig_ident,\n-            ScopeSet::Late(ns, module, finalize_full.map(|finalize| finalize.node_id)),\n+            ScopeSet::Late(ns, module, finalize.map(|finalize| finalize.node_id)),\n             parent_scope,\n             finalize,\n             finalize.is_some(),\n@@ -376,7 +375,7 @@ impl<'a> Resolver<'a> {\n         orig_ident: Ident,\n         scope_set: ScopeSet<'a>,\n         parent_scope: &ParentScope<'a>,\n-        finalize: Option<Span>,\n+        finalize: Option<Finalize>,\n         force: bool,\n         last_import_segment: bool,\n         unusable_binding: Option<&'a NameBinding<'a>>,\n@@ -742,7 +741,7 @@ impl<'a> Resolver<'a> {\n         ident: Ident,\n         ns: Namespace,\n         parent_scope: &ParentScope<'a>,\n-        finalize: Option<Span>,\n+        finalize: Option<Finalize>,\n         // We are resolving a last import segment during import validation.\n         last_import_segment: bool,\n         // This binding should be ignored during in-module resolution, so that we don't get\n@@ -768,7 +767,7 @@ impl<'a> Resolver<'a> {\n         mut ident: Ident,\n         ns: Namespace,\n         parent_scope: &ParentScope<'a>,\n-        finalize: Option<Span>,\n+        finalize: Option<Finalize>,\n         last_import_segment: bool,\n         unusable_binding: Option<&'a NameBinding<'a>>,\n     ) -> Result<&'a NameBinding<'a>, (Determinacy, Weak)> {\n@@ -808,7 +807,7 @@ impl<'a> Resolver<'a> {\n         ident: Ident,\n         ns: Namespace,\n         parent_scope: &ParentScope<'a>,\n-        finalize: Option<Span>,\n+        finalize: Option<Finalize>,\n         last_import_segment: bool,\n         unusable_binding: Option<&'a NameBinding<'a>>,\n     ) -> Result<&'a NameBinding<'a>, Determinacy> {\n@@ -835,7 +834,7 @@ impl<'a> Resolver<'a> {\n         ns: Namespace,\n         parent_scope: &ParentScope<'a>,\n         restricted_shadowing: bool,\n-        finalize: Option<Span>,\n+        finalize: Option<Finalize>,\n         last_import_segment: bool,\n         unusable_binding: Option<&'a NameBinding<'a>>,\n     ) -> Result<&'a NameBinding<'a>, (Determinacy, Weak)> {\n@@ -901,7 +900,7 @@ impl<'a> Resolver<'a> {\n         let resolution =\n             self.resolution(module, key).try_borrow_mut().map_err(|_| (Determined, Weak::No))?; // This happens when there is a cycle of imports.\n \n-        if let Some(path_span) = finalize {\n+        if let Some(Finalize { path_span, .. }) = finalize {\n             // If the primary binding is unusable, search further and return the shadowed glob\n             // binding if it exists. What we really want here is having two separate scopes in\n             // a module - one for non-globs and one for globs, but until that's done use this\n@@ -1391,13 +1390,12 @@ impl<'a> Resolver<'a> {\n         path: &[Segment],\n         opt_ns: Option<Namespace>, // `None` indicates a module path in import\n         parent_scope: &ParentScope<'a>,\n-        finalize_full: Option<Finalize>,\n+        finalize: Option<Finalize>,\n         ribs: Option<&PerNS<Vec<Rib<'a>>>>,\n         unusable_binding: Option<&'a NameBinding<'a>>,\n     ) -> PathResult<'a> {\n-        debug!(\"resolve_path(path={:?}, opt_ns={:?}, finalize={:?})\", path, opt_ns, finalize_full);\n+        debug!(\"resolve_path(path={:?}, opt_ns={:?}, finalize={:?})\", path, opt_ns, finalize);\n \n-        let finalize = finalize_full.map(|finalize| finalize.path_span);\n         let mut module = None;\n         let mut allow_super = true;\n         let mut second_binding = None;\n@@ -1507,7 +1505,7 @@ impl<'a> Resolver<'a> {\n                         ident,\n                         ns,\n                         parent_scope,\n-                        finalize_full,\n+                        finalize,\n                         &ribs[ns],\n                         unusable_binding,\n                     ) {\n@@ -1566,7 +1564,7 @@ impl<'a> Resolver<'a> {\n                     } else if res == Res::Err {\n                         return PathResult::NonModule(PartialRes::new(Res::Err));\n                     } else if opt_ns.is_some() && (is_last || maybe_assoc) {\n-                        self.lint_if_path_starts_with_module(finalize_full, path, second_binding);\n+                        self.lint_if_path_starts_with_module(finalize, path, second_binding);\n                         return PathResult::NonModule(PartialRes::with_unresolved_segments(\n                             res,\n                             path.len() - i - 1,\n@@ -1609,7 +1607,7 @@ impl<'a> Resolver<'a> {\n             }\n         }\n \n-        self.lint_if_path_starts_with_module(finalize_full, path, second_binding);\n+        self.lint_if_path_starts_with_module(finalize, path, second_binding);\n \n         PathResult::Module(match module {\n             Some(module) => module,"}, {"sha": "b5b7f1418f1cfbd39a4284920f0b1738a88ddd93", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffedcec4e8c9de11b8195074f59d014511bcb422/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffedcec4e8c9de11b8195074f59d014511bcb422/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=ffedcec4e8c9de11b8195074f59d014511bcb422", "patch": "@@ -717,7 +717,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     ident,\n                     ns,\n                     &import.parent_scope,\n-                    Some(import.span),\n+                    finalize,\n                     true,\n                     target_bindings[ns].get(),\n                 );\n@@ -778,7 +778,7 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                         ident,\n                         ns,\n                         &import.parent_scope,\n-                        Some(import.span),\n+                        finalize,\n                         false,\n                         None,\n                     );"}, {"sha": "815bff5b23e74d8f6e94ab4a24ded22070e00838", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ffedcec4e8c9de11b8195074f59d014511bcb422/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffedcec4e8c9de11b8195074f59d014511bcb422/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=ffedcec4e8c9de11b8195074f59d014511bcb422", "patch": "@@ -708,7 +708,7 @@ impl<'a> Resolver<'a> {\n                 ident,\n                 ScopeSet::Macro(kind),\n                 &parent_scope,\n-                Some(ident.span),\n+                Some(Finalize::new(ast::CRATE_NODE_ID, ident.span)),\n                 true,\n                 false,\n                 None,\n@@ -751,7 +751,7 @@ impl<'a> Resolver<'a> {\n                 ident,\n                 ScopeSet::Macro(MacroKind::Attr),\n                 &parent_scope,\n-                Some(ident.span),\n+                Some(Finalize::new(ast::CRATE_NODE_ID, ident.span)),\n                 true,\n                 false,\n                 None,"}]}