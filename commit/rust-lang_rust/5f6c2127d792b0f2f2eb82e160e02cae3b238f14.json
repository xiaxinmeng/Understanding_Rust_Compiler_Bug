{"sha": "5f6c2127d792b0f2f2eb82e160e02cae3b238f14", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmNmMyMTI3ZDc5MmIwZjJmMmViODJlMTYwZTAyY2FlM2IyMzhmMTQ=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-03-28T01:29:31Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-05-20T15:12:49Z"}, "message": "Factored out part of `conv_object_ty_poly_trait_ref` method.", "tree": {"sha": "a138ea3970c36a4c0a47895a0ae585411305b025", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a138ea3970c36a4c0a47895a0ae585411305b025"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f6c2127d792b0f2f2eb82e160e02cae3b238f14", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f6c2127d792b0f2f2eb82e160e02cae3b238f14", "html_url": "https://github.com/rust-lang/rust/commit/5f6c2127d792b0f2f2eb82e160e02cae3b238f14", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f6c2127d792b0f2f2eb82e160e02cae3b238f14/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16692f7b1ad8623f784d3d3b60814ebfa468fe62", "url": "https://api.github.com/repos/rust-lang/rust/commits/16692f7b1ad8623f784d3d3b60814ebfa468fe62", "html_url": "https://github.com/rust-lang/rust/commit/16692f7b1ad8623f784d3d3b60814ebfa468fe62"}], "stats": {"total": 40, "additions": 25, "deletions": 15}, "files": [{"sha": "e1dc0b10c9f9e03d83376821d47998c1e43a9a20", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5f6c2127d792b0f2f2eb82e160e02cae3b238f14/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f6c2127d792b0f2f2eb82e160e02cae3b238f14/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=5f6c2127d792b0f2f2eb82e160e02cae3b238f14", "patch": "@@ -965,6 +965,30 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         ty::ExistentialTraitRef::erase_self_ty(self.tcx(), trait_ref)\n     }\n \n+    fn expand_trait_refs(&self,\n+        trait_refs: impl IntoIterator<Item = (ty::PolyTraitRef<'tcx>, Span)>\n+    ) -> Vec<DefId> {\n+        let tcx = self.tcx();\n+\n+        // Expand trait aliases recursively and check that only one regular (non-auto) trait\n+        // is used.\n+        let expanded_traits = traits::expand_trait_refs(tcx, trait_refs);\n+        let (auto_traits, regular_traits): (Vec<_>, Vec<_>) =\n+            expanded_traits.partition(|i| tcx.trait_is_auto(i.trait_ref.def_id()));\n+        if regular_traits.len() > 1 {\n+            let extra_trait = &regular_traits[1];\n+            let mut err = struct_span_err!(tcx.sess, extra_trait.top_level_span, E0225,\n+                \"only auto traits can be used as additional traits in a trait object\");\n+            err.span_label(extra_trait.span, \"non-auto additional trait\");\n+            if extra_trait.span != extra_trait.top_level_span {\n+                err.span_label(extra_trait.top_level_span, \"expanded from this trait alias\");\n+            }\n+            err.emit();\n+        }\n+\n+        auto_traits.into_iter().map(|i| i.trait_ref.def_id()).collect()\n+    }\n+\n     fn conv_object_ty_poly_trait_ref(&self,\n         span: Span,\n         trait_bounds: &[hir::PolyTraitRef],\n@@ -1000,19 +1024,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         }\n         bound_trait_refs.push((principal, trait_bounds[0].span));\n \n-        let expanded_traits = traits::expand_trait_refs(tcx, bound_trait_refs);\n-        let (auto_traits, regular_traits): (Vec<_>, Vec<_>) =\n-            expanded_traits.partition(|i| tcx.trait_is_auto(i.trait_ref.def_id()));\n-        if regular_traits.len() > 1 {\n-            let extra_trait = &regular_traits[1];\n-            let mut err = struct_span_err!(tcx.sess, extra_trait.top_level_span, E0225,\n-                \"only auto traits can be used as additional traits in a trait object\");\n-            err.span_label(extra_trait.span, \"non-auto additional trait\");\n-            if extra_trait.span != extra_trait.top_level_span {\n-                err.span_label(extra_trait.top_level_span, \"expanded from this trait alias\");\n-            }\n-            err.emit();\n-        }\n+        let mut auto_traits = self.expand_trait_refs(bound_trait_refs);\n \n         // Check that there are no gross object safety violations;\n         // most importantly, that the supertraits don't contain `Self`,\n@@ -1156,8 +1168,6 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n \n         // De-duplicate auto traits so that, e.g., `dyn Trait + Send + Send` is the same as\n         // `dyn Trait + Send`.\n-        let mut auto_traits: Vec<_> =\n-            auto_traits.into_iter().map(|i| i.trait_ref.def_id()).collect();\n         auto_traits.sort();\n         auto_traits.dedup();\n         debug!(\"auto_traits: {:?}\", auto_traits);"}]}