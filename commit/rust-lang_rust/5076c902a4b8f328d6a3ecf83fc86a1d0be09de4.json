{"sha": "5076c902a4b8f328d6a3ecf83fc86a1d0be09de4", "node_id": "C_kwDOAAsO6NoAKDUwNzZjOTAyYTRiOGYzMjhkNmEzZWNmODNmYzg2YTFkMGJlMDlkZTQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-06T18:17:40Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-08-07T15:56:12Z"}, "message": "test: skip terminfo parsing in Miri", "tree": {"sha": "47816f65e2fdea201b8ca1e43a3ae28adbec50a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47816f65e2fdea201b8ca1e43a3ae28adbec50a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5076c902a4b8f328d6a3ecf83fc86a1d0be09de4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5076c902a4b8f328d6a3ecf83fc86a1d0be09de4", "html_url": "https://github.com/rust-lang/rust/commit/5076c902a4b8f328d6a3ecf83fc86a1d0be09de4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5076c902a4b8f328d6a3ecf83fc86a1d0be09de4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f5d8d49eb6111931091f700d07518cd2b80bc18", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f5d8d49eb6111931091f700d07518cd2b80bc18", "html_url": "https://github.com/rust-lang/rust/commit/1f5d8d49eb6111931091f700d07518cd2b80bc18"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "355859019714b5e17f86e3717ffae6d05fa022b1", "filename": "library/test/src/term/terminfo/mod.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5076c902a4b8f328d6a3ecf83fc86a1d0be09de4/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5076c902a4b8f328d6a3ecf83fc86a1d0be09de4/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fterm%2Fterminfo%2Fmod.rs?ref=5076c902a4b8f328d6a3ecf83fc86a1d0be09de4", "patch": "@@ -80,6 +80,17 @@ impl TermInfo {\n \n     /// Creates a TermInfo for the named terminal.\n     pub(crate) fn from_name(name: &str) -> Result<TermInfo, Error> {\n+        if cfg!(miri) {\n+            // Avoid all the work of parsing the terminfo (it's pretty slow under Miri), and just\n+            // assume that the standard color codes work (like e.g. the 'colored' crate).\n+            return Ok(TermInfo {\n+                names: Default::default(),\n+                bools: Default::default(),\n+                numbers: Default::default(),\n+                strings: Default::default(),\n+            });\n+        }\n+\n         get_dbpath_for_term(name)\n             .ok_or_else(|| {\n                 Error::IoError(io::Error::new(io::ErrorKind::NotFound, \"terminfo file not found\"))\n@@ -119,13 +130,22 @@ pub(crate) struct TerminfoTerminal<T> {\n impl<T: Write + Send> Terminal for TerminfoTerminal<T> {\n     fn fg(&mut self, color: color::Color) -> io::Result<bool> {\n         let color = self.dim_if_necessary(color);\n+        if cfg!(miri) && color < 8 {\n+            // The Miri logic for this only works for the most basic 8 colors, which we just assume\n+            // the terminal will support. (`num_colors` is always 0 in Miri, so higher colors will\n+            // just fail. But libtest doesn't use any higher colors anyway.)\n+            return write!(self.out, \"\\x1B[3{color}m\").and(Ok(true));\n+        }\n         if self.num_colors > color {\n             return self.apply_cap(\"setaf\", &[Param::Number(color as i32)]);\n         }\n         Ok(false)\n     }\n \n     fn reset(&mut self) -> io::Result<bool> {\n+        if cfg!(miri) {\n+            return write!(self.out, \"\\x1B[0m\").and(Ok(true));\n+        }\n         // are there any terminals that have color/attrs and not sgr0?\n         // Try falling back to sgr, then op\n         let cmd = match [\"sgr0\", \"sgr\", \"op\"].iter().find_map(|cap| self.ti.strings.get(*cap)) {"}]}