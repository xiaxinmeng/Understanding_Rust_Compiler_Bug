{"sha": "7c8ae608dc65665039f3aeb01548d675953a2a68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjOGFlNjA4ZGM2NTY2NTAzOWYzYWViMDE1NDhkNjc1OTUzYTJhNjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-09T10:54:05Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-09-09T10:54:05Z"}, "message": "Auto merge of #28300 - Manishearth:crate_err, r=eddyb\n\nPartially fixes #22750\n\nI'll write a test for this when I figure out how to.\n\nr? @eddyb\n\ncc @steveklabnik", "tree": {"sha": "66dffaac82f0b1a3fafdc823078562c63d049433", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66dffaac82f0b1a3fafdc823078562c63d049433"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c8ae608dc65665039f3aeb01548d675953a2a68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c8ae608dc65665039f3aeb01548d675953a2a68", "html_url": "https://github.com/rust-lang/rust/commit/7c8ae608dc65665039f3aeb01548d675953a2a68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c8ae608dc65665039f3aeb01548d675953a2a68/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ef923e380009a7075dfb57017952ce45f5fa327", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ef923e380009a7075dfb57017952ce45f5fa327", "html_url": "https://github.com/rust-lang/rust/commit/9ef923e380009a7075dfb57017952ce45f5fa327"}, {"sha": "c65d33819ccf141d40bd9bf30784b36bf83c124b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c65d33819ccf141d40bd9bf30784b36bf83c124b", "html_url": "https://github.com/rust-lang/rust/commit/c65d33819ccf141d40bd9bf30784b36bf83c124b"}], "stats": {"total": 150, "additions": 138, "deletions": 12}, "files": [{"sha": "7ec39ac851574dda434a6cbc1163d0d73777e95f", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/7c8ae608dc65665039f3aeb01548d675953a2a68/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8ae608dc65665039f3aeb01548d675953a2a68/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=7c8ae608dc65665039f3aeb01548d675953a2a68", "patch": "@@ -78,6 +78,7 @@ use rustc_front::hir;\n use rustc_front::print::pprust;\n \n use middle::def;\n+use middle::def_id::DefId;\n use middle::infer;\n use middle::region;\n use middle::subst;\n@@ -226,6 +227,8 @@ pub trait ErrorReporting<'tcx> {\n \n     fn report_type_error(&self, trace: TypeTrace<'tcx>, terr: &ty::TypeError<'tcx>);\n \n+    fn check_and_note_conflicting_crates(&self, terr: &ty::TypeError<'tcx>, sp: Span);\n+\n     fn report_and_explain_type_error(&self,\n                                      trace: TypeTrace<'tcx>,\n                                      terr: &ty::TypeError<'tcx>);\n@@ -484,13 +487,60 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                  expected_found_str,\n                  terr);\n \n+        self.check_and_note_conflicting_crates(terr, trace.origin.span());\n+\n         match trace.origin {\n             infer::MatchExpressionArm(_, arm_span) =>\n                 self.tcx.sess.span_note(arm_span, \"match arm with an incompatible type\"),\n             _ => ()\n         }\n     }\n \n+    /// Adds a note if the types come from similarly named crates\n+    fn check_and_note_conflicting_crates(&self, terr: &ty::TypeError<'tcx>, sp: Span) {\n+        let report_path_match = |did1: DefId, did2: DefId| {\n+            // Only external crates, if either is from a local\n+            // module we could have false positives\n+            if !(did1.is_local() || did2.is_local()) && did1.krate != did2.krate {\n+                let exp_path = self.tcx.with_path(did1,\n+                                                  |p| p.map(|x| x.to_string())\n+                                                       .collect::<Vec<_>>());\n+                let found_path = self.tcx.with_path(did2,\n+                                                    |p| p.map(|x| x.to_string())\n+                                                         .collect::<Vec<_>>());\n+                // We compare strings because PathMod and PathName can be different\n+                // for imported and non-imported crates\n+                if exp_path == found_path {\n+                    let crate_name = self.tcx.sess.cstore\n+                                         .get_crate_data(did1.krate).name();\n+                    self.tcx.sess.span_note(sp, &format!(\"Perhaps two different versions \\\n+                                                          of crate `{}` are being used?\",\n+                                                          crate_name));\n+                }\n+            }\n+        };\n+        match *terr {\n+            ty::TypeError::Sorts(ref exp_found) => {\n+                // if they are both \"path types\", there's a chance of ambiguity\n+                // due to different versions of the same crate\n+                match (&exp_found.expected.sty, &exp_found.found.sty) {\n+                    (&ty::TyEnum(ref exp_adt, _), &ty::TyEnum(ref found_adt, _)) |\n+                    (&ty::TyStruct(ref exp_adt, _), &ty::TyStruct(ref found_adt, _)) |\n+                    (&ty::TyEnum(ref exp_adt, _), &ty::TyStruct(ref found_adt, _)) |\n+                    (&ty::TyStruct(ref exp_adt, _), &ty::TyEnum(ref found_adt, _)) => {\n+                        report_path_match(exp_adt.did, found_adt.did);\n+                    },\n+                    _ => ()\n+                }\n+            },\n+            ty::TypeError::Traits(ref exp_found) => {\n+                self.tcx.sess.note(\"errrr0\");\n+                report_path_match(exp_found.expected, exp_found.found);\n+            },\n+            _ => () // FIXME(#22750) handle traits and stuff\n+        }\n+    }\n+\n     fn report_and_explain_type_error(&self,\n                                      trace: TypeTrace<'tcx>,\n                                      terr: &ty::TypeError<'tcx>) {"}, {"sha": "99d8c5c9301ec8e491d8a257ad4dcab25174b0ed", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/7c8ae608dc65665039f3aeb01548d675953a2a68/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8ae608dc65665039f3aeb01548d675953a2a68/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7c8ae608dc65665039f3aeb01548d675953a2a68", "patch": "@@ -5311,6 +5311,16 @@ impl<'tcx> TyS<'tcx> {\n impl<'tcx> fmt::Display for TypeError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         use self::TypeError::*;\n+        fn report_maybe_different(f: &mut fmt::Formatter,\n+                                  expected: String, found: String) -> fmt::Result {\n+            // A naive approach to making sure that we're not reporting silly errors such as:\n+            // (expected closure, found closure).\n+            if expected == found {\n+                write!(f, \"expected {}, found a different {}\", expected, found)\n+            } else {\n+                write!(f, \"expected {}, found {}\", expected, found)\n+            }\n+        }\n \n         match *self {\n             CyclicTy => write!(f, \"cyclic type of infinite size\"),\n@@ -5371,20 +5381,15 @@ impl<'tcx> fmt::Display for TypeError<'tcx> {\n                            found bound lifetime parameter {}\", br)\n             }\n             Sorts(values) => tls::with(|tcx| {\n-                // A naive approach to making sure that we're not reporting silly errors such as:\n-                // (expected closure, found closure).\n-                let expected_str = values.expected.sort_string(tcx);\n-                let found_str = values.found.sort_string(tcx);\n-                if expected_str == found_str {\n-                    write!(f, \"expected {}, found a different {}\", expected_str, found_str)\n-                } else {\n-                    write!(f, \"expected {}, found {}\", expected_str, found_str)\n-                }\n+                report_maybe_different(f, values.expected.sort_string(tcx),\n+                                       values.found.sort_string(tcx))\n             }),\n             Traits(values) => tls::with(|tcx| {\n-                write!(f, \"expected trait `{}`, found trait `{}`\",\n-                       tcx.item_path_str(values.expected),\n-                       tcx.item_path_str(values.found))\n+                report_maybe_different(f,\n+                                       format!(\"trait `{}`\",\n+                                               tcx.item_path_str(values.expected)),\n+                                       format!(\"trait `{}`\",\n+                                               tcx.item_path_str(values.found)))\n             }),\n             BuiltinBoundsMismatch(values) => {\n                 if values.expected.is_empty() {"}, {"sha": "70f7cac94de6c10a4897c328d70be5d980025ce9", "filename": "src/test/auxiliary/crate_a1.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/7c8ae608dc65665039f3aeb01548d675953a2a68/src%2Ftest%2Fauxiliary%2Fcrate_a1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8ae608dc65665039f3aeb01548d675953a2a68/src%2Ftest%2Fauxiliary%2Fcrate_a1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrate_a1.rs?ref=7c8ae608dc65665039f3aeb01548d675953a2a68", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Foo;\n+\n+pub trait Bar{}\n+\n+pub fn bar() -> Box<Bar> {\n+    unimplemented!()\n+}\n+\n+\n+pub fn try_foo(x: Foo){}\n+pub fn try_bar(x: Box<Bar>){}"}, {"sha": "d801f25ba2ee087901d82c8360d790ae7e285c3e", "filename": "src/test/auxiliary/crate_a2.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7c8ae608dc65665039f3aeb01548d675953a2a68/src%2Ftest%2Fauxiliary%2Fcrate_a2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8ae608dc65665039f3aeb01548d675953a2a68/src%2Ftest%2Fauxiliary%2Fcrate_a2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcrate_a2.rs?ref=7c8ae608dc65665039f3aeb01548d675953a2a68", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct Foo;\n+\n+pub trait Bar{}\n+\n+pub fn bar() -> Box<Bar> {\n+    unimplemented!()\n+}"}, {"sha": "014fa35c309e6cb79ce9f542733fe7d971e829cd", "filename": "src/test/compile-fail/type-mismatch-same-crate-name.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/7c8ae608dc65665039f3aeb01548d675953a2a68/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-same-crate-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c8ae608dc65665039f3aeb01548d675953a2a68/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-same-crate-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-mismatch-same-crate-name.rs?ref=7c8ae608dc65665039f3aeb01548d675953a2a68", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:crate_a1.rs\n+// aux-build:crate_a2.rs\n+\n+// This tests the extra note reported when a type error deals with\n+// seemingly identical types.\n+// The main use case of this error is when there are two crates\n+// (generally different versions of the same crate) with the same name\n+// causing a type mismatch. Here, we simulate that error using block-scoped\n+// aliased `extern crate` declarations.\n+\n+fn main() {\n+    let foo2 = {extern crate crate_a2 as a; a::Foo};\n+    let bar2 = {extern crate crate_a2 as a; a::bar()};\n+    {\n+        extern crate crate_a1 as a;\n+        a::try_foo(foo2); //~ ERROR mismatched types\n+                          //~^ HELP run\n+                          //~^^ NOTE Perhaps two different versions of crate `crate_a1`\n+        a::try_bar(bar2); //~ ERROR mismatched types\n+                          //~^ HELP run\n+                          //~^^ NOTE Perhaps two different versions of crate `crate_a1`\n+    }\n+}"}]}