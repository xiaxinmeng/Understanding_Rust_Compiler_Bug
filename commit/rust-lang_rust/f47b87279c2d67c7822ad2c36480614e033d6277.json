{"sha": "f47b87279c2d67c7822ad2c36480614e033d6277", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0N2I4NzI3OWMyZDY3Yzc4MjJhZDJjMzY0ODA2MTRlMDMzZDYyNzc=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-21T23:17:16Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2019-05-22T04:00:04Z"}, "message": "Migrate from recursion to iterate on qualify consts visitor impl", "tree": {"sha": "9ce702367c7e4eb7609e3b33682c673ab2579068", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ce702367c7e4eb7609e3b33682c673ab2579068"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f47b87279c2d67c7822ad2c36480614e033d6277", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f47b87279c2d67c7822ad2c36480614e033d6277", "html_url": "https://github.com/rust-lang/rust/commit/f47b87279c2d67c7822ad2c36480614e033d6277", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f47b87279c2d67c7822ad2c36480614e033d6277/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50a0defd5a93523067ef239936cc2e0755220904", "url": "https://api.github.com/repos/rust-lang/rust/commits/50a0defd5a93523067ef239936cc2e0755220904", "html_url": "https://github.com/rust-lang/rust/commit/50a0defd5a93523067ef239936cc2e0755220904"}], "stats": {"total": 94, "additions": 48, "deletions": 46}, "files": [{"sha": "c9800b1825cd21be4ed421d24ff0a302afafb6e9", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 48, "deletions": 46, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/f47b87279c2d67c7822ad2c36480614e033d6277/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47b87279c2d67c7822ad2c36480614e033d6277/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=f47b87279c2d67c7822ad2c36480614e033d6277", "patch": "@@ -930,58 +930,60 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                     context: PlaceContext,\n                     location: Location) {\n         debug!(\"visit_place: place={:?} context={:?} location={:?}\", place, context, location);\n-        self.super_place(place, context, location);\n-        match *place {\n-            Place::Base(PlaceBase::Local(_)) => {}\n-            Place::Base(PlaceBase::Static(box Static{ kind: StaticKind::Promoted(_), .. })) => {\n-                unreachable!()\n-            }\n-            Place::Base(PlaceBase::Static(box Static{ kind: StaticKind::Static(def_id), .. })) => {\n-                if self.tcx\n-                       .get_attrs(def_id)\n-                       .iter()\n-                       .any(|attr| attr.check_name(sym::thread_local)) {\n-                    if self.mode != Mode::Fn {\n-                        span_err!(self.tcx.sess, self.span, E0625,\n-                                  \"thread-local statics cannot be \\\n-                                   accessed at compile-time\");\n-                    }\n-                    return;\n+        place.iterate(|place_base, place_projections| {\n+            match place_base {\n+                PlaceBase::Local(_) => {}\n+                PlaceBase::Static(box Static{ kind: StaticKind::Promoted(_), .. }) => {\n+                    unreachable!()\n                 }\n+                PlaceBase::Static(box Static{ kind: StaticKind::Static(def_id), .. }) => {\n+                    if self.tcx\n+                           .get_attrs(*def_id)\n+                           .iter()\n+                           .any(|attr| attr.check_name(sym::thread_local)) {\n+                        if self.mode != Mode::Fn {\n+                            span_err!(self.tcx.sess, self.span, E0625,\n+                                      \"thread-local statics cannot be \\\n+                                       accessed at compile-time\");\n+                        }\n+                        return;\n+                    }\n \n-                // Only allow statics (not consts) to refer to other statics.\n-                if self.mode == Mode::Static || self.mode == Mode::StaticMut {\n-                    if self.mode == Mode::Static && context.is_mutating_use() {\n-                        // this is not strictly necessary as miri will also bail out\n-                        // For interior mutability we can't really catch this statically as that\n-                        // goes through raw pointers and intermediate temporaries, so miri has\n-                        // to catch this anyway\n-                        self.tcx.sess.span_err(\n-                            self.span,\n-                            \"cannot mutate statics in the initializer of another static\",\n-                        );\n+                    // Only allow statics (not consts) to refer to other statics.\n+                    if self.mode == Mode::Static || self.mode == Mode::StaticMut {\n+                        if self.mode == Mode::Static && context.is_mutating_use() {\n+                            // this is not strictly necessary as miri will also bail out\n+                            // For interior mutability we can't really catch this statically as that\n+                            // goes through raw pointers and intermediate temporaries, so miri has\n+                            // to catch this anyway\n+                            self.tcx.sess.span_err(\n+                                self.span,\n+                                \"cannot mutate statics in the initializer of another static\",\n+                            );\n+                        }\n+                        return;\n                     }\n-                    return;\n-                }\n-                unleash_miri!(self);\n+                    unleash_miri!(self);\n \n-                if self.mode != Mode::Fn {\n-                    let mut err = struct_span_err!(self.tcx.sess, self.span, E0013,\n-                                                   \"{}s cannot refer to statics, use \\\n-                                                    a constant instead\", self.mode);\n-                    if self.tcx.sess.teach(&err.get_code().unwrap()) {\n-                        err.note(\n-                            \"Static and const variables can refer to other const variables. But a \\\n-                             const variable cannot refer to a static variable.\"\n-                        );\n-                        err.help(\n-                            \"To fix this, the value can be extracted as a const and then used.\"\n-                        );\n+                    if self.mode != Mode::Fn {\n+                        let mut err = struct_span_err!(self.tcx.sess, self.span, E0013,\n+                                                       \"{}s cannot refer to statics, use \\\n+                                                        a constant instead\", self.mode);\n+                        if self.tcx.sess.teach(&err.get_code().unwrap()) {\n+                            err.note(\n+                                \"Static and const variables can refer to other const variables. \\\n+                                 But a const variable cannot refer to a static variable.\"\n+                            );\n+                            err.help(\n+                                \"To fix this, the value can be extracted as a const and then used.\"\n+                            );\n+                        }\n+                        err.emit()\n                     }\n-                    err.emit()\n                 }\n             }\n-            Place::Projection(ref proj) => {\n+\n+            for proj in place_projections {\n                 match proj.elem {\n                     ProjectionElem::Deref => {\n                         if context.is_mutating_use() {\n@@ -1041,7 +1043,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Checker<'a, 'tcx> {\n                     }\n                 }\n             }\n-        }\n+        });\n     }\n \n     fn visit_operand(&mut self, operand: &Operand<'tcx>, location: Location) {"}]}