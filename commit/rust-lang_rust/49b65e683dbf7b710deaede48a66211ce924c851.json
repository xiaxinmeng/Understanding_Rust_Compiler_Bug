{"sha": "49b65e683dbf7b710deaede48a66211ce924c851", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5YjY1ZTY4M2RiZjdiNzEwZGVhZWRlNDhhNjYyMTFjZTkyNGM4NTE=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-03-30T18:14:02Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2019-03-30T18:14:02Z"}, "message": "Don't ignore git for LLVM info", "tree": {"sha": "8a82f25ef908aeb1b5125f42a7d9a0d158f3e4d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a82f25ef908aeb1b5125f42a7d9a0d158f3e4d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49b65e683dbf7b710deaede48a66211ce924c851", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49b65e683dbf7b710deaede48a66211ce924c851", "html_url": "https://github.com/rust-lang/rust/commit/49b65e683dbf7b710deaede48a66211ce924c851", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49b65e683dbf7b710deaede48a66211ce924c851/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "105692c3ad281c63bf0f75a26a66bb9cff5b4553", "url": "https://api.github.com/repos/rust-lang/rust/commits/105692c3ad281c63bf0f75a26a66bb9cff5b4553", "html_url": "https://github.com/rust-lang/rust/commit/105692c3ad281c63bf0f75a26a66bb9cff5b4553"}], "stats": {"total": 41, "additions": 22, "deletions": 19}, "files": [{"sha": "e42b073322e2883e38ffa8f44c0a3b7c5ebeeabd", "filename": "src/bootstrap/channel.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/49b65e683dbf7b710deaede48a66211ce924c851/src%2Fbootstrap%2Fchannel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b65e683dbf7b710deaede48a66211ce924c851/src%2Fbootstrap%2Fchannel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fchannel.rs?ref=49b65e683dbf7b710deaede48a66211ce924c851", "patch": "@@ -11,7 +11,6 @@ use std::process::Command;\n use build_helper::output;\n \n use crate::Build;\n-use crate::config::Config;\n \n // The version number\n pub const CFG_RELEASE_NUM: &str = \"1.35.0\";\n@@ -27,20 +26,20 @@ struct Info {\n }\n \n impl GitInfo {\n-    pub fn new(config: &Config, dir: &Path) -> GitInfo {\n+    pub fn new(ignore_git: bool, dir: &Path) -> GitInfo {\n         // See if this even begins to look like a git dir\n-        if config.ignore_git || !dir.join(\".git\").exists() {\n+        if ignore_git || !dir.join(\".git\").exists() {\n             return GitInfo { inner: None }\n         }\n \n         // Make sure git commands work\n-        let out = Command::new(\"git\")\n-                          .arg(\"rev-parse\")\n-                          .current_dir(dir)\n-                          .output()\n-                          .expect(\"failed to spawn git\");\n-        if !out.status.success() {\n-            return GitInfo { inner: None }\n+        match Command::new(\"git\")\n+            .arg(\"rev-parse\")\n+            .current_dir(dir)\n+            .output()\n+        {\n+            Ok(ref out) if out.status.success() => {}\n+            _ => return GitInfo { inner: None },\n         }\n \n         // Ok, let's scrape some info"}, {"sha": "2394ae7fb79139292a312c7dbc4d8997d02ecb7b", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/49b65e683dbf7b710deaede48a66211ce924c851/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b65e683dbf7b710deaede48a66211ce924c851/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=49b65e683dbf7b710deaede48a66211ce924c851", "patch": "@@ -360,14 +360,18 @@ impl Build {\n             }\n             None => false,\n         };\n-        let rust_info = channel::GitInfo::new(&config, &src);\n-        let cargo_info = channel::GitInfo::new(&config, &src.join(\"src/tools/cargo\"));\n-        let rls_info = channel::GitInfo::new(&config, &src.join(\"src/tools/rls\"));\n-        let clippy_info = channel::GitInfo::new(&config, &src.join(\"src/tools/clippy\"));\n-        let miri_info = channel::GitInfo::new(&config, &src.join(\"src/tools/miri\"));\n-        let rustfmt_info = channel::GitInfo::new(&config, &src.join(\"src/tools/rustfmt\"));\n-        let in_tree_llvm_info = channel::GitInfo::new(&config, &src.join(\"src/llvm-project\"));\n-        let emscripten_llvm_info = channel::GitInfo::new(&config, &src.join(\"src/llvm-emscripten\"));\n+\n+        let ignore_git = config.ignore_git;\n+        let rust_info = channel::GitInfo::new(ignore_git, &src);\n+        let cargo_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/cargo\"));\n+        let rls_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/rls\"));\n+        let clippy_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/clippy\"));\n+        let miri_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/miri\"));\n+        let rustfmt_info = channel::GitInfo::new(ignore_git, &src.join(\"src/tools/rustfmt\"));\n+\n+        // we always try to use git for LLVM builds\n+        let in_tree_llvm_info = channel::GitInfo::new(false, &src.join(\"src/llvm-project\"));\n+        let emscripten_llvm_info = channel::GitInfo::new(false, &src.join(\"src/llvm-emscripten\"));\n \n         let mut build = Build {\n             initial_rustc: config.initial_rustc.clone(),"}, {"sha": "23775a91e4ce00622a95463cbc2552b324d33f91", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49b65e683dbf7b710deaede48a66211ce924c851/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49b65e683dbf7b710deaede48a66211ce924c851/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=49b65e683dbf7b710deaede48a66211ce924c851", "patch": "@@ -235,7 +235,7 @@ pub fn prepare_tool_cargo(\n     cargo.env(\"CFG_VERSION\", builder.rust_version());\n     cargo.env(\"CFG_RELEASE_NUM\", channel::CFG_RELEASE_NUM);\n \n-    let info = GitInfo::new(&builder.config, &dir);\n+    let info = GitInfo::new(builder.config.ignore_git, &dir);\n     if let Some(sha) = info.sha() {\n         cargo.env(\"CFG_COMMIT_HASH\", sha);\n     }"}]}