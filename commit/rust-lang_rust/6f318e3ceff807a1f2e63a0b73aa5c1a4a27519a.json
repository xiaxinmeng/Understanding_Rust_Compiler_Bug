{"sha": "6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMzE4ZTNjZWZmODA3YTFmMmU2M2EwYjczYWE1YzFhNGEyNzUxOWE=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-09-07T12:48:52Z"}, "committer": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-09-07T12:48:52Z"}, "message": "propagate errors about failing to rewrite a macro", "tree": {"sha": "c7ed50a06acdd1227734588def14a9477bcde09e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7ed50a06acdd1227734588def14a9477bcde09e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEipi5pnt+pUplKNfibVYg2QghATMFAluSc7QACgkQbVYg2Qgh\nATNIfQgAliczJJgiUbZ2xBeo1Lw0Vtw2Ne3artujnTY8UoTgn5+zLJ1AsZAmNQao\n4FdSdzorh5POuhY00XuS5oXtJCyLjKfPSM2FZ1O6kEfUpQac1SQ2yf9ffA8wNe6F\n3mgkLg2E9z5JU0U6hW0xcItk1puYJsdU3/QlxUe3ePjiz2x31XIOZL3DENxXEme5\nHuWnm6Kygox0apsyidmCEzpm4nLJl6wx8fjb6cqw6Ask8loYnQYUtgeVeLVMoMPL\nj6aF7mbN5HCMjbUgrZQk8wGhozDwBnKMBETbNDhkqpxkmg6xdw6wj8UAauR0kGxn\n8GPtyENgbbijYKFvoXeM3vBWhY+BHw==\n=exSs\n-----END PGP SIGNATURE-----", "payload": "tree c7ed50a06acdd1227734588def14a9477bcde09e\nparent 6ada5b51ccfd99a91055dfc3b411e83f2e0514d5\nauthor St\u00e9phane Campinas <stephane.campinas@gmail.com> 1536324532 +0200\ncommitter St\u00e9phane Campinas <stephane.campinas@gmail.com> 1536324532 +0200\n\npropagate errors about failing to rewrite a macro\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a", "html_url": "https://github.com/rust-lang/rust/commit/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ada5b51ccfd99a91055dfc3b411e83f2e0514d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ada5b51ccfd99a91055dfc3b411e83f2e0514d5", "html_url": "https://github.com/rust-lang/rust/commit/6ada5b51ccfd99a91055dfc3b411e83f2e0514d5"}], "stats": {"total": 232, "additions": 228, "deletions": 4}, "files": [{"sha": "722898b81504df6f39e7b6905371834cbd8be555", "filename": "src/expr.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a", "patch": "@@ -522,6 +522,9 @@ pub fn rewrite_block_with_visitor(\n     let inner_attrs = attrs.map(inner_attributes);\n     let label_str = rewrite_label(label);\n     visitor.visit_block(block, inner_attrs.as_ref().map(|a| &**a), has_braces);\n+    if visitor.macro_rewrite_failure {\n+        context.macro_rewrite_failure.replace(true);\n+    }\n     Some(format!(\"{}{}{}\", prefix, label_str, visitor.buffer))\n }\n "}, {"sha": "9dfc4c584cd6c9d00164efb4b2be532b690603e6", "filename": "src/items.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a", "patch": "@@ -747,6 +747,10 @@ pub fn format_impl(\n \n             visitor.format_missing(item.span.hi() - BytePos(1));\n \n+            if visitor.macro_rewrite_failure {\n+                context.macro_rewrite_failure.replace(true);\n+            }\n+\n             let inner_indent_str = visitor.block_indent.to_string_with_newline(context.config);\n             let outer_indent_str = offset.block_only().to_string_with_newline(context.config);\n \n@@ -1106,6 +1110,10 @@ pub fn format_trait(context: &RewriteContext, item: &ast::Item, offset: Indent)\n \n             visitor.format_missing(item.span.hi() - BytePos(1));\n \n+            if visitor.macro_rewrite_failure {\n+                context.macro_rewrite_failure.replace(true);\n+            }\n+\n             let inner_indent_str = visitor.block_indent.to_string_with_newline(context.config);\n             let outer_indent_str = offset.block_only().to_string_with_newline(context.config);\n "}, {"sha": "6e52b63363d419295c56fc0fa8288519ffe5b4d0", "filename": "src/macros.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a", "patch": "@@ -69,6 +69,9 @@ impl Rewrite for ast::Item {\n         visitor.block_indent = shape.indent;\n         visitor.last_pos = self.span().lo();\n         visitor.visit_item(self);\n+        if visitor.macro_rewrite_failure {\n+            context.macro_rewrite_failure.replace(true);\n+        }\n         Some(visitor.buffer)\n     }\n }\n@@ -406,7 +409,15 @@ pub fn rewrite_macro_def(\n         \";\",\n         |branch| branch.span.lo(),\n         |branch| branch.span.hi(),\n-        |branch| branch.rewrite(context, arm_shape, multi_branch_style),\n+        |branch| match branch.rewrite(context, arm_shape, multi_branch_style) {\n+            Some(v) => Some(v),\n+            // if the rewrite returned None because a macro could not be rewritten, then return the\n+            // original body\n+            None if *context.macro_rewrite_failure.borrow() == true => {\n+                Some(context.snippet(branch.body).trim().to_string())\n+            }\n+            None => None,\n+        },\n         context.snippet_provider.span_after(span, \"{\"),\n         span.hi(),\n         false,"}, {"sha": "c622de6ef48985babf9aec9b597674342849592f", "filename": "src/visitor.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a", "patch": "@@ -97,7 +97,8 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 if contains_skip(get_attrs_from_stmt(stmt)) {\n                     self.push_skipped_with_span(stmt.span());\n                 } else {\n-                    let rewrite = stmt.rewrite(&self.get_context(), self.shape());\n+                    let shape = self.shape().clone();\n+                    let rewrite = self.with_context(|ctx| stmt.rewrite(&ctx, shape));\n                     self.push_rewrite(stmt.span(), rewrite)\n                 }\n             }\n@@ -350,11 +351,14 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 let where_span_end = snippet\n                     .find_uncommented(\"{\")\n                     .map(|x| BytePos(x as u32) + source!(self, item.span).lo());\n-                let rw = format_impl(&self.get_context(), item, self.block_indent, where_span_end);\n+                let block_indent = self.block_indent.clone();\n+                let rw =\n+                    self.with_context(|ctx| format_impl(&ctx, item, block_indent, where_span_end));\n                 self.push_rewrite(item.span, rw);\n             }\n             ast::ItemKind::Trait(..) => {\n-                let rw = format_trait(&self.get_context(), item, self.block_indent);\n+                let block_indent = self.block_indent.clone();\n+                let rw = self.with_context(|ctx| format_trait(&ctx, item, block_indent));\n                 self.push_rewrite(item.span, rw);\n             }\n             ast::ItemKind::TraitAlias(ref generics, ref generic_bounds) => {"}, {"sha": "8d7bb9414eb7b06d1398b5966d241b8df10235a5", "filename": "tests/source/issue-2977/impl.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/tests%2Fsource%2Fissue-2977%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/tests%2Fsource%2Fissue-2977%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2977%2Fimpl.rs?ref=6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a", "patch": "@@ -0,0 +1,44 @@\n+macro_rules! atomic_bits {\n+    // the println macro cannot be rewritten because of the asm macro\n+    ($type:ty, $ldrex:expr, $strex:expr) => {\n+        impl AtomicBits for $type {\n+            unsafe fn load_excl(address: usize) -> Self {\n+                let raw: $type;\n+                asm!($ldrex\n+                     : \"=r\"(raw)\n+                     : \"r\"(address)\n+                     :\n+                     : \"volatile\");\n+                raw\n+            }\n+\n+            unsafe fn store_excl(self, address: usize) -> bool {\n+                let status: $type;\n+                println!(\"{}\",\n+                         status);\n+                status == 0\n+            }\n+        }\n+    };\n+\n+    // the println macro should be rewritten here\n+    ($type:ty) => {\n+        fn some_func(self) {\n+            let status: $type;\n+            println!(\"{}\", status);\n+        }\n+    };\n+\n+    // unrewritale macro in func\n+    ($type:ty, $ldrex:expr) => {\n+        unsafe fn load_excl(address: usize) -> Self {\n+            let raw: $type;\n+            asm!($ldrex\n+                 : \"=r\"(raw)\n+                 : \"r\"(address)\n+                 :\n+                 : \"volatile\");\n+            raw\n+        }\n+    }\n+}"}, {"sha": "ae20668cd75f29d3d8c603f17d900a518b216b1c", "filename": "tests/source/issue-2977/trait.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/tests%2Fsource%2Fissue-2977%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/tests%2Fsource%2Fissue-2977%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-2977%2Ftrait.rs?ref=6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a", "patch": "@@ -0,0 +1,44 @@\n+macro_rules! atomic_bits {\n+    // the println macro cannot be rewritten because of the asm macro\n+    ($type:ty, $ldrex:expr, $strex:expr) => {\n+        trait $type {\n+            unsafe fn load_excl(address: usize) -> Self {\n+                let raw: $type;\n+                asm!($ldrex\n+                     : \"=r\"(raw)\n+                     : \"r\"(address)\n+                     :\n+                     : \"volatile\");\n+                raw\n+            }\n+\n+            unsafe fn store_excl(self, address: usize) -> bool {\n+                let status: $type;\n+                println!(\"{}\",\n+                         status);\n+                status == 0\n+            }\n+        }\n+    };\n+\n+    // the println macro should be rewritten here\n+    ($type:ty) => {\n+        fn some_func(self) {\n+            let status: $type;\n+            println!(\"{}\", status);\n+        }\n+    };\n+\n+    // unrewritale macro in func\n+    ($type:ty, $ldrex:expr) => {\n+        unsafe fn load_excl(address: usize) -> Self {\n+            let raw: $type;\n+            asm!($ldrex\n+                 : \"=r\"(raw)\n+                 : \"r\"(address)\n+                 :\n+                 : \"volatile\");\n+            raw\n+        }\n+    }\n+}"}, {"sha": "d376e370c72e9184dfe8c06923402263030858fc", "filename": "tests/target/issue-2977/block.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/tests%2Ftarget%2Fissue-2977%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/tests%2Ftarget%2Fissue-2977%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2977%2Fblock.rs?ref=6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a", "patch": "@@ -0,0 +1,11 @@\n+macro_rules! atomic_bits {\n+    ($ldrex:expr) => {\n+        execute(|| {\n+            asm!($ldrex\n+                 : \"=r\"(raw)\n+                 : \"r\"(address)\n+                 :\n+                 : \"volatile\");\n+        })\n+    };\n+}"}, {"sha": "8d7bb9414eb7b06d1398b5966d241b8df10235a5", "filename": "tests/target/issue-2977/impl.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/tests%2Ftarget%2Fissue-2977%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/tests%2Ftarget%2Fissue-2977%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2977%2Fimpl.rs?ref=6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a", "patch": "@@ -0,0 +1,44 @@\n+macro_rules! atomic_bits {\n+    // the println macro cannot be rewritten because of the asm macro\n+    ($type:ty, $ldrex:expr, $strex:expr) => {\n+        impl AtomicBits for $type {\n+            unsafe fn load_excl(address: usize) -> Self {\n+                let raw: $type;\n+                asm!($ldrex\n+                     : \"=r\"(raw)\n+                     : \"r\"(address)\n+                     :\n+                     : \"volatile\");\n+                raw\n+            }\n+\n+            unsafe fn store_excl(self, address: usize) -> bool {\n+                let status: $type;\n+                println!(\"{}\",\n+                         status);\n+                status == 0\n+            }\n+        }\n+    };\n+\n+    // the println macro should be rewritten here\n+    ($type:ty) => {\n+        fn some_func(self) {\n+            let status: $type;\n+            println!(\"{}\", status);\n+        }\n+    };\n+\n+    // unrewritale macro in func\n+    ($type:ty, $ldrex:expr) => {\n+        unsafe fn load_excl(address: usize) -> Self {\n+            let raw: $type;\n+            asm!($ldrex\n+                 : \"=r\"(raw)\n+                 : \"r\"(address)\n+                 :\n+                 : \"volatile\");\n+            raw\n+        }\n+    }\n+}"}, {"sha": "857065ca93f7ab89e9d063e8537f53cd224b9cb3", "filename": "tests/target/issue-2977/item.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/tests%2Ftarget%2Fissue-2977%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/tests%2Ftarget%2Fissue-2977%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2977%2Fitem.rs?ref=6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a", "patch": "@@ -0,0 +1,11 @@\n+macro_rules! atomic_bits {\n+    ($ldrex:expr) => {\n+        some_macro!(pub fn foo() {\n+            asm!($ldrex\n+                 : \"=r\"(raw)\n+                 : \"r\"(address)\n+                 :\n+                 : \"volatile\");\n+        })\n+    };\n+}"}, {"sha": "ae20668cd75f29d3d8c603f17d900a518b216b1c", "filename": "tests/target/issue-2977/trait.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/tests%2Ftarget%2Fissue-2977%2Ftrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a/tests%2Ftarget%2Fissue-2977%2Ftrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-2977%2Ftrait.rs?ref=6f318e3ceff807a1f2e63a0b73aa5c1a4a27519a", "patch": "@@ -0,0 +1,44 @@\n+macro_rules! atomic_bits {\n+    // the println macro cannot be rewritten because of the asm macro\n+    ($type:ty, $ldrex:expr, $strex:expr) => {\n+        trait $type {\n+            unsafe fn load_excl(address: usize) -> Self {\n+                let raw: $type;\n+                asm!($ldrex\n+                     : \"=r\"(raw)\n+                     : \"r\"(address)\n+                     :\n+                     : \"volatile\");\n+                raw\n+            }\n+\n+            unsafe fn store_excl(self, address: usize) -> bool {\n+                let status: $type;\n+                println!(\"{}\",\n+                         status);\n+                status == 0\n+            }\n+        }\n+    };\n+\n+    // the println macro should be rewritten here\n+    ($type:ty) => {\n+        fn some_func(self) {\n+            let status: $type;\n+            println!(\"{}\", status);\n+        }\n+    };\n+\n+    // unrewritale macro in func\n+    ($type:ty, $ldrex:expr) => {\n+        unsafe fn load_excl(address: usize) -> Self {\n+            let raw: $type;\n+            asm!($ldrex\n+                 : \"=r\"(raw)\n+                 : \"r\"(address)\n+                 :\n+                 : \"volatile\");\n+            raw\n+        }\n+    }\n+}"}]}