{"sha": "b1315be010f0d9f67ee4794cb57f7d1baa88a30d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxMzE1YmUwMTBmMGQ5ZjY3ZWU0Nzk0Y2I1N2Y3ZDFiYWE4OGEzMGQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-10-17T10:31:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-17T10:31:37Z"}, "message": "Merge #6262\n\n6262: Do not spawn redundant hints r=SomeoneToIgnore a=popzxc\n\nCloses #5206\r\n\r\nThis is a second part of the fix (first was #5997).\r\n\r\nThis PR adds a new method to the `CompletionContext`: `no_completion_required`. If this method returns `true`, it essentially means that user is unlikely to expect any hints from the IDE at this cursor position.\r\n\r\nCurrently, checks for the following cases were added:\r\n\r\n- Previous item is `fn`: user creates a new function, names of existing functions won't be helpful. Exception for this case is `impl Foo for Bar` -- we must suggest trait function names.\r\n- User entered `for _ i<|>`: it's obviously going to be `in` keyword, any hints here will be confusing.\r\n\r\nMore checks may be added there later, but currently I've only figured two cases.\r\n\r\n![no_redundant_hints](https://user-images.githubusercontent.com/12111581/96332088-da4d2a00-106a-11eb-89a1-1159ece18f9d.png)\r\n\r\n\n\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>", "tree": {"sha": "b4259ce1810c3cd6c2bea62bae499415b764728d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4259ce1810c3cd6c2bea62bae499415b764728d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1315be010f0d9f67ee4794cb57f7d1baa88a30d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfisgJCRBK7hj4Ov3rIwAAdHIIAFcsRt8UHaaFmhkyX11cxwsM\nHSIE9u7AJ2KEms34wRbObLHKPd/DJ95AikVTJ8CXAAMU6quZkDpF3vI9Rw2WUlte\nQ7EQKR/rJ8I8Rq/RfbozvtgwGQNMsEdO+utqivFTTbyXhIcnxc5IRwj/SHKZBUJM\n6v8KByvg7+fcZaDi+674Peue3NzyBaagy6nK+RAMQWVrlrcv2+oK+7mR6LTHnC5p\nl1Mk/M2snjQ/ojYFchELkTcrCjB3nlWfAn7Po/x3slYeuCE9MQakEiCDJ9C4gITW\naCM92Cl5dvHycujfGVt9ZTHBBkna7tpGXQFGICDOlTZ291lcK+j/TwKBAm9luxU=\n=fCBE\n-----END PGP SIGNATURE-----\n", "payload": "tree b4259ce1810c3cd6c2bea62bae499415b764728d\nparent 59483c217662fc5d89ef9da1cb93760e14a48418\nparent 99c435939c941fe5216c39bc136769098abbbfea\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1602930697 +0000\ncommitter GitHub <noreply@github.com> 1602930697 +0000\n\nMerge #6262\n\n6262: Do not spawn redundant hints r=SomeoneToIgnore a=popzxc\n\nCloses #5206\r\n\r\nThis is a second part of the fix (first was #5997).\r\n\r\nThis PR adds a new method to the `CompletionContext`: `no_completion_required`. If this method returns `true`, it essentially means that user is unlikely to expect any hints from the IDE at this cursor position.\r\n\r\nCurrently, checks for the following cases were added:\r\n\r\n- Previous item is `fn`: user creates a new function, names of existing functions won't be helpful. Exception for this case is `impl Foo for Bar` -- we must suggest trait function names.\r\n- User entered `for _ i<|>`: it's obviously going to be `in` keyword, any hints here will be confusing.\r\n\r\nMore checks may be added there later, but currently I've only figured two cases.\r\n\r\n![no_redundant_hints](https://user-images.githubusercontent.com/12111581/96332088-da4d2a00-106a-11eb-89a1-1159ece18f9d.png)\r\n\r\n\n\nCo-authored-by: Igor Aleksanov <popzxc@yandex.ru>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1315be010f0d9f67ee4794cb57f7d1baa88a30d", "html_url": "https://github.com/rust-lang/rust/commit/b1315be010f0d9f67ee4794cb57f7d1baa88a30d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1315be010f0d9f67ee4794cb57f7d1baa88a30d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "59483c217662fc5d89ef9da1cb93760e14a48418", "url": "https://api.github.com/repos/rust-lang/rust/commits/59483c217662fc5d89ef9da1cb93760e14a48418", "html_url": "https://github.com/rust-lang/rust/commit/59483c217662fc5d89ef9da1cb93760e14a48418"}, {"sha": "99c435939c941fe5216c39bc136769098abbbfea", "url": "https://api.github.com/repos/rust-lang/rust/commits/99c435939c941fe5216c39bc136769098abbbfea", "html_url": "https://github.com/rust-lang/rust/commit/99c435939c941fe5216c39bc136769098abbbfea"}], "stats": {"total": 136, "additions": 131, "deletions": 5}, "files": [{"sha": "69e875014f19c7adc8369bdfad4d77b9a09a6491", "filename": "crates/ide/src/completion.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b1315be010f0d9f67ee4794cb57f7d1baa88a30d/crates%2Fide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1315be010f0d9f67ee4794cb57f7d1baa88a30d/crates%2Fide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion.rs?ref=b1315be010f0d9f67ee4794cb57f7d1baa88a30d", "patch": "@@ -112,6 +112,11 @@ pub(crate) fn completions(\n ) -> Option<Completions> {\n     let ctx = CompletionContext::new(db, position, config)?;\n \n+    if ctx.no_completion_required() {\n+        // No work required here.\n+        return None;\n+    }\n+\n     let mut acc = Completions::default();\n     complete_attribute::complete_attribute(&mut acc, &ctx);\n     complete_fn_param::complete_fn_param(&mut acc, &ctx);\n@@ -157,6 +162,23 @@ mod tests {\n         panic!(\"completion detail not found: {}\", expected.detail)\n     }\n \n+    fn check_no_completion(ra_fixture: &str) {\n+        let (analysis, position) = fixture::position(ra_fixture);\n+        let config = CompletionConfig::default();\n+        analysis.completions(&config, position).unwrap();\n+\n+        let completions: Option<Vec<String>> = analysis\n+            .completions(&config, position)\n+            .unwrap()\n+            .and_then(|completions| if completions.is_empty() { None } else { Some(completions) })\n+            .map(|completions| {\n+                completions.into_iter().map(|completion| format!(\"{:?}\", completion)).collect()\n+            });\n+\n+        // `assert_eq` instead of `assert!(completions.is_none())` to get the list of completions if test will panic.\n+        assert_eq!(completions, None, \"Completions were generated, but weren't expected\");\n+    }\n+\n     #[test]\n     fn test_completion_detail_from_macro_generated_struct_fn_doc_attr() {\n         check_detail_and_documentation(\n@@ -208,4 +230,31 @@ mod tests {\n             DetailAndDocumentation { detail: \"fn foo(&self)\", documentation: \" Do the foo\" },\n         );\n     }\n+\n+    #[test]\n+    fn test_no_completions_required() {\n+        // There must be no hint for 'in' keyword.\n+        check_no_completion(\n+            r#\"\n+            fn foo() {\n+                for i i<|>\n+            }\n+            \"#,\n+        );\n+        // After 'in' keyword hints may be spawned.\n+        check_detail_and_documentation(\n+            r#\"\n+            /// Do the foo\n+            fn foo() -> &'static str { \"foo\" }\n+\n+            fn bar() {\n+                for c in fo<|>\n+            }\n+            \"#,\n+            DetailAndDocumentation {\n+                detail: \"fn foo() -> &'static str\",\n+                documentation: \"Do the foo\",\n+            },\n+        );\n+    }\n }"}, {"sha": "d9f90477cb084969213ab43ce87e57b37e68500d", "filename": "crates/ide/src/completion/completion_context.rs", "status": "modified", "additions": 23, "deletions": 4, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b1315be010f0d9f67ee4794cb57f7d1baa88a30d/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1315be010f0d9f67ee4794cb57f7d1baa88a30d/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=b1315be010f0d9f67ee4794cb57f7d1baa88a30d", "patch": "@@ -16,10 +16,11 @@ use crate::{\n     call_info::ActiveParameter,\n     completion::{\n         patterns::{\n-            has_bind_pat_parent, has_block_expr_parent, has_field_list_parent,\n-            has_impl_as_prev_sibling, has_impl_parent, has_item_list_or_source_file_parent,\n-            has_ref_parent, has_trait_as_prev_sibling, has_trait_parent, if_is_prev,\n-            is_in_loop_body, is_match_arm, unsafe_is_prev,\n+            fn_is_prev, for_is_prev2, has_bind_pat_parent, has_block_expr_parent,\n+            has_field_list_parent, has_impl_as_prev_sibling, has_impl_parent,\n+            has_item_list_or_source_file_parent, has_ref_parent, has_trait_as_prev_sibling,\n+            has_trait_parent, if_is_prev, inside_impl_trait_block, is_in_loop_body, is_match_arm,\n+            unsafe_is_prev,\n         },\n         CompletionConfig,\n     },\n@@ -86,11 +87,14 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) in_loop_body: bool,\n     pub(super) has_trait_parent: bool,\n     pub(super) has_impl_parent: bool,\n+    pub(super) inside_impl_trait_block: bool,\n     pub(super) has_field_list_parent: bool,\n     pub(super) trait_as_prev_sibling: bool,\n     pub(super) impl_as_prev_sibling: bool,\n     pub(super) is_match_arm: bool,\n     pub(super) has_item_list_or_source_file_parent: bool,\n+    pub(super) for_is_prev2: bool,\n+    pub(super) fn_is_prev: bool,\n     pub(super) locals: Vec<(String, Local)>,\n }\n \n@@ -168,12 +172,15 @@ impl<'a> CompletionContext<'a> {\n             block_expr_parent: false,\n             has_trait_parent: false,\n             has_impl_parent: false,\n+            inside_impl_trait_block: false,\n             has_field_list_parent: false,\n             trait_as_prev_sibling: false,\n             impl_as_prev_sibling: false,\n             if_is_prev: false,\n             is_match_arm: false,\n             has_item_list_or_source_file_parent: false,\n+            for_is_prev2: false,\n+            fn_is_prev: false,\n             locals,\n         };\n \n@@ -221,6 +228,15 @@ impl<'a> CompletionContext<'a> {\n         Some(ctx)\n     }\n \n+    /// Checks whether completions in that particular case don't make much sense.\n+    /// Examples:\n+    /// - `fn <|>` -- we expect function name, it's unlikely that \"hint\" will be helpful.\n+    ///   Exception for this case is `impl Trait for Foo`, where we would like to hint trait method names.\n+    /// - `for _ i<|>` -- obviously, it'll be \"in\" keyword.\n+    pub(crate) fn no_completion_required(&self) -> bool {\n+        (self.fn_is_prev && !self.inside_impl_trait_block) || self.for_is_prev2\n+    }\n+\n     /// The range of the identifier that is being completed.\n     pub(crate) fn source_range(&self) -> TextRange {\n         // check kind of macro-expanded token, but use range of original token\n@@ -244,6 +260,7 @@ impl<'a> CompletionContext<'a> {\n         self.in_loop_body = is_in_loop_body(syntax_element.clone());\n         self.has_trait_parent = has_trait_parent(syntax_element.clone());\n         self.has_impl_parent = has_impl_parent(syntax_element.clone());\n+        self.inside_impl_trait_block = inside_impl_trait_block(syntax_element.clone());\n         self.has_field_list_parent = has_field_list_parent(syntax_element.clone());\n         self.impl_as_prev_sibling = has_impl_as_prev_sibling(syntax_element.clone());\n         self.trait_as_prev_sibling = has_trait_as_prev_sibling(syntax_element.clone());\n@@ -253,6 +270,8 @@ impl<'a> CompletionContext<'a> {\n         self.mod_declaration_under_caret =\n             find_node_at_offset::<ast::Module>(&file_with_fake_ident, offset)\n                 .filter(|module| module.item_list().is_none());\n+        self.for_is_prev2 = for_is_prev2(syntax_element.clone());\n+        self.fn_is_prev = fn_is_prev(syntax_element.clone());\n     }\n \n     fn fill("}, {"sha": "cf6d5947dfb152053b520c8bdd387bd31c126bad", "filename": "crates/ide/src/completion/patterns.rs", "status": "modified", "additions": 47, "deletions": 1, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/b1315be010f0d9f67ee4794cb57f7d1baa88a30d/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1315be010f0d9f67ee4794cb57f7d1baa88a30d/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Fpatterns.rs?ref=b1315be010f0d9f67ee4794cb57f7d1baa88a30d", "patch": "@@ -9,7 +9,7 @@ use syntax::{\n };\n \n #[cfg(test)]\n-use crate::completion::test_utils::check_pattern_is_applicable;\n+use crate::completion::test_utils::{check_pattern_is_applicable, check_pattern_is_not_applicable};\n \n pub(crate) fn has_trait_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element)\n@@ -34,6 +34,25 @@ pub(crate) fn has_impl_parent(element: SyntaxElement) -> bool {\n fn test_has_impl_parent() {\n     check_pattern_is_applicable(r\"impl A { f<|> }\", has_impl_parent);\n }\n+\n+pub(crate) fn inside_impl_trait_block(element: SyntaxElement) -> bool {\n+    // Here we search `impl` keyword up through the all ancestors, unlike in `has_impl_parent`,\n+    // where we only check the first parent with different text range.\n+    element\n+        .ancestors()\n+        .find(|it| it.kind() == IMPL)\n+        .map(|it| ast::Impl::cast(it).unwrap())\n+        .map(|it| it.trait_().is_some())\n+        .unwrap_or(false)\n+}\n+#[test]\n+fn test_inside_impl_trait_block() {\n+    check_pattern_is_applicable(r\"impl Foo for Bar { f<|> }\", inside_impl_trait_block);\n+    check_pattern_is_applicable(r\"impl Foo for Bar { fn f<|> }\", inside_impl_trait_block);\n+    check_pattern_is_not_applicable(r\"impl A { f<|> }\", inside_impl_trait_block);\n+    check_pattern_is_not_applicable(r\"impl A { fn f<|> }\", inside_impl_trait_block);\n+}\n+\n pub(crate) fn has_field_list_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element).filter(|it| it.kind() == RECORD_FIELD_LIST).is_some()\n }\n@@ -116,6 +135,33 @@ pub(crate) fn if_is_prev(element: SyntaxElement) -> bool {\n         .is_some()\n }\n \n+pub(crate) fn fn_is_prev(element: SyntaxElement) -> bool {\n+    element\n+        .into_token()\n+        .and_then(|it| previous_non_trivia_token(it))\n+        .filter(|it| it.kind() == FN_KW)\n+        .is_some()\n+}\n+#[test]\n+fn test_fn_is_prev() {\n+    check_pattern_is_applicable(r\"fn l<|>\", fn_is_prev);\n+}\n+\n+/// Check if the token previous to the previous one is `for`.\n+/// For example, `for _ i<|>` => true.\n+pub(crate) fn for_is_prev2(element: SyntaxElement) -> bool {\n+    element\n+        .into_token()\n+        .and_then(|it| previous_non_trivia_token(it))\n+        .and_then(|it| previous_non_trivia_token(it))\n+        .filter(|it| it.kind() == FOR_KW)\n+        .is_some()\n+}\n+#[test]\n+fn test_for_is_prev2() {\n+    check_pattern_is_applicable(r\"for i i<|>\", for_is_prev2);\n+}\n+\n #[test]\n fn test_if_is_prev() {\n     check_pattern_is_applicable(r\"if l<|>\", if_is_prev);"}, {"sha": "dabbef888fbd155427f80f50677a344594e5339d", "filename": "crates/ide/src/completion/test_utils.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b1315be010f0d9f67ee4794cb57f7d1baa88a30d/crates%2Fide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1315be010f0d9f67ee4794cb57f7d1baa88a30d/crates%2Fide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=b1315be010f0d9f67ee4794cb57f7d1baa88a30d", "patch": "@@ -104,6 +104,18 @@ pub(crate) fn check_pattern_is_applicable(code: &str, check: fn(SyntaxElement) -\n         .unwrap();\n }\n \n+pub(crate) fn check_pattern_is_not_applicable(code: &str, check: fn(SyntaxElement) -> bool) {\n+    let (analysis, pos) = fixture::position(code);\n+    analysis\n+        .with_db(|db| {\n+            let sema = Semantics::new(db);\n+            let original_file = sema.parse(pos.file_id);\n+            let token = original_file.syntax().token_at_offset(pos.offset).left_biased().unwrap();\n+            assert!(!check(NodeOrToken::Token(token)));\n+        })\n+        .unwrap();\n+}\n+\n pub(crate) fn get_all_completion_items(\n     config: CompletionConfig,\n     code: &str,"}]}