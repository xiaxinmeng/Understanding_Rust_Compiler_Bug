{"sha": "ad414dec67f3f9583938a2a1212e104443fca798", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkNDE0ZGVjNjdmM2Y5NTgzOTM4YTJhMTIxMmUxMDQ0NDNmY2E3OTg=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-02-22T16:25:10Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2013-02-22T16:25:10Z"}, "message": "Consolidate codes dealing with LLVM struct type", "tree": {"sha": "d3b39627549221de6860946f2e9aa479a90d9087", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3b39627549221de6860946f2e9aa479a90d9087"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ad414dec67f3f9583938a2a1212e104443fca798", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ad414dec67f3f9583938a2a1212e104443fca798", "html_url": "https://github.com/rust-lang/rust/commit/ad414dec67f3f9583938a2a1212e104443fca798", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ad414dec67f3f9583938a2a1212e104443fca798/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cec1f38c309b743b29a386ce71db1b1035ccd89d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cec1f38c309b743b29a386ce71db1b1035ccd89d", "html_url": "https://github.com/rust-lang/rust/commit/cec1f38c309b743b29a386ce71db1b1035ccd89d"}], "stats": {"total": 58, "additions": 11, "deletions": 47}, "files": [{"sha": "d2bb7c75a27f6225d2b688f972b5a12ddb75ced8", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 9, "deletions": 15, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ad414dec67f3f9583938a2a1212e104443fca798/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad414dec67f3f9583938a2a1212e104443fca798/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=ad414dec67f3f9583938a2a1212e104443fca798", "patch": "@@ -1379,12 +1379,7 @@ pub fn type_to_str_inner(names: @TypeNames, +outer0: &[TypeRef], ty: TypeRef)\n                         type_to_str_inner(names, outer, out_ty)).to_managed();\n           }\n           Struct => {\n-            let n_elts = llvm::LLVMCountStructElementTypes(ty) as uint;\n-            let mut elts = vec::from_elem(n_elts, 0 as TypeRef);\n-            if !elts.is_empty() {\n-                llvm::LLVMGetStructElementTypes(\n-                    ty, ptr::to_mut_unsafe_ptr(&mut elts[0]));\n-            }\n+            let elts = struct_tys(ty);\n             // See [Note at-str]\n             return fmt!(\"{%s}\", tys_str(names, outer, elts)).to_managed();\n           }\n@@ -1445,17 +1440,16 @@ pub fn fn_ty_param_tys(fn_ty: TypeRef) -> ~[TypeRef] {\n     }\n }\n \n-pub fn struct_element_types(struct_ty: TypeRef) -> ~[TypeRef] {\n+pub fn struct_tys(struct_ty: TypeRef) -> ~[TypeRef] {\n     unsafe {\n-        let count = llvm::LLVMCountStructElementTypes(struct_ty);\n-        let mut buf: ~[TypeRef] =\n-            vec::from_elem(count as uint,\n-                           cast::transmute::<uint,TypeRef>(0));\n-        if buf.len() > 0 {\n-            llvm::LLVMGetStructElementTypes(\n-                struct_ty, ptr::to_mut_unsafe_ptr(&mut buf[0]));\n+        let n_elts = llvm::LLVMCountStructElementTypes(struct_ty) as uint;\n+        if n_elts == 0 {\n+            return ~[];\n         }\n-        return buf;\n+        let mut elts = vec::from_elem(n_elts, ptr::null());\n+        llvm::LLVMGetStructElementTypes(\n+            struct_ty, ptr::to_mut_unsafe_ptr(&mut elts[0]));\n+        return elts;\n     }\n }\n "}, {"sha": "d69ae8e1c7b7429bb01b5eb212f4c5d8ecbd8b0f", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ad414dec67f3f9583938a2a1212e104443fca798/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad414dec67f3f9583938a2a1212e104443fca798/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ad414dec67f3f9583938a2a1212e104443fca798", "patch": "@@ -2150,11 +2150,6 @@ pub fn trans_mod(ccx: @CrateContext, m: ast::_mod) {\n     }\n }\n \n-pub fn get_pair_fn_ty(llpairty: TypeRef) -> TypeRef {\n-    // Bit of a kludge: pick the fn typeref out of the pair.\n-    return struct_elt(llpairty, 0u);\n-}\n-\n pub fn register_fn(ccx: @CrateContext,\n                    sp: span,\n                    +path: path,"}, {"sha": "df0f11eedae88743e492387b6333463015530127", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ad414dec67f3f9583938a2a1212e104443fca798/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad414dec67f3f9583938a2a1212e104443fca798/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=ad414dec67f3f9583938a2a1212e104443fca798", "patch": "@@ -14,6 +14,7 @@\n use lib::llvm::{llvm, TypeRef, ValueRef, Integer, Pointer, Float, Double};\n use lib::llvm::{Struct, Array, Attribute};\n use lib::llvm::{StructRetAttribute, ByValAttribute};\n+use lib::llvm::struct_tys;\n use middle::trans::common::*;\n use middle::trans::cabi::*;\n \n@@ -65,19 +66,6 @@ fn classify_ty(ty: TypeRef) -> ~[x86_64_reg_class] {\n         return (off + a - 1u) / a * a;\n     }\n \n-    fn struct_tys(ty: TypeRef) -> ~[TypeRef] {\n-        unsafe {\n-            let n = llvm::LLVMCountStructElementTypes(ty);\n-        if (n == 0) {\n-            return ~[];\n-        }\n-            let mut elts = vec::from_elem(n as uint, ptr::null());\n-            llvm::LLVMGetStructElementTypes(ty,\n-                ptr::to_mut_unsafe_ptr(&mut elts[0]));\n-            return elts;\n-        }\n-    }\n-\n     fn ty_align(ty: TypeRef) -> uint {\n         unsafe {\n             return match llvm::LLVMGetTypeKind(ty) {"}, {"sha": "6924ccf3ab644f9f2ea052e724b20ea9d618b7c3", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ad414dec67f3f9583938a2a1212e104443fca798/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad414dec67f3f9583938a2a1212e104443fca798/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=ad414dec67f3f9583938a2a1212e104443fca798", "patch": "@@ -380,7 +380,7 @@ pub fn trans_rtcall_or_lang_call_with_type_params(bcx: block,\n                                                     fty);\n                     let mut llfnty = type_of::type_of(callee.bcx.ccx(),\n                                                       substituted);\n-                    llfnty = T_ptr(struct_elt(llfnty, 0));\n+                    llfnty = lib::llvm::struct_tys(llfnty)[0];\n                     new_llval = PointerCast(callee.bcx, fn_data.llfn, llfnty);\n                 }\n                 _ => fail!()"}, {"sha": "fe0c4243e35bafa7e3a57b060d6c53d3502856af", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ad414dec67f3f9583938a2a1212e104443fca798/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ad414dec67f3f9583938a2a1212e104443fca798/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=ad414dec67f3f9583938a2a1212e104443fca798", "patch": "@@ -645,19 +645,6 @@ pub fn val_str(tn: @TypeNames, v: ValueRef) -> @str {\n     return ty_str(tn, val_ty(v));\n }\n \n-// Returns the nth element of the given LLVM structure type.\n-pub fn struct_elt(llstructty: TypeRef, n: uint) -> TypeRef {\n-    unsafe {\n-        let elt_count = llvm::LLVMCountStructElementTypes(llstructty) as uint;\n-        assert (n < elt_count);\n-        let mut elt_tys = vec::from_elem(elt_count, T_nil());\n-        llvm::LLVMGetStructElementTypes(\n-            llstructty,\n-            ptr::to_mut_unsafe_ptr(&mut elt_tys[0]));\n-        return llvm::LLVMGetElementType(elt_tys[n]);\n-    }\n-}\n-\n pub fn in_scope_cx(cx: block, f: &fn(&mut scope_info)) {\n     let mut cur = cx;\n     loop {"}]}