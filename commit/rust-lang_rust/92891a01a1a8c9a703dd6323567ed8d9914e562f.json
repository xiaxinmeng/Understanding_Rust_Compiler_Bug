{"sha": "92891a01a1a8c9a703dd6323567ed8d9914e562f", "node_id": "C_kwDOAAsO6NoAKDkyODkxYTAxYTFhOGM5YTcwM2RkNjMyMzU2N2VkOGQ5OTE0ZTU2MmY", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-01T14:37:37Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2022-06-28T16:51:30Z"}, "message": "Move `PtrEq` into `Operators` lin pass", "tree": {"sha": "43e7a0e983489a40726465c0f8d27ceed07aeb94", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43e7a0e983489a40726465c0f8d27ceed07aeb94"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/92891a01a1a8c9a703dd6323567ed8d9914e562f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/92891a01a1a8c9a703dd6323567ed8d9914e562f", "html_url": "https://github.com/rust-lang/rust/commit/92891a01a1a8c9a703dd6323567ed8d9914e562f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/92891a01a1a8c9a703dd6323567ed8d9914e562f/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc5eac58948d5a93304bd2eaa8b566de7018e408", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc5eac58948d5a93304bd2eaa8b566de7018e408", "html_url": "https://github.com/rust-lang/rust/commit/fc5eac58948d5a93304bd2eaa8b566de7018e408"}], "stats": {"total": 202, "additions": 100, "deletions": 102}, "files": [{"sha": "b8aac47202cf73d3ca4837a555383e7a5c805400", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92891a01a1a8c9a703dd6323567ed8d9914e562f/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92891a01a1a8c9a703dd6323567ed8d9914e562f/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=92891a01a1a8c9a703dd6323567ed8d9914e562f", "patch": "@@ -260,6 +260,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(operators::MISREFACTORED_ASSIGN_OP),\n     LintId::of(operators::MODULO_ONE),\n     LintId::of(operators::OP_REF),\n+    LintId::of(operators::PTR_EQ),\n     LintId::of(option_env_unwrap::OPTION_ENV_UNWRAP),\n     LintId::of(overflow_check_conditional::OVERFLOW_CHECK_CONDITIONAL),\n     LintId::of(partialeq_ne_impl::PARTIALEQ_NE_IMPL),\n@@ -268,7 +269,6 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(ptr::INVALID_NULL_PTR_USAGE),\n     LintId::of(ptr::MUT_FROM_REF),\n     LintId::of(ptr::PTR_ARG),\n-    LintId::of(ptr_eq::PTR_EQ),\n     LintId::of(ptr_offset_with_cast::PTR_OFFSET_WITH_CAST),\n     LintId::of(question_mark::QUESTION_MARK),\n     LintId::of(ranges::MANUAL_RANGE_CONTAINS),"}, {"sha": "408f2857263c5b37c8fa19213d32e6095c9f087f", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92891a01a1a8c9a703dd6323567ed8d9914e562f/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92891a01a1a8c9a703dd6323567ed8d9914e562f/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=92891a01a1a8c9a703dd6323567ed8d9914e562f", "patch": "@@ -436,6 +436,7 @@ store.register_lints(&[\n     operators::MODULO_ONE,\n     operators::NEEDLESS_BITWISE_BOOL,\n     operators::OP_REF,\n+    operators::PTR_EQ,\n     operators::VERBOSE_BIT_MASK,\n     option_env_unwrap::OPTION_ENV_UNWRAP,\n     option_if_let_else::OPTION_IF_LET_ELSE,\n@@ -455,7 +456,6 @@ store.register_lints(&[\n     ptr::INVALID_NULL_PTR_USAGE,\n     ptr::MUT_FROM_REF,\n     ptr::PTR_ARG,\n-    ptr_eq::PTR_EQ,\n     ptr_offset_with_cast::PTR_OFFSET_WITH_CAST,\n     pub_use::PUB_USE,\n     question_mark::QUESTION_MARK,"}, {"sha": "15a1bc569af2332160e5ceac92fe3fa3f3e1d7ab", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92891a01a1a8c9a703dd6323567ed8d9914e562f/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92891a01a1a8c9a703dd6323567ed8d9914e562f/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=92891a01a1a8c9a703dd6323567ed8d9914e562f", "patch": "@@ -98,9 +98,9 @@ store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(non_expressive_names::JUST_UNDERSCORES_AND_DIGITS),\n     LintId::of(operators::ASSIGN_OP_PATTERN),\n     LintId::of(operators::OP_REF),\n+    LintId::of(operators::PTR_EQ),\n     LintId::of(ptr::CMP_NULL),\n     LintId::of(ptr::PTR_ARG),\n-    LintId::of(ptr_eq::PTR_EQ),\n     LintId::of(question_mark::QUESTION_MARK),\n     LintId::of(ranges::MANUAL_RANGE_CONTAINS),\n     LintId::of(redundant_field_names::REDUNDANT_FIELD_NAMES),"}, {"sha": "7b618831ae0a254f1d3da9545824bd8b591da29b", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/92891a01a1a8c9a703dd6323567ed8d9914e562f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92891a01a1a8c9a703dd6323567ed8d9914e562f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=92891a01a1a8c9a703dd6323567ed8d9914e562f", "patch": "@@ -335,7 +335,6 @@ mod path_buf_push_overwrite;\n mod pattern_type_mismatch;\n mod precedence;\n mod ptr;\n-mod ptr_eq;\n mod ptr_offset_with_cast;\n mod pub_use;\n mod question_mark;\n@@ -571,7 +570,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(enum_clike::UnportableVariant));\n     store.register_late_pass(|| Box::new(float_literal::FloatLiteral));\n     store.register_late_pass(|| Box::new(ptr::Ptr));\n-    store.register_late_pass(|| Box::new(ptr_eq::PtrEq));\n     store.register_late_pass(|| Box::new(needless_bool::NeedlessBool));\n     store.register_late_pass(|| Box::new(needless_bool::BoolComparison));\n     store.register_late_pass(|| Box::new(needless_for_each::NeedlessForEach));"}, {"sha": "b2cf1660ae0c5ceba5ba232f69d15cd12e5674e8", "filename": "clippy_lints/src/operators/mod.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/92891a01a1a8c9a703dd6323567ed8d9914e562f/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92891a01a1a8c9a703dd6323567ed8d9914e562f/clippy_lints%2Fsrc%2Foperators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fmod.rs?ref=92891a01a1a8c9a703dd6323567ed8d9914e562f", "patch": "@@ -21,6 +21,7 @@ mod modulo_one;\n mod needless_bitwise_bool;\n mod numeric_arithmetic;\n mod op_ref;\n+mod ptr_eq;\n mod verbose_bit_mask;\n \n declare_clippy_lint! {\n@@ -671,6 +672,35 @@ declare_clippy_lint! {\n     \"Boolean expressions that use bitwise rather than lazy operators\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Use `std::ptr::eq` when applicable\n+    ///\n+    /// ### Why is this bad?\n+    /// `ptr::eq` can be used to compare `&T` references\n+    /// (which coerce to `*const T` implicitly) by their address rather than\n+    /// comparing the values they point to.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// let a = &[1, 2, 3];\n+    /// let b = &[1, 2, 3];\n+    ///\n+    /// assert!(a as *const _ as usize == b as *const _ as usize);\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// let a = &[1, 2, 3];\n+    /// let b = &[1, 2, 3];\n+    ///\n+    /// assert!(std::ptr::eq(a, b));\n+    /// ```\n+    #[clippy::version = \"1.49.0\"]\n+    pub PTR_EQ,\n+    style,\n+    \"use `std::ptr::eq` when comparing raw pointers\"\n+}\n+\n pub struct Operators {\n     arithmetic_context: numeric_arithmetic::Context,\n     verbose_bit_mask_threshold: u64,\n@@ -699,6 +729,7 @@ impl_lint_pass!(Operators => [\n     MODULO_ONE,\n     MODULO_ARITHMETIC,\n     NEEDLESS_BITWISE_BOOL,\n+    PTR_EQ,\n ]);\n impl Operators {\n     pub fn new(verbose_bit_mask_threshold: u64) -> Self {\n@@ -722,6 +753,7 @@ impl<'tcx> LateLintPass<'tcx> for Operators {\n                     erasing_op::check(cx, e, op.node, lhs, rhs);\n                     identity_op::check(cx, e, op.node, lhs, rhs);\n                     needless_bitwise_bool::check(cx, e, op.node, lhs, rhs);\n+                    ptr_eq::check(cx, e, op.node, lhs, rhs);\n                 }\n                 self.arithmetic_context.check_binary(cx, e, op.node, lhs, rhs);\n                 bit_mask::check(cx, e, op.node, lhs, rhs);"}, {"sha": "1aefc2741c21ca345c8376675a7dc9d9db1ba4c6", "filename": "clippy_lints/src/operators/ptr_eq.rs", "status": "added", "additions": 65, "deletions": 0, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/92891a01a1a8c9a703dd6323567ed8d9914e562f/clippy_lints%2Fsrc%2Foperators%2Fptr_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/92891a01a1a8c9a703dd6323567ed8d9914e562f/clippy_lints%2Fsrc%2Foperators%2Fptr_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foperators%2Fptr_eq.rs?ref=92891a01a1a8c9a703dd6323567ed8d9914e562f", "patch": "@@ -0,0 +1,65 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_opt;\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir::{BinOpKind, Expr, ExprKind};\n+use rustc_lint::LateContext;\n+\n+use super::PTR_EQ;\n+\n+static LINT_MSG: &str = \"use `std::ptr::eq` when comparing raw pointers\";\n+\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx Expr<'_>,\n+    op: BinOpKind,\n+    left: &'tcx Expr<'_>,\n+    right: &'tcx Expr<'_>,\n+) {\n+    if BinOpKind::Eq == op {\n+        let (left, right) = match (expr_as_cast_to_usize(cx, left), expr_as_cast_to_usize(cx, right)) {\n+            (Some(lhs), Some(rhs)) => (lhs, rhs),\n+            _ => (left, right),\n+        };\n+\n+        if_chain! {\n+            if let Some(left_var) = expr_as_cast_to_raw_pointer(cx, left);\n+            if let Some(right_var) = expr_as_cast_to_raw_pointer(cx, right);\n+            if let Some(left_snip) = snippet_opt(cx, left_var.span);\n+            if let Some(right_snip) = snippet_opt(cx, right_var.span);\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    PTR_EQ,\n+                    expr.span,\n+                    LINT_MSG,\n+                    \"try\",\n+                    format!(\"std::ptr::eq({}, {})\", left_snip, right_snip),\n+                    Applicability::MachineApplicable,\n+                    );\n+            }\n+        }\n+    }\n+}\n+\n+// If the given expression is a cast to a usize, return the lhs of the cast\n+// E.g., `foo as *const _ as usize` returns `foo as *const _`.\n+fn expr_as_cast_to_usize<'tcx>(cx: &LateContext<'tcx>, cast_expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n+    if cx.typeck_results().expr_ty(cast_expr) == cx.tcx.types.usize {\n+        if let ExprKind::Cast(expr, _) = cast_expr.kind {\n+            return Some(expr);\n+        }\n+    }\n+    None\n+}\n+\n+// If the given expression is a cast to a `*const` pointer, return the lhs of the cast\n+// E.g., `foo as *const _` returns `foo`.\n+fn expr_as_cast_to_raw_pointer<'tcx>(cx: &LateContext<'tcx>, cast_expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n+    if cx.typeck_results().expr_ty(cast_expr).is_unsafe_ptr() {\n+        if let ExprKind::Cast(expr, _) = cast_expr.kind {\n+            return Some(expr);\n+        }\n+    }\n+    None\n+}"}, {"sha": "2bec93ac606057e22c483777f9a9a546d332a787", "filename": "clippy_lints/src/ptr_eq.rs", "status": "removed", "additions": 0, "deletions": 97, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/fc5eac58948d5a93304bd2eaa8b566de7018e408/clippy_lints%2Fsrc%2Fptr_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc5eac58948d5a93304bd2eaa8b566de7018e408/clippy_lints%2Fsrc%2Fptr_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_eq.rs?ref=fc5eac58948d5a93304bd2eaa8b566de7018e408", "patch": "@@ -1,97 +0,0 @@\n-use clippy_utils::diagnostics::span_lint_and_sugg;\n-use clippy_utils::source::snippet_opt;\n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-use rustc_hir::{BinOpKind, Expr, ExprKind};\n-use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n-declare_clippy_lint! {\n-    /// ### What it does\n-    /// Use `std::ptr::eq` when applicable\n-    ///\n-    /// ### Why is this bad?\n-    /// `ptr::eq` can be used to compare `&T` references\n-    /// (which coerce to `*const T` implicitly) by their address rather than\n-    /// comparing the values they point to.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// let a = &[1, 2, 3];\n-    /// let b = &[1, 2, 3];\n-    ///\n-    /// assert!(a as *const _ as usize == b as *const _ as usize);\n-    /// ```\n-    /// Use instead:\n-    /// ```rust\n-    /// let a = &[1, 2, 3];\n-    /// let b = &[1, 2, 3];\n-    ///\n-    /// assert!(std::ptr::eq(a, b));\n-    /// ```\n-    #[clippy::version = \"1.49.0\"]\n-    pub PTR_EQ,\n-    style,\n-    \"use `std::ptr::eq` when comparing raw pointers\"\n-}\n-\n-declare_lint_pass!(PtrEq => [PTR_EQ]);\n-\n-static LINT_MSG: &str = \"use `std::ptr::eq` when comparing raw pointers\";\n-\n-impl<'tcx> LateLintPass<'tcx> for PtrEq {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if expr.span.from_expansion() {\n-            return;\n-        }\n-\n-        if let ExprKind::Binary(ref op, left, right) = expr.kind {\n-            if BinOpKind::Eq == op.node {\n-                let (left, right) = match (expr_as_cast_to_usize(cx, left), expr_as_cast_to_usize(cx, right)) {\n-                    (Some(lhs), Some(rhs)) => (lhs, rhs),\n-                    _ => (left, right),\n-                };\n-\n-                if_chain! {\n-                    if let Some(left_var) = expr_as_cast_to_raw_pointer(cx, left);\n-                    if let Some(right_var) = expr_as_cast_to_raw_pointer(cx, right);\n-                    if let Some(left_snip) = snippet_opt(cx, left_var.span);\n-                    if let Some(right_snip) = snippet_opt(cx, right_var.span);\n-                    then {\n-                        span_lint_and_sugg(\n-                            cx,\n-                            PTR_EQ,\n-                            expr.span,\n-                            LINT_MSG,\n-                            \"try\",\n-                            format!(\"std::ptr::eq({}, {})\", left_snip, right_snip),\n-                            Applicability::MachineApplicable,\n-                            );\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n-// If the given expression is a cast to a usize, return the lhs of the cast\n-// E.g., `foo as *const _ as usize` returns `foo as *const _`.\n-fn expr_as_cast_to_usize<'tcx>(cx: &LateContext<'tcx>, cast_expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n-    if cx.typeck_results().expr_ty(cast_expr) == cx.tcx.types.usize {\n-        if let ExprKind::Cast(expr, _) = cast_expr.kind {\n-            return Some(expr);\n-        }\n-    }\n-    None\n-}\n-\n-// If the given expression is a cast to a `*const` pointer, return the lhs of the cast\n-// E.g., `foo as *const _` returns `foo`.\n-fn expr_as_cast_to_raw_pointer<'tcx>(cx: &LateContext<'tcx>, cast_expr: &'tcx Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n-    if cx.typeck_results().expr_ty(cast_expr).is_unsafe_ptr() {\n-        if let ExprKind::Cast(expr, _) = cast_expr.kind {\n-            return Some(expr);\n-        }\n-    }\n-    None\n-}"}]}