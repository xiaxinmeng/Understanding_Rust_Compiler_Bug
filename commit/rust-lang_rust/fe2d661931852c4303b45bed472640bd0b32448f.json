{"sha": "fe2d661931852c4303b45bed472640bd0b32448f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMmQ2NjE5MzE4NTJjNDMwM2I0NWJlZDQ3MjY0MGJkMGIzMjQ0OGY=", "commit": {"author": {"name": "Ian Douglas Scott", "email": "ian@iandouglasscott.com", "date": "2017-08-22T17:33:26Z"}, "committer": {"name": "Ian Douglas Scott", "email": "ian@iandouglasscott.com", "date": "2017-08-22T17:33:49Z"}, "message": "Simplify code for handling Redox paths", "tree": {"sha": "6ce04aeb5a43eeed3dbcd0266b58562b33f1289d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ce04aeb5a43eeed3dbcd0266b58562b33f1289d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe2d661931852c4303b45bed472640bd0b32448f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCAAdFiEECYv1aaNg4jTOK4YaSSThDhmbWVkFAlmcawgACgkQSSThDhmb\nWVk3SQgAvY2Z4506y1WWu9UFNKanSPp1WTT2PqGlZf3YFwcaeli6crs4AUVvHc/k\nPZELFl7iWIwricXT4IXJHjaxnF8ptmfoSEyaBQc6Nw0jo7woeQw8LPhX2laRGAF4\nNyd1rc1SNZC4JiD2bRO93ikYALNTZ0zILY1s4p0ba0nFCyUtuPXvHAVJhXuk2BWC\nK0byq6InJ690XvzKK92haPIby+XFWaAkgxqVlGxM5qjYxfU8ElBVdFt0HI1HUmx0\nIaghTuLUF1cTezCyZjeHVVue/Zr9pnXg0Y+ugZAibpuvZUaq/J/+eyjbMvHM8QtX\n1EcdwnUViBq75YFRxf6R8EmG8+glzA==\n=wRGr\n-----END PGP SIGNATURE-----", "payload": "tree 6ce04aeb5a43eeed3dbcd0266b58562b33f1289d\nparent ab48de88472f19596ba2a67ff4e8a8c1c4015989\nauthor Ian Douglas Scott <ian@iandouglasscott.com> 1503423206 -0700\ncommitter Ian Douglas Scott <ian@iandouglasscott.com> 1503423229 -0700\n\nSimplify code for handling Redox paths\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe2d661931852c4303b45bed472640bd0b32448f", "html_url": "https://github.com/rust-lang/rust/commit/fe2d661931852c4303b45bed472640bd0b32448f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe2d661931852c4303b45bed472640bd0b32448f/comments", "author": {"login": "ids1024", "id": 2263150, "node_id": "MDQ6VXNlcjIyNjMxNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/2263150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ids1024", "html_url": "https://github.com/ids1024", "followers_url": "https://api.github.com/users/ids1024/followers", "following_url": "https://api.github.com/users/ids1024/following{/other_user}", "gists_url": "https://api.github.com/users/ids1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/ids1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ids1024/subscriptions", "organizations_url": "https://api.github.com/users/ids1024/orgs", "repos_url": "https://api.github.com/users/ids1024/repos", "events_url": "https://api.github.com/users/ids1024/events{/privacy}", "received_events_url": "https://api.github.com/users/ids1024/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ids1024", "id": 2263150, "node_id": "MDQ6VXNlcjIyNjMxNTA=", "avatar_url": "https://avatars.githubusercontent.com/u/2263150?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ids1024", "html_url": "https://github.com/ids1024", "followers_url": "https://api.github.com/users/ids1024/followers", "following_url": "https://api.github.com/users/ids1024/following{/other_user}", "gists_url": "https://api.github.com/users/ids1024/gists{/gist_id}", "starred_url": "https://api.github.com/users/ids1024/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ids1024/subscriptions", "organizations_url": "https://api.github.com/users/ids1024/orgs", "repos_url": "https://api.github.com/users/ids1024/repos", "events_url": "https://api.github.com/users/ids1024/events{/privacy}", "received_events_url": "https://api.github.com/users/ids1024/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab48de88472f19596ba2a67ff4e8a8c1c4015989", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab48de88472f19596ba2a67ff4e8a8c1c4015989", "html_url": "https://github.com/rust-lang/rust/commit/ab48de88472f19596ba2a67ff4e8a8c1c4015989"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "d529b2153e1513eaef5bafb675c2e4e2c04901fb", "filename": "src/libstd/path.rs", "status": "modified", "additions": 5, "deletions": 10, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fe2d661931852c4303b45bed472640bd0b32448f/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe2d661931852c4303b45bed472640bd0b32448f/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=fe2d661931852c4303b45bed472640bd0b32448f", "patch": "@@ -324,9 +324,7 @@ unsafe fn u8_slice_as_os_str(s: &[u8]) -> &OsStr {\n }\n \n // Detect scheme on Redox\n-#[inline]\n-#[allow(unused_variables)]\n-fn has_scheme(s: &[u8]) -> bool {\n+fn has_redox_scheme(s: &[u8]) -> bool {\n     cfg!(target_os = \"redox\") && s.split(|b| *b == b'/').next().unwrap_or(b\"\").contains(&b':')\n }\n \n@@ -612,9 +610,6 @@ pub struct Components<'a> {\n     // normalization, e.g.  \\\\server\\share == \\\\server\\share\\.\n     has_physical_root: bool,\n \n-    // For Redox\n-    has_scheme: bool,\n-\n     // The iterator is double-ended, and these two states keep track of what has\n     // been produced from either end\n     front: State,\n@@ -735,7 +730,7 @@ impl<'a> Components<'a> {\n \n     /// Is the *original* path rooted?\n     fn has_root(&self) -> bool {\n-        if self.has_physical_root || self.has_scheme {\n+        if self.has_physical_root {\n             return true;\n         }\n         if let Some(p) = self.prefix {\n@@ -1699,7 +1694,7 @@ impl Path {\n             self.has_root() && (cfg!(unix) || self.prefix().is_some())\n         } else {\n             // FIXME: Allow Redox prefixes\n-            has_scheme(self.as_u8_slice())\n+            has_redox_scheme(self.as_u8_slice())\n         }\n     }\n \n@@ -2064,8 +2059,8 @@ impl Path {\n         Components {\n             path: self.as_u8_slice(),\n             prefix,\n-            has_physical_root: has_physical_root(self.as_u8_slice(), prefix),\n-            has_scheme: has_scheme(self.as_u8_slice()),\n+            has_physical_root: has_physical_root(self.as_u8_slice(), prefix) ||\n+                               has_redox_scheme(self.as_u8_slice()),\n             front: State::Prefix,\n             back: State::Body,\n         }"}]}