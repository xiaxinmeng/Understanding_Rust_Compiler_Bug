{"sha": "be3989301aea41777bdbc65d5c3537b7036ec407", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMzk4OTMwMWFlYTQxNzc3YmRiYzY1ZDVjMzUzN2I3MDM2ZWM0MDc=", "commit": {"author": {"name": "Wim Looman", "email": "wim@nemo157.com", "date": "2018-11-06T23:11:58Z"}, "committer": {"name": "Wim Looman", "email": "wim@nemo157.com", "date": "2019-01-27T21:58:59Z"}, "message": "Update generator transform and generated function signature", "tree": {"sha": "40f7cff6b232b5975e1b59dde60c9764c10e5b23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/40f7cff6b232b5975e1b59dde60c9764c10e5b23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be3989301aea41777bdbc65d5c3537b7036ec407", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be3989301aea41777bdbc65d5c3537b7036ec407", "html_url": "https://github.com/rust-lang/rust/commit/be3989301aea41777bdbc65d5c3537b7036ec407", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be3989301aea41777bdbc65d5c3537b7036ec407/comments", "author": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nemo157", "id": 81079, "node_id": "MDQ6VXNlcjgxMDc5", "avatar_url": "https://avatars.githubusercontent.com/u/81079?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nemo157", "html_url": "https://github.com/Nemo157", "followers_url": "https://api.github.com/users/Nemo157/followers", "following_url": "https://api.github.com/users/Nemo157/following{/other_user}", "gists_url": "https://api.github.com/users/Nemo157/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nemo157/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nemo157/subscriptions", "organizations_url": "https://api.github.com/users/Nemo157/orgs", "repos_url": "https://api.github.com/users/Nemo157/repos", "events_url": "https://api.github.com/users/Nemo157/events{/privacy}", "received_events_url": "https://api.github.com/users/Nemo157/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c203965e2a5aca6750f90777003adad2b79849f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c203965e2a5aca6750f90777003adad2b79849f", "html_url": "https://github.com/rust-lang/rust/commit/0c203965e2a5aca6750f90777003adad2b79849f"}], "stats": {"total": 52, "additions": 52, "deletions": 0}, "files": [{"sha": "56a32c928fb3d6bc46f25e56176782cc08768f17", "filename": "src/libcore/pin.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be3989301aea41777bdbc65d5c3537b7036ec407/src%2Flibcore%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be3989301aea41777bdbc65d5c3537b7036ec407/src%2Flibcore%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpin.rs?ref=be3989301aea41777bdbc65d5c3537b7036ec407", "patch": "@@ -117,6 +117,7 @@ use ops::{Deref, DerefMut, Receiver, CoerceUnsized, DispatchFromDyn};\n // implementations, are allowed because they all only use `&P`, so they cannot move\n // the value behind `pointer`.\n #[stable(feature = \"pin\", since = \"1.33.0\")]\n+#[cfg_attr(not(stage0), lang = \"pin\")]\n #[fundamental]\n #[repr(transparent)]\n #[derive(Copy, Clone, Hash, Eq, Ord)]"}, {"sha": "87107f727a05dad23f808ba3a7f501d49fe631ef", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/be3989301aea41777bdbc65d5c3537b7036ec407/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be3989301aea41777bdbc65d5c3537b7036ec407/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=be3989301aea41777bdbc65d5c3537b7036ec407", "patch": "@@ -300,6 +300,7 @@ language_item_table! {\n     GeneratorStateLangItem,      \"generator_state\",    gen_state,               Target::Enum;\n     GeneratorTraitLangItem,      \"generator\",          gen_trait,               Target::Trait;\n     UnpinTraitLangItem,          \"unpin\",              unpin_trait,             Target::Trait;\n+    PinTypeLangItem,             \"pin\",                pin_type,                Target::Struct;\n \n     EqTraitLangItem,             \"eq\",                 eq_trait,                Target::Trait;\n     PartialOrdTraitLangItem,     \"partial_ord\",        partial_ord_trait,       Target::Trait;"}, {"sha": "bc43fedef0f34eabbdef4c8562a8ad3553a6bc0b", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/be3989301aea41777bdbc65d5c3537b7036ec407/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be3989301aea41777bdbc65d5c3537b7036ec407/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=be3989301aea41777bdbc65d5c3537b7036ec407", "patch": "@@ -76,6 +76,11 @@ impl<'a, 'tcx> Instance<'tcx> {\n                 let env_region = ty::ReLateBound(ty::INNERMOST, ty::BrEnv);\n                 let env_ty = tcx.mk_mut_ref(tcx.mk_region(env_region), ty);\n \n+                let pin_did = tcx.lang_items().pin_type().unwrap();\n+                let pin_adt_ref = tcx.adt_def(pin_did);\n+                let pin_substs = tcx.intern_substs(&[env_ty.into()]);\n+                let env_ty = tcx.mk_adt(pin_adt_ref, pin_substs);\n+\n                 sig.map_bound(|sig| {\n                     let state_did = tcx.lang_items().gen_state().unwrap();\n                     let state_adt_ref = tcx.adt_def(state_did);"}, {"sha": "f5cc6a43e28b9a299a5052e56e294edf88e3710b", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/be3989301aea41777bdbc65d5c3537b7036ec407/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be3989301aea41777bdbc65d5c3537b7036ec407/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=be3989301aea41777bdbc65d5c3537b7036ec407", "patch": "@@ -113,6 +113,33 @@ impl<'tcx> MutVisitor<'tcx> for DerefArgVisitor {\n     }\n }\n \n+struct PinArgVisitor<'tcx> {\n+    ref_gen_ty: Ty<'tcx>,\n+}\n+\n+impl<'tcx> MutVisitor<'tcx> for PinArgVisitor<'tcx> {\n+    fn visit_local(&mut self,\n+                   local: &mut Local,\n+                   _: PlaceContext<'tcx>,\n+                   _: Location) {\n+        assert_ne!(*local, self_arg());\n+    }\n+\n+    fn visit_place(&mut self,\n+                    place: &mut Place<'tcx>,\n+                    context: PlaceContext<'tcx>,\n+                    location: Location) {\n+        if *place == Place::Local(self_arg()) {\n+            *place = Place::Projection(Box::new(Projection {\n+                base: place.clone(),\n+                elem: ProjectionElem::Field(Field::new(0), self.ref_gen_ty),\n+            }));\n+        } else {\n+            self.super_place(place, context, location);\n+        }\n+    }\n+}\n+\n fn self_arg() -> Local {\n     Local::new(1)\n }\n@@ -286,6 +313,23 @@ fn make_generator_state_argument_indirect<'a, 'tcx>(\n     DerefArgVisitor.visit_mir(mir);\n }\n \n+fn make_generator_state_argument_pinned<'a, 'tcx>(\n+                tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                mir: &mut Mir<'tcx>) {\n+    let ref_gen_ty = mir.local_decls.raw[1].ty;\n+\n+    let pin_did = tcx.lang_items().pin_type().unwrap();\n+    let pin_adt_ref = tcx.adt_def(pin_did);\n+    let substs = tcx.intern_substs(&[ref_gen_ty.into()]);\n+    let pin_ref_gen_ty = tcx.mk_adt(pin_adt_ref, substs);\n+\n+    // Replace the by ref generator argument\n+    mir.local_decls.raw[1].ty = pin_ref_gen_ty;\n+\n+    // Add the Pin field access to accesses of the generator state\n+    PinArgVisitor { ref_gen_ty }.visit_mir(mir);\n+}\n+\n fn replace_result_variable<'tcx>(\n     ret_ty: Ty<'tcx>,\n     mir: &mut Mir<'tcx>,\n@@ -741,6 +785,7 @@ fn create_generator_resume_function<'a, 'tcx>(\n     insert_switch(tcx, mir, cases, &transform, TerminatorKind::Unreachable);\n \n     make_generator_state_argument_indirect(tcx, def_id, mir);\n+    make_generator_state_argument_pinned(tcx, mir);\n \n     no_landing_pads(tcx, mir);\n "}]}