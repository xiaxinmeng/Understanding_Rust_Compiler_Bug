{"sha": "543023c249c89477a5cd9fd39d942b49c2d9d30e", "node_id": "C_kwDOAAsO6NoAKDU0MzAyM2MyNDljODk0NzdhNWNkOWZkMzlkOTQyYjQ5YzJkOWQzMGU", "commit": {"author": {"name": "Andrew Cann", "email": "shum@canndrew.org", "date": "2022-04-10T06:04:44Z"}, "committer": {"name": "Charles Lew", "email": "crlf0710@gmail.com", "date": "2022-09-11T06:04:17Z"}, "message": "Add some comments to generator clone shim code", "tree": {"sha": "4bd84d1dfdea57768c73d345e783feef8894d33f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bd84d1dfdea57768c73d345e783feef8894d33f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/543023c249c89477a5cd9fd39d942b49c2d9d30e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/543023c249c89477a5cd9fd39d942b49c2d9d30e", "html_url": "https://github.com/rust-lang/rust/commit/543023c249c89477a5cd9fd39d942b49c2d9d30e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/543023c249c89477a5cd9fd39d942b49c2d9d30e/comments", "author": {"login": "canndrew", "id": 5555066, "node_id": "MDQ6VXNlcjU1NTUwNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/5555066?v=4", "gravatar_id": "", "url": "https://api.github.com/users/canndrew", "html_url": "https://github.com/canndrew", "followers_url": "https://api.github.com/users/canndrew/followers", "following_url": "https://api.github.com/users/canndrew/following{/other_user}", "gists_url": "https://api.github.com/users/canndrew/gists{/gist_id}", "starred_url": "https://api.github.com/users/canndrew/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/canndrew/subscriptions", "organizations_url": "https://api.github.com/users/canndrew/orgs", "repos_url": "https://api.github.com/users/canndrew/repos", "events_url": "https://api.github.com/users/canndrew/events{/privacy}", "received_events_url": "https://api.github.com/users/canndrew/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crlf0710", "id": 451806, "node_id": "MDQ6VXNlcjQ1MTgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/451806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crlf0710", "html_url": "https://github.com/crlf0710", "followers_url": "https://api.github.com/users/crlf0710/followers", "following_url": "https://api.github.com/users/crlf0710/following{/other_user}", "gists_url": "https://api.github.com/users/crlf0710/gists{/gist_id}", "starred_url": "https://api.github.com/users/crlf0710/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crlf0710/subscriptions", "organizations_url": "https://api.github.com/users/crlf0710/orgs", "repos_url": "https://api.github.com/users/crlf0710/repos", "events_url": "https://api.github.com/users/crlf0710/events{/privacy}", "received_events_url": "https://api.github.com/users/crlf0710/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bc9453aa8a8ec07b4a32b201612b149b762fccd", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bc9453aa8a8ec07b4a32b201612b149b762fccd", "html_url": "https://github.com/rust-lang/rust/commit/1bc9453aa8a8ec07b4a32b201612b149b762fccd"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "f5083438b0c050f30e095cc07f29b4b4fcd3abd9", "filename": "compiler/rustc_mir_transform/src/shim.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/543023c249c89477a5cd9fd39d942b49c2d9d30e/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/543023c249c89477a5cd9fd39d942b49c2d9d30e/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fshim.rs?ref=543023c249c89477a5cd9fd39d942b49c2d9d30e", "patch": "@@ -475,7 +475,18 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n     where\n         I: IntoIterator<Item = Ty<'tcx>>,\n     {\n+        // For an iterator of length n, create 2*n + 1 blocks.\n         for (i, ity) in tys.into_iter().enumerate() {\n+            // Each iteration creates two blocks, referred to here as block 2*i and block 2*i + 1.\n+            //\n+            // Block 2*i attempts to clone the field. If successful it branches to 2*i + 2 (the\n+            // next clone block). If unsuccessful it branches to the previous unwind block, which\n+            // is initially the `unwind` argument passed to this function.\n+            //\n+            // Block 2*i + 1 is the unwind block for this iteration. It drops the cloned value\n+            // created by block 2*i. We store this block in `unwind` so that the next clone block\n+            // will unwind to it if cloning fails.\n+\n             let field = Field::new(i);\n             let src_field = self.tcx.mk_place_field(src, field, ity);\n \n@@ -491,6 +502,7 @@ impl<'tcx> CloneShimBuilder<'tcx> {\n             );\n             unwind = next_unwind;\n         }\n+        // If all clones succeed then we end up here.\n         self.block(vec![], TerminatorKind::Goto { target }, false);\n         unwind\n     }"}]}