{"sha": "bdbaf0c7897366f17e36797e5c9fc7ef12fa9fce", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkYmFmMGM3ODk3MzY2ZjE3ZTM2Nzk3ZTVjOWZjN2VmMTJmYTlmY2U=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-02T00:01:33Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-03-02T00:02:19Z"}, "message": "rustc: Factor out the align-elements logic in dynamic_size_of()", "tree": {"sha": "b3d97ce6a3b14a58c0b0c7938e5fff8ebe534622", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3d97ce6a3b14a58c0b0c7938e5fff8ebe534622"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdbaf0c7897366f17e36797e5c9fc7ef12fa9fce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdbaf0c7897366f17e36797e5c9fc7ef12fa9fce", "html_url": "https://github.com/rust-lang/rust/commit/bdbaf0c7897366f17e36797e5c9fc7ef12fa9fce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdbaf0c7897366f17e36797e5c9fc7ef12fa9fce/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "348c77c31b7dcd5be85438dfcf4292f7e0951dd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/348c77c31b7dcd5be85438dfcf4292f7e0951dd6", "html_url": "https://github.com/rust-lang/rust/commit/348c77c31b7dcd5be85438dfcf4292f7e0951dd6"}], "stats": {"total": 63, "additions": 29, "deletions": 34}, "files": [{"sha": "7bdca92a94308a28faf1031cc3f0791e21284315", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 29, "deletions": 34, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/bdbaf0c7897366f17e36797e5c9fc7ef12fa9fce/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdbaf0c7897366f17e36797e5c9fc7ef12fa9fce/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=bdbaf0c7897366f17e36797e5c9fc7ef12fa9fce", "patch": "@@ -851,50 +851,45 @@ fn align_of(@block_ctxt cx, @ty.t t) -> result {\n }\n \n fn dynamic_size_of(@block_ctxt cx, @ty.t t) -> result {\n+    fn align_elements(@block_ctxt cx, vec[@ty.t] elts) -> result {\n+        //\n+        // C padding rules:\n+        //\n+        //\n+        //   - Pad after each element so that next element is aligned.\n+        //   - Pad after final structure member so that whole structure\n+        //     is aligned to max alignment of interior.\n+        //\n+        auto off = C_int(0);\n+        auto max_align = C_int(1);\n+        auto bcx = cx;\n+        for (@ty.t e in elts) {\n+            auto elt_align = align_of(bcx, e);\n+            bcx = elt_align.bcx;\n+            auto elt_size = size_of(bcx, e);\n+            bcx = elt_size.bcx;\n+            auto aligned_off = align_to(bcx, off, elt_align.val);\n+            off = cx.build.Add(aligned_off, elt_size.val);\n+            max_align = umax(bcx, max_align, elt_align.val);\n+        }\n+        off = align_to(bcx, off, max_align);\n+        ret res(bcx, off);\n+    }\n+\n     alt (t.struct) {\n         case (ty.ty_param(?p)) {\n             auto szptr = field_of_tydesc(cx, t, abi.tydesc_field_size);\n             ret res(szptr.bcx, szptr.bcx.build.Load(szptr.val));\n         }\n         case (ty.ty_tup(?elts)) {\n-            //\n-            // C padding rules:\n-            //\n-            //\n-            //   - Pad after each element so that next element is aligned.\n-            //   - Pad after final structure member so that whole structure\n-            //     is aligned to max alignment of interior.\n-            //\n-            auto off = C_int(0);\n-            auto max_align = C_int(1);\n-            auto bcx = cx;\n-            for (@ty.t e in elts) {\n-                auto elt_align = align_of(bcx, e);\n-                bcx = elt_align.bcx;\n-                auto elt_size = size_of(bcx, e);\n-                bcx = elt_size.bcx;\n-                auto aligned_off = align_to(bcx, off, elt_align.val);\n-                off = cx.build.Add(aligned_off, elt_size.val);\n-                max_align = umax(bcx, max_align, elt_align.val);\n-            }\n-            off = align_to(bcx, off, max_align);\n-            ret res(bcx, off);\n+            ret align_elements(cx, elts);\n         }\n         case (ty.ty_rec(?flds)) {\n-            auto off = C_int(0);\n-            auto max_align = C_int(1);\n-            auto bcx = cx;\n+            let vec[@ty.t] tys = vec();\n             for (ty.field f in flds) {\n-                auto elt_align = align_of(bcx, f.ty);\n-                bcx = elt_align.bcx;\n-                auto elt_size = size_of(bcx, f.ty);\n-                bcx = elt_size.bcx;\n-                auto aligned_off = align_to(bcx, off, elt_align.val);\n-                off = cx.build.Add(aligned_off, elt_size.val);\n-                max_align = umax(bcx, max_align, elt_align.val);\n+                tys += vec(f.ty);\n             }\n-            off = align_to(bcx, off, max_align);\n-            ret res(bcx, off);\n+            ret align_elements(cx, tys);\n         }\n     }\n }"}]}