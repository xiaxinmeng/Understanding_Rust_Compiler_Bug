{"sha": "272f4dfff6d0a6ae172e3efbef7d563ea088f6fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3MmY0ZGZmZjZkMGE2YWUxNzJlM2VmYmVmN2Q1NjNlYTA4OGY2ZmQ=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-03T21:27:52Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-02-03T21:27:52Z"}, "message": "hir: remove Definitions::hir_to_def_index", "tree": {"sha": "635779e6087df5e690472336b6ab80ac1ef31334", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/635779e6087df5e690472336b6ab80ac1ef31334"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/272f4dfff6d0a6ae172e3efbef7d563ea088f6fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/272f4dfff6d0a6ae172e3efbef7d563ea088f6fd", "html_url": "https://github.com/rust-lang/rust/commit/272f4dfff6d0a6ae172e3efbef7d563ea088f6fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/272f4dfff6d0a6ae172e3efbef7d563ea088f6fd/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8aeb83a4a1f242c4ff1394b645cc180fcdd5b23", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8aeb83a4a1f242c4ff1394b645cc180fcdd5b23", "html_url": "https://github.com/rust-lang/rust/commit/e8aeb83a4a1f242c4ff1394b645cc180fcdd5b23"}], "stats": {"total": 32, "additions": 5, "deletions": 27}, "files": [{"sha": "4c622adefbdb15a6ad8ee3dd6496c0ac3206be8c", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 1, "deletions": 24, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/272f4dfff6d0a6ae172e3efbef7d563ea088f6fd/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272f4dfff6d0a6ae172e3efbef7d563ea088f6fd/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=272f4dfff6d0a6ae172e3efbef7d563ea088f6fd", "patch": "@@ -20,7 +20,7 @@ use syntax::ast;\n use syntax::ext::hygiene::Mark;\n use syntax::symbol::{Symbol, InternedString};\n use syntax_pos::{Span, DUMMY_SP};\n-use util::nodemap::{HirIdMap, NodeMap};\n+use util::nodemap::NodeMap;\n \n /// The DefPathTable maps DefIndexes to DefKeys and vice versa.\n /// Internally the DefPathTable holds a tree of DefKeys, where each DefKey\n@@ -147,7 +147,6 @@ impl Decodable for DefPathTable {\n pub struct Definitions {\n     table: DefPathTable,\n     node_to_def_index: NodeMap<DefIndex>,\n-    hir_to_def_index: HirIdMap<DefIndex>,\n     def_index_to_node: [Vec<ast::NodeId>; 2],\n     pub(super) node_to_hir_id: IndexVec<ast::NodeId, hir::HirId>,\n     /// If `Mark` is an ID of some macro expansion,\n@@ -442,34 +441,16 @@ impl Definitions {\n         self.node_to_def_index.get(&node).cloned()\n     }\n \n-    // FIXME(@ljedrz): replace the NodeId variant\n-    #[inline]\n-    pub fn opt_def_index_from_hir_id(&self, hir: hir::HirId) -> Option<DefIndex> {\n-        self.hir_to_def_index.get(&hir).cloned()\n-    }\n-\n     #[inline]\n     pub fn opt_local_def_id(&self, node: ast::NodeId) -> Option<DefId> {\n         self.opt_def_index(node).map(DefId::local)\n     }\n \n-    // FIXME(@ljedrz): replace the NodeId variant\n-    #[inline]\n-    pub fn opt_local_def_id_from_hir_id(&self, hir: hir::HirId) -> Option<DefId> {\n-        self.opt_def_index_from_hir_id(hir).map(DefId::local)\n-    }\n-\n     #[inline]\n     pub fn local_def_id(&self, node: ast::NodeId) -> DefId {\n         self.opt_local_def_id(node).unwrap()\n     }\n \n-    // FIXME(@ljedrz): replace the NodeId variant\n-    #[inline]\n-    pub fn local_def_id_from_hir_id(&self, hir: hir::HirId) -> DefId {\n-        self.opt_local_def_id_from_hir_id(hir).unwrap()\n-    }\n-\n     #[inline]\n     pub fn as_local_node_id(&self, def_id: DefId) -> Option<ast::NodeId> {\n         if def_id.krate == LOCAL_CRATE {\n@@ -549,7 +530,6 @@ impl Definitions {\n         assert!(self.def_index_to_node[address_space.index()].is_empty());\n         self.def_index_to_node[address_space.index()].push(ast::CRATE_NODE_ID);\n         self.node_to_def_index.insert(ast::CRATE_NODE_ID, root_index);\n-        self.hir_to_def_index.insert(hir::CRATE_HIR_ID, root_index);\n \n         // Allocate some other DefIndices that always must exist.\n         GlobalMetaDataKind::allocate_def_indices(self);\n@@ -610,9 +590,6 @@ impl Definitions {\n         if node_id != ast::DUMMY_NODE_ID {\n             debug!(\"create_def_with_parent: def_index_to_node[{:?} <-> {:?}\", index, node_id);\n             self.node_to_def_index.insert(node_id, index);\n-            if let Some(hir_id) = self.node_to_hir_id.get(node_id) {\n-                self.hir_to_def_index.insert(*hir_id, index);\n-            }\n         }\n \n         if expansion != Mark::root() {"}, {"sha": "977ab05b20932e11749b3204e8e9a117b16bf106", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/272f4dfff6d0a6ae172e3efbef7d563ea088f6fd/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/272f4dfff6d0a6ae172e3efbef7d563ea088f6fd/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=272f4dfff6d0a6ae172e3efbef7d563ea088f6fd", "patch": "@@ -252,8 +252,8 @@ impl<'hir> Map<'hir> {\n     // FIXME(@ljedrz): replace the NodeId variant\n     #[inline]\n     pub fn local_def_id_from_hir_id(&self, hir_id: HirId) -> DefId {\n-        self.opt_local_def_id_from_hir_id(hir_id).unwrap_or_else(|| {\n-            let node_id = self.hir_to_node_id(hir_id);\n+        let node_id = self.hir_to_node_id(hir_id);\n+        self.opt_local_def_id(node_id).unwrap_or_else(|| {\n             bug!(\"local_def_id_from_hir_id: no entry for `{:?}`, which has a map of `{:?}`\",\n                  hir_id, self.find_entry(node_id))\n         })\n@@ -262,7 +262,8 @@ impl<'hir> Map<'hir> {\n     // FIXME(@ljedrz): replace the NodeId variant\n     #[inline]\n     pub fn opt_local_def_id_from_hir_id(&self, hir_id: HirId) -> Option<DefId> {\n-        self.definitions.opt_local_def_id_from_hir_id(hir_id)\n+        let node_id = self.hir_to_node_id(hir_id);\n+        self.definitions.opt_local_def_id(node_id)\n     }\n \n     #[inline]"}]}