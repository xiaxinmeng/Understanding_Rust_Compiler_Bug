{"sha": "580298680ca6500c537662f38b4f56dab9c8c9aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MDI5ODY4MGNhNjUwMGM1Mzc2NjJmMzhiNGY1NmRhYjljOGM5YWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-20T05:58:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-11-20T05:58:23Z"}, "message": "Auto merge of #45819 - Havvy:cell, r=aturon\n\nAdd RefCell<T>::replace_with\n\nI also moved the `Panic` sections to before examples in the other two functions also under this feature gate, and changed the variable names in `replace` to be more readable.\n\nr? @rust-libs", "tree": {"sha": "8fbc6c3460ba525f89f34317f5022f887d8d4889", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fbc6c3460ba525f89f34317f5022f887d8d4889"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/580298680ca6500c537662f38b4f56dab9c8c9aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/580298680ca6500c537662f38b4f56dab9c8c9aa", "html_url": "https://github.com/rust-lang/rust/commit/580298680ca6500c537662f38b4f56dab9c8c9aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/580298680ca6500c537662f38b4f56dab9c8c9aa/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef94d5c1f18f067ab035ea3f1e85e7b5867ea2a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef94d5c1f18f067ab035ea3f1e85e7b5867ea2a4", "html_url": "https://github.com/rust-lang/rust/commit/ef94d5c1f18f067ab035ea3f1e85e7b5867ea2a4"}, {"sha": "2d02772993ebeb06547ae18b8b07abe8706aff57", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d02772993ebeb06547ae18b8b07abe8706aff57", "html_url": "https://github.com/rust-lang/rust/commit/2d02772993ebeb06547ae18b8b07abe8706aff57"}], "stats": {"total": 51, "additions": 38, "deletions": 13}, "files": [{"sha": "d02576ae54607cfae982812e7eb7c8b5a8bfbc18", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 38, "deletions": 13, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/580298680ca6500c537662f38b4f56dab9c8c9aa/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/580298680ca6500c537662f38b4f56dab9c8c9aa/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=580298680ca6500c537662f38b4f56dab9c8c9aa", "patch": "@@ -579,32 +579,62 @@ impl<T> RefCell<T> {\n     ///\n     /// This function corresponds to [`std::mem::replace`](../mem/fn.replace.html).\n     ///\n+    /// # Panics\n+    ///\n+    /// Panics if the value is currently borrowed.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n     /// #![feature(refcell_replace_swap)]\n     /// use std::cell::RefCell;\n-    /// let c = RefCell::new(5);\n-    /// let u = c.replace(6);\n-    /// assert_eq!(u, 5);\n-    /// assert_eq!(c, RefCell::new(6));\n+    /// let cell = RefCell::new(5);\n+    /// let old_value = cell.replace(6);\n+    /// assert_eq!(old_value, 5);\n+    /// assert_eq!(cell, RefCell::new(6));\n     /// ```\n+    #[inline]\n+    #[unstable(feature = \"refcell_replace_swap\", issue=\"43570\")]\n+    pub fn replace(&self, t: T) -> T {\n+        mem::replace(&mut *self.borrow_mut(), t)\n+    }\n+\n+    /// Replaces the wrapped value with a new one computed from `f`, returning\n+    /// the old value, without deinitializing either one.\n+    ///\n+    /// This function corresponds to [`std::mem::replace`](../mem/fn.replace.html).\n     ///\n     /// # Panics\n     ///\n-    /// This function will panic if the `RefCell` has any outstanding borrows,\n-    /// whether or not they are full mutable borrows.\n+    /// Panics if the value is currently borrowed.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(refcell_replace_swap)]\n+    /// use std::cell::RefCell;\n+    /// let cell = RefCell::new(5);\n+    /// let old_value = cell.replace_with(|&mut old| old + 1);\n+    /// assert_eq!(old_value, 5);\n+    /// assert_eq!(cell, RefCell::new(6));\n+    /// ```\n     #[inline]\n     #[unstable(feature = \"refcell_replace_swap\", issue=\"43570\")]\n-    pub fn replace(&self, t: T) -> T {\n-        mem::replace(&mut *self.borrow_mut(), t)\n+    pub fn replace_with<F: FnOnce(&mut T) -> T>(&self, f: F) -> T {\n+        let mut_borrow = &mut *self.borrow_mut();\n+        let replacement = f(mut_borrow);\n+        mem::replace(mut_borrow, replacement)\n     }\n \n     /// Swaps the wrapped value of `self` with the wrapped value of `other`,\n     /// without deinitializing either one.\n     ///\n     /// This function corresponds to [`std::mem::swap`](../mem/fn.swap.html).\n     ///\n+    /// # Panics\n+    ///\n+    /// Panics if the value in either `RefCell` is currently borrowed.\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -616,11 +646,6 @@ impl<T> RefCell<T> {\n     /// assert_eq!(c, RefCell::new(6));\n     /// assert_eq!(d, RefCell::new(5));\n     /// ```\n-    ///\n-    /// # Panics\n-    ///\n-    /// This function will panic if either `RefCell` has any outstanding borrows,\n-    /// whether or not they are full mutable borrows.\n     #[inline]\n     #[unstable(feature = \"refcell_replace_swap\", issue=\"43570\")]\n     pub fn swap(&self, other: &Self) {"}]}