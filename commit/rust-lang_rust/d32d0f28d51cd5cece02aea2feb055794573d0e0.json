{"sha": "d32d0f28d51cd5cece02aea2feb055794573d0e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzMmQwZjI4ZDUxY2Q1Y2VjZTAyYWVhMmZlYjA1NTc5NDU3M2QwZTA=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-14T16:16:15Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-14T22:32:27Z"}, "message": "insert a field into the closure storing number of ty descs", "tree": {"sha": "08a2eb1374481c36b375ad52b5dae5a9593cb19f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08a2eb1374481c36b375ad52b5dae5a9593cb19f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d32d0f28d51cd5cece02aea2feb055794573d0e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d32d0f28d51cd5cece02aea2feb055794573d0e0", "html_url": "https://github.com/rust-lang/rust/commit/d32d0f28d51cd5cece02aea2feb055794573d0e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d32d0f28d51cd5cece02aea2feb055794573d0e0/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f7cce6b8198bd59707d8c5fba5e51471c9d8cd5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f7cce6b8198bd59707d8c5fba5e51471c9d8cd5a", "html_url": "https://github.com/rust-lang/rust/commit/f7cce6b8198bd59707d8c5fba5e51471c9d8cd5a"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "28a9d239d574417770c9513e8de1cb47bebc2f2c", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d32d0f28d51cd5cece02aea2feb055794573d0e0/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32d0f28d51cd5cece02aea2feb055794573d0e0/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=d32d0f28d51cd5cece02aea2feb055794573d0e0", "patch": "@@ -73,10 +73,9 @@ const fn_field_code: int = 0;\n const fn_field_box: int = 1;\n \n const closure_elt_tydesc: int = 0;\n-\n const closure_elt_bindings: int = 1;\n-\n-const closure_elt_ty_params: int = 2;\n+const closure_elt_n_ty_params: int = 2;\n+const closure_elt_ty_params: int = 3;\n \n const vec_elt_fill: int = 0;\n "}, {"sha": "37d4eff1cdcd09b15a3b755c11ddd5d6701bdcd6", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 19, "deletions": 15, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d32d0f28d51cd5cece02aea2feb055794573d0e0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32d0f28d51cd5cece02aea2feb055794573d0e0/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=d32d0f28d51cd5cece02aea2feb055794573d0e0", "patch": "@@ -1336,11 +1336,15 @@ fn make_take_glue(cx: @block_ctxt, v: ValueRef, t: ty::t) {\n         bcx\n       }\n       ty::ty_fn(ast::proto_send., _, _, _, _) {\n-        take_fn_env(bcx, v, { |bcx, _box_ptr_v|\n-            bcx // NDM\n+        take_fn_env(bcx, v, { |bcx, box_ptr_v|\n+            // Here, box_ptr_v is a unique pointer which\n+            // must be cloned.\n+            call_bound_data_glue_for_closure(\n+                bcx, box_ptr_v, abi::tydesc_field_take_glue);\n+            bcx\n         })\n       }\n-      ty::ty_fn(ast::proto_shared(_), _, _, _, _) {\n+      ty::ty_native_fn(_, _) | ty::ty_fn(ast::proto_shared(_), _, _, _, _) {\n         take_fn_env(bcx, v, { |bcx, box_ptr_v|\n             incr_refcnt_of_boxed(bcx, box_ptr_v)\n         })\n@@ -2633,6 +2637,7 @@ fn build_environment(bcx: @block_ctxt, lltydescs: [ValueRef],\n         };\n     }\n \n+    let ccx = bcx_ccx(bcx);\n     let tcx = bcx_tcx(bcx);\n \n     // First, synthesize a tuple type containing the types of all the\n@@ -2661,12 +2666,11 @@ fn build_environment(bcx: @block_ctxt, lltydescs: [ValueRef],\n     // ourselves) into a vector.  The whole things ends up looking\n     // like:\n \n-    // closure_tys = [tydesc_ty, [bound_ty1, bound_ty2, ...], [tydesc_ty,\n-    // tydesc_ty, ...]]\n+    // closure_ty = (tydesc_ty, (bound_ty1, bound_ty2, ...), int, (tydesc_ty,\n+    // tydesc_ty, ...))\n     let closure_tys: [ty::t] =\n-        [tydesc_ty, bindings_ty, ty::mk_tup(tcx, captured_tys)];\n-\n-    // Finally, synthesize a type for that whole vector.\n+        [tydesc_ty, bindings_ty,\n+         ty::mk_uint(tcx), ty::mk_tup(tcx, captured_tys)];\n     let closure_ty: ty::t = ty::mk_tup(tcx, closure_tys);\n \n     let temp_cleanups = [];\n@@ -2758,13 +2762,17 @@ fn build_environment(bcx: @block_ctxt, lltydescs: [ValueRef],\n     // appropriate slot in the closure.\n     // Silly check as well\n     check type_is_tup_like(bcx, closure_ty);\n-    let ty_params_slot =\n+    let {bcx:bcx, val:n_ty_params_slot} =\n+        GEP_tup_like(bcx, closure_ty, closure,\n+                     [0, abi::closure_elt_n_ty_params]);\n+    Store(bcx, C_uint(ccx, vec::len(lltydescs)), n_ty_params_slot);\n+    check type_is_tup_like(bcx, closure_ty);\n+    let {bcx:bcx, val:ty_params_slot} =\n         GEP_tup_like(bcx, closure_ty, closure,\n                      [0, abi::closure_elt_ty_params]);\n-    bcx = ty_params_slot.bcx;\n     i = 0u;\n     for td: ValueRef in lltydescs {\n-        let ty_param_slot = GEPi(bcx, ty_params_slot.val, [0, i as int]);\n+        let ty_param_slot = GEPi(bcx, ty_params_slot, [0, i as int]);\n         let cloned_td = clone_tydesc(bcx, mode, td);\n         Store(bcx, cloned_td, ty_param_slot);\n         i += 1u;\n@@ -3817,10 +3825,6 @@ fn trans_call(in_cx: @block_ctxt, f: @ast::expr,\n     let tcx = bcx_tcx(in_cx);\n     let fn_expr_ty = ty::expr_ty(tcx, f);\n \n-//NDM    if check type_is_native_fn_on_c_stack(tcx, fn_expr_ty) {\n-//NDM        ret trans_c_stack_native_call(in_cx, f, args, dest);\n-//NDM    }\n-\n     let cx = new_scope_block_ctxt(in_cx, \"call\");\n     Br(in_cx, cx.llbb);\n     let f_res = trans_callee(cx, f);"}, {"sha": "1bf3bd38931ee89dbc63fba73706ae18debd45a1", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d32d0f28d51cd5cece02aea2feb055794573d0e0/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d32d0f28d51cd5cece02aea2feb055794573d0e0/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=d32d0f28d51cd5cece02aea2feb055794573d0e0", "patch": "@@ -693,7 +693,9 @@ fn T_closure_ptr(cx: @crate_ctxt, llbindings_ty: TypeRef,\n     // NB: keep this in sync with code in trans_bind; we're making\n     // an LLVM typeref structure that has the same \"shape\" as the ty::t\n     // it constructs.\n-    ret T_ptr(T_box(cx, T_struct([T_ptr(cx.tydesc_type), llbindings_ty,\n+    ret T_ptr(T_box(cx, T_struct([T_ptr(cx.tydesc_type),\n+                                  llbindings_ty,\n+                                  cx.int_type,\n                                   T_captured_tydescs(cx, n_ty_params)])));\n }\n "}]}