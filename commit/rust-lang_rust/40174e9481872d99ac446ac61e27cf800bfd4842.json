{"sha": "40174e9481872d99ac446ac61e27cf800bfd4842", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMTc0ZTk0ODE4NzJkOTlhYzQ0NmFjNjFlMjdjZjgwMGJmZDQ4NDI=", "commit": {"author": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-11-28T21:49:09Z"}, "committer": {"name": "St\u00e9phane Campinas", "email": "stephane.campinas@gmail.com", "date": "2018-11-28T21:50:17Z"}, "message": "fix the visitor's starting position when visiting a labelled block\n\nClose #3217", "tree": {"sha": "bd09162e0f43ededf8d8f3b4f3ae600ccac9e6a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd09162e0f43ededf8d8f3b4f3ae600ccac9e6a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/40174e9481872d99ac446ac61e27cf800bfd4842", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEipi5pnt+pUplKNfibVYg2QghATMFAlv/DcwACgkQbVYg2Qgh\nATNzJQgAqZwcBuX4bqk7Bp2Yx/Noz89y86XIYlHgOzaD58jjwIyTJrFb7IpgV0O5\nAFz70sFbi4SNNNR4Fx81MJh6l9fe8pBwpspKo1YlfrJVM8jZASXuE3mobeK55Jme\nJPajDEFav9qGpO6UkW83wENduG1h1CwPHDGqOl3DmeEqHlgzAl4bjRHDMa4PeLIS\nKMFRreneNlrCqg7gJlSUu9aKVOEOOBShv8qURCTHDkzWVjqWmRRczfmt7lLBrJWK\nvhd6k0hfjVlVJMPPKk1OMw//3ShyETenFw9HymZpOO0mXR2YfuBtYPzwq+n37FBN\ntDUz2WWFovr8S4yMeQFRixRAKyzg8g==\n=+NlW\n-----END PGP SIGNATURE-----", "payload": "tree bd09162e0f43ededf8d8f3b4f3ae600ccac9e6a4\nparent bbc380b1e6b0e41042c8c259dfad49cea7af0b35\nauthor St\u00e9phane Campinas <stephane.campinas@gmail.com> 1543441749 +0100\ncommitter St\u00e9phane Campinas <stephane.campinas@gmail.com> 1543441817 +0100\n\nfix the visitor's starting position when visiting a labelled block\n\nClose #3217\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/40174e9481872d99ac446ac61e27cf800bfd4842", "html_url": "https://github.com/rust-lang/rust/commit/40174e9481872d99ac446ac61e27cf800bfd4842", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/40174e9481872d99ac446ac61e27cf800bfd4842/comments", "author": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scampi", "id": 795879, "node_id": "MDQ6VXNlcjc5NTg3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/795879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scampi", "html_url": "https://github.com/scampi", "followers_url": "https://api.github.com/users/scampi/followers", "following_url": "https://api.github.com/users/scampi/following{/other_user}", "gists_url": "https://api.github.com/users/scampi/gists{/gist_id}", "starred_url": "https://api.github.com/users/scampi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scampi/subscriptions", "organizations_url": "https://api.github.com/users/scampi/orgs", "repos_url": "https://api.github.com/users/scampi/repos", "events_url": "https://api.github.com/users/scampi/events{/privacy}", "received_events_url": "https://api.github.com/users/scampi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bbc380b1e6b0e41042c8c259dfad49cea7af0b35", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbc380b1e6b0e41042c8c259dfad49cea7af0b35", "html_url": "https://github.com/rust-lang/rust/commit/bbc380b1e6b0e41042c8c259dfad49cea7af0b35"}], "stats": {"total": 53, "additions": 42, "deletions": 11}, "files": [{"sha": "5d0383ddcb2b8e7a644ce22f9422a743e8444903", "filename": "src/expr.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/40174e9481872d99ac446ac61e27cf800bfd4842/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40174e9481872d99ac446ac61e27cf800bfd4842/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=40174e9481872d99ac446ac61e27cf800bfd4842", "patch": "@@ -417,15 +417,16 @@ fn rewrite_empty_block(\n     prefix: &str,\n     shape: Shape,\n ) -> Option<String> {\n+    if !block.stmts.is_empty() {\n+        return None;\n+    }\n+\n     let label_str = rewrite_label(label);\n     if attrs.map_or(false, |a| !inner_attributes(a).is_empty()) {\n         return None;\n     }\n \n-    if block.stmts.is_empty()\n-        && !block_contains_comment(block, context.source_map)\n-        && shape.width >= 2\n-    {\n+    if !block_contains_comment(block, context.source_map) && shape.width >= 2 {\n         return Some(format!(\"{}{}{{}}\", prefix, label_str));\n     }\n \n@@ -510,13 +511,13 @@ pub fn rewrite_block_with_visitor(\n     let mut visitor = FmtVisitor::from_context(context);\n     visitor.block_indent = shape.indent;\n     visitor.is_if_else_block = context.is_if_else_block();\n-    match block.rules {\n-        ast::BlockCheckMode::Unsafe(..) => {\n+    match (block.rules, label) {\n+        (ast::BlockCheckMode::Unsafe(..), _) | (ast::BlockCheckMode::Default, Some(_)) => {\n             let snippet = context.snippet(block.span);\n             let open_pos = snippet.find_uncommented(\"{\")?;\n             visitor.last_pos = block.span.lo() + BytePos(open_pos as u32)\n         }\n-        ast::BlockCheckMode::Default => visitor.last_pos = block.span.lo(),\n+        (ast::BlockCheckMode::Default, None) => visitor.last_pos = block.span.lo(),\n     }\n \n     let inner_attrs = attrs.map(inner_attributes);"}, {"sha": "eddc04460350c434f0dc1587e2a74608817efab2", "filename": "src/reorder.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/40174e9481872d99ac446ac61e27cf800bfd4842/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40174e9481872d99ac446ac61e27cf800bfd4842/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=40174e9481872d99ac446ac61e27cf800bfd4842", "patch": "@@ -42,10 +42,8 @@ fn compare_items(a: &ast::Item, b: &ast::Item) -> Ordering {\n         (&ast::ItemKind::ExternCrate(ref a_name), &ast::ItemKind::ExternCrate(ref b_name)) => {\n             // `extern crate foo as bar;`\n             //               ^^^ Comparing this.\n-            let a_orig_name =\n-                a_name.map_or_else(|| a.ident.as_str(), |symbol| symbol.as_str());\n-            let b_orig_name =\n-                b_name.map_or_else(|| b.ident.as_str(), |symbol| symbol.as_str());\n+            let a_orig_name = a_name.map_or_else(|| a.ident.as_str(), |symbol| symbol.as_str());\n+            let b_orig_name = b_name.map_or_else(|| b.ident.as_str(), |symbol| symbol.as_str());\n             let result = a_orig_name.cmp(&b_orig_name);\n             if result != Ordering::Equal {\n                 return result;"}, {"sha": "176c702002a2804e157f845ea3c7aa1af8ac9628", "filename": "tests/source/issue-3217.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/40174e9481872d99ac446ac61e27cf800bfd4842/tests%2Fsource%2Fissue-3217.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40174e9481872d99ac446ac61e27cf800bfd4842/tests%2Fsource%2Fissue-3217.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fissue-3217.rs?ref=40174e9481872d99ac446ac61e27cf800bfd4842", "patch": "@@ -0,0 +1,8 @@\n+#![feature(label_break_value)]\n+\n+fn main() {\n+    let mut res = 0;\n+    's_39: { if res == 0i32 { println!(\"Hello, world!\"); } }\n+    's_40: loop { println!(\"res = {}\", res); res += 1; if res == 3i32 { break 's_40; } }\n+    let toto = || { if true { 42 } else { 24 } };\n+}"}, {"sha": "5121320a0975b1e523ef025ccab9bf3109a2c0f5", "filename": "tests/target/issue-3217.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/40174e9481872d99ac446ac61e27cf800bfd4842/tests%2Ftarget%2Fissue-3217.rs", "raw_url": "https://github.com/rust-lang/rust/raw/40174e9481872d99ac446ac61e27cf800bfd4842/tests%2Ftarget%2Fissue-3217.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fissue-3217.rs?ref=40174e9481872d99ac446ac61e27cf800bfd4842", "patch": "@@ -0,0 +1,24 @@\n+#![feature(label_break_value)]\n+\n+fn main() {\n+    let mut res = 0;\n+    's_39: {\n+        if res == 0i32 {\n+            println!(\"Hello, world!\");\n+        }\n+    }\n+    's_40: loop {\n+        println!(\"res = {}\", res);\n+        res += 1;\n+        if res == 3i32 {\n+            break 's_40;\n+        }\n+    }\n+    let toto = || {\n+        if true {\n+            42\n+        } else {\n+            24\n+        }\n+    };\n+}"}]}