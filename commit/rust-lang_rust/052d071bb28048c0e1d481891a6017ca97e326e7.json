{"sha": "052d071bb28048c0e1d481891a6017ca97e326e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1MmQwNzFiYjI4MDQ4YzBlMWQ0ODE4OTFhNjAxN2NhOTdlMzI2ZTc=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-05-08T14:05:03Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-05-08T14:05:03Z"}, "message": "try to fix lvalue ops for real\n\nHopefully this is the last PR needed.\n\nFixes #41726.\nFixes #41742.\nFixes #41774.", "tree": {"sha": "7f23da00afb9a07bc149c07cb7b9e294254eb6b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f23da00afb9a07bc149c07cb7b9e294254eb6b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/052d071bb28048c0e1d481891a6017ca97e326e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/052d071bb28048c0e1d481891a6017ca97e326e7", "html_url": "https://github.com/rust-lang/rust/commit/052d071bb28048c0e1d481891a6017ca97e326e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/052d071bb28048c0e1d481891a6017ca97e326e7/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ced823e267c132fab172b1890b24073995e79ffa", "url": "https://api.github.com/repos/rust-lang/rust/commits/ced823e267c132fab172b1890b24073995e79ffa", "html_url": "https://github.com/rust-lang/rust/commit/ced823e267c132fab172b1890b24073995e79ffa"}], "stats": {"total": 126, "additions": 109, "deletions": 17}, "files": [{"sha": "5cec71a7eb76982d8c92ae5b0866b94661d97de1", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 31, "deletions": 17, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/052d071bb28048c0e1d481891a6017ca97e326e7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052d071bb28048c0e1d481891a6017ca97e326e7/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=052d071bb28048c0e1d481891a6017ca97e326e7", "patch": "@@ -433,22 +433,11 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n         for (i, &expr) in exprs.iter().rev().enumerate() {\n             debug!(\"convert_lvalue_derefs_to_mutable: i={} expr={:?}\", i, expr);\n \n-            // Fix up the adjustment.\n-            let autoderefs = match self.tables.borrow_mut().adjustments.get_mut(&expr.id) {\n-                Some(&mut Adjustment {\n-                    kind: Adjust::DerefRef { autoderefs, ref mut autoref, .. }, ref mut target\n-                }) => {\n-                    if let &mut Some(AutoBorrow::Ref(_, ref mut mutbl)) = autoref {\n-                        *mutbl = hir::Mutability::MutMutable;\n-                        *target = match target.sty {\n-                            ty::TyRef(r, ty::TypeAndMut { ty, .. }) =>\n-                                self.tcx.mk_ref(r, ty::TypeAndMut { ty, mutbl: *mutbl }),\n-                            _ => span_bug!(expr.span, \"AutoBorrow::Ref resulted in non-ref {:?}\",\n-                                           target)\n-                        };\n-                    }\n-                    autoderefs\n-                }\n+            // Fix up the autoderefs. Autorefs can only occur immediately preceding\n+            // overloaded lvalue ops, and will be fixed by them in order to get\n+            // the correct region.\n+            let autoderefs = match self.tables.borrow().adjustments.get(&expr.id) {\n+                Some(&Adjustment { kind: Adjust::DerefRef { autoderefs, .. }, .. }) => autoderefs,\n                 Some(_) | None => 0\n             };\n \n@@ -502,10 +491,35 @@ impl<'a, 'gcx, 'tcx> ConfirmContext<'a, 'gcx, 'tcx> {\n \n         let method = self.try_overloaded_lvalue_op(\n             expr.span, None, base_ty, arg_tys, PreferMutLvalue, op);\n-        let ok = method.expect(\"re-trying op failed\");\n+        let ok = match method {\n+            Some(method) => method,\n+            None => return self.tcx.sess.delay_span_bug(expr.span, \"re-trying op failed\")\n+        };\n         let method = self.register_infer_ok_obligations(ok);\n         debug!(\"convert_lvalue_op_to_mutable: method={:?}\", method);\n         self.tables.borrow_mut().method_map.insert(method_call, method);\n+\n+        // Convert the autoref in the base expr to mutable with the correct\n+        // region and mutability.\n+        if let Some(&mut Adjustment {\n+            ref mut target, kind: Adjust::DerefRef {\n+                autoref: Some(AutoBorrow::Ref(ref mut r, ref mut mutbl)), ..\n+            }\n+        }) = self.tables.borrow_mut().adjustments.get_mut(&base_expr.id) {\n+            debug!(\"convert_lvalue_op_to_mutable: converting autoref of {:?}\", target);\n+\n+            // extract method return type, which will be &mut T;\n+            // all LB regions should have been instantiated during method lookup\n+            let method_sig = self.tcx.no_late_bound_regions(&method.ty.fn_sig()).unwrap();\n+\n+            *target = method_sig.inputs()[0];\n+            if let ty::TyRef(r_, mt) = target.sty {\n+                *r = r_;\n+                *mutbl = mt.mutbl;\n+            } else {\n+                span_bug!(expr.span, \"input to lvalue op is not a ref?\");\n+            }\n+        }\n     }\n \n     ///////////////////////////////////////////////////////////////////////////"}, {"sha": "c8cd9209bceb4ef6ddc7e60189becf5b61c6073a", "filename": "src/test/compile-fail/issue-41726.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/052d071bb28048c0e1d481891a6017ca97e326e7/src%2Ftest%2Fcompile-fail%2Fissue-41726.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052d071bb28048c0e1d481891a6017ca97e326e7/src%2Ftest%2Fcompile-fail%2Fissue-41726.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-41726.rs?ref=052d071bb28048c0e1d481891a6017ca97e326e7", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::collections::HashMap;\n+fn main() {\n+    let things: HashMap<String, Vec<String>> = HashMap::new();\n+    for src in things.keys() {\n+        things[src.as_str()].sort(); //~ ERROR cannot borrow immutable\n+    }\n+}"}, {"sha": "067531e036ad810f0f23a1c5a9e5235e9a6302b2", "filename": "src/test/compile-fail/issue-41742.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/052d071bb28048c0e1d481891a6017ca97e326e7/src%2Ftest%2Fcompile-fail%2Fissue-41742.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052d071bb28048c0e1d481891a6017ca97e326e7/src%2Ftest%2Fcompile-fail%2Fissue-41742.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-41742.rs?ref=052d071bb28048c0e1d481891a6017ca97e326e7", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use std::ops::{Index, IndexMut};\n+\n+struct S;\n+struct H;\n+\n+impl S {\n+    fn f(&mut self) {}\n+}\n+\n+impl Index<u32> for H {\n+    type Output = S;\n+    fn index(&self, index: u32) -> &S {\n+        unimplemented!()\n+    }\n+}\n+\n+impl IndexMut<u32> for H {\n+    fn index_mut(&mut self, index: u32) -> &mut S {\n+        unimplemented!()\n+    }\n+}\n+\n+fn main() {\n+    H[\"?\"].f(); //~ ERROR mismatched types\n+}"}, {"sha": "167c8630707528d1ca5c5d0dbe922a3a615648e8", "filename": "src/test/compile-fail/regions-adjusted-lvalue-op.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/052d071bb28048c0e1d481891a6017ca97e326e7/src%2Ftest%2Fcompile-fail%2Fregions-adjusted-lvalue-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/052d071bb28048c0e1d481891a6017ca97e326e7/src%2Ftest%2Fcompile-fail%2Fregions-adjusted-lvalue-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-adjusted-lvalue-op.rs?ref=052d071bb28048c0e1d481891a6017ca97e326e7", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// check that we link regions in mutable lvalue ops correctly - issue #41774\n+\n+struct Data(i32);\n+\n+trait OhNo {\n+    fn oh_no(&mut self, other: &Vec<Data>) { loop {} }\n+}\n+\n+impl OhNo for Data {}\n+impl OhNo for [Data] {}\n+\n+fn main() {\n+    let mut v = vec![Data(0)];\n+    v[0].oh_no(&v); //~ ERROR cannot borrow `v` as immutable because\n+    (*v).oh_no(&v); //~ ERROR cannot borrow `v` as immutable because\n+}"}]}