{"sha": "94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0Yzc4OWIyNzVjMmVjMTljNDdkYzNhZWEwZmNlZWQ2YThhZjU1YjE=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2020-09-15T19:34:58Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2020-09-26T12:34:49Z"}, "message": "`char` not char", "tree": {"sha": "8aa5d824676f7dc01e9e5677759604b6c9c7f65e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8aa5d824676f7dc01e9e5677759604b6c9c7f65e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "html_url": "https://github.com/rust-lang/rust/commit/94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f", "html_url": "https://github.com/rust-lang/rust/commit/8eb42ba0fbd0326a8ffbe6ec2ff0abffaffa1a8f"}], "stats": {"total": 93, "additions": 47, "deletions": 46}, "files": [{"sha": "3e431a9c0009095867cc907892e5a2949230034d", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "patch": "@@ -495,7 +495,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             self.tcx.sess,\n             span,\n             E0029,\n-            \"only char and numeric types are allowed in range patterns\"\n+            \"only `char` and numeric types are allowed in range patterns\"\n         );\n         let msg = |ty| format!(\"this is of type `{}` but it should be `char` or numeric\", ty);\n         let mut one_side_err = |first_span, first_ty, second: Option<(bool, Ty<'tcx>, Span)>| {"}, {"sha": "3ff8cb348e76a9c081e4a169ad9f4ac45d6bc1e7", "filename": "src/test/ui/error-codes/E0029-teach.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.rs?ref=94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "patch": "@@ -5,7 +5,7 @@ fn main() {\n \n     match s {\n         \"hello\" ..= \"world\" => {}\n-        //~^ ERROR only char and numeric types are allowed in range patterns\n+        //~^ ERROR only `char` and numeric types are allowed in range patterns\n         _ => {}\n     }\n }"}, {"sha": "b89b2e7d11e8b4d8d677e6d3292034c6b09844c4", "filename": "src/test/ui/error-codes/E0029-teach.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029-teach.stderr?ref=94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "patch": "@@ -1,4 +1,4 @@\n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/E0029-teach.rs:7:9\n    |\n LL |         \"hello\" ..= \"world\" => {}"}, {"sha": "d9b53e113c01ea14585e5f1f5f2b4183d142ccbe", "filename": "src/test/ui/error-codes/E0029.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Ferror-codes%2FE0029.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Ferror-codes%2FE0029.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029.rs?ref=94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "patch": "@@ -3,7 +3,7 @@ fn main() {\n \n     match s {\n         \"hello\" ..= \"world\" => {}\n-        //~^ ERROR only char and numeric types are allowed in range patterns\n+        //~^ ERROR only `char` and numeric types are allowed in range patterns\n         _ => {}\n     }\n }"}, {"sha": "f7250b39d3f917df5e6a65d66785ac3679057a28", "filename": "src/test/ui/error-codes/E0029.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0029.stderr?ref=94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "patch": "@@ -1,4 +1,4 @@\n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/E0029.rs:5:9\n    |\n LL |         \"hello\" ..= \"world\" => {}"}, {"sha": "b08732219db7dc3c077716be98baca7308234cba", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-bad-types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.rs?ref=94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "patch": "@@ -2,7 +2,7 @@\n #![feature(exclusive_range_pattern)]\n \n fn main() {\n-    let \"a\".. = \"a\"; //~ ERROR only char and numeric types are allowed in range patterns\n-    let ..\"a\" = \"a\"; //~ ERROR only char and numeric types are allowed in range patterns\n-    let ..=\"a\" = \"a\"; //~ ERROR only char and numeric types are allowed in range patterns\n+    let \"a\".. = \"a\"; //~ ERROR only `char` and numeric types are allowed in range patterns\n+    let ..\"a\" = \"a\"; //~ ERROR only `char` and numeric types are allowed in range patterns\n+    let ..=\"a\" = \"a\"; //~ ERROR only `char` and numeric types are allowed in range patterns\n }"}, {"sha": "df0dae5696de65125c58acfc51d114b92bfa5533", "filename": "src/test/ui/half-open-range-patterns/half-open-range-pats-bad-types.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhalf-open-range-patterns%2Fhalf-open-range-pats-bad-types.stderr?ref=94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "patch": "@@ -1,16 +1,16 @@\n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/half-open-range-pats-bad-types.rs:5:9\n    |\n LL |     let \"a\".. = \"a\";\n    |         ^^^ this is of type `&'static str` but it should be `char` or numeric\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/half-open-range-pats-bad-types.rs:6:11\n    |\n LL |     let ..\"a\" = \"a\";\n    |           ^^^ this is of type `&'static str` but it should be `char` or numeric\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/half-open-range-pats-bad-types.rs:7:12\n    |\n LL |     let ..=\"a\" = \"a\";"}, {"sha": "e53c8463ef4bfdb7582005c817193c3488e663e1", "filename": "src/test/ui/match/match-range-fail.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.rs?ref=94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "patch": "@@ -2,17 +2,17 @@ fn main() {\n     match \"wow\" {\n         \"bar\" ..= \"foo\" => { }\n     };\n-    //~^^ ERROR only char and numeric types are allowed in range\n+    //~^^ ERROR only `char` and numeric types are allowed in range\n \n     match \"wow\" {\n         10 ..= \"what\" => ()\n     };\n-    //~^^ ERROR only char and numeric types are allowed in range\n+    //~^^ ERROR only `char` and numeric types are allowed in range\n \n     match \"wow\" {\n         true ..= \"what\" => {}\n     };\n-    //~^^ ERROR only char and numeric types are allowed in range\n+    //~^^ ERROR only `char` and numeric types are allowed in range\n \n     match 5 {\n         'c' ..= 100 => { }"}, {"sha": "938c05ac7324c8c02295977068cdb824c516b739", "filename": "src/test/ui/match/match-range-fail.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-range-fail.stderr?ref=94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "patch": "@@ -1,4 +1,4 @@\n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/match-range-fail.rs:3:9\n    |\n LL |         \"bar\" ..= \"foo\" => { }\n@@ -7,15 +7,15 @@ LL |         \"bar\" ..= \"foo\" => { }\n    |         |         this is of type `&'static str` but it should be `char` or numeric\n    |         this is of type `&'static str` but it should be `char` or numeric\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/match-range-fail.rs:8:16\n    |\n LL |         10 ..= \"what\" => ()\n    |         --     ^^^^^^ this is of type `&'static str` but it should be `char` or numeric\n    |         |\n    |         this is of type `{integer}`\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/match-range-fail.rs:13:9\n    |\n LL |         true ..= \"what\" => {}"}, {"sha": "7412b624b09cd8f41de6120012d3a8d253a6c409", "filename": "src/test/ui/parser/recover-range-pats.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.rs?ref=94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "patch": "@@ -17,8 +17,8 @@ fn exclusive_from_to() {\n     if let 0..Y = 0 {} // OK.\n     if let X..3 = 0 {} // OK.\n     if let X..Y = 0 {} // OK.\n-    if let true..Y = 0 {} //~ ERROR only char and numeric types\n-    if let X..true = 0 {} //~ ERROR only char and numeric types\n+    if let true..Y = 0 {} //~ ERROR only `char` and numeric types\n+    if let X..true = 0 {} //~ ERROR only `char` and numeric types\n     if let .0..Y = 0 {} //~ ERROR mismatched types\n     //~^ ERROR float literals must have an integer part\n     if let X.. .0 = 0 {} //~ ERROR mismatched types\n@@ -30,8 +30,8 @@ fn inclusive_from_to() {\n     if let 0..=Y = 0 {} // OK.\n     if let X..=3 = 0 {} // OK.\n     if let X..=Y = 0 {} // OK.\n-    if let true..=Y = 0 {} //~ ERROR only char and numeric types\n-    if let X..=true = 0 {} //~ ERROR only char and numeric types\n+    if let true..=Y = 0 {} //~ ERROR only `char` and numeric types\n+    if let X..=true = 0 {} //~ ERROR only `char` and numeric types\n     if let .0..=Y = 0 {} //~ ERROR mismatched types\n     //~^ ERROR float literals must have an integer part\n     if let X..=.0 = 0 {} //~ ERROR mismatched types\n@@ -43,9 +43,9 @@ fn inclusive2_from_to() {\n     if let 0...Y = 0 {} //~ ERROR `...` range patterns are deprecated\n     if let X...3 = 0 {} //~ ERROR `...` range patterns are deprecated\n     if let X...Y = 0 {} //~ ERROR `...` range patterns are deprecated\n-    if let true...Y = 0 {} //~ ERROR only char and numeric types\n+    if let true...Y = 0 {} //~ ERROR only `char` and numeric types\n     //~^ ERROR `...` range patterns are deprecated\n-    if let X...true = 0 {} //~ ERROR only char and numeric types\n+    if let X...true = 0 {} //~ ERROR only `char` and numeric types\n     //~^ ERROR `...` range patterns are deprecated\n     if let .0...Y = 0 {} //~ ERROR mismatched types\n     //~^ ERROR float literals must have an integer part\n@@ -59,7 +59,7 @@ fn exclusive_from() {\n     if let 0.. = 0 {}\n     if let X.. = 0 {}\n     if let true.. = 0 {}\n-    //~^ ERROR only char and numeric types\n+    //~^ ERROR only `char` and numeric types\n     if let .0.. = 0 {}\n     //~^ ERROR float literals must have an integer part\n     //~| ERROR mismatched types\n@@ -69,7 +69,7 @@ fn inclusive_from() {\n     if let 0..= = 0 {} //~ ERROR inclusive range with no end\n     if let X..= = 0 {} //~ ERROR inclusive range with no end\n     if let true..= = 0 {} //~ ERROR inclusive range with no end\n-    //~| ERROR only char and numeric types\n+    //~| ERROR only `char` and numeric types\n     if let .0..= = 0 {} //~ ERROR inclusive range with no end\n     //~^ ERROR float literals must have an integer part\n     //~| ERROR mismatched types\n@@ -79,7 +79,7 @@ fn inclusive2_from() {\n     if let 0... = 0 {} //~ ERROR inclusive range with no end\n     if let X... = 0 {} //~ ERROR inclusive range with no end\n     if let true... = 0 {} //~ ERROR inclusive range with no end\n-    //~| ERROR only char and numeric types\n+    //~| ERROR only `char` and numeric types\n     if let .0... = 0 {} //~ ERROR inclusive range with no end\n     //~^ ERROR float literals must have an integer part\n     //~| ERROR mismatched types\n@@ -89,7 +89,7 @@ fn exclusive_to() {\n     if let ..0 = 0 {}\n     if let ..Y = 0 {}\n     if let ..true = 0 {}\n-    //~^ ERROR only char and numeric types\n+    //~^ ERROR only `char` and numeric types\n     if let .. .0 = 0 {}\n     //~^ ERROR float literals must have an integer part\n     //~| ERROR mismatched types\n@@ -99,7 +99,7 @@ fn inclusive_to() {\n     if let ..=3 = 0 {}\n     if let ..=Y = 0 {}\n     if let ..=true = 0 {}\n-    //~^ ERROR only char and numeric types\n+    //~^ ERROR only `char` and numeric types\n     if let ..=.0 = 0 {}\n     //~^ ERROR float literals must have an integer part\n     //~| ERROR mismatched types\n@@ -112,7 +112,7 @@ fn inclusive2_to() {\n     //~^ ERROR range-to patterns with `...` are not allowed\n     if let ...true = 0 {}\n     //~^ ERROR range-to patterns with `...` are not allowed\n-    //~| ERROR only char and numeric types\n+    //~| ERROR only `char` and numeric types\n     if let ....3 = 0 {}\n     //~^ ERROR float literals must have an integer part\n     //~| ERROR range-to patterns with `...` are not allowed"}, {"sha": "e351a9783bf17042907b17d32b944866e5db93a4", "filename": "src/test/ui/parser/recover-range-pats.stderr", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-range-pats.stderr?ref=94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "patch": "@@ -258,15 +258,15 @@ LL |     mac2!(0, 1);\n    |\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:20:12\n    |\n LL |     if let true..Y = 0 {}\n    |            ^^^^  - this is of type `u8`\n    |            |\n    |            this is of type `bool` but it should be `char` or numeric\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:21:15\n    |\n LL |     if let X..true = 0 {}\n@@ -291,15 +291,15 @@ LL |     if let X.. .0 = 0 {}\n    |            |   expected integer, found floating-point number\n    |            this is of type `u8`\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:33:12\n    |\n LL |     if let true..=Y = 0 {}\n    |            ^^^^   - this is of type `u8`\n    |            |\n    |            this is of type `bool` but it should be `char` or numeric\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:34:16\n    |\n LL |     if let X..=true = 0 {}\n@@ -324,15 +324,15 @@ LL |     if let X..=.0 = 0 {}\n    |            |   expected integer, found floating-point number\n    |            this is of type `u8`\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:46:12\n    |\n LL |     if let true...Y = 0 {}\n    |            ^^^^   - this is of type `u8`\n    |            |\n    |            this is of type `bool` but it should be `char` or numeric\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:48:16\n    |\n LL |     if let X...true = 0 {}\n@@ -357,7 +357,7 @@ LL |     if let X... .0 = 0 {}\n    |            |    expected integer, found floating-point number\n    |            this is of type `u8`\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:61:12\n    |\n LL |     if let true.. = 0 {}\n@@ -369,7 +369,7 @@ error[E0308]: mismatched types\n LL |     if let .0.. = 0 {}\n    |            ^^ expected integer, found floating-point number\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:71:12\n    |\n LL |     if let true..= = 0 {}\n@@ -381,7 +381,7 @@ error[E0308]: mismatched types\n LL |     if let .0..= = 0 {}\n    |            ^^ expected integer, found floating-point number\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:81:12\n    |\n LL |     if let true... = 0 {}\n@@ -393,7 +393,7 @@ error[E0308]: mismatched types\n LL |     if let .0... = 0 {}\n    |            ^^ expected integer, found floating-point number\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:91:14\n    |\n LL |     if let ..true = 0 {}\n@@ -405,7 +405,7 @@ error[E0308]: mismatched types\n LL |     if let .. .0 = 0 {}\n    |               ^^ expected integer, found floating-point number\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:101:15\n    |\n LL |     if let ..=true = 0 {}\n@@ -417,7 +417,7 @@ error[E0308]: mismatched types\n LL |     if let ..=.0 = 0 {}\n    |               ^^ expected integer, found floating-point number\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/recover-range-pats.rs:113:15\n    |\n LL |     if let ...true = 0 {}"}, {"sha": "9464f277fb088e7897a0cfb22d49c0f575e5925b", "filename": "src/test/ui/pattern/patkind-litrange-no-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.rs?ref=94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "patch": "@@ -19,7 +19,7 @@ enum_number!(Change {\n     Neg = -1,\n     Arith = 1 + 1, //~ ERROR arbitrary expressions aren't allowed in patterns\n                    //~| ERROR arbitrary expressions aren't allowed in patterns\n-                   //~| ERROR only char and numeric types are allowed in range patterns\n+                   //~| ERROR only `char` and numeric types are allowed in range patterns\n });\n \n fn main() {}"}, {"sha": "51af167a7c1d198f0a1be079c20a6912e17bb595", "filename": "src/test/ui/pattern/patkind-litrange-no-expr.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fpatkind-litrange-no-expr.stderr?ref=94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "patch": "@@ -10,7 +10,7 @@ error: arbitrary expressions aren't allowed in patterns\n LL |     Arith = 1 + 1,\n    |             ^^^^^\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/patkind-litrange-no-expr.rs:20:13\n    |\n LL |                 $( $value ..= 42 => Some($name::$variant), )* // PatKind::Range"}, {"sha": "e8a95a46010af7c17fc66a92ea6e6b3f23fc4dba", "filename": "src/test/ui/qualified/qualified-path-params.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.rs?ref=94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "patch": "@@ -18,7 +18,8 @@ impl S {\n fn main() {\n     match 10 {\n         <S as Tr>::A::f::<u8> => {}\n-    //~^ ERROR expected unit struct, unit variant or constant, found associated function\n-        0 ..= <S as Tr>::A::f::<u8> => {} //~ ERROR only char and numeric types are allowed in range\n+        //~^ ERROR expected unit struct, unit variant or constant, found associated function\n+        0 ..= <S as Tr>::A::f::<u8> => {}\n+        //~^ ERROR only `char` and numeric types are allowed in range\n     }\n }"}, {"sha": "2be2deeb7554942470a19e15877b1adeec9b91be", "filename": "src/test/ui/qualified/qualified-path-params.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/94c789b275c2ec19c47dc3aea0fceed6a8af55b1/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fqualified%2Fqualified-path-params.stderr?ref=94c789b275c2ec19c47dc3aea0fceed6a8af55b1", "patch": "@@ -4,7 +4,7 @@ error[E0533]: expected unit struct, unit variant or constant, found associated f\n LL |         <S as Tr>::A::f::<u8> => {}\n    |         ^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0029]: only char and numeric types are allowed in range patterns\n+error[E0029]: only `char` and numeric types are allowed in range patterns\n   --> $DIR/qualified-path-params.rs:22:15\n    |\n LL |         0 ..= <S as Tr>::A::f::<u8> => {}"}]}