{"sha": "43a48ca5bba2698e253d6229139328d353276ee8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzYTQ4Y2E1YmJhMjY5OGUyNTNkNjIyOTEzOTMyOGQzNTMyNzZlZTg=", "commit": {"author": {"name": "Ben Striegel", "email": "ben.striegel@gmail.com", "date": "2012-06-24T04:05:52Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-06-25T21:25:48Z"}, "message": "Automatically export methods on core numeric types\n\nEach numeric type now contains an extensions module that is automatically\nexported. At the moment each extensions module contains only the impl for the\n`num::num` iface. Other impls soon to follow (hopefully).", "tree": {"sha": "559837ded01fd12ce960a1a29c1b2246a79b452a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/559837ded01fd12ce960a1a29c1b2246a79b452a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/43a48ca5bba2698e253d6229139328d353276ee8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/43a48ca5bba2698e253d6229139328d353276ee8", "html_url": "https://github.com/rust-lang/rust/commit/43a48ca5bba2698e253d6229139328d353276ee8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/43a48ca5bba2698e253d6229139328d353276ee8/comments", "author": {"login": "bstrie", "id": 865233, "node_id": "MDQ6VXNlcjg2NTIzMw==", "avatar_url": "https://avatars.githubusercontent.com/u/865233?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bstrie", "html_url": "https://github.com/bstrie", "followers_url": "https://api.github.com/users/bstrie/followers", "following_url": "https://api.github.com/users/bstrie/following{/other_user}", "gists_url": "https://api.github.com/users/bstrie/gists{/gist_id}", "starred_url": "https://api.github.com/users/bstrie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bstrie/subscriptions", "organizations_url": "https://api.github.com/users/bstrie/orgs", "repos_url": "https://api.github.com/users/bstrie/repos", "events_url": "https://api.github.com/users/bstrie/events{/privacy}", "received_events_url": "https://api.github.com/users/bstrie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "07d568688c3a97866439735742bc0f489723a78a", "url": "https://api.github.com/repos/rust-lang/rust/commits/07d568688c3a97866439735742bc0f489723a78a", "html_url": "https://github.com/rust-lang/rust/commit/07d568688c3a97866439735742bc0f489723a78a"}], "stats": {"total": 159, "additions": 104, "deletions": 55}, "files": [{"sha": "35c416d34e052b29760554e2500296ce8a54a508", "filename": "src/libcore/core.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/43a48ca5bba2698e253d6229139328d353276ee8/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a48ca5bba2698e253d6229139328d353276ee8/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=43a48ca5bba2698e253d6229139328d353276ee8", "patch": "@@ -12,9 +12,24 @@ import option_iter::extensions;\n import ptr::extensions;\n import rand::extensions;\n import result::extensions;\n+import int::extensions::*;\n+import i8::extensions::*;\n+import i16::extensions::*;\n+import i32::extensions::*;\n+import i64::extensions::*;\n+import uint::extensions::*;\n+import u8::extensions::*;\n+import u16::extensions::*;\n+import u32::extensions::*;\n+import u64::extensions::*;\n+import float::extensions::*;\n+import f32::extensions::*;\n+import f64::extensions::*;\n \n export path, option, some, none, unreachable;\n export extensions;\n+// The following exports are the extension impls for numeric types\n+export num;\n \n // Export the log levels as global constants. Higher levels mean\n // more-verbosity. Error is the bottom level, default logging level is"}, {"sha": "b68771348eca106f45918395c450a6702ad9575f", "filename": "src/libcore/f32.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/43a48ca5bba2698e253d6229139328d353276ee8/src%2Flibcore%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a48ca5bba2698e253d6229139328d353276ee8/src%2Flibcore%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff32.rs?ref=43a48ca5bba2698e253d6229139328d353276ee8", "patch": "@@ -18,7 +18,7 @@ export mul_add, fmax, fmin, nextafter, frexp, hypot, ldexp;\n export lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix;\n export modf, pow, round, sin, sinh, sqrt, tan, tanh, tgamma, trunc;\n export signbit;\n-export num;\n+export extensions;\n \n // These are not defined inside consts:: for consistency with\n // the integer types\n@@ -173,16 +173,18 @@ pure fn log2(n: f32) -> f32 {\n     ret ln(n) / consts::ln_2;\n }\n \n-impl num of num for f32 {\n-    fn add(&&other: f32)    -> f32 { ret self + other; }\n-    fn sub(&&other: f32)    -> f32 { ret self - other; }\n-    fn mul(&&other: f32)    -> f32 { ret self * other; }\n-    fn div(&&other: f32)    -> f32 { ret self / other; }\n-    fn modulo(&&other: f32) -> f32 { ret self % other; }\n-    fn neg()                -> f32 { ret -self;        }\n-\n-    fn to_int()         -> int { ret self as int; }\n-    fn from_int(n: int) -> f32 { ret n as f32;    }\n+mod extensions {\n+    impl num of num for f32 {\n+        fn add(&&other: f32)    -> f32 { ret self + other; }\n+        fn sub(&&other: f32)    -> f32 { ret self - other; }\n+        fn mul(&&other: f32)    -> f32 { ret self * other; }\n+        fn div(&&other: f32)    -> f32 { ret self / other; }\n+        fn modulo(&&other: f32) -> f32 { ret self % other; }\n+        fn neg()                -> f32 { ret -self;        }\n+\n+        fn to_int()         -> int { ret self as int; }\n+        fn from_int(n: int) -> f32 { ret n as f32;    }\n+    }\n }\n \n //"}, {"sha": "6c3a2e9bd7e139d03e440d9e233d9d269d78f47d", "filename": "src/libcore/f64.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/43a48ca5bba2698e253d6229139328d353276ee8/src%2Flibcore%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a48ca5bba2698e253d6229139328d353276ee8/src%2Flibcore%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ff64.rs?ref=43a48ca5bba2698e253d6229139328d353276ee8", "patch": "@@ -22,7 +22,7 @@ export lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix;\n export modf, pow, round, sin, sinh, sqrt, tan, tanh, tgamma, trunc;\n export signbit;\n export epsilon;\n-export num;\n+export extensions;\n \n // These are not defined inside consts:: for consistency with\n // the integer types\n@@ -196,16 +196,18 @@ pure fn log2(n: f64) -> f64 {\n     ret ln(n) / consts::ln_2;\n }\n \n-impl num of num for f64 {\n-    fn add(&&other: f64)    -> f64 { ret self + other; }\n-    fn sub(&&other: f64)    -> f64 { ret self - other; }\n-    fn mul(&&other: f64)    -> f64 { ret self * other; }\n-    fn div(&&other: f64)    -> f64 { ret self / other; }\n-    fn modulo(&&other: f64) -> f64 { ret self % other; }\n-    fn neg()                -> f64 { ret -self;        }\n-\n-    fn to_int()         -> int { ret self as int; }\n-    fn from_int(n: int) -> f64 { ret n as f64;    }\n+mod extensions {\n+    impl num of num for f64 {\n+        fn add(&&other: f64)    -> f64 { ret self + other; }\n+        fn sub(&&other: f64)    -> f64 { ret self - other; }\n+        fn mul(&&other: f64)    -> f64 { ret self * other; }\n+        fn div(&&other: f64)    -> f64 { ret self / other; }\n+        fn modulo(&&other: f64) -> f64 { ret self % other; }\n+        fn neg()                -> f64 { ret -self;        }\n+\n+        fn to_int()         -> int { ret self as int; }\n+        fn from_int(n: int) -> f64 { ret n as f64;    }\n+    }\n }\n \n //"}, {"sha": "6f63a84f0530d032cffd2529f7f0dcabdec43688", "filename": "src/libcore/float.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/43a48ca5bba2698e253d6229139328d353276ee8/src%2Flibcore%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a48ca5bba2698e253d6229139328d353276ee8/src%2Flibcore%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffloat.rs?ref=43a48ca5bba2698e253d6229139328d353276ee8", "patch": "@@ -17,7 +17,7 @@ export lgamma, ln, log_radix, ln1p, log10, log2, ilog_radix;\n export modf, pow, round, sin, sinh, sqrt, tan, tanh, tgamma, trunc;\n export signbit;\n export pow_with_uint;\n-export num;\n+export extensions;\n \n // export when m_float == c_double\n \n@@ -410,16 +410,18 @@ fn sin(x: float) -> float { f64::sin(x as f64) as float }\n fn cos(x: float) -> float { f64::cos(x as f64) as float }\n fn tan(x: float) -> float { f64::tan(x as f64) as float }\n \n-impl num of num for float {\n-    fn add(&&other: float)    -> float { ret self + other; }\n-    fn sub(&&other: float)    -> float { ret self - other; }\n-    fn mul(&&other: float)    -> float { ret self * other; }\n-    fn div(&&other: float)    -> float { ret self / other; }\n-    fn modulo(&&other: float) -> float { ret self % other; }\n-    fn neg()                  -> float { ret -self;        }\n-\n-    fn to_int()         -> int   { ret self as int; }\n-    fn from_int(n: int) -> float { ret n as float;  }\n+mod extensions {\n+    impl num of num for float {\n+        fn add(&&other: float)    -> float { ret self + other; }\n+        fn sub(&&other: float)    -> float { ret self - other; }\n+        fn mul(&&other: float)    -> float { ret self * other; }\n+        fn div(&&other: float)    -> float { ret self / other; }\n+        fn modulo(&&other: float) -> float { ret self % other; }\n+        fn neg()                  -> float { ret -self;        }\n+\n+        fn to_int()         -> int   { ret self as int; }\n+        fn from_int(n: int) -> float { ret n as float;  }\n+    }\n }\n \n #[test]"}, {"sha": "7b751416f172e88814917c89366a66f4ad2f8822", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/43a48ca5bba2698e253d6229139328d353276ee8/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a48ca5bba2698e253d6229139328d353276ee8/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=43a48ca5bba2698e253d6229139328d353276ee8", "patch": "@@ -12,7 +12,7 @@ export range;\n export compl;\n export abs;\n export parse_buf, from_str, to_str, to_str_bytes, str;\n-export ord, eq, num;\n+export ord, eq, extensions;\n \n const min_value: T = -1 as T << (inst::bits - 1 as T);\n const max_value: T = min_value - 1 as T;\n@@ -124,16 +124,18 @@ impl eq of eq for T {\n     }\n }\n \n-impl num of num::num for T {\n-    fn add(&&other: T)    -> T { ret self + other; }\n-    fn sub(&&other: T)    -> T { ret self - other; }\n-    fn mul(&&other: T)    -> T { ret self * other; }\n-    fn div(&&other: T)    -> T { ret self / other; }\n-    fn modulo(&&other: T) -> T { ret self % other; }\n-    fn neg()              -> T { ret -self;        }\n-\n-    fn to_int()         -> int { ret self as int; }\n-    fn from_int(n: int) -> T   { ret n as T;      }\n+mod extensions {\n+    impl num of num::num for T {\n+        fn add(&&other: T)    -> T { ret self + other; }\n+        fn sub(&&other: T)    -> T { ret self - other; }\n+        fn mul(&&other: T)    -> T { ret self * other; }\n+        fn div(&&other: T)    -> T { ret self / other; }\n+        fn modulo(&&other: T) -> T { ret self % other; }\n+        fn neg()              -> T { ret -self;        }\n+\n+        fn to_int()         -> int { ret self as int; }\n+        fn from_int(n: int) -> T   { ret n as T;      }\n+    }\n }\n \n "}, {"sha": "5d8c9415a771a2ae6435ce4f66dfb3cb1eaf76b4", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 13, "deletions": 11, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/43a48ca5bba2698e253d6229139328d353276ee8/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a48ca5bba2698e253d6229139328d353276ee8/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=43a48ca5bba2698e253d6229139328d353276ee8", "patch": "@@ -12,7 +12,7 @@ export range;\n export compl;\n export to_str, to_str_bytes;\n export from_str, from_str_radix, str, parse_buf;\n-export ord, eq, num;\n+export ord, eq, extensions;\n \n const min_value: T = 0 as T;\n const max_value: T = 0 as T - 1 as T;\n@@ -65,16 +65,18 @@ impl eq of eq for T {\n     }\n }\n \n-impl num of num::num for T {\n-    fn add(&&other: T)    -> T { ret self + other; }\n-    fn sub(&&other: T)    -> T { ret self - other; }\n-    fn mul(&&other: T)    -> T { ret self * other; }\n-    fn div(&&other: T)    -> T { ret self / other; }\n-    fn modulo(&&other: T) -> T { ret self % other; }\n-    fn neg()              -> T { ret -self;        }\n-\n-    fn to_int()         -> int { ret self as int; }\n-    fn from_int(n: int) -> T   { ret n as T;      }\n+mod extensions {\n+    impl num of num::num for T {\n+        fn add(&&other: T)    -> T { ret self + other; }\n+        fn sub(&&other: T)    -> T { ret self - other; }\n+        fn mul(&&other: T)    -> T { ret self * other; }\n+        fn div(&&other: T)    -> T { ret self / other; }\n+        fn modulo(&&other: T) -> T { ret self % other; }\n+        fn neg()              -> T { ret -self;        }\n+\n+        fn to_int()         -> int { ret self as int; }\n+        fn from_int(n: int) -> T   { ret n as T;      }\n+    }\n }\n \n #[doc = \""}, {"sha": "c00444cfc66c9a28a06d33e951693b5fae3c3722", "filename": "src/test/run-pass/numeric-method-autoexport.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/43a48ca5bba2698e253d6229139328d353276ee8/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/43a48ca5bba2698e253d6229139328d353276ee8/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnumeric-method-autoexport.rs?ref=43a48ca5bba2698e253d6229139328d353276ee8", "patch": "@@ -0,0 +1,24 @@\n+// This file is intended to test only that methods are automatically\n+// reachable for each numeric type, for each exported impl, with no imports\n+// necessary. Testing the methods of the impls is done within the source\n+// file for each numeric type.\n+fn main() {\n+    // extensions::num\n+    assert 15.add(6) == 21;\n+    assert 15i8.add(6i8) == 21i8;\n+    assert 15i16.add(6i16) == 21i16;\n+    assert 15i32.add(6i32) == 21i32;\n+    assert 15i64.add(6i64) == 21i64;\n+\n+    // extensions::num\n+    assert 15u.add(6u) == 21u;\n+    assert 15u8.add(6u8) == 21u8;\n+    assert 15u16.add(6u16) == 21u16;\n+    assert 15u32.add(6u32) == 21u32;\n+    assert 15u64.add(6u64) == 21u64;\n+\n+    // extensions::num\n+    assert 10f.to_int() == 10;\n+    assert 10f32.to_int() == 10;\n+    assert 10f64.to_int() == 10;\n+}"}]}