{"sha": "ffe4af57118bfb5063fc8015a1feddc76a607dbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmZTRhZjU3MTE4YmZiNTA2M2ZjODAxNWExZmVkZGM3NmE2MDdkYmY=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-02-28T00:55:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-28T00:55:42Z"}, "message": "Rollup merge of #69491 - petrochenkov:symprint, r=Mark-Simulacrum\n\nrustc_span: Add `Symbol::to_ident_string` for use in diagnostic messages\n\nCovers the same error reporting use case (https://github.com/rust-lang/rust/pull/69387#discussion_r382999205) as the `Display` impl for `Ident`.\ncc https://github.com/rust-lang/rust/issues/69053\n\nFollow-up to https://github.com/rust-lang/rust/pull/69387.\nr? @Mark-Simulacrum", "tree": {"sha": "38503f991333264cbfe347ee7767a04f53c69d46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38503f991333264cbfe347ee7767a04f53c69d46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffe4af57118bfb5063fc8015a1feddc76a607dbf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeWGUOCRBK7hj4Ov3rIwAAdHIIAEd4/ryNrFzcD53gGCJkB41T\nkUt07EnQjMnm5aPqSrsFprjYftdHc7S7ZnR0QxTKmdNtncCbYAN0YJOGYLby+MZP\nS/6vJMlAWCBmH5jQ3cw7cgF0j1AKXwQUWron0wja0M4ZjYwDH4Lrz93rY/NY/J1e\nMxzt3eInFwiXURBp/dfLBvUSrrhFtyi8bdoc6dacW+2apO+VBPFJrNxmlQIynyj8\nwMD8n8QevAC1n4m68oHEWZ2QGXp1JDLNm0I2hZ4FQQIQcU18YeSa7g15gDP0Zyye\nzF4cAfJR/lQUHT7TB35iWIjXcgi0QJMFoLmUbEZTc4lJEESBEqhKxJB71RbHoDY=\n=HVeH\n-----END PGP SIGNATURE-----\n", "payload": "tree 38503f991333264cbfe347ee7767a04f53c69d46\nparent ab45408a4c0a3ce065c3c11369e3d97220c97de6\nparent 6ce5ab6a7e566932ad1e3987ae7645eb0125dfe5\nauthor Dylan DPC <dylan.dpc@gmail.com> 1582851342 +0100\ncommitter GitHub <noreply@github.com> 1582851342 +0100\n\nRollup merge of #69491 - petrochenkov:symprint, r=Mark-Simulacrum\n\nrustc_span: Add `Symbol::to_ident_string` for use in diagnostic messages\n\nCovers the same error reporting use case (https://github.com/rust-lang/rust/pull/69387#discussion_r382999205) as the `Display` impl for `Ident`.\ncc https://github.com/rust-lang/rust/issues/69053\n\nFollow-up to https://github.com/rust-lang/rust/pull/69387.\nr? @Mark-Simulacrum\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffe4af57118bfb5063fc8015a1feddc76a607dbf", "html_url": "https://github.com/rust-lang/rust/commit/ffe4af57118bfb5063fc8015a1feddc76a607dbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffe4af57118bfb5063fc8015a1feddc76a607dbf/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab45408a4c0a3ce065c3c11369e3d97220c97de6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab45408a4c0a3ce065c3c11369e3d97220c97de6", "html_url": "https://github.com/rust-lang/rust/commit/ab45408a4c0a3ce065c3c11369e3d97220c97de6"}, {"sha": "6ce5ab6a7e566932ad1e3987ae7645eb0125dfe5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ce5ab6a7e566932ad1e3987ae7645eb0125dfe5", "html_url": "https://github.com/rust-lang/rust/commit/6ce5ab6a7e566932ad1e3987ae7645eb0125dfe5"}], "stats": {"total": 8, "additions": 8, "deletions": 0}, "files": [{"sha": "d6232f32f4c1bf8e27a85861709d962846dfa6af", "filename": "src/librustc_span/symbol.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ffe4af57118bfb5063fc8015a1feddc76a607dbf/src%2Flibrustc_span%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffe4af57118bfb5063fc8015a1feddc76a607dbf/src%2Flibrustc_span%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_span%2Fsymbol.rs?ref=ffe4af57118bfb5063fc8015a1feddc76a607dbf", "patch": "@@ -1023,6 +1023,14 @@ impl Symbol {\n     pub fn as_u32(self) -> u32 {\n         self.0.as_u32()\n     }\n+\n+    /// This method is supposed to be used in error messages, so it's expected to be\n+    /// identical to printing the original identifier token written in source code\n+    /// (`token_to_string`, `Ident::to_string`), except that symbols don't keep the rawness flag\n+    /// or edition, so we have to guess the rawness using the global edition.\n+    pub fn to_ident_string(self) -> String {\n+        Ident::with_dummy_span(self).to_string()\n+    }\n }\n \n impl fmt::Debug for Symbol {"}]}