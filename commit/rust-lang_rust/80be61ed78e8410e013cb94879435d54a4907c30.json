{"sha": "80be61ed78e8410e013cb94879435d54a4907c30", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwYmU2MWVkNzhlODQxMGUwMTNjYjk0ODc5NDM1ZDU0YTQ5MDdjMzA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-02T11:46:15Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-09-02T11:46:15Z"}, "message": "project model", "tree": {"sha": "3ab33c902644a3aa14b490be8a7caa9120da7537", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ab33c902644a3aa14b490be8a7caa9120da7537"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/80be61ed78e8410e013cb94879435d54a4907c30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/80be61ed78e8410e013cb94879435d54a4907c30", "html_url": "https://github.com/rust-lang/rust/commit/80be61ed78e8410e013cb94879435d54a4907c30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/80be61ed78e8410e013cb94879435d54a4907c30/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7fad13de73ded5b8a332c5f50c18671d612bd1e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7fad13de73ded5b8a332c5f50c18671d612bd1e3", "html_url": "https://github.com/rust-lang/rust/commit/7fad13de73ded5b8a332c5f50c18671d612bd1e3"}], "stats": {"total": 329, "additions": 251, "deletions": 78}, "files": [{"sha": "b296f6fd570d57c15f38fa8b9ac5f6e5ba296fbe", "filename": "crates/libeditor/src/completion.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Flibeditor%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Flibeditor%2Fsrc%2Fcompletion.rs?ref=80be61ed78e8410e013cb94879435d54a4907c30", "patch": "@@ -62,16 +62,16 @@ fn is_single_segment(name_ref: ast::NameRef) -> bool {\n }\n \n fn complete_expr_keywords(file: &File, fn_def: ast::FnDef, name_ref: ast::NameRef, acc: &mut Vec<CompletionItem>) {\n-    acc.push(keyword(\"if\", \"if $0 { }\"));\n-    acc.push(keyword(\"match\", \"match $0 { }\"));\n-    acc.push(keyword(\"while\", \"while $0 { }\"));\n+    acc.push(keyword(\"if\", \"if $0 {}\"));\n+    acc.push(keyword(\"match\", \"match $0 {}\"));\n+    acc.push(keyword(\"while\", \"while $0 {}\"));\n     acc.push(keyword(\"loop\", \"loop {$0}\"));\n \n     if let Some(off) = name_ref.syntax().range().start().checked_sub(2.into()) {\n         if let Some(if_expr) = find_node_at_offset::<ast::IfExpr>(file.syntax(), off) {\n             if if_expr.syntax().range().end() < name_ref.syntax().range().start() {\n                 acc.push(keyword(\"else\", \"else {$0}\"));\n-                acc.push(keyword(\"else if\", \"else if $0 { }\"));\n+                acc.push(keyword(\"else if\", \"else if $0 {}\"));\n             }\n         }\n     }\n@@ -276,9 +276,9 @@ mod tests {\n             fn quux() {\n                 <|>\n             }\n-            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 { }\") },\n-                   CompletionItem { name: \"match\", snippet: Some(\"match $0 { }\") },\n-                   CompletionItem { name: \"while\", snippet: Some(\"while $0 { }\") },\n+            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 {}\") },\n+                   CompletionItem { name: \"match\", snippet: Some(\"match $0 {}\") },\n+                   CompletionItem { name: \"while\", snippet: Some(\"while $0 {}\") },\n                    CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") },\n                    CompletionItem { name: \"return\", snippet: Some(\"return\") }]\"#);\n     }\n@@ -291,12 +291,12 @@ mod tests {\n                     ()\n                 } <|>\n             }\n-            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 { }\") },\n-                   CompletionItem { name: \"match\", snippet: Some(\"match $0 { }\") },\n-                   CompletionItem { name: \"while\", snippet: Some(\"while $0 { }\") },\n+            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 {}\") },\n+                   CompletionItem { name: \"match\", snippet: Some(\"match $0 {}\") },\n+                   CompletionItem { name: \"while\", snippet: Some(\"while $0 {}\") },\n                    CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") },\n                    CompletionItem { name: \"else\", snippet: Some(\"else {$0}\") },\n-                   CompletionItem { name: \"else if\", snippet: Some(\"else if $0 { }\") },\n+                   CompletionItem { name: \"else if\", snippet: Some(\"else if $0 {}\") },\n                    CompletionItem { name: \"return\", snippet: Some(\"return\") }]\"#);\n     }\n \n@@ -307,19 +307,19 @@ mod tests {\n                 <|>\n                 92\n             }\n-            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 { }\") },\n-                   CompletionItem { name: \"match\", snippet: Some(\"match $0 { }\") },\n-                   CompletionItem { name: \"while\", snippet: Some(\"while $0 { }\") },\n+            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 {}\") },\n+                   CompletionItem { name: \"match\", snippet: Some(\"match $0 {}\") },\n+                   CompletionItem { name: \"while\", snippet: Some(\"while $0 {}\") },\n                    CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") },\n                    CompletionItem { name: \"return\", snippet: Some(\"return $0;\") }]\"#);\n         check_snippet_completion(r\"\n             fn quux() {\n                 <|>\n                 92\n             }\n-            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 { }\") },\n-                   CompletionItem { name: \"match\", snippet: Some(\"match $0 { }\") },\n-                   CompletionItem { name: \"while\", snippet: Some(\"while $0 { }\") },\n+            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 {}\") },\n+                   CompletionItem { name: \"match\", snippet: Some(\"match $0 {}\") },\n+                   CompletionItem { name: \"while\", snippet: Some(\"while $0 {}\") },\n                    CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") },\n                    CompletionItem { name: \"return\", snippet: Some(\"return;\") }]\"#);\n     }\n@@ -332,9 +332,9 @@ mod tests {\n                     () => <|>\n                 }\n             }\n-            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 { }\") },\n-                   CompletionItem { name: \"match\", snippet: Some(\"match $0 { }\") },\n-                   CompletionItem { name: \"while\", snippet: Some(\"while $0 { }\") },\n+            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 {}\") },\n+                   CompletionItem { name: \"match\", snippet: Some(\"match $0 {}\") },\n+                   CompletionItem { name: \"while\", snippet: Some(\"while $0 {}\") },\n                    CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") },\n                    CompletionItem { name: \"return\", snippet: Some(\"return $0\") }]\"#);\n     }\n@@ -345,9 +345,9 @@ mod tests {\n             fn quux() -> i32 {\n                 loop { <|> }\n             }\n-            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 { }\") },\n-                   CompletionItem { name: \"match\", snippet: Some(\"match $0 { }\") },\n-                   CompletionItem { name: \"while\", snippet: Some(\"while $0 { }\") },\n+            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 {}\") },\n+                   CompletionItem { name: \"match\", snippet: Some(\"match $0 {}\") },\n+                   CompletionItem { name: \"while\", snippet: Some(\"while $0 {}\") },\n                    CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") },\n                    CompletionItem { name: \"continue\", snippet: Some(\"continue\") },\n                    CompletionItem { name: \"break\", snippet: Some(\"break\") },\n@@ -356,9 +356,9 @@ mod tests {\n             fn quux() -> i32 {\n                 loop { || { <|> } }\n             }\n-            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 { }\") },\n-                   CompletionItem { name: \"match\", snippet: Some(\"match $0 { }\") },\n-                   CompletionItem { name: \"while\", snippet: Some(\"while $0 { }\") },\n+            \", r#\"[CompletionItem { name: \"if\", snippet: Some(\"if $0 {}\") },\n+                   CompletionItem { name: \"match\", snippet: Some(\"match $0 {}\") },\n+                   CompletionItem { name: \"while\", snippet: Some(\"while $0 {}\") },\n                    CompletionItem { name: \"loop\", snippet: Some(\"loop {$0}\") },\n                    CompletionItem { name: \"return\", snippet: Some(\"return $0\") }]\"#);\n     }"}, {"sha": "cb96929c60103be2d42c53ed8f3f370e2d9a1022", "filename": "crates/server/Cargo.toml", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2FCargo.toml?ref=80be61ed78e8410e013cb94879435d54a4907c30", "patch": "@@ -18,8 +18,9 @@ url_serde = \"0.2.0\"\n languageserver-types = \"0.49.0\"\n walkdir = \"2.2.0\"\n im = { version = \"11.0.1\", features = [\"arc\"] }\n-text_unit = { version = \"0.1.2\", features = [\"serde\"] }\n cargo_metadata = \"0.6.0\"\n+text_unit = { version = \"0.1.2\", features = [\"serde\"] }\n+smol_str = { version = \"0.1.5\", features = [\"serde\"] }\n \n libsyntax2 = { path = \"../libsyntax2\" }\n libeditor = { path = \"../libeditor\" }"}, {"sha": "d874ecf847f171ec481a6f83f3b1d67c65656cba", "filename": "crates/server/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Flib.rs?ref=80be61ed78e8410e013cb94879435d54a4907c30", "patch": "@@ -30,6 +30,7 @@ mod vfs;\n mod path_map;\n mod server_world;\n mod project_model;\n+mod thread_watcher;\n \n pub type Result<T> = ::std::result::Result<T, ::failure::Error>;\n pub use caps::server_capabilities;"}, {"sha": "52fc00c9ca50ac17f95a45480392802c5333a3fb", "filename": "crates/server/src/main_loop/mod.rs", "status": "modified", "additions": 33, "deletions": 6, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fmain_loop%2Fmod.rs?ref=80be61ed78e8410e013cb94879435d54a4907c30", "patch": "@@ -22,6 +22,7 @@ use {\n     vfs::{self, FileEvent},\n     server_world::{ServerWorldState, ServerWorld},\n     main_loop::subscriptions::{Subscriptions},\n+    project_model::{CargoWorkspace, workspace_loader},\n };\n \n #[derive(Debug)]\n@@ -37,20 +38,24 @@ pub fn main_loop(\n ) -> Result<()> {\n     let pool = ThreadPool::new(4);\n     let (task_sender, task_receiver) = bounded::<Task>(16);\n-    let (fs_events_receiver, watcher) = vfs::watch(vec![root]);\n+    let (fs_events_receiver, watcher) = vfs::watch(vec![root.clone()]);\n+    let (ws_root_sender, ws_receiver, ws_watcher) = workspace_loader();\n+    ws_root_sender.send(root);\n \n     info!(\"server initialized, serving requests\");\n     let mut state = ServerWorldState::new();\n \n     let mut pending_requests = HashMap::new();\n     let mut subs = Subscriptions::new();\n-    let res = main_loop_inner(\n+    let main_res = main_loop_inner(\n         &pool,\n         msg_receriver,\n         msg_sender,\n         task_receiver.clone(),\n         task_sender,\n         fs_events_receiver,\n+        ws_root_sender,\n+        ws_receiver,\n         &mut state,\n         &mut pending_requests,\n         &mut subs,\n@@ -63,10 +68,14 @@ pub fn main_loop(\n     pool.join();\n     info!(\"...threadpool has finished\");\n \n-    info!(\"waiting for file watcher to finish...\");\n-    watcher.stop()?;\n-    info!(\"...file watcher has finished\");\n-    res\n+    let vfs_res = watcher.stop();\n+    let ws_res = ws_watcher.stop();\n+\n+    main_res?;\n+    vfs_res?;\n+    ws_res?;\n+\n+    Ok(())\n }\n \n fn main_loop_inner(\n@@ -76,6 +85,8 @@ fn main_loop_inner(\n     task_receiver: Receiver<Task>,\n     task_sender: Sender<Task>,\n     fs_receiver: Receiver<Vec<FileEvent>>,\n+    _ws_roots_sender: Sender<PathBuf>,\n+    ws_receiver: Receiver<Result<CargoWorkspace>>,\n     state: &mut ServerWorldState,\n     pending_requests: &mut HashMap<u64, JobHandle>,\n     subs: &mut Subscriptions,\n@@ -87,6 +98,7 @@ fn main_loop_inner(\n             Msg(RawMessage),\n             Task(Task),\n             Fs(Vec<FileEvent>),\n+            Ws(Result<CargoWorkspace>),\n             FsWatcherDead,\n         }\n         trace!(\"selecting\");\n@@ -100,6 +112,10 @@ fn main_loop_inner(\n                 Some(events) => Event::Fs(events),\n                 None => Event::FsWatcherDead,\n             }\n+            recv(ws_receiver, ws) => match ws {\n+                None => bail!(\"workspace watcher died\"),\n+                Some(ws) => Event::Ws(ws),\n+            }\n         };\n         trace!(\"selected {:?}\", event);\n         let mut state_changed = false;\n@@ -111,6 +127,17 @@ fn main_loop_inner(\n                 state.apply_fs_changes(events);\n                 state_changed = true;\n             }\n+            Event::Ws(ws) => {\n+                match ws {\n+                    Ok(ws) => {\n+                        let not = RawNotification::new::<req::DidReloadWorkspace>(vec![ws.clone()]);\n+                        msg_sender.send(RawMessage::Notification(not));\n+                        state.set_workspaces(vec![ws]);\n+                        state_changed = true;\n+                    }\n+                    Err(e) => warn!(\"loading workspace failed: {}\", e),\n+                }\n+            }\n             Event::Msg(msg) => {\n                 match msg {\n                     RawMessage::Request(req) => {"}, {"sha": "1c5954dadb283e1e293c47a36417e17d4408c35b", "filename": "crates/server/src/project_model.rs", "status": "modified", "additions": 44, "deletions": 10, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2Fsrc%2Fproject_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2Fsrc%2Fproject_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fproject_model.rs?ref=80be61ed78e8410e013cb94879435d54a4907c30", "patch": "@@ -2,38 +2,43 @@ use std::{\n     collections::HashMap,\n     path::{Path, PathBuf},\n };\n-use libsyntax2::SmolStr;\n use cargo_metadata::{metadata_run, CargoOpt};\n-use Result;\n+use crossbeam_channel::{bounded, Sender, Receiver};\n+use libsyntax2::SmolStr;\n+\n+use {\n+    Result,\n+    thread_watcher::ThreadWatcher,\n+};\n \n-#[derive(Debug)]\n+#[derive(Debug, Serialize, Clone)]\n pub struct CargoWorkspace {\n     ws_members: Vec<Package>,\n     packages: Vec<PackageData>,\n     targets: Vec<TargetData>,\n }\n \n-#[derive(Clone, Copy, Debug)]\n+#[derive(Clone, Copy, Debug, Serialize)]\n pub struct Package(usize);\n-#[derive(Clone, Copy, Debug)]\n+#[derive(Clone, Copy, Debug, Serialize)]\n pub struct Target(usize);\n \n-#[derive(Debug)]\n+#[derive(Debug, Serialize, Clone)]\n struct PackageData {\n     name: SmolStr,\n     manifest: PathBuf,\n     targets: Vec<Target>\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Serialize, Clone)]\n struct TargetData {\n     pkg: Package,\n     name: SmolStr,\n     root: PathBuf,\n     kind: TargetKind,\n }\n \n-#[derive(Clone, Copy, PartialEq, Eq, Debug)]\n+#[derive(Debug, Serialize, Clone, Copy, PartialEq, Eq)]\n pub enum TargetKind {\n     Bin, Lib, Example, Test, Bench, Other,\n }\n@@ -66,9 +71,10 @@ impl Target {\n }\n \n impl CargoWorkspace {\n-    pub fn from_path(path: &Path) -> Result<CargoWorkspace> {\n+    pub fn from_cargo_metadata(path: &Path) -> Result<CargoWorkspace> {\n+        let cargo_toml = find_cargo_toml(path)?;\n         let meta = metadata_run(\n-            Some(path),\n+            Some(cargo_toml.as_path()),\n             true,\n             Some(CargoOpt::AllFeatures)\n         ).map_err(|e| format_err!(\"cargo metadata failed: {}\", e))?;\n@@ -121,6 +127,21 @@ impl CargoWorkspace {\n     }\n }\n \n+fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n+    if path.ends_with(\"Cargo.toml\") {\n+        return Ok(path.to_path_buf());\n+    }\n+    let mut curr = Some(path);\n+    while let Some(path) = curr {\n+        let candidate = path.join(\"Cargo.toml\");\n+        if candidate.exists() {\n+            return Ok(candidate);\n+        }\n+        curr = path.parent();\n+    }\n+    bail!(\"can't find Cargo.toml at {}\", path.display())\n+}\n+\n impl TargetKind {\n     fn new(kinds: &[String]) -> TargetKind {\n         for kind in kinds {\n@@ -136,3 +157,16 @@ impl TargetKind {\n         TargetKind::Other\n     }\n }\n+\n+pub fn workspace_loader() -> (Sender<PathBuf>, Receiver<Result<CargoWorkspace>>, ThreadWatcher) {\n+    let (path_sender, path_receiver) = bounded::<PathBuf>(16);\n+    let (ws_sender, ws_receiver) = bounded::<Result<CargoWorkspace>>(1);\n+    let thread = ThreadWatcher::spawn(\"workspace loader\", move || {\n+        path_receiver\n+            .into_iter()\n+            .map(|path| CargoWorkspace::from_cargo_metadata(path.as_path()))\n+            .for_each(|it| ws_sender.send(it))\n+    });\n+\n+    (path_sender, ws_receiver, thread)\n+}"}, {"sha": "b9e0c37964cf8fc6db7dde83dfa6dcc0126bb4c1", "filename": "crates/server/src/req.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2Fsrc%2Freq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2Fsrc%2Freq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Freq.rs?ref=80be61ed78e8410e013cb94879435d54a4907c30", "patch": "@@ -1,6 +1,7 @@\n use std::collections::HashMap;\n use languageserver_types::{TextDocumentIdentifier, Range, Url, Position, Location};\n use url_serde;\n+use project_model::CargoWorkspace;\n \n pub use languageserver_types::{\n     request::*, notification::*,\n@@ -167,3 +168,10 @@ pub enum FileSystemEdit {\n         dst: Url,\n     }\n }\n+\n+pub enum DidReloadWorkspace {}\n+\n+impl Notification for DidReloadWorkspace {\n+    const METHOD: &'static str = \"m/didReloadWorkspace\";\n+    type Params = Vec<CargoWorkspace>;\n+}"}, {"sha": "4d5c504289ba852cd7eadf9292393b93448fb558", "filename": "crates/server/src/server_world.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2Fsrc%2Fserver_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2Fsrc%2Fserver_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fserver_world.rs?ref=80be61ed78e8410e013cb94879435d54a4907c30", "patch": "@@ -2,6 +2,7 @@ use std::{\n     fs,\n     path::{PathBuf, Path},\n     collections::HashMap,\n+    sync::Arc,\n };\n \n use languageserver_types::Url;\n@@ -11,24 +12,28 @@ use {\n     Result,\n     path_map::PathMap,\n     vfs::{FileEvent, FileEventKind},\n+    project_model::CargoWorkspace,\n };\n \n #[derive(Debug)]\n pub struct ServerWorldState {\n+    pub workspaces: Arc<Vec<CargoWorkspace>>,\n     pub analysis_host: AnalysisHost,\n     pub path_map: PathMap,\n     pub mem_map: HashMap<FileId, Option<String>>,\n }\n \n #[derive(Clone)]\n pub struct ServerWorld {\n+    pub workspaces: Arc<Vec<CargoWorkspace>>,\n     pub analysis: Analysis,\n     pub path_map: PathMap,\n }\n \n impl ServerWorldState {\n     pub fn new() -> ServerWorldState {\n         ServerWorldState {\n+            workspaces: Arc::new(Vec::new()),\n             analysis_host: AnalysisHost::new(),\n             path_map: PathMap::new(),\n             mem_map: HashMap::new(),\n@@ -89,9 +94,12 @@ impl ServerWorldState {\n         self.analysis_host.change_file(file_id, text);\n         Ok(file_id)\n     }\n-\n+    pub fn set_workspaces(&mut self, ws: Vec<CargoWorkspace>) {\n+        self.workspaces = Arc::new(ws);\n+    }\n     pub fn snapshot(&self) -> ServerWorld {\n         ServerWorld {\n+            workspaces: Arc::clone(&self.workspaces),\n             analysis: self.analysis_host.analysis(self.path_map.clone()),\n             path_map: self.path_map.clone()\n         }"}, {"sha": "98bcdfd6c2f43fcba211b70b317cd7547fca5d6f", "filename": "crates/server/src/thread_watcher.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2Fsrc%2Fthread_watcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2Fsrc%2Fthread_watcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fthread_watcher.rs?ref=80be61ed78e8410e013cb94879435d54a4907c30", "patch": "@@ -0,0 +1,33 @@\n+use std::thread;\n+use drop_bomb::DropBomb;\n+use Result;\n+\n+pub struct ThreadWatcher {\n+    name: &'static str,\n+    thread: thread::JoinHandle<()>,\n+    bomb: DropBomb,\n+}\n+\n+impl ThreadWatcher {\n+    pub fn spawn(name: &'static str, f: impl FnOnce() + Send + 'static) -> ThreadWatcher {\n+        let thread = thread::spawn(f);\n+        ThreadWatcher {\n+            name,\n+            thread,\n+            bomb: DropBomb::new(format!(\"ThreadWatcher {} was not stopped\", name)),\n+        }\n+    }\n+\n+    pub fn stop(mut self) -> Result<()> {\n+        info!(\"waiting for {} to finish ...\", self.name);\n+        let name = self.name;\n+        self.bomb.defuse();\n+        let res = self.thread.join()\n+            .map_err(|_| format_err!(\"ThreadWatcher {} died\", name));\n+        match &res {\n+            Ok(()) => info!(\"... {} terminated with ok\", name),\n+            Err(_) => error!(\"... {} terminated with err\", name)\n+        }\n+        res\n+    }\n+}"}, {"sha": "2acc3f55f336438919b9d8a1ff6577e4087c2ac2", "filename": "crates/server/src/vfs.rs", "status": "modified", "additions": 6, "deletions": 22, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2Fsrc%2Fvfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2Fsrc%2Fvfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Fsrc%2Fvfs.rs?ref=80be61ed78e8410e013cb94879435d54a4907c30", "patch": "@@ -1,14 +1,14 @@\n use std::{\n     path::PathBuf,\n-    thread,\n     fs,\n };\n \n use crossbeam_channel::{Sender, Receiver, bounded};\n-use drop_bomb::DropBomb;\n use walkdir::WalkDir;\n \n-use Result;\n+use {\n+    thread_watcher::ThreadWatcher,\n+};\n \n \n #[derive(Debug)]\n@@ -24,26 +24,10 @@ pub enum FileEventKind {\n     Remove,\n }\n \n-pub struct Watcher {\n-    thread: thread::JoinHandle<()>,\n-    bomb: DropBomb,\n-}\n-\n-impl Watcher {\n-    pub fn stop(mut self) -> Result<()> {\n-        self.bomb.defuse();\n-        self.thread.join()\n-            .map_err(|_| format_err!(\"file watcher died\"))\n-    }\n-}\n-\n-pub fn watch(roots: Vec<PathBuf>) -> (Receiver<Vec<FileEvent>>, Watcher) {\n+pub fn watch(roots: Vec<PathBuf>) -> (Receiver<Vec<FileEvent>>, ThreadWatcher) {\n     let (sender, receiver) = bounded(16);\n-    let thread = thread::spawn(move || run(roots, sender));\n-    (receiver, Watcher {\n-        thread,\n-        bomb: DropBomb::new(\"Watcher should be stopped explicitly\"),\n-    })\n+    let watcher = ThreadWatcher::spawn(\"vfs\", move || run(roots, sender));\n+    (receiver, watcher)\n }\n \n fn run(roots: Vec<PathBuf>, sender: Sender<Vec<FileEvent>>) {"}, {"sha": "9c0196f22fd7fe93b5100f07078342500671ef4d", "filename": "crates/server/tests/heavy_tests/main.rs", "status": "modified", "additions": 34, "deletions": 2, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Ftests%2Fheavy_tests%2Fmain.rs?ref=80be61ed78e8410e013cb94879435d54a4907c30", "patch": "@@ -1,5 +1,6 @@\n-extern crate tempdir;\n+#[macro_use]\n extern crate crossbeam_channel;\n+extern crate tempdir;\n extern crate languageserver_types;\n extern crate serde;\n extern crate serde_json;\n@@ -9,10 +10,12 @@ extern crate m;\n \n mod support;\n \n-use m::req::{Runnables, RunnablesParams};\n+use m::req::{Runnables, RunnablesParams, DidReloadWorkspace};\n \n use support::project;\n \n+const LOG: &'static str = \"WARN\";\n+\n #[test]\n fn test_runnables() {\n     let server = project(r\"\n@@ -40,3 +43,32 @@ fn foo() {\n         ]\"#\n     );\n }\n+\n+#[test]\n+fn test_project_model() {\n+    let server = project(r#\"\n+//- Cargo.toml\n+[package]\n+name = \"foo\"\n+version = \"0.0.0\"\n+\n+//- src/lib.rs\n+pub fn foo() {}\n+\"#);\n+    server.notification::<DidReloadWorkspace>(r#\"[\n+  {\n+    \"packages\": [\n+      {\n+        \"manifest\": \"$PROJECT_ROOT$/Cargo.toml\",\n+        \"name\": \"foo\",\n+        \"targets\": [ 0 ]\n+      }\n+    ],\n+    \"targets\": [\n+      { \"kind\": \"Lib\", \"name\": \"foo\", \"pkg\": 0, \"root\": \"$PROJECT_ROOT$/src/lib.rs\" }\n+    ],\n+    \"ws_members\": [ 0 ]\n+  }\n+]\"#\n+    );\n+}"}, {"sha": "006926216a6e6551259f266cda0a7ca2aea38166", "filename": "crates/server/tests/heavy_tests/support.rs", "status": "modified", "additions": 55, "deletions": 10, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/80be61ed78e8410e013cb94879435d54a4907c30/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fserver%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=80be61ed78e8410e013cb94879435d54a4907c30", "patch": "@@ -3,16 +3,18 @@ use std::{\n     thread,\n     cell::{Cell, RefCell},\n     path::PathBuf,\n+    time::Duration,\n+    sync::Once,\n };\n \n use tempdir::TempDir;\n-use crossbeam_channel::{bounded, Sender, Receiver};\n+use crossbeam_channel::{bounded, after, Sender, Receiver};\n use flexi_logger::Logger;\n use languageserver_types::{\n     Url,\n     TextDocumentIdentifier,\n     request::{Request, Shutdown},\n-    notification::DidOpenTextDocument,\n+    notification::{Notification, DidOpenTextDocument},\n     DidOpenTextDocumentParams,\n     TextDocumentItem,\n };\n@@ -23,7 +25,8 @@ use gen_lsp_server::{RawMessage, RawRequest, RawNotification};\n use m::{Result, main_loop};\n \n pub fn project(fixture: &str) -> Server {\n-    Logger::with_env_or_str(\"\").start().unwrap();\n+    static INIT: Once = Once::new();\n+    INIT.call_once(|| Logger::with_env_or_str(::LOG).start().unwrap());\n \n     let tmp_dir = TempDir::new(\"test-project\")\n         .unwrap();\n@@ -34,6 +37,7 @@ pub fn project(fixture: &str) -> Server {\n         () => {\n             if let Some(file_name) = file_name {\n                 let path = tmp_dir.path().join(file_name);\n+                fs::create_dir_all(path.parent().unwrap()).unwrap();\n                 fs::write(path.as_path(), buf.as_bytes()).unwrap();\n                 paths.push((path, buf.clone()));\n             }\n@@ -121,6 +125,25 @@ impl Server {\n         );\n     }\n \n+    pub fn notification<N>(\n+        &self,\n+        expected: &str,\n+    )\n+    where\n+        N: Notification,\n+    {\n+        let expected = expected.replace(\"$PROJECT_ROOT$\", &self.dir.path().display().to_string());\n+        let expected: Value = from_str(&expected).unwrap();\n+        let actual = self.wait_for_notification(N::METHOD);\n+        assert_eq!(\n+            expected, actual,\n+            \"Expected:\\n{}\\n\\\n+             Actual:\\n{}\\n\",\n+            to_string_pretty(&expected).unwrap(),\n+            to_string_pretty(&actual).unwrap(),\n+        );\n+    }\n+\n     fn send_request<R>(&self, id: u64, params: R::Params) -> Value\n     where\n         R: Request,\n@@ -130,7 +153,6 @@ impl Server {\n         self.sender.as_ref()\n             .unwrap()\n             .send(RawMessage::Request(r));\n-\n         while let Some(msg) = self.recv() {\n             match msg {\n                 RawMessage::Request(req) => panic!(\"unexpected request: {:?}\", req),\n@@ -146,15 +168,38 @@ impl Server {\n         }\n         panic!(\"no response\");\n     }\n+    fn wait_for_notification(&self, method: &str) -> Value {\n+        let f = |msg: &RawMessage| match msg {\n+                RawMessage::Notification(n) if n.method == method => {\n+                    Some(n.params.clone())\n+                }\n+                _ => None,\n+        };\n+\n+        for msg in self.messages.borrow().iter() {\n+            if let Some(res) = f(msg) {\n+                return res;\n+            }\n+        }\n+        while let Some(msg) = self.recv() {\n+            if let Some(res) = f(&msg) {\n+                return res;\n+            }\n+        }\n+        panic!(\"no response\")\n+    }\n     fn recv(&self) -> Option<RawMessage> {\n-        self.receiver.recv()\n-            .map(|msg| {\n-                self.messages.borrow_mut().push(msg.clone());\n-                msg\n-            })\n+        let timeout = Duration::from_secs(5);\n+        let msg = select! {\n+            recv(&self.receiver, msg) => msg,\n+            recv(after(timeout)) => panic!(\"timed out\"),\n+        };\n+        msg.map(|msg| {\n+            self.messages.borrow_mut().push(msg.clone());\n+            msg\n+        })\n     }\n     fn send_notification(&self, not: RawNotification) {\n-\n         self.sender.as_ref()\n             .unwrap()\n             .send(RawMessage::Notification(not));"}]}