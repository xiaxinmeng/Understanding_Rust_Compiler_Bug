{"sha": "0bf1d73d229fdd0c22ef87b1c764c88cf35dd616", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiZjFkNzNkMjI5ZmRkMGMyMmVmODdiMWM3NjRjODhjZjM1ZGQ2MTY=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-02-12T22:07:46Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2021-02-13T19:30:07Z"}, "message": "Don't go through TraitRef to relate projections", "tree": {"sha": "3d65fc848c391094b441bb8654d72e37c5d352e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d65fc848c391094b441bb8654d72e37c5d352e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bf1d73d229fdd0c22ef87b1c764c88cf35dd616", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bf1d73d229fdd0c22ef87b1c764c88cf35dd616", "html_url": "https://github.com/rust-lang/rust/commit/0bf1d73d229fdd0c22ef87b1c764c88cf35dd616", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bf1d73d229fdd0c22ef87b1c764c88cf35dd616/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9bbd3e0f8e51beb4c3ea6674327b17cd9d38d9da", "url": "https://api.github.com/repos/rust-lang/rust/commits/9bbd3e0f8e51beb4c3ea6674327b17cd9d38d9da", "html_url": "https://github.com/rust-lang/rust/commit/9bbd3e0f8e51beb4c3ea6674327b17cd9d38d9da"}], "stats": {"total": 60, "additions": 42, "deletions": 18}, "files": [{"sha": "11ee8fb17ad1b4abc01175e138d765b28e192bb1", "filename": "compiler/rustc_infer/src/infer/at.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0bf1d73d229fdd0c22ef87b1c764c88cf35dd616/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf1d73d229fdd0c22ef87b1c764c88cf35dd616/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fat.rs?ref=0bf1d73d229fdd0c22ef87b1c764c88cf35dd616", "patch": "@@ -55,6 +55,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n pub trait ToTrace<'tcx>: Relate<'tcx> + Copy {\n     fn to_trace(\n+        tcx: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -178,7 +179,7 @@ impl<'a, 'tcx> At<'a, 'tcx> {\n     where\n         T: ToTrace<'tcx>,\n     {\n-        let trace = ToTrace::to_trace(self.cause, a_is_expected, a, b);\n+        let trace = ToTrace::to_trace(self.infcx.tcx, self.cause, a_is_expected, a, b);\n         Trace { at: self, trace, a_is_expected }\n     }\n }\n@@ -251,6 +252,7 @@ impl<'a, 'tcx> Trace<'a, 'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for Ty<'tcx> {\n     fn to_trace(\n+        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -262,6 +264,7 @@ impl<'tcx> ToTrace<'tcx> for Ty<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ty::Region<'tcx> {\n     fn to_trace(\n+        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -273,6 +276,7 @@ impl<'tcx> ToTrace<'tcx> for ty::Region<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for &'tcx Const<'tcx> {\n     fn to_trace(\n+        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -284,6 +288,7 @@ impl<'tcx> ToTrace<'tcx> for &'tcx Const<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ty::TraitRef<'tcx> {\n     fn to_trace(\n+        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -298,6 +303,7 @@ impl<'tcx> ToTrace<'tcx> for ty::TraitRef<'tcx> {\n \n impl<'tcx> ToTrace<'tcx> for ty::PolyTraitRef<'tcx> {\n     fn to_trace(\n+        _: TyCtxt<'tcx>,\n         cause: &ObligationCause<'tcx>,\n         a_is_expected: bool,\n         a: Self,\n@@ -309,3 +315,20 @@ impl<'tcx> ToTrace<'tcx> for ty::PolyTraitRef<'tcx> {\n         }\n     }\n }\n+\n+impl<'tcx> ToTrace<'tcx> for ty::ProjectionTy<'tcx> {\n+    fn to_trace(\n+        tcx: TyCtxt<'tcx>,\n+        cause: &ObligationCause<'tcx>,\n+        a_is_expected: bool,\n+        a: Self,\n+        b: Self,\n+    ) -> TypeTrace<'tcx> {\n+        let a_ty = tcx.mk_projection(a.item_def_id, a.substs);\n+        let b_ty = tcx.mk_projection(b.item_def_id, b.substs);\n+        TypeTrace {\n+            cause: cause.clone(),\n+            values: Types(ExpectedFound::new(a_is_expected, a_ty, b_ty)),\n+        }\n+    }\n+}"}, {"sha": "a38e3817a95e5a77e4c741f2d50eb78f200caf16", "filename": "compiler/rustc_trait_selection/src/traits/project.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0bf1d73d229fdd0c22ef87b1c764c88cf35dd616/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf1d73d229fdd0c22ef87b1c764c88cf35dd616/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fproject.rs?ref=0bf1d73d229fdd0c22ef87b1c764c88cf35dd616", "patch": "@@ -921,8 +921,7 @@ fn assemble_candidates_from_predicates<'cx, 'tcx>(\n                 && infcx.probe(|_| {\n                     selcx.match_projection_projections(\n                         obligation,\n-                        obligation_trait_ref,\n-                        &data,\n+                        data,\n                         potentially_unnormalized_candidates,\n                     )\n                 });\n@@ -1344,25 +1343,25 @@ fn confirm_param_env_candidate<'cx, 'tcx>(\n         poly_cache_entry,\n     );\n \n-    let cache_trait_ref = cache_entry.projection_ty.trait_ref(infcx.tcx);\n-    let obligation_trait_ref = obligation.predicate.trait_ref(infcx.tcx);\n+    let cache_projection = cache_entry.projection_ty;\n+    let obligation_projection = obligation.predicate;\n     let mut nested_obligations = Vec::new();\n-    let cache_trait_ref = if potentially_unnormalized_candidate {\n+    let cache_projection = if potentially_unnormalized_candidate {\n         ensure_sufficient_stack(|| {\n             normalize_with_depth_to(\n                 selcx,\n                 obligation.param_env,\n                 obligation.cause.clone(),\n                 obligation.recursion_depth + 1,\n-                cache_trait_ref,\n+                cache_projection,\n                 &mut nested_obligations,\n             )\n         })\n     } else {\n-        cache_trait_ref\n+        cache_projection\n     };\n \n-    match infcx.at(cause, param_env).eq(cache_trait_ref, obligation_trait_ref) {\n+    match infcx.at(cause, param_env).eq(cache_projection, obligation_projection) {\n         Ok(InferOk { value: _, obligations }) => {\n             nested_obligations.extend(obligations);\n             assoc_ty_own_obligations(selcx, obligation, &mut nested_obligations);"}, {"sha": "f0970a48808ad10626acddbccf01342afaaebd1c", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0bf1d73d229fdd0c22ef87b1c764c88cf35dd616/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bf1d73d229fdd0c22ef87b1c764c88cf35dd616/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=0bf1d73d229fdd0c22ef87b1c764c88cf35dd616", "patch": "@@ -32,6 +32,7 @@ use rustc_errors::ErrorReported;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::Constness;\n+use rustc_infer::infer::LateBoundRegionConversionTime;\n use rustc_middle::dep_graph::{DepKind, DepNodeIndex};\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::ty::fast_reject;\n@@ -1254,32 +1255,33 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     pub(super) fn match_projection_projections(\n         &mut self,\n         obligation: &ProjectionTyObligation<'tcx>,\n-        obligation_trait_ref: &ty::TraitRef<'tcx>,\n-        data: &PolyProjectionPredicate<'tcx>,\n+        env_predicate: PolyProjectionPredicate<'tcx>,\n         potentially_unnormalized_candidates: bool,\n     ) -> bool {\n         let mut nested_obligations = Vec::new();\n-        let projection_ty = if potentially_unnormalized_candidates {\n+        let (infer_predicate, _) = self.infcx.replace_bound_vars_with_fresh_vars(\n+            obligation.cause.span,\n+            LateBoundRegionConversionTime::HigherRankedType,\n+            env_predicate,\n+        );\n+        let infer_projection = if potentially_unnormalized_candidates {\n             ensure_sufficient_stack(|| {\n                 project::normalize_with_depth_to(\n                     self,\n                     obligation.param_env,\n                     obligation.cause.clone(),\n                     obligation.recursion_depth + 1,\n-                    data.map_bound(|data| data.projection_ty),\n+                    infer_predicate.projection_ty,\n                     &mut nested_obligations,\n                 )\n             })\n         } else {\n-            data.map_bound(|data| data.projection_ty)\n+            infer_predicate.projection_ty\n         };\n \n-        // FIXME(generic_associated_types): Compare the whole projections\n-        let data_poly_trait_ref = projection_ty.map_bound(|proj| proj.trait_ref(self.tcx()));\n-        let obligation_poly_trait_ref = ty::Binder::dummy(*obligation_trait_ref);\n         self.infcx\n             .at(&obligation.cause, obligation.param_env)\n-            .sup(obligation_poly_trait_ref, data_poly_trait_ref)\n+            .sup(obligation.predicate, infer_projection)\n             .map_or(false, |InferOk { obligations, value: () }| {\n                 self.evaluate_predicates_recursively(\n                     TraitObligationStackList::empty(&ProvisionalEvaluationCache::default()),"}]}