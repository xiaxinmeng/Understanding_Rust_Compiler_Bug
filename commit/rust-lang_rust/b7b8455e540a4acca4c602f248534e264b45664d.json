{"sha": "b7b8455e540a4acca4c602f248534e264b45664d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3Yjg0NTVlNTQwYTRhY2NhNGM2MDJmMjQ4NTM0ZTI2NGI0NTY2NGQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-26T01:22:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-26T01:22:08Z"}, "message": "rustc: Add pprust::variant_to_str", "tree": {"sha": "850cb605c7b220428f58377d1f77984e925d1a15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/850cb605c7b220428f58377d1f77984e925d1a15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7b8455e540a4acca4c602f248534e264b45664d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7b8455e540a4acca4c602f248534e264b45664d", "html_url": "https://github.com/rust-lang/rust/commit/b7b8455e540a4acca4c602f248534e264b45664d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7b8455e540a4acca4c602f248534e264b45664d/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1586cce0ea1082f4716b50520ed9cb40941f7fad", "url": "https://api.github.com/repos/rust-lang/rust/commits/1586cce0ea1082f4716b50520ed9cb40941f7fad", "html_url": "https://github.com/rust-lang/rust/commit/1586cce0ea1082f4716b50520ed9cb40941f7fad"}], "stats": {"total": 56, "additions": 39, "deletions": 17}, "files": [{"sha": "d235ef59b62fffa32f85407b69767ad5e443efdb", "filename": "src/comp/syntax/print/pprust.rs", "status": "modified", "additions": 39, "deletions": 17, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/b7b8455e540a4acca4c602f248534e264b45664d/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7b8455e540a4acca4c602f248534e264b45664d/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fprint%2Fpprust.rs?ref=b7b8455e540a4acca4c602f248534e264b45664d", "patch": "@@ -137,6 +137,24 @@ fn attribute_to_str(attr: ast::attribute) -> str {\n     be to_str(attr, print_attribute);\n }\n \n+fn variant_to_str(var: ast::variant) -> str {\n+    be to_str(var, print_variant);\n+}\n+\n+#[test]\n+fn test_variant_to_str() {\n+    let var = ast_util::respan(ast_util::dummy_sp(), {\n+        name: \"principle_skinner\",\n+        attrs: [],\n+        args: [],\n+        id: 0,\n+        disr_expr: none\n+    });\n+\n+    let varstr = variant_to_str(var);\n+    assert varstr == \"principle_skinner\";\n+}\n+\n fn cbox(s: ps, u: uint) { s.boxes += [pp::consistent]; pp::cbox(s.s, u); }\n \n fn box(s: ps, u: uint, b: pp::breaks) { s.boxes += [b]; pp::box(s.s, u, b); }\n@@ -436,23 +454,7 @@ fn print_item(s: ps, &&item: @ast::item) {\n                 maybe_print_comment(s, v.span.lo);\n                 print_outer_attributes(s, v.node.attrs);\n                 ibox(s, indent_unit);\n-                word(s.s, v.node.name);\n-                if vec::len(v.node.args) > 0u {\n-                    popen(s);\n-                    fn print_variant_arg(s: ps, arg: ast::variant_arg) {\n-                        print_type(s, arg.ty);\n-                    }\n-                    commasep(s, consistent, v.node.args, print_variant_arg);\n-                    pclose(s);\n-                }\n-                alt v.node.disr_expr {\n-                  some(d) {\n-                    space(s.s);\n-                    word_space(s, \"=\");\n-                    print_expr(s, d);\n-                  }\n-                  _ {}\n-                }\n+                print_variant(s, v);\n                 word(s.s, \",\");\n                 end(s);\n                 maybe_print_trailing_comment(s, v.span, none::<uint>);\n@@ -510,6 +512,26 @@ fn print_item(s: ps, &&item: @ast::item) {\n     s.ann.post(ann_node);\n }\n \n+fn print_variant(s: ps, v: ast::variant) {\n+    word(s.s, v.node.name);\n+    if vec::len(v.node.args) > 0u {\n+        popen(s);\n+        fn print_variant_arg(s: ps, arg: ast::variant_arg) {\n+            print_type(s, arg.ty);\n+        }\n+        commasep(s, consistent, v.node.args, print_variant_arg);\n+        pclose(s);\n+    }\n+    alt v.node.disr_expr {\n+      some(d) {\n+        space(s.s);\n+        word_space(s, \"=\");\n+        print_expr(s, d);\n+      }\n+      _ {}\n+    }\n+}\n+\n fn print_ty_method(s: ps, m: ast::ty_method) {\n     hardbreak_if_not_bol(s);\n     cbox(s, indent_unit);"}]}