{"sha": "fec8a507a27de1b08a0b95592dc8ec93bf0a321a", "node_id": "C_kwDOAAsO6NoAKGZlYzhhNTA3YTI3ZGUxYjA4YTBiOTU1OTJkYzhlYzkzYmYwYTMyMWE", "commit": {"author": {"name": "Cormac Relf", "email": "web@cormacrelf.net", "date": "2021-10-17T02:01:16Z"}, "committer": {"name": "Cormac Relf", "email": "web@cormacrelf.net", "date": "2021-12-13T03:02:41Z"}, "message": "let-else: add deref-coercion tests", "tree": {"sha": "5214e6f9df81cab962bd528a248cfb85c259a54a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5214e6f9df81cab962bd528a248cfb85c259a54a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fec8a507a27de1b08a0b95592dc8ec93bf0a321a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fec8a507a27de1b08a0b95592dc8ec93bf0a321a", "html_url": "https://github.com/rust-lang/rust/commit/fec8a507a27de1b08a0b95592dc8ec93bf0a321a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fec8a507a27de1b08a0b95592dc8ec93bf0a321a/comments", "author": {"login": "cormacrelf", "id": 378760, "node_id": "MDQ6VXNlcjM3ODc2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/378760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cormacrelf", "html_url": "https://github.com/cormacrelf", "followers_url": "https://api.github.com/users/cormacrelf/followers", "following_url": "https://api.github.com/users/cormacrelf/following{/other_user}", "gists_url": "https://api.github.com/users/cormacrelf/gists{/gist_id}", "starred_url": "https://api.github.com/users/cormacrelf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cormacrelf/subscriptions", "organizations_url": "https://api.github.com/users/cormacrelf/orgs", "repos_url": "https://api.github.com/users/cormacrelf/repos", "events_url": "https://api.github.com/users/cormacrelf/events{/privacy}", "received_events_url": "https://api.github.com/users/cormacrelf/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cormacrelf", "id": 378760, "node_id": "MDQ6VXNlcjM3ODc2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/378760?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cormacrelf", "html_url": "https://github.com/cormacrelf", "followers_url": "https://api.github.com/users/cormacrelf/followers", "following_url": "https://api.github.com/users/cormacrelf/following{/other_user}", "gists_url": "https://api.github.com/users/cormacrelf/gists{/gist_id}", "starred_url": "https://api.github.com/users/cormacrelf/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cormacrelf/subscriptions", "organizations_url": "https://api.github.com/users/cormacrelf/orgs", "repos_url": "https://api.github.com/users/cormacrelf/repos", "events_url": "https://api.github.com/users/cormacrelf/events{/privacy}", "received_events_url": "https://api.github.com/users/cormacrelf/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2715c5f984fda7faa156d1c9cf91aa4934f0e00f", "url": "https://api.github.com/repos/rust-lang/rust/commits/2715c5f984fda7faa156d1c9cf91aa4934f0e00f", "html_url": "https://github.com/rust-lang/rust/commit/2715c5f984fda7faa156d1c9cf91aa4934f0e00f"}], "stats": {"total": 171, "additions": 171, "deletions": 0}, "files": [{"sha": "65d88a6d82827bacf03f95b9cfbcbe8c4a96459c", "filename": "src/test/ui/let-else/let-else-deref-coercion-annotated.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/fec8a507a27de1b08a0b95592dc8ec93bf0a321a/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion-annotated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec8a507a27de1b08a0b95592dc8ec93bf0a321a/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion-annotated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion-annotated.rs?ref=fec8a507a27de1b08a0b95592dc8ec93bf0a321a", "patch": "@@ -0,0 +1,77 @@\n+// check-pass\n+//\n+// Taken from https://github.com/rust-lang/rust/blob/6cc0a764e082d9c0abcf37a768d5889247ba13e2/compiler/rustc_typeck/src/check/_match.rs#L445-L462\n+//\n+// We attempt to `let Bar::Present(_): &mut Bar = foo else { ... }` where foo is meant to\n+// Deref/DerefMut to Bar. You can do this with an irrefutable binding, so it should work with\n+// let-else too.\n+\n+#![feature(let_else)]\n+use std::ops::{Deref, DerefMut};\n+\n+struct Foo(Bar);\n+\n+enum Bar {\n+    Present(u32),\n+    Absent,\n+}\n+impl Deref for Foo {\n+    type Target = Bar;\n+    fn deref(&self) -> &Bar {\n+        &self.0\n+    }\n+}\n+impl DerefMut for Foo {\n+    fn deref_mut(&mut self) -> &mut Bar {\n+        &mut self.0\n+    }\n+}\n+impl Bar {\n+    fn bar(&self) -> Option<u32> {\n+        let Bar::Present(z): &Bar = self else {\n+            return None;\n+        };\n+        return Some(*z);\n+    }\n+}\n+impl Foo {\n+    fn set_bar_annotated(&mut self, value: u32) {\n+        let Bar::Present(z): &mut Bar = self else { // OK\n+            return;\n+        };\n+        *z = value;\n+    }\n+}\n+\n+fn main() {\n+    let mut foo = Foo(Bar::Present(1));\n+    foo.set_bar_annotated(42);\n+    assert_eq!(foo.bar(), Some(42));\n+    irrefutable::inner();\n+}\n+\n+// The original, to show it works for irrefutable let decls\n+mod irrefutable {\n+    use std::ops::{Deref, DerefMut};\n+    struct Foo(Bar);\n+    struct Bar(u32);\n+    impl Deref for Foo {\n+        type Target = Bar;\n+        fn deref(&self) -> &Bar {\n+            &self.0\n+        }\n+    }\n+    impl DerefMut for Foo {\n+        fn deref_mut(&mut self) -> &mut Bar {\n+            &mut self.0\n+        }\n+    }\n+    fn foo(x: &mut Foo) {\n+        let Bar(z): &mut Bar = x; // OK\n+        *z = 42;\n+        assert_eq!((x.0).0, 42);\n+    }\n+    pub fn inner() {\n+        foo(&mut Foo(Bar(1)));\n+    }\n+}"}, {"sha": "87489d84bbf3d63f5f459aa2646e683740bbc29d", "filename": "src/test/ui/let-else/let-else-deref-coercion.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/fec8a507a27de1b08a0b95592dc8ec93bf0a321a/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fec8a507a27de1b08a0b95592dc8ec93bf0a321a/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion.rs?ref=fec8a507a27de1b08a0b95592dc8ec93bf0a321a", "patch": "@@ -0,0 +1,75 @@\n+// Taken from https://github.com/rust-lang/rust/blob/6cc0a764e082d9c0abcf37a768d5889247ba13e2/compiler/rustc_typeck/src/check/_match.rs#L445-L462\n+//\n+// We attempt to `let Bar::Present(_) = foo else { ... }` where foo is meant to Deref/DerefMut to\n+// Bar. This fails, you must add a type annotation like `let _: &mut Bar = _ else { ... }`\n+\n+#![feature(let_else)]\n+use std::ops::{Deref, DerefMut};\n+\n+struct Foo(Bar);\n+\n+enum Bar {\n+    Present(u32),\n+    Absent,\n+}\n+impl Deref for Foo {\n+    type Target = Bar;\n+    fn deref(&self) -> &Bar {\n+        &self.0\n+    }\n+}\n+impl DerefMut for Foo {\n+    fn deref_mut(&mut self) -> &mut Bar {\n+        &mut self.0\n+    }\n+}\n+impl Bar {\n+    fn bar(&self) -> Option<u32> {\n+        let Bar::Present(z): &Bar = self else {\n+            return None;\n+        };\n+        return Some(*z);\n+    }\n+}\n+impl Foo {\n+    // Try without the type annotation\n+    fn set_bar_unannotated(&mut self, value: u32) {\n+        let Bar::Present(z) = self else { //~ ERROR mismatched types\n+            return;\n+        };\n+        *z = value;\n+    }\n+}\n+\n+fn main() {\n+    let mut foo = Foo(Bar::Present(1));\n+    foo.set_bar_unannotated(54);\n+    assert_eq!(foo.bar(), Some(54));\n+    irrefutable::inner();\n+}\n+\n+// The original, to show it fails for irrefutable let decls\n+mod irrefutable {\n+    use std::ops::{Deref, DerefMut};\n+    struct Foo(Bar);\n+    struct Bar(u32);\n+    impl Deref for Foo {\n+        type Target = Bar;\n+        fn deref(&self) -> &Bar {\n+            &self.0\n+        }\n+    }\n+    impl DerefMut for Foo {\n+        fn deref_mut(&mut self) -> &mut Bar {\n+            &mut self.0\n+        }\n+    }\n+    fn foo(x: &mut Foo) {\n+        let Bar(z) = x; //~ ERROR mismatched types\n+        *z = 54;\n+        assert_eq!((x.0).0, 54);\n+    }\n+    pub fn inner() {\n+        foo(&mut Foo(Bar(1)));\n+    }\n+}"}, {"sha": "addcd798f4ffb8f54cfa21d2345e7969138caf6b", "filename": "src/test/ui/let-else/let-else-deref-coercion.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fec8a507a27de1b08a0b95592dc8ec93bf0a321a/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fec8a507a27de1b08a0b95592dc8ec93bf0a321a/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flet-else%2Flet-else-deref-coercion.stderr?ref=fec8a507a27de1b08a0b95592dc8ec93bf0a321a", "patch": "@@ -0,0 +1,19 @@\n+error[E0308]: mismatched types\n+  --> $DIR/let-else-deref-coercion.rs:37:13\n+   |\n+LL |         let Bar::Present(z) = self else {\n+   |             ^^^^^^^^^^^^^^^   ---- this expression has type `&mut Foo`\n+   |             |\n+   |             expected struct `Foo`, found enum `Bar`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/let-else-deref-coercion.rs:68:13\n+   |\n+LL |         let Bar(z) = x;\n+   |             ^^^^^^   - this expression has type `&mut irrefutable::Foo`\n+   |             |\n+   |             expected struct `irrefutable::Foo`, found struct `irrefutable::Bar`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}