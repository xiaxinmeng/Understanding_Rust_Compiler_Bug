{"sha": "d8c4e78603eb1f658516dde08868abbe6c06bd35", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YzRlNzg2MDNlYjFmNjU4NTE2ZGRlMDg4NjhhYmJlNmMwNmJkMzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-06T08:01:34Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-02-06T08:01:34Z"}, "message": "auto merge of #12001 : yuriks/rust/getopts-tweaks, r=brson\n\nThis complements `usage` by auto-generating a short one-liner summary\r\nof the options.\r\n\r\n(First timer here, be gentle... :)", "tree": {"sha": "1693ae845c9f328905e31bce657c14546ae05b2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1693ae845c9f328905e31bce657c14546ae05b2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8c4e78603eb1f658516dde08868abbe6c06bd35", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8c4e78603eb1f658516dde08868abbe6c06bd35", "html_url": "https://github.com/rust-lang/rust/commit/d8c4e78603eb1f658516dde08868abbe6c06bd35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8c4e78603eb1f658516dde08868abbe6c06bd35/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dc06802b241ea30a8aadca1f8451a646f2bc3c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dc06802b241ea30a8aadca1f8451a646f2bc3c0", "html_url": "https://github.com/rust-lang/rust/commit/8dc06802b241ea30a8aadca1f8451a646f2bc3c0"}, {"sha": "65a6c7c12cba28ba41c64d7e6a6d66502aeeeb52", "url": "https://api.github.com/repos/rust-lang/rust/commits/65a6c7c12cba28ba41c64d7e6a6d66502aeeeb52", "html_url": "https://github.com/rust-lang/rust/commit/65a6c7c12cba28ba41c64d7e6a6d66502aeeeb52"}], "stats": {"total": 64, "additions": 64, "deletions": 0}, "files": [{"sha": "f29caec5d33071302dc676039349ac9129f95e51", "filename": "src/libextra/getopts.rs", "status": "modified", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/d8c4e78603eb1f658516dde08868abbe6c06bd35/src%2Flibextra%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8c4e78603eb1f658516dde08868abbe6c06bd35/src%2Flibextra%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fgetopts.rs?ref=d8c4e78603eb1f658516dde08868abbe6c06bd35", "patch": "@@ -675,6 +675,51 @@ pub mod groups {\n         ::getopts::getopts(args, opts.map(|x| x.long_to_short()))\n     }\n \n+    fn format_option(opt: &OptGroup) -> ~str {\n+        let mut line = ~\"\";\n+\n+        if opt.occur != Req {\n+            line.push_char('[');\n+        }\n+\n+        // Use short_name is possible, but fallback to long_name.\n+        if opt.short_name.len() > 0 {\n+            line.push_char('-');\n+            line.push_str(opt.short_name);\n+        } else {\n+            line.push_str(\"--\");\n+            line.push_str(opt.long_name);\n+        }\n+\n+        if opt.hasarg != No {\n+            line.push_char(' ');\n+            if opt.hasarg == Maybe {\n+                line.push_char('[');\n+            }\n+            line.push_str(opt.hint);\n+            if opt.hasarg == Maybe {\n+                line.push_char(']');\n+            }\n+        }\n+\n+        if opt.occur != Req {\n+            line.push_char(']');\n+        }\n+        if opt.occur == Multi {\n+            line.push_str(\"..\");\n+        }\n+\n+        line\n+    }\n+\n+    /// Derive a short one-line usage summary from a set of long options.\n+    pub fn short_usage(program_name: &str, opts: &[OptGroup]) -> ~str {\n+        let mut line = ~\"Usage: \" + program_name + \" \";\n+        line.push_str(opts.iter().map(format_option).to_owned_vec().connect(\" \"));\n+\n+        line\n+    }\n+\n     /// Derive a usage message from a set of long options.\n     pub fn usage(brief: &str, opts: &[OptGroup]) -> ~str {\n \n@@ -1637,4 +1682,23 @@ Options:\n         debug!(\"generated: <<{}>>\", usage);\n         assert!(usage == expected)\n     }\n+\n+    #[test]\n+    fn test_short_usage() {\n+        let optgroups = ~[\n+            groups::reqopt(\"b\", \"banana\", \"Desc\", \"VAL\"),\n+            groups::optopt(\"a\", \"012345678901234567890123456789\",\n+                             \"Desc\", \"VAL\"),\n+            groups::optflag(\"k\", \"kiwi\", \"Desc\"),\n+            groups::optflagopt(\"p\", \"\", \"Desc\", \"VAL\"),\n+            groups::optmulti(\"l\", \"\", \"Desc\", \"VAL\"),\n+        ];\n+\n+        let expected = ~\"Usage: fruits -b VAL [-a VAL] [-k] [-p [VAL]] [-l VAL]..\";\n+        let generated_usage = groups::short_usage(\"fruits\", optgroups);\n+\n+        debug!(\"expected: <<{}>>\", expected);\n+        debug!(\"generated: <<{}>>\", generated_usage);\n+        assert_eq!(generated_usage, expected);\n+    }\n }"}]}