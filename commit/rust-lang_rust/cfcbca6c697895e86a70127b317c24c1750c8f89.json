{"sha": "cfcbca6c697895e86a70127b317c24c1750c8f89", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmY2JjYTZjNjk3ODk1ZTg2YTcwMTI3YjMxN2MyNGMxNzUwYzhmODk=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-20T21:18:06Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-07-20T21:18:06Z"}, "message": "update coherence docs", "tree": {"sha": "630f45649ca9782109cecc2c681f2c37e71a6020", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/630f45649ca9782109cecc2c681f2c37e71a6020"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cfcbca6c697895e86a70127b317c24c1750c8f89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cfcbca6c697895e86a70127b317c24c1750c8f89", "html_url": "https://github.com/rust-lang/rust/commit/cfcbca6c697895e86a70127b317c24c1750c8f89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cfcbca6c697895e86a70127b317c24c1750c8f89/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c71b196f66d110291a67c3bbc0f8fdb11a261f1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c71b196f66d110291a67c3bbc0f8fdb11a261f1f", "html_url": "https://github.com/rust-lang/rust/commit/c71b196f66d110291a67c3bbc0f8fdb11a261f1f"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "b06cf4411d053188e80f90188b4ea1c5125a526f", "filename": "src/librustc_trait_selection/traits/coherence.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cfcbca6c697895e86a70127b317c24c1750c8f89/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cfcbca6c697895e86a70127b317c24c1750c8f89/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fcoherence.rs?ref=cfcbca6c697895e86a70127b317c24c1750c8f89", "patch": "@@ -289,11 +289,11 @@ pub fn orphan_check(tcx: TyCtxt<'_>, impl_def_id: DefId) -> Result<(), OrphanChe\n ///     - but (knowing that `Vec<T>` is non-fundamental, and assuming it's\n ///       not local), `Vec<LocalType>` is bad, because `Vec<->` is between\n ///       the local type and the type parameter.\n-/// 3. Every type parameter before the local key parameter is fully known in C.\n-///     - e.g., `impl<T> T: Trait<LocalType>` is bad, because `T` might be\n-///       an unknown type.\n-///     - but `impl<T> LocalType: Trait<T>` is OK, because `LocalType`\n-///       occurs before `T`.\n+/// 3. Before this local type, no generic type parameter of the impl must\n+///    be reachable through fundamental types.\n+///     - e.g. `impl<T> Trait<LocalType> for Vec<T>` is fine, as `Vec` is not fundamental.\n+///     - while `impl<T> Trait<LocalType for Box<T>` results in an error, as `T` is\n+///       reachable through the fundamental type `Box`.\n /// 4. Every type in the local key parameter not known in C, going\n ///    through the parameter's type tree, must appear only as a subtree of\n ///    a type local to C, with only fundamental types between the type\n@@ -387,8 +387,8 @@ fn orphan_check_trait_ref<'tcx>(\n         ty: Ty<'tcx>,\n         in_crate: InCrate,\n     ) -> Vec<Ty<'tcx>> {\n-        // FIXME(eddyb) figure out if this is redundant with `ty_is_non_local`,\n-        // or maybe if this should be calling `ty_is_non_local_constructor`.\n+        // FIXME: this is currently somewhat overly complicated,\n+        // but fixing this requires a more complicated refactor.\n         if !contained_non_local_types(tcx, ty, in_crate).is_empty() {\n             if let Some(inner_tys) = fundamental_ty_inner_tys(tcx, ty) {\n                 return inner_tys"}]}