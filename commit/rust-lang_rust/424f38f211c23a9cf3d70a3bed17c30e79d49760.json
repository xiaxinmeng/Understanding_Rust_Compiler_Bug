{"sha": "424f38f211c23a9cf3d70a3bed17c30e79d49760", "node_id": "C_kwDOAAsO6NoAKDQyNGYzOGYyMTFjMjNhOWNmM2Q3MGEzYmVkMTdjMzBlNzlkNDk3NjA", "commit": {"author": {"name": "Christopher Swenson", "email": "swenson@swenson.io", "date": "2022-01-10T22:18:28Z"}, "committer": {"name": "Christopher Swenson", "email": "swenson@swenson.io", "date": "2022-01-10T22:18:28Z"}, "message": "Simplification of BigNum::bit_length\n\nAs indicated in the comment, the BigNum::bit_length function could be\noptimized by using CLZ, which is often a single instruction instead a\nloop.\n\nI think the code is also simpler now without the loop.\n\nI added some additional tests for Big8x3 and Big32x40 to ensure that\nthere were no regressions.", "tree": {"sha": "81bdbe4a36c67f8c9560b7b077e150ef52f72e9c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81bdbe4a36c67f8c9560b7b077e150ef52f72e9c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/424f38f211c23a9cf3d70a3bed17c30e79d49760", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/424f38f211c23a9cf3d70a3bed17c30e79d49760", "html_url": "https://github.com/rust-lang/rust/commit/424f38f211c23a9cf3d70a3bed17c30e79d49760", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/424f38f211c23a9cf3d70a3bed17c30e79d49760/comments", "author": {"login": "swenson", "id": 33404, "node_id": "MDQ6VXNlcjMzNDA0", "avatar_url": "https://avatars.githubusercontent.com/u/33404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swenson", "html_url": "https://github.com/swenson", "followers_url": "https://api.github.com/users/swenson/followers", "following_url": "https://api.github.com/users/swenson/following{/other_user}", "gists_url": "https://api.github.com/users/swenson/gists{/gist_id}", "starred_url": "https://api.github.com/users/swenson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swenson/subscriptions", "organizations_url": "https://api.github.com/users/swenson/orgs", "repos_url": "https://api.github.com/users/swenson/repos", "events_url": "https://api.github.com/users/swenson/events{/privacy}", "received_events_url": "https://api.github.com/users/swenson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "swenson", "id": 33404, "node_id": "MDQ6VXNlcjMzNDA0", "avatar_url": "https://avatars.githubusercontent.com/u/33404?v=4", "gravatar_id": "", "url": "https://api.github.com/users/swenson", "html_url": "https://github.com/swenson", "followers_url": "https://api.github.com/users/swenson/followers", "following_url": "https://api.github.com/users/swenson/following{/other_user}", "gists_url": "https://api.github.com/users/swenson/gists{/gist_id}", "starred_url": "https://api.github.com/users/swenson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/swenson/subscriptions", "organizations_url": "https://api.github.com/users/swenson/orgs", "repos_url": "https://api.github.com/users/swenson/repos", "events_url": "https://api.github.com/users/swenson/events{/privacy}", "received_events_url": "https://api.github.com/users/swenson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "url": "https://api.github.com/repos/rust-lang/rust/commits/89b9f7b284aacc5f8613438b80e4dd7bdd10549e", "html_url": "https://github.com/rust-lang/rust/commit/89b9f7b284aacc5f8613438b80e4dd7bdd10549e"}], "stats": {"total": 48, "additions": 38, "deletions": 10}, "files": [{"sha": "65c1753895e7162928eaa7e449e001d33a975d14", "filename": "library/core/src/num/bignum.rs", "status": "modified", "additions": 3, "deletions": 10, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/424f38f211c23a9cf3d70a3bed17c30e79d49760/library%2Fcore%2Fsrc%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/424f38f211c23a9cf3d70a3bed17c30e79d49760/library%2Fcore%2Fsrc%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fbignum.rs?ref=424f38f211c23a9cf3d70a3bed17c30e79d49760", "patch": "@@ -162,20 +162,13 @@ macro_rules! define_bignum {\n                 let digits = self.digits();\n                 let zeros = digits.iter().rev().take_while(|&&x| x == 0).count();\n                 let end = digits.len() - zeros;\n-                let nonzero = &digits[..end];\n-\n-                if nonzero.is_empty() {\n+                if end == 0 {\n                     // There are no non-zero digits, i.e., the number is zero.\n                     return 0;\n                 }\n-                // This could be optimized with leading_zeros() and bit shifts, but that's\n-                // probably not worth the hassle.\n                 let digitbits = <$ty>::BITS as usize;\n-                let mut i = nonzero.len() * digitbits - 1;\n-                while self.get_bit(i) == 0 {\n-                    i -= 1;\n-                }\n-                i + 1\n+                let end_leading_zeros = digits[end - 1].leading_zeros() as usize;\n+                end * digitbits - end_leading_zeros\n             }\n \n             /// Adds `other` to itself and returns its own mutable reference."}, {"sha": "416e7cea7a67bcf040206dbcc777f1d6a6838aeb", "filename": "library/core/tests/num/bignum.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/424f38f211c23a9cf3d70a3bed17c30e79d49760/library%2Fcore%2Ftests%2Fnum%2Fbignum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/424f38f211c23a9cf3d70a3bed17c30e79d49760/library%2Fcore%2Ftests%2Fnum%2Fbignum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fnum%2Fbignum.rs?ref=424f38f211c23a9cf3d70a3bed17c30e79d49760", "patch": "@@ -1,4 +1,5 @@\n use core::num::bignum::tests::Big8x3 as Big;\n+use core::num::bignum::Big32x40;\n \n #[test]\n #[should_panic]\n@@ -215,6 +216,16 @@ fn test_get_bit_out_of_range() {\n \n #[test]\n fn test_bit_length() {\n+    for i in 0..8 * 3 {\n+        // 010000...000\n+        assert_eq!(Big::from_small(1).mul_pow2(i).bit_length(), i + 1);\n+    }\n+    for i in 1..8 * 3 - 1 {\n+        // 010000...001\n+        assert_eq!(Big::from_small(1).mul_pow2(i).add(&Big::from_small(1)).bit_length(), i + 1);\n+        // 110000...000\n+        assert_eq!(Big::from_small(3).mul_pow2(i).bit_length(), i + 2);\n+    }\n     assert_eq!(Big::from_small(0).bit_length(), 0);\n     assert_eq!(Big::from_small(1).bit_length(), 1);\n     assert_eq!(Big::from_small(5).bit_length(), 3);\n@@ -223,6 +234,30 @@ fn test_bit_length() {\n     assert_eq!(Big::from_u64(0xffffff).bit_length(), 24);\n }\n \n+#[test]\n+fn test_bit_length_32x40() {\n+    for i in 0..32 * 40 {\n+        // 010000...000\n+        assert_eq!(Big32x40::from_small(1).mul_pow2(i).bit_length(), i + 1);\n+    }\n+    for i in 1..32 * 40 - 1 {\n+        // 010000...001\n+        assert_eq!(\n+            Big32x40::from_small(1).mul_pow2(i).add(&Big32x40::from_small(1)).bit_length(),\n+            i + 1\n+        );\n+        // 110000...000\n+        assert_eq!(Big32x40::from_small(3).mul_pow2(i).bit_length(), i + 2);\n+    }\n+    assert_eq!(Big32x40::from_small(0).bit_length(), 0);\n+    assert_eq!(Big32x40::from_small(1).bit_length(), 1);\n+    assert_eq!(Big32x40::from_small(5).bit_length(), 3);\n+    assert_eq!(Big32x40::from_small(0x18).bit_length(), 5);\n+    assert_eq!(Big32x40::from_u64(0x4073).bit_length(), 15);\n+    assert_eq!(Big32x40::from_u64(0xffffff).bit_length(), 24);\n+    assert_eq!(Big32x40::from_u64(0xffffffffffffffff).bit_length(), 64);\n+}\n+\n #[test]\n fn test_ord() {\n     assert!(Big::from_u64(0) < Big::from_u64(0xffffff));"}]}