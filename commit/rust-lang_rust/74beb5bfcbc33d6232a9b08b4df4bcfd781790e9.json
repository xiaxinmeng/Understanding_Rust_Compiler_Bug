{"sha": "74beb5bfcbc33d6232a9b08b4df4bcfd781790e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YmViNWJmY2JjMzNkNjIzMmE5YjA4YjRkZjRiY2ZkNzgxNzkwZTk=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-25T07:29:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-25T07:29:00Z"}, "message": "simplify", "tree": {"sha": "ce68818c693d878128f5c3d7116c9c695ac269b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce68818c693d878128f5c3d7116c9c695ac269b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74beb5bfcbc33d6232a9b08b4df4bcfd781790e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74beb5bfcbc33d6232a9b08b4df4bcfd781790e9", "html_url": "https://github.com/rust-lang/rust/commit/74beb5bfcbc33d6232a9b08b4df4bcfd781790e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74beb5bfcbc33d6232a9b08b4df4bcfd781790e9/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed27bd8d776e7efd4394d6cdda02aa7f93c48273", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed27bd8d776e7efd4394d6cdda02aa7f93c48273", "html_url": "https://github.com/rust-lang/rust/commit/ed27bd8d776e7efd4394d6cdda02aa7f93c48273"}], "stats": {"total": 34, "additions": 20, "deletions": 14}, "files": [{"sha": "be80edaf38a0b9b91b051ef0ebea47df1e83d6f7", "filename": "crates/ra_arena/src/map.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74beb5bfcbc33d6232a9b08b4df4bcfd781790e9/crates%2Fra_arena%2Fsrc%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74beb5bfcbc33d6232a9b08b4df4bcfd781790e9/crates%2Fra_arena%2Fsrc%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_arena%2Fsrc%2Fmap.rs?ref=74beb5bfcbc33d6232a9b08b4df4bcfd781790e9", "patch": "@@ -29,6 +29,10 @@ impl<ID: ArenaId, T> ArenaMap<ID, T> {\n         self.v.get(Self::to_idx(id)).and_then(|it| it.as_ref())\n     }\n \n+    pub fn get_mut(&mut self, id: ID) -> Option<&mut T> {\n+        self.v.get_mut(Self::to_idx(id)).and_then(|it| it.as_mut())\n+    }\n+\n     pub fn values(&self) -> impl Iterator<Item = &T> {\n         self.v.iter().filter_map(|o| o.as_ref())\n     }"}, {"sha": "a469ad47709ec1e2d9b218ff6a72f8eb813cb7bf", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74beb5bfcbc33d6232a9b08b4df4bcfd781790e9/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74beb5bfcbc33d6232a9b08b4df4bcfd781790e9/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=74beb5bfcbc33d6232a9b08b4df4bcfd781790e9", "patch": "@@ -165,7 +165,7 @@ impl Module {\n \n     /// Returns a `ModuleScope`: a set of items, visible in this module.\n     pub fn scope(&self, db: &impl HirDatabase) -> ModuleScope {\n-        self.scope_impl(db)\n+        db.item_map(self.krate)[self.module_id].clone()\n     }\n \n     pub fn resolve_path(&self, db: &impl HirDatabase, path: &Path) -> PerNs<ModuleDef> {"}, {"sha": "480ec27bf530e797d32d4fa198702004de28926a", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/74beb5bfcbc33d6232a9b08b4df4bcfd781790e9/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74beb5bfcbc33d6232a9b08b4df4bcfd781790e9/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=74beb5bfcbc33d6232a9b08b4df4bcfd781790e9", "patch": "@@ -2,10 +2,10 @@ use ra_db::FileId;\n use ra_syntax::{ast, SyntaxNode, TreeArc};\n \n use crate::{\n-    Module, ModuleSource, Problem, ModuleDef,\n-    Crate, Name, Path, PerNs,\n+    Module, ModuleSource, Problem,\n+    Crate, Name,\n     module_tree::ModuleId,\n-    nameres::{ModuleScope, lower::ImportId},\n+    nameres::{lower::ImportId},\n     db::HirDatabase,\n };\n \n@@ -90,12 +90,6 @@ impl Module {\n         Some(self.with_module_id(parent_id))\n     }\n \n-    /// Returns a `ModuleScope`: a set of items, visible in this module.\n-    pub(crate) fn scope_impl(&self, db: &impl HirDatabase) -> ModuleScope {\n-        let item_map = db.item_map(self.krate);\n-        item_map.per_module[&self.module_id].clone()\n-    }\n-\n     pub(crate) fn problems_impl(\n         &self,\n         db: &impl HirDatabase,"}, {"sha": "88ad0a44d0bb4d2cac0fc98cbafc7ba3a6fee77f", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74beb5bfcbc33d6232a9b08b4df4bcfd781790e9/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74beb5bfcbc33d6232a9b08b4df4bcfd781790e9/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=74beb5bfcbc33d6232a9b08b4df4bcfd781790e9", "patch": "@@ -19,6 +19,7 @@ pub(crate) mod lower;\n use std::sync::Arc;\n \n use ra_db::CrateId;\n+use ra_arena::map::ArenaMap;\n use test_utils::tested_by;\n use rustc_hash::{FxHashMap, FxHashSet};\n \n@@ -37,7 +38,14 @@ use crate::{\n // FIXME: currenty we compute item map per source-root. We should do it per crate instead.\n #[derive(Default, Debug, PartialEq, Eq)]\n pub struct ItemMap {\n-    pub per_module: FxHashMap<ModuleId, ModuleScope>,\n+    per_module: ArenaMap<ModuleId, ModuleScope>,\n+}\n+\n+impl std::ops::Index<ModuleId> for ItemMap {\n+    type Output = ModuleScope;\n+    fn index(&self, id: ModuleId) -> &ModuleScope {\n+        &self.per_module[id]\n+    }\n }\n \n #[derive(Debug, Default, PartialEq, Eq, Clone)]\n@@ -308,7 +316,7 @@ where\n     }\n \n     fn update(&mut self, module_id: ModuleId, f: impl FnOnce(&mut ModuleScope)) {\n-        let module_items = self.result.per_module.get_mut(&module_id).unwrap();\n+        let module_items = self.result.per_module.get_mut(module_id).unwrap();\n         f(module_items)\n     }\n }\n@@ -380,7 +388,7 @@ impl ItemMap {\n                         return (def, ReachedFixedPoint::Yes);\n                     }\n \n-                    match self.per_module[&module.module_id].items.get(&segment.name) {\n+                    match self[module.module_id].items.get(&segment.name) {\n                         Some(res) if !res.def.is_none() => res.def,\n                         _ => {\n                             log::debug!(\"path segment {:?} not found\", segment.name);"}, {"sha": "c033bebe87a9adefb25841dfbdc4c229785218e2", "filename": "crates/ra_hir/src/nameres/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74beb5bfcbc33d6232a9b08b4df4bcfd781790e9/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74beb5bfcbc33d6232a9b08b4df4bcfd781790e9/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests.rs?ref=74beb5bfcbc33d6232a9b08b4df4bcfd781790e9", "patch": "@@ -20,7 +20,7 @@ fn item_map(fixture: &str) -> (Arc<ItemMap>, ModuleId) {\n }\n \n fn check_module_item_map(map: &ItemMap, module_id: ModuleId, expected: &str) {\n-    let mut lines = map.per_module[&module_id]\n+    let mut lines = map[module_id]\n         .items\n         .iter()\n         .map(|(name, res)| format!(\"{}: {}\", name, dump_resolution(res)))"}]}