{"sha": "483e95a35c9f3ab01666de4808134af26fded68c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4M2U5NWEzNWM5ZjNhYjAxNjY2ZGU0ODA4MTM0YWYyNmZkZWQ2OGM=", "commit": {"author": {"name": "gareth", "email": "gareth@gareth-N56VM.(none)", "date": "2013-04-06T19:49:52Z"}, "committer": {"name": "gareth", "email": "gareth@gareth-N56VM.(none)", "date": "2013-04-06T19:57:22Z"}, "message": "Change the behaviour of core::run::Program.destroy to\nforcibly terminate the program (as suggested in issue #5632)", "tree": {"sha": "52cc788797691cfe989af26030d1798999142a15", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52cc788797691cfe989af26030d1798999142a15"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/483e95a35c9f3ab01666de4808134af26fded68c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/483e95a35c9f3ab01666de4808134af26fded68c", "html_url": "https://github.com/rust-lang/rust/commit/483e95a35c9f3ab01666de4808134af26fded68c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/483e95a35c9f3ab01666de4808134af26fded68c/comments", "author": null, "committer": null, "parents": [{"sha": "622bb6300f8b4e5a644088fe471e63b580b03453", "url": "https://api.github.com/repos/rust-lang/rust/commits/622bb6300f8b4e5a644088fe471e63b580b03453", "html_url": "https://github.com/rust-lang/rust/commit/622bb6300f8b4e5a644088fe471e63b580b03453"}], "stats": {"total": 82, "additions": 75, "deletions": 7}, "files": [{"sha": "e17a6be3f1f95794b9517d23a2aa24de3f884ce5", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/483e95a35c9f3ab01666de4808134af26fded68c/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483e95a35c9f3ab01666de4808134af26fded68c/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=483e95a35c9f3ab01666de4808134af26fded68c", "patch": "@@ -863,6 +863,7 @@ pub mod consts {\n             pub static F_TEST : int = 3;\n             pub static F_TLOCK : int = 2;\n             pub static F_ULOCK : int = 0;\n+            pub static SIGKILL : int = 9;\n         }\n         pub mod posix01 {\n         }\n@@ -930,6 +931,7 @@ pub mod consts {\n             pub static F_TEST : int = 3;\n             pub static F_TLOCK : int = 2;\n             pub static F_ULOCK : int = 0;\n+            pub static SIGKILL : int = 9;\n         }\n         pub mod posix01 {\n         }\n@@ -998,6 +1000,7 @@ pub mod consts {\n             pub static F_TEST : int = 3;\n             pub static F_TLOCK : int = 2;\n             pub static F_ULOCK : int = 0;\n+            pub static SIGKILL : int = 9;\n         }\n         pub mod posix01 {\n         }\n@@ -1482,6 +1485,17 @@ pub mod funcs {\n                              -> ssize_t;\n             }\n         }\n+\n+        #[nolink]\n+        #[abi = \"cdecl\"]\n+        pub mod signal {\n+            use libc::types::os::arch::c95::{c_int};\n+            use libc::types::os::arch::posix88::{pid_t};\n+\n+            pub extern {\n+                unsafe fn kill(pid: pid_t, sig: c_int) -> c_int;\n+            }\n+        }\n     }\n \n     #[cfg(target_os = \"linux\")]\n@@ -1623,6 +1637,7 @@ pub mod funcs {\n     pub mod extra {\n \n         pub mod kernel32 {\n+            use libc::types::os::arch::c95::{c_uint};\n             use libc::types::os::arch::extra::{BOOL, DWORD, HMODULE};\n             use libc::types::os::arch::extra::{LPCWSTR, LPWSTR, LPTCH};\n             use libc::types::os::arch::extra::{LPSECURITY_ATTRIBUTES};\n@@ -1663,6 +1678,7 @@ pub mod funcs {\n                                        findFileData: HANDLE)\n                     -> BOOL;\n                 unsafe fn FindClose(findFile: HANDLE) -> BOOL;\n+                unsafe fn TerminateProcess(hProcess: HANDLE, uExitCode: c_uint) -> BOOL;\n             }\n         }\n "}, {"sha": "e7602cff4928de3fe8a432730ece62db19c9d4d7", "filename": "src/libcore/run.rs", "status": "modified", "additions": 59, "deletions": 7, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/483e95a35c9f3ab01666de4808134af26fded68c/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/483e95a35c9f3ab01666de4808134af26fded68c/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=483e95a35c9f3ab01666de4808134af26fded68c", "patch": "@@ -62,7 +62,10 @@ pub trait Program {\n      */\n     fn finish(&mut self) -> int;\n \n-    /// Closes open handles\n+    /**\n+     * Forcibly terminate the program. On Posix OSs SIGKILL will be sent\n+     * to the process. On Win32 TerminateProcess(..) will be called.\n+     */\n     fn destroy(&mut self);\n }\n \n@@ -248,28 +251,53 @@ pub fn start_program(prog: &str, args: &[~str]) -> @Program {\n             r.in_fd = invalid_fd;\n         }\n     }\n+\n+    fn close_repr_outputs(r: &mut ProgRepr) {\n+        unsafe {\n+            fclose_and_null(&mut r.out_file);\n+            fclose_and_null(&mut r.err_file);\n+        }\n+    }\n+\n     fn finish_repr(r: &mut ProgRepr) -> int {\n         if r.finished { return 0; }\n         r.finished = true;\n         close_repr_input(&mut *r);\n         return waitpid(r.pid);\n     }\n+\n     fn destroy_repr(r: &mut ProgRepr) {\n-        unsafe {\n-            finish_repr(&mut *r);\n-            fclose_and_null(&mut r.out_file);\n-            fclose_and_null(&mut r.err_file);\n+        killpid(r.pid);\n+        finish_repr(&mut *r);\n+        close_repr_outputs(&mut *r);\n+\n+        #[cfg(windows)]\n+        fn killpid(pid: pid_t) {\n+            unsafe {\n+                libc::funcs::extra::kernel32::TerminateProcess(\n+                    cast::transmute(pid), 1);\n+            }\n+        }\n+\n+        #[cfg(unix)]\n+        fn killpid(pid: pid_t) {\n+            unsafe {\n+                libc::funcs::posix88::signal::kill(\n+                    pid, libc::consts::os::posix88::SIGKILL as c_int);\n+            }\n         }\n     }\n+\n     struct ProgRes {\n         r: ProgRepr,\n     }\n \n     impl Drop for ProgRes {\n         fn finalize(&self) {\n             unsafe {\n-                // FIXME #4943: This is bad.\n-                destroy_repr(cast::transmute(&self.r));\n+                // FIXME #4943: transmute is bad.\n+                finish_repr(cast::transmute(&self.r));\n+                close_repr_outputs(cast::transmute(&self.r));\n             }\n         }\n     }\n@@ -295,6 +323,7 @@ pub fn start_program(prog: &str, args: &[~str]) -> @Program {\n         fn finish(&mut self) -> int { finish_repr(&mut self.r) }\n         fn destroy(&mut self) { destroy_repr(&mut self.r); }\n     }\n+\n     let mut repr = ProgRepr {\n         pid: pid,\n         in_fd: pipe_input.out,\n@@ -466,8 +495,10 @@ pub fn waitpid(pid: pid_t) -> int {\n \n #[cfg(test)]\n mod tests {\n+    use libc;\n     use option::None;\n     use os;\n+    use path::Path;\n     use run::{readclose, writeclose};\n     use run;\n \n@@ -528,6 +559,27 @@ mod tests {\n         p.destroy(); // ...and nor should this (and nor should the destructor)\n     }\n \n+    #[test]\n+    #[cfg(unix)] // there is no way to sleep on windows from inside libcore...\n+    pub fn test_destroy_actually_kills() {\n+        let path = Path(\"test/core-run-test-destroy-actually-kills.tmp\");\n+\n+        os::remove_file(&path);\n+\n+        let cmd = fmt!(\"sleep 5 && echo MurderDeathKill > %s\", path.to_str());\n+        let mut p = run::start_program(\"sh\", [~\"-c\", cmd]);\n+\n+        p.destroy(); // destroy the program before it has a chance to echo its message\n+\n+        unsafe {\n+            // wait to ensure the program is really destroyed and not just waiting itself\n+            libc::sleep(10);\n+        }\n+\n+        // the program should not have had chance to echo its message\n+        assert!(!path.exists());\n+    }\n+\n }\n \n // Local Variables:"}]}