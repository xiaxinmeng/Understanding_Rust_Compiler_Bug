{"sha": "0e84d6fc1ae1267eaf38b9c518a6d8f68ff6305c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlODRkNmZjMWFlMTI2N2VhZjM4YjljNTE4YTZkOGY2OGZmNjMwNWM=", "commit": {"author": {"name": "mitchmindtree", "email": "mitchell.nordine@gmail.com", "date": "2014-07-04T12:24:50Z"}, "committer": {"name": "mitchmindtree", "email": "mitchell.nordine@gmail.com", "date": "2014-07-07T03:02:09Z"}, "message": "Implemented Decodable/Encodable for Cell and RefCell. Fixes #15395\n\nUpdated PR with fixme and test\n\nUpdated PR with fixme and test", "tree": {"sha": "df1a8f1e2ab0682881923c430c991889f32a15dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df1a8f1e2ab0682881923c430c991889f32a15dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e84d6fc1ae1267eaf38b9c518a6d8f68ff6305c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e84d6fc1ae1267eaf38b9c518a6d8f68ff6305c", "html_url": "https://github.com/rust-lang/rust/commit/0e84d6fc1ae1267eaf38b9c518a6d8f68ff6305c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e84d6fc1ae1267eaf38b9c518a6d8f68ff6305c/comments", "author": {"login": "mitchmindtree", "id": 4587373, "node_id": "MDQ6VXNlcjQ1ODczNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4587373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitchmindtree", "html_url": "https://github.com/mitchmindtree", "followers_url": "https://api.github.com/users/mitchmindtree/followers", "following_url": "https://api.github.com/users/mitchmindtree/following{/other_user}", "gists_url": "https://api.github.com/users/mitchmindtree/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitchmindtree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitchmindtree/subscriptions", "organizations_url": "https://api.github.com/users/mitchmindtree/orgs", "repos_url": "https://api.github.com/users/mitchmindtree/repos", "events_url": "https://api.github.com/users/mitchmindtree/events{/privacy}", "received_events_url": "https://api.github.com/users/mitchmindtree/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mitchmindtree", "id": 4587373, "node_id": "MDQ6VXNlcjQ1ODczNzM=", "avatar_url": "https://avatars.githubusercontent.com/u/4587373?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mitchmindtree", "html_url": "https://github.com/mitchmindtree", "followers_url": "https://api.github.com/users/mitchmindtree/followers", "following_url": "https://api.github.com/users/mitchmindtree/following{/other_user}", "gists_url": "https://api.github.com/users/mitchmindtree/gists{/gist_id}", "starred_url": "https://api.github.com/users/mitchmindtree/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mitchmindtree/subscriptions", "organizations_url": "https://api.github.com/users/mitchmindtree/orgs", "repos_url": "https://api.github.com/users/mitchmindtree/repos", "events_url": "https://api.github.com/users/mitchmindtree/events{/privacy}", "received_events_url": "https://api.github.com/users/mitchmindtree/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36d7d746c8366d78b332cffdff85318e709b38ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/36d7d746c8366d78b332cffdff85318e709b38ca", "html_url": "https://github.com/rust-lang/rust/commit/36d7d746c8366d78b332cffdff85318e709b38ca"}], "stats": {"total": 85, "additions": 85, "deletions": 0}, "files": [{"sha": "03d9445b9b94bae73032dd1e2bfdd73f43b38177", "filename": "src/libserialize/serialize.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0e84d6fc1ae1267eaf38b9c518a6d8f68ff6305c/src%2Flibserialize%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e84d6fc1ae1267eaf38b9c518a6d8f68ff6305c/src%2Flibserialize%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fserialize.rs?ref=0e84d6fc1ae1267eaf38b9c518a6d8f68ff6305c", "patch": "@@ -17,6 +17,7 @@ Core encoding and decoding interfaces.\n use std::path;\n use std::rc::Rc;\n use std::gc::{Gc, GC};\n+use std::cell::{Cell, RefCell};\n \n pub trait Encoder<E> {\n     // Primitive types:\n@@ -536,6 +537,35 @@ impl<E, D: Decoder<E>> Decodable<D, E> for path::windows::Path {\n     }\n }\n \n+impl<E, S: Encoder<E>, T: Encodable<S, E> + Copy> Encodable<S, E> for Cell<T> {\n+    fn encode(&self, s: &mut S) -> Result<(), E> {\n+        self.get().encode(s)\n+    }\n+}\n+\n+impl<E, D: Decoder<E>, T: Decodable<D, E> + Copy> Decodable<D, E> for Cell<T> {\n+    fn decode(d: &mut D) -> Result<Cell<T>, E> {\n+        Ok(Cell::new(try!(Decodable::decode(d))))\n+    }\n+}\n+\n+// FIXME: #15036\n+// Should use `try_borrow`, returning a\n+// `encoder.error(\"attempting to Encode borrowed RefCell\")`\n+// from `encode` when `try_borrow` returns `None`.\n+\n+impl<E, S: Encoder<E>, T: Encodable<S, E>> Encodable<S, E> for RefCell<T> {\n+    fn encode(&self, s: &mut S) -> Result<(), E> {\n+        self.borrow().encode(s)\n+    }\n+}\n+\n+impl<E, D: Decoder<E>, T: Decodable<D, E>> Decodable<D, E> for RefCell<T> {\n+    fn decode(d: &mut D) -> Result<RefCell<T>, E> {\n+        Ok(RefCell::new(try!(Decodable::decode(d))))\n+    }\n+}\n+\n // ___________________________________________________________________________\n // Helper routines\n //"}, {"sha": "a7738bb803cf5cae24f1531f9d8c9977c3841ea2", "filename": "src/test/run-pass/deriving-encodable-decodable-cell-refcell.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0e84d6fc1ae1267eaf38b9c518a6d8f68ff6305c/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e84d6fc1ae1267eaf38b9c518a6d8f68ff6305c/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-encodable-decodable-cell-refcell.rs?ref=0e84d6fc1ae1267eaf38b9c518a6d8f68ff6305c", "patch": "@@ -0,0 +1,55 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This briefuly tests the capability of `Cell` and `RefCell` to implement the\n+// `Encodable` and `Decodable` traits via `#[deriving(Encodable, Decodable)]`\n+\n+extern crate serialize;\n+\n+use std::cell::{Cell, RefCell};\n+use std::io::MemWriter;\n+use serialize::{Encodable, Decodable};\n+use serialize::ebml;\n+use serialize::ebml::writer::Encoder;\n+use serialize::ebml::reader::Decoder;\n+\n+#[deriving(Encodable, Decodable)]\n+struct A {\n+    baz: int\n+}\n+\n+#[deriving(Encodable, Decodable)]\n+struct B {\n+    foo: Cell<bool>,\n+    bar: RefCell<A>,\n+}\n+\n+fn main() {\n+    let obj = B {\n+        foo: Cell::new(true),\n+        bar: RefCell::new( A { baz: 2 } )\n+    };\n+    let mut w = MemWriter::new();\n+    {\n+        let mut e = Encoder::new(&mut w);\n+        match obj.encode(&mut e) {\n+            Ok(()) => (),\n+            Err(e) => fail!(\"Failed to encode: {}\", e)\n+        };\n+    }\n+    let doc = ebml::Doc::new(w.get_ref());\n+    let mut dec = Decoder::new(doc);\n+    let obj2: B = match Decodable::decode(&mut dec) {\n+        Ok(v) => v,\n+        Err(e) => fail!(\"Failed to decode: {}\", e)\n+    };\n+    assert!(obj.foo.get() == obj2.foo.get());\n+    assert!(obj.bar.borrow().baz == obj2.bar.borrow().baz);\n+}"}]}