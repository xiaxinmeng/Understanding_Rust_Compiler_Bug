{"sha": "da5f80cc6d56bec5d406e1c785c1f24fb2ab4103", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNWY4MGNjNmQ1NmJlYzVkNDA2ZTFjNzg1YzFmMjRmYjJhYjQxMDM=", "commit": {"author": {"name": "Lee Aronson", "email": "lee@libertad.ucsd.edu", "date": "2015-04-23T23:46:33Z"}, "committer": {"name": "Lee Aronson", "email": "lee@libertad.ucsd.edu", "date": "2015-04-23T23:46:33Z"}, "message": "Improve information about loops\n\n1) Moved 'while' section below 'loop', 'break', and 'continue'; 2) Added information to 'while' and 'for' loops that they interact with 'break' and 'continue' and may have a lifetime label. 3) Clarified labeling syntax on the infinite loops.", "tree": {"sha": "dd3fbd6b1e0200fa8644c727481291a525032b46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd3fbd6b1e0200fa8644c727481291a525032b46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da5f80cc6d56bec5d406e1c785c1f24fb2ab4103", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da5f80cc6d56bec5d406e1c785c1f24fb2ab4103", "html_url": "https://github.com/rust-lang/rust/commit/da5f80cc6d56bec5d406e1c785c1f24fb2ab4103", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da5f80cc6d56bec5d406e1c785c1f24fb2ab4103/comments", "author": null, "committer": null, "parents": [{"sha": "90bed3f9479f9f63746f227d5fc4ddecdd37642a", "url": "https://api.github.com/repos/rust-lang/rust/commits/90bed3f9479f9f63746f227d5fc4ddecdd37642a", "html_url": "https://github.com/rust-lang/rust/commit/90bed3f9479f9f63746f227d5fc4ddecdd37642a"}], "stats": {"total": 69, "additions": 40, "deletions": 29}, "files": [{"sha": "0e00bf4f7994eda2bc41d065b6bc696b157efdbe", "filename": "src/doc/reference.md", "status": "modified", "additions": 40, "deletions": 29, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/da5f80cc6d56bec5d406e1c785c1f24fb2ab4103/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/da5f80cc6d56bec5d406e1c785c1f24fb2ab4103/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=da5f80cc6d56bec5d406e1c785c1f24fb2ab4103", "patch": "@@ -3078,28 +3078,6 @@ fn ten_times<F>(f: F) where F: Fn(i32) {\n ten_times(|j| println!(\"hello, {}\", j));\n ```\n \n-### While loops\n-\n-```{.ebnf .gram}\n-while_expr : [ lifetime ':' ] \"while\" no_struct_literal_expr '{' block '}' ;\n-```\n-\n-A `while` loop begins by evaluating the boolean loop conditional expression.\n-If the loop conditional expression evaluates to `true`, the loop body block\n-executes and control returns to the loop conditional expression. If the loop\n-conditional expression evaluates to `false`, the `while` expression completes.\n-\n-An example:\n-\n-```\n-let mut i = 0;\n-\n-while i < 10 {\n-    println!(\"hello\");\n-    i = i + 1;\n-}\n-```\n-\n ### Infinite loops\n \n A `loop` expression denotes an infinite loop.\n@@ -3108,10 +3086,11 @@ A `loop` expression denotes an infinite loop.\n loop_expr : [ lifetime ':' ] \"loop\" '{' block '}';\n ```\n \n-A `loop` expression may optionally have a _label_. If a label is present, then\n-labeled `break` and `continue` expressions nested within this loop may exit out\n-of this loop or return control to its head. See [Break\n-expressions](#break-expressions) and [Continue\n+A `loop` expression may optionally have a _label_. The label is written as\n+a lifetime preceding the loop expression, as in `'foo: loop{ }`. If a\n+label is present, then labeled `break` and `continue` expressions nested\n+within this loop may exit out of this loop or return control to its head.\n+See [Break expressions](#break-expressions) and [Continue\n expressions](#continue-expressions).\n \n ### Break expressions\n@@ -3123,7 +3102,7 @@ break_expr : \"break\" [ lifetime ];\n A `break` expression has an optional _label_. If the label is absent, then\n executing a `break` expression immediately terminates the innermost loop\n enclosing it. It is only permitted in the body of a loop. If the label is\n-present, then `break foo` terminates the loop with label `foo`, which need not\n+present, then `break 'foo` terminates the loop with label `'foo`, which need not\n be the innermost label enclosing the `break` expression, but must enclose it.\n \n ### Continue expressions\n@@ -3137,12 +3116,39 @@ executing a `continue` expression immediately terminates the current iteration\n of the innermost loop enclosing it, returning control to the loop *head*. In\n the case of a `while` loop, the head is the conditional expression controlling\n the loop. In the case of a `for` loop, the head is the call-expression\n-controlling the loop. If the label is present, then `continue foo` returns\n-control to the head of the loop with label `foo`, which need not be the\n+controlling the loop. If the label is present, then `continue 'foo` returns\n+control to the head of the loop with label `'foo`, which need not be the\n innermost label enclosing the `break` expression, but must enclose it.\n \n A `continue` expression is only permitted in the body of a loop.\n \n+### While loops\n+\n+```{.ebnf .gram}\n+while_expr : [ lifetime ':' ] \"while\" no_struct_literal_expr '{' block '}' ;\n+```\n+\n+A `while` loop begins by evaluating the boolean loop conditional expression.\n+If the loop conditional expression evaluates to `true`, the loop body block\n+executes and control returns to the loop conditional expression. If the loop\n+conditional expression evaluates to `false`, the `while` expression completes.\n+\n+An example:\n+\n+```\n+let mut i = 0;\n+\n+while i < 10 {\n+    println!(\"hello\");\n+    i = i + 1;\n+}\n+```\n+\n+Like `loop` expressions, `while` loops can be controlled with `break` or\n+`continue`, and may optionally have a _label_. See [infinite\n+loops](#infinite-loops), [break expressions](#break-expressions), and\n+[continue expressions](#continue-expressions) for more information.\n+\n ### For expressions\n \n ```{.ebnf .gram}\n@@ -3177,6 +3183,11 @@ for i in 0..256 {\n }\n ```\n \n+Like `loop` expressions, `while` loops can be controlled with `break` or\n+`continue`, and may optionally have a _label_. See [infinite\n+loops](#infinite-loops), [break expressions](#break-expressions), and\n+[continue expressions](#continue-expressions) for more information.\n+\n ### If expressions\n \n ```{.ebnf .gram}"}]}