{"sha": "1deca0425db3e74a61cb732e729c0777904e549c", "node_id": "C_kwDOAAsO6NoAKDFkZWNhMDQyNWRiM2U3NGE2MWNiNzMyZTcyOWMwNzc3OTA0ZTU0OWM", "commit": {"author": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-06-19T18:59:36Z"}, "committer": {"name": "Joshua Nelson", "email": "jnelson@cloudflare.com", "date": "2022-06-19T20:31:22Z"}, "message": "Greatly improve error reporting for futures and generators in `note_obligation_cause_code`\n\nMost futures don't go through this code path, because they're caught by\n`maybe_note_obligation_cause_for_async_await`. But all generators do,\nand `maybe_note` is imperfect and doesn't catch all futures. Improve the error message for those it misses.\n\nAt some point, we may want to consider unifying this with the code for `maybe_note_async_await`,\nso that `async_await` notes all parent constraints, and `note_obligation` can point to yield points.\nBut both functions are quite complicated, and it's not clear to me how to combine them;\nthis seems like a good incremental improvement.", "tree": {"sha": "0243373760ee6aa41c578a4d3a17dc9f026beb53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0243373760ee6aa41c578a4d3a17dc9f026beb53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1deca0425db3e74a61cb732e729c0777904e549c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1deca0425db3e74a61cb732e729c0777904e549c", "html_url": "https://github.com/rust-lang/rust/commit/1deca0425db3e74a61cb732e729c0777904e549c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1deca0425db3e74a61cb732e729c0777904e549c/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdcc53b7dc002ea4a7a28105010c5a1126ee31b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdcc53b7dc002ea4a7a28105010c5a1126ee31b7", "html_url": "https://github.com/rust-lang/rust/commit/cdcc53b7dc002ea4a7a28105010c5a1126ee31b7"}], "stats": {"total": 461, "additions": 389, "deletions": 72}, "files": [{"sha": "159fcf932a1da189c9cbdae8c895bf1798a4ea2c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 93, "deletions": 12, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -8,6 +8,7 @@ use crate::infer::InferCtxt;\n use crate::traits::normalize_to;\n \n use hir::HirId;\n+use rustc_ast::Movability;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::{\n@@ -2397,24 +2398,104 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     {\n                         let parent_trait_ref =\n                             self.resolve_vars_if_possible(data.parent_trait_pred);\n-                        let ty = parent_trait_ref.skip_binder().self_ty();\n-                        matches!(ty.kind(), ty::Generator(..))\n-                            || matches!(ty.kind(), ty::Closure(..))\n+                        let nested_ty = parent_trait_ref.skip_binder().self_ty();\n+                        matches!(nested_ty.kind(), ty::Generator(..))\n+                            || matches!(nested_ty.kind(), ty::Closure(..))\n                     } else {\n                         false\n                     }\n                 };\n \n+                let future_trait = self.tcx.lang_items().future_trait().unwrap();\n+                let opaque_ty_is_future = |def_id| {\n+                    self.tcx.explicit_item_bounds(def_id).iter().any(|(predicate, _)| {\n+                        if let ty::PredicateKind::Trait(trait_predicate) =\n+                            predicate.kind().skip_binder()\n+                        {\n+                            trait_predicate.trait_ref.def_id == future_trait\n+                        } else {\n+                            false\n+                        }\n+                    })\n+                };\n+\n+                let from_generator = tcx.lang_items().from_generator_fn().unwrap();\n+\n                 // Don't print the tuple of capture types\n-                if !is_upvar_tys_infer_tuple {\n-                    let msg = format!(\"required because it appears within the type `{}`\", ty);\n-                    match ty.kind() {\n-                        ty::Adt(def, _) => match self.tcx.opt_item_ident(def.did()) {\n-                            Some(ident) => err.span_note(ident.span, &msg),\n-                            None => err.note(&msg),\n-                        },\n-                        _ => err.note(&msg),\n-                    };\n+                'print: {\n+                    if !is_upvar_tys_infer_tuple {\n+                        let msg = format!(\"required because it appears within the type `{}`\", ty);\n+                        match ty.kind() {\n+                            ty::Adt(def, _) => {\n+                                // `gen_future` is used in all async functions; it doesn't add any additional info.\n+                                if self.tcx.is_diagnostic_item(sym::gen_future, def.did()) {\n+                                    break 'print;\n+                                }\n+                                match self.tcx.opt_item_ident(def.did()) {\n+                                    Some(ident) => err.span_note(ident.span, &msg),\n+                                    None => err.note(&msg),\n+                                }\n+                            }\n+                            ty::Opaque(def_id, _) => {\n+                                // Avoid printing the future from `core::future::from_generator`, it's not helpful\n+                                if tcx.parent(*def_id) == from_generator {\n+                                    break 'print;\n+                                }\n+\n+                                // If the previous type is `from_generator`, this is the future generated by the body of an async function.\n+                                // Avoid printing it twice (it was already printed in the `ty::Generator` arm below).\n+                                let is_future = opaque_ty_is_future(def_id);\n+                                debug!(\n+                                    ?obligated_types,\n+                                    ?is_future,\n+                                    \"note_obligation_cause_code: check for async fn\"\n+                                );\n+                                if opaque_ty_is_future(def_id)\n+                                    && obligated_types.last().map_or(false, |ty| match ty.kind() {\n+                                        ty::Opaque(last_def_id, _) => {\n+                                            tcx.parent(*last_def_id) == from_generator\n+                                        }\n+                                        _ => false,\n+                                    })\n+                                {\n+                                    break 'print;\n+                                }\n+                                err.span_note(self.tcx.def_span(def_id), &msg)\n+                            }\n+                            ty::GeneratorWitness(bound_tys) => {\n+                                use std::fmt::Write;\n+\n+                                // FIXME: this is kind of an unusual format for rustc, can we make it more clear?\n+                                // Maybe we should just remove this note altogether?\n+                                // FIXME: only print types which don't meet the trait requirement\n+                                let mut msg =\n+                                    \"required because it captures the following types: \".to_owned();\n+                                for ty in bound_tys.skip_binder() {\n+                                    write!(msg, \"`{}`, \", ty).unwrap();\n+                                }\n+                                err.note(msg.trim_end_matches(\", \"))\n+                            }\n+                            ty::Generator(def_id, _, movability) => {\n+                                let sp = self.tcx.def_span(def_id);\n+\n+                                // Special-case this to say \"async block\" instead of `[static generator]`.\n+                                let kind = if *movability == Movability::Static {\n+                                    \"async block\"\n+                                } else {\n+                                    \"generator\"\n+                                };\n+                                err.span_note(\n+                                    sp,\n+                                    &format!(\"required because it's used within this {}\", kind),\n+                                )\n+                            }\n+                            ty::Closure(def_id, _) => err.span_note(\n+                                self.tcx.def_span(def_id),\n+                                &format!(\"required because it's used within this closure\"),\n+                            ),\n+                            _ => err.note(&msg),\n+                        };\n+                    }\n                 }\n \n                 obligated_types.push(ty);"}, {"sha": "b8d3e1540d8a9e403ad3374d935fbf879630aeb2", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -42,15 +42,27 @@ LL |     require_send(send_fut);\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n-   = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:47:31: 47:36]`\n-   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:47:31: 47:36]>`\n-   = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n-   = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n-   = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n-   = note: required because it appears within the type `{ResumeTy, impl Future<Output = Arc<RefCell<i32>>>, (), i32, Ready<i32>}`\n-   = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:55:26: 59:6]`\n-   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:55:26: 59:6]>`\n-   = note: required because it appears within the type `impl Future<Output = ()>`\n+note: required because it's used within this async block\n+  --> $DIR/issue-68112.rs:47:31\n+   |\n+LL | async fn ready2<T>(t: T) -> T { t }\n+   |                               ^^^^^\n+note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n+  --> $DIR/issue-68112.rs:48:31\n+   |\n+LL | fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `i32`, `Ready<i32>`\n+note: required because it's used within this async block\n+  --> $DIR/issue-68112.rs:55:26\n+   |\n+LL |       let send_fut = async {\n+   |  __________________________^\n+LL | |         let non_send_fut = make_non_send_future2();\n+LL | |         let _ = non_send_fut.await;\n+LL | |         ready(0).await;\n+LL | |     };\n+   | |_____^\n note: required by a bound in `require_send`\n   --> $DIR/issue-68112.rs:11:25\n    |"}, {"sha": "19fd5eb7c73fbbed90cbbdc0a0652ddc2572f859", "filename": "src/test/ui/async-await/issue-70935-complex-spans.drop_tracking.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -0,0 +1,40 @@\n+error[E0277]: `Sender<i32>` cannot be shared between threads safely\n+  --> $DIR/issue-70935-complex-spans.rs:13:45\n+   |\n+LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n+   |                                             ^^^^^^^^^^^^^^^^^^ `Sender<i32>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `Sender<i32>`\n+   = note: required because of the requirements on the impl of `Send` for `&Sender<i32>`\n+note: required because it's used within this closure\n+  --> $DIR/issue-70935-complex-spans.rs:25:13\n+   |\n+LL |           baz(|| async{\n+   |  _____________^\n+LL | |             foo(tx.clone());\n+LL | |         }).await;\n+   | |_________^\n+note: required because it's used within this async block\n+  --> $DIR/issue-70935-complex-spans.rs:9:67\n+   |\n+LL |   async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n+   |  ___________________________________________________________________^\n+LL | |\n+LL | | }\n+   | |_^\n+   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = ()>`, `()`\n+note: required because it's used within this async block\n+  --> $DIR/issue-70935-complex-spans.rs:23:16\n+   |\n+LL |       async move {\n+   |  ________________^\n+LL | |\n+LL | |         baz(|| async{\n+LL | |             foo(tx.clone());\n+LL | |         }).await;\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "2174f260a713592e337d04630fff8ff0c9113d04", "filename": "src/test/ui/async-await/issue-70935-complex-spans.normal.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.normal.stderr?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -1,22 +1,22 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-70935-complex-spans.rs:10:45\n+  --> $DIR/issue-70935-complex-spans.rs:13:45\n    |\n LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n    |                                             ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `Sender<i32>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-70935-complex-spans.rs:15:11\n+  --> $DIR/issue-70935-complex-spans.rs:27:11\n    |\n LL |           baz(|| async{\n    |  _____________-\n LL | |             foo(tx.clone());\n LL | |         }).await;\n    | |         - ^^^^^^ await occurs here, with the value maybe used later\n    | |_________|\n-   |           has type `[closure@$DIR/issue-70935-complex-spans.rs:13:13: 15:10]` which is not `Send`\n+   |           has type `[closure@$DIR/issue-70935-complex-spans.rs:25:13: 27:10]` which is not `Send`\n note: the value is later dropped here\n-  --> $DIR/issue-70935-complex-spans.rs:15:17\n+  --> $DIR/issue-70935-complex-spans.rs:27:17\n    |\n LL |         }).await;\n    |                 ^", "previous_filename": "src/test/ui/async-await/issue-70935-complex-spans.stderr"}, {"sha": "4bf94fe342c1d715c287867d6ee2a9b4fc787826", "filename": "src/test/ui/async-await/issue-70935-complex-spans.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -1,16 +1,28 @@\n // edition:2018\n+// revisions: normal drop_tracking\n+// [drop_tracking]compile-flags:-Zdrop-tracking\n // #70935: Check if we do not emit snippet\n // with newlines which lead complex diagnostics.\n \n use std::future::Future;\n \n async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n+//[drop_tracking]~^ within this async block\n }\n \n fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n-    //~^ ERROR: future cannot be sent between threads safely\n+    //[normal]~^ ERROR: future cannot be sent between threads safely\n+    //[drop_tracking]~^^ ERROR: `Sender<i32>` cannot be shared\n+    //[drop_tracking]~|  NOTE: cannot be shared\n+    //[drop_tracking]~|  NOTE: requirements on the impl of `Send`\n+    //[drop_tracking]~|  NOTE: captures the following types\n+    //[drop_tracking]~|  NOTE: in this expansion\n+    //[drop_tracking]~|  NOTE: in this expansion\n+    //[drop_tracking]~|  NOTE: in this expansion\n+    //[drop_tracking]~|  NOTE: in this expansion\n     async move {\n-        baz(|| async{\n+    //[drop_tracking]~^ within this async block\n+        baz(|| async{ //[drop_tracking]~ NOTE: used within this closure\n             foo(tx.clone());\n         }).await;\n     }"}, {"sha": "4fcfacea3f886946002ad9f8d6b8acd726c47702", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.rs?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -5,9 +5,15 @@\n fn main() {\n     gimme_send(foo());\n     //~^ ERROR cannot be sent between threads safely\n+    //~| NOTE cannot be sent\n+    //~| NOTE bound introduced by\n+    //~| NOTE appears within the type\n+    //~| NOTE captures the following types\n }\n \n fn gimme_send<T: Send>(t: T) {\n+//~^ NOTE required by this bound\n+//~| NOTE required by a bound\n     drop(t);\n }\n \n@@ -20,6 +26,8 @@ impl Drop for NotSend {\n impl !Send for NotSend {}\n \n async fn foo() {\n+//~^ NOTE used within this async block\n+//~| NOTE within this `impl Future\n     let mut x = (NotSend {},);\n     drop(x.0);\n     x.0 = NotSend {};"}, {"sha": "96d0c71f103fba63e94327aa3441a3b223c56b28", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -11,13 +11,21 @@ LL | async fn foo() {\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `NotSend`\n    = note: required because it appears within the type `(NotSend,)`\n-   = note: required because it appears within the type `{ResumeTy, (NotSend,), impl Future<Output = ()>, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/partial-drop-partial-reinit.rs:22:16: 27:2]`\n-   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@$DIR/partial-drop-partial-reinit.rs:22:16: 27:2]>`\n-   = note: required because it appears within the type `impl Future<Output = ()>`\n-   = note: required because it appears within the type `impl Future<Output = ()>`\n+   = note: required because it captures the following types: `ResumeTy`, `(NotSend,)`, `impl Future<Output = ()>`, `()`\n+note: required because it's used within this async block\n+  --> $DIR/partial-drop-partial-reinit.rs:28:16\n+   |\n+LL |   async fn foo() {\n+   |  ________________^\n+LL | |\n+LL | |\n+LL | |     let mut x = (NotSend {},);\n+...  |\n+LL | |     bar().await;\n+LL | | }\n+   | |_^\n note: required by a bound in `gimme_send`\n-  --> $DIR/partial-drop-partial-reinit.rs:10:18\n+  --> $DIR/partial-drop-partial-reinit.rs:14:18\n    |\n LL | fn gimme_send<T: Send>(t: T) {\n    |                  ^^^^ required by this bound in `gimme_send`"}, {"sha": "cbc4e2e52315fe496cc687d3f42ce452e22b11f2", "filename": "src/test/ui/closures/closure-move-sync.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -6,7 +6,15 @@ LL |     let t = thread::spawn(|| {\n    |\n    = help: the trait `Sync` is not implemented for `std::sync::mpsc::Receiver<()>`\n    = note: required because of the requirements on the impl of `Send` for `&std::sync::mpsc::Receiver<()>`\n-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:6:27: 9:6]`\n+note: required because it's used within this closure\n+  --> $DIR/closure-move-sync.rs:6:27\n+   |\n+LL |       let t = thread::spawn(|| {\n+   |  ___________________________^\n+LL | |         recv.recv().unwrap();\n+LL | |\n+LL | |     });\n+   | |_____^\n note: required by a bound in `spawn`\n   --> $SRC_DIR/std/src/thread/mod.rs:LL:COL\n    |\n@@ -21,7 +29,11 @@ LL |     thread::spawn(|| tx.send(()).unwrap());\n    |\n    = help: the trait `Sync` is not implemented for `Sender<()>`\n    = note: required because of the requirements on the impl of `Send` for `&Sender<()>`\n-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:18:19: 18:42]`\n+note: required because it's used within this closure\n+  --> $DIR/closure-move-sync.rs:18:19\n+   |\n+LL |     thread::spawn(|| tx.send(()).unwrap());\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^\n note: required by a bound in `spawn`\n   --> $SRC_DIR/std/src/thread/mod.rs:LL:COL\n    |"}, {"sha": "3fcef773b68abf5ed428ce53d7e0a5d03d5ef519", "filename": "src/test/ui/generator/issue-68112.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -20,6 +20,10 @@ pub fn make_gen1<T>(t: T) -> Ready<T> {\n }\n \n fn require_send(_: impl Send) {}\n+//~^ NOTE required by a bound\n+//~| NOTE required by a bound\n+//~| NOTE required by this bound\n+//~| NOTE required by this bound\n \n fn make_non_send_generator() -> impl Generator<Return = Arc<RefCell<i32>>> {\n     make_gen1(Arc::new(RefCell::new(0)))\n@@ -28,29 +32,39 @@ fn make_non_send_generator() -> impl Generator<Return = Arc<RefCell<i32>>> {\n fn test1() {\n     let send_gen = || {\n         let _non_send_gen = make_non_send_generator();\n+        //~^ NOTE not `Send`\n         yield;\n-    };\n+        //~^ NOTE yield occurs here\n+        //~| NOTE value is used across a yield\n+    }; //~ NOTE later dropped here\n     require_send(send_gen);\n     //~^ ERROR generator cannot be sent between threads\n+    //~| NOTE not `Send`\n }\n \n pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n-    || {\n+//~^ NOTE appears within the type\n+//~| NOTE expansion of desugaring\n+    || { //~ NOTE used within this generator\n         yield;\n         t\n     }\n }\n-fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> { //~ NOTE appears within the type\n+//~^ NOTE expansion of desugaring\n     make_gen2(Arc::new(RefCell::new(0)))\n }\n \n fn test2() {\n-    let send_gen = || {\n+    let send_gen = || { //~ NOTE used within this generator\n         let _non_send_gen = make_non_send_generator2();\n         yield;\n     };\n     require_send(send_gen);\n     //~^ ERROR `RefCell<i32>` cannot be shared between threads safely\n+    //~| NOTE `RefCell<i32>` cannot be shared between threads safely\n+    //~| NOTE requirements on the impl\n+    //~| NOTE captures the following types\n }\n \n fn main() {}"}, {"sha": "83f068c2076438f769877a1d00a1e14e053aa8c3", "filename": "src/test/ui/generator/issue-68112.stderr", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -1,17 +1,19 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-68112.rs:33:5\n+  --> $DIR/issue-68112.rs:40:5\n    |\n LL |     require_send(send_gen);\n    |     ^^^^^^^^^^^^ generator is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-68112.rs:31:9\n+  --> $DIR/issue-68112.rs:36:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n    |             ------------- has type `impl Generator<Return = Arc<RefCell<i32>>>` which is not `Send`\n+LL |\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n+...\n LL |     };\n    |     - `_non_send_gen` is later dropped here\n note: required by a bound in `require_send`\n@@ -21,18 +23,41 @@ LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/issue-68112.rs:52:5\n+  --> $DIR/issue-68112.rs:63:5\n    |\n LL |     require_send(send_gen);\n    |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n-   = note: required because it appears within the type `[generator@$DIR/issue-68112.rs:38:5: 41:6]`\n-   = note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n-   = note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n-   = note: required because it appears within the type `{impl Generator<Return = Arc<RefCell<i32>>>, ()}`\n-   = note: required because it appears within the type `[generator@$DIR/issue-68112.rs:48:20: 51:6]`\n+note: required because it's used within this generator\n+  --> $DIR/issue-68112.rs:48:5\n+   |\n+LL | /     || {\n+LL | |         yield;\n+LL | |         t\n+LL | |     }\n+   | |_____^\n+note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n+  --> $DIR/issue-68112.rs:45:30\n+   |\n+LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n+  --> $DIR/issue-68112.rs:53:34\n+   |\n+LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because it captures the following types: `impl Generator<Return = Arc<RefCell<i32>>>`, `()`\n+note: required because it's used within this generator\n+  --> $DIR/issue-68112.rs:59:20\n+   |\n+LL |       let send_gen = || {\n+   |  ____________________^\n+LL | |         let _non_send_gen = make_non_send_generator2();\n+LL | |         yield;\n+LL | |     };\n+   | |_____^\n note: required by a bound in `require_send`\n   --> $DIR/issue-68112.rs:22:25\n    |"}, {"sha": "edf9ee628a2bc25200c8bb68e59c4ea56575d7e5", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -6,7 +6,16 @@ LL |     assert_send(|| {\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `&Cell<i32>`\n-   = note: required because it appears within the type `[generator@$DIR/not-send-sync.rs:16:17: 20:6]`\n+note: required because it's used within this generator\n+  --> $DIR/not-send-sync.rs:16:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         drop(&a);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^\n note: required by a bound in `assert_send`\n   --> $DIR/not-send-sync.rs:7:23\n    |"}, {"sha": "3ee4c1458bad38d1e5349878c83001ca2975c9f9", "filename": "src/test/ui/generator/print/generator-print-verbose-1.stderr", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -28,11 +28,34 @@ LL |     require_send(send_gen);\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n-   = note: required because it appears within the type `[make_gen2<Arc<RefCell<i32>>>::{closure#0} upvar_tys=(Arc<RefCell<i32>>) {()}]`\n-   = note: required because it appears within the type `Opaque(DefId(0:39 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n-   = note: required because it appears within the type `Opaque(DefId(0:42 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n-   = note: required because it appears within the type `{Opaque(DefId(0:42 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), []), ()}`\n-   = note: required because it appears within the type `[test2::{closure#0} upvar_tys=() {Opaque(DefId(0:42 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), []), ()}]`\n+note: required because it's used within this generator\n+  --> $DIR/generator-print-verbose-1.rs:42:5\n+   |\n+LL | /     || {\n+LL | |         yield;\n+LL | |         t\n+LL | |     }\n+   | |_____^\n+note: required because it appears within the type `Opaque(DefId(0:39 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n+  --> $DIR/generator-print-verbose-1.rs:41:30\n+   |\n+LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required because it appears within the type `Opaque(DefId(0:42 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n+  --> $DIR/generator-print-verbose-1.rs:47:34\n+   |\n+LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because it captures the following types: `Opaque(DefId(0:42 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`, `()`\n+note: required because it's used within this generator\n+  --> $DIR/generator-print-verbose-1.rs:52:20\n+   |\n+LL |       let send_gen = || {\n+   |  ____________________^\n+LL | |         let _non_send_gen = make_non_send_generator2();\n+LL | |         yield;\n+LL | |     };\n+   | |_____^\n note: required by a bound in `require_send`\n   --> $DIR/generator-print-verbose-1.rs:26:25\n    |"}, {"sha": "1356fa5f15295db37399e3eff7463df577b4761c", "filename": "src/test/ui/generator/print/generator-print-verbose-2.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -6,7 +6,16 @@ LL |     assert_send(|| {\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `&'_#4r Cell<i32>`\n-   = note: required because it appears within the type `[main::{closure#1} upvar_tys=(&'_#4r Cell<i32>) _#17t]`\n+note: required because it's used within this generator\n+  --> $DIR/generator-print-verbose-2.rs:19:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         drop(&a);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^\n note: required by a bound in `assert_send`\n   --> $DIR/generator-print-verbose-2.rs:10:23\n    |"}, {"sha": "09450089adaa8652eb80991173c0b9ac9da596f7", "filename": "src/test/ui/impl-trait/auto-trait-leak2.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.rs?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -3,23 +3,37 @@ use std::rc::Rc;\n \n // Fast path, main can see the concrete type returned.\n fn before() -> impl Fn(i32) {\n+//~^ NOTE within this `impl Fn\n+//~| NOTE within the type `impl Fn\n+//~| NOTE expansion of desugaring\n     let p = Rc::new(Cell::new(0));\n-    move |x| p.set(x)\n+    move |x| p.set(x) //~ NOTE used within this closure\n }\n \n fn send<T: Send>(_: T) {}\n+//~^ NOTE required by a bound\n+//~| NOTE required by a bound\n+//~| NOTE required by this bound\n+//~| NOTE required by this bound\n \n fn main() {\n     send(before());\n     //~^ ERROR `Rc<Cell<i32>>` cannot be sent between threads safely\n+    //~| NOTE `Rc<Cell<i32>>` cannot be sent between threads safely\n+    //~| NOTE required by a bound\n \n     send(after());\n     //~^ ERROR `Rc<Cell<i32>>` cannot be sent between threads safely\n+    //~| NOTE `Rc<Cell<i32>>` cannot be sent between threads safely\n+    //~| NOTE required by a bound\n }\n \n // Deferred path, main has to wait until typeck finishes,\n // to check if the return type of after is Send.\n fn after() -> impl Fn(i32) {\n+//~^ NOTE within this `impl Fn(i32)`\n+//~| NOTE in this expansion\n+//~| NOTE appears within the type\n     let p = Rc::new(Cell::new(0));\n-    move |x| p.set(x)\n+    move |x| p.set(x) //~ NOTE used within this closure\n }"}, {"sha": "d825843492d49c3a5436e2d520c8cea4e5c7db08", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `Rc<Cell<i32>>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak2.rs:13:10\n+  --> $DIR/auto-trait-leak2.rs:20:10\n    |\n LL | fn before() -> impl Fn(i32) {\n    |                ------------ within this `impl Fn(i32)`\n@@ -10,16 +10,24 @@ LL |     send(before());\n    |     required by a bound introduced by this call\n    |\n    = help: within `impl Fn(i32)`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n-   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:7:5: 7:22]`\n-   = note: required because it appears within the type `impl Fn(i32)`\n+note: required because it's used within this closure\n+  --> $DIR/auto-trait-leak2.rs:10:5\n+   |\n+LL |     move |x| p.set(x)\n+   |     ^^^^^^^^^^^^^^^^^\n+note: required because it appears within the type `impl Fn(i32)`\n+  --> $DIR/auto-trait-leak2.rs:5:16\n+   |\n+LL | fn before() -> impl Fn(i32) {\n+   |                ^^^^^^^^^^^^\n note: required by a bound in `send`\n-  --> $DIR/auto-trait-leak2.rs:10:12\n+  --> $DIR/auto-trait-leak2.rs:13:12\n    |\n LL | fn send<T: Send>(_: T) {}\n    |            ^^^^ required by this bound in `send`\n \n error[E0277]: `Rc<Cell<i32>>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak2.rs:16:10\n+  --> $DIR/auto-trait-leak2.rs:25:10\n    |\n LL |     send(after());\n    |     ---- ^^^^^^^ `Rc<Cell<i32>>` cannot be sent between threads safely\n@@ -30,10 +38,18 @@ LL | fn after() -> impl Fn(i32) {\n    |               ------------ within this `impl Fn(i32)`\n    |\n    = help: within `impl Fn(i32)`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n-   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:24:5: 24:22]`\n-   = note: required because it appears within the type `impl Fn(i32)`\n+note: required because it's used within this closure\n+  --> $DIR/auto-trait-leak2.rs:38:5\n+   |\n+LL |     move |x| p.set(x)\n+   |     ^^^^^^^^^^^^^^^^^\n+note: required because it appears within the type `impl Fn(i32)`\n+  --> $DIR/auto-trait-leak2.rs:33:15\n+   |\n+LL | fn after() -> impl Fn(i32) {\n+   |               ^^^^^^^^^^^^\n note: required by a bound in `send`\n-  --> $DIR/auto-trait-leak2.rs:10:12\n+  --> $DIR/auto-trait-leak2.rs:13:12\n    |\n LL | fn send<T: Send>(_: T) {}\n    |            ^^^^ required by this bound in `send`"}, {"sha": "66fe3c74e2c872fc5ee1d8d2b264a2b5ce7af199", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -7,7 +7,11 @@ LL |     catch_unwind(|| { x.set(23); });\n    = help: within `Cell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `Cell<i32>`\n    = note: required because of the requirements on the impl of `UnwindSafe` for `&Cell<i32>`\n-   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:5:18: 5:35]`\n+note: required because it's used within this closure\n+  --> $DIR/interior-mutability.rs:5:18\n+   |\n+LL |     catch_unwind(|| { x.set(23); });\n+   |                  ^^^^^^^^^^^^^^^^^\n note: required by a bound in `catch_unwind`\n   --> $SRC_DIR/std/src/panic.rs:LL:COL\n    |"}, {"sha": "727573a0be4edb753d7d8ab745c34f96e873f28d", "filename": "src/test/ui/kindck/kindck-nonsendable-1.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -7,7 +7,11 @@ LL |     bar(move|| foo(x));\n    |     `Rc<usize>` cannot be sent between threads safely\n    |\n    = help: within `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22]`, the trait `Send` is not implemented for `Rc<usize>`\n-   = note: required because it appears within the type `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22]`\n+note: required because it's used within this closure\n+  --> $DIR/kindck-nonsendable-1.rs:9:9\n+   |\n+LL |     bar(move|| foo(x));\n+   |         ^^^^^^^^^^^^^\n note: required by a bound in `bar`\n   --> $DIR/kindck-nonsendable-1.rs:5:21\n    |"}, {"sha": "e4c57c04e7269d468d1be7a12761bf8a914e2266", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -22,7 +22,16 @@ note: required because it appears within the type `Foo`\n    |\n LL |     struct Foo {\n    |            ^^^\n-   = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6]`\n+note: required because it's used within this closure\n+  --> $DIR/no-send-res-ports.rs:25:19\n+   |\n+LL |       thread::spawn(move|| {\n+   |  ___________________^\n+LL | |\n+LL | |         let y = x;\n+LL | |         println!(\"{:?}\", y);\n+LL | |     });\n+   | |_____^\n note: required by a bound in `spawn`\n   --> $SRC_DIR/std/src/thread/mod.rs:LL:COL\n    |"}, {"sha": "bebf561b120b5280405d92aa73f1474399d05ea6", "filename": "src/test/ui/not-clone-closure.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-clone-closure.stderr?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -10,7 +10,14 @@ LL |\n LL |       let hello = hello.clone();\n    |                         ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`, the trait `Clone` is not implemented for `S`\n    |\n-   = note: required because it appears within the type `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`\n+note: required because it's used within this closure\n+  --> $DIR/not-clone-closure.rs:7:17\n+   |\n+LL |       let hello = move || {\n+   |  _________________^\n+LL | |         println!(\"Hello {}\", a.0);\n+LL | |     };\n+   | |_____^\n help: consider annotating `S` with `#[derive(Clone)]`\n    |\n LL | #[derive(Clone)]"}, {"sha": "fc89b0e870e39f52389b112de573f2875c94e19c", "filename": "src/test/ui/type-alias-impl-trait/auto-trait-leakage2.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.rs?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -4,16 +4,22 @@\n mod m {\n     use std::rc::Rc;\n \n-    type Foo = impl std::fmt::Debug;\n+    type Foo = impl std::fmt::Debug; //~ NOTE appears within the type\n+    //~^ within this `Foo`\n+    //~| expansion of desugaring\n \n     pub fn foo() -> Foo {\n         Rc::new(22_u32)\n     }\n }\n \n fn is_send<T: Send>(_: T) {}\n+//~^ required by this bound\n+//~| required by a bound\n \n fn main() {\n     is_send(m::foo());\n     //~^ ERROR: `Rc<u32>` cannot be sent between threads safely [E0277]\n+    //~| NOTE cannot be sent\n+    //~| NOTE required by a bound\n }"}, {"sha": "d7247302dd1e06b206e28e9c3585685ac5a9119b", "filename": "src/test/ui/type-alias-impl-trait/auto-trait-leakage2.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1deca0425db3e74a61cb732e729c0777904e549c/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.stderr?ref=1deca0425db3e74a61cb732e729c0777904e549c", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `Rc<u32>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leakage2.rs:17:13\n+  --> $DIR/auto-trait-leakage2.rs:21:13\n    |\n LL |     type Foo = impl std::fmt::Debug;\n    |                -------------------- within this `Foo`\n@@ -10,9 +10,13 @@ LL |     is_send(m::foo());\n    |     required by a bound introduced by this call\n    |\n    = help: within `Foo`, the trait `Send` is not implemented for `Rc<u32>`\n-   = note: required because it appears within the type `Foo`\n+note: required because it appears within the type `Foo`\n+  --> $DIR/auto-trait-leakage2.rs:7:16\n+   |\n+LL |     type Foo = impl std::fmt::Debug;\n+   |                ^^^^^^^^^^^^^^^^^^^^\n note: required by a bound in `is_send`\n-  --> $DIR/auto-trait-leakage2.rs:14:15\n+  --> $DIR/auto-trait-leakage2.rs:16:15\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |               ^^^^ required by this bound in `is_send`"}]}