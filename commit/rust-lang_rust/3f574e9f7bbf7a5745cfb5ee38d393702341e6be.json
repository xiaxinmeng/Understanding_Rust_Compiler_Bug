{"sha": "3f574e9f7bbf7a5745cfb5ee38d393702341e6be", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNTc0ZTlmN2JiZjdhNTc0NWNmYjVlZTM4ZDM5MzcwMjM0MWU2YmU=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-20T13:19:07Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-10-20T13:19:07Z"}, "message": "Use `ranlib` instead of `ar x`", "tree": {"sha": "1bd495e36ea6c4df018bc9be0b0ab50c8ad95a42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bd495e36ea6c4df018bc9be0b0ab50c8ad95a42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f574e9f7bbf7a5745cfb5ee38d393702341e6be", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f574e9f7bbf7a5745cfb5ee38d393702341e6be", "html_url": "https://github.com/rust-lang/rust/commit/3f574e9f7bbf7a5745cfb5ee38d393702341e6be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f574e9f7bbf7a5745cfb5ee38d393702341e6be/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6bf9444f3ec37fb9d00e897d44d86885d848d75a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bf9444f3ec37fb9d00e897d44d86885d848d75a", "html_url": "https://github.com/rust-lang/rust/commit/6bf9444f3ec37fb9d00e897d44d86885d848d75a"}], "stats": {"total": 59, "additions": 30, "deletions": 29}, "files": [{"sha": "b7d791220c5782121ac41a7e112b66a4ff23aed3", "filename": "build.sh", "status": "modified", "additions": 4, "deletions": 21, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3f574e9f7bbf7a5745cfb5ee38d393702341e6be/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/3f574e9f7bbf7a5745cfb5ee38d393702341e6be/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=3f574e9f7bbf7a5745cfb5ee38d393702341e6be", "patch": "@@ -12,26 +12,8 @@ else\n    exit 1\n fi\n \n-extract_data() {\n-    pushd target/out/\n-    ar x $1 data.o\n-    chmod +rw data.o\n-    mv data.o $2\n-    popd\n-}\n-\n-link_and_run() {\n-    target=$1\n-    shift\n-    pushd target/out\n-    gcc $@ -o $target\n-    sh -c ./$target || true\n-    popd\n-}\n-\n build_lib() {\n     SHOULD_CODEGEN=1 $RUSTC $2 --crate-name $1 --crate-type lib\n-    extract_data lib$1.rlib $1.o\n }\n \n run_bin() {\n@@ -40,9 +22,11 @@ run_bin() {\n \n build_example_bin() {\n     $RUSTC $2 --crate-name $1 --crate-type bin\n-    extract_data $1 $1.o\n \n-    link_and_run $1 mini_core.o $1.o\n+    pushd target/out\n+    gcc libmini_core.rlib $1 -o $1_bin\n+    sh -c ./$1_bin || true\n+    popd\n }\n \n if [[ \"$1\" == \"--release\" ]]; then\n@@ -80,4 +64,3 @@ time SHOULD_CODEGEN=1 xargo build --color always\n popd\n \n cat target/out/log.txt | sort | uniq -c\n-#extract_data libcore.rlib core.o"}, {"sha": "f808ac459c03307b1703cb04dd0a05ce17361f9b", "filename": "src/lib.rs", "status": "modified", "additions": 26, "deletions": 8, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/3f574e9f7bbf7a5745cfb5ee38d393702341e6be/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f574e9f7bbf7a5745cfb5ee38d393702341e6be/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=3f574e9f7bbf7a5745cfb5ee38d393702341e6be", "patch": "@@ -298,6 +298,21 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                     );\n                     let file = File::create(&output_name).unwrap();\n                     let mut builder = ar::Builder::new(file);\n+\n+                    if should_codegen(sess) {\n+                        // Add main object file\n+                        let obj = artifact.emit().unwrap();\n+                        builder\n+                            .append(\n+                                &ar::Header::new(b\"data.o\".to_vec(), obj.len() as u64),\n+                                ::std::io::Cursor::new(obj),\n+                            )\n+                            .unwrap();\n+                    }\n+\n+                    // Non object files need to be added after object files, because ranlib will\n+                    // try to read the native architecture from the first file, even if it isn't\n+                    // an object file\n                     builder\n                         .append(\n                             &ar::Header::new(\n@@ -307,14 +322,17 @@ impl CodegenBackend for CraneliftCodegenBackend {\n                             ::std::io::Cursor::new(metadata.clone()),\n                         )\n                         .unwrap();\n-                    if should_codegen(sess) {\n-                        let obj = artifact.emit().unwrap();\n-                        builder\n-                            .append(\n-                                &ar::Header::new(b\"data.o\".to_vec(), obj.len() as u64),\n-                                ::std::io::Cursor::new(obj),\n-                            )\n-                            .unwrap();\n+\n+                    // Finalize archive\n+                    std::mem::drop(builder);\n+\n+                    // Run ranlib to be able to link the archive\n+                    let status = std::process::Command::new(\"ranlib\")\n+                        .arg(output_name)\n+                        .status()\n+                        .expect(\"Couldn't run ranlib\");\n+                    if !status.success() {\n+                        sess.fatal(&format!(\"Ranlib exited with code {:?}\", status.code()));\n                     }\n                 }\n                 _ => sess.fatal(&format!(\"Unsupported crate type: {:?}\", crate_type)),"}]}