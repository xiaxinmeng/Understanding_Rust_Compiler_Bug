{"sha": "8101592ab2cf91db6e4d30071912d75cef7c8e67", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxMDE1OTJhYjJjZjkxZGI2ZTRkMzAwNzE5MTJkNzVjZWY3YzhlNjc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-21T21:28:13Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-06-21T21:28:13Z"}, "message": "run fullmir tests against rustc; add output explaining what is being tested", "tree": {"sha": "98232501835bf96a6528f42b2a156011af4e4efa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98232501835bf96a6528f42b2a156011af4e4efa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8101592ab2cf91db6e4d30071912d75cef7c8e67", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8101592ab2cf91db6e4d30071912d75cef7c8e67", "html_url": "https://github.com/rust-lang/rust/commit/8101592ab2cf91db6e4d30071912d75cef7c8e67", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8101592ab2cf91db6e4d30071912d75cef7c8e67/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d539fafaf602c35d9dec0a7e509fed19d03f054b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d539fafaf602c35d9dec0a7e509fed19d03f054b", "html_url": "https://github.com/rust-lang/rust/commit/d539fafaf602c35d9dec0a7e509fed19d03f054b"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "fbf8dbd8c92ccfdeab7f57997cc361d756c554bc", "filename": "tests/compiletest.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/8101592ab2cf91db6e4d30071912d75cef7c8e67/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8101592ab2cf91db6e4d30071912d75cef7c8e67/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=8101592ab2cf91db6e4d30071912d75cef7c8e67", "patch": "@@ -3,7 +3,15 @@ extern crate compiletest_rs as compiletest;\n use std::path::{PathBuf, Path};\n use std::io::Write;\n \n+macro_rules! eprintln {\n+    ($($arg:tt)*) => {\n+        let stderr = std::io::stderr();\n+        writeln!(stderr.lock(), $($arg)*).unwrap();\n+    }\n+}\n+\n fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, fullmir: bool) {\n+    eprintln!(\"## Running compile-fail tests in {} against miri for target {}\", path, target);\n     let mut config = compiletest::default_config();\n     config.mode = \"compile-fail\".parse().expect(\"Invalid mode\");\n     config.rustc_path = \"target/debug/miri\".into();\n@@ -23,16 +31,18 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, fullmir: b\n     compiletest::run_tests(&config);\n }\n \n-fn run_pass() {\n+fn run_pass(path: &str) {\n+    eprintln!(\"## Running run-pass tests in {} against rustc\", path);\n     let mut config = compiletest::default_config();\n     config.mode = \"run-pass\".parse().expect(\"Invalid mode\");\n-    config.src_base = PathBuf::from(\"tests/run-pass\".to_string());\n+    config.src_base = PathBuf::from(path);\n     config.target_rustcflags = Some(\"-Dwarnings\".to_string());\n     config.host_rustcflags = Some(\"-Dwarnings\".to_string());\n     compiletest::run_tests(&config);\n }\n \n fn miri_pass(path: &str, target: &str, host: &str, fullmir: bool) {\n+    eprintln!(\"## Running run-pass tests in {} against miri for target {}\", path, target);\n     let mut config = compiletest::default_config();\n     config.mode = \"mir-opt\".parse().expect(\"Invalid mode\");\n     config.src_base = PathBuf::from(path);\n@@ -65,13 +75,10 @@ fn is_target_dir<P: Into<PathBuf>>(path: P) -> bool {\n \n fn for_all_targets<F: FnMut(String)>(sysroot: &Path, mut f: F) {\n     let target_dir = sysroot.join(\"lib\").join(\"rustlib\");\n-    println!(\"target dir: {}\", target_dir.to_str().unwrap());\n     for entry in std::fs::read_dir(target_dir).expect(\"invalid sysroot\") {\n         let entry = entry.unwrap();\n         if !is_target_dir(entry.path()) { continue; }\n         let target = entry.file_name().into_string().unwrap();\n-        let stderr = std::io::stderr();\n-        writeln!(stderr.lock(), \"running tests for target {}\", target).unwrap();\n         f(target);\n     }\n }\n@@ -209,7 +216,8 @@ fn compile_test() {\n \n         panic!(\"ran miri on rustc test suite. Test failing for convenience\");\n     } else {\n-        run_pass();\n+        run_pass(\"tests/run-pass\");\n+        run_pass(\"tests/run-pass-fullmir\");\n         for_all_targets(sysroot, |target| {\n             miri_pass(\"tests/run-pass\", &target, host, false);\n             compile_fail(sysroot, \"tests/compile-fail\", &target, host, false);"}]}