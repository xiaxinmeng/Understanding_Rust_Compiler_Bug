{"sha": "88267c86c0c49de395973574d2516ab904091cfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MjY3Yzg2YzBjNDlkZTM5NTk3MzU3NGQyNTE2YWI5MDQwOTFjZmI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-06T11:52:32Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-02-06T13:03:45Z"}, "message": "cleanup imports", "tree": {"sha": "3c137f0c6a34c0ae787c7d8d59ccf2398fab1bfa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c137f0c6a34c0ae787c7d8d59ccf2398fab1bfa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88267c86c0c49de395973574d2516ab904091cfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88267c86c0c49de395973574d2516ab904091cfb", "html_url": "https://github.com/rust-lang/rust/commit/88267c86c0c49de395973574d2516ab904091cfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88267c86c0c49de395973574d2516ab904091cfb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "939f05f3e33e9f00d5205d60af3a862ae4d58bd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/939f05f3e33e9f00d5205d60af3a862ae4d58bd6", "html_url": "https://github.com/rust-lang/rust/commit/939f05f3e33e9f00d5205d60af3a862ae4d58bd6"}], "stats": {"total": 203, "additions": 103, "deletions": 100}, "files": [{"sha": "f26047570f380b2dd9a9de9b0248a0036eb1465c", "filename": "crates/ra_ide/src/assists.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fassists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fassists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fassists.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -1,13 +1,13 @@\n //! FIXME: write short doc here\n \n+use either::Either;\n+use ra_assists::{AssistAction, AssistLabel};\n use ra_db::{FilePosition, FileRange};\n+use ra_ide_db::RootDatabase;\n+\n+use crate::{imports_locator::ImportsLocatorIde, FileId, SourceChange, SourceFileEdit};\n \n-use crate::{\n-    db::RootDatabase, imports_locator::ImportsLocatorIde, FileId, SourceChange, SourceFileEdit,\n-};\n-use either::Either;\n pub use ra_assists::AssistId;\n-use ra_assists::{AssistAction, AssistLabel};\n \n #[derive(Debug)]\n pub struct Assist {"}, {"sha": "f984f40ad70f26fd1eedb5c8ffa1646976fb34cc", "filename": "crates/ra_ide/src/call_hierarchy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_hierarchy.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -3,14 +3,14 @@\n use indexmap::IndexMap;\n \n use hir::db::AstDatabase;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     ast::{self, DocCommentsOwner},\n     match_ast, AstNode, TextRange,\n };\n \n use crate::{\n     call_info::FnCallNode,\n-    db::RootDatabase,\n     display::{ShortLabel, ToNav},\n     expand::descend_into_macros,\n     goto_definition, references, FilePosition, NavigationTarget, RangeInfo,"}, {"sha": "f2b29306e63eaae366c4107c25b27c17692572ee", "filename": "crates/ra_ide/src/call_info.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_info.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -1,15 +1,13 @@\n //! FIXME: write short doc here\n use hir::db::AstDatabase;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     ast::{self, ArgListOwner},\n     match_ast, AstNode, SyntaxNode,\n };\n-\n use test_utils::tested_by;\n \n-use crate::{\n-    db::RootDatabase, expand::descend_into_macros, CallInfo, FilePosition, FunctionSignature,\n-};\n+use crate::{expand::descend_into_macros, CallInfo, FilePosition, FunctionSignature};\n \n /// Computes parameter information for the given call expression.\n pub(crate) fn call_info(db: &RootDatabase, position: FilePosition) -> Option<CallInfo> {"}, {"sha": "fedc02e14b37cb6c3c791a8ffe3f403f06f6544b", "filename": "crates/ra_ide/src/completion.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -17,6 +17,7 @@ mod complete_postfix;\n mod complete_macro_in_item_position;\n \n use ra_db::SourceDatabase;\n+use ra_ide_db::RootDatabase;\n \n #[cfg(test)]\n use crate::completion::completion_item::do_completion;\n@@ -25,7 +26,7 @@ use crate::{\n         completion_context::CompletionContext,\n         completion_item::{CompletionKind, Completions},\n     },\n-    db, FilePosition,\n+    FilePosition,\n };\n \n pub use crate::completion::completion_item::{\n@@ -54,7 +55,7 @@ pub use crate::completion::completion_item::{\n /// `foo` *should* be present among the completion variants. Filtering by\n /// identifier prefix/fuzzy match should be done higher in the stack, together\n /// with ordering of completions (currently this is done by the client).\n-pub(crate) fn completions(db: &db::RootDatabase, position: FilePosition) -> Option<Completions> {\n+pub(crate) fn completions(db: &RootDatabase, position: FilePosition) -> Option<Completions> {\n     let original_parse = db.parse(position.file_id);\n     let ctx = CompletionContext::new(db, &original_parse, position)?;\n "}, {"sha": "5a0407fd7b46f1906ba665356c006ee47a3abd33", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -1,5 +1,6 @@\n //! FIXME: write short doc here\n \n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::{find_covering_element, find_node_at_offset},\n     ast, AstNode, Parse, SourceFile,\n@@ -8,13 +9,13 @@ use ra_syntax::{\n };\n use ra_text_edit::AtomTextEdit;\n \n-use crate::{db, FilePosition};\n+use crate::FilePosition;\n \n /// `CompletionContext` is created early during completion to figure out, where\n /// exactly is the cursor, syntax-wise.\n #[derive(Debug)]\n pub(crate) struct CompletionContext<'a> {\n-    pub(super) db: &'a db::RootDatabase,\n+    pub(super) db: &'a RootDatabase,\n     pub(super) analyzer: hir::SourceAnalyzer,\n     pub(super) offset: TextUnit,\n     pub(super) token: SyntaxToken,\n@@ -48,7 +49,7 @@ pub(crate) struct CompletionContext<'a> {\n \n impl<'a> CompletionContext<'a> {\n     pub(super) fn new(\n-        db: &'a db::RootDatabase,\n+        db: &'a RootDatabase,\n         original_parse: &'a Parse<ast::SourceFile>,\n         position: FilePosition,\n     ) -> Option<CompletionContext<'a>> {"}, {"sha": "2849cdb029072a2a44be14c424f5c80e940da82e", "filename": "crates/ra_ide/src/db.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/939f05f3e33e9f00d5205d60af3a862ae4d58bd6/crates%2Fra_ide%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdb.rs?ref=939f05f3e33e9f00d5205d60af3a862ae4d58bd6", "patch": "@@ -1 +0,0 @@\n-pub(crate) use crate::ide_db::*;"}, {"sha": "22bd497231afd258415726d32ea7f143a2bf6f43", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -5,6 +5,7 @@ use std::cell::RefCell;\n use hir::diagnostics::{AstDiagnostic, Diagnostic as _, DiagnosticSink};\n use itertools::Itertools;\n use ra_db::{RelativePath, SourceDatabase, SourceDatabaseExt};\n+use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n     algo,\n@@ -13,7 +14,7 @@ use ra_syntax::{\n };\n use ra_text_edit::{TextEdit, TextEditBuilder};\n \n-use crate::{db::RootDatabase, Diagnostic, FileId, FileSystemEdit, SourceChange, SourceFileEdit};\n+use crate::{Diagnostic, FileId, FileSystemEdit, SourceChange, SourceFileEdit};\n \n #[derive(Debug, Copy, Clone)]\n pub enum Severity {"}, {"sha": "c23e08e9a31cf32dab16cd7a317c7b5f667e2cbb", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 6, "deletions": 11, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -4,13 +4,11 @@ use std::fmt::{self, Display};\n \n use hir::{Docs, Documentation, HasSource, HirDisplay};\n use join_to_string::join;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::ast::{self, AstNode, NameOwner, VisibilityOwner};\n use std::convert::From;\n \n-use crate::{\n-    db,\n-    display::{generic_parameters, where_predicates},\n-};\n+use crate::display::{generic_parameters, where_predicates};\n \n #[derive(Debug)]\n pub enum CallableKind {\n@@ -48,13 +46,13 @@ impl FunctionSignature {\n         self\n     }\n \n-    pub(crate) fn from_hir(db: &db::RootDatabase, function: hir::Function) -> Self {\n+    pub(crate) fn from_hir(db: &RootDatabase, function: hir::Function) -> Self {\n         let doc = function.docs(db);\n         let ast_node = function.source(db).value;\n         FunctionSignature::from(&ast_node).with_doc_opt(doc)\n     }\n \n-    pub(crate) fn from_struct(db: &db::RootDatabase, st: hir::Struct) -> Option<Self> {\n+    pub(crate) fn from_struct(db: &RootDatabase, st: hir::Struct) -> Option<Self> {\n         let node: ast::StructDef = st.source(db).value;\n         match node.kind() {\n             ast::StructKind::Record(_) => return None,\n@@ -86,10 +84,7 @@ impl FunctionSignature {\n         )\n     }\n \n-    pub(crate) fn from_enum_variant(\n-        db: &db::RootDatabase,\n-        variant: hir::EnumVariant,\n-    ) -> Option<Self> {\n+    pub(crate) fn from_enum_variant(db: &RootDatabase, variant: hir::EnumVariant) -> Option<Self> {\n         let node: ast::EnumVariant = variant.source(db).value;\n         match node.kind() {\n             ast::StructKind::Record(_) | ast::StructKind::Unit => return None,\n@@ -126,7 +121,7 @@ impl FunctionSignature {\n         )\n     }\n \n-    pub(crate) fn from_macro(db: &db::RootDatabase, macro_def: hir::MacroDef) -> Option<Self> {\n+    pub(crate) fn from_macro(db: &RootDatabase, macro_def: hir::MacroDef) -> Option<Self> {\n         let node: ast::MacroCall = macro_def.source(db).value;\n \n         let params = vec![];"}, {"sha": "906aab1eba92b0f9d07eb4c4605d3c61617a1755", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -3,14 +3,15 @@\n use either::Either;\n use hir::{AssocItem, FieldSource, HasSource, InFile, ModuleSource};\n use ra_db::{FileId, SourceDatabase};\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     ast::{self, DocCommentsOwner, NameOwner},\n     match_ast, AstNode, SmolStr,\n     SyntaxKind::{self, BIND_PAT, TYPE_PARAM},\n     TextRange,\n };\n \n-use crate::{db::RootDatabase, expand::original_range, FileSymbol};\n+use crate::{expand::original_range, FileSymbol};\n \n use super::short_label::ShortLabel;\n "}, {"sha": "9f3aaa3a3fcca75effa1056c944f10612a72b292", "filename": "crates/ra_ide/src/expand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fexpand.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -3,9 +3,10 @@ use std::iter::successors;\n \n use hir::{InFile, Origin};\n use ra_db::FileId;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{ast, AstNode, SyntaxNode, SyntaxToken, TextRange};\n \n-use crate::{db::RootDatabase, FileRange};\n+use crate::FileRange;\n \n pub(crate) fn original_range(db: &RootDatabase, node: InFile<&SyntaxNode>) -> FileRange {\n     if let Some((range, Origin::Call)) = original_range_and_origin(db, node) {"}, {"sha": "af2783befb3d1e3f123fdcfa2b838f2248d8d283", "filename": "crates/ra_ide/src/expand_macro.rs", "status": "modified", "additions": 13, "deletions": 12, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fexpand_macro.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -1,14 +1,15 @@\n //! This modules implements \"expand macro\" functionality in the IDE\n \n-use crate::{db::RootDatabase, FilePosition};\n use hir::db::AstDatabase;\n use ra_db::SourceDatabase;\n-use rustc_hash::FxHashMap;\n-\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::{find_node_at_offset, replace_descendants},\n     ast, AstNode, NodeOrToken, SyntaxElement, SyntaxKind, SyntaxNode, WalkEvent, T,\n };\n+use rustc_hash::FxHashMap;\n+\n+use crate::FilePosition;\n \n pub struct ExpandedMacro {\n     pub name: String,\n@@ -185,15 +186,15 @@ fn some_thing() -> u32 {\n         //- /lib.rs\n         macro_rules! match_ast {\n             (match $node:ident { $($tt:tt)* }) => { match_ast!(match ($node) { $($tt)* }) };\n-        \n+\n             (match ($node:expr) {\n                 $( ast::$ast:ident($it:ident) => $res:block, )*\n                 _ => $catch_all:expr $(,)?\n             }) => {{\n                 $( if let Some($it) = ast::$ast::cast($node.clone()) $res else )*\n                 { $catch_all }\n             }};\n-        }        \n+        }\n \n         fn main() {\n             mat<|>ch_ast! {\n@@ -227,11 +228,11 @@ fn some_thing() -> u32 {\n             r#\"\n         //- /lib.rs\n         macro_rules! match_ast {\n-            (match $node:ident { $($tt:tt)* }) => { match_ast!(match ($node) { $($tt)* }) };        \n+            (match $node:ident { $($tt:tt)* }) => { match_ast!(match ($node) { $($tt)* }) };\n             (match ($node:expr) {}) => {{}};\n-        }        \n+        }\n \n-        fn main() {        \n+        fn main() {\n             let p = f(|it| {\n                 let res = mat<|>ch_ast! { match c {}};\n                 Some(res)\n@@ -254,9 +255,9 @@ fn some_thing() -> u32 {\n         }\n         macro_rules! foo {\n             () => {bar!()};\n-        }        \n+        }\n \n-        fn main() {        \n+        fn main() {\n             let res = fo<|>o!();\n         }\n         \"#,\n@@ -277,9 +278,9 @@ fn some_thing() -> u32 {\n         }\n         macro_rules! foo {\n             () => {$crate::bar!()};\n-        }        \n+        }\n \n-        fn main() {        \n+        fn main() {\n             let res = fo<|>o!();\n         }\n         \"#,"}, {"sha": "726963a33e33fc2f7505f6f301624a64054d6c07", "filename": "crates/ra_ide/src/extend_selection.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -1,6 +1,10 @@\n //! FIXME: write short doc here\n \n+use std::iter::successors;\n+\n+use hir::db::AstDatabase;\n use ra_db::SourceDatabase;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::find_covering_element,\n     ast::{self, AstNode, AstToken},\n@@ -9,9 +13,7 @@ use ra_syntax::{\n     SyntaxNode, SyntaxToken, TextRange, TextUnit, TokenAtOffset, T,\n };\n \n-use crate::{db::RootDatabase, expand::descend_into_macros, FileId, FileRange};\n-use hir::db::AstDatabase;\n-use std::iter::successors;\n+use crate::{expand::descend_into_macros, FileId, FileRange};\n \n pub(crate) fn extend_selection(db: &RootDatabase, frange: FileRange) -> TextRange {\n     let src = db.parse(frange.file_id).tree();\n@@ -512,8 +514,8 @@ fn bar(){}\n     fn test_extend_trait_bounds_list_in_where_clause() {\n         do_check(\n             r#\"\n-fn foo<R>() \n-    where \n+fn foo<R>()\n+    where\n         R: req::Request + 'static,\n         R::Params: DeserializeOwned<|> + panic::UnwindSafe + 'static,\n         R::Result: Serialize + 'static,"}, {"sha": "e9329a72c90f0af15c73bdb5dbde76554466423a", "filename": "crates/ra_ide/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_definition.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -1,6 +1,7 @@\n //! FIXME: write short doc here\n \n use hir::{db::AstDatabase, InFile, SourceBinder};\n+use ra_ide_db::{symbol_index, RootDatabase};\n use ra_syntax::{\n     ast::{self, DocCommentsOwner},\n     match_ast, AstNode,\n@@ -9,10 +10,8 @@ use ra_syntax::{\n };\n \n use crate::{\n-    db::RootDatabase,\n     display::{ShortLabel, ToNav},\n     expand::descend_into_macros,\n-    ide_db::symbol_index,\n     references::{classify_name_ref, NameKind::*},\n     FilePosition, NavigationTarget, RangeInfo,\n };"}, {"sha": "11ad6d137213767afdc76d7dcf493bcbd6c96632", "filename": "crates/ra_ide/src/goto_type_definition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fgoto_type_definition.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -1,11 +1,11 @@\n //! FIXME: write short doc here\n \n use hir::db::AstDatabase;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset};\n \n use crate::{\n-    db::RootDatabase, display::ToNav, expand::descend_into_macros, FilePosition, NavigationTarget,\n-    RangeInfo,\n+    display::ToNav, expand::descend_into_macros, FilePosition, NavigationTarget, RangeInfo,\n };\n \n pub(crate) fn goto_type_definition("}, {"sha": "315b8819048146fcf2a3ca4b49f7ed149c58a028", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -2,6 +2,7 @@\n \n use hir::{db::AstDatabase, Adt, HasSource, HirDisplay, SourceBinder};\n use ra_db::SourceDatabase;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::find_covering_element,\n     ast::{self, DocCommentsOwner},\n@@ -11,7 +12,6 @@ use ra_syntax::{\n };\n \n use crate::{\n-    db::RootDatabase,\n     display::{macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel},\n     expand::descend_into_macros,\n     references::{classify_name, classify_name_ref, NameKind, NameKind::*},"}, {"sha": "64a2dadc85eb603757a1cf4fe65efd1d598ccd88", "filename": "crates/ra_ide/src/impls.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fimpls.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -2,9 +2,10 @@\n \n use hir::{Crate, ImplBlock, SourceBinder};\n use ra_db::SourceDatabase;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{algo::find_node_at_offset, ast, AstNode};\n \n-use crate::{db::RootDatabase, display::ToNav, FilePosition, NavigationTarget, RangeInfo};\n+use crate::{display::ToNav, FilePosition, NavigationTarget, RangeInfo};\n \n pub(crate) fn goto_implementation(\n     db: &RootDatabase,"}, {"sha": "cfd58aafeb521af50517ee70a616a1f57435a6f0", "filename": "crates/ra_ide/src/imports_locator.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fimports_locator.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -1,17 +1,20 @@\n //! This module contains an import search funcionality that is provided to the ra_assists module.\n //! Later, this should be moved away to a separate crate that is accessible from the ra_assists module.\n \n-use crate::{\n-    db::RootDatabase,\n-    ide_db::symbol_index::{self, FileSymbol},\n-    references::{classify_name, NameDefinition, NameKind},\n-    Query,\n-};\n use hir::{db::HirDatabase, ModuleDef, SourceBinder};\n use ra_assists::ImportsLocator;\n+use ra_ide_db::{\n+    symbol_index::{self, FileSymbol},\n+    RootDatabase,\n+};\n use ra_prof::profile;\n use ra_syntax::{ast, AstNode, SyntaxKind::NAME};\n \n+use crate::{\n+    references::{classify_name, NameDefinition, NameKind},\n+    Query,\n+};\n+\n pub(crate) struct ImportsLocatorIde<'a> {\n     source_binder: SourceBinder<'a, RootDatabase>,\n }"}, {"sha": "6b0d3d996fac2c5e49f7ec977d3b20b749f00f8b", "filename": "crates/ra_ide/src/inlay_hints.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Finlay_hints.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -2,13 +2,14 @@\n \n use hir::{HirDisplay, SourceAnalyzer, SourceBinder};\n use once_cell::unsync::Lazy;\n+use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, ArgListOwner, AstNode, TypeAscriptionOwner},\n     match_ast, SmolStr, SourceFile, SyntaxKind, SyntaxNode, TextRange,\n };\n \n-use crate::{db::RootDatabase, FileId, FunctionSignature};\n+use crate::{FileId, FunctionSignature};\n \n #[derive(Debug, PartialEq, Eq)]\n pub enum InlayKind {"}, {"sha": "013b960c18fea0bd3623076b92460e9014ffcb8a", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -10,11 +10,6 @@\n // For proving that RootDatabase is RefUnwindSafe.\n #![recursion_limit = \"128\"]\n \n-mod ide_db {\n-    pub use ra_ide_db::*;\n-}\n-\n-mod db;\n pub mod mock_analysis;\n mod source_change;\n \n@@ -56,13 +51,13 @@ use ra_db::{\n     salsa::{self, ParallelDatabase},\n     CheckCanceled, Env, FileLoader, SourceDatabase,\n };\n+use ra_ide_db::{\n+    symbol_index::{self, FileSymbol},\n+    LineIndexDatabase,\n+};\n use ra_syntax::{SourceFile, TextRange, TextUnit};\n \n-use crate::{\n-    db::LineIndexDatabase,\n-    display::ToNav,\n-    ide_db::symbol_index::{self, FileSymbol},\n-};\n+use crate::display::ToNav;\n \n pub use crate::{\n     assists::{Assist, AssistId},\n@@ -73,13 +68,6 @@ pub use crate::{\n     expand_macro::ExpandedMacro,\n     folding_ranges::{Fold, FoldKind},\n     hover::HoverResult,\n-    ide_db::{\n-        change::{AnalysisChange, LibraryData},\n-        feature_flags::FeatureFlags,\n-        line_index::{LineCol, LineIndex},\n-        line_index_utils::translate_offset_with_edit,\n-        symbol_index::Query,\n-    },\n     inlay_hints::{InlayHint, InlayKind},\n     references::{\n         Declaration, Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult, SearchScope,\n@@ -93,6 +81,14 @@ pub use hir::Documentation;\n pub use ra_db::{\n     Canceled, CrateGraph, CrateId, Edition, FileId, FilePosition, FileRange, SourceRootId,\n };\n+pub use ra_ide_db::{\n+    change::{AnalysisChange, LibraryData},\n+    feature_flags::FeatureFlags,\n+    line_index::{LineCol, LineIndex},\n+    line_index_utils::translate_offset_with_edit,\n+    symbol_index::Query,\n+    RootDatabase,\n+};\n \n pub type Cancelable<T> = Result<T, Canceled>;\n \n@@ -128,7 +124,7 @@ pub struct CallInfo {\n /// `AnalysisHost` stores the current state of the world.\n #[derive(Debug)]\n pub struct AnalysisHost {\n-    db: db::RootDatabase,\n+    db: RootDatabase,\n }\n \n impl Default for AnalysisHost {\n@@ -139,7 +135,7 @@ impl Default for AnalysisHost {\n \n impl AnalysisHost {\n     pub fn new(lru_capcity: Option<usize>, feature_flags: FeatureFlags) -> AnalysisHost {\n-        AnalysisHost { db: db::RootDatabase::new(lru_capcity, feature_flags) }\n+        AnalysisHost { db: RootDatabase::new(lru_capcity, feature_flags) }\n     }\n     /// Returns a snapshot of the current state, which you can query for\n     /// semantic information.\n@@ -189,7 +185,7 @@ impl AnalysisHost {\n /// `Analysis` are canceled (most method return `Err(Canceled)`).\n #[derive(Debug)]\n pub struct Analysis {\n-    db: salsa::Snapshot<db::RootDatabase>,\n+    db: salsa::Snapshot<RootDatabase>,\n }\n \n // As a general design guideline, `Analysis` API are intended to be independent\n@@ -470,7 +466,7 @@ impl Analysis {\n     }\n \n     /// Performs an operation on that may be Canceled.\n-    fn with_db<F: FnOnce(&db::RootDatabase) -> T + std::panic::UnwindSafe, T>(\n+    fn with_db<F: FnOnce(&RootDatabase) -> T + std::panic::UnwindSafe, T>(\n         &self,\n         f: F,\n     ) -> Cancelable<T> {"}, {"sha": "e0332da88f0718ce87d18731bbc7f78f13db2697", "filename": "crates/ra_ide/src/parent_module.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fparent_module.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -1,12 +1,13 @@\n //! FIXME: write short doc here\n \n use ra_db::{CrateId, FileId, FilePosition, SourceDatabase};\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::find_node_at_offset,\n     ast::{self, AstNode},\n };\n \n-use crate::{db::RootDatabase, NavigationTarget};\n+use crate::NavigationTarget;\n \n /// This returns `Vec` because a module may be included from several places. We\n /// don't handle this case yet though, so the Vec has length at most one."}, {"sha": "b47f8bcd9e42eb24d69941702682accadacd68bb", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -17,16 +17,15 @@ mod search_scope;\n use hir::{InFile, SourceBinder};\n use once_cell::unsync::Lazy;\n use ra_db::{SourceDatabase, SourceDatabaseExt};\n+use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n     algo::find_node_at_offset,\n     ast::{self, NameOwner},\n     match_ast, AstNode, SourceFile, SyntaxKind, SyntaxNode, TextRange, TextUnit, TokenAtOffset,\n };\n \n-use crate::{\n-    db::RootDatabase, display::ToNav, FilePosition, FileRange, NavigationTarget, RangeInfo,\n-};\n+use crate::{display::ToNav, FilePosition, FileRange, NavigationTarget, RangeInfo};\n \n pub(crate) use self::{\n     classify::{classify_name, classify_name_ref},"}, {"sha": "758ea4e8b789bb6d6208de8e55163fa30918583f", "filename": "crates/ra_ide/src/references/classify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fclassify.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -9,7 +9,7 @@ use super::{\n     name_definition::{from_assoc_item, from_module_def, from_struct_field},\n     NameDefinition, NameKind,\n };\n-use crate::db::RootDatabase;\n+use ra_ide_db::RootDatabase;\n \n pub(crate) fn classify_name(\n     sb: &mut SourceBinder<RootDatabase>,"}, {"sha": "71565e6d395d8031a1ca60ea9e6c855886eff28d", "filename": "crates/ra_ide/src/references/name_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Freferences%2Fname_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Freferences%2Fname_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fname_definition.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -9,7 +9,7 @@ use hir::{\n };\n use ra_syntax::{ast, ast::VisibilityOwner};\n \n-use crate::db::RootDatabase;\n+use ra_ide_db::RootDatabase;\n \n #[derive(Debug, PartialEq, Eq)]\n pub enum NameKind {"}, {"sha": "08e77c01fbd0ef1f24bc0c2ff3023d5440ed909c", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -2,14 +2,14 @@\n \n use hir::ModuleSource;\n use ra_db::{RelativePath, RelativePathBuf, SourceDatabase, SourceDatabaseExt};\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::find_node_at_offset, ast, lex_single_valid_syntax_kind, AstNode, SyntaxKind, SyntaxNode,\n };\n use ra_text_edit::TextEdit;\n \n use crate::{\n-    db::RootDatabase, FileId, FilePosition, FileSystemEdit, RangeInfo, SourceChange,\n-    SourceFileEdit, TextRange,\n+    FileId, FilePosition, FileSystemEdit, RangeInfo, SourceChange, SourceFileEdit, TextRange,\n };\n \n use super::find_all_refs;"}, {"sha": "97c65c2cd49217aefb81be9807318939ec051df4", "filename": "crates/ra_ide/src/references/search_scope.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Fsearch_scope.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -10,7 +10,7 @@ use ra_prof::profile;\n use ra_syntax::{AstNode, TextRange};\n use rustc_hash::FxHashMap;\n \n-use crate::db::RootDatabase;\n+use ra_ide_db::RootDatabase;\n \n use super::{NameDefinition, NameKind};\n "}, {"sha": "b6b0c70f9dbf4dc184f6429e1cfcc9d427015543", "filename": "crates/ra_ide/src/runnables.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Frunnables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Frunnables.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -3,12 +3,13 @@\n use hir::InFile;\n use itertools::Itertools;\n use ra_db::SourceDatabase;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     ast::{self, AstNode, AttrsOwner, ModuleItemOwner, NameOwner},\n     match_ast, SyntaxNode, TextRange,\n };\n \n-use crate::{db::RootDatabase, FileId};\n+use crate::FileId;\n \n #[derive(Debug)]\n pub struct Runnable {"}, {"sha": "30eb5c995e6376dd4878403518e052c29656b854", "filename": "crates/ra_ide/src/status.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fstatus.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fstatus.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fstatus.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -10,14 +10,14 @@ use ra_db::{\n     },\n     FileTextQuery, SourceRootId,\n };\n+use ra_ide_db::{\n+    symbol_index::{LibrarySymbolsQuery, SymbolIndex},\n+    RootDatabase,\n+};\n use ra_prof::{memory_usage, Bytes};\n use ra_syntax::{ast, Parse, SyntaxNode};\n \n-use crate::{\n-    db::RootDatabase,\n-    ide_db::symbol_index::{LibrarySymbolsQuery, SymbolIndex},\n-    FileId,\n-};\n+use crate::FileId;\n \n fn syntax_tree_stats(db: &RootDatabase) -> SyntaxTreeStats {\n     db.query(ra_db::ParseQuery).entries::<SyntaxTreeStats>()"}, {"sha": "c5d249fe8e3211b198690ff5e4abf0d5389bc1b2", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -4,14 +4,14 @@ use rustc_hash::FxHashMap;\n \n use hir::{HirFileId, InFile, Name, SourceAnalyzer, SourceBinder};\n use ra_db::SourceDatabase;\n+use ra_ide_db::RootDatabase;\n use ra_prof::profile;\n use ra_syntax::{\n     ast, AstNode, Direction, SyntaxElement, SyntaxKind, SyntaxKind::*, SyntaxToken, TextRange,\n     WalkEvent, T,\n };\n \n use crate::{\n-    db::RootDatabase,\n     expand::descend_into_macros_with_analyzer,\n     references::{\n         classify_name, classify_name_ref,"}, {"sha": "55966daf3bdc0387771d8aebee75f9592a8748ed", "filename": "crates/ra_ide/src/syntax_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_tree.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n-use crate::db::RootDatabase;\n use ra_db::SourceDatabase;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo, AstNode, NodeOrToken, SourceFile,\n     SyntaxKind::{RAW_STRING, STRING},"}, {"sha": "e5d1779fdc140742207bf3af7b4cf51696516b44", "filename": "crates/ra_ide/src/typing.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -15,6 +15,7 @@\n \n use ra_db::{FilePosition, SourceDatabase};\n use ra_fmt::leading_indent;\n+use ra_ide_db::RootDatabase;\n use ra_syntax::{\n     algo::find_node_at_offset,\n     ast::{self, AstToken},\n@@ -24,7 +25,7 @@ use ra_syntax::{\n };\n use ra_text_edit::TextEdit;\n \n-use crate::{db::RootDatabase, source_change::SingleFileChange, SourceChange, SourceFileEdit};\n+use crate::{source_change::SingleFileChange, SourceChange, SourceFileEdit};\n \n pub(crate) fn on_enter(db: &RootDatabase, position: FilePosition) -> Option<SourceChange> {\n     let parse = db.parse(position.file_id);"}, {"sha": "436b4497f668ce5561fcb462b6eeb83dda1229da", "filename": "crates/ra_ide_db/src/symbol_index.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88267c86c0c49de395973574d2516ab904091cfb/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fsymbol_index.rs?ref=88267c86c0c49de395973574d2516ab904091cfb", "patch": "@@ -370,7 +370,8 @@ fn to_file_symbol(node: &SyntaxNode, file_id: FileId) -> Option<FileSymbol> {\n     })\n }\n \n-#[cfg(test)]\n+// TODO: fix this\n+#[cfg(never)]\n mod tests {\n     use crate::{display::NavigationTarget, mock_analysis::single_file, Query};\n     use ra_syntax::{"}]}