{"sha": "47cba3a107cb996a17651977d5d60a11fa2b1e24", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3Y2JhM2ExMDdjYjk5NmExNzY1MTk3N2Q1ZDYwYTExZmEyYjFlMjQ=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-05-29T20:10:41Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-05-29T20:11:55Z"}, "message": "tutorial: Consistent metavariable for types.  Closes #2461.", "tree": {"sha": "305b4438d95c4773b0a0537cd063095c3b8ace25", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/305b4438d95c4773b0a0537cd063095c3b8ace25"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47cba3a107cb996a17651977d5d60a11fa2b1e24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47cba3a107cb996a17651977d5d60a11fa2b1e24", "html_url": "https://github.com/rust-lang/rust/commit/47cba3a107cb996a17651977d5d60a11fa2b1e24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47cba3a107cb996a17651977d5d60a11fa2b1e24/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3891b5a5690b8149c60916bd92cf052d3207cdaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/3891b5a5690b8149c60916bd92cf052d3207cdaa", "html_url": "https://github.com/rust-lang/rust/commit/3891b5a5690b8149c60916bd92cf052d3207cdaa"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "cc87376d25b6efa0fdbacc461ff0f14ae743d3d4", "filename": "doc/tutorial.md", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/47cba3a107cb996a17651977d5d60a11fa2b1e24/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/47cba3a107cb996a17651977d5d60a11fa2b1e24/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=47cba3a107cb996a17651977d5d60a11fa2b1e24", "patch": "@@ -1014,11 +1014,11 @@ let my_shape = circle({x: 0.0, y: 0.0}, 10.0);\n \n ## Records\n \n-Rust record types are written `{field1: TYPE, field2: TYPE [, ...]}`,\n-and record literals are written in the same way, but with expressions\n-instead of types. They are quite similar to C structs, and even laid\n-out the same way in memory (so you can read from a Rust struct in C,\n-and vice-versa).\n+Rust record types are written `{field1: T1, field2: T2 [, ...]}`,\n+where `T1`, `T2`, ... denote types.  Record literals are written in\n+the same way, but with expressions instead of types. They are quite\n+similar to C structs, and even laid out the same way in memory (so you\n+can read from a Rust struct in C, and vice-versa).\n \n The dot operator is used to access record fields (`mypoint.x`).\n \n@@ -1220,10 +1220,10 @@ records with mutable fields, it can be useful to have a single copy on\n the heap, and refer to that through a pointer.\n \n Rust supports several types of pointers. The simplest is the unsafe\n-pointer, written `*TYPE`, which is a completely unchecked pointer\n-type only used in unsafe code (and thus, in typical Rust code, very\n-rarely). The safe pointer types are `@TYPE` for shared,\n-reference-counted boxes, and `~TYPE`, for uniquely-owned pointers.\n+pointer, written `*T`, which is a completely unchecked pointer type\n+only used in unsafe code (and thus, in typical Rust code, very\n+rarely). The safe pointer types are `@T` for shared, reference-counted\n+boxes, and `~T`, for uniquely-owned pointers.\n \n All pointer types can be dereferenced with the `*` unary operator.\n \n@@ -1272,9 +1272,9 @@ become the sole owner of the box.\n \n ### Mutability\n \n-All pointer types have a mutable variant, written `@mut TYPE` or\n-`~mut TYPE`. Given such a pointer, you can write to its contents\n-by combining the dereference operator with a mutating action.\n+All pointer types have a mutable variant, written `@mut T` or `~mut\n+T`. Given such a pointer, you can write to its contents by combining\n+the dereference operator with a mutating action.\n \n ~~~~\n fn increase_contents(pt: @mut int) {\n@@ -1285,8 +1285,8 @@ fn increase_contents(pt: @mut int) {\n ## Vectors\n \n Rust vectors are always heap-allocated and unique. A value of type\n-`[TYPE]` is represented by a pointer to a section of heap memory\n-containing any number of `TYPE` values.\n+`[T]` is represented by a pointer to a section of heap memory\n+containing any number of values of type `T`.\n \n NOTE: This uniqueness is turning out to be quite awkward in practice,\n and might change in the future.\n@@ -1300,9 +1300,9 @@ if myvec[1] { io::println(\"boom\"); }\n ~~~~\n \n By default, vectors are immutable\u2014you can not replace their elements.\n-The type written as `[mut TYPE]` is a vector with mutable\n-elements. Mutable vector literals are written `[mut]` (empty) or\n-`[mut 1, 2, 3]` (with elements).\n+The type written as `[mut T]` is a vector with mutable\n+elements. Mutable vector literals are written `[mut]` (empty) or `[mut\n+1, 2, 3]` (with elements).\n \n The `+` operator means concatenation when applied to vector types.\n Growing a vector in Rust is not as inefficient as it looks :"}]}