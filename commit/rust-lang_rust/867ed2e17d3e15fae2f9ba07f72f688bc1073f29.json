{"sha": "867ed2e17d3e15fae2f9ba07f72f688bc1073f29", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2N2VkMmUxN2QzZTE1ZmFlMmY5YmEwN2Y3MmY2ODhiYzEwNzNmMjk=", "commit": {"author": {"name": "Michael Kohl", "email": "citizen428@gmail.com", "date": "2017-06-05T09:46:12Z"}, "committer": {"name": "Michael Kohl", "email": "citizen428@gmail.com", "date": "2017-06-05T09:46:12Z"}, "message": "Doc changes for assert macros\n\nSee #29381", "tree": {"sha": "67f62b7012af0885f655ee7c76c0ba8eab0f37bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/67f62b7012af0885f655ee7c76c0ba8eab0f37bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/867ed2e17d3e15fae2f9ba07f72f688bc1073f29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/867ed2e17d3e15fae2f9ba07f72f688bc1073f29", "html_url": "https://github.com/rust-lang/rust/commit/867ed2e17d3e15fae2f9ba07f72f688bc1073f29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/867ed2e17d3e15fae2f9ba07f72f688bc1073f29/comments", "author": {"login": "citizen428", "id": 47985, "node_id": "MDQ6VXNlcjQ3OTg1", "avatar_url": "https://avatars.githubusercontent.com/u/47985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/citizen428", "html_url": "https://github.com/citizen428", "followers_url": "https://api.github.com/users/citizen428/followers", "following_url": "https://api.github.com/users/citizen428/following{/other_user}", "gists_url": "https://api.github.com/users/citizen428/gists{/gist_id}", "starred_url": "https://api.github.com/users/citizen428/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/citizen428/subscriptions", "organizations_url": "https://api.github.com/users/citizen428/orgs", "repos_url": "https://api.github.com/users/citizen428/repos", "events_url": "https://api.github.com/users/citizen428/events{/privacy}", "received_events_url": "https://api.github.com/users/citizen428/received_events", "type": "User", "site_admin": false}, "committer": {"login": "citizen428", "id": 47985, "node_id": "MDQ6VXNlcjQ3OTg1", "avatar_url": "https://avatars.githubusercontent.com/u/47985?v=4", "gravatar_id": "", "url": "https://api.github.com/users/citizen428", "html_url": "https://github.com/citizen428", "followers_url": "https://api.github.com/users/citizen428/followers", "following_url": "https://api.github.com/users/citizen428/following{/other_user}", "gists_url": "https://api.github.com/users/citizen428/gists{/gist_id}", "starred_url": "https://api.github.com/users/citizen428/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/citizen428/subscriptions", "organizations_url": "https://api.github.com/users/citizen428/orgs", "repos_url": "https://api.github.com/users/citizen428/repos", "events_url": "https://api.github.com/users/citizen428/events{/privacy}", "received_events_url": "https://api.github.com/users/citizen428/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c94a9ac8ae33e6580940e02abb425dd2fe69b5d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c94a9ac8ae33e6580940e02abb425dd2fe69b5d8", "html_url": "https://github.com/rust-lang/rust/commit/c94a9ac8ae33e6580940e02abb425dd2fe69b5d8"}], "stats": {"total": 18, "additions": 13, "deletions": 5}, "files": [{"sha": "99000a031feab4aca7fc82363af4b99865d1f39b", "filename": "src/libcore/macros.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/867ed2e17d3e15fae2f9ba07f72f688bc1073f29/src%2Flibcore%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/867ed2e17d3e15fae2f9ba07f72f688bc1073f29/src%2Flibcore%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros.rs?ref=867ed2e17d3e15fae2f9ba07f72f688bc1073f29", "patch": "@@ -35,6 +35,8 @@ macro_rules! panic {\n /// This will invoke the [`panic!`] macro if the provided expression cannot be\n /// evaluated to `true` at runtime.\n ///\n+/// # Uses\n+///\n /// Assertions are always checked in both debug and release builds, and cannot\n /// be disabled. See [`debug_assert!`] for assertions that are not enabled in\n /// release builds by default.\n@@ -45,7 +47,9 @@ macro_rules! panic {\n /// Other use-cases of `assert!` include [testing] and enforcing run-time\n /// invariants in safe code (whose violation cannot result in unsafety).\n ///\n-/// This macro has a second version, where a custom panic message can\n+/// # Custom Messages\n+///\n+/// This macro has a second form, where a custom panic message can\n /// be provided with or without arguments for formatting.\n ///\n /// [`panic!`]: macro.panic.html\n@@ -85,14 +89,15 @@ macro_rules! assert {\n     );\n }\n \n-/// Asserts that two expressions are equal to each other.\n+/// Asserts that two expressions are equal to each other (using [`PartialEq`]).\n ///\n /// On panic, this macro will print the values of the expressions with their\n /// debug representations.\n ///\n-/// Like [`assert!`], this macro has a second version, where a custom\n+/// Like [`assert!`], this macro has a second form, where a custom\n /// panic message can be provided.\n ///\n+/// [`PartialEq`]: cmp/trait.PartialEq.html\n /// [`assert!`]: macro.assert.html\n ///\n /// # Examples\n@@ -130,14 +135,15 @@ macro_rules! assert_eq {\n     });\n }\n \n-/// Asserts that two expressions are not equal to each other.\n+/// Asserts that two expressions are not equal to each other (using [`PartialEq`]).\n ///\n /// On panic, this macro will print the values of the expressions with their\n /// debug representations.\n ///\n-/// Like `assert!()`, this macro has a second version, where a custom\n+/// Like [`assert!`], this macro has a second form, where a custom\n /// panic message can be provided.\n ///\n+/// [`PartialEq`]: cmp/trait.PartialEq.html\n /// [`assert!`]: macro.assert.html\n ///\n /// # Examples\n@@ -183,6 +189,8 @@ macro_rules! assert_ne {\n /// Like [`assert!`], this macro also has a second version, where a custom panic\n /// message can be provided.\n ///\n+/// # Uses\n+///\n /// Unlike [`assert!`], `debug_assert!` statements are only enabled in non\n /// optimized builds by default. An optimized build will omit all\n /// `debug_assert!` statements unless `-C debug-assertions` is passed to the"}]}