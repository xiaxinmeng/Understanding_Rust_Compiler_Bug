{"sha": "451259811a7b0783ef413945e176a65d8b2162bb", "node_id": "C_kwDOAAsO6NoAKDQ1MTI1OTgxMWE3YjA3ODNlZjQxMzk0NWUxNzZhNjVkOGIyMTYyYmI", "commit": {"author": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2022-11-26T21:48:20Z"}, "committer": {"name": "Markus Everling", "email": "markuseverling@gmail.com", "date": "2022-11-26T21:55:39Z"}, "message": "Improve slow path in `make_contiguous`", "tree": {"sha": "a87a266c36fa4eb2ddb1294f443c217003d0c227", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a87a266c36fa4eb2ddb1294f443c217003d0c227"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/451259811a7b0783ef413945e176a65d8b2162bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/451259811a7b0783ef413945e176a65d8b2162bb", "html_url": "https://github.com/rust-lang/rust/commit/451259811a7b0783ef413945e176a65d8b2162bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/451259811a7b0783ef413945e176a65d8b2162bb/comments", "author": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Sp00ph", "id": 61327188, "node_id": "MDQ6VXNlcjYxMzI3MTg4", "avatar_url": "https://avatars.githubusercontent.com/u/61327188?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Sp00ph", "html_url": "https://github.com/Sp00ph", "followers_url": "https://api.github.com/users/Sp00ph/followers", "following_url": "https://api.github.com/users/Sp00ph/following{/other_user}", "gists_url": "https://api.github.com/users/Sp00ph/gists{/gist_id}", "starred_url": "https://api.github.com/users/Sp00ph/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Sp00ph/subscriptions", "organizations_url": "https://api.github.com/users/Sp00ph/orgs", "repos_url": "https://api.github.com/users/Sp00ph/repos", "events_url": "https://api.github.com/users/Sp00ph/events{/privacy}", "received_events_url": "https://api.github.com/users/Sp00ph/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6f25983c623e7a503df3afc643b846905a37412", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6f25983c623e7a503df3afc643b846905a37412", "html_url": "https://github.com/rust-lang/rust/commit/f6f25983c623e7a503df3afc643b846905a37412"}], "stats": {"total": 112, "additions": 76, "deletions": 36}, "files": [{"sha": "86d77182bccee7800cf0875f1436c68eab4d226b", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 67, "deletions": 27, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/451259811a7b0783ef413945e176a65d8b2162bb/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451259811a7b0783ef413945e176a65d8b2162bb/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=451259811a7b0783ef413945e176a65d8b2162bb", "patch": "@@ -2152,37 +2152,77 @@ impl<T, A: Allocator> VecDeque<T, A> {\n \n             self.head = tail;\n         } else {\n-            // free is smaller than both head and tail,\n-            // this means we have to slowly \"swap\" the tail and the head.\n+            // \u00b4free` is smaller than both `head_len` and `tail_len`.\n+            // the general algorithm for this first moves the slices\n+            // right next to each other and then uses `slice::rotate`\n+            // to rotate them into place:\n             //\n-            // from: EFGHI...ABCD or HIJK.ABCDEFG\n-            // to:   ABCDEFGHI... or ABCDEFGHIJK.\n-            let mut left_edge: usize = 0;\n-            let mut right_edge: usize = head;\n-            unsafe {\n-                // The general problem looks like this\n-                // GHIJKLM...ABCDEF - before any swaps\n-                // ABCDEFM...GHIJKL - after 1 pass of swaps\n-                // ABCDEFGHIJM...KL - swap until the left edge reaches the temp store\n-                //                  - then restart the algorithm with a new (smaller) store\n-                // Sometimes the temp store is reached when the right edge is at the end\n-                // of the buffer - this means we've hit the right order with fewer swaps!\n-                // E.g\n-                // EF..ABCD\n-                // ABCDEF.. - after four only swaps we've finished\n-                while left_edge < len && right_edge != cap {\n-                    let mut right_offset = 0;\n-                    for i in left_edge..right_edge {\n-                        right_offset = (i - left_edge) % (cap - right_edge);\n-                        let src = right_edge + right_offset;\n-                        ptr::swap(ptr.add(i), ptr.add(src));\n+            // initially:   HIJK..ABCDEFG\n+            // step 1:      ..HIJKABCDEFG\n+            // step 2:      ..ABCDEFGHIJK\n+            //\n+            // or:\n+            //\n+            // initially:   FGHIJK..ABCDE\n+            // step 1:      FGHIJKABCDE..\n+            // step 2:      ABCDEFGHIJK..\n+\n+            // pick the shorter of the 2 slices to reduce the amount\n+            // of memory that needs to be moved around.\n+            if head_len > tail_len {\n+                // tail is shorter, so:\n+                //  1. copy tail forwards\n+                //  2. rotate used part of the buffer\n+                //  3. update head to point to the new beginning (which is just `free`)\n+\n+                unsafe {\n+                    // if there is no free space in the buffer, then the slices are already\n+                    // right next to each other and we don't need to move any memory.\n+                    if free != 0 {\n+                        // because we only move the tail forward as much as there's free space\n+                        // behind it, we don't overwrite any elements of the head slice, and\n+                        // the slices end up right next to each other.\n+                        self.copy(0, free, tail_len);\n                     }\n-                    let n_ops = right_edge - left_edge;\n-                    left_edge += n_ops;\n-                    right_edge += right_offset + 1;\n+\n+                    // We just copied the tail right next to the head slice,\n+                    // so all of the elements in the range are initialized\n+                    let slice = &mut *self.buffer_range(free..self.capacity());\n+\n+                    // because the deque wasn't contiguous, we know that `tail_len < self.len == slice.len()`,\n+                    // so this will never panic.\n+                    slice.rotate_left(tail_len);\n+\n+                    // the used part of the buffer now is `free..self.capacity()`, so set\n+                    // `head` to the beginning of that range.\n+                    self.head = free;\n                 }\n+            } else {\n+                // head is shorter so:\n+                //  1. copy head backwards\n+                //  2. rotate used part of the buffer\n+                //  3. update head to point to the new beginning (which is the beginning of the buffer)\n \n-                self.head = 0;\n+                unsafe {\n+                    // if there is no free space in the buffer, then the slices are already\n+                    // right next to each other and we don't need to move any memory.\n+                    if free != 0 {\n+                        // copy the head slice to lie right behind the tail slice.\n+                        self.copy(self.head, tail_len, head_len);\n+                    }\n+\n+                    // because we copied the head slice so that both slices lie right\n+                    // next to each other, all the elements in the range are initialized.\n+                    let slice = &mut *self.buffer_range(0..self.len);\n+\n+                    // because the deque wasn't contiguous, we know that `head_len < self.len == slice.len()`\n+                    // so this will never panic.\n+                    slice.rotate_right(head_len);\n+\n+                    // the used part of the buffer now is `0..self.len`, so set\n+                    // `head` to the beginning of that range.\n+                    self.head = 0;\n+                }\n             }\n         }\n "}, {"sha": "2515c57874ce82b4697245389c84729f8363045f", "filename": "library/alloc/src/collections/vec_deque/tests.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/451259811a7b0783ef413945e176a65d8b2162bb/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/451259811a7b0783ef413945e176a65d8b2162bb/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Ftests.rs?ref=451259811a7b0783ef413945e176a65d8b2162bb", "patch": "@@ -465,7 +465,7 @@ fn test_binary_search_key() {\n }\n \n #[test]\n-fn make_contiguous_big_tail() {\n+fn make_contiguous_big_head() {\n     let mut tester = VecDeque::with_capacity(15);\n \n     for i in 0..3 {\n@@ -480,14 +480,14 @@ fn make_contiguous_big_tail() {\n     assert_eq!(tester.capacity(), 15);\n     assert_eq!((&[9, 8, 7, 6, 5, 4, 3] as &[_], &[0, 1, 2] as &[_]), tester.as_slices());\n \n-    let expected_start = tester.to_physical_idx(tester.len);\n+    let expected_start = tester.as_slices().1.len();\n     tester.make_contiguous();\n     assert_eq!(tester.head, expected_start);\n     assert_eq!((&[9, 8, 7, 6, 5, 4, 3, 0, 1, 2] as &[_], &[] as &[_]), tester.as_slices());\n }\n \n #[test]\n-fn make_contiguous_big_head() {\n+fn make_contiguous_big_tail() {\n     let mut tester = VecDeque::with_capacity(15);\n \n     for i in 0..8 {\n@@ -507,13 +507,13 @@ fn make_contiguous_big_head() {\n \n #[test]\n fn make_contiguous_small_free() {\n-    let mut tester = VecDeque::with_capacity(15);\n+    let mut tester = VecDeque::with_capacity(16);\n \n-    for i in 'A' as u8..'I' as u8 {\n+    for i in b'A'..b'I' {\n         tester.push_back(i as char);\n     }\n \n-    for i in 'I' as u8..'N' as u8 {\n+    for i in b'I'..b'N' {\n         tester.push_front(i as char);\n     }\n \n@@ -529,16 +529,16 @@ fn make_contiguous_small_free() {\n     );\n \n     tester.clear();\n-    for i in 'I' as u8..'N' as u8 {\n+    for i in b'I'..b'N' {\n         tester.push_back(i as char);\n     }\n \n-    for i in 'A' as u8..'I' as u8 {\n+    for i in b'A'..b'I' {\n         tester.push_front(i as char);\n     }\n \n     // IJKLM...HGFEDCBA\n-    let expected_start = 0;\n+    let expected_start = 3;\n     tester.make_contiguous();\n     assert_eq!(tester.head, expected_start);\n     assert_eq!("}]}