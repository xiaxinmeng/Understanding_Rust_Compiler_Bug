{"sha": "ab9c6ea4dd2c1a3b71fe50469627b0b518350896", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiOWM2ZWE0ZGQyYzFhM2I3MWZlNTA0Njk2MjdiMGI1MTgzNTA4OTY=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-27T21:40:33Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-05-27T21:40:33Z"}, "message": "Split attribute completion module into attribute, derive and lint modules", "tree": {"sha": "a89334bfe632065a7dab5a737f04706d59b6e4fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a89334bfe632065a7dab5a737f04706d59b6e4fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab9c6ea4dd2c1a3b71fe50469627b0b518350896", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab9c6ea4dd2c1a3b71fe50469627b0b518350896", "html_url": "https://github.com/rust-lang/rust/commit/ab9c6ea4dd2c1a3b71fe50469627b0b518350896", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab9c6ea4dd2c1a3b71fe50469627b0b518350896/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc37e2f953a0d200e875c4711c1b0bf79a75a2a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc37e2f953a0d200e875c4711c1b0bf79a75a2a2", "html_url": "https://github.com/rust-lang/rust/commit/fc37e2f953a0d200e875c4711c1b0bf79a75a2a2"}], "stats": {"total": 668, "additions": 302, "deletions": 366}, "files": [{"sha": "e128e307c1dbe1ba2a7a7056efc006091bc7b5ac", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 8, "deletions": 366, "changes": 374, "blob_url": "https://github.com/rust-lang/rust/blob/ab9c6ea4dd2c1a3b71fe50469627b0b518350896/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab9c6ea4dd2c1a3b71fe50469627b0b518350896/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=ab9c6ea4dd2c1a3b71fe50469627b0b518350896", "patch": "@@ -3,7 +3,6 @@\n //! This module uses a bit of static metadata to provide completions\n //! for built-in attributes.\n \n-use itertools::Itertools;\n use once_cell::sync::Lazy;\n use rustc_hash::{FxHashMap, FxHashSet};\n use syntax::{ast, AstNode, SyntaxKind, T};\n@@ -15,6 +14,10 @@ use crate::{\n     Completions,\n };\n \n+mod derive;\n+mod lint;\n+pub(crate) use self::lint::LintCompletion;\n+\n pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext) -> Option<()> {\n     if ctx.mod_declaration_under_caret.is_some() {\n         return None;\n@@ -23,11 +26,11 @@ pub(crate) fn complete_attribute(acc: &mut Completions, ctx: &CompletionContext)\n     let attribute = ctx.attribute_under_caret.as_ref()?;\n     match (attribute.path().and_then(|p| p.as_single_name_ref()), attribute.token_tree()) {\n         (Some(path), Some(token_tree)) => match path.text().as_str() {\n-            \"derive\" => complete_derive(acc, ctx, token_tree),\n-            \"feature\" => complete_lint(acc, ctx, token_tree, FEATURES),\n+            \"derive\" => derive::complete_derive(acc, ctx, token_tree),\n+            \"feature\" => lint::complete_lint(acc, ctx, token_tree, FEATURES),\n             \"allow\" | \"warn\" | \"deny\" | \"forbid\" => {\n-                complete_lint(acc, ctx, token_tree.clone(), DEFAULT_LINT_COMPLETIONS);\n-                complete_lint(acc, ctx, token_tree, CLIPPY_LINTS);\n+                lint::complete_lint(acc, ctx, token_tree.clone(), lint::DEFAULT_LINT_COMPLETIONS);\n+                lint::complete_lint(acc, ctx, token_tree, CLIPPY_LINTS);\n             }\n             _ => (),\n         },\n@@ -246,61 +249,6 @@ fn attributes_are_sorted() {\n     });\n }\n \n-fn complete_derive(acc: &mut Completions, ctx: &CompletionContext, derive_input: ast::TokenTree) {\n-    if let Ok(existing_derives) = parse_comma_sep_input(derive_input) {\n-        for derive_completion in DEFAULT_DERIVE_COMPLETIONS\n-            .iter()\n-            .filter(|completion| !existing_derives.contains(completion.label))\n-        {\n-            let mut components = vec![derive_completion.label];\n-            components.extend(\n-                derive_completion\n-                    .dependencies\n-                    .iter()\n-                    .filter(|&&dependency| !existing_derives.contains(dependency)),\n-            );\n-            let lookup = components.join(\", \");\n-            let label = components.iter().rev().join(\", \");\n-            let mut item =\n-                CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label);\n-            item.lookup_by(lookup).kind(CompletionItemKind::Attribute);\n-            item.add_to(acc);\n-        }\n-\n-        for custom_derive_name in get_derive_names_in_scope(ctx).difference(&existing_derives) {\n-            let mut item = CompletionItem::new(\n-                CompletionKind::Attribute,\n-                ctx.source_range(),\n-                custom_derive_name,\n-            );\n-            item.kind(CompletionItemKind::Attribute);\n-            item.add_to(acc);\n-        }\n-    }\n-}\n-\n-fn complete_lint(\n-    acc: &mut Completions,\n-    ctx: &CompletionContext,\n-    derive_input: ast::TokenTree,\n-    lints_completions: &[LintCompletion],\n-) {\n-    if let Ok(existing_lints) = parse_comma_sep_input(derive_input) {\n-        for lint_completion in lints_completions\n-            .into_iter()\n-            .filter(|completion| !existing_lints.contains(completion.label))\n-        {\n-            let mut item = CompletionItem::new(\n-                CompletionKind::Attribute,\n-                ctx.source_range(),\n-                lint_completion.label,\n-            );\n-            item.kind(CompletionItemKind::Attribute).detail(lint_completion.description);\n-            item.add_to(acc)\n-        }\n-    }\n-}\n-\n fn parse_comma_sep_input(derive_input: ast::TokenTree) -> Result<FxHashSet<String>, ()> {\n     match (derive_input.left_delimiter_token(), derive_input.right_delimiter_token()) {\n         (Some(left_paren), Some(right_paren))\n@@ -335,162 +283,6 @@ fn parse_comma_sep_input(derive_input: ast::TokenTree) -> Result<FxHashSet<Strin\n     }\n }\n \n-fn get_derive_names_in_scope(ctx: &CompletionContext) -> FxHashSet<String> {\n-    let mut result = FxHashSet::default();\n-    ctx.scope.process_all_names(&mut |name, scope_def| {\n-        if let hir::ScopeDef::MacroDef(mac) = scope_def {\n-            // FIXME kind() doesn't check whether proc-macro is a derive\n-            if mac.kind() == hir::MacroKind::Derive || mac.kind() == hir::MacroKind::ProcMacro {\n-                result.insert(name.to_string());\n-            }\n-        }\n-    });\n-    result\n-}\n-\n-struct DeriveCompletion {\n-    label: &'static str,\n-    dependencies: &'static [&'static str],\n-}\n-\n-/// Standard Rust derives and the information about their dependencies\n-/// (the dependencies are needed so that the main derive don't break the compilation when added)\n-const DEFAULT_DERIVE_COMPLETIONS: &[DeriveCompletion] = &[\n-    DeriveCompletion { label: \"Clone\", dependencies: &[] },\n-    DeriveCompletion { label: \"Copy\", dependencies: &[\"Clone\"] },\n-    DeriveCompletion { label: \"Debug\", dependencies: &[] },\n-    DeriveCompletion { label: \"Default\", dependencies: &[] },\n-    DeriveCompletion { label: \"Hash\", dependencies: &[] },\n-    DeriveCompletion { label: \"PartialEq\", dependencies: &[] },\n-    DeriveCompletion { label: \"Eq\", dependencies: &[\"PartialEq\"] },\n-    DeriveCompletion { label: \"PartialOrd\", dependencies: &[\"PartialEq\"] },\n-    DeriveCompletion { label: \"Ord\", dependencies: &[\"PartialOrd\", \"Eq\", \"PartialEq\"] },\n-];\n-\n-pub(crate) struct LintCompletion {\n-    pub(crate) label: &'static str,\n-    pub(crate) description: &'static str,\n-}\n-\n-#[rustfmt::skip]\n-const DEFAULT_LINT_COMPLETIONS: &[LintCompletion] = &[\n-    LintCompletion { label: \"absolute_paths_not_starting_with_crate\", description: r#\"fully qualified paths that start with a module name instead of `crate`, `self`, or an extern crate name\"# },\n-    LintCompletion { label: \"anonymous_parameters\", description: r#\"detects anonymous parameters\"# },\n-    LintCompletion { label: \"box_pointers\", description: r#\"use of owned (Box type) heap memory\"# },\n-    LintCompletion { label: \"deprecated_in_future\", description: r#\"detects use of items that will be deprecated in a future version\"# },\n-    LintCompletion { label: \"elided_lifetimes_in_paths\", description: r#\"hidden lifetime parameters in types are deprecated\"# },\n-    LintCompletion { label: \"explicit_outlives_requirements\", description: r#\"outlives requirements can be inferred\"# },\n-    LintCompletion { label: \"indirect_structural_match\", description: r#\"pattern with const indirectly referencing non-structural-match type\"# },\n-    LintCompletion { label: \"keyword_idents\", description: r#\"detects edition keywords being used as an identifier\"# },\n-    LintCompletion { label: \"macro_use_extern_crate\", description: r#\"the `#[macro_use]` attribute is now deprecated in favor of using macros via the module system\"# },\n-    LintCompletion { label: \"meta_variable_misuse\", description: r#\"possible meta-variable misuse at macro definition\"# },\n-    LintCompletion { label: \"missing_copy_implementations\", description: r#\"detects potentially-forgotten implementations of `Copy`\"# },\n-    LintCompletion { label: \"missing_crate_level_docs\", description: r#\"detects crates with no crate-level documentation\"# },\n-    LintCompletion { label: \"missing_debug_implementations\", description: r#\"detects missing implementations of Debug\"# },\n-    LintCompletion { label: \"missing_docs\", description: r#\"detects missing documentation for public members\"# },\n-    LintCompletion { label: \"missing_doc_code_examples\", description: r#\"detects publicly-exported items without code samples in their documentation\"# },\n-    LintCompletion { label: \"non_ascii_idents\", description: r#\"detects non-ASCII identifiers\"# },\n-    LintCompletion { label: \"private_doc_tests\", description: r#\"detects code samples in docs of private items not documented by rustdoc\"# },\n-    LintCompletion { label: \"single_use_lifetimes\", description: r#\"detects lifetime parameters that are only used once\"# },\n-    LintCompletion { label: \"trivial_casts\", description: r#\"detects trivial casts which could be removed\"# },\n-    LintCompletion { label: \"trivial_numeric_casts\", description: r#\"detects trivial casts of numeric types which could be removed\"# },\n-    LintCompletion { label: \"unaligned_references\", description: r#\"detects unaligned references to fields of packed structs\"# },\n-    LintCompletion { label: \"unreachable_pub\", description: r#\"`pub` items not reachable from crate root\"# },\n-    LintCompletion { label: \"unsafe_code\", description: r#\"usage of `unsafe` code\"# },\n-    LintCompletion { label: \"unsafe_op_in_unsafe_fn\", description: r#\"unsafe operations in unsafe functions without an explicit unsafe block are deprecated\"# },\n-    LintCompletion { label: \"unstable_features\", description: r#\"enabling unstable features (deprecated. do not use)\"# },\n-    LintCompletion { label: \"unused_crate_dependencies\", description: r#\"crate dependencies that are never used\"# },\n-    LintCompletion { label: \"unused_extern_crates\", description: r#\"extern crates that are never used\"# },\n-    LintCompletion { label: \"unused_import_braces\", description: r#\"unnecessary braces around an imported item\"# },\n-    LintCompletion { label: \"unused_lifetimes\", description: r#\"detects lifetime parameters that are never used\"# },\n-    LintCompletion { label: \"unused_qualifications\", description: r#\"detects unnecessarily qualified names\"# },\n-    LintCompletion { label: \"unused_results\", description: r#\"unused result of an expression in a statement\"# },\n-    LintCompletion { label: \"variant_size_differences\", description: r#\"detects enums with widely varying variant sizes\"# },\n-    LintCompletion { label: \"array_into_iter\", description: r#\"detects calling `into_iter` on arrays\"# },\n-    LintCompletion { label: \"asm_sub_register\", description: r#\"using only a subset of a register for inline asm inputs\"# },\n-    LintCompletion { label: \"bare_trait_objects\", description: r#\"suggest using `dyn Trait` for trait objects\"# },\n-    LintCompletion { label: \"bindings_with_variant_name\", description: r#\"detects pattern bindings with the same name as one of the matched variants\"# },\n-    LintCompletion { label: \"cenum_impl_drop_cast\", description: r#\"a C-like enum implementing Drop is cast\"# },\n-    LintCompletion { label: \"clashing_extern_declarations\", description: r#\"detects when an extern fn has been declared with the same name but different types\"# },\n-    LintCompletion { label: \"coherence_leak_check\", description: r#\"distinct impls distinguished only by the leak-check code\"# },\n-    LintCompletion { label: \"confusable_idents\", description: r#\"detects visually confusable pairs between identifiers\"# },\n-    LintCompletion { label: \"dead_code\", description: r#\"detect unused, unexported items\"# },\n-    LintCompletion { label: \"deprecated\", description: r#\"detects use of deprecated items\"# },\n-    LintCompletion { label: \"ellipsis_inclusive_range_patterns\", description: r#\"`...` range patterns are deprecated\"# },\n-    LintCompletion { label: \"exported_private_dependencies\", description: r#\"public interface leaks type from a private dependency\"# },\n-    LintCompletion { label: \"illegal_floating_point_literal_pattern\", description: r#\"floating-point literals cannot be used in patterns\"# },\n-    LintCompletion { label: \"improper_ctypes\", description: r#\"proper use of libc types in foreign modules\"# },\n-    LintCompletion { label: \"improper_ctypes_definitions\", description: r#\"proper use of libc types in foreign item definitions\"# },\n-    LintCompletion { label: \"incomplete_features\", description: r#\"incomplete features that may function improperly in some or all cases\"# },\n-    LintCompletion { label: \"inline_no_sanitize\", description: r#\"detects incompatible use of `#[inline(always)]` and `#[no_sanitize(...)]`\"# },\n-    LintCompletion { label: \"intra_doc_link_resolution_failure\", description: r#\"failures in resolving intra-doc link targets\"# },\n-    LintCompletion { label: \"invalid_codeblock_attributes\", description: r#\"codeblock attribute looks a lot like a known one\"# },\n-    LintCompletion { label: \"invalid_value\", description: r#\"an invalid value is being created (such as a NULL reference)\"# },\n-    LintCompletion { label: \"irrefutable_let_patterns\", description: r#\"detects irrefutable patterns in if-let and while-let statements\"# },\n-    LintCompletion { label: \"late_bound_lifetime_arguments\", description: r#\"detects generic lifetime arguments in path segments with late bound lifetime parameters\"# },\n-    LintCompletion { label: \"mixed_script_confusables\", description: r#\"detects Unicode scripts whose mixed script confusables codepoints are solely used\"# },\n-    LintCompletion { label: \"mutable_borrow_reservation_conflict\", description: r#\"reservation of a two-phased borrow conflicts with other shared borrows\"# },\n-    LintCompletion { label: \"non_camel_case_types\", description: r#\"types, variants, traits and type parameters should have camel case names\"# },\n-    LintCompletion { label: \"non_shorthand_field_patterns\", description: r#\"using `Struct { x: x }` instead of `Struct { x }` in a pattern\"# },\n-    LintCompletion { label: \"non_snake_case\", description: r#\"variables, methods, functions, lifetime parameters and modules should have snake case names\"# },\n-    LintCompletion { label: \"non_upper_case_globals\", description: r#\"static constants should have uppercase identifiers\"# },\n-    LintCompletion { label: \"no_mangle_generic_items\", description: r#\"generic items must be mangled\"# },\n-    LintCompletion { label: \"overlapping_patterns\", description: r#\"detects overlapping patterns\"# },\n-    LintCompletion { label: \"path_statements\", description: r#\"path statements with no effect\"# },\n-    LintCompletion { label: \"private_in_public\", description: r#\"detect private items in public interfaces not caught by the old implementation\"# },\n-    LintCompletion { label: \"proc_macro_derive_resolution_fallback\", description: r#\"detects proc macro derives using inaccessible names from parent modules\"# },\n-    LintCompletion { label: \"redundant_semicolons\", description: r#\"detects unnecessary trailing semicolons\"# },\n-    LintCompletion { label: \"renamed_and_removed_lints\", description: r#\"lints that have been renamed or removed\"# },\n-    LintCompletion { label: \"safe_packed_borrows\", description: r#\"safe borrows of fields of packed structs were erroneously allowed\"# },\n-    LintCompletion { label: \"stable_features\", description: r#\"stable features found in `#[feature]` directive\"# },\n-    LintCompletion { label: \"trivial_bounds\", description: r#\"these bounds don't depend on an type parameters\"# },\n-    LintCompletion { label: \"type_alias_bounds\", description: r#\"bounds in type aliases are not enforced\"# },\n-    LintCompletion { label: \"tyvar_behind_raw_pointer\", description: r#\"raw pointer to an inference variable\"# },\n-    LintCompletion { label: \"uncommon_codepoints\", description: r#\"detects uncommon Unicode codepoints in identifiers\"# },\n-    LintCompletion { label: \"unconditional_recursion\", description: r#\"functions that cannot return without calling themselves\"# },\n-    LintCompletion { label: \"unknown_lints\", description: r#\"unrecognized lint attribute\"# },\n-    LintCompletion { label: \"unnameable_test_items\", description: r#\"detects an item that cannot be named being marked as `#[test_case]`\"# },\n-    LintCompletion { label: \"unreachable_code\", description: r#\"detects unreachable code paths\"# },\n-    LintCompletion { label: \"unreachable_patterns\", description: r#\"detects unreachable patterns\"# },\n-    LintCompletion { label: \"unstable_name_collisions\", description: r#\"detects name collision with an existing but unstable method\"# },\n-    LintCompletion { label: \"unused_allocation\", description: r#\"detects unnecessary allocations that can be eliminated\"# },\n-    LintCompletion { label: \"unused_assignments\", description: r#\"detect assignments that will never be read\"# },\n-    LintCompletion { label: \"unused_attributes\", description: r#\"detects attributes that were not used by the compiler\"# },\n-    LintCompletion { label: \"unused_braces\", description: r#\"unnecessary braces around an expression\"# },\n-    LintCompletion { label: \"unused_comparisons\", description: r#\"comparisons made useless by limits of the types involved\"# },\n-    LintCompletion { label: \"unused_doc_comments\", description: r#\"detects doc comments that aren't used by rustdoc\"# },\n-    LintCompletion { label: \"unused_features\", description: r#\"unused features found in crate-level `#[feature]` directives\"# },\n-    LintCompletion { label: \"unused_imports\", description: r#\"imports that are never used\"# },\n-    LintCompletion { label: \"unused_labels\", description: r#\"detects labels that are never used\"# },\n-    LintCompletion { label: \"unused_macros\", description: r#\"detects macros that were not used\"# },\n-    LintCompletion { label: \"unused_must_use\", description: r#\"unused result of a type flagged as `#[must_use]`\"# },\n-    LintCompletion { label: \"unused_mut\", description: r#\"detect mut variables which don't need to be mutable\"# },\n-    LintCompletion { label: \"unused_parens\", description: r#\"`if`, `match`, `while` and `return` do not need parentheses\"# },\n-    LintCompletion { label: \"unused_unsafe\", description: r#\"unnecessary use of an `unsafe` block\"# },\n-    LintCompletion { label: \"unused_variables\", description: r#\"detect variables which are not used in any way\"# },\n-    LintCompletion { label: \"warnings\", description: r#\"mass-change the level for lints which produce warnings\"# },\n-    LintCompletion { label: \"where_clauses_object_safety\", description: r#\"checks the object safety of where clauses\"# },\n-    LintCompletion { label: \"while_true\", description: r#\"suggest using `loop { }` instead of `while true { }`\"# },\n-    LintCompletion { label: \"ambiguous_associated_items\", description: r#\"ambiguous associated items\"# },\n-    LintCompletion { label: \"arithmetic_overflow\", description: r#\"arithmetic operation overflows\"# },\n-    LintCompletion { label: \"conflicting_repr_hints\", description: r#\"conflicts between `#[repr(..)]` hints that were previously accepted and used in practice\"# },\n-    LintCompletion { label: \"const_err\", description: r#\"constant evaluation detected erroneous expression\"# },\n-    LintCompletion { label: \"ill_formed_attribute_input\", description: r#\"ill-formed attribute inputs that were previously accepted and used in practice\"# },\n-    LintCompletion { label: \"incomplete_include\", description: r#\"trailing content in included file\"# },\n-    LintCompletion { label: \"invalid_type_param_default\", description: r#\"type parameter default erroneously allowed in invalid location\"# },\n-    LintCompletion { label: \"macro_expanded_macro_exports_accessed_by_absolute_paths\", description: r#\"macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\"# },\n-    LintCompletion { label: \"missing_fragment_specifier\", description: r#\"detects missing fragment specifiers in unused `macro_rules!` patterns\"# },\n-    LintCompletion { label: \"mutable_transmutes\", description: r#\"mutating transmuted &mut T from &T may cause undefined behavior\"# },\n-    LintCompletion { label: \"no_mangle_const_items\", description: r#\"const items will not have their symbols exported\"# },\n-    LintCompletion { label: \"order_dependent_trait_objects\", description: r#\"trait-object types were treated as different depending on marker-trait order\"# },\n-    LintCompletion { label: \"overflowing_literals\", description: r#\"literal out of range for its type\"# },\n-    LintCompletion { label: \"patterns_in_fns_without_body\", description: r#\"patterns in functions without body were erroneously allowed\"# },\n-    LintCompletion { label: \"pub_use_of_private_extern_crate\", description: r#\"detect public re-exports of private extern crates\"# },\n-    LintCompletion { label: \"soft_unstable\", description: r#\"a feature gate that doesn't break dependent crates\"# },\n-    LintCompletion { label: \"unconditional_panic\", description: r#\"operation will cause a panic at runtime\"# },\n-    LintCompletion { label: \"unknown_crate_types\", description: r#\"unknown crate type found in `#[crate_type]` directive\"# },\n-];\n-\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n@@ -521,158 +313,8 @@ struct Test {}\n             \"#]],\n         );\n     }\n-\n-    #[test]\n-    fn empty_derive_completion() {\n-        check(\n-            r#\"\n-#[derive($0)]\n-struct Test {}\n-        \"#,\n-            expect![[r#\"\n-                at Clone\n-                at Clone, Copy\n-                at Debug\n-                at Default\n-                at Hash\n-                at PartialEq\n-                at PartialEq, Eq\n-                at PartialEq, PartialOrd\n-                at PartialEq, Eq, PartialOrd, Ord\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn no_completion_for_incorrect_derive() {\n-        check(\n-            r#\"\n-#[derive{$0)]\n-struct Test {}\n-\"#,\n-            expect![[r#\"\"#]],\n-        )\n-    }\n-\n-    #[test]\n-    fn derive_with_input_completion() {\n-        check(\n-            r#\"\n-#[derive(serde::Serialize, PartialEq, $0)]\n-struct Test {}\n-\"#,\n-            expect![[r#\"\n-                at Clone\n-                at Clone, Copy\n-                at Debug\n-                at Default\n-                at Hash\n-                at Eq\n-                at PartialOrd\n-                at Eq, PartialOrd, Ord\n-            \"#]],\n-        )\n-    }\n-\n-    #[test]\n-    fn test_attribute_completion() {\n-        check(\n-            r#\"#[$0]\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at automatically_derived\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at cold\n-                at deny(\u2026)\n-                at deprecated\n-                at derive(\u2026)\n-                at doc = \"\u2026\"\n-                at doc(alias = \"\u2026\")\n-                at doc(hidden)\n-                at export_name = \"\u2026\"\n-                at forbid(\u2026)\n-                at ignore = \"\u2026\"\n-                at inline\n-                at link\n-                at link_name = \"\u2026\"\n-                at link_section = \"\u2026\"\n-                at macro_export\n-                at macro_use\n-                at must_use\n-                at no_mangle\n-                at non_exhaustive\n-                at path = \"\u2026\"\n-                at proc_macro\n-                at proc_macro_attribute\n-                at proc_macro_derive(\u2026)\n-                at repr(\u2026)\n-                at should_panic\n-                at target_feature = \"\u2026\"\n-                at test\n-                at track_caller\n-                at used\n-                at warn(\u2026)\n-            \"#]],\n-        )\n-    }\n-\n     #[test]\n     fn test_attribute_completion_inside_nested_attr() {\n         check(r#\"#[cfg($0)]\"#, expect![[]])\n     }\n-\n-    #[test]\n-    fn test_inner_attribute_completion() {\n-        check(\n-            r\"#![$0]\",\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at automatically_derived\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at cold\n-                at crate_name = \"\"\n-                at deny(\u2026)\n-                at deprecated\n-                at derive(\u2026)\n-                at doc = \"\u2026\"\n-                at doc(alias = \"\u2026\")\n-                at doc(hidden)\n-                at export_name = \"\u2026\"\n-                at feature(\u2026)\n-                at forbid(\u2026)\n-                at global_allocator\n-                at ignore = \"\u2026\"\n-                at inline\n-                at link\n-                at link_name = \"\u2026\"\n-                at link_section = \"\u2026\"\n-                at macro_export\n-                at macro_use\n-                at must_use\n-                at no_implicit_prelude\n-                at no_link\n-                at no_main\n-                at no_mangle\n-                at no_std\n-                at non_exhaustive\n-                at panic_handler\n-                at path = \"\u2026\"\n-                at proc_macro\n-                at proc_macro_attribute\n-                at proc_macro_derive(\u2026)\n-                at recursion_limit = \u2026\n-                at repr(\u2026)\n-                at should_panic\n-                at target_feature = \"\u2026\"\n-                at test\n-                at track_caller\n-                at type_length_limit = \u2026\n-                at used\n-                at warn(\u2026)\n-                at windows_subsystem = \"\u2026\"\n-            \"#]],\n-        );\n-    }\n }"}, {"sha": "c14b03ea4577d96d35a4a374d49b8cb006549ea1", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "added", "additions": 141, "deletions": 0, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/ab9c6ea4dd2c1a3b71fe50469627b0b518350896/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab9c6ea4dd2c1a3b71fe50469627b0b518350896/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=ab9c6ea4dd2c1a3b71fe50469627b0b518350896", "patch": "@@ -0,0 +1,141 @@\n+use itertools::Itertools;\n+use rustc_hash::FxHashSet;\n+use syntax::ast;\n+\n+use crate::{\n+    context::CompletionContext,\n+    item::{CompletionItem, CompletionItemKind, CompletionKind},\n+    Completions,\n+};\n+\n+pub(super) fn complete_derive(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    derive_input: ast::TokenTree,\n+) {\n+    if let Ok(existing_derives) = super::parse_comma_sep_input(derive_input) {\n+        for derive_completion in DEFAULT_DERIVE_COMPLETIONS\n+            .iter()\n+            .filter(|completion| !existing_derives.contains(completion.label))\n+        {\n+            let mut components = vec![derive_completion.label];\n+            components.extend(\n+                derive_completion\n+                    .dependencies\n+                    .iter()\n+                    .filter(|&&dependency| !existing_derives.contains(dependency)),\n+            );\n+            let lookup = components.join(\", \");\n+            let label = components.iter().rev().join(\", \");\n+            let mut item =\n+                CompletionItem::new(CompletionKind::Attribute, ctx.source_range(), label);\n+            item.lookup_by(lookup).kind(CompletionItemKind::Attribute);\n+            item.add_to(acc);\n+        }\n+\n+        for custom_derive_name in get_derive_names_in_scope(ctx).difference(&existing_derives) {\n+            let mut item = CompletionItem::new(\n+                CompletionKind::Attribute,\n+                ctx.source_range(),\n+                custom_derive_name,\n+            );\n+            item.kind(CompletionItemKind::Attribute);\n+            item.add_to(acc);\n+        }\n+    }\n+}\n+fn get_derive_names_in_scope(ctx: &CompletionContext) -> FxHashSet<String> {\n+    let mut result = FxHashSet::default();\n+    ctx.scope.process_all_names(&mut |name, scope_def| {\n+        if let hir::ScopeDef::MacroDef(mac) = scope_def {\n+            // FIXME kind() doesn't check whether proc-macro is a derive\n+            if mac.kind() == hir::MacroKind::Derive || mac.kind() == hir::MacroKind::ProcMacro {\n+                result.insert(name.to_string());\n+            }\n+        }\n+    });\n+    result\n+}\n+\n+struct DeriveCompletion {\n+    label: &'static str,\n+    dependencies: &'static [&'static str],\n+}\n+\n+/// Standard Rust derives and the information about their dependencies\n+/// (the dependencies are needed so that the main derive don't break the compilation when added)\n+const DEFAULT_DERIVE_COMPLETIONS: &[DeriveCompletion] = &[\n+    DeriveCompletion { label: \"Clone\", dependencies: &[] },\n+    DeriveCompletion { label: \"Copy\", dependencies: &[\"Clone\"] },\n+    DeriveCompletion { label: \"Debug\", dependencies: &[] },\n+    DeriveCompletion { label: \"Default\", dependencies: &[] },\n+    DeriveCompletion { label: \"Hash\", dependencies: &[] },\n+    DeriveCompletion { label: \"PartialEq\", dependencies: &[] },\n+    DeriveCompletion { label: \"Eq\", dependencies: &[\"PartialEq\"] },\n+    DeriveCompletion { label: \"PartialOrd\", dependencies: &[\"PartialEq\"] },\n+    DeriveCompletion { label: \"Ord\", dependencies: &[\"PartialOrd\", \"Eq\", \"PartialEq\"] },\n+];\n+\n+#[cfg(test)]\n+mod tests {\n+    use expect_test::{expect, Expect};\n+\n+    use crate::{test_utils::completion_list, CompletionKind};\n+\n+    fn check(ra_fixture: &str, expect: Expect) {\n+        let actual = completion_list(ra_fixture, CompletionKind::Attribute);\n+        expect.assert_eq(&actual);\n+    }\n+\n+    #[test]\n+    fn empty_derive_completion() {\n+        check(\n+            r#\"\n+#[derive($0)]\n+struct Test {}\n+        \"#,\n+            expect![[r#\"\n+                at Clone\n+                at Clone, Copy\n+                at Debug\n+                at Default\n+                at Hash\n+                at PartialEq\n+                at PartialEq, Eq\n+                at PartialEq, PartialOrd\n+                at PartialEq, Eq, PartialOrd, Ord\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn no_completion_for_incorrect_derive() {\n+        check(\n+            r#\"\n+#[derive{$0)]\n+struct Test {}\n+\"#,\n+            expect![[r#\"\"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn derive_with_input_completion() {\n+        check(\n+            r#\"\n+#[derive(serde::Serialize, PartialEq, $0)]\n+struct Test {}\n+\"#,\n+            expect![[r#\"\n+                at Clone\n+                at Clone, Copy\n+                at Debug\n+                at Default\n+                at Hash\n+                at Eq\n+                at PartialOrd\n+                at Eq, PartialOrd, Ord\n+            \"#]],\n+        )\n+    }\n+}"}, {"sha": "1f9873d3c89f486cb084659e612db1f51d9a274b", "filename": "crates/ide_completion/src/completions/attribute/lint.rs", "status": "added", "additions": 153, "deletions": 0, "changes": 153, "blob_url": "https://github.com/rust-lang/rust/blob/ab9c6ea4dd2c1a3b71fe50469627b0b518350896/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab9c6ea4dd2c1a3b71fe50469627b0b518350896/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs?ref=ab9c6ea4dd2c1a3b71fe50469627b0b518350896", "patch": "@@ -0,0 +1,153 @@\n+use syntax::ast;\n+\n+use crate::{\n+    context::CompletionContext,\n+    item::{CompletionItem, CompletionItemKind, CompletionKind},\n+    Completions,\n+};\n+\n+pub(super) fn complete_lint(\n+    acc: &mut Completions,\n+    ctx: &CompletionContext,\n+    derive_input: ast::TokenTree,\n+    lints_completions: &[LintCompletion],\n+) {\n+    if let Ok(existing_lints) = super::parse_comma_sep_input(derive_input) {\n+        for lint_completion in lints_completions\n+            .into_iter()\n+            .filter(|completion| !existing_lints.contains(completion.label))\n+        {\n+            let mut item = CompletionItem::new(\n+                CompletionKind::Attribute,\n+                ctx.source_range(),\n+                lint_completion.label,\n+            );\n+            item.kind(CompletionItemKind::Attribute).detail(lint_completion.description);\n+            item.add_to(acc)\n+        }\n+    }\n+}\n+\n+pub(crate) struct LintCompletion {\n+    pub(crate) label: &'static str,\n+    pub(crate) description: &'static str,\n+}\n+\n+#[rustfmt::skip]\n+pub(super) const DEFAULT_LINT_COMPLETIONS: &[LintCompletion] = &[\n+    LintCompletion { label: \"absolute_paths_not_starting_with_crate\", description: r#\"fully qualified paths that start with a module name instead of `crate`, `self`, or an extern crate name\"# },\n+    LintCompletion { label: \"anonymous_parameters\", description: r#\"detects anonymous parameters\"# },\n+    LintCompletion { label: \"box_pointers\", description: r#\"use of owned (Box type) heap memory\"# },\n+    LintCompletion { label: \"deprecated_in_future\", description: r#\"detects use of items that will be deprecated in a future version\"# },\n+    LintCompletion { label: \"elided_lifetimes_in_paths\", description: r#\"hidden lifetime parameters in types are deprecated\"# },\n+    LintCompletion { label: \"explicit_outlives_requirements\", description: r#\"outlives requirements can be inferred\"# },\n+    LintCompletion { label: \"indirect_structural_match\", description: r#\"pattern with const indirectly referencing non-structural-match type\"# },\n+    LintCompletion { label: \"keyword_idents\", description: r#\"detects edition keywords being used as an identifier\"# },\n+    LintCompletion { label: \"macro_use_extern_crate\", description: r#\"the `#[macro_use]` attribute is now deprecated in favor of using macros via the module system\"# },\n+    LintCompletion { label: \"meta_variable_misuse\", description: r#\"possible meta-variable misuse at macro definition\"# },\n+    LintCompletion { label: \"missing_copy_implementations\", description: r#\"detects potentially-forgotten implementations of `Copy`\"# },\n+    LintCompletion { label: \"missing_crate_level_docs\", description: r#\"detects crates with no crate-level documentation\"# },\n+    LintCompletion { label: \"missing_debug_implementations\", description: r#\"detects missing implementations of Debug\"# },\n+    LintCompletion { label: \"missing_docs\", description: r#\"detects missing documentation for public members\"# },\n+    LintCompletion { label: \"missing_doc_code_examples\", description: r#\"detects publicly-exported items without code samples in their documentation\"# },\n+    LintCompletion { label: \"non_ascii_idents\", description: r#\"detects non-ASCII identifiers\"# },\n+    LintCompletion { label: \"private_doc_tests\", description: r#\"detects code samples in docs of private items not documented by rustdoc\"# },\n+    LintCompletion { label: \"single_use_lifetimes\", description: r#\"detects lifetime parameters that are only used once\"# },\n+    LintCompletion { label: \"trivial_casts\", description: r#\"detects trivial casts which could be removed\"# },\n+    LintCompletion { label: \"trivial_numeric_casts\", description: r#\"detects trivial casts of numeric types which could be removed\"# },\n+    LintCompletion { label: \"unaligned_references\", description: r#\"detects unaligned references to fields of packed structs\"# },\n+    LintCompletion { label: \"unreachable_pub\", description: r#\"`pub` items not reachable from crate root\"# },\n+    LintCompletion { label: \"unsafe_code\", description: r#\"usage of `unsafe` code\"# },\n+    LintCompletion { label: \"unsafe_op_in_unsafe_fn\", description: r#\"unsafe operations in unsafe functions without an explicit unsafe block are deprecated\"# },\n+    LintCompletion { label: \"unstable_features\", description: r#\"enabling unstable features (deprecated. do not use)\"# },\n+    LintCompletion { label: \"unused_crate_dependencies\", description: r#\"crate dependencies that are never used\"# },\n+    LintCompletion { label: \"unused_extern_crates\", description: r#\"extern crates that are never used\"# },\n+    LintCompletion { label: \"unused_import_braces\", description: r#\"unnecessary braces around an imported item\"# },\n+    LintCompletion { label: \"unused_lifetimes\", description: r#\"detects lifetime parameters that are never used\"# },\n+    LintCompletion { label: \"unused_qualifications\", description: r#\"detects unnecessarily qualified names\"# },\n+    LintCompletion { label: \"unused_results\", description: r#\"unused result of an expression in a statement\"# },\n+    LintCompletion { label: \"variant_size_differences\", description: r#\"detects enums with widely varying variant sizes\"# },\n+    LintCompletion { label: \"array_into_iter\", description: r#\"detects calling `into_iter` on arrays\"# },\n+    LintCompletion { label: \"asm_sub_register\", description: r#\"using only a subset of a register for inline asm inputs\"# },\n+    LintCompletion { label: \"bare_trait_objects\", description: r#\"suggest using `dyn Trait` for trait objects\"# },\n+    LintCompletion { label: \"bindings_with_variant_name\", description: r#\"detects pattern bindings with the same name as one of the matched variants\"# },\n+    LintCompletion { label: \"cenum_impl_drop_cast\", description: r#\"a C-like enum implementing Drop is cast\"# },\n+    LintCompletion { label: \"clashing_extern_declarations\", description: r#\"detects when an extern fn has been declared with the same name but different types\"# },\n+    LintCompletion { label: \"coherence_leak_check\", description: r#\"distinct impls distinguished only by the leak-check code\"# },\n+    LintCompletion { label: \"confusable_idents\", description: r#\"detects visually confusable pairs between identifiers\"# },\n+    LintCompletion { label: \"dead_code\", description: r#\"detect unused, unexported items\"# },\n+    LintCompletion { label: \"deprecated\", description: r#\"detects use of deprecated items\"# },\n+    LintCompletion { label: \"ellipsis_inclusive_range_patterns\", description: r#\"`...` range patterns are deprecated\"# },\n+    LintCompletion { label: \"exported_private_dependencies\", description: r#\"public interface leaks type from a private dependency\"# },\n+    LintCompletion { label: \"illegal_floating_point_literal_pattern\", description: r#\"floating-point literals cannot be used in patterns\"# },\n+    LintCompletion { label: \"improper_ctypes\", description: r#\"proper use of libc types in foreign modules\"# },\n+    LintCompletion { label: \"improper_ctypes_definitions\", description: r#\"proper use of libc types in foreign item definitions\"# },\n+    LintCompletion { label: \"incomplete_features\", description: r#\"incomplete features that may function improperly in some or all cases\"# },\n+    LintCompletion { label: \"inline_no_sanitize\", description: r#\"detects incompatible use of `#[inline(always)]` and `#[no_sanitize(...)]`\"# },\n+    LintCompletion { label: \"intra_doc_link_resolution_failure\", description: r#\"failures in resolving intra-doc link targets\"# },\n+    LintCompletion { label: \"invalid_codeblock_attributes\", description: r#\"codeblock attribute looks a lot like a known one\"# },\n+    LintCompletion { label: \"invalid_value\", description: r#\"an invalid value is being created (such as a NULL reference)\"# },\n+    LintCompletion { label: \"irrefutable_let_patterns\", description: r#\"detects irrefutable patterns in if-let and while-let statements\"# },\n+    LintCompletion { label: \"late_bound_lifetime_arguments\", description: r#\"detects generic lifetime arguments in path segments with late bound lifetime parameters\"# },\n+    LintCompletion { label: \"mixed_script_confusables\", description: r#\"detects Unicode scripts whose mixed script confusables codepoints are solely used\"# },\n+    LintCompletion { label: \"mutable_borrow_reservation_conflict\", description: r#\"reservation of a two-phased borrow conflicts with other shared borrows\"# },\n+    LintCompletion { label: \"non_camel_case_types\", description: r#\"types, variants, traits and type parameters should have camel case names\"# },\n+    LintCompletion { label: \"non_shorthand_field_patterns\", description: r#\"using `Struct { x: x }` instead of `Struct { x }` in a pattern\"# },\n+    LintCompletion { label: \"non_snake_case\", description: r#\"variables, methods, functions, lifetime parameters and modules should have snake case names\"# },\n+    LintCompletion { label: \"non_upper_case_globals\", description: r#\"static constants should have uppercase identifiers\"# },\n+    LintCompletion { label: \"no_mangle_generic_items\", description: r#\"generic items must be mangled\"# },\n+    LintCompletion { label: \"overlapping_patterns\", description: r#\"detects overlapping patterns\"# },\n+    LintCompletion { label: \"path_statements\", description: r#\"path statements with no effect\"# },\n+    LintCompletion { label: \"private_in_public\", description: r#\"detect private items in public interfaces not caught by the old implementation\"# },\n+    LintCompletion { label: \"proc_macro_derive_resolution_fallback\", description: r#\"detects proc macro derives using inaccessible names from parent modules\"# },\n+    LintCompletion { label: \"redundant_semicolons\", description: r#\"detects unnecessary trailing semicolons\"# },\n+    LintCompletion { label: \"renamed_and_removed_lints\", description: r#\"lints that have been renamed or removed\"# },\n+    LintCompletion { label: \"safe_packed_borrows\", description: r#\"safe borrows of fields of packed structs were erroneously allowed\"# },\n+    LintCompletion { label: \"stable_features\", description: r#\"stable features found in `#[feature]` directive\"# },\n+    LintCompletion { label: \"trivial_bounds\", description: r#\"these bounds don't depend on an type parameters\"# },\n+    LintCompletion { label: \"type_alias_bounds\", description: r#\"bounds in type aliases are not enforced\"# },\n+    LintCompletion { label: \"tyvar_behind_raw_pointer\", description: r#\"raw pointer to an inference variable\"# },\n+    LintCompletion { label: \"uncommon_codepoints\", description: r#\"detects uncommon Unicode codepoints in identifiers\"# },\n+    LintCompletion { label: \"unconditional_recursion\", description: r#\"functions that cannot return without calling themselves\"# },\n+    LintCompletion { label: \"unknown_lints\", description: r#\"unrecognized lint attribute\"# },\n+    LintCompletion { label: \"unnameable_test_items\", description: r#\"detects an item that cannot be named being marked as `#[test_case]`\"# },\n+    LintCompletion { label: \"unreachable_code\", description: r#\"detects unreachable code paths\"# },\n+    LintCompletion { label: \"unreachable_patterns\", description: r#\"detects unreachable patterns\"# },\n+    LintCompletion { label: \"unstable_name_collisions\", description: r#\"detects name collision with an existing but unstable method\"# },\n+    LintCompletion { label: \"unused_allocation\", description: r#\"detects unnecessary allocations that can be eliminated\"# },\n+    LintCompletion { label: \"unused_assignments\", description: r#\"detect assignments that will never be read\"# },\n+    LintCompletion { label: \"unused_attributes\", description: r#\"detects attributes that were not used by the compiler\"# },\n+    LintCompletion { label: \"unused_braces\", description: r#\"unnecessary braces around an expression\"# },\n+    LintCompletion { label: \"unused_comparisons\", description: r#\"comparisons made useless by limits of the types involved\"# },\n+    LintCompletion { label: \"unused_doc_comments\", description: r#\"detects doc comments that aren't used by rustdoc\"# },\n+    LintCompletion { label: \"unused_features\", description: r#\"unused features found in crate-level `#[feature]` directives\"# },\n+    LintCompletion { label: \"unused_imports\", description: r#\"imports that are never used\"# },\n+    LintCompletion { label: \"unused_labels\", description: r#\"detects labels that are never used\"# },\n+    LintCompletion { label: \"unused_macros\", description: r#\"detects macros that were not used\"# },\n+    LintCompletion { label: \"unused_must_use\", description: r#\"unused result of a type flagged as `#[must_use]`\"# },\n+    LintCompletion { label: \"unused_mut\", description: r#\"detect mut variables which don't need to be mutable\"# },\n+    LintCompletion { label: \"unused_parens\", description: r#\"`if`, `match`, `while` and `return` do not need parentheses\"# },\n+    LintCompletion { label: \"unused_unsafe\", description: r#\"unnecessary use of an `unsafe` block\"# },\n+    LintCompletion { label: \"unused_variables\", description: r#\"detect variables which are not used in any way\"# },\n+    LintCompletion { label: \"warnings\", description: r#\"mass-change the level for lints which produce warnings\"# },\n+    LintCompletion { label: \"where_clauses_object_safety\", description: r#\"checks the object safety of where clauses\"# },\n+    LintCompletion { label: \"while_true\", description: r#\"suggest using `loop { }` instead of `while true { }`\"# },\n+    LintCompletion { label: \"ambiguous_associated_items\", description: r#\"ambiguous associated items\"# },\n+    LintCompletion { label: \"arithmetic_overflow\", description: r#\"arithmetic operation overflows\"# },\n+    LintCompletion { label: \"conflicting_repr_hints\", description: r#\"conflicts between `#[repr(..)]` hints that were previously accepted and used in practice\"# },\n+    LintCompletion { label: \"const_err\", description: r#\"constant evaluation detected erroneous expression\"# },\n+    LintCompletion { label: \"ill_formed_attribute_input\", description: r#\"ill-formed attribute inputs that were previously accepted and used in practice\"# },\n+    LintCompletion { label: \"incomplete_include\", description: r#\"trailing content in included file\"# },\n+    LintCompletion { label: \"invalid_type_param_default\", description: r#\"type parameter default erroneously allowed in invalid location\"# },\n+    LintCompletion { label: \"macro_expanded_macro_exports_accessed_by_absolute_paths\", description: r#\"macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\"# },\n+    LintCompletion { label: \"missing_fragment_specifier\", description: r#\"detects missing fragment specifiers in unused `macro_rules!` patterns\"# },\n+    LintCompletion { label: \"mutable_transmutes\", description: r#\"mutating transmuted &mut T from &T may cause undefined behavior\"# },\n+    LintCompletion { label: \"no_mangle_const_items\", description: r#\"const items will not have their symbols exported\"# },\n+    LintCompletion { label: \"order_dependent_trait_objects\", description: r#\"trait-object types were treated as different depending on marker-trait order\"# },\n+    LintCompletion { label: \"overflowing_literals\", description: r#\"literal out of range for its type\"# },\n+    LintCompletion { label: \"patterns_in_fns_without_body\", description: r#\"patterns in functions without body were erroneously allowed\"# },\n+    LintCompletion { label: \"pub_use_of_private_extern_crate\", description: r#\"detect public re-exports of private extern crates\"# },\n+    LintCompletion { label: \"soft_unstable\", description: r#\"a feature gate that doesn't break dependent crates\"# },\n+    LintCompletion { label: \"unconditional_panic\", description: r#\"operation will cause a panic at runtime\"# },\n+    LintCompletion { label: \"unknown_crate_types\", description: r#\"unknown crate type found in `#[crate_type]` directive\"# },\n+];"}]}