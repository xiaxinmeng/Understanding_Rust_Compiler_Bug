{"sha": "fc1e543f7abb69b8cab308410fa0a127950ee1c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjMWU1NDNmN2FiYjY5YjhjYWIzMDg0MTBmYTBhMTI3OTUwZWUxYzU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-23T11:44:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-23T11:49:45Z"}, "message": "Get rid of DefDatabase2", "tree": {"sha": "5e30f4e18a0ea83215fd48776f372546dece9431", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e30f4e18a0ea83215fd48776f372546dece9431"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc1e543f7abb69b8cab308410fa0a127950ee1c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc1e543f7abb69b8cab308410fa0a127950ee1c5", "html_url": "https://github.com/rust-lang/rust/commit/fc1e543f7abb69b8cab308410fa0a127950ee1c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc1e543f7abb69b8cab308410fa0a127950ee1c5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "958862093e83083b188427246323047a2c9e7bab", "url": "https://api.github.com/repos/rust-lang/rust/commits/958862093e83083b188427246323047a2c9e7bab", "html_url": "https://github.com/rust-lang/rust/commit/958862093e83083b188427246323047a2c9e7bab"}], "stats": {"total": 258, "additions": 123, "deletions": 135}, "files": [{"sha": "5f96c974bc10eb960b9b2d7eac4f3cb2cf3a6f32", "filename": "crates/ra_assists/src/test_db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_assists%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_assists%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ftest_db.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -9,7 +9,7 @@ use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath\n     ra_db::SourceDatabaseStorage,\n     hir::db::InternDatabaseStorage,\n     hir::db::AstDatabaseStorage,\n-    hir::db::DefDatabase2Storage,\n+    hir::db::DefDatabaseStorage,\n     hir::db::HirDatabaseStorage\n )]\n #[derive(Debug, Default)]"}, {"sha": "399101b835eefb9e4a2ede3398eade16675dcbb3", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -17,7 +17,7 @@ use crate::{\n \n pub use hir_def::db::{\n     BodyQuery, BodyWithSourceMapQuery, ConstDataQuery, CrateDefMapQuery, CrateLangItemsQuery,\n-    DefDatabase2, DefDatabase2Storage, DocumentationQuery, EnumDataQuery, ExprScopesQuery,\n+    DefDatabase, DefDatabaseStorage, DocumentationQuery, EnumDataQuery, ExprScopesQuery,\n     FunctionDataQuery, GenericParamsQuery, ImplDataQuery, InternDatabase, InternDatabaseStorage,\n     LangItemQuery, ModuleLangItemsQuery, RawItemsQuery, RawItemsWithSourceMapQuery,\n     StaticDataQuery, StructDataQuery, TraitDataQuery, TypeAliasDataQuery,\n@@ -27,8 +27,6 @@ pub use hir_expand::db::{\n     ParseMacroQuery,\n };\n \n-pub use DefDatabase2 as DefDatabase;\n-\n #[salsa::query_group(HirDatabaseStorage)]\n #[salsa::requires(salsa::Database)]\n pub trait HirDatabase: DefDatabase + AstDatabase {"}, {"sha": "03c7ac15526ecb48682a8dab16045c51ecfe2698", "filename": "crates/ra_hir/src/test_db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ftest_db.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -2,7 +2,7 @@\n \n use std::{panic, sync::Arc};\n \n-use hir_def::{db::DefDatabase2, ModuleId};\n+use hir_def::{db::DefDatabase, ModuleId};\n use hir_expand::diagnostics::DiagnosticSink;\n use parking_lot::Mutex;\n use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath, SourceDatabase};\n@@ -14,7 +14,7 @@ use crate::{db, debug::HirDebugHelper};\n     ra_db::SourceDatabaseStorage,\n     db::InternDatabaseStorage,\n     db::AstDatabaseStorage,\n-    db::DefDatabase2Storage,\n+    db::DefDatabaseStorage,\n     db::HirDatabaseStorage\n )]\n #[derive(Debug, Default)]"}, {"sha": "20e9a1eb516ef086ae985d66e8b845effc2330b4", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -11,7 +11,7 @@ use ra_arena::{map::ArenaMap, Arena};\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n use crate::{\n-    db::DefDatabase2, trace::Trace, type_ref::TypeRef, AstItemDef, EnumId, HasChildSource,\n+    db::DefDatabase, trace::Trace, type_ref::TypeRef, AstItemDef, EnumId, HasChildSource,\n     LocalEnumVariantId, LocalStructFieldId, StructOrUnionId, VariantId,\n };\n \n@@ -49,10 +49,7 @@ pub struct StructFieldData {\n }\n \n impl StructData {\n-    pub(crate) fn struct_data_query(\n-        db: &impl DefDatabase2,\n-        id: StructOrUnionId,\n-    ) -> Arc<StructData> {\n+    pub(crate) fn struct_data_query(db: &impl DefDatabase, id: StructOrUnionId) -> Arc<StructData> {\n         let src = id.source(db);\n         let name = src.value.name().map(|n| n.as_name());\n         let variant_data = VariantData::new(src.value.kind());\n@@ -62,7 +59,7 @@ impl StructData {\n }\n \n impl EnumData {\n-    pub(crate) fn enum_data_query(db: &impl DefDatabase2, e: EnumId) -> Arc<EnumData> {\n+    pub(crate) fn enum_data_query(db: &impl DefDatabase, e: EnumId) -> Arc<EnumData> {\n         let src = e.source(db);\n         let name = src.value.name().map(|n| n.as_name());\n         let mut trace = Trace::new_for_arena();\n@@ -79,7 +76,7 @@ impl EnumData {\n impl HasChildSource for EnumId {\n     type ChildId = LocalEnumVariantId;\n     type Value = ast::EnumVariant;\n-    fn child_source(&self, db: &impl DefDatabase2) -> Source<ArenaMap<Self::ChildId, Self::Value>> {\n+    fn child_source(&self, db: &impl DefDatabase) -> Source<ArenaMap<Self::ChildId, Self::Value>> {\n         let src = self.source(db);\n         let mut trace = Trace::new_for_map();\n         lower_enum(&mut trace, &src.value);\n@@ -124,7 +121,7 @@ impl HasChildSource for VariantId {\n     type ChildId = LocalStructFieldId;\n     type Value = Either<ast::TupleFieldDef, ast::RecordFieldDef>;\n \n-    fn child_source(&self, db: &impl DefDatabase2) -> Source<ArenaMap<Self::ChildId, Self::Value>> {\n+    fn child_source(&self, db: &impl DefDatabase) -> Source<ArenaMap<Self::ChildId, Self::Value>> {\n         let src = match self {\n             VariantId::EnumVariantId(it) => {\n                 // I don't really like the fact that we call into parent source"}, {"sha": "48ce8cd9369a1f88ab24144acfef799e72c022b3", "filename": "crates/ra_hir_def/src/attr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fattr.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -12,7 +12,7 @@ use ra_syntax::{\n use tt::Subtree;\n \n use crate::{\n-    db::DefDatabase2, path::Path, AdtId, AstItemDef, AttrDefId, HasChildSource, HasSource, Lookup,\n+    db::DefDatabase, path::Path, AdtId, AstItemDef, AttrDefId, HasChildSource, HasSource, Lookup,\n };\n \n #[derive(Default, Debug, Clone, PartialEq, Eq)]\n@@ -32,7 +32,7 @@ impl ops::Deref for Attrs {\n }\n \n impl Attrs {\n-    pub(crate) fn attrs_query(db: &impl DefDatabase2, def: AttrDefId) -> Attrs {\n+    pub(crate) fn attrs_query(db: &impl DefDatabase, def: AttrDefId) -> Attrs {\n         match def {\n             AttrDefId::ModuleId(module) => {\n                 let def_map = db.crate_def_map(module.krate);\n@@ -162,7 +162,7 @@ impl Attr {\n fn attrs_from_ast<D, N>(src: AstId<N>, db: &D) -> Attrs\n where\n     N: ast::AttrsOwner,\n-    D: DefDatabase2,\n+    D: DefDatabase,\n {\n     let hygiene = Hygiene::new(db, src.file_id());\n     Attr::from_attrs_owner(&src.to_node(db), &hygiene)\n@@ -172,7 +172,7 @@ fn attrs_from_loc<T, D>(node: T, db: &D) -> Attrs\n where\n     T: HasSource,\n     T::Value: ast::AttrsOwner,\n-    D: DefDatabase2,\n+    D: DefDatabase,\n {\n     let src = node.source(db);\n     let hygiene = Hygiene::new(db, src.file_id);"}, {"sha": "225638b422c41e5c7cec2b34ca448bc53a56cc2b", "filename": "crates/ra_hir_def/src/body.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -13,7 +13,7 @@ use ra_syntax::{ast, AstNode, AstPtr};\n use rustc_hash::FxHashMap;\n \n use crate::{\n-    db::DefDatabase2,\n+    db::DefDatabase,\n     expr::{Expr, ExprId, Pat, PatId},\n     nameres::CrateDefMap,\n     path::Path,\n@@ -28,15 +28,15 @@ pub struct Expander {\n }\n \n impl Expander {\n-    pub fn new(db: &impl DefDatabase2, current_file_id: HirFileId, module: ModuleId) -> Expander {\n+    pub fn new(db: &impl DefDatabase, current_file_id: HirFileId, module: ModuleId) -> Expander {\n         let crate_def_map = db.crate_def_map(module.krate);\n         let hygiene = Hygiene::new(db, current_file_id);\n         Expander { crate_def_map, current_file_id, hygiene, module }\n     }\n \n     fn enter_expand(\n         &mut self,\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         macro_call: ast::MacroCall,\n     ) -> Option<(Mark, ast::Expr)> {\n         let ast_id = AstId::new(\n@@ -67,7 +67,7 @@ impl Expander {\n         None\n     }\n \n-    fn exit(&mut self, db: &impl DefDatabase2, mark: Mark) {\n+    fn exit(&mut self, db: &impl DefDatabase, mark: Mark) {\n         self.hygiene = Hygiene::new(db, mark.file_id);\n         self.current_file_id = mark.file_id;\n         std::mem::forget(mark);\n@@ -81,7 +81,7 @@ impl Expander {\n         Path::from_src(path, &self.hygiene)\n     }\n \n-    fn resolve_path_as_macro(&self, db: &impl DefDatabase2, path: &Path) -> Option<MacroDefId> {\n+    fn resolve_path_as_macro(&self, db: &impl DefDatabase, path: &Path) -> Option<MacroDefId> {\n         self.crate_def_map.resolve_path(db, self.module.module_id, path).0.get_macros()\n     }\n }\n@@ -142,7 +142,7 @@ pub struct BodySourceMap {\n \n impl Body {\n     pub(crate) fn body_with_source_map_query(\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         def: DefWithBodyId,\n     ) -> (Arc<Body>, Arc<BodySourceMap>) {\n         let mut params = None;\n@@ -169,12 +169,12 @@ impl Body {\n         (Arc::new(body), Arc::new(source_map))\n     }\n \n-    pub(crate) fn body_query(db: &impl DefDatabase2, def: DefWithBodyId) -> Arc<Body> {\n+    pub(crate) fn body_query(db: &impl DefDatabase, def: DefWithBodyId) -> Arc<Body> {\n         db.body_with_source_map(def).0\n     }\n \n     fn new(\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         expander: Expander,\n         params: Option<ast::ParamList>,\n         body: Option<ast::Expr>,"}, {"sha": "f4640dfa4f6fee7afc3ad8f0fa5d9b503d97dd77", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -17,7 +17,7 @@ use test_utils::tested_by;\n use crate::{\n     body::{Body, BodySourceMap, Expander, PatPtr},\n     builtin_type::{BuiltinFloat, BuiltinInt},\n-    db::DefDatabase2,\n+    db::DefDatabase,\n     expr::{\n         ArithOp, Array, BinaryOp, BindingAnnotation, CmpOp, Expr, ExprId, Literal, LogicOp,\n         MatchArm, Ordering, Pat, PatId, RecordFieldPat, RecordLitField, Statement,\n@@ -28,7 +28,7 @@ use crate::{\n };\n \n pub(super) fn lower(\n-    db: &impl DefDatabase2,\n+    db: &impl DefDatabase,\n     expander: Expander,\n     params: Option<ast::ParamList>,\n     body: Option<ast::Expr>,\n@@ -57,7 +57,7 @@ struct ExprCollector<DB> {\n \n impl<'a, DB> ExprCollector<&'a DB>\n where\n-    DB: DefDatabase2,\n+    DB: DefDatabase,\n {\n     fn collect(\n         mut self,"}, {"sha": "20d707bc427d5b1322809cf43b6a6c9622c753f3", "filename": "crates/ra_hir_def/src/body/scope.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Fscope.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -7,7 +7,7 @@ use rustc_hash::FxHashMap;\n \n use crate::{\n     body::Body,\n-    db::DefDatabase2,\n+    db::DefDatabase,\n     expr::{Expr, ExprId, Pat, PatId, Statement},\n     DefWithBodyId,\n };\n@@ -45,7 +45,7 @@ pub struct ScopeData {\n }\n \n impl ExprScopes {\n-    pub(crate) fn expr_scopes_query(db: &impl DefDatabase2, def: DefWithBodyId) -> Arc<ExprScopes> {\n+    pub(crate) fn expr_scopes_query(db: &impl DefDatabase, def: DefWithBodyId) -> Arc<ExprScopes> {\n         let body = db.body(def);\n         Arc::new(ExprScopes::new(&*body))\n     }\n@@ -176,7 +176,7 @@ mod tests {\n     use ra_syntax::{algo::find_node_at_offset, ast, AstNode};\n     use test_utils::{assert_eq_text, covers, extract_offset};\n \n-    use crate::{db::DefDatabase2, test_db::TestDB, FunctionId, ModuleDefId};\n+    use crate::{db::DefDatabase, test_db::TestDB, FunctionId, ModuleDefId};\n \n     fn find_function(db: &TestDB, file_id: FileId) -> FunctionId {\n         let krate = db.test_crate();"}, {"sha": "f0b3e198a339b25776442d640069592ae4b14303", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -9,7 +9,7 @@ use hir_expand::{\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n use crate::{\n-    db::DefDatabase2,\n+    db::DefDatabase,\n     type_ref::{Mutability, TypeRef},\n     AssocItemId, AstItemDef, ConstId, ConstLoc, ContainerId, FunctionId, FunctionLoc, HasSource,\n     ImplId, Intern, Lookup, StaticId, TraitId, TypeAliasId, TypeAliasLoc,\n@@ -26,7 +26,7 @@ pub struct FunctionData {\n }\n \n impl FunctionData {\n-    pub(crate) fn fn_data_query(db: &impl DefDatabase2, func: FunctionId) -> Arc<FunctionData> {\n+    pub(crate) fn fn_data_query(db: &impl DefDatabase, func: FunctionId) -> Arc<FunctionData> {\n         let src = func.lookup(db).source(db);\n         let name = src.value.name().map(|n| n.as_name()).unwrap_or_else(Name::missing);\n         let mut params = Vec::new();\n@@ -74,7 +74,7 @@ pub struct TypeAliasData {\n \n impl TypeAliasData {\n     pub(crate) fn type_alias_data_query(\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         typ: TypeAliasId,\n     ) -> Arc<TypeAliasData> {\n         let node = typ.lookup(db).source(db).value;\n@@ -92,7 +92,7 @@ pub struct TraitData {\n }\n \n impl TraitData {\n-    pub(crate) fn trait_data_query(db: &impl DefDatabase2, tr: TraitId) -> Arc<TraitData> {\n+    pub(crate) fn trait_data_query(db: &impl DefDatabase, tr: TraitId) -> Arc<TraitData> {\n         let src = tr.source(db);\n         let name = src.value.name().map(|n| n.as_name());\n         let auto = src.value.is_auto();\n@@ -144,7 +144,7 @@ pub struct ImplData {\n }\n \n impl ImplData {\n-    pub(crate) fn impl_data_query(db: &impl DefDatabase2, id: ImplId) -> Arc<ImplData> {\n+    pub(crate) fn impl_data_query(db: &impl DefDatabase, id: ImplId) -> Arc<ImplData> {\n         let src = id.source(db);\n         let items = db.ast_id_map(src.file_id);\n \n@@ -198,12 +198,12 @@ pub struct ConstData {\n }\n \n impl ConstData {\n-    pub(crate) fn const_data_query(db: &impl DefDatabase2, konst: ConstId) -> Arc<ConstData> {\n+    pub(crate) fn const_data_query(db: &impl DefDatabase, konst: ConstId) -> Arc<ConstData> {\n         let node = konst.lookup(db).source(db).value;\n         const_data_for(&node)\n     }\n \n-    pub(crate) fn static_data_query(db: &impl DefDatabase2, konst: StaticId) -> Arc<ConstData> {\n+    pub(crate) fn static_data_query(db: &impl DefDatabase, konst: StaticId) -> Arc<ConstData> {\n         let node = konst.source(db).value;\n         const_data_for(&node)\n     }"}, {"sha": "cf3a6ccd83e8bfd5db441cad9ee0fdc2c8e218e2", "filename": "crates/ra_hir_def/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdb.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -41,8 +41,8 @@ pub trait InternDatabase: SourceDatabase {\n     fn intern_impl(&self, loc: ItemLoc<ast::ImplBlock>) -> crate::ImplId;\n }\n \n-#[salsa::query_group(DefDatabase2Storage)]\n-pub trait DefDatabase2: InternDatabase + AstDatabase {\n+#[salsa::query_group(DefDatabaseStorage)]\n+pub trait DefDatabase: InternDatabase + AstDatabase {\n     #[salsa::invoke(RawItems::raw_items_with_source_map_query)]\n     fn raw_items_with_source_map(\n         &self,"}, {"sha": "69846fd1b2a1d6ac2a3156516c9b3b1a4e4fd221", "filename": "crates/ra_hir_def/src/docs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdocs.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -5,7 +5,7 @@ use std::sync::Arc;\n use hir_expand::either::Either;\n use ra_syntax::ast;\n \n-use crate::{db::DefDatabase2, AdtId, AstItemDef, AttrDefId, HasChildSource, HasSource, Lookup};\n+use crate::{db::DefDatabase, AdtId, AstItemDef, AttrDefId, HasChildSource, HasSource, Lookup};\n \n /// Holds documentation\n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -27,7 +27,7 @@ impl Documentation {\n     }\n \n     pub(crate) fn documentation_query(\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         def: AttrDefId,\n     ) -> Option<Documentation> {\n         match def {"}, {"sha": "015fe772e54b38fdfcda032421173d824422e928", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -8,7 +8,7 @@ use hir_expand::name::{self, AsName, Name};\n use ra_syntax::ast::{self, NameOwner, TypeBoundsOwner, TypeParamsOwner};\n \n use crate::{\n-    db::DefDatabase2,\n+    db::DefDatabase,\n     type_ref::{TypeBound, TypeRef},\n     AdtId, AstItemDef, ContainerId, GenericDefId, HasSource, Lookup,\n };\n@@ -42,15 +42,15 @@ pub struct WherePredicate {\n \n impl GenericParams {\n     pub(crate) fn generic_params_query(\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         def: GenericDefId,\n     ) -> Arc<GenericParams> {\n         let parent_generics = parent_generic_def(db, def).map(|it| db.generic_params(it));\n         Arc::new(GenericParams::new(db, def.into(), parent_generics))\n     }\n \n     fn new(\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         def: GenericDefId,\n         parent_params: Option<Arc<GenericParams>>,\n     ) -> GenericParams {\n@@ -168,7 +168,7 @@ impl GenericParams {\n     }\n }\n \n-fn parent_generic_def(db: &impl DefDatabase2, def: GenericDefId) -> Option<GenericDefId> {\n+fn parent_generic_def(db: &impl DefDatabase, def: GenericDefId) -> Option<GenericDefId> {\n     let container = match def {\n         GenericDefId::FunctionId(it) => it.lookup(db).container,\n         GenericDefId::TypeAliasId(it) => it.lookup(db).container,"}, {"sha": "df951c533041c63846a197e7308494e87c9dc16d", "filename": "crates/ra_hir_def/src/lang_item.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -8,7 +8,7 @@ use ra_syntax::SmolStr;\n use rustc_hash::FxHashMap;\n \n use crate::{\n-    db::DefDatabase2, AdtId, AttrDefId, CrateId, EnumId, FunctionId, ImplId, ModuleDefId, ModuleId,\n+    db::DefDatabase, AdtId, AttrDefId, CrateId, EnumId, FunctionId, ImplId, ModuleDefId, ModuleId,\n     StaticId, StructId, TraitId,\n };\n \n@@ -33,7 +33,7 @@ impl LangItems {\n     }\n \n     /// Salsa query. This will look for lang items in a specific crate.\n-    pub(crate) fn crate_lang_items_query(db: &impl DefDatabase2, krate: CrateId) -> Arc<LangItems> {\n+    pub(crate) fn crate_lang_items_query(db: &impl DefDatabase, krate: CrateId) -> Arc<LangItems> {\n         let mut lang_items = LangItems::default();\n \n         let crate_def_map = db.crate_def_map(krate);\n@@ -47,7 +47,7 @@ impl LangItems {\n     }\n \n     pub(crate) fn module_lang_items_query(\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         module: ModuleId,\n     ) -> Option<Arc<LangItems>> {\n         let mut lang_items = LangItems::default();\n@@ -62,7 +62,7 @@ impl LangItems {\n     /// Salsa query. Look for a lang item, starting from the specified crate and recursively\n     /// traversing its dependencies.\n     pub(crate) fn lang_item_query(\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         start_crate: CrateId,\n         item: SmolStr,\n     ) -> Option<LangItemTarget> {\n@@ -76,7 +76,7 @@ impl LangItems {\n             .find_map(|dep| db.lang_item(dep.crate_id, item.clone()))\n     }\n \n-    fn collect_lang_items(&mut self, db: &impl DefDatabase2, module: ModuleId) {\n+    fn collect_lang_items(&mut self, db: &impl DefDatabase, module: ModuleId) {\n         // Look for impl targets\n         let def_map = db.crate_def_map(module.krate);\n         let module_data = &def_map[module.module_id];\n@@ -106,7 +106,7 @@ impl LangItems {\n \n     fn collect_lang_item<T>(\n         &mut self,\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         item: T,\n         constructor: fn(T) -> LangItemTarget,\n     ) where"}, {"sha": "1b2bc6f45e3bf3d07abe2693ac646766ea5d16c6", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -48,7 +48,7 @@ pub enum ModuleSource {\n \n impl ModuleSource {\n     pub fn new(\n-        db: &impl db::DefDatabase2,\n+        db: &impl db::DefDatabase,\n         file_id: Option<FileId>,\n         decl_id: Option<AstId<ast::Module>>,\n     ) -> ModuleSource {\n@@ -67,10 +67,7 @@ impl ModuleSource {\n     }\n \n     // FIXME: this methods do not belong here\n-    pub fn from_position(\n-        db: &impl db::DefDatabase2,\n-        position: ra_db::FilePosition,\n-    ) -> ModuleSource {\n+    pub fn from_position(db: &impl db::DefDatabase, position: ra_db::FilePosition) -> ModuleSource {\n         let parse = db.parse(position.file_id);\n         match &ra_syntax::algo::find_node_at_offset::<ast::Module>(\n             parse.tree().syntax(),\n@@ -84,7 +81,7 @@ impl ModuleSource {\n         }\n     }\n \n-    pub fn from_child_node(db: &impl db::DefDatabase2, child: Source<&SyntaxNode>) -> ModuleSource {\n+    pub fn from_child_node(db: &impl db::DefDatabase, child: Source<&SyntaxNode>) -> ModuleSource {\n         if let Some(m) =\n             child.value.ancestors().filter_map(ast::Module::cast).find(|it| !it.has_semi())\n         {\n@@ -96,7 +93,7 @@ impl ModuleSource {\n         }\n     }\n \n-    pub fn from_file_id(db: &impl db::DefDatabase2, file_id: FileId) -> ModuleSource {\n+    pub fn from_file_id(db: &impl db::DefDatabase, file_id: FileId) -> ModuleSource {\n         let source_file = db.parse(file_id).tree();\n         ModuleSource::SourceFile(source_file)\n     }\n@@ -211,14 +208,14 @@ pub struct FunctionLoc {\n \n impl Intern for FunctionLoc {\n     type ID = FunctionId;\n-    fn intern(self, db: &impl db::DefDatabase2) -> FunctionId {\n+    fn intern(self, db: &impl db::DefDatabase) -> FunctionId {\n         db.intern_function(self)\n     }\n }\n \n impl Lookup for FunctionId {\n     type Data = FunctionLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase2) -> FunctionLoc {\n+    fn lookup(&self, db: &impl db::DefDatabase) -> FunctionLoc {\n         db.lookup_intern_function(*self)\n     }\n }\n@@ -301,14 +298,14 @@ pub struct ConstLoc {\n \n impl Intern for ConstLoc {\n     type ID = ConstId;\n-    fn intern(self, db: &impl db::DefDatabase2) -> ConstId {\n+    fn intern(self, db: &impl db::DefDatabase) -> ConstId {\n         db.intern_const(self)\n     }\n }\n \n impl Lookup for ConstId {\n     type Data = ConstLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase2) -> ConstLoc {\n+    fn lookup(&self, db: &impl db::DefDatabase) -> ConstLoc {\n         db.lookup_intern_const(*self)\n     }\n }\n@@ -349,14 +346,14 @@ pub struct TypeAliasLoc {\n \n impl Intern for TypeAliasLoc {\n     type ID = TypeAliasId;\n-    fn intern(self, db: &impl db::DefDatabase2) -> TypeAliasId {\n+    fn intern(self, db: &impl db::DefDatabase) -> TypeAliasId {\n         db.intern_type_alias(self)\n     }\n }\n \n impl Lookup for TypeAliasId {\n     type Data = TypeAliasLoc;\n-    fn lookup(&self, db: &impl db::DefDatabase2) -> TypeAliasLoc {\n+    fn lookup(&self, db: &impl db::DefDatabase) -> TypeAliasLoc {\n         db.lookup_intern_type_alias(*self)\n     }\n }\n@@ -510,20 +507,20 @@ impl_froms!(\n \n trait Intern {\n     type ID;\n-    fn intern(self, db: &impl db::DefDatabase2) -> Self::ID;\n+    fn intern(self, db: &impl db::DefDatabase) -> Self::ID;\n }\n \n pub trait Lookup {\n     type Data;\n-    fn lookup(&self, db: &impl db::DefDatabase2) -> Self::Data;\n+    fn lookup(&self, db: &impl db::DefDatabase) -> Self::Data;\n }\n \n pub trait HasModule {\n-    fn module(&self, db: &impl db::DefDatabase2) -> ModuleId;\n+    fn module(&self, db: &impl db::DefDatabase) -> ModuleId;\n }\n \n impl HasModule for FunctionLoc {\n-    fn module(&self, db: &impl db::DefDatabase2) -> ModuleId {\n+    fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n         match self.container {\n             ContainerId::ModuleId(it) => it,\n             ContainerId::ImplId(it) => it.module(db),\n@@ -533,7 +530,7 @@ impl HasModule for FunctionLoc {\n }\n \n impl HasModule for TypeAliasLoc {\n-    fn module(&self, db: &impl db::DefDatabase2) -> ModuleId {\n+    fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n         match self.container {\n             ContainerId::ModuleId(it) => it,\n             ContainerId::ImplId(it) => it.module(db),\n@@ -543,7 +540,7 @@ impl HasModule for TypeAliasLoc {\n }\n \n impl HasModule for ConstLoc {\n-    fn module(&self, db: &impl db::DefDatabase2) -> ModuleId {\n+    fn module(&self, db: &impl db::DefDatabase) -> ModuleId {\n         match self.container {\n             ContainerId::ModuleId(it) => it,\n             ContainerId::ImplId(it) => it.module(db),\n@@ -554,13 +551,13 @@ impl HasModule for ConstLoc {\n \n pub trait HasSource {\n     type Value;\n-    fn source(&self, db: &impl db::DefDatabase2) -> Source<Self::Value>;\n+    fn source(&self, db: &impl db::DefDatabase) -> Source<Self::Value>;\n }\n \n impl HasSource for FunctionLoc {\n     type Value = ast::FnDef;\n \n-    fn source(&self, db: &impl db::DefDatabase2) -> Source<ast::FnDef> {\n+    fn source(&self, db: &impl db::DefDatabase) -> Source<ast::FnDef> {\n         let node = self.ast_id.to_node(db);\n         Source::new(self.ast_id.file_id(), node)\n     }\n@@ -569,7 +566,7 @@ impl HasSource for FunctionLoc {\n impl HasSource for TypeAliasLoc {\n     type Value = ast::TypeAliasDef;\n \n-    fn source(&self, db: &impl db::DefDatabase2) -> Source<ast::TypeAliasDef> {\n+    fn source(&self, db: &impl db::DefDatabase) -> Source<ast::TypeAliasDef> {\n         let node = self.ast_id.to_node(db);\n         Source::new(self.ast_id.file_id(), node)\n     }\n@@ -578,7 +575,7 @@ impl HasSource for TypeAliasLoc {\n impl HasSource for ConstLoc {\n     type Value = ast::ConstDef;\n \n-    fn source(&self, db: &impl db::DefDatabase2) -> Source<ast::ConstDef> {\n+    fn source(&self, db: &impl db::DefDatabase) -> Source<ast::ConstDef> {\n         let node = self.ast_id.to_node(db);\n         Source::new(self.ast_id.file_id(), node)\n     }\n@@ -589,6 +586,6 @@ pub trait HasChildSource {\n     type Value;\n     fn child_source(\n         &self,\n-        db: &impl db::DefDatabase2,\n+        db: &impl db::DefDatabase,\n     ) -> Source<ArenaMap<Self::ChildId, Self::Value>>;\n }"}, {"sha": "101203b7b5a1322419e9fcf7c8f590b7a51a795f", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -71,7 +71,7 @@ use rustc_hash::{FxHashMap, FxHashSet};\n \n use crate::{\n     builtin_type::BuiltinType,\n-    db::DefDatabase2,\n+    db::DefDatabase,\n     nameres::{\n         diagnostics::DefDiagnostic, path_resolution::ResolveMode, per_ns::PerNs, raw::ImportId,\n     },\n@@ -220,7 +220,7 @@ impl CrateDefMap {\n     pub(crate) fn crate_def_map_query(\n         // Note that this doesn't have `+ AstDatabase`!\n         // This gurantess that `CrateDefMap` is stable across reparses.\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         krate: CrateId,\n     ) -> Arc<CrateDefMap> {\n         let _p = profile(\"crate_def_map_query\");\n@@ -262,7 +262,7 @@ impl CrateDefMap {\n \n     pub fn add_diagnostics(\n         &self,\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         module: CrateModuleId,\n         sink: &mut DiagnosticSink,\n     ) {\n@@ -271,7 +271,7 @@ impl CrateDefMap {\n \n     pub fn resolve_path(\n         &self,\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         original_module: CrateModuleId,\n         path: &Path,\n     ) -> (PerNs, Option<usize>) {\n@@ -295,7 +295,7 @@ impl ModuleData {\n     /// Returns a node which defines this module. That is, a file or a `mod foo {}` with items.\n     pub fn definition_source(\n         &self,\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n     ) -> Source<Either<ast::SourceFile, ast::Module>> {\n         if let Some(file_id) = self.definition {\n             let sf = db.parse(file_id).tree();\n@@ -307,7 +307,7 @@ impl ModuleData {\n \n     /// Returns a node which declares this module, either a `mod foo;` or a `mod foo {}`.\n     /// `None` for the crate root.\n-    pub fn declaration_source(&self, db: &impl DefDatabase2) -> Option<Source<ast::Module>> {\n+    pub fn declaration_source(&self, db: &impl DefDatabase) -> Option<Source<ast::Module>> {\n         let decl = self.declaration?;\n         let value = decl.to_node(db);\n         Some(Source { file_id: decl.file_id(), value })\n@@ -319,7 +319,7 @@ mod diagnostics {\n     use ra_db::RelativePathBuf;\n     use ra_syntax::{ast, AstPtr};\n \n-    use crate::{db::DefDatabase2, diagnostics::UnresolvedModule, nameres::CrateModuleId, AstId};\n+    use crate::{db::DefDatabase, diagnostics::UnresolvedModule, nameres::CrateModuleId, AstId};\n \n     #[derive(Debug, PartialEq, Eq)]\n     pub(super) enum DefDiagnostic {\n@@ -333,7 +333,7 @@ mod diagnostics {\n     impl DefDiagnostic {\n         pub(super) fn add_to(\n             &self,\n-            db: &impl DefDatabase2,\n+            db: &impl DefDatabase,\n             target_module: CrateModuleId,\n             sink: &mut DiagnosticSink,\n         ) {"}, {"sha": "1894b072a9d50449ddc3630b0eef843d7bf15c0a", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -13,7 +13,7 @@ use test_utils::tested_by;\n \n use crate::{\n     attr::Attrs,\n-    db::DefDatabase2,\n+    db::DefDatabase,\n     nameres::{\n         diagnostics::DefDiagnostic, mod_resolution::ModDir, path_resolution::ReachedFixedPoint,\n         per_ns::PerNs, raw, CrateDefMap, ModuleData, Resolution, ResolveMode,\n@@ -24,7 +24,7 @@ use crate::{\n     StructOrUnionId, TraitId, TypeAliasLoc, UnionId,\n };\n \n-pub(super) fn collect_defs(db: &impl DefDatabase2, mut def_map: CrateDefMap) -> CrateDefMap {\n+pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n     let crate_graph = db.crate_graph();\n \n     // populate external prelude\n@@ -108,7 +108,7 @@ struct DefCollector<'a, DB> {\n \n impl<DB> DefCollector<'_, DB>\n where\n-    DB: DefDatabase2,\n+    DB: DefDatabase,\n {\n     fn collect(&mut self) {\n         let crate_graph = self.db.crate_graph();\n@@ -530,7 +530,7 @@ struct ModCollector<'a, D> {\n \n impl<DB> ModCollector<'_, &'_ mut DefCollector<'_, DB>>\n where\n-    DB: DefDatabase2,\n+    DB: DefDatabase,\n {\n     fn collect(&mut self, items: &[raw::RawItem]) {\n         // Note: don't assert that inserted value is fresh: it's simply not true\n@@ -798,12 +798,12 @@ mod tests {\n     use ra_db::{fixture::WithFixture, SourceDatabase};\n     use rustc_hash::FxHashSet;\n \n-    use crate::{db::DefDatabase2, test_db::TestDB};\n+    use crate::{db::DefDatabase, test_db::TestDB};\n \n     use super::*;\n \n     fn do_collect_defs(\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         def_map: CrateDefMap,\n         monitor: MacroStackMonitor,\n     ) -> CrateDefMap {"}, {"sha": "14fb8ba3a734eccdabd7b099e2b77935f9b187c7", "filename": "crates/ra_hir_def/src/nameres/mod_resolution.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fmod_resolution.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -3,7 +3,7 @@ use hir_expand::name::Name;\n use ra_db::{FileId, RelativePathBuf};\n use ra_syntax::SmolStr;\n \n-use crate::{db::DefDatabase2, HirFileId};\n+use crate::{db::DefDatabase, HirFileId};\n \n #[derive(Clone, Debug)]\n pub(super) struct ModDir {\n@@ -40,7 +40,7 @@ impl ModDir {\n \n     pub(super) fn resolve_declaration(\n         &self,\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         file_id: HirFileId,\n         name: &Name,\n         attr_path: Option<&SmolStr>,"}, {"sha": "102009ac70170b94291db52a757bbb37bd141950", "filename": "crates/ra_hir_def/src/nameres/path_resolution.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fpath_resolution.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -15,7 +15,7 @@ use ra_db::Edition;\n use test_utils::tested_by;\n \n use crate::{\n-    db::DefDatabase2,\n+    db::DefDatabase,\n     nameres::{per_ns::PerNs, CrateDefMap},\n     path::{Path, PathKind},\n     AdtId, CrateModuleId, EnumVariantId, ModuleDefId, ModuleId,\n@@ -63,7 +63,7 @@ impl CrateDefMap {\n     // the result.\n     pub(super) fn resolve_path_fp_with_macro(\n         &self,\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         mode: ResolveMode,\n         original_module: CrateModuleId,\n         path: &Path,\n@@ -216,7 +216,7 @@ impl CrateDefMap {\n \n     fn resolve_name_in_module(\n         &self,\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         module: CrateModuleId,\n         name: &Name,\n     ) -> PerNs {\n@@ -243,7 +243,7 @@ impl CrateDefMap {\n         from_crate_root.or(from_extern_prelude)\n     }\n \n-    fn resolve_in_prelude(&self, db: &impl DefDatabase2, name: &Name) -> PerNs {\n+    fn resolve_in_prelude(&self, db: &impl DefDatabase, name: &Name) -> PerNs {\n         if let Some(prelude) = self.prelude {\n             let keep;\n             let def_map = if prelude.krate == self.krate {"}, {"sha": "7618cb0596ba5fb4c5365c75e550152fdc00da35", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -18,7 +18,7 @@ use test_utils::tested_by;\n \n use crate::{\n     attr::{Attr, Attrs},\n-    db::DefDatabase2,\n+    db::DefDatabase,\n     path::Path,\n     FileAstId, HirFileId, ModuleSource, Source,\n };\n@@ -67,14 +67,14 @@ impl ImportSourceMap {\n \n impl RawItems {\n     pub(crate) fn raw_items_query(\n-        db: &(impl DefDatabase2 + AstDatabase),\n+        db: &(impl DefDatabase + AstDatabase),\n         file_id: HirFileId,\n     ) -> Arc<RawItems> {\n         db.raw_items_with_source_map(file_id).0\n     }\n \n     pub(crate) fn raw_items_with_source_map_query(\n-        db: &(impl DefDatabase2 + AstDatabase),\n+        db: &(impl DefDatabase + AstDatabase),\n         file_id: HirFileId,\n     ) -> (Arc<RawItems>, Arc<ImportSourceMap>) {\n         let mut collector = RawItemsCollector {"}, {"sha": "b5053ba20ef1faf82382490a022d9913b3a7d112", "filename": "crates/ra_hir_def/src/nameres/tests.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -10,7 +10,7 @@ use insta::assert_snapshot;\n use ra_db::{fixture::WithFixture, SourceDatabase};\n use test_utils::covers;\n \n-use crate::{db::DefDatabase2, nameres::*, test_db::TestDB, CrateModuleId};\n+use crate::{db::DefDatabase, nameres::*, test_db::TestDB, CrateModuleId};\n \n fn def_map(fixtute: &str) -> String {\n     let dm = compute_crate_def_map(fixtute);"}, {"sha": "48a836a20ed75737f071e1ad9dceb02420f8acf4", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 28, "deletions": 32, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -11,7 +11,7 @@ use rustc_hash::FxHashSet;\n use crate::{\n     body::scope::{ExprScopes, ScopeId},\n     builtin_type::BuiltinType,\n-    db::DefDatabase2,\n+    db::DefDatabase,\n     expr::{ExprId, PatId},\n     generics::GenericParams,\n     nameres::{per_ns::PerNs, CrateDefMap},\n@@ -87,7 +87,7 @@ pub enum ValueNs {\n \n impl Resolver {\n     /// Resolve known trait from std, like `std::futures::Future`\n-    pub fn resolve_known_trait(&self, db: &impl DefDatabase2, path: &Path) -> Option<TraitId> {\n+    pub fn resolve_known_trait(&self, db: &impl DefDatabase, path: &Path) -> Option<TraitId> {\n         let res = self.resolve_module_path(db, path).take_types()?;\n         match res {\n             ModuleDefId::TraitId(it) => Some(it),\n@@ -96,7 +96,7 @@ impl Resolver {\n     }\n \n     /// Resolve known struct from std, like `std::boxed::Box`\n-    pub fn resolve_known_struct(&self, db: &impl DefDatabase2, path: &Path) -> Option<StructId> {\n+    pub fn resolve_known_struct(&self, db: &impl DefDatabase, path: &Path) -> Option<StructId> {\n         let res = self.resolve_module_path(db, path).take_types()?;\n         match res {\n             ModuleDefId::AdtId(AdtId::StructId(it)) => Some(it),\n@@ -105,7 +105,7 @@ impl Resolver {\n     }\n \n     /// Resolve known enum from std, like `std::result::Result`\n-    pub fn resolve_known_enum(&self, db: &impl DefDatabase2, path: &Path) -> Option<EnumId> {\n+    pub fn resolve_known_enum(&self, db: &impl DefDatabase, path: &Path) -> Option<EnumId> {\n         let res = self.resolve_module_path(db, path).take_types()?;\n         match res {\n             ModuleDefId::AdtId(AdtId::EnumId(it)) => Some(it),\n@@ -114,7 +114,7 @@ impl Resolver {\n     }\n \n     /// pub only for source-binder\n-    pub fn resolve_module_path(&self, db: &impl DefDatabase2, path: &Path) -> PerNs {\n+    pub fn resolve_module_path(&self, db: &impl DefDatabase, path: &Path) -> PerNs {\n         let (item_map, module) = match self.module() {\n             Some(it) => it,\n             None => return PerNs::none(),\n@@ -128,7 +128,7 @@ impl Resolver {\n \n     pub fn resolve_path_in_type_ns(\n         &self,\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         path: &Path,\n     ) -> Option<(TypeNs, Option<usize>)> {\n         if path.is_type_relative() {\n@@ -184,7 +184,7 @@ impl Resolver {\n \n     pub fn resolve_path_in_type_ns_fully(\n         &self,\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         path: &Path,\n     ) -> Option<TypeNs> {\n         let (res, unresolved) = self.resolve_path_in_type_ns(db, path)?;\n@@ -196,7 +196,7 @@ impl Resolver {\n \n     pub fn resolve_path_in_value_ns<'p>(\n         &self,\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         path: &'p Path,\n     ) -> Option<ResolveValueResult> {\n         if path.is_type_relative() {\n@@ -296,7 +296,7 @@ impl Resolver {\n \n     pub fn resolve_path_in_value_ns_fully(\n         &self,\n-        db: &impl DefDatabase2,\n+        db: &impl DefDatabase,\n         path: &Path,\n     ) -> Option<ValueNs> {\n         match self.resolve_path_in_value_ns(db, path)? {\n@@ -305,18 +305,18 @@ impl Resolver {\n         }\n     }\n \n-    pub fn resolve_path_as_macro(&self, db: &impl DefDatabase2, path: &Path) -> Option<MacroDefId> {\n+    pub fn resolve_path_as_macro(&self, db: &impl DefDatabase, path: &Path) -> Option<MacroDefId> {\n         let (item_map, module) = self.module()?;\n         item_map.resolve_path(db, module, path).0.get_macros()\n     }\n \n-    pub fn process_all_names(&self, db: &impl DefDatabase2, f: &mut dyn FnMut(Name, ScopeDef)) {\n+    pub fn process_all_names(&self, db: &impl DefDatabase, f: &mut dyn FnMut(Name, ScopeDef)) {\n         for scope in self.scopes.iter().rev() {\n             scope.process_names(db, f);\n         }\n     }\n \n-    pub fn traits_in_scope(&self, db: &impl DefDatabase2) -> FxHashSet<TraitId> {\n+    pub fn traits_in_scope(&self, db: &impl DefDatabase) -> FxHashSet<TraitId> {\n         let mut traits = FxHashSet::default();\n         for scope in &self.scopes {\n             if let Scope::ModuleScope(m) = scope {\n@@ -378,7 +378,7 @@ pub enum ScopeDef {\n }\n \n impl Scope {\n-    fn process_names(&self, db: &impl DefDatabase2, f: &mut dyn FnMut(Name, ScopeDef)) {\n+    fn process_names(&self, db: &impl DefDatabase, f: &mut dyn FnMut(Name, ScopeDef)) {\n         match self {\n             Scope::ModuleScope(m) => {\n                 // FIXME: should we provide `self` here?\n@@ -425,17 +425,13 @@ impl Scope {\n }\n \n // needs arbitrary_self_types to be a method... or maybe move to the def?\n-pub fn resolver_for_expr(\n-    db: &impl DefDatabase2,\n-    owner: DefWithBodyId,\n-    expr_id: ExprId,\n-) -> Resolver {\n+pub fn resolver_for_expr(db: &impl DefDatabase, owner: DefWithBodyId, expr_id: ExprId) -> Resolver {\n     let scopes = db.expr_scopes(owner);\n     resolver_for_scope(db, owner, scopes.scope_for(expr_id))\n }\n \n pub fn resolver_for_scope(\n-    db: &impl DefDatabase2,\n+    db: &impl DefDatabase,\n     owner: DefWithBodyId,\n     scope_id: Option<ScopeId>,\n ) -> Resolver {\n@@ -454,7 +450,7 @@ impl Resolver {\n         self\n     }\n \n-    fn push_generic_params_scope(self, db: &impl DefDatabase2, def: GenericDefId) -> Resolver {\n+    fn push_generic_params_scope(self, db: &impl DefDatabase, def: GenericDefId) -> Resolver {\n         let params = db.generic_params(def);\n         if params.params.is_empty() {\n             self\n@@ -487,24 +483,24 @@ impl Resolver {\n \n pub trait HasResolver {\n     /// Builds a resolver for type references inside this def.\n-    fn resolver(self, db: &impl DefDatabase2) -> Resolver;\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver;\n }\n \n impl HasResolver for ModuleId {\n-    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         let def_map = db.crate_def_map(self.krate);\n         Resolver::default().push_module_scope(def_map, self.module_id)\n     }\n }\n \n impl HasResolver for TraitId {\n-    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         self.module(db).resolver(db).push_generic_params_scope(db, self.into())\n     }\n }\n \n impl<T: Into<AdtId>> HasResolver for T {\n-    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         let def = self.into();\n         let module = match def {\n             AdtId::StructId(it) => it.0.module(db),\n@@ -520,13 +516,13 @@ impl<T: Into<AdtId>> HasResolver for T {\n }\n \n impl HasResolver for FunctionId {\n-    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         self.lookup(db).container.resolver(db).push_generic_params_scope(db, self.into())\n     }\n }\n \n impl HasResolver for DefWithBodyId {\n-    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         match self {\n             DefWithBodyId::ConstId(c) => c.resolver(db),\n             DefWithBodyId::FunctionId(f) => f.resolver(db),\n@@ -536,25 +532,25 @@ impl HasResolver for DefWithBodyId {\n }\n \n impl HasResolver for ConstId {\n-    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         self.lookup(db).container.resolver(db)\n     }\n }\n \n impl HasResolver for StaticId {\n-    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         self.module(db).resolver(db)\n     }\n }\n \n impl HasResolver for TypeAliasId {\n-    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         self.lookup(db).container.resolver(db).push_generic_params_scope(db, self.into())\n     }\n }\n \n impl HasResolver for ContainerId {\n-    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         match self {\n             ContainerId::TraitId(it) => it.resolver(db),\n             ContainerId::ImplId(it) => it.resolver(db),\n@@ -564,7 +560,7 @@ impl HasResolver for ContainerId {\n }\n \n impl HasResolver for GenericDefId {\n-    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         match self {\n             GenericDefId::FunctionId(inner) => inner.resolver(db),\n             GenericDefId::AdtId(adt) => adt.resolver(db),\n@@ -578,7 +574,7 @@ impl HasResolver for GenericDefId {\n }\n \n impl HasResolver for ImplId {\n-    fn resolver(self, db: &impl DefDatabase2) -> Resolver {\n+    fn resolver(self, db: &impl DefDatabase) -> Resolver {\n         self.module(db)\n             .resolver(db)\n             .push_generic_params_scope(db, self.into())"}, {"sha": "439e8a412b9e026daeeaba4256a34d95f7afe5cf", "filename": "crates/ra_hir_def/src/test_db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -12,7 +12,7 @@ use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath\n     ra_db::SourceDatabaseStorage,\n     hir_expand::db::AstDatabaseStorage,\n     crate::db::InternDatabaseStorage,\n-    crate::db::DefDatabase2Storage\n+    crate::db::DefDatabaseStorage\n )]\n #[derive(Debug, Default)]\n pub struct TestDB {"}, {"sha": "c2a9dcdd14aaf6fc20d2e55b5c0b86adc7373f03", "filename": "crates/ra_ide_api/src/db.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc1e543f7abb69b8cab308410fa0a127950ee1c5/crates%2Fra_ide_api%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdb.rs?ref=fc1e543f7abb69b8cab308410fa0a127950ee1c5", "patch": "@@ -21,7 +21,7 @@ use crate::{\n     symbol_index::SymbolsDatabaseStorage,\n     hir::db::InternDatabaseStorage,\n     hir::db::AstDatabaseStorage,\n-    hir::db::DefDatabase2Storage,\n+    hir::db::DefDatabaseStorage,\n     hir::db::HirDatabaseStorage\n )]\n #[derive(Debug)]"}]}