{"sha": "9c0c13ec8e47cfe487f46136b394c0372e957968", "node_id": "C_kwDOAAsO6NoAKDljMGMxM2VjOGU0N2NmZTQ4N2Y0NjEzNmIzOTRjMDM3MmU5NTc5Njg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T05:38:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-02T05:38:23Z"}, "message": "Auto merge of #14707 - jhgg:fix/generate-delegate-method-filtering, r=lnicola\n\nfix: generate delegate methods filters out functions that already exist on the struct's impls\n\nfixes #14703", "tree": {"sha": "63fb2559199a25274810d690fd803eac8bfc21b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63fb2559199a25274810d690fd803eac8bfc21b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c0c13ec8e47cfe487f46136b394c0372e957968", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c0c13ec8e47cfe487f46136b394c0372e957968", "html_url": "https://github.com/rust-lang/rust/commit/9c0c13ec8e47cfe487f46136b394c0372e957968", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c0c13ec8e47cfe487f46136b394c0372e957968/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fdd1ac510f3e2254a89f4d8df7b1010934f81c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fdd1ac510f3e2254a89f4d8df7b1010934f81c5", "html_url": "https://github.com/rust-lang/rust/commit/2fdd1ac510f3e2254a89f4d8df7b1010934f81c5"}, {"sha": "a86c431f454a9b958bc2f733a52e43e5740a9979", "url": "https://api.github.com/repos/rust-lang/rust/commits/a86c431f454a9b958bc2f733a52e43e5740a9979", "html_url": "https://github.com/rust-lang/rust/commit/a86c431f454a9b958bc2f733a52e43e5740a9979"}], "stats": {"total": 32, "additions": 30, "deletions": 2}, "files": [{"sha": "a0813c91154f6fa5a933a0a2fb2ca39448fb54e5", "filename": "crates/ide-assists/src/handlers/generate_delegate_methods.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9c0c13ec8e47cfe487f46136b394c0372e957968/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c0c13ec8e47cfe487f46136b394c0372e957968/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_delegate_methods.rs?ref=9c0c13ec8e47cfe487f46136b394c0372e957968", "patch": "@@ -86,7 +86,8 @@ pub(crate) fn generate_delegate_methods(acc: &mut Assists, ctx: &AssistContext<'\n     for method in methods {\n         let adt = ast::Adt::Struct(strukt.clone());\n         let name = method.name(ctx.db()).to_string();\n-        let impl_def = find_struct_impl(ctx, &adt, &[name]).flatten();\n+        // if `find_struct_impl` returns None, that means that a function named `name` already exists.\n+        let Some(impl_def) = find_struct_impl(ctx, &adt, &[name]) else { continue; };\n         acc.add_group(\n             &GroupLabel(\"Generate delegate methods\u2026\".to_owned()),\n             AssistId(\"generate_delegate_methods\", AssistKind::Generate),\n@@ -380,4 +381,26 @@ struct Person {\n }\"#,\n         )\n     }\n+\n+    #[test]\n+    fn test_generate_not_eligible_if_fn_exists() {\n+        check_assist_not_applicable(\n+            generate_delegate_methods,\n+            r#\"\n+struct Age(u8);\n+impl Age {\n+    fn age(&self) -> u8 {\n+        self.0\n+    }\n+}\n+\n+struct Person {\n+    ag$0e: Age,\n+}\n+impl Person {\n+    fn age(&self) -> u8 { 0 }\n+}\n+\"#,\n+        );\n+    }\n }"}, {"sha": "77f4b0e3e02c803ae9a85e535736d32c0336f925", "filename": "crates/ide-assists/src/utils.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9c0c13ec8e47cfe487f46136b394c0372e957968/crates%2Fide-assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c0c13ec8e47cfe487f46136b394c0372e957968/crates%2Fide-assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Futils.rs?ref=9c0c13ec8e47cfe487f46136b394c0372e957968", "patch": "@@ -338,7 +338,12 @@ fn calc_depth(pat: &ast::Pat, depth: usize) -> usize {\n \n /// `find_struct_impl` looks for impl of a struct, but this also has additional feature\n /// where it takes a list of function names and check if they exist inside impl_, if\n-/// even one match is found, it returns None\n+/// even one match is found, it returns None.\n+///\n+/// That means this function can have 3 potential return values:\n+///  - `None`: an impl exists, but one of the function names within the impl matches one of the provided names.\n+///  - `Some(None)`: no impl exists.\n+///  - `Some(Some(_))`: an impl exists, with no matching function names.\n pub(crate) fn find_struct_impl(\n     ctx: &AssistContext<'_>,\n     adt: &ast::Adt,"}]}