{"sha": "3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhYmViZjk1Y2VhMTJlMzk2ZWQ1MzZjYjllMjllZjhkZDFhNmM2YzE=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-06-26T03:15:29Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2018-06-26T03:18:17Z"}, "message": "Apply short function call heuristic to attributes\n\nCloses #2620", "tree": {"sha": "73af8e26e7246ca5aee1a8b1a55b92a47b674782", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73af8e26e7246ca5aee1a8b1a55b92a47b674782"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1", "html_url": "https://github.com/rust-lang/rust/commit/3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42f03458dd8f55d86d7f462ff3acbaff1dfddc7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/42f03458dd8f55d86d7f462ff3acbaff1dfddc7b", "html_url": "https://github.com/rust-lang/rust/commit/42f03458dd8f55d86d7f462ff3acbaff1dfddc7b"}], "stats": {"total": 82, "additions": 72, "deletions": 10}, "files": [{"sha": "3c545bdda7042b39a435db92ea32ae7a8a3b5bec", "filename": "src/attr.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1/src%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1/src%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fattr.rs?ref=3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1", "patch": "@@ -98,6 +98,7 @@ fn format_derive(\n         argument_shape,\n         // 10 = \"[derive()]\", 3 = \"()\" and \"]\"\n         shape.offset_left(10 + prefix.len())?.sub_width(3)?,\n+        None,\n     )?;\n \n     result.push_str(&item_str);\n@@ -227,6 +228,7 @@ impl Rewrite for ast::MetaItem {\n                     shape\n                         .offset_left(path.len())?\n                         .sub_width(3 + trailing_comma.len())?,\n+                    Some(context.config.width_heuristics().fn_call_width),\n                 )?;\n \n                 let indent = if item_str.starts_with('\\n') {\n@@ -264,6 +266,7 @@ fn format_arg_list<I, T, F1, F2, F3>(\n     context: &RewriteContext,\n     shape: Shape,\n     one_line_shape: Shape,\n+    one_line_limit: Option<usize>,\n ) -> Option<String>\n where\n     I: Iterator<Item = T>,\n@@ -284,12 +287,14 @@ where\n         false,\n     );\n     let item_vec = items.collect::<Vec<_>>();\n-    let tactic = ::lists::definitive_tactic(\n-        &item_vec,\n-        ListTactic::HorizontalVertical,\n-        ::lists::Separator::Comma,\n-        shape.width,\n-    );\n+    let tactic = if let Some(limit) = one_line_limit {\n+        ListTactic::LimitedHorizontalVertical(limit)\n+    } else {\n+        ListTactic::HorizontalVertical\n+    };\n+\n+    let tactic =\n+        ::lists::definitive_tactic(&item_vec, tactic, ::lists::Separator::Comma, shape.width);\n     let fmt = ListFormatting {\n         tactic,\n         separator: \",\","}, {"sha": "708147f0e6fe562dcb78a1dee41a073f9dee81c0", "filename": "tests/source/attrib.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1/tests%2Fsource%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1/tests%2Fsource%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fattrib.rs?ref=3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1", "patch": "@@ -174,3 +174,22 @@ pub fn foo() {}\n #[clippy::bar(a, b, c)]\n pub fn foo() {}\n \n+mod issue_2620 {\n+    #[derive(Debug, StructOpt)]\n+#[structopt(about = \"Display information about the character on FF Logs\")]\n+pub struct Params {\n+  #[structopt(help = \"The server the character is on\")]\n+  server: String,\n+  #[structopt(help = \"The character's first name\")]\n+  first_name: String,\n+  #[structopt(help = \"The character's last name\")]\n+  last_name: String,\n+  #[structopt(\n+    short = \"j\",\n+    long = \"job\",\n+    help = \"The job to look at\",\n+    parse(try_from_str)\n+  )]\n+  job: Option<Job>\n+}\n+}"}, {"sha": "1e069458ea169e63a07bca33380589c322f4f5df", "filename": "tests/target/attrib.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1/tests%2Ftarget%2Fattrib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1/tests%2Ftarget%2Fattrib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fattrib.rs?ref=3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1", "patch": "@@ -76,7 +76,14 @@ struct Foo {\n // #1668\n \n /// Default path (*nix)\n-#[cfg(all(unix, not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"android\")))]\n+#[cfg(\n+    all(\n+        unix,\n+        not(target_os = \"macos\"),\n+        not(target_os = \"ios\"),\n+        not(target_os = \"android\")\n+    )\n+)]\n fn foo() {\n     #[cfg(target_os = \"freertos\")]\n     match port_id {\n@@ -197,3 +204,23 @@ pub fn foo() {}\n #[clippy::bar=foo]\n #[clippy::bar(a, b, c)]\n pub fn foo() {}\n+\n+mod issue_2620 {\n+    #[derive(Debug, StructOpt)]\n+    #[structopt(about = \"Display information about the character on FF Logs\")]\n+    pub struct Params {\n+        #[structopt(help = \"The server the character is on\")]\n+        server: String,\n+        #[structopt(help = \"The character's first name\")]\n+        first_name: String,\n+        #[structopt(help = \"The character's last name\")]\n+        last_name: String,\n+        #[structopt(\n+            short = \"j\",\n+            long = \"job\",\n+            help = \"The job to look at\",\n+            parse(try_from_str)\n+        )]\n+        job: Option<Job>,\n+    }\n+}"}, {"sha": "33eb211a4b5f55d8416448d480146ac41eaff48b", "filename": "tests/target/enum.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1/tests%2Ftarget%2Fenum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1/tests%2Ftarget%2Fenum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fenum.rs?ref=3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1", "patch": "@@ -255,7 +255,12 @@ pub enum QlError {\n     #[fail(display = \"Translation error: from {} to {}\", 0, 1)]\n     TranslationError(String, String),\n     // (kind, input, expected)\n-    #[fail(display = \"Could not find {}: Found: {}, expected: {:?}\", 0, 1, 2)]\n+    #[fail(\n+        display = \"Could not find {}: Found: {}, expected: {:?}\",\n+        0,\n+        1,\n+        2\n+    )]\n     ResolveError(&'static str, String, Option<String>),\n }\n "}, {"sha": "0f461b98bc737b035683458efb4534feb195279f", "filename": "tests/target/struct-field-attributes.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1/tests%2Ftarget%2Fstruct-field-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1/tests%2Ftarget%2Fstruct-field-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct-field-attributes.rs?ref=3abebf95cea12e396ed536cb9e29ef8dd1a6c6c1", "patch": "@@ -39,13 +39,19 @@ fn new_foo() -> Foo {\n // #2044\n pub enum State {\n     Closure(\n-        #[cfg_attr(feature = \"serde_derive\", serde(state_with = \"::serialization::closure\"))]\n+        #[cfg_attr(\n+            feature = \"serde_derive\",\n+            serde(state_with = \"::serialization::closure\")\n+        )]\n         GcPtr<ClosureData>,\n     ),\n }\n \n struct Fields(\n-    #[cfg_attr(feature = \"serde_derive\", serde(state_with = \"::base::serialization::shared\"))]\n+    #[cfg_attr(\n+        feature = \"serde_derive\",\n+        serde(state_with = \"::base::serialization::shared\")\n+    )]\n     Arc<Vec<InternedStr>>,\n );\n "}]}