{"sha": "e36b90752ceef81c6fdff3b6cac36878cf29ee6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNmI5MDc1MmNlZWY4MWM2ZmRmZjNiNmNhYzM2ODc4Y2YyOWVlNmY=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-05-31T11:34:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-31T11:34:07Z"}, "message": "Rollup merge of #61374 - VirrageS:master, r=Centril\n\nExplicitly suggest 'type_ascription' feature\n\nCloses: #61325\n\nr? @estebank", "tree": {"sha": "b2113a61391177e9ad76a7131e34dc2cef3d1921", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b2113a61391177e9ad76a7131e34dc2cef3d1921"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e36b90752ceef81c6fdff3b6cac36878cf29ee6f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc8REvCRBK7hj4Ov3rIwAAdHIIAGPLdDZA+WAIFIfrQhV5NH9L\nqtwfg7g93rS/q+/bMWykSE73iXhwLywdwDM15jHKyG90SS3CLvC4U6pkwVhS2TMl\nvQd1F3nT7pasQ6PbJJO9T7R5+dekEcxu6zcTy9hmGIOc4psy6s8gKlZ/1u9EKmAZ\nllMVe4LTZnwrZ80GrFvAW6z5lVwpU2LEjwilMiMQWXxsDA8vErwBxmpYILj6gCzB\nhW3J7FS+jS6R4hYu5yRH9zO+b8dkeJ1okIVNM858nYHi8D/aHwO1lnWfq5q3dnnf\nXZ5BW2Z3PRoNMjmyPXymggtcZu4ywIgiPlgYKLPbksL6reXpAa7xZdlko+dwZdc=\n=o06Y\n-----END PGP SIGNATURE-----\n", "payload": "tree b2113a61391177e9ad76a7131e34dc2cef3d1921\nparent f100dfbb3efb4f58426e108b8b79a72f5b0c5135\nparent 4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b\nauthor Pietro Albini <pietro@pietroalbini.org> 1559302447 +0200\ncommitter GitHub <noreply@github.com> 1559302447 +0200\n\nRollup merge of #61374 - VirrageS:master, r=Centril\n\nExplicitly suggest 'type_ascription' feature\n\nCloses: #61325\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e36b90752ceef81c6fdff3b6cac36878cf29ee6f", "html_url": "https://github.com/rust-lang/rust/commit/e36b90752ceef81c6fdff3b6cac36878cf29ee6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e36b90752ceef81c6fdff3b6cac36878cf29ee6f/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f100dfbb3efb4f58426e108b8b79a72f5b0c5135", "url": "https://api.github.com/repos/rust-lang/rust/commits/f100dfbb3efb4f58426e108b8b79a72f5b0c5135", "html_url": "https://github.com/rust-lang/rust/commit/f100dfbb3efb4f58426e108b8b79a72f5b0c5135"}, {"sha": "4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b", "html_url": "https://github.com/rust-lang/rust/commit/4c5eb8ecfc1accda036053d50c8c44b3c5eebb3b"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "2e4d4c091398ea5770080490b260312ca6c8c186", "filename": "src/libsyntax/parse/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e36b90752ceef81c6fdff3b6cac36878cf29ee6f/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e36b90752ceef81c6fdff3b6cac36878cf29ee6f/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fdiagnostics.rs?ref=e36b90752ceef81c6fdff3b6cac36878cf29ee6f", "patch": "@@ -858,8 +858,8 @@ impl<'a> Parser<'a> {\n                     Applicability::MaybeIncorrect,\n                 );\n             } else {\n-                err.note(\"type ascription is a nightly-only feature that lets \\\n-                          you annotate an expression with a type: `<expr>: <type>`\")\n+                err.note(\"#![feature(type_ascription)] lets you annotate an \\\n+                          expression with a type: `<expr>: <type>`\")\n                     .span_note(\n                         lhs_span,\n                         \"this expression expects an ascribed type after the colon\","}, {"sha": "cf36953546549c10e1d64d3f7c91d16c84062986", "filename": "src/test/ui/issues/issue-22644.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e36b90752ceef81c6fdff3b6cac36878cf29ee6f/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36b90752ceef81c6fdff3b6cac36878cf29ee6f/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-22644.stderr?ref=e36b90752ceef81c6fdff3b6cac36878cf29ee6f", "patch": "@@ -89,7 +89,7 @@ error: expected type, found `4`\n LL |     println!(\"{}\", a: &mut 4);\n    |                            ^ expecting a type here because of type ascription\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/issue-22644.rs:34:20\n    |"}, {"sha": "01f395377701751b7d82e155c205c5154d52954f", "filename": "src/test/ui/issues/issue-34255-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e36b90752ceef81c6fdff3b6cac36878cf29ee6f/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36b90752ceef81c6fdff3b6cac36878cf29ee6f/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-34255-1.stderr?ref=e36b90752ceef81c6fdff3b6cac36878cf29ee6f", "patch": "@@ -4,7 +4,7 @@ error: expected type, found `42`\n LL |     Test::Drill(field: 42);\n    |                        ^^ expecting a type here because of type ascription\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/issue-34255-1.rs:8:17\n    |"}, {"sha": "8ae8018c2ff25f41d8018b21593eb9b1c35440b3", "filename": "src/test/ui/lifetime_starts_expressions.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e36b90752ceef81c6fdff3b6cac36878cf29ee6f/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36b90752ceef81c6fdff3b6cac36878cf29ee6f/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime_starts_expressions.stderr?ref=e36b90752ceef81c6fdff3b6cac36878cf29ee6f", "patch": "@@ -14,7 +14,7 @@ error: expected type, found keyword `loop`\n LL |     loop { break 'label: loop { break 'label 42; }; }\n    |                          ^^^^ expecting a type here because of type ascription\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/lifetime_starts_expressions.rs:6:12\n    |"}, {"sha": "150d74f07428d97cf519db0d0457604c84e89713", "filename": "src/test/ui/parser/recover-from-bad-variant.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e36b90752ceef81c6fdff3b6cac36878cf29ee6f/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36b90752ceef81c6fdff3b6cac36878cf29ee6f/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-from-bad-variant.stderr?ref=e36b90752ceef81c6fdff3b6cac36878cf29ee6f", "patch": "@@ -4,7 +4,7 @@ error: expected type, found `3`\n LL |     let x = Enum::Foo(a: 3, b: 4);\n    |                          ^ expecting a type here because of type ascription\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/recover-from-bad-variant.rs:7:23\n    |"}, {"sha": "4929922c83fe6c0338d333e31f76149e547e3ad0", "filename": "src/test/ui/type/type-ascription-instead-of-statement-end.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e36b90752ceef81c6fdff3b6cac36878cf29ee6f/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e36b90752ceef81c6fdff3b6cac36878cf29ee6f/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Ftype-ascription-instead-of-statement-end.stderr?ref=e36b90752ceef81c6fdff3b6cac36878cf29ee6f", "patch": "@@ -12,7 +12,7 @@ error: expected type, found `0`\n LL |     println!(\"test\"): 0;\n    |                       ^ expecting a type here because of type ascription\n    |\n-   = note: type ascription is a nightly-only feature that lets you annotate an expression with a type: `<expr>: <type>`\n+   = note: #![feature(type_ascription)] lets you annotate an expression with a type: `<expr>: <type>`\n note: this expression expects an ascribed type after the colon\n   --> $DIR/type-ascription-instead-of-statement-end.rs:9:5\n    |"}]}