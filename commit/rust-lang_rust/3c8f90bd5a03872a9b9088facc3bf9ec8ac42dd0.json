{"sha": "3c8f90bd5a03872a9b9088facc3bf9ec8ac42dd0", "node_id": "C_kwDOAAsO6NoAKDNjOGY5MGJkNWEwMzg3MmE5YjkwODhmYWNjM2JmOWVjOGFjNDJkZDA", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-08T11:54:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-08T11:54:03Z"}, "message": "Auto merge of #8030 - WaffleLapkin:ignore_trait_assoc_types_type_complexity, r=llogiq\n\nIgnore associated types in traits when considering type complexity\n\nchangelog: Ignore associated types in traits when checking ``[`type_complexity`]`` lint.\n\nfixes #1013", "tree": {"sha": "7e7b722028e14a7d07c2ec59decaeb574283058c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e7b722028e14a7d07c2ec59decaeb574283058c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c8f90bd5a03872a9b9088facc3bf9ec8ac42dd0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c8f90bd5a03872a9b9088facc3bf9ec8ac42dd0", "html_url": "https://github.com/rust-lang/rust/commit/3c8f90bd5a03872a9b9088facc3bf9ec8ac42dd0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c8f90bd5a03872a9b9088facc3bf9ec8ac42dd0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86cea734494db2e8417c81905d8f371c241c793c", "url": "https://api.github.com/repos/rust-lang/rust/commits/86cea734494db2e8417c81905d8f371c241c793c", "html_url": "https://github.com/rust-lang/rust/commit/86cea734494db2e8417c81905d8f371c241c793c"}, {"sha": "c176568abd9290088ec604be644c021caa81f508", "url": "https://api.github.com/repos/rust-lang/rust/commits/c176568abd9290088ec604be644c021caa81f508", "html_url": "https://github.com/rust-lang/rust/commit/c176568abd9290088ec604be644c021caa81f508"}], "stats": {"total": 61, "additions": 45, "deletions": 16}, "files": [{"sha": "481e595743585a8ea3ad5794b0dc53a93b4f459c", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 33, "deletions": 13, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3c8f90bd5a03872a9b9088facc3bf9ec8ac42dd0/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8f90bd5a03872a9b9088facc3bf9ec8ac42dd0/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=3c8f90bd5a03872a9b9088facc3bf9ec8ac42dd0", "patch": "@@ -350,16 +350,28 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         match item.kind {\n-            ImplItemKind::Const(ty, _) | ImplItemKind::TyAlias(ty) => self.check_ty(\n-                cx,\n-                ty,\n-                CheckTyContext {\n-                    is_in_trait_impl: true,\n-                    ..CheckTyContext::default()\n-                },\n-            ),\n-            // methods are covered by check_fn\n-            ImplItemKind::Fn(..) => (),\n+            ImplItemKind::Const(ty, _) => {\n+                let is_in_trait_impl = if let Some(hir::Node::Item(item)) =\n+                    cx.tcx.hir().find(cx.tcx.hir().get_parent_item(item.hir_id()))\n+                {\n+                    matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n+                } else {\n+                    false\n+                };\n+\n+                self.check_ty(\n+                    cx,\n+                    ty,\n+                    CheckTyContext {\n+                        is_in_trait_impl,\n+                        ..CheckTyContext::default()\n+                    },\n+                );\n+            },\n+            // Methods are covered by check_fn.\n+            // Type aliases are ignored because oftentimes it's impossible to\n+            // make type alias declaration in trait simpler, see #1013\n+            ImplItemKind::Fn(..) | ImplItemKind::TyAlias(..) => (),\n         }\n     }\n \n@@ -417,6 +429,14 @@ impl Types {\n     }\n \n     fn check_fn_decl(&mut self, cx: &LateContext<'_>, decl: &FnDecl<'_>, context: CheckTyContext) {\n+        // Ignore functions in trait implementations as they are usually forced by the trait definition.\n+        //\n+        // FIXME: idially we would like to warn *if the compicated type can be simplified*, but it's hard to\n+        // check.\n+        if context.is_in_trait_impl {\n+            return;\n+        }\n+\n         for input in decl.inputs {\n             self.check_ty(cx, input, context);\n         }\n@@ -435,12 +455,12 @@ impl Types {\n             return;\n         }\n \n-        if !context.is_nested_call && type_complexity::check(cx, hir_ty, self.type_complexity_threshold) {\n+        // Skip trait implementations; see issue #605.\n+        if context.is_in_trait_impl {\n             return;\n         }\n \n-        // Skip trait implementations; see issue #605.\n-        if context.is_in_trait_impl {\n+        if !context.is_nested_call && type_complexity::check(cx, hir_ty, self.type_complexity_threshold) {\n             return;\n         }\n "}, {"sha": "86a7bd7b62735443e8c305b04a6932bedd213c8d", "filename": "tests/ui/type_complexity.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3c8f90bd5a03872a9b9088facc3bf9ec8ac42dd0/tests%2Fui%2Ftype_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c8f90bd5a03872a9b9088facc3bf9ec8ac42dd0/tests%2Fui%2Ftype_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_complexity.rs?ref=3c8f90bd5a03872a9b9088facc3bf9ec8ac42dd0", "patch": "@@ -30,6 +30,15 @@ trait T {\n     fn def_method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>) {}\n }\n \n+// Should not warn since there is likely no way to simplify this (#1013)\n+impl T for () {\n+    const A: Vec<Vec<Box<(u32, u32, u32, u32)>>> = vec![];\n+\n+    type B = Vec<Vec<Box<(u32, u32, u32, u32)>>>;\n+\n+    fn method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>) {}\n+}\n+\n fn test1() -> Vec<Vec<Box<(u32, u32, u32, u32)>>> {\n     vec![]\n }"}, {"sha": "9da7edb1c3b74e27275e6f6f9b1810163040a45b", "filename": "tests/ui/type_complexity.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3c8f90bd5a03872a9b9088facc3bf9ec8ac42dd0/tests%2Fui%2Ftype_complexity.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3c8f90bd5a03872a9b9088facc3bf9ec8ac42dd0/tests%2Fui%2Ftype_complexity.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype_complexity.stderr?ref=3c8f90bd5a03872a9b9088facc3bf9ec8ac42dd0", "patch": "@@ -73,19 +73,19 @@ LL |     fn def_method(&self, p: Vec<Vec<Box<(u32, u32, u32, u32)>>>) {}\n    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: very complex type used. Consider factoring parts into `type` definitions\n-  --> $DIR/type_complexity.rs:33:15\n+  --> $DIR/type_complexity.rs:42:15\n    |\n LL | fn test1() -> Vec<Vec<Box<(u32, u32, u32, u32)>>> {\n    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: very complex type used. Consider factoring parts into `type` definitions\n-  --> $DIR/type_complexity.rs:37:14\n+  --> $DIR/type_complexity.rs:46:14\n    |\n LL | fn test2(_x: Vec<Vec<Box<(u32, u32, u32, u32)>>>) {}\n    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: very complex type used. Consider factoring parts into `type` definitions\n-  --> $DIR/type_complexity.rs:40:13\n+  --> $DIR/type_complexity.rs:49:13\n    |\n LL |     let _y: Vec<Vec<Box<(u32, u32, u32, u32)>>> = vec![];\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}