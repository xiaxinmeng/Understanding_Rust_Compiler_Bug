{"sha": "04f1ead55243c895da7c3703e2daca319f381124", "node_id": "C_kwDOAAsO6NoAKDA0ZjFlYWQ1NTI0M2M4OTVkYTdjMzcwM2UyZGFjYTMxOWYzODExMjQ", "commit": {"author": {"name": "Adam Casey", "email": "acasey23@bloomberg.net", "date": "2022-11-16T09:26:56Z"}, "committer": {"name": "Adam Casey", "email": "acasey23@bloomberg.net", "date": "2022-11-16T15:23:17Z"}, "message": "available_parallelism: Handle 0 cfs_period_us\n\nThere seem to be some scenarios where `cpu.cfs_period_us` can contain `0`\n\nThis causes a panic when calling `std::thread::available_parallelism()` as is done so\nfrom binaries built by `cargo test`, which was how the issue was\ndiscovered. I don't feel like `0` is a good value for `cpu.cfs_period_us`, but I\nalso don't think applications should panic if this value is seen.\n\nThis case is handled by other projects which read this information:\n\n - num_cpus: https://github.com/seanmonstar/num_cpus/blob/e437b9d9083d717692e35d917de8674a7987dd06/src/linux.rs#L207-L210\n - ninja: https://github.com/ninja-build/ninja/pull/2174/files\n - dotnet: https://github.com/dotnet/runtime/blob/c4341d45acca3ea662cd8d71e7d71094450dd045/src/coreclr/pal/src/misc/cgroup.cpp#L481-L483\n\nBefore this change, this panic could be seen in environments setup as described\nabove:\n\n```\n$ RUST_BACKTRACE=1 cargo test\n    Finished test [unoptimized + debuginfo] target(s) in 3.55s\n     Running unittests src/main.rs (target/debug/deps/x-9a42e145aca2934d)\nthread 'main' panicked at 'attempt to divide by zero', library/std/src/sys/unix/thread.rs:546:70\nstack backtrace:\n   0: rust_begin_unwind\n   1: core::panicking::panic_fmt\n   2: core::panicking::panic\n   3: std::sys::unix::thread::cgroups::quota\n   4: std::sys::unix::thread::available_parallelism\n   5: std::thread::available_parallelism\n   6: test::helpers::concurrency::get_concurrency\n   7: test::console::run_tests_console\n   8: test::test_main\n   9: test::test_main_static\n  10: x::main\n             at ./src/main.rs:1:1\n  11: core::ops::function::FnOnce::call_once\n             at /tmp/rust-1.64-1.64.0-1/library/core/src/ops/function.rs:248:5\nnote: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.\nerror: test failed, to rerun pass '--bin local-rabmq-amqpprox'\n```\n\nI've tested this change in an environment which has the bad setup and\nrebuilding the test executable against a fixed std library fixes the\npanic.", "tree": {"sha": "00066466b12f637a04e47d6ae236221d4cb732d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/00066466b12f637a04e47d6ae236221d4cb732d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04f1ead55243c895da7c3703e2daca319f381124", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04f1ead55243c895da7c3703e2daca319f381124", "html_url": "https://github.com/rust-lang/rust/commit/04f1ead55243c895da7c3703e2daca319f381124", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04f1ead55243c895da7c3703e2daca319f381124/comments", "author": {"login": "adamncasey", "id": 720498, "node_id": "MDQ6VXNlcjcyMDQ5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/720498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamncasey", "html_url": "https://github.com/adamncasey", "followers_url": "https://api.github.com/users/adamncasey/followers", "following_url": "https://api.github.com/users/adamncasey/following{/other_user}", "gists_url": "https://api.github.com/users/adamncasey/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamncasey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamncasey/subscriptions", "organizations_url": "https://api.github.com/users/adamncasey/orgs", "repos_url": "https://api.github.com/users/adamncasey/repos", "events_url": "https://api.github.com/users/adamncasey/events{/privacy}", "received_events_url": "https://api.github.com/users/adamncasey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "adamncasey", "id": 720498, "node_id": "MDQ6VXNlcjcyMDQ5OA==", "avatar_url": "https://avatars.githubusercontent.com/u/720498?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adamncasey", "html_url": "https://github.com/adamncasey", "followers_url": "https://api.github.com/users/adamncasey/followers", "following_url": "https://api.github.com/users/adamncasey/following{/other_user}", "gists_url": "https://api.github.com/users/adamncasey/gists{/gist_id}", "starred_url": "https://api.github.com/users/adamncasey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adamncasey/subscriptions", "organizations_url": "https://api.github.com/users/adamncasey/orgs", "repos_url": "https://api.github.com/users/adamncasey/repos", "events_url": "https://api.github.com/users/adamncasey/events{/privacy}", "received_events_url": "https://api.github.com/users/adamncasey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63c748ee23ab7b6706655146f5b7c7f579811803", "url": "https://api.github.com/repos/rust-lang/rust/commits/63c748ee23ab7b6706655146f5b7c7f579811803", "html_url": "https://github.com/rust-lang/rust/commit/63c748ee23ab7b6706655146f5b7c7f579811803"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "9125174efab78d0a76d9dea64afaa97f63e16f09", "filename": "library/std/src/sys/unix/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/04f1ead55243c895da7c3703e2daca319f381124/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04f1ead55243c895da7c3703e2daca319f381124/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fthread.rs?ref=04f1ead55243c895da7c3703e2daca319f381124", "patch": "@@ -510,7 +510,7 @@ mod cgroups {\n                     let limit = raw_quota.next()?;\n                     let period = raw_quota.next()?;\n                     match (limit.parse::<usize>(), period.parse::<usize>()) {\n-                        (Ok(limit), Ok(period)) => {\n+                        (Ok(limit), Ok(period)) if period > 0 => {\n                             quota = quota.min(limit / period);\n                         }\n                         _ => {}\n@@ -570,7 +570,7 @@ mod cgroups {\n                 let period = parse_file(\"cpu.cfs_period_us\");\n \n                 match (limit, period) {\n-                    (Some(limit), Some(period)) => quota = quota.min(limit / period),\n+                    (Some(limit), Some(period)) if period > 0 => quota = quota.min(limit / period),\n                     _ => {}\n                 }\n "}]}