{"sha": "25783fa485933158870260b68bff94998d95ca48", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1NzgzZmE0ODU5MzMxNTg4NzAyNjBiNjhiZmY5NDk5OGQ5NWNhNDg=", "commit": {"author": {"name": "laurent", "email": "laurent.mazare@gmail.com", "date": "2017-11-14T21:14:08Z"}, "committer": {"name": "laurent", "email": "laurent.mazare@gmail.com", "date": "2017-11-14T21:14:08Z"}, "message": "Raise a lint when suggest has simplified the expression.", "tree": {"sha": "07bb952b4f199d4723aea16237c1a017359103c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07bb952b4f199d4723aea16237c1a017359103c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25783fa485933158870260b68bff94998d95ca48", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25783fa485933158870260b68bff94998d95ca48", "html_url": "https://github.com/rust-lang/rust/commit/25783fa485933158870260b68bff94998d95ca48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25783fa485933158870260b68bff94998d95ca48/comments", "author": {"login": "LaurentMazare", "id": 1041292, "node_id": "MDQ6VXNlcjEwNDEyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1041292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentMazare", "html_url": "https://github.com/LaurentMazare", "followers_url": "https://api.github.com/users/LaurentMazare/followers", "following_url": "https://api.github.com/users/LaurentMazare/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentMazare/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentMazare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentMazare/subscriptions", "organizations_url": "https://api.github.com/users/LaurentMazare/orgs", "repos_url": "https://api.github.com/users/LaurentMazare/repos", "events_url": "https://api.github.com/users/LaurentMazare/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentMazare/received_events", "type": "User", "site_admin": false}, "committer": {"login": "LaurentMazare", "id": 1041292, "node_id": "MDQ6VXNlcjEwNDEyOTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1041292?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LaurentMazare", "html_url": "https://github.com/LaurentMazare", "followers_url": "https://api.github.com/users/LaurentMazare/followers", "following_url": "https://api.github.com/users/LaurentMazare/following{/other_user}", "gists_url": "https://api.github.com/users/LaurentMazare/gists{/gist_id}", "starred_url": "https://api.github.com/users/LaurentMazare/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LaurentMazare/subscriptions", "organizations_url": "https://api.github.com/users/LaurentMazare/orgs", "repos_url": "https://api.github.com/users/LaurentMazare/repos", "events_url": "https://api.github.com/users/LaurentMazare/events{/privacy}", "received_events_url": "https://api.github.com/users/LaurentMazare/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff", "html_url": "https://github.com/rust-lang/rust/commit/bdf3887d22a7352c20d97cef9cf9f8f4ac41ccff"}], "stats": {"total": 92, "additions": 66, "deletions": 26}, "files": [{"sha": "9310cca4aeee81a29a16564f7dc223e741d503fc", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 42, "deletions": 26, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/25783fa485933158870260b68bff94998d95ca48/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25783fa485933158870260b68bff94998d95ca48/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=25783fa485933158870260b68bff94998d95ca48", "patch": "@@ -159,8 +159,16 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n     }\n }\n \n-fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> String {\n-    fn recurse(brackets: bool, cx: &LateContext, suggestion: &Bool, terminals: &[&Expr], mut s: String) -> String {\n+// The boolean part of the return indicates whether some simplifications have been applied.\n+fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> (String, bool) {\n+    fn recurse(\n+        brackets: bool,\n+        cx: &LateContext,\n+        suggestion: &Bool,\n+        terminals: &[&Expr],\n+        mut s: String,\n+        simplified: &mut bool,\n+    ) -> String {\n         use quine_mc_cluskey::Bool::*;\n         let snip = |e: &Expr| snippet_opt(cx, e.span).expect(\"don't try to improve booleans created by macros\");\n         match *suggestion {\n@@ -175,7 +183,7 @@ fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> String {\n             Not(ref inner) => match **inner {\n                 And(_) | Or(_) => {\n                     s.push('!');\n-                    recurse(true, cx, inner, terminals, s)\n+                    recurse(true, cx, inner, terminals, s, simplified)\n                 },\n                 Term(n) => match terminals[n as usize].node {\n                     ExprBinary(binop, ref lhs, ref rhs) => {\n@@ -188,9 +196,10 @@ fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> String {\n                             BiGe => \" < \",\n                             _ => {\n                                 s.push('!');\n-                                return recurse(true, cx, inner, terminals, s);\n+                                return recurse(true, cx, inner, terminals, s, simplified);\n                             },\n                         };\n+                        *simplified = true;\n                         s.push_str(&snip(lhs));\n                         s.push_str(op);\n                         s.push_str(&snip(rhs));\n@@ -202,41 +211,42 @@ fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> String {\n                             .flat_map(|(a, b)| vec![(a, b), (b, a)])\n                             .find(|&(a, _)| a == path.name.as_str());\n                         if let Some((_, negation_method)) = negation {\n+                            *simplified = true;\n                             s.push_str(&snip(&args[0]));\n                             s.push('.');\n                             s.push_str(negation_method);\n                             s.push_str(\"()\");\n                             s\n                         } else {\n                             s.push('!');\n-                            recurse(false, cx, inner, terminals, s)\n+                            recurse(false, cx, inner, terminals, s, simplified)\n                         }\n                     },\n                     _ => {\n                         s.push('!');\n-                        recurse(false, cx, inner, terminals, s)\n+                        recurse(false, cx, inner, terminals, s, simplified)\n                     },\n                 },\n                 _ => {\n                     s.push('!');\n-                    recurse(false, cx, inner, terminals, s)\n+                    recurse(false, cx, inner, terminals, s, simplified)\n                 },\n             },\n             And(ref v) => {\n                 if brackets {\n                     s.push('(');\n                 }\n                 if let Or(_) = v[0] {\n-                    s = recurse(true, cx, &v[0], terminals, s);\n+                    s = recurse(true, cx, &v[0], terminals, s, simplified);\n                 } else {\n-                    s = recurse(false, cx, &v[0], terminals, s);\n+                    s = recurse(false, cx, &v[0], terminals, s, simplified);\n                 }\n                 for inner in &v[1..] {\n                     s.push_str(\" && \");\n                     if let Or(_) = *inner {\n-                        s = recurse(true, cx, inner, terminals, s);\n+                        s = recurse(true, cx, inner, terminals, s, simplified);\n                     } else {\n-                        s = recurse(false, cx, inner, terminals, s);\n+                        s = recurse(false, cx, inner, terminals, s, simplified);\n                     }\n                 }\n                 if brackets {\n@@ -248,10 +258,10 @@ fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> String {\n                 if brackets {\n                     s.push('(');\n                 }\n-                s = recurse(false, cx, &v[0], terminals, s);\n+                s = recurse(false, cx, &v[0], terminals, s, simplified);\n                 for inner in &v[1..] {\n                     s.push_str(\" || \");\n-                    s = recurse(false, cx, inner, terminals, s);\n+                    s = recurse(false, cx, inner, terminals, s, simplified);\n                 }\n                 if brackets {\n                     s.push(')');\n@@ -274,7 +284,9 @@ fn suggest(cx: &LateContext, suggestion: &Bool, terminals: &[&Expr]) -> String {\n             },\n         }\n     }\n-    recurse(false, cx, suggestion, terminals, String::new())\n+    let mut simplified = false;\n+    let s = recurse(false, cx, suggestion, terminals, String::new(), &mut simplified);\n+    (s, simplified)\n }\n \n fn simple_negate(b: Bool) -> Bool {\n@@ -384,7 +396,7 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                                 db.span_suggestion(\n                                     e.span,\n                                     \"it would look like the following\",\n-                                    suggest(self.cx, suggestion, &h2q.terminals),\n+                                    suggest(self.cx, suggestion, &h2q.terminals).0,\n                                 );\n                             },\n                         );\n@@ -401,22 +413,26 @@ impl<'a, 'tcx> NonminimalBoolVisitor<'a, 'tcx> {\n                     improvements.push(suggestion);\n                 }\n             }\n-            if !improvements.is_empty() {\n+            let nonminimal_bool_lint = |suggestions| {\n                 span_lint_and_then(\n                     self.cx,\n                     NONMINIMAL_BOOL,\n                     e.span,\n                     \"this boolean expression can be simplified\",\n-                    |db| {\n-                        db.span_suggestions(\n-                            e.span,\n-                            \"try\",\n-                            improvements\n-                                .into_iter()\n-                                .map(|suggestion| suggest(self.cx, suggestion, &h2q.terminals))\n-                                .collect(),\n-                        );\n-                    },\n+                    |db| { db.span_suggestions(e.span, \"try\", suggestions); },\n+                );\n+            };\n+            if improvements.is_empty() {\n+                let suggest = suggest(self.cx, &expr, &h2q.terminals);\n+                if suggest.1 {\n+                    nonminimal_bool_lint(vec![suggest.0])\n+                }\n+            } else {\n+                nonminimal_bool_lint(\n+                    improvements\n+                        .into_iter()\n+                        .map(|suggestion| suggest(self.cx, suggestion, &h2q.terminals).0)\n+                        .collect()\n                 );\n             }\n         }"}, {"sha": "05696ba0f59b5aa297553dc05811f54558684782", "filename": "tests/ui/booleans.stderr", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/25783fa485933158870260b68bff94998d95ca48/tests%2Fui%2Fbooleans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/25783fa485933158870260b68bff94998d95ca48/tests%2Fui%2Fbooleans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fbooleans.stderr?ref=25783fa485933158870260b68bff94998d95ca48", "patch": "@@ -130,6 +130,30 @@ help: try\n 39 |     let _ = !(a == b && c == d);\n    |             ^^^^^^^^^^^^^^^^^^^\n \n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:47:13\n+   |\n+47 |     let _ = !a.is_some();\n+   |             ^^^^^^^^^^^^ help: try: `a.is_none()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:49:13\n+   |\n+49 |     let _ = !a.is_none();\n+   |             ^^^^^^^^^^^^ help: try: `a.is_some()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:51:13\n+   |\n+51 |     let _ = !b.is_err();\n+   |             ^^^^^^^^^^^ help: try: `b.is_ok()`\n+\n+error: this boolean expression can be simplified\n+  --> $DIR/booleans.rs:53:13\n+   |\n+53 |     let _ = !b.is_ok();\n+   |             ^^^^^^^^^^ help: try: `b.is_err()`\n+\n error: this boolean expression can be simplified\n   --> $DIR/booleans.rs:55:13\n    |"}]}