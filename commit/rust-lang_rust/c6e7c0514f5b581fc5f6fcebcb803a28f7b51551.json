{"sha": "c6e7c0514f5b581fc5f6fcebcb803a28f7b51551", "node_id": "C_kwDOAAsO6NoAKGM2ZTdjMDUxNGY1YjU4MWZjNWY2ZmNlYmNiODAzYTI4ZjdiNTE1NTE", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-06-22T23:12:18Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-07-13T16:22:25Z"}, "message": "use gathered body_owners in par_body_owners\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "d2ad33868286d775b07a0895ca268ddbe54792de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d2ad33868286d775b07a0895ca268ddbe54792de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551", "html_url": "https://github.com/rust-lang/rust/commit/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e11862f811990cda65dceab96adc67c3a2096aa5", "url": "https://api.github.com/repos/rust-lang/rust/commits/e11862f811990cda65dceab96adc67c3a2096aa5", "html_url": "https://github.com/rust-lang/rust/commit/e11862f811990cda65dceab96adc67c3a2096aa5"}], "stats": {"total": 395, "additions": 192, "deletions": 203}, "files": [{"sha": "eef639e1589d77d00fb6be58fcc05a2ad3a136a7", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=c6e7c0514f5b581fc5f6fcebcb803a28f7b51551", "patch": "@@ -498,19 +498,8 @@ impl<'hir> Map<'hir> {\n \n     pub fn par_body_owners<F: Fn(LocalDefId) + Sync + Send>(self, f: F) {\n         use rustc_data_structures::sync::{par_iter, ParallelIterator};\n-        #[cfg(parallel_compiler)]\n-        use rustc_rayon::iter::IndexedParallelIterator;\n-\n-        par_iter(&self.krate().owners.raw).enumerate().for_each(|(owner, owner_info)| {\n-            let owner = LocalDefId::new(owner);\n-            if let MaybeOwner::Owner(owner_info) = owner_info {\n-                par_iter(owner_info.nodes.bodies.range(..)).for_each(|(local_id, _)| {\n-                    let hir_id = HirId { owner, local_id: *local_id };\n-                    let body_id = BodyId { hir_id };\n-                    f(self.body_owner_def_id(body_id))\n-                })\n-            }\n-        });\n+\n+        par_iter(&self.tcx.hir_crate_items(()).body_owners[..]).for_each(|&def_id| f(def_id));\n     }\n \n     pub fn ty_param_owner(self, def_id: LocalDefId) -> LocalDefId {"}, {"sha": "162ff1d32bc44b486fc8f0b41e82cc8998e7faef", "filename": "src/test/ui/asm/type-check-1.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasm%2Ftype-check-1.stderr?ref=c6e7c0514f5b581fc5f6fcebcb803a28f7b51551", "patch": "@@ -33,33 +33,6 @@ LL |         asm!(\"{}\", sym x);\n    |\n    = help: `sym` operands must refer to either a function or a static\n \n-error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:58:26\n-   |\n-LL |         asm!(\"{}\", const 0f32);\n-   |                          ^^^^ expected integer, found `f32`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:60:26\n-   |\n-LL |         asm!(\"{}\", const 0 as *mut u8);\n-   |                          ^^^^^^^^^^^^ expected integer, found *-ptr\n-   |\n-   = note:     expected type `{integer}`\n-           found raw pointer `*mut u8`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/type-check-1.rs:62:26\n-   |\n-LL |         asm!(\"{}\", const &0);\n-   |                          ^^ expected integer, found `&{integer}`\n-   |\n-help: consider removing the borrow\n-   |\n-LL -         asm!(\"{}\", const &0);\n-LL +         asm!(\"{}\", const 0);\n-   |\n-\n error: invalid asm output\n   --> $DIR/type-check-1.rs:15:29\n    |\n@@ -123,6 +96,33 @@ LL |         asm!(\"{}\", inout(reg) v[..]);\n    |\n    = note: only integers, floats, SIMD vectors, pointers and function pointers can be used as arguments for inline assembly\n \n+error[E0308]: mismatched types\n+  --> $DIR/type-check-1.rs:58:26\n+   |\n+LL |         asm!(\"{}\", const 0f32);\n+   |                          ^^^^ expected integer, found `f32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-check-1.rs:60:26\n+   |\n+LL |         asm!(\"{}\", const 0 as *mut u8);\n+   |                          ^^^^^^^^^^^^ expected integer, found *-ptr\n+   |\n+   = note:     expected type `{integer}`\n+           found raw pointer `*mut u8`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/type-check-1.rs:62:26\n+   |\n+LL |         asm!(\"{}\", const &0);\n+   |                          ^^ expected integer, found `&{integer}`\n+   |\n+help: consider removing the borrow\n+   |\n+LL -         asm!(\"{}\", const &0);\n+LL +         asm!(\"{}\", const 0);\n+   |\n+\n error[E0308]: mismatched types\n   --> $DIR/type-check-1.rs:76:25\n    |"}, {"sha": "8672e79b3e8c8afd5a0b9e7c2ccd0e1a345c693e", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.full.stderr", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.full.stderr?ref=c6e7c0514f5b581fc5f6fcebcb803a28f7b51551", "patch": "@@ -22,30 +22,6 @@ note: the late bound lifetime parameter is introduced here\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:30:23\n-   |\n-LL |     let _ = [0; faz::<'a>(&())];\n-   |                       ^^\n-   |\n-note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n-   |\n-LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n-   |              ^^\n-\n-error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:33:23\n-   |\n-LL |     let _ = [0; faz::<'b>(&())];\n-   |                       ^^\n-   |\n-note: the late bound lifetime parameter is introduced here\n-  --> $DIR/const-arg-in-const-arg.rs:8:14\n-   |\n-LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n-   |              ^^\n-\n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n   --> $DIR/const-arg-in-const-arg.rs:41:24\n    |\n@@ -118,6 +94,30 @@ LL |     let _ = [0; bar::<N>()];\n    |\n    = help: try adding a `where` bound using this expression: `where [(); bar::<N>()]:`\n \n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:30:23\n+   |\n+LL |     let _ = [0; faz::<'a>(&())];\n+   |                       ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n+error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n+  --> $DIR/const-arg-in-const-arg.rs:33:23\n+   |\n+LL |     let _ = [0; faz::<'b>(&())];\n+   |                       ^^\n+   |\n+note: the late bound lifetime parameter is introduced here\n+  --> $DIR/const-arg-in-const-arg.rs:8:14\n+   |\n+LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n+   |              ^^\n+\n error: unconstrained generic constant\n   --> $DIR/const-arg-in-const-arg.rs:47:19\n    |"}, {"sha": "f1353aa99437de05d6668c311ed3ec4b693e5be3", "filename": "src/test/ui/const-generics/const-arg-in-const-arg.min.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-arg-in-const-arg.min.stderr?ref=c6e7c0514f5b581fc5f6fcebcb803a28f7b51551", "patch": "@@ -241,21 +241,21 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/const-arg-in-const-arg.rs:27:23\n+  --> $DIR/const-arg-in-const-arg.rs:38:24\n    |\n-LL |     let _ = [0; bar::<N>()];\n-   |                       ^\n+LL |     let _: Foo<{ bar::<N>() }>;\n+   |                        ^\n    |\n help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n-LL |     let _ = [0; bar::<{ N }>()];\n-   |                       +   +\n+LL |     let _: Foo<{ bar::<{ N }>() }>;\n+   |                        +   +\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:30:23\n+  --> $DIR/const-arg-in-const-arg.rs:41:24\n    |\n-LL |     let _ = [0; faz::<'a>(&())];\n-   |                       ^^\n+LL |     let _: Foo<{ faz::<'a>(&()) }>;\n+   |                        ^^\n    |\n note: the late bound lifetime parameter is introduced here\n   --> $DIR/const-arg-in-const-arg.rs:8:14\n@@ -264,33 +264,41 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:33:23\n+  --> $DIR/const-arg-in-const-arg.rs:44:24\n    |\n-LL |     let _ = [0; faz::<'b>(&())];\n-   |                       ^^\n+LL |     let _: Foo<{ faz::<'b>(&()) }>;\n+   |                        ^^\n    |\n note: the late bound lifetime parameter is introduced here\n   --> $DIR/const-arg-in-const-arg.rs:8:14\n    |\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n+error: constant expression depends on a generic parameter\n+  --> $DIR/const-arg-in-const-arg.rs:25:17\n+   |\n+LL |     let _ = [0; foo::<T>()];\n+   |                 ^^^^^^^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n error[E0747]: unresolved item provided when a constant was expected\n-  --> $DIR/const-arg-in-const-arg.rs:38:24\n+  --> $DIR/const-arg-in-const-arg.rs:27:23\n    |\n-LL |     let _: Foo<{ bar::<N>() }>;\n-   |                        ^\n+LL |     let _ = [0; bar::<N>()];\n+   |                       ^\n    |\n help: if this generic argument was intended as a const parameter, surround it with braces\n    |\n-LL |     let _: Foo<{ bar::<{ N }>() }>;\n-   |                        +   +\n+LL |     let _ = [0; bar::<{ N }>()];\n+   |                       +   +\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:41:24\n+  --> $DIR/const-arg-in-const-arg.rs:30:23\n    |\n-LL |     let _: Foo<{ faz::<'a>(&()) }>;\n-   |                        ^^\n+LL |     let _ = [0; faz::<'a>(&())];\n+   |                       ^^\n    |\n note: the late bound lifetime parameter is introduced here\n   --> $DIR/const-arg-in-const-arg.rs:8:14\n@@ -299,25 +307,17 @@ LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n error: cannot specify lifetime arguments explicitly if late bound lifetime parameters are present\n-  --> $DIR/const-arg-in-const-arg.rs:44:24\n+  --> $DIR/const-arg-in-const-arg.rs:33:23\n    |\n-LL |     let _: Foo<{ faz::<'b>(&()) }>;\n-   |                        ^^\n+LL |     let _ = [0; faz::<'b>(&())];\n+   |                       ^^\n    |\n note: the late bound lifetime parameter is introduced here\n   --> $DIR/const-arg-in-const-arg.rs:8:14\n    |\n LL | const fn faz<'a>(_: &'a ()) -> usize { 13 }\n    |              ^^\n \n-error: constant expression depends on a generic parameter\n-  --> $DIR/const-arg-in-const-arg.rs:25:17\n-   |\n-LL |     let _ = [0; foo::<T>()];\n-   |                 ^^^^^^^^^^\n-   |\n-   = note: this may fail depending on what value the parameter takes\n-\n error[E0747]: unresolved item provided when a constant was expected\n   --> $DIR/const-arg-in-const-arg.rs:49:27\n    |"}, {"sha": "b45f57b7b846bdcf8d90d94336464d506b96c999", "filename": "src/test/ui/issues/issue-47486.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr?ref=c6e7c0514f5b581fc5f6fcebcb803a28f7b51551", "patch": "@@ -1,3 +1,9 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-47486.rs:2:10\n+   |\n+LL |     () < std::mem::size_of::<_>();\n+   |          ^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `usize`\n+\n error[E0282]: type annotations needed\n   --> $DIR/issue-47486.rs:3:11\n    |\n@@ -9,12 +15,6 @@ help: consider specifying the generic argument\n LL |     [0u8; std::mem::size_of::<_>()];\n    |                            ~~~~~\n \n-error[E0308]: mismatched types\n-  --> $DIR/issue-47486.rs:2:10\n-   |\n-LL |     () < std::mem::size_of::<_>();\n-   |          ^^^^^^^^^^^^^^^^^^^^^^^^ expected `()`, found `usize`\n-\n error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0282, E0308."}, {"sha": "3e37fcb2141fc57f36d004a864af1291eb7a0e8c", "filename": "src/test/ui/moves/use_of_moved_value_copy_suggestions.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fuse_of_moved_value_copy_suggestions.stderr?ref=c6e7c0514f5b581fc5f6fcebcb803a28f7b51551", "patch": "@@ -143,36 +143,36 @@ LL | fn duplicate_custom_4<T: A + Copy + Trait>(t: S<T>) -> (S<T>, S<T>)\n    |                            ++++++++++++++\n \n error[E0382]: use of moved value: `t`\n-  --> $DIR/use_of_moved_value_copy_suggestions.rs:83:9\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:75:9\n    |\n-LL | fn existing_colon_in_where<T>(t: T)\n-   |                               - move occurs because `t` has type `T`, which does not implement the `Copy` trait\n-...\n+LL | fn existing_colon<T:>(t: T) {\n+   |                       - move occurs because `t` has type `T`, which does not implement the `Copy` trait\n+LL |\n LL |     [t, t];\n    |      -  ^ value used here after move\n    |      |\n    |      value moved here\n    |\n-help: consider further restricting type parameter `T`\n+help: consider restricting type parameter `T`\n    |\n-LL |     T:, T: Copy\n-   |       ~~~~~~~~~\n+LL | fn existing_colon<T: Copy>(t: T) {\n+   |                      ++++\n \n error[E0382]: use of moved value: `t`\n-  --> $DIR/use_of_moved_value_copy_suggestions.rs:75:9\n+  --> $DIR/use_of_moved_value_copy_suggestions.rs:83:9\n    |\n-LL | fn existing_colon<T:>(t: T) {\n-   |                       - move occurs because `t` has type `T`, which does not implement the `Copy` trait\n-LL |\n+LL | fn existing_colon_in_where<T>(t: T)\n+   |                               - move occurs because `t` has type `T`, which does not implement the `Copy` trait\n+...\n LL |     [t, t];\n    |      -  ^ value used here after move\n    |      |\n    |      value moved here\n    |\n-help: consider restricting type parameter `T`\n+help: consider further restricting type parameter `T`\n    |\n-LL | fn existing_colon<T: Copy>(t: T) {\n-   |                      ++++\n+LL |     T:, T: Copy\n+   |       ~~~~~~~~~\n \n error: aborting due to 11 previous errors\n "}, {"sha": "7f3a7e670b9b75b8c5727f55502d9b03c985a8a1", "filename": "src/test/ui/proc-macro/attribute-with-error.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fattribute-with-error.stderr?ref=c6e7c0514f5b581fc5f6fcebcb803a28f7b51551", "patch": "@@ -1,11 +1,3 @@\n-error[E0308]: mismatched types\n-  --> $DIR/attribute-with-error.rs:25:22\n-   |\n-LL |         let a: i32 = \"foo\";\n-   |                ---   ^^^^^ expected `i32`, found `&str`\n-   |                |\n-   |                expected due to this\n-\n error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:10:18\n    |\n@@ -22,6 +14,14 @@ LL |     let b: i32 = \"f'oo\";\n    |            |\n    |            expected due to this\n \n+error[E0308]: mismatched types\n+  --> $DIR/attribute-with-error.rs:25:22\n+   |\n+LL |         let a: i32 = \"foo\";\n+   |                ---   ^^^^^ expected `i32`, found `&str`\n+   |                |\n+   |                expected due to this\n+\n error[E0308]: mismatched types\n   --> $DIR/attribute-with-error.rs:35:22\n    |"}, {"sha": "e222c141f8b6a0b184d35a5509d61c96911bf536", "filename": "src/test/ui/repeat-expr/repeat_count.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat_count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat_count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat_count.stderr?ref=c6e7c0514f5b581fc5f6fcebcb803a28f7b51551", "patch": "@@ -30,6 +30,12 @@ error[E0308]: mismatched types\n LL |     let e = [0; \"foo\"];\n    |                 ^^^^^ expected `usize`, found `&str`\n \n+error[E0308]: mismatched types\n+  --> $DIR/repeat_count.rs:31:17\n+   |\n+LL |     let g = [0; G { g: () }];\n+   |                 ^^^^^^^^^^^ expected `usize`, found struct `G`\n+\n error[E0308]: mismatched types\n   --> $DIR/repeat_count.rs:19:17\n    |\n@@ -57,12 +63,6 @@ help: change the type of the numeric literal from `u8` to `usize`\n LL |     let f = [0; 4usize];\n    |                  ~~~~~\n \n-error[E0308]: mismatched types\n-  --> $DIR/repeat_count.rs:31:17\n-   |\n-LL |     let g = [0; G { g: () }];\n-   |                 ^^^^^^^^^^^ expected `usize`, found struct `G`\n-\n error: aborting due to 9 previous errors\n \n Some errors have detailed explanations: E0308, E0435."}, {"sha": "a763eb6f2f85499ef5c44377636834e872e3c1c7", "filename": "src/test/ui/suggestions/impl-trait-with-missing-bounds.stderr", "status": "modified", "additions": 19, "deletions": 19, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimpl-trait-with-missing-bounds.stderr?ref=c6e7c0514f5b581fc5f6fcebcb803a28f7b51551", "patch": "@@ -1,3 +1,22 @@\n+error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n+  --> $DIR/impl-trait-with-missing-bounds.rs:6:13\n+   |\n+LL |         qux(constraint);\n+   |         --- ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n+   |         |\n+   |         required by a bound introduced by this call\n+   |\n+   = help: the trait `Debug` is not implemented for `<impl Iterator as Iterator>::Item`\n+note: required by a bound in `qux`\n+  --> $DIR/impl-trait-with-missing-bounds.rs:50:16\n+   |\n+LL | fn qux(_: impl std::fmt::Debug) {}\n+   |                ^^^^^^^^^^^^^^^ required by this bound in `qux`\n+help: introduce a type parameter with a trait bound instead of using `impl Trait`\n+   |\n+LL | fn foo<I: Iterator>(constraints: I) where <I as Iterator>::Item: Debug {\n+   |       +++++++++++++              ~  ++++++++++++++++++++++++++++++++++\n+\n error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n   --> $DIR/impl-trait-with-missing-bounds.rs:14:13\n    |\n@@ -74,25 +93,6 @@ help: introduce a type parameter with a trait bound instead of using `impl Trait\n LL | fn bak<I: Iterator + std::fmt::Debug>(constraints: I) where <I as Iterator>::Item: Debug {\n    |       +++++++++++++++++++++++++++++++              ~  ++++++++++++++++++++++++++++++++++\n \n-error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n-  --> $DIR/impl-trait-with-missing-bounds.rs:6:13\n-   |\n-LL |         qux(constraint);\n-   |         --- ^^^^^^^^^^ `<impl Iterator as Iterator>::Item` cannot be formatted using `{:?}` because it doesn't implement `Debug`\n-   |         |\n-   |         required by a bound introduced by this call\n-   |\n-   = help: the trait `Debug` is not implemented for `<impl Iterator as Iterator>::Item`\n-note: required by a bound in `qux`\n-  --> $DIR/impl-trait-with-missing-bounds.rs:50:16\n-   |\n-LL | fn qux(_: impl std::fmt::Debug) {}\n-   |                ^^^^^^^^^^^^^^^ required by this bound in `qux`\n-help: introduce a type parameter with a trait bound instead of using `impl Trait`\n-   |\n-LL | fn foo<I: Iterator>(constraints: I) where <I as Iterator>::Item: Debug {\n-   |       +++++++++++++              ~  ++++++++++++++++++++++++++++++++++\n-\n error[E0277]: `<impl Iterator as Iterator>::Item` doesn't implement `Debug`\n   --> $DIR/impl-trait-with-missing-bounds.rs:45:13\n    |"}, {"sha": "84cbc93571a710f4b8cbafe39bf245fb647a9dd6", "filename": "src/test/ui/suggestions/suggest-ref-macro.stderr", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-ref-macro.stderr?ref=c6e7c0514f5b581fc5f6fcebcb803a28f7b51551", "patch": "@@ -1,3 +1,25 @@\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-ref-macro.rs:8:1\n+   |\n+LL | #[hello]\n+   | ^^^^^^^^\n+   | |\n+   | expected `&mut i32`, found integer\n+   | arguments to this function are incorrect\n+   |\n+note: function defined here\n+  --> $DIR/suggest-ref-macro.rs:8:1\n+   |\n+LL |   #[hello]\n+   |  _-^^^^^^^\n+LL | | fn abc() {}\n+LL | |\n+LL | | fn x(_: &mut i32) {}\n+LL | |\n+LL | | macro_rules! bla {\n+   | |_____________-\n+   = note: this error originates in the attribute macro `hello` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n error[E0308]: mismatched types\n   --> $DIR/suggest-ref-macro.rs:15:11\n    |\n@@ -36,28 +58,6 @@ note: function defined here\n LL | fn x(_: &mut i32) {}\n    |    ^ -----------\n \n-error[E0308]: mismatched types\n-  --> $DIR/suggest-ref-macro.rs:8:1\n-   |\n-LL | #[hello]\n-   | ^^^^^^^^\n-   | |\n-   | expected `&mut i32`, found integer\n-   | arguments to this function are incorrect\n-   |\n-note: function defined here\n-  --> $DIR/suggest-ref-macro.rs:8:1\n-   |\n-LL |   #[hello]\n-   |  _-^^^^^^^\n-LL | | fn abc() {}\n-LL | |\n-LL | | fn x(_: &mut i32) {}\n-LL | |\n-LL | | macro_rules! bla {\n-   | |_____________-\n-   = note: this error originates in the attribute macro `hello` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "11650a28563cd190d19464b5cd6a551192482327", "filename": "src/test/ui/union/union-derive-clone.mirunsafeck.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.mirunsafeck.stderr?ref=c6e7c0514f5b581fc5f6fcebcb803a28f7b51551", "patch": "@@ -1,3 +1,20 @@\n+error[E0277]: the trait bound `U1: Copy` is not satisfied\n+  --> $DIR/union-derive-clone.rs:6:10\n+   |\n+LL | #[derive(Clone)]\n+   |          ^^^^^ the trait `Copy` is not implemented for `U1`\n+   |\n+note: required by a bound in `AssertParamIsCopy`\n+  --> $SRC_DIR/core/src/clone.rs:LL:COL\n+   |\n+LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n+   |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `U1` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n+\n error[E0599]: the method `clone` exists for union `U5<CloneNoCopy>`, but its trait bounds were not satisfied\n   --> $DIR/union-derive-clone.rs:38:15\n    |\n@@ -26,23 +43,6 @@ help: consider annotating `CloneNoCopy` with `#[derive(Clone, Copy)]`\n LL | #[derive(Clone, Copy)]\n    |\n \n-error[E0277]: the trait bound `U1: Copy` is not satisfied\n-  --> $DIR/union-derive-clone.rs:6:10\n-   |\n-LL | #[derive(Clone)]\n-   |          ^^^^^ the trait `Copy` is not implemented for `U1`\n-   |\n-note: required by a bound in `AssertParamIsCopy`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n-   |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n-   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: consider annotating `U1` with `#[derive(Copy)]`\n-   |\n-LL | #[derive(Copy)]\n-   |\n-\n error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0277, E0599."}, {"sha": "11650a28563cd190d19464b5cd6a551192482327", "filename": "src/test/ui/union/union-derive-clone.thirunsafeck.stderr", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6e7c0514f5b581fc5f6fcebcb803a28f7b51551/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funion%2Funion-derive-clone.thirunsafeck.stderr?ref=c6e7c0514f5b581fc5f6fcebcb803a28f7b51551", "patch": "@@ -1,3 +1,20 @@\n+error[E0277]: the trait bound `U1: Copy` is not satisfied\n+  --> $DIR/union-derive-clone.rs:6:10\n+   |\n+LL | #[derive(Clone)]\n+   |          ^^^^^ the trait `Copy` is not implemented for `U1`\n+   |\n+note: required by a bound in `AssertParamIsCopy`\n+  --> $SRC_DIR/core/src/clone.rs:LL:COL\n+   |\n+LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n+   |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n+   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n+help: consider annotating `U1` with `#[derive(Copy)]`\n+   |\n+LL | #[derive(Copy)]\n+   |\n+\n error[E0599]: the method `clone` exists for union `U5<CloneNoCopy>`, but its trait bounds were not satisfied\n   --> $DIR/union-derive-clone.rs:38:15\n    |\n@@ -26,23 +43,6 @@ help: consider annotating `CloneNoCopy` with `#[derive(Clone, Copy)]`\n LL | #[derive(Clone, Copy)]\n    |\n \n-error[E0277]: the trait bound `U1: Copy` is not satisfied\n-  --> $DIR/union-derive-clone.rs:6:10\n-   |\n-LL | #[derive(Clone)]\n-   |          ^^^^^ the trait `Copy` is not implemented for `U1`\n-   |\n-note: required by a bound in `AssertParamIsCopy`\n-  --> $SRC_DIR/core/src/clone.rs:LL:COL\n-   |\n-LL | pub struct AssertParamIsCopy<T: Copy + ?Sized> {\n-   |                                 ^^^^ required by this bound in `AssertParamIsCopy`\n-   = note: this error originates in the derive macro `Clone` (in Nightly builds, run with -Z macro-backtrace for more info)\n-help: consider annotating `U1` with `#[derive(Copy)]`\n-   |\n-LL | #[derive(Copy)]\n-   |\n-\n error: aborting due to 2 previous errors\n \n Some errors have detailed explanations: E0277, E0599."}]}