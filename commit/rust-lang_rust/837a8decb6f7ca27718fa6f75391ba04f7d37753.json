{"sha": "837a8decb6f7ca27718fa6f75391ba04f7d37753", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzN2E4ZGVjYjZmN2NhMjc3MThmYTZmNzUzOTFiYTA0ZjdkMzc3NTM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-13T22:52:19Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-01-14T05:34:42Z"}, "message": "Rollup merge of #30837 - semarie:openbsd-libc, r=alexcrichton\n\nThe following PR updates libc version to latest commits for correctly support openbsd.\nIt corrects several points in rustc to be compatible with libc changes.\n\nr? @alexcrichton", "tree": {"sha": "3920402c3fa430c0d07026de9e9eb97e6765d21a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3920402c3fa430c0d07026de9e9eb97e6765d21a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/837a8decb6f7ca27718fa6f75391ba04f7d37753", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/837a8decb6f7ca27718fa6f75391ba04f7d37753", "html_url": "https://github.com/rust-lang/rust/commit/837a8decb6f7ca27718fa6f75391ba04f7d37753", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/837a8decb6f7ca27718fa6f75391ba04f7d37753/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ff1d20ad71c01adcaa61ea1c11f3ea14ce8c983", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ff1d20ad71c01adcaa61ea1c11f3ea14ce8c983", "html_url": "https://github.com/rust-lang/rust/commit/4ff1d20ad71c01adcaa61ea1c11f3ea14ce8c983"}, {"sha": "667ee8a57b86f5f3e12ff9bd780d6f16dc4129d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/667ee8a57b86f5f3e12ff9bd780d6f16dc4129d8", "html_url": "https://github.com/rust-lang/rust/commit/667ee8a57b86f5f3e12ff9bd780d6f16dc4129d8"}], "stats": {"total": 37, "additions": 27, "deletions": 10}, "files": [{"sha": "23a368a30a52bc4cfb67f4d8bfd81cbfb8406289", "filename": "src/libstd/rand/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/837a8decb6f7ca27718fa6f75391ba04f7d37753/src%2Flibstd%2Frand%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837a8decb6f7ca27718fa6f75391ba04f7d37753/src%2Flibstd%2Frand%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fos.rs?ref=837a8decb6f7ca27718fa6f75391ba04f7d37753", "patch": "@@ -222,7 +222,7 @@ mod imp {\n             // getentropy(2) permits a maximum buffer size of 256 bytes\n             for s in v.chunks_mut(256) {\n                 let ret = unsafe {\n-                    libc::syscall(libc::NR_GETENTROPY, s.as_mut_ptr(), s.len())\n+                    libc::getentropy(s.as_mut_ptr() as *mut libc::c_void, s.len())\n                 };\n                 if ret == -1 {\n                     panic!(\"unexpected getentropy error: {}\", errno());"}, {"sha": "10fda3fcd7fa5165ce82e70ea0fab45d8517559e", "filename": "src/libstd/sys/unix/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/837a8decb6f7ca27718fa6f75391ba04f7d37753/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837a8decb6f7ca27718fa6f75391ba04f7d37753/src%2Flibstd%2Fsys%2Funix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffs.rs?ref=837a8decb6f7ca27718fa6f75391ba04f7d37753", "patch": "@@ -204,7 +204,8 @@ impl DirEntry {\n \n     #[cfg(any(target_os = \"macos\",\n               target_os = \"ios\",\n-              target_os = \"netbsd\"))]\n+              target_os = \"netbsd\",\n+              target_os = \"openbsd\"))]\n     fn name_bytes(&self) -> &[u8] {\n         unsafe {\n             ::slice::from_raw_parts(self.entry.d_name.as_ptr() as *const u8,\n@@ -213,8 +214,7 @@ impl DirEntry {\n     }\n     #[cfg(any(target_os = \"freebsd\",\n               target_os = \"dragonfly\",\n-              target_os = \"bitrig\",\n-              target_os = \"openbsd\"))]\n+              target_os = \"bitrig\"))]\n     fn name_bytes(&self) -> &[u8] {\n         unsafe {\n             ::slice::from_raw_parts(self.entry.d_name.as_ptr() as *const u8,"}, {"sha": "fc49f4257be2ace4908917a38edd0278ce04b774", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/837a8decb6f7ca27718fa6f75391ba04f7d37753/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837a8decb6f7ca27718fa6f75391ba04f7d37753/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=837a8decb6f7ca27718fa6f75391ba04f7d37753", "patch": "@@ -59,19 +59,19 @@ mod imp {\n     static mut PAGE_SIZE: usize = 0;\n \n     #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n-    unsafe fn siginfo_si_addr(info: *mut libc::siginfo_t) -> *mut libc::c_void {\n+    unsafe fn siginfo_si_addr(info: *mut libc::siginfo_t) -> usize {\n         #[repr(C)]\n         struct siginfo_t {\n             a: [libc::c_int; 3], // si_signo, si_code, si_errno,\n             si_addr: *mut libc::c_void,\n         }\n \n-        (*(info as *const siginfo_t)).si_addr\n+        (*(info as *const siginfo_t)).si_addr as usize\n     }\n \n     #[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]\n-    unsafe fn siginfo_si_addr(info: *mut libc::siginfo_t) -> *mut libc::c_void {\n-        (*info).si_addr\n+    unsafe fn siginfo_si_addr(info: *mut libc::siginfo_t) -> usize {\n+        (*info).si_addr as usize\n     }\n \n     // Signal handler for the SIGSEGV and SIGBUS handlers. We've got guard pages\n@@ -98,7 +98,7 @@ mod imp {\n         use sys_common::util::report_overflow;\n \n         let guard = thread_info::stack_guard().unwrap_or(0);\n-        let addr = siginfo_si_addr(info) as usize;\n+        let addr = siginfo_si_addr(info);\n \n         // If the faulting address is within the guard page, then we print a\n         // message saying so."}, {"sha": "dcc344c4ffd2140f6d6b9965aba5c936bbd12924", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/837a8decb6f7ca27718fa6f75391ba04f7d37753/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/837a8decb6f7ca27718fa6f75391ba04f7d37753/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=837a8decb6f7ca27718fa6f75391ba04f7d37753", "patch": "@@ -919,7 +919,6 @@ fn get_concurrency() -> usize {\n     #[cfg(any(target_os = \"freebsd\",\n               target_os = \"dragonfly\",\n               target_os = \"bitrig\",\n-              target_os = \"openbsd\",\n               target_os = \"netbsd\"))]\n     fn num_cpus() -> usize {\n         let mut cpus: libc::c_uint = 0;\n@@ -946,6 +945,24 @@ fn get_concurrency() -> usize {\n         }\n         cpus as usize\n     }\n+\n+    #[cfg(target_os = \"openbsd\")]\n+    fn num_cpus() -> usize {\n+        let mut cpus: libc::c_uint = 0;\n+        let mut cpus_size = std::mem::size_of_val(&cpus);\n+        let mut mib = [libc::CTL_HW, libc::HW_NCPU, 0, 0];\n+\n+        unsafe {\n+            libc::sysctl(mib.as_mut_ptr(), 2,\n+                         &mut cpus as *mut _ as *mut _,\n+                         &mut cpus_size as *mut _ as *mut _,\n+                         0 as *mut _, 0);\n+        }\n+        if cpus < 1 {\n+            cpus = 1;\n+        }\n+        cpus as usize\n+    }\n }\n \n pub fn filter_tests(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> Vec<TestDescAndFn> {"}]}