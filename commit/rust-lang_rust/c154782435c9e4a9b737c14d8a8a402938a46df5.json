{"sha": "c154782435c9e4a9b737c14d8a8a402938a46df5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNTQ3ODI0MzVjOWU0YTliNzM3YzE0ZDhhOGE0MDI5MzhhNDZkZjU=", "commit": {"author": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2015-10-10T11:03:18Z"}, "committer": {"name": "Florian Hahn", "email": "flo@fhahn.com", "date": "2015-10-12T08:03:31Z"}, "message": "Add notes for all potentially missing std::ops traits", "tree": {"sha": "cdfa1677c1621b4395796002efb49055f14c3081", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdfa1677c1621b4395796002efb49055f14c3081"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c154782435c9e4a9b737c14d8a8a402938a46df5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c154782435c9e4a9b737c14d8a8a402938a46df5", "html_url": "https://github.com/rust-lang/rust/commit/c154782435c9e4a9b737c14d8a8a402938a46df5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c154782435c9e4a9b737c14d8a8a402938a46df5/comments", "author": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fhahn", "id": 450489, "node_id": "MDQ6VXNlcjQ1MDQ4OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/450489?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fhahn", "html_url": "https://github.com/fhahn", "followers_url": "https://api.github.com/users/fhahn/followers", "following_url": "https://api.github.com/users/fhahn/following{/other_user}", "gists_url": "https://api.github.com/users/fhahn/gists{/gist_id}", "starred_url": "https://api.github.com/users/fhahn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fhahn/subscriptions", "organizations_url": "https://api.github.com/users/fhahn/orgs", "repos_url": "https://api.github.com/users/fhahn/repos", "events_url": "https://api.github.com/users/fhahn/events{/privacy}", "received_events_url": "https://api.github.com/users/fhahn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c209d1cc49a26247c7055c3da546dbe243ed81b", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c209d1cc49a26247c7055c3da546dbe243ed81b", "html_url": "https://github.com/rust-lang/rust/commit/6c209d1cc49a26247c7055c3da546dbe243ed81b"}], "stats": {"total": 92, "additions": 70, "deletions": 22}, "files": [{"sha": "b00535c9610faf65d715e3d66a8149931691115f", "filename": "src/librustc_typeck/check/op.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c154782435c9e4a9b737c14d8a8a402938a46df5/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c154782435c9e4a9b737c14d8a8a402938a46df5/src%2Flibrustc_typeck%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fop.rs?ref=c154782435c9e4a9b737c14d8a8a402938a46df5", "patch": "@@ -191,20 +191,28 @@ fn check_overloaded_binop<'a, 'tcx>(fcx: &FnCtxt<'a, 'tcx>,\n                               \"binary operation `{}` cannot be applied to type `{}`\",\n                               hir_util::binop_to_string(op.node),\n                               lhs_ty);\n-                    match op.node {\n-                        hir::BiEq =>\n-                            span_note!(fcx.tcx().sess, lhs_expr.span,\n-                                       \"an implementation of `std::cmp::PartialEq` might be \\\n-                                        missing for `{}` or one of its type paramters\",\n-                                        lhs_ty),\n+                    let missing_trait = match op.node {\n+                        hir::BiAdd    => Some(\"std::ops::Add\"),\n+                        hir::BiSub    => Some(\"std::ops::Sub\"),\n+                        hir::BiMul    => Some(\"std::ops::Mul\"),\n+                        hir::BiDiv    => Some(\"std::ops::Div\"),\n+                        hir::BiRem    => Some(\"std::ops::Rem\"),\n+                        hir::BiBitAnd => Some(\"std::ops::BitAnd\"),\n+                        hir::BiBitOr  => Some(\"std::ops::BitOr\"),\n+                        hir::BiShl    => Some(\"std::ops::Shl\"),\n+                        hir::BiShr    => Some(\"std::ops::Shr\"),\n+                        hir::BiEq | hir::BiNe => Some(\"std::cmp::PartialEq\"),\n                         hir::BiLt | hir::BiLe | hir::BiGt | hir::BiGe =>\n-                            span_note!(fcx.tcx().sess, lhs_expr.span,\n-                                       \"an implementation of `std::cmp::PartialOrd` might be \\\n-                                        missing for `{}` or one of its type paramters\",\n-                                        lhs_ty),\n-                        _ => ()\n-\n+                            Some(\"std::cmp::PartialOrd\"),\n+                        _             => None\n                     };\n+\n+                    if let Some(missing_trait) = missing_trait {\n+                        span_note!(fcx.tcx().sess, lhs_expr.span,\n+                                   \"an implementation of `{}` might be missing for `{}` \\\n+                                    or one of its type arguments\",\n+                                    missing_trait, lhs_ty);\n+                    }\n                 }\n             }\n             fcx.tcx().types.err"}, {"sha": "6baaebc32449994ce662657d436d358c838922a2", "filename": "src/test/compile-fail/issue-28837.rs", "status": "modified", "additions": 50, "deletions": 10, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c154782435c9e4a9b737c14d8a8a402938a46df5/src%2Ftest%2Fcompile-fail%2Fissue-28837.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c154782435c9e4a9b737c14d8a8a402938a46df5/src%2Ftest%2Fcompile-fail%2Fissue-28837.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28837.rs?ref=c154782435c9e4a9b737c14d8a8a402938a46df5", "patch": "@@ -1,20 +1,60 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n struct A;\n \n fn main() {\n     let a = A;\n \n-    if a == a {} //~ ERROR binary operation `==` cannot be applied to type `A`\n-        //^~ NOTE an implementation of `std::cmp::PartialEq` might be missing for `A` or one of\n+    a + a; //~ ERROR binary operation `+` cannot be applied to type `A` \n+    //~^ NOTE an implementation of `std::ops::Add` might be missing for `A` or\n+\n+    a - a; //~ ERROR binary operation `-` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::ops::Sub` might be missing for `A` or one of\n+\n+    a * a; //~ ERROR binary operation `*` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::ops::Mul` might be missing for `A` or one of\n+\n+    a / a; //~ ERROR binary operation `/` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::ops::Div` might be missing for `A` or one of\n+\n+    a % a; //~ ERROR binary operation `%` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::ops::Rem` might be missing for `A` or one of\n+\n+    a & a; //~ ERROR binary operation `&` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::ops::BitAnd` might be missing for `A` or one of\n+\n+    a | a; //~ ERROR binary operation `|` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::ops::BitOr` might be missing for `A` or one of\n+\n+    a << a; //~ ERROR binary operation `<<` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::ops::Shl` might be missing for `A` or one of\n+\n+    a >> a; //~ ERROR binary operation `>>` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::ops::Shr` might be missing for `A` or one of\n+\n+    a == a; //~ ERROR binary operation `==` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::cmp::PartialEq` might be missing for `A` or one of\n+\n+    a != a; //~ ERROR binary operation `!=` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::cmp::PartialEq` might be missing for `A` or one of\n \n-    if a < a {} //~ ERROR binary operation `<` cannot be applied to type `A`\n-        //^~ NOTE an implementation of `std::cmp::PartialOrd` might be missing for `A` or one of\n+    a < a; //~ ERROR binary operation `<` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::cmp::PartialOrd` might be missing for `A` or one of\n \n-    if a <= a {} //~ ERROR binary operation `<=` cannot be applied to type `A`\n-        //^~ NOTE an implementation of `std::cmp::PartialOrd` might be missing for `A` or one of\n+    a <= a; //~ ERROR binary operation `<=` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::cmp::PartialOrd` might be missing for `A` or one of\n \n-    if a > a {} //~ ERROR binary operation `>` cannot be applied to type `A`\n-        //^~ NOTE an implementation of `std::cmp::PartialOrd` might be missing for `A` or one of\n+    a > a; //~ ERROR binary operation `>` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::cmp::PartialOrd` might be missing for `A` or one of\n \n-    if a >= a {} //~ ERROR binary operation `>=` cannot be applied to type `A`\n-        //^~ NOTE an implementation of `std::cmp::PartialOrd` might be missing for `A` or one of\n+    a >= a; //~ ERROR binary operation `>=` cannot be applied to type `A`\n+    //~^ NOTE an implementation of `std::cmp::PartialOrd` might be missing for `A` or one of\n }"}]}