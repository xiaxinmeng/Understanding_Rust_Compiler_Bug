{"sha": "786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NmNhZTUyMGFkNjJjOWEwYTEzZjVhYjE4ZTViZDdlNWIwYzk4MjU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-16T13:50:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-16T13:50:34Z"}, "message": "Merge #2276\n\n2276: Source-ify name_definition r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a812e1c6c64944d4f24abf6b3c9f3dbb9add55b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a812e1c6c64944d4f24abf6b3c9f3dbb9add55b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdz/6qCRBK7hj4Ov3rIwAAdHIIAJlu9VYCmzPJCpiTfxqq4FWT\nzXHABBjB6lRfNrazuSaPV566QIAAP9kaI0tzmYyaX2bUnI04lFSjG5jB6eYxYULs\n858KfGPwisAdiOGK2h/ZRybmsN/5vqlzKEFIT1tyIN3pyouQsv1jEfi9T2kUxaHt\n5S1eYwsh8URwgcR1V85lHdNDaWuc3No8WG83BXH3GaFKE0+JF0iynLzl43pSRVJW\nAJs5L90GuYfyj6R8z9MQgBjqDDZyJzRtq7DxNgaOR083NMk9uH8hlngXdwI+a3m/\nvgoiTcXExYkkpNCsB0F7jhpiTIRxtcXzDune/b82085z26Xb1LNq1Zk2F83kSOI=\n=LQmn\n-----END PGP SIGNATURE-----\n", "payload": "tree a812e1c6c64944d4f24abf6b3c9f3dbb9add55b4\nparent 5d9bce6e88626ec5f36b562803686c848fdf7b66\nparent 3b7cf9226d9cbadb6a45bc2a95617e35db11e742\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1573912234 +0000\ncommitter GitHub <noreply@github.com> 1573912234 +0000\n\nMerge #2276\n\n2276: Source-ify name_definition r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825", "html_url": "https://github.com/rust-lang/rust/commit/786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d9bce6e88626ec5f36b562803686c848fdf7b66", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d9bce6e88626ec5f36b562803686c848fdf7b66", "html_url": "https://github.com/rust-lang/rust/commit/5d9bce6e88626ec5f36b562803686c848fdf7b66"}, {"sha": "3b7cf9226d9cbadb6a45bc2a95617e35db11e742", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b7cf9226d9cbadb6a45bc2a95617e35db11e742", "html_url": "https://github.com/rust-lang/rust/commit/3b7cf9226d9cbadb6a45bc2a95617e35db11e742"}], "stats": {"total": 82, "additions": 41, "deletions": 41}, "files": [{"sha": "821796e5f69cda58b4cccd161b07a878a496055a", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825", "patch": "@@ -1,6 +1,7 @@\n //! FIXME: write short doc here\n \n-use ra_db::{FileId, SourceDatabase};\n+use hir::Source;\n+use ra_db::SourceDatabase;\n use ra_syntax::{\n     algo::find_node_at_offset,\n     ast::{self, DocCommentsOwner},\n@@ -21,11 +22,12 @@ pub(crate) fn goto_definition(\n     let parse = db.parse(position.file_id);\n     let syntax = parse.tree().syntax().clone();\n     if let Some(name_ref) = find_node_at_offset::<ast::NameRef>(&syntax, position.offset) {\n-        let navs = reference_definition(db, position.file_id, &name_ref).to_vec();\n+        let navs =\n+            reference_definition(db, Source::new(position.file_id.into(), &name_ref)).to_vec();\n         return Some(RangeInfo::new(name_ref.syntax().text_range(), navs.to_vec()));\n     }\n     if let Some(name) = find_node_at_offset::<ast::Name>(&syntax, position.offset) {\n-        let navs = name_definition(db, position.file_id, &name)?;\n+        let navs = name_definition(db, Source::new(position.file_id.into(), &name))?;\n         return Some(RangeInfo::new(name.syntax().text_range(), navs));\n     }\n     None\n@@ -49,12 +51,11 @@ impl ReferenceResult {\n \n pub(crate) fn reference_definition(\n     db: &RootDatabase,\n-    file_id: FileId,\n-    name_ref: &ast::NameRef,\n+    name_ref: Source<&ast::NameRef>,\n ) -> ReferenceResult {\n     use self::ReferenceResult::*;\n \n-    let name_kind = classify_name_ref(db, file_id, &name_ref).map(|d| d.kind);\n+    let name_kind = classify_name_ref(db, name_ref).map(|d| d.kind);\n     match name_kind {\n         Some(Macro(mac)) => return Exact(mac.to_nav(db)),\n         Some(Field(field)) => return Exact(field.to_nav(db)),\n@@ -76,7 +77,7 @@ pub(crate) fn reference_definition(\n     };\n \n     // Fallback index based approach:\n-    let navs = crate::symbol_index::index_resolve(db, name_ref)\n+    let navs = crate::symbol_index::index_resolve(db, name_ref.ast)\n         .into_iter()\n         .map(|s| s.to_nav(db))\n         .collect();\n@@ -85,35 +86,34 @@ pub(crate) fn reference_definition(\n \n pub(crate) fn name_definition(\n     db: &RootDatabase,\n-    file_id: FileId,\n-    name: &ast::Name,\n+    name: Source<&ast::Name>,\n ) -> Option<Vec<NavigationTarget>> {\n-    let parent = name.syntax().parent()?;\n+    let parent = name.ast.syntax().parent()?;\n \n     if let Some(module) = ast::Module::cast(parent.clone()) {\n         if module.has_semi() {\n-            let src = hir::Source { file_id: file_id.into(), ast: module };\n+            let src = name.with_ast(module);\n             if let Some(child_module) = hir::Module::from_declaration(db, src) {\n                 let nav = child_module.to_nav(db);\n                 return Some(vec![nav]);\n             }\n         }\n     }\n \n-    if let Some(nav) = named_target(db, file_id, &parent) {\n+    if let Some(nav) = named_target(db, name.with_ast(&parent)) {\n         return Some(vec![nav]);\n     }\n \n     None\n }\n \n-fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option<NavigationTarget> {\n+fn named_target(db: &RootDatabase, node: Source<&SyntaxNode>) -> Option<NavigationTarget> {\n     match_ast! {\n-        match node {\n+        match (node.ast) {\n             ast::StructDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -122,7 +122,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::EnumDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -131,7 +131,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::EnumVariant(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -140,7 +140,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::FnDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -149,7 +149,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::TypeAliasDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -158,7 +158,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::ConstDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -167,7 +167,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::StaticDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -176,7 +176,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::TraitDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -185,7 +185,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::RecordFieldDef(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -194,7 +194,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::Module(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     it.short_label(),\n@@ -203,7 +203,7 @@ fn named_target(db: &RootDatabase, file_id: FileId, node: &SyntaxNode) -> Option\n             ast::MacroCall(it) => {\n                 Some(NavigationTarget::from_named(\n                     db,\n-                    file_id.into(),\n+                    node.file_id,\n                     &it,\n                     it.doc_comment_text(),\n                     None,"}, {"sha": "cc25f4c375b3194beacbcf81095bc91f931b76e2", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::{Adt, HasSource, HirDisplay};\n+use hir::{Adt, HasSource, HirDisplay, Source};\n use ra_db::SourceDatabase;\n use ra_syntax::{\n     algo::{ancestors_at_offset, find_covering_element, find_node_at_offset},\n@@ -171,7 +171,8 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n         find_node_at_offset::<ast::NameRef>(file.syntax(), position.offset)\n     {\n         let mut no_fallback = false;\n-        if let Some(name_kind) = classify_name_ref(db, position.file_id, &name_ref).map(|d| d.kind)\n+        if let Some(name_kind) =\n+            classify_name_ref(db, Source::new(position.file_id.into(), &name_ref)).map(|d| d.kind)\n         {\n             res.extend(hover_text_from_name_kind(db, name_kind, &mut no_fallback))\n         }"}, {"sha": "1af7e8a9fa9959c531598420bf15ba803123a69f", "filename": "crates/ra_ide_api/src/references.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825/crates%2Fra_ide_api%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences.rs?ref=786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825", "patch": "@@ -14,6 +14,7 @@ mod name_definition;\n mod rename;\n mod search_scope;\n \n+use hir::Source;\n use once_cell::unsync::Lazy;\n use ra_db::{SourceDatabase, SourceDatabaseExt};\n use ra_prof::profile;\n@@ -114,7 +115,7 @@ fn find_name<'a>(\n         return Some(RangeInfo::new(range, (name.text().to_string(), def)));\n     }\n     let name_ref = find_node_at_offset::<ast::NameRef>(&syntax, position.offset)?;\n-    let def = classify_name_ref(db, position.file_id, &name_ref)?;\n+    let def = classify_name_ref(db, Source::new(position.file_id.into(), &name_ref))?;\n     let range = name_ref.syntax().text_range();\n     Some(RangeInfo::new(range, (name_ref.text().to_string(), def)))\n }\n@@ -146,7 +147,7 @@ fn process_definition(\n                         continue;\n                     }\n                 }\n-                if let Some(d) = classify_name_ref(db, file_id, &name_ref) {\n+                if let Some(d) = classify_name_ref(db, Source::new(file_id.into(), &name_ref)) {\n                     if d == def {\n                         refs.push(FileRange { file_id, range });\n                     }"}, {"sha": "5ca9da15e1253f6ea829d635b1a7d1cfcf24d5f4", "filename": "crates/ra_ide_api/src/references/classify.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Freferences%2Fclassify.rs?ref=786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825", "patch": "@@ -123,14 +123,12 @@ pub(crate) fn classify_name(\n \n pub(crate) fn classify_name_ref(\n     db: &RootDatabase,\n-    file_id: FileId,\n-    name_ref: &ast::NameRef,\n+    name_ref: Source<&ast::NameRef>,\n ) -> Option<NameDefinition> {\n     let _p = profile(\"classify_name_ref\");\n \n-    let parent = name_ref.syntax().parent()?;\n-    let analyzer =\n-        SourceAnalyzer::new(db, hir::Source::new(file_id.into(), name_ref.syntax()), None);\n+    let parent = name_ref.ast.syntax().parent()?;\n+    let analyzer = SourceAnalyzer::new(db, name_ref.map(|it| it.syntax()), None);\n \n     if let Some(method_call) = ast::MethodCallExpr::cast(parent.clone()) {\n         tested_by!(goto_definition_works_for_methods);\n@@ -150,17 +148,16 @@ pub(crate) fn classify_name_ref(\n         tested_by!(goto_definition_works_for_record_fields);\n         if let Some(record_lit) = record_field.syntax().ancestors().find_map(ast::RecordLit::cast) {\n             let variant_def = analyzer.resolve_record_literal(&record_lit)?;\n-            let hir_path = Path::from_name_ref(name_ref);\n+            let hir_path = Path::from_name_ref(name_ref.ast);\n             let hir_name = hir_path.as_ident()?;\n             let field = variant_def.field(db, hir_name)?;\n             return Some(from_struct_field(db, field));\n         }\n     }\n \n-    let file_id = file_id.into();\n-    let ast = ModuleSource::from_child_node(db, Source::new(file_id, &parent));\n+    let ast = ModuleSource::from_child_node(db, name_ref.with_ast(&parent));\n     // FIXME: find correct container and visibility for each case\n-    let container = Module::from_definition(db, Source { file_id, ast })?;\n+    let container = Module::from_definition(db, name_ref.with_ast(ast))?;\n     let visibility = None;\n \n     if let Some(macro_call) = parent.ancestors().find_map(ast::MacroCall::cast) {\n@@ -171,7 +168,7 @@ pub(crate) fn classify_name_ref(\n         }\n     }\n \n-    let path = name_ref.syntax().ancestors().find_map(ast::Path::cast)?;\n+    let path = name_ref.ast.syntax().ancestors().find_map(ast::Path::cast)?;\n     let resolved = analyzer.resolve_path(db, &path)?;\n     match resolved {\n         PathResolution::Def(def) => Some(from_module_def(db, def, Some(container))),"}, {"sha": "584657ca261eea36e7bc3a8ab444f038874a3ac1", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=786cae520ad62c9a0a13f5ab18e5bd7e5b0c9825", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_hash::{FxHashMap, FxHashSet};\n \n-use hir::{Mutability, Name};\n+use hir::{Mutability, Name, Source};\n use ra_db::SourceDatabase;\n use ra_prof::profile;\n use ra_syntax::{ast, AstNode, Direction, SyntaxElement, SyntaxKind, SyntaxKind::*, TextRange, T};\n@@ -80,7 +80,8 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                 }\n \n                 let name_ref = node.as_node().cloned().and_then(ast::NameRef::cast).unwrap();\n-                let name_kind = classify_name_ref(db, file_id, &name_ref).map(|d| d.kind);\n+                let name_kind =\n+                    classify_name_ref(db, Source::new(file_id.into(), &name_ref)).map(|d| d.kind);\n \n                 if let Some(Local(local)) = &name_kind {\n                     if let Some(name) = local.name(db) {"}]}