{"sha": "0c89f38378c2110cf6c080a5dc837bf7731fef5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjODlmMzgzNzhjMjExMGNmNmMwODBhNWRjODM3YmY3NzMxZmVmNWM=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-04T17:03:45Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-04T17:10:52Z"}, "message": "Replace `-` with `_` in generated lint names", "tree": {"sha": "97955f808060af829122b39e07a80fbd9622db18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/97955f808060af829122b39e07a80fbd9622db18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c89f38378c2110cf6c080a5dc837bf7731fef5c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c89f38378c2110cf6c080a5dc837bf7731fef5c", "html_url": "https://github.com/rust-lang/rust/commit/0c89f38378c2110cf6c080a5dc837bf7731fef5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c89f38378c2110cf6c080a5dc837bf7731fef5c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b9ba4977ef5b81747c8e5c623009497f9d7c99a", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9ba4977ef5b81747c8e5c623009497f9d7c99a", "html_url": "https://github.com/rust-lang/rust/commit/0b9ba4977ef5b81747c8e5c623009497f9d7c99a"}], "stats": {"total": 301, "additions": 151, "deletions": 150}, "files": [{"sha": "573ffd10daf678fcce7214525e791817195b07e2", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0c89f38378c2110cf6c080a5dc837bf7731fef5c/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c89f38378c2110cf6c080a5dc837bf7731fef5c/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=0c89f38378c2110cf6c080a5dc837bf7731fef5c", "patch": "@@ -123,6 +123,7 @@ pub(crate) fn hover(\n \n             _ => {\n                 if ast::Comment::cast(token.clone()).is_some() {\n+                    cov_mark::hit!(no_highlight_on_comment_hover);\n                     let (attributes, def) = doc_attributes(&sema, &node)?;\n                     let (docs, doc_mapping) = attributes.docs_with_rangemap(db)?;\n                     let (idl_range, link, ns) =\n@@ -136,8 +137,10 @@ pub(crate) fn hover(\n                         })?;\n                     range = Some(idl_range);\n                     resolve_doc_path_for_def(db, def, &link, ns).map(Definition::ModuleDef)\n+                } else if let res@Some(_) = try_hover_for_attribute(&token) {\n+                    return res;\n                 } else {\n-                    return try_hover_for_attribute(&token);\n+                    None\n                 }\n             },\n         }\n@@ -169,11 +172,6 @@ pub(crate) fn hover(\n         }\n     }\n \n-    if token.kind() == syntax::SyntaxKind::COMMENT {\n-        cov_mark::hit!(no_highlight_on_comment_hover);\n-        return None;\n-    }\n-\n     if let res @ Some(_) = hover_for_keyword(&sema, links_in_hover, markdown, &token) {\n         return res;\n     }"}, {"sha": "6ccb0478e3b6c4009c51c52e87c1adac077f7524", "filename": "crates/ide_db/src/helpers/generated_lints.rs", "status": "modified", "additions": 135, "deletions": 137, "changes": 272, "blob_url": "https://github.com/rust-lang/rust/blob/0c89f38378c2110cf6c080a5dc837bf7731fef5c/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c89f38378c2110cf6c080a5dc837bf7731fef5c/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fhelpers%2Fgenerated_lints.rs?ref=0c89f38378c2110cf6c080a5dc837bf7731fef5c", "patch": "@@ -6,462 +6,460 @@ pub struct Lint {\n }\n \n pub const DEFAULT_LINTS: &[Lint] = &[\n-    Lint { label: \"----\", description: r##\"-------\"## },\n-    Lint { label: \"----\", description: r##\"lint group for: ---------\"## },\n     Lint {\n-        label: \"absolute-paths-not-starting-with-crate\",\n+        label: \"absolute_paths_not_starting_with_crate\",\n         description: r##\"fully qualified paths that start with a module name instead of `crate`, `self`, or an extern crate name\"##,\n     },\n-    Lint { label: \"ambiguous-associated-items\", description: r##\"ambiguous associated items\"## },\n-    Lint { label: \"anonymous-parameters\", description: r##\"detects anonymous parameters\"## },\n-    Lint { label: \"arithmetic-overflow\", description: r##\"arithmetic operation overflows\"## },\n-    Lint { label: \"array-into-iter\", description: r##\"detects calling `into_iter` on arrays\"## },\n+    Lint { label: \"ambiguous_associated_items\", description: r##\"ambiguous associated items\"## },\n+    Lint { label: \"anonymous_parameters\", description: r##\"detects anonymous parameters\"## },\n+    Lint { label: \"arithmetic_overflow\", description: r##\"arithmetic operation overflows\"## },\n+    Lint { label: \"array_into_iter\", description: r##\"detects calling `into_iter` on arrays\"## },\n     Lint {\n-        label: \"asm-sub-register\",\n+        label: \"asm_sub_register\",\n         description: r##\"using only a subset of a register for inline asm inputs\"##,\n     },\n-    Lint { label: \"bad-asm-style\", description: r##\"incorrect use of inline assembly\"## },\n+    Lint { label: \"bad_asm_style\", description: r##\"incorrect use of inline assembly\"## },\n     Lint {\n-        label: \"bare-trait-objects\",\n+        label: \"bare_trait_objects\",\n         description: r##\"suggest using `dyn Trait` for trait objects\"##,\n     },\n     Lint {\n-        label: \"bindings-with-variant-name\",\n+        label: \"bindings_with_variant_name\",\n         description: r##\"detects pattern bindings with the same name as one of the matched variants\"##,\n     },\n-    Lint { label: \"box-pointers\", description: r##\"use of owned (Box type) heap memory\"## },\n+    Lint { label: \"box_pointers\", description: r##\"use of owned (Box type) heap memory\"## },\n     Lint {\n-        label: \"cenum-impl-drop-cast\",\n+        label: \"cenum_impl_drop_cast\",\n         description: r##\"a C-like enum implementing Drop is cast\"##,\n     },\n     Lint {\n-        label: \"clashing-extern-declarations\",\n+        label: \"clashing_extern_declarations\",\n         description: r##\"detects when an extern fn has been declared with the same name but different types\"##,\n     },\n     Lint {\n-        label: \"coherence-leak-check\",\n+        label: \"coherence_leak_check\",\n         description: r##\"distinct impls distinguished only by the leak-check code\"##,\n     },\n     Lint {\n-        label: \"conflicting-repr-hints\",\n+        label: \"conflicting_repr_hints\",\n         description: r##\"conflicts between `#[repr(..)]` hints that were previously accepted and used in practice\"##,\n     },\n     Lint {\n-        label: \"confusable-idents\",\n+        label: \"confusable_idents\",\n         description: r##\"detects visually confusable pairs between identifiers\"##,\n     },\n     Lint {\n-        label: \"const-err\",\n+        label: \"const_err\",\n         description: r##\"constant evaluation encountered erroneous expression\"##,\n     },\n     Lint {\n-        label: \"const-evaluatable-unchecked\",\n+        label: \"const_evaluatable_unchecked\",\n         description: r##\"detects a generic constant is used in a type without a emitting a warning\"##,\n     },\n     Lint {\n-        label: \"const-item-mutation\",\n+        label: \"const_item_mutation\",\n         description: r##\"detects attempts to mutate a `const` item\"##,\n     },\n-    Lint { label: \"dead-code\", description: r##\"detect unused, unexported items\"## },\n+    Lint { label: \"dead_code\", description: r##\"detect unused, unexported items\"## },\n     Lint { label: \"deprecated\", description: r##\"detects use of deprecated items\"## },\n     Lint {\n-        label: \"deprecated-in-future\",\n+        label: \"deprecated_in_future\",\n         description: r##\"detects use of items that will be deprecated in a future version\"##,\n     },\n     Lint {\n-        label: \"deref-nullptr\",\n+        label: \"deref_nullptr\",\n         description: r##\"detects when an null pointer is dereferenced\"##,\n     },\n     Lint {\n-        label: \"disjoint-capture-migration\",\n+        label: \"disjoint_capture_migration\",\n         description: r##\"Drop reorder and auto traits error because of `capture_disjoint_fields`\"##,\n     },\n-    Lint { label: \"drop-bounds\", description: r##\"bounds of the form `T: Drop` are useless\"## },\n+    Lint { label: \"drop_bounds\", description: r##\"bounds of the form `T: Drop` are useless\"## },\n     Lint {\n-        label: \"elided-lifetimes-in-paths\",\n+        label: \"elided_lifetimes_in_paths\",\n         description: r##\"hidden lifetime parameters in types are deprecated\"##,\n     },\n     Lint {\n-        label: \"ellipsis-inclusive-range-patterns\",\n+        label: \"ellipsis_inclusive_range_patterns\",\n         description: r##\"`...` range patterns are deprecated\"##,\n     },\n     Lint {\n-        label: \"explicit-outlives-requirements\",\n+        label: \"explicit_outlives_requirements\",\n         description: r##\"outlives requirements can be inferred\"##,\n     },\n     Lint {\n-        label: \"exported-private-dependencies\",\n+        label: \"exported_private_dependencies\",\n         description: r##\"public interface leaks type from a private dependency\"##,\n     },\n-    Lint { label: \"forbidden-lint-groups\", description: r##\"applying forbid to lint-groups\"## },\n+    Lint { label: \"forbidden_lint_groups\", description: r##\"applying forbid to lint-groups\"## },\n     Lint {\n-        label: \"function-item-references\",\n+        label: \"function_item_references\",\n         description: r##\"suggest casting to a function pointer when attempting to take references to function items\"##,\n     },\n     Lint {\n-        label: \"future-incompatible\",\n+        label: \"future_incompatible\",\n         description: r##\"lint group for: keyword-idents, anonymous-parameters, ellipsis-inclusive-range-patterns, forbidden-lint-groups, illegal-floating-point-literal-pattern, private-in-public, pub-use-of-private-extern-crate, invalid-type-param-default, const-err, unaligned-references, patterns-in-fns-without-body, missing-fragment-specifier, late-bound-lifetime-arguments, order-dependent-trait-objects, coherence-leak-check, tyvar-behind-raw-pointer, bare-trait-objects, absolute-paths-not-starting-with-crate, unstable-name-collisions, where-clauses-object-safety, proc-macro-derive-resolution-fallback, macro-expanded-macro-exports-accessed-by-absolute-paths, ill-formed-attribute-input, conflicting-repr-hints, ambiguous-associated-items, mutable-borrow-reservation-conflict, indirect-structural-match, pointer-structural-match, nontrivial-structural-match, soft-unstable, cenum-impl-drop-cast, const-evaluatable-unchecked, uninhabited-static, unsupported-naked-functions, semicolon-in-expressions-from-macros, legacy-derive-helpers, proc-macro-back-compat, array-into-iter\"##,\n     },\n     Lint {\n-        label: \"ill-formed-attribute-input\",\n+        label: \"ill_formed_attribute_input\",\n         description: r##\"ill-formed attribute inputs that were previously accepted and used in practice\"##,\n     },\n     Lint {\n-        label: \"illegal-floating-point-literal-pattern\",\n+        label: \"illegal_floating_point_literal_pattern\",\n         description: r##\"floating-point literals cannot be used in patterns\"##,\n     },\n     Lint {\n-        label: \"improper-ctypes\",\n+        label: \"improper_ctypes\",\n         description: r##\"proper use of libc types in foreign modules\"##,\n     },\n     Lint {\n-        label: \"improper-ctypes-definitions\",\n+        label: \"improper_ctypes_definitions\",\n         description: r##\"proper use of libc types in foreign item definitions\"##,\n     },\n     Lint {\n-        label: \"incomplete-features\",\n+        label: \"incomplete_features\",\n         description: r##\"incomplete features that may function improperly in some or all cases\"##,\n     },\n-    Lint { label: \"incomplete-include\", description: r##\"trailing content in included file\"## },\n+    Lint { label: \"incomplete_include\", description: r##\"trailing content in included file\"## },\n     Lint {\n-        label: \"indirect-structural-match\",\n+        label: \"indirect_structural_match\",\n         description: r##\"constant used in pattern contains value of non-structural-match type in a field or a variant\"##,\n     },\n     Lint {\n-        label: \"ineffective-unstable-trait-impl\",\n+        label: \"ineffective_unstable_trait_impl\",\n         description: r##\"detects `#[unstable]` on stable trait implementations for stable types\"##,\n     },\n     Lint {\n-        label: \"inline-no-sanitize\",\n+        label: \"inline_no_sanitize\",\n         description: r##\"detects incompatible use of `#[inline(always)]` and `#[no_sanitize(...)]`\"##,\n     },\n     Lint {\n-        label: \"invalid-type-param-default\",\n+        label: \"invalid_type_param_default\",\n         description: r##\"type parameter default erroneously allowed in invalid location\"##,\n     },\n     Lint {\n-        label: \"invalid-value\",\n+        label: \"invalid_value\",\n         description: r##\"an invalid value is being created (such as a null reference)\"##,\n     },\n     Lint {\n-        label: \"irrefutable-let-patterns\",\n+        label: \"irrefutable_let_patterns\",\n         description: r##\"detects irrefutable patterns in `if let` and `while let` statements\"##,\n     },\n     Lint {\n-        label: \"keyword-idents\",\n+        label: \"keyword_idents\",\n         description: r##\"detects edition keywords being used as an identifier\"##,\n     },\n-    Lint { label: \"large-assignments\", description: r##\"detects large moves or copies\"## },\n+    Lint { label: \"large_assignments\", description: r##\"detects large moves or copies\"## },\n     Lint {\n-        label: \"late-bound-lifetime-arguments\",\n+        label: \"late_bound_lifetime_arguments\",\n         description: r##\"detects generic lifetime arguments in path segments with late bound lifetime parameters\"##,\n     },\n     Lint {\n-        label: \"legacy-derive-helpers\",\n+        label: \"legacy_derive_helpers\",\n         description: r##\"detects derive helper attributes that are used before they are introduced\"##,\n     },\n     Lint {\n-        label: \"macro-expanded-macro-exports-accessed-by-absolute-paths\",\n+        label: \"macro_expanded_macro_exports_accessed_by_absolute_paths\",\n         description: r##\"macro-expanded `macro_export` macros from the current crate cannot be referred to by absolute paths\"##,\n     },\n     Lint {\n-        label: \"macro-use-extern-crate\",\n+        label: \"macro_use_extern_crate\",\n         description: r##\"the `#[macro_use]` attribute is now deprecated in favor of using macros via the module system\"##,\n     },\n     Lint {\n-        label: \"meta-variable-misuse\",\n+        label: \"meta_variable_misuse\",\n         description: r##\"possible meta-variable misuse at macro definition\"##,\n     },\n-    Lint { label: \"missing-abi\", description: r##\"No declared ABI for extern declaration\"## },\n+    Lint { label: \"missing_abi\", description: r##\"No declared ABI for extern declaration\"## },\n     Lint {\n-        label: \"missing-copy-implementations\",\n+        label: \"missing_copy_implementations\",\n         description: r##\"detects potentially-forgotten implementations of `Copy`\"##,\n     },\n     Lint {\n-        label: \"missing-debug-implementations\",\n+        label: \"missing_debug_implementations\",\n         description: r##\"detects missing implementations of Debug\"##,\n     },\n     Lint {\n-        label: \"missing-docs\",\n+        label: \"missing_docs\",\n         description: r##\"detects missing documentation for public members\"##,\n     },\n     Lint {\n-        label: \"missing-fragment-specifier\",\n+        label: \"missing_fragment_specifier\",\n         description: r##\"detects missing fragment specifiers in unused `macro_rules!` patterns\"##,\n     },\n     Lint {\n-        label: \"mixed-script-confusables\",\n+        label: \"mixed_script_confusables\",\n         description: r##\"detects Unicode scripts whose mixed script confusables codepoints are solely used\"##,\n     },\n     Lint {\n-        label: \"mutable-borrow-reservation-conflict\",\n+        label: \"mutable_borrow_reservation_conflict\",\n         description: r##\"reservation of a two-phased borrow conflicts with other shared borrows\"##,\n     },\n     Lint {\n-        label: \"mutable-transmutes\",\n+        label: \"mutable_transmutes\",\n         description: r##\"mutating transmuted &mut T from &T may cause undefined behavior\"##,\n     },\n     Lint {\n-        label: \"no-mangle-const-items\",\n+        label: \"no_mangle_const_items\",\n         description: r##\"const items will not have their symbols exported\"##,\n     },\n-    Lint { label: \"no-mangle-generic-items\", description: r##\"generic items must be mangled\"## },\n-    Lint { label: \"non-ascii-idents\", description: r##\"detects non-ASCII identifiers\"## },\n+    Lint { label: \"no_mangle_generic_items\", description: r##\"generic items must be mangled\"## },\n+    Lint { label: \"non_ascii_idents\", description: r##\"detects non-ASCII identifiers\"## },\n     Lint {\n-        label: \"non-camel-case-types\",\n+        label: \"non_camel_case_types\",\n         description: r##\"types, variants, traits and type parameters should have camel case names\"##,\n     },\n     Lint {\n-        label: \"non-fmt-panic\",\n+        label: \"non_fmt_panic\",\n         description: r##\"detect single-argument panic!() invocations in which the argument is not a format string\"##,\n     },\n     Lint {\n-        label: \"non-shorthand-field-patterns\",\n+        label: \"non_shorthand_field_patterns\",\n         description: r##\"using `Struct { x: x }` instead of `Struct { x }` in a pattern\"##,\n     },\n     Lint {\n-        label: \"non-snake-case\",\n+        label: \"non_snake_case\",\n         description: r##\"variables, methods, functions, lifetime parameters and modules should have snake case names\"##,\n     },\n     Lint {\n-        label: \"non-upper-case-globals\",\n+        label: \"non_upper_case_globals\",\n         description: r##\"static constants should have uppercase identifiers\"##,\n     },\n     Lint {\n-        label: \"nonstandard-style\",\n+        label: \"nonstandard_style\",\n         description: r##\"lint group for: non-camel-case-types, non-snake-case, non-upper-case-globals\"##,\n     },\n     Lint {\n-        label: \"nontrivial-structural-match\",\n+        label: \"nontrivial_structural_match\",\n         description: r##\"constant used in pattern of non-structural-match type and the constant's initializer expression contains values of non-structural-match types\"##,\n     },\n     Lint {\n-        label: \"noop-method-call\",\n+        label: \"noop_method_call\",\n         description: r##\"detects the use of well-known noop methods\"##,\n     },\n     Lint {\n-        label: \"or-patterns-back-compat\",\n+        label: \"or_patterns_back_compat\",\n         description: r##\"detects usage of old versions of or-patterns\"##,\n     },\n     Lint {\n-        label: \"order-dependent-trait-objects\",\n+        label: \"order_dependent_trait_objects\",\n         description: r##\"trait-object types were treated as different depending on marker-trait order\"##,\n     },\n-    Lint { label: \"overflowing-literals\", description: r##\"literal out of range for its type\"## },\n+    Lint { label: \"overflowing_literals\", description: r##\"literal out of range for its type\"## },\n     Lint {\n-        label: \"overlapping-range-endpoints\",\n+        label: \"overlapping_range_endpoints\",\n         description: r##\"detects range patterns with overlapping endpoints\"##,\n     },\n-    Lint { label: \"path-statements\", description: r##\"path statements with no effect\"## },\n+    Lint { label: \"path_statements\", description: r##\"path statements with no effect\"## },\n     Lint {\n-        label: \"patterns-in-fns-without-body\",\n+        label: \"patterns_in_fns_without_body\",\n         description: r##\"patterns in functions without body were erroneously allowed\"##,\n     },\n     Lint {\n-        label: \"pointer-structural-match\",\n+        label: \"pointer_structural_match\",\n         description: r##\"pointers are not structural-match\"##,\n     },\n     Lint {\n-        label: \"private-in-public\",\n+        label: \"private_in_public\",\n         description: r##\"detect private items in public interfaces not caught by the old implementation\"##,\n     },\n     Lint {\n-        label: \"proc-macro-back-compat\",\n+        label: \"proc_macro_back_compat\",\n         description: r##\"detects usage of old versions of certain proc-macro crates\"##,\n     },\n     Lint {\n-        label: \"proc-macro-derive-resolution-fallback\",\n+        label: \"proc_macro_derive_resolution_fallback\",\n         description: r##\"detects proc macro derives using inaccessible names from parent modules\"##,\n     },\n     Lint {\n-        label: \"pub-use-of-private-extern-crate\",\n+        label: \"pub_use_of_private_extern_crate\",\n         description: r##\"detect public re-exports of private extern crates\"##,\n     },\n     Lint {\n-        label: \"redundant-semicolons\",\n+        label: \"redundant_semicolons\",\n         description: r##\"detects unnecessary trailing semicolons\"##,\n     },\n     Lint {\n-        label: \"renamed-and-removed-lints\",\n+        label: \"renamed_and_removed_lints\",\n         description: r##\"lints that have been renamed or removed\"##,\n     },\n     Lint {\n-        label: \"rust-2018-compatibility\",\n+        label: \"rust_2018_compatibility\",\n         description: r##\"lint group for: keyword-idents, anonymous-parameters, tyvar-behind-raw-pointer, absolute-paths-not-starting-with-crate\"##,\n     },\n     Lint {\n-        label: \"rust-2018-idioms\",\n+        label: \"rust_2018_idioms\",\n         description: r##\"lint group for: bare-trait-objects, unused-extern-crates, ellipsis-inclusive-range-patterns, elided-lifetimes-in-paths, explicit-outlives-requirements\"##,\n     },\n     Lint {\n-        label: \"rust-2021-compatibility\",\n+        label: \"rust_2021_compatibility\",\n         description: r##\"lint group for: ellipsis-inclusive-range-patterns, bare-trait-objects\"##,\n     },\n     Lint {\n-        label: \"semicolon-in-expressions-from-macros\",\n+        label: \"semicolon_in_expressions_from_macros\",\n         description: r##\"trailing semicolon in macro body used as expression\"##,\n     },\n     Lint {\n-        label: \"single-use-lifetimes\",\n+        label: \"single_use_lifetimes\",\n         description: r##\"detects lifetime parameters that are only used once\"##,\n     },\n     Lint {\n-        label: \"soft-unstable\",\n+        label: \"soft_unstable\",\n         description: r##\"a feature gate that doesn't break dependent crates\"##,\n     },\n     Lint {\n-        label: \"stable-features\",\n+        label: \"stable_features\",\n         description: r##\"stable features found in `#[feature]` directive\"##,\n     },\n     Lint {\n-        label: \"temporary-cstring-as-ptr\",\n+        label: \"temporary_cstring_as_ptr\",\n         description: r##\"detects getting the inner pointer of a temporary `CString`\"##,\n     },\n     Lint {\n-        label: \"trivial-bounds\",\n+        label: \"trivial_bounds\",\n         description: r##\"these bounds don't depend on an type parameters\"##,\n     },\n     Lint {\n-        label: \"trivial-casts\",\n+        label: \"trivial_casts\",\n         description: r##\"detects trivial casts which could be removed\"##,\n     },\n     Lint {\n-        label: \"trivial-numeric-casts\",\n+        label: \"trivial_numeric_casts\",\n         description: r##\"detects trivial casts of numeric types which could be removed\"##,\n     },\n     Lint {\n-        label: \"type-alias-bounds\",\n+        label: \"type_alias_bounds\",\n         description: r##\"bounds in type aliases are not enforced\"##,\n     },\n     Lint {\n-        label: \"tyvar-behind-raw-pointer\",\n+        label: \"tyvar_behind_raw_pointer\",\n         description: r##\"raw pointer to an inference variable\"##,\n     },\n     Lint {\n-        label: \"unaligned-references\",\n+        label: \"unaligned_references\",\n         description: r##\"detects unaligned references to fields of packed structs\"##,\n     },\n     Lint {\n-        label: \"uncommon-codepoints\",\n+        label: \"uncommon_codepoints\",\n         description: r##\"detects uncommon Unicode codepoints in identifiers\"##,\n     },\n     Lint {\n-        label: \"unconditional-panic\",\n+        label: \"unconditional_panic\",\n         description: r##\"operation will cause a panic at runtime\"##,\n     },\n     Lint {\n-        label: \"unconditional-recursion\",\n+        label: \"unconditional_recursion\",\n         description: r##\"functions that cannot return without calling themselves\"##,\n     },\n-    Lint { label: \"uninhabited-static\", description: r##\"uninhabited static\"## },\n+    Lint { label: \"uninhabited_static\", description: r##\"uninhabited static\"## },\n     Lint {\n-        label: \"unknown-crate-types\",\n+        label: \"unknown_crate_types\",\n         description: r##\"unknown crate type found in `#[crate_type]` directive\"##,\n     },\n-    Lint { label: \"unknown-lints\", description: r##\"unrecognized lint attribute\"## },\n+    Lint { label: \"unknown_lints\", description: r##\"unrecognized lint attribute\"## },\n     Lint {\n-        label: \"unnameable-test-items\",\n+        label: \"unnameable_test_items\",\n         description: r##\"detects an item that cannot be named being marked as `#[test_case]`\"##,\n     },\n-    Lint { label: \"unreachable-code\", description: r##\"detects unreachable code paths\"## },\n-    Lint { label: \"unreachable-patterns\", description: r##\"detects unreachable patterns\"## },\n+    Lint { label: \"unreachable_code\", description: r##\"detects unreachable code paths\"## },\n+    Lint { label: \"unreachable_patterns\", description: r##\"detects unreachable patterns\"## },\n     Lint {\n-        label: \"unreachable-pub\",\n+        label: \"unreachable_pub\",\n         description: r##\"`pub` items not reachable from crate root\"##,\n     },\n-    Lint { label: \"unsafe-code\", description: r##\"usage of `unsafe` code\"## },\n+    Lint { label: \"unsafe_code\", description: r##\"usage of `unsafe` code\"## },\n     Lint {\n-        label: \"unsafe-op-in-unsafe-fn\",\n+        label: \"unsafe_op_in_unsafe_fn\",\n         description: r##\"unsafe operations in unsafe functions without an explicit unsafe block are deprecated\"##,\n     },\n     Lint {\n-        label: \"unstable-features\",\n+        label: \"unstable_features\",\n         description: r##\"enabling unstable features (deprecated. do not use)\"##,\n     },\n     Lint {\n-        label: \"unstable-name-collisions\",\n+        label: \"unstable_name_collisions\",\n         description: r##\"detects name collision with an existing but unstable method\"##,\n     },\n     Lint {\n-        label: \"unsupported-naked-functions\",\n+        label: \"unsupported_naked_functions\",\n         description: r##\"unsupported naked function definitions\"##,\n     },\n     Lint {\n         label: \"unused\",\n         description: r##\"lint group for: unused-imports, unused-variables, unused-assignments, dead-code, unused-mut, unreachable-code, unreachable-patterns, unused-must-use, unused-unsafe, path-statements, unused-attributes, unused-macros, unused-allocation, unused-doc-comments, unused-extern-crates, unused-features, unused-labels, unused-parens, unused-braces, redundant-semicolons\"##,\n     },\n     Lint {\n-        label: \"unused-allocation\",\n+        label: \"unused_allocation\",\n         description: r##\"detects unnecessary allocations that can be eliminated\"##,\n     },\n     Lint {\n-        label: \"unused-assignments\",\n+        label: \"unused_assignments\",\n         description: r##\"detect assignments that will never be read\"##,\n     },\n     Lint {\n-        label: \"unused-attributes\",\n+        label: \"unused_attributes\",\n         description: r##\"detects attributes that were not used by the compiler\"##,\n     },\n-    Lint { label: \"unused-braces\", description: r##\"unnecessary braces around an expression\"## },\n+    Lint { label: \"unused_braces\", description: r##\"unnecessary braces around an expression\"## },\n     Lint {\n-        label: \"unused-comparisons\",\n+        label: \"unused_comparisons\",\n         description: r##\"comparisons made useless by limits of the types involved\"##,\n     },\n     Lint {\n-        label: \"unused-crate-dependencies\",\n+        label: \"unused_crate_dependencies\",\n         description: r##\"crate dependencies that are never used\"##,\n     },\n     Lint {\n-        label: \"unused-doc-comments\",\n+        label: \"unused_doc_comments\",\n         description: r##\"detects doc comments that aren't used by rustdoc\"##,\n     },\n-    Lint { label: \"unused-extern-crates\", description: r##\"extern crates that are never used\"## },\n+    Lint { label: \"unused_extern_crates\", description: r##\"extern crates that are never used\"## },\n     Lint {\n-        label: \"unused-features\",\n+        label: \"unused_features\",\n         description: r##\"unused features found in crate-level `#[feature]` directives\"##,\n     },\n     Lint {\n-        label: \"unused-import-braces\",\n+        label: \"unused_import_braces\",\n         description: r##\"unnecessary braces around an imported item\"##,\n     },\n-    Lint { label: \"unused-imports\", description: r##\"imports that are never used\"## },\n-    Lint { label: \"unused-labels\", description: r##\"detects labels that are never used\"## },\n+    Lint { label: \"unused_imports\", description: r##\"imports that are never used\"## },\n+    Lint { label: \"unused_labels\", description: r##\"detects labels that are never used\"## },\n     Lint {\n-        label: \"unused-lifetimes\",\n+        label: \"unused_lifetimes\",\n         description: r##\"detects lifetime parameters that are never used\"##,\n     },\n-    Lint { label: \"unused-macros\", description: r##\"detects macros that were not used\"## },\n+    Lint { label: \"unused_macros\", description: r##\"detects macros that were not used\"## },\n     Lint {\n-        label: \"unused-must-use\",\n+        label: \"unused_must_use\",\n         description: r##\"unused result of a type flagged as `#[must_use]`\"##,\n     },\n     Lint {\n-        label: \"unused-mut\",\n+        label: \"unused_mut\",\n         description: r##\"detect mut variables which don't need to be mutable\"##,\n     },\n     Lint {\n-        label: \"unused-parens\",\n+        label: \"unused_parens\",\n         description: r##\"`if`, `match`, `while` and `return` do not need parentheses\"##,\n     },\n     Lint {\n-        label: \"unused-qualifications\",\n+        label: \"unused_qualifications\",\n         description: r##\"detects unnecessarily qualified names\"##,\n     },\n     Lint {\n-        label: \"unused-results\",\n+        label: \"unused_results\",\n         description: r##\"unused result of an expression in a statement\"##,\n     },\n-    Lint { label: \"unused-unsafe\", description: r##\"unnecessary use of an `unsafe` block\"## },\n+    Lint { label: \"unused_unsafe\", description: r##\"unnecessary use of an `unsafe` block\"## },\n     Lint {\n-        label: \"unused-variables\",\n+        label: \"unused_variables\",\n         description: r##\"detect variables which are not used in any way\"##,\n     },\n     Lint {\n-        label: \"useless-deprecated\",\n+        label: \"useless_deprecated\",\n         description: r##\"detects deprecation attributes with no effect\"##,\n     },\n     Lint {\n-        label: \"variant-size-differences\",\n+        label: \"variant_size_differences\",\n         description: r##\"detects enums with widely varying variant sizes\"##,\n     },\n     Lint {\n@@ -473,11 +471,11 @@ pub const DEFAULT_LINTS: &[Lint] = &[\n         description: r##\"lint group for: all lints that are set to issue warnings\"##,\n     },\n     Lint {\n-        label: \"where-clauses-object-safety\",\n+        label: \"where_clauses_object_safety\",\n         description: r##\"checks the object safety of where clauses\"##,\n     },\n     Lint {\n-        label: \"while-true\",\n+        label: \"while_true\",\n         description: r##\"suggest using `loop { }` instead of `while true { }`\"##,\n     },\n ];"}, {"sha": "a28b6cb59c6c0cd4510a4db180188f87256a6abd", "filename": "xtask/src/codegen/gen_lint_completions.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0c89f38378c2110cf6c080a5dc837bf7731fef5c/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c89f38378c2110cf6c080a5dc837bf7731fef5c/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Fgen_lint_completions.rs?ref=0c89f38378c2110cf6c080a5dc837bf7731fef5c", "patch": "@@ -52,6 +52,7 @@ fn generate_lint_descriptor(buf: &mut String) -> Result<()> {\n     buf.push('\\n');\n     let mut lints = stdout[start_lints..end_lints]\n         .lines()\n+        .skip(1)\n         .filter(|l| !l.is_empty())\n         .map(|line| {\n             let (name, rest) = line.trim().split_once(char::is_whitespace).unwrap();\n@@ -60,15 +61,19 @@ fn generate_lint_descriptor(buf: &mut String) -> Result<()> {\n             (name.trim(), Cow::Borrowed(description.trim()))\n         })\n         .collect::<Vec<_>>();\n-    lints.extend(stdout[start_lint_groups..end_lint_groups].lines().filter(|l| !l.is_empty()).map(\n-        |line| {\n-            let (name, lints) = line.trim().split_once(char::is_whitespace).unwrap();\n-            (name.trim(), format!(\"lint group for: {}\", lints.trim()).into())\n-        },\n-    ));\n+    lints.extend(\n+        stdout[start_lint_groups..end_lint_groups].lines().skip(1).filter(|l| !l.is_empty()).map(\n+            |line| {\n+                let (name, lints) = line.trim().split_once(char::is_whitespace).unwrap();\n+                (name.trim(), format!(\"lint group for: {}\", lints.trim()).into())\n+            },\n+        ),\n+    );\n \n     lints.sort_by(|(ident, _), (ident2, _)| ident.cmp(ident2));\n-    lints.into_iter().for_each(|(name, description)| push_lint_completion(buf, name, &description));\n+    lints.into_iter().for_each(|(name, description)| {\n+        push_lint_completion(buf, &name.replace(\"-\", \"_\"), &description)\n+    });\n     buf.push_str(\"];\\n\");\n     Ok(())\n }"}]}