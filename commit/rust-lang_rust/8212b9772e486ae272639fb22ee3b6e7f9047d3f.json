{"sha": "8212b9772e486ae272639fb22ee3b6e7f9047d3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyMTJiOTc3MmU0ODZhZTI3MjYzOWZiMjJlZTNiNmU3ZjkwNDdkM2Y=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-04-05T16:56:07Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-04-06T17:56:29Z"}, "message": "BTreeMap first/last: add pop methods", "tree": {"sha": "1316a202333b0dee627da4615d64205090ffb240", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1316a202333b0dee627da4615d64205090ffb240"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8212b9772e486ae272639fb22ee3b6e7f9047d3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8212b9772e486ae272639fb22ee3b6e7f9047d3f", "html_url": "https://github.com/rust-lang/rust/commit/8212b9772e486ae272639fb22ee3b6e7f9047d3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8212b9772e486ae272639fb22ee3b6e7f9047d3f/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c23ee767d94a8ea5e0aa782731f89f4e00fbdc7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c23ee767d94a8ea5e0aa782731f89f4e00fbdc7e", "html_url": "https://github.com/rust-lang/rust/commit/c23ee767d94a8ea5e0aa782731f89f4e00fbdc7e"}], "stats": {"total": 48, "additions": 48, "deletions": 0}, "files": [{"sha": "a1e59b2e6afb33220cfb22c4938339725ee2f080", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/8212b9772e486ae272639fb22ee3b6e7f9047d3f/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8212b9772e486ae272639fb22ee3b6e7f9047d3f/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=8212b9772e486ae272639fb22ee3b6e7f9047d3f", "patch": "@@ -689,6 +689,30 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         })\n     }\n \n+    /// Removes and returns the first element in the map.\n+    /// The key of this element is the minimum key that was in the map.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Draining elements in ascending order, while keeping a usable map each iteration.\n+    ///\n+    /// ```\n+    /// #![feature(map_first_last)]\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut map = BTreeMap::new();\n+    /// map.insert(1, \"a\");\n+    /// map.insert(2, \"b\");\n+    /// while let Some((key, _val)) = map.pop_first() {\n+    ///     assert!(map.iter().all(|(k, _v)| *k > key));\n+    /// }\n+    /// assert!(map.is_empty());\n+    /// ```\n+    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    pub fn pop_first(&mut self) -> Option<(K, V)> {\n+        self.first_entry().map(|entry| entry.remove_entry())\n+    }\n+\n     /// Returns the last key-value pair in the map.\n     /// The key in this pair is the maximum key in the map.\n     ///\n@@ -742,6 +766,30 @@ impl<K: Ord, V> BTreeMap<K, V> {\n         })\n     }\n \n+    /// Removes and returns the last element in the map.\n+    /// The key of this element is the maximum key that was in the map.\n+    ///\n+    /// # Examples\n+    ///\n+    /// Draining elements in descending order, while keeping a usable map each iteration.\n+    ///\n+    /// ```\n+    /// #![feature(map_first_last)]\n+    /// use std::collections::BTreeMap;\n+    ///\n+    /// let mut map = BTreeMap::new();\n+    /// map.insert(1, \"a\");\n+    /// map.insert(2, \"b\");\n+    /// while let Some((key, _val)) = map.pop_last() {\n+    ///     assert!(map.iter().all(|(k, _v)| *k < key));\n+    /// }\n+    /// assert!(map.is_empty());\n+    /// ```\n+    #[unstable(feature = \"map_first_last\", issue = \"62924\")]\n+    pub fn pop_last(&mut self) -> Option<(K, V)> {\n+        self.last_entry().map(|entry| entry.remove_entry())\n+    }\n+\n     /// Returns `true` if the map contains a value for the specified key.\n     ///\n     /// The key may be any borrowed form of the map's key type, but the ordering"}]}