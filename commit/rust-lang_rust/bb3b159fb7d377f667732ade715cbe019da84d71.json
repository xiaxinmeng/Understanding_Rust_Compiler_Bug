{"sha": "bb3b159fb7d377f667732ade715cbe019da84d71", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiM2IxNTlmYjdkMzc3ZjY2NzczMmFkZTcxNWNiZTAxOWRhODRkNzE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-02T10:10:26Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-02T10:10:26Z"}, "message": "Merge #1079\n\n1079: Improve cargo-watch usage in vscode plugin r=matklad a=edwin0cheng\n\n*This PR try to improve current cargo-watch usage in VSCode :*\r\n\r\n1. Add Multi-lines error support :\r\n![multilines-error](https://i.imgur.com/gbLEwMG.gif)\r\n\r\n2. Add cargo-watch status animation :\r\n![cargo-watch-status](https://i.imgur.com/GbHwzjj.gif)\r\n\r\n*Implementation Details*\r\n\r\n* Current VSCode `ProblemMatcher` still do not support multiple line parsing.\r\n* However we can, spawn a cargo watch process instead of using vscode.Task to allow more control.\r\n* Use `cargo-check --message-format json` to get json format of compiler-message.\r\n* Use `vscode.DiagnosticCollection` to manage the problems directly, which allow multiple lines diagnostic.\r\n\r\nHowever,\r\n* VSCode use non mono-space font for problems, at this moment i cannot find a good solution about it.\r\n* I am not so good in typescript, please let me know if anything is bad in this PR.\r\n\r\n\r\n\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>\nCo-authored-by: Edwin Cheng <edwin@m-inverse.com>", "tree": {"sha": "2cfb500a2eec37f1689ec9448babbbfedc28fba0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cfb500a2eec37f1689ec9448babbbfedc28fba0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb3b159fb7d377f667732ade715cbe019da84d71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb3b159fb7d377f667732ade715cbe019da84d71", "html_url": "https://github.com/rust-lang/rust/commit/bb3b159fb7d377f667732ade715cbe019da84d71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb3b159fb7d377f667732ade715cbe019da84d71/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "b0d244719323d68905986857844f56d1fa38cac4", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0d244719323d68905986857844f56d1fa38cac4", "html_url": "https://github.com/rust-lang/rust/commit/b0d244719323d68905986857844f56d1fa38cac4"}, {"sha": "b60e2f779b28f654dbd5a2657c668de8452933c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/b60e2f779b28f654dbd5a2657c668de8452933c6", "html_url": "https://github.com/rust-lang/rust/commit/b60e2f779b28f654dbd5a2657c668de8452933c6"}], "stats": {"total": 492, "additions": 448, "deletions": 44}, "files": [{"sha": "33dd4f9950bf11b8e10568415004709c35b473e7", "filename": "docs/user/README.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb3b159fb7d377f667732ade715cbe019da84d71/docs%2Fuser%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb3b159fb7d377f667732ade715cbe019da84d71/docs%2Fuser%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2FREADME.md?ref=bb3b159fb7d377f667732ade715cbe019da84d71", "patch": "@@ -59,7 +59,10 @@ for details.\n * `rust-analyzer.raLspServerPath`: path to `ra_lsp_server` executable\n * `rust-analyzer.enableCargoWatchOnStartup`: prompt to install & enable `cargo\n   watch` for live error highlighting (note, this **does not** use rust-analyzer)\n+* `rust-analyzer.cargo-watch.check-arguments`: cargo-watch check arguments. \n+  (e.g: `--features=\"shumway,pdf\"` will run as `cargo watch -x \"check --features=\"shumway,pdf\"\"` )  \n * `rust-analyzer.trace.server`: enables internal logging\n+* `rust-analyzer.trace.cargo-watch`: enables cargo-watch logging\n \n \n ## Emacs"}, {"sha": "008df6f52a796baf3789278c88e24579a598e647", "filename": "editors/code/package-lock.json", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage-lock.json?ref=bb3b159fb7d377f667732ade715cbe019da84d71", "patch": "@@ -607,6 +607,12 @@\n             \"integrity\": \"sha512-f2LZMYl1Fzu7YSBKg+RoROelpOaNrcGmE9AZubeDfrCEia483oW4MI4VyFd5VNHIgQ/7qm1I0wUHK1eJnn2y2w==\",\n             \"dev\": true\n         },\n+        \"es6-object-assign\": {\n+            \"version\": \"1.1.0\",\n+            \"resolved\": \"https://registry.npmjs.org/es6-object-assign/-/es6-object-assign-1.1.0.tgz\",\n+            \"integrity\": \"sha1-wsNYJlYkfDnqEHyx5mUrb58kUjw=\",\n+            \"dev\": true\n+        },\n         \"escape-string-regexp\": {\n             \"version\": \"1.0.5\",\n             \"resolved\": \"https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz\",\n@@ -1121,6 +1127,12 @@\n             \"integrity\": \"sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4=\",\n             \"dev\": true\n         },\n+        \"interpret\": {\n+            \"version\": \"1.2.0\",\n+            \"resolved\": \"https://registry.npmjs.org/interpret/-/interpret-1.2.0.tgz\",\n+            \"integrity\": \"sha512-mT34yGKMNceBQUoVn7iCDKDntA7SC6gycMAWzGx1z/CMCTV7b2AAtXlo3nRyHZ1FelRkQbQjprHSYGwzLtkVbw==\",\n+            \"dev\": true\n+        },\n         \"is\": {\n             \"version\": \"3.3.0\",\n             \"resolved\": \"https://registry.npmjs.org/is/-/is-3.3.0.tgz\",\n@@ -1791,6 +1803,15 @@\n                 \"util-deprecate\": \"^1.0.1\"\n             }\n         },\n+        \"rechoir\": {\n+            \"version\": \"0.6.2\",\n+            \"resolved\": \"https://registry.npmjs.org/rechoir/-/rechoir-0.6.2.tgz\",\n+            \"integrity\": \"sha1-hSBLVNuoLVdC4oyWdW70OvUOM4Q=\",\n+            \"dev\": true,\n+            \"requires\": {\n+                \"resolve\": \"^1.1.6\"\n+            }\n+        },\n         \"remove-bom-buffer\": {\n             \"version\": \"3.0.0\",\n             \"resolved\": \"https://registry.npmjs.org/remove-bom-buffer/-/remove-bom-buffer-3.0.0.tgz\",\n@@ -1902,6 +1923,36 @@\n             \"resolved\": \"https://registry.npmjs.org/semver/-/semver-5.6.0.tgz\",\n             \"integrity\": \"sha512-RS9R6R35NYgQn++fkDWaOmqGoj4Ek9gGs+DPxNUZKuwE183xjJroKvyo1IzVFeXvUrvmALy6FWD5xrdJT25gMg==\"\n         },\n+        \"shelljs\": {\n+            \"version\": \"0.8.3\",\n+            \"resolved\": \"https://registry.npmjs.org/shelljs/-/shelljs-0.8.3.tgz\",\n+            \"integrity\": \"sha512-fc0BKlAWiLpwZljmOvAOTE/gXawtCoNrP5oaY7KIaQbbyHeQVg01pSEuEGvGh3HEdBU4baCD7wQBwADmM/7f7A==\",\n+            \"dev\": true,\n+            \"requires\": {\n+                \"glob\": \"^7.0.0\",\n+                \"interpret\": \"^1.0.0\",\n+                \"rechoir\": \"^0.6.2\"\n+            }\n+        },\n+        \"shx\": {\n+            \"version\": \"0.3.2\",\n+            \"resolved\": \"https://registry.npmjs.org/shx/-/shx-0.3.2.tgz\",\n+            \"integrity\": \"sha512-aS0mWtW3T2sHAenrSrip2XGv39O9dXIFUqxAEWHEOS1ePtGIBavdPJY1kE2IHl14V/4iCbUiNDPGdyYTtmhSoA==\",\n+            \"dev\": true,\n+            \"requires\": {\n+                \"es6-object-assign\": \"^1.0.3\",\n+                \"minimist\": \"^1.2.0\",\n+                \"shelljs\": \"^0.8.1\"\n+            },\n+            \"dependencies\": {\n+                \"minimist\": {\n+                    \"version\": \"1.2.0\",\n+                    \"resolved\": \"https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz\",\n+                    \"integrity\": \"sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ=\",\n+                    \"dev\": true\n+                }\n+            }\n+        },\n         \"source-map\": {\n             \"version\": \"0.6.1\",\n             \"resolved\": \"https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz\","}, {"sha": "1c8caaa60cbfc7779b42b5dd3f110b89a0521f30", "filename": "editors/code/package.json", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=bb3b159fb7d377f667732ade715cbe019da84d71", "patch": "@@ -18,7 +18,7 @@\n     \"scripts\": {\n         \"vscode:prepublish\": \"npm run compile\",\n         \"package\": \"vsce package\",\n-        \"compile\": \"tsc -p ./\",\n+        \"compile\": \"tsc -p ./ && shx cp src/utils/terminateProcess.sh out/utils/terminateProcess.sh\",\n         \"watch\": \"tsc -watch -p ./\",\n         \"postinstall\": \"node ./node_modules/vscode/bin/install\",\n         \"fix\": \"prettier **/*.{json,ts} --write && tslint --project . --fix\",\n@@ -41,7 +41,8 @@\n         \"tslint-config-prettier\": \"^1.18.0\",\n         \"typescript\": \"^3.3.1\",\n         \"vsce\": \"^1.57.0\",\n-        \"vscode\": \"^1.1.29\"\n+        \"vscode\": \"^1.1.29\",\n+        \"shx\": \"^0.3.1\"\n     },\n     \"activationEvents\": [\n         \"onLanguage:rust\",\n@@ -183,6 +184,11 @@\n                     ],\n                     \"description\": \"Whether to run `cargo watch` on startup\"\n                 },\n+                \"rust-analyzer.cargo-watch.check-arguments\": {\n+                    \"type\": \"string\",\n+                    \"description\": \"`cargo-watch` check arguments. (e.g: `--features=\\\"shumway,pdf\\\"` will run as `cargo watch -x \\\"check --features=\\\"shumway,pdf\\\"\\\"` )\",\n+                    \"default\": \"\"\n+                },\n                 \"rust-analyzer.trace.server\": {\n                     \"type\": \"string\",\n                     \"scope\": \"window\",\n@@ -191,8 +197,24 @@\n                         \"messages\",\n                         \"verbose\"\n                     ],\n+                    \"enumDescriptions\": [\n+                        \"No traces\",\n+                        \"Error only\",\n+                        \"Full log\"\n+                    ],\n                     \"default\": \"off\",\n                     \"description\": \"Trace requests to the ra_lsp_server\"\n+                },\n+                \"rust-analyzer.trace.cargo-watch\": {\n+                    \"type\": \"string\",\n+                    \"scope\": \"window\",\n+                    \"enum\": [\n+                        \"off\",\n+                        \"error\",\n+                        \"verbose\"\n+                    ],\n+                    \"default\": \"off\",\n+                    \"description\": \"Trace output of cargo-watch\"\n                 }\n             }\n         },\n@@ -223,18 +245,6 @@\n                     \"${workspaceRoot}\"\n                 ],\n                 \"pattern\": \"$rustc\"\n-            },\n-            {\n-                \"name\": \"rustc-watch\",\n-                \"fileLocation\": [\n-                    \"relative\",\n-                    \"${workspaceRoot}\"\n-                ],\n-                \"background\": {\n-                    \"beginsPattern\": \"^\\\\[Running\\\\b\",\n-                    \"endsPattern\": \"^\\\\[Finished running\\\\b\"\n-                },\n-                \"pattern\": \"$rustc\"\n             }\n         ]\n     }"}, {"sha": "6d8e4d88511635f6899f679f7099b52d8f3ded9a", "filename": "editors/code/src/commands/cargo_watch.ts", "status": "added", "additions": 211, "deletions": 0, "changes": 211, "blob_url": "https://github.com/rust-lang/rust/blob/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fcargo_watch.ts?ref=bb3b159fb7d377f667732ade715cbe019da84d71", "patch": "@@ -0,0 +1,211 @@\n+import * as child_process from 'child_process';\n+import * as fs from 'fs';\n+import * as path from 'path';\n+import * as vscode from 'vscode';\n+import { Server } from '../server';\n+import { terminate } from '../utils/processes';\n+import { LineBuffer } from './line_buffer';\n+import { StatusDisplay } from './watch_status';\n+\n+export class CargoWatchProvider {\n+    private diagnosticCollection?: vscode.DiagnosticCollection;\n+    private cargoProcess?: child_process.ChildProcess;\n+    private outBuffer: string = '';\n+    private statusDisplay?: StatusDisplay;\n+    private outputChannel?: vscode.OutputChannel;\n+\n+    public activate(subscriptions: vscode.Disposable[]) {\n+        let cargoExists = false;\n+        const cargoTomlFile = path.join(\n+            vscode.workspace.rootPath!,\n+            'Cargo.toml'\n+        );\n+        // Check if the working directory is valid cargo root path\n+        try {\n+            if (fs.existsSync(cargoTomlFile)) {\n+                cargoExists = true;\n+            }\n+        } catch (err) {\n+            cargoExists = false;\n+        }\n+\n+        if (!cargoExists) {\n+            vscode.window.showErrorMessage(\n+                `Couldn\\'t find \\'Cargo.toml\\' in ${cargoTomlFile}`\n+            );\n+            return;\n+        }\n+\n+        subscriptions.push(this);\n+        this.diagnosticCollection = vscode.languages.createDiagnosticCollection(\n+            'rustc'\n+        );\n+\n+        this.statusDisplay = new StatusDisplay(subscriptions);\n+        this.outputChannel = vscode.window.createOutputChannel(\n+            'Cargo Watch Trace'\n+        );\n+\n+        let args = '\"check --message-format json';\n+        if (Server.config.cargoWatchOptions.checkArguments.length > 0) {\n+            // Excape the double quote string:\n+            args += ' ' + Server.config.cargoWatchOptions.checkArguments;\n+        }\n+        args += '\"';\n+\n+        // Start the cargo watch with json message\n+        this.cargoProcess = child_process.spawn(\n+            'cargo',\n+            ['watch', '-x', args],\n+            {\n+                stdio: ['ignore', 'pipe', 'pipe'],\n+                cwd: vscode.workspace.rootPath,\n+                windowsVerbatimArguments: true\n+            }\n+        );\n+\n+        const stdoutData = new LineBuffer();\n+        this.cargoProcess.stdout.on('data', (s: string) => {\n+            stdoutData.processOutput(s, line => {\n+                this.logInfo(line);\n+                this.parseLine(line);\n+            });\n+        });\n+\n+        const stderrData = new LineBuffer();\n+        this.cargoProcess.stderr.on('data', (s: string) => {\n+            stderrData.processOutput(s, line => {\n+                this.logError('Error on cargo-watch : {\\n' + line + '}\\n');\n+            });\n+        });\n+\n+        this.cargoProcess.on('error', (err: Error) => {\n+            this.logError(\n+                'Error on cargo-watch process : {\\n' + err.message + '}\\n'\n+            );\n+        });\n+\n+        this.logInfo('cargo-watch started.');\n+    }\n+\n+    public dispose(): void {\n+        if (this.diagnosticCollection) {\n+            this.diagnosticCollection.clear();\n+            this.diagnosticCollection.dispose();\n+        }\n+\n+        if (this.cargoProcess) {\n+            this.cargoProcess.kill();\n+            terminate(this.cargoProcess);\n+        }\n+\n+        if (this.outputChannel) {\n+            this.outputChannel.dispose();\n+        }\n+    }\n+\n+    private logInfo(line: string) {\n+        if (Server.config.cargoWatchOptions.trace === 'verbose') {\n+            this.outputChannel!.append(line);\n+        }\n+    }\n+\n+    private logError(line: string) {\n+        if (\n+            Server.config.cargoWatchOptions.trace === 'error' ||\n+            Server.config.cargoWatchOptions.trace === 'verbose'\n+        ) {\n+            this.outputChannel!.append(line);\n+        }\n+    }\n+\n+    private parseLine(line: string) {\n+        if (line.startsWith('[Running')) {\n+            this.diagnosticCollection!.clear();\n+            this.statusDisplay!.show();\n+        }\n+\n+        if (line.startsWith('[Finished running')) {\n+            this.statusDisplay!.hide();\n+        }\n+\n+        function getLevel(s: string): vscode.DiagnosticSeverity {\n+            if (s === 'error') {\n+                return vscode.DiagnosticSeverity.Error;\n+            }\n+\n+            if (s.startsWith('warn')) {\n+                return vscode.DiagnosticSeverity.Warning;\n+            }\n+\n+            return vscode.DiagnosticSeverity.Information;\n+        }\n+\n+        interface ErrorSpan {\n+            line_start: number;\n+            line_end: number;\n+            column_start: number;\n+            column_end: number;\n+        }\n+\n+        interface ErrorMessage {\n+            reason: string;\n+            message: {\n+                spans: ErrorSpan[];\n+                rendered: string;\n+                level: string;\n+                code?: {\n+                    code: string;\n+                };\n+            };\n+        }\n+\n+        // cargo-watch itself output non json format\n+        // Ignore these lines\n+        let data: ErrorMessage;\n+        try {\n+            data = JSON.parse(line.trim());\n+        } catch (error) {\n+            this.logError(`Fail to pass to json : { ${error} }`);\n+            return;\n+        }\n+\n+        // Only handle compiler-message now\n+        if (data.reason !== 'compiler-message') {\n+            return;\n+        }\n+\n+        let spans: any[] = data.message.spans;\n+        spans = spans.filter(o => o.is_primary);\n+\n+        // We only handle primary span right now.\n+        if (spans.length > 0) {\n+            const o = spans[0];\n+\n+            const rendered = data.message.rendered;\n+            const level = getLevel(data.message.level);\n+            const range = new vscode.Range(\n+                new vscode.Position(o.line_start - 1, o.column_start - 1),\n+                new vscode.Position(o.line_end - 1, o.column_end - 1)\n+            );\n+\n+            const fileName = path.join(vscode.workspace.rootPath!, o.file_name);\n+            const diagnostic = new vscode.Diagnostic(range, rendered, level);\n+\n+            diagnostic.source = 'rustc';\n+            diagnostic.code = data.message.code\n+                ? data.message.code.code\n+                : undefined;\n+            diagnostic.relatedInformation = [];\n+\n+            const fileUrl = vscode.Uri.file(fileName!);\n+\n+            const diagnostics: vscode.Diagnostic[] = [\n+                ...(this.diagnosticCollection!.get(fileUrl) || [])\n+            ];\n+            diagnostics.push(diagnostic);\n+\n+            this.diagnosticCollection!.set(fileUrl, diagnostics);\n+        }\n+    }\n+}"}, {"sha": "fb5b9f7f2b2a6bb3541ea820ab3dd1125a141c9e", "filename": "editors/code/src/commands/line_buffer.ts", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fsrc%2Fcommands%2Fline_buffer.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fsrc%2Fcommands%2Fline_buffer.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fline_buffer.ts?ref=bb3b159fb7d377f667732ade715cbe019da84d71", "patch": "@@ -0,0 +1,16 @@\n+export class LineBuffer {\n+    private outBuffer: string = '';\n+\n+    public processOutput(chunk: string, cb: (line: string) => void) {\n+        this.outBuffer += chunk;\n+        let eolIndex = this.outBuffer.indexOf('\\n');\n+        while (eolIndex >= 0) {\n+            // line includes the EOL\n+            const line = this.outBuffer.slice(0, eolIndex + 1);\n+            cb(line);\n+            this.outBuffer = this.outBuffer.slice(eolIndex + 1);\n+\n+            eolIndex = this.outBuffer.indexOf('\\n');\n+        }\n+    }\n+}"}, {"sha": "3589edceecd5535ba159345fe70c318ab1718d56", "filename": "editors/code/src/commands/runnables.ts", "status": "modified", "additions": 9, "deletions": 24, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Frunnables.ts?ref=bb3b159fb7d377f667732ade715cbe019da84d71", "patch": "@@ -1,9 +1,11 @@\n import * as child_process from 'child_process';\n+\n import * as util from 'util';\n import * as vscode from 'vscode';\n import * as lc from 'vscode-languageclient';\n \n import { Server } from '../server';\n+import { CargoWatchProvider } from './cargo_watch';\n \n interface RunnablesParams {\n     textDocument: lc.TextDocumentIdentifier;\n@@ -127,37 +129,19 @@ export async function handleSingle(runnable: Runnable) {\n     return vscode.tasks.executeTask(task);\n }\n \n-export const autoCargoWatchTask: vscode.Task = {\n-    name: 'cargo watch',\n-    source: 'rust-analyzer',\n-    definition: {\n-        type: 'watch'\n-    },\n-    execution: new vscode.ShellExecution('cargo', ['watch'], { cwd: '.' }),\n-\n-    isBackground: true,\n-    problemMatchers: ['$rustc-watch'],\n-    presentationOptions: {\n-        clear: true\n-    },\n-    // Not yet exposed in the vscode.d.ts\n-    // https://github.com/Microsoft/vscode/blob/ea7c31d770e04b51d586b0d3944f3a7feb03afb9/src/vs/workbench/contrib/tasks/common/tasks.ts#L444-L456\n-    runOptions: ({\n-        runOn: 2 // RunOnOptions.folderOpen\n-    } as unknown) as vscode.RunOptions\n-};\n-\n /**\n  * Interactively asks the user whether we should run `cargo check` in order to\n  * provide inline diagnostics; the user is met with a series of dialog boxes\n  * that, when accepted, allow us to `cargo install cargo-watch` and then run it.\n  */\n-export async function interactivelyStartCargoWatch() {\n-    if (Server.config.enableCargoWatchOnStartup === 'disabled') {\n+export async function interactivelyStartCargoWatch(\n+    context: vscode.ExtensionContext\n+) {\n+    if (Server.config.cargoWatchOptions.enableOnStartup === 'disabled') {\n         return;\n     }\n \n-    if (Server.config.enableCargoWatchOnStartup === 'ask') {\n+    if (Server.config.cargoWatchOptions.enableOnStartup === 'ask') {\n         const watch = await vscode.window.showInformationMessage(\n             'Start watching changes with cargo? (Executes `cargo watch`, provides inline diagnostics)',\n             'yes',\n@@ -212,5 +196,6 @@ export async function interactivelyStartCargoWatch() {\n         }\n     }\n \n-    vscode.tasks.executeTask(autoCargoWatchTask);\n+    const validater = new CargoWatchProvider();\n+    validater.activate(context.subscriptions);\n }"}, {"sha": "f027d7bbc27ba9f7ae2c540d034b0c895dae61c7", "filename": "editors/code/src/commands/watch_status.ts", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands%2Fwatch_status.ts?ref=bb3b159fb7d377f667732ade715cbe019da84d71", "patch": "@@ -0,0 +1,41 @@\n+import * as vscode from 'vscode';\n+\n+const spinnerFrames = ['\u280b', '\u2819', '\u2839', '\u2838', '\u283c', '\u2834', '\u2826', '\u2827', '\u2807', '\u280f'];\n+\n+export class StatusDisplay {\n+    private i = 0;\n+    private statusBarItem: vscode.StatusBarItem;\n+    private timer?: NodeJS.Timeout;\n+\n+    constructor(subscriptions: vscode.Disposable[]) {\n+        this.statusBarItem = vscode.window.createStatusBarItem(\n+            vscode.StatusBarAlignment.Left,\n+            10\n+        );\n+        subscriptions.push(this.statusBarItem);\n+        this.statusBarItem.hide();\n+    }\n+\n+    public show() {\n+        this.timer =\n+            this.timer ||\n+            setInterval(() => {\n+                this.statusBarItem!.text = 'cargo check ' + this.frame();\n+            }, 300);\n+\n+        this.statusBarItem!.show();\n+    }\n+\n+    public hide() {\n+        if (this.timer) {\n+            clearInterval(this.timer);\n+            this.timer = undefined;\n+        }\n+\n+        this.statusBarItem!.hide();\n+    }\n+\n+    private frame() {\n+        return spinnerFrames[(this.i = ++this.i % spinnerFrames.length)];\n+    }\n+}"}, {"sha": "481a5e5f18fd687bf1de726228d031fe2d4df932", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 29, "deletions": 5, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=bb3b159fb7d377f667732ade715cbe019da84d71", "patch": "@@ -4,14 +4,25 @@ import { Server } from './server';\n \n const RA_LSP_DEBUG = process.env.__RA_LSP_SERVER_DEBUG;\n \n-export type CargoWatchOptions = 'ask' | 'enabled' | 'disabled';\n+export type CargoWatchStartupOptions = 'ask' | 'enabled' | 'disabled';\n+export type CargoWatchTraceOptions = 'off' | 'error' | 'verbose';\n+\n+export interface CargoWatchOptions {\n+    enableOnStartup: CargoWatchStartupOptions;\n+    checkArguments: string;\n+    trace: CargoWatchTraceOptions;\n+}\n \n export class Config {\n     public highlightingOn = true;\n     public enableEnhancedTyping = true;\n     public raLspServerPath = RA_LSP_DEBUG || 'ra_lsp_server';\n     public showWorkspaceLoadedNotification = true;\n-    public enableCargoWatchOnStartup: CargoWatchOptions = 'ask';\n+    public cargoWatchOptions: CargoWatchOptions = {\n+        enableOnStartup: 'ask',\n+        trace: 'off',\n+        checkArguments: ''\n+    };\n \n     private prevEnhancedTyping: null | boolean = null;\n \n@@ -73,9 +84,22 @@ export class Config {\n         }\n \n         if (config.has('enableCargoWatchOnStartup')) {\n-            this.enableCargoWatchOnStartup = config.get<CargoWatchOptions>(\n-                'enableCargoWatchOnStartup',\n-                'ask'\n+            this.cargoWatchOptions.enableOnStartup = config.get<\n+                CargoWatchStartupOptions\n+            >('enableCargoWatchOnStartup', 'ask');\n+        }\n+\n+        if (config.has('trace.cargo-watch')) {\n+            this.cargoWatchOptions.trace = config.get<CargoWatchTraceOptions>(\n+                'trace.cargo-watch',\n+                'off'\n+            );\n+        }\n+\n+        if (config.has('cargo-watch.check-arguments')) {\n+            this.cargoWatchOptions.checkArguments = config.get<string>(\n+                'cargo-watch.check-arguments',\n+                ''\n             );\n         }\n     }"}, {"sha": "ef83c0b8b21ba6b1cadf922792eb1ab6c27ff787", "filename": "editors/code/src/extension.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fsrc%2Fextension.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fsrc%2Fextension.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fextension.ts?ref=bb3b159fb7d377f667732ade715cbe019da84d71", "patch": "@@ -121,7 +121,7 @@ export function activate(context: vscode.ExtensionContext) {\n     );\n \n     // Executing `cargo watch` provides us with inline diagnostics on save\n-    interactivelyStartCargoWatch();\n+    interactivelyStartCargoWatch(context);\n \n     // Start the language server, finally!\n     Server.start(allNotifications);"}, {"sha": "da8be9eb1795ab1711d098a7a43e335835089cd1", "filename": "editors/code/src/utils/processes.ts", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fsrc%2Futils%2Fprocesses.ts", "raw_url": "https://github.com/rust-lang/rust/raw/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fsrc%2Futils%2Fprocesses.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2Fprocesses.ts?ref=bb3b159fb7d377f667732ade715cbe019da84d71", "patch": "@@ -0,0 +1,51 @@\n+'use strict';\n+\n+import * as cp from 'child_process';\n+import ChildProcess = cp.ChildProcess;\n+\n+import { join } from 'path';\n+\n+const isWindows = process.platform === 'win32';\n+const isMacintosh = process.platform === 'darwin';\n+const isLinux = process.platform === 'linux';\n+\n+// this is very complex, but is basically copy-pased from VSCode implementation here:\n+// https://github.com/Microsoft/vscode-languageserver-node/blob/dbfd37e35953ad0ee14c4eeced8cfbc41697b47e/client/src/utils/processes.ts#L15\n+\n+// And see discussion at\n+// https://github.com/rust-analyzer/rust-analyzer/pull/1079#issuecomment-478908109\n+\n+export function terminate(process: ChildProcess, cwd?: string): boolean {\n+    if (isWindows) {\n+        try {\n+            // This we run in Atom execFileSync is available.\n+            // Ignore stderr since this is otherwise piped to parent.stderr\n+            // which might be already closed.\n+            const options: any = {\n+                stdio: ['pipe', 'pipe', 'ignore']\n+            };\n+            if (cwd) {\n+                options.cwd = cwd;\n+            }\n+            cp.execFileSync(\n+                'taskkill',\n+                ['/T', '/F', '/PID', process.pid.toString()],\n+                options\n+            );\n+            return true;\n+        } catch (err) {\n+            return false;\n+        }\n+    } else if (isLinux || isMacintosh) {\n+        try {\n+            const cmd = join(__dirname, 'terminateProcess.sh');\n+            const result = cp.spawnSync(cmd, [process.pid.toString()]);\n+            return result.error ? false : true;\n+        } catch (err) {\n+            return false;\n+        }\n+    } else {\n+        process.kill('SIGKILL');\n+        return true;\n+    }\n+}"}, {"sha": "2ec9e1c2ec32949ee319e96df948e0eb50084ed9", "filename": "editors/code/src/utils/terminateProcess.sh", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fsrc%2Futils%2FterminateProcess.sh", "raw_url": "https://github.com/rust-lang/rust/raw/bb3b159fb7d377f667732ade715cbe019da84d71/editors%2Fcode%2Fsrc%2Futils%2FterminateProcess.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Futils%2FterminateProcess.sh?ref=bb3b159fb7d377f667732ade715cbe019da84d71", "patch": "@@ -0,0 +1,12 @@\n+#!/bin/bash\n+\n+terminateTree() {\n+    for cpid in $(pgrep -P $1); do\n+        terminateTree $cpid\n+    done\n+    kill -9 $1 > /dev/null 2>&1\n+}\n+\n+for pid in $*; do\n+    terminateTree $pid\n+done\n\\ No newline at end of file"}]}