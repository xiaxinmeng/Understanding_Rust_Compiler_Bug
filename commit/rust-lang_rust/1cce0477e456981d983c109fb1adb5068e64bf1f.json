{"sha": "1cce0477e456981d983c109fb1adb5068e64bf1f", "node_id": "C_kwDOAAsO6NoAKDFjY2UwNDc3ZTQ1Njk4MWQ5ODNjMTA5ZmIxYWRiNTA2OGU2NGJmMWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-25T15:00:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-25T15:00:27Z"}, "message": "Auto merge of #9225 - tabokie:assert_ok, r=Jarcho\n\nadd `[assertions_on_result_states]` lint\n\nClose #9162\n\nchangelog: add `[assertions_on_result_states]` lint\n\nSigned-off-by: tabokie <xy.tao@outlook.com>", "tree": {"sha": "e4c032e9fdae270f4eece24e3cb36d53c4918e8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4c032e9fdae270f4eece24e3cb36d53c4918e8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1cce0477e456981d983c109fb1adb5068e64bf1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1cce0477e456981d983c109fb1adb5068e64bf1f", "html_url": "https://github.com/rust-lang/rust/commit/1cce0477e456981d983c109fb1adb5068e64bf1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1cce0477e456981d983c109fb1adb5068e64bf1f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a14edd571ed3cb4ea79f32eba9954a2f34821df8", "url": "https://api.github.com/repos/rust-lang/rust/commits/a14edd571ed3cb4ea79f32eba9954a2f34821df8", "html_url": "https://github.com/rust-lang/rust/commit/a14edd571ed3cb4ea79f32eba9954a2f34821df8"}, {"sha": "8454602cef2d4ce1271425c0924303955ee47e82", "url": "https://api.github.com/repos/rust-lang/rust/commits/8454602cef2d4ce1271425c0924303955ee47e82", "html_url": "https://github.com/rust-lang/rust/commit/8454602cef2d4ce1271425c0924303955ee47e82"}], "stats": {"total": 282, "additions": 282, "deletions": 0}, "files": [{"sha": "e64e5d94bc95d5c17e76d13c7b1dfd6ac81269c1", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cce0477e456981d983c109fb1adb5068e64bf1f/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/1cce0477e456981d983c109fb1adb5068e64bf1f/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=1cce0477e456981d983c109fb1adb5068e64bf1f", "patch": "@@ -3440,6 +3440,7 @@ Released 2018-09-13\n [`as_conversions`]: https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions\n [`as_underscore`]: https://rust-lang.github.io/rust-clippy/master/index.html#as_underscore\n [`assertions_on_constants`]: https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_constants\n+[`assertions_on_result_states`]: https://rust-lang.github.io/rust-clippy/master/index.html#assertions_on_result_states\n [`assign_op_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern\n [`assign_ops`]: https://rust-lang.github.io/rust-clippy/master/index.html#assign_ops\n [`async_yields_async`]: https://rust-lang.github.io/rust-clippy/master/index.html#async_yields_async"}, {"sha": "b6affdee5236418d65a4f5a5d45e493ae54ce414", "filename": "clippy_lints/src/assertions_on_result_states.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/1cce0477e456981d983c109fb1adb5068e64bf1f/clippy_lints%2Fsrc%2Fassertions_on_result_states.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cce0477e456981d983c109fb1adb5068e64bf1f/clippy_lints%2Fsrc%2Fassertions_on_result_states.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_result_states.rs?ref=1cce0477e456981d983c109fb1adb5068e64bf1f", "patch": "@@ -0,0 +1,98 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::macros::{find_assert_args, root_macro_call_first_node, PanicExpn};\n+use clippy_utils::path_res;\n+use clippy_utils::source::snippet_with_context;\n+use clippy_utils::ty::{implements_trait, is_copy, is_type_diagnostic_item};\n+use clippy_utils::usage::local_used_after_expr;\n+use rustc_errors::Applicability;\n+use rustc_hir::def::Res;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::ty::{self, Ty};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for `assert!(r.is_ok())` or `assert!(r.is_err())` calls.\n+    ///\n+    /// ### Why is this bad?\n+    /// An assertion failure cannot output an useful message of the error.\n+    ///\n+    /// ### Example\n+    /// ```rust,ignore\n+    /// # let r = Ok::<_, ()>(());\n+    /// assert!(r.is_ok());\n+    /// # let r = Err::<_, ()>(());\n+    /// assert!(r.is_err());\n+    /// ```\n+    #[clippy::version = \"1.64.0\"]\n+    pub ASSERTIONS_ON_RESULT_STATES,\n+    style,\n+    \"`assert!(r.is_ok())`/`assert!(r.is_err())` gives worse error message than directly calling `r.unwrap()`/`r.unwrap_err()`\"\n+}\n+\n+declare_lint_pass!(AssertionsOnResultStates => [ASSERTIONS_ON_RESULT_STATES]);\n+\n+impl<'tcx> LateLintPass<'tcx> for AssertionsOnResultStates {\n+    fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n+        if let Some(macro_call) = root_macro_call_first_node(cx, e)\n+            && matches!(cx.tcx.get_diagnostic_name(macro_call.def_id), Some(sym::assert_macro))\n+            && let Some((condition, panic_expn)) = find_assert_args(cx, e, macro_call.expn)\n+            && matches!(panic_expn, PanicExpn::Empty)\n+            && let ExprKind::MethodCall(method_segment, [recv], _) = condition.kind\n+            && let result_type_with_refs = cx.typeck_results().expr_ty(recv)\n+            && let result_type = result_type_with_refs.peel_refs()\n+            && is_type_diagnostic_item(cx, result_type, sym::Result)\n+            && let ty::Adt(_, substs) = result_type.kind()\n+        {\n+            if !is_copy(cx, result_type) {\n+                if result_type_with_refs != result_type {\n+                    return;\n+                } else if let Res::Local(binding_id) = path_res(cx, recv)\n+                    && local_used_after_expr(cx, binding_id, recv) {\n+                    return;\n+                }\n+            }\n+            let mut app = Applicability::MachineApplicable;\n+            match method_segment.ident.as_str() {\n+                \"is_ok\" if has_debug_impl(cx, substs.type_at(1)) => {\n+                    span_lint_and_sugg(\n+                        cx,\n+                        ASSERTIONS_ON_RESULT_STATES,\n+                        macro_call.span,\n+                        \"called `assert!` with `Result::is_ok`\",\n+                        \"replace with\",\n+                        format!(\n+                            \"{}.unwrap()\",\n+                            snippet_with_context(cx, recv.span, condition.span.ctxt(), \"..\", &mut app).0\n+                        ),\n+                        app,\n+                    );\n+                }\n+                \"is_err\" if has_debug_impl(cx, substs.type_at(0)) => {\n+                    span_lint_and_sugg(\n+                        cx,\n+                        ASSERTIONS_ON_RESULT_STATES,\n+                        macro_call.span,\n+                        \"called `assert!` with `Result::is_err`\",\n+                        \"replace with\",\n+                        format!(\n+                            \"{}.unwrap_err()\",\n+                            snippet_with_context(cx, recv.span, condition.span.ctxt(), \"..\", &mut app).0\n+                        ),\n+                        app,\n+                    );\n+                }\n+                _ => (),\n+            };\n+        }\n+    }\n+}\n+\n+/// This checks whether a given type is known to implement Debug.\n+fn has_debug_impl<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n+    cx.tcx\n+        .get_diagnostic_item(sym::Debug)\n+        .map_or(false, |debug| implements_trait(cx, ty, debug, &[]))\n+}"}, {"sha": "5be1c417bf8f665701e92f588782508680079ff7", "filename": "clippy_lints/src/lib.register_all.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cce0477e456981d983c109fb1adb5068e64bf1f/clippy_lints%2Fsrc%2Flib.register_all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cce0477e456981d983c109fb1adb5068e64bf1f/clippy_lints%2Fsrc%2Flib.register_all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_all.rs?ref=1cce0477e456981d983c109fb1adb5068e64bf1f", "patch": "@@ -6,6 +6,7 @@ store.register_group(true, \"clippy::all\", Some(\"clippy_all\"), vec![\n     LintId::of(almost_complete_letter_range::ALMOST_COMPLETE_LETTER_RANGE),\n     LintId::of(approx_const::APPROX_CONSTANT),\n     LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n+    LintId::of(assertions_on_result_states::ASSERTIONS_ON_RESULT_STATES),\n     LintId::of(async_yields_async::ASYNC_YIELDS_ASYNC),\n     LintId::of(attrs::BLANKET_CLIPPY_RESTRICTION_LINTS),\n     LintId::of(attrs::DEPRECATED_CFG_ATTR),"}, {"sha": "65e01de2b16016559afa0d53c2376bdbfc1943bd", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cce0477e456981d983c109fb1adb5068e64bf1f/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cce0477e456981d983c109fb1adb5068e64bf1f/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=1cce0477e456981d983c109fb1adb5068e64bf1f", "patch": "@@ -42,6 +42,7 @@ store.register_lints(&[\n     asm_syntax::INLINE_ASM_X86_ATT_SYNTAX,\n     asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX,\n     assertions_on_constants::ASSERTIONS_ON_CONSTANTS,\n+    assertions_on_result_states::ASSERTIONS_ON_RESULT_STATES,\n     async_yields_async::ASYNC_YIELDS_ASYNC,\n     attrs::ALLOW_ATTRIBUTES_WITHOUT_REASON,\n     attrs::BLANKET_CLIPPY_RESTRICTION_LINTS,"}, {"sha": "e029a5235e720995a26ddac5fd07301917a31a64", "filename": "clippy_lints/src/lib.register_style.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1cce0477e456981d983c109fb1adb5068e64bf1f/clippy_lints%2Fsrc%2Flib.register_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cce0477e456981d983c109fb1adb5068e64bf1f/clippy_lints%2Fsrc%2Flib.register_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_style.rs?ref=1cce0477e456981d983c109fb1adb5068e64bf1f", "patch": "@@ -4,6 +4,7 @@\n \n store.register_group(true, \"clippy::style\", Some(\"clippy_style\"), vec![\n     LintId::of(assertions_on_constants::ASSERTIONS_ON_CONSTANTS),\n+    LintId::of(assertions_on_result_states::ASSERTIONS_ON_RESULT_STATES),\n     LintId::of(blacklisted_name::BLACKLISTED_NAME),\n     LintId::of(blocks_in_if_conditions::BLOCKS_IN_IF_CONDITIONS),\n     LintId::of(bool_assert_comparison::BOOL_ASSERT_COMPARISON),"}, {"sha": "6cd1928e9c1c65410c21aade6d4adc2553416b9c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1cce0477e456981d983c109fb1adb5068e64bf1f/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cce0477e456981d983c109fb1adb5068e64bf1f/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=1cce0477e456981d983c109fb1adb5068e64bf1f", "patch": "@@ -174,6 +174,7 @@ mod as_conversions;\n mod as_underscore;\n mod asm_syntax;\n mod assertions_on_constants;\n+mod assertions_on_result_states;\n mod async_yields_async;\n mod attrs;\n mod await_holding_invalid;\n@@ -727,6 +728,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| Box::new(unnecessary_sort_by::UnnecessarySortBy));\n     store.register_late_pass(move || Box::new(unnecessary_wraps::UnnecessaryWraps::new(avoid_breaking_exported_api)));\n     store.register_late_pass(|| Box::new(assertions_on_constants::AssertionsOnConstants));\n+    store.register_late_pass(|| Box::new(assertions_on_result_states::AssertionsOnResultStates));\n     store.register_late_pass(|| Box::new(transmuting_null::TransmutingNull));\n     store.register_late_pass(|| Box::new(path_buf_push_overwrite::PathBufPushOverwrite));\n     store.register_late_pass(|| Box::new(inherent_to_string::InherentToString));"}, {"sha": "7bde72e4b6b57dfdf22f5b002b1f5455012319e0", "filename": "tests/ui/assertions_on_result_states.fixed", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/1cce0477e456981d983c109fb1adb5068e64bf1f/tests%2Fui%2Fassertions_on_result_states.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/1cce0477e456981d983c109fb1adb5068e64bf1f/tests%2Fui%2Fassertions_on_result_states.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_result_states.fixed?ref=1cce0477e456981d983c109fb1adb5068e64bf1f", "patch": "@@ -0,0 +1,69 @@\n+// run-rustfix\n+#![warn(clippy::assertions_on_result_states)]\n+\n+use std::result::Result;\n+\n+struct Foo;\n+\n+#[derive(Debug)]\n+struct DebugFoo;\n+\n+#[derive(Copy, Clone, Debug)]\n+struct CopyFoo;\n+\n+macro_rules! get_ok_macro {\n+    () => {\n+        Ok::<_, DebugFoo>(Foo)\n+    };\n+}\n+\n+fn main() {\n+    // test ok\n+    let r: Result<Foo, DebugFoo> = Ok(Foo);\n+    debug_assert!(r.is_ok());\n+    r.unwrap();\n+\n+    // test ok with non-debug error type\n+    let r: Result<Foo, Foo> = Ok(Foo);\n+    assert!(r.is_ok());\n+\n+    // test temporary ok\n+    fn get_ok() -> Result<Foo, DebugFoo> {\n+        Ok(Foo)\n+    }\n+    get_ok().unwrap();\n+\n+    // test macro ok\n+    get_ok_macro!().unwrap();\n+\n+    // test ok that shouldn't be moved\n+    let r: Result<CopyFoo, DebugFoo> = Ok(CopyFoo);\n+    fn test_ref_unmoveable_ok(r: &Result<CopyFoo, DebugFoo>) {\n+        assert!(r.is_ok());\n+    }\n+    test_ref_unmoveable_ok(&r);\n+    assert!(r.is_ok());\n+    r.unwrap();\n+\n+    // test ok that is copied\n+    let r: Result<CopyFoo, CopyFoo> = Ok(CopyFoo);\n+    r.unwrap();\n+    r.unwrap();\n+\n+    // test reference to ok\n+    let r: Result<CopyFoo, CopyFoo> = Ok(CopyFoo);\n+    fn test_ref_copy_ok(r: &Result<CopyFoo, CopyFoo>) {\n+        r.unwrap();\n+    }\n+    test_ref_copy_ok(&r);\n+    r.unwrap();\n+\n+    // test err\n+    let r: Result<DebugFoo, Foo> = Err(Foo);\n+    debug_assert!(r.is_err());\n+    r.unwrap_err();\n+\n+    // test err with non-debug value type\n+    let r: Result<Foo, Foo> = Err(Foo);\n+    assert!(r.is_err());\n+}"}, {"sha": "4c5af81efc23fbac1ae73a27fda862eeb9f1ddd2", "filename": "tests/ui/assertions_on_result_states.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/1cce0477e456981d983c109fb1adb5068e64bf1f/tests%2Fui%2Fassertions_on_result_states.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1cce0477e456981d983c109fb1adb5068e64bf1f/tests%2Fui%2Fassertions_on_result_states.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_result_states.rs?ref=1cce0477e456981d983c109fb1adb5068e64bf1f", "patch": "@@ -0,0 +1,69 @@\n+// run-rustfix\n+#![warn(clippy::assertions_on_result_states)]\n+\n+use std::result::Result;\n+\n+struct Foo;\n+\n+#[derive(Debug)]\n+struct DebugFoo;\n+\n+#[derive(Copy, Clone, Debug)]\n+struct CopyFoo;\n+\n+macro_rules! get_ok_macro {\n+    () => {\n+        Ok::<_, DebugFoo>(Foo)\n+    };\n+}\n+\n+fn main() {\n+    // test ok\n+    let r: Result<Foo, DebugFoo> = Ok(Foo);\n+    debug_assert!(r.is_ok());\n+    assert!(r.is_ok());\n+\n+    // test ok with non-debug error type\n+    let r: Result<Foo, Foo> = Ok(Foo);\n+    assert!(r.is_ok());\n+\n+    // test temporary ok\n+    fn get_ok() -> Result<Foo, DebugFoo> {\n+        Ok(Foo)\n+    }\n+    assert!(get_ok().is_ok());\n+\n+    // test macro ok\n+    assert!(get_ok_macro!().is_ok());\n+\n+    // test ok that shouldn't be moved\n+    let r: Result<CopyFoo, DebugFoo> = Ok(CopyFoo);\n+    fn test_ref_unmoveable_ok(r: &Result<CopyFoo, DebugFoo>) {\n+        assert!(r.is_ok());\n+    }\n+    test_ref_unmoveable_ok(&r);\n+    assert!(r.is_ok());\n+    r.unwrap();\n+\n+    // test ok that is copied\n+    let r: Result<CopyFoo, CopyFoo> = Ok(CopyFoo);\n+    assert!(r.is_ok());\n+    r.unwrap();\n+\n+    // test reference to ok\n+    let r: Result<CopyFoo, CopyFoo> = Ok(CopyFoo);\n+    fn test_ref_copy_ok(r: &Result<CopyFoo, CopyFoo>) {\n+        assert!(r.is_ok());\n+    }\n+    test_ref_copy_ok(&r);\n+    r.unwrap();\n+\n+    // test err\n+    let r: Result<DebugFoo, Foo> = Err(Foo);\n+    debug_assert!(r.is_err());\n+    assert!(r.is_err());\n+\n+    // test err with non-debug value type\n+    let r: Result<Foo, Foo> = Err(Foo);\n+    assert!(r.is_err());\n+}"}, {"sha": "13c2dd877a976c524e9db0c35df98cb314b6189c", "filename": "tests/ui/assertions_on_result_states.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/1cce0477e456981d983c109fb1adb5068e64bf1f/tests%2Fui%2Fassertions_on_result_states.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1cce0477e456981d983c109fb1adb5068e64bf1f/tests%2Fui%2Fassertions_on_result_states.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_result_states.stderr?ref=1cce0477e456981d983c109fb1adb5068e64bf1f", "patch": "@@ -0,0 +1,40 @@\n+error: called `assert!` with `Result::is_ok`\n+  --> $DIR/assertions_on_result_states.rs:24:5\n+   |\n+LL |     assert!(r.is_ok());\n+   |     ^^^^^^^^^^^^^^^^^^ help: replace with: `r.unwrap()`\n+   |\n+   = note: `-D clippy::assertions-on-result-states` implied by `-D warnings`\n+\n+error: called `assert!` with `Result::is_ok`\n+  --> $DIR/assertions_on_result_states.rs:34:5\n+   |\n+LL |     assert!(get_ok().is_ok());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `get_ok().unwrap()`\n+\n+error: called `assert!` with `Result::is_ok`\n+  --> $DIR/assertions_on_result_states.rs:37:5\n+   |\n+LL |     assert!(get_ok_macro!().is_ok());\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with: `get_ok_macro!().unwrap()`\n+\n+error: called `assert!` with `Result::is_ok`\n+  --> $DIR/assertions_on_result_states.rs:50:5\n+   |\n+LL |     assert!(r.is_ok());\n+   |     ^^^^^^^^^^^^^^^^^^ help: replace with: `r.unwrap()`\n+\n+error: called `assert!` with `Result::is_ok`\n+  --> $DIR/assertions_on_result_states.rs:56:9\n+   |\n+LL |         assert!(r.is_ok());\n+   |         ^^^^^^^^^^^^^^^^^^ help: replace with: `r.unwrap()`\n+\n+error: called `assert!` with `Result::is_err`\n+  --> $DIR/assertions_on_result_states.rs:64:5\n+   |\n+LL |     assert!(r.is_err());\n+   |     ^^^^^^^^^^^^^^^^^^^ help: replace with: `r.unwrap_err()`\n+\n+error: aborting due to 6 previous errors\n+"}]}