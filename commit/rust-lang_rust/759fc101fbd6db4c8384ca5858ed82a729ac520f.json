{"sha": "759fc101fbd6db4c8384ca5858ed82a729ac520f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1OWZjMTAxZmJkNmRiNGM4Mzg0Y2E1ODU4ZWQ4MmE3MjlhYzUyMGY=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-28T09:12:22Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-09-28T09:12:35Z"}, "message": "Get rid of might_not_init kludge in init_local.\n\nInitializing something is now safe wrt to cleanups (so the cleanup for the\nlocal is only registered after the initialization.)", "tree": {"sha": "017fba7e32f90f47b884863f95c1ecc42e1b3974", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/017fba7e32f90f47b884863f95c1ecc42e1b3974"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/759fc101fbd6db4c8384ca5858ed82a729ac520f", "comment_count": 1, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/759fc101fbd6db4c8384ca5858ed82a729ac520f", "html_url": "https://github.com/rust-lang/rust/commit/759fc101fbd6db4c8384ca5858ed82a729ac520f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/759fc101fbd6db4c8384ca5858ed82a729ac520f/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16d5aaa96217555f4cba76e03b60ca7d1aaad935", "url": "https://api.github.com/repos/rust-lang/rust/commits/16d5aaa96217555f4cba76e03b60ca7d1aaad935", "html_url": "https://github.com/rust-lang/rust/commit/16d5aaa96217555f4cba76e03b60ca7d1aaad935"}], "stats": {"total": 46, "additions": 3, "deletions": 43}, "files": [{"sha": "9d7021328d20e3fbd15788565c18219032ac9442", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 3, "deletions": 43, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/759fc101fbd6db4c8384ca5858ed82a729ac520f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/759fc101fbd6db4c8384ca5858ed82a729ac520f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=759fc101fbd6db4c8384ca5858ed82a729ac520f", "patch": "@@ -4677,10 +4677,6 @@ fn init_local(bcx: @block_ctxt, local: @ast::local) -> @block_ctxt {\n     let ty = node_id_type(bcx_ccx(bcx), local.node.id);\n     let llptr = bcx.fcx.lllocals.get(local.node.id);\n \n-    if must_zero(bcx_ccx(bcx), local) {\n-        bcx = zero_alloca(bcx, llptr, ty);\n-    }\n-\n     alt local.node.init {\n       some(init) {\n         alt init.op {\n@@ -4694,48 +4690,12 @@ fn init_local(bcx: @block_ctxt, local: @ast::local) -> @block_ctxt {\n           }\n         }\n       }\n-      _ { }\n+      _ { bcx = zero_alloca(bcx, llptr, ty); }\n     }\n     // Make a note to drop this slot on the way out.\n     add_clean(bcx, llptr, ty);\n-    bcx = trans_alt::bind_irrefutable_pat(bcx, local.node.pat, llptr,\n-                                          bcx.fcx.lllocals, false);\n-    ret bcx;\n-\n-    fn must_zero(ccx: @crate_ctxt, local: @ast::local) -> bool {\n-        alt local.node.init {\n-          some(init) { might_not_init(ccx, init.expr) }\n-          none. { true }\n-        }\n-    }\n-\n-    fn might_not_init(ccx: @crate_ctxt, expr: @ast::expr) -> bool {\n-        type env = {mutable mightnt: bool,\n-                    ccx: @crate_ctxt};\n-        let e = {mutable mightnt: false,\n-                 ccx: ccx};\n-        fn visit_expr(ex: @ast::expr, e: env, v: vt<env>) {\n-            let might_not_init = alt ex.node {\n-              ast::expr_alt(_, _) { true }\n-              ast::expr_ret(_) { true }\n-              ast::expr_break. { true }\n-              ast::expr_cont. { true }\n-              ast::expr_call(_, _) { true }\n-              _ {\n-                let ex_ty = ty::expr_ty(e.ccx.tcx, ex);\n-                ty::type_is_bot(e.ccx.tcx, ex_ty)\n-              }\n-            };\n-            if might_not_init {\n-                e.mightnt = true;\n-            } else { visit::visit_expr(ex, e, v); }\n-        }\n-        let visitor =\n-            visit::mk_vt(@{visit_expr: visit_expr\n-                           with *visit::default_visitor()});\n-        visitor.visit_expr(expr, e, visitor);\n-        ret e.mightnt;\n-    }\n+    ret trans_alt::bind_irrefutable_pat(bcx, local.node.pat, llptr,\n+                                        bcx.fcx.lllocals, false);\n }\n \n fn init_ref_local(bcx: @block_ctxt, local: @ast::local) -> @block_ctxt {"}]}