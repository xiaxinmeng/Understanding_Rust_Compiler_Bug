{"sha": "22949dab267bf7b8b3da73fe7745a12daca21a52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyOTQ5ZGFiMjY3YmY3YjhiM2RhNzNmZTc3NDVhMTJkYWNhMjFhNTI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-07T15:42:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-07T15:42:36Z"}, "message": "rename module source", "tree": {"sha": "7a55032e56163968e68f2aaff28c8f4aef477422", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a55032e56163968e68f2aaff28c8f4aef477422"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22949dab267bf7b8b3da73fe7745a12daca21a52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22949dab267bf7b8b3da73fe7745a12daca21a52", "html_url": "https://github.com/rust-lang/rust/commit/22949dab267bf7b8b3da73fe7745a12daca21a52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22949dab267bf7b8b3da73fe7745a12daca21a52/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ed1514df3f8837ccebdbbfdadbe89e79b4a4365", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ed1514df3f8837ccebdbbfdadbe89e79b4a4365", "html_url": "https://github.com/rust-lang/rust/commit/2ed1514df3f8837ccebdbbfdadbe89e79b4a4365"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "6fd30aaee0e8585c383bad2509cb0e1b88680205", "filename": "crates/ra_analysis/src/completion.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/22949dab267bf7b8b3da73fe7745a12daca21a52/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22949dab267bf7b8b3da73fe7745a12daca21a52/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fcompletion.rs?ref=22949dab267bf7b8b3da73fe7745a12daca21a52", "patch": "@@ -34,10 +34,11 @@ pub(crate) fn resolve_based_completion(\n     let source_root_id = db.file_source_root(position.file_id);\n     let file = db.file_syntax(position.file_id);\n     let module_tree = db.module_tree(source_root_id)?;\n-    let module_id = match module_tree.any_module_for_source(ModuleSource::File(position.file_id)) {\n-        None => return Ok(None),\n-        Some(it) => it,\n-    };\n+    let module_id =\n+        match module_tree.any_module_for_source(ModuleSource::SourceFile(position.file_id)) {\n+            None => return Ok(None),\n+            Some(it) => it,\n+        };\n     let file = {\n         let edit = AtomEdit::insert(position.offset, \"intellijRulezz\".to_string());\n         file.reparse(&edit)"}, {"sha": "ade96ddc094fb9c1c1caf0c054b9454bd23aa534", "filename": "crates/ra_analysis/src/descriptors/module/imp.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/22949dab267bf7b8b3da73fe7745a12daca21a52/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22949dab267bf7b8b3da73fe7745a12daca21a52/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fimp.rs?ref=22949dab267bf7b8b3da73fe7745a12daca21a52", "patch": "@@ -41,8 +41,8 @@ pub(crate) fn submodules(\n     db::check_canceled(db)?;\n     let file_id = source.file_id();\n     let submodules = match source.resolve(db) {\n-        ModuleSourceNode::Root(it) => collect_submodules(file_id, it.borrowed()),\n-        ModuleSourceNode::Inline(it) => it\n+        ModuleSourceNode::SourceFile(it) => collect_submodules(file_id, it.borrowed()),\n+        ModuleSourceNode::Module(it) => it\n             .borrowed()\n             .item_list()\n             .map(|it| collect_submodules(file_id, it))\n@@ -89,8 +89,8 @@ pub(crate) fn module_scope(\n     let tree = db.module_tree(source_root_id)?;\n     let source = module_id.source(&tree).resolve(db);\n     let res = match source {\n-        ModuleSourceNode::Root(root) => ModuleScope::new(root.borrowed().items()),\n-        ModuleSourceNode::Inline(inline) => match inline.borrowed().item_list() {\n+        ModuleSourceNode::SourceFile(it) => ModuleScope::new(it.borrowed().items()),\n+        ModuleSourceNode::Module(it) => match it.borrowed().item_list() {\n             Some(items) => ModuleScope::new(items.items()),\n             None => ModuleScope::new(std::iter::empty()),\n         },\n@@ -121,7 +121,7 @@ fn create_module_tree<'a>(\n \n     let source_root = db.source_root(source_root);\n     for &file_id in source_root.files.iter() {\n-        let source = ModuleSource::File(file_id);\n+        let source = ModuleSource::SourceFile(file_id);\n         if visited.contains(&source) {\n             continue; // TODO: use explicit crate_roots here\n         }\n@@ -181,7 +181,7 @@ fn build_subtree(\n                             visited,\n                             roots,\n                             Some(link),\n-                            ModuleSource::File(file_id),\n+                            ModuleSource::SourceFile(file_id),\n                         ),\n                     })\n                     .collect::<Cancelable<Vec<_>>>()?;\n@@ -213,8 +213,8 @@ fn resolve_submodule(\n     file_resolver: &FileResolverImp,\n ) -> (Vec<FileId>, Option<Problem>) {\n     let file_id = match source {\n-        ModuleSource::File(it) => it,\n-        ModuleSource::Inline(..) => {\n+        ModuleSource::SourceFile(it) => it,\n+        ModuleSource::Module(..) => {\n             // TODO\n             return (Vec::new(), None);\n         }"}, {"sha": "58d6abed3e7f05c08a188e2ea9d400313fc6921e", "filename": "crates/ra_analysis/src/descriptors/module/mod.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/22949dab267bf7b8b3da73fe7745a12daca21a52/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22949dab267bf7b8b3da73fe7745a12daca21a52/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fdescriptors%2Fmodule%2Fmod.rs?ref=22949dab267bf7b8b3da73fe7745a12daca21a52", "patch": "@@ -41,19 +41,18 @@ impl ModuleTree {\n \n /// `ModuleSource` is the syntax tree element that produced this module:\n /// either a file, or an inlinde module.\n-/// TODO: we don't produce Inline modules yet\n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n pub(crate) enum ModuleSource {\n-    File(FileId),\n+    SourceFile(FileId),\n     #[allow(dead_code)]\n-    Inline(SyntaxPtr),\n+    Module(SyntaxPtr),\n }\n \n /// An owned syntax node for a module. Unlike `ModuleSource`,\n /// this holds onto the AST for the whole file.\n enum ModuleSourceNode {\n-    Root(ast::SourceFileNode),\n-    Inline(ast::ModuleNode),\n+    SourceFile(ast::SourceFileNode),\n+    Module(ast::ModuleNode),\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Debug)]\n@@ -135,14 +134,14 @@ impl LinkId {\n     ) -> ast::ModuleNode {\n         let owner = self.owner(tree);\n         match owner.source(tree).resolve(db) {\n-            ModuleSourceNode::Root(root) => {\n+            ModuleSourceNode::SourceFile(root) => {\n                 let ast = imp::modules(root.borrowed())\n                     .find(|(name, _)| name == &tree.link(self).name)\n                     .unwrap()\n                     .1;\n                 ast.owned()\n             }\n-            ModuleSourceNode::Inline(it) => it,\n+            ModuleSourceNode::Module(it) => it,\n         }\n     }\n }\n@@ -158,34 +157,34 @@ impl ModuleSource {\n     pub(crate) fn new_inline(file_id: FileId, module: ast::Module) -> ModuleSource {\n         assert!(!module.has_semi());\n         let ptr = SyntaxPtr::new(file_id, module.syntax());\n-        ModuleSource::Inline(ptr)\n+        ModuleSource::Module(ptr)\n     }\n \n     pub(crate) fn as_file(self) -> Option<FileId> {\n         match self {\n-            ModuleSource::File(f) => Some(f),\n-            ModuleSource::Inline(..) => None,\n+            ModuleSource::SourceFile(f) => Some(f),\n+            ModuleSource::Module(..) => None,\n         }\n     }\n \n     pub(crate) fn file_id(self) -> FileId {\n         match self {\n-            ModuleSource::File(f) => f,\n-            ModuleSource::Inline(ptr) => ptr.file_id(),\n+            ModuleSource::SourceFile(f) => f,\n+            ModuleSource::Module(ptr) => ptr.file_id(),\n         }\n     }\n \n     fn resolve(self, db: &impl SyntaxDatabase) -> ModuleSourceNode {\n         match self {\n-            ModuleSource::File(file_id) => {\n+            ModuleSource::SourceFile(file_id) => {\n                 let syntax = db.file_syntax(file_id);\n-                ModuleSourceNode::Root(syntax.ast().owned())\n+                ModuleSourceNode::SourceFile(syntax.ast().owned())\n             }\n-            ModuleSource::Inline(ptr) => {\n+            ModuleSource::Module(ptr) => {\n                 let syntax = db.resolve_syntax_ptr(ptr);\n                 let syntax = syntax.borrowed();\n                 let module = ast::Module::cast(syntax).unwrap();\n-                ModuleSourceNode::Inline(module.owned())\n+                ModuleSourceNode::Module(module.owned())\n             }\n         }\n     }"}, {"sha": "614a6e9be17b47ffc7890f2bf74117defef8a533", "filename": "crates/ra_analysis/src/imp.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22949dab267bf7b8b3da73fe7745a12daca21a52/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22949dab267bf7b8b3da73fe7745a12daca21a52/crates%2Fra_analysis%2Fsrc%2Fimp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fimp.rs?ref=22949dab267bf7b8b3da73fe7745a12daca21a52", "patch": "@@ -226,7 +226,7 @@ impl AnalysisImpl {\n         let module_source = match find_node_at_offset::<ast::Module>(file.syntax(), position.offset)\n         {\n             Some(m) if !m.has_semi() => ModuleSource::new_inline(position.file_id, m),\n-            _ => ModuleSource::File(position.file_id),\n+            _ => ModuleSource::SourceFile(position.file_id),\n         };\n \n         let res = module_tree\n@@ -254,7 +254,7 @@ impl AnalysisImpl {\n         let module_tree = self.module_tree(file_id)?;\n         let crate_graph = self.db.crate_graph();\n         let res = module_tree\n-            .modules_for_source(ModuleSource::File(file_id))\n+            .modules_for_source(ModuleSource::SourceFile(file_id))\n             .into_iter()\n             .map(|it| it.root(&module_tree))\n             .filter_map(|it| it.source(&module_tree).as_file())\n@@ -386,7 +386,7 @@ impl AnalysisImpl {\n                 fix: None,\n             })\n             .collect::<Vec<_>>();\n-        if let Some(m) = module_tree.any_module_for_source(ModuleSource::File(file_id)) {\n+        if let Some(m) = module_tree.any_module_for_source(ModuleSource::SourceFile(file_id)) {\n             for (name_node, problem) in m.problems(&module_tree, &*self.db) {\n                 let diag = match problem {\n                     Problem::UnresolvedModule { candidate } => {\n@@ -548,7 +548,7 @@ impl AnalysisImpl {\n             Some(name) => name.text(),\n             None => return Vec::new(),\n         };\n-        let module_id = match module_tree.any_module_for_source(ModuleSource::File(file_id)) {\n+        let module_id = match module_tree.any_module_for_source(ModuleSource::SourceFile(file_id)) {\n             Some(id) => id,\n             None => return Vec::new(),\n         };"}]}