{"sha": "1212c9477c26335487ff1094a3d7d454c16365b5", "node_id": "C_kwDOAAsO6NoAKDEyMTJjOTQ3N2MyNjMzNTQ4N2ZmMTA5NGEzZDdkNDU0YzE2MzY1YjU", "commit": {"author": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2021-10-19T22:45:48Z"}, "committer": {"name": "Jack Huey", "email": "31162821+jackh726@users.noreply.github.com", "date": "2022-03-05T18:13:45Z"}, "message": "Change syntax for TyAlias where clauses", "tree": {"sha": "3985b4523e8d163fe5dd0a3255cb5aa75e4482f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3985b4523e8d163fe5dd0a3255cb5aa75e4482f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1212c9477c26335487ff1094a3d7d454c16365b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1212c9477c26335487ff1094a3d7d454c16365b5", "html_url": "https://github.com/rust-lang/rust/commit/1212c9477c26335487ff1094a3d7d454c16365b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1212c9477c26335487ff1094a3d7d454c16365b5/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de1ac375f079a9bf7f2aa81c47fa46ecdb32d074", "url": "https://api.github.com/repos/rust-lang/rust/commits/de1ac375f079a9bf7f2aa81c47fa46ecdb32d074", "html_url": "https://github.com/rust-lang/rust/commit/de1ac375f079a9bf7f2aa81c47fa46ecdb32d074"}], "stats": {"total": 108, "additions": 74, "deletions": 34}, "files": [{"sha": "8498cb6addaa17375217846b654e2c842db16cd6", "filename": "src/items.rs", "status": "modified", "additions": 74, "deletions": 34, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/1212c9477c26335487ff1094a3d7d454c16365b5/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1212c9477c26335487ff1094a3d7d454c16365b5/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=1212c9477c26335487ff1094a3d7d454c16365b5", "patch": "@@ -694,7 +694,8 @@ pub(crate) fn format_impl(\n     let where_span_end = context.snippet_provider.opt_span_before(missing_span, \"{\");\n     let where_clause_str = rewrite_where_clause(\n         context,\n-        &generics.where_clause,\n+        &generics.where_clause.predicates,\n+        generics.where_clause.span,\n         context.config.brace_style(),\n         Shape::legacy(where_budget, offset.block_only()),\n         false,\n@@ -1059,7 +1060,8 @@ pub(crate) fn format_trait(\n             let option = WhereClauseOption::snuggled(&generics_str);\n             let where_clause_str = rewrite_where_clause(\n                 context,\n-                &generics.where_clause,\n+                &generics.where_clause.predicates,\n+                generics.where_clause.span,\n                 context.config.brace_style(),\n                 Shape::legacy(where_budget, offset.block_only()),\n                 where_on_new_line,\n@@ -1178,7 +1180,8 @@ impl<'a> Rewrite for TraitAliasBounds<'a> {\n \n         let where_str = rewrite_where_clause(\n             context,\n-            &self.generics.where_clause,\n+            &self.generics.where_clause.predicates,\n+            self.generics.where_clause.span,\n             context.config.brace_style(),\n             shape,\n             false,\n@@ -1437,7 +1440,8 @@ fn format_tuple_struct(\n             let option = WhereClauseOption::new(true, WhereClauseSpace::Newline);\n             rewrite_where_clause(\n                 context,\n-                &generics.where_clause,\n+                &generics.where_clause.predicates,\n+                generics.where_clause.span,\n                 context.config.brace_style(),\n                 Shape::legacy(where_budget, offset.block_only()),\n                 false,\n@@ -1503,6 +1507,8 @@ struct TyAliasRewriteInfo<'c, 'g>(\n     &'c RewriteContext<'c>,\n     Indent,\n     &'g ast::Generics,\n+    (ast::TyAliasWhereClause, ast::TyAliasWhereClause),\n+    usize,\n     symbol::Ident,\n     Span,\n );\n@@ -1521,14 +1527,24 @@ pub(crate) fn rewrite_type_alias<'a, 'b>(\n         ref generics,\n         ref bounds,\n         ref ty,\n+        where_clauses,\n+        where_predicates_split,\n     } = *ty_alias_kind;\n     let ty_opt = ty.as_ref();\n     let (ident, vis) = match visitor_kind {\n         Item(i) => (i.ident, &i.vis),\n         AssocTraitItem(i) | AssocImplItem(i) => (i.ident, &i.vis),\n         ForeignItem(i) => (i.ident, &i.vis),\n     };\n-    let rw_info = &TyAliasRewriteInfo(context, indent, generics, ident, span);\n+    let rw_info = &TyAliasRewriteInfo(\n+        context,\n+        indent,\n+        generics,\n+        where_clauses,\n+        where_predicates_split,\n+        ident,\n+        span,\n+    );\n     let op_ty = opaque_ty(ty);\n     // Type Aliases are formatted slightly differently depending on the context\n     // in which they appear, whether they are opaque, and whether they are associated.\n@@ -1564,7 +1580,22 @@ fn rewrite_ty<R: Rewrite>(\n     vis: &ast::Visibility,\n ) -> Option<String> {\n     let mut result = String::with_capacity(128);\n-    let TyAliasRewriteInfo(context, indent, generics, ident, span) = *rw_info;\n+    let TyAliasRewriteInfo(\n+        context,\n+        indent,\n+        generics,\n+        where_clauses,\n+        where_predicates_split,\n+        ident,\n+        span,\n+    ) = *rw_info;\n+    let (before_where_predicates, after_where_predicates) = generics\n+        .where_clause\n+        .predicates\n+        .split_at(where_predicates_split);\n+    if !after_where_predicates.is_empty() {\n+        return None;\n+    }\n     result.push_str(&format!(\"{}type \", format_visibility(context, vis)));\n     let ident_str = rewrite_ident(context, ident);\n \n@@ -1595,7 +1626,8 @@ fn rewrite_ty<R: Rewrite>(\n     }\n     let where_clause_str = rewrite_where_clause(\n         context,\n-        &generics.where_clause,\n+        before_where_predicates,\n+        where_clauses.0.1,\n         context.config.brace_style(),\n         Shape::legacy(where_budget, indent),\n         false,\n@@ -1609,7 +1641,7 @@ fn rewrite_ty<R: Rewrite>(\n     if let Some(ty) = rhs {\n         // If there's a where clause, add a newline before the assignment. Otherwise just add a\n         // space.\n-        let has_where = !generics.where_clause.predicates.is_empty();\n+        let has_where = !before_where_predicates.is_empty();\n         if has_where {\n             result.push_str(&indent.to_string_with_newline(context.config));\n         } else {\n@@ -1619,7 +1651,7 @@ fn rewrite_ty<R: Rewrite>(\n         let comment_span = context\n             .snippet_provider\n             .opt_span_before(span, \"=\")\n-            .map(|op_lo| mk_sp(generics.where_clause.span.hi(), op_lo));\n+            .map(|op_lo| mk_sp(where_clauses.0.1.hi(), op_lo));\n \n         let lhs = match comment_span {\n             Some(comment_span)\n@@ -2176,7 +2208,7 @@ fn rewrite_fn_base(\n     let generics_str = rewrite_generics(\n         context,\n         rewrite_ident(context, ident),\n-        fn_sig.generics,\n+        &fn_sig.generics,\n         shape,\n     )?;\n     result.push_str(&generics_str);\n@@ -2416,7 +2448,8 @@ fn rewrite_fn_base(\n     }\n     let where_clause_str = rewrite_where_clause(\n         context,\n-        where_clause,\n+        &where_clause.predicates,\n+        where_clause.span,\n         context.config.brace_style(),\n         Shape::indented(indent, context.config),\n         true,\n@@ -2692,7 +2725,8 @@ fn generics_shape_from_config(config: &Config, shape: Shape, offset: usize) -> O\n \n fn rewrite_where_clause_rfc_style(\n     context: &RewriteContext<'_>,\n-    where_clause: &ast::WhereClause,\n+    predicates: &[ast::WherePredicate],\n+    where_span: Span,\n     shape: Shape,\n     terminator: &str,\n     span_end: Option<BytePos>,\n@@ -2701,7 +2735,8 @@ fn rewrite_where_clause_rfc_style(\n ) -> Option<String> {\n     let (where_keyword, allow_single_line) = rewrite_where_keyword(\n         context,\n-        where_clause,\n+        predicates,\n+        where_span,\n         shape,\n         span_end_before_where,\n         where_clause_option,\n@@ -2714,12 +2749,12 @@ fn rewrite_where_clause_rfc_style(\n         .block_left(context.config.tab_spaces())?\n         .sub_width(1)?;\n     let force_single_line = context.config.where_single_line()\n-        && where_clause.predicates.len() == 1\n+        && predicates.len() == 1\n         && !where_clause_option.veto_single_line;\n \n     let preds_str = rewrite_bounds_on_where_clause(\n         context,\n-        where_clause,\n+        predicates,\n         clause_shape,\n         terminator,\n         span_end,\n@@ -2743,7 +2778,8 @@ fn rewrite_where_clause_rfc_style(\n /// Rewrite `where` and comment around it.\n fn rewrite_where_keyword(\n     context: &RewriteContext<'_>,\n-    where_clause: &ast::WhereClause,\n+    predicates: &[ast::WherePredicate],\n+    where_span: Span,\n     shape: Shape,\n     span_end_before_where: BytePos,\n     where_clause_option: WhereClauseOption,\n@@ -2763,7 +2799,7 @@ fn rewrite_where_keyword(\n     };\n \n     let (span_before, span_after) =\n-        missing_span_before_after_where(span_end_before_where, where_clause);\n+        missing_span_before_after_where(span_end_before_where, predicates, where_span);\n     let (comment_before, comment_after) =\n         rewrite_comments_before_after_where(context, span_before, span_after, shape)?;\n \n@@ -2789,22 +2825,22 @@ fn rewrite_where_keyword(\n /// Rewrite bounds on a where clause.\n fn rewrite_bounds_on_where_clause(\n     context: &RewriteContext<'_>,\n-    where_clause: &ast::WhereClause,\n+    predicates: &[ast::WherePredicate],\n     shape: Shape,\n     terminator: &str,\n     span_end: Option<BytePos>,\n     where_clause_option: WhereClauseOption,\n     force_single_line: bool,\n ) -> Option<String> {\n-    let span_start = where_clause.predicates[0].span().lo();\n+    let span_start = predicates[0].span().lo();\n     // If we don't have the start of the next span, then use the end of the\n     // predicates, but that means we miss comments.\n-    let len = where_clause.predicates.len();\n-    let end_of_preds = where_clause.predicates[len - 1].span().hi();\n+    let len = predicates.len();\n+    let end_of_preds = predicates[len - 1].span().hi();\n     let span_end = span_end.unwrap_or(end_of_preds);\n     let items = itemize_list(\n         context.snippet_provider,\n-        where_clause.predicates.iter(),\n+        predicates.iter(),\n         terminator,\n         \",\",\n         |pred| pred.span().lo(),\n@@ -2837,7 +2873,8 @@ fn rewrite_bounds_on_where_clause(\n \n fn rewrite_where_clause(\n     context: &RewriteContext<'_>,\n-    where_clause: &ast::WhereClause,\n+    predicates: &[ast::WherePredicate],\n+    where_span: Span,\n     brace_style: BraceStyle,\n     shape: Shape,\n     on_new_line: bool,\n@@ -2846,14 +2883,15 @@ fn rewrite_where_clause(\n     span_end_before_where: BytePos,\n     where_clause_option: WhereClauseOption,\n ) -> Option<String> {\n-    if where_clause.predicates.is_empty() {\n+    if predicates.is_empty() {\n         return Some(String::new());\n     }\n \n     if context.config.indent_style() == IndentStyle::Block {\n         return rewrite_where_clause_rfc_style(\n             context,\n-            where_clause,\n+            predicates,\n+            where_span,\n             shape,\n             terminator,\n             span_end,\n@@ -2873,15 +2911,15 @@ fn rewrite_where_clause(\n     // be out by a char or two.\n \n     let budget = context.config.max_width() - offset.width();\n-    let span_start = where_clause.predicates[0].span().lo();\n+    let span_start = predicates[0].span().lo();\n     // If we don't have the start of the next span, then use the end of the\n     // predicates, but that means we miss comments.\n-    let len = where_clause.predicates.len();\n-    let end_of_preds = where_clause.predicates[len - 1].span().hi();\n+    let len = predicates.len();\n+    let end_of_preds = predicates[len - 1].span().hi();\n     let span_end = span_end.unwrap_or(end_of_preds);\n     let items = itemize_list(\n         context.snippet_provider,\n-        where_clause.predicates.iter(),\n+        predicates.iter(),\n         terminator,\n         \",\",\n         |pred| pred.span().lo(),\n@@ -2936,12 +2974,13 @@ fn rewrite_where_clause(\n \n fn missing_span_before_after_where(\n     before_item_span_end: BytePos,\n-    where_clause: &ast::WhereClause,\n+    predicates: &[ast::WherePredicate],\n+    where_span: Span,\n ) -> (Span, Span) {\n-    let missing_span_before = mk_sp(before_item_span_end, where_clause.span.lo());\n+    let missing_span_before = mk_sp(before_item_span_end, where_span.lo());\n     // 5 = `where`\n-    let pos_after_where = where_clause.span.lo() + BytePos(5);\n-    let missing_span_after = mk_sp(pos_after_where, where_clause.predicates[0].span().lo());\n+    let pos_after_where = where_span.lo() + BytePos(5);\n+    let missing_span_after = mk_sp(pos_after_where, predicates[0].span().lo());\n     (missing_span_before, missing_span_after)\n }\n \n@@ -3030,7 +3069,8 @@ fn format_generics(\n         }\n         let where_clause_str = rewrite_where_clause(\n             context,\n-            &generics.where_clause,\n+            &generics.where_clause.predicates,\n+            generics.where_clause.span,\n             brace_style,\n             Shape::legacy(budget, offset.block_only()),\n             true,"}]}