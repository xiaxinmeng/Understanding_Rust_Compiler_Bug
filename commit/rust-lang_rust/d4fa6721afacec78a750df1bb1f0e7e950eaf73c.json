{"sha": "d4fa6721afacec78a750df1bb1f0e7e950eaf73c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZmE2NzIxYWZhY2VjNzhhNzUwZGYxYmIxZjBlN2U5NTBlYWY3M2M=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-03-22T13:08:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-03-22T13:08:45Z"}, "message": "Merge #8054\n\n8054: Item movers r=matklad a=ivan770\n\nCloses #6823\r\n\r\nhttps://user-images.githubusercontent.com/14003886/111331579-b4f43480-8679-11eb-9af0-e4dabacc4923.mp4\r\n\r\nImplementation issues:\r\n- [ ] Most of items are non-movable, since _movability_ of any item has to be determined manually. Common ones are movable though\r\n- [x] Cursor should move with the item\n\nCo-authored-by: ivan770 <leshenko.ivan770@gmail.com>", "tree": {"sha": "efabf84f708868484e0dac7893f77ddfba6d9c21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efabf84f708868484e0dac7893f77ddfba6d9c21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4fa6721afacec78a750df1bb1f0e7e950eaf73c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgWJbdCRBK7hj4Ov3rIwAAdHIIAB6sWb+ZGLdCALqATWTFlHtK\naqwkCJRtVHdh2w60Yfxb6Rzq7L7qEr/cnk7AFRGAd5wIPu7XEGM56sOCgLnq8lyX\n064daQTVs7hLU3X78U/JgJf5FbKrqRTNz9xfvwvb6AP5K1rcFiFNa6BuwT+fXr13\njL1naCxRy0bFMEFz2C4bYT3Q9s9zKqM0+x/1611uoEvuW6ngZUHxYLXeRgETpok4\n81+FcSidr6GQnUyc9ASiTQddc1ryrYMgq9m2OhfdA0ZLpNaSM97ZyBv36F2r+vPu\nfzHwbCRJDo5ZKsyTzvdDRTeG18C9E5mbqTFu8l1zonpi3Sjk35HM8t80f+Q3pw0=\n=5/o9\n-----END PGP SIGNATURE-----\n", "payload": "tree efabf84f708868484e0dac7893f77ddfba6d9c21\nparent 3af1885bd2c4d3470d203a216488946ee8572970\nparent d331155f8db056a0f7a406498c96f759f620d2c7\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1616418525 +0000\ncommitter GitHub <noreply@github.com> 1616418525 +0000\n\nMerge #8054\n\n8054: Item movers r=matklad a=ivan770\n\nCloses #6823\r\n\r\nhttps://user-images.githubusercontent.com/14003886/111331579-b4f43480-8679-11eb-9af0-e4dabacc4923.mp4\r\n\r\nImplementation issues:\r\n- [ ] Most of items are non-movable, since _movability_ of any item has to be determined manually. Common ones are movable though\r\n- [x] Cursor should move with the item\n\nCo-authored-by: ivan770 <leshenko.ivan770@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fa6721afacec78a750df1bb1f0e7e950eaf73c", "html_url": "https://github.com/rust-lang/rust/commit/d4fa6721afacec78a750df1bb1f0e7e950eaf73c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3af1885bd2c4d3470d203a216488946ee8572970", "url": "https://api.github.com/repos/rust-lang/rust/commits/3af1885bd2c4d3470d203a216488946ee8572970", "html_url": "https://github.com/rust-lang/rust/commit/3af1885bd2c4d3470d203a216488946ee8572970"}, {"sha": "d331155f8db056a0f7a406498c96f759f620d2c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d331155f8db056a0f7a406498c96f759f620d2c7", "html_url": "https://github.com/rust-lang/rust/commit/d331155f8db056a0f7a406498c96f759f620d2c7"}], "stats": {"total": 782, "additions": 781, "deletions": 1}, "files": [{"sha": "3f73c063222c02300a15e7b37a79a2ba92456ab9", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=d4fa6721afacec78a750df1bb1f0e7e950eaf73c", "patch": "@@ -37,6 +37,7 @@ mod hover;\n mod inlay_hints;\n mod join_lines;\n mod matching_brace;\n+mod move_item;\n mod parent_module;\n mod references;\n mod fn_references;\n@@ -76,6 +77,7 @@ pub use crate::{\n     hover::{HoverAction, HoverConfig, HoverGotoTypeData, HoverResult},\n     inlay_hints::{InlayHint, InlayHintsConfig, InlayKind},\n     markup::Markup,\n+    move_item::Direction,\n     prime_caches::PrimeCachesProgress,\n     references::{rename::RenameError, ReferenceSearchResult},\n     runnables::{Runnable, RunnableKind, TestId},\n@@ -583,6 +585,14 @@ impl Analysis {\n         self.with_db(|db| annotations::resolve_annotation(db, annotation))\n     }\n \n+    pub fn move_item(\n+        &self,\n+        range: FileRange,\n+        direction: Direction,\n+    ) -> Cancelable<Option<TextEdit>> {\n+        self.with_db(|db| move_item::move_item(db, range, direction))\n+    }\n+\n     /// Performs an operation on that may be Canceled.\n     fn with_db<F, T>(&self, f: F) -> Cancelable<T>\n     where"}, {"sha": "48690b0731b497fad3828115e819d55cb11d19ad", "filename": "crates/ide/src/move_item.rs", "status": "added", "additions": 620, "deletions": 0, "changes": 620, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/crates%2Fide%2Fsrc%2Fmove_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/crates%2Fide%2Fsrc%2Fmove_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmove_item.rs?ref=d4fa6721afacec78a750df1bb1f0e7e950eaf73c", "patch": "@@ -0,0 +1,620 @@\n+use std::iter::once;\n+\n+use hir::Semantics;\n+use ide_db::{base_db::FileRange, RootDatabase};\n+use itertools::Itertools;\n+use syntax::{\n+    algo, ast, match_ast, AstNode, NodeOrToken, SyntaxElement, SyntaxKind, SyntaxNode, TextRange,\n+};\n+use text_edit::{TextEdit, TextEditBuilder};\n+\n+pub enum Direction {\n+    Up,\n+    Down,\n+}\n+\n+// Feature: Move Item\n+//\n+// Move item under cursor or selection up and down.\n+//\n+// |===\n+// | Editor  | Action Name\n+//\n+// | VS Code | **Rust Analyzer: Move item up**\n+// | VS Code | **Rust Analyzer: Move item down**\n+// |===\n+pub(crate) fn move_item(\n+    db: &RootDatabase,\n+    range: FileRange,\n+    direction: Direction,\n+) -> Option<TextEdit> {\n+    let sema = Semantics::new(db);\n+    let file = sema.parse(range.file_id);\n+\n+    let item = file.syntax().covering_element(range.range);\n+    find_ancestors(item, direction, range.range)\n+}\n+\n+fn find_ancestors(item: SyntaxElement, direction: Direction, range: TextRange) -> Option<TextEdit> {\n+    let root = match item {\n+        NodeOrToken::Node(node) => node,\n+        NodeOrToken::Token(token) => token.parent()?,\n+    };\n+\n+    let movable = [\n+        SyntaxKind::ARG_LIST,\n+        SyntaxKind::GENERIC_PARAM_LIST,\n+        SyntaxKind::GENERIC_ARG_LIST,\n+        SyntaxKind::VARIANT_LIST,\n+        SyntaxKind::TYPE_BOUND_LIST,\n+        SyntaxKind::MATCH_ARM,\n+        SyntaxKind::PARAM,\n+        SyntaxKind::LET_STMT,\n+        SyntaxKind::EXPR_STMT,\n+        SyntaxKind::MATCH_EXPR,\n+        SyntaxKind::MACRO_CALL,\n+        SyntaxKind::TYPE_ALIAS,\n+        SyntaxKind::TRAIT,\n+        SyntaxKind::IMPL,\n+        SyntaxKind::MACRO_DEF,\n+        SyntaxKind::STRUCT,\n+        SyntaxKind::UNION,\n+        SyntaxKind::ENUM,\n+        SyntaxKind::FN,\n+        SyntaxKind::MODULE,\n+        SyntaxKind::USE,\n+        SyntaxKind::STATIC,\n+        SyntaxKind::CONST,\n+        SyntaxKind::MACRO_RULES,\n+    ];\n+\n+    let ancestor = once(root.clone())\n+        .chain(root.ancestors())\n+        .find(|ancestor| movable.contains(&ancestor.kind()))?;\n+\n+    move_in_direction(&ancestor, direction, range)\n+}\n+\n+fn move_in_direction(\n+    node: &SyntaxNode,\n+    direction: Direction,\n+    range: TextRange,\n+) -> Option<TextEdit> {\n+    match_ast! {\n+        match node {\n+            ast::ArgList(it) => swap_sibling_in_list(it.args(), range, direction),\n+            ast::GenericParamList(it) => swap_sibling_in_list(it.generic_params(), range, direction),\n+            ast::GenericArgList(it) => swap_sibling_in_list(it.generic_args(), range, direction),\n+            ast::VariantList(it) => swap_sibling_in_list(it.variants(), range, direction),\n+            ast::TypeBoundList(it) => swap_sibling_in_list(it.bounds(), range, direction),\n+            _ => Some(replace_nodes(node, &match direction {\n+                Direction::Up => node.prev_sibling(),\n+                Direction::Down => node.next_sibling(),\n+            }?))\n+        }\n+    }\n+}\n+\n+fn swap_sibling_in_list<A: AstNode + Clone, I: Iterator<Item = A>>(\n+    list: I,\n+    range: TextRange,\n+    direction: Direction,\n+) -> Option<TextEdit> {\n+    let (l, r) = list\n+        .tuple_windows()\n+        .filter(|(l, r)| match direction {\n+            Direction::Up => r.syntax().text_range().contains_range(range),\n+            Direction::Down => l.syntax().text_range().contains_range(range),\n+        })\n+        .next()?;\n+\n+    Some(replace_nodes(l.syntax(), r.syntax()))\n+}\n+\n+fn replace_nodes(first: &SyntaxNode, second: &SyntaxNode) -> TextEdit {\n+    let mut edit = TextEditBuilder::default();\n+\n+    algo::diff(first, second).into_text_edit(&mut edit);\n+    algo::diff(second, first).into_text_edit(&mut edit);\n+\n+    edit.finish()\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use crate::fixture;\n+    use expect_test::{expect, Expect};\n+\n+    use crate::Direction;\n+\n+    fn check(ra_fixture: &str, expect: Expect, direction: Direction) {\n+        let (analysis, range) = fixture::range(ra_fixture);\n+        let edit = analysis.move_item(range, direction).unwrap().unwrap_or_default();\n+        let mut file = analysis.file_text(range.file_id).unwrap().to_string();\n+        edit.apply(&mut file);\n+        expect.assert_eq(&file);\n+    }\n+\n+    #[test]\n+    fn test_moves_match_arm_up() {\n+        check(\n+            r#\"\n+fn main() {\n+    match true {\n+        true => {\n+            println!(\"Hello, world\");\n+        },\n+        false =>$0$0 {\n+            println!(\"Test\");\n+        }\n+    };\n+}\n+            \"#,\n+            expect![[r#\"\n+fn main() {\n+    match true {\n+        false => {\n+            println!(\"Test\");\n+        },\n+        true => {\n+            println!(\"Hello, world\");\n+        }\n+    };\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_moves_match_arm_down() {\n+        check(\n+            r#\"\n+fn main() {\n+    match true {\n+        true =>$0$0 {\n+            println!(\"Hello, world\");\n+        },\n+        false => {\n+            println!(\"Test\");\n+        }\n+    };\n+}\n+            \"#,\n+            expect![[r#\"\n+fn main() {\n+    match true {\n+        false => {\n+            println!(\"Test\");\n+        },\n+        true => {\n+            println!(\"Hello, world\");\n+        }\n+    };\n+}\n+            \"#]],\n+            Direction::Down,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_nowhere_to_move() {\n+        check(\n+            r#\"\n+fn main() {\n+    match true {\n+        true =>$0$0 {\n+            println!(\"Hello, world\");\n+        },\n+        false => {\n+            println!(\"Test\");\n+        }\n+    };\n+}\n+            \"#,\n+            expect![[r#\"\n+fn main() {\n+    match true {\n+        true => {\n+            println!(\"Hello, world\");\n+        },\n+        false => {\n+            println!(\"Test\");\n+        }\n+    };\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_moves_let_stmt_up() {\n+        check(\n+            r#\"\n+fn main() {\n+    let test = 123;\n+    let test2$0$0 = 456;\n+}\n+            \"#,\n+            expect![[r#\"\n+fn main() {\n+    let test2 = 456;\n+    let test = 123;\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_moves_expr_up() {\n+        check(\n+            r#\"\n+fn main() {\n+    println!(\"Hello, world\");\n+    println!(\"All I want to say is...\");$0$0\n+}\n+            \"#,\n+            expect![[r#\"\n+fn main() {\n+    println!(\"All I want to say is...\");\n+    println!(\"Hello, world\");\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_nowhere_to_move_stmt() {\n+        check(\n+            r#\"\n+fn main() {\n+    println!(\"All I want to say is...\");$0$0\n+    println!(\"Hello, world\");\n+}\n+            \"#,\n+            expect![[r#\"\n+fn main() {\n+    println!(\"All I want to say is...\");\n+    println!(\"Hello, world\");\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_move_item() {\n+        check(\n+            r#\"\n+fn main() {}\n+\n+fn foo() {}$0$0\n+            \"#,\n+            expect![[r#\"\n+fn foo() {}\n+\n+fn main() {}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_move_impl_up() {\n+        check(\n+            r#\"\n+struct Yay;\n+\n+trait Wow {}\n+\n+impl Wow for Yay $0$0{}\n+            \"#,\n+            expect![[r#\"\n+struct Yay;\n+\n+impl Wow for Yay {}\n+\n+trait Wow {}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_move_use_up() {\n+        check(\n+            r#\"\n+use std::vec::Vec;\n+use std::collections::HashMap$0$0;\n+            \"#,\n+            expect![[r#\"\n+use std::collections::HashMap;\n+use std::vec::Vec;\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_moves_match_expr_up() {\n+        check(\n+            r#\"\n+fn main() {\n+    let test = 123;\n+\n+    $0match test {\n+        456 => {},\n+        _ => {}\n+    };$0\n+}\n+            \"#,\n+            expect![[r#\"\n+fn main() {\n+    match test {\n+        456 => {},\n+        _ => {}\n+    };\n+\n+    let test = 123;\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_moves_param_up() {\n+        check(\n+            r#\"\n+fn test(one: i32, two$0$0: u32) {}\n+\n+fn main() {\n+    test(123, 456);\n+}\n+            \"#,\n+            expect![[r#\"\n+fn test(two: u32, one: i32) {}\n+\n+fn main() {\n+    test(123, 456);\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_moves_arg_up() {\n+        check(\n+            r#\"\n+fn test(one: i32, two: u32) {}\n+\n+fn main() {\n+    test(123, 456$0$0);\n+}\n+            \"#,\n+            expect![[r#\"\n+fn test(one: i32, two: u32) {}\n+\n+fn main() {\n+    test(456, 123);\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_moves_arg_down() {\n+        check(\n+            r#\"\n+fn test(one: i32, two: u32) {}\n+\n+fn main() {\n+    test(123$0$0, 456);\n+}\n+            \"#,\n+            expect![[r#\"\n+fn test(one: i32, two: u32) {}\n+\n+fn main() {\n+    test(456, 123);\n+}\n+            \"#]],\n+            Direction::Down,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_nowhere_to_move_arg() {\n+        check(\n+            r#\"\n+fn test(one: i32, two: u32) {}\n+\n+fn main() {\n+    test(123$0$0, 456);\n+}\n+            \"#,\n+            expect![[r#\"\n+fn test(one: i32, two: u32) {}\n+\n+fn main() {\n+    test(123, 456);\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_moves_generic_param_up() {\n+        check(\n+            r#\"\n+struct Test<A, B$0$0>(A, B);\n+\n+fn main() {}\n+            \"#,\n+            expect![[r#\"\n+struct Test<B, A>(A, B);\n+\n+fn main() {}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_moves_generic_arg_up() {\n+        check(\n+            r#\"\n+struct Test<A, B>(A, B);\n+\n+fn main() {\n+    let t = Test::<i32, &str$0$0>(123, \"yay\");\n+}\n+            \"#,\n+            expect![[r#\"\n+struct Test<A, B>(A, B);\n+\n+fn main() {\n+    let t = Test::<&str, i32>(123, \"yay\");\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_moves_variant_up() {\n+        check(\n+            r#\"\n+enum Hello {\n+    One,\n+    Two$0$0\n+}\n+\n+fn main() {}\n+            \"#,\n+            expect![[r#\"\n+enum Hello {\n+    Two,\n+    One\n+}\n+\n+fn main() {}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_moves_type_bound_up() {\n+        check(\n+            r#\"\n+trait One {}\n+\n+trait Two {}\n+\n+fn test<T: One + Two$0$0>(t: T) {}\n+\n+fn main() {}\n+            \"#,\n+            expect![[r#\"\n+trait One {}\n+\n+trait Two {}\n+\n+fn test<T: Two + One>(t: T) {}\n+\n+fn main() {}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_prioritizes_trait_items() {\n+        check(\n+            r#\"\n+struct Test;\n+\n+trait Yay {\n+    type One;\n+\n+    type Two;\n+\n+    fn inner();\n+}\n+\n+impl Yay for Test {\n+    type One = i32;\n+\n+    type Two = u32;\n+\n+    fn inner() {$0$0\n+        println!(\"Mmmm\");\n+    }\n+}\n+            \"#,\n+            expect![[r#\"\n+struct Test;\n+\n+trait Yay {\n+    type One;\n+\n+    type Two;\n+\n+    fn inner();\n+}\n+\n+impl Yay for Test {\n+    type One = i32;\n+\n+    fn inner() {\n+        println!(\"Mmmm\");\n+    }\n+\n+    type Two = u32;\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn test_weird_nesting() {\n+        check(\n+            r#\"\n+fn test() {\n+    mod hello {\n+        fn inner() {}\n+    }\n+\n+    mod hi {$0$0\n+        fn inner() {}\n+    }\n+}\n+            \"#,\n+            expect![[r#\"\n+fn test() {\n+    mod hi {\n+        fn inner() {}\n+    }\n+\n+    mod hello {\n+        fn inner() {}\n+    }\n+}\n+            \"#]],\n+            Direction::Up,\n+        );\n+    }\n+\n+    #[test]\n+    fn handles_empty_file() {\n+        check(r#\"$0$0\"#, expect![[r#\"\"#]], Direction::Up);\n+    }\n+}"}, {"sha": "85e67554c215f071b5041f75c1afcd8fdbf5fe94", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=d4fa6721afacec78a750df1bb1f0e7e950eaf73c", "patch": "@@ -1427,6 +1427,25 @@ pub(crate) fn handle_open_cargo_toml(\n     Ok(Some(res))\n }\n \n+pub(crate) fn handle_move_item(\n+    snap: GlobalStateSnapshot,\n+    params: lsp_ext::MoveItemParams,\n+) -> Result<Option<lsp_types::TextDocumentEdit>> {\n+    let _p = profile::span(\"handle_move_item\");\n+    let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n+    let range = from_proto::file_range(&snap, params.text_document, params.range)?;\n+\n+    let direction = match params.direction {\n+        lsp_ext::MoveItemDirection::Up => ide::Direction::Up,\n+        lsp_ext::MoveItemDirection::Down => ide::Direction::Down,\n+    };\n+\n+    match snap.analysis.move_item(range, direction)? {\n+        Some(text_edit) => Ok(Some(to_proto::text_document_edit(&snap, file_id, text_edit)?)),\n+        None => Ok(None),\n+    }\n+}\n+\n fn to_command_link(command: lsp_types::Command, tooltip: String) -> lsp_ext::CommandLink {\n     lsp_ext::CommandLink { tooltip: Some(tooltip), command }\n }"}, {"sha": "0e1fec2095c42a16efc239131a20e4b64f200b93", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=d4fa6721afacec78a750df1bb1f0e7e950eaf73c", "patch": "@@ -402,3 +402,25 @@ pub(crate) enum CodeLensResolveData {\n pub fn supports_utf8(caps: &lsp_types::ClientCapabilities) -> bool {\n     caps.offset_encoding.as_deref().unwrap_or_default().iter().any(|it| it == \"utf-8\")\n }\n+\n+pub enum MoveItem {}\n+\n+impl Request for MoveItem {\n+    type Params = MoveItemParams;\n+    type Result = Option<lsp_types::TextDocumentEdit>;\n+    const METHOD: &'static str = \"experimental/moveItem\";\n+}\n+\n+#[derive(Serialize, Deserialize, Debug)]\n+#[serde(rename_all = \"camelCase\")]\n+pub struct MoveItemParams {\n+    pub direction: MoveItemDirection,\n+    pub text_document: TextDocumentIdentifier,\n+    pub range: Range,\n+}\n+\n+#[derive(Serialize, Deserialize, Debug)]\n+pub enum MoveItemDirection {\n+    Up,\n+    Down,\n+}"}, {"sha": "e88f16cc11d1db1110fcd0835c1ef05d1d974b6d", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=d4fa6721afacec78a750df1bb1f0e7e950eaf73c", "patch": "@@ -504,6 +504,7 @@ impl GlobalState {\n             .on::<lsp_ext::HoverRequest>(handlers::handle_hover)\n             .on::<lsp_ext::ExternalDocs>(handlers::handle_open_docs)\n             .on::<lsp_ext::OpenCargoToml>(handlers::handle_open_cargo_toml)\n+            .on::<lsp_ext::MoveItem>(handlers::handle_move_item)\n             .on::<lsp_types::request::OnTypeFormatting>(handlers::handle_on_type_formatting)\n             .on::<lsp_types::request::DocumentSymbolRequest>(handlers::handle_document_symbol)\n             .on::<lsp_types::request::WorkspaceSymbol>(handlers::handle_workspace_symbol)"}, {"sha": "25169005fac4d30b1dec579ef6eab606aab2768b", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=d4fa6721afacec78a750df1bb1f0e7e950eaf73c", "patch": "@@ -658,6 +658,18 @@ pub(crate) fn goto_definition_response(\n     }\n }\n \n+pub(crate) fn text_document_edit(\n+    snap: &GlobalStateSnapshot,\n+    file_id: FileId,\n+    edit: TextEdit,\n+) -> Result<lsp_types::TextDocumentEdit> {\n+    let text_document = optional_versioned_text_document_identifier(snap, file_id);\n+    let line_index = snap.file_line_index(file_id)?;\n+    let edits =\n+        edit.into_iter().map(|it| lsp_types::OneOf::Left(text_edit(&line_index, it))).collect();\n+    Ok(lsp_types::TextDocumentEdit { text_document, edits })\n+}\n+\n pub(crate) fn snippet_text_document_edit(\n     snap: &GlobalStateSnapshot,\n     is_snippet: bool,"}, {"sha": "8a6f9f06e7dddaa460095e0099024c8c231d8cef", "filename": "docs/dev/lsp-extensions.md", "status": "modified", "additions": 27, "deletions": 1, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/docs%2Fdev%2Flsp-extensions.md", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/docs%2Fdev%2Flsp-extensions.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Flsp-extensions.md?ref=d4fa6721afacec78a750df1bb1f0e7e950eaf73c", "patch": "@@ -1,5 +1,5 @@\n <!---\n-lsp_ext.rs hash: 4dfa8d7035f4aee7\n+lsp_ext.rs hash: e8a7502bd2b2c2f5\n \n If you need to change the above hash to make the test pass, please check if you\n need to adjust this doc as well and ping this  issue:\n@@ -595,3 +595,29 @@ interface TestInfo {\n     runnable: Runnable;\n }\n ```\n+\n+## Hover Actions\n+\n+**Issue:** https://github.com/rust-analyzer/rust-analyzer/issues/6823\n+\n+This request is sent from client to server to move item under cursor or selection in some direction.\n+\n+**Method:** `experimental/moveItemUp`\n+**Method:** `experimental/moveItemDown`\n+\n+**Request:** `MoveItemParams`\n+\n+**Response:** `TextDocumentEdit | null`\n+\n+```typescript\n+export interface MoveItemParams {\n+    textDocument: lc.TextDocumentIdentifier,\n+    range: lc.Range,\n+    direction: Direction\n+}\n+\n+export const enum Direction {\n+    Up = \"Up\",\n+    Down = \"Down\"\n+}\n+```"}, {"sha": "faec45276caea2521600c20777e456b596687205", "filename": "editors/code/package.json", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=d4fa6721afacec78a750df1bb1f0e7e950eaf73c", "patch": "@@ -208,6 +208,16 @@\n                 \"command\": \"rust-analyzer.peekTests\",\n                 \"title\": \"Peek related tests\",\n                 \"category\": \"Rust Analyzer\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.moveItemUp\",\n+                \"title\": \"Move item up\",\n+                \"category\": \"Rust Analyzer\"\n+            },\n+            {\n+                \"command\": \"rust-analyzer.moveItemDown\",\n+                \"title\": \"Move item down\",\n+                \"category\": \"Rust Analyzer\"\n             }\n         ],\n         \"keybindings\": ["}, {"sha": "1a0805bd3782f288ef5978991b798f7e3683aeb7", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=d4fa6721afacec78a750df1bb1f0e7e950eaf73c", "patch": "@@ -134,6 +134,51 @@ export function joinLines(ctx: Ctx): Cmd {\n     };\n }\n \n+export function moveItemUp(ctx: Ctx): Cmd {\n+    return moveItem(ctx, ra.Direction.Up);\n+}\n+\n+export function moveItemDown(ctx: Ctx): Cmd {\n+    return moveItem(ctx, ra.Direction.Down);\n+}\n+\n+export function moveItem(ctx: Ctx, direction: ra.Direction): Cmd {\n+    return async () => {\n+        const editor = ctx.activeRustEditor;\n+        const client = ctx.client;\n+        if (!editor || !client) return;\n+\n+        const edit = await client.sendRequest(ra.moveItem, {\n+            range: client.code2ProtocolConverter.asRange(editor.selection),\n+            textDocument: ctx.client.code2ProtocolConverter.asTextDocumentIdentifier(editor.document),\n+            direction\n+        });\n+\n+        if (!edit) return;\n+\n+        let cursor: vscode.Position | null = null;\n+\n+        await editor.edit((builder) => {\n+            client.protocol2CodeConverter.asTextEdits(edit.edits).forEach((edit: any) => {\n+                builder.replace(edit.range, edit.newText);\n+\n+                if (direction === ra.Direction.Up) {\n+                    if (!cursor || edit.range.end.isBeforeOrEqual(cursor)) {\n+                        cursor = edit.range.end;\n+                    }\n+                } else {\n+                    if (!cursor || edit.range.end.isAfterOrEqual(cursor)) {\n+                        cursor = edit.range.end;\n+                    }\n+                }\n+            });\n+        }).then(() => {\n+            const newPosition = cursor ?? editor.selection.start;\n+            editor.selection = new vscode.Selection(newPosition, newPosition);\n+        });\n+    };\n+}\n+\n export function onEnter(ctx: Ctx): Cmd {\n     async function handleKeypress() {\n         const editor = ctx.activeRustEditor;"}, {"sha": "00e128b8c3d168103a5748d31475415d83c1620f", "filename": "editors/code/src/lsp_ext.ts", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/editors%2Fcode%2Fsrc%2Flsp_ext.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Flsp_ext.ts?ref=d4fa6721afacec78a750df1bb1f0e7e950eaf73c", "patch": "@@ -127,3 +127,16 @@ export const openCargoToml = new lc.RequestType<OpenCargoTomlParams, lc.Location\n export interface OpenCargoTomlParams {\n     textDocument: lc.TextDocumentIdentifier;\n }\n+\n+export const moveItem = new lc.RequestType<MoveItemParams, lc.TextDocumentEdit | void, void>(\"experimental/moveItem\");\n+\n+export interface MoveItemParams {\n+    textDocument: lc.TextDocumentIdentifier;\n+    range: lc.Range;\n+    direction: Direction;\n+}\n+\n+export const enum Direction {\n+    Up = \"Up\",\n+    Down = \"Down\"\n+}"}, {"sha": "643fb643f3a6405a562c13ff74d7261a6613e562", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/d4fa6721afacec78a750df1bb1f0e7e950eaf73c/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=d4fa6721afacec78a750df1bb1f0e7e950eaf73c", "patch": "@@ -114,6 +114,8 @@ async function tryActivate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('openDocs', commands.openDocs);\n     ctx.registerCommand('openCargoToml', commands.openCargoToml);\n     ctx.registerCommand('peekTests', commands.peekTests);\n+    ctx.registerCommand('moveItemUp', commands.moveItemUp);\n+    ctx.registerCommand('moveItemDown', commands.moveItemDown);\n \n     defaultOnEnter.dispose();\n     ctx.registerCommand('onEnter', commands.onEnter);"}]}