{"sha": "0bb77bdb5423402b583372abf2f097be6b4e46bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiYjc3YmRiNTQyMzQwMmI1ODMzNzJhYmYyZjA5N2JlNmI0ZTQ2YmM=", "commit": {"author": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2017-11-12T11:40:56Z"}, "committer": {"name": "Basile Desloges", "email": "basile.desloges@gmail.com", "date": "2017-11-13T20:53:09Z"}, "message": "mir-borrowck: Move `is_static_mut()` to `ty/utils.rs`", "tree": {"sha": "b89e6c807b52f9ff480fc4fa74c6a76b4808f8ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b89e6c807b52f9ff480fc4fa74c6a76b4808f8ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bb77bdb5423402b583372abf2f097be6b4e46bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bb77bdb5423402b583372abf2f097be6b4e46bc", "html_url": "https://github.com/rust-lang/rust/commit/0bb77bdb5423402b583372abf2f097be6b4e46bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bb77bdb5423402b583372abf2f097be6b4e46bc/comments", "author": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "zilbuz", "id": 434964, "node_id": "MDQ6VXNlcjQzNDk2NA==", "avatar_url": "https://avatars.githubusercontent.com/u/434964?v=4", "gravatar_id": "", "url": "https://api.github.com/users/zilbuz", "html_url": "https://github.com/zilbuz", "followers_url": "https://api.github.com/users/zilbuz/followers", "following_url": "https://api.github.com/users/zilbuz/following{/other_user}", "gists_url": "https://api.github.com/users/zilbuz/gists{/gist_id}", "starred_url": "https://api.github.com/users/zilbuz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/zilbuz/subscriptions", "organizations_url": "https://api.github.com/users/zilbuz/orgs", "repos_url": "https://api.github.com/users/zilbuz/repos", "events_url": "https://api.github.com/users/zilbuz/events{/privacy}", "received_events_url": "https://api.github.com/users/zilbuz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8efbf7a4f0e44a490d3379b102b7b13ee0152ab9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8efbf7a4f0e44a490d3379b102b7b13ee0152ab9", "html_url": "https://github.com/rust-lang/rust/commit/8efbf7a4f0e44a490d3379b102b7b13ee0152ab9"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "aa07a6b070e9e9ccd6dfde1a22cb784d8c3f551b", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0bb77bdb5423402b583372abf2f097be6b4e46bc/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb77bdb5423402b583372abf2f097be6b4e46bc/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=0bb77bdb5423402b583372abf2f097be6b4e46bc", "patch": "@@ -10,8 +10,9 @@\n \n //! misc. type-system utilities too small to deserve their own file\n \n+use hir::def::Def;\n use hir::def_id::{DefId, LOCAL_CRATE};\n-use hir::map::DefPathData;\n+use hir::map::{DefPathData, Node};\n use hir;\n use ich::NodeIdHashingMode;\n use middle::const_val::ConstVal;\n@@ -648,6 +649,26 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             _ => bug!(),\n         }\n     }\n+\n+    /// Check if the node pointed to by def_id is a mutable static item\n+    pub fn is_static_mut(&self, def_id: DefId) -> bool {\n+        if let Some(node) = self.hir.get_if_local(def_id) {\n+            match node {\n+                Node::NodeItem(&hir::Item {\n+                    node: hir::ItemStatic(_, hir::MutMutable, _), ..\n+                }) => true,\n+                Node::NodeForeignItem(&hir::ForeignItem {\n+                    node: hir::ForeignItemStatic(_, mutbl), ..\n+                }) => mutbl,\n+                _ => false\n+            }\n+        } else {\n+            match self.describe_def(def_id) {\n+                Some(Def::Static(_, mutbl)) => mutbl,\n+                _ => false\n+            }\n+        }\n+    }\n }\n \n pub struct TypeIdHasher<'a, 'gcx: 'a+'tcx, 'tcx: 'a, W> {"}, {"sha": "cbf1b0b089917106313101cb3682fef5ba481072", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/0bb77bdb5423402b583372abf2f097be6b4e46bc/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bb77bdb5423402b583372abf2f097be6b4e46bc/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=0bb77bdb5423402b583372abf2f097be6b4e46bc", "patch": "@@ -14,9 +14,8 @@ use rustc_data_structures::indexed_vec::IndexVec;\n use rustc::ty::maps::Providers;\n use rustc::ty::{self, TyCtxt};\n use rustc::hir;\n-use rustc::hir::def::Def;\n use rustc::hir::def_id::DefId;\n-use rustc::hir::map::{DefPathData, Node};\n+use rustc::hir::map::DefPathData;\n use rustc::lint::builtin::{SAFE_EXTERN_STATICS, UNUSED_UNSAFE};\n use rustc::mir::*;\n use rustc::mir::visit::{LvalueContext, Visitor};\n@@ -189,7 +188,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 // locals are safe\n             }\n             &Lvalue::Static(box Static { def_id, ty: _ }) => {\n-                if self.is_static_mut(def_id) {\n+                if self.tcx.is_static_mut(def_id) {\n                     self.require_unsafe(\"use of mutable static\");\n                 } else if self.tcx.is_foreign_item(def_id) {\n                     let source_info = self.source_info;\n@@ -208,24 +207,6 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n-    fn is_static_mut(&self, def_id: DefId) -> bool {\n-        if let Some(node) = self.tcx.hir.get_if_local(def_id) {\n-            match node {\n-                Node::NodeItem(&hir::Item {\n-                    node: hir::ItemStatic(_, hir::MutMutable, _), ..\n-                }) => true,\n-                Node::NodeForeignItem(&hir::ForeignItem {\n-                    node: hir::ForeignItemStatic(_, mutbl), ..\n-                }) => mutbl,\n-                _ => false\n-            }\n-        } else {\n-            match self.tcx.describe_def(def_id) {\n-                Some(Def::Static(_, mutbl)) => mutbl,\n-                _ => false\n-            }\n-        }\n-    }\n     fn require_unsafe(&mut self,\n                       description: &'static str)\n     {"}]}