{"sha": "f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "node_id": "C_kwDOAAsO6NoAKGY0NTUwYTZlZGZjYmIxZTI4NGQ5ZWIxZDA5NWYwMzQ4NDhlMWVlMDE", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-08-24T23:50:54Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-08-24T23:50:54Z"}, "message": "Rollup merge of #99332 - jyn514:stabilize-label-break-value, r=petrochenkov\n\nStabilize `#![feature(label_break_value)]`\n\nSee the stabilization report in https://github.com/rust-lang/rust/issues/48594#issuecomment-1186213313.", "tree": {"sha": "2715fec50cb3de2653095945c74926093171573b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2715fec50cb3de2653095945c74926093171573b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjBrleCRBK7hj4Ov3rIwAAye4IAKpH5wVmH7WgtofHaab6/gU7\nhwvxY8oEH5JELxRxjTUaIE1octZDa8XxOIQ6+LSZtvRVhuQQRyzGw622IcnPciKw\nhDCT+IsaHRqT0VsbLA6DG6C25E0Wvf1/pKeQ8EXAqD5yF3kVeg1OVEM/tamvvNtv\n8PNMPgoQyBHD+5/B6SnPDwTU0+1nrS3Lt8rXVd41/OLy/WwJtd0aK15kpLxJ/HX7\nQilHTJMZEICDBt2Umpwm+DmGa6KsYLrm05hXjhDPj9INpbGLrBia2h+y5pztQ7xk\nvAXN4gAA26GbfFyJx1I7MxDYLaTDpglUTz85Fr3M95FSMfyf5MVEImcn7IcuBBs=\n=kTbW\n-----END PGP SIGNATURE-----\n", "payload": "tree 2715fec50cb3de2653095945c74926093171573b\nparent addacb5878b9970ebc1665768a05cb601e7aea15\nparent 31e39446ec2f251efbcaf9eb22c80e93021f9bbc\nauthor Yuki Okushi <jtitor@2k36.org> 1661385054 +0900\ncommitter GitHub <noreply@github.com> 1661385054 +0900\n\nRollup merge of #99332 - jyn514:stabilize-label-break-value, r=petrochenkov\n\nStabilize `#![feature(label_break_value)]`\n\nSee the stabilization report in https://github.com/rust-lang/rust/issues/48594#issuecomment-1186213313.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "html_url": "https://github.com/rust-lang/rust/commit/f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "addacb5878b9970ebc1665768a05cb601e7aea15", "url": "https://api.github.com/repos/rust-lang/rust/commits/addacb5878b9970ebc1665768a05cb601e7aea15", "html_url": "https://github.com/rust-lang/rust/commit/addacb5878b9970ebc1665768a05cb601e7aea15"}, {"sha": "31e39446ec2f251efbcaf9eb22c80e93021f9bbc", "url": "https://api.github.com/repos/rust-lang/rust/commits/31e39446ec2f251efbcaf9eb22c80e93021f9bbc", "html_url": "https://github.com/rust-lang/rust/commit/31e39446ec2f251efbcaf9eb22c80e93021f9bbc"}], "stats": {"total": 169, "additions": 61, "deletions": 108}, "files": [{"sha": "f9b4d76f28f8a6a03ab6352b722defa246301c5a", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -13,7 +13,7 @@\n #![feature(const_default_impls)]\n #![feature(const_trait_impl)]\n #![feature(if_let_guard)]\n-#![feature(label_break_value)]\n+#![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(min_specialization)]\n #![feature(negative_impls)]\n #![feature(slice_internals)]"}, {"sha": "4ac96ec8b609c82dbfd98c0b8dc527e0741e8a53", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -647,14 +647,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n             ast::ExprKind::TryBlock(_) => {\n                 gate_feature_post!(&self, try_blocks, e.span, \"`try` expression is experimental\");\n             }\n-            ast::ExprKind::Block(_, Some(label)) => {\n-                gate_feature_post!(\n-                    &self,\n-                    label_break_value,\n-                    label.ident.span,\n-                    \"labels on blocks are unstable\"\n-                );\n-            }\n             _ => {}\n         }\n         visit::walk_expr(self, e)\n@@ -823,7 +815,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n     gate_all!(box_patterns, \"box pattern syntax is experimental\");\n     gate_all!(exclusive_range_pattern, \"exclusive range pattern syntax is experimental\");\n     gate_all!(try_blocks, \"`try` blocks are unstable\");\n-    gate_all!(label_break_value, \"labels on blocks are unstable\");\n     gate_all!(box_syntax, \"box expression syntax is experimental; you can call `Box::new` instead\");\n     gate_all!(type_ascription, \"type ascription is experimental\");\n "}, {"sha": "577f42ef3017c81f071bdd6fa9ca0697ab9241b9", "filename": "compiler/rustc_error_codes/src/error_codes/E0695.md", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0695.md", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0695.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0695.md?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -3,7 +3,6 @@ A `break` statement without a label appeared inside a labeled block.\n Erroneous code example:\n \n ```compile_fail,E0695\n-# #![feature(label_break_value)]\n loop {\n     'a: {\n         break;\n@@ -14,7 +13,6 @@ loop {\n Make sure to always label the `break`:\n \n ```\n-# #![feature(label_break_value)]\n 'l: loop {\n     'a: {\n         break 'l;\n@@ -25,7 +23,6 @@ Make sure to always label the `break`:\n Or if you want to `break` the labeled block:\n \n ```\n-# #![feature(label_break_value)]\n loop {\n     'a: {\n         break 'a;"}, {"sha": "37b2b0ecad7721ef853b11099545fa0cdac48a0e", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -186,6 +186,8 @@ declare_features! (\n     /// Allows some increased flexibility in the name resolution rules,\n     /// especially around globs and shadowing (RFC 1560).\n     (accepted, item_like_imports, \"1.15.0\", Some(35120), None),\n+    /// Allows `'a: { break 'a; }`.\n+    (accepted, label_break_value, \"1.65.0\", Some(48594), None),\n     /// Allows `if/while p && let q = r && ...` chains.\n     (accepted, let_chains, \"1.64.0\", Some(53667), None),\n     /// Allows `break {expr}` with a value inside `loop`s."}, {"sha": "22178dd2123e50389681de48c2dd72d24e161f66", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -420,8 +420,6 @@ declare_features! (\n     (active, intra_doc_pointers, \"1.51.0\", Some(80896), None),\n     /// Allows `#[instruction_set(_)]` attribute\n     (active, isa_attribute, \"1.48.0\", Some(74727), None),\n-    /// Allows `'a: { break 'a; }`.\n-    (active, label_break_value, \"1.28.0\", Some(48594), None),\n     // Allows setting the threshold for the `large_assignments` lint.\n     (active, large_assignments, \"1.52.0\", Some(83518), None),\n     /// Allows `let...else` statements."}, {"sha": "8f02a6cc4a14d25514596bd534c383e875c7107e", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -17,7 +17,7 @@\n #![feature(box_patterns)]\n #![feature(control_flow_enum)]\n #![feature(extend_one)]\n-#![feature(label_break_value)]\n+#![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "18aa109d7a60a640d4bb048bc9c86b1e9e2bc178", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -2014,10 +2014,6 @@ impl<'a> Parser<'a> {\n             }\n         }\n \n-        if let Some(label) = opt_label {\n-            self.sess.gated_spans.gate(sym::label_break_value, label.ident.span);\n-        }\n-\n         if self.token.is_whole_block() {\n             self.sess.emit_err(InvalidBlockMacroSegment {\n                 span: self.token.span,"}, {"sha": "e0dd28bee30b6e5b2ab8ec89c36c5ca13ec8be6b", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -16,7 +16,7 @@\n #![feature(control_flow_enum)]\n #![feature(drain_filter)]\n #![feature(hash_drain_filter)]\n-#![feature(label_break_value)]\n+#![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(let_else)]\n #![feature(if_let_guard)]\n #![feature(never_type)]"}, {"sha": "5699f642bafa946eff9b7e12c4e9ebc0bb8e0bd6", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -64,7 +64,7 @@ This API is completely unstable and subject to change.\n #![feature(if_let_guard)]\n #![feature(is_sorted)]\n #![feature(iter_intersperse)]\n-#![feature(label_break_value)]\n+#![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(let_else)]\n #![feature(min_specialization)]\n #![feature(never_type)]"}, {"sha": "50e3acc9400760e2327d87773688a59e5b3a48c8", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -252,7 +252,7 @@\n #![feature(dropck_eyepatch)]\n #![feature(exhaustive_patterns)]\n #![feature(intra_doc_pointers)]\n-#![feature(label_break_value)]\n+#![cfg_attr(bootstrap, feature(label_break_value))]\n #![feature(lang_items)]\n #![feature(let_else)]\n #![feature(linkage)]"}, {"sha": "6fc38f45517ef74dc38864b8d00e0d4dc2b59548", "filename": "src/test/ui/feature-gates/feature-gate-label_break_value.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/addacb5878b9970ebc1665768a05cb601e7aea15/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/addacb5878b9970ebc1665768a05cb601e7aea15/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.rs?ref=addacb5878b9970ebc1665768a05cb601e7aea15", "patch": "@@ -1,5 +0,0 @@\n-pub fn main() {\n-    'a: { //~ ERROR labels on blocks are unstable\n-        break 'a;\n-    }\n-}"}, {"sha": "4b43fdc593fa352a6ac212f0ad0a05087bdba82d", "filename": "src/test/ui/feature-gates/feature-gate-label_break_value.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/addacb5878b9970ebc1665768a05cb601e7aea15/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/addacb5878b9970ebc1665768a05cb601e7aea15/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-label_break_value.stderr?ref=addacb5878b9970ebc1665768a05cb601e7aea15", "patch": "@@ -1,12 +0,0 @@\n-error[E0658]: labels on blocks are unstable\n-  --> $DIR/feature-gate-label_break_value.rs:2:5\n-   |\n-LL |     'a: {\n-   |     ^^\n-   |\n-   = note: see issue #48594 <https://github.com/rust-lang/rust/issues/48594> for more information\n-   = help: add `#![feature(label_break_value)]` to the crate attributes to enable\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0658`."}, {"sha": "10992c50597b6512ef1a2949f10b1fac04bbc6e8", "filename": "src/test/ui/for-loop-while/label_break_value.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,7 +1,6 @@\n // run-pass\n #![allow(dead_code)]\n #![allow(unused_assignments)]\n-#![feature(label_break_value)]\n \n // Test control flow to follow label_break_value semantics\n fn label_break(a: bool, b: bool) -> u32 {"}, {"sha": "fcf2e0f294e5c19ef349d3a7a7bf597804605dbd", "filename": "src/test/ui/for-loop-while/label_break_value_invalid.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value_invalid.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,5 +1,4 @@\n #![crate_type = \"lib\"]\n-#![feature(label_break_value)]\n \n fn lbv_macro_test_hygiene_respected() {\n     macro_rules! mac2 {"}, {"sha": "f6999c4ab116a10a9bba68b1109db4e08f7bdf1f", "filename": "src/test/ui/for-loop-while/label_break_value_invalid.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value_invalid.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value_invalid.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor-loop-while%2Flabel_break_value_invalid.stderr?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,5 +1,5 @@\n error[E0426]: use of undeclared label `'a`\n-  --> $DIR/label_break_value_invalid.rs:7:19\n+  --> $DIR/label_break_value_invalid.rs:6:19\n    |\n LL |             break 'a $val;\n    |                   ^^ undeclared label `'a`\n@@ -10,7 +10,7 @@ LL |                 mac2!(2);\n    = note: this error originates in the macro `mac2` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error[E0426]: use of undeclared label `'a`\n-  --> $DIR/label_break_value_invalid.rs:29:19\n+  --> $DIR/label_break_value_invalid.rs:28:19\n    |\n LL |     let x: u8 = mac3!('b: {\n    |                       -- a label with a similar name is reachable\n@@ -22,7 +22,7 @@ LL |             break 'a 3;\n    |                   help: try using similarly named label: `'b`\n \n error[E0426]: use of undeclared label `'a`\n-  --> $DIR/label_break_value_invalid.rs:34:29\n+  --> $DIR/label_break_value_invalid.rs:33:29\n    |\n LL |     let x: u8 = mac3!(break 'a 4);\n    |                             ^^ undeclared label `'a`"}, {"sha": "94a9c2ab8be8e681d34bbb6a5d3bf550371dd120", "filename": "src/test/ui/issues/issue-62480.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fissues%2Fissue-62480.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fissues%2Fissue-62480.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-62480.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,5 +1,3 @@\n-#![feature(label_break_value)]\n-\n fn main() {\n     // This used to ICE during liveness check because `target_id` passed to\n     // `propagate_through_expr` would be the closure and not the `loop`, which wouldn't be found in"}, {"sha": "db230537037a45b71c7349b0f5d162ccd0b6f7e5", "filename": "src/test/ui/issues/issue-62480.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fissues%2Fissue-62480.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fissues%2Fissue-62480.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-62480.stderr?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,5 +1,5 @@\n error[E0767]: use of unreachable label `'a`\n-  --> $DIR/issue-62480.rs:8:18\n+  --> $DIR/issue-62480.rs:6:18\n    |\n LL |     'a: {\n    |     -- unreachable label defined here\n@@ -9,7 +9,7 @@ LL |         || break 'a\n    = note: labels are unreachable through functions, closures, async blocks and modules\n \n error[E0267]: `break` inside of a closure\n-  --> $DIR/issue-62480.rs:8:12\n+  --> $DIR/issue-62480.rs:6:12\n    |\n LL |         || break 'a\n    |         -- ^^^^^^^^ cannot `break` inside of a closure"}, {"sha": "22172f4fd2e88e4edfe1bdb3db164c93b9bdf2ee", "filename": "src/test/ui/label/label_break_value_continue.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_continue.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,4 +1,3 @@\n-#![feature(label_break_value)]\n #![allow(unused_labels)]\n \n // Simple continue pointing to an unlabeled break should yield in an error"}, {"sha": "284d213d65eaab32f007c46539055d63511f8c63", "filename": "src/test/ui/label/label_break_value_continue.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_continue.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_continue.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_continue.stderr?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,11 +1,11 @@\n error[E0695]: unlabeled `continue` inside of a labeled block\n-  --> $DIR/label_break_value_continue.rs:7:9\n+  --> $DIR/label_break_value_continue.rs:6:9\n    |\n LL |         continue;\n    |         ^^^^^^^^ `continue` statements that would diverge to or through a labeled block need to bear a label\n \n error[E0696]: `continue` pointing to a labeled block\n-  --> $DIR/label_break_value_continue.rs:14:9\n+  --> $DIR/label_break_value_continue.rs:13:9\n    |\n LL | /     'b: {\n LL | |         continue 'b;\n@@ -14,7 +14,7 @@ LL | |     }\n    | |_____- labeled block the `continue` points to\n \n error[E0695]: unlabeled `continue` inside of a labeled block\n-  --> $DIR/label_break_value_continue.rs:22:13\n+  --> $DIR/label_break_value_continue.rs:21:13\n    |\n LL |             continue;\n    |             ^^^^^^^^ `continue` statements that would diverge to or through a labeled block need to bear a label"}, {"sha": "70227d869337df668670bfd8c7fb83e3630c62cd", "filename": "src/test/ui/label/label_break_value_desugared_break.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_desugared_break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_desugared_break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_desugared_break.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,5 +1,5 @@\n // compile-flags: --edition 2018\n-#![feature(label_break_value, try_blocks)]\n+#![feature(try_blocks)]\n \n // run-pass\n fn main() {\n@@ -9,4 +9,11 @@ fn main() {\n             break 'foo;\n         }\n     };\n+\n+    'foo: {\n+        let _: Result<(), ()> = try {\n+            Err(())?;\n+            break 'foo;\n+        };\n+    }\n }"}, {"sha": "fb75276b4f4d1f92289fa0677dbe9512665ae827", "filename": "src/test/ui/label/label_break_value_illegal_uses.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.fixed?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-#![feature(label_break_value)]\n \n // These are forbidden occurrences of label-break-value\n "}, {"sha": "3cbf41380e6c551601be1b7d3d9150149398c760", "filename": "src/test/ui/label/label_break_value_illegal_uses.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-#![feature(label_break_value)]\n \n // These are forbidden occurrences of label-break-value\n "}, {"sha": "15016ffd54ab60d21592401ab078e57b591c90bf", "filename": "src/test/ui/label/label_break_value_illegal_uses.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_illegal_uses.stderr?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,23 +1,23 @@\n error: block label not supported here\n-  --> $DIR/label_break_value_illegal_uses.rs:8:12\n+  --> $DIR/label_break_value_illegal_uses.rs:7:12\n    |\n LL |     unsafe 'b: {}\n    |            ^^^ not supported here\n \n error: block label not supported here\n-  --> $DIR/label_break_value_illegal_uses.rs:12:13\n+  --> $DIR/label_break_value_illegal_uses.rs:11:13\n    |\n LL |     if true 'b: {}\n    |             ^^^ not supported here\n \n error: block label not supported here\n-  --> $DIR/label_break_value_illegal_uses.rs:16:21\n+  --> $DIR/label_break_value_illegal_uses.rs:15:21\n    |\n LL |     if true {} else 'b: {}\n    |                     ^^^ not supported here\n \n error: block label not supported here\n-  --> $DIR/label_break_value_illegal_uses.rs:20:17\n+  --> $DIR/label_break_value_illegal_uses.rs:19:17\n    |\n LL |     match false 'b: {\n    |                 ^^^ not supported here"}, {"sha": "2a4f5d57493e1887587278cd12c0f1f3e38adc9c", "filename": "src/test/ui/label/label_break_value_unlabeled_break.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_unlabeled_break.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_unlabeled_break.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_unlabeled_break.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,4 +1,3 @@\n-#![feature(label_break_value)]\n #![allow(unused_labels)]\n \n // Simple unlabeled break should yield in an error"}, {"sha": "a2ccd27b83663a8e63432e6137812fd38765739e", "filename": "src/test/ui/label/label_break_value_unlabeled_break.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_unlabeled_break.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_unlabeled_break.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flabel%2Flabel_break_value_unlabeled_break.stderr?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,11 +1,11 @@\n error[E0695]: unlabeled `break` inside of a labeled block\n-  --> $DIR/label_break_value_unlabeled_break.rs:7:9\n+  --> $DIR/label_break_value_unlabeled_break.rs:6:9\n    |\n LL |         break;\n    |         ^^^^^ `break` statements that would diverge to or through a labeled block need to bear a label\n \n error[E0695]: unlabeled `break` inside of a labeled block\n-  --> $DIR/label_break_value_unlabeled_break.rs:15:13\n+  --> $DIR/label_break_value_unlabeled_break.rs:14:13\n    |\n LL |             break;\n    |             ^^^^^ `break` statements that would diverge to or through a labeled block need to bear a label"}, {"sha": "87a5392fd30fdd314421581f72cbc6b4290c2df2", "filename": "src/test/ui/lint/unused_labels.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flint%2Funused_labels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flint%2Funused_labels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_labels.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -4,7 +4,6 @@\n \n // check-pass\n \n-#![feature(label_break_value)]\n #![warn(unused_labels)]\n \n fn main() {"}, {"sha": "846da792bed5543d15ed5ab9dcfe549873eb8002", "filename": "src/test/ui/lint/unused_labels.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flint%2Funused_labels.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Flint%2Funused_labels.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Funused_labels.stderr?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,5 +1,5 @@\n warning: label name `'many_used_shadowed` shadows a label name that is already in scope\n-  --> $DIR/unused_labels.rs:62:9\n+  --> $DIR/unused_labels.rs:61:9\n    |\n LL |     'many_used_shadowed: for _ in 0..10 {\n    |     ------------------- first declared here\n@@ -8,55 +8,55 @@ LL |         'many_used_shadowed: for _ in 0..10 {\n    |         ^^^^^^^^^^^^^^^^^^^ label `'many_used_shadowed` already in scope\n \n warning: unused label\n-  --> $DIR/unused_labels.rs:11:5\n+  --> $DIR/unused_labels.rs:10:5\n    |\n LL |     'unused_while_label: while 0 == 0 {\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n note: the lint level is defined here\n-  --> $DIR/unused_labels.rs:8:9\n+  --> $DIR/unused_labels.rs:7:9\n    |\n LL | #![warn(unused_labels)]\n    |         ^^^^^^^^^^^^^\n \n warning: unused label\n-  --> $DIR/unused_labels.rs:16:5\n+  --> $DIR/unused_labels.rs:15:5\n    |\n LL |     'unused_while_let_label: while let Some(_) = opt {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused label\n-  --> $DIR/unused_labels.rs:20:5\n+  --> $DIR/unused_labels.rs:19:5\n    |\n LL |     'unused_for_label: for _ in 0..10 {\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused label\n-  --> $DIR/unused_labels.rs:36:9\n+  --> $DIR/unused_labels.rs:35:9\n    |\n LL |         'unused_loop_label_inner_2: for _ in 0..10 {\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused label\n-  --> $DIR/unused_labels.rs:42:5\n+  --> $DIR/unused_labels.rs:41:5\n    |\n LL |     'unused_loop_label_outer_3: for _ in 0..10 {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused label\n-  --> $DIR/unused_labels.rs:60:5\n+  --> $DIR/unused_labels.rs:59:5\n    |\n LL |     'many_used_shadowed: for _ in 0..10 {\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused label\n-  --> $DIR/unused_labels.rs:72:5\n+  --> $DIR/unused_labels.rs:71:5\n    |\n LL |     'unused_loop_label: loop {\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused label\n-  --> $DIR/unused_labels.rs:78:5\n+  --> $DIR/unused_labels.rs:77:5\n    |\n LL |     'unused_block_label: {\n    |     ^^^^^^^^^^^^^^^^^^^"}, {"sha": "dd159cb5b6efca50f6b5ef3e956efc9cbe62e285", "filename": "src/test/ui/macros/stringify.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fstringify.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -9,7 +9,6 @@\n #![feature(decl_macro)]\n #![feature(generators)]\n #![feature(half_open_range_patterns)]\n-#![feature(label_break_value)]\n #![feature(more_qualified_paths)]\n #![feature(raw_ref_op)]\n #![feature(trait_alias)]"}, {"sha": "c6d7ae383b247ad496c9ef6066af97ee2147debc", "filename": "src/test/ui/parser/bad-interpolated-block.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fparser%2Fbad-interpolated-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fparser%2Fbad-interpolated-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-interpolated-block.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,5 +1,3 @@\n-#![feature(label_break_value)]\n-\n fn main() {}\n \n macro_rules! m {"}, {"sha": "2a0999afdfaf8c0d0cf4ec67ec5a0e78aa2094db", "filename": "src/test/ui/parser/bad-interpolated-block.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fparser%2Fbad-interpolated-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fparser%2Fbad-interpolated-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fbad-interpolated-block.stderr?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,5 +1,5 @@\n error: cannot use a `block` macro fragment here\n-  --> $DIR/bad-interpolated-block.rs:7:15\n+  --> $DIR/bad-interpolated-block.rs:5:15\n    |\n LL |         'lab: $b;\n    |         ------^^\n@@ -12,7 +12,7 @@ LL |     m!({});\n    = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot use a `block` macro fragment here\n-  --> $DIR/bad-interpolated-block.rs:8:16\n+  --> $DIR/bad-interpolated-block.rs:6:16\n    |\n LL |         unsafe $b;\n    |         -------^^\n@@ -25,7 +25,7 @@ LL |     m!({});\n    = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: cannot use a `block` macro fragment here\n-  --> $DIR/bad-interpolated-block.rs:9:23\n+  --> $DIR/bad-interpolated-block.rs:7:23\n    |\n LL |         |x: u8| -> () $b;\n    |                       ^^ the `block` fragment is within this context"}, {"sha": "d9ebd7473bc721dcaf975d7da7fea57924741caf", "filename": "src/test/ui/parser/labeled-no-colon-expr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,5 +1,3 @@\n-#![feature(label_break_value)]\n-\n fn main() {\n     'l0 while false {} //~ ERROR labeled expression must be followed by `:`\n     'l1 for _ in 0..1 {} //~ ERROR labeled expression must be followed by `:`"}, {"sha": "62288fe152da335ff6fbb5db3bc0bb73a24ef32c", "filename": "src/test/ui/parser/labeled-no-colon-expr.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,5 +1,5 @@\n error: labeled expression must be followed by `:`\n-  --> $DIR/labeled-no-colon-expr.rs:4:5\n+  --> $DIR/labeled-no-colon-expr.rs:2:5\n    |\n LL |     'l0 while false {}\n    |     ----^^^^^^^^^^^^^^\n@@ -10,7 +10,7 @@ LL |     'l0 while false {}\n    = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n \n error: labeled expression must be followed by `:`\n-  --> $DIR/labeled-no-colon-expr.rs:5:5\n+  --> $DIR/labeled-no-colon-expr.rs:3:5\n    |\n LL |     'l1 for _ in 0..1 {}\n    |     ----^^^^^^^^^^^^^^^^\n@@ -21,7 +21,7 @@ LL |     'l1 for _ in 0..1 {}\n    = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n \n error: labeled expression must be followed by `:`\n-  --> $DIR/labeled-no-colon-expr.rs:6:5\n+  --> $DIR/labeled-no-colon-expr.rs:4:5\n    |\n LL |     'l2 loop {}\n    |     ----^^^^^^^\n@@ -32,7 +32,7 @@ LL |     'l2 loop {}\n    = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n \n error: labeled expression must be followed by `:`\n-  --> $DIR/labeled-no-colon-expr.rs:7:5\n+  --> $DIR/labeled-no-colon-expr.rs:5:5\n    |\n LL |     'l3 {}\n    |     ----^^\n@@ -43,7 +43,7 @@ LL |     'l3 {}\n    = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n \n error: expected `while`, `for`, `loop` or `{` after a label\n-  --> $DIR/labeled-no-colon-expr.rs:8:9\n+  --> $DIR/labeled-no-colon-expr.rs:6:9\n    |\n LL |     'l4 0;\n    |         ^ expected `while`, `for`, `loop` or `{` after a label\n@@ -55,7 +55,7 @@ LL +     0;\n    |\n \n error: labeled expression must be followed by `:`\n-  --> $DIR/labeled-no-colon-expr.rs:8:9\n+  --> $DIR/labeled-no-colon-expr.rs:6:9\n    |\n LL |     'l4 0;\n    |     ----^\n@@ -66,7 +66,7 @@ LL |     'l4 0;\n    = note: labels are used before loops and blocks, allowing e.g., `break 'label` to them\n \n error: cannot use a `block` macro fragment here\n-  --> $DIR/labeled-no-colon-expr.rs:13:17\n+  --> $DIR/labeled-no-colon-expr.rs:11:17\n    |\n LL |             'l5 $b;\n    |             ----^^\n@@ -79,7 +79,7 @@ LL |     m!({});\n    = note: this error originates in the macro `m` (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: labeled expression must be followed by `:`\n-  --> $DIR/labeled-no-colon-expr.rs:16:8\n+  --> $DIR/labeled-no-colon-expr.rs:14:8\n    |\n LL |             'l5 $b;\n    |             ---- help: add `:` after the label"}, {"sha": "c2e76444d115edda41dc09a677d4e31bbe14fd58", "filename": "src/test/ui/parser/recover-labeled-non-block-expr.fixed", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.fixed?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-#![feature(label_break_value)]\n fn main() {\n     let _ = 1 + 1; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n "}, {"sha": "fc11c646a8c68d5b17660355069310ea9ac95e16", "filename": "src/test/ui/parser/recover-labeled-non-block-expr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,5 +1,4 @@\n // run-rustfix\n-#![feature(label_break_value)]\n fn main() {\n     let _ = 'label: 1 + 1; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n "}, {"sha": "d66ce6950904c53855da6218a86649ef286302a7", "filename": "src/test/ui/parser/recover-labeled-non-block-expr.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.stderr?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,5 +1,5 @@\n error: expected `while`, `for`, `loop` or `{` after a label\n-  --> $DIR/recover-labeled-non-block-expr.rs:4:21\n+  --> $DIR/recover-labeled-non-block-expr.rs:3:21\n    |\n LL |     let _ = 'label: 1 + 1;\n    |                     ^ expected `while`, `for`, `loop` or `{` after a label\n@@ -11,7 +11,7 @@ LL +     let _ = 1 + 1;\n    |\n \n error: expected `while`, `for`, `loop` or `{` after a label\n-  --> $DIR/recover-labeled-non-block-expr.rs:6:13\n+  --> $DIR/recover-labeled-non-block-expr.rs:5:13\n    |\n LL |     'label: match () { () => {}, };\n    |             ^^^^^ expected `while`, `for`, `loop` or `{` after a label\n@@ -23,7 +23,7 @@ LL +     match () { () => {}, };\n    |\n \n error: expected `while`, `for`, `loop` or `{` after a label\n-  --> $DIR/recover-labeled-non-block-expr.rs:7:13\n+  --> $DIR/recover-labeled-non-block-expr.rs:6:13\n    |\n LL |     'label: match () { () => break 'label, };\n    |             ^^^^^ expected `while`, `for`, `loop` or `{` after a label\n@@ -34,7 +34,7 @@ LL |     'label: { match () { () => break 'label, } };\n    |             +                                  +\n \n error: expected `while`, `for`, `loop` or `{` after a label\n-  --> $DIR/recover-labeled-non-block-expr.rs:9:13\n+  --> $DIR/recover-labeled-non-block-expr.rs:8:13\n    |\n LL |     'label: match () { () => 'lp: loop { break 'lp 0 }, };\n    |             ^^^^^ expected `while`, `for`, `loop` or `{` after a label\n@@ -45,7 +45,7 @@ LL |     'label: { match () { () => 'lp: loop { break 'lp 0 }, } };\n    |             +                                               +\n \n error: expected `while`, `for`, `loop` or `{` after a label\n-  --> $DIR/recover-labeled-non-block-expr.rs:12:22\n+  --> $DIR/recover-labeled-non-block-expr.rs:11:22\n    |\n LL |     let _i = 'label: match x {\n    |                      ^^^^^ expected `while`, `for`, `loop` or `{` after a label\n@@ -60,7 +60,7 @@ LL ~     } };\n    |\n \n error: expected `while`, `for`, `loop` or `{` after a label\n-  --> $DIR/recover-labeled-non-block-expr.rs:26:24\n+  --> $DIR/recover-labeled-non-block-expr.rs:25:24\n    |\n LL |     let _val = 'label: (1, if other == 3 { break 'label (2, 3) } else { other });\n    |                        ^ expected `while`, `for`, `loop` or `{` after a label"}, {"sha": "c3235f06779b3ee6aacb1ec051ce2c68536c1195", "filename": "src/tools/clippy/tests/ui/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsemicolon_if_nothing_returned.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,6 +1,5 @@\n #![warn(clippy::semicolon_if_nothing_returned)]\n #![allow(clippy::redundant_closure)]\n-#![feature(label_break_value)]\n #![feature(let_else)]\n \n fn get_unit() {}"}, {"sha": "78813e7cc1c39c5aa294f08db14ca9cfe0688a50", "filename": "src/tools/clippy/tests/ui/semicolon_if_nothing_returned.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsemicolon_if_nothing_returned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsemicolon_if_nothing_returned.stderr?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,31 +1,31 @@\n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:10:5\n+  --> $DIR/semicolon_if_nothing_returned.rs:9:5\n    |\n LL |     println!(\"Hello\")\n    |     ^^^^^^^^^^^^^^^^^ help: add a `;` here: `println!(\"Hello\");`\n    |\n    = note: `-D clippy::semicolon-if-nothing-returned` implied by `-D warnings`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:14:5\n+  --> $DIR/semicolon_if_nothing_returned.rs:13:5\n    |\n LL |     get_unit()\n    |     ^^^^^^^^^^ help: add a `;` here: `get_unit();`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:19:5\n+  --> $DIR/semicolon_if_nothing_returned.rs:18:5\n    |\n LL |     y = x + 1\n    |     ^^^^^^^^^ help: add a `;` here: `y = x + 1;`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:25:9\n+  --> $DIR/semicolon_if_nothing_returned.rs:24:9\n    |\n LL |         hello()\n    |         ^^^^^^^ help: add a `;` here: `hello();`\n \n error: consider adding a `;` to the last statement for consistent formatting\n-  --> $DIR/semicolon_if_nothing_returned.rs:36:9\n+  --> $DIR/semicolon_if_nothing_returned.rs:35:9\n    |\n LL |         ptr::drop_in_place(s.as_mut_ptr())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add a `;` here: `ptr::drop_in_place(s.as_mut_ptr());`"}, {"sha": "e68ca2c5907fcc55c1b36cabcb781d49d5ab48c3", "filename": "src/tools/rustfmt/tests/source/issue-3217.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-3217.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-3217.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Fsource%2Fissue-3217.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,5 +1,3 @@\n-#![feature(label_break_value)]\n-\n fn main() {\n     let mut res = 0;\n     's_39: { if res == 0i32 { println!(\"Hello, world!\"); } }"}, {"sha": "403bf4c340a4eaf58e3958795bc85dd0df98056d", "filename": "src/tools/rustfmt/tests/target/issue-3217.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-3217.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4550a6edfcbb1e284d9eb1d095f034848e1ee01/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-3217.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustfmt%2Ftests%2Ftarget%2Fissue-3217.rs?ref=f4550a6edfcbb1e284d9eb1d095f034848e1ee01", "patch": "@@ -1,5 +1,3 @@\n-#![feature(label_break_value)]\n-\n fn main() {\n     let mut res = 0;\n     's_39: {"}]}