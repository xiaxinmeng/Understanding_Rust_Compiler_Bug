{"sha": "57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YzI3ZjkxMzkyZmRkOWQ3MmZkMDIzZjRlMmZlY2Q4YjY4YTdkMDk=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-03-09T09:33:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-09T09:33:46Z"}, "message": "Merge #3519\n\n3519: Show mod path on hover r=matklad a=SomeoneToIgnore\n\nCloses #1064\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "23e1e0216789b8b21183e07b10f97e2f57ae033c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/23e1e0216789b8b21183e07b10f97e2f57ae033c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeZg16CRBK7hj4Ov3rIwAAdHIIALKkHDCt6XwNFW/8bKcpUgJ/\niR+Xd0CSDIWrjX1WLQDOSIYDB65lBANV/yWrkVBt2dhEI+jeSUFxGiQdr6VXpF6Q\nYJjGBY+eEMk/C7dVYbqlDJFHmMg1qJuwr2680zgag5L7gsLp78MAKFHdxD+zedON\noet3W5snERnA6z1URjauTd4t9EasedZs/x5p2AGgFpVaZ31CvHMqp6p55Ayzs/nx\ncbsyHXEBhzamkLWBLutmrOQj56+ppwy0wCWPydSuxQzfoI38xBqLt1ScMNh5NcdO\nYuoX6rksmQ062wWaKTlpcjHf2Kut3Kb8nj1A11kiy/j20UsIEP5bXeVory245sQ=\n=KKyE\n-----END PGP SIGNATURE-----\n", "payload": "tree 23e1e0216789b8b21183e07b10f97e2f57ae033c\nparent 58ab084034b760367359334807c7f7773faf7f92\nparent e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1583746426 +0000\ncommitter GitHub <noreply@github.com> 1583746426 +0000\n\nMerge #3519\n\n3519: Show mod path on hover r=matklad a=SomeoneToIgnore\n\nCloses #1064\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "html_url": "https://github.com/rust-lang/rust/commit/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58ab084034b760367359334807c7f7773faf7f92", "url": "https://api.github.com/repos/rust-lang/rust/commits/58ab084034b760367359334807c7f7773faf7f92", "html_url": "https://github.com/rust-lang/rust/commit/58ab084034b760367359334807c7f7773faf7f92"}, {"sha": "e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2", "html_url": "https://github.com/rust-lang/rust/commit/e1aa96f2c5b6cdbf0fb7f49b47209055b7a937f2"}], "stats": {"total": 391, "additions": 270, "deletions": 121}, "files": [{"sha": "947d6ad568a731ca2091b88f512428bef40e5c05", "filename": "crates/ra_db/src/fixture.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Ffixture.rs?ref=57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "patch": "@@ -56,6 +56,7 @@ fn with_single_file(db: &mut dyn SourceDatabaseExt, text: &str) -> FileId {\n     crate_graph.add_crate_root(\n         file_id,\n         Edition::Edition2018,\n+        None,\n         CfgOptions::default(),\n         Env::default(),\n     );\n@@ -98,8 +99,13 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n         assert!(meta.path.starts_with(&source_root_prefix));\n \n         if let Some(krate) = meta.krate {\n-            let crate_id =\n-                crate_graph.add_crate_root(file_id, meta.edition, meta.cfg, Env::default());\n+            let crate_id = crate_graph.add_crate_root(\n+                file_id,\n+                meta.edition,\n+                Some(krate.clone()),\n+                meta.cfg,\n+                Env::default(),\n+            );\n             let prev = crates.insert(krate.clone(), crate_id);\n             assert!(prev.is_none());\n             for dep in meta.deps {\n@@ -132,6 +138,7 @@ fn with_files(db: &mut dyn SourceDatabaseExt, fixture: &str) -> Option<FilePosit\n         crate_graph.add_crate_root(\n             crate_root,\n             Edition::Edition2018,\n+            None,\n             CfgOptions::default(),\n             Env::default(),\n         );"}, {"sha": "4069c0fedb532654d882f69fe5c0690f4a0069c6", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 90, "deletions": 39, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "patch": "@@ -86,7 +86,7 @@ pub struct CrateId(pub u32);\n pub struct CrateName(SmolStr);\n \n impl CrateName {\n-    /// Crates a crate name, checking for dashes in the string provided.\n+    /// Creates a crate name, checking for dashes in the string provided.\n     /// Dashes are not allowed in the crate names,\n     /// hence the input string is returned as `Err` for those cases.\n     pub fn new(name: &str) -> Result<CrateName, &str> {\n@@ -97,19 +97,23 @@ impl CrateName {\n         }\n     }\n \n-    /// Crates a crate name, unconditionally replacing the dashes with underscores.\n+    /// Creates a crate name, unconditionally replacing the dashes with underscores.\n     pub fn normalize_dashes(name: &str) -> CrateName {\n         Self(SmolStr::new(name.replace('-', \"_\")))\n     }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n-struct CrateData {\n-    file_id: FileId,\n-    edition: Edition,\n+pub struct CrateData {\n+    pub root_file_id: FileId,\n+    pub edition: Edition,\n+    /// The name to display to the end user.\n+    /// This actual crate name can be different in a particular dependent crate\n+    /// or may even be missing for some cases, such as a dummy crate for the code snippet.\n+    pub display_name: Option<String>,\n     cfg_options: CfgOptions,\n     env: Env,\n-    dependencies: Vec<Dependency>,\n+    pub dependencies: Vec<Dependency>,\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -134,10 +138,11 @@ impl CrateGraph {\n         &mut self,\n         file_id: FileId,\n         edition: Edition,\n+        display_name: Option<String>,\n         cfg_options: CfgOptions,\n         env: Env,\n     ) -> CrateId {\n-        let data = CrateData::new(file_id, edition, cfg_options, env);\n+        let data = CrateData::new(file_id, edition, display_name, cfg_options, env);\n         let crate_id = CrateId(self.arena.len() as u32);\n         let prev = self.arena.insert(crate_id, data);\n         assert!(prev.is_none());\n@@ -169,24 +174,17 @@ impl CrateGraph {\n         self.arena.keys().copied()\n     }\n \n-    pub fn crate_root(&self, crate_id: CrateId) -> FileId {\n-        self.arena[&crate_id].file_id\n-    }\n-\n-    pub fn edition(&self, crate_id: CrateId) -> Edition {\n-        self.arena[&crate_id].edition\n+    pub fn crate_data(&self, crate_id: &CrateId) -> &CrateData {\n+        &self.arena[crate_id]\n     }\n \n     // FIXME: this only finds one crate with the given root; we could have multiple\n     pub fn crate_id_for_crate_root(&self, file_id: FileId) -> Option<CrateId> {\n-        let (&crate_id, _) = self.arena.iter().find(|(_crate_id, data)| data.file_id == file_id)?;\n+        let (&crate_id, _) =\n+            self.arena.iter().find(|(_crate_id, data)| data.root_file_id == file_id)?;\n         Some(crate_id)\n     }\n \n-    pub fn dependencies(&self, crate_id: CrateId) -> impl Iterator<Item = &Dependency> {\n-        self.arena[&crate_id].dependencies.iter()\n-    }\n-\n     /// Extends this crate graph by adding a complete disjoint second crate\n     /// graph.\n     ///\n@@ -209,7 +207,7 @@ impl CrateGraph {\n             return false;\n         }\n \n-        for dep in self.dependencies(from) {\n+        for dep in &self.crate_data(&from).dependencies {\n             let crate_id = dep.crate_id();\n             if crate_id == target {\n                 return true;\n@@ -230,8 +228,21 @@ impl CrateId {\n }\n \n impl CrateData {\n-    fn new(file_id: FileId, edition: Edition, cfg_options: CfgOptions, env: Env) -> CrateData {\n-        CrateData { file_id, edition, dependencies: Vec::new(), cfg_options, env }\n+    fn new(\n+        root_file_id: FileId,\n+        edition: Edition,\n+        display_name: Option<String>,\n+        cfg_options: CfgOptions,\n+        env: Env,\n+    ) -> CrateData {\n+        CrateData {\n+            root_file_id,\n+            edition,\n+            display_name,\n+            dependencies: Vec::new(),\n+            cfg_options,\n+            env,\n+        }\n     }\n \n     fn add_dep(&mut self, name: SmolStr, crate_id: CrateId) {\n@@ -290,12 +301,27 @@ mod tests {\n     #[test]\n     fn it_should_panic_because_of_cycle_dependencies() {\n         let mut graph = CrateGraph::default();\n-        let crate1 =\n-            graph.add_crate_root(FileId(1u32), Edition2018, CfgOptions::default(), Env::default());\n-        let crate2 =\n-            graph.add_crate_root(FileId(2u32), Edition2018, CfgOptions::default(), Env::default());\n-        let crate3 =\n-            graph.add_crate_root(FileId(3u32), Edition2018, CfgOptions::default(), Env::default());\n+        let crate1 = graph.add_crate_root(\n+            FileId(1u32),\n+            Edition2018,\n+            None,\n+            CfgOptions::default(),\n+            Env::default(),\n+        );\n+        let crate2 = graph.add_crate_root(\n+            FileId(2u32),\n+            Edition2018,\n+            None,\n+            CfgOptions::default(),\n+            Env::default(),\n+        );\n+        let crate3 = graph.add_crate_root(\n+            FileId(3u32),\n+            Edition2018,\n+            None,\n+            CfgOptions::default(),\n+            Env::default(),\n+        );\n         assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n         assert!(graph.add_dep(crate2, CrateName::new(\"crate3\").unwrap(), crate3).is_ok());\n         assert!(graph.add_dep(crate3, CrateName::new(\"crate1\").unwrap(), crate1).is_err());\n@@ -304,29 +330,54 @@ mod tests {\n     #[test]\n     fn it_works() {\n         let mut graph = CrateGraph::default();\n-        let crate1 =\n-            graph.add_crate_root(FileId(1u32), Edition2018, CfgOptions::default(), Env::default());\n-        let crate2 =\n-            graph.add_crate_root(FileId(2u32), Edition2018, CfgOptions::default(), Env::default());\n-        let crate3 =\n-            graph.add_crate_root(FileId(3u32), Edition2018, CfgOptions::default(), Env::default());\n+        let crate1 = graph.add_crate_root(\n+            FileId(1u32),\n+            Edition2018,\n+            None,\n+            CfgOptions::default(),\n+            Env::default(),\n+        );\n+        let crate2 = graph.add_crate_root(\n+            FileId(2u32),\n+            Edition2018,\n+            None,\n+            CfgOptions::default(),\n+            Env::default(),\n+        );\n+        let crate3 = graph.add_crate_root(\n+            FileId(3u32),\n+            Edition2018,\n+            None,\n+            CfgOptions::default(),\n+            Env::default(),\n+        );\n         assert!(graph.add_dep(crate1, CrateName::new(\"crate2\").unwrap(), crate2).is_ok());\n         assert!(graph.add_dep(crate2, CrateName::new(\"crate3\").unwrap(), crate3).is_ok());\n     }\n \n     #[test]\n     fn dashes_are_normalized() {\n         let mut graph = CrateGraph::default();\n-        let crate1 =\n-            graph.add_crate_root(FileId(1u32), Edition2018, CfgOptions::default(), Env::default());\n-        let crate2 =\n-            graph.add_crate_root(FileId(2u32), Edition2018, CfgOptions::default(), Env::default());\n+        let crate1 = graph.add_crate_root(\n+            FileId(1u32),\n+            Edition2018,\n+            None,\n+            CfgOptions::default(),\n+            Env::default(),\n+        );\n+        let crate2 = graph.add_crate_root(\n+            FileId(2u32),\n+            Edition2018,\n+            None,\n+            CfgOptions::default(),\n+            Env::default(),\n+        );\n         assert!(graph\n             .add_dep(crate1, CrateName::normalize_dashes(\"crate-name-with-dashes\"), crate2)\n             .is_ok());\n         assert_eq!(\n-            graph.dependencies(crate1).collect::<Vec<_>>(),\n-            vec![&Dependency { crate_id: crate2, name: \"crate_name_with_dashes\".into() }]\n+            graph.crate_data(&crate1).dependencies,\n+            vec![Dependency { crate_id: crate2, name: \"crate_name_with_dashes\".into() }]\n         );\n     }\n }"}, {"sha": "78c444037042fa40906f9a01dfe46f289a84d273", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 32, "deletions": 5, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "patch": "@@ -55,7 +55,9 @@ pub struct CrateDependency {\n impl Crate {\n     pub fn dependencies(self, db: &impl DefDatabase) -> Vec<CrateDependency> {\n         db.crate_graph()\n-            .dependencies(self.id)\n+            .crate_data(&self.id)\n+            .dependencies\n+            .iter()\n             .map(|dep| {\n                 let krate = Crate { id: dep.crate_id() };\n                 let name = dep.as_name();\n@@ -69,7 +71,9 @@ impl Crate {\n         let crate_graph = db.crate_graph();\n         crate_graph\n             .iter()\n-            .filter(|&krate| crate_graph.dependencies(krate).any(|it| it.crate_id == self.id))\n+            .filter(|&krate| {\n+                crate_graph.crate_data(&krate).dependencies.iter().any(|it| it.crate_id == self.id)\n+            })\n             .map(|id| Crate { id })\n             .collect()\n     }\n@@ -80,12 +84,11 @@ impl Crate {\n     }\n \n     pub fn root_file(self, db: &impl DefDatabase) -> FileId {\n-        db.crate_graph().crate_root(self.id)\n+        db.crate_graph().crate_data(&self.id).root_file_id\n     }\n \n     pub fn edition(self, db: &impl DefDatabase) -> Edition {\n-        let crate_graph = db.crate_graph();\n-        crate_graph.edition(self.id)\n+        db.crate_graph().crate_data(&self.id).edition\n     }\n \n     pub fn all(db: &impl DefDatabase) -> Vec<Crate> {\n@@ -496,6 +499,14 @@ impl Adt {\n     pub fn krate(self, db: &impl HirDatabase) -> Option<Crate> {\n         Some(self.module(db).krate())\n     }\n+\n+    pub fn name(&self, db: &impl HirDatabase) -> Name {\n+        match self {\n+            Adt::Struct(s) => s.name(db),\n+            Adt::Union(u) => u.name(db),\n+            Adt::Enum(e) => e.name(db),\n+        }\n+    }\n }\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]\n@@ -523,6 +534,14 @@ impl VariantDef {\n         }\n     }\n \n+    pub fn name(&self, db: &impl HirDatabase) -> Name {\n+        match self {\n+            VariantDef::Struct(s) => s.name(db),\n+            VariantDef::Union(u) => u.name(db),\n+            VariantDef::EnumVariant(e) => e.name(db),\n+        }\n+    }\n+\n     pub(crate) fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n         match self {\n             VariantDef::Struct(it) => it.variant_data(db),\n@@ -550,6 +569,14 @@ impl DefWithBody {\n             DefWithBody::Static(s) => s.module(db),\n         }\n     }\n+\n+    pub fn name(self, db: &impl HirDatabase) -> Option<Name> {\n+        match self {\n+            DefWithBody::Function(f) => Some(f.name(db)),\n+            DefWithBody::Static(s) => s.name(db),\n+            DefWithBody::Const(c) => c.name(db),\n+        }\n+    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]"}, {"sha": "217e19b01d36d2c586437723c544ca2e4e698505", "filename": "crates/ra_hir_def/src/find_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ffind_path.rs?ref=57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "patch": "@@ -176,7 +176,7 @@ fn find_importable_locations(\n     // directly (only through reexports in direct dependencies).\n     for krate in Some(from.krate)\n         .into_iter()\n-        .chain(crate_graph.dependencies(from.krate).map(|dep| dep.crate_id))\n+        .chain(crate_graph.crate_data(&from.krate).dependencies.iter().map(|dep| dep.crate_id))\n     {\n         result.extend(\n             importable_locations_in_crate(db, item, krate)"}, {"sha": "79e8d8038a01b9e290578ed777740ab554fc9a6a", "filename": "crates/ra_hir_def/src/lang_item.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flang_item.rs?ref=57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "patch": "@@ -117,7 +117,9 @@ impl LangItems {\n             return Some(*target);\n         }\n         db.crate_graph()\n-            .dependencies(start_crate)\n+            .crate_data(&start_crate)\n+            .dependencies\n+            .iter()\n             .find_map(|dep| db.lang_item(dep.crate_id, item.clone()))\n     }\n "}, {"sha": "6af0f4a8e9da72dc5e39446471115cd5c77f0ee7", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "patch": "@@ -179,8 +179,7 @@ impl CrateDefMap {\n     pub(crate) fn crate_def_map_query(db: &impl DefDatabase, krate: CrateId) -> Arc<CrateDefMap> {\n         let _p = profile(\"crate_def_map_query\");\n         let def_map = {\n-            let crate_graph = db.crate_graph();\n-            let edition = crate_graph.edition(krate);\n+            let edition = db.crate_graph().crate_data(&krate).edition;\n             let mut modules: Arena<LocalModuleId, ModuleData> = Arena::default();\n             let root = modules.alloc(ModuleData::default());\n             CrateDefMap {"}, {"sha": "e69f89b80eefb2dc43fe3dc63798e308ae5cb7ae", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "patch": "@@ -34,7 +34,7 @@ pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> C\n     let crate_graph = db.crate_graph();\n \n     // populate external prelude\n-    for dep in crate_graph.dependencies(def_map.krate) {\n+    for dep in &crate_graph.crate_data(&def_map.krate).dependencies {\n         let dep_def_map = db.crate_def_map(dep.crate_id);\n         log::debug!(\"crate dep {:?} -> {:?}\", dep.name, dep.crate_id);\n         def_map.extern_prelude.insert(\n@@ -128,8 +128,7 @@ where\n     DB: DefDatabase,\n {\n     fn collect(&mut self) {\n-        let crate_graph = self.db.crate_graph();\n-        let file_id = crate_graph.crate_root(self.def_map.krate);\n+        let file_id = self.db.crate_graph().crate_data(&self.def_map.krate).root_file_id;\n         let raw_items = self.db.raw_items(file_id.into());\n         let module_id = self.def_map.root;\n         self.def_map.modules[module_id].origin = ModuleOrigin::CrateRoot { definition: file_id };\n@@ -955,7 +954,7 @@ mod tests {\n         let krate = db.test_crate();\n \n         let def_map = {\n-            let edition = db.crate_graph().edition(krate);\n+            let edition = db.crate_graph().crate_data(&krate).edition;\n             let mut modules: Arena<LocalModuleId, ModuleData> = Arena::default();\n             let root = modules.alloc(ModuleData::default());\n             CrateDefMap {"}, {"sha": "6c653c4f5d09c925dc577dbad5bddf4f663e86d2", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "patch": "@@ -47,7 +47,7 @@ pub(crate) fn impls_for_trait_query(\n     // will only ever get called for a few crates near the root of the tree (the\n     // ones the user is editing), so this may actually be a waste of memory. I'm\n     // doing it like this mainly for simplicity for now.\n-    for dep in db.crate_graph().dependencies(krate) {\n+    for dep in &db.crate_graph().crate_data(&krate).dependencies {\n         impls.extend(db.impls_for_trait(dep.crate_id, trait_).iter());\n     }\n     let crate_impl_defs = db.impls_in_crate(krate);"}, {"sha": "eaeaaa2b40aba7da3f3cc8481acae461f36c381a", "filename": "crates/ra_ide/src/display.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_ide%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay.rs?ref=57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "patch": "@@ -68,17 +68,23 @@ pub(crate) fn macro_label(node: &ast::MacroCall) -> String {\n }\n \n pub(crate) fn rust_code_markup<CODE: AsRef<str>>(val: CODE) -> String {\n-    rust_code_markup_with_doc::<_, &str>(val, None)\n+    rust_code_markup_with_doc::<_, &str>(val, None, None)\n }\n \n-pub(crate) fn rust_code_markup_with_doc<CODE, DOC>(val: CODE, doc: Option<DOC>) -> String\n+pub(crate) fn rust_code_markup_with_doc<CODE, DOC>(\n+    val: CODE,\n+    doc: Option<DOC>,\n+    mod_path: Option<String>,\n+) -> String\n where\n     CODE: AsRef<str>,\n     DOC: AsRef<str>,\n {\n+    let mod_path =\n+        mod_path.filter(|path| !path.is_empty()).map(|path| path + \"\\n\").unwrap_or_default();\n     if let Some(doc) = doc {\n-        format!(\"```rust\\n{}\\n```\\n\\n{}\", val.as_ref(), doc.as_ref())\n+        format!(\"```rust\\n{}{}\\n```\\n\\n{}\", mod_path, val.as_ref(), doc.as_ref())\n     } else {\n-        format!(\"```rust\\n{}\\n```\", val.as_ref())\n+        format!(\"```rust\\n{}{}\\n```\", mod_path, val.as_ref())\n     }\n }"}, {"sha": "8b8af35fc7f8e3263d4034be3d308d0babdd7498", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 83, "deletions": 31, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "patch": "@@ -1,6 +1,10 @@\n //! FIXME: write short doc here\n \n-use hir::{Adt, HasSource, HirDisplay, Semantics};\n+use hir::{\n+    Adt, AsAssocItem, AssocItemContainer, FieldSource, HasSource, HirDisplay, ModuleDef,\n+    ModuleSource, Semantics,\n+};\n+use ra_db::SourceDatabase;\n use ra_ide_db::{\n     defs::{classify_name, classify_name_ref, Definition},\n     RootDatabase,\n@@ -16,6 +20,8 @@ use crate::{\n     display::{macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel},\n     FilePosition, RangeInfo,\n };\n+use itertools::Itertools;\n+use std::iter::once;\n \n /// Contains the results when hovering over an item\n #[derive(Debug, Clone)]\n@@ -83,44 +89,86 @@ impl HoverResult {\n     }\n }\n \n-fn hover_text(docs: Option<String>, desc: Option<String>) -> Option<String> {\n-    match (desc, docs) {\n-        (Some(desc), docs) => Some(rust_code_markup_with_doc(desc, docs)),\n-        (None, Some(docs)) => Some(docs),\n+fn hover_text(\n+    docs: Option<String>,\n+    desc: Option<String>,\n+    mod_path: Option<String>,\n+) -> Option<String> {\n+    match (desc, docs, mod_path) {\n+        (Some(desc), docs, mod_path) => Some(rust_code_markup_with_doc(desc, docs, mod_path)),\n+        (None, Some(docs), _) => Some(docs),\n+        _ => None,\n+    }\n+}\n+\n+fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String> {\n+    match def {\n+        Definition::StructField(f) => Some(f.parent_def(db).name(db)),\n+        Definition::Local(l) => l.parent(db).name(db),\n+        Definition::ModuleDef(md) => match md {\n+            ModuleDef::Function(f) => match f.as_assoc_item(db)?.container(db) {\n+                AssocItemContainer::Trait(t) => Some(t.name(db)),\n+                AssocItemContainer::ImplDef(i) => i.target_ty(db).as_adt().map(|adt| adt.name(db)),\n+            },\n+            ModuleDef::EnumVariant(e) => Some(e.parent_enum(db).name(db)),\n+            _ => None,\n+        },\n+        Definition::SelfType(i) => i.target_ty(db).as_adt().map(|adt| adt.name(db)),\n         _ => None,\n     }\n+    .map(|name| name.to_string())\n+}\n+\n+fn determine_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {\n+    let mod_path = def.module(db).map(|module| {\n+        once(db.crate_graph().crate_data(&module.krate().into()).display_name.clone())\n+            .chain(\n+                module\n+                    .path_to_root(db)\n+                    .into_iter()\n+                    .rev()\n+                    .map(|it| it.name(db).map(|name| name.to_string())),\n+            )\n+            .chain(once(definition_owner_name(db, def)))\n+            .flatten()\n+            .join(\"::\")\n+    });\n+    mod_path\n }\n \n fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<String> {\n+    let mod_path = determine_mod_path(db, &def);\n     return match def {\n         Definition::Macro(it) => {\n             let src = it.source(db);\n-            hover_text(src.value.doc_comment_text(), Some(macro_label(&src.value)))\n+            hover_text(src.value.doc_comment_text(), Some(macro_label(&src.value)), mod_path)\n         }\n         Definition::StructField(it) => {\n             let src = it.source(db);\n             match src.value {\n-                hir::FieldSource::Named(it) => hover_text(it.doc_comment_text(), it.short_label()),\n+                FieldSource::Named(it) => {\n+                    hover_text(it.doc_comment_text(), it.short_label(), mod_path)\n+                }\n                 _ => None,\n             }\n         }\n         Definition::ModuleDef(it) => match it {\n-            hir::ModuleDef::Module(it) => match it.definition_source(db).value {\n-                hir::ModuleSource::Module(it) => {\n-                    hover_text(it.doc_comment_text(), it.short_label())\n+            ModuleDef::Module(it) => match it.definition_source(db).value {\n+                ModuleSource::Module(it) => {\n+                    hover_text(it.doc_comment_text(), it.short_label(), mod_path)\n                 }\n                 _ => None,\n             },\n-            hir::ModuleDef::Function(it) => from_def_source(db, it),\n-            hir::ModuleDef::Adt(Adt::Struct(it)) => from_def_source(db, it),\n-            hir::ModuleDef::Adt(Adt::Union(it)) => from_def_source(db, it),\n-            hir::ModuleDef::Adt(Adt::Enum(it)) => from_def_source(db, it),\n-            hir::ModuleDef::EnumVariant(it) => from_def_source(db, it),\n-            hir::ModuleDef::Const(it) => from_def_source(db, it),\n-            hir::ModuleDef::Static(it) => from_def_source(db, it),\n-            hir::ModuleDef::Trait(it) => from_def_source(db, it),\n-            hir::ModuleDef::TypeAlias(it) => from_def_source(db, it),\n-            hir::ModuleDef::BuiltinType(it) => Some(it.to_string()),\n+            ModuleDef::Function(it) => from_def_source(db, it, mod_path),\n+            ModuleDef::Adt(Adt::Struct(it)) => from_def_source(db, it, mod_path),\n+            ModuleDef::Adt(Adt::Union(it)) => from_def_source(db, it, mod_path),\n+            ModuleDef::Adt(Adt::Enum(it)) => from_def_source(db, it, mod_path),\n+            ModuleDef::EnumVariant(it) => from_def_source(db, it, mod_path),\n+            ModuleDef::Const(it) => from_def_source(db, it, mod_path),\n+            ModuleDef::Static(it) => from_def_source(db, it, mod_path),\n+            ModuleDef::Trait(it) => from_def_source(db, it, mod_path),\n+            ModuleDef::TypeAlias(it) => from_def_source(db, it, mod_path),\n+            ModuleDef::BuiltinType(it) => Some(it.to_string()),\n         },\n         Definition::Local(it) => {\n             Some(rust_code_markup(it.ty(db).display_truncated(db, None).to_string()))\n@@ -131,13 +179,13 @@ fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<Strin\n         }\n     };\n \n-    fn from_def_source<A, D>(db: &RootDatabase, def: D) -> Option<String>\n+    fn from_def_source<A, D>(db: &RootDatabase, def: D, mod_path: Option<String>) -> Option<String>\n     where\n         D: HasSource<Ast = A>,\n         A: ast::DocCommentsOwner + ast::NameOwner + ShortLabel,\n     {\n         let src = def.source(db);\n-        hover_text(src.value.doc_comment_text(), src.value.short_label())\n+        hover_text(src.value.doc_comment_text(), src.value.short_label(), mod_path)\n     }\n }\n \n@@ -345,7 +393,7 @@ mod tests {\n                 };\n             }\n         \"#,\n-            &[\"field_a: u32\"],\n+            &[\"Foo\\nfield_a: u32\"],\n         );\n \n         // Hovering over the field in the definition\n@@ -362,7 +410,7 @@ mod tests {\n                 };\n             }\n         \"#,\n-            &[\"field_a: u32\"],\n+            &[\"Foo\\nfield_a: u32\"],\n         );\n     }\n \n@@ -415,7 +463,7 @@ fn main() {\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Some\"));\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"Option\\nSome\"));\n \n         let (analysis, position) = single_file_with_position(\n             \"\n@@ -442,6 +490,7 @@ fn main() {\n             }\n         \"#,\n             &[\"\n+Option\n None\n ```\n \n@@ -462,6 +511,7 @@ The None variant\n             }\n         \"#,\n             &[\"\n+Option\n Some\n ```\n \n@@ -528,21 +578,23 @@ fn func(foo: i32) { if true { <|>foo; }; }\n     fn test_hover_infer_associated_method_exact() {\n         let (analysis, position) = single_file_with_position(\n             \"\n-            struct Thing { x: u32 }\n+            mod wrapper {\n+                struct Thing { x: u32 }\n \n-            impl Thing {\n-                fn new() -> Thing {\n-                    Thing { x: 0 }\n+                impl Thing {\n+                    fn new() -> Thing {\n+                        Thing { x: 0 }\n+                    }\n                 }\n             }\n \n             fn main() {\n-                let foo_test = Thing::new<|>();\n+                let foo_test = wrapper::Thing::new<|>();\n             }\n             \",\n         );\n         let hover = analysis.hover(position).unwrap().unwrap();\n-        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"fn new() -> Thing\"));\n+        assert_eq!(trim_markup_opt(hover.info.first()), Some(\"wrapper::Thing\\nfn new() -> Thing\"));\n         assert_eq!(hover.info.is_exact(), true);\n     }\n "}, {"sha": "903624381a5c12191a16e417ac5094896222c124", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "patch": "@@ -211,7 +211,13 @@ impl Analysis {\n         // Default to enable test for single file.\n         let mut cfg_options = CfgOptions::default();\n         cfg_options.insert_atom(\"test\".into());\n-        crate_graph.add_crate_root(file_id, Edition::Edition2018, cfg_options, Env::default());\n+        crate_graph.add_crate_root(\n+            file_id,\n+            Edition::Edition2018,\n+            None,\n+            cfg_options,\n+            Env::default(),\n+        );\n         change.add_file(source_root, file_id, \"main.rs\".into(), Arc::new(text));\n         change.set_crate_graph(crate_graph);\n         host.apply_change(change);\n@@ -415,12 +421,12 @@ impl Analysis {\n \n     /// Returns the edition of the given crate.\n     pub fn crate_edition(&self, crate_id: CrateId) -> Cancelable<Edition> {\n-        self.with_db(|db| db.crate_graph().edition(crate_id))\n+        self.with_db(|db| db.crate_graph().crate_data(&crate_id).edition)\n     }\n \n     /// Returns the root file of the given crate.\n     pub fn crate_root(&self, crate_id: CrateId) -> Cancelable<FileId> {\n-        self.with_db(|db| db.crate_graph().crate_root(crate_id))\n+        self.with_db(|db| db.crate_graph().crate_data(&crate_id).root_file_id)\n     }\n \n     /// Returns the set of possible targets to run for the current file."}, {"sha": "90f84b052b8f05ac57e70e4747818379719201e0", "filename": "crates/ra_ide/src/mock_analysis.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fmock_analysis.rs?ref=57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "patch": "@@ -99,13 +99,19 @@ impl MockAnalysis {\n                 root_crate = Some(crate_graph.add_crate_root(\n                     file_id,\n                     Edition2018,\n+                    None,\n                     cfg_options,\n                     Env::default(),\n                 ));\n             } else if path.ends_with(\"/lib.rs\") {\n-                let other_crate =\n-                    crate_graph.add_crate_root(file_id, Edition2018, cfg_options, Env::default());\n                 let crate_name = path.parent().unwrap().file_name().unwrap();\n+                let other_crate = crate_graph.add_crate_root(\n+                    file_id,\n+                    Edition2018,\n+                    Some(crate_name.to_owned()),\n+                    cfg_options,\n+                    Env::default(),\n+                );\n                 if let Some(root_crate) = root_crate {\n                     crate_graph\n                         .add_dep(root_crate, CrateName::new(crate_name).unwrap(), other_crate)"}, {"sha": "b73cefd9773ec98731943b9d33cdf71f4fb276d7", "filename": "crates/ra_ide/src/parent_module.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_ide%2Fsrc%2Fparent_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fparent_module.rs?ref=57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "patch": "@@ -133,6 +133,7 @@ mod tests {\n         let crate_id = crate_graph.add_crate_root(\n             root_file,\n             Edition2018,\n+            None,\n             CfgOptions::default(),\n             Env::default(),\n         );"}, {"sha": "628cf6416a9c40af0a067ad84f8f801db8f544c9", "filename": "crates/ra_ide_db/src/change.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fchange.rs?ref=57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "patch": "@@ -5,7 +5,7 @@ use std::{fmt, sync::Arc, time};\n \n use ra_db::{\n     salsa::{Database, Durability, SweepStrategy},\n-    CrateGraph, CrateId, FileId, RelativePathBuf, SourceDatabase, SourceDatabaseExt, SourceRoot,\n+    CrateGraph, FileId, RelativePathBuf, SourceDatabase, SourceDatabaseExt, SourceRoot,\n     SourceRootId,\n };\n use ra_prof::{memory_usage, profile, Bytes};\n@@ -88,10 +88,6 @@ impl AnalysisChange {\n         self.crate_graph = Some(graph);\n     }\n \n-    pub fn set_debug_crate_name(&mut self, crate_id: CrateId, name: String) {\n-        self.debug_data.crate_names.insert(crate_id, name);\n-    }\n-\n     pub fn set_debug_root_path(&mut self, source_root_id: SourceRootId, path: String) {\n         self.debug_data.root_paths.insert(source_root_id, path);\n     }"}, {"sha": "a105c755674bc3c8cba7f9984da8d958ba02cb20", "filename": "crates/ra_ide_db/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "patch": "@@ -131,12 +131,10 @@ fn line_index(db: &impl LineIndexDatabase, file_id: FileId) -> Arc<LineIndex> {\n #[derive(Debug, Default, Clone)]\n pub(crate) struct DebugData {\n     pub(crate) root_paths: FxHashMap<SourceRootId, String>,\n-    pub(crate) crate_names: FxHashMap<CrateId, String>,\n }\n \n impl DebugData {\n     pub(crate) fn merge(&mut self, other: DebugData) {\n         self.root_paths.extend(other.root_paths.into_iter());\n-        self.crate_names.extend(other.crate_names.into_iter());\n     }\n }"}, {"sha": "37845ca56f93404453f5e2534571414fbbd31587", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "patch": "@@ -14,7 +14,7 @@ use std::{\n \n use anyhow::{bail, Context, Result};\n use ra_cfg::CfgOptions;\n-use ra_db::{CrateGraph, CrateId, CrateName, Edition, Env, FileId};\n+use ra_db::{CrateGraph, CrateName, Edition, Env, FileId};\n use rustc_hash::FxHashMap;\n use serde_json::from_reader;\n \n@@ -163,9 +163,8 @@ impl ProjectWorkspace {\n         &self,\n         default_cfg_options: &CfgOptions,\n         load: &mut dyn FnMut(&Path) -> Option<FileId>,\n-    ) -> (CrateGraph, FxHashMap<CrateId, String>) {\n+    ) -> CrateGraph {\n         let mut crate_graph = CrateGraph::default();\n-        let mut names = FxHashMap::default();\n         match self {\n             ProjectWorkspace::Json { project } => {\n                 let mut crates = FxHashMap::default();\n@@ -191,6 +190,8 @@ impl ProjectWorkspace {\n                             crate_graph.add_crate_root(\n                                 file_id,\n                                 edition,\n+                                // FIXME json definitions can store the crate name\n+                                None,\n                                 cfg_options,\n                                 Env::default(),\n                             ),\n@@ -233,11 +234,11 @@ impl ProjectWorkspace {\n                         let crate_id = crate_graph.add_crate_root(\n                             file_id,\n                             Edition::Edition2018,\n+                            Some(krate.name(&sysroot).to_string()),\n                             cfg_options,\n                             Env::default(),\n                         );\n                         sysroot_crates.insert(krate, crate_id);\n-                        names.insert(crate_id, krate.name(&sysroot).to_string());\n                     }\n                 }\n                 for from in sysroot.crates() {\n@@ -277,10 +278,10 @@ impl ProjectWorkspace {\n                             let crate_id = crate_graph.add_crate_root(\n                                 file_id,\n                                 edition,\n+                                Some(pkg.name(&cargo).to_string()),\n                                 cfg_options,\n                                 Env::default(),\n                             );\n-                            names.insert(crate_id, pkg.name(&cargo).to_string());\n                             if tgt.kind(&cargo) == TargetKind::Lib {\n                                 lib_tgt = Some(crate_id);\n                                 pkg_to_lib_crate.insert(pkg, crate_id);\n@@ -381,7 +382,7 @@ impl ProjectWorkspace {\n                 }\n             }\n         }\n-        (crate_graph, names)\n+        crate_graph\n     }\n \n     pub fn workspace_root_for(&self, path: &Path) -> Option<&Path> {"}, {"sha": "4be987860d157dff11965cb63585cbe53203087d", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "patch": "@@ -52,12 +52,11 @@ pub(crate) fn load_cargo(\n         opts\n     };\n \n-    let (crate_graph, _crate_names) =\n-        ws.to_crate_graph(&default_cfg_options, &mut |path: &Path| {\n-            let vfs_file = vfs.load(path);\n-            log::debug!(\"vfs file {:?} -> {:?}\", path, vfs_file);\n-            vfs_file.map(vfs_file_to_id)\n-        });\n+    let crate_graph = ws.to_crate_graph(&default_cfg_options, &mut |path: &Path| {\n+        let vfs_file = vfs.load(path);\n+        log::debug!(\"vfs file {:?} -> {:?}\", path, vfs_file);\n+        vfs_file.map(vfs_file_to_id)\n+    });\n     log::debug!(\"crate graph: {:?}\", crate_graph);\n \n     let source_roots = roots"}, {"sha": "c92cf137c40d9ce2be43748614ab45db71f4bea8", "filename": "crates/rust-analyzer/src/world.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57c27f91392fdd9d72fd023f4e2fecd8b68a7d09/crates%2Frust-analyzer%2Fsrc%2Fworld.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fworld.rs?ref=57c27f91392fdd9d72fd023f4e2fecd8b68a7d09", "patch": "@@ -123,13 +123,12 @@ impl WorldState {\n             let vfs_file = vfs.load(path);\n             vfs_file.map(|f| FileId(f.0))\n         };\n-        for ws in workspaces.iter() {\n-            let (graph, crate_names) = ws.to_crate_graph(&default_cfg_options, &mut load);\n-            let shift = crate_graph.extend(graph);\n-            for (crate_id, name) in crate_names {\n-                change.set_debug_crate_name(crate_id.shift(shift), name)\n-            }\n-        }\n+\n+        workspaces.iter().map(|ws| ws.to_crate_graph(&default_cfg_options, &mut load)).for_each(\n+            |graph| {\n+                crate_graph.extend(graph);\n+            },\n+        );\n         change.set_crate_graph(crate_graph);\n \n         // FIXME: Figure out the multi-workspace situation"}]}