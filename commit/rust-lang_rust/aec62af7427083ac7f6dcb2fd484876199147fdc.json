{"sha": "aec62af7427083ac7f6dcb2fd484876199147fdc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYzYyYWY3NDI3MDgzYWM3ZjZkY2IyZmQ0ODQ4NzYxOTkxNDdmZGM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-07T19:05:32Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-07T19:07:58Z"}, "message": "Solve rather subtle bug in `replace_late_bound_regions` -- we were passing the debruijn index in so that callees could construct late-bound regions at the right depth, but then the result was cached. When the cached result was used, it might be at the wrong depth.  So now we don't pass the result in and instead simply adjust the depth to match the current nesting level as we go.", "tree": {"sha": "f8662116d1ccac393c02aa29201341e6f86e091a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f8662116d1ccac393c02aa29201341e6f86e091a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aec62af7427083ac7f6dcb2fd484876199147fdc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aec62af7427083ac7f6dcb2fd484876199147fdc", "html_url": "https://github.com/rust-lang/rust/commit/aec62af7427083ac7f6dcb2fd484876199147fdc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aec62af7427083ac7f6dcb2fd484876199147fdc/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf136cd3507a5e929cff8d03179c0f6d96bdb687", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf136cd3507a5e929cff8d03179c0f6d96bdb687", "html_url": "https://github.com/rust-lang/rust/commit/cf136cd3507a5e929cff8d03179c0f6d96bdb687"}], "stats": {"total": 35, "additions": 23, "deletions": 12}, "files": [{"sha": "40f32a51e22f7fc85cad46d832db19fc3b1c99eb", "filename": "src/librustc/middle/infer/higher_ranked/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aec62af7427083ac7f6dcb2fd484876199147fdc/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec62af7427083ac7f6dcb2fd484876199147fdc/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fhigher_ranked%2Fmod.rs?ref=aec62af7427083ac7f6dcb2fd484876199147fdc", "patch": "@@ -468,7 +468,7 @@ pub fn skolemize_late_bound_regions<'a,'tcx,T>(infcx: &InferCtxt<'a,'tcx>,\n      * when higher-ranked things are involved. See `doc.rs` for more details.\n      */\n \n-    let (result, map) = ty::replace_late_bound_regions(infcx.tcx, binder, |br, _| {\n+    let (result, map) = ty::replace_late_bound_regions(infcx.tcx, binder, |br| {\n         infcx.region_vars.new_skolemized(br, &snapshot.region_vars_snapshot)\n     });\n "}, {"sha": "c1f0c10e11fe90ab66e8bf2c63c75452d3c2b04f", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aec62af7427083ac7f6dcb2fd484876199147fdc/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec62af7427083ac7f6dcb2fd484876199147fdc/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=aec62af7427083ac7f6dcb2fd484876199147fdc", "patch": "@@ -1056,7 +1056,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         ty::replace_late_bound_regions(\n             self.tcx,\n             value,\n-            |br, _| self.next_region_var(LateBoundRegion(span, br, lbrct)))\n+            |br| self.next_region_var(LateBoundRegion(span, br, lbrct)))\n     }\n \n     /// See `verify_generic_bound` method in `region_inference`"}, {"sha": "2c9ff35364b207d7f7fa495f8fa981299cab84a6", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 19, "deletions": 8, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/aec62af7427083ac7f6dcb2fd484876199147fdc/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec62af7427083ac7f6dcb2fd484876199147fdc/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=aec62af7427083ac7f6dcb2fd484876199147fdc", "patch": "@@ -6672,7 +6672,7 @@ pub fn liberate_late_bound_regions<'tcx, T>(\n {\n     replace_late_bound_regions(\n         tcx, value,\n-        |br, _| ty::ReFree(ty::FreeRegion{scope: scope, bound_region: br})).0\n+        |br| ty::ReFree(ty::FreeRegion{scope: scope, bound_region: br})).0\n }\n \n pub fn count_late_bound_regions<'tcx, T>(\n@@ -6681,7 +6681,7 @@ pub fn count_late_bound_regions<'tcx, T>(\n     -> uint\n     where T : TypeFoldable<'tcx> + Repr<'tcx>\n {\n-    let (_, skol_map) = replace_late_bound_regions(tcx, value, |_, _| ty::ReStatic);\n+    let (_, skol_map) = replace_late_bound_regions(tcx, value, |_| ty::ReStatic);\n     skol_map.len()\n }\n \n@@ -6712,7 +6712,7 @@ pub fn erase_late_bound_regions<'tcx, T>(\n     -> T\n     where T : TypeFoldable<'tcx> + Repr<'tcx>\n {\n-    replace_late_bound_regions(tcx, value, |_, _| ty::ReStatic).0\n+    replace_late_bound_regions(tcx, value, |_| ty::ReStatic).0\n }\n \n /// Rewrite any late-bound regions so that they are anonymous.  Region numbers are\n@@ -6730,9 +6730,9 @@ pub fn anonymize_late_bound_regions<'tcx, T>(\n     where T : TypeFoldable<'tcx> + Repr<'tcx>,\n {\n     let mut counter = 0;\n-    ty::Binder(replace_late_bound_regions(tcx, sig, |_, db| {\n+    ty::Binder(replace_late_bound_regions(tcx, sig, |_| {\n         counter += 1;\n-        ReLateBound(db, BrAnon(counter))\n+        ReLateBound(ty::DebruijnIndex::new(1), BrAnon(counter))\n     }).0)\n }\n \n@@ -6743,7 +6743,7 @@ pub fn replace_late_bound_regions<'tcx, T, F>(\n     mut mapf: F)\n     -> (T, FnvHashMap<ty::BoundRegion,ty::Region>)\n     where T : TypeFoldable<'tcx> + Repr<'tcx>,\n-          F : FnMut(BoundRegion, DebruijnIndex) -> ty::Region,\n+          F : FnMut(BoundRegion) -> ty::Region,\n {\n     debug!(\"replace_late_bound_regions({})\", binder.repr(tcx));\n \n@@ -6755,8 +6755,19 @@ pub fn replace_late_bound_regions<'tcx, T, F>(\n         debug!(\"region={}\", region.repr(tcx));\n         match region {\n             ty::ReLateBound(debruijn, br) if debruijn.depth == current_depth => {\n-                * map.entry(br).get().unwrap_or_else(\n-                      |vacant_entry| vacant_entry.insert(mapf(br, debruijn)))\n+                let region =\n+                    * map.entry(br).get().unwrap_or_else(\n+                        |vacant_entry| vacant_entry.insert(mapf(br)));\n+\n+                if let ty::ReLateBound(debruijn1, br) = region {\n+                    // If the callback returns a late-bound region,\n+                    // that region should always use depth 1. Then we\n+                    // adjust it to the correct depth.\n+                    assert_eq!(debruijn1.depth, 1);\n+                    ty::ReLateBound(debruijn, br)\n+                } else {\n+                    region\n+                }\n             }\n             _ => {\n                 region"}, {"sha": "0cf676b7035b47f658e29bdef7d53f2d0b6cc1a3", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aec62af7427083ac7f6dcb2fd484876199147fdc/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aec62af7427083ac7f6dcb2fd484876199147fdc/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=aec62af7427083ac7f6dcb2fd484876199147fdc", "patch": "@@ -1182,8 +1182,8 @@ impl<'tcx, T> UserString<'tcx> for ty::Binder<T>\n         // the output. We'll probably want to tweak this over time to\n         // decide just how much information to give.\n         let mut names = Vec::new();\n-        let (unbound_value, _) = ty::replace_late_bound_regions(tcx, self, |br, debruijn| {\n-            ty::ReLateBound(debruijn, match br {\n+        let (unbound_value, _) = ty::replace_late_bound_regions(tcx, self, |br| {\n+            ty::ReLateBound(ty::DebruijnIndex::new(1), match br {\n                 ty::BrNamed(_, name) => {\n                     names.push(token::get_name(name));\n                     br"}]}