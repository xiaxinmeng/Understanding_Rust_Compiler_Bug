{"sha": "90685c633357054dac6a91ecd0c14cbfc7a726a7", "node_id": "C_kwDOAAsO6NoAKDkwNjg1YzYzMzM1NzA1NGRhYzZhOTFlY2QwYzE0Y2JmYzdhNzI2YTc", "commit": {"author": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-04T20:34:24Z"}, "committer": {"name": "Miguel Guarniz", "email": "mi9uel9@gmail.com", "date": "2022-05-13T15:46:05Z"}, "message": "check def_kind before fetching item\n\nSigned-off-by: Miguel Guarniz <mi9uel9@gmail.com>", "tree": {"sha": "df8083a6c697145826e4c096b5c631de30dfc0fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df8083a6c697145826e4c096b5c631de30dfc0fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/90685c633357054dac6a91ecd0c14cbfc7a726a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/90685c633357054dac6a91ecd0c14cbfc7a726a7", "html_url": "https://github.com/rust-lang/rust/commit/90685c633357054dac6a91ecd0c14cbfc7a726a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/90685c633357054dac6a91ecd0c14cbfc7a726a7/comments", "author": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kckeiks", "id": 24687641, "node_id": "MDQ6VXNlcjI0Njg3NjQx", "avatar_url": "https://avatars.githubusercontent.com/u/24687641?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kckeiks", "html_url": "https://github.com/kckeiks", "followers_url": "https://api.github.com/users/kckeiks/followers", "following_url": "https://api.github.com/users/kckeiks/following{/other_user}", "gists_url": "https://api.github.com/users/kckeiks/gists{/gist_id}", "starred_url": "https://api.github.com/users/kckeiks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kckeiks/subscriptions", "organizations_url": "https://api.github.com/users/kckeiks/orgs", "repos_url": "https://api.github.com/users/kckeiks/repos", "events_url": "https://api.github.com/users/kckeiks/events{/privacy}", "received_events_url": "https://api.github.com/users/kckeiks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a029e2ed09b8f5dedf7265038ebdf363acb661b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a029e2ed09b8f5dedf7265038ebdf363acb661b", "html_url": "https://github.com/rust-lang/rust/commit/0a029e2ed09b8f5dedf7265038ebdf363acb661b"}], "stats": {"total": 48, "additions": 27, "deletions": 21}, "files": [{"sha": "0ded6a421f57f30b20a2b948ee8c25db1dbba214", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 27, "deletions": 21, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/90685c633357054dac6a91ecd0c14cbfc7a726a7/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/90685c633357054dac6a91ecd0c14cbfc7a726a7/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=90685c633357054dac6a91ecd0c14cbfc7a726a7", "patch": "@@ -315,15 +315,22 @@ impl<'tcx> ReachableContext<'tcx> {\n \n fn check_item<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    item: &hir::Item<'_>,\n+    id: hir::ItemId,\n     worklist: &mut Vec<LocalDefId>,\n-    access_levels: &privacy::AccessLevels\n+    access_levels: &privacy::AccessLevels,\n ) {\n-    push_to_worklist_if_has_custom_linkage(tcx, worklist, item.def_id);\n+    if has_custom_linkage(tcx, id.def_id) {\n+        worklist.push(id.def_id);\n+    }\n+\n+    if !matches!(tcx.def_kind(id.def_id), DefKind::Impl) {\n+        return;\n+    }\n \n     // We need only trait impls here, not inherent impls, and only non-exported ones\n+    let item = tcx.hir().item(id);\n     if let hir::ItemKind::Impl(hir::Impl { of_trait: Some(ref trait_ref), ref items, .. }) =\n-    item.kind\n+        item.kind\n     {\n         if !access_levels.is_reachable(item.def_id) {\n             // FIXME(#53488) remove `let`\n@@ -339,30 +346,27 @@ fn check_item<'tcx>(\n             }\n \n             worklist.extend(\n-                tcx.provided_trait_methods(trait_def_id)\n-                    .map(|assoc| assoc.def_id.expect_local()),\n+                tcx.provided_trait_methods(trait_def_id).map(|assoc| assoc.def_id.expect_local()),\n             );\n         }\n     }\n }\n \n-fn push_to_worklist_if_has_custom_linkage<'tcx>(tcx: TyCtxt<'tcx>, worklist: &mut Vec<LocalDefId>, def_id: LocalDefId) {\n+fn has_custom_linkage<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId) -> bool {\n     // Anything which has custom linkage gets thrown on the worklist no\n     // matter where it is in the crate, along with \"special std symbols\"\n     // which are currently akin to allocator symbols.\n-    if tcx.def_kind(def_id).has_codegen_attrs() {\n-        let codegen_attrs = tcx.codegen_fn_attrs(def_id);\n-        if codegen_attrs.contains_extern_indicator()\n-            || codegen_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL)\n-            // FIXME(nbdd0121): `#[used]` are marked as reachable here so it's picked up by\n-            // `linked_symbols` in cg_ssa. They won't be exported in binary or cdylib due to their\n-            // `SymbolExportLevel::Rust` export level but may end up being exported in dylibs.\n-            || codegen_attrs.flags.contains(CodegenFnAttrFlags::USED)\n-            || codegen_attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER)\n-        {\n-            worklist.push(def_id);\n-        }\n+    if !tcx.def_kind(def_id).has_codegen_attrs() {\n+        return false;\n     }\n+    let codegen_attrs = tcx.codegen_fn_attrs(def_id);\n+    codegen_attrs.contains_extern_indicator()\n+        || codegen_attrs.flags.contains(CodegenFnAttrFlags::RUSTC_STD_INTERNAL_SYMBOL)\n+        // FIXME(nbdd0121): `#[used]` are marked as reachable here so it's picked up by\n+        // `linked_symbols` in cg_ssa. They won't be exported in binary or cdylib due to their\n+        // `SymbolExportLevel::Rust` export level but may end up being exported in dylibs.\n+        || codegen_attrs.flags.contains(CodegenFnAttrFlags::USED)\n+        || codegen_attrs.flags.contains(CodegenFnAttrFlags::USED_LINKER)\n }\n \n fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> FxHashSet<LocalDefId> {\n@@ -405,11 +409,13 @@ fn reachable_set<'tcx>(tcx: TyCtxt<'tcx>, (): ()) -> FxHashSet<LocalDefId> {\n         let crate_items = tcx.hir_crate_items(());\n \n         for id in crate_items.items() {\n-            check_item(tcx, tcx.hir().item(id), &mut reachable_context.worklist, access_levels);\n+            check_item(tcx, id, &mut reachable_context.worklist, access_levels);\n         }\n \n         for id in crate_items.impl_items() {\n-            push_to_worklist_if_has_custom_linkage(tcx, &mut reachable_context.worklist, id.def_id)\n+            if has_custom_linkage(tcx, id.def_id) {\n+                reachable_context.worklist.push(id.def_id);\n+            }\n         }\n     }\n "}]}