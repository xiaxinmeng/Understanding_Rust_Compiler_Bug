{"sha": "9861bc8d5266288a7f09d6c64545a3d1c0bc7b89", "node_id": "C_kwDOAAsO6NoAKDk4NjFiYzhkNTI2NjI4OGE3ZjA5ZDZjNjQ1NDVhM2QxYzBiYzdiODk", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-18T13:35:40Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-04-23T21:03:18Z"}, "message": "Compute has_pub_restricted in the resolver.", "tree": {"sha": "db464109ce0804d3c8fec155437d8c8510fcbf7c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db464109ce0804d3c8fec155437d8c8510fcbf7c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9861bc8d5266288a7f09d6c64545a3d1c0bc7b89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9861bc8d5266288a7f09d6c64545a3d1c0bc7b89", "html_url": "https://github.com/rust-lang/rust/commit/9861bc8d5266288a7f09d6c64545a3d1c0bc7b89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9861bc8d5266288a7f09d6c64545a3d1c0bc7b89/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88de3e52e40e85fcfff579efa17be64432a61544", "url": "https://api.github.com/repos/rust-lang/rust/commits/88de3e52e40e85fcfff579efa17be64432a61544", "html_url": "https://github.com/rust-lang/rust/commit/88de3e52e40e85fcfff579efa17be64432a61544"}], "stats": {"total": 25, "additions": 13, "deletions": 12}, "files": [{"sha": "ec416722c214e6018bc9f566c7e2aa065292b4c4", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9861bc8d5266288a7f09d6c64545a3d1c0bc7b89/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9861bc8d5266288a7f09d6c64545a3d1c0bc7b89/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=9861bc8d5266288a7f09d6c64545a3d1c0bc7b89", "patch": "@@ -131,6 +131,8 @@ pub struct ResolverOutputs {\n     pub definitions: rustc_hir::definitions::Definitions,\n     pub cstore: Box<CrateStoreDyn>,\n     pub visibilities: FxHashMap<LocalDefId, Visibility>,\n+    /// This field is used to decide whether we should make `PRIVATE_IN_PUBLIC` a hard error.\n+    pub has_pub_restricted: bool,\n     pub access_levels: AccessLevels,\n     pub extern_crate_map: FxHashMap<LocalDefId, CrateNum>,\n     pub maybe_unused_trait_imports: FxHashSet<LocalDefId>,"}, {"sha": "5f9a03575575c6ad9767be7764e4ce6d82899083", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9861bc8d5266288a7f09d6c64545a3d1c0bc7b89/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9861bc8d5266288a7f09d6c64545a3d1c0bc7b89/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=9861bc8d5266288a7f09d6c64545a3d1c0bc7b89", "patch": "@@ -1661,7 +1661,6 @@ struct SearchInterfaceForPrivateItemsVisitor<'tcx> {\n     item_def_id: LocalDefId,\n     /// The visitor checks that each component type is at least this visible.\n     required_visibility: ty::Visibility,\n-    has_pub_restricted: bool,\n     has_old_errors: bool,\n     in_assoc_ty: bool,\n }\n@@ -1750,7 +1749,10 @@ impl SearchInterfaceForPrivateItemsVisitor<'_> {\n             };\n             let make_msg = || format!(\"{} {} `{}` in public interface\", vis_descr, kind, descr);\n             let span = self.tcx.def_span(self.item_def_id.to_def_id());\n-            if self.has_pub_restricted || self.has_old_errors || self.in_assoc_ty {\n+            if self.has_old_errors\n+                || self.in_assoc_ty\n+                || self.tcx.resolutions(()).has_pub_restricted\n+            {\n                 let mut err = if kind == \"trait\" {\n                     struct_span_err!(self.tcx.sess, span, E0445, \"{}\", make_msg())\n                 } else {\n@@ -1809,7 +1811,6 @@ impl<'tcx> DefIdVisitor<'tcx> for SearchInterfaceForPrivateItemsVisitor<'tcx> {\n \n struct PrivateItemsInPublicInterfacesVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    has_pub_restricted: bool,\n     old_error_set_ancestry: LocalDefIdSet,\n }\n \n@@ -1823,7 +1824,6 @@ impl<'tcx> PrivateItemsInPublicInterfacesVisitor<'tcx> {\n             tcx: self.tcx,\n             item_def_id: def_id,\n             required_visibility,\n-            has_pub_restricted: self.has_pub_restricted,\n             has_old_errors: self.old_error_set_ancestry.contains(&def_id),\n             in_assoc_ty: false,\n         }\n@@ -2061,13 +2061,6 @@ fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {\n     };\n     tcx.hir().walk_toplevel_module(&mut visitor);\n \n-    let has_pub_restricted = tcx.resolutions(()).visibilities.iter().any(|(&def_id, &v)| match v {\n-        ty::Visibility::Public | ty::Visibility::Invisible => false,\n-        ty::Visibility::Restricted(module) => {\n-            module != tcx.parent_module_from_def_id(def_id).to_def_id()\n-        }\n-    });\n-\n     let mut old_error_set_ancestry = HirIdSet::default();\n     for mut id in visitor.old_error_set.iter().copied() {\n         loop {\n@@ -2085,7 +2078,6 @@ fn check_private_in_public(tcx: TyCtxt<'_>, (): ()) {\n     // Check for private types and traits in public interfaces.\n     let mut visitor = PrivateItemsInPublicInterfacesVisitor {\n         tcx,\n-        has_pub_restricted,\n         // Only definition IDs are ever searched in `old_error_set_ancestry`,\n         // so we can filter away all non-definition IDs at this point.\n         old_error_set_ancestry: old_error_set_ancestry"}, {"sha": "291b6645d9aa6d00a185cf9364e83f2908a46e22", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9861bc8d5266288a7f09d6c64545a3d1c0bc7b89/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9861bc8d5266288a7f09d6c64545a3d1c0bc7b89/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=9861bc8d5266288a7f09d6c64545a3d1c0bc7b89", "patch": "@@ -265,6 +265,8 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 })\n             }\n             ast::VisibilityKind::Restricted { ref path, id, .. } => {\n+                // Make `PRIVATE_IN_PUBLIC` lint a hard error.\n+                self.r.has_pub_restricted = true;\n                 // For visibilities we are not ready to provide correct implementation of \"uniform\n                 // paths\" right now, so on 2018 edition we only allow module-relative paths for now.\n                 // On 2015 edition visibilities are resolved as crate-relative by default,"}, {"sha": "cca1f1025866863465fae0b73fd465019ac6bfef", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9861bc8d5266288a7f09d6c64545a3d1c0bc7b89/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9861bc8d5266288a7f09d6c64545a3d1c0bc7b89/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=9861bc8d5266288a7f09d6c64545a3d1c0bc7b89", "patch": "@@ -934,6 +934,7 @@ pub struct Resolver<'a> {\n     glob_map: FxHashMap<LocalDefId, FxHashSet<Symbol>>,\n     /// Visibilities in \"lowered\" form, for all entities that have them.\n     visibilities: FxHashMap<LocalDefId, ty::Visibility>,\n+    has_pub_restricted: bool,\n     used_imports: FxHashSet<NodeId>,\n     maybe_unused_trait_imports: FxHashSet<LocalDefId>,\n     maybe_unused_extern_crates: Vec<(LocalDefId, Span)>,\n@@ -1313,6 +1314,7 @@ impl<'a> Resolver<'a> {\n \n             glob_map: Default::default(),\n             visibilities,\n+            has_pub_restricted: false,\n             used_imports: FxHashSet::default(),\n             maybe_unused_trait_imports: Default::default(),\n             maybe_unused_extern_crates: Vec::new(),\n@@ -1423,6 +1425,7 @@ impl<'a> Resolver<'a> {\n         let proc_macros = self.proc_macros.iter().map(|id| self.local_def_id(*id)).collect();\n         let definitions = self.definitions;\n         let visibilities = self.visibilities;\n+        let has_pub_restricted = self.has_pub_restricted;\n         let extern_crate_map = self.extern_crate_map;\n         let reexport_map = self.reexport_map;\n         let maybe_unused_trait_imports = self.maybe_unused_trait_imports;\n@@ -1435,6 +1438,7 @@ impl<'a> Resolver<'a> {\n             definitions,\n             cstore: Box::new(self.crate_loader.into_cstore()),\n             visibilities,\n+            has_pub_restricted,\n             access_levels,\n             extern_crate_map,\n             reexport_map,\n@@ -1461,6 +1465,7 @@ impl<'a> Resolver<'a> {\n             access_levels: self.access_levels.clone(),\n             cstore: Box::new(self.cstore().clone()),\n             visibilities: self.visibilities.clone(),\n+            has_pub_restricted: self.has_pub_restricted,\n             extern_crate_map: self.extern_crate_map.clone(),\n             reexport_map: self.reexport_map.clone(),\n             glob_map: self.glob_map.clone(),"}]}