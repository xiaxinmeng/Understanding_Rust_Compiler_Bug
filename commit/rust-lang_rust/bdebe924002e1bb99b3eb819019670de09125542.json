{"sha": "bdebe924002e1bb99b3eb819019670de09125542", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkZWJlOTI0MDAyZTFiYjk5YjNlYjgxOTAxOTY3MGRlMDkxMjU1NDI=", "commit": {"author": {"name": "Jyun-Yan You", "email": "jyyou@cs.nctu.edu.tw", "date": "2012-05-03T05:59:44Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-03T16:43:00Z"}, "message": "add forgotten index and fix array type", "tree": {"sha": "1a3f6550f07c66cd19ec0a9874514b9e1ebc3879", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a3f6550f07c66cd19ec0a9874514b9e1ebc3879"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bdebe924002e1bb99b3eb819019670de09125542", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bdebe924002e1bb99b3eb819019670de09125542", "html_url": "https://github.com/rust-lang/rust/commit/bdebe924002e1bb99b3eb819019670de09125542", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bdebe924002e1bb99b3eb819019670de09125542/comments", "author": {"login": "crabtw", "id": 36015, "node_id": "MDQ6VXNlcjM2MDE1", "avatar_url": "https://avatars.githubusercontent.com/u/36015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crabtw", "html_url": "https://github.com/crabtw", "followers_url": "https://api.github.com/users/crabtw/followers", "following_url": "https://api.github.com/users/crabtw/following{/other_user}", "gists_url": "https://api.github.com/users/crabtw/gists{/gist_id}", "starred_url": "https://api.github.com/users/crabtw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crabtw/subscriptions", "organizations_url": "https://api.github.com/users/crabtw/orgs", "repos_url": "https://api.github.com/users/crabtw/repos", "events_url": "https://api.github.com/users/crabtw/events{/privacy}", "received_events_url": "https://api.github.com/users/crabtw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d0d71838cdf1bdcb7c61c8dc62c3409545b850ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/d0d71838cdf1bdcb7c61c8dc62c3409545b850ae", "html_url": "https://github.com/rust-lang/rust/commit/d0d71838cdf1bdcb7c61c8dc62c3409545b850ae"}], "stats": {"total": 34, "additions": 18, "deletions": 16}, "files": [{"sha": "9143d4a5a8b1352c76308220864f45e0df9ccdb9", "filename": "src/rustc/middle/trans/native.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bdebe924002e1bb99b3eb819019670de09125542/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bdebe924002e1bb99b3eb819019670de09125542/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fnative.rs?ref=bdebe924002e1bb99b3eb819019670de09125542", "patch": "@@ -163,7 +163,7 @@ fn classify_ty(ty: TypeRef) -> [x86_64_reg_class] {\n     }\n \n     fn classify(ty: TypeRef,\n-                cls: [mut x86_64_reg_class], i: uint,\n+                cls: [mut x86_64_reg_class], ix: uint,\n                 off: uint) {\n         let t_align = ty_align(ty);\n         let t_size = ty_size(ty);\n@@ -173,7 +173,7 @@ fn classify_ty(ty: TypeRef) -> [x86_64_reg_class] {\n             let mut i = off / 8u;\n             let e = (off + t_size + 7u) / 8u;\n             while i < e {\n-                unify(cls, i, memory_class);\n+                unify(cls, ix + i, memory_class);\n                 i += 1u;\n             }\n             ret;\n@@ -182,30 +182,30 @@ fn classify_ty(ty: TypeRef) -> [x86_64_reg_class] {\n         alt llvm::LLVMGetTypeKind(ty) as int {\n             8 /* integer */ |\n             12 /* pointer */ {\n-                unify(cls, off / 8u, integer_class);\n+                unify(cls, ix + off / 8u, integer_class);\n             }\n             2 /* float */ {\n                 if off % 8u == 4u {\n-                    unify(cls, off / 8u, sse_fv_class);\n+                    unify(cls, ix + off / 8u, sse_fv_class);\n                 } else {\n-                    unify(cls, off / 8u, sse_fs_class);\n+                    unify(cls, ix + off / 8u, sse_fs_class);\n                 }\n             }\n             3 /* double */ {\n-                unify(cls, off / 8u, sse_ds_class);\n+                unify(cls, ix + off / 8u, sse_ds_class);\n             }\n             10 /* struct */ {\n-                classify_struct(struct_tys(ty), cls, i, off);\n+                classify_struct(struct_tys(ty), cls, ix, off);\n             }\n             11 /* array */ {\n-              // FIXME: I HAVE NO IDEA WHAT I AM DOING THIS MUST BE WRONG\n-              let len = llvm::LLVMGetArrayLength(ty) as uint;\n-              if len == 0u {\n-              } else {\n-                  let elt = llvm::LLVMGetElementType(ty);\n-                  let tys = vec::from_elem(len, elt);\n-                  classify_struct(tys, cls, i, off);\n-              }\n+                let elt = llvm::LLVMGetElementType(ty);\n+                let eltsz = ty_size(elt);\n+                let len = llvm::LLVMGetArrayLength(ty) as uint;\n+                let mut i = 0u;\n+                while i < len {\n+                    classify(elt, cls, ix, off + i * eltsz);\n+                    i += 1u;\n+                }\n             }\n             _ {\n                 fail \"classify: unhandled type\";\n@@ -215,9 +215,11 @@ fn classify_ty(ty: TypeRef) -> [x86_64_reg_class] {\n \n     fn fixup(ty: TypeRef, cls: [mut x86_64_reg_class]) {\n         let mut i = 0u;\n+        let llty = llvm::LLVMGetTypeKind(ty) as int;\n         let e = vec::len(cls);\n         if vec::len(cls) > 2u &&\n-           llvm::LLVMGetTypeKind(ty) as int == 10 /* struct */ {\n+           (llty == 10 /* struct */ ||\n+            llty == 11 /* array */) {\n             if is_sse(cls[i]) {\n                 i += 1u;\n                 while i < e {"}]}