{"sha": "5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMWJjNGJhOTRjZGJiNDAzMzg4Y2Q3YzViNDVmNWVjZjRjY2Q5MjI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-17T15:09:09Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-08-17T16:22:46Z"}, "message": "make another test more robust against random alignment", "tree": {"sha": "81aadc929ddf3a61abdf3b85749223ef172600fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/81aadc929ddf3a61abdf3b85749223ef172600fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922", "html_url": "https://github.com/rust-lang/rust/commit/5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db159b8709dac1cb8adeac91c3257906e55319ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/db159b8709dac1cb8adeac91c3257906e55319ec", "html_url": "https://github.com/rust-lang/rust/commit/db159b8709dac1cb8adeac91c3257906e55319ec"}], "stats": {"total": 70, "additions": 40, "deletions": 30}, "files": [{"sha": "e4d7621b8b125d278e4a835916b24b74b70242ea", "filename": "tests/compile-fail/unaligned_pointers/alignment.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922/tests%2Fcompile-fail%2Funaligned_pointers%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922/tests%2Fcompile-fail%2Funaligned_pointers%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Falignment.rs?ref=5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922", "patch": "@@ -1,11 +1,11 @@\n+// error-pattern: but alignment 4 is required\n+\n fn main() {\n     let mut x = [0u8; 20];\n     let x_ptr: *mut u8 = x.as_mut_ptr();\n     // At least one of these is definitely unaligned.\n-    // Currently, we guarantee to complain about the first one already (https://github.com/rust-lang/miri/issues/1074).\n     unsafe {\n-        *(x_ptr as *mut u64) = 42; //~ ERROR accessing memory with alignment 1, but alignment\n-        *(x_ptr.add(1) as *mut u64) = 42;\n+        *(x_ptr as *mut u32) = 42;\n+        *(x_ptr.add(1) as *mut u32) = 42;\n     }\n-    panic!(\"unreachable in miri\");\n }"}, {"sha": "998394c6c70cce11eeac1db27969b0ca3439b413", "filename": "tests/compile-fail/unaligned_pointers/reference_to_packed.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922/tests%2Fcompile-fail%2Funaligned_pointers%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922/tests%2Fcompile-fail%2Funaligned_pointers%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Freference_to_packed.rs?ref=5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922", "patch": "@@ -10,10 +10,12 @@ struct Foo {\n }\n \n fn main() {\n-    let foo = Foo {\n-        x: 42,\n-        y: 99,\n-    };\n-    let p = unsafe { &foo.x };\n-    let i = *p; //~ ERROR alignment 4 is required\n+    for _ in 0..10 { // Try many times as this might work by chance.\n+        let foo = Foo {\n+            x: 42,\n+            y: 99,\n+        };\n+        let p = unsafe { &foo.x };\n+        let i = *p; //~ ERROR alignment 4 is required\n+    }\n }"}, {"sha": "43e6fd67d2460c0c350f6532f27450be0722f66b", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr1.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr1.rs?ref=5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922", "patch": "@@ -2,8 +2,10 @@\n // compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n fn main() {\n-    let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n-    let x = &x[0] as *const _ as *const u32;\n-    // This must fail because alignment is violated: the allocation's base is not sufficiently aligned.\n-    let _x = unsafe { *x }; //~ ERROR memory with alignment 2, but alignment 4 is required\n+    for _ in 0..10 { // Try many times as this might work by chance.\n+        let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n+        let x = &x[0] as *const _ as *const u32;\n+        // This must fail because alignment is violated: the allocation's base is not sufficiently aligned.\n+        let _x = unsafe { *x }; //~ ERROR memory with alignment 2, but alignment 4 is required\n+    }\n }"}, {"sha": "f4ed8d47b53f1a70edbe3b85ee9c5e75710d6388", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr2.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr2.rs?ref=5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922", "patch": "@@ -2,9 +2,11 @@\n // compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n fn main() {\n-    let x = [2u32, 3]; // Make it big enough so we don't get an out-of-bounds error.\n-    let x = (x.as_ptr() as *const u8).wrapping_offset(3) as *const u32;\n-    // This must fail because alignment is violated: the offset is not sufficiently aligned.\n-    // Also make the offset not a power of 2, that used to ICE.\n-    let _x = unsafe { *x }; //~ ERROR memory with alignment 1, but alignment 4 is required\n+    for _ in 0..10 { // Try many times as this might work by chance.\n+        let x = [2u32, 3]; // Make it big enough so we don't get an out-of-bounds error.\n+        let x = (x.as_ptr() as *const u8).wrapping_offset(3) as *const u32;\n+        // This must fail because alignment is violated: the offset is not sufficiently aligned.\n+        // Also make the offset not a power of 2, that used to ICE.\n+        let _x = unsafe { *x }; //~ ERROR memory with alignment 1, but alignment 4 is required\n+    }\n }"}, {"sha": "61c2a3cde8948c73ae186446a6306dd5b6933a3b", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr3.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr3.rs?ref=5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922", "patch": "@@ -2,10 +2,12 @@\n // compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n fn main() {\n-    let x = [2u16, 3, 4, 5]; // Make it big enough so we don't get an out-of-bounds error.\n-    let x = &x[0] as *const _ as *const *const u8; // cast to ptr-to-ptr, so that we load a ptr\n-    // This must fail because alignment is violated. Test specifically for loading pointers,\n-    // which have special code in miri's memory.\n-    let _x = unsafe { *x };\n-    //~^ ERROR memory with alignment 2, but alignment\n+    for _ in 0..10 { // Try many times as this might work by chance.\n+        let x = [2u16, 3, 4, 5]; // Make it big enough so we don't get an out-of-bounds error.\n+        let x = &x[0] as *const _ as *const *const u8; // cast to ptr-to-ptr, so that we load a ptr\n+        // This must fail because alignment is violated. Test specifically for loading pointers,\n+        // which have special code in miri's memory.\n+        let _x = unsafe { *x };\n+        //~^ ERROR but alignment\n+    }\n }"}, {"sha": "88e2634efaf61642b878261c91a1e9861ba275df", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr_addr_of.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs?ref=5b1bc4ba94cdbb403388cd7c5b45f5ecf4ccd922", "patch": "@@ -4,9 +4,11 @@\n use std::ptr;\n \n fn main() {\n-    let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n-    let x = &x[0] as *const _ as *const u32;\n-    // This must fail because alignment is violated: the allocation's base is not sufficiently aligned.\n-    // The deref is UB even if we just put the result into a raw pointer.\n-    let _x = unsafe { ptr::raw_const!(*x) }; //~ ERROR memory with alignment 2, but alignment 4 is required\n+    for _ in 0..10 { // Try many times as this might work by chance.\n+        let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n+        let x = &x[0] as *const _ as *const u32;\n+        // This must fail because alignment is violated: the allocation's base is not sufficiently aligned.\n+        // The deref is UB even if we just put the result into a raw pointer.\n+        let _x = unsafe { ptr::raw_const!(*x) }; //~ ERROR memory with alignment 2, but alignment 4 is required\n+    }\n }"}]}