{"sha": "8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmODM1ZDQyZDdmNzA5MGFiNjQwOGE5YWE2MzE2YTBmOGYyMWYzZjM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-29T19:51:55Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-31T00:10:21Z"}, "message": "std: Remove get_task function. Unused", "tree": {"sha": "9a2b7dc1aa803f3ca3d86c1179413ce426213fb1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a2b7dc1aa803f3ca3d86c1179413ce426213fb1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3", "html_url": "https://github.com/rust-lang/rust/commit/8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "81dda9d9cb5a8e472509c6f335acc81083d74b91", "url": "https://api.github.com/repos/rust-lang/rust/commits/81dda9d9cb5a8e472509c6f335acc81083d74b91", "html_url": "https://github.com/rust-lang/rust/commit/81dda9d9cb5a8e472509c6f335acc81083d74b91"}], "stats": {"total": 38, "additions": 13, "deletions": 25}, "files": [{"sha": "5673e10062550df3d5f05a6f077fa77f62e1f17b", "filename": "src/libstd/task/mod.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3/src%2Flibstd%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3/src%2Flibstd%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fmod.rs?ref=8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3", "patch": "@@ -44,7 +44,6 @@ use result::Result;\n use result;\n use rt::{context, OldTaskContext, TaskContext};\n use rt::local::Local;\n-use task::rt::task_id;\n use unstable::finally::Finally;\n use util;\n \n@@ -58,12 +57,6 @@ mod local_data_priv;\n pub mod rt;\n pub mod spawn;\n \n-/// A handle to a task\n-#[deriving(Eq)]\n-pub enum Task {\n-    TaskHandle(task_id)\n-}\n-\n /**\n  * Indicates the manner in which a task exited.\n  *\n@@ -570,14 +563,6 @@ pub fn failing() -> bool {\n     }\n }\n \n-pub fn get_task() -> Task {\n-    //! Get a handle to the running task\n-\n-    unsafe {\n-        TaskHandle(rt::get_task_id())\n-    }\n-}\n-\n /**\n  * Temporarily make the task unkillable\n  *"}, {"sha": "6e7ba16ac0b77d2b8f8a8493d6a2b2774426a262", "filename": "src/test/compile-fail/fully-qualified-type-name4.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffully-qualified-type-name4.rs?ref=8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3", "patch": "@@ -10,11 +10,11 @@\n \n // Test that we use fully-qualified type names in error messages.\n \n-use std::task::Task;\n+use std::option::Option;\n \n-fn bar(x: uint) -> Task {\n+fn bar(x: uint) -> Option<uint> {\n     return x;\n-    //~^ ERROR mismatched types: expected `std::task::Task`\n+    //~^ ERROR mismatched types: expected `std::option::Option<uint>`\n }\n \n fn main() {"}, {"sha": "fbd06c5e9cea1da42ef55ef707859df5ec11d3fd", "filename": "src/test/run-pass/issue-2718.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3/src%2Ftest%2Frun-pass%2Fissue-2718.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2718.rs?ref=8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3", "patch": "@@ -12,16 +12,19 @@\n \n use std::util;\n \n+pub type Task = int;\n+\n // tjc: I don't know why\n pub mod pipes {\n+    use super::Task;\n     use std::cast::{forget, transmute};\n     use std::cast;\n     use std::task;\n     use std::util;\n \n     pub struct Stuff<T> {\n         state: state,\n-        blocked_task: Option<task::Task>,\n+        blocked_task: Option<Task>,\n         payload: Option<T>\n     }\n \n@@ -35,15 +38,15 @@ pub mod pipes {\n \n     pub struct packet<T> {\n         state: state,\n-        blocked_task: Option<task::Task>,\n+        blocked_task: Option<Task>,\n         payload: Option<T>\n     }\n \n     pub fn packet<T:Send>() -> *packet<T> {\n         unsafe {\n             let p: *packet<T> = cast::transmute(~Stuff{\n                 state: empty,\n-                blocked_task: None::<task::Task>,\n+                blocked_task: None::<Task>,\n                 payload: None::<T>\n             });\n             p"}, {"sha": "c811e548f3fb18f0226b94baba937a32634ea43e", "filename": "src/test/run-pass/task-killjoin-rsrc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftask-killjoin-rsrc.rs?ref=8f835d42d7f7090ab6408a9aa6316a0f8f21f3f3", "patch": "@@ -27,7 +27,7 @@ impl Drop for notify {\n     fn drop(&self) {\n         unsafe {\n             error!(\"notify: task=%? v=%x unwinding=%b b=%b\",\n-                   task::get_task(),\n+                   0,\n                    ptr::to_unsafe_ptr(&(*(self.v))) as uint,\n                    task::failing(),\n                    *(self.v));\n@@ -48,7 +48,7 @@ fn joinable(f: ~fn()) -> Port<bool> {\n     fn wrapper(c: Chan<bool>, f: &fn()) {\n         let b = @mut false;\n         error!(\"wrapper: task=%? allocated v=%x\",\n-               task::get_task(),\n+               0,\n                ptr::to_unsafe_ptr(&(*b)) as uint);\n         let _r = notify(c, b);\n         f();\n@@ -71,13 +71,13 @@ fn supervised() {\n     // Yield to make sure the supervisor joins before we\n     // fail. This is currently not needed because the supervisor\n     // runs first, but I can imagine that changing.\n-    error!(\"supervised task=%?\", task::get_task);\n+    error!(\"supervised task=%?\", 0);\n     task::yield();\n     fail!();\n }\n \n fn supervisor() {\n-    error!(\"supervisor task=%?\", task::get_task());\n+    error!(\"supervisor task=%?\", 0);\n     let t = joinable(supervised);\n     join(t);\n }"}]}