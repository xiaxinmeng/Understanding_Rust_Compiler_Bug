{"sha": "fbb92767801cd289ab0c62c81db172ce104b023e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiYjkyNzY3ODAxY2QyODlhYjBjNjJjODFkYjE3MmNlMTA0YjAyM2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-03T08:32:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-03T08:32:58Z"}, "message": "Auto merge of #42331 - retep998:standard-relocation-coupon, r=alexcrichton\n\nImprove reallocation in alloc_system on Windows\n\nFixes https://github.com/rust-lang/rust/issues/42025", "tree": {"sha": "e7a02b6b23307253d91a75166421991494ddd6db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7a02b6b23307253d91a75166421991494ddd6db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbb92767801cd289ab0c62c81db172ce104b023e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbb92767801cd289ab0c62c81db172ce104b023e", "html_url": "https://github.com/rust-lang/rust/commit/fbb92767801cd289ab0c62c81db172ce104b023e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbb92767801cd289ab0c62c81db172ce104b023e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6165203c48420c6f77ea22113eb4ff66931410c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/6165203c48420c6f77ea22113eb4ff66931410c3", "html_url": "https://github.com/rust-lang/rust/commit/6165203c48420c6f77ea22113eb4ff66931410c3"}, {"sha": "42ac31182bab6735cfe9ad77d8f4292fad51bfa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/42ac31182bab6735cfe9ad77d8f4292fad51bfa8", "html_url": "https://github.com/rust-lang/rust/commit/42ac31182bab6735cfe9ad77d8f4292fad51bfa8"}], "stats": {"total": 54, "additions": 37, "deletions": 17}, "files": [{"sha": "1f36bc4fbcea73043049bdfb013378c22b3041b6", "filename": "src/liballoc_system/lib.rs", "status": "modified", "additions": 20, "deletions": 17, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/fbb92767801cd289ab0c62c81db172ce104b023e/src%2Fliballoc_system%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb92767801cd289ab0c62c81db172ce104b023e/src%2Fliballoc_system%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_system%2Flib.rs?ref=fbb92767801cd289ab0c62c81db172ce104b023e", "patch": "@@ -171,6 +171,8 @@ mod imp {\n #[cfg(windows)]\n #[allow(bad_style)]\n mod imp {\n+    use core::cmp::min;\n+    use core::ptr::copy_nonoverlapping;\n     use MIN_ALIGN;\n \n     type LPVOID = *mut u8;\n@@ -225,19 +227,16 @@ mod imp {\n         allocate_with_flags(size, align, HEAP_ZERO_MEMORY)\n     }\n \n-    pub unsafe fn reallocate(ptr: *mut u8, _old_size: usize, size: usize, align: usize) -> *mut u8 {\n+    pub unsafe fn reallocate(ptr: *mut u8, old_size: usize, size: usize, align: usize) -> *mut u8 {\n         if align <= MIN_ALIGN {\n             HeapReAlloc(GetProcessHeap(), 0, ptr as LPVOID, size as SIZE_T) as *mut u8\n         } else {\n-            let header = get_header(ptr);\n-            let new = HeapReAlloc(GetProcessHeap(),\n-                                  0,\n-                                  header.0 as LPVOID,\n-                                  (size + align) as SIZE_T) as *mut u8;\n-            if new.is_null() {\n-                return new;\n+            let new = allocate(size, align);\n+            if !new.is_null() {\n+                copy_nonoverlapping(ptr, new, min(size, old_size));\n+                deallocate(ptr, old_size, align);\n             }\n-            align_ptr(new, align)\n+            new\n         }\n     }\n \n@@ -246,15 +245,19 @@ mod imp {\n                                      size: usize,\n                                      align: usize)\n                                      -> usize {\n-        if align <= MIN_ALIGN {\n-            let new = HeapReAlloc(GetProcessHeap(),\n-                                  HEAP_REALLOC_IN_PLACE_ONLY,\n-                                  ptr as LPVOID,\n-                                  size as SIZE_T) as *mut u8;\n-            if new.is_null() { old_size } else { size }\n+        let new = if align <= MIN_ALIGN {\n+            HeapReAlloc(GetProcessHeap(),\n+                        HEAP_REALLOC_IN_PLACE_ONLY,\n+                        ptr as LPVOID,\n+                        size as SIZE_T) as *mut u8\n         } else {\n-            old_size\n-        }\n+            let header = get_header(ptr);\n+            HeapReAlloc(GetProcessHeap(),\n+                        HEAP_REALLOC_IN_PLACE_ONLY,\n+                        header.0 as LPVOID,\n+                        size + align as SIZE_T) as *mut u8\n+        };\n+        if new.is_null() { old_size } else { size }\n     }\n \n     pub unsafe fn deallocate(ptr: *mut u8, _old_size: usize, align: usize) {"}, {"sha": "5f5217b73c2596ee2ff6de6e23c643cab30be58f", "filename": "src/libcollections/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fbb92767801cd289ab0c62c81db172ce104b023e/src%2Flibcollections%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb92767801cd289ab0c62c81db172ce104b023e/src%2Flibcollections%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Flib.rs?ref=fbb92767801cd289ab0c62c81db172ce104b023e", "patch": "@@ -10,6 +10,7 @@\n \n #![deny(warnings)]\n \n+#![feature(attr_literals)]\n #![feature(box_syntax)]\n #![feature(inclusive_range_syntax)]\n #![feature(collection_placement)]\n@@ -20,6 +21,7 @@\n #![feature(pattern)]\n #![feature(placement_in_syntax)]\n #![feature(rand)]\n+#![feature(repr_align)]\n #![feature(slice_rotate)]\n #![feature(splice)]\n #![feature(str_escape)]"}, {"sha": "fdf453b39cf5d9144c21cf9c4091af7c41c44312", "filename": "src/libcollections/tests/vec.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/fbb92767801cd289ab0c62c81db172ce104b023e/src%2Flibcollections%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbb92767801cd289ab0c62c81db172ce104b023e/src%2Flibcollections%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftests%2Fvec.rs?ref=fbb92767801cd289ab0c62c81db172ce104b023e", "patch": "@@ -781,3 +781,18 @@ fn from_into_inner() {\n     assert_eq!(vec, [2, 3]);\n     assert!(ptr != vec.as_ptr());\n }\n+\n+#[test]\n+fn overaligned_allocations() {\n+    #[repr(align(256))]\n+    struct Foo(usize);\n+    let mut v = vec![Foo(273)];\n+    for i in 0..0x1000 {\n+        v.reserve_exact(i);\n+        assert!(v[0].0 == 273);\n+        assert!(v.as_ptr() as usize & 0xff == 0);\n+        v.shrink_to_fit();\n+        assert!(v[0].0 == 273);\n+        assert!(v.as_ptr() as usize & 0xff == 0);\n+    }\n+}"}]}