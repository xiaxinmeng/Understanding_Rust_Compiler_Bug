{"sha": "d3444779e6776025ee19202c5e69964abde90374", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNDQ0Nzc5ZTY3NzYwMjVlZTE5MjAyYzVlNjk5NjRhYmRlOTAzNzQ=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2014-09-29T07:28:50Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@palantir.com", "date": "2014-09-30T19:52:47Z"}, "message": "Fix libnative", "tree": {"sha": "ff2c8c27ce14ac9a02fcc76c30bf20e728409a95", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff2c8c27ce14ac9a02fcc76c30bf20e728409a95"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d3444779e6776025ee19202c5e69964abde90374", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d3444779e6776025ee19202c5e69964abde90374", "html_url": "https://github.com/rust-lang/rust/commit/d3444779e6776025ee19202c5e69964abde90374", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d3444779e6776025ee19202c5e69964abde90374/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "efbb15d59ceb3dfbf4d7e4e778c815dd8d8f52cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/efbb15d59ceb3dfbf4d7e4e778c815dd8d8f52cf", "html_url": "https://github.com/rust-lang/rust/commit/efbb15d59ceb3dfbf4d7e4e778c815dd8d8f52cf"}], "stats": {"total": 138, "additions": 68, "deletions": 70}, "files": [{"sha": "2601d493443a17099ab64da5652a23a39029aa08", "filename": "src/libnative/io/c_unix.rs", "status": "modified", "additions": 43, "deletions": 42, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/d3444779e6776025ee19202c5e69964abde90374/src%2Flibnative%2Fio%2Fc_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3444779e6776025ee19202c5e69964abde90374/src%2Flibnative%2Fio%2Fc_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fc_unix.rs?ref=d3444779e6776025ee19202c5e69964abde90374", "patch": "@@ -19,41 +19,42 @@ pub use self::signal::{SA_NODEFER, SA_NOCLDWAIT, SA_SIGINFO, SIGCHLD};\n \n use libc;\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"macos\",\n+          target_os = \"ios\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\"))]\n pub static FIONBIO: libc::c_ulong = 0x8004667e;\n-#[cfg(target_os = \"linux\", target_arch = \"x86\")]\n-#[cfg(target_os = \"linux\", target_arch = \"x86_64\")]\n-#[cfg(target_os = \"linux\", target_arch = \"arm\")]\n-#[cfg(target_os = \"android\")]\n+#[cfg(any(all(target_os = \"linux\",\n+              any(target_arch = \"x86\",\n+                  target_arch = \"x86_64\",\n+                  target_arch = \"arm\")),\n+          target_os = \"android\"))]\n pub static FIONBIO: libc::c_ulong = 0x5421;\n-#[cfg(target_os = \"linux\", target_arch = \"mips\")]\n-#[cfg(target_os = \"linux\", target_arch = \"mipsel\")]\n+#[cfg(all(target_os = \"linux\",\n+          any(target_arch = \"mips\", target_arch = \"mipsel\")))]\n pub static FIONBIO: libc::c_ulong = 0x667e;\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"macos\",\n+          target_os = \"ios\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\"))]\n pub static FIOCLEX: libc::c_ulong = 0x20006601;\n-#[cfg(target_os = \"linux\", target_arch = \"x86\")]\n-#[cfg(target_os = \"linux\", target_arch = \"x86_64\")]\n-#[cfg(target_os = \"linux\", target_arch = \"arm\")]\n-#[cfg(target_os = \"android\")]\n+#[cfg(any(all(target_os = \"linux\",\n+              any(target_arch = \"x86\",\n+                  target_arch = \"x86_64\",\n+                  target_arch = \"arm\")),\n+          target_os = \"android\"))]\n pub static FIOCLEX: libc::c_ulong = 0x5451;\n-#[cfg(target_os = \"linux\", target_arch = \"mips\")]\n-#[cfg(target_os = \"linux\", target_arch = \"mipsel\")]\n+#[cfg(all(target_os = \"linux\",\n+          any(target_arch = \"mips\", target_arch = \"mipsel\")))]\n pub static FIOCLEX: libc::c_ulong = 0x6601;\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"macos\",\n+          target_os = \"ios\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\"))]\n pub static MSG_DONTWAIT: libc::c_int = 0x80;\n-#[cfg(target_os = \"linux\")]\n-#[cfg(target_os = \"android\")]\n+#[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n pub static MSG_DONTWAIT: libc::c_int = 0x40;\n \n pub static WNOHANG: libc::c_int = 1;\n@@ -86,8 +87,7 @@ extern {\n     pub fn sigemptyset(set: *mut sigset_t) -> libc::c_int;\n }\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n+#[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n mod select {\n     pub static FD_SETSIZE: uint = 1024;\n \n@@ -101,10 +101,10 @@ mod select {\n     }\n }\n \n-#[cfg(target_os = \"android\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n-#[cfg(target_os = \"linux\")]\n+#[cfg(any(target_os = \"android\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\",\n+          target_os = \"linux\"))]\n mod select {\n     use std::uint;\n     use libc;\n@@ -123,10 +123,11 @@ mod select {\n     }\n }\n \n-#[cfg(target_os = \"linux\", target_arch = \"x86\")]\n-#[cfg(target_os = \"linux\", target_arch = \"x86_64\")]\n-#[cfg(target_os = \"linux\", target_arch = \"arm\")]\n-#[cfg(target_os = \"android\")]\n+#[cfg(any(all(target_os = \"linux\",\n+              any(target_arch = \"x86\",\n+                  target_arch = \"x86_64\",\n+                  target_arch = \"arm\")),\n+          target_os = \"android\"))]\n mod signal {\n     use libc;\n \n@@ -173,8 +174,8 @@ mod signal {\n     }\n }\n \n-#[cfg(target_os = \"linux\", target_arch = \"mips\")]\n-#[cfg(target_os = \"linux\", target_arch = \"mipsel\")]\n+#[cfg(all(target_os = \"linux\",\n+          any(target_arch = \"mips\", target_arch = \"mipsel\")))]\n mod signal {\n     use libc;\n \n@@ -215,10 +216,10 @@ mod signal {\n     }\n }\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n+#[cfg(any(target_os = \"macos\",\n+          target_os = \"ios\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\"))]\n mod signal {\n     use libc;\n "}, {"sha": "67aad1904b96f86971a45ac429b34d4a5625f8c9", "filename": "src/libnative/io/file_unix.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d3444779e6776025ee19202c5e69964abde90374/src%2Flibnative%2Fio%2Ffile_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3444779e6776025ee19202c5e69964abde90374/src%2Flibnative%2Fio%2Ffile_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_unix.rs?ref=d3444779e6776025ee19202c5e69964abde90374", "patch": "@@ -130,16 +130,15 @@ impl rtio::RtioFileStream for FileDesc {\n     fn datasync(&mut self) -> IoResult<()> {\n         return super::mkerr_libc(os_datasync(self.fd()));\n \n-        #[cfg(target_os = \"macos\")]\n-        #[cfg(target_os = \"ios\")]\n+        #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n         fn os_datasync(fd: c_int) -> c_int {\n             unsafe { libc::fcntl(fd, libc::F_FULLFSYNC) }\n         }\n         #[cfg(target_os = \"linux\")]\n         fn os_datasync(fd: c_int) -> c_int {\n             retry(|| unsafe { libc::fdatasync(fd) })\n         }\n-        #[cfg(not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"linux\"))]\n+        #[cfg(not(any(target_os = \"macos\", target_os = \"ios\", target_os = \"linux\")))]\n         fn os_datasync(fd: c_int) -> c_int {\n             retry(|| unsafe { libc::fsync(fd) })\n         }\n@@ -445,14 +444,14 @@ fn mkstat(stat: &libc::stat) -> rtio::FileStat {\n     // FileStat times are in milliseconds\n     fn mktime(secs: u64, nsecs: u64) -> u64 { secs * 1000 + nsecs / 1000000 }\n \n-    #[cfg(not(target_os = \"linux\"), not(target_os = \"android\"))]\n+    #[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]\n     fn flags(stat: &libc::stat) -> u64 { stat.st_flags as u64 }\n-    #[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     fn flags(_stat: &libc::stat) -> u64 { 0 }\n \n-    #[cfg(not(target_os = \"linux\"), not(target_os = \"android\"))]\n+    #[cfg(not(any(target_os = \"linux\", target_os = \"android\")))]\n     fn gen(stat: &libc::stat) -> u64 { stat.st_gen as u64 }\n-    #[cfg(target_os = \"linux\")] #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     fn gen(_stat: &libc::stat) -> u64 { 0 }\n \n     rtio::FileStat {"}, {"sha": "954f7bbc59adcd0dd48b8b4039d99d5e1419c26a", "filename": "src/libnative/io/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3444779e6776025ee19202c5e69964abde90374/src%2Flibnative%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3444779e6776025ee19202c5e69964abde90374/src%2Flibnative%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fmod.rs?ref=d3444779e6776025ee19202c5e69964abde90374", "patch": "@@ -48,12 +48,12 @@ pub mod file;\n #[path = \"file_windows.rs\"]\n pub mod file;\n \n-#[cfg(target_os = \"macos\")]\n-#[cfg(target_os = \"ios\")]\n-#[cfg(target_os = \"freebsd\")]\n-#[cfg(target_os = \"dragonfly\")]\n-#[cfg(target_os = \"android\")]\n-#[cfg(target_os = \"linux\")]\n+#[cfg(any(target_os = \"macos\",\n+          target_os = \"ios\",\n+          target_os = \"freebsd\",\n+          target_os = \"dragonfly\",\n+          target_os = \"android\",\n+          target_os = \"linux\"))]\n #[path = \"timer_unix.rs\"]\n pub mod timer;\n "}, {"sha": "419748b75c324c56f47a736ce2942ca035f8a4d4", "filename": "src/libnative/io/net.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d3444779e6776025ee19202c5e69964abde90374/src%2Flibnative%2Fio%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3444779e6776025ee19202c5e69964abde90374/src%2Flibnative%2Fio%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fnet.rs?ref=d3444779e6776025ee19202c5e69964abde90374", "patch": "@@ -282,20 +282,20 @@ impl TcpStream {\n         }\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n+    #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n     fn set_tcp_keepalive(&mut self, seconds: uint) -> IoResult<()> {\n         setsockopt(self.fd(), libc::IPPROTO_TCP, libc::TCP_KEEPALIVE,\n                    seconds as libc::c_int)\n     }\n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"freebsd\", target_os = \"dragonfly\"))]\n     fn set_tcp_keepalive(&mut self, seconds: uint) -> IoResult<()> {\n         setsockopt(self.fd(), libc::IPPROTO_TCP, libc::TCP_KEEPIDLE,\n                    seconds as libc::c_int)\n     }\n-    #[cfg(not(target_os = \"macos\"), not(target_os = \"ios\"), not(target_os = \"freebsd\"),\n-      not(target_os = \"dragonfly\"))]\n+    #[cfg(not(any(target_os = \"macos\",\n+                  target_os = \"ios\",\n+                  target_os = \"freebsd\",\n+                  target_os = \"dragonfly\")))]\n     fn set_tcp_keepalive(&mut self, _seconds: uint) -> IoResult<()> {\n         Ok(())\n     }"}, {"sha": "3a6ae42f9468dfe6da214182b4873c07308f091b", "filename": "src/libnative/io/process.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d3444779e6776025ee19202c5e69964abde90374/src%2Flibnative%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3444779e6776025ee19202c5e69964abde90374/src%2Flibnative%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Fprocess.rs?ref=d3444779e6776025ee19202c5e69964abde90374", "patch": "@@ -840,18 +840,17 @@ fn free_handle(_handle: *mut ()) {\n #[cfg(unix)]\n fn translate_status(status: c_int) -> rtio::ProcessExit {\n     #![allow(non_snake_case)]\n-    #[cfg(target_os = \"linux\")]\n-    #[cfg(target_os = \"android\")]\n+    #[cfg(any(target_os = \"linux\", target_os = \"android\"))]\n     mod imp {\n         pub fn WIFEXITED(status: i32) -> bool { (status & 0xff) == 0 }\n         pub fn WEXITSTATUS(status: i32) -> i32 { (status >> 8) & 0xff }\n         pub fn WTERMSIG(status: i32) -> i32 { status & 0x7f }\n     }\n \n-    #[cfg(target_os = \"macos\")]\n-    #[cfg(target_os = \"ios\")]\n-    #[cfg(target_os = \"freebsd\")]\n-    #[cfg(target_os = \"dragonfly\")]\n+    #[cfg(any(target_os = \"macos\",\n+              target_os = \"ios\",\n+              target_os = \"freebsd\",\n+              target_os = \"dragonfly\"))]\n     mod imp {\n         pub fn WIFEXITED(status: i32) -> bool { (status & 0x7f) == 0 }\n         pub fn WEXITSTATUS(status: i32) -> i32 { status >> 8 }"}, {"sha": "267ff3d2a81742542cd3ee61c5538d6635042b35", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d3444779e6776025ee19202c5e69964abde90374/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d3444779e6776025ee19202c5e69964abde90374/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=d3444779e6776025ee19202c5e69964abde90374", "patch": "@@ -77,10 +77,9 @@ pub use task::NativeTaskBuilder;\n pub mod io;\n pub mod task;\n \n-#[cfg(windows)]\n-#[cfg(android)]\n+#[cfg(any(windows, android))]\n static OS_DEFAULT_STACK_ESTIMATE: uint = 1 << 20;\n-#[cfg(unix, not(android))]\n+#[cfg(all(unix, not(android)))]\n static OS_DEFAULT_STACK_ESTIMATE: uint = 2 * (1 << 20);\n \n #[lang = \"start\"]"}]}