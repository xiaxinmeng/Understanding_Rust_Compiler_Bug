{"sha": "a38540771fa93994c369d53a2abc01769c64c0b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzODU0MDc3MWZhOTM5OTRjMzY5ZDUzYTJhYmMwMTc2OWM2NGMwYjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-14T13:42:52Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-01-14T13:42:52Z"}, "message": "Move Type API to type", "tree": {"sha": "10f569e6367d410df0d9b72f1c089a5a7cb833e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10f569e6367d410df0d9b72f1c089a5a7cb833e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a38540771fa93994c369d53a2abc01769c64c0b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a38540771fa93994c369d53a2abc01769c64c0b8", "html_url": "https://github.com/rust-lang/rust/commit/a38540771fa93994c369d53a2abc01769c64c0b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a38540771fa93994c369d53a2abc01769c64c0b8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21c5fd8b1b8f9536449325738baea1e48efdefe0", "url": "https://api.github.com/repos/rust-lang/rust/commits/21c5fd8b1b8f9536449325738baea1e48efdefe0", "html_url": "https://github.com/rust-lang/rust/commit/21c5fd8b1b8f9536449325738baea1e48efdefe0"}], "stats": {"total": 187, "additions": 102, "deletions": 85}, "files": [{"sha": "3b479356f88e9ea067f76f18d0b1ad09bd8eb8cd", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 70, "deletions": 4, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/a38540771fa93994c369d53a2abc01769c64c0b8/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38540771fa93994c369d53a2abc01769c64c0b8/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=a38540771fa93994c369d53a2abc01769c64c0b8", "patch": "@@ -21,8 +21,8 @@ use hir_expand::{\n     MacroDefId,\n };\n use hir_ty::{\n-    autoderef, display::HirFormatter, expr::ExprValidator, method_resolution::implements_trait,\n-    ApplicationTy, Canonical, InEnvironment, TraitEnvironment, Ty, TyDefId, TypeCtor, TypeWalk,\n+    autoderef, display::HirFormatter, expr::ExprValidator, method_resolution, ApplicationTy,\n+    Canonical, InEnvironment, TraitEnvironment, Ty, TyDefId, TypeCtor, TypeWalk,\n };\n use ra_db::{CrateId, Edition, FileId};\n use ra_prof::profile;\n@@ -120,7 +120,8 @@ impl_froms!(\n     BuiltinType\n );\n \n-pub use hir_def::{attr::Attrs, visibility::Visibility};\n+pub use hir_def::{attr::Attrs, visibility::Visibility, AssocItemId};\n+use rustc_hash::FxHashSet;\n \n impl Module {\n     pub(crate) fn new(krate: Crate, crate_module_id: LocalModuleId) -> Module {\n@@ -891,7 +892,13 @@ impl Type {\n         };\n \n         let canonical_ty = Canonical { value: self.ty.value.clone(), num_vars: 0 };\n-        implements_trait(&canonical_ty, db, self.ty.environment.clone(), krate, std_future_trait)\n+        method_resolution::implements_trait(\n+            &canonical_ty,\n+            db,\n+            self.ty.environment.clone(),\n+            krate,\n+            std_future_trait,\n+        )\n     }\n \n     // FIXME: this method is broken, as it doesn't take closures into account.\n@@ -1002,6 +1009,65 @@ impl Type {\n         None\n     }\n \n+    pub fn iterate_method_candidates<T>(\n+        &self,\n+        db: &impl HirDatabase,\n+        krate: Crate,\n+        traits_in_scope: &FxHashSet<TraitId>,\n+        name: Option<&Name>,\n+        mut callback: impl FnMut(&Ty, Function) -> Option<T>,\n+    ) -> Option<T> {\n+        // There should be no inference vars in types passed here\n+        // FIXME check that?\n+        // FIXME replace Unknown by bound vars here\n+        let canonical = Canonical { value: self.ty.value.clone(), num_vars: 0 };\n+\n+        let env = self.ty.environment.clone();\n+        let krate = krate.id;\n+\n+        method_resolution::iterate_method_candidates(\n+            &canonical,\n+            db,\n+            env,\n+            krate,\n+            traits_in_scope,\n+            name,\n+            method_resolution::LookupMode::MethodCall,\n+            |ty, it| match it {\n+                AssocItemId::FunctionId(f) => callback(ty, f.into()),\n+                _ => None,\n+            },\n+        )\n+    }\n+\n+    pub fn iterate_path_candidates<T>(\n+        &self,\n+        db: &impl HirDatabase,\n+        krate: Crate,\n+        traits_in_scope: &FxHashSet<TraitId>,\n+        name: Option<&Name>,\n+        mut callback: impl FnMut(&Ty, AssocItem) -> Option<T>,\n+    ) -> Option<T> {\n+        // There should be no inference vars in types passed here\n+        // FIXME check that?\n+        // FIXME replace Unknown by bound vars here\n+        let canonical = Canonical { value: self.ty.value.clone(), num_vars: 0 };\n+\n+        let env = self.ty.environment.clone();\n+        let krate = krate.id;\n+\n+        method_resolution::iterate_method_candidates(\n+            &canonical,\n+            db,\n+            env,\n+            krate,\n+            traits_in_scope,\n+            name,\n+            method_resolution::LookupMode::Path,\n+            |ty, it| callback(ty, it.into()),\n+        )\n+    }\n+\n     pub fn as_adt(&self) -> Option<Adt> {\n         let (adt, _subst) = self.ty.value.as_adt()?;\n         Some(adt.into())"}, {"sha": "76e0bff347408fbdf7e4347a4f7a5539c69ed1f1", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 8, "deletions": 62, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/a38540771fa93994c369d53a2abc01769c64c0b8/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38540771fa93994c369d53a2abc01769c64c0b8/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=a38540771fa93994c369d53a2abc01769c64c0b8", "patch": "@@ -16,24 +16,24 @@ use hir_def::{\n     expr::{ExprId, PatId},\n     nameres::ModuleSource,\n     resolver::{self, resolver_for_scope, HasResolver, Resolver, TypeNs, ValueNs},\n-    AssocItemId, DefWithBodyId,\n+    DefWithBodyId, TraitId,\n };\n use hir_expand::{\n     hygiene::Hygiene, name::AsName, AstId, HirFileId, InFile, MacroCallId, MacroCallKind,\n };\n-use hir_ty::{method_resolution, Canonical, InEnvironment, InferenceResult, TraitEnvironment, Ty};\n+use hir_ty::{InEnvironment, InferenceResult, TraitEnvironment};\n use ra_prof::profile;\n use ra_syntax::{\n     ast::{self, AstNode},\n     match_ast, AstPtr,\n     SyntaxKind::*,\n     SyntaxNode, SyntaxNodePtr, SyntaxToken, TextRange, TextUnit,\n };\n+use rustc_hash::FxHashSet;\n \n use crate::{\n-    db::HirDatabase, Adt, AssocItem, Const, DefWithBody, Enum, EnumVariant, FromSource, Function,\n-    ImplBlock, Local, MacroDef, Name, Path, ScopeDef, Static, Struct, Trait, Type, TypeAlias,\n-    TypeParam,\n+    db::HirDatabase, Adt, Const, DefWithBody, Enum, EnumVariant, FromSource, Function, ImplBlock,\n+    Local, MacroDef, Name, Path, ScopeDef, Static, Struct, Trait, Type, TypeAlias, TypeParam,\n };\n \n /// `SourceAnalyzer` is a convenience wrapper which exposes HIR API in terms of\n@@ -347,63 +347,9 @@ impl SourceAnalyzer {\n             .collect()\n     }\n \n-    pub fn iterate_method_candidates<T>(\n-        &self,\n-        db: &impl HirDatabase,\n-        ty: &Type,\n-        name: Option<&Name>,\n-        mut callback: impl FnMut(&Ty, Function) -> Option<T>,\n-    ) -> Option<T> {\n-        // There should be no inference vars in types passed here\n-        // FIXME check that?\n-        // FIXME replace Unknown by bound vars here\n-        let canonical = Canonical { value: ty.ty.value.clone(), num_vars: 0 };\n-\n-        let env = TraitEnvironment::lower(db, &self.resolver);\n-        let krate = self.resolver.krate()?;\n-        let traits_in_scope = self.resolver.traits_in_scope(db);\n-\n-        method_resolution::iterate_method_candidates(\n-            &canonical,\n-            db,\n-            env,\n-            krate,\n-            &traits_in_scope,\n-            name,\n-            method_resolution::LookupMode::MethodCall,\n-            |ty, it| match it {\n-                AssocItemId::FunctionId(f) => callback(ty, f.into()),\n-                _ => None,\n-            },\n-        )\n-    }\n-\n-    pub fn iterate_path_candidates<T>(\n-        &self,\n-        db: &impl HirDatabase,\n-        ty: &Type,\n-        name: Option<&Name>,\n-        mut callback: impl FnMut(&Ty, AssocItem) -> Option<T>,\n-    ) -> Option<T> {\n-        // There should be no inference vars in types passed here\n-        // FIXME check that?\n-        // FIXME replace Unknown by bound vars here\n-        let canonical = Canonical { value: ty.ty.value.clone(), num_vars: 0 };\n-\n-        let env = TraitEnvironment::lower(db, &self.resolver);\n-        let krate = self.resolver.krate()?;\n-        let traits_in_scope = self.resolver.traits_in_scope(db);\n-\n-        method_resolution::iterate_method_candidates(\n-            &canonical,\n-            db,\n-            env,\n-            krate,\n-            &traits_in_scope,\n-            name,\n-            method_resolution::LookupMode::Path,\n-            |ty, it| callback(ty, it.into()),\n-        )\n+    /// Note: `FxHashSet<TraitId>` should be treated as an opaque type, passed into `Type\n+    pub fn traits_in_scope(&self, db: &impl HirDatabase) -> FxHashSet<TraitId> {\n+        self.resolver.traits_in_scope(db)\n     }\n \n     pub fn expand("}, {"sha": "2ca78c927fc2551d48f91efdc86887275d8e145e", "filename": "crates/ra_ide/src/completion/complete_dot.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a38540771fa93994c369d53a2abc01769c64c0b8/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38540771fa93994c369d53a2abc01769c64c0b8/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=a38540771fa93994c369d53a2abc01769c64c0b8", "patch": "@@ -53,13 +53,16 @@ fn complete_fields(acc: &mut Completions, ctx: &CompletionContext, receiver: &Ty\n }\n \n fn complete_methods(acc: &mut Completions, ctx: &CompletionContext, receiver: &Type) {\n-    let mut seen_methods = FxHashSet::default();\n-    ctx.analyzer.iterate_method_candidates(ctx.db, receiver, None, |_ty, func| {\n-        if func.has_self_param(ctx.db) && seen_methods.insert(func.name(ctx.db)) {\n-            acc.add_function(ctx, func);\n-        }\n-        None::<()>\n-    });\n+    if let Some(krate) = ctx.module.map(|it| it.krate()) {\n+        let mut seen_methods = FxHashSet::default();\n+        let traits_in_scope = ctx.analyzer.traits_in_scope(ctx.db);\n+        receiver.iterate_method_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, func| {\n+            if func.has_self_param(ctx.db) && seen_methods.insert(func.name(ctx.db)) {\n+                acc.add_function(ctx, func);\n+            }\n+            None::<()>\n+        });\n+    }\n }\n \n #[cfg(test)]"}, {"sha": "af24e9f48d81eb4c492fdf141477a69d8eff2ef6", "filename": "crates/ra_ide/src/completion/complete_path.rs", "status": "modified", "additions": 14, "deletions": 12, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a38540771fa93994c369d53a2abc01769c64c0b8/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a38540771fa93994c369d53a2abc01769c64c0b8/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=a38540771fa93994c369d53a2abc01769c64c0b8", "patch": "@@ -49,22 +49,24 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                 hir::ModuleDef::TypeAlias(a) => a.ty(ctx.db),\n                 _ => unreachable!(),\n             };\n-            ctx.analyzer.iterate_path_candidates(ctx.db, &ty, None, |_ty, item| {\n-                match item {\n-                    hir::AssocItem::Function(func) => {\n-                        if !func.has_self_param(ctx.db) {\n-                            acc.add_function(ctx, func);\n-                        }\n-                    }\n-                    hir::AssocItem::Const(ct) => acc.add_const(ctx, ct),\n-                    hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n-                }\n-                None::<()>\n-            });\n             // Iterate assoc types separately\n             // FIXME: complete T::AssocType\n             let krate = ctx.module.map(|m| m.krate());\n             if let Some(krate) = krate {\n+                let traits_in_scope = ctx.analyzer.traits_in_scope(ctx.db);\n+                ty.iterate_path_candidates(ctx.db, krate, &traits_in_scope, None, |_ty, item| {\n+                    match item {\n+                        hir::AssocItem::Function(func) => {\n+                            if !func.has_self_param(ctx.db) {\n+                                acc.add_function(ctx, func);\n+                            }\n+                        }\n+                        hir::AssocItem::Const(ct) => acc.add_const(ctx, ct),\n+                        hir::AssocItem::TypeAlias(ty) => acc.add_type_alias(ctx, ty),\n+                    }\n+                    None::<()>\n+                });\n+\n                 ty.iterate_impl_items(ctx.db, krate, |item| {\n                     match item {\n                         hir::AssocItem::Function(_) | hir::AssocItem::Const(_) => {}"}]}