{"sha": "790e6bb3972c3b167a8e0314305740a20f62d2f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5MGU2YmIzOTcyYzNiMTY3YThlMDMxNDMwNTc0MGEyMGY2MmQyZjA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-15T09:56:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-08-15T09:56:08Z"}, "message": "auto merge of #8490 : huonw/rust/fromiterator-extendable, r=catamorphism\n\n\r\n\r\nIf they are on the trait then it is extremely annoying to use them as\r\ngeneric parameters to a function, e.g. with the iterator param on the trait\r\nitself, if one was to pass an Extendable<int> to a function that filled it\r\neither from a Range or a Map<VecIterator>, one needs to write something\r\nlike:\r\n\r\n    fn foo<E: Extendable<int, Range<int>> +\r\n              Extendable<int, Map<&'self int, int, VecIterator<int>>>\r\n          (e: &mut E, ...) { ... }\r\n\r\nsince using a generic, i.e. `foo<E: Extendable<int, I>, I: Iterator<int>>`\r\nmeans that `foo` takes 2 type parameters, and the caller has to specify them\r\n(which doesn't work anyway, as they'll mismatch with the iterators used in\r\n`foo` itself).\r\n\r\nThis patch changes it to:\r\n\r\n    fn foo<E: Extendable<int>>(e: &mut E, ...) { ... }", "tree": {"sha": "71defcf608360426b3d209b843465be37e46675f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/71defcf608360426b3d209b843465be37e46675f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/790e6bb3972c3b167a8e0314305740a20f62d2f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/790e6bb3972c3b167a8e0314305740a20f62d2f0", "html_url": "https://github.com/rust-lang/rust/commit/790e6bb3972c3b167a8e0314305740a20f62d2f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/790e6bb3972c3b167a8e0314305740a20f62d2f0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f58552ccec3c0254d333642306a833ff790461d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f58552ccec3c0254d333642306a833ff790461d", "html_url": "https://github.com/rust-lang/rust/commit/7f58552ccec3c0254d333642306a833ff790461d"}, {"sha": "53487a02467ebe8816a3bdf03f16c3db958958a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/53487a02467ebe8816a3bdf03f16c3db958958a2", "html_url": "https://github.com/rust-lang/rust/commit/53487a02467ebe8816a3bdf03f16c3db958958a2"}], "stats": {"total": 126, "additions": 71, "deletions": 55}, "files": [{"sha": "a93d5801dccf8b26a68426a672516dc5830dbfe1", "filename": "doc/po/tutorial-container.md.pot", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/790e6bb3972c3b167a8e0314305740a20f62d2f0/doc%2Fpo%2Ftutorial-container.md.pot", "raw_url": "https://github.com/rust-lang/rust/raw/790e6bb3972c3b167a8e0314305740a20f62d2f0/doc%2Fpo%2Ftutorial-container.md.pot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fpo%2Ftutorial-container.md.pot?ref=790e6bb3972c3b167a8e0314305740a20f62d2f0", "patch": "@@ -481,8 +481,8 @@ msgstr \"\"\n #, no-wrap\n msgid \"\"\n \"~~~\\n\"\n-\"impl<A, T: Iterator<A>> FromIterator<A, T> for ~[A] {\\n\"\n-\"    pub fn from_iterator(iterator: &mut T) -> ~[A] {\\n\"\n+\"impl<A> FromIterator<A> for ~[A] {\\n\"\n+\"    pub fn from_iterator<T: Iterator<A>>(iterator: &mut T) -> ~[A] {\\n\"\n \"        let (lower, _) = iterator.size_hint();\\n\"\n \"        let mut xs = with_capacity(lower);\\n\"\n \"        for x in iterator {\\n\""}, {"sha": "8d0e8e200d092a9994cb87bf42387166bf5a8233", "filename": "doc/tutorial-container.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/790e6bb3972c3b167a8e0314305740a20f62d2f0/doc%2Ftutorial-container.md", "raw_url": "https://github.com/rust-lang/rust/raw/790e6bb3972c3b167a8e0314305740a20f62d2f0/doc%2Ftutorial-container.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-container.md?ref=790e6bb3972c3b167a8e0314305740a20f62d2f0", "patch": "@@ -224,8 +224,8 @@ implementing the `FromIterator` trait. For example, the implementation for\n vectors is as follows:\n \n ~~~\n-impl<A, T: Iterator<A>> FromIterator<A, T> for ~[A] {\n-    pub fn from_iterator(iterator: &mut T) -> ~[A] {\n+impl<A> FromIterator<A> for ~[A] {\n+    pub fn from_iterator<T: Iterator<A>>(iterator: &mut T) -> ~[A] {\n         let (lower, _) = iterator.size_hint();\n         let mut xs = with_capacity(lower);\n         for x in iterator {"}, {"sha": "076e86dd5b04095e1988089e1bfcb353437b7e57", "filename": "src/libextra/dlist.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibextra%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibextra%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fdlist.rs?ref=790e6bb3972c3b167a8e0314305740a20f62d2f0", "patch": "@@ -573,16 +573,16 @@ impl<A> DoubleEndedIterator<A> for MoveIterator<A> {\n     fn next_back(&mut self) -> Option<A> { self.list.pop_back() }\n }\n \n-impl<A, T: Iterator<A>> FromIterator<A, T> for DList<A> {\n-    fn from_iterator(iterator: &mut T) -> DList<A> {\n+impl<A> FromIterator<A> for DList<A> {\n+    fn from_iterator<T: Iterator<A>>(iterator: &mut T) -> DList<A> {\n         let mut ret = DList::new();\n         ret.extend(iterator);\n         ret\n     }\n }\n \n-impl<A, T: Iterator<A>> Extendable<A, T> for DList<A> {\n-    fn extend(&mut self, iterator: &mut T) {\n+impl<A> Extendable<A> for DList<A> {\n+    fn extend<T: Iterator<A>>(&mut self, iterator: &mut T) {\n         for elt in *iterator { self.push_back(elt); }\n     }\n }\n@@ -1163,4 +1163,3 @@ mod tests {\n         }\n     }\n }\n-"}, {"sha": "4f0fed5fccf4781245f6eea55c4a72e0ffd66913", "filename": "src/libextra/priority_queue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibextra%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibextra%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpriority_queue.rs?ref=790e6bb3972c3b167a8e0314305740a20f62d2f0", "patch": "@@ -190,17 +190,17 @@ impl<'self, T> Iterator<&'self T> for PriorityQueueIterator<'self, T> {\n     fn size_hint(&self) -> (uint, Option<uint>) { self.iter.size_hint() }\n }\n \n-impl<T: Ord, Iter: Iterator<T>> FromIterator<T, Iter> for PriorityQueue<T> {\n-    fn from_iterator(iter: &mut Iter) -> PriorityQueue<T> {\n+impl<T: Ord> FromIterator<T> for PriorityQueue<T> {\n+    fn from_iterator<Iter: Iterator<T>>(iter: &mut Iter) -> PriorityQueue<T> {\n         let mut q = PriorityQueue::new();\n         q.extend(iter);\n \n         q\n     }\n }\n \n-impl<T: Ord, Iter: Iterator<T>> Extendable<T, Iter> for PriorityQueue<T> {\n-    fn extend(&mut self, iter: &mut Iter) {\n+impl<T: Ord> Extendable<T> for PriorityQueue<T> {\n+    fn extend<Iter: Iterator<T>>(&mut self, iter: &mut Iter) {\n         let (lower, _) = iter.size_hint();\n \n         let len = self.capacity();"}, {"sha": "a38cb580c50578aa066e9f4ff6e83d37d335d324", "filename": "src/libextra/ringbuf.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibextra%2Fringbuf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibextra%2Fringbuf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fringbuf.rs?ref=790e6bb3972c3b167a8e0314305740a20f62d2f0", "patch": "@@ -322,17 +322,17 @@ impl<A: Eq> Eq for RingBuf<A> {\n     }\n }\n \n-impl<A, T: Iterator<A>> FromIterator<A, T> for RingBuf<A> {\n-    fn from_iterator(iterator: &mut T) -> RingBuf<A> {\n+impl<A> FromIterator<A> for RingBuf<A> {\n+    fn from_iterator<T: Iterator<A>>(iterator: &mut T) -> RingBuf<A> {\n         let (lower, _) = iterator.size_hint();\n         let mut deq = RingBuf::with_capacity(lower);\n         deq.extend(iterator);\n         deq\n     }\n }\n \n-impl<A, T: Iterator<A>> Extendable<A, T> for RingBuf<A> {\n-    fn extend(&mut self, iterator: &mut T) {\n+impl<A> Extendable<A> for RingBuf<A> {\n+    fn extend<T: Iterator<A>>(&mut self, iterator: &mut T) {\n         for elt in *iterator {\n             self.push_back(elt);\n         }"}, {"sha": "118754ec02830a1d5b6a3fee9e7f3e6e99a02125", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=790e6bb3972c3b167a8e0314305740a20f62d2f0", "patch": "@@ -835,34 +835,34 @@ fn remove<K: TotalOrd, V>(node: &mut Option<~TreeNode<K, V>>,\n     };\n }\n \n-impl<K: TotalOrd, V, T: Iterator<(K, V)>> FromIterator<(K, V), T> for TreeMap<K, V> {\n-    fn from_iterator(iter: &mut T) -> TreeMap<K, V> {\n+impl<K: TotalOrd, V> FromIterator<(K, V)> for TreeMap<K, V> {\n+    fn from_iterator<T: Iterator<(K, V)>>(iter: &mut T) -> TreeMap<K, V> {\n         let mut map = TreeMap::new();\n         map.extend(iter);\n         map\n     }\n }\n \n-impl<K: TotalOrd, V, T: Iterator<(K, V)>> Extendable<(K, V), T> for TreeMap<K, V> {\n+impl<K: TotalOrd, V> Extendable<(K, V)> for TreeMap<K, V> {\n     #[inline]\n-    fn extend(&mut self, iter: &mut T) {\n+    fn extend<T: Iterator<(K, V)>>(&mut self, iter: &mut T) {\n         for (k, v) in *iter {\n             self.insert(k, v);\n         }\n     }\n }\n \n-impl<T: TotalOrd, Iter: Iterator<T>> FromIterator<T, Iter> for TreeSet<T> {\n-    fn from_iterator(iter: &mut Iter) -> TreeSet<T> {\n+impl<T: TotalOrd> FromIterator<T> for TreeSet<T> {\n+    fn from_iterator<Iter: Iterator<T>>(iter: &mut Iter) -> TreeSet<T> {\n         let mut set = TreeSet::new();\n         set.extend(iter);\n         set\n     }\n }\n \n-impl<T: TotalOrd, Iter: Iterator<T>> Extendable<T, Iter> for TreeSet<T> {\n+impl<T: TotalOrd> Extendable<T> for TreeSet<T> {\n     #[inline]\n-    fn extend(&mut self, iter: &mut Iter) {\n+    fn extend<Iter: Iterator<T>>(&mut self, iter: &mut Iter) {\n         for elem in *iter {\n             self.insert(elem);\n         }"}, {"sha": "9719460bbd33e14a39c027a032e4817999e0effa", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=790e6bb3972c3b167a8e0314305740a20f62d2f0", "patch": "@@ -879,7 +879,9 @@ pub fn check_legality_of_move_bindings(cx: &MatchCheckCtxt,\n \n     let check_move: &fn(@pat, Option<@pat>) = |p, sub| {\n         // check legality of moving out of the enum\n-        if sub.is_some() {\n+\n+        // x @ Foo(*) is legal, but x @ Foo(y) isn't.\n+        if sub.map_move_default(false, |p| pat_contains_bindings(def_map, p)) {\n             tcx.sess.span_err(\n                 p.span,\n                 \"cannot bind by-move with sub-bindings\");"}, {"sha": "a67a488ef30fce2147a9593ba3bda8bd1ffe875c", "filename": "src/librustc/middle/pat_util.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibrustc%2Fmiddle%2Fpat_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fpat_util.rs?ref=790e6bb3972c3b167a8e0314305740a20f62d2f0", "patch": "@@ -88,3 +88,18 @@ pub fn pat_binding_ids(dm: resolve::DefMap, pat: @pat) -> ~[NodeId] {\n     pat_bindings(dm, pat, |_bm, b_id, _sp, _pt| found.push(b_id) );\n     return found;\n }\n+\n+/// Checks if the pattern contains any patterns that bind something to\n+/// an ident, e.g. `foo`, or `Foo(foo)` or `foo @ Bar(*)`.\n+pub fn pat_contains_bindings(dm: resolve::DefMap, pat: @pat) -> bool {\n+    let mut contains_bindings = false;\n+    do walk_pat(pat) |p| {\n+        if pat_is_binding(dm, p) {\n+            contains_bindings = true;\n+            false // there's at least one binding, can short circuit now.\n+        } else {\n+            true\n+        }\n+    };\n+    contains_bindings\n+}"}, {"sha": "50e59cf438d0c21b46446664d40998497fd9f66d", "filename": "src/libstd/hashmap.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibstd%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibstd%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhashmap.rs?ref=790e6bb3972c3b167a8e0314305740a20f62d2f0", "patch": "@@ -605,17 +605,17 @@ impl<K> Iterator<K> for HashSetMoveIterator<K> {\n     }\n }\n \n-impl<K: Eq + Hash, V, T: Iterator<(K, V)>> FromIterator<(K, V), T> for HashMap<K, V> {\n-    fn from_iterator(iter: &mut T) -> HashMap<K, V> {\n+impl<K: Eq + Hash, V> FromIterator<(K, V)> for HashMap<K, V> {\n+    fn from_iterator<T: Iterator<(K, V)>>(iter: &mut T) -> HashMap<K, V> {\n         let (lower, _) = iter.size_hint();\n         let mut map = HashMap::with_capacity(lower);\n         map.extend(iter);\n         map\n     }\n }\n \n-impl<K: Eq + Hash, V, T: Iterator<(K, V)>> Extendable<(K, V), T> for HashMap<K, V> {\n-    fn extend(&mut self, iter: &mut T) {\n+impl<K: Eq + Hash, V> Extendable<(K, V)> for HashMap<K, V> {\n+    fn extend<T: Iterator<(K, V)>>(&mut self, iter: &mut T) {\n         for (k, v) in *iter {\n             self.insert(k, v);\n         }\n@@ -753,17 +753,17 @@ impl<T:Hash + Eq + Clone> Clone for HashSet<T> {\n     }\n }\n \n-impl<K: Eq + Hash, T: Iterator<K>> FromIterator<K, T> for HashSet<K> {\n-    fn from_iterator(iter: &mut T) -> HashSet<K> {\n+impl<K: Eq + Hash> FromIterator<K> for HashSet<K> {\n+    fn from_iterator<T: Iterator<K>>(iter: &mut T) -> HashSet<K> {\n         let (lower, _) = iter.size_hint();\n         let mut set = HashSet::with_capacity(lower);\n         set.extend(iter);\n         set\n     }\n }\n \n-impl<K: Eq + Hash, T: Iterator<K>> Extendable<K, T> for HashSet<K> {\n-    fn extend(&mut self, iter: &mut T) {\n+impl<K: Eq + Hash> Extendable<K> for HashSet<K> {\n+    fn extend<T: Iterator<K>>(&mut self, iter: &mut T) {\n         for k in *iter {\n             self.insert(k);\n         }"}, {"sha": "1a5e364542b3e6f133fcf04e845f3b6b06e0371c", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=790e6bb3972c3b167a8e0314305740a20f62d2f0", "patch": "@@ -26,15 +26,15 @@ use clone::Clone;\n use uint;\n \n /// Conversion from an `Iterator`\n-pub trait FromIterator<A, T: Iterator<A>> {\n+pub trait FromIterator<A> {\n     /// Build a container with elements from an external iterator.\n-    fn from_iterator(iterator: &mut T) -> Self;\n+    fn from_iterator<T: Iterator<A>>(iterator: &mut T) -> Self;\n }\n \n /// A type growable from an `Iterator` implementation\n-pub trait Extendable<A, T: Iterator<A>>: FromIterator<A, T> {\n+pub trait Extendable<A>: FromIterator<A> {\n     /// Extend a container with the elements yielded by an iterator\n-    fn extend(&mut self, iterator: &mut T);\n+    fn extend<T: Iterator<A>>(&mut self, iterator: &mut T);\n }\n \n /// An interface for dealing with \"external iterators\". These types of iterators\n@@ -353,7 +353,7 @@ pub trait Iterator<A> {\n     /// assert!(a == b);\n     /// ~~~\n     #[inline]\n-    fn collect<B: FromIterator<A, Self>>(&mut self) -> B {\n+    fn collect<B: FromIterator<A>>(&mut self) -> B {\n         FromIterator::from_iterator(self)\n     }\n "}, {"sha": "a759b8cbd62355ec530eabf74bf62bce8dffe65d", "filename": "src/libstd/str.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=790e6bb3972c3b167a8e0314305740a20f62d2f0", "patch": "@@ -2111,19 +2111,19 @@ impl Clone for @str {\n     }\n }\n \n-impl<T: Iterator<char>> FromIterator<char, T> for ~str {\n+impl FromIterator<char> for ~str {\n     #[inline]\n-    fn from_iterator(iterator: &mut T) -> ~str {\n+    fn from_iterator<T: Iterator<char>>(iterator: &mut T) -> ~str {\n         let (lower, _) = iterator.size_hint();\n         let mut buf = with_capacity(lower);\n         buf.extend(iterator);\n         buf\n     }\n }\n \n-impl<T: Iterator<char>> Extendable<char, T> for ~str {\n+impl Extendable<char> for ~str {\n     #[inline]\n-    fn extend(&mut self, iterator: &mut T) {\n+    fn extend<T: Iterator<char>>(&mut self, iterator: &mut T) {\n         let (lower, _) = iterator.size_hint();\n         let reserve = lower + self.len();\n         self.reserve_at_least(reserve);"}, {"sha": "f5c7b719c4f19bfba24cdd28755b15dba8e0ba96", "filename": "src/libstd/trie.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibstd%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibstd%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftrie.rs?ref=790e6bb3972c3b167a8e0314305740a20f62d2f0", "patch": "@@ -205,16 +205,16 @@ impl<T> TrieMap<T> {\n     }\n }\n \n-impl<T, Iter: Iterator<(uint, T)>> FromIterator<(uint, T), Iter> for TrieMap<T> {\n-    fn from_iterator(iter: &mut Iter) -> TrieMap<T> {\n+impl<T> FromIterator<(uint, T)> for TrieMap<T> {\n+    fn from_iterator<Iter: Iterator<(uint, T)>>(iter: &mut Iter) -> TrieMap<T> {\n         let mut map = TrieMap::new();\n         map.extend(iter);\n         map\n     }\n }\n \n-impl<T, Iter: Iterator<(uint, T)>> Extendable<(uint, T), Iter> for TrieMap<T> {\n-    fn extend(&mut self, iter: &mut Iter) {\n+impl<T> Extendable<(uint, T)> for TrieMap<T> {\n+    fn extend<Iter: Iterator<(uint, T)>>(&mut self, iter: &mut Iter) {\n         for (k, v) in *iter {\n             self.insert(k, v);\n         }\n@@ -294,16 +294,16 @@ impl TrieSet {\n     }\n }\n \n-impl<Iter: Iterator<uint>> FromIterator<uint, Iter> for TrieSet {\n-    fn from_iterator(iter: &mut Iter) -> TrieSet {\n+impl FromIterator<uint> for TrieSet {\n+    fn from_iterator<Iter: Iterator<uint>>(iter: &mut Iter) -> TrieSet {\n         let mut set = TrieSet::new();\n         set.extend(iter);\n         set\n     }\n }\n \n-impl<Iter: Iterator<uint>> Extendable<uint, Iter> for TrieSet {\n-    fn extend(&mut self, iter: &mut Iter) {\n+impl Extendable<uint> for TrieSet {\n+    fn extend<Iter: Iterator<uint>>(&mut self, iter: &mut Iter) {\n         for elem in *iter {\n             self.insert(elem);\n         }"}, {"sha": "a605ea4373f3d613e15c8bff02f8be20c68e7a13", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/790e6bb3972c3b167a8e0314305740a20f62d2f0/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=790e6bb3972c3b167a8e0314305740a20f62d2f0", "patch": "@@ -2344,8 +2344,8 @@ impl<T> Iterator<T> for MoveRevIterator<T> {\n     }\n }\n \n-impl<A, T: Iterator<A>> FromIterator<A, T> for ~[A] {\n-    fn from_iterator(iterator: &mut T) -> ~[A] {\n+impl<A> FromIterator<A> for ~[A] {\n+    fn from_iterator<T: Iterator<A>>(iterator: &mut T) -> ~[A] {\n         let (lower, _) = iterator.size_hint();\n         let mut xs = with_capacity(lower);\n         for x in *iterator {\n@@ -2355,8 +2355,8 @@ impl<A, T: Iterator<A>> FromIterator<A, T> for ~[A] {\n     }\n }\n \n-impl<A, T: Iterator<A>> Extendable<A, T> for ~[A] {\n-    fn extend(&mut self, iterator: &mut T) {\n+impl<A> Extendable<A> for ~[A] {\n+    fn extend<T: Iterator<A>>(&mut self, iterator: &mut T) {\n         let (lower, _) = iterator.size_hint();\n         let len = self.len();\n         self.reserve(len + lower);"}]}