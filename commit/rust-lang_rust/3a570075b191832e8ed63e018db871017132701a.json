{"sha": "3a570075b191832e8ed63e018db871017132701a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhNTcwMDc1YjE5MTgzMmU4ZWQ2M2UwMThkYjg3MTAxNzEzMjcwMWE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-07T20:48:46Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-01-07T20:54:46Z"}, "message": "librustc: Remove unused `mod_path_map`. This was expensive to build. Saves another 15% or so. r=tjc", "tree": {"sha": "1a2d3ebb381a737a4a824908e218272507c09063", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a2d3ebb381a737a4a824908e218272507c09063"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a570075b191832e8ed63e018db871017132701a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a570075b191832e8ed63e018db871017132701a", "html_url": "https://github.com/rust-lang/rust/commit/3a570075b191832e8ed63e018db871017132701a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a570075b191832e8ed63e018db871017132701a/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f387926fc163b2e38df4477b2c56b1c81db3b3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f387926fc163b2e38df4477b2c56b1c81db3b3e", "html_url": "https://github.com/rust-lang/rust/commit/9f387926fc163b2e38df4477b2c56b1c81db3b3e"}], "stats": {"total": 54, "additions": 2, "deletions": 52}, "files": [{"sha": "5d4694df7d3f5241fa14d34ebbcf31e6674ed86c", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3a570075b191832e8ed63e018db871017132701a/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a570075b191832e8ed63e018db871017132701a/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=3a570075b191832e8ed63e018db871017132701a", "patch": "@@ -43,7 +43,6 @@ export get_used_link_args;\n export add_use_stmt_cnum;\n export find_use_stmt_cnum;\n export get_dep_hashes;\n-export get_path;\n \n \n // A map from external crate numbers (as decoded from some crate file) to\n@@ -52,11 +51,6 @@ export get_path;\n // own crate numbers.\n type cnum_map = map::HashMap<ast::crate_num, ast::crate_num>;\n \n-// Multiple items may have the same def_id in crate metadata. They may be\n-// renamed imports or reexports. This map keeps the \"real\" module path\n-// and def_id.\n-type mod_path_map = map::HashMap<ast::def_id, @~str>;\n-\n type crate_metadata = @{name: ~str,\n                         data: @~[u8],\n                         cnum_map: cnum_map,\n@@ -72,7 +66,6 @@ enum CStore { private(cstore_private), }\n type cstore_private =\n     @{metas: map::HashMap<ast::crate_num, crate_metadata>,\n       use_crate_map: use_crate_map,\n-      mod_path_map: mod_path_map,\n       mut used_crate_files: ~[Path],\n       mut used_libraries: ~[~str],\n       mut used_link_args: ~[~str],\n@@ -89,10 +82,8 @@ pure fn p(cstore: CStore) -> cstore_private {\n fn mk_cstore(intr: @ident_interner) -> CStore {\n     let meta_cache = map::HashMap();\n     let crate_map = map::HashMap();\n-    let mod_path_map = HashMap();\n     return private(@{metas: meta_cache,\n                      use_crate_map: crate_map,\n-                     mod_path_map: mod_path_map,\n                      mut used_crate_files: ~[],\n                      mut used_libraries: ~[],\n                      mut used_link_args: ~[],\n@@ -113,18 +104,10 @@ fn get_crate_vers(cstore: CStore, cnum: ast::crate_num) -> ~str {\n     return decoder::get_crate_vers(cdata.data);\n }\n \n-fn set_crate_data(cstore: CStore, cnum: ast::crate_num,\n+fn set_crate_data(cstore: CStore,\n+                  cnum: ast::crate_num,\n                   data: crate_metadata) {\n     p(cstore).metas.insert(cnum, data);\n-    let get_crate_data: decoder::GetCrateDataCb = |cnum| {\n-        cstore::get_crate_data(cstore, cnum)\n-    };\n-    for vec::each(decoder::get_crate_module_paths(cstore.intr, data,\n-                                                  get_crate_data)) |dp| {\n-        let (did, path) = *dp;\n-        let d = {crate: cnum, node: did.node};\n-        p(cstore).mod_path_map.insert(d, @path);\n-    }\n }\n \n fn have_crate_data(cstore: CStore, cnum: ast::crate_num) -> bool {\n@@ -197,10 +180,6 @@ fn get_dep_hashes(cstore: CStore) -> ~[~str] {\n     return vec::map(sorted, mapper);\n }\n \n-fn get_path(cstore: CStore, d: ast::def_id) -> ~[~str] {\n-    option::map_default(&p(cstore).mod_path_map.find(d), ~[],\n-                        |ds| str::split_str(**ds, ~\"::\"))\n-}\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "91926ff2f9a263e1c7ed6aa35168280d4f99d09f", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3a570075b191832e8ed63e018db871017132701a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a570075b191832e8ed63e018db871017132701a/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=3a570075b191832e8ed63e018db871017132701a", "patch": "@@ -68,7 +68,6 @@ export get_supertraits;\n export get_method_names_if_trait;\n export get_type_name_if_impl;\n export get_item_attrs;\n-export get_crate_module_paths;\n export def_like;\n export dl_def;\n export dl_impl;\n@@ -1121,34 +1120,6 @@ fn iter_crate_items(intr: @ident_interner, cdata: cmd,\n     }\n }\n \n-fn get_crate_module_paths(intr: @ident_interner, cdata: cmd,\n-                          get_crate_data: GetCrateDataCb)\n-                                    -> ~[(ast::def_id, ~str)] {\n-    fn mod_of_path(p: ~str) -> ~str {\n-        str::connect(vec::init(str::split_str(p, ~\"::\")), ~\"::\")\n-    }\n-\n-    // find all module (path, def_ids), which are not\n-    // fowarded path due to renamed import or reexport\n-    let mut res = ~[];\n-    let mods = map::HashMap();\n-    do iter_crate_items(intr, cdata, get_crate_data) |path, did| {\n-        let m = mod_of_path(path);\n-        if str::is_not_empty(m) {\n-            // if m has a sub-item, it must be a module\n-            mods.insert(m, true);\n-        }\n-        // Collect everything by now. There might be multiple\n-        // paths pointing to the same did. Those will be\n-        // unified later by using the mods map\n-        res.push((did, path));\n-    }\n-    return do vec::filter(res) |x| {\n-        let (_, xp) = *x;\n-        mods.contains_key(xp)\n-    }\n-}\n-\n fn list_crate_metadata(intr: @ident_interner, bytes: @~[u8],\n                        out: io::Writer) {\n     let hash = get_crate_hash(bytes);"}]}