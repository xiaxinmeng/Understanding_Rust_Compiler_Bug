{"sha": "ab5935c88d259d511561ccb4177bb6924dab4a06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiNTkzNWM4OGQyNTlkNTExNTYxY2NiNDE3N2JiNjkyNGRhYjRhMDY=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-06T23:29:47Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-10-09T16:44:51Z"}, "message": "std: Convert statics to constants\n\nThis commit repurposes most statics as constants in the standard library itself,\nwith the exception of TLS keys which precisely have their own memory location as\nan implementation detail.\n\nThis commit also rewrites the bitflags syntax to use `const` instead of\n`static`. All invocations will need to replace the word `static` with `const`\nwhen declaring flags.\n\nDue to the modification of the `bitflags!` syntax, this is a:\n\n[breaking-change]", "tree": {"sha": "f23ddc5fb8733a5eeb5f3fbac06b99159139687e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f23ddc5fb8733a5eeb5f3fbac06b99159139687e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab5935c88d259d511561ccb4177bb6924dab4a06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab5935c88d259d511561ccb4177bb6924dab4a06", "html_url": "https://github.com/rust-lang/rust/commit/ab5935c88d259d511561ccb4177bb6924dab4a06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab5935c88d259d511561ccb4177bb6924dab4a06/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9874bfb4079876dabc092c035d99b2d5b7f8a1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9874bfb4079876dabc092c035d99b2d5b7f8a1c", "html_url": "https://github.com/rust-lang/rust/commit/d9874bfb4079876dabc092c035d99b2d5b7f8a1c"}], "stats": {"total": 260, "additions": 130, "deletions": 130}, "files": [{"sha": "adb55f2cc8cff4fd4363195c6619ad7b0115e9a6", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/ab5935c88d259d511561ccb4177bb6924dab4a06/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5935c88d259d511561ccb4177bb6924dab4a06/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=ab5935c88d259d511561ccb4177bb6924dab4a06", "patch": "@@ -24,12 +24,12 @@\n /// ```{.rust}\n /// bitflags! {\n ///     flags Flags: u32 {\n-///         static FLAG_A       = 0x00000001,\n-///         static FLAG_B       = 0x00000010,\n-///         static FLAG_C       = 0x00000100,\n-///         static FLAG_ABC     = FLAG_A.bits\n-///                             | FLAG_B.bits\n-///                             | FLAG_C.bits,\n+///         const FLAG_A       = 0x00000001,\n+///         const FLAG_B       = 0x00000010,\n+///         const FLAG_C       = 0x00000100,\n+///         const FLAG_ABC     = FLAG_A.bits\n+///                            | FLAG_B.bits\n+///                            | FLAG_C.bits,\n ///     }\n /// }\n ///\n@@ -50,8 +50,8 @@\n ///\n /// bitflags! {\n ///     flags Flags: u32 {\n-///         static FLAG_A   = 0x00000001,\n-///         static FLAG_B   = 0x00000010,\n+///         const FLAG_A   = 0x00000001,\n+///         const FLAG_B   = 0x00000010,\n ///     }\n /// }\n ///\n@@ -115,15 +115,15 @@\n #[macro_export]\n macro_rules! bitflags {\n     ($(#[$attr:meta])* flags $BitFlags:ident: $T:ty {\n-        $($(#[$Flag_attr:meta])* static $Flag:ident = $value:expr),+\n+        $($(#[$Flag_attr:meta])* const $Flag:ident = $value:expr),+\n     }) => {\n         #[deriving(PartialEq, Eq, Clone, PartialOrd, Ord, Hash)]\n         $(#[$attr])*\n         pub struct $BitFlags {\n             bits: $T,\n         }\n \n-        $($(#[$Flag_attr])* pub static $Flag: $BitFlags = $BitFlags { bits: $value };)+\n+        $($(#[$Flag_attr])* pub const $Flag: $BitFlags = $BitFlags { bits: $value };)+\n \n         impl $BitFlags {\n             /// Returns an empty set of flags.\n@@ -235,12 +235,12 @@ macro_rules! bitflags {\n         }\n     };\n     ($(#[$attr:meta])* flags $BitFlags:ident: $T:ty {\n-        $($(#[$Flag_attr:meta])* static $Flag:ident = $value:expr),+,\n+        $($(#[$Flag_attr:meta])* const $Flag:ident = $value:expr),+,\n     }) => {\n         bitflags! {\n             $(#[$attr])*\n             flags $BitFlags: $T {\n-                $($(#[$Flag_attr])* static $Flag = $value),+\n+                $($(#[$Flag_attr])* const $Flag = $value),+\n             }\n         }\n     };\n@@ -259,22 +259,22 @@ mod tests {\n         #[doc = \"> \"]\n         #[doc = \"> - Richard Feynman\"]\n         flags Flags: u32 {\n-            static FlagA       = 0x00000001,\n+            const FlagA       = 0x00000001,\n             #[doc = \"<pcwalton> macros are way better at generating code than trans is\"]\n-            static FlagB       = 0x00000010,\n-            static FlagC       = 0x00000100,\n+            const FlagB       = 0x00000010,\n+            const FlagC       = 0x00000100,\n             #[doc = \"* cmr bed\"]\n             #[doc = \"* strcat table\"]\n             #[doc = \"<strcat> wait what?\"]\n-            static FlagABC     = FlagA.bits\n+            const FlagABC     = FlagA.bits\n                                | FlagB.bits\n                                | FlagC.bits,\n         }\n     }\n \n     bitflags! {\n         flags AnotherSetOfFlags: uint {\n-            static AnotherFlag = 1u,\n+            const AnotherFlag = 1u,\n         }\n     }\n "}, {"sha": "ef40402105b54581c38bae801e8632d63b8e951f", "filename": "src/libstd/collections/hashmap/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5935c88d259d511561ccb4177bb6924dab4a06/src%2Flibstd%2Fcollections%2Fhashmap%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5935c88d259d511561ccb4177bb6924dab4a06/src%2Flibstd%2Fcollections%2Fhashmap%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap%2Fmap.rs?ref=ab5935c88d259d511561ccb4177bb6924dab4a06", "patch": "@@ -41,8 +41,8 @@ use super::table::{\n     SafeHash\n };\n \n-static INITIAL_LOG2_CAP: uint = 5;\n-pub static INITIAL_CAPACITY: uint = 1 << INITIAL_LOG2_CAP; // 2^5\n+const INITIAL_LOG2_CAP: uint = 5;\n+pub const INITIAL_CAPACITY: uint = 1 << INITIAL_LOG2_CAP; // 2^5\n \n /// The default behavior of HashMap implements a load factor of 90.9%.\n /// This behavior is characterized by the following conditions:"}, {"sha": "ee64a7931c06242d887e9f222da7e5443606e3c3", "filename": "src/libstd/collections/hashmap/table.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ab5935c88d259d511561ccb4177bb6924dab4a06/src%2Flibstd%2Fcollections%2Fhashmap%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5935c88d259d511561ccb4177bb6924dab4a06/src%2Flibstd%2Fcollections%2Fhashmap%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhashmap%2Ftable.rs?ref=ab5935c88d259d511561ccb4177bb6924dab4a06", "patch": "@@ -24,7 +24,7 @@ use ptr::{RawPtr, copy_nonoverlapping_memory, zero_memory};\n use ptr;\n use rt::heap::{allocate, deallocate};\n \n-static EMPTY_BUCKET: u64 = 0u64;\n+const EMPTY_BUCKET: u64 = 0u64;\n \n /// The raw hashtable, providing safe-ish access to the unzipped and highly\n /// optimized arrays of hashes, keys, and values."}, {"sha": "d18b3cdf2e7509c905dbe523791a4ec96959be8d", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 34, "deletions": 34, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/ab5935c88d259d511561ccb4177bb6924dab4a06/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5935c88d259d511561ccb4177bb6924dab4a06/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=ab5935c88d259d511561ccb4177bb6924dab4a06", "patch": "@@ -283,7 +283,7 @@ pub mod util;\n /// The default buffer size for various I/O operations\n // libuv recommends 64k buffers to maximize throughput\n // https://groups.google.com/forum/#!topic/libuv/oQO1HJAIDdA\n-static DEFAULT_BUF_SIZE: uint = 1024 * 64;\n+const DEFAULT_BUF_SIZE: uint = 1024 * 64;\n \n /// A convenient typedef of the return value of any I/O action.\n pub type IoResult<T> = Result<T, IoError>;\n@@ -1803,93 +1803,93 @@ bitflags! {\n     #[doc = \"A set of permissions for a file or directory is represented\"]\n     #[doc = \"by a set of flags which are or'd together.\"]\n     flags FilePermission: u32 {\n-        static USER_READ     = 0o400,\n-        static USER_WRITE    = 0o200,\n-        static USER_EXECUTE  = 0o100,\n-        static GROUP_READ    = 0o040,\n-        static GROUP_WRITE   = 0o020,\n-        static GROUP_EXECUTE = 0o010,\n-        static OTHER_READ    = 0o004,\n-        static OTHER_WRITE   = 0o002,\n-        static OTHER_EXECUTE = 0o001,\n-\n-        static USER_RWX  = USER_READ.bits | USER_WRITE.bits | USER_EXECUTE.bits,\n-        static GROUP_RWX = GROUP_READ.bits | GROUP_WRITE.bits | GROUP_EXECUTE.bits,\n-        static OTHER_RWX = OTHER_READ.bits | OTHER_WRITE.bits | OTHER_EXECUTE.bits,\n+        const USER_READ     = 0o400,\n+        const USER_WRITE    = 0o200,\n+        const USER_EXECUTE  = 0o100,\n+        const GROUP_READ    = 0o040,\n+        const GROUP_WRITE   = 0o020,\n+        const GROUP_EXECUTE = 0o010,\n+        const OTHER_READ    = 0o004,\n+        const OTHER_WRITE   = 0o002,\n+        const OTHER_EXECUTE = 0o001,\n+\n+        const USER_RWX  = USER_READ.bits | USER_WRITE.bits | USER_EXECUTE.bits,\n+        const GROUP_RWX = GROUP_READ.bits | GROUP_WRITE.bits | GROUP_EXECUTE.bits,\n+        const OTHER_RWX = OTHER_READ.bits | OTHER_WRITE.bits | OTHER_EXECUTE.bits,\n \n         #[doc = \"Permissions for user owned files, equivalent to 0644 on\"]\n         #[doc = \"unix-like systems.\"]\n-        static USER_FILE = USER_READ.bits | USER_WRITE.bits | GROUP_READ.bits | OTHER_READ.bits,\n+        const USER_FILE = USER_READ.bits | USER_WRITE.bits | GROUP_READ.bits | OTHER_READ.bits,\n \n         #[doc = \"Permissions for user owned directories, equivalent to 0755 on\"]\n         #[doc = \"unix-like systems.\"]\n-        static USER_DIR  = USER_RWX.bits | GROUP_READ.bits | GROUP_EXECUTE.bits |\n+        const USER_DIR  = USER_RWX.bits | GROUP_READ.bits | GROUP_EXECUTE.bits |\n                    OTHER_READ.bits | OTHER_EXECUTE.bits,\n \n         #[doc = \"Permissions for user owned executables, equivalent to 0755\"]\n         #[doc = \"on unix-like systems.\"]\n-        static USER_EXEC = USER_DIR.bits,\n+        const USER_EXEC = USER_DIR.bits,\n \n         #[doc = \"All possible permissions enabled.\"]\n-        static ALL_PERMISSIONS = USER_RWX.bits | GROUP_RWX.bits | OTHER_RWX.bits,\n+        const ALL_PERMISSIONS = USER_RWX.bits | GROUP_RWX.bits | OTHER_RWX.bits,\n \n         // Deprecated names\n         #[allow(non_uppercase_statics)]\n         #[deprecated = \"use USER_READ instead\"]\n-        static UserRead     = USER_READ.bits,\n+        const UserRead     = USER_READ.bits,\n         #[allow(non_uppercase_statics)]\n         #[deprecated = \"use USER_WRITE instead\"]\n-        static UserWrite    = USER_WRITE.bits,\n+        const UserWrite    = USER_WRITE.bits,\n         #[allow(non_uppercase_statics)]\n         #[deprecated = \"use USER_EXECUTE instead\"]\n-        static UserExecute  = USER_EXECUTE.bits,\n+        const UserExecute  = USER_EXECUTE.bits,\n         #[allow(non_uppercase_statics)]\n         #[deprecated = \"use GROUP_READ instead\"]\n-        static GroupRead    = GROUP_READ.bits,\n+        const GroupRead    = GROUP_READ.bits,\n         #[allow(non_uppercase_statics)]\n         #[deprecated = \"use GROUP_WRITE instead\"]\n-        static GroupWrite   = GROUP_WRITE.bits,\n+        const GroupWrite   = GROUP_WRITE.bits,\n         #[allow(non_uppercase_statics)]\n         #[deprecated = \"use GROUP_EXECUTE instead\"]\n-        static GroupExecute = GROUP_EXECUTE.bits,\n+        const GroupExecute = GROUP_EXECUTE.bits,\n         #[allow(non_uppercase_statics)]\n         #[deprecated = \"use OTHER_READ instead\"]\n-        static OtherRead    = OTHER_READ.bits,\n+        const OtherRead    = OTHER_READ.bits,\n         #[allow(non_uppercase_statics)]\n         #[deprecated = \"use OTHER_WRITE instead\"]\n-        static OtherWrite   = OTHER_WRITE.bits,\n+        const OtherWrite   = OTHER_WRITE.bits,\n         #[allow(non_uppercase_statics)]\n         #[deprecated = \"use OTHER_EXECUTE instead\"]\n-        static OtherExecute = OTHER_EXECUTE.bits,\n+        const OtherExecute = OTHER_EXECUTE.bits,\n \n         #[allow(non_uppercase_statics)]\n         #[deprecated = \"use USER_RWX instead\"]\n-        static UserRWX  = USER_RWX.bits,\n+        const UserRWX  = USER_RWX.bits,\n         #[allow(non_uppercase_statics)]\n         #[deprecated = \"use GROUP_RWX instead\"]\n-        static GroupRWX = GROUP_RWX.bits,\n+        const GroupRWX = GROUP_RWX.bits,\n         #[allow(non_uppercase_statics)]\n         #[deprecated = \"use OTHER_RWX instead\"]\n-        static OtherRWX = OTHER_RWX.bits,\n+        const OtherRWX = OTHER_RWX.bits,\n \n         #[doc = \"Deprecated: use `USER_FILE` instead.\"]\n         #[allow(non_uppercase_statics)]\n         #[deprecated = \"use USER_FILE instead\"]\n-        static UserFile = USER_FILE.bits,\n+        const UserFile = USER_FILE.bits,\n \n         #[doc = \"Deprecated: use `USER_DIR` instead.\"]\n         #[allow(non_uppercase_statics)]\n         #[deprecated = \"use USER_DIR instead\"]\n-        static UserDir  = USER_DIR.bits,\n+        const UserDir  = USER_DIR.bits,\n         #[doc = \"Deprecated: use `USER_EXEC` instead.\"]\n         #[allow(non_uppercase_statics)]\n         #[deprecated = \"use USER_EXEC instead\"]\n-        static UserExec = USER_EXEC.bits,\n+        const UserExec = USER_EXEC.bits,\n \n         #[doc = \"Deprecated: use `ALL_PERMISSIONS` instead\"]\n         #[allow(non_uppercase_statics)]\n         #[deprecated = \"use ALL_PERMISSIONS instead\"]\n-        static AllPermissions = ALL_PERMISSIONS.bits,\n+        const AllPermissions = ALL_PERMISSIONS.bits,\n     }\n }\n "}, {"sha": "5de4bc10e1aec3f1813f9500cf04941f752da877", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab5935c88d259d511561ccb4177bb6924dab4a06/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5935c88d259d511561ccb4177bb6924dab4a06/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=ab5935c88d259d511561ccb4177bb6924dab4a06", "patch": "@@ -32,16 +32,16 @@ use std::hash::sip::SipState;\n \n /// Signal a process to exit, without forcibly killing it. Corresponds to\n /// SIGTERM on unix platforms.\n-#[cfg(windows)] pub static PleaseExitSignal: int = 15;\n+#[cfg(windows)] pub const PleaseExitSignal: int = 15;\n /// Signal a process to exit immediately, forcibly killing it. Corresponds to\n /// SIGKILL on unix platforms.\n-#[cfg(windows)] pub static MustDieSignal: int = 9;\n+#[cfg(windows)] pub const MustDieSignal: int = 9;\n /// Signal a process to exit, without forcibly killing it. Corresponds to\n /// SIGTERM on unix platforms.\n-#[cfg(not(windows))] pub static PleaseExitSignal: int = libc::SIGTERM as int;\n+#[cfg(not(windows))] pub const PleaseExitSignal: int = libc::SIGTERM as int;\n /// Signal a process to exit immediately, forcibly killing it. Corresponds to\n /// SIGKILL on unix platforms.\n-#[cfg(not(windows))] pub static MustDieSignal: int = libc::SIGKILL as int;\n+#[cfg(not(windows))] pub const MustDieSignal: int = libc::SIGKILL as int;\n \n /// Representation of a running or exited child process.\n ///"}, {"sha": "60386ec0631b7bf2e161390e49250e0cf510c2e0", "filename": "src/libstd/os.rs", "status": "modified", "additions": 53, "deletions": 53, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/ab5935c88d259d511561ccb4177bb6924dab4a06/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5935c88d259d511561ccb4177bb6924dab4a06/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=ab5935c88d259d511561ccb4177bb6924dab4a06", "patch": "@@ -66,8 +66,8 @@ pub fn num_cpus() -> uint {\n     }\n }\n \n-pub static TMPBUF_SZ : uint = 1000u;\n-static BUF_BYTES : uint = 2048u;\n+pub const TMPBUF_SZ : uint = 1000u;\n+const BUF_BYTES : uint = 2048u;\n \n /// Returns the current working directory as a Path.\n ///\n@@ -1672,230 +1672,230 @@ impl MemoryMap {\n pub mod consts {\n     pub use os::arch_consts::ARCH;\n \n-    pub static FAMILY: &'static str = \"unix\";\n+    pub const FAMILY: &'static str = \"unix\";\n \n     /// A string describing the specific operating system in use: in this\n     /// case, `linux`.\n-    pub static SYSNAME: &'static str = \"linux\";\n+    pub const SYSNAME: &'static str = \"linux\";\n \n     /// Specifies the filename prefix used for shared libraries on this\n     /// platform: in this case, `lib`.\n-    pub static DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n \n     /// Specifies the filename suffix used for shared libraries on this\n     /// platform: in this case, `.so`.\n-    pub static DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n \n     /// Specifies the file extension used for shared libraries on this\n     /// platform that goes after the dot: in this case, `so`.\n-    pub static DLL_EXTENSION: &'static str = \"so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n \n     /// Specifies the filename suffix used for executable binaries on this\n     /// platform: in this case, the empty string.\n-    pub static EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n \n     /// Specifies the file extension, if any, used for executable binaries\n     /// on this platform: in this case, the empty string.\n-    pub static EXE_EXTENSION: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n #[cfg(target_os = \"macos\")]\n pub mod consts {\n     pub use os::arch_consts::ARCH;\n \n-    pub static FAMILY: &'static str = \"unix\";\n+    pub const FAMILY: &'static str = \"unix\";\n \n     /// A string describing the specific operating system in use: in this\n     /// case, `macos`.\n-    pub static SYSNAME: &'static str = \"macos\";\n+    pub const SYSNAME: &'static str = \"macos\";\n \n     /// Specifies the filename prefix used for shared libraries on this\n     /// platform: in this case, `lib`.\n-    pub static DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n \n     /// Specifies the filename suffix used for shared libraries on this\n     /// platform: in this case, `.dylib`.\n-    pub static DLL_SUFFIX: &'static str = \".dylib\";\n+    pub const DLL_SUFFIX: &'static str = \".dylib\";\n \n     /// Specifies the file extension used for shared libraries on this\n     /// platform that goes after the dot: in this case, `dylib`.\n-    pub static DLL_EXTENSION: &'static str = \"dylib\";\n+    pub const DLL_EXTENSION: &'static str = \"dylib\";\n \n     /// Specifies the filename suffix used for executable binaries on this\n     /// platform: in this case, the empty string.\n-    pub static EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n \n     /// Specifies the file extension, if any, used for executable binaries\n     /// on this platform: in this case, the empty string.\n-    pub static EXE_EXTENSION: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n #[cfg(target_os = \"ios\")]\n pub mod consts {\n     pub use os::arch_consts::ARCH;\n \n-    pub static FAMILY: &'static str = \"unix\";\n+    pub const FAMILY: &'static str = \"unix\";\n \n     /// A string describing the specific operating system in use: in this\n     /// case, `ios`.\n-    pub static SYSNAME: &'static str = \"ios\";\n+    pub const SYSNAME: &'static str = \"ios\";\n \n     /// Specifies the filename suffix used for executable binaries on this\n     /// platform: in this case, the empty string.\n-    pub static EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n \n     /// Specifies the file extension, if any, used for executable binaries\n     /// on this platform: in this case, the empty string.\n-    pub static EXE_EXTENSION: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n #[cfg(target_os = \"freebsd\")]\n pub mod consts {\n     pub use os::arch_consts::ARCH;\n \n-    pub static FAMILY: &'static str = \"unix\";\n+    pub const FAMILY: &'static str = \"unix\";\n \n     /// A string describing the specific operating system in use: in this\n     /// case, `freebsd`.\n-    pub static SYSNAME: &'static str = \"freebsd\";\n+    pub const SYSNAME: &'static str = \"freebsd\";\n \n     /// Specifies the filename prefix used for shared libraries on this\n     /// platform: in this case, `lib`.\n-    pub static DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n \n     /// Specifies the filename suffix used for shared libraries on this\n     /// platform: in this case, `.so`.\n-    pub static DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n \n     /// Specifies the file extension used for shared libraries on this\n     /// platform that goes after the dot: in this case, `so`.\n-    pub static DLL_EXTENSION: &'static str = \"so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n \n     /// Specifies the filename suffix used for executable binaries on this\n     /// platform: in this case, the empty string.\n-    pub static EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n \n     /// Specifies the file extension, if any, used for executable binaries\n     /// on this platform: in this case, the empty string.\n-    pub static EXE_EXTENSION: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n #[cfg(target_os = \"dragonfly\")]\n pub mod consts {\n     pub use os::arch_consts::ARCH;\n \n-    pub static FAMILY: &'static str = \"unix\";\n+    pub const FAMILY: &'static str = \"unix\";\n \n     /// A string describing the specific operating system in use: in this\n     /// case, `dragonfly`.\n-    pub static SYSNAME: &'static str = \"dragonfly\";\n+    pub const SYSNAME: &'static str = \"dragonfly\";\n \n     /// Specifies the filename prefix used for shared libraries on this\n     /// platform: in this case, `lib`.\n-    pub static DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n \n     /// Specifies the filename suffix used for shared libraries on this\n     /// platform: in this case, `.so`.\n-    pub static DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n \n     /// Specifies the file extension used for shared libraries on this\n     /// platform that goes after the dot: in this case, `so`.\n-    pub static DLL_EXTENSION: &'static str = \"so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n \n     /// Specifies the filename suffix used for executable binaries on this\n     /// platform: in this case, the empty string.\n-    pub static EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n \n     /// Specifies the file extension, if any, used for executable binaries\n     /// on this platform: in this case, the empty string.\n-    pub static EXE_EXTENSION: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n #[cfg(target_os = \"android\")]\n pub mod consts {\n     pub use os::arch_consts::ARCH;\n \n-    pub static FAMILY: &'static str = \"unix\";\n+    pub const FAMILY: &'static str = \"unix\";\n \n     /// A string describing the specific operating system in use: in this\n     /// case, `android`.\n-    pub static SYSNAME: &'static str = \"android\";\n+    pub const SYSNAME: &'static str = \"android\";\n \n     /// Specifies the filename prefix used for shared libraries on this\n     /// platform: in this case, `lib`.\n-    pub static DLL_PREFIX: &'static str = \"lib\";\n+    pub const DLL_PREFIX: &'static str = \"lib\";\n \n     /// Specifies the filename suffix used for shared libraries on this\n     /// platform: in this case, `.so`.\n-    pub static DLL_SUFFIX: &'static str = \".so\";\n+    pub const DLL_SUFFIX: &'static str = \".so\";\n \n     /// Specifies the file extension used for shared libraries on this\n     /// platform that goes after the dot: in this case, `so`.\n-    pub static DLL_EXTENSION: &'static str = \"so\";\n+    pub const DLL_EXTENSION: &'static str = \"so\";\n \n     /// Specifies the filename suffix used for executable binaries on this\n     /// platform: in this case, the empty string.\n-    pub static EXE_SUFFIX: &'static str = \"\";\n+    pub const EXE_SUFFIX: &'static str = \"\";\n \n     /// Specifies the file extension, if any, used for executable binaries\n     /// on this platform: in this case, the empty string.\n-    pub static EXE_EXTENSION: &'static str = \"\";\n+    pub const EXE_EXTENSION: &'static str = \"\";\n }\n \n #[cfg(target_os = \"windows\")]\n pub mod consts {\n     pub use os::arch_consts::ARCH;\n \n-    pub static FAMILY: &'static str = \"windows\";\n+    pub const FAMILY: &'static str = \"windows\";\n \n     /// A string describing the specific operating system in use: in this\n     /// case, `windows`.\n-    pub static SYSNAME: &'static str = \"windows\";\n+    pub const SYSNAME: &'static str = \"windows\";\n \n     /// Specifies the filename prefix used for shared libraries on this\n     /// platform: in this case, the empty string.\n-    pub static DLL_PREFIX: &'static str = \"\";\n+    pub const DLL_PREFIX: &'static str = \"\";\n \n     /// Specifies the filename suffix used for shared libraries on this\n     /// platform: in this case, `.dll`.\n-    pub static DLL_SUFFIX: &'static str = \".dll\";\n+    pub const DLL_SUFFIX: &'static str = \".dll\";\n \n     /// Specifies the file extension used for shared libraries on this\n     /// platform that goes after the dot: in this case, `dll`.\n-    pub static DLL_EXTENSION: &'static str = \"dll\";\n+    pub const DLL_EXTENSION: &'static str = \"dll\";\n \n     /// Specifies the filename suffix used for executable binaries on this\n     /// platform: in this case, `.exe`.\n-    pub static EXE_SUFFIX: &'static str = \".exe\";\n+    pub const EXE_SUFFIX: &'static str = \".exe\";\n \n     /// Specifies the file extension, if any, used for executable binaries\n     /// on this platform: in this case, `exe`.\n-    pub static EXE_EXTENSION: &'static str = \"exe\";\n+    pub const EXE_EXTENSION: &'static str = \"exe\";\n }\n \n #[cfg(target_arch = \"x86\")]\n mod arch_consts {\n-    pub static ARCH: &'static str = \"x86\";\n+    pub const ARCH: &'static str = \"x86\";\n }\n \n #[cfg(target_arch = \"x86_64\")]\n mod arch_consts {\n-    pub static ARCH: &'static str = \"x86_64\";\n+    pub const ARCH: &'static str = \"x86_64\";\n }\n \n #[cfg(target_arch = \"arm\")]\n mod arch_consts {\n-    pub static ARCH: &'static str = \"arm\";\n+    pub const ARCH: &'static str = \"arm\";\n }\n \n #[cfg(target_arch = \"mips\")]\n mod arch_consts {\n-    pub static ARCH: &'static str = \"mips\";\n+    pub const ARCH: &'static str = \"mips\";\n }\n \n #[cfg(target_arch = \"mipsel\")]\n mod arch_consts {\n-    pub static ARCH: &'static str = \"mipsel\";\n+    pub const ARCH: &'static str = \"mipsel\";\n }\n \n #[cfg(test)]"}, {"sha": "f7fb9adb1fb6497ab8acf6d4f1b6e69c4d8d6e2e", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ab5935c88d259d511561ccb4177bb6924dab4a06/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5935c88d259d511561ccb4177bb6924dab4a06/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=ab5935c88d259d511561ccb4177bb6924dab4a06", "patch": "@@ -42,10 +42,10 @@ pub struct Path {\n }\n \n /// The standard path separator character\n-pub static SEP: char = '/';\n+pub const SEP: char = '/';\n \n /// The standard path separator byte\n-pub static SEP_BYTE: u8 = SEP as u8;\n+pub const SEP_BYTE: u8 = SEP as u8;\n \n /// Returns whether the given byte is a path separator\n #[inline]"}, {"sha": "5bd738ed58bd36c955cf4cdd6d5ed0f49f552124", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ab5935c88d259d511561ccb4177bb6924dab4a06/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5935c88d259d511561ccb4177bb6924dab4a06/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=ab5935c88d259d511561ccb4177bb6924dab4a06", "patch": "@@ -958,14 +958,14 @@ pub fn make_non_verbatim(path: &Path) -> Option<Path> {\n }\n \n /// The standard path separator character\n-pub static SEP: char = '\\\\';\n+pub const SEP: char = '\\\\';\n /// The standard path separator byte\n-pub static SEP_BYTE: u8 = SEP as u8;\n+pub const SEP_BYTE: u8 = SEP as u8;\n \n /// The alternative path separator character\n-pub static SEP2: char = '/';\n+pub const SEP2: char = '/';\n /// The alternative path separator character\n-pub static SEP2_BYTE: u8 = SEP2 as u8;\n+pub const SEP2_BYTE: u8 = SEP2 as u8;\n \n /// Returns whether the given char is a path separator.\n /// Allows both the primary separator '\\' and the alternative separator '/'."}, {"sha": "751eb00bfaeccf65add80c63bd92f7de3bebba80", "filename": "src/libstd/time/duration.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ab5935c88d259d511561ccb4177bb6924dab4a06/src%2Flibstd%2Ftime%2Fduration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab5935c88d259d511561ccb4177bb6924dab4a06/src%2Flibstd%2Ftime%2Fduration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fduration.rs?ref=ab5935c88d259d511561ccb4177bb6924dab4a06", "patch": "@@ -20,23 +20,23 @@ use num::{CheckedAdd, CheckedMul};\n use result::{Result, Ok, Err};\n \n /// The number of nanoseconds in a microsecond.\n-static NANOS_PER_MICRO: i32 = 1000;\n+const NANOS_PER_MICRO: i32 = 1000;\n /// The number of nanoseconds in a millisecond.\n-static NANOS_PER_MILLI: i32 = 1000_000;\n+const NANOS_PER_MILLI: i32 = 1000_000;\n /// The number of nanoseconds in seconds.\n-static NANOS_PER_SEC: i32 = 1_000_000_000;\n+const NANOS_PER_SEC: i32 = 1_000_000_000;\n /// The number of microseconds per second.\n-static MICROS_PER_SEC: i64 = 1000_000;\n+const MICROS_PER_SEC: i64 = 1000_000;\n /// The number of milliseconds per second.\n-static MILLIS_PER_SEC: i64 = 1000;\n+const MILLIS_PER_SEC: i64 = 1000;\n /// The number of seconds in a minute.\n-static SECS_PER_MINUTE: i64 = 60;\n+const SECS_PER_MINUTE: i64 = 60;\n /// The number of seconds in an hour.\n-static SECS_PER_HOUR: i64 = 3600;\n+const SECS_PER_HOUR: i64 = 3600;\n /// The number of (non-leap) seconds in days.\n-static SECS_PER_DAY: i64 = 86400;\n+const SECS_PER_DAY: i64 = 86400;\n /// The number of (non-leap) seconds in a week.\n-static SECS_PER_WEEK: i64 = 604800;\n+const SECS_PER_WEEK: i64 = 604800;\n \n macro_rules! try_opt(\n     ($e:expr) => (match $e { Some(v) => v, None => return None })\n@@ -52,13 +52,13 @@ pub struct Duration {\n }\n \n /// The minimum possible `Duration`: `i64::MIN` milliseconds.\n-pub static MIN: Duration = Duration {\n+pub const MIN: Duration = Duration {\n     secs: i64::MIN / MILLIS_PER_SEC - 1,\n     nanos: NANOS_PER_SEC + (i64::MIN % MILLIS_PER_SEC) as i32 * NANOS_PER_MILLI\n };\n \n /// The maximum possible `Duration`: `i64::MAX` milliseconds.\n-pub static MAX: Duration = Duration {\n+pub const MAX: Duration = Duration {\n     secs: i64::MAX / MILLIS_PER_SEC,\n     nanos: (i64::MAX % MILLIS_PER_SEC) as i32 * NANOS_PER_MILLI\n };\n@@ -456,7 +456,7 @@ mod tests {\n         assert_eq!(MIN.num_microseconds(), None);\n \n         // overflow checks\n-        static MICROS_PER_DAY: i64 = 86400_000_000;\n+        const MICROS_PER_DAY: i64 = 86400_000_000;\n         assert_eq!(Duration::days(i64::MAX / MICROS_PER_DAY).num_microseconds(),\n                    Some(i64::MAX / MICROS_PER_DAY * MICROS_PER_DAY));\n         assert_eq!(Duration::days(i64::MIN / MICROS_PER_DAY).num_microseconds(),\n@@ -477,7 +477,7 @@ mod tests {\n         assert_eq!(MIN.num_nanoseconds(), None);\n \n         // overflow checks\n-        static NANOS_PER_DAY: i64 = 86400_000_000_000;\n+        const NANOS_PER_DAY: i64 = 86400_000_000_000;\n         assert_eq!(Duration::days(i64::MAX / NANOS_PER_DAY).num_nanoseconds(),\n                    Some(i64::MAX / NANOS_PER_DAY * NANOS_PER_DAY));\n         assert_eq!(Duration::days(i64::MIN / NANOS_PER_DAY).num_nanoseconds(),"}]}