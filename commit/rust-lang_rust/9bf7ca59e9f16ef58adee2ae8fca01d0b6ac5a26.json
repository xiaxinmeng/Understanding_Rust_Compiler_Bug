{"sha": "9bf7ca59e9f16ef58adee2ae8fca01d0b6ac5a26", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliZjdjYTU5ZTlmMTZlZjU4YWRlZTJhZThmY2EwMWQwYjZhYzVhMjY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-05T10:04:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-05T10:04:28Z"}, "message": "Merge #8337\n\n8337: internal: explain \"extract if condition\" refactoring r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "19d03d2f7516f29f65f1e1de8ee1ab2254f2e98c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19d03d2f7516f29f65f1e1de8ee1ab2254f2e98c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bf7ca59e9f16ef58adee2ae8fca01d0b6ac5a26", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgauCsCRBK7hj4Ov3rIwAAdHIIAGJp9eiEDFtierzzxa36Md04\nN0Pl5SDDc4Z9WMlCXV4ZHQEqFqfQ7sZaG1s1kh7eioqDjNfwxNjoVaiEFcT+hjis\nY/Llazd68Yz6scgowJFIsKxEWVpPYHosh+LFZQ89PZVv5hMVmV0bxyWa6hoKfiZ4\nbREEN9MwrWzE2ieLvIUeFab8F0uE9aqXSV8oGmkjdw9KaZ9BXVDliij46Q68Q3AG\nU7YrDVTkpb1W/rzOw11MU+4c7SrbUuxxRaZ7t5uECkOdpcNBIk2Z2ts5XCvcCgXs\nTh4VjuxAsLxxGqrLJHvjWFakWG2nVGvTbmDbuA4DuofmvEKwe8DM4OQRXhTEUtI=\n=ixbD\n-----END PGP SIGNATURE-----\n", "payload": "tree 19d03d2f7516f29f65f1e1de8ee1ab2254f2e98c\nparent 58924cfae1be231e01736407fa666f31898a699e\nparent a01fd1af19314a73e5436a912f1cac2341ea11cd\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1617617068 +0000\ncommitter GitHub <noreply@github.com> 1617617068 +0000\n\nMerge #8337\n\n8337: internal: explain \"extract if condition\" refactoring r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bf7ca59e9f16ef58adee2ae8fca01d0b6ac5a26", "html_url": "https://github.com/rust-lang/rust/commit/9bf7ca59e9f16ef58adee2ae8fca01d0b6ac5a26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bf7ca59e9f16ef58adee2ae8fca01d0b6ac5a26/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58924cfae1be231e01736407fa666f31898a699e", "url": "https://api.github.com/repos/rust-lang/rust/commits/58924cfae1be231e01736407fa666f31898a699e", "html_url": "https://github.com/rust-lang/rust/commit/58924cfae1be231e01736407fa666f31898a699e"}, {"sha": "a01fd1af19314a73e5436a912f1cac2341ea11cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a01fd1af19314a73e5436a912f1cac2341ea11cd", "html_url": "https://github.com/rust-lang/rust/commit/a01fd1af19314a73e5436a912f1cac2341ea11cd"}], "stats": {"total": 39, "additions": 29, "deletions": 10}, "files": [{"sha": "4d10a2eadcb0045143eced111ffb9d2332259d7f", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9bf7ca59e9f16ef58adee2ae8fca01d0b6ac5a26/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bf7ca59e9f16ef58adee2ae8fca01d0b6ac5a26/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=9bf7ca59e9f16ef58adee2ae8fca01d0b6ac5a26", "patch": "@@ -927,22 +927,22 @@ pub(crate) fn handle_formatting(\n     let captured_stderr = String::from_utf8(output.stderr).unwrap_or_default();\n \n     if !output.status.success() {\n-        match output.status.code() {\n-            Some(1)\n-                if !captured_stderr.contains(\"not installed\")\n-                    && !captured_stderr.contains(\"not available\") =>\n-            {\n+        let rustfmt_not_installed =\n+            captured_stderr.contains(\"not installed\") || captured_stderr.contains(\"not available\");\n+\n+        return match output.status.code() {\n+            Some(1) if !rustfmt_not_installed => {\n                 // While `rustfmt` doesn't have a specific exit code for parse errors this is the\n                 // likely cause exiting with 1. Most Language Servers swallow parse errors on\n                 // formatting because otherwise an error is surfaced to the user on top of the\n                 // syntax error diagnostics they're already receiving. This is especially jarring\n                 // if they have format on save enabled.\n                 log::info!(\"rustfmt exited with status 1, assuming parse error and ignoring\");\n-                return Ok(None);\n+                Ok(None)\n             }\n             _ => {\n                 // Something else happened - e.g. `rustfmt` is missing or caught a signal\n-                return Err(LspError::new(\n+                Err(LspError::new(\n                     -32900,\n                     format!(\n                         r#\"rustfmt exited with:\n@@ -952,9 +952,9 @@ pub(crate) fn handle_formatting(\n                         output.status, captured_stdout, captured_stderr,\n                     ),\n                 )\n-                .into());\n+                .into())\n             }\n-        }\n+        };\n     }\n \n     let (new_text, new_line_endings) = LineEndings::normalize(captured_stdout);"}, {"sha": "48ce4b92a6eb64e50f73fe622140bf27506cbadc", "filename": "docs/dev/style.md", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9bf7ca59e9f16ef58adee2ae8fca01d0b6ac5a26/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/9bf7ca59e9f16ef58adee2ae8fca01d0b6ac5a26/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=9bf7ca59e9f16ef58adee2ae8fca01d0b6ac5a26", "patch": "@@ -842,7 +842,26 @@ Re-using originally single-purpose function often leads to bad coupling.\n \n ## Helper Variables\n \n-Introduce helper variables freely, especially for multiline conditions.\n+Introduce helper variables freely, especially for multiline conditions:\n+\n+```rust\n+// GOOD\n+let rustfmt_not_installed =\n+    captured_stderr.contains(\"not installed\") || captured_stderr.contains(\"not available\");\n+\n+match output.status.code() {\n+    Some(1) if !rustfmt_not_installed => Ok(None),\n+    _ => Err(format_err!(\"rustfmt failed:\\n{}\", captured_stderr)),\n+};\n+\n+// BAD\n+match output.status.code() {\n+    Some(1)\n+        if !captured_stderr.contains(\"not installed\")\n+           && !captured_stderr.contains(\"not available\") => Ok(None),\n+    _ => Err(format_err!(\"rustfmt failed:\\n{}\", captured_stderr)),\n+};\n+```\n \n **Rationale:** like blocks, single-use variables are a cognitively cheap abstraction, as they have access to all the context.\n Extra variables help during debugging, they make it easy to print/view important intermediate results."}]}