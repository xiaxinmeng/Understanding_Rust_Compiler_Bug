{"sha": "68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4ZWJlODE0MWE5ZDQ2OWVkN2E3MDgxZTdhNGE5ZmY0YzgyZmJmZjc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-11T23:01:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-01-11T23:01:32Z"}, "message": "auto merge of #11477 : adridu59/rust/bug-report, r=cmr\n\nMostly cleanups for doc and READMEs. Fixes the bug reporting link.", "tree": {"sha": "b5d0b27b427c14a0ef90ad1ff80d4444b3249ac9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5d0b27b427c14a0ef90ad1ff80d4444b3249ac9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7", "html_url": "https://github.com/rust-lang/rust/commit/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db9ef2869543669103227e8f156b32978c165c83", "url": "https://api.github.com/repos/rust-lang/rust/commits/db9ef2869543669103227e8f156b32978c165c83", "html_url": "https://github.com/rust-lang/rust/commit/db9ef2869543669103227e8f156b32978c165c83"}, {"sha": "72794094a17caa33cccf6a16d37c4e640f431f32", "url": "https://api.github.com/repos/rust-lang/rust/commits/72794094a17caa33cccf6a16d37c4e640f431f32", "html_url": "https://github.com/rust-lang/rust/commit/72794094a17caa33cccf6a16d37c4e640f431f32"}], "stats": {"total": 311, "additions": 156, "deletions": 155}, "files": [{"sha": "52598ea3c692f33095533419c93427d2e6d3dcea", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7", "patch": "@@ -2,7 +2,7 @@\n \n If you're just reporting a bug, please see:\n \n-https://github.com/mozilla/rust/wiki/HOWTO-submit-a-Rust-bug-report\n+http://static.rust-lang.org/doc/master/complement-bugreport.html\n \n ## Pull request procedure\n "}, {"sha": "207daa61155abd16c5e91788cedda6ffb2e6d6cd", "filename": "README.md", "status": "modified", "additions": 24, "deletions": 27, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7", "patch": "@@ -7,50 +7,49 @@ documentation.\n \n ### Windows\n \n-1. Download and use the [installer][win-exe].\n+1. Download and use the [installer and MinGW][win-wiki].\n 2. Read the [tutorial].\n 2. Enjoy!\n \n-> ***Note:*** Windows users should read the detailed\n-> [getting started][wiki-start] notes on the wiki. Even when using\n-> the binary installer the Windows build requires a MinGW installation,\n-> the precise details of which are not discussed here.\n+> ***Note:*** Windows users can read the detailed\n+> [getting started][wiki-start] notes on the wiki.\n \n [tutorial]: http://static.rust-lang.org/doc/tutorial.html\n [wiki-start]: https://github.com/mozilla/rust/wiki/Note-getting-started-developing-Rust\n-[win-exe]: http://static.rust-lang.org/dist/rust-0.9-install.exe\n+[win-wiki]: https://github.com/mozilla/rust/wiki/Using-Rust-on-Windows\n \n ### Linux / OS X\n \n-1. Install the prerequisites (if not already installed)\n-    * g++ 4.4 or clang++ 3.x\n-    * python 2.6 or later (but not 3.x)\n-    * perl 5.0 or later\n-    * gnu make 3.81 or later\n-    * curl\n-2. Download and build Rust\n+1. Make sure you have installed the dependencies:\n+    * `g++` 4.4 or `clang++` 3.x\n+    * `python` 2.6 or later (but not 3.x)\n+    * `perl` 5.0 or later\n+    * GNU `make` 3.81 or later\n+    * `curl`\n+2. Download and build Rust:\n+\n     You can either download a [tarball] or build directly from the [repo].\n-    \n+\n     To build from the [tarball] do:\n-    \n+\n         $ curl -O http://static.rust-lang.org/dist/rust-0.9.tar.gz\n         $ tar -xzf rust-0.9.tar.gz\n         $ cd rust-0.9\n-    \n+\n     Or to build from the [repo] do:\n \n         $ git clone https://github.com/mozilla/rust.git\n         $ cd rust\n \n     Now that you have Rust's source code, you can configure and build it:\n-    \n+\n         $ ./configure\n         $ make && make install\n-    \n-    You may need to use `sudo make install` if you do not normally have\n-    permission to modify the destination directory. The install locations can\n-    be adjusted by passing a `--prefix` argument to `configure`. Various other\n-    options are also supported, pass `--help` for more information on them.\n+\n+    > ***Note:*** You may need to use `sudo make install` if you do not normally have\n+    > permission to modify the destination directory. The install locations can\n+    > be adjusted by passing a `--prefix` argument to `configure`. Various other\n+    > options are also supported, pass `--help` for more information on them.\n \n     When complete, `make install` will place several programs into\n     `/usr/local/bin`: `rustc`, the Rust compiler; `rustdoc`, the\n@@ -76,22 +75,20 @@ Snapshot binaries are currently built and tested on several platforms:\n * Linux (various distributions), x86 and x86-64\n * OSX 10.6 (\"Snow Leopard\") or greater, x86 and x86-64\n \n-You may find that other platforms work, but these are our \"tier 1\"\n+You may find that other platforms work, but these are our officially\n supported build environments that are most likely to work.\n \n-Rust currently needs about 1.8G of RAM to build without swapping; if it hits\n+Rust currently needs about 1.5 GiB of RAM to build without swapping; if it hits\n swap, it will take a very long time to build.\n \n-There is lots more documentation in the [wiki].\n+There is a lot more documentation in the [wiki].\n \n [wiki]: https://github.com/mozilla/rust/wiki\n \n-\n ## License\n \n Rust is primarily distributed under the terms of both the MIT license\n and the Apache License (Version 2.0), with portions covered by various\n BSD-like licenses.\n \n See LICENSE-APACHE, LICENSE-MIT, and COPYRIGHT for details.\n-"}, {"sha": "d7578987e2b15a9a8fa6251ee800b390e9cb640a", "filename": "doc/README", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/db9ef2869543669103227e8f156b32978c165c83/doc%2FREADME", "raw_url": "https://github.com/rust-lang/rust/raw/db9ef2869543669103227e8f156b32978c165c83/doc%2FREADME", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2FREADME?ref=db9ef2869543669103227e8f156b32978c165c83", "patch": "@@ -1,28 +0,0 @@\n-Pandoc, a universal document converter, is required to generate docs as HTML\n-from Rust's source code. It's available for most platforms here:\n-http://johnmacfarlane.net/pandoc/installing.html\n-\n-Node.js (http://nodejs.org/) is also required for generating HTML from\n-the Markdown docs (reference manual, tutorials, etc.) distributed with\n-this git repository.\n-\n-To generate all the docs, run `make docs` from the root of the repository.\n-This will convert the distributed Markdown docs to HTML and generate HTML doc\n-for the 'std' and 'extra' libraries.\n-\n-To generate HTML documentation from one source file/crate, do something like:\n-\n-  rustdoc --output-dir html-doc/ --output-format html ../src/libstd/path.rs\n-\n-(This, of course, requires that you've built/installed the `rustdoc` tool.)\n-\n-To generate an HTML version of a doc from Markdown, without having Node.js\n-installed, do something like:\n-\n-  pandoc --from=markdown --to=html5 --number-sections -o rust.html rust.md\n-\n-The syntax for pandoc flavored markdown can be found at:\n-http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown\n-\n-A nice quick reference (for non-pandoc markdown) is at:\n-http://kramdown.rubyforge.org/quickref.html"}, {"sha": "3942603159b1933190ccd537e0ad3d68748c7405", "filename": "doc/README.md", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/doc%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/doc%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2FREADME.md?ref=68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7", "patch": "@@ -0,0 +1,40 @@\n+# Dependencies\n+\n+[Pandoc](http://johnmacfarlane.net/pandoc/installing.html), a universal\n+document converter, is required to generate docs as HTML from Rust's\n+source code.\n+\n+[Node.js](http://nodejs.org/) is also required for generating HTML from\n+the Markdown docs (reference manual, tutorials, etc.) distributed with\n+this git repository.\n+\n+# Building\n+\n+To generate all the docs, just run `make docs` from the root of the repository.\n+This will convert the distributed Markdown docs to HTML and generate HTML doc\n+for the 'std' and 'extra' libraries.\n+\n+To generate HTML documentation from one source file/crate, do something like:\n+\n+~~~~\n+rustdoc --output-dir html-doc/ --output-format html ../src/libstd/path.rs\n+~~~~\n+\n+(This, of course, requires a working build of the `rustdoc` tool.)\n+\n+# Additional notes\n+\n+To generate an HTML version of a doc from Markdown without having Node.js\n+installed, you can do something like:\n+\n+~~~~\n+pandoc --from=markdown --to=html5 --number-sections -o rust.html rust.md\n+~~~~\n+\n+(rust.md being the Rust Reference Manual.)\n+\n+The syntax for pandoc flavored markdown can be found at:\n+http://johnmacfarlane.net/pandoc/README.html#pandocs-markdown\n+\n+A nice quick reference (for non-pandoc markdown) is at:\n+http://kramdown.rubyforge.org/quickref.html"}, {"sha": "d84d720871dc269a6d9e5396ca67f4795deef1f2", "filename": "doc/complement-bugreport.md", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/doc%2Fcomplement-bugreport.md", "raw_url": "https://github.com/rust-lang/rust/raw/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/doc%2Fcomplement-bugreport.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcomplement-bugreport.md?ref=68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7", "patch": "@@ -1,47 +1,45 @@\n-% HOWTO submit a RUST bug report\n+% How to submit a Rust bug report\n \n # I think I found a bug in the compiler!\n \n-   If you see this message: ''error: internal compiler error: unexpected failure'',\n+If you see this message: `error: internal compiler error: unexpected failure`,\n then you have definitely found a bug in the compiler. It's also possible that\n your code is not well-typed, but if you saw this message, it's still a bug in\n error reporting.\n \n-   If you see a message about an LLVM assertion failure, then you have also\n+If you see a message about an LLVM assertion failure, then you have also\n definitely found a bug in the compiler. In both of these cases, it's not your\n fault and you should report a bug!\n \n-   If you see a compiler error message that you think is meant for users to see,\n+If you see a compiler error message that you think is meant for users to see,\n but it confuses you, *that's a bug too*. If it wasn't clear to you, then it's\n an error message we want to improve, so please report it so that we can try\n to make it better.\n \n-# I don't want to waste the Rust devs' time! How do I know the bug I found isn't a bug that already exists in the issue tracker?\n+# How do I know the bug I found isn't a bug that already exists in the issue tracker?\n \n-   If you don't have much time, then don't worry about that. Just submit the bug.\n-If it's a duplicate, somebody will notice that and close it. No one will laugh\n-at you, we promise (and if someone did, they would be violating the Rust\n-[code of conduct](https://github.com/mozilla/rust/wiki/Note-development-policy code of conduct)).\n+If you don't have enough time for a search, then don't worry about that. Just submit\n+the bug. If it's a duplicate, somebody will notice that and close it during triage.\n \n-   If you have more time, it's very helpful if you can type the text of the error\n+If you have the time for it, it would be useful to type the text of the error\n message you got [into the issue tracker search box](https://github.com/mozilla/rust/issues)\n to see if there's an existing bug that resembles your problem. If there is,\n-and it's an open bug, you can comment on that issue and say you ran into it too.\n-This will encourage devs to fix it. But again, don't let this stop you from\n+and it's an open bug, you can comment on that issue and say you are also affected.\n+This will encourage the devs to fix it. But again, don't let this stop you from\n submitting a bug. We'd rather have to do the work of closing duplicates than\n miss out on valid bug reports.\n \n # What information should I include in a bug report?\n \n-    It's helpful to include your specific OS (for example: Mac OS X 10.8.3,\n-Windows 7, Ubuntu 12.0.4) and your hardware architecture (for example: i686, x86_64).\n+It generally helps our diagnosis to include your specific OS (for example: Mac OS X 10.8.3,\n+Windows 7, Ubuntu 12.04) and your hardware architecture (for example: i686, x86_64).\n It's also helpful to copy/paste the output of re-running the erroneous rustc\n-commmand with the `-v` flag. Finally, if you can run the offending command under gdb,\n-pasting a stack trace can be useful; to do so, you will need to set a breakpoint on `rust_begin_unwind`.\n+command with the `-v` flag. Finally, if you can run the offending command under gdb,\n+pasting a stack trace can be useful; to do so, you will need to set a breakpoint on `rust_fail`.\n \n-# I submitted a bug, but nobody has commented on it! I'm sad.\n+# I submitted a bug, but nobody has commented on it!\n \n-   This is sad, but does happen sometimes, since we're short-staffed. If you\n+This is sad, but does happen sometimes, since we're short-staffed. If you\n submit a bug and you haven't received a comment on it within 3 business days,\n it's entirely reasonable to either ask on the #rust IRC channel,\n or post on the [rust-dev mailing list](https://mail.mozilla.org/listinfo/rust-dev)"}, {"sha": "3572a411e0a3a42993c8107216ed804177e7d10d", "filename": "doc/complement-lang-faq.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/doc%2Fcomplement-lang-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/doc%2Fcomplement-lang-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcomplement-lang-faq.md?ref=68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7", "patch": "@@ -236,7 +236,7 @@ They start small (ideally in the hundreds of bytes) and expand dynamically by ca\n \n * Requiring explicit bounds means that the compiler can type-check the code at the point where the type-parametric item is *defined*, rather than delaying to when its type parameters are instantiated.  You know that *any* set of type parameters fulfilling the bounds listed in the API will compile. It's an enforced minimal level of documentation, and results in very clean error messages.\n \n-* Scoping of methods is also a problem.  C++ needs [Koenig (argument dependent) lookup](http://en.wikipedia.org/wiki/Argument-dependent_name_lookup), which comes with its own host of problems. Explicit bounds avoid this issue: traits are explicitly imported and then used as bounds on type parameters, so there is a clear mapping from the method to its implementation (via the trait and the instantiated type).  \n+* Scoping of methods is also a problem.  C++ needs [Koenig (argument dependent) lookup](http://en.wikipedia.org/wiki/Argument-dependent_name_lookup), which comes with its own host of problems. Explicit bounds avoid this issue: traits are explicitly imported and then used as bounds on type parameters, so there is a clear mapping from the method to its implementation (via the trait and the instantiated type).\n \n   * Related to the above point: since a parameter explicitly names its trait bounds, a single type is able to implement traits whose sets of method names overlap, cleanly and unambiguously.\n "}, {"sha": "8665644c1f1db53ccaf94243930e8b5b6c7a0500", "filename": "doc/complement-project-faq.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/doc%2Fcomplement-project-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/doc%2Fcomplement-project-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcomplement-project-faq.md?ref=68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7", "patch": "@@ -15,7 +15,7 @@ Existing languages at this level of abstraction and efficiency are unsatisfactor\n # What are some non-goals?\n \n * To employ any particularly cutting-edge technologies. Old, established techniques are better.\n-* To prize expressiveness, minimalism or elegance above other goals. These are desirable but subordinate goals. \n+* To prize expressiveness, minimalism or elegance above other goals. These are desirable but subordinate goals.\n * To cover the \"systems language\" part all the way down to \"writing an OS kernel\".\n * To cover the complete feature-set of C++, or any other language. It should provide majority-case features.\n * To be 100% static, 100% safe, 100% reflective, or too dogmatic in any other sense. Trade-offs exist."}, {"sha": "aca7d833849db27b1a0c545765152a8bbf64d68f", "filename": "doc/complement-usage-faq.md", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/doc%2Fcomplement-usage-faq.md", "raw_url": "https://github.com/rust-lang/rust/raw/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/doc%2Fcomplement-usage-faq.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Fcomplement-usage-faq.md?ref=68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7", "patch": "@@ -20,15 +20,11 @@ If you aren't sure which paths you need, try setting RUST_LOG to `::help` and ru\n \n This is much like the answer for `log` statements, except that you also need to compile your program in debug mode (that is, pass `--cfg debug` to `rustc`).  Note that if you want to see the instrumentation of the `debug!` statements within `rustc` itself, you need a debug version of `rustc`; you can get one by invoking `configure` with the `--enable-debug` option.\n \n-# What does it mean when a program exits with `leaked memory in rust main loop (2 objects)' failed, rt/memory_region.cpp:99 2 objects`?\n+# What does it mean when a program exits with `leaked memory`?\n \n-This message indicates a memory leak, and is mostly likely to happen on rarely exercised failure paths. Note that failure unwinding is not yet implemented on windows so this is expected. If you see this on Linux or Mac it's a compiler bug; please report it.\n-\n-# Why do gdb backtraces end with the error 'previous frame inner to this frame (corrupt stack?)'?\n+The error looks like this: `leaked memory in rust main loop (2 objects)' failed, rt/memory_region.cpp:99 2 objects`.\n \n-**Short answer** your gdb is too old to understand our hip new stacks. Upgrade to a newer version (7.3.1 is known to work).\n-\n-**Long answer** Rust uses 'spaghetti stacks' (a linked list of stacks) to allow tasks to start very small but recurse arbitrarily deep when necessary. As a result, new frames don't always decrease the stack pointer like gdb expects but instead may jump around the heap to different stack segments. Newer versions of gdb recognize that the special function called __morestack may change the stack pointer to a different stack.\n+This message indicates a memory leak, and is mostly likely to happen on rarely exercised failure paths. Note that failure unwinding is not yet implemented on windows so this is expected. If you see this on Linux or Mac it's a compiler bug; please report it.\n \n # Why did my build create a bunch of zero-length files in my lib directory?\n "}, {"sha": "04682a56e97481f200034e25f889d59e26f921b8", "filename": "doc/index.md", "status": "modified", "additions": 28, "deletions": 26, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/doc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/doc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Findex.md?ref=68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7", "patch": "@@ -6,44 +6,46 @@\n .header-section-number { display: none; }\n </style>\n \n-[The Rust tutorial](tutorial.html)  \n-[The Rust reference manual](rust.html) ([PDF](rust.pdf))  \n+[The Rust tutorial](tutorial.html)  ([PDF](tutorial.pdf))\n+[The Rust reference manual](rust.html) ([PDF](rust.pdf))\n \n # Guides\n \n-[Pointers](guide-pointers.html)  \n-[References and Lifetimes](guide-lifetimes.html)  \n-[Containers and Iterators](guide-container.html)  \n-[Tasks and Communication](guide-tasks.html)  \n-[Foreign Function Interface](guide-ffi.html)  \n-[Macros](guide-macros.html)  \n-[Packaging](guide-rustpkg.html)  \n-[Testing](guide-testing.html)  \n-[Conditions](guide-conditions.html)  \n+[Pointers](guide-pointers.html)\n+[References and Lifetimes](guide-lifetimes.html)\n+[Containers and Iterators](guide-container.html)\n+[Tasks and Communication](guide-tasks.html)\n+[Foreign Function Interface](guide-ffi.html)\n+[Macros](guide-macros.html)\n+[Packaging](guide-rustpkg.html)\n+[Testing](guide-testing.html)\n+[Conditions](guide-conditions.html)\n \n # Libraries\n \n-[std](std/index.html)  \n-[extra](extra/index.html)  \n-[green](green/index.html)  \n-[native](native/index.html)  \n-[syntax](syntax/index.html)  \n-[rustc](rustc/index.html)  \n+[The standard library, `libstd`](std/index.html)\n+[The extra library, `libextra`](extra/index.html)\n+\n+[The M:N runtime library, `libgreen`](green/index.html)\n+[The 1:1 runtime library, `libnative`](native/index.html)\n+\n+[The Rust parser, `libsyntax`](syntax/index.html)\n+[The Rust compiler, `librustc`](rustc/index.html)\n \n # Tooling\n \n-[The rustpkg manual](rustpkg.html)  \n+[The `rustpkg` manual](rustpkg.html)\n \n # FAQs\n \n-[Language FAQ](complement-lang-faq.html)  \n-[Project FAQ](complement-project-faq.html)  \n-[Usage FAQ](complement-usage-faq.html)  \n-[Code cheatsheet](complement-cheatsheet.html) - \"How do I do X?\"  \n-[HOWTO submit a bug report](complement-bugreport.html)  \n+[Language FAQ](complement-lang-faq.html)\n+[Project FAQ](complement-project-faq.html)\n+[Usage FAQ](complement-usage-faq.html)\n+[Code cheatsheet](complement-cheatsheet.html) - \"How do I do X?\"\n+[How to submit a bug report](complement-bugreport.html)\n \n # External resources\n \n-The Rust [IRC channel](http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust) - #rust on irc.mozilla.org  \n-The Rust community on [Reddit](http://reddit.com/r/rust)  \n-The Rust [wiki](http://github.com/mozilla/rust/wiki)  \n+The Rust [IRC channel](http://chat.mibbit.com/?server=irc.mozilla.org&channel=%23rust) - `#rust` on irc.mozilla.org\n+The Rust community on [Reddit](http://reddit.com/r/rust)\n+The Rust [wiki](http://github.com/mozilla/rust/wiki)"}, {"sha": "d01ebb437702d92e9522e8bc44bcdf3edf07df1c", "filename": "mk/docs.mk", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/mk%2Fdocs.mk", "raw_url": "https://github.com/rust-lang/rust/raw/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/mk%2Fdocs.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fdocs.mk?ref=68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7", "patch": "@@ -17,9 +17,9 @@ CDOCS :=\n DOCS_L10N :=\n HTML_DEPS :=\n \n-BASE_DOC_OPTS := --from=markdown --standalone --toc --number-sections\n+BASE_DOC_OPTS := --include-before-body=doc/version_info.html --standalone  \\\n+                                --toc --number-sections\n HTML_OPTS = $(BASE_DOC_OPTS) \t--to=html5  --section-divs --css=rust.css  \\\n-\t\t\t\t\t\t\t\t--include-before-body=doc/version_info.html \\\n \t\t\t\t\t\t\t\t--include-in-header=doc/favicon.inc\n TEX_OPTS = $(BASE_DOC_OPTS) --to=latex\n EPUB_OPTS = $(BASE_DOC_OPTS) --to=epub"}, {"sha": "f6c7e847cc7e3424be379f7c6f7543cb1ca3a789", "filename": "src/README.md", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/src%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/src%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FREADME.md?ref=68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7", "patch": "@@ -0,0 +1,39 @@\n+This is a preliminary version of the Rust compiler, libraries and tools.\n+\n+Source layout:\n+\n+| Path                | Description                                               |\n+| ------------------- | --------------------------------------------------------- |\n+| `librustc/`         | The self-hosted compiler                                  |\n+| `libstd/`           | The standard library (imported and linked by default)     |\n+| `libextra/`         | The \"extras\" library (slightly more peripheral code)      |\n+| `libgreen/`         | The M:N runtime library                                   |\n+| `libnative/`        | The 1:1 runtime library                                   |\n+| `libsyntax/`        | The Rust parser and pretty-printer                        |\n+| ------------------- | --------------------------------------------------------- |\n+| `rt/`               | The runtime system                                        |\n+| `rt/rust_*.c`       | - Some of the runtime services                            |\n+| `rt/vg`             | - Valgrind headers                                        |\n+| `rt/msvc`           | - MSVC support                                            |\n+| `rt/sundown`        | - The Markdown library used by rustdoc                    |\n+| ------------------- | --------------------------------------------------------- |\n+| `compiletest/`      | The test runner                                           |\n+| `test/`             | Testsuite                                                 |\n+| `test/codegen`      | - Tests for the LLVM IR infrastructure                    |\n+| `test/compile-fail` | - Tests that should fail to compile                       |\n+| `test/debug-info`   | - Tests for the `debuginfo` tool                          |\n+| `test/run-fail`     | - Tests that should compile, run and fail                 |\n+| `test/run-make`     | - Tests that depend on a Makefile infrastructure          |\n+| `test/run-pass`     | - Tests that should compile, run and succeed              |\n+| `test/bench`        | - Benchmarks and miscellaneous                            |\n+| `test/pretty`       | - Pretty-printer tests                                    |\n+| `test/auxiliary`    | - Dependencies of tests                                   |\n+| ------------------- | --------------------------------------------------------- |\n+| `librustdoc/`       | The Rust API documentation tool                           |\n+| `librustpkg/`       | The package manager and build system                      |\n+| `libuv/`            | The libuv submodule                                       |\n+| ------------------- | --------------------------------------------------------- |\n+| `llvm/`             | The LLVM submodule                                        |\n+| `rustllvm/`         | LLVM support code                                         |\n+| ------------------- | --------------------------------------------------------- |\n+| `etc/`              | Scripts, editors support, misc                            |"}, {"sha": "1ee08247c7353b51a898b00ca052dc5c41d30554", "filename": "src/README.txt", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/db9ef2869543669103227e8f156b32978c165c83/src%2FREADME.txt", "raw_url": "https://github.com/rust-lang/rust/raw/db9ef2869543669103227e8f156b32978c165c83/src%2FREADME.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FREADME.txt?ref=db9ef2869543669103227e8f156b32978c165c83", "patch": "@@ -1,43 +0,0 @@\n-This is a preliminary version of the Rust compiler, libraries and tools\n-\n-Source layout:\n-\n-librustc/          The self-hosted compiler\n-\n-libstd/            The standard library (imported and linked by default)\n-libextra/          The \"extras\" library (slightly more peripheral code)\n-libsyntax/         The Rust parser and pretty-printer\n-\n-rt/                The runtime system\n-rt/rust_*.cpp      - The majority of the runtime services\n-rt/isaac           - The PRNG used for pseudo-random choices in the runtime\n-rt/bigint          - The bigint library used for the 'big' type\n-rt/uthash          - Small hashtable-and-list library for C, used in runtime\n-rt/sync            - Concurrency utils\n-rt/util            - Small utility classes for the runtime.\n-rt/vg              - Valgrind headers\n-rt/msvc            - MSVC support\n-\n-test/              Testsuite\n-test/compile-fail  - Tests that should fail to compile\n-test/run-fail      - Tests that should compile, run and fail\n-test/run-pass      - Tests that should compile, run and succeed\n-test/bench         - Benchmarks and miscellanea\n-test/pretty        - Pretty-printer tests\n-test/auxiliary     - Dependencies of tests\n-\n-compiletest/       The test runner\n-\n-librustpkg/        The package manager and build system\n-\n-librustdoc/        The Rust API documentation tool\n-\n-llvm/              The LLVM submodule\n-\n-libuv/             The libuv submodule\n-\n-rustllvm/          LLVM support code\n-\n-libfuzzer/         A collection of fuzz testers\n-\n-etc/               Scripts, editor support, misc"}, {"sha": "23d0f4585af29e637da17815db9934de9211e58b", "filename": "src/libsyntax/diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/src%2Flibsyntax%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7/src%2Flibsyntax%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostic.rs?ref=68ebe8141a9d469ed7a7081e7a4a9ff4c82fbff7", "patch": "@@ -18,7 +18,7 @@ use std::local_data;\n use extra::term;\n \n static BUG_REPORT_URL: &'static str =\n-    \"https://github.com/mozilla/rust/wiki/HOWTO-submit-a-Rust-bug-report\";\n+    \"http://static.rust-lang.org/doc/master/complement-bugreport.html\";\n \n pub trait Emitter {\n     fn emit(&self,"}]}