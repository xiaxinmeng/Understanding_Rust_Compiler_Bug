{"sha": "361dcd5ca7ecc84209c10d7102051471e82f8160", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MWRjZDVjYTdlY2M4NDIwOWMxMGQ3MTAyMDUxNDcxZTgyZjgxNjA=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-02-13T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2021-02-13T00:00:00Z"}, "message": "Use debug log level for developer oriented logs\n\nThe information logged here is of limited general interest, while at the\nsame times makes it impractical to simply enable logging and share the\nresulting logs due to the amount of the output produced.\n\nReduce log level from info to debug for developer oriented information.\n\nFor example, when building cargo, this reduces the amount of logs\ngenerated by `RUSTC_LOG=info cargo build` from 265 MB to 79 MB.\n\nContinuation of changes from 81350.", "tree": {"sha": "be2acebe04e230c29c6aa48e6bc0212b64367fc4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be2acebe04e230c29c6aa48e6bc0212b64367fc4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/361dcd5ca7ecc84209c10d7102051471e82f8160", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/361dcd5ca7ecc84209c10d7102051471e82f8160", "html_url": "https://github.com/rust-lang/rust/commit/361dcd5ca7ecc84209c10d7102051471e82f8160", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/361dcd5ca7ecc84209c10d7102051471e82f8160/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a", "html_url": "https://github.com/rust-lang/rust/commit/dd4851d503f3fae0c0c742a19e0d8e6e2140bd2a"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "f4f69fc8ac62b3b5846ade38cfae86036d4ff779", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/361dcd5ca7ecc84209c10d7102051471e82f8160/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361dcd5ca7ecc84209c10d7102051471e82f8160/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=361dcd5ca7ecc84209c10d7102051471e82f8160", "patch": "@@ -159,7 +159,7 @@ impl Inliner<'tcx> {\n         }\n     }\n \n-    #[instrument(skip(self, caller_body))]\n+    #[instrument(level = \"debug\", skip(self, caller_body))]\n     fn is_mir_available(&self, callee: Instance<'tcx>, caller_body: &Body<'tcx>) -> bool {\n         match callee.def {\n             InstanceDef::Item(_) => {\n@@ -258,7 +258,7 @@ impl Inliner<'tcx> {\n         None\n     }\n \n-    #[instrument(skip(self, callee_body))]\n+    #[instrument(level = \"debug\", skip(self, callee_body))]\n     fn should_inline(&self, callsite: CallSite<'tcx>, callee_body: &Body<'tcx>) -> bool {\n         let tcx = self.tcx;\n "}, {"sha": "4c24bec0ce3ad51334bd067e87a3119cde6bdcda", "filename": "compiler/rustc_mir/src/transform/inline/cycle.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/361dcd5ca7ecc84209c10d7102051471e82f8160/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361dcd5ca7ecc84209c10d7102051471e82f8160/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline%2Fcycle.rs?ref=361dcd5ca7ecc84209c10d7102051471e82f8160", "patch": "@@ -7,7 +7,7 @@ use rustc_middle::ty::{self, subst::SubstsRef, InstanceDef, TyCtxt};\n \n // FIXME: check whether it is cheaper to precompute the entire call graph instead of invoking\n // this query riddiculously often.\n-#[instrument(skip(tcx, root, target))]\n+#[instrument(level = \"debug\", skip(tcx, root, target))]\n crate fn mir_callgraph_reachable(\n     tcx: TyCtxt<'tcx>,\n     (root, target): (ty::Instance<'tcx>, LocalDefId),\n@@ -27,7 +27,10 @@ crate fn mir_callgraph_reachable(\n         !tcx.is_constructor(root.def_id()),\n         \"you should not call `mir_callgraph_reachable` on enum/struct constructor functions\"\n     );\n-    #[instrument(skip(tcx, param_env, target, stack, seen, recursion_limiter, caller))]\n+    #[instrument(\n+        level = \"debug\",\n+        skip(tcx, param_env, target, stack, seen, recursion_limiter, caller)\n+    )]\n     fn process(\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,"}, {"sha": "010fe4fd524d4d966bbd2207081023cc60e6a63d", "filename": "compiler/rustc_mir_build/src/thir/pattern/usefulness.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/361dcd5ca7ecc84209c10d7102051471e82f8160/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361dcd5ca7ecc84209c10d7102051471e82f8160/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fusefulness.rs?ref=361dcd5ca7ecc84209c10d7102051471e82f8160", "patch": "@@ -1079,7 +1079,10 @@ impl<'tcx> Witness<'tcx> {\n /// `is_under_guard` is used to inform if the pattern has a guard. If it\n /// has one it must not be inserted into the matrix. This shouldn't be\n /// relied on for soundness.\n-#[instrument(skip(cx, matrix, witness_preference, hir_id, is_under_guard, is_top_level))]\n+#[instrument(\n+    level = \"debug\",\n+    skip(cx, matrix, witness_preference, hir_id, is_under_guard, is_top_level)\n+)]\n fn is_useful<'p, 'tcx>(\n     cx: &MatchCheckCtxt<'p, 'tcx>,\n     matrix: &Matrix<'p, 'tcx>,"}, {"sha": "4ccf657335fedb747694c74283e2d822b8d8a537", "filename": "compiler/rustc_span/src/hygiene.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/361dcd5ca7ecc84209c10d7102051471e82f8160/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361dcd5ca7ecc84209c10d7102051471e82f8160/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fhygiene.rs?ref=361dcd5ca7ecc84209c10d7102051471e82f8160", "patch": "@@ -1405,8 +1405,8 @@ fn update_disambiguator(expn_id: ExpnId) {\n     });\n \n     if modified {\n-        info!(\"Set disambiguator for {:?} (hash {:?})\", expn_id, first_hash);\n-        info!(\"expn_data = {:?}\", expn_id.expn_data());\n+        debug!(\"Set disambiguator for {:?} (hash {:?})\", expn_id, first_hash);\n+        debug!(\"expn_data = {:?}\", expn_id.expn_data());\n \n         // Verify that the new disambiguator makes the hash unique\n         #[cfg(debug_assertions)]"}, {"sha": "45853a66efc2a565e1e0cb9592cc1913aa1877e0", "filename": "compiler/rustc_trait_selection/src/traits/codegen.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/361dcd5ca7ecc84209c10d7102051471e82f8160/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361dcd5ca7ecc84209c10d7102051471e82f8160/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fcodegen.rs?ref=361dcd5ca7ecc84209c10d7102051471e82f8160", "patch": "@@ -91,7 +91,7 @@ pub fn codegen_fulfill_obligation<'tcx>(\n         });\n         let impl_source = drain_fulfillment_cx_or_panic(&infcx, &mut fulfill_cx, impl_source);\n \n-        info!(\"Cache miss: {:?} => {:?}\", trait_ref, impl_source);\n+        debug!(\"Cache miss: {:?} => {:?}\", trait_ref, impl_source);\n         Ok(impl_source)\n     })\n }"}, {"sha": "95f79147efd43e62ea12361b3cc746967c673bd3", "filename": "compiler/rustc_trait_selection/src/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/361dcd5ca7ecc84209c10d7102051471e82f8160/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361dcd5ca7ecc84209c10d7102051471e82f8160/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ffulfill.rs?ref=361dcd5ca7ecc84209c10d7102051471e82f8160", "patch": "@@ -647,7 +647,7 @@ impl<'a, 'b, 'tcx> FulfillProcessor<'a, 'b, 'tcx> {\n                 ProcessResult::Unchanged\n             }\n             Err(selection_err) => {\n-                info!(\"selecting trait at depth {} yielded Err\", obligation.recursion_depth);\n+                debug!(\"selecting trait at depth {} yielded Err\", obligation.recursion_depth);\n \n                 ProcessResult::Error(CodeSelectionError(selection_err))\n             }"}, {"sha": "cfcbc77c172fd1f41ee457292474e69cee8dafd4", "filename": "compiler/rustc_traits/src/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/361dcd5ca7ecc84209c10d7102051471e82f8160/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/361dcd5ca7ecc84209c10d7102051471e82f8160/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fdropck_outlives.rs?ref=361dcd5ca7ecc84209c10d7102051471e82f8160", "patch": "@@ -80,7 +80,7 @@ fn dropck_outlives<'tcx>(\n             let cause = ObligationCause::dummy();\n             let mut constraints = DtorckConstraint::empty();\n             while let Some((ty, depth)) = ty_stack.pop() {\n-                info!(\n+                debug!(\n                     \"{} kinds, {} overflows, {} ty_stack\",\n                     result.kinds.len(),\n                     result.overflows.len(),"}]}