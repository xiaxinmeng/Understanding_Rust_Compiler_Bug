{"sha": "42bed7238534b50178cb2bd275f1153d67cc3ece", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyYmVkNzIzODUzNGI1MDE3OGNiMmJkMjc1ZjExNTNkNjdjYzNlY2U=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-05T21:58:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-01-05T21:58:45Z"}, "message": "Auto merge of #38689 - pnkfelix:dont-check-stability-on-private-items, r=nikomatsakis\n\nDont check stability for items that are not pub to universe.\n\nDont check stability for items that are not pub to universe.\n\nIn other words, skip it for private and even `pub(restricted)` items, because stability checks are only relevant to things visible in other crates.\n\nFix #38412.", "tree": {"sha": "c200dc71f1158faf3cb3c21a3b3eb2589174e163", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c200dc71f1158faf3cb3c21a3b3eb2589174e163"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42bed7238534b50178cb2bd275f1153d67cc3ece", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42bed7238534b50178cb2bd275f1153d67cc3ece", "html_url": "https://github.com/rust-lang/rust/commit/42bed7238534b50178cb2bd275f1153d67cc3ece", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42bed7238534b50178cb2bd275f1153d67cc3ece/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea2d41e31fb865ee57278f8acb78aacd75933856", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea2d41e31fb865ee57278f8acb78aacd75933856", "html_url": "https://github.com/rust-lang/rust/commit/ea2d41e31fb865ee57278f8acb78aacd75933856"}, {"sha": "ab8e92514cc273477e63c089ea6f38b0adba5ddd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab8e92514cc273477e63c089ea6f38b0adba5ddd", "html_url": "https://github.com/rust-lang/rust/commit/ab8e92514cc273477e63c089ea6f38b0adba5ddd"}], "stats": {"total": 286, "additions": 285, "deletions": 1}, "files": [{"sha": "e6c9d2c36d013fa9d9677e260534b0148605d1be", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/42bed7238534b50178cb2bd275f1153d67cc3ece/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bed7238534b50178cb2bd275f1153d67cc3ece/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=42bed7238534b50178cb2bd275f1153d67cc3ece", "patch": "@@ -18,7 +18,7 @@ use hir::map as hir_map;\n use lint;\n use hir::def::Def;\n use hir::def_id::{CrateNum, CRATE_DEF_INDEX, DefId, DefIndex, LOCAL_CRATE};\n-use ty::TyCtxt;\n+use ty::{self, TyCtxt};\n use middle::privacy::AccessLevels;\n use syntax::symbol::Symbol;\n use syntax_pos::{Span, DUMMY_SP};\n@@ -432,6 +432,36 @@ struct Checker<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n+    // (See issue #38412)\n+    fn skip_stability_check_due_to_privacy(self, def_id: DefId) -> bool {\n+        let visibility = {\n+            // Check if `def_id` is a trait method.\n+            match self.sess.cstore.associated_item(def_id) {\n+                Some(ty::AssociatedItem { container: ty::TraitContainer(trait_def_id), .. }) => {\n+                    // Trait methods do not declare visibility (even\n+                    // for visibility info in cstore). Use containing\n+                    // trait instead, so methods of pub traits are\n+                    // themselves considered pub.\n+                    self.sess.cstore.visibility(trait_def_id)\n+                }\n+                _ => {\n+                    // Otherwise, cstore info works directly.\n+                    self.sess.cstore.visibility(def_id)\n+                }\n+            }\n+        };\n+\n+        match visibility {\n+            // must check stability for pub items.\n+            ty::Visibility::Public => false,\n+\n+            // these are not visible outside crate; therefore\n+            // stability markers are irrelevant, if even present.\n+            ty::Visibility::Restricted(..) |\n+            ty::Visibility::Invisible => true,\n+        }\n+    }\n+\n     pub fn check_stability(self, def_id: DefId, id: NodeId, span: Span) {\n         if self.sess.codemap().span_allows_unstable(span) {\n             debug!(\"stability: \\\n@@ -492,6 +522,11 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             self.stability.borrow_mut().used_features.insert(feature.clone(), level.clone());\n         }\n \n+        // Issue 38412: private items lack stability markers.\n+        if self.skip_stability_check_due_to_privacy(def_id) {\n+            return\n+        }\n+\n         match stability {\n             Some(&Stability { level: attr::Unstable {ref reason, issue}, ref feature, .. }) => {\n                 if !self.stability.borrow().active_features.contains(feature) {"}, {"sha": "9dc4cf1252ec33234f4c613b7c2447d541a46ef2", "filename": "src/test/compile-fail-fulldeps/auxiliary/pub_and_stability.rs", "status": "added", "additions": 144, "deletions": 0, "changes": 144, "blob_url": "https://github.com/rust-lang/rust/blob/42bed7238534b50178cb2bd275f1153d67cc3ece/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fpub_and_stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bed7238534b50178cb2bd275f1153d67cc3ece/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fpub_and_stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fauxiliary%2Fpub_and_stability.rs?ref=42bed7238534b50178cb2bd275f1153d67cc3ece", "patch": "@@ -0,0 +1,144 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This crate attempts to enumerate the various scenarios for how a\n+// type can define fields and methods with various visiblities and\n+// stabilities.\n+//\n+// The basic stability pattern in this file has four cases:\n+// 1. no stability attribute at all\n+// 2. a stable attribute (feature \"unit_test\")\n+// 3. an unstable attribute that unit test declares (feature \"unstable_declared\")\n+// 4. an unstable attribute that unit test fails to declare (feature \"unstable_undeclared\")\n+//\n+// This file also covers four kinds of visibility: private,\n+// pub(module), pub(crate), and pub.\n+//\n+// However, since stability attributes can only be observed in\n+// cross-crate linkage scenarios, there is little reason to take the\n+// cross-product (4 stability cases * 4 visiblity cases), because the\n+// first three visibility cases cannot be accessed outside this crate,\n+// and therefore stability is only relevant when the visibility is pub\n+// to the whole universe.\n+//\n+// (The only reason to do so would be if one were worried about the\n+// compiler having some subtle bug where adding a stability attribute\n+// introduces a privacy violation. As a way to provide evidence that\n+// this is not occurring, I have put stability attributes on some\n+// non-pub fields, marked with SILLY below)\n+\n+#![feature(staged_api)]\n+#![feature(pub_restricted)]\n+\n+#![stable(feature = \"unit_test\", since = \"0.0.0\")]\n+\n+#[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+pub use m::{Record, Trait, Tuple};\n+\n+mod m {\n+    #[derive(Default)]\n+    #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+    pub struct Record {\n+        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        pub a_stable_pub: i32,\n+        #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n+        pub a_unstable_declared_pub: i32,\n+        #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")]\n+        pub a_unstable_undeclared_pub: i32,\n+        #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")] // SILLY\n+        pub(crate) b_crate: i32,\n+        #[unstable(feature = \"unstable_declared\", issue = \"38412\")] // SILLY\n+        pub(m) c_mod: i32,\n+        #[stable(feature = \"unit_test\", since = \"0.0.0\")] // SILLY\n+        d_priv: i32\n+    }\n+\n+    #[derive(Default)]\n+    #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n+    pub struct Tuple(\n+        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        pub i32,\n+        #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n+        pub i32,\n+        #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")]\n+        pub i32,\n+\n+        pub(crate) i32,\n+        pub(m) i32,\n+        i32);\n+\n+    impl Record {\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n+        pub fn new() -> Self { Default::default() }\n+    }\n+\n+    impl Tuple {\n+        #[stable(feature = \"unit_test\", since = \"1.0.0\")]\n+        pub fn new() -> Self { Default::default() }\n+    }\n+\n+\n+    #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+    pub trait Trait {\n+        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        type Type;\n+        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        fn stable_trait_method(&self) -> Self::Type;\n+        #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")]\n+        fn unstable_undeclared_trait_method(&self) -> Self::Type;\n+        #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n+        fn unstable_declared_trait_method(&self) -> Self::Type;\n+    }\n+\n+    #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+    impl Trait for Record {\n+        type Type = i32;\n+        fn stable_trait_method(&self) -> i32 { self.d_priv }\n+        fn unstable_undeclared_trait_method(&self) -> i32 { self.d_priv }\n+        fn unstable_declared_trait_method(&self) -> i32 { self.d_priv }\n+    }\n+\n+    #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+    impl Trait for Tuple {\n+        type Type = i32;\n+        fn stable_trait_method(&self) -> i32 { self.3 }\n+        fn unstable_undeclared_trait_method(&self) -> i32 { self.3 }\n+        fn unstable_declared_trait_method(&self) -> i32 { self.3 }\n+    }\n+\n+    impl Record {\n+        #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")]\n+        pub fn unstable_undeclared(&self) -> i32 { self.d_priv }\n+        #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n+        pub fn unstable_declared(&self) -> i32 { self.d_priv }\n+        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        pub fn stable(&self) -> i32 { self.d_priv }\n+\n+        #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")] // SILLY\n+        pub(crate) fn pub_crate(&self) -> i32 { self.d_priv }\n+        #[unstable(feature = \"unstable_declared\", issue = \"38412\")] // SILLY\n+        pub(m) fn pub_mod(&self) -> i32 { self.d_priv }\n+        #[stable(feature = \"unit_test\", since = \"0.0.0\")] // SILLY\n+        fn private(&self) -> i32 { self.d_priv }\n+    }\n+\n+    impl Tuple {\n+        #[unstable(feature = \"unstable_undeclared\", issue = \"38412\")]\n+        pub fn unstable_undeclared(&self) -> i32 { self.0 }\n+        #[unstable(feature = \"unstable_declared\", issue = \"38412\")]\n+        pub fn unstable_declared(&self) -> i32 { self.0 }\n+        #[stable(feature = \"unit_test\", since = \"0.0.0\")]\n+        pub fn stable(&self) -> i32 { self.0 }\n+\n+        pub(crate) fn pub_crate(&self) -> i32 { self.0 }\n+        pub(m) fn pub_mod(&self) -> i32 { self.0 }\n+        fn private(&self) -> i32 { self.0 }\n+    }\n+}"}, {"sha": "aab92575321e34704db011cf353753b2bf4c9c2e", "filename": "src/test/compile-fail-fulldeps/explore-issue-38412.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/42bed7238534b50178cb2bd275f1153d67cc3ece/src%2Ftest%2Fcompile-fail-fulldeps%2Fexplore-issue-38412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bed7238534b50178cb2bd275f1153d67cc3ece/src%2Ftest%2Fcompile-fail-fulldeps%2Fexplore-issue-38412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail-fulldeps%2Fexplore-issue-38412.rs?ref=42bed7238534b50178cb2bd275f1153d67cc3ece", "patch": "@@ -0,0 +1,85 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:pub_and_stability.rs\n+\n+#![feature(staged_api)]\n+#![feature(unused_feature)]\n+\n+// A big point of this test is that we *declare* `unstable_declared`,\n+// but do *not* declare `unstable_undeclared`. This way we can check\n+// that the compiler is letting in uses of declared feature-gated\n+// stuff but still rejecting uses of undeclared feature-gated stuff.\n+#![feature(unstable_declared)]\n+\n+extern crate pub_and_stability;\n+use pub_and_stability::{Record, Trait, Tuple};\n+\n+fn main() {\n+    // Okay\n+    let Record { .. } = Record::new();\n+    // Okay (for now; see RFC Issue #902)\n+    let Tuple(..) = Tuple::new();\n+\n+    // Okay\n+    let Record { a_stable_pub: _, a_unstable_declared_pub: _, .. } = Record::new();\n+    // Okay (for now; see RFC Issue #902)\n+    let Tuple(_, _, ..) = Tuple::new(); // analogous to above\n+\n+    let Record { a_stable_pub: _, a_unstable_declared_pub: _, a_unstable_undeclared_pub: _, .. } =\n+        Record::new();\n+    //~^^ ERROR use of unstable library feature 'unstable_undeclared'\n+\n+    let Tuple(_, _, _, ..) = Tuple::new(); // analogous to previous\n+    //~^ ERROR use of unstable library feature 'unstable_undeclared'\n+\n+    let r = Record::new();\n+    let t = Tuple::new();\n+\n+    r.a_stable_pub;\n+    r.a_unstable_declared_pub;\n+    r.a_unstable_undeclared_pub; //~ ERROR use of unstable library feature\n+    r.b_crate;                   //~ ERROR is private\n+    r.c_mod;                     //~ ERROR is private\n+    r.d_priv;                    //~ ERROR is private\n+\n+    t.0;\n+    t.1;\n+    t.2;                         //~ ERROR use of unstable library feature\n+    t.3;                         //~ ERROR is private\n+    t.4;                         //~ ERROR is private\n+    t.5;                         //~ ERROR is private\n+\n+    r.stable_trait_method();\n+    r.unstable_declared_trait_method();\n+    r.unstable_undeclared_trait_method(); //~ ERROR use of unstable library feature\n+\n+    r.stable();\n+    r.unstable_declared();\n+    r.unstable_undeclared();              //~ ERROR use of unstable library feature\n+\n+    r.pub_crate();                        //~ ERROR `pub_crate` is private\n+    r.pub_mod();                          //~ ERROR `pub_mod` is private\n+    r.private();                          //~ ERROR `private` is private\n+\n+    let t = Tuple::new();\n+    t.stable_trait_method();\n+    t.unstable_declared_trait_method();\n+    t.unstable_undeclared_trait_method(); //~ ERROR use of unstable library feature\n+\n+    t.stable();\n+    t.unstable_declared();\n+    t.unstable_undeclared();              //~ ERROR use of unstable library feature\n+\n+    t.pub_crate();                        //~ ERROR `pub_crate` is private\n+    t.pub_mod();                          //~ ERROR `pub_mod` is private\n+    t.private();                          //~ ERROR `private` is private\n+\n+}"}, {"sha": "00305eb2bc04bf2f3e9f7a31aacc5f4cf44a645a", "filename": "src/test/compile-fail/issue-38412.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/42bed7238534b50178cb2bd275f1153d67cc3ece/src%2Ftest%2Fcompile-fail%2Fissue-38412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42bed7238534b50178cb2bd275f1153d67cc3ece/src%2Ftest%2Fcompile-fail%2Fissue-38412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-38412.rs?ref=42bed7238534b50178cb2bd275f1153d67cc3ece", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let Box(a) = loop { };\n+    //~^ ERROR field `0` of struct `std::boxed::Box` is private\n+\n+    // (The below is a trick to allow compiler to infer a type for\n+    // variable `a` without attempting to ascribe a type to the\n+    // pattern or otherwise attempting to name the Box type, which\n+    // would run afoul of issue #22207)\n+    let _b: *mut i32 = *a;\n+}"}]}