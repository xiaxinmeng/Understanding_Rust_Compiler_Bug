{"sha": "f7024998c7eae5b582de680effaca105198aa95c", "node_id": "C_kwDOAAsO6NoAKGY3MDI0OTk4YzdlYWU1YjU4MmRlNjgwZWZmYWNhMTA1MTk4YWE5NWM", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-10-19T19:35:14Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-19T19:35:14Z"}, "message": "Rollup merge of #88860 - nbdd0121:panic, r=m-ou-se\n\nDeduplicate panic_fmt\n\nstd's begin_panic_fmt and core's panic_fmt are duplicates. Merge them to declutter code and remove a lang item.", "tree": {"sha": "f7c885e3f6f4c58f6ceac87779f2d4e3c0c3fac0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7c885e3f6f4c58f6ceac87779f2d4e3c0c3fac0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7024998c7eae5b582de680effaca105198aa95c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhbx3yCRBK7hj4Ov3rIwAA6RAIAGTGuPlJrDWE6og807ZF8C4u\nVniBKolTfgPNxeVrhG8iX5izmDgnbv2mRdzDE6Rnx0GtHPMgCusx24EyH/E/CJka\n0285W33lAvnTHEWnAazFj8lw6IXFrf2i5lDSkiI3XoEY2rKzbt7O0hMCOO7IFK2B\nyDwg7yd1eS0ycFdK1ONEyvsazhsd6FeQsHew1mEP+3RVUh0YhBibDWaN3CfzdL19\n/tYTPcXFdwvxK9eX1cXuGqDEh2kzwVt8vvzUx/MeqQzZ7ioxCrqcra7b8DoerM4d\n7rWJ1qgZSFI21j/4+b18xdloameSLCOPsG2Kzft2nOrUpdZLmPybWxDe4ocOE00=\n=mXFq\n-----END PGP SIGNATURE-----\n", "payload": "tree f7c885e3f6f4c58f6ceac87779f2d4e3c0c3fac0\nparent 84fe598f0094c8d6a1dddcdc38ac0fa28df32f44\nparent 7bd93dfeefac34a440ff011786d28e7b821add31\nauthor Yuki Okushi <jtitor@2k36.org> 1634672114 +0900\ncommitter GitHub <noreply@github.com> 1634672114 +0900\n\nRollup merge of #88860 - nbdd0121:panic, r=m-ou-se\n\nDeduplicate panic_fmt\n\nstd's begin_panic_fmt and core's panic_fmt are duplicates. Merge them to declutter code and remove a lang item.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7024998c7eae5b582de680effaca105198aa95c", "html_url": "https://github.com/rust-lang/rust/commit/f7024998c7eae5b582de680effaca105198aa95c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7024998c7eae5b582de680effaca105198aa95c/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84fe598f0094c8d6a1dddcdc38ac0fa28df32f44", "url": "https://api.github.com/repos/rust-lang/rust/commits/84fe598f0094c8d6a1dddcdc38ac0fa28df32f44", "html_url": "https://github.com/rust-lang/rust/commit/84fe598f0094c8d6a1dddcdc38ac0fa28df32f44"}, {"sha": "7bd93dfeefac34a440ff011786d28e7b821add31", "url": "https://api.github.com/repos/rust-lang/rust/commits/7bd93dfeefac34a440ff011786d28e7b821add31", "html_url": "https://github.com/rust-lang/rust/commit/7bd93dfeefac34a440ff011786d28e7b821add31"}], "stats": {"total": 53, "additions": 15, "deletions": 38}, "files": [{"sha": "8efe3eb868b941d48318863742aaeadec93964e8", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7024998c7eae5b582de680effaca105198aa95c/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7024998c7eae5b582de680effaca105198aa95c/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=f7024998c7eae5b582de680effaca105198aa95c", "patch": "@@ -72,9 +72,7 @@ impl<'mir, 'tcx> InterpCx<'mir, 'tcx, CompileTimeInterpreter<'mir, 'tcx>> {\n             let span = self.find_closest_untracked_caller_location();\n             let (file, line, col) = self.location_triple_for_span(span);\n             return Err(ConstEvalErrKind::Panic { msg, file, line, col }.into());\n-        } else if Some(def_id) == self.tcx.lang_items().panic_fmt()\n-            || Some(def_id) == self.tcx.lang_items().begin_panic_fmt()\n-        {\n+        } else if Some(def_id) == self.tcx.lang_items().panic_fmt() {\n             // For panic_fmt, call const_panic_fmt instead.\n             if let Some(const_panic_fmt) = self.tcx.lang_items().const_panic_fmt() {\n                 return Ok(Some("}, {"sha": "58d0f1a3ad88ebaf13eaae87686acb9ce5fc21da", "filename": "compiler/rustc_const_eval/src/transform/check_consts/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7024998c7eae5b582de680effaca105198aa95c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7024998c7eae5b582de680effaca105198aa95c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fmod.rs?ref=f7024998c7eae5b582de680effaca105198aa95c", "patch": "@@ -79,7 +79,6 @@ pub fn is_lang_panic_fn(tcx: TyCtxt<'tcx>, def_id: DefId) -> bool {\n         || Some(def_id) == tcx.lang_items().panic_display()\n         || Some(def_id) == tcx.lang_items().begin_panic_fn()\n         || Some(def_id) == tcx.lang_items().panic_fmt()\n-        || Some(def_id) == tcx.lang_items().begin_panic_fmt()\n }\n \n /// Returns `true` if this `DefId` points to one of the lang items that will be handled differently"}, {"sha": "97d4123138e8fa846e6255feec3545b3bcfd3da0", "filename": "compiler/rustc_hir/src/lang_items.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7024998c7eae5b582de680effaca105198aa95c/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7024998c7eae5b582de680effaca105198aa95c/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flang_items.rs?ref=f7024998c7eae5b582de680effaca105198aa95c", "patch": "@@ -292,7 +292,6 @@ language_item_table! {\n     PanicImpl,               sym::panic_impl,          panic_impl,                 Target::Fn,             GenericRequirement::None;\n     /// libstd panic entry point. Necessary for const eval to be able to catch it\n     BeginPanic,              sym::begin_panic,         begin_panic_fn,             Target::Fn,             GenericRequirement::None;\n-    BeginPanicFmt,           sym::begin_panic_fmt,     begin_panic_fmt,            Target::Fn,             GenericRequirement::None;\n \n     ExchangeMalloc,          sym::exchange_malloc,     exchange_malloc_fn,         Target::Fn,             GenericRequirement::None;\n     BoxFree,                 sym::box_free,            box_free_fn,                Target::Fn,             GenericRequirement::Minimum(1);"}, {"sha": "c25bd9bfa80df876d5bae8bfdf0a93d44d8ca81d", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7024998c7eae5b582de680effaca105198aa95c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7024998c7eae5b582de680effaca105198aa95c/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=f7024998c7eae5b582de680effaca105198aa95c", "patch": "@@ -355,7 +355,6 @@ symbols! {\n         await_macro,\n         bang,\n         begin_panic,\n-        begin_panic_fmt,\n         bench,\n         bin,\n         bind_by_move_pattern_guards,"}, {"sha": "649bc3e44ad21e9462079b2d54324d7ce93c9cde", "filename": "library/core/src/panic/panic_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7024998c7eae5b582de680effaca105198aa95c/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7024998c7eae5b582de680effaca105198aa95c/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanic%2Fpanic_info.rs?ref=f7024998c7eae5b582de680effaca105198aa95c", "patch": "@@ -121,7 +121,7 @@ impl<'a> PanicInfo<'a> {\n     #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n     pub fn location(&self) -> Option<&Location<'_>> {\n         // NOTE: If this is changed to sometimes return None,\n-        // deal with that case in std::panicking::default_hook and std::panicking::begin_panic_fmt.\n+        // deal with that case in std::panicking::default_hook and core::panicking::panic_fmt.\n         Some(&self.location)\n     }\n }"}, {"sha": "a12447acf7ec3c3221b92f563369ed033d71d71b", "filename": "library/core/src/panicking.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f7024998c7eae5b582de680effaca105198aa95c/library%2Fcore%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7024998c7eae5b582de680effaca105198aa95c/library%2Fcore%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fpanicking.rs?ref=f7024998c7eae5b582de680effaca105198aa95c", "patch": "@@ -76,8 +76,15 @@ fn panic_bounds_check(index: usize, len: usize) -> ! {\n     panic!(\"index out of bounds: the len is {} but the index is {}\", len, index)\n }\n \n-/// The underlying implementation of libcore's `panic!` macro when formatting is used.\n+/// The entry point for panicking with a formatted message.\n+///\n+/// This is designed to reduce the amount of code required at the call\n+/// site as much as possible (so that `panic!()` has as low an impact\n+/// on (e.g.) the inlining of other functions as possible), by moving\n+/// the actual formatting into this shared place.\n #[cold]\n+// If panic_immediate_abort, inline the abort call,\n+// otherwise avoid inlining because of it is cold path.\n #[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n #[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n #[track_caller]"}, {"sha": "c0605b2f4121c098244f40dfd1cb1282d9c17b20", "filename": "library/std/src/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f7024998c7eae5b582de680effaca105198aa95c/library%2Fstd%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7024998c7eae5b582de680effaca105198aa95c/library%2Fstd%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanic.rs?ref=f7024998c7eae5b582de680effaca105198aa95c", "patch": "@@ -25,7 +25,7 @@ pub macro panic_2015 {\n         $crate::rt::panic_display(&$arg)\n     }),\n     ($fmt:expr, $($arg:tt)+) => ({\n-        $crate::rt::begin_panic_fmt(&$crate::const_format_args!($fmt, $($arg)+))\n+        $crate::rt::panic_fmt($crate::const_format_args!($fmt, $($arg)+))\n     }),\n }\n "}, {"sha": "56646b72dd54f089cdc13e379a3fcb4e846a331f", "filename": "library/std/src/panicking.rs", "status": "modified", "additions": 2, "deletions": 24, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f7024998c7eae5b582de680effaca105198aa95c/library%2Fstd%2Fsrc%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7024998c7eae5b582de680effaca105198aa95c/library%2Fstd%2Fsrc%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpanicking.rs?ref=f7024998c7eae5b582de680effaca105198aa95c", "patch": "@@ -437,31 +437,9 @@ pub fn panicking() -> bool {\n     !panic_count::count_is_zero()\n }\n \n-/// The entry point for panicking with a formatted message.\n-///\n-/// This is designed to reduce the amount of code required at the call\n-/// site as much as possible (so that `panic!()` has as low an impact\n-/// on (e.g.) the inlining of other functions as possible), by moving\n-/// the actual formatting into this shared place.\n-#[unstable(feature = \"libstd_sys_internals\", reason = \"used by the panic! macro\", issue = \"none\")]\n-#[cold]\n-// If panic_immediate_abort, inline the abort call,\n-// otherwise avoid inlining because of it is cold path.\n-#[cfg_attr(not(feature = \"panic_immediate_abort\"), track_caller)]\n-#[cfg_attr(not(feature = \"panic_immediate_abort\"), inline(never))]\n-#[cfg_attr(feature = \"panic_immediate_abort\", inline)]\n-#[cfg_attr(not(test), lang = \"begin_panic_fmt\")]\n-pub fn begin_panic_fmt(msg: &fmt::Arguments<'_>) -> ! {\n-    if cfg!(feature = \"panic_immediate_abort\") {\n-        intrinsics::abort()\n-    }\n-\n-    let info = PanicInfo::internal_constructor(Some(msg), Location::caller());\n-    begin_panic_handler(&info)\n-}\n-\n /// Entry point of panics from the libcore crate (`panic_impl` lang item).\n-#[cfg_attr(not(test), panic_handler)]\n+#[cfg(not(test))]\n+#[panic_handler]\n pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {\n     struct PanicPayload<'a> {\n         inner: &'a fmt::Arguments<'a>,"}, {"sha": "121c214780d2d5e5ba371de3cd49c167ef4fbf6b", "filename": "library/std/src/rt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7024998c7eae5b582de680effaca105198aa95c/library%2Fstd%2Fsrc%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7024998c7eae5b582de680effaca105198aa95c/library%2Fstd%2Fsrc%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Frt.rs?ref=f7024998c7eae5b582de680effaca105198aa95c", "patch": "@@ -19,8 +19,8 @@\n use crate::ffi::CString;\n \n // Re-export some of our utilities which are expected by other crates.\n-pub use crate::panicking::{begin_panic, begin_panic_fmt, panic_count};\n-pub use core::panicking::panic_display;\n+pub use crate::panicking::{begin_panic, panic_count};\n+pub use core::panicking::{panic_display, panic_fmt};\n \n use crate::sync::Once;\n use crate::sys;"}, {"sha": "74cf323720cbb400528a0cd416a361315f1288cb", "filename": "src/tools/clippy/clippy_utils/src/higher.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7024998c7eae5b582de680effaca105198aa95c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7024998c7eae5b582de680effaca105198aa95c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fhigher.rs?ref=f7024998c7eae5b582de680effaca105198aa95c", "patch": "@@ -619,7 +619,6 @@ impl PanicExpn<'tcx> {\n             if let Some(init) = block.expr;\n             if let ExprKind::Call(_, [format_args]) = init.kind;\n             let expn_data = expr.span.ctxt().outer_expn_data();\n-            if let ExprKind::AddrOf(_, _, format_args) = format_args.kind;\n             if let Some(format_args) = FormatArgsExpn::parse(format_args);\n             then {\n                 Some(PanicExpn {"}, {"sha": "8e94d16a33a0e41b1a167447e50b098bca917cf6", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7024998c7eae5b582de680effaca105198aa95c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7024998c7eae5b582de680effaca105198aa95c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=f7024998c7eae5b582de680effaca105198aa95c", "patch": "@@ -1646,7 +1646,6 @@ pub fn match_panic_def_id(cx: &LateContext<'_>, did: DefId) -> bool {\n         did,\n         &[\n             &paths::BEGIN_PANIC,\n-            &paths::BEGIN_PANIC_FMT,\n             &paths::PANIC_ANY,\n             &paths::PANICKING_PANIC,\n             &paths::PANICKING_PANIC_FMT,"}, {"sha": "81aff585ded1be868421a758467c3a6ec84065f3", "filename": "src/tools/clippy/clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f7024998c7eae5b582de680effaca105198aa95c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7024998c7eae5b582de680effaca105198aa95c/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs?ref=f7024998c7eae5b582de680effaca105198aa95c", "patch": "@@ -20,7 +20,6 @@ pub const ARC_PTR_EQ: [&str; 4] = [\"alloc\", \"sync\", \"Arc\", \"ptr_eq\"];\n pub const ASMUT_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsMut\"];\n pub const ASREF_TRAIT: [&str; 3] = [\"core\", \"convert\", \"AsRef\"];\n pub(super) const BEGIN_PANIC: [&str; 3] = [\"std\", \"panicking\", \"begin_panic\"];\n-pub(super) const BEGIN_PANIC_FMT: [&str; 3] = [\"std\", \"panicking\", \"begin_panic_fmt\"];\n /// Preferably use the diagnostic item `sym::Borrow` where possible\n pub const BORROW_TRAIT: [&str; 3] = [\"core\", \"borrow\", \"Borrow\"];\n pub const BTREEMAP_CONTAINS_KEY: [&str; 6] = [\"alloc\", \"collections\", \"btree\", \"map\", \"BTreeMap\", \"contains_key\"];"}]}