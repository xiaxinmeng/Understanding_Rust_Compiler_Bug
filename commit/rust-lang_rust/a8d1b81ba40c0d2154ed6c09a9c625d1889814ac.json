{"sha": "a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZDFiODFiYTQwYzBkMjE1NGVkNmMwOWE5YzYyNWQxODg5ODE0YWM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-22T01:47:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-22T01:47:29Z"}, "message": "Rollup merge of #59742 - Zoxc:edition-cleanup, r=petrochenkov\n\nMove `edition` outside the hygiene lock and avoid accessing it\n\nr? @petrochenkov", "tree": {"sha": "b0f435ac0b88fea604c64e0a99c63a18bbfa513c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0f435ac0b88fea604c64e0a99c63a18bbfa513c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc5KoxCRBK7hj4Ov3rIwAAdHIIAKO+xpxbFue55B9reBDIcO/u\nVax8x9J78oCcLJM0xYLp332qxF9pJZBPz4l3qFJHtwjKeJooF8mw8e3hwjkf/KJv\n5/ZAATmXCzUVnyt5n9f59LhIAVQYgUBsdJToKBsQRf09sq9QTmGL/SECMsMkNuPS\nnfHSQvYANBpli/1HfUoleRFwKw6wjyBf0VvjlqE613tdbxStNQgJ4tUNa2Agud2k\ngtUpeL6HnW3OEqYUI66/Hmw8T5AiDU5gOJPSHbe8PGecGPAkyg/cDJ1p+wvDXaV0\natRuKn9kwqaUbWHsgPEkhZWQsrlGYe2cIzEz6nyGRmheHSzrhwXeCD7yMXs7Qjc=\n=9AlQ\n-----END PGP SIGNATURE-----\n", "payload": "tree b0f435ac0b88fea604c64e0a99c63a18bbfa513c\nparent 119bbc2056a60e8557d1e5f2e0a7ab46d479bcaf\nparent 0b37900b40e8db004b2a13ff4c70fc363eba610b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1558489649 +0200\ncommitter GitHub <noreply@github.com> 1558489649 +0200\n\nRollup merge of #59742 - Zoxc:edition-cleanup, r=petrochenkov\n\nMove `edition` outside the hygiene lock and avoid accessing it\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "html_url": "https://github.com/rust-lang/rust/commit/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "119bbc2056a60e8557d1e5f2e0a7ab46d479bcaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/119bbc2056a60e8557d1e5f2e0a7ab46d479bcaf", "html_url": "https://github.com/rust-lang/rust/commit/119bbc2056a60e8557d1e5f2e0a7ab46d479bcaf"}, {"sha": "0b37900b40e8db004b2a13ff4c70fc363eba610b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b37900b40e8db004b2a13ff4c70fc363eba610b", "html_url": "https://github.com/rust-lang/rust/commit/0b37900b40e8db004b2a13ff4c70fc363eba610b"}], "stats": {"total": 305, "additions": 162, "deletions": 143}, "files": [{"sha": "f16137bd2c27ade42d3d91d35403cbd5ae0b04d9", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -1853,7 +1853,7 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n \n // Convert strings provided as --cfg [cfgspec] into a crate_cfg\n pub fn parse_cfgspecs(cfgspecs: Vec<String>) -> FxHashSet<(String, Option<String>)> {\n-    syntax::with_globals(move || {\n+    syntax::with_default_globals(move || {\n         let cfg = cfgspecs.into_iter().map(|s| {\n             let sess = parse::ParseSess::new(FilePathMapping::empty());\n             let filename = FileName::cfg_spec_source_code(&s);\n@@ -2735,7 +2735,7 @@ mod tests {\n     // When the user supplies --test we should implicitly supply --cfg test\n     #[test]\n     fn test_switch_implies_cfg_test() {\n-        syntax::with_globals(|| {\n+        syntax::with_default_globals(|| {\n             let matches = &match optgroups().parse(&[\"--test\".to_string()]) {\n                 Ok(m) => m,\n                 Err(f) => panic!(\"test_switch_implies_cfg_test: {}\", f),\n@@ -2753,7 +2753,7 @@ mod tests {\n     #[test]\n     fn test_switch_implies_cfg_test_unless_cfg_test() {\n         use syntax::symbol::sym;\n-        syntax::with_globals(|| {\n+        syntax::with_default_globals(|| {\n             let matches = &match optgroups().parse(&[\"--test\".to_string(),\n                                                      \"--cfg=test\".to_string()]) {\n                 Ok(m) => m,\n@@ -2771,15 +2771,15 @@ mod tests {\n \n     #[test]\n     fn test_can_print_warnings() {\n-        syntax::with_globals(|| {\n+        syntax::with_default_globals(|| {\n             let matches = optgroups().parse(&[\"-Awarnings\".to_string()]).unwrap();\n             let registry = errors::registry::Registry::new(&[]);\n             let (sessopts, _) = build_session_options_and_crate_config(&matches);\n             let sess = build_session(sessopts, None, registry);\n             assert!(!sess.diagnostic().flags.can_emit_warnings);\n         });\n \n-        syntax::with_globals(|| {\n+        syntax::with_default_globals(|| {\n             let matches = optgroups()\n                 .parse(&[\"-Awarnings\".to_string(), \"-Dwarnings\".to_string()])\n                 .unwrap();\n@@ -2789,7 +2789,7 @@ mod tests {\n             assert!(sess.diagnostic().flags.can_emit_warnings);\n         });\n \n-        syntax::with_globals(|| {\n+        syntax::with_default_globals(|| {\n             let matches = optgroups().parse(&[\"-Adead_code\".to_string()]).unwrap();\n             let registry = errors::registry::Registry::new(&[]);\n             let (sessopts, _) = build_session_options_and_crate_config(&matches);"}, {"sha": "0c19d770194b2ea486f268ab30e526bdb9259451", "filename": "src/librustc_allocator/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustc_allocator%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustc_allocator%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_allocator%2Fexpand.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -14,7 +14,7 @@ use syntax::{\n         base::{ExtCtxt, Resolver},\n         build::AstBuilder,\n         expand::ExpansionConfig,\n-        hygiene::{self, Mark, SyntaxContext},\n+        hygiene::{Mark, SyntaxContext},\n     },\n     mut_visit::{self, MutVisitor},\n     parse::ParseSess,\n@@ -96,7 +96,7 @@ impl MutVisitor for ExpandAllocatorDirectives<'_> {\n             ].into()),\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n-            edition: hygiene::default_edition(),\n+            edition: self.sess.edition,\n         });\n \n         // Tie the span to the macro expansion info we just created"}, {"sha": "674b2b60e44a2520dcfe81209b47399b61863b46", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -18,6 +18,7 @@ use std::result;\n use std::sync::{Arc, Mutex};\n use syntax;\n use syntax::source_map::{FileLoader, SourceMap};\n+use syntax_pos::edition;\n \n pub type Result<T> = result::Result<T, ErrorReported>;\n \n@@ -135,16 +136,17 @@ where\n {\n     let stderr = config.stderr.take();\n     util::spawn_thread_pool(\n+        config.opts.edition,\n         config.opts.debugging_opts.threads,\n         &stderr,\n         || run_compiler_in_existing_thread_pool(config, f),\n     )\n }\n \n-pub fn default_thread_pool<F, R>(f: F) -> R\n+pub fn default_thread_pool<F, R>(edition: edition::Edition, f: F) -> R\n where\n     F: FnOnce() -> R + Send,\n     R: Send,\n {\n-    util::spawn_thread_pool(None, &None, f)\n+    util::spawn_thread_pool(edition, None, &None, f)\n }"}, {"sha": "04041f88344204bf20efc4efda72f004d97d2ed3", "filename": "src/librustc_interface/passes.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustc_interface%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustc_interface%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fpasses.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -48,7 +48,7 @@ use syntax::util::node_count::NodeCounter;\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::symbol::Symbol;\n use syntax::feature_gate::AttributeType;\n-use syntax_pos::{FileName, hygiene};\n+use syntax_pos::{FileName, edition::Edition, hygiene};\n use syntax_ext;\n \n use serialize::json;\n@@ -70,8 +70,6 @@ use std::ops::Generator;\n pub fn parse<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::Crate> {\n     sess.diagnostic()\n         .set_continue_after_error(sess.opts.debugging_opts.continue_parse_after_error);\n-    hygiene::set_default_edition(sess.edition());\n-\n     sess.profiler(|p| p.start_activity(\"parsing\"));\n     let krate = time(sess, \"parsing\", || match *input {\n         Input::File(ref file) => parse::parse_crate_from_file(file, &sess.parse_sess),\n@@ -375,7 +373,7 @@ fn configure_and_expand_inner<'a>(\n         crate_loader,\n         &resolver_arenas,\n     );\n-    syntax_ext::register_builtins(&mut resolver, plugin_info.syntax_exts);\n+    syntax_ext::register_builtins(&mut resolver, plugin_info.syntax_exts, sess.edition());\n \n     // Expand all macros\n     sess.profiler(|p| p.start_activity(\"macro expansion\"));"}, {"sha": "09bb547191f491f29d4dc42f74c7e3f043c5e419", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -37,6 +37,7 @@ use syntax::util::lev_distance::find_best_match_for_name;\n use syntax::source_map::{FileLoader, RealFileLoader, SourceMap};\n use syntax::symbol::{Symbol, sym};\n use syntax::{self, ast, attr};\n+use syntax_pos::edition::Edition;\n #[cfg(not(parallel_compiler))]\n use std::{thread, panic};\n \n@@ -167,6 +168,7 @@ pub fn scoped_thread<F: FnOnce() -> R + Send, R: Send>(cfg: thread::Builder, f:\n \n #[cfg(not(parallel_compiler))]\n pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n+    edition: Edition,\n     _threads: Option<usize>,\n     stderr: &Option<Arc<Mutex<Vec<u8>>>>,\n     f: F,\n@@ -178,7 +180,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n     }\n \n     scoped_thread(cfg, || {\n-        syntax::with_globals( || {\n+        syntax::with_globals(edition, || {\n             ty::tls::GCX_PTR.set(&Lock::new(0), || {\n                 if let Some(stderr) = stderr {\n                     io::set_panic(Some(box Sink(stderr.clone())));\n@@ -191,6 +193,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n \n #[cfg(parallel_compiler)]\n pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n+    edition: Edition,\n     threads: Option<usize>,\n     stderr: &Option<Arc<Mutex<Vec<u8>>>>,\n     f: F,\n@@ -213,7 +216,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n \n     let with_pool = move |pool: &ThreadPool| pool.install(move || f());\n \n-    syntax::with_globals(|| {\n+    syntax::with_globals(edition, || {\n         syntax::GLOBALS.with(|syntax_globals| {\n             syntax_pos::GLOBALS.with(|syntax_pos_globals| {\n                 // The main handler runs for each Rayon worker thread and sets up"}, {"sha": "7f0993e799f5424031d143c432de3e0624cda489", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -34,7 +34,7 @@ use syntax::ast;\n use syntax::attr;\n use syntax::source_map::Spanned;\n use syntax::symbol::{keywords, sym};\n-use syntax_pos::{self, hygiene, FileName, SourceFile, Span};\n+use syntax_pos::{self, FileName, SourceFile, Span};\n use log::{debug, trace};\n \n use rustc::hir::{self, PatKind};\n@@ -480,7 +480,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             hash: tcx.crate_hash(LOCAL_CRATE),\n             disambiguator: tcx.sess.local_crate_disambiguator(),\n             panic_strategy: tcx.sess.panic_strategy(),\n-            edition: hygiene::default_edition(),\n+            edition: tcx.sess.edition(),\n             has_global_allocator: has_global_allocator,\n             has_panic_handler: has_panic_handler,\n             has_default_lib_allocator: has_default_lib_allocator,"}, {"sha": "2ed6f868fa1ee7cd818a675eaea810b59cbb5b1e", "filename": "src/librustc_plugin/registry.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustc_plugin%2Fregistry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustc_plugin%2Fregistry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin%2Fregistry.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -6,7 +6,6 @@ use rustc::util::nodemap::FxHashMap;\n \n use syntax::ext::base::{SyntaxExtension, NamedSyntaxExtension, NormalTT, IdentTT};\n use syntax::ext::base::MacroExpanderFn;\n-use syntax::ext::hygiene;\n use syntax::symbol::{Symbol, sym};\n use syntax::ast;\n use syntax::feature_gate::AttributeType;\n@@ -130,7 +129,7 @@ impl<'a> Registry<'a> {\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             unstable_feature: None,\n-            edition: hygiene::default_edition(),\n+            edition: self.sess.edition(),\n         });\n     }\n "}, {"sha": "d07f7b65275f19f3ac3f6e80083dd49b2d89d276", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -17,7 +17,7 @@ use syntax::errors::DiagnosticBuilder;\n use syntax::ext::base::{self, Determinacy};\n use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::expand::{AstFragment, Invocation, InvocationKind};\n-use syntax::ext::hygiene::{self, Mark};\n+use syntax::ext::hygiene::Mark;\n use syntax::ext::tt::macro_rules;\n use syntax::feature_gate::{\n     feature_err, is_builtin_attr_name, AttributeGate, GateIssue, Stability, BUILTIN_ATTRIBUTES,\n@@ -1100,7 +1100,7 @@ impl<'a> Resolver<'a> {\n         let def_id = self.definitions.local_def_id(item.id);\n         let ext = Lrc::new(macro_rules::compile(&self.session.parse_sess,\n                                                &self.session.features_untracked(),\n-                                               item, hygiene::default_edition()));\n+                                               item, self.session.edition()));\n         self.macro_map.insert(def_id, ext);\n \n         let def = match item.node { ast::ItemKind::MacroDef(ref def) => def, _ => unreachable!() };"}, {"sha": "67113787915a3e251b455c5d117d87faabbd219f", "filename": "src/librustdoc/clean/cfg.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustdoc%2Fclean%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fcfg.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -418,7 +418,7 @@ mod test {\n     use syntax::attr;\n     use syntax::source_map::dummy_spanned;\n     use syntax::symbol::Symbol;\n-    use syntax::with_globals;\n+    use syntax::with_default_globals;\n \n     fn word_cfg(s: &str) -> Cfg {\n         Cfg::Cfg(Symbol::intern(s), None)\n@@ -466,7 +466,7 @@ mod test {\n \n     #[test]\n     fn test_cfg_not() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             assert_eq!(!Cfg::False, Cfg::True);\n             assert_eq!(!Cfg::True, Cfg::False);\n             assert_eq!(!word_cfg(\"test\"), Cfg::Not(Box::new(word_cfg(\"test\"))));\n@@ -484,7 +484,7 @@ mod test {\n \n     #[test]\n     fn test_cfg_and() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let mut x = Cfg::False;\n             x &= Cfg::True;\n             assert_eq!(x, Cfg::False);\n@@ -536,7 +536,7 @@ mod test {\n \n     #[test]\n     fn test_cfg_or() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let mut x = Cfg::True;\n             x |= Cfg::False;\n             assert_eq!(x, Cfg::True);\n@@ -588,7 +588,7 @@ mod test {\n \n     #[test]\n     fn test_parse_ok() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let mi = dummy_meta_item_word(\"all\");\n             assert_eq!(Cfg::parse(&mi), Ok(word_cfg(\"all\")));\n \n@@ -622,7 +622,7 @@ mod test {\n \n     #[test]\n     fn test_parse_err() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let mi = attr::mk_name_value_item(\n                 DUMMY_SP,\n                 Ident::from_str(\"foo\"),\n@@ -661,7 +661,7 @@ mod test {\n \n     #[test]\n     fn test_render_short_html() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             assert_eq!(\n                 word_cfg(\"unix\").render_short_html(),\n                 \"Unix\"\n@@ -741,7 +741,7 @@ mod test {\n \n     #[test]\n     fn test_render_long_html() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             assert_eq!(\n                 word_cfg(\"unix\").render_long_html(),\n                 \"This is supported on <strong>Unix</strong> only.\""}, {"sha": "ffe277ae50bdc39616b7230ba7b0f760f43712e1", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -94,9 +94,7 @@ pub fn main() {\n     rustc_driver::set_sigpipe_handler();\n     env_logger::init();\n     let res = std::thread::Builder::new().stack_size(thread_stack_size).spawn(move || {\n-        rustc_interface::interface::default_thread_pool(move || {\n-            get_args().map(|args| main_args(&args)).unwrap_or(1)\n-        })\n+        get_args().map(|args| main_args(&args)).unwrap_or(1)\n     }).unwrap().join().unwrap_or(rustc_driver::EXIT_FAILURE);\n     process::exit(res);\n }\n@@ -382,7 +380,12 @@ fn main_args(args: &[String]) -> i32 {\n         Ok(opts) => opts,\n         Err(code) => return code,\n     };\n+    rustc_interface::interface::default_thread_pool(options.edition, move || {\n+        main_options(options)\n+    })\n+}\n \n+fn main_options(options: config::Options) -> i32 {\n     let diag = core::new_handler(options.error_format,\n                                  None,\n                                  options.debugging_options.treat_err_as_bug,"}, {"sha": "d76d4380755f24b40b4d97e48f323663b53708c7", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -8,6 +8,7 @@ use rustc::session::config::{OutputType, OutputTypes, Externs, CodegenOptions};\n use rustc::session::search_paths::SearchPath;\n use rustc::util::common::ErrorReported;\n use syntax::ast;\n+use syntax::with_globals;\n use syntax::source_map::SourceMap;\n use syntax::edition::Edition;\n use syntax::feature_gate::UnstableFeatures;\n@@ -386,13 +387,11 @@ pub fn make_test(s: &str,\n \n     // Uses libsyntax to parse the doctest and find if there's a main fn and the extern\n     // crate already is included.\n-    let (already_has_main, already_has_extern_crate, found_macro) = crate::syntax::with_globals(|| {\n+    let (already_has_main, already_has_extern_crate, found_macro) = with_globals(edition, || {\n         use crate::syntax::{parse::{self, ParseSess}, source_map::FilePathMapping};\n         use errors::emitter::EmitterWriter;\n         use errors::Handler;\n \n-        syntax::ext::hygiene::set_default_edition(edition);\n-\n         let filename = FileName::anon_source_code(s);\n         let source = crates + &everything_else;\n "}, {"sha": "489fac4f1ca4c642d8a5c290d3e86391abc8afef", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -5,7 +5,7 @@ use crate::attr::HasAttrs;\n use crate::source_map::{SourceMap, Spanned, respan};\n use crate::edition::Edition;\n use crate::ext::expand::{self, AstFragment, Invocation};\n-use crate::ext::hygiene::{self, Mark, SyntaxContext, Transparency};\n+use crate::ext::hygiene::{Mark, SyntaxContext, Transparency};\n use crate::mut_visit::{self, MutVisitor};\n use crate::parse::{self, parser, DirectoryOwnership};\n use crate::parse::token;\n@@ -713,7 +713,7 @@ impl SyntaxExtension {\n         }\n     }\n \n-    pub fn edition(&self) -> Edition {\n+    pub fn edition(&self, default_edition: Edition) -> Edition {\n         match *self {\n             SyntaxExtension::NormalTT { edition, .. } |\n             SyntaxExtension::DeclMacro { edition, .. } |\n@@ -725,7 +725,7 @@ impl SyntaxExtension {\n             SyntaxExtension::IdentTT { .. } |\n             SyntaxExtension::MultiDecorator(..) |\n             SyntaxExtension::MultiModifier(..) |\n-            SyntaxExtension::BuiltinDerive(..) => hygiene::default_edition(),\n+            SyntaxExtension::BuiltinDerive(..) => default_edition,\n         }\n     }\n }\n@@ -734,6 +734,7 @@ pub type NamedSyntaxExtension = (Name, SyntaxExtension);\n \n pub trait Resolver {\n     fn next_node_id(&mut self) -> ast::NodeId;\n+\n     fn get_module_scope(&mut self, id: ast::NodeId) -> Mark;\n \n     fn resolve_dollar_crates(&mut self, fragment: &AstFragment);\n@@ -768,6 +769,7 @@ pub struct DummyResolver;\n \n impl Resolver for DummyResolver {\n     fn next_node_id(&mut self) -> ast::NodeId { ast::DUMMY_NODE_ID }\n+\n     fn get_module_scope(&mut self, _id: ast::NodeId) -> Mark { Mark::root() }\n \n     fn resolve_dollar_crates(&mut self, _fragment: &AstFragment) {}"}, {"sha": "6e789c4c7086b71ad6036a0654573b2a02ee6b8e", "filename": "src/libsyntax/ext/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Fext%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Fext%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderive.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -1,6 +1,6 @@\n use crate::attr::HasAttrs;\n use crate::ast;\n-use crate::source_map::{hygiene, ExpnInfo, ExpnFormat};\n+use crate::source_map::{ExpnInfo, ExpnFormat};\n use crate::ext::base::ExtCtxt;\n use crate::ext::build::AstBuilder;\n use crate::parse::parser::PathStyle;\n@@ -64,7 +64,7 @@ pub fn add_derived_markers<T>(cx: &mut ExtCtxt<'_>, span: Span, traits: &[ast::P\n         ].into()),\n         allow_internal_unsafe: false,\n         local_inner_macros: false,\n-        edition: hygiene::default_edition(),\n+        edition: cx.parse_sess.edition,\n     });\n \n     let span = span.with_ctxt(cx.backtrace());"}, {"sha": "478ae4de82b74958eb23ed5942171a7a25c47e76", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -5,7 +5,7 @@ use crate::source_map::{ExpnInfo, MacroBang, MacroAttribute, dummy_spanned, resp\n use crate::config::StripUnconfigured;\n use crate::ext::base::*;\n use crate::ext::derive::{add_derived_markers, collect_derives};\n-use crate::ext::hygiene::{self, Mark, SyntaxContext};\n+use crate::ext::hygiene::{Mark, SyntaxContext};\n use crate::ext::placeholders::{placeholder, PlaceholderExpander};\n use crate::feature_gate::{self, Features, GateIssue, is_builtin_attr, emit_feature_err};\n use crate::mut_visit::*;\n@@ -560,7 +560,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             allow_internal_unstable: None,\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n-            edition: ext.edition(),\n+            edition: ext.edition(self.cx.parse_sess.edition),\n         });\n \n         match *ext {\n@@ -805,7 +805,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                         allow_internal_unstable: allow_internal_unstable.clone(),\n                         allow_internal_unsafe: false,\n                         local_inner_macros: false,\n-                        edition: hygiene::default_edition(),\n+                        edition: self.cx.parse_sess.edition,\n                     });\n \n                     let input: Vec<_> = mac.node.stream().into_trees().collect();\n@@ -921,7 +921,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n             allow_internal_unstable: None,\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n-            edition: ext.edition(),\n+            edition: ext.edition(self.cx.parse_sess.edition),\n         };\n \n         match *ext {"}, {"sha": "5eda975bc9ee464c62c8aafedcde336a1b5c0118", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -29,6 +29,7 @@ use rustc_data_structures::sync::Lock;\n use rustc_data_structures::bit_set::GrowableBitSet;\n pub use rustc_data_structures::thin_vec::ThinVec;\n use ast::AttrId;\n+use syntax_pos::edition::Edition;\n \n // A variant of 'try!' that panics on an Err. This is used as a crutch on the\n // way towards a non-panic!-prone parser. It should be used for fatal parsing\n@@ -82,26 +83,32 @@ pub struct Globals {\n }\n \n impl Globals {\n-    fn new() -> Globals {\n+    fn new(edition: Edition) -> Globals {\n         Globals {\n             // We have no idea how many attributes their will be, so just\n             // initiate the vectors with 0 bits. We'll grow them as necessary.\n             used_attrs: Lock::new(GrowableBitSet::new_empty()),\n             known_attrs: Lock::new(GrowableBitSet::new_empty()),\n-            syntax_pos_globals: syntax_pos::Globals::new(),\n+            syntax_pos_globals: syntax_pos::Globals::new(edition),\n         }\n     }\n }\n \n-pub fn with_globals<F, R>(f: F) -> R\n+pub fn with_globals<F, R>(edition: Edition, f: F) -> R\n     where F: FnOnce() -> R\n {\n-    let globals = Globals::new();\n+    let globals = Globals::new(edition);\n     GLOBALS.set(&globals, || {\n         syntax_pos::GLOBALS.set(&globals.syntax_pos_globals, f)\n     })\n }\n \n+pub fn with_default_globals<F, R>(f: F) -> R\n+    where F: FnOnce() -> R\n+{\n+    with_globals(edition::DEFAULT_EDITION, f)\n+}\n+\n scoped_tls::scoped_thread_local!(pub static GLOBALS: Globals);\n \n #[macro_use]"}, {"sha": "8fdd15a029f13808d002543c65656ee71884040c", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -1305,7 +1305,7 @@ mod tests {\n     use crate::util::parser_testing::{string_to_crate, matches_codepattern};\n     use crate::print::pprust;\n     use crate::mut_visit;\n-    use crate::with_globals;\n+    use crate::with_default_globals;\n     use super::*;\n \n     // this version doesn't care about getting comments or docstrings in.\n@@ -1343,7 +1343,7 @@ mod tests {\n \n     // make sure idents get transformed everywhere\n     #[test] fn ident_transformation () {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let mut zz_visitor = ToZzIdentMutVisitor;\n             let mut krate = string_to_crate(\n                 \"#[a] mod b {fn c (d : e, f : g) {h!(i,j,k);l;m}}\".to_string());\n@@ -1358,7 +1358,7 @@ mod tests {\n \n     // even inside macro defs....\n     #[test] fn ident_transformation_in_defs () {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let mut zz_visitor = ToZzIdentMutVisitor;\n             let mut krate = string_to_crate(\n                 \"macro_rules! a {(b $c:expr $(d $e:token)f+ => \\"}, {"sha": "c97d804076157e039d827e66c61acd6a9f22adf0", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -1558,10 +1558,10 @@ mod tests {\n     use crate::feature_gate::UnstableFeatures;\n     use crate::parse::token;\n     use crate::diagnostics::plugin::ErrorMap;\n-    use crate::with_globals;\n+    use crate::with_default_globals;\n     use std::io;\n     use std::path::PathBuf;\n-    use syntax_pos::{BytePos, Span, NO_EXPANSION};\n+    use syntax_pos::{BytePos, Span, NO_EXPANSION, edition::Edition};\n     use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n     use rustc_data_structures::sync::Lock;\n \n@@ -1581,6 +1581,7 @@ mod tests {\n             raw_identifier_spans: Lock::new(Vec::new()),\n             registered_diagnostics: Lock::new(ErrorMap::new()),\n             buffered_lints: Lock::new(vec![]),\n+            edition: Edition::from_session(),\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n         }\n     }\n@@ -1601,7 +1602,7 @@ mod tests {\n \n     #[test]\n     fn t1() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let sh = mk_sess(sm.clone());\n             let mut string_reader = setup(&sm,\n@@ -1649,7 +1650,7 @@ mod tests {\n \n     #[test]\n     fn doublecolonparsing() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let sh = mk_sess(sm.clone());\n             check_tokenization(setup(&sm, &sh, \"a b\".to_string()),\n@@ -1659,7 +1660,7 @@ mod tests {\n \n     #[test]\n     fn dcparsing_2() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let sh = mk_sess(sm.clone());\n             check_tokenization(setup(&sm, &sh, \"a::b\".to_string()),\n@@ -1669,7 +1670,7 @@ mod tests {\n \n     #[test]\n     fn dcparsing_3() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let sh = mk_sess(sm.clone());\n             check_tokenization(setup(&sm, &sh, \"a ::b\".to_string()),\n@@ -1679,7 +1680,7 @@ mod tests {\n \n     #[test]\n     fn dcparsing_4() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let sh = mk_sess(sm.clone());\n             check_tokenization(setup(&sm, &sh, \"a:: b\".to_string()),\n@@ -1689,7 +1690,7 @@ mod tests {\n \n     #[test]\n     fn character_a() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let sh = mk_sess(sm.clone());\n             assert_eq!(setup(&sm, &sh, \"'a'\".to_string()).next_token().tok,\n@@ -1699,7 +1700,7 @@ mod tests {\n \n     #[test]\n     fn character_space() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let sh = mk_sess(sm.clone());\n             assert_eq!(setup(&sm, &sh, \"' '\".to_string()).next_token().tok,\n@@ -1709,7 +1710,7 @@ mod tests {\n \n     #[test]\n     fn character_escaped() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let sh = mk_sess(sm.clone());\n             assert_eq!(setup(&sm, &sh, \"'\\\\n'\".to_string()).next_token().tok,\n@@ -1719,7 +1720,7 @@ mod tests {\n \n     #[test]\n     fn lifetime_name() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let sh = mk_sess(sm.clone());\n             assert_eq!(setup(&sm, &sh, \"'abc\".to_string()).next_token().tok,\n@@ -1729,7 +1730,7 @@ mod tests {\n \n     #[test]\n     fn raw_string() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let sh = mk_sess(sm.clone());\n             assert_eq!(setup(&sm, &sh, \"r###\\\"\\\"#a\\\\b\\x00c\\\"\\\"###\".to_string())\n@@ -1741,7 +1742,7 @@ mod tests {\n \n     #[test]\n     fn literal_suffixes() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let sh = mk_sess(sm.clone());\n             macro_rules! test {\n@@ -1787,7 +1788,7 @@ mod tests {\n \n     #[test]\n     fn nested_block_comments() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let sh = mk_sess(sm.clone());\n             let mut lexer = setup(&sm, &sh, \"/* /* */ */'a'\".to_string());\n@@ -1802,7 +1803,7 @@ mod tests {\n \n     #[test]\n     fn crlf_comments() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let sh = mk_sess(sm.clone());\n             let mut lexer = setup(&sm, &sh, \"// test\\r\\n/// test\\r\\n\".to_string());"}, {"sha": "d574626e6dbcc305dcbec2fcd9a85621c7899409", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -13,6 +13,7 @@ use crate::print::pprust::token_to_string;\n use errors::{Applicability, FatalError, Level, Handler, ColorConfig, Diagnostic, DiagnosticBuilder};\n use rustc_data_structures::sync::{Lrc, Lock};\n use syntax_pos::{Span, SourceFile, FileName, MultiSpan};\n+use syntax_pos::edition::Edition;\n \n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use std::borrow::Cow;\n@@ -38,6 +39,7 @@ pub struct ParseSess {\n     pub span_diagnostic: Handler,\n     pub unstable_features: UnstableFeatures,\n     pub config: CrateConfig,\n+    pub edition: Edition,\n     pub missing_fragment_specifiers: Lock<FxHashSet<Span>>,\n     /// Places where raw identifiers were used. This is used for feature-gating raw identifiers.\n     pub raw_identifier_spans: Lock<Vec<Span>>,\n@@ -74,6 +76,7 @@ impl ParseSess {\n             included_mod_stack: Lock::new(vec![]),\n             source_map,\n             buffered_lints: Lock::new(vec![]),\n+            edition: Edition::from_session(),\n             ambiguous_block_expr_parse: Lock::new(FxHashMap::default()),\n         }\n     }\n@@ -363,7 +366,7 @@ mod tests {\n     use crate::tokenstream::{DelimSpan, TokenTree};\n     use crate::util::parser_testing::string_to_stream;\n     use crate::util::parser_testing::{string_to_expr, string_to_item};\n-    use crate::with_globals;\n+    use crate::with_default_globals;\n     use syntax_pos::{Span, BytePos, Pos, NO_EXPANSION};\n \n     /// Parses an item.\n@@ -382,15 +385,15 @@ mod tests {\n \n     #[should_panic]\n     #[test] fn bad_path_expr_1() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             string_to_expr(\"::abc::def::return\".to_string());\n         })\n     }\n \n     // check the token-tree-ization of macros\n     #[test]\n     fn string_to_tts_macro () {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             use crate::symbol::sym;\n \n             let tts: Vec<_> =\n@@ -447,7 +450,7 @@ mod tests {\n \n     #[test]\n     fn string_to_tts_1() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let tts = string_to_stream(\"fn a (b : i32) { b; }\".to_string());\n \n             let expected = TokenStream::new(vec![\n@@ -480,7 +483,7 @@ mod tests {\n     }\n \n     #[test] fn parse_use() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let use_s = \"use foo::bar::baz;\";\n             let vitem = string_to_item(use_s.to_string()).unwrap();\n             let vitem_s = item_to_string(&vitem);\n@@ -494,7 +497,7 @@ mod tests {\n     }\n \n     #[test] fn parse_extern_crate() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let ex_s = \"extern crate foo;\";\n             let vitem = string_to_item(ex_s.to_string()).unwrap();\n             let vitem_s = item_to_string(&vitem);\n@@ -531,7 +534,7 @@ mod tests {\n     }\n \n     #[test] fn span_of_self_arg_pat_idents_are_correct() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n \n             let srcs = [\"impl z { fn a (&self, &myarg: i32) {} }\",\n                         \"impl z { fn a (&mut self, &myarg: i32) {} }\",\n@@ -551,15 +554,15 @@ mod tests {\n     }\n \n     #[test] fn parse_exprs () {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             // just make sure that they parse....\n             string_to_expr(\"3 + 4\".to_string());\n             string_to_expr(\"a::z.froob(b,&(987+3))\".to_string());\n         })\n     }\n \n     #[test] fn attrs_fix_bug () {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             string_to_item(\"pub fn mk_file_writer(path: &Path, flags: &[FileFlag])\n                    -> Result<Box<Writer>, String> {\n     #[cfg(windows)]\n@@ -576,7 +579,7 @@ mod tests {\n     }\n \n     #[test] fn crlf_doc_comments() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             use crate::symbol::sym;\n \n             let sess = ParseSess::new(FilePathMapping::empty());\n@@ -613,7 +616,7 @@ mod tests {\n             new_parser_from_source_str(sess, name, source).parse_expr()\n         }\n \n-        with_globals(|| {\n+        with_default_globals(|| {\n             let sess = ParseSess::new(FilePathMapping::empty());\n             let expr = parse_expr_from_source_str(PathBuf::from(\"foo\").into(),\n                 \"foo!( fn main() { body } )\".to_string(), &sess).unwrap();\n@@ -637,7 +640,7 @@ mod tests {\n     // See `recurse_into_file_modules` in the parser.\n     #[test]\n     fn out_of_line_mod() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let sess = ParseSess::new(FilePathMapping::empty());\n             let item = parse_item_from_source_str(\n                 PathBuf::from(\"foo\").into(),"}, {"sha": "ac240359b56b6f68387852472028a725640997e1", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -3147,12 +3147,12 @@ mod tests {\n \n     use crate::ast;\n     use crate::source_map;\n-    use crate::with_globals;\n+    use crate::with_default_globals;\n     use syntax_pos;\n \n     #[test]\n     fn test_fun_to_string() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let abba_ident = ast::Ident::from_str(\"abba\");\n \n             let decl = ast::FnDecl {\n@@ -3180,7 +3180,7 @@ mod tests {\n \n     #[test]\n     fn test_variant_to_string() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let ident = ast::Ident::from_str(\"principal_skinner\");\n \n             let var = source_map::respan(syntax_pos::DUMMY_SP, ast::Variant_ {"}, {"sha": "8a210db91858ebb046da7023e668b6886d1478f8", "filename": "src/libsyntax/source_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Fsource_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Fsource_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fsource_map.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -947,7 +947,7 @@ impl SourceMap {\n             allow_internal_unstable,\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n-            edition: hygiene::default_edition(),\n+            edition: edition::Edition::from_session(),\n         });\n         span.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n     }"}, {"sha": "e01a3260d4993a5e878ef3bc8e92ca617eb0470b", "filename": "src/libsyntax/std_inject.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Fstd_inject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Fstd_inject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fstd_inject.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -3,7 +3,7 @@ use crate::attr;\n use crate::edition::Edition;\n use crate::ext::hygiene::{Mark, SyntaxContext};\n use crate::symbol::{Ident, Symbol, keywords, sym};\n-use crate::source_map::{ExpnInfo, MacroAttribute, dummy_spanned, hygiene, respan};\n+use crate::source_map::{ExpnInfo, MacroAttribute, dummy_spanned, respan};\n use crate::ptr::P;\n use crate::tokenstream::TokenStream;\n \n@@ -14,7 +14,7 @@ use syntax_pos::{DUMMY_SP, Span};\n /// Craft a span that will be ignored by the stability lint's\n /// call to source_map's `is_internal` check.\n /// The expanded code uses the unstable `#[prelude_import]` attribute.\n-fn ignored_span(sp: Span) -> Span {\n+fn ignored_span(sp: Span, edition: Edition) -> Span {\n     let mark = Mark::fresh(Mark::root());\n     mark.set_expn_info(ExpnInfo {\n         call_site: DUMMY_SP,\n@@ -25,7 +25,7 @@ fn ignored_span(sp: Span) -> Span {\n         ].into()),\n         allow_internal_unsafe: false,\n         local_inner_macros: false,\n-        edition: hygiene::default_edition(),\n+        edition,\n     });\n     sp.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n }\n@@ -94,7 +94,7 @@ pub fn maybe_inject_crates_ref(\n \n     INJECTED_CRATE_NAME.with(|opt_name| opt_name.set(Some(name)));\n \n-    let span = ignored_span(DUMMY_SP);\n+    let span = ignored_span(DUMMY_SP, edition);\n     krate.module.items.insert(0, P(ast::Item {\n         attrs: vec![ast::Attribute {\n             style: ast::AttrStyle::Outer,"}, {"sha": "7cd83f3e495be5a1094b2a56f56b79c9124eea9b", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -291,7 +291,7 @@ fn generate_test_harness(sess: &ParseSess,\n         ].into()),\n         allow_internal_unsafe: false,\n         local_inner_macros: false,\n-        edition: hygiene::default_edition(),\n+        edition: sess.edition,\n     });\n \n     TestHarnessGenerator {"}, {"sha": "107cbe70a23d7aef0d4a1058f41da25bf3bd9be2", "filename": "src/libsyntax/test_snippet.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Ftest_snippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Ftest_snippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest_snippet.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -1,5 +1,5 @@\n use crate::source_map::{SourceMap, FilePathMapping};\n-use crate::with_globals;\n+use crate::with_default_globals;\n \n use errors::Handler;\n use errors::emitter::EmitterWriter;\n@@ -39,7 +39,7 @@ impl<T: Write> Write for Shared<T> {\n }\n \n fn test_harness(file_text: &str, span_labels: Vec<SpanLabel>, expected_output: &str) {\n-    with_globals(|| {\n+    with_default_globals(|| {\n         let output = Arc::new(Mutex::new(Vec::new()));\n \n         let source_map = Lrc::new(SourceMap::new(FilePathMapping::empty()));"}, {"sha": "79efc6bf689c4c8b75f09fa1178ccc124124a67a", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -557,7 +557,7 @@ impl DelimSpan {\n mod tests {\n     use super::*;\n     use crate::syntax::ast::Ident;\n-    use crate::with_globals;\n+    use crate::with_default_globals;\n     use crate::parse::token::Token;\n     use crate::util::parser_testing::string_to_stream;\n     use syntax_pos::{Span, BytePos, NO_EXPANSION};\n@@ -572,7 +572,7 @@ mod tests {\n \n     #[test]\n     fn test_concat() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let test_res = string_to_ts(\"foo::bar::baz\");\n             let test_fst = string_to_ts(\"foo::bar\");\n             let test_snd = string_to_ts(\"::baz\");\n@@ -585,7 +585,7 @@ mod tests {\n \n     #[test]\n     fn test_to_from_bijection() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let test_start = string_to_ts(\"foo::bar(baz)\");\n             let test_end = test_start.trees().collect();\n             assert_eq!(test_start, test_end)\n@@ -594,7 +594,7 @@ mod tests {\n \n     #[test]\n     fn test_eq_0() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let test_res = string_to_ts(\"foo\");\n             let test_eqs = string_to_ts(\"foo\");\n             assert_eq!(test_res, test_eqs)\n@@ -603,7 +603,7 @@ mod tests {\n \n     #[test]\n     fn test_eq_1() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let test_res = string_to_ts(\"::bar::baz\");\n             let test_eqs = string_to_ts(\"::bar::baz\");\n             assert_eq!(test_res, test_eqs)\n@@ -612,7 +612,7 @@ mod tests {\n \n     #[test]\n     fn test_eq_3() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let test_res = string_to_ts(\"\");\n             let test_eqs = string_to_ts(\"\");\n             assert_eq!(test_res, test_eqs)\n@@ -621,7 +621,7 @@ mod tests {\n \n     #[test]\n     fn test_diseq_0() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let test_res = string_to_ts(\"::bar::baz\");\n             let test_eqs = string_to_ts(\"bar::baz\");\n             assert_eq!(test_res == test_eqs, false)\n@@ -630,7 +630,7 @@ mod tests {\n \n     #[test]\n     fn test_diseq_1() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let test_res = string_to_ts(\"(bar,baz)\");\n             let test_eqs = string_to_ts(\"bar,baz\");\n             assert_eq!(test_res == test_eqs, false)\n@@ -639,7 +639,7 @@ mod tests {\n \n     #[test]\n     fn test_is_empty() {\n-        with_globals(|| {\n+        with_default_globals(|| {\n             let test0: TokenStream = Vec::<TokenTree>::new().into_iter().collect();\n             let test1: TokenStream =\n                 TokenTree::Token(sp(0, 1), Token::Ident(Ident::from_str(\"a\"), false)).into();\n@@ -653,12 +653,14 @@ mod tests {\n \n     #[test]\n     fn test_dotdotdot() {\n-        let mut builder = TokenStreamBuilder::new();\n-        builder.push(TokenTree::Token(sp(0, 1), Token::Dot).joint());\n-        builder.push(TokenTree::Token(sp(1, 2), Token::Dot).joint());\n-        builder.push(TokenTree::Token(sp(2, 3), Token::Dot));\n-        let stream = builder.build();\n-        assert!(stream.eq_unspanned(&string_to_ts(\"...\")));\n-        assert_eq!(stream.trees().count(), 1);\n+        with_default_globals(|| {\n+            let mut builder = TokenStreamBuilder::new();\n+            builder.push(TokenTree::Token(sp(0, 1), Token::Dot).joint());\n+            builder.push(TokenTree::Token(sp(1, 2), Token::Dot).joint());\n+            builder.push(TokenTree::Token(sp(2, 3), Token::Dot));\n+            let stream = builder.build();\n+            assert!(stream.eq_unspanned(&string_to_ts(\"...\")));\n+            assert_eq!(stream.trees().count(), 1);\n+        })\n     }\n }"}, {"sha": "885b5a4f333b8fc74177f76f3c118e31ac2a70e4", "filename": "src/libsyntax/util/lev_distance.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Futil%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax%2Futil%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Futil%2Flev_distance.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -101,8 +101,8 @@ fn test_lev_distance() {\n \n #[test]\n fn test_find_best_match_for_name() {\n-    use crate::with_globals;\n-    with_globals(|| {\n+    use crate::with_default_globals;\n+    with_default_globals(|| {\n         let input = vec![Symbol::intern(\"aaab\"), Symbol::intern(\"aaabc\")];\n         assert_eq!(\n             find_best_match_for_name(input.iter(), \"aaaa\", None),"}, {"sha": "e5fc7aab61db41c57f995805e9ff512546223511", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -42,17 +42,17 @@ pub mod proc_macro_impl;\n use rustc_data_structures::sync::Lrc;\n use syntax::ast;\n use syntax::ext::base::{MacroExpanderFn, NormalTT, NamedSyntaxExtension, MultiModifier};\n-use syntax::ext::hygiene;\n use syntax::symbol::Symbol;\n+use syntax::edition::Edition;\n \n pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n-                         user_exts: Vec<NamedSyntaxExtension>) {\n+                         user_exts: Vec<NamedSyntaxExtension>,\n+                         edition: Edition) {\n     deriving::register_builtin_derives(resolver);\n \n     let mut register = |name, ext| {\n         resolver.add_builtin(ast::Ident::with_empty_ctxt(name), Lrc::new(ext));\n     };\n-\n     macro_rules! register {\n         ($( $name:ident: $f:expr, )*) => { $(\n             register(Symbol::intern(stringify!($name)),\n@@ -63,7 +63,7 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n                         allow_internal_unsafe: false,\n                         local_inner_macros: false,\n                         unstable_feature: None,\n-                        edition: hygiene::default_edition(),\n+                        edition,\n                     });\n         )* }\n     }\n@@ -108,7 +108,7 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n                 allow_internal_unsafe: false,\n                 local_inner_macros: false,\n                 unstable_feature: None,\n-                edition: hygiene::default_edition(),\n+                edition,\n             });\n     register(Symbol::intern(\"format_args_nl\"),\n              NormalTT {\n@@ -120,7 +120,7 @@ pub fn register_builtins(resolver: &mut dyn syntax::ext::base::Resolver,\n                  allow_internal_unsafe: false,\n                  local_inner_macros: false,\n                  unstable_feature: None,\n-                 edition: hygiene::default_edition(),\n+                 edition,\n              });\n \n     for (name, ext) in user_exts {"}, {"sha": "a13fe65ca0ddf84435fad0d33d5dfd0e6a5ba189", "filename": "src/libsyntax_ext/proc_macro_decls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax_ext%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_decls.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -4,7 +4,7 @@ use crate::deriving;\n \n use syntax::ast::{self, Ident};\n use syntax::attr;\n-use syntax::source_map::{ExpnInfo, MacroAttribute, hygiene, respan};\n+use syntax::source_map::{ExpnInfo, MacroAttribute, respan};\n use syntax::ext::base::ExtCtxt;\n use syntax::ext::build::AstBuilder;\n use syntax::ext::expand::ExpansionConfig;\n@@ -358,7 +358,7 @@ fn mk_decls(\n         ].into()),\n         allow_internal_unsafe: false,\n         local_inner_macros: false,\n-        edition: hygiene::default_edition(),\n+        edition: cx.parse_sess.edition,\n     });\n     let span = DUMMY_SP.apply_mark(mark);\n "}, {"sha": "8ee61a3f67f591b890b728b20266f636e0a47a82", "filename": "src/libsyntax_ext/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax_ext%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax_ext%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -3,7 +3,7 @@\n \n use syntax::ext::base::*;\n use syntax::ext::build::AstBuilder;\n-use syntax::ext::hygiene::{self, Mark, SyntaxContext};\n+use syntax::ext::hygiene::{Mark, SyntaxContext};\n use syntax::attr;\n use syntax::ast;\n use syntax::print::pprust;\n@@ -72,7 +72,7 @@ pub fn expand_test_or_bench(\n             ].into()),\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n-            edition: hygiene::default_edition(),\n+            edition: cx.parse_sess.edition,\n         });\n         (item.span.with_ctxt(SyntaxContext::empty().apply_mark(mark)),\n          attr_sp.with_ctxt(SyntaxContext::empty().apply_mark(mark)))"}, {"sha": "5b1ae167ce31543850a1475dcf5f9379536baaa6", "filename": "src/libsyntax_ext/test_case.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax_ext%2Ftest_case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax_ext%2Ftest_case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftest_case.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -11,7 +11,7 @@\n \n use syntax::ext::base::*;\n use syntax::ext::build::AstBuilder;\n-use syntax::ext::hygiene::{self, Mark, SyntaxContext};\n+use syntax::ext::hygiene::{Mark, SyntaxContext};\n use syntax::ast;\n use syntax::source_map::respan;\n use syntax::symbol::{Symbol, sym};\n@@ -47,7 +47,7 @@ pub fn expand(\n             ].into()),\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n-            edition: hygiene::default_edition(),\n+            edition: ecx.parse_sess.edition,\n         });\n         attr_sp.with_ctxt(SyntaxContext::empty().apply_mark(mark))\n     };"}, {"sha": "20216568426fed72d2938c8d0fdcbee129df52e7", "filename": "src/libsyntax_pos/edition.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax_pos%2Fedition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax_pos%2Fedition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fedition.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -1,6 +1,7 @@\n use crate::symbol::{Symbol, sym};\n use std::fmt;\n use std::str::FromStr;\n+use crate::GLOBALS;\n \n /// The edition of the compiler (RFC 2052)\n #[derive(Clone, Copy, Hash, PartialEq, PartialOrd, Debug, RustcEncodable, RustcDecodable, Eq)]\n@@ -38,6 +39,10 @@ impl fmt::Display for Edition {\n }\n \n impl Edition {\n+    pub fn from_session() -> Edition {\n+        GLOBALS.with(|globals| globals.edition)\n+    }\n+\n     pub fn lint_name(&self) -> &'static str {\n         match *self {\n             Edition::Edition2015 => \"rust_2015_compatibility\","}, {"sha": "6e787c08504f37872cf2203c889f1db72e06879a", "filename": "src/libsyntax_pos/hygiene.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax_pos%2Fhygiene.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax_pos%2Fhygiene.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fhygiene.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -7,7 +7,7 @@\n \n use crate::GLOBALS;\n use crate::Span;\n-use crate::edition::{Edition, DEFAULT_EDITION};\n+use crate::edition::Edition;\n use crate::symbol::{keywords, Symbol};\n \n use serialize::{Encodable, Decodable, Encoder, Decoder};\n@@ -174,7 +174,6 @@ crate struct HygieneData {\n     marks: Vec<MarkData>,\n     syntax_contexts: Vec<SyntaxContextData>,\n     markings: FxHashMap<(SyntaxContext, Mark, Transparency), SyntaxContext>,\n-    default_edition: Edition,\n }\n \n impl HygieneData {\n@@ -196,7 +195,6 @@ impl HygieneData {\n                 dollar_crate_name: keywords::DollarCrate.name(),\n             }],\n             markings: FxHashMap::default(),\n-            default_edition: DEFAULT_EDITION,\n         }\n     }\n \n@@ -205,14 +203,6 @@ impl HygieneData {\n     }\n }\n \n-pub fn default_edition() -> Edition {\n-    HygieneData::with(|data| data.default_edition)\n-}\n-\n-pub fn set_default_edition(edition: Edition) {\n-    HygieneData::with(|data| data.default_edition = edition);\n-}\n-\n pub fn clear_markings() {\n     HygieneData::with(|data| data.markings = FxHashMap::default());\n }"}, {"sha": "cb5aaf7eb882ffba2f382f7ad2ebfedc12dc69e5", "filename": "src/libsyntax_pos/lib.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax_pos%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax_pos%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Flib.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -26,6 +26,7 @@ use serialize::{Encodable, Decodable, Encoder, Decoder};\n extern crate serialize as rustc_serialize; // used by deriving\n \n pub mod edition;\n+use edition::Edition;\n pub mod hygiene;\n pub use hygiene::{Mark, SyntaxContext, ExpnInfo, ExpnFormat, CompilerDesugaringKind};\n \n@@ -52,14 +53,16 @@ pub struct Globals {\n     symbol_interner: Lock<symbol::Interner>,\n     span_interner: Lock<span_encoding::SpanInterner>,\n     hygiene_data: Lock<hygiene::HygieneData>,\n+    edition: Edition,\n }\n \n impl Globals {\n-    pub fn new() -> Globals {\n+    pub fn new(edition: Edition) -> Globals {\n         Globals {\n             symbol_interner: Lock::new(symbol::Interner::fresh()),\n             span_interner: Lock::new(span_encoding::SpanInterner::default()),\n             hygiene_data: Lock::new(hygiene::HygieneData::new()),\n+            edition,\n         }\n     }\n }\n@@ -356,8 +359,9 @@ impl Span {\n \n     /// Edition of the crate from which this span came.\n     pub fn edition(self) -> edition::Edition {\n-        self.ctxt().outer().expn_info().map_or_else(|| hygiene::default_edition(),\n-                                                    |einfo| einfo.edition)\n+        self.ctxt().outer().expn_info().map_or_else(|| {\n+            Edition::from_session()\n+        }, |einfo| einfo.edition)\n     }\n \n     #[inline]"}, {"sha": "e69a9a1c5cfc0dbd2a8b73a4f4eb53c6890e29c7", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -1276,6 +1276,7 @@ impl Encodable for InternedString {\n mod tests {\n     use super::*;\n     use crate::Globals;\n+    use crate::edition;\n \n     #[test]\n     fn interner_tests() {\n@@ -1300,7 +1301,7 @@ mod tests {\n \n     #[test]\n     fn without_first_quote_test() {\n-        GLOBALS.set(&Globals::new(), || {\n+        GLOBALS.set(&Globals::new(edition::DEFAULT_EDITION), || {\n             let i = Ident::from_str(\"'break\");\n             assert_eq!(i.without_first_quote().name, keywords::Break.name());\n         });"}, {"sha": "49e137549c04978dd97d2192cbbb3403598ccc69", "filename": "src/test/run-pass-fulldeps/ast_stmt_expr_attr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fast_stmt_expr_attr.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -105,7 +105,7 @@ fn reject_stmt_parse(es: &str) {\n }\n \n fn main() {\n-    syntax::with_globals(|| run());\n+    syntax::with_default_globals(|| run());\n }\n \n fn run() {"}, {"sha": "096701bd9b3ed4b4a56157d833626f608fb75d9a", "filename": "src/test/run-pass-fulldeps/auxiliary/plugin-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fauxiliary%2Fplugin-args.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -47,6 +47,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n             allow_internal_unsafe: false,\n             local_inner_macros: false,\n             unstable_feature: None,\n-            edition: hygiene::default_edition(),\n+            edition: reg.sess.edition(),\n         });\n }"}, {"sha": "a0dca9b1da4d277a6ef8c3e00e0815b12bb15901", "filename": "src/test/run-pass-fulldeps/mod_dir_path_canonicalized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Ftest%2Frun-pass-fulldeps%2Fmod_dir_path_canonicalized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Ftest%2Frun-pass-fulldeps%2Fmod_dir_path_canonicalized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fmod_dir_path_canonicalized.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -13,7 +13,7 @@ use syntax::parse::{self, ParseSess};\n mod gravy;\n \n pub fn main() {\n-    syntax::with_globals(|| parse());\n+    syntax::with_default_globals(|| parse());\n \n     assert_eq!(gravy::foo(), 10);\n }"}, {"sha": "659de9cf6d51b616ba5597ff428dfd4c23b9a024", "filename": "src/test/run-pass-fulldeps/pprust-expr-roundtrip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fpprust-expr-roundtrip.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -189,7 +189,7 @@ impl MutVisitor for AddParens {\n }\n \n fn main() {\n-    syntax::with_globals(|| run());\n+    syntax::with_default_globals(|| run());\n }\n \n fn run() {"}, {"sha": "45efa30d9919c5b51977350700233a44d5fe6b90", "filename": "src/test/rustdoc-ui/failed-doctest-output.stdout", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Ffailed-doctest-output.stdout?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -15,7 +15,7 @@ error[E0425]: cannot find value `no` in this scope\n error: aborting due to previous error\n \n For more information about this error, try `rustc --explain E0425`.\n-thread '$DIR/failed-doctest-output.rs - OtherStruct (line 17)' panicked at 'couldn't compile the test', src/librustdoc/test.rs:319:13\n+thread '$DIR/failed-doctest-output.rs - OtherStruct (line 17)' panicked at 'couldn't compile the test', src/librustdoc/test.rs:320:13\n note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n ---- $DIR/failed-doctest-output.rs - SomeStruct (line 11) stdout ----\n@@ -24,7 +24,7 @@ thread '$DIR/failed-doctest-output.rs - SomeStruct (line 11)' panicked at 'test\n thread 'main' panicked at 'oh no', $DIR/failed-doctest-output.rs:3:1\n note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n-', src/librustdoc/test.rs:341:17\n+', src/librustdoc/test.rs:342:17\n \n \n failures:"}, {"sha": "f31b64fbce36a9833696f4de00917060d1737477", "filename": "src/test/rustdoc-ui/unparseable-doc-test.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Funparseable-doc-test.stdout?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -13,7 +13,7 @@ error: unterminated double quote string\n \n error: aborting due to previous error\n \n-thread '$DIR/unparseable-doc-test.rs - foo (line 6)' panicked at 'couldn't compile the test', src/librustdoc/test.rs:319:13\n+thread '$DIR/unparseable-doc-test.rs - foo (line 6)' panicked at 'couldn't compile the test', src/librustdoc/test.rs:320:13\n note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n \n "}, {"sha": "3e7c7ab6379d8433d983a66232a85b01d9eed841", "filename": "src/tools/error_index_generator/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8d1b81ba40c0d2154ed6c09a9c625d1889814ac/src%2Ftools%2Ferror_index_generator%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ferror_index_generator%2Fmain.rs?ref=a8d1b81ba40c0d2154ed6c09a9c625d1889814ac", "patch": "@@ -266,7 +266,7 @@ fn main() {\n         *slot.borrow_mut() = Some((None, String::from(\"https://play.rust-lang.org/\")));\n     });\n     let (format, dst) = parse_args();\n-    let result = syntax::with_globals(move || {\n+    let result = syntax::with_default_globals(move || {\n         main_with_result(format, &dst)\n     });\n     if let Err(e) = result {"}]}