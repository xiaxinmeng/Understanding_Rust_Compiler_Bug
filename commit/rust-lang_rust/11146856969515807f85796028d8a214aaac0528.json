{"sha": "11146856969515807f85796028d8a214aaac0528", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExMTQ2ODU2OTY5NTE1ODA3Zjg1Nzk2MDI4ZDhhMjE0YWFhYzA1Mjg=", "commit": {"author": {"name": "bluss", "email": "bluss", "date": "2014-12-25T01:17:48Z"}, "committer": {"name": "bluss", "email": "bluss", "date": "2014-12-25T01:17:48Z"}, "message": "hashmap: Fix the example using derived Hash + Eq\n\nThe example derived Hash + Eq on a type that was used as *values* for\na hashmap.. for the example to make sense, we have to use a custom *key*\ntype.\n\nWrite a slightly more involved example, still using Vikings, but this\ntime as key.\n\nI preferred using String over &str here, since that's the typical usage\nand we might want to lead users down that path.", "tree": {"sha": "6cd2e5e5f6ead9467e7a20d520fab460e8360558", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cd2e5e5f6ead9467e7a20d520fab460e8360558"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11146856969515807f85796028d8a214aaac0528", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11146856969515807f85796028d8a214aaac0528", "html_url": "https://github.com/rust-lang/rust/commit/11146856969515807f85796028d8a214aaac0528", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11146856969515807f85796028d8a214aaac0528/comments", "author": null, "committer": null, "parents": [{"sha": "7e11b22713aebd28ceaaa2ecef937c9b9d247c2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e11b22713aebd28ceaaa2ecef937c9b9d247c2f", "html_url": "https://github.com/rust-lang/rust/commit/7e11b22713aebd28ceaaa2ecef937c9b9d247c2f"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "8c6e72ea2aec22e55eb68237ecd35c95735d1d95", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/11146856969515807f85796028d8a214aaac0528/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11146856969515807f85796028d8a214aaac0528/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=11146856969515807f85796028d8a214aaac0528", "patch": "@@ -264,27 +264,35 @@ fn test_resize_policy() {\n /// }\n /// ```\n ///\n-/// The easiest way to use `HashMap` with a custom type is to derive `Eq` and `Hash`.\n+/// The easiest way to use `HashMap` with a custom type as key is to derive `Eq` and `Hash`.\n /// We must also derive `PartialEq`.\n ///\n /// ```\n /// use std::collections::HashMap;\n ///\n /// #[deriving(Hash, Eq, PartialEq, Show)]\n-/// struct Viking<'a> {\n-///     name: &'a str,\n-///     power: uint,\n+/// struct Viking {\n+///     name: String,\n+///     country: String,\n /// }\n ///\n+/// impl Viking {\n+///     /// Create a new Viking.\n+///     pub fn new(name: &str, country: &str) -> Viking {\n+///         Viking { name: name.to_string(), country: country.to_string() }\n+///     }\n+/// }\n+///\n+/// // Use a HashMap to store the vikings' health points.\n /// let mut vikings = HashMap::new();\n ///\n-/// vikings.insert(\"Norway\", Viking { name: \"Einar\", power: 9u });\n-/// vikings.insert(\"Denmark\", Viking { name: \"Olaf\", power: 4u });\n-/// vikings.insert(\"Iceland\", Viking { name: \"Harald\", power: 8u });\n+/// vikings.insert(Viking::new(\"Einar\", \"Norway\"), 25u);\n+/// vikings.insert(Viking::new(\"Olaf\", \"Denmark\"), 24u);\n+/// vikings.insert(Viking::new(\"Harald\", \"Iceland\"), 12u);\n ///\n-/// // Use derived implementation to print the vikings.\n-/// for (land, viking) in vikings.iter() {\n-///     println!(\"{} at {}\", viking, land);\n+/// // Use derived implementation to print the status of the vikings.\n+/// for (viking, health) in vikings.iter() {\n+///     println!(\"{} has {} hp\", viking, health);\n /// }\n /// ```\n #[deriving(Clone)]"}]}