{"sha": "3587ff58cce2f00d1be4d4e09d85b4ca9b4baff7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM1ODdmZjU4Y2NlMmYwMGQxYmU0ZDRlMDlkODViNGNhOWI0YmFmZjc=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-16T14:46:04Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-16T14:58:08Z"}, "message": "Don't complain re missing `mut` on attempt to partially initialize an uninitialized struct.\n\nUnder the semantics of #54986 (our short term plan), the partial\ninitialization itself will signal an error. We don't need to add noise\nto the output by also complaining about `mut`. (In particular, the\nuser may well revise their code in a way that does not require `mut`.)", "tree": {"sha": "e04ed1c2169045b8fc4eeed6f3bd09ffcf11c26d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e04ed1c2169045b8fc4eeed6f3bd09ffcf11c26d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3587ff58cce2f00d1be4d4e09d85b4ca9b4baff7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3587ff58cce2f00d1be4d4e09d85b4ca9b4baff7", "html_url": "https://github.com/rust-lang/rust/commit/3587ff58cce2f00d1be4d4e09d85b4ca9b4baff7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3587ff58cce2f00d1be4d4e09d85b4ca9b4baff7/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57c467824bf72e0346fc7bc7140e232664c4e891", "url": "https://api.github.com/repos/rust-lang/rust/commits/57c467824bf72e0346fc7bc7140e232664c4e891", "html_url": "https://github.com/rust-lang/rust/commit/57c467824bf72e0346fc7bc7140e232664c4e891"}], "stats": {"total": 32, "additions": 23, "deletions": 9}, "files": [{"sha": "1f8d077fb69045119859b56ad1e5dc032b85f49f", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 23, "deletions": 9, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3587ff58cce2f00d1be4d4e09d85b4ca9b4baff7/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3587ff58cce2f00d1be4d4e09d85b4ca9b4baff7/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=3587ff58cce2f00d1be4d4e09d85b4ca9b4baff7", "patch": "@@ -1776,13 +1776,23 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         location: Location,\n     ) -> bool {\n         debug!(\n-            \"check_access_permissions({:?}, {:?}, {:?})\",\n+            \"check_access_permissions({:?}, {:?}, is_local_mutation_allowed: {:?})\",\n             place, kind, is_local_mutation_allowed\n         );\n \n         let error_access;\n         let the_place_err;\n \n+        // rust-lang/rust#21232, #54986: during period where we reject\n+        // partial initialization, do not complain about mutability\n+        // errors except for actual mutation (as opposed to an attempt\n+        // to do a partial initialization).\n+        let previously_initialized = if let Some(local) = place.base_local() {\n+            self.is_local_ever_initialized(local, flow_state).is_some()\n+        } else {\n+            true\n+        };\n+\n         match kind {\n             Reservation(WriteKind::MutableBorrow(borrow_kind @ BorrowKind::Unique))\n             | Reservation(WriteKind::MutableBorrow(borrow_kind @ BorrowKind::Mut { .. }))\n@@ -1875,14 +1885,18 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n \n         // at this point, we have set up the error reporting state.\n-        self.report_mutability_error(\n-            place,\n-            span,\n-            the_place_err,\n-            error_access,\n-            location,\n-        );\n-        return true;\n+        if previously_initialized {\n+            self.report_mutability_error(\n+                place,\n+                span,\n+                the_place_err,\n+                error_access,\n+                location,\n+            );\n+            return true;\n+        } else {\n+            return false;\n+        }\n     }\n \n     fn is_local_ever_initialized(&self,"}]}