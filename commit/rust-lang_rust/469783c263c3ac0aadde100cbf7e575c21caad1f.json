{"sha": "469783c263c3ac0aadde100cbf7e575c21caad1f", "node_id": "C_kwDOAAsO6NoAKDQ2OTc4M2MyNjNjM2FjMGFhZGRlMTAwY2JmN2U1NzVjMjFjYWFkMWY", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-03T17:33:39Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-03T17:33:39Z"}, "message": "Use generic_activity_with_arg in codegen_fn and compile_fn", "tree": {"sha": "d0042a6eba79bd2ba5148534dd1e8754216dbb04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0042a6eba79bd2ba5148534dd1e8754216dbb04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/469783c263c3ac0aadde100cbf7e575c21caad1f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/469783c263c3ac0aadde100cbf7e575c21caad1f", "html_url": "https://github.com/rust-lang/rust/commit/469783c263c3ac0aadde100cbf7e575c21caad1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/469783c263c3ac0aadde100cbf7e575c21caad1f/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d2ffe40864e6dc93881225621a05b833957963a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/d2ffe40864e6dc93881225621a05b833957963a5", "html_url": "https://github.com/rust-lang/rust/commit/d2ffe40864e6dc93881225621a05b833957963a5"}], "stats": {"total": 25, "additions": 14, "deletions": 11}, "files": [{"sha": "b43bb5e8668d6bc7766dc7e997b0e4d7deef922d", "filename": "src/base.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/469783c263c3ac0aadde100cbf7e575c21caad1f/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469783c263c3ac0aadde100cbf7e575c21caad1f/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=469783c263c3ac0aadde100cbf7e575c21caad1f", "patch": "@@ -30,6 +30,9 @@ pub(crate) fn codegen_fn<'tcx>(\n ) -> CodegenedFunction {\n     debug_assert!(!instance.substs.needs_infer());\n \n+    let symbol_name = tcx.symbol_name(instance).name.to_string();\n+    let _timer = tcx.prof.generic_activity_with_arg(\"codegen fn\", &*symbol_name);\n+\n     let mir = tcx.instance_mir(instance.def);\n     let _mir_guard = crate::PrintOnPanic(|| {\n         let mut buf = Vec::new();\n@@ -41,7 +44,6 @@ pub(crate) fn codegen_fn<'tcx>(\n     });\n \n     // Declare function\n-    let symbol_name = tcx.symbol_name(instance).name.to_string();\n     let sig = get_function_sig(tcx, module.target_config().default_call_conv, instance);\n     let func_id = module.declare_function(&symbol_name, Linkage::Local, &sig).unwrap();\n \n@@ -129,6 +131,9 @@ pub(crate) fn compile_fn(\n     module: &mut dyn Module,\n     codegened_func: CodegenedFunction,\n ) {\n+    let _timer =\n+        cx.profiler.generic_activity_with_arg(\"compile function\", &*codegened_func.symbol_name);\n+\n     let clif_comments = codegened_func.clif_comments;\n \n     // Store function in context"}, {"sha": "58b01dfb5b0ec84b25600137467fbe733ca1fe51", "filename": "src/driver/aot.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/469783c263c3ac0aadde100cbf7e575c21caad1f/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/469783c263c3ac0aadde100cbf7e575c21caad1f/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=469783c263c3ac0aadde100cbf7e575c21caad1f", "patch": "@@ -291,16 +291,14 @@ fn module_codegen(\n             for (mono_item, _) in mono_items {\n                 match mono_item {\n                     MonoItem::Fn(inst) => {\n-                        tcx.prof.generic_activity(\"codegen fn\").run(|| {\n-                            let codegened_function = crate::base::codegen_fn(\n-                                tcx,\n-                                &mut cx,\n-                                Function::new(),\n-                                &mut module,\n-                                inst,\n-                            );\n-                            codegened_functions.push(codegened_function);\n-                        });\n+                        let codegened_function = crate::base::codegen_fn(\n+                            tcx,\n+                            &mut cx,\n+                            Function::new(),\n+                            &mut module,\n+                            inst,\n+                        );\n+                        codegened_functions.push(codegened_function);\n                     }\n                     MonoItem::Static(def_id) => {\n                         crate::constant::codegen_static(tcx, &mut module, def_id)"}]}