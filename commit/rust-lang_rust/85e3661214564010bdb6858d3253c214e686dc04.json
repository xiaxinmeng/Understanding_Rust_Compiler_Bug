{"sha": "85e3661214564010bdb6858d3253c214e686dc04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1ZTM2NjEyMTQ1NjQwMTBiZGI2ODU4ZDMyNTNjMjE0ZTY4NmRjMDQ=", "commit": {"author": {"name": "Chris Simpkins", "email": "git.simpkins@gmail.com", "date": "2020-02-08T05:12:25Z"}, "committer": {"name": "Chris Simpkins", "email": "git.simpkins@gmail.com", "date": "2020-02-08T05:12:25Z"}, "message": "PEP8 format spacing, remove unnecessary local variable assignment", "tree": {"sha": "07b9e75b6606bbe0e4719aa77e1afa16cbfb23fd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07b9e75b6606bbe0e4719aa77e1afa16cbfb23fd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85e3661214564010bdb6858d3253c214e686dc04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85e3661214564010bdb6858d3253c214e686dc04", "html_url": "https://github.com/rust-lang/rust/commit/85e3661214564010bdb6858d3253c214e686dc04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85e3661214564010bdb6858d3253c214e686dc04/comments", "author": {"login": "chrissimpkins", "id": 4249591, "node_id": "MDQ6VXNlcjQyNDk1OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4249591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrissimpkins", "html_url": "https://github.com/chrissimpkins", "followers_url": "https://api.github.com/users/chrissimpkins/followers", "following_url": "https://api.github.com/users/chrissimpkins/following{/other_user}", "gists_url": "https://api.github.com/users/chrissimpkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrissimpkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrissimpkins/subscriptions", "organizations_url": "https://api.github.com/users/chrissimpkins/orgs", "repos_url": "https://api.github.com/users/chrissimpkins/repos", "events_url": "https://api.github.com/users/chrissimpkins/events{/privacy}", "received_events_url": "https://api.github.com/users/chrissimpkins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chrissimpkins", "id": 4249591, "node_id": "MDQ6VXNlcjQyNDk1OTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4249591?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chrissimpkins", "html_url": "https://github.com/chrissimpkins", "followers_url": "https://api.github.com/users/chrissimpkins/followers", "following_url": "https://api.github.com/users/chrissimpkins/following{/other_user}", "gists_url": "https://api.github.com/users/chrissimpkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/chrissimpkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chrissimpkins/subscriptions", "organizations_url": "https://api.github.com/users/chrissimpkins/orgs", "repos_url": "https://api.github.com/users/chrissimpkins/repos", "events_url": "https://api.github.com/users/chrissimpkins/events{/privacy}", "received_events_url": "https://api.github.com/users/chrissimpkins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d04b95188fc96236472b7affae73ccfc5547636", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d04b95188fc96236472b7affae73ccfc5547636", "html_url": "https://github.com/rust-lang/rust/commit/8d04b95188fc96236472b7affae73ccfc5547636"}], "stats": {"total": 40, "additions": 26, "deletions": 14}, "files": [{"sha": "7789b24b62c83be1ce1297ebf08893e0bc611805", "filename": "src/etc/htmldocck.py", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/85e3661214564010bdb6858d3253c214e686dc04/src%2Fetc%2Fhtmldocck.py", "raw_url": "https://github.com/rust-lang/rust/raw/85e3661214564010bdb6858d3253c214e686dc04/src%2Fetc%2Fhtmldocck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fhtmldocck.py?ref=85e3661214564010bdb6858d3253c214e686dc04", "patch": "@@ -131,6 +131,7 @@\n except NameError:\n     unichr = chr\n \n+\n class CustomHTMLParser(HTMLParser):\n     \"\"\"simplified HTML parser.\n \n@@ -169,21 +170,25 @@ def close(self):\n         HTMLParser.close(self)\n         return self.__builder.close()\n \n+\n Command = namedtuple('Command', 'negated cmd args lineno context')\n \n+\n class FailedCheck(Exception):\n     pass\n \n+\n class InvalidCheck(Exception):\n     pass\n \n+\n def concat_multi_lines(f):\n     \"\"\"returns a generator out of the file object, which\n     - removes `\\\\` then `\\n` then a shared prefix with the previous line then\n       optional whitespace;\n     - keeps a line number (starting from 0) of the first line being\n       concatenated.\"\"\"\n-    lastline = None # set to the last line when the last line has a backslash\n+    lastline = None  # set to the last line when the last line has a backslash\n     firstlineno = None\n     catenated = ''\n     for lineno, line in enumerate(f):\n@@ -208,6 +213,7 @@ def concat_multi_lines(f):\n     if lastline is not None:\n         print_err(lineno, line, 'Trailing backslash at the end of the file')\n \n+\n LINE_PATTERN = re.compile(r'''\n     (?<=(?<!\\S)@)(?P<negated>!?)\n     (?P<cmd>[A-Za-z]+(?:-[A-Za-z]+)*)\n@@ -252,7 +258,7 @@ def flatten(node):\n \n def normalize_xpath(path):\n     if path.startswith('//'):\n-        return '.' + path # avoid warnings\n+        return '.' + path  # avoid warnings\n     elif path.startswith('.//'):\n         return path\n     else:\n@@ -316,7 +322,7 @@ def get_dir(self, path):\n \n def check_string(data, pat, regexp):\n     if not pat:\n-        return True # special case a presence testing\n+        return True  # special case a presence testing\n     elif regexp:\n         return re.search(pat, data, flags=re.UNICODE) is not None\n     else:\n@@ -353,7 +359,7 @@ def check_tree_text(tree, path, pat, regexp):\n                 ret = check_string(value, pat, regexp)\n                 if ret:\n                     break\n-    except Exception as e:\n+    except Exception:\n         print('Failed to get path \"{}\"'.format(path))\n         raise\n     return ret\n@@ -363,6 +369,7 @@ def get_tree_count(tree, path):\n     path = normalize_xpath(path)\n     return len(tree.findall(path))\n \n+\n def stderr(*args):\n     if sys.version_info.major < 3:\n         file = codecs.getwriter('utf-8')(sys.stderr)\n@@ -371,6 +378,7 @@ def stderr(*args):\n \n     print(*args, file=file)\n \n+\n def print_err(lineno, context, err, message=None):\n     global ERR_COUNT\n     ERR_COUNT += 1\n@@ -381,48 +389,50 @@ def print_err(lineno, context, err, message=None):\n     if context:\n         stderr(\"\\t{}\".format(context))\n \n+\n ERR_COUNT = 0\n \n+\n def check_command(c, cache):\n     try:\n         cerr = \"\"\n-        if c.cmd == 'has' or c.cmd == 'matches': # string test\n+        if c.cmd == 'has' or c.cmd == 'matches':  # string test\n             regexp = (c.cmd == 'matches')\n-            if len(c.args) == 1 and not regexp: # @has <path> = file existence\n+            if len(c.args) == 1 and not regexp:  # @has <path> = file existence\n                 try:\n                     cache.get_file(c.args[0])\n                     ret = True\n                 except FailedCheck as err:\n                     cerr = str(err)\n                     ret = False\n-            elif len(c.args) == 2: # @has/matches <path> <pat> = string test\n+            elif len(c.args) == 2:  # @has/matches <path> <pat> = string test\n                 cerr = \"`PATTERN` did not match\"\n                 ret = check_string(cache.get_file(c.args[0]), c.args[1], regexp)\n-            elif len(c.args) == 3: # @has/matches <path> <pat> <match> = XML tree test\n+            elif len(c.args) == 3:  # @has/matches <path> <pat> <match> = XML tree test\n                 cerr = \"`XPATH PATTERN` did not match\"\n                 tree = cache.get_tree(c.args[0])\n                 pat, sep, attr = c.args[1].partition('/@')\n-                if sep: # attribute\n+                if sep:  # attribute\n                     tree = cache.get_tree(c.args[0])\n                     ret = check_tree_attr(tree, pat, attr, c.args[2], regexp)\n-                else: # normalized text\n+                else:  # normalized text\n                     pat = c.args[1]\n                     if pat.endswith('/text()'):\n                         pat = pat[:-7]\n                     ret = check_tree_text(cache.get_tree(c.args[0]), pat, c.args[2], regexp)\n             else:\n                 raise InvalidCheck('Invalid number of @{} arguments'.format(c.cmd))\n \n-        elif c.cmd == 'count': # count test\n-            if len(c.args) == 3: # @count <path> <pat> <count> = count test\n+        elif c.cmd == 'count':  # count test\n+            if len(c.args) == 3:  # @count <path> <pat> <count> = count test\n                 expected = int(c.args[2])\n                 found = get_tree_count(cache.get_tree(c.args[0]), c.args[1])\n                 cerr = \"Expected {} occurrences but found {}\".format(expected, found)\n                 ret = expected == found\n             else:\n                 raise InvalidCheck('Invalid number of @{} arguments'.format(c.cmd))\n-        elif c.cmd == 'has-dir': # has-dir test\n-            if len(c.args) == 1: # @has-dir <path> = has-dir test\n+        elif c.cmd == 'has-dir':  # has-dir test\n+            if len(c.args) == 1:  # @has-dir <path> = has-dir test\n                 try:\n                     cache.get_dir(c.args[0])\n                     ret = True\n@@ -448,11 +458,13 @@ def check_command(c, cache):\n     except InvalidCheck as err:\n         print_err(c.lineno, c.context, str(err))\n \n+\n def check(target, commands):\n     cache = CachedFiles(target)\n     for c in commands:\n         check_command(c, cache)\n \n+\n if __name__ == '__main__':\n     if len(sys.argv) != 3:\n         stderr('Usage: {} <doc dir> <template>'.format(sys.argv[0]))"}]}