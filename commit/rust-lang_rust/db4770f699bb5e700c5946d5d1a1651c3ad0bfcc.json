{"sha": "db4770f699bb5e700c5946d5d1a1651c3ad0bfcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNDc3MGY2OTliYjVlNzAwYzU5NDZkNWQxYTE2NTFjM2FkMGJmY2M=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-03-24T17:21:59Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2019-03-24T17:21:59Z"}, "message": "Remove `CtorOf` from `Node::Ctor`.\n\nThis commit removes `CtorOf` from `Node::Ctor` as the parent of the\nconstructor can be determined by looking at the node's parent in the few\nplaces where knowing this is necessary.", "tree": {"sha": "9488cae8550c9cf2b5c3b8d3f67bb620c2c7e3cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9488cae8550c9cf2b5c3b8d3f67bb620c2c7e3cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlyXvQYACgkQAXYLT59T\n8VSaVA//dHyzfZXE7KF8VTwQkhQxbXhbY7Yd9qhB1GhdpwN4SZd54h01WoMVJgZ6\nRIY6Tfc42DliEBjEXIDLw2paKiQzJOEdHR/HGg11NaSYaNr8yoHooe5splXeotXK\nZQTqVGCIefLSyODZeheclinIZPE66DPiHgQ0SKSTHmTVOfOBEY6F4hGPieaDvset\nZS/fuOmLESFobRfLuukEm8k1tV9YHTg9Nh0eMsHzMGF2VsuCw/yMOT0ef2GP5mcK\n0hlkEN8FLmmqv3XwhOQk5pFDZevQVvih8hdliovOUf2ZbOjcLX5+9OMTa8lxLtFd\nMGsvU/7ediVNQl45e9Z/ERRPg7lP+1dPZ8UXuHyShYRtzT095vCXh17Y1kIWI8tQ\nVHA5gDvgSlHMUkyrQMRW3G6AdrOUPSKfDUgnQ56JzhQdi7mSALLE4IrWIWtdg9zD\n+YXuMX7wHyMWsj4ZfrG00cWVJrXo2a5GWpqK1myPaUzybBumVRxcexE06PLkWj2+\nc2s/VpqFATv9WkYqXkVTa3PQsbukxz6qSvDKi8h62tROq+QiOTN71xM+QxwUslJF\nmCzbuhvnJxsKzdjyey5bB51G5SO7To12aZOfbqUsEdyx9FGhfRgyF49KoYRmqz14\nLWQwXuh4h5bW6bTlAVAihRQgw5KodqNyA4wZCP07ZufNoZhH6/0=\n=Yj0R\n-----END PGP SIGNATURE-----", "payload": "tree 9488cae8550c9cf2b5c3b8d3f67bb620c2c7e3cd\nparent 782a6debe4542788a6c455070e06fb1137941376\nauthor David Wood <david@davidtw.co> 1553448119 +0100\ncommitter David Wood <david@davidtw.co> 1553448119 +0100\n\nRemove `CtorOf` from `Node::Ctor`.\n\nThis commit removes `CtorOf` from `Node::Ctor` as the parent of the\nconstructor can be determined by looking at the node's parent in the few\nplaces where knowing this is necessary.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc", "html_url": "https://github.com/rust-lang/rust/commit/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "782a6debe4542788a6c455070e06fb1137941376", "url": "https://api.github.com/repos/rust-lang/rust/commits/782a6debe4542788a6c455070e06fb1137941376", "html_url": "https://github.com/rust-lang/rust/commit/782a6debe4542788a6c455070e06fb1137941376"}], "stats": {"total": 109, "additions": 61, "deletions": 48}, "files": [{"sha": "75d7d843dea7e89fe3e4f98a919d55e0c98bdf45", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=db4770f699bb5e700c5946d5d1a1651c3ad0bfcc", "patch": "@@ -362,9 +362,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n                 if let ItemKind::Struct(ref struct_def, _) = i.node {\n                     // If this is a tuple or unit-like struct, register the constructor.\n                     if let Some(ctor_hir_id) = struct_def.ctor_hir_id() {\n-                        this.insert(i.span,\n-                                    ctor_hir_id,\n-                                    Node::Ctor(hir::CtorOf::Struct, struct_def));\n+                        this.insert(i.span, ctor_hir_id, Node::Ctor(struct_def));\n                     }\n                 }\n                 intravisit::walk_item(this, i);\n@@ -521,7 +519,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         self.with_parent(v.node.id, |this| {\n             // Register the constructor of this variant.\n             if let Some(ctor_hir_id) = v.node.data.ctor_hir_id() {\n-                this.insert(v.span, ctor_hir_id, Node::Ctor(hir::CtorOf::Variant, &v.node.data));\n+                this.insert(v.span, ctor_hir_id, Node::Ctor(&v.node.data));\n             }\n             intravisit::walk_variant(this, v, g, item_id);\n         });"}, {"sha": "ee3bc72632a7cd7bd957b1f7abc462f55615e0dc", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 13, "deletions": 9, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=db4770f699bb5e700c5946d5d1a1651c3ad0bfcc", "patch": "@@ -369,12 +369,15 @@ impl<'hir> Map<'hir> {\n                 let def_id = self.local_def_id_from_hir_id(variant.node.id);\n                 Some(Def::Variant(def_id))\n             }\n-            Node::Ctor(ctor_of, variant_data) => {\n+            Node::Ctor(variant_data) => {\n+                let ctor_of = match self.find(self.get_parent_node(node_id)) {\n+                    Some(Node::Item(..)) => CtorOf::Struct,\n+                    Some(Node::Variant(..)) => CtorOf::Variant,\n+                    _ => unreachable!(),\n+                };\n                 variant_data.ctor_hir_id()\n                     .map(|hir_id| self.local_def_id_from_hir_id(hir_id))\n-                    .map(|def_id| Def::Ctor(\n-                        ctor_of, def_id, def::CtorKind::from_hir(variant_data),\n-                    ))\n+                    .map(|def_id| Def::Ctor(ctor_of, def_id, def::CtorKind::from_hir(variant_data)))\n             }\n             Node::AnonConst(_) |\n             Node::Field(_) |\n@@ -951,7 +954,7 @@ impl<'hir> Map<'hir> {\n                 }\n             }\n             Some(Node::Variant(variant)) => &variant.node.data,\n-            Some(Node::Ctor(_, data)) => data,\n+            Some(Node::Ctor(data)) => data,\n             _ => bug!(\"expected struct or variant, found {}\", self.hir_to_string(id))\n         }\n     }\n@@ -1070,10 +1073,11 @@ impl<'hir> Map<'hir> {\n             Some(Node::Binding(pat)) => pat.span,\n             Some(Node::Pat(pat)) => pat.span,\n             Some(Node::Block(block)) => block.span,\n-            Some(Node::Ctor(CtorOf::Struct, _)) =>\n-                self.expect_item(self.get_parent(id)).span,\n-            Some(Node::Ctor(CtorOf::Variant, _)) =>\n-                self.expect_variant(self.node_to_hir_id(self.get_parent_node(id))).span,\n+            Some(Node::Ctor(..)) => match self.find(self.get_parent_node(id)) {\n+                Some(Node::Item(item)) => item.span,\n+                Some(Node::Variant(variant)) => variant.span,\n+                _ => unreachable!(),\n+            }\n             Some(Node::Lifetime(lifetime)) => lifetime.span,\n             Some(Node::GenericParam(param)) => param.span,\n             Some(Node::Visibility(&Spanned {"}, {"sha": "0ffbb1c8106e2800b6dfba7c56e1c98965b6622c", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=db4770f699bb5e700c5946d5d1a1651c3ad0bfcc", "patch": "@@ -2590,7 +2590,7 @@ pub enum Node<'hir> {\n \n     /// `Ctor` refers to the constructor of an enum variant or struct. Only tuple or unit variants\n     /// with synthesized constructors.\n-    Ctor(CtorOf, &'hir VariantData),\n+    Ctor(&'hir VariantData),\n \n     Lifetime(&'hir Lifetime),\n     GenericParam(&'hir GenericParam),"}, {"sha": "5b5a7cc9ed85b1d3a237ceb2b062c3d19fe6de49", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=db4770f699bb5e700c5946d5d1a1651c3ad0bfcc", "patch": "@@ -1077,7 +1077,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     _ => ArgKind::empty()\n                 }).collect::<Vec<ArgKind>>())\n             }\n-            Node::Ctor(_, ref variant_data) => {\n+            Node::Ctor(ref variant_data) => {\n                 let span = variant_data.ctor_hir_id()\n                     .map(|hir_id| self.tcx.hir().span_by_hir_id(hir_id))\n                     .unwrap_or(DUMMY_SP);"}, {"sha": "09de907b75104c30533e5769acc814439192959a", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=db4770f699bb5e700c5946d5d1a1651c3ad0bfcc", "patch": "@@ -85,7 +85,7 @@ fn borrowck<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, owner_def_id: DefId)\n     let owner_id = tcx.hir().as_local_hir_id(owner_def_id).unwrap();\n \n     match tcx.hir().get_by_hir_id(owner_id) {\n-        Node::Ctor(_, _) => {\n+        Node::Ctor(..) => {\n             // We get invoked with anything that has MIR, but some of\n             // those things (notably the synthesized constructors from\n             // tuple structs/variants) do not have an associated body"}, {"sha": "7fe86d11c9ee4df56e961f8ab70ed920e36128d8", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=db4770f699bb5e700c5946d5d1a1651c3ad0bfcc", "patch": "@@ -31,7 +31,7 @@ pub fn mir_build<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Mir<'t\n \n     // Figure out what primary body this item has.\n     let (body_id, return_ty_span) = match tcx.hir().get_by_hir_id(id) {\n-        Node::Ctor(_, ctor) => return create_constructor_shim(tcx, id, ctor),\n+        Node::Ctor(ctor) => return create_constructor_shim(tcx, id, ctor),\n \n         Node::Expr(hir::Expr { node: hir::ExprKind::Closure(_, decl, body_id, _, _), .. })\n         | Node::Item(hir::Item { node: hir::ItemKind::Fn(decl, _, _, body_id), .. })"}, {"sha": "bbd03e82a3730b8e262103c833394f74e87c89a5", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 39, "deletions": 27, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=db4770f699bb5e700c5946d5d1a1651c3ad0bfcc", "patch": "@@ -225,7 +225,7 @@ fn def_id_visibility<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n             let vis = match tcx.hir().get_by_hir_id(hir_id) {\n                 Node::Item(item) => &item.vis,\n                 Node::ForeignItem(foreign_item) => &foreign_item.vis,\n-                Node::TraitItem(..) | Node::Variant(..) | Node::Ctor(hir::CtorOf::Variant, ..) => {\n+                Node::TraitItem(..) | Node::Variant(..) => {\n                     return def_id_visibility(tcx, tcx.hir().get_parent_did_by_hir_id(hir_id));\n                 }\n                 Node::ImplItem(impl_item) => {\n@@ -239,36 +239,48 @@ fn def_id_visibility<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n                         node => bug!(\"unexpected node kind: {:?}\", node),\n                     }\n                 }\n-                Node::Ctor(hir::CtorOf::Struct, vdata) => {\n-                    let struct_hir_id = tcx.hir().get_parent_item(hir_id);\n-                    let item = match tcx.hir().get_by_hir_id(struct_hir_id) {\n-                        Node::Item(item) => item,\n-                        node => bug!(\"unexpected node kind: {:?}\", node),\n-                    };\n-                    let (mut ctor_vis, mut span, mut descr) =\n-                        (ty::Visibility::from_hir(&item.vis, struct_hir_id, tcx),\n-                         item.vis.span, item.vis.node.descr());\n-                    for field in vdata.fields() {\n-                        let field_vis = ty::Visibility::from_hir(&field.vis, hir_id, tcx);\n-                        if ctor_vis.is_at_least(field_vis, tcx) {\n-                            ctor_vis = field_vis;\n-                            span = field.vis.span;\n-                            descr = field.vis.node.descr();\n+                Node::Ctor(vdata) => {\n+                    let parent_hir_id = tcx.hir().get_parent_node_by_hir_id(hir_id);\n+                    match tcx.hir().get_by_hir_id(parent_hir_id) {\n+                        Node::Variant(..) => {\n+                            let parent_did = tcx.hir().local_def_id_from_hir_id(parent_hir_id);\n+                            return def_id_visibility(tcx, parent_did);\n                         }\n-                    }\n+                        Node::Item(..) => {\n+                            let item = match tcx.hir().get_by_hir_id(parent_hir_id) {\n+                                Node::Item(item) => item,\n+                                node => bug!(\"unexpected node kind: {:?}\", node),\n+                            };\n+                            let (mut ctor_vis, mut span, mut descr) =\n+                                (ty::Visibility::from_hir(&item.vis, parent_hir_id, tcx),\n+                                item.vis.span, item.vis.node.descr());\n+                            for field in vdata.fields() {\n+                                let field_vis = ty::Visibility::from_hir(&field.vis, hir_id, tcx);\n+                                if ctor_vis.is_at_least(field_vis, tcx) {\n+                                    ctor_vis = field_vis;\n+                                    span = field.vis.span;\n+                                    descr = field.vis.node.descr();\n+                                }\n+                            }\n \n-                    // If the structure is marked as non_exhaustive then lower the\n-                    // visibility to within the crate.\n-                    if ctor_vis == ty::Visibility::Public {\n-                        let adt_def = tcx.adt_def(tcx.hir().get_parent_did_by_hir_id(hir_id));\n-                        if adt_def.non_enum_variant().is_field_list_non_exhaustive() {\n-                            ctor_vis = ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX));\n-                            span = attr::find_by_name(&item.attrs, \"non_exhaustive\").unwrap().span;\n-                            descr = \"crate-visible\";\n+                            // If the structure is marked as non_exhaustive then lower the\n+                            // visibility to within the crate.\n+                            if ctor_vis == ty::Visibility::Public {\n+                                let adt_def =\n+                                    tcx.adt_def(tcx.hir().get_parent_did_by_hir_id(hir_id));\n+                                if adt_def.non_enum_variant().is_field_list_non_exhaustive() {\n+                                    ctor_vis =\n+                                        ty::Visibility::Restricted(DefId::local(CRATE_DEF_INDEX));\n+                                    span = attr::find_by_name(&item.attrs, \"non_exhaustive\")\n+                                                .unwrap().span;\n+                                    descr = \"crate-visible\";\n+                                }\n+                            }\n+\n+                            return (ctor_vis, span, descr);\n                         }\n+                        node => bug!(\"unexpected node kind: {:?}\", node),\n                     }\n-\n-                    return (ctor_vis, span, descr);\n                 }\n                 Node::Expr(expr) => {\n                     return (ty::Visibility::Restricted("}, {"sha": "fc8452e49ad1b386d20e53cd5c25557acf78235e", "filename": "src/librustc_resolve/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc/src%2Flibrustc_resolve%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc/src%2Flibrustc_resolve%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Ferror_reporting.rs?ref=db4770f699bb5e700c5946d5d1a1651c3ad0bfcc", "patch": "@@ -2,8 +2,7 @@ use std::cmp::Reverse;\n \n use errors::{Applicability, DiagnosticBuilder, DiagnosticId};\n use log::debug;\n-use rustc::hir::def::{Def, CtorKind};\n-use rustc::hir::def::Namespace::*;\n+use rustc::hir::def::{Def, CtorKind, Namespace::*};\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::session::config::nightly_options;\n use syntax::ast::{ExprKind};"}, {"sha": "06450424776d4cfca0e1c1bc142d55fdd3e371b6", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db4770f699bb5e700c5946d5d1a1651c3ad0bfcc/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=db4770f699bb5e700c5946d5d1a1651c3ad0bfcc", "patch": "@@ -1247,7 +1247,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n             ForeignItemKind::Type => tcx.mk_foreign(def_id),\n         },\n \n-        Node::Ctor(_, &ref def) | Node::Variant(&Spanned {\n+        Node::Ctor(&ref def) | Node::Variant(&Spanned {\n             node: hir::VariantKind { data: ref def, .. },\n             ..\n         }) => match *def {\n@@ -1625,7 +1625,7 @@ fn fn_sig<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> ty::PolyFnSig\n             compute_sig_of_foreign_fn_decl(tcx, def_id, fn_decl, abi)\n         }\n \n-        Ctor(_, data) | Variant(Spanned {\n+        Ctor(data) | Variant(Spanned {\n             node: hir::VariantKind { data, ..  },\n             ..\n         }) if data.ctor_hir_id().is_some() => {"}]}