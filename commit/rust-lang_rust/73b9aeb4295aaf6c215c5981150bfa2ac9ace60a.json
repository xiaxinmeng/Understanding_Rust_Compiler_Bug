{"sha": "73b9aeb4295aaf6c215c5981150bfa2ac9ace60a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczYjlhZWI0Mjk1YWFmNmMyMTVjNTk4MTE1MGJmYTJhYzlhY2U2MGE=", "commit": {"author": {"name": "Alexis", "email": "a.beingessner@gmail.com", "date": "2015-02-05T20:08:33Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-02-06T14:12:33Z"}, "message": "remove int_uint feature from libcollections", "tree": {"sha": "44f6185839a496d08bc8e5a0bfc3122e2fa29654", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/44f6185839a496d08bc8e5a0bfc3122e2fa29654"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73b9aeb4295aaf6c215c5981150bfa2ac9ace60a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73b9aeb4295aaf6c215c5981150bfa2ac9ace60a", "html_url": "https://github.com/rust-lang/rust/commit/73b9aeb4295aaf6c215c5981150bfa2ac9ace60a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73b9aeb4295aaf6c215c5981150bfa2ac9ace60a/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4e12c1536322d909bfd317948ac3bb5f37fb782", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4e12c1536322d909bfd317948ac3bb5f37fb782", "html_url": "https://github.com/rust-lang/rust/commit/c4e12c1536322d909bfd317948ac3bb5f37fb782"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "eb398ff8743fccb5465ca7e54071ff0400778712", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73b9aeb4295aaf6c215c5981150bfa2ac9ace60a/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b9aeb4295aaf6c215c5981150bfa2ac9ace60a/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=73b9aeb4295aaf6c215c5981150bfa2ac9ace60a", "patch": "@@ -890,7 +890,7 @@ mod test {\n     fn test_from_iter() {\n         let xs = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n \n-        let set: BTreeSet<int> = xs.iter().map(|&x| x).collect();\n+        let set: BTreeSet<_> = xs.iter().cloned().collect();\n \n         for x in &xs {\n             assert!(set.contains(x));\n@@ -899,8 +899,8 @@ mod test {\n \n     #[test]\n     fn test_show() {\n-        let mut set: BTreeSet<int> = BTreeSet::new();\n-        let empty: BTreeSet<int> = BTreeSet::new();\n+        let mut set = BTreeSet::new();\n+        let empty = BTreeSet::<i32>::new();\n \n         set.insert(1);\n         set.insert(2);"}, {"sha": "679754be7490ee35edc70196650968529b6662aa", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73b9aeb4295aaf6c215c5981150bfa2ac9ace60a/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b9aeb4295aaf6c215c5981150bfa2ac9ace60a/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=73b9aeb4295aaf6c215c5981150bfa2ac9ace60a", "patch": "@@ -1575,7 +1575,7 @@ mod tests {\n \n     #[test]\n     fn test_is_empty() {\n-        let xs: [int; 0] = [];\n+        let xs: [i32; 0] = [];\n         assert!(xs.is_empty());\n         assert!(![0].is_empty());\n     }\n@@ -1913,7 +1913,7 @@ mod tests {\n     #[test]\n     fn test_permutations() {\n         {\n-            let v: [int; 0] = [];\n+            let v: [i32; 0] = [];\n             let mut it = v.permutations();\n             let (min_size, max_opt) = it.size_hint();\n             assert_eq!(min_size, 1);"}, {"sha": "62640e1e25032274d99c0fc965c290ac24ebdec2", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/73b9aeb4295aaf6c215c5981150bfa2ac9ace60a/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b9aeb4295aaf6c215c5981150bfa2ac9ace60a/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=73b9aeb4295aaf6c215c5981150bfa2ac9ace60a", "patch": "@@ -2146,10 +2146,10 @@ mod tests {\n \n     #[test]\n     fn test_partition() {\n-        assert_eq!(vec![].into_iter().partition(|x: &int| *x < 3), (vec![], vec![]));\n-        assert_eq!(vec![1, 2, 3].into_iter().partition(|x: &int| *x < 4), (vec![1, 2, 3], vec![]));\n-        assert_eq!(vec![1, 2, 3].into_iter().partition(|x: &int| *x < 2), (vec![1], vec![2, 3]));\n-        assert_eq!(vec![1, 2, 3].into_iter().partition(|x: &int| *x < 0), (vec![], vec![1, 2, 3]));\n+        assert_eq!(vec![].into_iter().partition(|x: &i32| *x < 3), (vec![], vec![]));\n+        assert_eq!(vec![1, 2, 3].into_iter().partition(|x| *x < 4), (vec![1, 2, 3], vec![]));\n+        assert_eq!(vec![1, 2, 3].into_iter().partition(|x| *x < 2), (vec![1], vec![2, 3]));\n+        assert_eq!(vec![1, 2, 3].into_iter().partition(|x| *x < 0), (vec![], vec![1, 2, 3]));\n     }\n \n     #[test]\n@@ -2183,7 +2183,7 @@ mod tests {\n     #[test]\n     fn test_vec_truncate_drop() {\n         static mut drops: u32 = 0;\n-        struct Elem(int);\n+        struct Elem(i32);\n         impl Drop for Elem {\n             fn drop(&mut self) {\n                 unsafe { drops += 1; }"}, {"sha": "4153c2a7de3358b80abfa34cda98c4c00e68ad49", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73b9aeb4295aaf6c215c5981150bfa2ac9ace60a/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73b9aeb4295aaf6c215c5981150bfa2ac9ace60a/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=73b9aeb4295aaf6c215c5981150bfa2ac9ace60a", "patch": "@@ -1053,7 +1053,7 @@ mod test_map {\n         assert!(m.insert(10, 11).is_none());\n \n         for (k, v) in &mut m {\n-            *v += k as int;\n+            *v += k as isize;\n         }\n \n         let mut it = m.iter();\n@@ -1095,7 +1095,7 @@ mod test_map {\n         assert!(m.insert(10, 11).is_none());\n \n         for (k, v) in m.iter_mut().rev() {\n-            *v += k as int;\n+            *v += k as isize;\n         }\n \n         let mut it = m.iter();"}]}