{"sha": "a13e7212025e5339133126d129e64fe8e7aff84b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExM2U3MjEyMDI1ZTUzMzkxMzMxMjZkMTI5ZTY0ZmU4ZTdhZmY4NGI=", "commit": {"author": {"name": "Steven Allen", "email": "steven@stebalien.com", "date": "2015-01-21T05:14:04Z"}, "committer": {"name": "Steven Allen", "email": "steven@stebalien.com", "date": "2015-01-21T16:29:40Z"}, "message": "Use the default `len` implementation in ExactSizeIterator impls", "tree": {"sha": "315c0d2c2ce9a4957ad0261dd3fe7fe3d2f5ce00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/315c0d2c2ce9a4957ad0261dd3fe7fe3d2f5ce00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a13e7212025e5339133126d129e64fe8e7aff84b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a13e7212025e5339133126d129e64fe8e7aff84b", "html_url": "https://github.com/rust-lang/rust/commit/a13e7212025e5339133126d129e64fe8e7aff84b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a13e7212025e5339133126d129e64fe8e7aff84b/comments", "author": {"login": "Stebalien", "id": 310393, "node_id": "MDQ6VXNlcjMxMDM5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/310393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stebalien", "html_url": "https://github.com/Stebalien", "followers_url": "https://api.github.com/users/Stebalien/followers", "following_url": "https://api.github.com/users/Stebalien/following{/other_user}", "gists_url": "https://api.github.com/users/Stebalien/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stebalien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stebalien/subscriptions", "organizations_url": "https://api.github.com/users/Stebalien/orgs", "repos_url": "https://api.github.com/users/Stebalien/repos", "events_url": "https://api.github.com/users/Stebalien/events{/privacy}", "received_events_url": "https://api.github.com/users/Stebalien/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stebalien", "id": 310393, "node_id": "MDQ6VXNlcjMxMDM5Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/310393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stebalien", "html_url": "https://github.com/Stebalien", "followers_url": "https://api.github.com/users/Stebalien/followers", "following_url": "https://api.github.com/users/Stebalien/following{/other_user}", "gists_url": "https://api.github.com/users/Stebalien/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stebalien/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stebalien/subscriptions", "organizations_url": "https://api.github.com/users/Stebalien/orgs", "repos_url": "https://api.github.com/users/Stebalien/repos", "events_url": "https://api.github.com/users/Stebalien/events{/privacy}", "received_events_url": "https://api.github.com/users/Stebalien/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ea6f78cf6779a933e2dd859efee995932ef1371", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ea6f78cf6779a933e2dd859efee995932ef1371", "html_url": "https://github.com/rust-lang/rust/commit/8ea6f78cf6779a933e2dd859efee995932ef1371"}], "stats": {"total": 29, "additions": 5, "deletions": 24}, "files": [{"sha": "e39c60a4006e8c3379d33a533179885d3b96a52d", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a13e7212025e5339133126d129e64fe8e7aff84b/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a13e7212025e5339133126d129e64fe8e7aff84b/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=a13e7212025e5339133126d129e64fe8e7aff84b", "patch": "@@ -1088,10 +1088,7 @@ impl<'a, I> DoubleEndedIterator for ByRef<'a, I> where I: 'a + DoubleEndedIterat\n }\n \n #[stable]\n-impl<'a, I> ExactSizeIterator for ByRef<'a, I> where I: 'a + ExactSizeIterator {\n-    #[inline]\n-    fn len(&self) -> uint { self.iter.len() }\n-}\n+impl<'a, I> ExactSizeIterator for ByRef<'a, I> where I: 'a + ExactSizeIterator {}\n \n /// A trait for iterators over elements which can be added together\n #[unstable = \"needs to be re-evaluated as part of numerics reform\"]\n@@ -1797,14 +1794,7 @@ impl<T, I> Iterator for Peekable<T, I> where I: Iterator<Item=T> {\n }\n \n #[stable]\n-impl<T, I> ExactSizeIterator for Peekable<T, I> where I: ExactSizeIterator<Item = T> {\n-    #[inline]\n-    fn len(&self) -> usize {\n-        // This is guarenteed to not overflow because `len()` must have been able to return a valid\n-        // value before we peeked.\n-        self.iter.len() + if self.peeked.is_some() { 1 } else { 0 }\n-    }\n-}\n+impl<T, I> ExactSizeIterator for Peekable<T, I> where I: ExactSizeIterator<Item = T> {}\n \n #[stable]\n impl<T, I> Peekable<T, I> where I: Iterator<Item=T> {\n@@ -1999,10 +1989,7 @@ impl<I> RandomAccessIterator for Skip<I> where I: RandomAccessIterator{\n }\n \n #[stable]\n-impl<I> ExactSizeIterator for Skip<I> where I: ExactSizeIterator {\n-    #[inline]\n-    fn len(&self) -> uint { self.iter.len().saturating_sub(self.n) }\n-}\n+impl<I> ExactSizeIterator for Skip<I> where I: ExactSizeIterator {}\n \n /// An iterator that only iterates over the first `n` iterations of `iter`.\n #[derive(Clone)]\n@@ -2060,10 +2047,7 @@ impl<I> RandomAccessIterator for Take<I> where I: RandomAccessIterator{\n }\n \n #[stable]\n-impl<I> ExactSizeIterator for Take<I> where I: ExactSizeIterator {\n-    #[inline]\n-    fn len(&self) -> uint { cmp::min(self.iter.len(), self.n) }\n-}\n+impl<I> ExactSizeIterator for Take<I> where I: ExactSizeIterator {}\n \n \n /// An iterator to maintain state while iterating another iterator\n@@ -2275,10 +2259,7 @@ impl<I> RandomAccessIterator for Fuse<I> where I: RandomAccessIterator {\n }\n \n #[stable]\n-impl<I> ExactSizeIterator for Fuse<I> where I: ExactSizeIterator {\n-    #[inline]\n-    fn len(&self) -> uint { self.iter.len() }\n-}\n+impl<I> ExactSizeIterator for Fuse<I> where I: ExactSizeIterator {}\n \n impl<I> Fuse<I> {\n     /// Resets the fuse such that the next call to .next() or .next_back() will"}]}