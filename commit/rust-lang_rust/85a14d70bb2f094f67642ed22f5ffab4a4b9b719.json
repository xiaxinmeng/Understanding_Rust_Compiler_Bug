{"sha": "85a14d70bb2f094f67642ed22f5ffab4a4b9b719", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YTE0ZDcwYmIyZjA5NGY2NzY0MmVkMjJmNWZmYWI0YTRiOWI3MTk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-11T09:26:52Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-05-12T11:58:41Z"}, "message": "Use () in dependency_formats.", "tree": {"sha": "be18ac3ba41867d812c6dc68f96630ee9fdeb850", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be18ac3ba41867d812c6dc68f96630ee9fdeb850"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85a14d70bb2f094f67642ed22f5ffab4a4b9b719", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85a14d70bb2f094f67642ed22f5ffab4a4b9b719", "html_url": "https://github.com/rust-lang/rust/commit/85a14d70bb2f094f67642ed22f5ffab4a4b9b719", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85a14d70bb2f094f67642ed22f5ffab4a4b9b719/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac923d94f86a6f7c881ecbedcd0a68d7986a35bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac923d94f86a6f7c881ecbedcd0a68d7986a35bd", "html_url": "https://github.com/rust-lang/rust/commit/ac923d94f86a6f7c881ecbedcd0a68d7986a35bd"}], "stats": {"total": 31, "additions": 18, "deletions": 13}, "files": [{"sha": "357a9f2daf746e67e4f9bdea0e38a37637251e27", "filename": "compiler/rustc_codegen_cranelift/src/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a14d70bb2f094f67642ed22f5ffab4a4b9b719/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a14d70bb2f094f67642ed22f5ffab4a4b9b719/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fallocator.rs?ref=85a14d70bb2f094f67642ed22f5ffab4a4b9b719", "patch": "@@ -13,7 +13,7 @@ pub(crate) fn codegen(\n     module: &mut impl Module,\n     unwind_context: &mut UnwindContext,\n ) -> bool {\n-    let any_dynamic_crate = tcx.dependency_formats(LOCAL_CRATE).iter().any(|(_, list)| {\n+    let any_dynamic_crate = tcx.dependency_formats(()).iter().any(|(_, list)| {\n         use rustc_middle::middle::dependency_format::Linkage;\n         list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n     });"}, {"sha": "bf601c70c094f1f76c3ea7e13f97d2e93c622388", "filename": "compiler/rustc_codegen_cranelift/src/driver/jit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a14d70bb2f094f67642ed22f5ffab4a4b9b719/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a14d70bb2f094f67642ed22f5ffab4a4b9b719/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs?ref=85a14d70bb2f094f67642ed22f5ffab4a4b9b719", "patch": "@@ -179,7 +179,7 @@ fn load_imported_symbols_for_jit(tcx: TyCtxt<'_>) -> Vec<(String, *const u8)> {\n     let mut dylib_paths = Vec::new();\n \n     let crate_info = CrateInfo::new(tcx);\n-    let formats = tcx.dependency_formats(LOCAL_CRATE);\n+    let formats = tcx.dependency_formats(());\n     let data = &formats\n         .iter()\n         .find(|(crate_type, _data)| *crate_type == rustc_session::config::CrateType::Executable)"}, {"sha": "ea4564c2a6bea68a14bff5ca144785d511c1ef16", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a14d70bb2f094f67642ed22f5ffab4a4b9b719/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a14d70bb2f094f67642ed22f5ffab4a4b9b719/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=85a14d70bb2f094f67642ed22f5ffab4a4b9b719", "patch": "@@ -1303,7 +1303,7 @@ fn exported_symbols(tcx: TyCtxt<'_>, crate_type: CrateType) -> Vec<String> {\n         }\n     }\n \n-    let formats = tcx.dependency_formats(LOCAL_CRATE);\n+    let formats = tcx.dependency_formats(());\n     let deps = formats.iter().find_map(|(t, list)| (*t == crate_type).then_some(list)).unwrap();\n \n     for (index, dep_format) in deps.iter().enumerate() {"}, {"sha": "e30d194108a8410eaf2dabc722f4016bd1d827de", "filename": "compiler/rustc_codegen_ssa/src/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a14d70bb2f094f67642ed22f5ffab4a4b9b719/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a14d70bb2f094f67642ed22f5ffab4a4b9b719/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fbase.rs?ref=85a14d70bb2f094f67642ed22f5ffab4a4b9b719", "patch": "@@ -511,7 +511,7 @@ pub fn codegen_crate<B: ExtraBackendMethods>(\n     // linkage, then it's already got an allocator shim and we'll be using that\n     // one instead. If nothing exists then it's our job to generate the\n     // allocator!\n-    let any_dynamic_crate = tcx.dependency_formats(LOCAL_CRATE).iter().any(|(_, list)| {\n+    let any_dynamic_crate = tcx.dependency_formats(()).iter().any(|(_, list)| {\n         use rustc_middle::middle::dependency_format::Linkage;\n         list.iter().any(|&linkage| linkage == Linkage::Dynamic)\n     });\n@@ -768,7 +768,7 @@ impl CrateInfo {\n             used_crate_source: Default::default(),\n             lang_item_to_crate: Default::default(),\n             missing_lang_items: Default::default(),\n-            dependency_formats: tcx.dependency_formats(LOCAL_CRATE),\n+            dependency_formats: tcx.dependency_formats(()),\n         };\n         let lang_items = tcx.lang_items();\n "}, {"sha": "e5008b5c07d98233e8de39ec681cd0707f8722d6", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/85a14d70bb2f094f67642ed22f5ffab4a4b9b719/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a14d70bb2f094f67642ed22f5ffab4a4b9b719/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=85a14d70bb2f094f67642ed22f5ffab4a4b9b719", "patch": "@@ -370,10 +370,7 @@ pub fn provide(providers: &mut Providers) {\n             visible_parent_map\n         },\n \n-        dependency_formats: |tcx, cnum| {\n-            assert_eq!(cnum, LOCAL_CRATE);\n-            Lrc::new(crate::dependency_format::calculate(tcx))\n-        },\n+        dependency_formats: |tcx, ()| Lrc::new(crate::dependency_format::calculate(tcx)),\n         has_global_allocator: |tcx, cnum| {\n             assert_eq!(cnum, LOCAL_CRATE);\n             CStore::from_tcx(tcx).has_global_allocator()"}, {"sha": "4662c7e55356ebcf02ee3c521c4ecdd0b2e78d39", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85a14d70bb2f094f67642ed22f5ffab4a4b9b719/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a14d70bb2f094f67642ed22f5ffab4a4b9b719/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=85a14d70bb2f094f67642ed22f5ffab4a4b9b719", "patch": "@@ -1773,7 +1773,7 @@ impl EncodeContext<'a, 'tcx> {\n \n     fn encode_dylib_dependency_formats(&mut self) -> Lazy<[Option<LinkagePreference>]> {\n         empty_proc_macro!(self);\n-        let formats = self.tcx.dependency_formats(LOCAL_CRATE);\n+        let formats = self.tcx.dependency_formats(());\n         for (ty, arr) in formats.iter() {\n             if *ty != CrateType::Dylib {\n                 continue;"}, {"sha": "3fbb543536cb701b223ef6556fa11ab446273394", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85a14d70bb2f094f67642ed22f5ffab4a4b9b719/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a14d70bb2f094f67642ed22f5ffab4a4b9b719/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=85a14d70bb2f094f67642ed22f5ffab4a4b9b719", "patch": "@@ -1053,9 +1053,7 @@ rustc_queries! {\n         desc { \"dylib dependency formats of crate\" }\n     }\n \n-    query dependency_formats(_: CrateNum)\n-        -> Lrc<crate::middle::dependency_format::Dependencies>\n-    {\n+    query dependency_formats(_: ()) -> Lrc<crate::middle::dependency_format::Dependencies> {\n         desc { \"get the linkage format of all dependencies\" }\n     }\n "}, {"sha": "27a0dc47682a5532c1b9aff54beae26a1a0c8ca5", "filename": "compiler/rustc_query_impl/src/keys.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/85a14d70bb2f094f67642ed22f5ffab4a4b9b719/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85a14d70bb2f094f67642ed22f5ffab4a4b9b719/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fkeys.rs?ref=85a14d70bb2f094f67642ed22f5ffab4a4b9b719", "patch": "@@ -21,6 +21,16 @@ pub trait Key {\n     fn default_span(&self, tcx: TyCtxt<'_>) -> Span;\n }\n \n+impl Key for () {\n+    fn query_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+\n+    fn default_span(&self, _: TyCtxt<'_>) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n impl<'tcx> Key for ty::InstanceDef<'tcx> {\n     fn query_crate(&self) -> CrateNum {\n         LOCAL_CRATE"}]}