{"sha": "1854a736f8a90dbd11b5d6e23e06a369aaaa4392", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4NTRhNzM2ZjhhOTBkYmQxMWI1ZDZlMjNlMDZhMzY5YWFhYTQzOTI=", "commit": {"author": {"name": "Damian Gryski", "email": "damian@gryski.com", "date": "2012-07-28T21:37:11Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-07-30T17:46:01Z"}, "message": "rustc: use new siphash impl instead of sha1\n\n    Updating types std::sha1::sha1 -> hash::streaming was a relatively\n    small change.  Renaming the variables to reflect that things aren't\n    sha1s any more touched far more lines.", "tree": {"sha": "0c4ddb8fa2955cd92c52133e368ce0701fd86591", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c4ddb8fa2955cd92c52133e368ce0701fd86591"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1854a736f8a90dbd11b5d6e23e06a369aaaa4392", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1854a736f8a90dbd11b5d6e23e06a369aaaa4392", "html_url": "https://github.com/rust-lang/rust/commit/1854a736f8a90dbd11b5d6e23e06a369aaaa4392", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1854a736f8a90dbd11b5d6e23e06a369aaaa4392/comments", "author": {"login": "dgryski", "id": 970862, "node_id": "MDQ6VXNlcjk3MDg2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/970862?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dgryski", "html_url": "https://github.com/dgryski", "followers_url": "https://api.github.com/users/dgryski/followers", "following_url": "https://api.github.com/users/dgryski/following{/other_user}", "gists_url": "https://api.github.com/users/dgryski/gists{/gist_id}", "starred_url": "https://api.github.com/users/dgryski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dgryski/subscriptions", "organizations_url": "https://api.github.com/users/dgryski/orgs", "repos_url": "https://api.github.com/users/dgryski/repos", "events_url": "https://api.github.com/users/dgryski/events{/privacy}", "received_events_url": "https://api.github.com/users/dgryski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04f2073beab68e4b0fc604e5b2bb2a344865d0a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/04f2073beab68e4b0fc604e5b2bb2a344865d0a2", "html_url": "https://github.com/rust-lang/rust/commit/04f2073beab68e4b0fc604e5b2bb2a344865d0a2"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "1e078b2f9c19648af9be8ab47d8b905d78fc9eb9", "filename": "src/rustc/back/link.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1854a736f8a90dbd11b5d6e23e06a369aaaa4392/src%2Frustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1854a736f8a90dbd11b5d6e23e06a369aaaa4392/src%2Frustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Flink.rs?ref=1854a736f8a90dbd11b5d6e23e06a369aaaa4392", "patch": "@@ -307,7 +307,7 @@ mod write {\n  */\n \n fn build_link_meta(sess: session, c: ast::crate, output: ~str,\n-                   sha: sha1) -> link_meta {\n+                   symbol_hasher: hash::streaming) -> link_meta {\n \n     type provided_metas =\n         {name: option<@~str>,\n@@ -338,7 +338,7 @@ fn build_link_meta(sess: session, c: ast::crate, output: ~str,\n     }\n \n     // This calculates CMH as defined above\n-    fn crate_meta_extras_hash(sha: sha1, _crate: ast::crate,\n+    fn crate_meta_extras_hash(symbol_hasher: hash::streaming, _crate: ast::crate,\n                               metas: provided_metas,\n                               dep_hashes: ~[@~str]) -> ~str {\n         fn len_and_str(s: ~str) -> ~str {\n@@ -351,15 +351,15 @@ fn build_link_meta(sess: session, c: ast::crate, output: ~str,\n \n         let cmh_items = attr::sort_meta_items(metas.cmh_items);\n \n-        sha.reset();\n+        symbol_hasher.reset();\n         for cmh_items.each |m_| {\n             let m = m_;\n             alt m.node {\n               ast::meta_name_value(key, value) {\n-                sha.input_str(len_and_str(*key));\n-                sha.input_str(len_and_str_lit(value));\n+                symbol_hasher.input_str(len_and_str(*key));\n+                symbol_hasher.input_str(len_and_str_lit(value));\n               }\n-              ast::meta_word(name) { sha.input_str(len_and_str(*name)); }\n+              ast::meta_word(name) { symbol_hasher.input_str(len_and_str(*name)); }\n               ast::meta_list(_, _) {\n                 // FIXME (#607): Implement this\n                 fail ~\"unimplemented meta_item variant\";\n@@ -368,10 +368,10 @@ fn build_link_meta(sess: session, c: ast::crate, output: ~str,\n         }\n \n         for dep_hashes.each |dh| {\n-            sha.input_str(len_and_str(*dh));\n+            symbol_hasher.input_str(len_and_str(*dh));\n         }\n \n-        ret truncated_sha1_result(sha);\n+        ret truncated_hash_result(symbol_hasher);\n     }\n \n     fn warn_missing(sess: session, name: ~str, default: ~str) {\n@@ -419,40 +419,40 @@ fn build_link_meta(sess: session, c: ast::crate, output: ~str,\n     let vers = crate_meta_vers(sess, c, provided_metas);\n     let dep_hashes = cstore::get_dep_hashes(sess.cstore);\n     let extras_hash =\n-        crate_meta_extras_hash(sha, c, provided_metas, dep_hashes);\n+        crate_meta_extras_hash(symbol_hasher, c, provided_metas, dep_hashes);\n \n     ret {name: name, vers: vers, extras_hash: extras_hash};\n }\n \n-fn truncated_sha1_result(sha: sha1) -> ~str unsafe {\n-    ret str::slice(sha.result_str(), 0u, 16u);\n+fn truncated_hash_result(symbol_hasher: hash::streaming) -> ~str unsafe {\n+    symbol_hasher.result_str()\n }\n \n \n // This calculates STH for a symbol, as defined above\n-fn symbol_hash(tcx: ty::ctxt, sha: sha1, t: ty::t,\n+fn symbol_hash(tcx: ty::ctxt, symbol_hasher: hash::streaming, t: ty::t,\n                link_meta: link_meta) -> ~str {\n     // NB: do *not* use abbrevs here as we want the symbol names\n     // to be independent of one another in the crate.\n \n-    sha.reset();\n-    sha.input_str(*link_meta.name);\n-    sha.input_str(~\"-\");\n-    sha.input_str(link_meta.extras_hash);\n-    sha.input_str(~\"-\");\n-    sha.input_str(encoder::encoded_ty(tcx, t));\n-    let hash = truncated_sha1_result(sha);\n+    symbol_hasher.reset();\n+    symbol_hasher.input_str(*link_meta.name);\n+    symbol_hasher.input_str(~\"-\");\n+    symbol_hasher.input_str(link_meta.extras_hash);\n+    symbol_hasher.input_str(~\"-\");\n+    symbol_hasher.input_str(encoder::encoded_ty(tcx, t));\n+    let hash = truncated_hash_result(symbol_hasher);\n     // Prefix with _ so that it never blends into adjacent digits\n \n     ret ~\"_\" + hash;\n }\n \n fn get_symbol_hash(ccx: @crate_ctxt, t: ty::t) -> ~str {\n-    alt ccx.type_sha1s.find(t) {\n+    alt ccx.type_hashcodes.find(t) {\n       some(h) { ret h; }\n       none {\n-        let hash = symbol_hash(ccx.tcx, ccx.sha, t, ccx.link_meta);\n-        ccx.type_sha1s.insert(t, hash);\n+        let hash = symbol_hash(ccx.tcx, ccx.symbol_hasher, t, ccx.link_meta);\n+        ccx.type_hashcodes.insert(t, hash);\n         ret hash;\n       }\n     }"}, {"sha": "c33a1330f9ee793084cafd091a1ff84a8e52daf6", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1854a736f8a90dbd11b5d6e23e06a369aaaa4392/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1854a736f8a90dbd11b5d6e23e06a369aaaa4392/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=1854a736f8a90dbd11b5d6e23e06a369aaaa4392", "patch": "@@ -5650,8 +5650,8 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n                output: ~str, emap: resolve3::ExportMap,\n                maps: astencode::maps)\n     -> (ModuleRef, link_meta) {\n-    let sha = std::sha1::sha1();\n-    let link_meta = link::build_link_meta(sess, *crate, output, sha);\n+    let symbol_hasher = hash::siphash(0,0);\n+    let link_meta = link::build_link_meta(sess, *crate, output, symbol_hasher);\n     let reachable = reachable::find_reachable(crate.node.module, emap, tcx,\n                                               maps.method_map);\n \n@@ -5724,8 +5724,8 @@ fn trans_crate(sess: session::session, crate: @ast::crate, tcx: ty::ctxt,\n           module_data: str_hash::<ValueRef>(),\n           lltypes: ty::new_ty_hash(),\n           names: new_namegen(),\n-          sha: sha,\n-          type_sha1s: ty::new_ty_hash(),\n+          symbol_hasher: symbol_hasher,\n+          type_hashcodes: ty::new_ty_hash(),\n           type_short_names: ty::new_ty_hash(),\n           all_llvm_symbols: str_hash::<()>(),\n           tcx: tcx,"}, {"sha": "b66fb82c9f8956beeed4cbb07758b1ab1d8b35c0", "filename": "src/rustc/middle/trans/common.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1854a736f8a90dbd11b5d6e23e06a369aaaa4392/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1854a736f8a90dbd11b5d6e23e06a369aaaa4392/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=1854a736f8a90dbd11b5d6e23e06a369aaaa4392", "patch": "@@ -110,8 +110,8 @@ type crate_ctxt = {\n      module_data: hashmap<~str, ValueRef>,\n      lltypes: hashmap<ty::t, TypeRef>,\n      names: namegen,\n-     sha: std::sha1::sha1,\n-     type_sha1s: hashmap<ty::t, ~str>,\n+     symbol_hasher: hash::streaming,\n+     type_hashcodes: hashmap<ty::t, ~str>,\n      type_short_names: hashmap<ty::t, ~str>,\n      all_llvm_symbols: set<~str>,\n      tcx: ty::ctxt,"}]}