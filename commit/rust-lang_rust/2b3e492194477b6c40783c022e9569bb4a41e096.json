{"sha": "2b3e492194477b6c40783c022e9569bb4a41e096", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiM2U0OTIxOTQ0NzdiNmM0MDc4M2MwMjJlOTU2OWJiNGE0MWUwOTY=", "commit": {"author": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2018-08-10T16:22:46Z"}, "committer": {"name": "Douglas Campos", "email": "qmx@qmx.me", "date": "2018-08-16T19:22:17Z"}, "message": "avoid looking twice into external prelude crates", "tree": {"sha": "a80f87b432a91dc7015d00edaeaaad142f374342", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a80f87b432a91dc7015d00edaeaaad142f374342"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2b3e492194477b6c40783c022e9569bb4a41e096", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2b3e492194477b6c40783c022e9569bb4a41e096", "html_url": "https://github.com/rust-lang/rust/commit/2b3e492194477b6c40783c022e9569bb4a41e096", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2b3e492194477b6c40783c022e9569bb4a41e096/comments", "author": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "committer": {"login": "qmx", "id": 66734, "node_id": "MDQ6VXNlcjY2NzM0", "avatar_url": "https://avatars.githubusercontent.com/u/66734?v=4", "gravatar_id": "", "url": "https://api.github.com/users/qmx", "html_url": "https://github.com/qmx", "followers_url": "https://api.github.com/users/qmx/followers", "following_url": "https://api.github.com/users/qmx/following{/other_user}", "gists_url": "https://api.github.com/users/qmx/gists{/gist_id}", "starred_url": "https://api.github.com/users/qmx/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/qmx/subscriptions", "organizations_url": "https://api.github.com/users/qmx/orgs", "repos_url": "https://api.github.com/users/qmx/repos", "events_url": "https://api.github.com/users/qmx/events{/privacy}", "received_events_url": "https://api.github.com/users/qmx/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b9b750f0abde2a0081147cc599dcd23dfce44eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b9b750f0abde2a0081147cc599dcd23dfce44eb", "html_url": "https://github.com/rust-lang/rust/commit/6b9b750f0abde2a0081147cc599dcd23dfce44eb"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "e4a47460be26b34b97cd423482d527fe236fe55c", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2b3e492194477b6c40783c022e9569bb4a41e096/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2b3e492194477b6c40783c022e9569bb4a41e096/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=2b3e492194477b6c40783c022e9569bb4a41e096", "patch": "@@ -4302,7 +4302,14 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                     let mut path_segments = path_segments.clone();\n                     path_segments.push(ast::PathSegment::from_ident(ident));\n \n-                    if !in_module_is_extern || name_binding.vis == ty::Visibility::Public {\n+                    let is_extern_crate_that_also_appears_in_prelude =\n+                        name_binding.is_extern_crate() &&\n+                        self.extern_prelude.contains(&ident.name);\n+\n+                    let is_visible_to_user =\n+                        !in_module_is_extern || name_binding.vis == ty::Visibility::Public;\n+\n+                    if !is_extern_crate_that_also_appears_in_prelude || is_visible_to_user {\n                         // add the module to the lookup\n                         let is_extern = in_module_is_extern || name_binding.is_extern_crate();\n                         if seen_modules.insert(module.def_id().unwrap()) {"}]}