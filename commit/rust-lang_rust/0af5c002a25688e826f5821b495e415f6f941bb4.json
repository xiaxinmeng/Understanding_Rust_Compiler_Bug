{"sha": "0af5c002a25688e826f5821b495e415f6f941bb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZjVjMDAyYTI1Njg4ZTgyNmY1ODIxYjQ5NWU0MTVmNmY5NDFiYjQ=", "commit": {"author": {"name": "William Brown", "email": "firstyear@redhat.com", "date": "2017-06-17T03:42:56Z"}, "committer": {"name": "William Brown", "email": "firstyear@redhat.com", "date": "2017-07-14T22:22:46Z"}, "message": "Add support for dylibs with Address Sanitizer. This supports cdylibs and staticlibs on gnu-linux targets.", "tree": {"sha": "cb97acec92074bb1556281760369037515c56687", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cb97acec92074bb1556281760369037515c56687"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0af5c002a25688e826f5821b495e415f6f941bb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0af5c002a25688e826f5821b495e415f6f941bb4", "html_url": "https://github.com/rust-lang/rust/commit/0af5c002a25688e826f5821b495e415f6f941bb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0af5c002a25688e826f5821b495e415f6f941bb4/comments", "author": {"login": "Firstyear", "id": 271005, "node_id": "MDQ6VXNlcjI3MTAwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/271005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Firstyear", "html_url": "https://github.com/Firstyear", "followers_url": "https://api.github.com/users/Firstyear/followers", "following_url": "https://api.github.com/users/Firstyear/following{/other_user}", "gists_url": "https://api.github.com/users/Firstyear/gists{/gist_id}", "starred_url": "https://api.github.com/users/Firstyear/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Firstyear/subscriptions", "organizations_url": "https://api.github.com/users/Firstyear/orgs", "repos_url": "https://api.github.com/users/Firstyear/repos", "events_url": "https://api.github.com/users/Firstyear/events{/privacy}", "received_events_url": "https://api.github.com/users/Firstyear/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Firstyear", "id": 271005, "node_id": "MDQ6VXNlcjI3MTAwNQ==", "avatar_url": "https://avatars.githubusercontent.com/u/271005?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Firstyear", "html_url": "https://github.com/Firstyear", "followers_url": "https://api.github.com/users/Firstyear/followers", "following_url": "https://api.github.com/users/Firstyear/following{/other_user}", "gists_url": "https://api.github.com/users/Firstyear/gists{/gist_id}", "starred_url": "https://api.github.com/users/Firstyear/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Firstyear/subscriptions", "organizations_url": "https://api.github.com/users/Firstyear/orgs", "repos_url": "https://api.github.com/users/Firstyear/repos", "events_url": "https://api.github.com/users/Firstyear/events{/privacy}", "received_events_url": "https://api.github.com/users/Firstyear/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd71ea733849e1a130f965f8f5f3515fdcd4b961", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd71ea733849e1a130f965f8f5f3515fdcd4b961", "html_url": "https://github.com/rust-lang/rust/commit/cd71ea733849e1a130f965f8f5f3515fdcd4b961"}], "stats": {"total": 228, "additions": 205, "deletions": 23}, "files": [{"sha": "d15843b4f318bbb5cf38fc9a67c6c211c793c990", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 43, "deletions": 14, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=0af5c002a25688e826f5821b495e415f6f941bb4", "patch": "@@ -856,21 +856,48 @@ impl<'a> CrateLoader<'a> {\n                 return\n             }\n \n-            if !self.sess.crate_types.borrow().iter().all(|ct| {\n-                match *ct {\n-                    // Link the runtime\n-                    config::CrateTypeExecutable => true,\n-                    // This crate will be compiled with the required\n-                    // instrumentation pass\n-                    config::CrateTypeRlib => false,\n-                    _ => {\n-                        self.sess.err(&format!(\"Only executables and rlibs can be \\\n-                                                compiled with `-Z sanitizer`\"));\n-                        false\n+            // firstyear 2017 - during testing I was unable to access an OSX machine\n+            // to make this work on different crate types. As a result, today I have\n+            // only been able to test and support linux as a target.\n+            if self.sess.target.target.llvm_target == \"x86_64-unknown-linux-gnu\" {\n+                if !self.sess.crate_types.borrow().iter().all(|ct| {\n+                    match *ct {\n+                        // Link the runtime\n+                        config::CrateTypeStaticlib |\n+                        config::CrateTypeExecutable => true,\n+                        // This crate will be compiled with the required\n+                        // instrumentation pass\n+                        config::CrateTypeRlib |\n+                        config::CrateTypeDylib |\n+                        config::CrateTypeCdylib =>\n+                            false,\n+                        _ => {\n+                            self.sess.err(&format!(\"Only executables, staticlibs, \\\n+                                cdylibs, dylibs and rlibs can be compiled with \\\n+                                `-Z sanitizer`\"));\n+                            false\n+                        }\n                     }\n+                }) {\n+                    return\n+                }\n+            } else {\n+                if !self.sess.crate_types.borrow().iter().all(|ct| {\n+                    match *ct {\n+                        // Link the runtime\n+                        config::CrateTypeExecutable => true,\n+                        // This crate will be compiled with the required\n+                        // instrumentation pass\n+                        config::CrateTypeRlib => false,\n+                        _ => {\n+                            self.sess.err(&format!(\"Only executables and rlibs can be \\\n+                                                    compiled with `-Z sanitizer`\"));\n+                            false\n+                        }\n+                    }\n+                }) {\n+                    return\n                 }\n-            }) {\n-                return\n             }\n \n             let mut uses_std = false;\n@@ -890,7 +917,7 @@ impl<'a> CrateLoader<'a> {\n                 info!(\"loading sanitizer: {}\", name);\n \n                 let symbol = Symbol::intern(name);\n-                let dep_kind = DepKind::Implicit;\n+                let dep_kind = DepKind::Explicit;\n                 let (_, data) =\n                     self.resolve_crate(&None, symbol, symbol, None, DUMMY_SP,\n                                        PathKind::Crate, dep_kind);\n@@ -900,6 +927,8 @@ impl<'a> CrateLoader<'a> {\n                     self.sess.err(&format!(\"the crate `{}` is not a sanitizer runtime\",\n                                            name));\n                 }\n+            } else {\n+                self.sess.err(&format!(\"Must link std to be compiled with `-Z sanitizer`\"));\n             }\n         }\n     }"}, {"sha": "1f3c64c8c322dd3459f2cc82345ccc5116cb2caf", "filename": "src/test/run-make/sanitizer-address/overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-address%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-address%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-address%2Foverflow.rs?ref=0af5c002a25688e826f5821b495e415f6f941bb4", "patch": "@@ -10,5 +10,5 @@\n \n fn main() {\n     let xs = [0, 1, 2, 3];\n-    let y = unsafe { *xs.as_ptr().offset(4) };\n+    let _y = unsafe { *xs.as_ptr().offset(4) };\n }"}, {"sha": "9b0470fb277a9bd4bffca138c9119ca7918d18f8", "filename": "src/test/run-make/sanitizer-cdylib-link/Makefile", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-cdylib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-cdylib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-cdylib-link%2FMakefile?ref=0af5c002a25688e826f5821b495e415f6f941bb4", "patch": "@@ -0,0 +1,19 @@\n+-include ../tools.mk\n+\n+# This test builds a shared object, then an executable that links it as a native\n+# rust library (constrast to an rlib). The shared library and executable both\n+# are compiled with address sanitizer, and we assert that a fault in the cdylib\n+# is correctly detected.\n+\n+ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n+ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n+EXTRA_RUSTFLAG=\n+endif\n+\n+all:\n+ifeq ($(ASAN_SUPPORT),1)\n+\t$(RUSTC) -g -Z sanitizer=address --crate-type cdylib --target $(TARGET) library.rs\n+\t$(RUSTC) -g -Z sanitizer=address --crate-type bin --target $(TARGET) -llibrary program.rs\n+\tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | grep -q stack-buffer-overflow\n+endif\n+"}, {"sha": "4ceef5d3f5272fbb6c8c1940e3806affba9306c0", "filename": "src/test/run-make/sanitizer-cdylib-link/library.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-cdylib-link%2Flibrary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-cdylib-link%2Flibrary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-cdylib-link%2Flibrary.rs?ref=0af5c002a25688e826f5821b495e415f6f941bb4", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[no_mangle]\n+pub extern fn overflow() {\n+    let xs = [0, 1, 2, 3];\n+    let _y = unsafe { *xs.as_ptr().offset(4) };\n+}"}, {"sha": "9f52817c8510006c48265412096f214c70984925", "filename": "src/test/run-make/sanitizer-cdylib-link/program.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-cdylib-link%2Fprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-cdylib-link%2Fprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-cdylib-link%2Fprogram.rs?ref=0af5c002a25688e826f5821b495e415f6f941bb4", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern {\n+    fn overflow();\n+}\n+\n+fn main() {\n+    unsafe { overflow() }\n+}"}, {"sha": "d75241f09710a74cf6bdac1fdd5a537faca0cec8", "filename": "src/test/run-make/sanitizer-dylib-link/Makefile", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-dylib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-dylib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-dylib-link%2FMakefile?ref=0af5c002a25688e826f5821b495e415f6f941bb4", "patch": "@@ -0,0 +1,19 @@\n+-include ../tools.mk\n+\n+# This test builds a shared object, then an executable that links it as a native\n+# rust library (constrast to an rlib). The shared library and executable both\n+# are compiled with address sanitizer, and we assert that a fault in the dylib\n+# is correctly detected.\n+\n+ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n+ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n+EXTRA_RUSTFLAG=\n+endif\n+\n+all:\n+ifeq ($(ASAN_SUPPORT),1)\n+\t$(RUSTC) -g -Z sanitizer=address --crate-type dylib --target $(TARGET) library.rs\n+\t$(RUSTC) -g -Z sanitizer=address --crate-type bin --target $(TARGET) -llibrary program.rs\n+\tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | grep -q stack-buffer-overflow\n+endif\n+"}, {"sha": "4ceef5d3f5272fbb6c8c1940e3806affba9306c0", "filename": "src/test/run-make/sanitizer-dylib-link/library.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-dylib-link%2Flibrary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-dylib-link%2Flibrary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-dylib-link%2Flibrary.rs?ref=0af5c002a25688e826f5821b495e415f6f941bb4", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[no_mangle]\n+pub extern fn overflow() {\n+    let xs = [0, 1, 2, 3];\n+    let _y = unsafe { *xs.as_ptr().offset(4) };\n+}"}, {"sha": "9f52817c8510006c48265412096f214c70984925", "filename": "src/test/run-make/sanitizer-dylib-link/program.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-dylib-link%2Fprogram.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-dylib-link%2Fprogram.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-dylib-link%2Fprogram.rs?ref=0af5c002a25688e826f5821b495e415f6f941bb4", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+extern {\n+    fn overflow();\n+}\n+\n+fn main() {\n+    unsafe { overflow() }\n+}"}, {"sha": "835d5b0d9d8cd32ba85d449828a5de334f0f9cf1", "filename": "src/test/run-make/sanitizer-dylib/Makefile", "status": "removed", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cd71ea733849e1a130f965f8f5f3515fdcd4b961/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/cd71ea733849e1a130f965f8f5f3515fdcd4b961/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-dylib%2FMakefile?ref=cd71ea733849e1a130f965f8f5f3515fdcd4b961", "patch": "@@ -1,8 +0,0 @@\n--include ../tools.mk\n-\n-ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n-all:\n-\t$(RUSTC) -Z sanitizer=leak --crate-type dylib --target $(TARGET) hello.rs 2>&1 | grep -q 'Only executables and rlibs can be compiled with `-Z sanitizer`'\n-else\n-all:\n-endif"}, {"sha": "d03bbf84c1d11bf87c343d1e2f6456c6db5b4b08", "filename": "src/test/run-make/sanitizer-invalid-cratetype/Makefile", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-invalid-cratetype%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-invalid-cratetype%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-invalid-cratetype%2FMakefile?ref=0af5c002a25688e826f5821b495e415f6f941bb4", "patch": "@@ -0,0 +1,18 @@\n+-include ../tools.mk\n+\n+# NOTE the address sanitizer only supports x86_64 linux and macOS\n+\n+ifeq ($(TARGET),x86_64-apple-darwin)\n+ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n+EXTRA_RUSTFLAG=-C rpath\n+else\n+ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n+ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n+EXTRA_RUSTFLAG=\n+endif\n+endif\n+\n+all:\n+ifeq ($(ASAN_SUPPORT),1)\n+\t$(RUSTC) -Z sanitizer=address --crate-type proc-macro --target $(TARGET) hello.rs 2>&1 | grep -q -- '-Z sanitizer'\n+endif"}, {"sha": "41782851a1a6d763c5487a0ae35edc01fb71d6fb", "filename": "src/test/run-make/sanitizer-invalid-cratetype/hello.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-invalid-cratetype%2Fhello.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-invalid-cratetype%2Fhello.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-invalid-cratetype%2Fhello.rs?ref=0af5c002a25688e826f5821b495e415f6f941bb4", "previous_filename": "src/test/run-make/sanitizer-dylib/hello.rs"}, {"sha": "f92dc52b4457560af024ac3e271909f77c5e6a89", "filename": "src/test/run-make/sanitizer-staticlib-link/Makefile", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-staticlib-link%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-staticlib-link%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-staticlib-link%2FMakefile?ref=0af5c002a25688e826f5821b495e415f6f941bb4", "patch": "@@ -0,0 +1,18 @@\n+-include ../tools.mk\n+\n+# This test builds a staticlib, then an executable that links to it.\n+# The staticlib and executable both  are compiled with address sanitizer, \n+# and we assert that a fault in the staticlib is correctly detected.\n+\n+ifeq ($(TARGET),x86_64-unknown-linux-gnu)\n+ASAN_SUPPORT=$(SANITIZER_SUPPORT)\n+EXTRA_RUSTFLAG=\n+endif\n+\n+all:\n+ifeq ($(ASAN_SUPPORT),1)\n+\t$(RUSTC) -g -Z sanitizer=address --crate-type staticlib --target $(TARGET) library.rs\n+\t$(CC) program.c $(call STATICLIB,library) $(call OUT_EXE,program) $(EXTRACFLAGS) $(EXTRACXXFLAGS)\n+\tLD_LIBRARY_PATH=$(TMPDIR) $(TMPDIR)/program 2>&1 | grep -q stack-buffer-overflow\n+endif\n+"}, {"sha": "4ceef5d3f5272fbb6c8c1940e3806affba9306c0", "filename": "src/test/run-make/sanitizer-staticlib-link/library.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-staticlib-link%2Flibrary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-staticlib-link%2Flibrary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-staticlib-link%2Flibrary.rs?ref=0af5c002a25688e826f5821b495e415f6f941bb4", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[no_mangle]\n+pub extern fn overflow() {\n+    let xs = [0, 1, 2, 3];\n+    let _y = unsafe { *xs.as_ptr().offset(4) };\n+}"}, {"sha": "abd5d508e729536966516d3a4e4d1e55c579b2ba", "filename": "src/test/run-make/sanitizer-staticlib-link/program.c", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-staticlib-link%2Fprogram.c", "raw_url": "https://github.com/rust-lang/rust/raw/0af5c002a25688e826f5821b495e415f6f941bb4/src%2Ftest%2Frun-make%2Fsanitizer-staticlib-link%2Fprogram.c", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsanitizer-staticlib-link%2Fprogram.c?ref=0af5c002a25688e826f5821b495e415f6f941bb4", "patch": "@@ -0,0 +1,8 @@\n+// ignore-license\n+void overflow();\n+\n+int main() {\n+    overflow();\n+    return 0;\n+}\n+"}]}