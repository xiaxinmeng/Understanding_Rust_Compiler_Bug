{"sha": "cf7ee00afd8d3a206fa2c83baaadcf8dd6c5c9bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmN2VlMDBhZmQ4ZDNhMjA2ZmEyYzgzYmFhYWRjZjhkZDZjNWM5YmM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-19T15:16:30Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-01-26T10:59:57Z"}, "message": "Improve it a bit", "tree": {"sha": "cc67e008aa31fc8f195494c6e8bfce9a836be302", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc67e008aa31fc8f195494c6e8bfce9a836be302"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf7ee00afd8d3a206fa2c83baaadcf8dd6c5c9bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf7ee00afd8d3a206fa2c83baaadcf8dd6c5c9bc", "html_url": "https://github.com/rust-lang/rust/commit/cf7ee00afd8d3a206fa2c83baaadcf8dd6c5c9bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf7ee00afd8d3a206fa2c83baaadcf8dd6c5c9bc/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a12eef4d863aa7ba43f145c41f1a16cf7032ce6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/a12eef4d863aa7ba43f145c41f1a16cf7032ce6d", "html_url": "https://github.com/rust-lang/rust/commit/a12eef4d863aa7ba43f145c41f1a16cf7032ce6d"}], "stats": {"total": 77, "additions": 46, "deletions": 31}, "files": [{"sha": "44e52bdd009426e3999178e57635775c49ae71a4", "filename": "src/debuginfo.rs", "status": "modified", "additions": 46, "deletions": 31, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/cf7ee00afd8d3a206fa2c83baaadcf8dd6c5c9bc/src%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf7ee00afd8d3a206fa2c83baaadcf8dd6c5c9bc/src%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdebuginfo.rs?ref=cf7ee00afd8d3a206fa2c83baaadcf8dd6c5c9bc", "patch": "@@ -4,13 +4,13 @@ use crate::prelude::*;\n \n use std::marker::PhantomData;\n \n-use gimli::{Endianity, Format, RunTimeEndian};\n use gimli::write::{\n     Address, AttributeValue, CompilationUnit, DebugAbbrev, DebugInfo, DebugLine, DebugRanges,\n     DebugRngLists, DebugStr, EndianVec, LineProgram, LineProgramId, LineProgramTable, Range,\n-    RangeList, RangeListTable, Result, SectionId, StringTable, UnitEntryId, UnitId, UnitTable, Writer,\n+    RangeList, RangeListTable, Result, SectionId, StringTable, UnitEntryId, UnitId, UnitTable,\n+    Writer,\n };\n-\n+use gimli::{Endianity, Format, RunTimeEndian};\n \n use faerie::*;\n \n@@ -71,7 +71,7 @@ impl<'a, 'tcx: 'a> DebugContext<'tcx> {\n         let range_lists = RangeListTable::default();\n \n         let global_line_program = line_programs.add(LineProgram::new(\n-            version,\n+            3, // FIXME https://github.com/gimli-rs/gimli/issues/363\n             address_size,\n             format,\n             1,\n@@ -383,7 +383,7 @@ impl<'a, 'b, 'tcx: 'b> FunctionDebugContext<'a, 'tcx> {\n         &mut self,\n         tcx: TyCtxt,\n         //module: &mut Module<impl Backend>,\n-        size: u32,\n+        code_size: u32,\n         context: &Context,\n         isa: &cranelift::codegen::isa::TargetIsa,\n         source_info_set: &indexmap::IndexSet<SourceInfo>,\n@@ -392,7 +392,7 @@ impl<'a, 'b, 'tcx: 'b> FunctionDebugContext<'a, 'tcx> {\n         // FIXME: add to appropriate scope intead of root\n         let entry = unit.get_mut(self.entry_id);\n         let mut size_array = [0; 8];\n-        target_endian(tcx).write_u64(&mut size_array, size as u64);\n+        target_endian(tcx).write_u64(&mut size_array, code_size as u64);\n         entry.set(gimli::DW_AT_high_pc, AttributeValue::Data8(size_array));\n \n         self.debug_context.unit_range_list.0.push(Range {\n@@ -402,7 +402,7 @@ impl<'a, 'b, 'tcx: 'b> FunctionDebugContext<'a, 'tcx> {\n             },\n             end: Address::Relative {\n                 symbol: self.symbol,\n-                addend: size as i64,\n+                addend: code_size as i64,\n             },\n         });\n \n@@ -420,39 +420,54 @@ impl<'a, 'b, 'tcx: 'b> FunctionDebugContext<'a, 'tcx> {\n         let func = &context.func;\n         let mut ebbs = func.layout.ebbs().collect::<Vec<_>>();\n         ebbs.sort_by_key(|ebb| func.offsets[*ebb]); // Ensure inst offsets always increase\n-        for ebb in ebbs {\n-            for (offset, inst, _size) in func.inst_offsets(ebb, &encinfo) {\n-                fn create_row_for_span(tcx: TyCtxt, line_program: &mut LineProgram, offset: u64, span: Span) {\n-                    let loc = tcx.sess.source_map().lookup_char_pos(span.lo());\n-                    let file = loc.file.name.to_string();\n-                    let file = ::std::path::Path::new(&file);\n-                    let dir_id = line_program\n-                        .add_directory(file.parent().unwrap().to_str().unwrap().as_bytes());\n-                    let file_id = line_program.add_file(\n-                        file.file_name().unwrap().to_str().unwrap().as_bytes(),\n-                        dir_id,\n-                        None,\n-                    );\n-                    line_program.row().file = file_id;\n-                    //tcx.sess\n-                    //    .warn(&format!(\"srcloc {} {}:{}:{}\", offset, file, loc.line, loc.col.to_usize()));\n-                    line_program.row().address_offset = offset;\n-                    line_program.row().line = loc.line as u64;\n-                    line_program.generate_row();\n-                }\n \n+        let create_row_for_span = |line_program: &mut LineProgram, span: Span| {\n+            let loc = tcx.sess.source_map().lookup_char_pos(span.lo());\n+            let file = loc.file.name.to_string();\n+            let file = ::std::path::Path::new(&file);\n+            let dir_id =\n+                line_program.add_directory(file.parent().unwrap().to_str().unwrap().as_bytes());\n+            let file_id = line_program.add_file(\n+                file.file_name().unwrap().to_str().unwrap().as_bytes(),\n+                dir_id,\n+                None,\n+            );\n+\n+            /*println!(\n+                \"srcloc {:>04X} {}:{}:{}\",\n+                line_program.row().address_offset,\n+                file.display(),\n+                loc.line,\n+                loc.col.to_u32()\n+            );*/\n+\n+            line_program.row().file = file_id;\n+            line_program.row().line = loc.line as u64;\n+            line_program.row().column = loc.col.to_u32() as u64 + 1;\n+            line_program.generate_row();\n+        };\n+\n+        let mut end = 0;\n+        for ebb in ebbs {\n+            for (offset, inst, size) in func.inst_offsets(ebb, &encinfo) {\n                 let srcloc = func.srclocs[inst];\n+                line_program.row().address_offset = offset as u64;\n                 if !srcloc.is_default() {\n                     let source_info = *source_info_set.get_index(srcloc.bits() as usize).unwrap();\n-                    create_row_for_span(tcx, line_program, offset as u64, source_info.span);\n+                    create_row_for_span(line_program, source_info.span);\n                 } else {\n-                    create_row_for_span(tcx, line_program, offset as u64, self.mir_span);\n+                    create_row_for_span(line_program, self.mir_span);\n                 }\n+                end = offset + size;\n             }\n         }\n \n-        let address_offset = line_program.row().address_offset;\n-        line_program.end_sequence(address_offset);\n+        if code_size != end {\n+            line_program.row().address_offset = end as u64;\n+            create_row_for_span(line_program, self.mir_span);\n+        }\n+\n+        line_program.end_sequence(code_size as u64);\n     }\n }\n "}]}