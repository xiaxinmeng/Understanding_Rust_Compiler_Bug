{"sha": "d65dc40348afc90c812b4d392f8e085eca78fc17", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2NWRjNDAzNDhhZmM5MGM4MTJiNGQzOTJmOGUwODVlY2E3OGZjMTc=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-07-31T15:43:00Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-07-31T15:43:00Z"}, "message": "Removes `*/` in block doc comments", "tree": {"sha": "c32de4b3c271eda2434ffd9721f905ab72c880da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c32de4b3c271eda2434ffd9721f905ab72c880da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d65dc40348afc90c812b4d392f8e085eca78fc17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d65dc40348afc90c812b4d392f8e085eca78fc17", "html_url": "https://github.com/rust-lang/rust/commit/d65dc40348afc90c812b4d392f8e085eca78fc17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d65dc40348afc90c812b4d392f8e085eca78fc17/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c0a9718aab7a26d7570879e6bd5fcd7cca83ded", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0a9718aab7a26d7570879e6bd5fcd7cca83ded", "html_url": "https://github.com/rust-lang/rust/commit/7c0a9718aab7a26d7570879e6bd5fcd7cca83ded"}], "stats": {"total": 64, "additions": 62, "deletions": 2}, "files": [{"sha": "8ac313e6ed4f2186762ca3de1807a63d29a1fbd8", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/d65dc40348afc90c812b4d392f8e085eca78fc17/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65dc40348afc90c812b4d392f8e085eca78fc17/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=d65dc40348afc90c812b4d392f8e085eca78fc17", "patch": "@@ -138,6 +138,55 @@ fn test_doc_comment_preserves_newlines() {\n     assert_eq!(\"this\\nis\\nmod\\nfoo\", module.doc_comment_text().unwrap());\n }\n \n+#[test]\n+fn test_doc_comment_single_line_block_strips_suffix() {\n+    let file = SourceFile::parse(\n+        r#\"\n+        /** this is mod foo*/\n+        mod foo {}\n+        \"#,\n+    )\n+    .ok()\n+    .unwrap();\n+    let module = file.syntax().descendants().find_map(Module::cast).unwrap();\n+    assert_eq!(\"this is mod foo\", module.doc_comment_text().unwrap());\n+}\n+\n+#[test]\n+fn test_doc_comment_single_line_block_strips_suffix_whitespace() {\n+    let file = SourceFile::parse(\n+        r#\"\n+        /** this is mod foo */\n+        mod foo {}\n+        \"#,\n+    )\n+    .ok()\n+    .unwrap();\n+    let module = file.syntax().descendants().find_map(Module::cast).unwrap();\n+    assert_eq!(\"this is mod foo\", module.doc_comment_text().unwrap());\n+}\n+\n+#[test]\n+fn test_doc_comment_multi_line_block_strips_suffix() {\n+    let file = SourceFile::parse(\n+        r#\"\n+        /**\n+        this\n+        is\n+        mod foo\n+        */\n+        mod foo {}\n+        \"#,\n+    )\n+    .ok()\n+    .unwrap();\n+    let module = file.syntax().descendants().find_map(Module::cast).unwrap();\n+    assert_eq!(\n+        \"        this\\n        is\\n        mod foo\\n       \",\n+        module.doc_comment_text().unwrap()\n+    );\n+}\n+\n #[test]\n fn test_where_predicates() {\n     fn assert_bound(text: &str, bound: Option<TypeBound>) {"}, {"sha": "0c193e0197f1088bac6b1bbd329517bf4a509b7f", "filename": "crates/ra_syntax/src/ast/traits.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d65dc40348afc90c812b4d392f8e085eca78fc17/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d65dc40348afc90c812b4d392f8e085eca78fc17/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Ftraits.rs?ref=d65dc40348afc90c812b4d392f8e085eca78fc17", "patch": "@@ -115,7 +115,7 @@ pub trait DocCommentsOwner: AstNode {\n     }\n \n     /// Returns the textual content of a doc comment block as a single string.\n-    /// That is, strips leading `///` (+ optional 1 character of whitespace)\n+    /// That is, strips leading `///` or trailing `*/` (+ optional 1 character of whitespace in either direction)\n     /// and joins lines.\n     fn doc_comment_text(&self) -> Option<String> {\n         let mut has_comments = false;\n@@ -136,7 +136,18 @@ pub trait DocCommentsOwner: AstNode {\n                         prefix_len\n                     };\n \n-                line[pos..].to_owned()\n+                let end = if comment.kind().shape.is_block() && line.ends_with(\"*/\") {\n+                    // FIXME: Use `nth_back` here once stable\n+                    if line.chars().rev().nth(2).map(|c| c.is_whitespace()).unwrap_or(false) {\n+                        line.len() - 3\n+                    } else {\n+                        line.len() - 2\n+                    }\n+                } else {\n+                    line.len()\n+                };\n+\n+                line[pos..end].to_owned()\n             })\n             .join(\"\\n\");\n "}]}