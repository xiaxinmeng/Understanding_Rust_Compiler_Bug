{"sha": "bd41874eeadba20870f49e837babc56e67292b10", "node_id": "C_kwDOAAsO6NoAKGJkNDE4NzRlZWFkYmEyMDg3MGY0OWU4MzdiYWJjNTZlNjcyOTJiMTA", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-12T10:46:28Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-05-12T10:46:28Z"}, "message": "Add mir-opt test.", "tree": {"sha": "76e27836f4b4ae4234aaf86307cab5b3f918f273", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/76e27836f4b4ae4234aaf86307cab5b3f918f273"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd41874eeadba20870f49e837babc56e67292b10", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd41874eeadba20870f49e837babc56e67292b10", "html_url": "https://github.com/rust-lang/rust/commit/bd41874eeadba20870f49e837babc56e67292b10", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd41874eeadba20870f49e837babc56e67292b10/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0fa27efad79eb6ba496c0ea8542e225d60469dcb", "url": "https://api.github.com/repos/rust-lang/rust/commits/0fa27efad79eb6ba496c0ea8542e225d60469dcb", "html_url": "https://github.com/rust-lang/rust/commit/0fa27efad79eb6ba496c0ea8542e225d60469dcb"}], "stats": {"total": 157, "additions": 157, "deletions": 0}, "files": [{"sha": "6a46e1e07b1a8154428b88f88a60209319b609a6", "filename": "src/test/mir-opt/inline/dyn-trait.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/bd41874eeadba20870f49e837babc56e67292b10/src%2Ftest%2Fmir-opt%2Finline%2Fdyn-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd41874eeadba20870f49e837babc56e67292b10/src%2Ftest%2Fmir-opt%2Finline%2Fdyn-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn-trait.rs?ref=bd41874eeadba20870f49e837babc56e67292b10", "patch": "@@ -0,0 +1,35 @@\n+#![crate_type = \"lib\"]\n+\n+use std::fmt::Debug;\n+\n+pub trait Cache {\n+    type V: Debug;\n+\n+    fn store_nocache(&self);\n+}\n+\n+pub trait Query {\n+    type V;\n+    type C: Cache<V = Self::V>;\n+\n+    fn cache<T>(s: &T) -> &Self::C;\n+}\n+\n+// EMIT_MIR dyn_trait.mk_cycle.Inline.diff\n+#[inline(always)]\n+pub fn mk_cycle<V: Debug>(c: &dyn Cache<V = V>) {\n+    c.store_nocache()\n+}\n+\n+// EMIT_MIR dyn_trait.try_execute_query.Inline.diff\n+#[inline(always)]\n+pub fn try_execute_query<C: Cache>(c: &C) {\n+    mk_cycle(c)\n+}\n+\n+// EMIT_MIR dyn_trait.get_query.Inline.diff\n+#[inline(always)]\n+pub fn get_query<Q: Query, T>(t: &T) {\n+    let c = Q::cache(t);\n+    try_execute_query(c)\n+}"}, {"sha": "953d7b85c5ba728ba5971ad94f0252541b84b5db", "filename": "src/test/mir-opt/inline/dyn_trait.get_query.Inline.diff", "status": "added", "additions": 62, "deletions": 0, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/bd41874eeadba20870f49e837babc56e67292b10/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bd41874eeadba20870f49e837babc56e67292b10/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.get_query.Inline.diff?ref=bd41874eeadba20870f49e837babc56e67292b10", "patch": "@@ -0,0 +1,62 @@\n+- // MIR for `get_query` before Inline\n++ // MIR for `get_query` after Inline\n+  \n+  fn get_query(_1: &T) -> () {\n+      debug t => _1;                       // in scope 0 at $DIR/dyn-trait.rs:32:31: 32:32\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:32:38: 32:38\n+      let _2: &<Q as Query>::C;            // in scope 0 at $DIR/dyn-trait.rs:33:9: 33:10\n+      let mut _3: &T;                      // in scope 0 at $DIR/dyn-trait.rs:33:22: 33:23\n+      let mut _4: &<Q as Query>::C;        // in scope 0 at $DIR/dyn-trait.rs:34:23: 34:24\n+      scope 1 {\n+          debug c => _2;                   // in scope 1 at $DIR/dyn-trait.rs:33:9: 33:10\n++         scope 2 (inlined try_execute_query::<<Q as Query>::C>) { // at $DIR/dyn-trait.rs:34:5: 34:25\n++             debug c => _4;               // in scope 2 at $DIR/dyn-trait.rs:26:36: 26:37\n++             let mut _5: &dyn Cache<V = <Q as Query>::V>; // in scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++             let mut _6: &<Q as Query>::C; // in scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++             scope 3 (inlined mk_cycle::<<Q as Query>::V>) { // at $DIR/dyn-trait.rs:27:5: 27:16\n++                 debug c => _5;           // in scope 3 at $DIR/dyn-trait.rs:20:27: 20:28\n++                 let mut _7: &dyn Cache<V = <Q as Query>::V>; // in scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n++             }\n++         }\n+      }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:33:9: 33:10\n+          StorageLive(_3);                 // scope 0 at $DIR/dyn-trait.rs:33:22: 33:23\n+          _3 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:33:22: 33:23\n+          _2 = <Q as Query>::cache::<T>(move _3) -> bb1; // scope 0 at $DIR/dyn-trait.rs:33:13: 33:24\n+                                           // mir::Constant\n+                                           // + span: $DIR/dyn-trait.rs:33:13: 33:21\n+                                           // + user_ty: UserType(0)\n+                                           // + literal: Const { ty: for<'r> fn(&'r T) -> &'r <Q as Query>::C {<Q as Query>::cache::<T>}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_3);                 // scope 0 at $DIR/dyn-trait.rs:33:23: 33:24\n+          StorageLive(_4);                 // scope 1 at $DIR/dyn-trait.rs:34:23: 34:24\n+          _4 = &(*_2);                     // scope 1 at $DIR/dyn-trait.rs:34:23: 34:24\n+-         _0 = try_execute_query::<<Q as Query>::C>(move _4) -> bb2; // scope 1 at $DIR/dyn-trait.rs:34:5: 34:25\n++         StorageLive(_5);                 // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         StorageLive(_6);                 // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         _6 = _4;                         // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         _5 = move _6 as &dyn Cache<V = <Q as Query>::V> (Pointer(Unsize)); // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         StorageDead(_6);                 // scope 2 at $DIR/dyn-trait.rs:27:14: 27:15\n++         StorageLive(_7);                 // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n++         _7 = _5;                         // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n++         _0 = <dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache(move _7) -> bb2; // scope 3 at $DIR/dyn-trait.rs:21:5: 21:22\n+                                           // mir::Constant\n+-                                          // + span: $DIR/dyn-trait.rs:34:5: 34:22\n+-                                          // + literal: Const { ty: for<'r> fn(&'r <Q as Query>::C) {try_execute_query::<<Q as Query>::C>}, val: Value(Scalar(<ZST>)) }\n++                                          // + span: $DIR/dyn-trait.rs:21:7: 21:20\n++                                          // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = <Q as Query>::V>) {<dyn Cache<V = <Q as Query>::V> as Cache>::store_nocache}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb2: {\n++         StorageDead(_7);                 // scope 3 at $DIR/dyn-trait.rs:21:21: 21:22\n++         StorageDead(_5);                 // scope 2 at $DIR/dyn-trait.rs:27:15: 27:16\n+          StorageDead(_4);                 // scope 1 at $DIR/dyn-trait.rs:34:24: 34:25\n+          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:35:1: 35:2\n+          return;                          // scope 0 at $DIR/dyn-trait.rs:35:2: 35:2\n+      }\n+  }\n+  "}, {"sha": "27309328052c758d3d743e1ca4e9cf41fdcf76bc", "filename": "src/test/mir-opt/inline/dyn_trait.mk_cycle.Inline.diff", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bd41874eeadba20870f49e837babc56e67292b10/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bd41874eeadba20870f49e837babc56e67292b10/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.mk_cycle.Inline.diff?ref=bd41874eeadba20870f49e837babc56e67292b10", "patch": "@@ -0,0 +1,23 @@\n+- // MIR for `mk_cycle` before Inline\n++ // MIR for `mk_cycle` after Inline\n+  \n+  fn mk_cycle(_1: &dyn Cache<V = V>) -> () {\n+      debug c => _1;                       // in scope 0 at $DIR/dyn-trait.rs:20:27: 20:28\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:20:49: 20:49\n+      let mut _2: &dyn Cache<V = V>;       // in scope 0 at $DIR/dyn-trait.rs:21:5: 21:22\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:21:5: 21:22\n+          _2 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:21:5: 21:22\n+          _0 = <dyn Cache<V = V> as Cache>::store_nocache(move _2) -> bb1; // scope 0 at $DIR/dyn-trait.rs:21:5: 21:22\n+                                           // mir::Constant\n+                                           // + span: $DIR/dyn-trait.rs:21:7: 21:20\n+                                           // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = V>) {<dyn Cache<V = V> as Cache>::store_nocache}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n+          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:21:21: 21:22\n+          return;                          // scope 0 at $DIR/dyn-trait.rs:22:2: 22:2\n+      }\n+  }\n+  "}, {"sha": "93bba58825d205830c894ddd4a4012390167e00c", "filename": "src/test/mir-opt/inline/dyn_trait.try_execute_query.Inline.diff", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bd41874eeadba20870f49e837babc56e67292b10/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/bd41874eeadba20870f49e837babc56e67292b10/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fdyn_trait.try_execute_query.Inline.diff?ref=bd41874eeadba20870f49e837babc56e67292b10", "patch": "@@ -0,0 +1,37 @@\n+- // MIR for `try_execute_query` before Inline\n++ // MIR for `try_execute_query` after Inline\n+  \n+  fn try_execute_query(_1: &C) -> () {\n+      debug c => _1;                       // in scope 0 at $DIR/dyn-trait.rs:26:36: 26:37\n+      let mut _0: ();                      // return place in scope 0 at $DIR/dyn-trait.rs:26:43: 26:43\n+      let mut _2: &dyn Cache<V = <C as Cache>::V>; // in scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n+      let mut _3: &C;                      // in scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n++     scope 1 (inlined mk_cycle::<<C as Cache>::V>) { // at $DIR/dyn-trait.rs:27:5: 27:16\n++         debug c => _2;                   // in scope 1 at $DIR/dyn-trait.rs:20:27: 20:28\n++         let mut _4: &dyn Cache<V = <C as Cache>::V>; // in scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n++     }\n+  \n+      bb0: {\n+          StorageLive(_2);                 // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n+          StorageLive(_3);                 // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n+          _3 = &(*_1);                     // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n+          _2 = move _3 as &dyn Cache<V = <C as Cache>::V> (Pointer(Unsize)); // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n+          StorageDead(_3);                 // scope 0 at $DIR/dyn-trait.rs:27:14: 27:15\n+-         _0 = mk_cycle::<<C as Cache>::V>(move _2) -> bb1; // scope 0 at $DIR/dyn-trait.rs:27:5: 27:16\n++         StorageLive(_4);                 // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n++         _4 = _2;                         // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n++         _0 = <dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache(move _4) -> bb1; // scope 1 at $DIR/dyn-trait.rs:21:5: 21:22\n+                                           // mir::Constant\n+-                                          // + span: $DIR/dyn-trait.rs:27:5: 27:13\n+-                                          // + literal: Const { ty: for<'r> fn(&'r (dyn Cache<V = <C as Cache>::V> + 'r)) {mk_cycle::<<C as Cache>::V>}, val: Value(Scalar(<ZST>)) }\n++                                          // + span: $DIR/dyn-trait.rs:21:7: 21:20\n++                                          // + literal: Const { ty: for<'r> fn(&'r dyn Cache<V = <C as Cache>::V>) {<dyn Cache<V = <C as Cache>::V> as Cache>::store_nocache}, val: Value(Scalar(<ZST>)) }\n+      }\n+  \n+      bb1: {\n++         StorageDead(_4);                 // scope 1 at $DIR/dyn-trait.rs:21:21: 21:22\n+          StorageDead(_2);                 // scope 0 at $DIR/dyn-trait.rs:27:15: 27:16\n+          return;                          // scope 0 at $DIR/dyn-trait.rs:28:2: 28:2\n+      }\n+  }\n+  "}]}