{"sha": "4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5", "node_id": "C_kwDOAAsO6NoAKDRlODdmMTMwNTRmYTNjZDkxMDNiMWI1YWQ5YTJlZDQ5OWZjNTQyZDU", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-19T14:51:43Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-01-19T15:58:40Z"}, "message": "Fix a couple of TOCTOU occurences", "tree": {"sha": "d23e1f53436a66fc677886f99e09d4cf02f2618a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d23e1f53436a66fc677886f99e09d4cf02f2618a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5", "html_url": "https://github.com/rust-lang/rust/commit/4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70957832684155dbe74a313d576028a5af5f89e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/70957832684155dbe74a313d576028a5af5f89e9", "html_url": "https://github.com/rust-lang/rust/commit/70957832684155dbe74a313d576028a5af5f89e9"}], "stats": {"total": 31, "additions": 16, "deletions": 15}, "files": [{"sha": "bd04fdbe304a3031cf7995133a306a04744ff118", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5", "patch": "@@ -4,7 +4,7 @@ use std::process::{self, Command};\n \n use super::path::{Dirs, RelPath};\n use super::rustc_info::{get_file_name, get_rustc_version, get_toolchain_name};\n-use super::utils::{spawn_and_wait, try_hard_link, CargoProject, Compiler};\n+use super::utils::{remove_dir_if_exists, spawn_and_wait, try_hard_link, CargoProject, Compiler};\n use super::SysrootKind;\n \n static DIST_DIR: RelPath = RelPath::DIST;\n@@ -230,9 +230,7 @@ fn build_clif_sysroot_for_triple(\n     if !super::config::get_bool(\"keep_sysroot\") {\n         // Cleanup the deps dir, but keep build scripts and the incremental cache for faster\n         // recompilation as they are not affected by changes in cg_clif.\n-        if build_dir.join(\"deps\").exists() {\n-            fs::remove_dir_all(build_dir.join(\"deps\")).unwrap();\n-        }\n+        remove_dir_if_exists(&build_dir.join(\"deps\"));\n     }\n \n     // Build sysroot"}, {"sha": "3290723005dd92b939486489e4acda090b0a8ac0", "filename": "build_system/path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5/build_system%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5/build_system%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fpath.rs?ref=4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5", "patch": "@@ -1,6 +1,8 @@\n use std::fs;\n use std::path::PathBuf;\n \n+use super::utils::remove_dir_if_exists;\n+\n #[derive(Debug, Clone)]\n pub(crate) struct Dirs {\n     pub(crate) source_dir: PathBuf,\n@@ -61,9 +63,7 @@ impl RelPath {\n \n     pub(crate) fn ensure_fresh(&self, dirs: &Dirs) {\n         let path = self.to_path(dirs);\n-        if path.exists() {\n-            fs::remove_dir_all(&path).unwrap();\n-        }\n+        remove_dir_if_exists(&path);\n         fs::create_dir_all(path).unwrap();\n     }\n }"}, {"sha": "f25a81dc23459f8e93e4204eb32efb2c80df12e8", "filename": "build_system/prepare.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5", "patch": "@@ -3,18 +3,13 @@ use std::fs;\n use std::path::{Path, PathBuf};\n use std::process::Command;\n \n-use crate::build_system::rustc_info::get_default_sysroot;\n-\n use super::build_sysroot::{BUILD_SYSROOT, ORIG_BUILD_SYSROOT, SYSROOT_RUSTC_VERSION, SYSROOT_SRC};\n use super::path::{Dirs, RelPath};\n-use super::rustc_info::get_rustc_version;\n+use super::rustc_info::{get_default_sysroot, get_rustc_version};\n use super::utils::{copy_dir_recursively, git_command, retry_spawn_and_wait, spawn_and_wait};\n \n pub(crate) fn prepare(dirs: &Dirs) {\n-    if RelPath::DOWNLOAD.to_path(dirs).exists() {\n-        std::fs::remove_dir_all(RelPath::DOWNLOAD.to_path(dirs)).unwrap();\n-    }\n-    std::fs::create_dir_all(RelPath::DOWNLOAD.to_path(dirs)).unwrap();\n+    RelPath::DOWNLOAD.ensure_fresh(dirs);\n \n     spawn_and_wait(super::build_backend::CG_CLIF.fetch(\"cargo\", dirs));\n "}, {"sha": "da2a94a0a4ff84a3b307c22213e1813fd03ca55f", "filename": "build_system/utils.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=4e87f13054fa3cd9103b1b5ad9a2ed499fc542d5", "patch": "@@ -1,6 +1,6 @@\n use std::env;\n use std::fs;\n-use std::io::Write;\n+use std::io::{self, Write};\n use std::path::{Path, PathBuf};\n use std::process::{self, Command, Stdio};\n \n@@ -246,6 +246,14 @@ pub(crate) fn spawn_and_wait_with_input(mut cmd: Command, input: String) -> Stri\n     String::from_utf8(output.stdout).unwrap()\n }\n \n+pub(crate) fn remove_dir_if_exists(path: &Path) {\n+    match fs::remove_dir_all(&path) {\n+        Ok(()) => {}\n+        Err(err) if err.kind() == io::ErrorKind::NotFound => {}\n+        Err(err) => panic!(\"Failed to remove {path}: {err}\", path = path.display()),\n+    }\n+}\n+\n pub(crate) fn copy_dir_recursively(from: &Path, to: &Path) {\n     for entry in fs::read_dir(from).unwrap() {\n         let entry = entry.unwrap();"}]}