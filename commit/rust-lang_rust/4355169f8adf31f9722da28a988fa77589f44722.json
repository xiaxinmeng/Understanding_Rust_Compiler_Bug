{"sha": "4355169f8adf31f9722da28a988fa77589f44722", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNTUxNjlmOGFkZjMxZjk3MjJkYTI4YTk4OGZhNzc1ODlmNDQ3MjI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-02T15:22:03Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-03T20:42:07Z"}, "message": "kill the old `visit_all_item_likes` infrastructure", "tree": {"sha": "d6c8f89efd8b462525f680492b7897b2cbf3d925", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6c8f89efd8b462525f680492b7897b2cbf3d925"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4355169f8adf31f9722da28a988fa77589f44722", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4355169f8adf31f9722da28a988fa77589f44722", "html_url": "https://github.com/rust-lang/rust/commit/4355169f8adf31f9722da28a988fa77589f44722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4355169f8adf31f9722da28a988fa77589f44722/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4824a199ca3c6c1c12c90f0146db540045220c9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/4824a199ca3c6c1c12c90f0146db540045220c9a", "html_url": "https://github.com/rust-lang/rust/commit/4824a199ca3c6c1c12c90f0146db540045220c9a"}], "stats": {"total": 101, "additions": 5, "deletions": 96}, "files": [{"sha": "809bed939f54ca4bcb78e102d33077f0ba4499f7", "filename": "src/librustc/dep_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4355169f8adf31f9722da28a988fa77589f44722/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4355169f8adf31f9722da28a988fa77589f44722/src%2Flibrustc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fmod.rs?ref=4355169f8adf31f9722da28a988fa77589f44722", "patch": "@@ -18,7 +18,6 @@ mod raii;\n mod safe;\n mod shadow;\n mod thread;\n-mod visit;\n \n pub use self::dep_tracking_map::{DepTrackingMap, DepTrackingMapConfig};\n pub use self::dep_node::DepNode;\n@@ -28,5 +27,4 @@ pub use self::graph::WorkProduct;\n pub use self::query::DepGraphQuery;\n pub use self::safe::AssertDepGraphSafe;\n pub use self::safe::DepGraphSafe;\n-pub use self::visit::visit_all_item_likes_in_krate;\n pub use self::raii::DepTask;"}, {"sha": "bf3748659fe07f0e4f4e84e8bb7ccb7782a85eb0", "filename": "src/librustc/dep_graph/visit.rs", "status": "removed", "additions": 0, "deletions": 77, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/4824a199ca3c6c1c12c90f0146db540045220c9a/src%2Flibrustc%2Fdep_graph%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4824a199ca3c6c1c12c90f0146db540045220c9a/src%2Flibrustc%2Fdep_graph%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fvisit.rs?ref=4824a199ca3c6c1c12c90f0146db540045220c9a", "patch": "@@ -1,77 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use hir;\n-use hir::def_id::DefId;\n-use hir::itemlikevisit::ItemLikeVisitor;\n-use ty::TyCtxt;\n-\n-use super::dep_node::DepNode;\n-\n-/// Visit all the items in the krate in some order. When visiting a\n-/// particular item, first create a dep-node by calling `dep_node_fn`\n-/// and push that onto the dep-graph stack of tasks, and also create a\n-/// read edge from the corresponding AST node. This is used in\n-/// compiler passes to automatically record the item that they are\n-/// working on.\n-pub fn visit_all_item_likes_in_krate<'a, 'tcx, V, F>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                                     mut dep_node_fn: F,\n-                                                     visitor: &mut V)\n-    where F: FnMut(DefId) -> DepNode<DefId>, V: ItemLikeVisitor<'tcx>\n-{\n-    struct TrackingVisitor<'visit, 'tcx: 'visit, F: 'visit, V: 'visit> {\n-        tcx: TyCtxt<'visit, 'tcx, 'tcx>,\n-        dep_node_fn: &'visit mut F,\n-        visitor: &'visit mut V,\n-    }\n-\n-    impl<'visit, 'tcx, F, V> ItemLikeVisitor<'tcx> for TrackingVisitor<'visit, 'tcx, F, V>\n-        where F: FnMut(DefId) -> DepNode<DefId>, V: ItemLikeVisitor<'tcx>\n-    {\n-        fn visit_item(&mut self, i: &'tcx hir::Item) {\n-            let item_def_id = self.tcx.hir.local_def_id(i.id);\n-            let task_id = (self.dep_node_fn)(item_def_id);\n-            let _task = self.tcx.dep_graph.in_task(task_id.clone());\n-            debug!(\"Started task {:?}\", task_id);\n-            self.tcx.dep_graph.read(DepNode::Hir(item_def_id));\n-            self.visitor.visit_item(i);\n-            debug!(\"Ended task {:?}\", task_id);\n-        }\n-\n-        fn visit_trait_item(&mut self, i: &'tcx hir::TraitItem) {\n-            let trait_item_def_id = self.tcx.hir.local_def_id(i.id);\n-            let task_id = (self.dep_node_fn)(trait_item_def_id);\n-            let _task = self.tcx.dep_graph.in_task(task_id.clone());\n-            debug!(\"Started task {:?}\", task_id);\n-            self.tcx.dep_graph.read(DepNode::Hir(trait_item_def_id));\n-            self.visitor.visit_trait_item(i);\n-            debug!(\"Ended task {:?}\", task_id);\n-        }\n-\n-        fn visit_impl_item(&mut self, i: &'tcx hir::ImplItem) {\n-            let impl_item_def_id = self.tcx.hir.local_def_id(i.id);\n-            let task_id = (self.dep_node_fn)(impl_item_def_id);\n-            let _task = self.tcx.dep_graph.in_task(task_id.clone());\n-            debug!(\"Started task {:?}\", task_id);\n-            self.tcx.dep_graph.read(DepNode::Hir(impl_item_def_id));\n-            self.visitor.visit_impl_item(i);\n-            debug!(\"Ended task {:?}\", task_id);\n-        }\n-    }\n-\n-    let krate = tcx.dep_graph.with_ignore(|| tcx.hir.krate());\n-    let mut tracking_visitor = TrackingVisitor {\n-        tcx: tcx,\n-        dep_node_fn: &mut dep_node_fn,\n-        visitor: visitor,\n-    };\n-    krate.visit_all_item_likes(&mut tracking_visitor)\n-}\n-"}, {"sha": "def6b2b3421f6f4135e0741b575506381f5a2e10", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4355169f8adf31f9722da28a988fa77589f44722/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4355169f8adf31f9722da28a988fa77589f44722/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=4355169f8adf31f9722da28a988fa77589f44722", "patch": "@@ -88,7 +88,7 @@ pub enum NestedVisitorMap<'this, 'tcx: 'this> {\n     /// that are inside of an item-like.\n     ///\n     /// **This is the most common choice.** A very commmon pattern is\n-    /// to use `tcx.visit_all_item_likes_in_krate()` as an outer loop,\n+    /// to use `visit_all_item_likes()` as an outer loop,\n     /// and to have the visitor that visits the contents of each item\n     /// using this setting.\n     OnlyBodies(&'this Map<'tcx>),"}, {"sha": "ce1a34faf5ee8a850df8e9ec91ce463009c1c9ad", "filename": "src/librustc/hir/itemlikevisit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4355169f8adf31f9722da28a988fa77589f44722/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4355169f8adf31f9722da28a988fa77589f44722/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs?ref=4355169f8adf31f9722da28a988fa77589f44722", "patch": "@@ -19,9 +19,8 @@ use super::intravisit::Visitor;\n ///\n /// 1. **Shallow visit**: Get a simple callback for every item (or item-like thing) in the HIR.\n ///    - Example: find all items with a `#[foo]` attribute on them.\n-///    - How: Implement `ItemLikeVisitor` and call `tcx.visit_all_item_likes_in_krate()`.\n+///    - How: Implement `ItemLikeVisitor` and call `tcx.hir.krate().visit_all_item_likes()`.\n ///    - Pro: Efficient; just walks the lists of item-like things, not the nodes themselves.\n-///    - Pro: Integrates well into dependency tracking.\n ///    - Con: Don't get information about nesting\n ///    - Con: Don't have methods for specific bits of HIR, like \"on\n ///      every expr, do this\".\n@@ -30,7 +29,7 @@ use super::intravisit::Visitor;\n ///    within one another.\n ///    - Example: Examine each expression to look for its type and do some check or other.\n ///    - How: Implement `intravisit::Visitor` and use\n-///      `tcx.visit_all_item_likes_in_krate(visitor.as_deep_visitor())`. Within\n+///      `tcx.hir.krate().visit_all_item_likes(visitor.as_deep_visitor())`. Within\n ///      your `intravisit::Visitor` impl, implement methods like\n ///      `visit_expr()`; don't forget to invoke\n ///      `intravisit::walk_visit_expr()` to keep walking the subparts."}, {"sha": "2355ed7e147b33ac0d398a482ad626608c9483ab", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4355169f8adf31f9722da28a988fa77589f44722/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4355169f8adf31f9722da28a988fa77589f44722/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=4355169f8adf31f9722da28a988fa77589f44722", "patch": "@@ -15,7 +15,7 @@ pub use self::IntVarValue::*;\n pub use self::LvaluePreference::*;\n pub use self::fold::TypeFoldable;\n \n-use dep_graph::{self, DepNode};\n+use dep_graph::DepNode;\n use hir::{map as hir_map, FreevarMap, TraitMap};\n use hir::def::{Def, CtorKind, ExportMap};\n use hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX, LOCAL_CRATE};\n@@ -58,7 +58,6 @@ use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n use rustc_data_structures::transitive_relation::TransitiveRelation;\n \n use hir;\n-use hir::itemlikevisit::ItemLikeVisitor;\n \n pub use self::sty::{Binder, DebruijnIndex};\n pub use self::sty::{FnSig, PolyFnSig};\n@@ -2565,14 +2564,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.mk_region(ty::ReScope(self.node_extent(id)))\n     }\n \n-    pub fn visit_all_item_likes_in_krate<V,F>(self,\n-                                              dep_node_fn: F,\n-                                              visitor: &mut V)\n-        where F: FnMut(DefId) -> DepNode<DefId>, V: ItemLikeVisitor<'gcx>\n-    {\n-        dep_graph::visit_all_item_likes_in_krate(self.global_tcx(), dep_node_fn, visitor);\n-    }\n-\n     /// Looks up the span of `impl_did` if the impl is local; otherwise returns `Err`\n     /// with the name of the crate containing the impl.\n     pub fn span_of_impl(self, impl_did: DefId) -> Result<Span, Symbol> {"}, {"sha": "ad787c57e76f2a60ee49739eef874e17c4ae5665", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4355169f8adf31f9722da28a988fa77589f44722/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4355169f8adf31f9722da28a988fa77589f44722/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=4355169f8adf31f9722da28a988fa77589f44722", "patch": "@@ -32,8 +32,6 @@ use self::VarianceTerm::*;\n \n pub type VarianceTermPtr<'a> = &'a VarianceTerm<'a>;\n \n-use dep_graph::DepNode::ItemSignature as VarianceDepNode;\n-\n #[derive(Copy, Clone, Debug)]\n pub struct InferredIndex(pub usize);\n \n@@ -109,7 +107,7 @@ pub fn determine_parameters_to_be_inferred<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>\n     };\n \n     // See README.md for a discussion on dep-graph management.\n-    tcx.visit_all_item_likes_in_krate(|def_id| VarianceDepNode(def_id), &mut terms_cx);\n+    tcx.hir.krate().visit_all_item_likes(&mut terms_cx);\n \n     terms_cx\n }"}]}