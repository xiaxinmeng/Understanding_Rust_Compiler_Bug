{"sha": "c4ec606606850a5a3eba31da88ccd338ee8e8da5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0ZWM2MDY2MDY4NTBhNWEzZWJhMzFkYTg4Y2NkMzM4ZWU4ZThkYTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-27T01:43:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-05-27T01:43:20Z"}, "message": "Auto merge of #85734 - Dylan-DPC:rollup-q6iiees, r=Dylan-DPC\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #84221 (E0599 suggestions and elision of generic argument if no canditate is found)\n - #84701 (stabilize member constraints)\n - #85564 ( readd capture disjoint fields gate)\n - #85583 (Get rid of PreviousDepGraph.)\n - #85649 (Update cc)\n - #85689 (Remove Iterator #[rustc_on_unimplemented]s that no longer apply.)\n - #85719 (Add inline attr to CString::into_inner so it can optimize out NonNull checks)\n - #85725 (Remove unneeded workaround)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "9a7cea3984d8baef4c6392f7cbdb5e61f1f86bec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a7cea3984d8baef4c6392f7cbdb5e61f1f86bec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4ec606606850a5a3eba31da88ccd338ee8e8da5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4ec606606850a5a3eba31da88ccd338ee8e8da5", "html_url": "https://github.com/rust-lang/rust/commit/c4ec606606850a5a3eba31da88ccd338ee8e8da5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4ec606606850a5a3eba31da88ccd338ee8e8da5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86ac0b4147822e23c671a40e7ba1bf5b5835150d", "url": "https://api.github.com/repos/rust-lang/rust/commits/86ac0b4147822e23c671a40e7ba1bf5b5835150d", "html_url": "https://github.com/rust-lang/rust/commit/86ac0b4147822e23c671a40e7ba1bf5b5835150d"}, {"sha": "85a408a043818bb72100cbb2750599e6d1b236c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/85a408a043818bb72100cbb2750599e6d1b236c1", "html_url": "https://github.com/rust-lang/rust/commit/85a408a043818bb72100cbb2750599e6d1b236c1"}], "stats": {"total": 835, "additions": 447, "deletions": 388}, "files": [{"sha": "4d2a2e964581df8e282cdaff446fd64309d92046", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -441,9 +441,9 @@ version = \"0.1.0\"\n \n [[package]]\n name = \"cc\"\n-version = \"1.0.67\"\n+version = \"1.0.68\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"e3c69b077ad434294d3ce9f1f6143a2a4b89a8a2d54ef813d85003a4fd1137fd\"\n+checksum = \"4a72c244c1ff497a746a7e1fb3d14bd08420ecda70c8f25c7112f2781652d787\"\n dependencies = [\n  \"jobserver\",\n ]"}, {"sha": "3a677a2437c57233aa2f5b316721be21f5f6803f", "filename": "compiler/rustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2FCargo.toml?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -9,7 +9,7 @@ test = false\n \n [dependencies]\n bitflags = \"1.2.1\"\n-cc = \"1.0.67\"\n+cc = \"1.0.68\"\n itertools = \"0.9\"\n tracing = \"0.1\"\n libc = \"0.2.50\"\n@@ -24,7 +24,7 @@ rustc_middle = { path = \"../rustc_middle\" }\n rustc_apfloat = { path = \"../rustc_apfloat\" }\n rustc_attr = { path = \"../rustc_attr\" }\n rustc_symbol_mangling = { path = \"../rustc_symbol_mangling\" }\n-rustc_data_structures = { path = \"../rustc_data_structures\"}\n+rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_fs_util = { path = \"../rustc_fs_util\" }\n rustc_hir = { path = \"../rustc_hir\" }"}, {"sha": "95504723e7b248b9250368a8f4136dde95d87f27", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -285,6 +285,8 @@ declare_features! (\n     (accepted, extended_key_value_attributes, \"1.54.0\", Some(78835), None),\n     /// Allows unsizing coercions in `const fn`.\n     (accepted, const_fn_unsize, \"1.54.0\", Some(64992), None),\n+    /// Allows `impl Trait` with multiple unrelated lifetimes.\n+    (accepted, member_constraints, \"1.54.0\", Some(61997), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "a84737e80a09f9af152a5a7848a5a971e430296f", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -472,9 +472,6 @@ declare_features! (\n     /// Allows explicit discriminants on non-unit enum variants.\n     (active, arbitrary_enum_discriminant, \"1.37.0\", Some(60553), None),\n \n-    /// Allows `impl Trait` with multiple unrelated lifetimes.\n-    (active, member_constraints, \"1.37.0\", Some(61997), None),\n-\n     /// Allows `async || body` closures.\n     (active, async_closure, \"1.37.0\", Some(62290), None),\n "}, {"sha": "303c39a39a9209b7a1c8f1a3c60aeb49052ca40f", "filename": "compiler/rustc_incremental/src/persist/load.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fload.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -2,7 +2,7 @@\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::definitions::DefPathTable;\n-use rustc_middle::dep_graph::{PreviousDepGraph, SerializedDepGraph, WorkProduct, WorkProductId};\n+use rustc_middle::dep_graph::{SerializedDepGraph, WorkProduct, WorkProductId};\n use rustc_middle::ty::query::OnDiskCache;\n use rustc_serialize::opaque::Decoder;\n use rustc_serialize::Decodable;\n@@ -22,8 +22,8 @@ pub enum LoadResult<T> {\n     Error { message: String },\n }\n \n-impl LoadResult<(PreviousDepGraph, WorkProductMap)> {\n-    pub fn open(self, sess: &Session) -> (PreviousDepGraph, WorkProductMap) {\n+impl LoadResult<(SerializedDepGraph, WorkProductMap)> {\n+    pub fn open(self, sess: &Session) -> (SerializedDepGraph, WorkProductMap) {\n         match self {\n             LoadResult::Error { message } => {\n                 sess.warn(&message);\n@@ -84,7 +84,7 @@ impl<T> MaybeAsync<T> {\n     }\n }\n \n-pub type DepGraphFuture = MaybeAsync<LoadResult<(PreviousDepGraph, WorkProductMap)>>;\n+pub type DepGraphFuture = MaybeAsync<LoadResult<(SerializedDepGraph, WorkProductMap)>>;\n \n /// Launch a thread and load the dependency graph in the background.\n pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n@@ -185,7 +185,7 @@ pub fn load_dep_graph(sess: &Session) -> DepGraphFuture {\n                 let dep_graph = SerializedDepGraph::decode(&mut decoder)\n                     .expect(\"Error reading cached dep-graph\");\n \n-                LoadResult::Ok { data: (PreviousDepGraph::new(dep_graph), prev_work_products) }\n+                LoadResult::Ok { data: (dep_graph, prev_work_products) }\n             }\n         }\n     }))"}, {"sha": "9603b102cbc5d73aa6cc7788a299d16c1162b1a8", "filename": "compiler/rustc_incremental/src/persist/save.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fsave.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,6 +1,6 @@\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::join;\n-use rustc_middle::dep_graph::{DepGraph, PreviousDepGraph, WorkProduct, WorkProductId};\n+use rustc_middle::dep_graph::{DepGraph, SerializedDepGraph, WorkProduct, WorkProductId};\n use rustc_middle::ty::TyCtxt;\n use rustc_serialize::opaque::{FileEncodeResult, FileEncoder};\n use rustc_serialize::Encodable as RustcEncodable;\n@@ -186,7 +186,7 @@ fn encode_query_cache(tcx: TyCtxt<'_>, encoder: &mut FileEncoder) -> FileEncodeR\n \n pub fn build_dep_graph(\n     sess: &Session,\n-    prev_graph: PreviousDepGraph,\n+    prev_graph: SerializedDepGraph,\n     prev_work_products: FxHashMap<WorkProductId, WorkProduct>,\n ) -> Option<DepGraph> {\n     if sess.opts.incremental.is_none() {"}, {"sha": "3fca2e1ccb97b876e04fb0d1a9a1a1fabe362668", "filename": "compiler/rustc_llvm/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_llvm%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_llvm%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_llvm%2FCargo.toml?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -13,4 +13,4 @@ libc = \"0.2.73\"\n \n [build-dependencies]\n build_helper = { path = \"../../src/build_helper\" }\n-cc = \"1.0.67\"\n+cc = \"1.0.68\""}, {"sha": "aa61219ad789e9f523e3c01bd9abd30453435db9", "filename": "compiler/rustc_middle/src/dep_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fdep_graph%2Fmod.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -18,7 +18,6 @@ crate use dep_node::{make_compile_codegen_unit, make_compile_mono_item};\n pub type DepGraph = rustc_query_system::dep_graph::DepGraph<DepKind>;\n pub type TaskDeps = rustc_query_system::dep_graph::TaskDeps<DepKind>;\n pub type DepGraphQuery = rustc_query_system::dep_graph::DepGraphQuery<DepKind>;\n-pub type PreviousDepGraph = rustc_query_system::dep_graph::PreviousDepGraph<DepKind>;\n pub type SerializedDepGraph = rustc_query_system::dep_graph::SerializedDepGraph<DepKind>;\n pub type EdgeFilter = rustc_query_system::dep_graph::debug::EdgeFilter<DepKind>;\n "}, {"sha": "4c53510ed00eed86df702bad1068e68eba528c1f", "filename": "compiler/rustc_mir/src/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fplace.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -15,9 +15,9 @@ use rustc_target::abi::{Abi, Align, FieldsShape, TagEncoding};\n use rustc_target::abi::{HasDataLayout, LayoutOf, Size, VariantIdx, Variants};\n \n use super::{\n-    alloc_range, mir_assign_valid_types, AllocId, AllocMap, AllocRef, AllocRefMut, Allocation,\n-    ConstAlloc, ImmTy, Immediate, InterpCx, InterpResult, LocalValue, Machine, MemoryKind, OpTy,\n-    Operand, Pointer, PointerArithmetic, Scalar, ScalarMaybeUninit,\n+    alloc_range, mir_assign_valid_types, AllocRef, AllocRefMut, ConstAlloc, ImmTy, Immediate,\n+    InterpCx, InterpResult, LocalValue, Machine, MemoryKind, OpTy, Operand, Pointer,\n+    PointerArithmetic, Scalar, ScalarMaybeUninit,\n };\n \n #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable)]\n@@ -292,8 +292,6 @@ where\n     // FIXME: Working around https://github.com/rust-lang/rust/issues/54385\n     Tag: Debug + Copy + Eq + Hash + 'static,\n     M: Machine<'mir, 'tcx, PointerTag = Tag>,\n-    // FIXME: Working around https://github.com/rust-lang/rust/issues/24159\n-    M::MemoryMap: AllocMap<AllocId, (MemoryKind<M::MemoryKind>, Allocation<Tag, M::AllocExtra>)>,\n {\n     /// Take a value, which represents a (thin or wide) reference, and make it a place.\n     /// Alignment is just based on the type.  This is the inverse of `MemPlace::to_ref()`."}, {"sha": "2185bd3a5c6126ed0eb14824e6ada8a635c30873", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 20, "deletions": 15, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -185,21 +185,26 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 //     match x { _ => () } // fake read of `x`\n                 // };\n                 // ```\n-                for (thir_place, cause, hir_id) in fake_reads.into_iter() {\n-                    let place_builder =\n-                        unpack!(block = this.as_place_builder(block, &this.thir[*thir_place]));\n-\n-                    if let Ok(place_builder_resolved) =\n-                        place_builder.try_upvars_resolved(this.tcx, this.typeck_results)\n-                    {\n-                        let mir_place =\n-                            place_builder_resolved.into_place(this.tcx, this.typeck_results);\n-                        this.cfg.push_fake_read(\n-                            block,\n-                            this.source_info(this.tcx.hir().span(*hir_id)),\n-                            *cause,\n-                            mir_place,\n-                        );\n+                //\n+                // FIXME(RFC2229, rust#85435): Remove feature gate once diagnostics are\n+                // improved and unsafe checking works properly in closure bodies again.\n+                if this.tcx.features().capture_disjoint_fields {\n+                    for (thir_place, cause, hir_id) in fake_reads.into_iter() {\n+                        let place_builder =\n+                            unpack!(block = this.as_place_builder(block, &this.thir[*thir_place]));\n+\n+                        if let Ok(place_builder_resolved) =\n+                            place_builder.try_upvars_resolved(this.tcx, this.typeck_results)\n+                        {\n+                            let mir_place =\n+                                place_builder_resolved.into_place(this.tcx, this.typeck_results);\n+                            this.cfg.push_fake_read(\n+                                block,\n+                                this.source_info(this.tcx.hir().span(*hir_id)),\n+                                *cause,\n+                                mir_place,\n+                            );\n+                        }\n                     }\n                 }\n "}, {"sha": "38010b7786814e6d0e0d2e428ce1e3393e125983", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -19,9 +19,8 @@ use std::marker::PhantomData;\n use std::mem;\n use std::sync::atomic::Ordering::Relaxed;\n \n-use super::prev::PreviousDepGraph;\n use super::query::DepGraphQuery;\n-use super::serialized::{GraphEncoder, SerializedDepNodeIndex};\n+use super::serialized::{GraphEncoder, SerializedDepGraph, SerializedDepNodeIndex};\n use super::{DepContext, DepKind, DepNode, HasDepContext, WorkProductId};\n use crate::query::QueryContext;\n \n@@ -78,7 +77,7 @@ struct DepGraphData<K: DepKind> {\n \n     /// The dep-graph from the previous compilation session. It contains all\n     /// nodes and edges as well as all fingerprints of nodes that have them.\n-    previous: PreviousDepGraph<K>,\n+    previous: SerializedDepGraph<K>,\n \n     colors: DepNodeColorMap,\n \n@@ -109,7 +108,7 @@ where\n \n impl<K: DepKind> DepGraph<K> {\n     pub fn new(\n-        prev_graph: PreviousDepGraph<K>,\n+        prev_graph: SerializedDepGraph<K>,\n         prev_work_products: FxHashMap<WorkProductId, WorkProduct>,\n         encoder: FileEncoder,\n         record_graph: bool,\n@@ -857,7 +856,7 @@ rustc_index::newtype_index! {\n /// For this reason, we avoid storing `DepNode`s more than once as map\n /// keys. The `new_node_to_index` map only contains nodes not in the previous\n /// graph, and we map nodes in the previous graph to indices via a two-step\n-/// mapping. `PreviousDepGraph` maps from `DepNode` to `SerializedDepNodeIndex`,\n+/// mapping. `SerializedDepGraph` maps from `DepNode` to `SerializedDepNodeIndex`,\n /// and the `prev_index_to_index` vector (which is more compact and faster than\n /// using a map) maps from `SerializedDepNodeIndex` to `DepNodeIndex`.\n ///\n@@ -982,7 +981,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n     fn intern_node(\n         &self,\n         profiler: &SelfProfilerRef,\n-        prev_graph: &PreviousDepGraph<K>,\n+        prev_graph: &SerializedDepGraph<K>,\n         key: DepNode<K>,\n         edges: EdgesVec,\n         fingerprint: Option<Fingerprint>,\n@@ -1080,7 +1079,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n     fn promote_node_and_deps_to_current(\n         &self,\n         profiler: &SelfProfilerRef,\n-        prev_graph: &PreviousDepGraph<K>,\n+        prev_graph: &SerializedDepGraph<K>,\n         prev_index: SerializedDepNodeIndex,\n     ) -> DepNodeIndex {\n         self.debug_assert_not_in_new_nodes(prev_graph, prev_index);\n@@ -1112,7 +1111,7 @@ impl<K: DepKind> CurrentDepGraph<K> {\n     #[inline]\n     fn debug_assert_not_in_new_nodes(\n         &self,\n-        prev_graph: &PreviousDepGraph<K>,\n+        prev_graph: &SerializedDepGraph<K>,\n         prev_index: SerializedDepNodeIndex,\n     ) {\n         let node = &prev_graph.index_to_node(prev_index);"}, {"sha": "15e2633c4f12e79b46da54dd784f04a4a1807f0a", "filename": "compiler/rustc_query_system/src/dep_graph/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fmod.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,13 +1,11 @@\n pub mod debug;\n mod dep_node;\n mod graph;\n-mod prev;\n mod query;\n mod serialized;\n \n pub use dep_node::{DepNode, DepNodeParams, WorkProductId};\n pub use graph::{hash_result, DepGraph, DepNodeColor, DepNodeIndex, TaskDeps, WorkProduct};\n-pub use prev::PreviousDepGraph;\n pub use query::DepGraphQuery;\n pub use serialized::{SerializedDepGraph, SerializedDepNodeIndex};\n "}, {"sha": "6303bbf53b9c45ffc7187c4db9dc64c4dbfa085a", "filename": "compiler/rustc_query_system/src/dep_graph/prev.rs", "status": "removed", "additions": 0, "deletions": 56, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/86ac0b4147822e23c671a40e7ba1bf5b5835150d/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fprev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ac0b4147822e23c671a40e7ba1bf5b5835150d/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fprev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fprev.rs?ref=86ac0b4147822e23c671a40e7ba1bf5b5835150d", "patch": "@@ -1,56 +0,0 @@\n-use super::serialized::{SerializedDepGraph, SerializedDepNodeIndex};\n-use super::{DepKind, DepNode};\n-use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_data_structures::fx::FxHashMap;\n-\n-#[derive(Debug)]\n-pub struct PreviousDepGraph<K: DepKind> {\n-    data: SerializedDepGraph<K>,\n-    index: FxHashMap<DepNode<K>, SerializedDepNodeIndex>,\n-}\n-\n-impl<K: DepKind> Default for PreviousDepGraph<K> {\n-    fn default() -> Self {\n-        PreviousDepGraph { data: Default::default(), index: Default::default() }\n-    }\n-}\n-\n-impl<K: DepKind> PreviousDepGraph<K> {\n-    pub fn new(data: SerializedDepGraph<K>) -> PreviousDepGraph<K> {\n-        let index: FxHashMap<_, _> =\n-            data.nodes.iter_enumerated().map(|(idx, &dep_node)| (dep_node, idx)).collect();\n-        PreviousDepGraph { data, index }\n-    }\n-\n-    #[inline]\n-    pub fn edge_targets_from(\n-        &self,\n-        dep_node_index: SerializedDepNodeIndex,\n-    ) -> &[SerializedDepNodeIndex] {\n-        self.data.edge_targets_from(dep_node_index)\n-    }\n-\n-    #[inline]\n-    pub fn index_to_node(&self, dep_node_index: SerializedDepNodeIndex) -> DepNode<K> {\n-        self.data.nodes[dep_node_index]\n-    }\n-\n-    #[inline]\n-    pub fn node_to_index_opt(&self, dep_node: &DepNode<K>) -> Option<SerializedDepNodeIndex> {\n-        self.index.get(dep_node).cloned()\n-    }\n-\n-    #[inline]\n-    pub fn fingerprint_of(&self, dep_node: &DepNode<K>) -> Option<Fingerprint> {\n-        self.index.get(dep_node).map(|&node_index| self.data.fingerprints[node_index])\n-    }\n-\n-    #[inline]\n-    pub fn fingerprint_by_index(&self, dep_node_index: SerializedDepNodeIndex) -> Fingerprint {\n-        self.data.fingerprints[dep_node_index]\n-    }\n-\n-    pub fn node_count(&self) -> usize {\n-        self.index.len()\n-    }\n-}"}, {"sha": "6a84a28be66563b07baf348fd89a3a0a563dd40a", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -37,17 +37,19 @@ rustc_index::newtype_index! {\n #[derive(Debug)]\n pub struct SerializedDepGraph<K: DepKind> {\n     /// The set of all DepNodes in the graph\n-    pub nodes: IndexVec<SerializedDepNodeIndex, DepNode<K>>,\n+    nodes: IndexVec<SerializedDepNodeIndex, DepNode<K>>,\n     /// The set of all Fingerprints in the graph. Each Fingerprint corresponds to\n     /// the DepNode at the same index in the nodes vector.\n-    pub fingerprints: IndexVec<SerializedDepNodeIndex, Fingerprint>,\n+    fingerprints: IndexVec<SerializedDepNodeIndex, Fingerprint>,\n     /// For each DepNode, stores the list of edges originating from that\n     /// DepNode. Encoded as a [start, end) pair indexing into edge_list_data,\n     /// which holds the actual DepNodeIndices of the target nodes.\n-    pub edge_list_indices: IndexVec<SerializedDepNodeIndex, (u32, u32)>,\n+    edge_list_indices: IndexVec<SerializedDepNodeIndex, (u32, u32)>,\n     /// A flattened list of all edge targets in the graph. Edge sources are\n     /// implicit in edge_list_indices.\n-    pub edge_list_data: Vec<SerializedDepNodeIndex>,\n+    edge_list_data: Vec<SerializedDepNodeIndex>,\n+    /// Reciprocal map to `nodes`.\n+    index: FxHashMap<DepNode<K>, SerializedDepNodeIndex>,\n }\n \n impl<K: DepKind> Default for SerializedDepGraph<K> {\n@@ -57,6 +59,7 @@ impl<K: DepKind> Default for SerializedDepGraph<K> {\n             fingerprints: Default::default(),\n             edge_list_indices: Default::default(),\n             edge_list_data: Default::default(),\n+            index: Default::default(),\n         }\n     }\n }\n@@ -67,6 +70,30 @@ impl<K: DepKind> SerializedDepGraph<K> {\n         let targets = self.edge_list_indices[source];\n         &self.edge_list_data[targets.0 as usize..targets.1 as usize]\n     }\n+\n+    #[inline]\n+    pub fn index_to_node(&self, dep_node_index: SerializedDepNodeIndex) -> DepNode<K> {\n+        self.nodes[dep_node_index]\n+    }\n+\n+    #[inline]\n+    pub fn node_to_index_opt(&self, dep_node: &DepNode<K>) -> Option<SerializedDepNodeIndex> {\n+        self.index.get(dep_node).cloned()\n+    }\n+\n+    #[inline]\n+    pub fn fingerprint_of(&self, dep_node: &DepNode<K>) -> Option<Fingerprint> {\n+        self.index.get(dep_node).map(|&node_index| self.fingerprints[node_index])\n+    }\n+\n+    #[inline]\n+    pub fn fingerprint_by_index(&self, dep_node_index: SerializedDepNodeIndex) -> Fingerprint {\n+        self.fingerprints[dep_node_index]\n+    }\n+\n+    pub fn node_count(&self) -> usize {\n+        self.index.len()\n+    }\n }\n \n impl<'a, K: DepKind + Decodable<opaque::Decoder<'a>>> Decodable<opaque::Decoder<'a>>\n@@ -121,7 +148,10 @@ impl<'a, K: DepKind + Decodable<opaque::Decoder<'a>>> Decodable<opaque::Decoder<\n             })?;\n         }\n \n-        Ok(SerializedDepGraph { nodes, fingerprints, edge_list_indices, edge_list_data })\n+        let index: FxHashMap<_, _> =\n+            nodes.iter_enumerated().map(|(idx, &dep_node)| (dep_node, idx)).collect();\n+\n+        Ok(SerializedDepGraph { nodes, fingerprints, edge_list_indices, edge_list_data, index })\n     }\n }\n "}, {"sha": "163df26e9ffaf67e396955c7312f77a6848f05ed", "filename": "compiler/rustc_trait_selection/src/opaque_types.rs", "status": "modified", "additions": 0, "deletions": 66, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fopaque_types.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -140,15 +140,6 @@ pub trait InferCtxtExt<'tcx> {\n         first_own_region_index: usize,\n     );\n \n-    /*private*/\n-    fn member_constraint_feature_gate(\n-        &self,\n-        opaque_defn: &OpaqueTypeDecl<'tcx>,\n-        opaque_type_def_id: DefId,\n-        conflict1: ty::Region<'tcx>,\n-        conflict2: ty::Region<'tcx>,\n-    ) -> bool;\n-\n     fn infer_opaque_definition_from_instantiation(\n         &self,\n         def_id: DefId,\n@@ -490,9 +481,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                         // ['a, 'b, 'c]`, where `'a..'c` are the\n                         // regions that appear in the impl trait.\n \n-                        // For now, enforce a feature gate outside of async functions.\n-                        self.member_constraint_feature_gate(opaque_defn, def_id, lr, subst_region);\n-\n                         return self.generate_member_constraint(\n                             concrete_ty,\n                             opaque_defn,\n@@ -559,60 +547,6 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n         });\n     }\n \n-    /// Member constraints are presently feature-gated except for\n-    /// async-await. We expect to lift this once we've had a bit more\n-    /// time.\n-    fn member_constraint_feature_gate(\n-        &self,\n-        opaque_defn: &OpaqueTypeDecl<'tcx>,\n-        opaque_type_def_id: DefId,\n-        conflict1: ty::Region<'tcx>,\n-        conflict2: ty::Region<'tcx>,\n-    ) -> bool {\n-        // If we have `#![feature(member_constraints)]`, no problems.\n-        if self.tcx.features().member_constraints {\n-            return false;\n-        }\n-\n-        let span = self.tcx.def_span(opaque_type_def_id);\n-\n-        // Without a feature-gate, we only generate member-constraints for async-await.\n-        let context_name = match opaque_defn.origin {\n-            // No feature-gate required for `async fn`.\n-            hir::OpaqueTyOrigin::AsyncFn => return false,\n-\n-            // Otherwise, generate the label we'll use in the error message.\n-            hir::OpaqueTyOrigin::Binding\n-            | hir::OpaqueTyOrigin::FnReturn\n-            | hir::OpaqueTyOrigin::TyAlias\n-            | hir::OpaqueTyOrigin::Misc => \"impl Trait\",\n-        };\n-        let msg = format!(\"ambiguous lifetime bound in `{}`\", context_name);\n-        let mut err = self.tcx.sess.struct_span_err(span, &msg);\n-\n-        let conflict1_name = conflict1.to_string();\n-        let conflict2_name = conflict2.to_string();\n-        let label_owned;\n-        let label = match (&*conflict1_name, &*conflict2_name) {\n-            (\"'_\", \"'_\") => \"the elided lifetimes here do not outlive one another\",\n-            _ => {\n-                label_owned = format!(\n-                    \"neither `{}` nor `{}` outlives the other\",\n-                    conflict1_name, conflict2_name,\n-                );\n-                &label_owned\n-            }\n-        };\n-        err.span_label(span, label);\n-\n-        if self.tcx.sess.is_nightly_build() {\n-            err.help(\"add #![feature(member_constraints)] to the crate attributes to enable\");\n-        }\n-\n-        err.emit();\n-        true\n-    }\n-\n     /// Given the fully resolved, instantiated type for an opaque\n     /// type, i.e., the value of an inference variable like C1 or C2\n     /// (*), computes the \"definition type\" for an opaque type"}, {"sha": "16382c7e7a4bdce9ce540166f8416057facbc5ef", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 94, "deletions": 1, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -383,6 +383,42 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         return None;\n                     } else {\n                         span = item_name.span;\n+\n+                        // Don't show generic arguments when the method can't be found in any implementation (#81576).\n+                        let mut ty_str_reported = ty_str.clone();\n+                        if let ty::Adt(_, ref generics) = actual.kind() {\n+                            if generics.len() > 0 {\n+                                let mut autoderef = self.autoderef(span, actual);\n+                                let candidate_found = autoderef.any(|(ty, _)| {\n+                                    if let ty::Adt(ref adt_deref, _) = ty.kind() {\n+                                        self.tcx\n+                                            .inherent_impls(adt_deref.did)\n+                                            .iter()\n+                                            .filter_map(|def_id| {\n+                                                self.associated_item(\n+                                                    *def_id,\n+                                                    item_name,\n+                                                    Namespace::ValueNS,\n+                                                )\n+                                            })\n+                                            .count()\n+                                            >= 1\n+                                    } else {\n+                                        false\n+                                    }\n+                                });\n+                                let has_deref = autoderef.step_count() > 0;\n+                                if !candidate_found\n+                                    && !has_deref\n+                                    && unsatisfied_predicates.is_empty()\n+                                {\n+                                    if let Some((path_string, _)) = ty_str.split_once('<') {\n+                                        ty_str_reported = path_string.to_string();\n+                                    }\n+                                }\n+                            }\n+                        }\n+\n                         let mut err = struct_span_err!(\n                             tcx.sess,\n                             span,\n@@ -391,7 +427,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             item_kind,\n                             item_name,\n                             actual.prefix_string(self.tcx),\n-                            ty_str,\n+                            ty_str_reported,\n                         );\n                         if let Mode::MethodCall = mode {\n                             if let SelfSource::MethodCall(call) = source {\n@@ -449,6 +485,63 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let mut label_span_not_found = || {\n                     if unsatisfied_predicates.is_empty() {\n                         err.span_label(span, format!(\"{item_kind} not found in `{ty_str}`\"));\n+                        if let ty::Adt(ref adt, _) = rcvr_ty.kind() {\n+                            let mut inherent_impls_candidate = self\n+                                .tcx\n+                                .inherent_impls(adt.did)\n+                                .iter()\n+                                .copied()\n+                                .filter(|def_id| {\n+                                    if let Some(assoc) =\n+                                        self.associated_item(*def_id, item_name, Namespace::ValueNS)\n+                                    {\n+                                        // Check for both mode is the same so we avoid suggesting\n+                                        // incorrect associated item.\n+                                        match (mode, assoc.fn_has_self_parameter, source) {\n+                                            (Mode::MethodCall, true, SelfSource::MethodCall(_)) => {\n+                                                // We check that the suggest type is actually\n+                                                // different from the received one\n+                                                // So we avoid suggestion method with Box<Self>\n+                                                // for instance\n+                                                self.tcx.at(span).type_of(*def_id) != actual\n+                                                    && self.tcx.at(span).type_of(*def_id) != rcvr_ty\n+                                            }\n+                                            (Mode::Path, false, _) => true,\n+                                            _ => false,\n+                                        }\n+                                    } else {\n+                                        false\n+                                    }\n+                                })\n+                                .collect::<Vec<_>>();\n+                            if inherent_impls_candidate.len() > 0 {\n+                                inherent_impls_candidate.sort();\n+                                inherent_impls_candidate.dedup();\n+\n+                                // number of type to shows at most.\n+                                let limit = if inherent_impls_candidate.len() == 5 { 5 } else { 4 };\n+                                let type_candidates = inherent_impls_candidate\n+                                    .iter()\n+                                    .take(limit)\n+                                    .map(|impl_item| {\n+                                        format!(\"- `{}`\", self.tcx.at(span).type_of(*impl_item))\n+                                    })\n+                                    .collect::<Vec<_>>()\n+                                    .join(\"\\n\");\n+                                let additional_types = if inherent_impls_candidate.len() > limit {\n+                                    format!(\n+                                        \"\\nand {} more types\",\n+                                        inherent_impls_candidate.len() - limit\n+                                    )\n+                                } else {\n+                                    \"\".to_string()\n+                                };\n+                                err.note(&format!(\n+                                    \"the {item_kind} was found for\\n{}{}\",\n+                                    type_candidates, additional_types\n+                                ));\n+                            }\n+                        }\n                     } else {\n                         err.span_label(span, format!(\"{item_kind} cannot be called on `{ty_str}` due to unsatisfied trait bounds\"));\n                     }"}, {"sha": "ad77e76c94f96e09fe8b320c8a227d81e462b087", "filename": "library/core/src/iter/traits/iterator.rs", "status": "modified", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Ftraits%2Fiterator.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -25,40 +25,6 @@ fn _assert_is_object_safe(_: &dyn Iterator<Item = ()>) {}\n /// [impl]: crate::iter#implementing-iterator\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_on_unimplemented(\n-    on(\n-        _Self = \"[std::ops::Range<Idx>; 1]\",\n-        label = \"if you meant to iterate between two values, remove the square brackets\",\n-        note = \"`[start..end]` is an array of one `Range`; you might have meant to have a `Range` \\\n-                without the brackets: `start..end`\"\n-    ),\n-    on(\n-        _Self = \"[std::ops::RangeFrom<Idx>; 1]\",\n-        label = \"if you meant to iterate from a value onwards, remove the square brackets\",\n-        note = \"`[start..]` is an array of one `RangeFrom`; you might have meant to have a \\\n-              `RangeFrom` without the brackets: `start..`, keeping in mind that iterating over an \\\n-              unbounded iterator will run forever unless you `break` or `return` from within the \\\n-              loop\"\n-    ),\n-    on(\n-        _Self = \"[std::ops::RangeTo<Idx>; 1]\",\n-        label = \"if you meant to iterate until a value, remove the square brackets and add a \\\n-                 starting value\",\n-        note = \"`[..end]` is an array of one `RangeTo`; you might have meant to have a bounded \\\n-                `Range` without the brackets: `0..end`\"\n-    ),\n-    on(\n-        _Self = \"[std::ops::RangeInclusive<Idx>; 1]\",\n-        label = \"if you meant to iterate between two values, remove the square brackets\",\n-        note = \"`[start..=end]` is an array of one `RangeInclusive`; you might have meant to have a \\\n-              `RangeInclusive` without the brackets: `start..=end`\"\n-    ),\n-    on(\n-        _Self = \"[std::ops::RangeToInclusive<Idx>; 1]\",\n-        label = \"if you meant to iterate until a value (including it), remove the square brackets \\\n-                 and add a starting value\",\n-        note = \"`[..=end]` is an array of one `RangeToInclusive`; you might have meant to have a \\\n-                bounded `RangeInclusive` without the brackets: `0..=end`\"\n-    ),\n     on(\n         _Self = \"std::ops::RangeTo<Idx>\",\n         label = \"if you meant to iterate until a value, add a starting value\","}, {"sha": "7b7ca8029b49dafbebc0a0062c0ec8ede0bbb2a8", "filename": "library/profiler_builtins/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/library%2Fprofiler_builtins%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/library%2Fprofiler_builtins%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fprofiler_builtins%2FCargo.toml?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -14,4 +14,4 @@ core = { path = \"../core\" }\n compiler_builtins = { version = \"0.1.0\", features = ['rustc-dep-of-std'] }\n \n [build-dependencies]\n-cc = \"1.0.67\"\n+cc = \"1.0.68\""}, {"sha": "be7e099b73a24f325c49243ba2f14d71b55d1fb3", "filename": "library/std/src/ffi/c_str.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fc_str.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -672,6 +672,7 @@ impl CString {\n     }\n \n     /// Bypass \"move out of struct which implements [`Drop`] trait\" restriction.\n+    #[inline]\n     fn into_inner(self) -> Box<[u8]> {\n         // Rationale: `mem::forget(self)` invalidates the previous call to `ptr::read(&self.inner)`\n         // so we use `ManuallyDrop` to ensure `self` is not dropped."}, {"sha": "9dac1f356578d52746081f18fecb3d2e7b119d93", "filename": "library/unwind/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/library%2Funwind%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/library%2Funwind%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Funwind%2FCargo.toml?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -21,7 +21,7 @@ compiler_builtins = \"0.1.0\"\n cfg-if = \"0.1.8\"\n \n [build-dependencies]\n-cc = \"1.0.67\"\n+cc = \"1.0.68\"\n \n [features]\n llvm-libunwind = []"}, {"sha": "8445d811e0f393f2f26d7a7757968cbbb10ae842", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -40,7 +40,7 @@ cmake = \"0.1.38\"\n filetime = \"0.2\"\n num_cpus = \"1.0\"\n getopts = \"0.2.19\"\n-cc = \"1.0.67\"\n+cc = \"1.0.68\"\n libc = \"0.2\"\n serde = { version = \"1.0.8\", features = [\"derive\"] }\n serde_json = \"1.0.2\""}, {"sha": "3ba4a3e6b1f02d169c262c23f9b4e2149c4b98ff", "filename": "src/doc/unstable-book/src/language-features/member-constraints.md", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/86ac0b4147822e23c671a40e7ba1bf5b5835150d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmember-constraints.md", "raw_url": "https://github.com/rust-lang/rust/raw/86ac0b4147822e23c671a40e7ba1bf5b5835150d/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmember-constraints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fmember-constraints.md?ref=86ac0b4147822e23c671a40e7ba1bf5b5835150d", "patch": "@@ -1,29 +0,0 @@\n-# `member_constraints`\n-\n-The tracking issue for this feature is: [#61997]\n-\n-[#61997]: https://github.com/rust-lang/rust/issues/61997\n-\n-------------------------\n-\n-The `member_constraints` feature gate lets you use `impl Trait` syntax with\n-multiple unrelated lifetime parameters.\n-\n-A simple example is:\n-\n-```rust\n-#![feature(member_constraints)]\n-\n-trait Trait<'a, 'b> { }\n-impl<T> Trait<'_, '_> for T {}\n-\n-fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Trait<'a, 'b> {\n-  (x, y)\n-}\n-\n-fn main() { }\n-```\n-\n-Without the `member_constraints` feature gate, the above example is an\n-error because both `'a` and `'b` appear in the impl Trait bounds, but\n-neither outlives the other."}, {"sha": "f1002947fb97861d62873703c41a5d4fc622da91", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-fg.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-fg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-fg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-fg.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,10 +1,9 @@\n // edition:2018\n // run-pass\n \n-// Test that a feature gate is needed to use `impl Trait` as the\n-// return type of an async.\n-\n-#![feature(member_constraints)]\n+// Test member constraints that appear in the `impl Trait`\n+// return type of an async function.\n+// (This used to require a feature gate.)\n \n trait Trait<'a, 'b> { }\n impl<T> Trait<'_, '_> for T { }"}, {"sha": "05960c0c7f6364f472a245023e9cead0afddc0e2", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-no-fg.rs", "status": "removed", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/86ac0b4147822e23c671a40e7ba1bf5b5835150d/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ac0b4147822e23c671a40e7ba1bf5b5835150d/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.rs?ref=86ac0b4147822e23c671a40e7ba1bf5b5835150d", "patch": "@@ -1,20 +0,0 @@\n-// edition:2018\n-\n-// Test that a feature gate is needed to use `impl Trait` as the\n-// return type of an async.\n-\n-trait Trait<'a, 'b> { }\n-impl<T> Trait<'_, '_> for T { }\n-\n-async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n-    //~^ ERROR ambiguous lifetime bound\n-    //~| ERROR ambiguous lifetime bound\n-    //~| ERROR ambiguous lifetime bound\n-    //~| ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-    //~| ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-    (a, b)\n-}\n-\n-fn main() {\n-    let _ = async_ret_impl_trait(&22, &44);\n-}"}, {"sha": "f65bbeaa31a732b0d0593093569e79d054f0b056", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-no-fg.stderr", "status": "removed", "additions": 0, "deletions": 43, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/86ac0b4147822e23c671a40e7ba1bf5b5835150d/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86ac0b4147822e23c671a40e7ba1bf5b5835150d/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr?ref=86ac0b4147822e23c671a40e7ba1bf5b5835150d", "patch": "@@ -1,43 +0,0 @@\n-error: ambiguous lifetime bound in `impl Trait`\n-  --> $DIR/ret-impl-trait-no-fg.rs:9:64\n-   |\n-LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n-   |                                                                ^^^^^^^^^^^^^^^^^^ neither `'a` nor `'b` outlives the other\n-   |\n-   = help: add #![feature(member_constraints)] to the crate attributes to enable\n-\n-error: ambiguous lifetime bound in `impl Trait`\n-  --> $DIR/ret-impl-trait-no-fg.rs:9:64\n-   |\n-LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n-   |                                                                ^^^^^^^^^^^^^^^^^^ neither `'a` nor `'b` outlives the other\n-   |\n-   = help: add #![feature(member_constraints)] to the crate attributes to enable\n-\n-error: ambiguous lifetime bound in `impl Trait`\n-  --> $DIR/ret-impl-trait-no-fg.rs:9:64\n-   |\n-LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n-   |                                                                ^^^^^^^^^^^^^^^^^^ the elided lifetimes here do not outlive one another\n-   |\n-   = help: add #![feature(member_constraints)] to the crate attributes to enable\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ret-impl-trait-no-fg.rs:9:1\n-   |\n-LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: hidden type `(&u8, &u8)` captures lifetime '_#5r\n-\n-error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ret-impl-trait-no-fg.rs:9:1\n-   |\n-LL | async fn async_ret_impl_trait<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: hidden type `(&u8, &u8)` captures lifetime '_#6r\n-\n-error: aborting due to 5 previous errors\n-\n-For more information about this error, try `rustc --explain E0700`."}, {"sha": "eed90772d29e39e4485f362f2b39082a3c9e1d88", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.nll.stderr?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/ret-impl-trait-one.rs:12:80\n+  --> $DIR/ret-impl-trait-one.rs:10:80\n    |\n LL |   async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n    |  ________________________________--__--__________________________________________^"}, {"sha": "7e084217c26075ee48fb846695e751c767980ddb", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -3,8 +3,6 @@\n // Test that a feature gate is needed to use `impl Trait` as the\n // return type of an async.\n \n-#![feature(member_constraints)]\n-\n trait Trait<'a> { }\n impl<T> Trait<'_> for T { }\n "}, {"sha": "8e28605721cb5f313b2b538de5f8369cd5803cca", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-one.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-one.stderr?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,5 +1,5 @@\n error[E0623]: lifetime mismatch\n-  --> $DIR/ret-impl-trait-one.rs:12:65\n+  --> $DIR/ret-impl-trait-one.rs:10:65\n    |\n LL | async fn async_ret_impl_trait1<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a> {\n    |                                           ------                ^^^^^^^^^^^^^^"}, {"sha": "fe6b12968c110a6d4f6c7bc0934ec0d7fffbb412", "filename": "src/test/ui/confuse-field-and-method/issue-18343.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-18343.stderr?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `closure` found for struct `Obj<[closure@$DIR/issue-18343.rs:6:28: 6:33]>` in the current scope\n+error[E0599]: no method named `closure` found for struct `Obj` in the current scope\n   --> $DIR/issue-18343.rs:7:7\n    |\n LL | struct Obj<F> where F: FnMut() -> u32 {"}, {"sha": "0480958e99c0554ffe02ab7d26f1e9bea3d76594", "filename": "src/test/ui/confuse-field-and-method/issue-2392.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconfuse-field-and-method%2Fissue-2392.stderr?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `closure` found for struct `Obj<[closure@$DIR/issue-2392.rs:35:36: 35:41]>` in the current scope\n+error[E0599]: no method named `closure` found for struct `Obj` in the current scope\n   --> $DIR/issue-2392.rs:36:15\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n@@ -12,7 +12,7 @@ help: to call the function stored in `closure`, surround the field access with p\n LL |     (o_closure.closure)();\n    |     ^                 ^\n \n-error[E0599]: no method named `not_closure` found for struct `Obj<[closure@$DIR/issue-2392.rs:35:36: 35:41]>` in the current scope\n+error[E0599]: no method named `not_closure` found for struct `Obj` in the current scope\n   --> $DIR/issue-2392.rs:38:15\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n@@ -23,7 +23,7 @@ LL |     o_closure.not_closure();\n    |               |\n    |               field, not a method\n \n-error[E0599]: no method named `closure` found for struct `Obj<fn() -> u32 {func}>` in the current scope\n+error[E0599]: no method named `closure` found for struct `Obj` in the current scope\n   --> $DIR/issue-2392.rs:42:12\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n@@ -65,7 +65,7 @@ help: to call the function stored in `boxed_closure`, surround the field access\n LL |     (boxed_closure.boxed_closure)();\n    |     ^                           ^\n \n-error[E0599]: no method named `closure` found for struct `Obj<fn() -> u32 {func}>` in the current scope\n+error[E0599]: no method named `closure` found for struct `Obj` in the current scope\n   --> $DIR/issue-2392.rs:53:12\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n@@ -79,7 +79,7 @@ help: to call the function stored in `closure`, surround the field access with p\n LL |     (w.wrap.closure)();\n    |     ^              ^\n \n-error[E0599]: no method named `not_closure` found for struct `Obj<fn() -> u32 {func}>` in the current scope\n+error[E0599]: no method named `not_closure` found for struct `Obj` in the current scope\n   --> $DIR/issue-2392.rs:55:12\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {\n@@ -90,7 +90,7 @@ LL |     w.wrap.not_closure();\n    |            |\n    |            field, not a method\n \n-error[E0599]: no method named `closure` found for struct `Obj<Box<(dyn FnOnce() -> u32 + 'static)>>` in the current scope\n+error[E0599]: no method named `closure` found for struct `Obj` in the current scope\n   --> $DIR/issue-2392.rs:58:24\n    |\n LL | struct Obj<F> where F: FnOnce() -> u32 {"}, {"sha": "f6a92b0d0bfb53f7b4edd6a2e9f256058b90977c", "filename": "src/test/ui/feature-gates/feature-gate-member-constraints.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/86ac0b4147822e23c671a40e7ba1bf5b5835150d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/86ac0b4147822e23c671a40e7ba1bf5b5835150d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.rs?ref=86ac0b4147822e23c671a40e7ba1bf5b5835150d", "patch": "@@ -1,10 +0,0 @@\n-trait Trait<'a, 'b> {}\n-impl<T> Trait<'_, '_> for T {}\n-\n-fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Trait<'a, 'b> {\n-    //~^ ERROR ambiguous lifetime bound\n-    //~| ERROR ambiguous lifetime bound\n-    (x, y)\n-}\n-\n-fn main() {}"}, {"sha": "c2ec7ae16a3a6a97f1008362a5b64ff38486baa8", "filename": "src/test/ui/feature-gates/feature-gate-member-constraints.stderr", "status": "removed", "additions": 0, "deletions": 18, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/86ac0b4147822e23c671a40e7ba1bf5b5835150d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/86ac0b4147822e23c671a40e7ba1bf5b5835150d/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-member-constraints.stderr?ref=86ac0b4147822e23c671a40e7ba1bf5b5835150d", "patch": "@@ -1,18 +0,0 @@\n-error: ambiguous lifetime bound in `impl Trait`\n-  --> $DIR/feature-gate-member-constraints.rs:4:43\n-   |\n-LL | fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Trait<'a, 'b> {\n-   |                                           ^^^^^^^^^^^^^^^^^^ neither `'a` nor `'b` outlives the other\n-   |\n-   = help: add #![feature(member_constraints)] to the crate attributes to enable\n-\n-error: ambiguous lifetime bound in `impl Trait`\n-  --> $DIR/feature-gate-member-constraints.rs:4:43\n-   |\n-LL | fn foo<'a, 'b>(x: &'a u32, y: &'b u32) -> impl Trait<'a, 'b> {\n-   |                                           ^^^^^^^^^^^^^^^^^^ the elided lifetimes here do not outlive one another\n-   |\n-   = help: add #![feature(member_constraints)] to the crate attributes to enable\n-\n-error: aborting due to 2 previous errors\n-"}, {"sha": "ff99d037d198f4bbeb53a6f1834d36c9785e1edb", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.full_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.full_tait.stderr?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/error-handling.rs:6:32\n+  --> $DIR/error-handling.rs:5:32\n    |\n LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n@@ -8,7 +8,7 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n error: lifetime may not live long enough\n-  --> $DIR/error-handling.rs:26:16\n+  --> $DIR/error-handling.rs:25:16\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        --  -- lifetime `'b` defined here"}, {"sha": "4b23ba81604a9c7a51822e8e8196c2bd32b2dc0c", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.min_tait.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.min_tait.stderr?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,5 +1,5 @@\n error: lifetime may not live long enough\n-  --> $DIR/error-handling.rs:26:16\n+  --> $DIR/error-handling.rs:25:16\n    |\n LL | fn foo<'a, 'b, 'c>(x: &'static i32, mut y: &'a i32) -> E<'b, 'c> {\n    |        --  -- lifetime `'b` defined here"}, {"sha": "1ead78e02ed45ee8b014fed06b58d238094824a0", "filename": "src/test/ui/impl-trait/multiple-lifetimes/error-handling.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Ferror-handling.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,6 +1,5 @@\n // compile-flags:-Zborrowck=mir\n \n-#![feature(member_constraints)]\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]"}, {"sha": "41b6a9eb0551f8a5aa655e6e32549ce36f869287", "filename": "src/test/ui/impl-trait/multiple-lifetimes/inverse-bounds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Finverse-bounds.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -3,8 +3,6 @@\n // revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n \n-#![feature(member_constraints)]\n-\n trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}\n "}, {"sha": "d0277336b25fd8b5f4d3966437ea737a642b7aeb", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-elided.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-elided.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-elided.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-elided.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -3,10 +3,8 @@\n // revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n \n-#![feature(member_constraints)]\n-\n-trait Trait<'a, 'b> { }\n-impl<T> Trait<'_, '_> for T { }\n+trait Trait<'a, 'b> {}\n+impl<T> Trait<'_, '_> for T {}\n \n // Test case where we have elision in the impl trait and we have to\n // pick the right region.\n@@ -26,4 +24,4 @@ fn upper_bounds3<'b>(a: &u8) -> impl Trait<'_, 'b> {\n     (a, a)\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "b9857b7aa2f1d7a3738366a919babba70934009e", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original-type-alias-impl-trait.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-type-alias-impl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-type-alias-impl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original-type-alias-impl-trait.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -3,10 +3,9 @@\n // revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n \n-#![feature(member_constraints)]\n #![feature(min_type_alias_impl_trait)]\n-trait Trait<'a, 'b> { }\n-impl<T> Trait<'_, '_> for T { }\n+trait Trait<'a, 'b> {}\n+impl<T> Trait<'_, '_> for T {}\n \n // Here we wind up selecting `'a` and `'b` in the hidden type because\n // those are the types that appear in the original values.\n@@ -28,4 +27,4 @@ fn upper_bounds<'a, 'b>(a: &'a u8, b: &'b u8) -> Foo<'a, 'b> {\n     (a, b)\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "be455f5335083d0cf30650e7ffa8eeda49791f9d", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-original.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-original.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -3,10 +3,8 @@\n // revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n \n-#![feature(member_constraints)]\n-\n-trait Trait<'a, 'b> { }\n-impl<T> Trait<'_, '_> for T { }\n+trait Trait<'a, 'b> {}\n+impl<T> Trait<'_, '_> for T {}\n \n // Here we wind up selecting `'a` and `'b` in the hidden type because\n // those are the types that appear in the original values.\n@@ -26,4 +24,4 @@ fn upper_bounds<'a, 'b>(a: &'a u8, b: &'b u8) -> impl Trait<'a, 'b> {\n     (a, b)\n }\n \n-fn main() { }\n+fn main() {}"}, {"sha": "7235d89019f0eec923a92ceaa9b9bb5712caf19f", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-pick-other.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-other.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-other.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-pick-other.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -3,8 +3,6 @@\n // revisions: migrate mir\n //[mir]compile-flags: -Z borrowck=mir\n \n-#![feature(member_constraints)]\n-\n trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}\n "}, {"sha": "8cf89f164b16dd7e0aa9864c35c3860a18790ab7", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,5 +1,5 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ordinary-bounds-unrelated.rs:18:74\n+  --> $DIR/ordinary-bounds-unrelated.rs:16:74\n    |\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n    |                                                                          ^^^^^^^^^^^^^^^^^^"}, {"sha": "3a97624647efd79be70c7549def20b0c8631c466", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(member_constraints)]\n-\n trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}\n "}, {"sha": "a6bc8fec2838efb3f09f7551f3bb0f21b132e384", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.stderr?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,11 +1,11 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ordinary-bounds-unrelated.rs:18:74\n+  --> $DIR/ordinary-bounds-unrelated.rs:16:74\n    |\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n    |                                                                          ^^^^^^^^^^^^^^^^^^\n    |\n note: hidden type `Ordinary<'_>` captures lifetime smaller than the function body\n-  --> $DIR/ordinary-bounds-unrelated.rs:18:74\n+  --> $DIR/ordinary-bounds-unrelated.rs:16:74\n    |\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n    |                                                                          ^^^^^^^^^^^^^^^^^^"}, {"sha": "1bcb28120ed1bb955cdbadc90bbad5c7ac62c5a5", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,5 +1,5 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ordinary-bounds-unsuited.rs:20:62\n+  --> $DIR/ordinary-bounds-unsuited.rs:18:62\n    |\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n    |                                                              ^^^^^^^^^^^^^^^^^^"}, {"sha": "d4c60a4e89209c883a82972c11c7086f0749ea43", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,7 +1,5 @@\n // edition:2018\n \n-#![feature(member_constraints)]\n-\n trait Trait<'a, 'b> {}\n impl<T> Trait<'_, '_> for T {}\n \n@@ -18,7 +16,7 @@ struct Ordinary<'a>(&'a u8);\n // consider the loans for both `'a` and `'b` alive.\n \n fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n-    //~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds\n+//~^ ERROR hidden type for `impl Trait` captures lifetime that does not appear in bounds\n {\n     // We return a value:\n     //"}, {"sha": "a219e74741541f68316b3e6d39297c1d84d5affe", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.stderr?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,11 +1,11 @@\n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n-  --> $DIR/ordinary-bounds-unsuited.rs:20:62\n+  --> $DIR/ordinary-bounds-unsuited.rs:18:62\n    |\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n    |                                                              ^^^^^^^^^^^^^^^^^^\n    |\n note: hidden type `Ordinary<'_>` captures lifetime smaller than the function body\n-  --> $DIR/ordinary-bounds-unsuited.rs:20:62\n+  --> $DIR/ordinary-bounds-unsuited.rs:18:62\n    |\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n    |                                                              ^^^^^^^^^^^^^^^^^^"}, {"sha": "c4bcfe5b28133fae9746cccb709f9b260e74d782", "filename": "src/test/ui/impl-trait/needs_least_region_or_bound.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fneeds_least_region_or_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fimpl-trait%2Fneeds_least_region_or_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fneeds_least_region_or_bound.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,7 +1,5 @@\n // check-pass\n \n-#![feature(member_constraints)]\n-\n trait MultiRegionTrait<'a, 'b> {}\n impl<'a, 'b> MultiRegionTrait<'a, 'b> for (&'a u32, &'b u32) {}\n "}, {"sha": "e9d934332f171f6402a5f296c5bc780903aef40a", "filename": "src/test/ui/issues/issue-30123.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fissues%2Fissue-30123.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fissues%2Fissue-30123.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-30123.stderr?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -3,6 +3,9 @@ error[E0599]: no function or associated item named `new_undirected` found for st\n    |\n LL |     let ug = Graph::<i32, i32>::new_undirected();\n    |                                 ^^^^^^^^^^^^^^ function or associated item not found in `issue_30123_aux::Graph<i32, i32>`\n+   |\n+   = note: the function or associated item was found for\n+           - `issue_30123_aux::Graph<N, E, Undirected>`\n \n error: aborting due to previous error\n "}, {"sha": "017dd831f712a22a3ff23acc870d43c490e0c12f", "filename": "src/test/ui/issues/issue-41880.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fissues%2Fissue-41880.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fissues%2Fissue-41880.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-41880.stderr?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,4 +1,4 @@\n-error[E0599]: no method named `iter` found for struct `Iterate<{integer}, [closure@$DIR/issue-41880.rs:26:24: 26:31]>` in the current scope\n+error[E0599]: no method named `iter` found for struct `Iterate` in the current scope\n   --> $DIR/issue-41880.rs:27:24\n    |\n LL | pub struct Iterate<T, F> {"}, {"sha": "3df928b5d804db01e868ea0f9277252d43d18d97", "filename": "src/test/ui/methods/method-not-found-generic-arg-elision.rs", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -0,0 +1,106 @@\n+// Test for issue 81576\n+// Remove generic arguments if no method is found for all possible generic argument\n+\n+use std::marker::PhantomData;\n+\n+struct Wrapper2<'a, T, const C: usize> {\n+    x: &'a T,\n+}\n+\n+impl<'a, const C: usize> Wrapper2<'a, i8, C> {\n+    fn method(&self) {}\n+}\n+\n+impl<'a, const C: usize> Wrapper2<'a, i16, C> {\n+    fn method(&self) {}\n+}\n+\n+impl<'a, const C: usize> Wrapper2<'a, i32, C> {\n+    fn method(&self) {}\n+}\n+struct Wrapper<T>(T);\n+\n+impl Wrapper<i8> {\n+    fn method(&self) {}\n+}\n+\n+impl Wrapper<i16> {\n+    fn method(&self) {}\n+}\n+\n+impl Wrapper<i32> {\n+    fn method(&self) {}\n+}\n+\n+impl Wrapper<i64> {\n+    fn method(&self) {}\n+}\n+\n+impl Wrapper<u8> {\n+    fn method(&self) {}\n+}\n+\n+impl Wrapper<u16> {\n+    fn method(&self) {}\n+}\n+\n+struct Point<T> {\n+    x: T,\n+    y: T,\n+}\n+\n+impl Point<f64> {\n+    fn distance(&self) -> f64 {\n+        self.x.hypot(self.y)\n+    }\n+}\n+\n+struct Other;\n+\n+impl Other {\n+    fn other(&self) {}\n+}\n+\n+struct Struct<T>{\n+    _phatom: PhantomData<T>\n+}\n+\n+impl<T> Default for Struct<T> {\n+    fn default() -> Self {\n+        Self{ _phatom: PhantomData }\n+    }\n+}\n+\n+impl<T: Clone + Copy + PartialEq + Eq + PartialOrd + Ord> Struct<T> {\n+    fn method(&self) {}\n+}\n+\n+fn main() {\n+    let point_f64 = Point{ x: 1_f64, y: 1_f64};\n+    let d = point_f64.distance();\n+    let point_i32 = Point{ x: 1_i32, y: 1_i32};\n+    let d = point_i32.distance();\n+    //~^ ERROR no method named `distance` found for struct `Point<i32>\n+    let d = point_i32.other();\n+    //~^ ERROR no method named `other` found for struct `Point\n+    let v = vec![1_i32, 2, 3];\n+    v.iter().map(|x| x * x).extend(std::iter::once(100));\n+    //~^ ERROR no method named `extend` found for struct `Map\n+    let wrapper = Wrapper(true);\n+    wrapper.method();\n+    //~^ ERROR no method named `method` found for struct `Wrapper<bool>\n+    wrapper.other();\n+    //~^ ERROR no method named `other` found for struct `Wrapper\n+    let boolean = true;\n+    let wrapper = Wrapper2::<'_, _, 3> {x: &boolean};\n+    wrapper.method();\n+    //~^ ERROR no method named `method` found for struct `Wrapper2<'_, bool, 3_usize>\n+    wrapper.other();\n+    //~^ ERROR no method named `other` found for struct `Wrapper2\n+    let a = vec![1, 2, 3];\n+    a.not_found();\n+    //~^ ERROR no method named `not_found` found for struct `Vec\n+    let s = Struct::<f64>::default();\n+    s.method();\n+    //~^ ERROR the method `method` exists for struct `Struct<f64>`, but its trait bounds were not satisfied\n+}"}, {"sha": "1671e5e5e64c81d97a9802349d580053c765a01d", "filename": "src/test/ui/methods/method-not-found-generic-arg-elision.stderr", "status": "added", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmethods%2Fmethod-not-found-generic-arg-elision.stderr?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -0,0 +1,97 @@\n+error[E0599]: no method named `distance` found for struct `Point<i32>` in the current scope\n+  --> $DIR/method-not-found-generic-arg-elision.rs:82:23\n+   |\n+LL | struct Point<T> {\n+   | --------------- method `distance` not found for this\n+...\n+LL |     let d = point_i32.distance();\n+   |                       ^^^^^^^^ method not found in `Point<i32>`\n+   |\n+   = note: the method was found for\n+           - `Point<f64>`\n+\n+error[E0599]: no method named `other` found for struct `Point` in the current scope\n+  --> $DIR/method-not-found-generic-arg-elision.rs:84:23\n+   |\n+LL | struct Point<T> {\n+   | --------------- method `other` not found for this\n+...\n+LL |     let d = point_i32.other();\n+   |                       ^^^^^ method not found in `Point<i32>`\n+\n+error[E0599]: no method named `extend` found for struct `Map` in the current scope\n+  --> $DIR/method-not-found-generic-arg-elision.rs:87:29\n+   |\n+LL |     v.iter().map(|x| x * x).extend(std::iter::once(100));\n+   |                             ^^^^^^ method not found in `Map<std::slice::Iter<'_, i32>, [closure@$DIR/method-not-found-generic-arg-elision.rs:87:18: 87:27]>`\n+\n+error[E0599]: no method named `method` found for struct `Wrapper<bool>` in the current scope\n+  --> $DIR/method-not-found-generic-arg-elision.rs:90:13\n+   |\n+LL | struct Wrapper<T>(T);\n+   | --------------------- method `method` not found for this\n+...\n+LL |     wrapper.method();\n+   |             ^^^^^^ method not found in `Wrapper<bool>`\n+   |\n+   = note: the method was found for\n+           - `Wrapper<i8>`\n+           - `Wrapper<i16>`\n+           - `Wrapper<i32>`\n+           - `Wrapper<i64>`\n+           and 2 more types\n+\n+error[E0599]: no method named `other` found for struct `Wrapper` in the current scope\n+  --> $DIR/method-not-found-generic-arg-elision.rs:92:13\n+   |\n+LL | struct Wrapper<T>(T);\n+   | --------------------- method `other` not found for this\n+...\n+LL |     wrapper.other();\n+   |             ^^^^^ method not found in `Wrapper<bool>`\n+\n+error[E0599]: no method named `method` found for struct `Wrapper2<'_, bool, 3_usize>` in the current scope\n+  --> $DIR/method-not-found-generic-arg-elision.rs:96:13\n+   |\n+LL | struct Wrapper2<'a, T, const C: usize> {\n+   | -------------------------------------- method `method` not found for this\n+...\n+LL |     wrapper.method();\n+   |             ^^^^^^ method not found in `Wrapper2<'_, bool, 3_usize>`\n+   |\n+   = note: the method was found for\n+           - `Wrapper2<'a, i8, C>`\n+           - `Wrapper2<'a, i16, C>`\n+           - `Wrapper2<'a, i32, C>`\n+\n+error[E0599]: no method named `other` found for struct `Wrapper2` in the current scope\n+  --> $DIR/method-not-found-generic-arg-elision.rs:98:13\n+   |\n+LL | struct Wrapper2<'a, T, const C: usize> {\n+   | -------------------------------------- method `other` not found for this\n+...\n+LL |     wrapper.other();\n+   |             ^^^^^ method not found in `Wrapper2<'_, bool, 3_usize>`\n+\n+error[E0599]: no method named `not_found` found for struct `Vec<{integer}>` in the current scope\n+  --> $DIR/method-not-found-generic-arg-elision.rs:101:7\n+   |\n+LL |     a.not_found();\n+   |       ^^^^^^^^^ method not found in `Vec<{integer}>`\n+\n+error[E0599]: the method `method` exists for struct `Struct<f64>`, but its trait bounds were not satisfied\n+  --> $DIR/method-not-found-generic-arg-elision.rs:104:7\n+   |\n+LL | struct Struct<T>{\n+   | ---------------- method `method` not found for this\n+...\n+LL |     s.method();\n+   |       ^^^^^^ method cannot be called on `Struct<f64>` due to unsatisfied trait bounds\n+   |\n+   = note: the following trait bounds were not satisfied:\n+           `f64: Eq`\n+           `f64: Ord`\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0599`."}, {"sha": "05b63a00dfb15da83324b3223420ad41ae0fab6e", "filename": "src/test/ui/type-alias-impl-trait/issue-74761.full_tait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.full_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.full_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.full_tait.stderr?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,5 +1,5 @@\n warning: the feature `type_alias_impl_trait` is incomplete and may not be safe to use and/or cause compiler crashes\n-  --> $DIR/issue-74761.rs:4:32\n+  --> $DIR/issue-74761.rs:3:32\n    |\n LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    |                                ^^^^^^^^^^^^^^^^^^^^^\n@@ -8,13 +8,13 @@ LL | #![cfg_attr(full_tait, feature(type_alias_impl_trait))]\n    = note: see issue #63063 <https://github.com/rust-lang/rust/issues/63063> for more information\n \n error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761.rs:11:6\n+  --> $DIR/issue-74761.rs:10:6\n    |\n LL | impl<'a, 'b> A for () {\n    |      ^^ unconstrained lifetime parameter\n \n error[E0207]: the lifetime parameter `'b` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761.rs:11:10\n+  --> $DIR/issue-74761.rs:10:10\n    |\n LL | impl<'a, 'b> A for () {\n    |          ^^ unconstrained lifetime parameter"}, {"sha": "ad111e23b15b51bc4cfb6b40c8fa3ddfd01c007c", "filename": "src/test/ui/type-alias-impl-trait/issue-74761.min_tait.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.min_tait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.min_tait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.min_tait.stderr?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,11 +1,11 @@\n error[E0207]: the lifetime parameter `'a` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761.rs:11:6\n+  --> $DIR/issue-74761.rs:10:6\n    |\n LL | impl<'a, 'b> A for () {\n    |      ^^ unconstrained lifetime parameter\n \n error[E0207]: the lifetime parameter `'b` is not constrained by the impl trait, self type, or predicates\n-  --> $DIR/issue-74761.rs:11:10\n+  --> $DIR/issue-74761.rs:10:10\n    |\n LL | impl<'a, 'b> A for () {\n    |          ^^ unconstrained lifetime parameter"}, {"sha": "bbc67ecc97aab72eb05840c681a95b2d39aebd48", "filename": "src/test/ui/type-alias-impl-trait/issue-74761.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fissue-74761.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -1,4 +1,3 @@\n-#![feature(member_constraints)]\n // revisions: min_tait full_tait\n #![feature(min_type_alias_impl_trait)]\n #![cfg_attr(full_tait, feature(type_alias_impl_trait))]"}, {"sha": "72f7b67477712cbcba005208cf04cfa1b40eada5", "filename": "src/test/ui/unsafe/issue-85435-unsafe-op-in-let-under-unsafe-under-closure.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Funsafe%2Fissue-85435-unsafe-op-in-let-under-unsafe-under-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4ec606606850a5a3eba31da88ccd338ee8e8da5/src%2Ftest%2Fui%2Funsafe%2Fissue-85435-unsafe-op-in-let-under-unsafe-under-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Fissue-85435-unsafe-op-in-let-under-unsafe-under-closure.rs?ref=c4ec606606850a5a3eba31da88ccd338ee8e8da5", "patch": "@@ -0,0 +1,27 @@\n+// check-pass\n+// revisions: mir thir\n+// [thir]compile-flags: -Z thir-unsafeck\n+\n+// This is issue #85435. But the real story is reflected in issue #85561, where\n+// a bug in the implementation of feature(capture_disjoint_fields) () was\n+// exposed to non-feature-gated code by a diagnostic changing PR that removed\n+// the gating in one case.\n+\n+// This test is double-checking that the case of interest continues to work as\n+// expected in the *absence* of that feature gate. At the time of this writing,\n+// enabling the feature gate will cause this test to fail. We obviously cannot\n+// stabilize that feature until it can correctly handle this test.\n+\n+fn main() {\n+    let val: u8 = 5;\n+    let u8_ptr: *const u8 = &val;\n+    let _closure = || {\n+        unsafe {\n+            let tmp = *u8_ptr;\n+            tmp\n+\n+            // Just dereferencing and returning directly compiles fine:\n+            // *u8_ptr\n+        }\n+    };\n+}"}]}