{"sha": "9f83e2290a978ef448567e55548a192f8b8f1f69", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmODNlMjI5MGE5NzhlZjQ0ODU2N2U1NTU0OGExOTJmOGI4ZjFmNjk=", "commit": {"author": {"name": "Andrey Cherkashin", "email": "andoriyu@gmail.com", "date": "2021-05-01T00:16:09Z"}, "committer": {"name": "Andrey Cherkashin", "email": "andoriyu@gmail.com", "date": "2021-05-01T00:16:09Z"}, "message": "Better output for junit formatter", "tree": {"sha": "4b90e3da78334a6677fe6620a6648b4f8399939e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b90e3da78334a6677fe6620a6648b4f8399939e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f83e2290a978ef448567e55548a192f8b8f1f69", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f83e2290a978ef448567e55548a192f8b8f1f69", "html_url": "https://github.com/rust-lang/rust/commit/9f83e2290a978ef448567e55548a192f8b8f1f69", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f83e2290a978ef448567e55548a192f8b8f1f69/comments", "author": {"login": "andoriyu", "id": 148123, "node_id": "MDQ6VXNlcjE0ODEyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/148123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andoriyu", "html_url": "https://github.com/andoriyu", "followers_url": "https://api.github.com/users/andoriyu/followers", "following_url": "https://api.github.com/users/andoriyu/following{/other_user}", "gists_url": "https://api.github.com/users/andoriyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/andoriyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andoriyu/subscriptions", "organizations_url": "https://api.github.com/users/andoriyu/orgs", "repos_url": "https://api.github.com/users/andoriyu/repos", "events_url": "https://api.github.com/users/andoriyu/events{/privacy}", "received_events_url": "https://api.github.com/users/andoriyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "andoriyu", "id": 148123, "node_id": "MDQ6VXNlcjE0ODEyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/148123?v=4", "gravatar_id": "", "url": "https://api.github.com/users/andoriyu", "html_url": "https://github.com/andoriyu", "followers_url": "https://api.github.com/users/andoriyu/followers", "following_url": "https://api.github.com/users/andoriyu/following{/other_user}", "gists_url": "https://api.github.com/users/andoriyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/andoriyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/andoriyu/subscriptions", "organizations_url": "https://api.github.com/users/andoriyu/orgs", "repos_url": "https://api.github.com/users/andoriyu/repos", "events_url": "https://api.github.com/users/andoriyu/events{/privacy}", "received_events_url": "https://api.github.com/users/andoriyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b4d06ae829ef01de7cb4c0048db5c7577094ba5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b4d06ae829ef01de7cb4c0048db5c7577094ba5", "html_url": "https://github.com/rust-lang/rust/commit/4b4d06ae829ef01de7cb4c0048db5c7577094ba5"}], "stats": {"total": 64, "additions": 52, "deletions": 12}, "files": [{"sha": "ec66fc1219ff7fd4df997f8209432f658abb882b", "filename": "library/test/src/formatters/junit.rs", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/9f83e2290a978ef448567e55548a192f8b8f1f69/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f83e2290a978ef448567e55548a192f8b8f1f69/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fformatters%2Fjunit.rs?ref=9f83e2290a978ef448567e55548a192f8b8f1f69", "patch": "@@ -6,7 +6,7 @@ use crate::{\n     console::{ConsoleTestState, OutputLocation},\n     test_result::TestResult,\n     time,\n-    types::TestDesc,\n+    types::{TestDesc, TestType},\n };\n \n pub struct JunitFormatter<T> {\n@@ -70,13 +70,15 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n             state.failed, state.total, state.ignored\n         ))?;\n         for (desc, result, duration) in std::mem::replace(&mut self.results, Vec::new()) {\n+            let (class_name, test_name) = parse_class_name(&desc);\n             match result {\n                 TestResult::TrIgnored => { /* no-op */ }\n                 TestResult::TrFailed => {\n                     self.write_message(&*format!(\n-                        \"<testcase classname=\\\"test.global\\\" \\\n+                        \"<testcase classname=\\\"{}\\\" \\\n                          name=\\\"{}\\\" time=\\\"{}\\\">\",\n-                        desc.name.as_slice(),\n+                        class_name,\n+                        test_name,\n                         duration.as_secs()\n                     ))?;\n                     self.write_message(\"<failure type=\\\"assert\\\"/>\")?;\n@@ -85,9 +87,10 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n \n                 TestResult::TrFailedMsg(ref m) => {\n                     self.write_message(&*format!(\n-                        \"<testcase classname=\\\"test.global\\\" \\\n+                        \"<testcase classname=\\\"{}\\\" \\\n                          name=\\\"{}\\\" time=\\\"{}\\\">\",\n-                        desc.name.as_slice(),\n+                        class_name,\n+                        test_name,\n                         duration.as_secs()\n                     ))?;\n                     self.write_message(&*format!(\"<failure message=\\\"{}\\\" type=\\\"assert\\\"/>\", m))?;\n@@ -96,9 +99,10 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n \n                 TestResult::TrTimedFail => {\n                     self.write_message(&*format!(\n-                        \"<testcase classname=\\\"test.global\\\" \\\n+                        \"<testcase classname=\\\"{}\\\" \\\n                          name=\\\"{}\\\" time=\\\"{}\\\">\",\n-                        desc.name.as_slice(),\n+                        class_name,\n+                        test_name,\n                         duration.as_secs()\n                     ))?;\n                     self.write_message(\"<failure type=\\\"timeout\\\"/>\")?;\n@@ -107,18 +111,18 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n \n                 TestResult::TrBench(ref b) => {\n                     self.write_message(&*format!(\n-                        \"<testcase classname=\\\"benchmark.global\\\" \\\n+                        \"<testcase classname=\\\"benchmark::{}\\\" \\\n                          name=\\\"{}\\\" time=\\\"{}\\\" />\",\n-                        desc.name.as_slice(),\n-                        b.ns_iter_summ.sum\n+                        class_name, test_name, b.ns_iter_summ.sum\n                     ))?;\n                 }\n \n                 TestResult::TrOk | TestResult::TrAllowedFail => {\n                     self.write_message(&*format!(\n-                        \"<testcase classname=\\\"test.global\\\" \\\n+                        \"<testcase classname=\\\"{}\\\" \\\n                          name=\\\"{}\\\" time=\\\"{}\\\"/>\",\n-                        desc.name.as_slice(),\n+                        class_name,\n+                        test_name,\n                         duration.as_secs()\n                     ))?;\n                 }\n@@ -132,3 +136,39 @@ impl<T: Write> OutputFormatter for JunitFormatter<T> {\n         Ok(state.failed == 0)\n     }\n }\n+\n+fn parse_class_name(desc: &TestDesc) -> (String, String) {\n+    match desc.test_type {\n+        TestType::UnitTest => parse_class_name_unit(desc),\n+        TestType::DocTest => parse_class_name_doc(desc),\n+        TestType::IntegrationTest => parse_class_name_integration(desc),\n+        TestType::Unknown => (String::from(\"unknown\"), String::from(desc.name.as_slice())),\n+    }\n+}\n+\n+fn parse_class_name_unit(desc: &TestDesc) -> (String, String) {\n+    // Module path => classname\n+    // Function name => name\n+    let module_segments: Vec<&str> = desc.name.as_slice().split(\"::\").collect();\n+    let (class_name, test_name) = match module_segments[..] {\n+        [test] => (String::from(\"crate\"), String::from(test)),\n+        [ref path @ .., test] => (path.join(\"::\"), String::from(test)),\n+        [..] => unreachable!(),\n+    };\n+    (class_name, test_name)\n+}\n+\n+fn parse_class_name_doc(desc: &TestDesc) -> (String, String) {\n+    // File path => classname\n+    // Line # => test name\n+    let segments: Vec<&str> = desc.name.as_slice().split(\" - \").collect();\n+    let (class_name, test_name) = match segments[..] {\n+        [file, line] => (String::from(file.trim()), String::from(line.trim())),\n+        [..] => unreachable!(),\n+    };\n+    (class_name, test_name)\n+}\n+\n+fn parse_class_name_integration(desc: &TestDesc) -> (String, String) {\n+    (String::from(\"integration\"), String::from(desc.name.as_slice()))\n+}"}]}