{"sha": "f78eb1434152224dae7d0f48528b5b0c064e9bc6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY3OGViMTQzNDE1MjIyNGRhZTdkMGY0ODUyOGI1YjBjMDY0ZTliYzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-22T03:11:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-22T03:11:27Z"}, "message": "auto merge of #14307 : kballard/rust/vim_prelude_mutablecloneablevector, r=cmr\n\nAdd slice::MutableCloneableVector to the prelude. It's the only slice\r\ntrait that's currently missing.\r\n\r\nUpdate rust.vim to match the latest prelude and current set of keywords.\r\nAlso teach it to handle box placement expressions specially.", "tree": {"sha": "142e9bff294241a245793aa06b654866651760c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/142e9bff294241a245793aa06b654866651760c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f78eb1434152224dae7d0f48528b5b0c064e9bc6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f78eb1434152224dae7d0f48528b5b0c064e9bc6", "html_url": "https://github.com/rust-lang/rust/commit/f78eb1434152224dae7d0f48528b5b0c064e9bc6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f78eb1434152224dae7d0f48528b5b0c064e9bc6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "257a73ce8273d026f2af1a5021ae2d1a4e7b95e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/257a73ce8273d026f2af1a5021ae2d1a4e7b95e5", "html_url": "https://github.com/rust-lang/rust/commit/257a73ce8273d026f2af1a5021ae2d1a4e7b95e5"}, {"sha": "bf0c6d8166b1b1a3c45a3131a6f019ed8a005a1f", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf0c6d8166b1b1a3c45a3131a6f019ed8a005a1f", "html_url": "https://github.com/rust-lang/rust/commit/bf0c6d8166b1b1a3c45a3131a6f019ed8a005a1f"}], "stats": {"total": 76, "additions": 47, "deletions": 29}, "files": [{"sha": "29e597589d20232543211be7bc28ef7f699a6be8", "filename": "src/etc/vim/syntax/rust.vim", "status": "modified", "additions": 43, "deletions": 25, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f78eb1434152224dae7d0f48528b5b0c064e9bc6/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "raw_url": "https://github.com/rust-lang/rust/raw/f78eb1434152224dae7d0f48528b5b0c064e9bc6/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fvim%2Fsyntax%2Frust.vim?ref=f78eb1434152224dae7d0f48528b5b0c064e9bc6", "patch": "@@ -18,30 +18,40 @@ syn keyword   rustOperator    as\n \n syn match     rustAssert      \"\\<assert\\(\\w\\)*!\" contained\n syn match     rustFail        \"\\<fail\\(\\w\\)*!\" contained\n-syn keyword   rustKeyword     break box continue\n-syn keyword   rustKeyword     extern nextgroup=rustExternCrate,rustObsoleteExternMod skipwhite\n+syn keyword   rustKeyword     break\n+syn keyword   rustKeyword     box nextgroup=rustBoxPlacement skipwhite skipempty\n+syn keyword   rustKeyword     continue\n+syn keyword   rustKeyword     extern nextgroup=rustExternCrate,rustObsoleteExternMod skipwhite skipempty\n+syn keyword   rustKeyword     fn nextgroup=rustFuncName skipwhite skipempty\n syn keyword   rustKeyword     for in if impl let\n-syn keyword   rustKeyword     loop once priv pub\n-syn keyword   rustKeyword     return\n-syn keyword   rustKeyword     unsafe while\n-syn keyword   rustKeyword     use nextgroup=rustModPath skipwhite\n+syn keyword   rustKeyword     loop once proc pub\n+syn keyword   rustKeyword     return super\n+syn keyword   rustKeyword     unsafe virtual while\n+syn keyword   rustKeyword     use nextgroup=rustModPath skipwhite skipempty\n \" FIXME: Scoped impl's name is also fallen in this category\n-syn keyword   rustKeyword     mod trait struct enum type nextgroup=rustIdentifier skipwhite\n-syn keyword   rustKeyword     fn nextgroup=rustFuncName skipwhite\n-syn keyword   rustKeyword     proc\n+syn keyword   rustKeyword     mod trait struct enum type nextgroup=rustIdentifier skipwhite skipempty\n syn keyword   rustStorage     mut ref static\n syn keyword   rustObsoleteStorage const\n \n syn keyword   rustInvalidBareKeyword crate\n \n-syn keyword   rustExternCrate crate contained nextgroup=rustIdentifier skipwhite\n-syn keyword   rustObsoleteExternMod mod contained nextgroup=rustIdentifier skipwhite\n+syn keyword   rustExternCrate crate contained nextgroup=rustIdentifier skipwhite skipempty\n+syn keyword   rustObsoleteExternMod mod contained nextgroup=rustIdentifier skipwhite skipempty\n \n syn match     rustIdentifier  contains=rustIdentifierPrime \"\\%([^[:cntrl:][:space:][:punct:][:digit:]]\\|_\\)\\%([^[:cntrl:][:punct:][:space:]]\\|_\\)*\" display contained\n syn match     rustFuncName    \"\\%([^[:cntrl:][:space:][:punct:][:digit:]]\\|_\\)\\%([^[:cntrl:][:punct:][:space:]]\\|_\\)*\" display contained\n \n+syn region    rustBoxPlacement matchgroup=rustBoxPlacementParens start=\"(\" end=\")\" contains=TOP contained\n+syn keyword   rustBoxPlacementExpr GC containedin=rustBoxPlacement\n+\" Ideally we'd have syntax rules set up to match arbitrary expressions. Since\n+\" we don't, we'll just define temporary contained rules to handle balancing\n+\" delimiters.\n+syn region    rustBoxPlacementBalance start=\"(\" end=\")\" containedin=rustBoxPlacement transparent\n+syn region    rustBoxPlacementBalance start=\"\\[\" end=\"\\]\" containedin=rustBoxPlacement transparent\n+\" {} are handled by rustFoldBraces\n+\n \" Reserved (but not yet used) keywords {{{2\n-syn keyword   rustReservedKeyword alignof be do offsetof pure sizeof typeof yield\n+syn keyword   rustReservedKeyword alignof be do offsetof priv pure sizeof typeof unsized yield\n \n \" Built-in types {{{2\n syn keyword   rustType        int uint float char bool u8 u16 u32 u64 f32\n@@ -52,10 +62,10 @@ syn keyword   rustType        f64 i8 i16 i32 i64 str Self\n \" to make it easy to update.\n \n \" Core operators {{{3\n-syn keyword   rustTrait       Share Copy Send Sized\n+syn keyword   rustTrait       Copy Send Sized Share\n syn keyword   rustTrait       Add Sub Mul Div Rem Neg Not\n syn keyword   rustTrait       BitAnd BitOr BitXor\n-syn keyword   rustTrait       Drop\n+syn keyword   rustTrait       Drop Deref DerefMut\n syn keyword   rustTrait       Shl Shr Index\n syn keyword   rustEnum        Option\n syn keyword   rustEnumVariant Some None\n@@ -68,7 +78,6 @@ syn keyword   rustEnumVariant Ok Err\n \"syn keyword rustFunction drop\n \n \" Types and traits {{{3\n-syn keyword rustTrait Any AnyOwnExt AnyRefExt AnyMutRefExt\n syn keyword rustTrait Ascii AsciiCast OwnedAsciiCast AsciiStr IntoBytes\n syn keyword rustTrait ToCStr\n syn keyword rustTrait Char\n@@ -80,25 +89,32 @@ syn keyword rustTrait FromIterator Extendable\n syn keyword rustTrait Iterator DoubleEndedIterator RandomAccessIterator CloneableIterator\n syn keyword rustTrait OrdIterator MutableDoubleEndedIterator ExactSize\n syn keyword rustTrait Num NumCast CheckedAdd CheckedSub CheckedMul\n-syn keyword rustTrait Signed Unsigned Round\n-syn keyword rustTrait Primitive Int Float ToPrimitive FromPrimitive\n+syn keyword rustTrait Signed Unsigned\n+syn keyword rustTrait Primitive Int Float FloatMath ToPrimitive FromPrimitive\n+\"syn keyword rustTrait Expect\n+syn keyword rustTrait Box\n syn keyword rustTrait GenericPath Path PosixPath WindowsPath\n syn keyword rustTrait RawPtr\n syn keyword rustTrait Buffer Writer Reader Seek\n-syn keyword rustTrait Str StrVector StrSlice OwnedStr IntoMaybeOwned StrBuf\n+syn keyword rustTrait Str StrVector StrSlice OwnedStr IntoMaybeOwned\n+syn keyword rustTrait StrAllocating\n syn keyword rustTrait ToStr IntoStr\n syn keyword rustTrait Tuple1 Tuple2 Tuple3 Tuple4\n syn keyword rustTrait Tuple5 Tuple6 Tuple7 Tuple8\n syn keyword rustTrait Tuple9 Tuple10 Tuple11 Tuple12\n-syn keyword rustTrait ImmutableEqVector ImmutableTotalOrdVector ImmutableCloneableVector\n-syn keyword rustTrait OwnedVector OwnedCloneableVector OwnedEqVector\n-syn keyword rustTrait MutableVector MutableTotalOrdVector\n-syn keyword rustTrait Vector VectorVector CloneableVector ImmutableVector\n-\n-\"syn keyword rustFunction stream\n-syn keyword rustTrait Sender Receiver\n+syn keyword rustTrait CloneableVector ImmutableCloneableVector MutableCloneableVector\n+syn keyword rustTrait ImmutableVector MutableVector\n+syn keyword rustTrait ImmutableEqVector ImmutableTotalOrdVector MutableTotalOrdVector\n+syn keyword rustTrait Vector VectorVector OwnedVector MutableVectorAllocating\n+syn keyword rustTrait StrBuf\n+syn keyword rustTrait Vec\n+\n+\"syn keyword rustFunction sync_channel channel\n+syn keyword rustTrait SyncSender Sender Receiver\n \"syn keyword rustFunction spawn\n \n+\"syn keyword rustConstant GC\n+\n syn keyword   rustSelf        self\n syn keyword   rustBoolean     true false\n \n@@ -239,6 +255,8 @@ hi def link rustLifetime      Special\n hi def link rustInvalidBareKeyword Error\n hi def link rustExternCrate   rustKeyword\n hi def link rustObsoleteExternMod Error\n+hi def link rustBoxPlacementParens Delimiter\n+hi def link rustBoxPlacementExpr rustKeyword\n \n \" Other Suggestions:\n \" hi rustAttribute ctermfg=cyan"}, {"sha": "bd367293db8e3ac17a6b0c8b78aec9c4b7f39523", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f78eb1434152224dae7d0f48528b5b0c064e9bc6/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f78eb1434152224dae7d0f48528b5b0c064e9bc6/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=f78eb1434152224dae7d0f48528b5b0c064e9bc6", "patch": "@@ -76,10 +76,10 @@ pub use to_str::{ToStr, IntoStr};\n pub use tuple::{Tuple1, Tuple2, Tuple3, Tuple4};\n pub use tuple::{Tuple5, Tuple6, Tuple7, Tuple8};\n pub use tuple::{Tuple9, Tuple10, Tuple11, Tuple12};\n-pub use slice::{ImmutableEqVector, ImmutableTotalOrdVector, ImmutableCloneableVector};\n-pub use slice::{OwnedVector};\n-pub use slice::{MutableVector, MutableTotalOrdVector, MutableVectorAllocating};\n-pub use slice::{Vector, VectorVector, CloneableVector, ImmutableVector};\n+pub use slice::{CloneableVector, ImmutableCloneableVector, MutableCloneableVector};\n+pub use slice::{ImmutableVector, MutableVector};\n+pub use slice::{ImmutableEqVector, ImmutableTotalOrdVector, MutableTotalOrdVector};\n+pub use slice::{Vector, VectorVector, OwnedVector, MutableVectorAllocating};\n pub use strbuf::StrBuf;\n pub use vec::Vec;\n "}]}