{"sha": "88fe4ae09c2240fcb10fef98a0f5a61559849902", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4ZmU0YWUwOWMyMjQwZmNiMTBmZWY5OGEwZjVhNjE1NTk4NDk5MDI=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-07-11T00:31:53Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-07-17T21:57:54Z"}, "message": "librustc: Remove the `Copy` bound from the language.", "tree": {"sha": "029c1eba9ae511f5a48149ef0fdc9987ec3e6b6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/029c1eba9ae511f5a48149ef0fdc9987ec3e6b6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88fe4ae09c2240fcb10fef98a0f5a61559849902", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88fe4ae09c2240fcb10fef98a0f5a61559849902", "html_url": "https://github.com/rust-lang/rust/commit/88fe4ae09c2240fcb10fef98a0f5a61559849902", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88fe4ae09c2240fcb10fef98a0f5a61559849902/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d57e8f841939c433b541dd185af91483a88f0f4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/d57e8f841939c433b541dd185af91483a88f0f4d", "html_url": "https://github.com/rust-lang/rust/commit/d57e8f841939c433b541dd185af91483a88f0f4d"}], "stats": {"total": 300, "additions": 106, "deletions": 194}, "files": [{"sha": "524a20f3d4f21f31f24eb3e30f37c42fd16590c1", "filename": "src/libextra/flate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibextra%2Fflate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibextra%2Fflate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fflate.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -87,7 +87,6 @@ mod tests {\n     use std::rand::RngUtil;\n \n     #[test]\n-    #[allow(non_implicitly_copyable_typarams)]\n     fn test_flate_round_trip() {\n         let mut r = rand::rng();\n         let mut words = ~[];"}, {"sha": "2d3da5bb96d1c9c5b4f231fb71ba00a8e6731ada", "filename": "src/libextra/future.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -145,7 +145,6 @@ pub fn spawn<A:Send>(blk: ~fn() -> A) -> Future<A> {\n     return from_port(port);\n }\n \n-#[allow(non_implicitly_copyable_typarams)]\n #[cfg(test)]\n mod test {\n     use future::*;"}, {"sha": "f462a0cfae7b5e0056528f95a02d51f4e60ff0a6", "filename": "src/libextra/par.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibextra%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibextra%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fpar.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -1,4 +1,4 @@\n-// Cloneright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //"}, {"sha": "6d2cb63ac14f53ebe09e1c5d01746b3d5270a056", "filename": "src/libextra/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibextra%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibextra%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftest.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -671,7 +671,6 @@ fn get_concurrency() -> uint {\n     else { threads * SCHED_OVERCOMMIT }\n }\n \n-#[allow(non_implicitly_copyable_typarams)]\n pub fn filter_tests(\n     opts: &TestOpts,\n     tests: ~[TestDescAndFn]) -> ~[TestDescAndFn]"}, {"sha": "1edd3c805d05f2d1e397020de51085e352f2f88d", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -561,9 +561,6 @@ fn parse_bounds(st: &mut PState, conv: conv_did) -> ty::ParamBounds {\n             'S' => {\n                 param_bounds.builtin_bounds.add(ty::BoundSend);\n             }\n-            'C' => {\n-                param_bounds.builtin_bounds.add(ty::BoundCopy);\n-            }\n             'K' => {\n                 param_bounds.builtin_bounds.add(ty::BoundFreeze);\n             }"}, {"sha": "bab13c2b470047fa482f008979f5309cccadc0e4", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -400,7 +400,6 @@ fn enc_bounds(w: @io::Writer, cx: @ctxt, bs: &ty::ParamBounds) {\n     for bs.builtin_bounds.each |bound| {\n         match bound {\n             ty::BoundSend => w.write_char('S'),\n-            ty::BoundCopy => w.write_char('C'),\n             ty::BoundFreeze => w.write_char('K'),\n             ty::BoundStatic => w.write_char('O'),\n             ty::BoundSized => w.write_char('Z'),"}, {"sha": "7d9d52cc59504dd5ee6fcab0191c62f606cf3eda", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -586,7 +586,7 @@ impl BorrowckCtxt {\n                 ty::ty_closure(ref cty) if cty.sigil == ast::BorrowedSigil =>\n                     \"a non-copyable stack closure (capture it in a new closure, \\\n                      e.g. `|x| f(x)`, to override)\",\n-                _ if !ty::type_is_copyable(tcx, ty) =>\n+                _ if ty::type_moves_by_default(tcx, ty) =>\n                     \"non-copyable (perhaps you meant to use clone()?)\",\n                 _ => default_msg,\n             }"}, {"sha": "deafe85a2c94ae0e8b5d9629494bdaca80975ed8", "filename": "src/librustc/middle/kind.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fkind.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -29,22 +29,19 @@ use syntax::{visit, ast_util};\n // of the following attributes.\n //\n //  send: Things that can be sent on channels or included in spawned closures.\n-//  copy: Things that can be copied.\n //  freeze: Things thare are deeply immutable. They are guaranteed never to\n //    change, and can be safely shared without copying between tasks.\n //  'static: Things that do not contain borrowed pointers.\n //\n // Send includes scalar types as well as classes and unique types containing\n // only sendable types.\n //\n-// Copy includes boxes, closure and unique types containing copyable types.\n-//\n // Freeze include scalar types, things without non-const fields, and pointers\n // to freezable things.\n //\n // This pass ensures that type parameters are only instantiated with types\n // whose kinds are equal or less general than the way the type parameter was\n-// annotated (with the `Send`, `Copy` or `Freeze` bound).\n+// annotated (with the `Send` or `Freeze` bound).\n //\n // It also verifies that noncopyable kinds are not copied. Sendability is not\n // applied, since none of our language primitives send. Instead, the sending"}, {"sha": "a49e50d5c38d7d14331f855c9a05dfee0f53cea4", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 93, "deletions": 99, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -13,7 +13,7 @@\n // Language items are items that represent concepts intrinsic to the language\n // itself. Examples are:\n //\n-// * Traits that specify \"kinds\"; e.g. \"Freeze\", \"Copy\", \"Send\".\n+// * Traits that specify \"kinds\"; e.g. \"Freeze\", \"Send\".\n //\n // * Traits that represent operators; e.g. \"Add\", \"Sub\", \"Index\".\n //\n@@ -33,63 +33,62 @@ use std::hashmap::HashMap;\n \n pub enum LangItem {\n     FreezeTraitLangItem,               // 0\n-    CopyTraitLangItem,                 // 1\n-    SendTraitLangItem,                 // 2\n-    SizedTraitLangItem,                // 3\n-\n-    DropTraitLangItem,                 // 4\n-\n-    AddTraitLangItem,                  // 5\n-    SubTraitLangItem,                  // 6\n-    MulTraitLangItem,                  // 7\n-    DivTraitLangItem,                  // 8\n-    RemTraitLangItem,                  // 9\n-    NegTraitLangItem,                  // 10\n-    NotTraitLangItem,                  // 11\n+    SendTraitLangItem,                 // 1\n+    SizedTraitLangItem,                // 2\n+\n+    DropTraitLangItem,                 // 3\n+\n+    AddTraitLangItem,                  // 4\n+    SubTraitLangItem,                  // 5\n+    MulTraitLangItem,                  // 6\n+    DivTraitLangItem,                  // 7\n+    RemTraitLangItem,                  // 8\n+    NegTraitLangItem,                  // 9\n+    NotTraitLangItem,                  // 10\n     BitXorTraitLangItem,               // 11\n-    BitAndTraitLangItem,               // 13\n-    BitOrTraitLangItem,                // 14\n-    ShlTraitLangItem,                  // 15\n-    ShrTraitLangItem,                  // 16\n-    IndexTraitLangItem,                // 17\n-\n-    EqTraitLangItem,                   // 18\n-    OrdTraitLangItem,                  // 19\n-\n-    StrEqFnLangItem,                   // 20\n-    UniqStrEqFnLangItem,               // 21\n-    AnnihilateFnLangItem,              // 22\n-    LogTypeFnLangItem,                 // 23\n-    FailFnLangItem,                    // 24\n-    FailBoundsCheckFnLangItem,         // 25\n-    ExchangeMallocFnLangItem,          // 26\n-    ClosureExchangeMallocFnLangItem,   // 27\n-    ExchangeFreeFnLangItem,            // 28\n-    MallocFnLangItem,                  // 29\n-    FreeFnLangItem,                    // 30\n-    BorrowAsImmFnLangItem,             // 31\n-    BorrowAsMutFnLangItem,             // 32\n-    ReturnToMutFnLangItem,             // 33\n-    CheckNotBorrowedFnLangItem,        // 34\n-    StrDupUniqFnLangItem,              // 35\n-    RecordBorrowFnLangItem,            // 36\n-    UnrecordBorrowFnLangItem,          // 37\n-\n-    StartFnLangItem,                   // 38\n-\n-    TyDescStructLangItem,              // 39\n-    TyVisitorTraitLangItem,            // 40\n-    OpaqueStructLangItem,              // 41\n+    BitAndTraitLangItem,               // 12\n+    BitOrTraitLangItem,                // 13\n+    ShlTraitLangItem,                  // 14\n+    ShrTraitLangItem,                  // 15\n+    IndexTraitLangItem,                // 16\n+\n+    EqTraitLangItem,                   // 17\n+    OrdTraitLangItem,                  // 18\n+\n+    StrEqFnLangItem,                   // 19\n+    UniqStrEqFnLangItem,               // 20\n+    AnnihilateFnLangItem,              // 21\n+    LogTypeFnLangItem,                 // 22\n+    FailFnLangItem,                    // 23\n+    FailBoundsCheckFnLangItem,         // 24\n+    ExchangeMallocFnLangItem,          // 25\n+    ClosureExchangeMallocFnLangItem,   // 26\n+    ExchangeFreeFnLangItem,            // 27\n+    MallocFnLangItem,                  // 28\n+    FreeFnLangItem,                    // 29\n+    BorrowAsImmFnLangItem,             // 30\n+    BorrowAsMutFnLangItem,             // 31\n+    ReturnToMutFnLangItem,             // 32\n+    CheckNotBorrowedFnLangItem,        // 33\n+    StrDupUniqFnLangItem,              // 34\n+    RecordBorrowFnLangItem,            // 35\n+    UnrecordBorrowFnLangItem,          // 36\n+\n+    StartFnLangItem,                   // 37\n+\n+    TyDescStructLangItem,              // 38\n+    TyVisitorTraitLangItem,            // 39\n+    OpaqueStructLangItem,              // 40\n }\n \n pub struct LanguageItems {\n-    items: [Option<def_id>, ..42]\n+    items: [Option<def_id>, ..41]\n }\n \n impl LanguageItems {\n     pub fn new() -> LanguageItems {\n         LanguageItems {\n-            items: [ None, ..42 ]\n+            items: [ None, ..41 ]\n         }\n     }\n \n@@ -100,52 +99,51 @@ impl LanguageItems {\n     pub fn item_name(index: uint) -> &'static str {\n         match index {\n             0  => \"freeze\",\n-            1  => \"copy\",\n-            2  => \"send\",\n-            3  => \"sized\",\n-\n-            4  => \"drop\",\n-\n-            5  => \"add\",\n-            6  => \"sub\",\n-            7  => \"mul\",\n-            8  => \"div\",\n-            9  => \"rem\",\n-            10 => \"neg\",\n-            11 => \"not\",\n-            12 => \"bitxor\",\n-            13 => \"bitand\",\n-            14 => \"bitor\",\n-            15 => \"shl\",\n-            16 => \"shr\",\n-            17 => \"index\",\n-            18 => \"eq\",\n-            19 => \"ord\",\n-\n-            20 => \"str_eq\",\n-            21 => \"uniq_str_eq\",\n-            22 => \"annihilate\",\n-            23 => \"log_type\",\n-            24 => \"fail_\",\n-            25 => \"fail_bounds_check\",\n-            26 => \"exchange_malloc\",\n-            27 => \"closure_exchange_malloc\",\n-            28 => \"exchange_free\",\n-            29 => \"malloc\",\n-            30 => \"free\",\n-            31 => \"borrow_as_imm\",\n-            32 => \"borrow_as_mut\",\n-            33 => \"return_to_mut\",\n-            34 => \"check_not_borrowed\",\n-            35 => \"strdup_uniq\",\n-            36 => \"record_borrow\",\n-            37 => \"unrecord_borrow\",\n-\n-            38 => \"start\",\n-\n-            39 => \"ty_desc\",\n-            40 => \"ty_visitor\",\n-            41 => \"opaque\",\n+            1  => \"send\",\n+            2  => \"sized\",\n+\n+            3  => \"drop\",\n+\n+            4  => \"add\",\n+            5  => \"sub\",\n+            6  => \"mul\",\n+            7  => \"div\",\n+            8  => \"rem\",\n+            9  => \"neg\",\n+            10 => \"not\",\n+            11 => \"bitxor\",\n+            12 => \"bitand\",\n+            13 => \"bitor\",\n+            14 => \"shl\",\n+            15 => \"shr\",\n+            16 => \"index\",\n+            17 => \"eq\",\n+            18 => \"ord\",\n+\n+            19 => \"str_eq\",\n+            20 => \"uniq_str_eq\",\n+            21 => \"annihilate\",\n+            22 => \"log_type\",\n+            23 => \"fail_\",\n+            24 => \"fail_bounds_check\",\n+            25 => \"exchange_malloc\",\n+            26 => \"closure_exchange_malloc\",\n+            27 => \"exchange_free\",\n+            28 => \"malloc\",\n+            29 => \"free\",\n+            30 => \"borrow_as_imm\",\n+            31 => \"borrow_as_mut\",\n+            32 => \"return_to_mut\",\n+            33 => \"check_not_borrowed\",\n+            34 => \"strdup_uniq\",\n+            35 => \"record_borrow\",\n+            36 => \"unrecord_borrow\",\n+\n+            37 => \"start\",\n+\n+            38 => \"ty_desc\",\n+            39 => \"ty_visitor\",\n+            40 => \"opaque\",\n \n             _ => \"???\"\n         }\n@@ -164,9 +162,6 @@ impl LanguageItems {\n     pub fn freeze_trait(&self) -> Option<def_id> {\n         self.items[FreezeTraitLangItem as uint]\n     }\n-    pub fn copy_trait(&self) -> Option<def_id> {\n-        self.items[CopyTraitLangItem as uint]\n-    }\n     pub fn send_trait(&self) -> Option<def_id> {\n         self.items[SendTraitLangItem as uint]\n     }\n@@ -308,7 +303,6 @@ impl<'self> LanguageItemCollector<'self> {\n         let mut item_refs = HashMap::new();\n \n         item_refs.insert(@\"freeze\", FreezeTraitLangItem as uint);\n-        item_refs.insert(@\"copy\", CopyTraitLangItem as uint);\n         item_refs.insert(@\"send\", SendTraitLangItem as uint);\n         item_refs.insert(@\"sized\", SizedTraitLangItem as uint);\n "}, {"sha": "17563d7c89c1e59d7d474aefaa06e525ab1d6d8a", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -76,7 +76,6 @@ pub enum lint {\n     path_statement,\n     implicit_copies,\n     unrecognized_lint,\n-    non_implicitly_copyable_typarams,\n     deprecated_pattern,\n     non_camel_case_types,\n     non_uppercase_statics,\n@@ -182,13 +181,6 @@ static lint_table: &'static [(&'static str, LintSpec)] = &[\n         default: warn\n      }),\n \n-    (\"non_implicitly_copyable_typarams\",\n-     LintSpec {\n-        lint: non_implicitly_copyable_typarams,\n-        desc: \"passing non implicitly copyable types as copy type params\",\n-        default: warn\n-     }),\n-\n     (\"implicit_copies\",\n      LintSpec {\n         lint: implicit_copies,"}, {"sha": "50f331f7e7d4819a22ada5beb83bcd2acc6efc50", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 17, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -666,7 +666,6 @@ pub type BuiltinBounds = EnumSet<BuiltinBound>;\n \n #[deriving(Clone, Eq, IterBytes)]\n pub enum BuiltinBound {\n-    BoundCopy,\n     BoundStatic,\n     BoundSend,\n     BoundFreeze,\n@@ -679,7 +678,6 @@ pub fn EmptyBuiltinBounds() -> BuiltinBounds {\n \n pub fn AllBuiltinBounds() -> BuiltinBounds {\n     let mut set = EnumSet::empty();\n-    set.add(BoundCopy);\n     set.add(BoundStatic);\n     set.add(BoundSend);\n     set.add(BoundFreeze);\n@@ -1798,7 +1796,6 @@ impl TypeContents {\n \n     pub fn meets_bound(&self, cx: ctxt, bb: BuiltinBound) -> bool {\n         match bb {\n-            BoundCopy => self.is_copy(cx),\n             BoundStatic => self.is_static(cx),\n             BoundFreeze => self.is_freezable(cx),\n             BoundSend => self.is_sendable(cx),\n@@ -1810,10 +1807,6 @@ impl TypeContents {\n         (self.bits & tc.bits) != 0\n     }\n \n-    pub fn is_copy(&self, cx: ctxt) -> bool {\n-        !self.intersects(TypeContents::noncopyable(cx))\n-    }\n-\n     pub fn noncopyable(_cx: ctxt) -> TypeContents {\n         TC_DTOR + TC_BORROWED_MUT + TC_ONCE_CLOSURE + TC_NONCOPY_TRAIT +\n             TC_EMPTY_ENUM\n@@ -1942,10 +1935,6 @@ static TC_DYNAMIC_SIZE: TypeContents =     TypeContents{bits: 0b1000_0000_0000};\n /// All possible contents.\n static TC_ALL: TypeContents =              TypeContents{bits: 0b1111_1111_1111};\n \n-pub fn type_is_copyable(cx: ctxt, t: ty::t) -> bool {\n-    type_contents(cx, t).is_copy(cx)\n-}\n-\n pub fn type_is_static(cx: ctxt, t: ty::t) -> bool {\n     type_contents(cx, t).is_static(cx)\n }\n@@ -2237,8 +2226,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n             ast::Many => TC_NONE\n         };\n         // Prevent noncopyable types captured in the environment from being copied.\n-        let ct = if cty.bounds.contains_elem(BoundCopy) ||\n-                    cty.sigil == ast::ManagedSigil {\n+        let ct = if cty.sigil == ast::ManagedSigil {\n             TC_NONE\n         } else {\n             TC_NONCOPY_TRAIT\n@@ -2261,9 +2249,6 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n         let mut bt = TC_NONE;\n         for (AllBuiltinBounds() - bounds).each |bound| {\n             bt = bt + match bound {\n-                BoundCopy if store == UniqTraitStore\n-                            => TC_NONCOPY_TRAIT,\n-                BoundCopy   => TC_NONE, // @Trait/&Trait are copyable either way\n                 BoundStatic if bounds.contains_elem(BoundSend)\n                             => TC_NONE, // Send bound implies static bound.\n                 BoundStatic => TC_BORROWED_POINTER, // Useful for \"@Trait:'static\"\n@@ -2285,7 +2270,6 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n         for type_param_def.bounds.builtin_bounds.each |bound| {\n             debug!(\"tc = %s, bound = %?\", tc.to_str(), bound);\n             tc = tc - match bound {\n-                BoundCopy => TypeContents::noncopyable(cx),\n                 BoundStatic => TypeContents::nonstatic(cx),\n                 BoundSend => TypeContents::nonsendable(cx),\n                 BoundFreeze => TypeContents::nonfreezable(cx),"}, {"sha": "28595e5af514f3525c2f2d1d933466c9f7071cd8", "filename": "src/librustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -757,7 +757,7 @@ fn conv_builtin_bounds(tcx: ty::ctxt, ast_bounds: &Option<OptVec<ast::TyParamBou\n     //! Converts a list of bounds from the AST into a `BuiltinBounds`\n     //! struct. Reports an error if any of the bounds that appear\n     //! in the AST refer to general traits and not the built-in traits\n-    //! like `Copy` or `Send`. Used to translate the bounds that\n+    //! like `Send`. Used to translate the bounds that\n     //! appear in closure and trait types, where only builtin bounds are\n     //! legal.\n     //! If no bounds were specified, we choose a \"default\" bound based on\n@@ -811,17 +811,14 @@ pub fn try_add_builtin_trait(tcx: ty::ctxt,\n                              trait_def_id: ast::def_id,\n                              builtin_bounds: &mut ty::BuiltinBounds) -> bool {\n     //! Checks whether `trait_ref` refers to one of the builtin\n-    //! traits, like `Copy` or `Send`, and adds the corresponding\n+    //! traits, like `Send`, and adds the corresponding\n     //! bound to the set `builtin_bounds` if so. Returns true if `trait_ref`\n     //! is a builtin trait.\n \n     let li = &tcx.lang_items;\n     if Some(trait_def_id) == li.send_trait() {\n         builtin_bounds.add(ty::BoundSend);\n         true\n-    } else if Some(trait_def_id) == li.copy_trait() {\n-        builtin_bounds.add(ty::BoundCopy);\n-        true\n     } else if Some(trait_def_id) == li.freeze_trait() {\n         builtin_bounds.add(ty::BoundFreeze);\n         true"}, {"sha": "3a4154d7c50e28ec80631aacc01071a9733e6279", "filename": "src/librustc/middle/typeck/coherence.rs", "status": "modified", "additions": 4, "deletions": 41, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -34,8 +34,7 @@ use middle::ty;\n use middle::typeck::CrateCtxt;\n use middle::typeck::infer::combine::Combine;\n use middle::typeck::infer::InferCtxt;\n-use middle::typeck::infer::{new_infer_ctxt, resolve_ivar};\n-use middle::typeck::infer::{resolve_nested_tvar, resolve_type};\n+use middle::typeck::infer::{new_infer_ctxt, resolve_ivar, resolve_type};\n use middle::typeck::infer;\n use syntax::ast::{crate, def_id, def_struct, def_ty};\n use syntax::ast::{item, item_enum, item_impl, item_mod, item_struct};\n@@ -584,45 +583,9 @@ impl CoherenceChecker {\n                                                 b: &'a\n                                                 UniversalQuantificationResult)\n                                                 -> bool {\n-        match infer::can_mk_subty(self.inference_context,\n-                                  a.monotype, b.monotype) {\n-            Ok(_) => {\n-                // Check to ensure that each parameter binding respected its\n-                // kind bounds.\n-                let xs = [a, b];\n-                for xs.iter().advance |result| {\n-                    for result.type_variables.iter()\n-                        .zip(result.type_param_defs.iter())\n-                        .advance |(ty_var, type_param_def)|\n-                    {\n-                        if type_param_def.bounds.builtin_bounds.contains_elem(\n-                            ty::BoundCopy)\n-                        {\n-                            match resolve_type(self.inference_context,\n-                                               *ty_var,\n-                                               resolve_nested_tvar) {\n-                                Ok(resolved_ty) => {\n-                                    if !ty::type_is_copyable(\n-                                        self.inference_context.tcx,\n-                                        resolved_ty)\n-                                    {\n-                                        return false;\n-                                    }\n-                                }\n-                                Err(*) => {\n-                                    // Conservatively assume it might unify.\n-                                }\n-                            }\n-                        }\n-                    }\n-                }\n-                true\n-            }\n-\n-            Err(_) => {\n-                false\n-            }\n-        }\n+        infer::can_mk_subty(self.inference_context,\n+                            a.monotype,\n+                            b.monotype).is_ok()\n     }\n \n     pub fn get_self_type_for_implementation(&self, implementation: @Impl)"}, {"sha": "791774999c2f3a7ecba02c300fe44b5e8f83660c", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -1189,8 +1189,8 @@ pub fn ty_generics(ccx: &CrateCtxt,\n          * Translate the AST's notion of ty param bounds (which are an\n          * enum consisting of a newtyped Ty or a region) to ty's\n          * notion of ty param bounds, which can either be user-defined\n-         * traits, or one of the four built-in traits (formerly known\n-         * as kinds): Freeze, Copy, and Send.\n+         * traits, or one of the two built-in traits (formerly known\n+         * as kinds): Freeze and Send.\n          */\n \n         let mut param_bounds = ty::ParamBounds {"}, {"sha": "32ac5e72928ebbd8e244d3801586b98e9403d43c", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -569,7 +569,6 @@ impl Repr for ty::ParamBounds {\n         let mut res = ~[];\n         for self.builtin_bounds.each |b| {\n             res.push(match b {\n-                ty::BoundCopy => ~\"Copy\",\n                 ty::BoundStatic => ~\"'static\",\n                 ty::BoundSend => ~\"Send\",\n                 ty::BoundFreeze => ~\"Freeze\",\n@@ -787,7 +786,6 @@ impl Repr for ty::BuiltinBound {\n impl UserString for ty::BuiltinBound {\n     fn user_string(&self, _tcx: ctxt) -> ~str {\n         match *self {\n-            ty::BoundCopy => ~\"Copy\",\n             ty::BoundStatic => ~\"'static\",\n             ty::BoundSend => ~\"Send\",\n             ty::BoundFreeze => ~\"Freeze\","}, {"sha": "92b112bda1f4ec08d032c5af19b97eedab899663", "filename": "src/libstd/io.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibstd%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibstd%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -1559,7 +1559,6 @@ impl<T:Writer> WriterUtil for T {\n \n }\n \n-#[allow(non_implicitly_copyable_typarams)]\n pub fn file_writer(path: &Path, flags: &[FileFlag]) -> Result<@Writer, ~str> {\n     mk_file_writer(path, flags).chain(|w| result::Ok(w))\n }\n@@ -1727,7 +1726,6 @@ pub fn seek_in_buf(offset: int, pos: uint, len: uint, whence: SeekStyle) ->\n     return bpos as uint;\n }\n \n-#[allow(non_implicitly_copyable_typarams)]\n pub fn read_whole_file_str(file: &Path) -> Result<~str, ~str> {\n     result::chain(read_whole_file(file), |bytes| {\n         if str::is_utf8(bytes) {\n@@ -1740,7 +1738,6 @@ pub fn read_whole_file_str(file: &Path) -> Result<~str, ~str> {\n \n // FIXME (#2004): implement this in a low-level way. Going through the\n // abstractions is pointless.\n-#[allow(non_implicitly_copyable_typarams)]\n pub fn read_whole_file(file: &Path) -> Result<~[u8], ~str> {\n     result::chain(file_reader(file), |rdr| {\n         result::Ok(rdr.read_whole_stream())"}, {"sha": "f13eeece2f4a768c5bf38938433a60bd276ffaaf", "filename": "src/libstd/kinds.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibstd%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibstd%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkinds.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -29,6 +29,7 @@ The 2 kinds are\n \n #[allow(missing_doc)];\n \n+#[cfg(stage0)]\n #[lang=\"copy\"]\n pub trait Copy {\n     // Empty."}, {"sha": "a7e3fec51a7ebf1ac65ad413d1f2037f2ab0c5f0", "filename": "src/libstd/os.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88fe4ae09c2240fcb10fef98a0f5a61559849902/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=88fe4ae09c2240fcb10fef98a0f5a61559849902", "patch": "@@ -577,13 +577,11 @@ pub fn tmpdir() -> Path {\n     }\n \n     #[cfg(unix)]\n-    #[allow(non_implicitly_copyable_typarams)]\n     fn lookup() -> Path {\n         getenv_nonempty(\"TMPDIR\").get_or_default(Path(\"/tmp\"))\n     }\n \n     #[cfg(windows)]\n-    #[allow(non_implicitly_copyable_typarams)]\n     fn lookup() -> Path {\n         getenv_nonempty(\"TMP\").or(\n             getenv_nonempty(\"TEMP\").or(\n@@ -688,7 +686,6 @@ pub fn mkdir_recursive(p: &Path, mode: c_int) -> bool {\n }\n \n /// Lists the contents of a directory\n-#[allow(non_implicitly_copyable_typarams)]\n pub fn list_dir(p: &Path) -> ~[~str] {\n     if p.components.is_empty() && !p.is_absolute() {\n         // Not sure what the right behavior is here, but this\n@@ -1732,7 +1729,6 @@ pub mod consts {\n }\n \n #[cfg(test)]\n-#[allow(non_implicitly_copyable_typarams)]\n mod tests {\n     use libc::{c_int, c_void, size_t};\n     use libc;"}]}