{"sha": "dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmYTdlMjFlNGVlNTU1ZDA0YzBmYjg2MDY5ZjVhY2ZmZWUzNTUwYWQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-14T08:46:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-14T08:46:14Z"}, "message": "Auto merge of #42433 - marco-c:profiling, r=alexcrichton\n\nBuild instruction profiler runtime as part of compiler-rt\n\nr? @alexcrichton\n\nThis is #38608 with some fixes.\n\nStill missing:\n- [x] testing with profiler enabled on some builders (on which ones? Should I add the option to some of the already existing configurations, or create a new configuration?);\n- [x] enabling distribution (on which builders?);\n- [x] documentation.", "tree": {"sha": "8e29f75d4d8a37b5205a1ae76c9f0a4588ddec43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e29f75d4d8a37b5205a1ae76c9f0a4588ddec43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "html_url": "https://github.com/rust-lang/rust/commit/dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e40ef964fe491b19c22dfb8dd36d1eab14223c36", "url": "https://api.github.com/repos/rust-lang/rust/commits/e40ef964fe491b19c22dfb8dd36d1eab14223c36", "html_url": "https://github.com/rust-lang/rust/commit/e40ef964fe491b19c22dfb8dd36d1eab14223c36"}, {"sha": "5c084fd8edd986d8a4bd9ff37b303f8777623a56", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c084fd8edd986d8a4bd9ff37b303f8777623a56", "html_url": "https://github.com/rust-lang/rust/commit/5c084fd8edd986d8a4bd9ff37b303f8777623a56"}], "stats": {"total": 336, "additions": 319, "deletions": 17}, "files": [{"sha": "376711517e1f4b750da60db11021a5f0308b7a98", "filename": ".travis.yml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -54,7 +54,7 @@ matrix:\n     # version that we're using, 8.2, cannot compile LLVM for OSX 10.7.\n     - env: >\n         RUST_CHECK_TARGET=check\n-        RUST_CONFIGURE_ARGS=\"--build=x86_64-apple-darwin --enable-sanitizers\"\n+        RUST_CONFIGURE_ARGS=\"--build=x86_64-apple-darwin --enable-sanitizers --enable-profiler\"\n         SRC=.\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n         SCCACHE_ERROR_LOG=/tmp/sccache.log\n@@ -87,7 +87,7 @@ matrix:\n     # OSX 10.7 and `xcode7` is the latest Xcode able to compile LLVM for 10.7.\n     - env: >\n         RUST_CHECK_TARGET=dist\n-        RUST_CONFIGURE_ARGS=\"--build=i686-apple-darwin --enable-extended\"\n+        RUST_CONFIGURE_ARGS=\"--build=i686-apple-darwin --enable-extended --enable-profiler\"\n         SRC=.\n         DEPLOY=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1\n@@ -101,7 +101,7 @@ matrix:\n         - *osx_install_sccache\n     - env: >\n         RUST_CHECK_TARGET=dist\n-        RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended --enable-sanitizers\"\n+        RUST_CONFIGURE_ARGS=\"--target=aarch64-apple-ios,armv7-apple-ios,armv7s-apple-ios,i386-apple-ios,x86_64-apple-ios --enable-extended --enable-sanitizers --enable-profiler\"\n         SRC=.\n         DEPLOY=1\n         RUSTC_RETRY_LINKER_ON_SEGFAULT=1"}, {"sha": "4711f34f830e68e00f07cc667949d7f1e5ca02b6", "filename": "appveyor.yml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -7,7 +7,7 @@ environment:\n   matrix:\n   # 32/64 bit MSVC tests\n   - MSYS_BITS: 64\n-    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc\n+    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --enable-profiler\n     SCRIPT: python x.py test\n   - MSYS_BITS: 32\n     RUST_CONFIGURE_ARGS: --build=i686-pc-windows-msvc --target=i586-pc-windows-msvc\n@@ -48,12 +48,14 @@ environment:\n   - RUST_CONFIGURE_ARGS: >\n       --build=x86_64-pc-windows-msvc\n       --enable-extended\n+      --enable-profiler\n     SCRIPT: python x.py dist\n     DEPLOY: 1\n   - RUST_CONFIGURE_ARGS: >\n       --build=i686-pc-windows-msvc\n       --target=i586-pc-windows-msvc\n       --enable-extended\n+      --enable-profiler\n     SCRIPT: python x.py dist\n     DEPLOY: 1\n   - MSYS_BITS: 32"}, {"sha": "2b493ee91b50ad9d4b5e40ede3f5e4a647979747", "filename": "configure", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/configure", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -452,6 +452,7 @@ opt vendor 0 \"enable usage of vendored Rust crates\"\n opt sanitizers 0 \"build the sanitizer runtimes (asan, lsan, msan, tsan)\"\n opt dist-src 1 \"when building tarballs enables building a source tarball\"\n opt cargo-openssl-static 0 \"static openssl in cargo\"\n+opt profiler 0 \"build the profiler runtime\"\n \n # Optimization and debugging options. These may be overridden by the release channel, etc.\n opt_nosave optimize 1 \"build optimized rust code\""}, {"sha": "4c97b8923ec7bbd55abdb7f9287d037d49d8c89b", "filename": "src/Cargo.lock", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -891,6 +891,14 @@ dependencies = [\n  \"syntax_pos 0.0.0\",\n ]\n \n+[[package]]\n+name = \"profiler_builtins\"\n+version = \"0.0.0\"\n+dependencies = [\n+ \"core 0.0.0\",\n+ \"gcc 0.3.50 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"psapi-sys\"\n version = \"0.1.0\"\n@@ -1593,6 +1601,7 @@ dependencies = [\n  \"libc 0.0.0\",\n  \"panic_abort 0.0.0\",\n  \"panic_unwind 0.0.0\",\n+ \"profiler_builtins 0.0.0\",\n  \"rand 0.0.0\",\n  \"rustc_asan 0.0.0\",\n  \"rustc_lsan 0.0.0\","}, {"sha": "5ecd752d0ce5cbf3d0ebdabec3f1a057ecaa29c1", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -299,6 +299,10 @@ pub fn compiletest(build: &Build,\n         cmd.env(\"SANITIZER_SUPPORT\", \"1\");\n     }\n \n+    if build.config.profiler {\n+        cmd.env(\"PROFILER_SUPPORT\", \"1\");\n+    }\n+\n     cmd.arg(\"--adb-path\").arg(\"adb\");\n     cmd.arg(\"--adb-test-dir\").arg(ADB_TEST_DIR);\n     if target.contains(\"android\") {"}, {"sha": "64b2a665e257182aab416b7ce910841a3f8768e7", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -50,6 +50,7 @@ pub struct Config {\n     pub full_bootstrap: bool,\n     pub extended: bool,\n     pub sanitizers: bool,\n+    pub profiler: bool,\n \n     // llvm codegen options\n     pub llvm_assertions: bool,\n@@ -162,6 +163,7 @@ struct Build {\n     extended: Option<bool>,\n     verbose: Option<usize>,\n     sanitizers: Option<bool>,\n+    profiler: Option<bool>,\n     openssl_static: Option<bool>,\n }\n \n@@ -318,6 +320,7 @@ impl Config {\n         set(&mut config.extended, build.extended);\n         set(&mut config.verbose, build.verbose);\n         set(&mut config.sanitizers, build.sanitizers);\n+        set(&mut config.profiler, build.profiler);\n         set(&mut config.openssl_static, build.openssl_static);\n \n         if let Some(ref install) = toml.install {\n@@ -471,6 +474,7 @@ impl Config {\n                 (\"FULL_BOOTSTRAP\", self.full_bootstrap),\n                 (\"EXTENDED\", self.extended),\n                 (\"SANITIZERS\", self.sanitizers),\n+                (\"PROFILER\", self.profiler),\n                 (\"DIST_SRC\", self.rust_dist_src),\n                 (\"CARGO_OPENSSL_STATIC\", self.openssl_static),\n             }"}, {"sha": "3a467dafbfb8dca14669e8bd48d55ccd8d9ad141", "filename": "src/bootstrap/config.toml.example", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fbootstrap%2Fconfig.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fbootstrap%2Fconfig.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.toml.example?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -147,6 +147,9 @@\n # Build the sanitizer runtimes\n #sanitizers = false\n \n+# Build the profiler runtime\n+#profiler = false\n+\n # Indicates whether the OpenSSL linked into Cargo will be statically linked or\n # not. If static linkage is specified then the build system will download a\n # known-good version of OpenSSL, compile it, and link it to Cargo."}, {"sha": "ebf602373c9656a9290e76d56cbe0676bc046f1f", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -570,6 +570,7 @@ pub fn rust_src(build: &Build) {\n         \"src/libgetopts\",\n         \"src/compiler-rt\",\n         \"src/jemalloc\",\n+        \"src/libprofiler_builtins\",\n     ];\n     let std_src_dirs_exclude = [\n         \"src/compiler-rt/test\","}, {"sha": "c8cd71f8f28a4540e4fd87f822daaf0b3869d720", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -594,6 +594,9 @@ impl Build {\n         if self.config.backtrace {\n             features.push_str(\" backtrace\");\n         }\n+        if self.config.profiler {\n+            features.push_str(\" profiler\");\n+        }\n         return features\n     }\n "}, {"sha": "9145e9dfc8d1a5fbe50babebdb05e93536efd30c", "filename": "src/ci/docker/dist-i686-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-i686-linux%2FDockerfile?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -90,7 +90,8 @@ ENV HOSTS=i686-unknown-linux-gnu\n ENV RUST_CONFIGURE_ARGS \\\n       --host=$HOSTS \\\n       --enable-extended \\\n-      --enable-sanitizers\n+      --enable-sanitizers \\\n+      --enable-profiler\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS\n \n # This is the only builder which will create source tarballs"}, {"sha": "78b62839a35d5a14604b621851a282f576664a73", "filename": "src/ci/docker/dist-x86_64-linux/Dockerfile", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fdist-x86_64-linux%2FDockerfile?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -90,7 +90,8 @@ ENV HOSTS=x86_64-unknown-linux-gnu\n ENV RUST_CONFIGURE_ARGS \\\n       --host=$HOSTS \\\n       --enable-extended \\\n-      --enable-sanitizers\n+      --enable-sanitizers \\\n+      --enable-profiler\n ENV SCRIPT python2.7 ../x.py dist --host $HOSTS --target $HOSTS\n \n # This is the only builder which will create source tarballs"}, {"sha": "0bbbded57f27d23c1828cafcda0e4bfd5f040370", "filename": "src/ci/docker/x86_64-gnu/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu%2FDockerfile?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -22,5 +22,5 @@ RUN curl -OL https://github.com/Yelp/dumb-init/releases/download/v1.2.0/dumb-ini\n     rm dumb-init_*.deb\n ENTRYPOINT [\"/usr/bin/dumb-init\", \"--\"]\n \n-ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --enable-sanitizers\n+ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --enable-sanitizers --enable-profiler\n ENV SCRIPT python2.7 ../x.py test"}, {"sha": "39922b7bbcfdac144189c41a7accb34f265bc605", "filename": "src/doc/unstable-book/src/SUMMARY.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2FSUMMARY.md?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -2,6 +2,7 @@\n \n - [Compiler flags](compiler-flags.md)\n     - [linker_flavor](compiler-flags/linker-flavor.md)\n+    - [profile](compiler-flags/profile.md)\n     - [remap_path_prefix](compiler-flags/remap-path-prefix.md)\n - [Language features](language-features.md)\n     - [abi_msp430_interrupt](language-features/abi-msp430-interrupt.md)\n@@ -70,6 +71,7 @@\n     - [plugin_registrar](language-features/plugin-registrar.md)\n     - [prelude_import](language-features/prelude-import.md)\n     - [proc_macro](language-features/proc-macro.md)\n+    - [profiler_runtime](language-features/profiler-runtime.md)\n     - [quote](language-features/quote.md)\n     - [repr_align](language-features/repr-align.md)\n     - [repr_simd](language-features/repr-simd.md)\n@@ -178,6 +180,7 @@\n     - [placement_new_protocol](library-features/placement-new-protocol.md)\n     - [print_internals](library-features/print-internals.md)\n     - [proc_macro_internals](library-features/proc-macro-internals.md)\n+    - [profiler_runtime_lib](library-features/sanitizer-runtime-lib.md)\n     - [question_mark_carrier](library-features/question-mark-carrier.md)\n     - [rand](library-features/rand.md)\n     - [range_contains](library-features/range-contains.md)"}, {"sha": "66d14fd09978fb631ec7a8efecc143a38db0497c", "filename": "src/doc/unstable-book/src/compiler-flags/profile.md", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fprofile.md", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fprofile.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fprofile.md?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -0,0 +1,21 @@\n+# `profile`\n+\n+The tracking issue for this feature is: [#42524](https://github.com/rust-lang/rust/issues/42524).\n+\n+------------------------\n+\n+This feature allows the generation of code coverage reports.\n+\n+Set the `-Zprofile` compiler flag in order to enable gcov profiling.\n+\n+For example:\n+```Bash\n+cargo new testgcov --bin\n+cd testgcov\n+export RUSTFLAGS=\"-Zprofile\"\n+cargo build\n+cargo run\n+```\n+\n+Once you've built and run your program, files with the `gcno` (after build) and `gcda` (after execution) extensions will be created.\n+You can parse them with [llvm-cov gcov](http://llvm.org/docs/CommandGuide/llvm-cov.html#llvm-cov-gcov) or [grcov](https://github.com/marco-c/grcov)."}, {"sha": "aee86f63952a5007bcea1cfb5639751f6e12906b", "filename": "src/doc/unstable-book/src/language-features/profiler-runtime.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fprofiler-runtime.md", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fprofiler-runtime.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fprofiler-runtime.md?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -0,0 +1,5 @@\n+# `profiler_runtime`\n+\n+The tracking issue for this feature is: [#42524](https://github.com/rust-lang/rust/issues/42524).\n+\n+------------------------"}, {"sha": "a01f1e73ab4047b32ab16b91693d198f618242d3", "filename": "src/doc/unstable-book/src/library-features/profiler-runtime-lib.md", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fprofiler-runtime-lib.md", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fprofiler-runtime-lib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fprofiler-runtime-lib.md?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -0,0 +1,5 @@\n+# `profiler_runtime_lib`\n+\n+This feature is internal to the Rust compiler and is not intended for general use.\n+\n+------------------------"}, {"sha": "a60db3136797a5c646b9bb73bb4640639e5d5589", "filename": "src/libprofiler_builtins/Cargo.toml", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibprofiler_builtins%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibprofiler_builtins%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2FCargo.toml?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -0,0 +1,18 @@\n+[package]\n+authors = [\"The Rust Project Developers\"]\n+build = \"build.rs\"\n+name = \"profiler_builtins\"\n+version = \"0.0.0\"\n+\n+[lib]\n+name = \"profiler_builtins\"\n+path = \"lib.rs\"\n+test = false\n+bench = false\n+doc = false\n+\n+[dependencies]\n+core = { path = \"../libcore\" }\n+\n+[build-dependencies]\n+gcc = \"0.3.50\""}, {"sha": "1ee284ff4dabffb38150401b1b99122fa3e820f3", "filename": "src/libprofiler_builtins/build.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibprofiler_builtins%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibprofiler_builtins%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Fbuild.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! Compiles the profiler part of the `compiler-rt` library.\n+//!\n+//! See the build.rs for libcompiler_builtins crate for details.\n+\n+extern crate gcc;\n+\n+use std::env;\n+use std::path::Path;\n+\n+fn main() {\n+    let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n+    let cfg = &mut gcc::Config::new();\n+\n+    let mut profile_sources = vec![\"GCDAProfiling.c\",\n+                                   \"InstrProfiling.c\",\n+                                   \"InstrProfilingBuffer.c\",\n+                                   \"InstrProfilingFile.c\",\n+                                   \"InstrProfilingMerge.c\",\n+                                   \"InstrProfilingMergeFile.c\",\n+                                   \"InstrProfilingPlatformDarwin.c\",\n+                                   \"InstrProfilingPlatformLinux.c\",\n+                                   \"InstrProfilingPlatformOther.c\",\n+                                   \"InstrProfilingRuntime.cc\",\n+                                   \"InstrProfilingUtil.c\",\n+                                   \"InstrProfilingValue.c\",\n+                                   \"InstrProfilingWriter.c\"];\n+\n+    if target.contains(\"msvc\") {\n+        // Don't pull in extra libraries on MSVC\n+        cfg.flag(\"/Zl\");\n+        profile_sources.push(\"WindowsMMap.c\");\n+        cfg.define(\"strdup\", Some(\"_strdup\"));\n+        cfg.define(\"open\", Some(\"_open\"));\n+        cfg.define(\"fdopen\", Some(\"_fdopen\"));\n+    } else {\n+        // Turn off various features of gcc and such, mostly copying\n+        // compiler-rt's build system already\n+        cfg.flag(\"-fno-builtin\");\n+        cfg.flag(\"-fvisibility=hidden\");\n+        cfg.flag(\"-fomit-frame-pointer\");\n+        cfg.flag(\"-ffreestanding\");\n+        cfg.define(\"VISIBILITY_HIDDEN\", None);\n+    }\n+\n+    for src in profile_sources {\n+        cfg.file(Path::new(\"../compiler-rt/lib/profile\").join(src));\n+    }\n+\n+    cfg.compile(\"libprofiler-rt.a\");\n+}"}, {"sha": "087cc444185b896cdb7e723b6c7d95120594cdd8", "filename": "src/libprofiler_builtins/lib.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibprofiler_builtins%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibprofiler_builtins%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibprofiler_builtins%2Flib.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![no_std]\n+#![cfg_attr(not(stage0), feature(profiler_runtime))]\n+#![cfg_attr(not(stage0), profiler_runtime)]\n+#![unstable(feature = \"profiler_runtime_lib\",\n+            reason = \"internal implementation detail of rustc right now\",\n+            issue = \"0\")]\n+#![crate_name = \"profiler_builtins\"]\n+#![crate_type = \"rlib\"]\n+#![allow(unused_features)]\n+#![feature(staged_api)]"}, {"sha": "15cfcbb244accc00b9c8303d435e31594ab50ad4", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -258,6 +258,7 @@ pub trait CrateStore {\n     fn is_panic_runtime(&self, cnum: CrateNum) -> bool;\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool;\n     fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool;\n+    fn is_profiler_runtime(&self, cnum: CrateNum) -> bool;\n     fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy;\n     fn extern_crate(&self, cnum: CrateNum) -> Option<ExternCrate>;\n     /// The name of the crate as it is referred to in source code of the current\n@@ -381,6 +382,7 @@ impl CrateStore for DummyCrateStore {\n     fn is_allocator(&self, cnum: CrateNum) -> bool { bug!(\"is_allocator\") }\n     fn is_panic_runtime(&self, cnum: CrateNum) -> bool { bug!(\"is_panic_runtime\") }\n     fn is_compiler_builtins(&self, cnum: CrateNum) -> bool { bug!(\"is_compiler_builtins\") }\n+    fn is_profiler_runtime(&self, cnum: CrateNum) -> bool { bug!(\"is_profiler_runtime\") }\n     fn is_sanitizer_runtime(&self, cnum: CrateNum) -> bool { bug!(\"is_sanitizer_runtime\") }\n     fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy {\n         bug!(\"panic_strategy\")"}, {"sha": "f9459953518a5a1a4f52e0eb89f04422c6bdfed2", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -1033,6 +1033,8 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         \"a single extra argument to prepend the linker invocation (can be used several times)\"),\n     pre_link_args: Option<Vec<String>> = (None, parse_opt_list, [UNTRACKED],\n         \"extra arguments to prepend to the linker invocation (space separated)\"),\n+    profile: bool = (false, parse_bool, [TRACKED],\n+                     \"insert profiling code\"),\n }\n \n pub fn default_lib_output() -> CrateType {"}, {"sha": "142454e0c4e7461a0f084a45fce9e155df8240bf", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -204,7 +204,8 @@ pub fn compile_input(sess: &Session,\n                 println!(\"Pre-trans\");\n                 tcx.print_debug_stats();\n             }\n-            let trans = phase_4_translate_to_llvm(tcx, analysis, &incremental_hashes_map);\n+            let trans = phase_4_translate_to_llvm(tcx, analysis, &incremental_hashes_map,\n+                                                  &outputs);\n \n             if log_enabled!(::log::LogLevel::Info) {\n                 println!(\"Post-trans\");\n@@ -1042,7 +1043,8 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n /// be discarded.\n pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            analysis: ty::CrateAnalysis,\n-                                           incremental_hashes_map: &IncrementalHashesMap)\n+                                           incremental_hashes_map: &IncrementalHashesMap,\n+                                           output_filenames: &OutputFilenames)\n                                            -> trans::CrateTranslation {\n     let time_passes = tcx.sess.time_passes();\n \n@@ -1053,7 +1055,7 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let translation =\n         time(time_passes,\n              \"translation\",\n-             move || trans::trans_crate(tcx, analysis, &incremental_hashes_map));\n+             move || trans::trans_crate(tcx, analysis, &incremental_hashes_map, output_filenames));\n \n     time(time_passes,\n          \"assert dep graph\","}, {"sha": "312b5a38d6e3d9b7ba38184acd7d300e2f5305ed", "filename": "src/librustc_llvm/ffi.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_llvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_llvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Fffi.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -591,7 +591,9 @@ extern \"C\" {\n     pub fn LLVMIsUndef(Val: ValueRef) -> Bool;\n \n     // Operations on metadata\n+    pub fn LLVMMDStringInContext(C: ContextRef, Str: *const c_char, SLen: c_uint) -> ValueRef;\n     pub fn LLVMMDNodeInContext(C: ContextRef, Vals: *const ValueRef, Count: c_uint) -> ValueRef;\n+    pub fn LLVMAddNamedMetadataOperand(M: ModuleRef, Name: *const c_char, Val: ValueRef);\n \n     // Operations on scalar constants\n     pub fn LLVMConstInt(IntTy: TypeRef, N: c_ulonglong, SignExtend: Bool) -> ValueRef;\n@@ -1332,6 +1334,8 @@ extern \"C\" {\n \n     pub fn LLVMRustAddModuleFlag(M: ModuleRef, name: *const c_char, value: u32);\n \n+    pub fn LLVMRustMetadataAsValue(C: ContextRef, MD: MetadataRef) -> ValueRef;\n+\n     pub fn LLVMRustDIBuilderCreate(M: ModuleRef) -> DIBuilderRef;\n \n     pub fn LLVMRustDIBuilderDispose(Builder: DIBuilderRef);"}, {"sha": "27c2d22168c8b84aa4f3c639302c4b18ac2579fc", "filename": "src/librustc_metadata/creader.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_metadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_metadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcreader.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -902,6 +902,24 @@ impl<'a> CrateLoader<'a> {\n         }\n     }\n \n+    fn inject_profiler_runtime(&mut self) {\n+        if self.sess.opts.debugging_opts.profile {\n+            info!(\"loading profiler\");\n+\n+            let symbol = Symbol::intern(\"profiler_builtins\");\n+            let dep_kind = DepKind::Implicit;\n+            let (_, data) =\n+                self.resolve_crate(&None, symbol, symbol, None, DUMMY_SP,\n+                                   PathKind::Crate, dep_kind);\n+\n+            // Sanity check the loaded crate to ensure it is indeed a profiler runtime\n+            if !data.is_profiler_runtime(&self.sess.dep_graph) {\n+                self.sess.err(&format!(\"the crate `profiler_builtins` is not \\\n+                                        a profiler runtime\"));\n+            }\n+        }\n+    }\n+\n     fn inject_allocator_crate(&mut self) {\n         // Make sure that we actually need an allocator, if none of our\n         // dependencies need one then we definitely don't!\n@@ -1104,6 +1122,7 @@ impl<'a> middle::cstore::CrateLoader for CrateLoader<'a> {\n         // inject the sanitizer runtime before the allocator runtime because all\n         // sanitizers force the use of the `alloc_system` allocator\n         self.inject_sanitizer_runtime();\n+        self.inject_profiler_runtime();\n         self.inject_allocator_crate();\n         self.inject_panic_runtime(krate);\n "}, {"sha": "24647f26cf6499036d133dd436dd96b21b4c4ed6", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -305,6 +305,11 @@ impl CrateMetadata {\n         attr::contains_name(&attrs, \"sanitizer_runtime\")\n     }\n \n+    pub fn is_profiler_runtime(&self, dep_graph: &DepGraph) -> bool {\n+        let attrs = self.get_item_attrs(CRATE_DEF_INDEX, dep_graph);\n+        attr::contains_name(&attrs, \"profiler_runtime\")\n+    }\n+\n     pub fn is_no_builtins(&self, dep_graph: &DepGraph) -> bool {\n         let attrs = self.get_item_attrs(CRATE_DEF_INDEX, dep_graph);\n         attr::contains_name(&attrs, \"no_builtins\")"}, {"sha": "34bd309a09cebe5ff2dbf75e9e4b6e81d966bb2f", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -245,6 +245,10 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(cnum).is_sanitizer_runtime(&self.dep_graph)\n     }\n \n+    fn is_profiler_runtime(&self, cnum: CrateNum) -> bool {\n+        self.get_crate_data(cnum).is_profiler_runtime(&self.dep_graph)\n+    }\n+\n     fn panic_strategy(&self, cnum: CrateNum) -> PanicStrategy {\n         self.get_crate_data(cnum).panic_strategy(&self.dep_graph)\n     }"}, {"sha": "087be9a9a19cc70ee2bf199dfa5f513148ebbe75", "filename": "src/librustc_trans/back/link.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_trans%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_trans%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flink.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -1101,6 +1101,9 @@ fn add_upstream_rust_crates(cmd: &mut Linker,\n         // symbols from the dylib.\n         let src = sess.cstore.used_crate_source(cnum);\n         match data[cnum.as_usize() - 1] {\n+            _ if sess.cstore.is_profiler_runtime(cnum) => {\n+                add_static_crate(cmd, sess, tmpdir, crate_type, cnum);\n+            }\n             _ if sess.cstore.is_sanitizer_runtime(cnum) => {\n                 link_sanitizer_runtime(cmd, sess, tmpdir, cnum);\n             }"}, {"sha": "4871d638d1294bfea25ecaf94e2ee41a22895fbc", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -701,6 +701,10 @@ pub fn run_passes(sess: &Session,\n         }\n     }\n \n+    if sess.opts.debugging_opts.profile {\n+        modules_config.passes.push(\"insert-gcov-profiling\".to_owned())\n+    }\n+\n     modules_config.opt_level = Some(get_llvm_opt_level(sess.opts.optimize));\n     modules_config.opt_size = Some(get_llvm_opt_size(sess.opts.optimize));\n "}, {"sha": "2685c22d60d45371972b14cadfdf5daa214086af", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -43,7 +43,7 @@ use rustc::dep_graph::AssertDepGraphSafe;\n use rustc::middle::cstore::LinkMeta;\n use rustc::hir::map as hir_map;\n use rustc::util::common::time;\n-use rustc::session::config::{self, NoDebugInfo};\n+use rustc::session::config::{self, NoDebugInfo, OutputFilenames};\n use rustc::session::Session;\n use rustc_incremental::IncrementalHashesMap;\n use abi;\n@@ -1049,7 +1049,8 @@ pub fn find_exported_symbols(tcx: TyCtxt, reachable: &NodeSet) -> NodeSet {\n \n pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                              analysis: ty::CrateAnalysis,\n-                             incremental_hashes_map: &IncrementalHashesMap)\n+                             incremental_hashes_map: &IncrementalHashesMap,\n+                             output_filenames: &OutputFilenames)\n                              -> CrateTranslation {\n     // Be careful with this krate: obviously it gives access to the\n     // entire contents of the krate. So if you push any subtasks of\n@@ -1066,7 +1067,8 @@ pub fn trans_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let shared_ccx = SharedCrateContext::new(tcx,\n                                              exported_symbols,\n-                                             check_overflow);\n+                                             check_overflow,\n+                                             output_filenames);\n     // Translate the metadata.\n     let (metadata_llcx, metadata_llmod, metadata) =\n         time(tcx.sess.time_passes(), \"write metadata\", || {"}, {"sha": "208e994653b585d7e2a8d0f770de4a23399d5457", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -23,7 +23,7 @@ use monomorphize::Instance;\n use partitioning::CodegenUnit;\n use type_::Type;\n use rustc_data_structures::base_n;\n-use rustc::session::config::{self, NoDebugInfo};\n+use rustc::session::config::{self, NoDebugInfo, OutputFilenames};\n use rustc::session::Session;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -81,6 +81,8 @@ pub struct SharedCrateContext<'a, 'tcx: 'a> {\n     check_overflow: bool,\n \n     use_dll_storage_attrs: bool,\n+\n+    output_filenames: &'a OutputFilenames,\n }\n \n /// The local portion of a `CrateContext`.  There is one `LocalCrateContext`\n@@ -264,7 +266,8 @@ pub unsafe fn create_context_and_module(sess: &Session, mod_name: &str) -> (Cont\n impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n     pub fn new(tcx: TyCtxt<'b, 'tcx, 'tcx>,\n                exported_symbols: NodeSet,\n-               check_overflow: bool)\n+               check_overflow: bool,\n+               output_filenames: &'b OutputFilenames)\n                -> SharedCrateContext<'b, 'tcx> {\n         // An interesting part of Windows which MSVC forces our hand on (and\n         // apparently MinGW didn't) is the usage of `dllimport` and `dllexport`\n@@ -316,6 +319,7 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n             tcx: tcx,\n             check_overflow: check_overflow,\n             use_dll_storage_attrs: use_dll_storage_attrs,\n+            output_filenames: output_filenames,\n         }\n     }\n \n@@ -350,6 +354,10 @@ impl<'b, 'tcx> SharedCrateContext<'b, 'tcx> {\n     pub fn use_dll_storage_attrs(&self) -> bool {\n         self.use_dll_storage_attrs\n     }\n+\n+    pub fn output_filenames(&self) -> &OutputFilenames {\n+        self.output_filenames\n+    }\n }\n \n impl<'a, 'tcx> LocalCrateContext<'a, 'tcx> {"}, {"sha": "95ceec610eaa37894e49b62ccfe4a4fa9810714b", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -38,10 +38,12 @@ use rustc::ty::{self, AdtKind, Ty};\n use rustc::ty::layout::{self, LayoutTyper};\n use rustc::session::{Session, config};\n use rustc::util::nodemap::FxHashMap;\n+use rustc::util::common::path2cstr;\n \n use libc::{c_uint, c_longlong};\n use std::ffi::CString;\n use std::ptr;\n+use std::path::Path;\n use syntax::ast;\n use syntax::symbol::{Interner, InternedString, Symbol};\n use syntax_pos::{self, Span};\n@@ -794,16 +796,48 @@ pub fn compile_unit_metadata(scc: &SharedCrateContext,\n         let file_metadata = llvm::LLVMRustDIBuilderCreateFile(\n             debug_context.builder, name_in_debuginfo.as_ptr(), work_dir.as_ptr());\n \n-        return llvm::LLVMRustDIBuilderCreateCompileUnit(\n+        let unit_metadata = llvm::LLVMRustDIBuilderCreateCompileUnit(\n             debug_context.builder,\n             DW_LANG_RUST,\n             file_metadata,\n             producer.as_ptr(),\n             sess.opts.optimize != config::OptLevel::No,\n             flags.as_ptr() as *const _,\n             0,\n-            split_name.as_ptr() as *const _)\n+            split_name.as_ptr() as *const _);\n+\n+        if sess.opts.debugging_opts.profile {\n+            let cu_desc_metadata = llvm::LLVMRustMetadataAsValue(debug_context.llcontext,\n+                                                                 unit_metadata);\n+\n+            let gcov_cu_info = [\n+                path_to_mdstring(debug_context.llcontext,\n+                                 &scc.output_filenames().with_extension(\"gcno\")),\n+                path_to_mdstring(debug_context.llcontext,\n+                                 &scc.output_filenames().with_extension(\"gcda\")),\n+                cu_desc_metadata,\n+            ];\n+            let gcov_metadata = llvm::LLVMMDNodeInContext(debug_context.llcontext,\n+                                                          gcov_cu_info.as_ptr(),\n+                                                          gcov_cu_info.len() as c_uint);\n+\n+            let llvm_gcov_ident = CString::new(\"llvm.gcov\").unwrap();\n+            llvm::LLVMAddNamedMetadataOperand(debug_context.llmod,\n+                                              llvm_gcov_ident.as_ptr(),\n+                                              gcov_metadata);\n+        }\n+\n+        return unit_metadata;\n     };\n+\n+    fn path_to_mdstring(llcx: llvm::ContextRef, path: &Path) -> llvm::ValueRef {\n+        let path_str = path2cstr(path);\n+        unsafe {\n+            llvm::LLVMMDStringInContext(llcx,\n+                                        path_str.as_ptr(),\n+                                        path_str.as_bytes().len() as c_uint)\n+        }\n+    }\n }\n \n struct MetadataCreationResult {"}, {"sha": "d4d098ee5e748657f981373353c9b8d092a9828a", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -67,6 +67,7 @@ const DW_TAG_arg_variable: c_uint = 0x101;\n /// A context object for maintaining all state needed by the debuginfo module.\n pub struct CrateDebugContext<'tcx> {\n     llcontext: ContextRef,\n+    llmod: ModuleRef,\n     builder: DIBuilderRef,\n     created_files: RefCell<FxHashMap<(Symbol, Symbol), DIFile>>,\n     created_enum_disr_types: RefCell<FxHashMap<(DefId, layout::Integer), DIType>>,\n@@ -87,6 +88,7 @@ impl<'tcx> CrateDebugContext<'tcx> {\n         let llcontext = unsafe { llvm::LLVMGetModuleContext(llmod) };\n         CrateDebugContext {\n             llcontext: llcontext,\n+            llmod: llmod,\n             builder: builder,\n             created_files: RefCell::new(FxHashMap()),\n             created_enum_disr_types: RefCell::new(FxHashMap()),"}, {"sha": "b516cbd08ca0202d35db93cf320751197e779fa1", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -20,6 +20,7 @@ core = { path = \"../libcore\" }\n libc = { path = \"../rustc/libc_shim\" }\n rand = { path = \"../librand\" }\n compiler_builtins = { path = \"../libcompiler_builtins\" }\n+profiler_builtins = { path = \"../libprofiler_builtins\", optional = true }\n std_unicode = { path = \"../libstd_unicode\" }\n unwind = { path = \"../libunwind\" }\n \n@@ -43,3 +44,4 @@ debug-jemalloc = [\"alloc_jemalloc/debug\"]\n jemalloc = [\"alloc_jemalloc\"]\n force_alloc_system = []\n panic-unwind = [\"panic_unwind\"]\n+profiler = [\"profiler_builtins\"]"}, {"sha": "7ab0529f518ad144fae04d40bb3df7bac688ea88", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -325,6 +325,10 @@ declare_features! (\n     // rustc internal\n     (active, sanitizer_runtime, \"1.17.0\", None),\n \n+    // Used to identify crates that contain the profiler runtime\n+    // rustc internal\n+    (active, profiler_runtime, \"1.18.0\", None),\n+\n     // `extern \"x86-interrupt\" fn()`\n     (active, abi_x86_interrupt, \"1.17.0\", Some(40180)),\n \n@@ -691,6 +695,13 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                               identify crates that contain the runtime of a \\\n                                               sanitizer and will never be stable\",\n                                              cfg_fn!(sanitizer_runtime))),\n+    (\"profiler_runtime\", Whitelisted, Gated(Stability::Unstable,\n+                                             \"profiler_runtime\",\n+                                             \"the `#[profiler_runtime]` attribute is used to \\\n+                                              identify the `profiler_builtins` crate which \\\n+                                              contains the profiler runtime and will never be \\\n+                                              stable\",\n+                                             cfg_fn!(profiler_runtime))),\n \n     (\"allow_internal_unstable\", Normal, Gated(Stability::Unstable,\n                                               \"allow_internal_unstable\","}, {"sha": "c11c5f4186ecf5e9dece87357212117f008bb138", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -466,6 +466,10 @@ extern \"C\" void LLVMRustAddModuleFlag(LLVMModuleRef M, const char *Name,\n   unwrap(M)->addModuleFlag(Module::Warning, Name, Value);\n }\n \n+extern \"C\" void LLVMRustMetadataAsValue(LLVMContextRef C, LLVMRustMetadataRef MD) {\n+  wrap(MetadataAsValue::get(*unwrap(C), unwrap(MD)));\n+}\n+\n extern \"C\" LLVMRustDIBuilderRef LLVMRustDIBuilderCreate(LLVMModuleRef M) {\n   return new DIBuilder(*unwrap(M));\n }"}, {"sha": "c6b2cb2eb07724bfcefacd6e1af446efe94cba5a", "filename": "src/test/compile-fail/feature-gate-profiler-runtime.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Ftest%2Fcompile-fail%2Ffeature-gate-profiler-runtime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Ftest%2Fcompile-fail%2Ffeature-gate-profiler-runtime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-profiler-runtime.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![profiler_runtime] //~ ERROR the `#[profiler_runtime]` attribute is\n+\n+fn main() {}"}, {"sha": "7300bfc9553636740e4486822d3cf4e489a85fc6", "filename": "src/test/run-make/profile/Makefile", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Ftest%2Frun-make%2Fprofile%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Ftest%2Frun-make%2Fprofile%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fprofile%2FMakefile?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -0,0 +1,9 @@\n+-include ../tools.mk\n+\n+all:\n+ifeq ($(PROFILER_SUPPORT),1)\n+\t$(RUSTC) -g -Z profile test.rs\n+\t$(call RUN,test) || exit 1\n+\t[ -e \"$(TMPDIR)/test.gcno\" ] || (echo \"No .gcno file\"; exit 1)\n+\t[ -e \"$(TMPDIR)/test.gcda\" ] || (echo \"No .gcda file\"; exit 1)\n+endif"}, {"sha": "046d27a9f0fe55586ed5f82a1533900e04e6b1ec", "filename": "src/test/run-make/profile/test.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Ftest%2Frun-make%2Fprofile%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dfa7e21e4ee555d04c0fb86069f5acffee3550ad/src%2Ftest%2Frun-make%2Fprofile%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fprofile%2Ftest.rs?ref=dfa7e21e4ee555d04c0fb86069f5acffee3550ad", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {}"}]}