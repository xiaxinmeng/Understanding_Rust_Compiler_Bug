{"sha": "9cda9e0ab62467199e09644258618343bd40d52e", "node_id": "C_kwDOAAsO6NoAKDljZGE5ZTBhYjYyNDY3MTk5ZTA5NjQ0MjU4NjE4MzQzYmQ0MGQ1MmU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-01-17T04:25:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-01-17T04:25:21Z"}, "message": "Rollup merge of #106712 - Ezrashaw:impl-ref-trait, r=estebank\n\nmake error emitted on `impl &Trait` nicer\n\nFixes #106694\n\nTurned out to be simpler than I thought, also added UI test.\n\nBefore: ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=9bda53271ef3a8886793cf427b8cea91))\n```text\nerror: expected one of `:`, ``@`,` or `|`, found `)`\n --> src/main.rs:2:22\n  |\n2 | fn foo(_: impl &Trait) {}\n  |                      ^ expected one of `:`, ``@`,` or `|`\n  |\n  = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\nhelp: if this is a parameter name, give it a type\n  |\n2 | fn foo(_: impl Trait: &TypeName) {}\n  |                ~~~~~~~~~~~~~~~~\nhelp: if this is a type, explicitly ignore the parameter name\n  |\n2 | fn foo(_: impl _: &Trait) {}\n  |                ++\n\nerror: expected one of `!`, `(`, `)`, `,`, `?`, `for`, `~`, lifetime, or path, found `&`\n --> src/main.rs:2:16\n  |\n2 | fn foo(_: impl &Trait) {}\n  |               -^ expected one of 9 possible tokens\n  |               |\n  |               help: missing `,`\n\nerror: expected one of `!`, `(`, `,`, `=`, `>`, `?`, `for`, `~`, lifetime, or path, found `&`\n --> src/main.rs:3:11\n  |\n3 | fn bar<T: &Trait>(_: T) {}\n  |           ^ expected one of 10 possible tokens\n```\n\nAfter:\n```text\nerror: expected a trait, found type\n --> <anon>:2:16\n  |\n2 | fn foo(_: impl &Trait) {}\n  |                -^^^^^\n  |                |\n  |                help: consider removing the indirection\n\nerror: expected a trait, found type\n --> <anon>:3:11\n  |\n3 | fn bar<T: &Trait>(_: T) {}\n  |           -^^^^^\n  |           |\n  |           help: consider removing the indirection\n```", "tree": {"sha": "465aa506c27ca589296a3c6ae1f60bdad1d971ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/465aa506c27ca589296a3c6ae1f60bdad1d971ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9cda9e0ab62467199e09644258618343bd40d52e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjxiMxCRBK7hj4Ov3rIwAAPwYIAJzQAasl28hv0KbdxP8xlwlm\nhWQqPNI/Kk2MVKK2rd5ayHQp8JoUMVJtKFnhuGnCjMCEUismT79nhxcRykSyI76A\nX44TACl3LHK3x0hVA2cDDsPQSQ/WwH+OmdK1PgsqVRjqN/4k/REkOpDaKWCT9Xum\nh3stRc2Kr43sJjP45j1nhiUybhdtBUa0h+d4MW3qmPTwL+MRUkKajChd5saJM8Dd\n21yu4vds/RUu/rsyzp4Buf6kMup7aUpujF3K48M8N5lfAYjE1XqL2l6vXr/873pz\nDMOoy+5sCac5PMDCGiKQDYOPQfFOc+Lt8+5xw0f/XDwRrplW6gZ1WzMCkScjOkI=\n=pTOo\n-----END PGP SIGNATURE-----\n", "payload": "tree 465aa506c27ca589296a3c6ae1f60bdad1d971ff\nparent f74044259a4f9392203f3b28d9e9172be22f2fef\nparent fcd5ed21b77dd1d72696e43dd70e60b1ad458f55\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1673929521 +0100\ncommitter GitHub <noreply@github.com> 1673929521 +0100\n\nRollup merge of #106712 - Ezrashaw:impl-ref-trait, r=estebank\n\nmake error emitted on `impl &Trait` nicer\n\nFixes #106694\n\nTurned out to be simpler than I thought, also added UI test.\n\nBefore: ([playground](https://play.rust-lang.org/?version=stable&mode=debug&edition=2021&gist=9bda53271ef3a8886793cf427b8cea91))\n```text\nerror: expected one of `:`, ``@`,` or `|`, found `)`\n --> src/main.rs:2:22\n  |\n2 | fn foo(_: impl &Trait) {}\n  |                      ^ expected one of `:`, ``@`,` or `|`\n  |\n  = note: anonymous parameters are removed in the 2018 edition (see RFC 1685)\nhelp: if this is a parameter name, give it a type\n  |\n2 | fn foo(_: impl Trait: &TypeName) {}\n  |                ~~~~~~~~~~~~~~~~\nhelp: if this is a type, explicitly ignore the parameter name\n  |\n2 | fn foo(_: impl _: &Trait) {}\n  |                ++\n\nerror: expected one of `!`, `(`, `)`, `,`, `?`, `for`, `~`, lifetime, or path, found `&`\n --> src/main.rs:2:16\n  |\n2 | fn foo(_: impl &Trait) {}\n  |               -^ expected one of 9 possible tokens\n  |               |\n  |               help: missing `,`\n\nerror: expected one of `!`, `(`, `,`, `=`, `>`, `?`, `for`, `~`, lifetime, or path, found `&`\n --> src/main.rs:3:11\n  |\n3 | fn bar<T: &Trait>(_: T) {}\n  |           ^ expected one of 10 possible tokens\n```\n\nAfter:\n```text\nerror: expected a trait, found type\n --> <anon>:2:16\n  |\n2 | fn foo(_: impl &Trait) {}\n  |                -^^^^^\n  |                |\n  |                help: consider removing the indirection\n\nerror: expected a trait, found type\n --> <anon>:3:11\n  |\n3 | fn bar<T: &Trait>(_: T) {}\n  |           -^^^^^\n  |           |\n  |           help: consider removing the indirection\n```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9cda9e0ab62467199e09644258618343bd40d52e", "html_url": "https://github.com/rust-lang/rust/commit/9cda9e0ab62467199e09644258618343bd40d52e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9cda9e0ab62467199e09644258618343bd40d52e/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f74044259a4f9392203f3b28d9e9172be22f2fef", "url": "https://api.github.com/repos/rust-lang/rust/commits/f74044259a4f9392203f3b28d9e9172be22f2fef", "html_url": "https://github.com/rust-lang/rust/commit/f74044259a4f9392203f3b28d9e9172be22f2fef"}, {"sha": "fcd5ed21b77dd1d72696e43dd70e60b1ad458f55", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcd5ed21b77dd1d72696e43dd70e60b1ad458f55", "html_url": "https://github.com/rust-lang/rust/commit/fcd5ed21b77dd1d72696e43dd70e60b1ad458f55"}], "stats": {"total": 160, "additions": 155, "deletions": 5}, "files": [{"sha": "9317579f70dd5967cb5e80382c8cab541c58ecea", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9cda9e0ab62467199e09644258618343bd40d52e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cda9e0ab62467199e09644258618343bd40d52e/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=9cda9e0ab62467199e09644258618343bd40d52e", "patch": "@@ -2032,7 +2032,8 @@ impl Clone for Ty {\n impl Ty {\n     pub fn peel_refs(&self) -> &Self {\n         let mut final_ty = self;\n-        while let TyKind::Ref(_, MutTy { ty, .. }) = &final_ty.kind {\n+        while let TyKind::Ref(_, MutTy { ty, .. }) | TyKind::Ptr(MutTy { ty, .. }) = &final_ty.kind\n+        {\n             final_ty = ty;\n         }\n         final_ty"}, {"sha": "1766b0293de52a33c2eceb3254ecfe0b44e7f0af", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 36, "deletions": 4, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9cda9e0ab62467199e09644258618343bd40d52e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cda9e0ab62467199e09644258618343bd40d52e/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=9cda9e0ab62467199e09644258618343bd40d52e", "patch": "@@ -727,11 +727,13 @@ impl<'a> Parser<'a> {\n         let mut bounds = Vec::new();\n         let mut negative_bounds = Vec::new();\n \n+        // In addition to looping while we find generic bounds:\n+        // We continue even if we find a keyword. This is necessary for error recovery on,\n+        // for example, `impl fn()`. The only keyword that can go after generic bounds is\n+        // `where`, so stop if it's it.\n+        // We also continue if we find types (not traits), again for error recovery.\n         while self.can_begin_bound()\n-            // Continue even if we find a keyword.\n-            // This is necessary for error recover on, for example, `impl fn()`.\n-            //\n-            // The only keyword that can go after generic bounds is `where`, so stop if it's it.\n+            || self.token.can_begin_type()\n             || (self.token.is_reserved_ident() && !self.token.is_keyword(kw::Where))\n         {\n             if self.token.is_keyword(kw::Dyn) {\n@@ -938,6 +940,36 @@ impl<'a> Parser<'a> {\n             && self.look_ahead(1, |tok| tok.kind == TokenKind::OpenDelim(Delimiter::Parenthesis))\n             && let Some(path) = self.recover_path_from_fn()\n         {\n+            path\n+        } else if !self.token.is_path_start() && self.token.can_begin_type() {\n+            let ty = self.parse_ty_no_plus()?;\n+            // Instead of finding a path (a trait), we found a type.\n+            let mut err = self.struct_span_err(ty.span, \"expected a trait, found type\");\n+\n+            // If we can recover, try to extract a path from the type. Note\n+            // that we do not use the try operator when parsing the type because\n+            // if it fails then we get a parser error which we don't want (we're trying\n+            // to recover from errors, not make more).\n+            let path = if self.may_recover()\n+                && matches!(ty.kind, TyKind::Ptr(..) | TyKind::Ref(..))\n+                && let TyKind::Path(_, path) = &ty.peel_refs().kind {\n+                // Just get the indirection part of the type.\n+                let span = ty.span.until(path.span);\n+\n+                err.span_suggestion_verbose(\n+                    span,\n+                    \"consider removing the indirection\",\n+                    \"\",\n+                    Applicability::MaybeIncorrect,\n+                );\n+\n+                path.clone()\n+            } else {\n+                return Err(err);\n+            };\n+\n+            err.emit();\n+\n             path\n         } else {\n             self.parse_path(PathStyle::Type)?"}, {"sha": "c4b02ee81ec8f65e7dce2f0ef064167be0f83625", "filename": "tests/ui/generics/issue-106694.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9cda9e0ab62467199e09644258618343bd40d52e/tests%2Fui%2Fgenerics%2Fissue-106694.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9cda9e0ab62467199e09644258618343bd40d52e/tests%2Fui%2Fgenerics%2Fissue-106694.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fissue-106694.rs?ref=9cda9e0ab62467199e09644258618343bd40d52e", "patch": "@@ -0,0 +1,24 @@\n+trait Trait {}\n+\n+fn foo(_: impl &Trait) {}\n+//~^ ERROR expected a trait, found type\n+\n+fn bar<T: &Trait>(_: T) {}\n+//~^ ERROR expected a trait, found type\n+\n+fn partially_correct_impl(_: impl &*const &Trait + Copy) {}\n+//~^ ERROR expected a trait, found type\n+\n+fn foo_bad(_: impl &BadTrait) {}\n+//~^ ERROR expected a trait, found type\n+//~^^ ERROR cannot find trait `BadTrait` in this scope\n+\n+fn bar_bad<T: &BadTrait>(_: T) {}\n+//~^ ERROR expected a trait, found type\n+//~^^ ERROR cannot find trait `BadTrait` in this scope\n+\n+fn partially_correct_impl_bad(_: impl &*const &BadTrait + Copy) {}\n+//~^ ERROR expected a trait, found type\n+//~^^ ERROR cannot find trait `BadTrait` in this scope\n+\n+fn main() {}"}, {"sha": "235b8982a99c6e9346308a20a0ce4327534414b6", "filename": "tests/ui/generics/issue-106694.stderr", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/9cda9e0ab62467199e09644258618343bd40d52e/tests%2Fui%2Fgenerics%2Fissue-106694.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9cda9e0ab62467199e09644258618343bd40d52e/tests%2Fui%2Fgenerics%2Fissue-106694.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fgenerics%2Fissue-106694.stderr?ref=9cda9e0ab62467199e09644258618343bd40d52e", "patch": "@@ -0,0 +1,93 @@\n+error: expected a trait, found type\n+  --> $DIR/issue-106694.rs:3:16\n+   |\n+LL | fn foo(_: impl &Trait) {}\n+   |                ^^^^^^\n+   |\n+help: consider removing the indirection\n+   |\n+LL - fn foo(_: impl &Trait) {}\n+LL + fn foo(_: impl Trait) {}\n+   |\n+\n+error: expected a trait, found type\n+  --> $DIR/issue-106694.rs:6:11\n+   |\n+LL | fn bar<T: &Trait>(_: T) {}\n+   |           ^^^^^^\n+   |\n+help: consider removing the indirection\n+   |\n+LL - fn bar<T: &Trait>(_: T) {}\n+LL + fn bar<T: Trait>(_: T) {}\n+   |\n+\n+error: expected a trait, found type\n+  --> $DIR/issue-106694.rs:9:35\n+   |\n+LL | fn partially_correct_impl(_: impl &*const &Trait + Copy) {}\n+   |                                   ^^^^^^^^^^^^^^\n+   |\n+help: consider removing the indirection\n+   |\n+LL - fn partially_correct_impl(_: impl &*const &Trait + Copy) {}\n+LL + fn partially_correct_impl(_: impl Trait + Copy) {}\n+   |\n+\n+error: expected a trait, found type\n+  --> $DIR/issue-106694.rs:12:20\n+   |\n+LL | fn foo_bad(_: impl &BadTrait) {}\n+   |                    ^^^^^^^^^\n+   |\n+help: consider removing the indirection\n+   |\n+LL - fn foo_bad(_: impl &BadTrait) {}\n+LL + fn foo_bad(_: impl BadTrait) {}\n+   |\n+\n+error: expected a trait, found type\n+  --> $DIR/issue-106694.rs:16:15\n+   |\n+LL | fn bar_bad<T: &BadTrait>(_: T) {}\n+   |               ^^^^^^^^^\n+   |\n+help: consider removing the indirection\n+   |\n+LL - fn bar_bad<T: &BadTrait>(_: T) {}\n+LL + fn bar_bad<T: BadTrait>(_: T) {}\n+   |\n+\n+error: expected a trait, found type\n+  --> $DIR/issue-106694.rs:20:39\n+   |\n+LL | fn partially_correct_impl_bad(_: impl &*const &BadTrait + Copy) {}\n+   |                                       ^^^^^^^^^^^^^^^^^\n+   |\n+help: consider removing the indirection\n+   |\n+LL - fn partially_correct_impl_bad(_: impl &*const &BadTrait + Copy) {}\n+LL + fn partially_correct_impl_bad(_: impl BadTrait + Copy) {}\n+   |\n+\n+error[E0405]: cannot find trait `BadTrait` in this scope\n+  --> $DIR/issue-106694.rs:12:21\n+   |\n+LL | fn foo_bad(_: impl &BadTrait) {}\n+   |                     ^^^^^^^^ not found in this scope\n+\n+error[E0405]: cannot find trait `BadTrait` in this scope\n+  --> $DIR/issue-106694.rs:16:16\n+   |\n+LL | fn bar_bad<T: &BadTrait>(_: T) {}\n+   |                ^^^^^^^^ not found in this scope\n+\n+error[E0405]: cannot find trait `BadTrait` in this scope\n+  --> $DIR/issue-106694.rs:20:48\n+   |\n+LL | fn partially_correct_impl_bad(_: impl &*const &BadTrait + Copy) {}\n+   |                                                ^^^^^^^^ not found in this scope\n+\n+error: aborting due to 9 previous errors\n+\n+For more information about this error, try `rustc --explain E0405`."}]}