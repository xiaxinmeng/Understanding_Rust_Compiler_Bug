{"sha": "ee1ca88213133a58f0a9d234f03babbebeb7c5d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMWNhODgyMTMxMzNhNThmMGE5ZDIzNGYwM2JhYmJlYmViN2M1ZDg=", "commit": {"author": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2015-01-12T22:50:39Z"}, "committer": {"name": "Peter Atashian", "email": "retep998@gmail.com", "date": "2015-01-13T02:35:39Z"}, "message": "Change Mutex to use SRWLock on Windows.\n\nSigned-off-by: Peter Atashian <retep998@gmail.com>", "tree": {"sha": "cd0e6893709df7ea66c14b0d38f9c6d0b4fafe06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd0e6893709df7ea66c14b0d38f9c6d0b4fafe06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee1ca88213133a58f0a9d234f03babbebeb7c5d8", "comment_count": 12, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee1ca88213133a58f0a9d234f03babbebeb7c5d8", "html_url": "https://github.com/rust-lang/rust/commit/ee1ca88213133a58f0a9d234f03babbebeb7c5d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee1ca88213133a58f0a9d234f03babbebeb7c5d8/comments", "author": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "committer": {"login": "retep998", "id": 666308, "node_id": "MDQ6VXNlcjY2NjMwOA==", "avatar_url": "https://avatars.githubusercontent.com/u/666308?v=4", "gravatar_id": "", "url": "https://api.github.com/users/retep998", "html_url": "https://github.com/retep998", "followers_url": "https://api.github.com/users/retep998/followers", "following_url": "https://api.github.com/users/retep998/following{/other_user}", "gists_url": "https://api.github.com/users/retep998/gists{/gist_id}", "starred_url": "https://api.github.com/users/retep998/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/retep998/subscriptions", "organizations_url": "https://api.github.com/users/retep998/orgs", "repos_url": "https://api.github.com/users/retep998/repos", "events_url": "https://api.github.com/users/retep998/events{/privacy}", "received_events_url": "https://api.github.com/users/retep998/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3d0d9bb6fbdf6ead9396f0874cf38f3ef7c9be5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d0d9bb6fbdf6ead9396f0874cf38f3ef7c9be5c", "html_url": "https://github.com/rust-lang/rust/commit/3d0d9bb6fbdf6ead9396f0874cf38f3ef7c9be5c"}], "stats": {"total": 132, "additions": 49, "deletions": 83}, "files": [{"sha": "db8038006fd6a81451a3783951609bddb7f8719f", "filename": "src/libstd/sys/windows/condvar.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ee1ca88213133a58f0a9d234f03babbebeb7c5d8/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee1ca88213133a58f0a9d234f03babbebeb7c5d8/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fcondvar.rs?ref=ee1ca88213133a58f0a9d234f03babbebeb7c5d8", "patch": "@@ -27,16 +27,18 @@ impl Condvar {\n \n     #[inline]\n     pub unsafe fn wait(&self, mutex: &Mutex) {\n-        let r = ffi::SleepConditionVariableCS(self.inner.get(),\n-                                              mutex::raw(mutex),\n-                                              libc::INFINITE);\n+        let r = ffi::SleepConditionVariableSRW(self.inner.get(),\n+                                               mutex::raw(mutex),\n+                                               libc::INFINITE,\n+                                               0);\n         debug_assert!(r != 0);\n     }\n \n     pub unsafe fn wait_timeout(&self, mutex: &Mutex, dur: Duration) -> bool {\n-        let r = ffi::SleepConditionVariableCS(self.inner.get(),\n-                                              mutex::raw(mutex),\n-                                              dur.num_milliseconds() as DWORD);\n+        let r = ffi::SleepConditionVariableSRW(self.inner.get(),\n+                                               mutex::raw(mutex),\n+                                               dur.num_milliseconds() as DWORD,\n+                                               0);\n         if r == 0 {\n             const ERROR_TIMEOUT: DWORD = 0x5B4;\n             debug_assert_eq!(os::errno() as uint, ERROR_TIMEOUT as uint);"}, {"sha": "828ad795ed3b4eaa3871fb0d4c415fa79e714cab", "filename": "src/libstd/sys/windows/mutex.rs", "status": "modified", "additions": 25, "deletions": 47, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/ee1ca88213133a58f0a9d234f03babbebeb7c5d8/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee1ca88213133a58f0a9d234f03babbebeb7c5d8/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fmutex.rs?ref=ee1ca88213133a58f0a9d234f03babbebeb7c5d8", "patch": "@@ -8,73 +8,51 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use prelude::v1::*;\n-\n-use sync::atomic::{AtomicUsize, ATOMIC_USIZE_INIT, Ordering};\n-use alloc::{self, heap};\n-\n-use libc::DWORD;\n+use marker::Sync;\n+use cell::UnsafeCell;\n use sys::sync as ffi;\n \n-const SPIN_COUNT: DWORD = 4000;\n+pub struct Mutex { inner: UnsafeCell<ffi::SRWLOCK> }\n \n-pub struct Mutex { inner: AtomicUsize }\n-\n-pub const MUTEX_INIT: Mutex = Mutex { inner: ATOMIC_USIZE_INIT };\n+pub const MUTEX_INIT: Mutex = Mutex {\n+    inner: UnsafeCell { value: ffi::SRWLOCK_INIT }\n+};\n \n unsafe impl Sync for Mutex {}\n \n #[inline]\n-pub unsafe fn raw(m: &Mutex) -> ffi::LPCRITICAL_SECTION {\n-    m.get()\n+pub unsafe fn raw(m: &Mutex) -> ffi::PSRWLOCK {\n+    m.inner.get()\n }\n \n+// So you might be asking why we're using SRWLock instead of CriticalSection?\n+//\n+// 1. SRWLock is several times faster than CriticalSection according to benchmarks performed on both\n+// Windows 8 and Windows 7.\n+//\n+// 2. CriticalSection allows recursive locking while SRWLock deadlocks. The Unix implementation\n+// deadlocks so consistency is preferred. See #19962 for more details.\n+//\n+// 3. While CriticalSection is fair and SRWLock is not, the current Rust policy is there there are\n+// no guarantees of fairness.\n+\n impl Mutex {\n     #[inline]\n-    pub unsafe fn new() -> Mutex {\n-        Mutex { inner: AtomicUsize::new(init_lock() as uint) }\n-    }\n+    pub unsafe fn new() -> Mutex { MUTEX_INIT }\n     #[inline]\n     pub unsafe fn lock(&self) {\n-        ffi::EnterCriticalSection(self.get())\n+        ffi::AcquireSRWLockExclusive(self.inner.get())\n     }\n     #[inline]\n     pub unsafe fn try_lock(&self) -> bool {\n-        ffi::TryEnterCriticalSection(self.get()) != 0\n+        ffi::TryAcquireSRWLockExclusive(self.inner.get()) != 0\n     }\n     #[inline]\n     pub unsafe fn unlock(&self) {\n-        ffi::LeaveCriticalSection(self.get())\n+        ffi::ReleaseSRWLockExclusive(self.inner.get())\n     }\n+    #[inline]\n     pub unsafe fn destroy(&self) {\n-        let lock = self.inner.swap(0, Ordering::SeqCst);\n-        if lock != 0 { free_lock(lock as ffi::LPCRITICAL_SECTION) }\n-    }\n-\n-    unsafe fn get(&self) -> ffi::LPCRITICAL_SECTION {\n-        match self.inner.load(Ordering::SeqCst) {\n-            0 => {}\n-            n => return n as ffi::LPCRITICAL_SECTION\n-        }\n-        let lock = init_lock();\n-        match self.inner.compare_and_swap(0, lock as uint, Ordering::SeqCst) {\n-            0 => return lock as ffi::LPCRITICAL_SECTION,\n-            _ => {}\n-        }\n-        free_lock(lock);\n-        return self.inner.load(Ordering::SeqCst) as ffi::LPCRITICAL_SECTION;\n+        // ...\n     }\n }\n-\n-unsafe fn init_lock() -> ffi::LPCRITICAL_SECTION {\n-    let block = heap::allocate(ffi::CRITICAL_SECTION_SIZE, 8)\n-                        as ffi::LPCRITICAL_SECTION;\n-    if block.is_null() { alloc::oom() }\n-    ffi::InitializeCriticalSectionAndSpinCount(block, SPIN_COUNT);\n-    return block;\n-}\n-\n-unsafe fn free_lock(h: ffi::LPCRITICAL_SECTION) {\n-    ffi::DeleteCriticalSection(h);\n-    heap::deallocate(h as *mut _, ffi::CRITICAL_SECTION_SIZE, 8);\n-}"}, {"sha": "d60646b7db915cdd9e568619adf8d017b598bc6e", "filename": "src/libstd/sys/windows/sync.rs", "status": "modified", "additions": 16, "deletions": 30, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/ee1ca88213133a58f0a9d234f03babbebeb7c5d8/src%2Flibstd%2Fsys%2Fwindows%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee1ca88213133a58f0a9d234f03babbebeb7c5d8/src%2Flibstd%2Fsys%2Fwindows%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fsync.rs?ref=ee1ca88213133a58f0a9d234f03babbebeb7c5d8", "patch": "@@ -8,17 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use libc::{BOOL, DWORD, c_void, LPVOID};\n+use libc::{BOOL, DWORD, c_void, LPVOID, c_ulong};\n use libc::types::os::arch::extra::BOOLEAN;\n \n-pub type LPCRITICAL_SECTION = *mut c_void;\n-pub type LPCONDITION_VARIABLE = *mut CONDITION_VARIABLE;\n-pub type LPSRWLOCK = *mut SRWLOCK;\n-\n-#[cfg(target_arch = \"x86\")]\n-pub const CRITICAL_SECTION_SIZE: uint = 24;\n-#[cfg(target_arch = \"x86_64\")]\n-pub const CRITICAL_SECTION_SIZE: uint = 40;\n+pub type PCONDITION_VARIABLE = *mut CONDITION_VARIABLE;\n+pub type PSRWLOCK = *mut SRWLOCK;\n+pub type ULONG = c_ulong;\n \n #[repr(C)]\n pub struct CONDITION_VARIABLE { pub ptr: LPVOID }\n@@ -31,28 +26,19 @@ pub const CONDITION_VARIABLE_INIT: CONDITION_VARIABLE = CONDITION_VARIABLE {\n pub const SRWLOCK_INIT: SRWLOCK = SRWLOCK { ptr: 0 as *mut _ };\n \n extern \"system\" {\n-    // critical sections\n-    pub fn InitializeCriticalSectionAndSpinCount(\n-                    lpCriticalSection: LPCRITICAL_SECTION,\n-                    dwSpinCount: DWORD) -> BOOL;\n-    pub fn DeleteCriticalSection(lpCriticalSection: LPCRITICAL_SECTION);\n-    pub fn EnterCriticalSection(lpCriticalSection: LPCRITICAL_SECTION);\n-    pub fn LeaveCriticalSection(lpCriticalSection: LPCRITICAL_SECTION);\n-    pub fn TryEnterCriticalSection(lpCriticalSection: LPCRITICAL_SECTION) -> BOOL;\n-\n     // condition variables\n-    pub fn SleepConditionVariableCS(ConditionVariable: LPCONDITION_VARIABLE,\n-                                    CriticalSection: LPCRITICAL_SECTION,\n-                                    dwMilliseconds: DWORD) -> BOOL;\n-    pub fn WakeConditionVariable(ConditionVariable: LPCONDITION_VARIABLE);\n-    pub fn WakeAllConditionVariable(ConditionVariable: LPCONDITION_VARIABLE);\n+    pub fn SleepConditionVariableSRW(ConditionVariable: PCONDITION_VARIABLE,\n+                                     SRWLock: PSRWLOCK,\n+                                     dwMilliseconds: DWORD,\n+                                     Flags: ULONG) -> BOOL;\n+    pub fn WakeConditionVariable(ConditionVariable: PCONDITION_VARIABLE);\n+    pub fn WakeAllConditionVariable(ConditionVariable: PCONDITION_VARIABLE);\n \n     // slim rwlocks\n-    pub fn AcquireSRWLockExclusive(SRWLock: LPSRWLOCK);\n-    pub fn AcquireSRWLockShared(SRWLock: LPSRWLOCK);\n-    pub fn ReleaseSRWLockExclusive(SRWLock: LPSRWLOCK);\n-    pub fn ReleaseSRWLockShared(SRWLock: LPSRWLOCK);\n-    pub fn TryAcquireSRWLockExclusive(SRWLock: LPSRWLOCK) -> BOOLEAN;\n-    pub fn TryAcquireSRWLockShared(SRWLock: LPSRWLOCK) -> BOOLEAN;\n+    pub fn AcquireSRWLockExclusive(SRWLock: PSRWLOCK);\n+    pub fn AcquireSRWLockShared(SRWLock: PSRWLOCK);\n+    pub fn ReleaseSRWLockExclusive(SRWLock: PSRWLOCK);\n+    pub fn ReleaseSRWLockShared(SRWLock: PSRWLOCK);\n+    pub fn TryAcquireSRWLockExclusive(SRWLock: PSRWLOCK) -> BOOLEAN;\n+    pub fn TryAcquireSRWLockShared(SRWLock: PSRWLOCK) -> BOOLEAN;\n }\n-"}]}