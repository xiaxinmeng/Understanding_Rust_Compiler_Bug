{"sha": "75bc8bfa922e533f111e54b0d841d85d61c7f317", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc1YmM4YmZhOTIyZTUzM2YxMTFlNTRiMGQ4NDFkODVkNjFjN2YzMTc=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-10-06T08:56:13Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-11-01T18:07:45Z"}, "message": "introduce EarlyLint type\n\nFor now, this type just replaces a tuple, but it will eventually grow\nthe ability to carry more structured information.", "tree": {"sha": "f4aa45bf9e42f4a7b94accb6d06274aa1feaab05", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4aa45bf9e42f4a7b94accb6d06274aa1feaab05"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/75bc8bfa922e533f111e54b0d841d85d61c7f317", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/75bc8bfa922e533f111e54b0d841d85d61c7f317", "html_url": "https://github.com/rust-lang/rust/commit/75bc8bfa922e533f111e54b0d841d85d61c7f317", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/75bc8bfa922e533f111e54b0d841d85d61c7f317/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd5fa7532d9f9944b6347624553f420bd7c89132", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd5fa7532d9f9944b6347624553f420bd7c89132", "html_url": "https://github.com/rust-lang/rust/commit/bd5fa7532d9f9944b6347624553f420bd7c89132"}], "stats": {"total": 73, "additions": 57, "deletions": 16}, "files": [{"sha": "bcc8384dd0ea7a063d2f955312edff42771e76f8", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 51, "deletions": 10, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/75bc8bfa922e533f111e54b0d841d85d61c7f317/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75bc8bfa922e533f111e54b0d841d85d61c7f317/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=75bc8bfa922e533f111e54b0d841d85d61c7f317", "patch": "@@ -38,6 +38,7 @@ use util::nodemap::FnvHashMap;\n use std::cmp;\n use std::default::Default as StdDefault;\n use std::mem;\n+use std::fmt;\n use syntax::attr;\n use syntax::parse::token::InternedString;\n use syntax::ast;\n@@ -80,6 +81,41 @@ pub struct LintStore {\n     lint_cap: Option<Level>,\n }\n \n+/// When you call `add_lint` on the session, you wind up storing one\n+/// of these, which records a \"potential lint\" at a particular point.\n+pub struct EarlyLint {\n+    /// what lint is this? (e.g., `dead_code`)\n+    pub id: LintId,\n+\n+    /// the span where the lint will be reported at\n+    pub span: Span,\n+\n+    /// the main message\n+    pub msg: String,\n+}\n+\n+impl fmt::Debug for EarlyLint {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        f.debug_struct(\"EarlyLint\")\n+            .field(\"id\", &self.id)\n+            .field(\"span\", &self.span)\n+            .field(\"msg\", &self.msg)\n+            .finish()\n+    }\n+}\n+\n+impl EarlyLint {\n+    pub fn new(id: LintId, span: Span, msg: String) -> Self {\n+        EarlyLint { id: id, span: span, msg: msg }\n+    }\n+\n+    pub fn matches(&self, other: &EarlyLint) -> bool {\n+        self.id == other.id && self.span == other.span && self.msg == other.msg\n+    }\n+}\n+\n+\n+\n /// Extra information for a future incompatibility lint. See the call\n /// to `register_future_incompatible` in `librustc_lint/lib.rs` for\n /// guidelines.\n@@ -514,6 +550,11 @@ pub trait LintContext: Sized {\n         self.lookup_and_emit(lint, Some(span), msg);\n     }\n \n+    fn early_lint(&self, early_lint: EarlyLint) {\n+        let mut err = self.struct_span_lint(early_lint.id.lint, early_lint.span, &early_lint.msg);\n+        err.emit();\n+    }\n+\n     fn struct_span_lint(&self,\n                         lint: &'static Lint,\n                         span: Span,\n@@ -1065,8 +1106,8 @@ impl<'a, 'b, 'tcx, 'v> hir_visit::Visitor<'v> for IdVisitor<'a, 'b, 'tcx> {\n     fn visit_id(&mut self, id: ast::NodeId) {\n         if let Some(lints) = self.cx.sess().lints.borrow_mut().remove(&id) {\n             debug!(\"LateContext::visit_id: id={:?} lints={:?}\", id, lints);\n-            for (lint_id, span, msg) in lints {\n-                self.cx.span_lint(lint_id.lint, span, &msg[..])\n+            for early_lint in lints {\n+                self.cx.early_lint(early_lint);\n             }\n         }\n     }\n@@ -1211,10 +1252,10 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // If we missed any lints added to the session, then there's a bug somewhere\n     // in the iteration code.\n     for (id, v) in tcx.sess.lints.borrow().iter() {\n-        for &(lint, span, ref msg) in v {\n-            span_bug!(span,\n-                      \"unprocessed lint {} at {}: {}\",\n-                      lint.to_string(), tcx.map.node_to_string(*id), *msg)\n+        for early_lint in v {\n+            span_bug!(early_lint.span,\n+                      \"unprocessed lint {:?} at {}\",\n+                      early_lint, tcx.map.node_to_string(*id));\n         }\n     }\n \n@@ -1229,8 +1270,8 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n     cx.with_lint_attrs(&krate.attrs, |cx| {\n         // Lints may be assigned to the whole crate.\n         if let Some(lints) = cx.sess.lints.borrow_mut().remove(&ast::CRATE_NODE_ID) {\n-            for (lint_id, span, msg) in lints {\n-                cx.span_lint(lint_id.lint, span, &msg[..])\n+            for early_lint in lints {\n+                cx.early_lint(early_lint);\n             }\n         }\n \n@@ -1249,8 +1290,8 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n     // If we missed any lints added to the session, then there's a bug somewhere\n     // in the iteration code.\n     for (_, v) in sess.lints.borrow().iter() {\n-        for &(lint, span, ref msg) in v {\n-            span_bug!(span, \"unprocessed lint {}: {}\", lint.to_string(), *msg)\n+        for early_lint in v {\n+            span_bug!(early_lint.span, \"unprocessed lint {:?}\", early_lint);\n         }\n     }\n }"}, {"sha": "0e11546e643e455615ef68f547c7df7f862065f4", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/75bc8bfa922e533f111e54b0d841d85d61c7f317/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75bc8bfa922e533f111e54b0d841d85d61c7f317/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=75bc8bfa922e533f111e54b0d841d85d61c7f317", "patch": "@@ -41,7 +41,7 @@ use hir;\n \n pub use lint::context::{LateContext, EarlyContext, LintContext, LintStore,\n                         raw_emit_lint, check_crate, check_ast_crate, gather_attrs,\n-                        raw_struct_lint, FutureIncompatibleInfo};\n+                        raw_struct_lint, FutureIncompatibleInfo, EarlyLint};\n \n /// Specification of a single lint.\n #[derive(Copy, Clone, Debug)]"}, {"sha": "acfdfc9a0271fbb053a6f64e5060fcec0b305b4a", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/75bc8bfa922e533f111e54b0d841d85d61c7f317/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/75bc8bfa922e533f111e54b0d841d85d61c7f317/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=75bc8bfa922e533f111e54b0d841d85d61c7f317", "patch": "@@ -74,7 +74,7 @@ pub struct Session {\n     pub local_crate_source_file: Option<PathBuf>,\n     pub working_dir: PathBuf,\n     pub lint_store: RefCell<lint::LintStore>,\n-    pub lints: RefCell<NodeMap<Vec<(lint::LintId, Span, String)>>>,\n+    pub lints: RefCell<NodeMap<Vec<lint::EarlyLint>>>,\n     /// Set of (LintId, span, message) tuples tracking lint (sub)diagnostics\n     /// that have been set once, but should not be set again, in order to avoid\n     /// redundantly verbose output (Issue #24690).\n@@ -265,14 +265,14 @@ impl Session {\n                     msg: String) {\n         let lint_id = lint::LintId::of(lint);\n         let mut lints = self.lints.borrow_mut();\n+        let early_lint = lint::EarlyLint::new(lint_id, sp, msg);\n         if let Some(arr) = lints.get_mut(&id) {\n-            let tuple = (lint_id, sp, msg);\n-            if !arr.contains(&tuple) {\n-                arr.push(tuple);\n+            if !arr.iter().any(|l| l.matches(&early_lint)) {\n+                arr.push(early_lint);\n             }\n             return;\n         }\n-        lints.insert(id, vec![(lint_id, sp, msg)]);\n+        lints.insert(id, vec![early_lint]);\n     }\n     pub fn reserve_node_ids(&self, count: usize) -> ast::NodeId {\n         let id = self.next_node_id.get();"}]}