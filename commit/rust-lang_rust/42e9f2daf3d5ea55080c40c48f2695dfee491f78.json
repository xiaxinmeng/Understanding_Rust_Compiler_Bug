{"sha": "42e9f2daf3d5ea55080c40c48f2695dfee491f78", "node_id": "C_kwDOAAsO6NoAKDQyZTlmMmRhZjNkNWVhNTUwODBjNDBjNDhmMjY5NWRmZWU0OTFmNzg", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-05-21T03:55:37Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-05-21T03:55:37Z"}, "message": "typo suggestion for a variable with a name similar to struct fields", "tree": {"sha": "07b143e6940202f0fda6cae41cd28bcda536f361", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07b143e6940202f0fda6cae41cd28bcda536f361"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42e9f2daf3d5ea55080c40c48f2695dfee491f78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42e9f2daf3d5ea55080c40c48f2695dfee491f78", "html_url": "https://github.com/rust-lang/rust/commit/42e9f2daf3d5ea55080c40c48f2695dfee491f78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42e9f2daf3d5ea55080c40c48f2695dfee491f78/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fbd92d0b95d847c68948d8dbbfaccb470db4f92", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fbd92d0b95d847c68948d8dbbfaccb470db4f92", "html_url": "https://github.com/rust-lang/rust/commit/8fbd92d0b95d847c68948d8dbbfaccb470db4f92"}], "stats": {"total": 70, "additions": 63, "deletions": 7}, "files": [{"sha": "42063ac940abf100646bc6a0ff84e6514d3a9994", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/42e9f2daf3d5ea55080c40c48f2695dfee491f78/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e9f2daf3d5ea55080c40c48f2695dfee491f78/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=42e9f2daf3d5ea55080c40c48f2695dfee491f78", "patch": "@@ -443,6 +443,8 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                 );\n             }\n         }\n+        // Try Levenshtein algorithm.\n+        let typo_sugg = self.lookup_typo_candidate(path, ns, is_expected);\n         if path.len() == 1 && self.self_type_is_available() {\n             if let Some(candidate) = self.lookup_assoc_candidate(ident, ns, is_expected) {\n                 let self_is_available = self.self_value_is_available(path[0].ident.span);\n@@ -452,18 +454,19 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                             err.span_suggestion(\n                                 span,\n                                 \"you might have meant to use the available field\",\n-                                format!(\"self.{}\", path_str),\n+                                format!(\"self.{path_str}\"),\n                                 Applicability::MachineApplicable,\n                             );\n                         } else {\n                             err.span_label(span, \"a field by this name exists in `Self`\");\n                         }\n+                        self.r.add_typo_suggestion(&mut err, typo_sugg, ident_span);\n                     }\n                     AssocSuggestion::MethodWithSelf if self_is_available => {\n                         err.span_suggestion(\n                             span,\n                             \"you might have meant to call the method\",\n-                            format!(\"self.{}\", path_str),\n+                            format!(\"self.{path_str}\"),\n                             Applicability::MachineApplicable,\n                         );\n                     }\n@@ -474,7 +477,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n                         err.span_suggestion(\n                             span,\n                             &format!(\"you might have meant to {}\", candidate.action()),\n-                            format!(\"Self::{}\", path_str),\n+                            format!(\"Self::{path_str}\"),\n                             Applicability::MachineApplicable,\n                         );\n                     }\n@@ -493,16 +496,14 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n \n                 err.span_suggestion(\n                     call_span,\n-                    &format!(\"try calling `{}` as a method\", ident),\n-                    format!(\"self.{}({})\", path_str, args_snippet),\n+                    &format!(\"try calling `{ident}` as a method\"),\n+                    format!(\"self.{path_str}({args_snippet})\"),\n                     Applicability::MachineApplicable,\n                 );\n                 return (err, candidates);\n             }\n         }\n \n-        // Try Levenshtein algorithm.\n-        let typo_sugg = self.lookup_typo_candidate(path, ns, is_expected);\n         // Try context-dependent help if relaxed lookup didn't work.\n         if let Some(res) = res {\n             if self.smart_resolve_context_dependent_help("}, {"sha": "7db4dd2f49c653bf84a814a78f70d2ad3eb58f85", "filename": "src/test/ui/resolve/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/42e9f2daf3d5ea55080c40c48f2695dfee491f78/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42e9f2daf3d5ea55080c40c48f2695dfee491f78/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.rs?ref=42e9f2daf3d5ea55080c40c48f2695dfee491f78", "patch": "@@ -0,0 +1,19 @@\n+struct Foo {\n+    config: String,\n+}\n+\n+impl Foo {\n+    fn new(cofig: String) -> Self {\n+        Self { config } //~ Error cannot find value `config` in this scope\n+    }\n+\n+    fn do_something(cofig: String) {\n+        println!(\"{config}\"); //~ Error cannot find value `config` in this scope\n+    }\n+\n+    fn self_is_available(self, cofig: String) {\n+        println!(\"{config}\"); //~ Error cannot find value `config` in this scope\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "6e9fe6d9c46976f2c67f761ace43084651d87de6", "filename": "src/test/ui/resolve/typo-suggestion-for-variable-with-name-similar-to-struct-field.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/42e9f2daf3d5ea55080c40c48f2695dfee491f78/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/42e9f2daf3d5ea55080c40c48f2695dfee491f78/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-for-variable-with-name-similar-to-struct-field.stderr?ref=42e9f2daf3d5ea55080c40c48f2695dfee491f78", "patch": "@@ -0,0 +1,36 @@\n+error[E0425]: cannot find value `config` in this scope\n+  --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:7:16\n+   |\n+LL |         Self { config }\n+   |                ^^^^^^\n+   |                |\n+   |                a field by this name exists in `Self`\n+   |                help: a local variable with a similar name exists: `cofig`\n+\n+error[E0425]: cannot find value `config` in this scope\n+  --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:11:20\n+   |\n+LL |         println!(\"{config}\");\n+   |                    ^^^^^^\n+   |                    |\n+   |                    a field by this name exists in `Self`\n+   |                    help: a local variable with a similar name exists: `cofig`\n+\n+error[E0425]: cannot find value `config` in this scope\n+  --> $DIR/typo-suggestion-for-variable-with-name-similar-to-struct-field.rs:15:20\n+   |\n+LL |         println!(\"{config}\");\n+   |                    ^^^^^^\n+   |\n+help: you might have meant to use the available field\n+   |\n+LL |         println!(\"{self.config}\");\n+   |                    ~~~~~~~~~~~\n+help: a local variable with a similar name exists\n+   |\n+LL |         println!(\"{cofig}\");\n+   |                    ~~~~~\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0425`."}]}