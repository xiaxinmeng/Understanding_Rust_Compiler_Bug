{"sha": "15ad78c638457e6ea95553e5d233c79e52bacb3b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1YWQ3OGM2Mzg0NTdlNmVhOTU1NTNlNWQyMzNjNzllNTJiYWNiM2I=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-23T17:06:49Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-23T17:06:49Z"}, "message": "Merge #5507\n\n5507: Require quotes around key-value cfg flags in rust-project.json r=matklad a=matklad\n\nThis matches rustc command-line flags, as well as the build.rs format.\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "151555d84672f020f79eb4cf34bb5e67ec106615", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/151555d84672f020f79eb4cf34bb5e67ec106615"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15ad78c638457e6ea95553e5d233c79e52bacb3b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfGcOpCRBK7hj4Ov3rIwAAdHIIAIbDQktudDo/lFeno2jnsVNh\nIcUUQrtDfnnJ2IKq8kUD2UFHlPcO2bEa7m0TbOCjADddxER7lezhP+Y//WYAnatU\nV/tKOZzAK7/qvABl286cHt4XPSsmGaQfZADlR6PJmkyEl/CDdEkQNfIcFjud9/6n\nFNy4FeBevh55FS2oO5j6+23WXykOcEairWpCUL8CJgzFQXvm/ysgi9WtmirCtEgt\n5yz1/gP5cBnM44MKxt+F3RO40wHoPeeOJA/hPQkUhiq0vPafR/ICit9ZguY1jGhc\ny0MWSlj04bgIXWqAurlMhu/q5PPEsqvrqB5mXx06vq/qgh2+fBEmEyNyINC7PrM=\n=NE5t\n-----END PGP SIGNATURE-----\n", "payload": "tree 151555d84672f020f79eb4cf34bb5e67ec106615\nparent 243b997df4dfc07910d38022828bc0f1d4745c57\nparent 7c0743293e5720a5be7b44b4a781b2982d63152a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1595524009 +0000\ncommitter GitHub <noreply@github.com> 1595524009 +0000\n\nMerge #5507\n\n5507: Require quotes around key-value cfg flags in rust-project.json r=matklad a=matklad\n\nThis matches rustc command-line flags, as well as the build.rs format.\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15ad78c638457e6ea95553e5d233c79e52bacb3b", "html_url": "https://github.com/rust-lang/rust/commit/15ad78c638457e6ea95553e5d233c79e52bacb3b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15ad78c638457e6ea95553e5d233c79e52bacb3b/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "243b997df4dfc07910d38022828bc0f1d4745c57", "url": "https://api.github.com/repos/rust-lang/rust/commits/243b997df4dfc07910d38022828bc0f1d4745c57", "html_url": "https://github.com/rust-lang/rust/commit/243b997df4dfc07910d38022828bc0f1d4745c57"}, {"sha": "7c0743293e5720a5be7b44b4a781b2982d63152a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c0743293e5720a5be7b44b4a781b2982d63152a", "html_url": "https://github.com/rust-lang/rust/commit/7c0743293e5720a5be7b44b4a781b2982d63152a"}], "stats": {"total": 178, "additions": 107, "deletions": 71}, "files": [{"sha": "fb88e0f066668ec947787e26205b8af143c56115", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/15ad78c638457e6ea95553e5d233c79e52bacb3b/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ad78c638457e6ea95553e5d233c79e52bacb3b/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=15ad78c638457e6ea95553e5d233c79e52bacb3b", "patch": "@@ -14,6 +14,8 @@ use ra_arena::{Arena, Idx};\n use ra_db::Edition;\n use rustc_hash::FxHashMap;\n \n+use crate::cfg_flag::CfgFlag;\n+\n /// `CargoWorkspace` represents the logical structure of, well, a Cargo\n /// workspace. It pretty closely mirrors `cargo metadata` output.\n ///\n@@ -78,7 +80,7 @@ pub struct PackageData {\n     pub dependencies: Vec<PackageDependency>,\n     pub edition: Edition,\n     pub features: Vec<String>,\n-    pub cfgs: Vec<String>,\n+    pub cfgs: Vec<CfgFlag>,\n     pub out_dir: Option<AbsPathBuf>,\n     pub proc_macro_dylib_path: Option<AbsPathBuf>,\n }\n@@ -276,7 +278,7 @@ impl CargoWorkspace {\n pub struct ExternResources {\n     out_dirs: FxHashMap<PackageId, AbsPathBuf>,\n     proc_dylib_paths: FxHashMap<PackageId, AbsPathBuf>,\n-    cfgs: FxHashMap<PackageId, Vec<String>>,\n+    cfgs: FxHashMap<PackageId, Vec<CfgFlag>>,\n }\n \n pub fn load_extern_resources(\n@@ -303,6 +305,18 @@ pub fn load_extern_resources(\n         if let Ok(message) = message {\n             match message {\n                 Message::BuildScriptExecuted(BuildScript { package_id, out_dir, cfgs, .. }) => {\n+                    let cfgs = {\n+                        let mut acc = Vec::new();\n+                        for cfg in cfgs {\n+                            match cfg.parse::<CfgFlag>() {\n+                                Ok(it) => acc.push(it),\n+                                Err(err) => {\n+                                    anyhow::bail!(\"invalid cfg from cargo-metadata: {}\", err)\n+                                }\n+                            };\n+                        }\n+                        acc\n+                    };\n                     // cargo_metadata crate returns default (empty) path for\n                     // older cargos, which is not absolute, so work around that.\n                     if out_dir != PathBuf::default() {"}, {"sha": "1bc5d4832dda8379d54151201279bba4534fca12", "filename": "crates/ra_project_model/src/cfg_flag.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/15ad78c638457e6ea95553e5d233c79e52bacb3b/crates%2Fra_project_model%2Fsrc%2Fcfg_flag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ad78c638457e6ea95553e5d233c79e52bacb3b/crates%2Fra_project_model%2Fsrc%2Fcfg_flag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcfg_flag.rs?ref=15ad78c638457e6ea95553e5d233c79e52bacb3b", "patch": "@@ -0,0 +1,51 @@\n+//! Parsing of CfgFlags as command line arguments, as in\n+//!\n+//! rustc main.rs --cfg foo --cfg 'feature=\"bar\"'\n+use std::str::FromStr;\n+\n+use ra_cfg::CfgOptions;\n+use stdx::split_delim;\n+\n+#[derive(Clone, Eq, PartialEq, Debug)]\n+pub enum CfgFlag {\n+    Atom(String),\n+    KeyValue { key: String, value: String },\n+}\n+\n+impl FromStr for CfgFlag {\n+    type Err = String;\n+    fn from_str(s: &str) -> Result<Self, Self::Err> {\n+        let res = match split_delim(s, '=') {\n+            Some((key, value)) => {\n+                if !(value.starts_with('\"') && value.ends_with('\"')) {\n+                    return Err(format!(\"Invalid cfg ({:?}), value should be in quotes\", s));\n+                }\n+                let key = key.to_string();\n+                let value = value[1..value.len() - 1].to_string();\n+                CfgFlag::KeyValue { key, value }\n+            }\n+            None => CfgFlag::Atom(s.into()),\n+        };\n+        Ok(res)\n+    }\n+}\n+\n+impl<'de> serde::Deserialize<'de> for CfgFlag {\n+    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n+    where\n+        D: serde::Deserializer<'de>,\n+    {\n+        String::deserialize(deserializer)?.parse().map_err(serde::de::Error::custom)\n+    }\n+}\n+\n+impl Extend<CfgFlag> for CfgOptions {\n+    fn extend<T: IntoIterator<Item = CfgFlag>>(&mut self, iter: T) {\n+        for cfg_flag in iter {\n+            match cfg_flag {\n+                CfgFlag::Atom(it) => self.insert_atom(it.into()),\n+                CfgFlag::KeyValue { key, value } => self.insert_key_value(key.into(), value.into()),\n+            }\n+        }\n+    }\n+}"}, {"sha": "300e751355b90fd15acb0ccfce99e6267065cf15", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 30, "deletions": 47, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/15ad78c638457e6ea95553e5d233c79e52bacb3b/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ad78c638457e6ea95553e5d233c79e52bacb3b/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=15ad78c638457e6ea95553e5d233c79e52bacb3b", "patch": "@@ -3,25 +3,28 @@\n mod cargo_workspace;\n mod project_json;\n mod sysroot;\n+mod cfg_flag;\n \n use std::{\n     fs::{self, read_dir, ReadDir},\n     io,\n-    process::{Command, Output},\n+    process::Command,\n };\n \n use anyhow::{bail, Context, Result};\n use paths::{AbsPath, AbsPathBuf};\n use ra_cfg::CfgOptions;\n use ra_db::{CrateGraph, CrateId, CrateName, Edition, Env, FileId};\n use rustc_hash::{FxHashMap, FxHashSet};\n-use stdx::split_delim;\n+\n+use crate::cfg_flag::CfgFlag;\n \n pub use crate::{\n     cargo_workspace::{CargoConfig, CargoWorkspace, Package, Target, TargetKind},\n     project_json::{ProjectJson, ProjectJsonData},\n     sysroot::Sysroot,\n };\n+\n pub use ra_proc_macro::ProcMacroClient;\n \n #[derive(Debug, Clone, Eq, PartialEq)]\n@@ -250,7 +253,7 @@ impl ProjectWorkspace {\n         let mut crate_graph = CrateGraph::default();\n         match self {\n             ProjectWorkspace::Json { project } => {\n-                let mut target_cfg_map = FxHashMap::<Option<&str>, CfgOptions>::default();\n+                let mut cfg_cache: FxHashMap<Option<&str>, Vec<CfgFlag>> = FxHashMap::default();\n                 let crates: FxHashMap<_, _> = project\n                     .crates\n                     .iter()\n@@ -266,11 +269,12 @@ impl ProjectWorkspace {\n                             .map(|it| proc_macro_client.by_dylib_path(&it));\n \n                         let target = krate.target.as_deref().or(target);\n-                        let target_cfgs = target_cfg_map\n-                            .entry(target.clone())\n-                            .or_insert_with(|| get_rustc_cfg_options(target.as_deref()));\n-                        let mut cfg_options = krate.cfg.clone();\n-                        cfg_options.append(target_cfgs);\n+                        let target_cfgs = cfg_cache\n+                            .entry(target)\n+                            .or_insert_with(|| get_rustc_cfg_options(target));\n+\n+                        let mut cfg_options = CfgOptions::default();\n+                        cfg_options.extend(target_cfgs.iter().chain(krate.cfg.iter()).cloned());\n \n                         // FIXME: No crate name in json definition such that we cannot add OUT_DIR to env\n                         Some((\n@@ -307,7 +311,8 @@ impl ProjectWorkspace {\n                 }\n             }\n             ProjectWorkspace::Cargo { cargo, sysroot } => {\n-                let mut cfg_options = get_rustc_cfg_options(target);\n+                let mut cfg_options = CfgOptions::default();\n+                cfg_options.extend(get_rustc_cfg_options(target));\n \n                 let sysroot_crates: FxHashMap<_, _> = sysroot\n                     .crates()\n@@ -354,6 +359,7 @@ impl ProjectWorkspace {\n \n                 // Add test cfg for non-sysroot crates\n                 cfg_options.insert_atom(\"test\".into());\n+                cfg_options.insert_atom(\"debug_assertions\".into());\n \n                 // Next, create crates for each package, target pair\n                 for pkg in cargo.packages() {\n@@ -367,15 +373,7 @@ impl ProjectWorkspace {\n                                 for feature in cargo[pkg].features.iter() {\n                                     opts.insert_key_value(\"feature\".into(), feature.into());\n                                 }\n-                                for cfg in cargo[pkg].cfgs.iter() {\n-                                    match cfg.find('=') {\n-                                        Some(split) => opts.insert_key_value(\n-                                            cfg[..split].into(),\n-                                            cfg[split + 1..].trim_matches('\"').into(),\n-                                        ),\n-                                        None => opts.insert_atom(cfg.into()),\n-                                    };\n-                                }\n+                                opts.extend(cargo[pkg].cfgs.iter().cloned());\n                                 opts\n                             };\n                             let mut env = Env::default();\n@@ -503,51 +501,35 @@ impl ProjectWorkspace {\n     }\n }\n \n-fn get_rustc_cfg_options(target: Option<&str>) -> CfgOptions {\n-    let mut cfg_options = CfgOptions::default();\n+fn get_rustc_cfg_options(target: Option<&str>) -> Vec<CfgFlag> {\n+    let mut res = Vec::new();\n \n     // Some nightly-only cfgs, which are required for stdlib\n-    {\n-        cfg_options.insert_atom(\"target_thread_local\".into());\n-        for &target_has_atomic in [\"8\", \"16\", \"32\", \"64\", \"cas\", \"ptr\"].iter() {\n-            cfg_options.insert_key_value(\"target_has_atomic\".into(), target_has_atomic.into());\n-            cfg_options\n-                .insert_key_value(\"target_has_atomic_load_store\".into(), target_has_atomic.into());\n+    res.push(CfgFlag::Atom(\"target_thread_local\".into()));\n+    for &ty in [\"8\", \"16\", \"32\", \"64\", \"cas\", \"ptr\"].iter() {\n+        for &key in [\"target_has_atomic\", \"target_has_atomic_load_store\"].iter() {\n+            res.push(CfgFlag::KeyValue { key: key.to_string(), value: ty.into() });\n         }\n     }\n \n-    let rustc_cfgs = || -> Result<String> {\n-        // `cfg(test)` and `cfg(debug_assertion)` are handled outside, so we suppress them here.\n+    let rustc_cfgs = {\n         let mut cmd = Command::new(ra_toolchain::rustc());\n         cmd.args(&[\"--print\", \"cfg\", \"-O\"]);\n         if let Some(target) = target {\n             cmd.args(&[\"--target\", target]);\n         }\n-        let output = output(cmd)?;\n-        Ok(String::from_utf8(output.stdout)?)\n-    }();\n+        utf8_stdout(cmd)\n+    };\n \n     match rustc_cfgs {\n-        Ok(rustc_cfgs) => {\n-            for line in rustc_cfgs.lines() {\n-                match split_delim(line, '=') {\n-                    None => cfg_options.insert_atom(line.into()),\n-                    Some((key, value)) => {\n-                        let value = value.trim_matches('\"');\n-                        cfg_options.insert_key_value(key.into(), value.into());\n-                    }\n-                }\n-            }\n-        }\n+        Ok(rustc_cfgs) => res.extend(rustc_cfgs.lines().map(|it| it.parse().unwrap())),\n         Err(e) => log::error!(\"failed to get rustc cfgs: {:#}\", e),\n     }\n \n-    cfg_options.insert_atom(\"debug_assertions\".into());\n-\n-    cfg_options\n+    res\n }\n \n-fn output(mut cmd: Command) -> Result<Output> {\n+fn utf8_stdout(mut cmd: Command) -> Result<String> {\n     let output = cmd.output().with_context(|| format!(\"{:?} failed\", cmd))?;\n     if !output.status.success() {\n         match String::from_utf8(output.stderr) {\n@@ -557,5 +539,6 @@ fn output(mut cmd: Command) -> Result<Output> {\n             _ => bail!(\"{:?} failed, {}\", cmd, output.status),\n         }\n     }\n-    Ok(output)\n+    let stdout = String::from_utf8(output.stdout)?;\n+    Ok(stdout)\n }"}, {"sha": "e3f3163f6af1042abec8b85142a8fc466056e70b", "filename": "crates/ra_project_model/src/project_json.rs", "status": "modified", "additions": 6, "deletions": 17, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/15ad78c638457e6ea95553e5d233c79e52bacb3b/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ad78c638457e6ea95553e5d233c79e52bacb3b/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fproject_json.rs?ref=15ad78c638457e6ea95553e5d233c79e52bacb3b", "patch": "@@ -3,11 +3,11 @@\n use std::path::PathBuf;\n \n use paths::{AbsPath, AbsPathBuf};\n-use ra_cfg::CfgOptions;\n use ra_db::{CrateId, CrateName, Dependency, Edition};\n-use rustc_hash::{FxHashMap, FxHashSet};\n+use rustc_hash::FxHashMap;\n use serde::{de, Deserialize};\n-use stdx::split_delim;\n+\n+use crate::cfg_flag::CfgFlag;\n \n /// Roots and crates that compose this Rust project.\n #[derive(Clone, Debug, Eq, PartialEq)]\n@@ -22,7 +22,7 @@ pub struct Crate {\n     pub(crate) root_module: AbsPathBuf,\n     pub(crate) edition: Edition,\n     pub(crate) deps: Vec<Dependency>,\n-    pub(crate) cfg: CfgOptions,\n+    pub(crate) cfg: Vec<CfgFlag>,\n     pub(crate) target: Option<String>,\n     pub(crate) env: FxHashMap<String, String>,\n     pub(crate) proc_macro_dylib_path: Option<AbsPathBuf>,\n@@ -65,18 +65,7 @@ impl ProjectJson {\n                                 name: dep_data.name,\n                             })\n                             .collect::<Vec<_>>(),\n-                        cfg: {\n-                            let mut cfg = CfgOptions::default();\n-                            for entry in &crate_data.cfg {\n-                                match split_delim(entry, '=') {\n-                                    Some((key, value)) => {\n-                                        cfg.insert_key_value(key.into(), value.into());\n-                                    }\n-                                    None => cfg.insert_atom(entry.into()),\n-                                }\n-                            }\n-                            cfg\n-                        },\n+                        cfg: crate_data.cfg,\n                         target: crate_data.target,\n                         env: crate_data.env,\n                         proc_macro_dylib_path: crate_data\n@@ -103,7 +92,7 @@ struct CrateData {\n     edition: EditionData,\n     deps: Vec<DepData>,\n     #[serde(default)]\n-    cfg: FxHashSet<String>,\n+    cfg: Vec<CfgFlag>,\n     target: Option<String>,\n     #[serde(default)]\n     env: FxHashMap<String, String>,"}, {"sha": "8a92acea54177eb9fdaf8cac9d1b92c137c5f4ad", "filename": "crates/ra_project_model/src/sysroot.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/15ad78c638457e6ea95553e5d233c79e52bacb3b/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ad78c638457e6ea95553e5d233c79e52bacb3b/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fsysroot.rs?ref=15ad78c638457e6ea95553e5d233c79e52bacb3b", "patch": "@@ -6,7 +6,7 @@ use anyhow::{bail, format_err, Result};\n use paths::{AbsPath, AbsPathBuf};\n use ra_arena::{Arena, Idx};\n \n-use crate::output;\n+use crate::utf8_stdout;\n \n #[derive(Default, Debug, Clone, Eq, PartialEq)]\n pub struct Sysroot {\n@@ -92,15 +92,14 @@ fn get_or_install_rust_src(cargo_toml: &AbsPath) -> Result<AbsPathBuf> {\n     let current_dir = cargo_toml.parent().unwrap();\n     let mut rustc = Command::new(ra_toolchain::rustc());\n     rustc.current_dir(current_dir).args(&[\"--print\", \"sysroot\"]);\n-    let rustc_output = output(rustc)?;\n-    let stdout = String::from_utf8(rustc_output.stdout)?;\n+    let stdout = utf8_stdout(rustc)?;\n     let sysroot_path = AbsPath::assert(Path::new(stdout.trim()));\n     let src_path = sysroot_path.join(\"lib/rustlib/src/rust/src\");\n \n     if !src_path.exists() {\n         let mut rustup = Command::new(ra_toolchain::rustup());\n         rustup.current_dir(current_dir).args(&[\"component\", \"add\", \"rust-src\"]);\n-        let _output = output(rustup)?;\n+        utf8_stdout(rustup)?;\n     }\n     if !src_path.exists() {\n         bail!("}, {"sha": "93448834f74168c17036d227d587b155b0cc5abd", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15ad78c638457e6ea95553e5d233c79e52bacb3b/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15ad78c638457e6ea95553e5d233c79e52bacb3b/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=15ad78c638457e6ea95553e5d233c79e52bacb3b", "patch": "@@ -318,7 +318,7 @@ fn test_missing_module_code_action_in_json_project() {\n             \"root_module\": path.join(\"src/lib.rs\"),\n             \"deps\": [],\n             \"edition\": \"2015\",\n-            \"cfg\": [ \"cfg_atom_1\", \"feature=cfg_1\"],\n+            \"cfg\": [ \"cfg_atom_1\", \"feature=\\\"cfg_1\\\"\"],\n         } ]\n     });\n "}]}