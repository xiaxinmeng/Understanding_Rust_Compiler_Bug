{"sha": "376b6407a859bcd5295af693d33cfd11b7172314", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NmI2NDA3YTg1OWJjZDUyOTVhZjY5M2QzM2NmZDExYjcxNzIzMTQ=", "commit": {"author": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2018-05-29T09:41:10Z"}, "committer": {"name": "Linus F\u00e4rnstrand", "email": "faern@faern.net", "date": "2018-05-31T17:18:42Z"}, "message": "Make ctpop, cttz, ctlz and bswap const fns", "tree": {"sha": "7b024ef1c12d593cbcb00836dfdbc848a5a076de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7b024ef1c12d593cbcb00836dfdbc848a5a076de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/376b6407a859bcd5295af693d33cfd11b7172314", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/376b6407a859bcd5295af693d33cfd11b7172314", "html_url": "https://github.com/rust-lang/rust/commit/376b6407a859bcd5295af693d33cfd11b7172314", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/376b6407a859bcd5295af693d33cfd11b7172314/comments", "author": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "committer": {"login": "faern", "id": 332294, "node_id": "MDQ6VXNlcjMzMjI5NA==", "avatar_url": "https://avatars.githubusercontent.com/u/332294?v=4", "gravatar_id": "", "url": "https://api.github.com/users/faern", "html_url": "https://github.com/faern", "followers_url": "https://api.github.com/users/faern/followers", "following_url": "https://api.github.com/users/faern/following{/other_user}", "gists_url": "https://api.github.com/users/faern/gists{/gist_id}", "starred_url": "https://api.github.com/users/faern/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/faern/subscriptions", "organizations_url": "https://api.github.com/users/faern/orgs", "repos_url": "https://api.github.com/users/faern/repos", "events_url": "https://api.github.com/users/faern/events{/privacy}", "received_events_url": "https://api.github.com/users/faern/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ae2f2991860f1d117414a61b0b0c862a8e2d3468", "url": "https://api.github.com/repos/rust-lang/rust/commits/ae2f2991860f1d117414a61b0b0c862a8e2d3468", "html_url": "https://github.com/rust-lang/rust/commit/ae2f2991860f1d117414a61b0b0c862a8e2d3468"}], "stats": {"total": 73, "additions": 69, "deletions": 4}, "files": [{"sha": "5bb4663d1007783cadd8071560d6652a0b454f0e", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 60, "deletions": 3, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/376b6407a859bcd5295af693d33cfd11b7172314/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/376b6407a859bcd5295af693d33cfd11b7172314/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=376b6407a859bcd5295af693d33cfd11b7172314", "patch": "@@ -3,7 +3,7 @@ use rustc::middle::const_val::{ConstEvalErr, ErrKind};\n use rustc::middle::const_val::ErrKind::{TypeckError, CheckMatchError};\n use rustc::mir;\n use rustc::ty::{self, TyCtxt, Ty, Instance};\n-use rustc::ty::layout::{self, LayoutOf};\n+use rustc::ty::layout::{self, LayoutOf, Primitive};\n use rustc::ty::subst::Subst;\n \n use syntax::ast::Mutability;\n@@ -307,7 +307,7 @@ impl<'mir, 'tcx> super::Machine<'mir, 'tcx> for CompileTimeEvaluator {\n     fn call_intrinsic<'a>(\n         ecx: &mut EvalContext<'a, 'mir, 'tcx, Self>,\n         instance: ty::Instance<'tcx>,\n-        _args: &[ValTy<'tcx>],\n+        args: &[ValTy<'tcx>],\n         dest: Place,\n         dest_layout: layout::TyLayout<'tcx>,\n         target: mir::BasicBlock,\n@@ -345,8 +345,28 @@ impl<'mir, 'tcx> super::Machine<'mir, 'tcx> for CompileTimeEvaluator {\n                 };\n                 ecx.write_scalar(dest, id_val, dest_layout.ty)?;\n             }\n+            \"ctpop\" | \"cttz\" | \"cttz_nonzero\" | \"ctlz\" | \"ctlz_nonzero\" | \"bswap\" => {\n+                let ty = substs.type_at(0);\n+                let layout_of = ecx.layout_of(ty)?;\n+                let num = ecx.value_to_scalar(args[0])?.to_bits(layout_of.size)?;\n+                let kind = match layout_of.abi {\n+                    ty::layout::Abi::Scalar(ref scalar) => scalar.value,\n+                    _ => Err(::rustc::mir::interpret::EvalErrorKind::TypeNotPrimitive(ty))?,\n+                };\n+                let num = if intrinsic_name.ends_with(\"_nonzero\") {\n+                    if num == 0 {\n+                        return err!(Intrinsic(format!(\"{} called on 0\", intrinsic_name)));\n+                    }\n+                    numeric_intrinsic(intrinsic_name.trim_right_matches(\"_nonzero\"), num, kind)?\n+                } else {\n+                    numeric_intrinsic(intrinsic_name, num, kind)?\n+                };\n+                ecx.write_scalar(dest, num, ty)?;\n+            }\n \n-            name => return Err(ConstEvalError::NeedsRfc(format!(\"calling intrinsic `{}`\", name)).into()),\n+            name => return Err(\n+                ConstEvalError::NeedsRfc(format!(\"calling intrinsic `{}`\", name)).into()\n+            ),\n         }\n \n         ecx.goto_block(target);\n@@ -570,3 +590,40 @@ pub fn const_eval_provider<'a, 'tcx>(\n         }\n     })\n }\n+\n+fn numeric_intrinsic<'tcx>(\n+    name: &str,\n+    bytes: u128,\n+    kind: Primitive,\n+) -> EvalResult<'tcx, Scalar> {\n+    macro_rules! integer_intrinsic {\n+        ($method:ident) => ({\n+            use rustc_target::abi::Integer;\n+            let (bits, defined) = match kind {\n+                Primitive::Int(Integer::I8, true) => ((bytes as i8).$method() as u128, 8),\n+                Primitive::Int(Integer::I8, false) => ((bytes as u8).$method() as u128, 8),\n+                Primitive::Int(Integer::I16, true) => ((bytes as i16).$method() as u128, 16),\n+                Primitive::Int(Integer::I16, false) => ((bytes as u16).$method() as u128, 16),\n+                Primitive::Int(Integer::I32, true) => ((bytes as i32).$method() as u128, 32),\n+                Primitive::Int(Integer::I32, false) => ((bytes as u32).$method() as u128, 32),\n+                Primitive::Int(Integer::I64, true) => ((bytes as i64).$method() as u128, 64),\n+                Primitive::Int(Integer::I64, false) => ((bytes as u64).$method() as u128, 64),\n+                Primitive::Int(Integer::I128, true) => ((bytes as i128).$method() as u128, 128),\n+                Primitive::Int(Integer::I128, false) => (bytes.$method() as u128, 128),\n+                _ => bug!(\"invalid `{}` argument: {:?}\", name, bytes),\n+            };\n+\n+            Scalar::Bits { bits, defined }\n+        });\n+    }\n+\n+    let result_val = match name {\n+        \"bswap\" => integer_intrinsic!(swap_bytes),\n+        \"ctlz\" => integer_intrinsic!(leading_zeros),\n+        \"ctpop\" => integer_intrinsic!(count_ones),\n+        \"cttz\" => integer_intrinsic!(trailing_zeros),\n+        _ => bug!(\"not a numeric intrinsic: {}\", name),\n+    };\n+\n+    Ok(result_val)\n+}"}, {"sha": "03ca85faafff6b6af56c96eb14d1154c375d89c9", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/376b6407a859bcd5295af693d33cfd11b7172314/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/376b6407a859bcd5295af693d33cfd11b7172314/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=376b6407a859bcd5295af693d33cfd11b7172314", "patch": "@@ -907,7 +907,15 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                     Abi::PlatformIntrinsic => {\n                         assert!(!self.tcx.is_const_fn(def_id));\n                         match &self.tcx.item_name(def_id).as_str()[..] {\n-                            \"size_of\" | \"min_align_of\" | \"type_id\" => is_const_fn = Some(def_id),\n+                            | \"size_of\"\n+                            | \"min_align_of\"\n+                            | \"type_id\"\n+                            | \"bswap\"\n+                            | \"ctpop\"\n+                            | \"cttz\"\n+                            | \"cttz_nonzero\"\n+                            | \"ctlz\"\n+                            | \"ctlz_nonzero\" => is_const_fn = Some(def_id),\n \n                             name if name.starts_with(\"simd_shuffle\") => {\n                                 is_shuffle = true;"}]}