{"sha": "ec1a85a85c784a8481ea7f6d28453239db716829", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjMWE4NWE4NWM3ODRhODQ4MWVhN2Y2ZDI4NDUzMjM5ZGI3MTY4Mjk=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-23T22:07:21Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-23T22:07:21Z"}, "message": "rollup merge of #23211: FlaPer87/oibit-send-and-friends\n\nFixes #23225\n\nr? @nikomatsakis", "tree": {"sha": "f378e7d448169c3a69e072fea63182ddb736c6bb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f378e7d448169c3a69e072fea63182ddb736c6bb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec1a85a85c784a8481ea7f6d28453239db716829", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec1a85a85c784a8481ea7f6d28453239db716829", "html_url": "https://github.com/rust-lang/rust/commit/ec1a85a85c784a8481ea7f6d28453239db716829", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec1a85a85c784a8481ea7f6d28453239db716829/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad41e7cd7a3d1969e666508d7e4a3ba305cee2ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad41e7cd7a3d1969e666508d7e4a3ba305cee2ec", "html_url": "https://github.com/rust-lang/rust/commit/ad41e7cd7a3d1969e666508d7e4a3ba305cee2ec"}, {"sha": "04d57729fcf058026d35acdd65fd5539166d838f", "url": "https://api.github.com/repos/rust-lang/rust/commits/04d57729fcf058026d35acdd65fd5539166d838f", "html_url": "https://github.com/rust-lang/rust/commit/04d57729fcf058026d35acdd65fd5539166d838f"}], "stats": {"total": 121, "additions": 76, "deletions": 45}, "files": [{"sha": "0197ee82c77407104edd4647c1a9816a4a8683fa", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a85a85c784a8481ea7f6d28453239db716829/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a85a85c784a8481ea7f6d28453239db716829/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=ec1a85a85c784a8481ea7f6d28453239db716829", "patch": "@@ -39,6 +39,8 @@ pub unsafe trait Send : MarkerTrait {\n     // empty.\n }\n \n+unsafe impl Send for .. { }\n+\n impl<T> !Send for *const T { }\n impl<T> !Send for *mut T { }\n impl !Send for Managed { }\n@@ -203,6 +205,8 @@ pub unsafe trait Sync : MarkerTrait {\n     // Empty\n }\n \n+unsafe impl Sync for .. { }\n+\n impl<T> !Sync for *const T { }\n impl<T> !Sync for *mut T { }\n impl !Sync for Managed { }"}, {"sha": "0e343c10e92d6798fbf55f5f84e696e07fdce9dc", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a85a85c784a8481ea7f6d28453239db716829/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a85a85c784a8481ea7f6d28453239db716829/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ec1a85a85c784a8481ea7f6d28453239db716829", "patch": "@@ -5989,10 +5989,7 @@ pub fn item_variances(tcx: &ctxt, item_id: ast::DefId) -> Rc<ItemVariances> {\n \n pub fn trait_has_default_impl(tcx: &ctxt, trait_def_id: DefId) -> bool {\n     populate_implementations_for_trait_if_necessary(tcx, trait_def_id);\n-    match tcx.lang_items.to_builtin_kind(trait_def_id) {\n-        Some(BoundSend) | Some(BoundSync) => true,\n-        _ => tcx.traits_with_default_impls.borrow().contains_key(&trait_def_id),\n-    }\n+    tcx.traits_with_default_impls.borrow().contains_key(&trait_def_id)\n }\n \n /// Records a trait-to-implementation mapping."}, {"sha": "e4926b119d5dbe551808b3e8bb2db99d0afd7d12", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 52, "deletions": 41, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a85a85c784a8481ea7f6d28453239db716829/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a85a85c784a8481ea7f6d28453239db716829/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=ec1a85a85c784a8481ea7f6d28453239db716829", "patch": "@@ -27,55 +27,66 @@ struct UnsafetyChecker<'cx, 'tcx:'cx> {\n     tcx: &'cx ty::ctxt<'tcx>\n }\n \n-impl<'cx, 'tcx,'v> visit::Visitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n-    fn visit_item(&mut self, item: &'v ast::Item) {\n-        match item.node {\n-            ast::ItemImpl(unsafety, polarity, _, _, _, _) => {\n-                match ty::impl_trait_ref(self.tcx, ast_util::local_def(item.id)) {\n-                    None => {\n-                        // Inherent impl.\n-                        match unsafety {\n-                            ast::Unsafety::Normal => { /* OK */ }\n-                            ast::Unsafety::Unsafe => {\n-                                span_err!(self.tcx.sess, item.span, E0197,\n-                                    \"inherent impls cannot be declared as unsafe\");\n-                            }\n-                        }\n+impl<'cx, 'tcx, 'v> UnsafetyChecker<'cx, 'tcx> {\n+    fn check_unsafety_coherence(&mut self, item: &'v ast::Item,\n+                                unsafety: ast::Unsafety,\n+                                polarity: ast::ImplPolarity) {\n+        match ty::impl_trait_ref(self.tcx, ast_util::local_def(item.id)) {\n+            None => {\n+                // Inherent impl.\n+                match unsafety {\n+                    ast::Unsafety::Normal => { /* OK */ }\n+                    ast::Unsafety::Unsafe => {\n+                        span_err!(self.tcx.sess, item.span, E0197,\n+                                  \"inherent impls cannot be declared as unsafe\");\n                     }\n+                }\n+            }\n \n-                    Some(trait_ref) => {\n-                        let trait_def = ty::lookup_trait_def(self.tcx, trait_ref.def_id);\n-                        match (trait_def.unsafety, unsafety, polarity) {\n-                            (ast::Unsafety::Unsafe,\n-                             ast::Unsafety::Unsafe, ast::ImplPolarity::Negative) => {\n-                                span_err!(self.tcx.sess, item.span, E0198,\n-                                    \"negative implementations are not unsafe\");\n-                            }\n+            Some(trait_ref) => {\n+                let trait_def = ty::lookup_trait_def(self.tcx, trait_ref.def_id);\n+                match (trait_def.unsafety, unsafety, polarity) {\n+                    (ast::Unsafety::Unsafe,\n+                     ast::Unsafety::Unsafe, ast::ImplPolarity::Negative) => {\n+                        span_err!(self.tcx.sess, item.span, E0198,\n+                                  \"negative implementations are not unsafe\");\n+                    }\n \n-                            (ast::Unsafety::Normal, ast::Unsafety::Unsafe, _) => {\n-                                span_err!(self.tcx.sess, item.span, E0199,\n-                                    \"implementing the trait `{}` is not unsafe\",\n-                                            trait_ref.user_string(self.tcx));\n-                            }\n+                    (ast::Unsafety::Normal, ast::Unsafety::Unsafe, _) => {\n+                        span_err!(self.tcx.sess, item.span, E0199,\n+                                  \"implementing the trait `{}` is not unsafe\",\n+                                  trait_ref.user_string(self.tcx));\n+                    }\n \n-                            (ast::Unsafety::Unsafe,\n-                             ast::Unsafety::Normal, ast::ImplPolarity::Positive) => {\n-                                span_err!(self.tcx.sess, item.span, E0200,\n-                                    \"the trait `{}` requires an `unsafe impl` declaration\",\n-                                            trait_ref.user_string(self.tcx));\n-                            }\n+                    (ast::Unsafety::Unsafe,\n+                     ast::Unsafety::Normal, ast::ImplPolarity::Positive) => {\n+                        span_err!(self.tcx.sess, item.span, E0200,\n+                                  \"the trait `{}` requires an `unsafe impl` declaration\",\n+                                  trait_ref.user_string(self.tcx));\n+                    }\n \n-                            (ast::Unsafety::Unsafe,\n-                             ast::Unsafety::Normal, ast::ImplPolarity::Negative) |\n-                            (ast::Unsafety::Unsafe,\n-                             ast::Unsafety::Unsafe, ast::ImplPolarity::Positive) |\n-                            (ast::Unsafety::Normal, ast::Unsafety::Normal, _) => {\n-                                /* OK */\n-                            }\n-                        }\n+                    (ast::Unsafety::Unsafe,\n+                     ast::Unsafety::Normal, ast::ImplPolarity::Negative) |\n+                    (ast::Unsafety::Unsafe,\n+                     ast::Unsafety::Unsafe, ast::ImplPolarity::Positive) |\n+                    (ast::Unsafety::Normal, ast::Unsafety::Normal, _) => {\n+                        /* OK */\n                     }\n                 }\n             }\n+        }\n+    }\n+}\n+\n+impl<'cx, 'tcx,'v> visit::Visitor<'v> for UnsafetyChecker<'cx, 'tcx> {\n+    fn visit_item(&mut self, item: &'v ast::Item) {\n+        match item.node {\n+            ast::ItemDefaultImpl(unsafety, _) => {\n+                self.check_unsafety_coherence(item, unsafety, ast::ImplPolarity::Positive);\n+            }\n+            ast::ItemImpl(unsafety, polarity, _, _, _, _) => {\n+                self.check_unsafety_coherence(item, unsafety, polarity);\n+            }\n             _ => { }\n         }\n "}, {"sha": "f5e891a9dd6439c87a732933ab25b306e0cd693c", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a85a85c784a8481ea7f6d28453239db716829/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a85a85c784a8481ea7f6d28453239db716829/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=ec1a85a85c784a8481ea7f6d28453239db716829", "patch": "@@ -563,6 +563,13 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                 }\n             }\n \n+            ast::ItemDefaultImpl(..) => {\n+                self.gate_feature(\"optin_builtin_traits\",\n+                                  i.span,\n+                                  \"default trait implementations are experimental \\\n+                                   and possibly buggy\");\n+            }\n+\n             ast::ItemImpl(_, polarity, _, _, _, _) => {\n                 match polarity {\n                     ast::ImplPolarity::Negative => {"}, {"sha": "a5b317307379e82cfa80d034d4a95e8bca787c6c", "filename": "src/test/compile-fail/coherence-default-trait-impl.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a85a85c784a8481ea7f6d28453239db716829/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a85a85c784a8481ea7f6d28453239db716829/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-default-trait-impl.rs?ref=ec1a85a85c784a8481ea7f6d28453239db716829", "patch": "@@ -21,4 +21,14 @@ impl MyTrait for .. {}\n impl MyTrait for .. {}\n //~^ ERROR conflicting implementations for trait `MyTrait`\n \n+trait MySafeTrait: MarkerTrait {}\n+\n+unsafe impl MySafeTrait for .. {}\n+//~^ ERROR implementing the trait `MySafeTrait` is not unsafe\n+\n+unsafe trait MyUnsafeTrait: MarkerTrait {}\n+\n+impl MyUnsafeTrait for .. {}\n+//~^ ERROR the trait `MyUnsafeTrait` requires an `unsafe impl` declaration\n+\n fn main() {}"}, {"sha": "4c30c7b22a60dcb62d28bd4511d6a513ef5e1971", "filename": "src/test/run-make/rustdoc-default-impl/foo.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec1a85a85c784a8481ea7f6d28453239db716829/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec1a85a85c784a8481ea7f6d28453239db716829/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-default-impl%2Ffoo.rs?ref=ec1a85a85c784a8481ea7f6d28453239db716829", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(optin_builtin_traits)]\n+\n pub mod bar {\n     use std::marker;\n "}]}