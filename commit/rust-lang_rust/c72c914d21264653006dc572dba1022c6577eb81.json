{"sha": "c72c914d21264653006dc572dba1022c6577eb81", "node_id": "C_kwDOAAsO6NoAKGM3MmM5MTRkMjEyNjQ2NTMwMDZkYzU3MmRiYTEwMjJjNjU3N2ViODE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-24T00:12:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-03-24T00:12:02Z"}, "message": "Auto merge of #10489 - samueltardieu:issue-10476, r=giraffate\n\nNew lint: detect unnecessary struct building\n\nFixes #10476.\n\nRunning this lint on the top 500 crates produced one hit (in `rust-lang/rust-bindgen`) and [a PR has been submitted there](https://github.com/rust-lang/rust-bindgen/pull/2440).\n\nchangelog: [`unnecessary_struct_initialization`]: new lint", "tree": {"sha": "92307707885b5bd6c5990027114264ca888d5401", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92307707885b5bd6c5990027114264ca888d5401"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c72c914d21264653006dc572dba1022c6577eb81", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c72c914d21264653006dc572dba1022c6577eb81", "html_url": "https://github.com/rust-lang/rust/commit/c72c914d21264653006dc572dba1022c6577eb81", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c72c914d21264653006dc572dba1022c6577eb81/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "be01b983c48b75f4a7602f1e4568cd75c0b280ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/be01b983c48b75f4a7602f1e4568cd75c0b280ee", "html_url": "https://github.com/rust-lang/rust/commit/be01b983c48b75f4a7602f1e4568cd75c0b280ee"}, {"sha": "d7d3dbf06022c3ec020c3906afa0090ad5ae239c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7d3dbf06022c3ec020c3906afa0090ad5ae239c", "html_url": "https://github.com/rust-lang/rust/commit/d7d3dbf06022c3ec020c3906afa0090ad5ae239c"}], "stats": {"total": 409, "additions": 355, "deletions": 54}, "files": [{"sha": "1323f973ccfddbc0d89793316aef866050cee3de", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c72c914d21264653006dc572dba1022c6577eb81/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/c72c914d21264653006dc572dba1022c6577eb81/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=c72c914d21264653006dc572dba1022c6577eb81", "patch": "@@ -4987,6 +4987,7 @@ Released 2018-09-13\n [`unnecessary_safety_doc`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_safety_doc\n [`unnecessary_self_imports`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_self_imports\n [`unnecessary_sort_by`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_sort_by\n+[`unnecessary_struct_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_struct_initialization\n [`unnecessary_to_owned`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_to_owned\n [`unnecessary_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap\n [`unnecessary_wraps`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps"}, {"sha": "8ca91301472e649f8c399dc910cf9bdf74d36469", "filename": "clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c72c914d21264653006dc572dba1022c6577eb81/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72c914d21264653006dc572dba1022c6577eb81/clippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=c72c914d21264653006dc572dba1022c6577eb81", "patch": "@@ -618,6 +618,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::unnamed_address::VTABLE_ADDRESS_COMPARISONS_INFO,\n     crate::unnecessary_owned_empty_strings::UNNECESSARY_OWNED_EMPTY_STRINGS_INFO,\n     crate::unnecessary_self_imports::UNNECESSARY_SELF_IMPORTS_INFO,\n+    crate::unnecessary_struct_initialization::UNNECESSARY_STRUCT_INITIALIZATION_INFO,\n     crate::unnecessary_wraps::UNNECESSARY_WRAPS_INFO,\n     crate::unnested_or_patterns::UNNESTED_OR_PATTERNS_INFO,\n     crate::unsafe_removed_from_name::UNSAFE_REMOVED_FROM_NAME_INFO,"}, {"sha": "c9210bf73f896f3c8ca75e417ac71d18cd5c9636", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c72c914d21264653006dc572dba1022c6577eb81/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72c914d21264653006dc572dba1022c6577eb81/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=c72c914d21264653006dc572dba1022c6577eb81", "patch": "@@ -302,6 +302,7 @@ mod unit_types;\n mod unnamed_address;\n mod unnecessary_owned_empty_strings;\n mod unnecessary_self_imports;\n+mod unnecessary_struct_initialization;\n mod unnecessary_wraps;\n mod unnested_or_patterns;\n mod unsafe_removed_from_name;\n@@ -938,6 +939,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(let_with_type_underscore::UnderscoreTyped));\n     store.register_late_pass(|_| Box::new(allow_attributes::AllowAttribute));\n     store.register_late_pass(move |_| Box::new(manual_main_separator_str::ManualMainSeparatorStr::new(msrv())));\n+    store.register_late_pass(|_| Box::new(unnecessary_struct_initialization::UnnecessaryStruct));\n     // add lints here, do not remove this comment, it's used in `new_lint`\n }\n "}, {"sha": "af0b4b1592f4cbf8faccda4a4c2f86a8edf9600a", "filename": "clippy_lints/src/unnecessary_struct_initialization.rs", "status": "added", "additions": 84, "deletions": 0, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/c72c914d21264653006dc572dba1022c6577eb81/clippy_lints%2Fsrc%2Funnecessary_struct_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72c914d21264653006dc572dba1022c6577eb81/clippy_lints%2Fsrc%2Funnecessary_struct_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funnecessary_struct_initialization.rs?ref=c72c914d21264653006dc572dba1022c6577eb81", "patch": "@@ -0,0 +1,84 @@\n+use clippy_utils::{diagnostics::span_lint_and_sugg, get_parent_expr, path_to_local, source::snippet, ty::is_copy};\n+use rustc_hir::{BindingAnnotation, Expr, ExprKind, Node, PatKind, UnOp};\n+use rustc_lint::{LateContext, LateLintPass};\n+use rustc_session::{declare_lint_pass, declare_tool_lint};\n+\n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for initialization of a `struct` by copying a base without setting\n+    /// any field.\n+    ///\n+    /// ### Why is this bad?\n+    /// Readibility suffers from unnecessary struct building.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// struct S { s: String }\n+    ///\n+    /// let a = S { s: String::from(\"Hello, world!\") };\n+    /// let b = S { ..a };\n+    /// ```\n+    /// Use instead:\n+    /// ```rust\n+    /// struct S { s: String }\n+    ///\n+    /// let a = S { s: String::from(\"Hello, world!\") };\n+    /// let b = a;\n+    /// ```\n+    #[clippy::version = \"1.70.0\"]\n+    pub UNNECESSARY_STRUCT_INITIALIZATION,\n+    complexity,\n+    \"struct built from a base that can be written mode concisely\"\n+}\n+declare_lint_pass!(UnnecessaryStruct => [UNNECESSARY_STRUCT_INITIALIZATION]);\n+\n+impl LateLintPass<'_> for UnnecessaryStruct {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &Expr<'_>) {\n+        if let ExprKind::Struct(_, &[], Some(base)) = expr.kind {\n+            if let Some(parent) = get_parent_expr(cx, expr) &&\n+                let parent_ty = cx.typeck_results().expr_ty_adjusted(parent) &&\n+                parent_ty.is_any_ptr()\n+            {\n+                if is_copy(cx, cx.typeck_results().expr_ty(expr)) && path_to_local(base).is_some() {\n+                    // When the type implements `Copy`, a reference to the new struct works on the\n+                    // copy. Using the original would borrow it.\n+                    return;\n+                }\n+\n+                if parent_ty.is_mutable_ptr() && !is_mutable(cx, base) {\n+                    // The original can be used in a mutable reference context only if it is mutable.\n+                    return;\n+                }\n+            }\n+\n+            // TODO: do not propose to replace *XX if XX is not Copy\n+            if let ExprKind::Unary(UnOp::Deref, target) = base.kind &&\n+                matches!(target.kind, ExprKind::Path(..)) &&\n+                !is_copy(cx, cx.typeck_results().expr_ty(expr))\n+            {\n+                // `*base` cannot be used instead of the struct in the general case if it is not Copy.\n+                return;\n+            }\n+\n+            span_lint_and_sugg(\n+                cx,\n+                UNNECESSARY_STRUCT_INITIALIZATION,\n+                expr.span,\n+                \"unnecessary struct building\",\n+                \"replace with\",\n+                snippet(cx, base.span, \"..\").into_owned(),\n+                rustc_errors::Applicability::MachineApplicable,\n+            );\n+        }\n+    }\n+}\n+\n+fn is_mutable(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n+    if let Some(hir_id) = path_to_local(expr) &&\n+        let Node::Pat(pat) = cx.tcx.hir().get(hir_id)\n+    {\n+        matches!(pat.kind, PatKind::Binding(BindingAnnotation::MUT, ..))\n+    } else {\n+        true\n+    }\n+}"}, {"sha": "4e8517cad1006805621a0a2760b161bad4e7e4c8", "filename": "tests/ui/needless_update.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c72c914d21264653006dc572dba1022c6577eb81/tests%2Fui%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72c914d21264653006dc572dba1022c6577eb81/tests%2Fui%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_update.rs?ref=c72c914d21264653006dc572dba1022c6577eb81", "patch": "@@ -1,5 +1,5 @@\n #![warn(clippy::needless_update)]\n-#![allow(clippy::no_effect)]\n+#![allow(clippy::no_effect, clippy::unnecessary_struct_initialization)]\n \n struct S {\n     pub a: i32,"}, {"sha": "ac8b1e756f22759a2cad9dded032ba2c091c36b3", "filename": "tests/ui/no_effect.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c72c914d21264653006dc572dba1022c6577eb81/tests%2Fui%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72c914d21264653006dc572dba1022c6577eb81/tests%2Fui%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.rs?ref=c72c914d21264653006dc572dba1022c6577eb81", "patch": "@@ -1,7 +1,12 @@\n #![feature(box_syntax, fn_traits, unboxed_closures)]\n #![warn(clippy::no_effect_underscore_binding)]\n #![allow(dead_code, path_statements)]\n-#![allow(clippy::deref_addrof, clippy::redundant_field_names, clippy::uninlined_format_args)]\n+#![allow(\n+    clippy::deref_addrof,\n+    clippy::redundant_field_names,\n+    clippy::uninlined_format_args,\n+    clippy::unnecessary_struct_initialization\n+)]\n \n struct Unit;\n struct Tuple(i32);"}, {"sha": "2efefd2b2a3365953daa80cd348ee0e806068be7", "filename": "tests/ui/no_effect.stderr", "status": "modified", "additions": 30, "deletions": 30, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/c72c914d21264653006dc572dba1022c6577eb81/tests%2Fui%2Fno_effect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c72c914d21264653006dc572dba1022c6577eb81/tests%2Fui%2Fno_effect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fno_effect.stderr?ref=c72c914d21264653006dc572dba1022c6577eb81", "patch": "@@ -1,183 +1,183 @@\n error: statement with no effect\n-  --> $DIR/no_effect.rs:92:5\n+  --> $DIR/no_effect.rs:97:5\n    |\n LL |     0;\n    |     ^^\n    |\n    = note: `-D clippy::no-effect` implied by `-D warnings`\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:93:5\n+  --> $DIR/no_effect.rs:98:5\n    |\n LL |     s2;\n    |     ^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:94:5\n+  --> $DIR/no_effect.rs:99:5\n    |\n LL |     Unit;\n    |     ^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:95:5\n+  --> $DIR/no_effect.rs:100:5\n    |\n LL |     Tuple(0);\n    |     ^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:96:5\n+  --> $DIR/no_effect.rs:101:5\n    |\n LL |     Struct { field: 0 };\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:97:5\n+  --> $DIR/no_effect.rs:102:5\n    |\n LL |     Struct { ..s };\n    |     ^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:98:5\n+  --> $DIR/no_effect.rs:103:5\n    |\n LL |     Union { a: 0 };\n    |     ^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:99:5\n+  --> $DIR/no_effect.rs:104:5\n    |\n LL |     Enum::Tuple(0);\n    |     ^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:100:5\n+  --> $DIR/no_effect.rs:105:5\n    |\n LL |     Enum::Struct { field: 0 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:101:5\n+  --> $DIR/no_effect.rs:106:5\n    |\n LL |     5 + 6;\n    |     ^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:102:5\n+  --> $DIR/no_effect.rs:107:5\n    |\n LL |     *&42;\n    |     ^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:103:5\n+  --> $DIR/no_effect.rs:108:5\n    |\n LL |     &6;\n    |     ^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:104:5\n+  --> $DIR/no_effect.rs:109:5\n    |\n LL |     (5, 6, 7);\n    |     ^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:105:5\n+  --> $DIR/no_effect.rs:110:5\n    |\n LL |     box 42;\n    |     ^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:106:5\n+  --> $DIR/no_effect.rs:111:5\n    |\n LL |     ..;\n    |     ^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:107:5\n+  --> $DIR/no_effect.rs:112:5\n    |\n LL |     5..;\n    |     ^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:108:5\n+  --> $DIR/no_effect.rs:113:5\n    |\n LL |     ..5;\n    |     ^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:109:5\n+  --> $DIR/no_effect.rs:114:5\n    |\n LL |     5..6;\n    |     ^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:110:5\n+  --> $DIR/no_effect.rs:115:5\n    |\n LL |     5..=6;\n    |     ^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:111:5\n+  --> $DIR/no_effect.rs:116:5\n    |\n LL |     [42, 55];\n    |     ^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:112:5\n+  --> $DIR/no_effect.rs:117:5\n    |\n LL |     [42, 55][1];\n    |     ^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:113:5\n+  --> $DIR/no_effect.rs:118:5\n    |\n LL |     (42, 55).1;\n    |     ^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:114:5\n+  --> $DIR/no_effect.rs:119:5\n    |\n LL |     [42; 55];\n    |     ^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:115:5\n+  --> $DIR/no_effect.rs:120:5\n    |\n LL |     [42; 55][13];\n    |     ^^^^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:117:5\n+  --> $DIR/no_effect.rs:122:5\n    |\n LL |     || x += 5;\n    |     ^^^^^^^^^^\n \n error: statement with no effect\n-  --> $DIR/no_effect.rs:119:5\n+  --> $DIR/no_effect.rs:124:5\n    |\n LL |     FooString { s: s };\n    |     ^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:120:5\n+  --> $DIR/no_effect.rs:125:5\n    |\n LL |     let _unused = 1;\n    |     ^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::no-effect-underscore-binding` implied by `-D warnings`\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:121:5\n+  --> $DIR/no_effect.rs:126:5\n    |\n LL |     let _penguin = || println!(\"Some helpful closure\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:122:5\n+  --> $DIR/no_effect.rs:127:5\n    |\n LL |     let _duck = Struct { field: 0 };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: binding to `_` prefixed variable with no side-effect\n-  --> $DIR/no_effect.rs:123:5\n+  --> $DIR/no_effect.rs:128:5\n    |\n LL |     let _cat = [2, 4, 6, 8][2];\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^"}, {"sha": "ec931c726eedab9d54692d01ccfb368e99a3e598", "filename": "tests/ui/unnecessary_operation.fixed", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c72c914d21264653006dc572dba1022c6577eb81/tests%2Fui%2Funnecessary_operation.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c72c914d21264653006dc572dba1022c6577eb81/tests%2Fui%2Funnecessary_operation.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.fixed?ref=c72c914d21264653006dc572dba1022c6577eb81", "patch": "@@ -1,7 +1,13 @@\n // run-rustfix\n \n #![feature(box_syntax)]\n-#![allow(clippy::deref_addrof, dead_code, unused, clippy::no_effect)]\n+#![allow(\n+    clippy::deref_addrof,\n+    dead_code,\n+    unused,\n+    clippy::no_effect,\n+    clippy::unnecessary_struct_initialization\n+)]\n #![warn(clippy::unnecessary_operation)]\n \n struct Tuple(i32);"}, {"sha": "d896df32e41eadddc5ae91151142bbe3e3e81a39", "filename": "tests/ui/unnecessary_operation.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c72c914d21264653006dc572dba1022c6577eb81/tests%2Fui%2Funnecessary_operation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72c914d21264653006dc572dba1022c6577eb81/tests%2Fui%2Funnecessary_operation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.rs?ref=c72c914d21264653006dc572dba1022c6577eb81", "patch": "@@ -1,7 +1,13 @@\n // run-rustfix\n \n #![feature(box_syntax)]\n-#![allow(clippy::deref_addrof, dead_code, unused, clippy::no_effect)]\n+#![allow(\n+    clippy::deref_addrof,\n+    dead_code,\n+    unused,\n+    clippy::no_effect,\n+    clippy::unnecessary_struct_initialization\n+)]\n #![warn(clippy::unnecessary_operation)]\n \n struct Tuple(i32);"}, {"sha": "c183082ec86e02d5222851cbe2bde1a2da02c2ba", "filename": "tests/ui/unnecessary_operation.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c72c914d21264653006dc572dba1022c6577eb81/tests%2Fui%2Funnecessary_operation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c72c914d21264653006dc572dba1022c6577eb81/tests%2Fui%2Funnecessary_operation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_operation.stderr?ref=c72c914d21264653006dc572dba1022c6577eb81", "patch": "@@ -1,123 +1,123 @@\n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:51:5\n+  --> $DIR/unnecessary_operation.rs:57:5\n    |\n LL |     Tuple(get_number());\n    |     ^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n    |\n    = note: `-D clippy::unnecessary-operation` implied by `-D warnings`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:52:5\n+  --> $DIR/unnecessary_operation.rs:58:5\n    |\n LL |     Struct { field: get_number() };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:53:5\n+  --> $DIR/unnecessary_operation.rs:59:5\n    |\n LL |     Struct { ..get_struct() };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_struct();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:54:5\n+  --> $DIR/unnecessary_operation.rs:60:5\n    |\n LL |     Enum::Tuple(get_number());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:55:5\n+  --> $DIR/unnecessary_operation.rs:61:5\n    |\n LL |     Enum::Struct { field: get_number() };\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:56:5\n+  --> $DIR/unnecessary_operation.rs:62:5\n    |\n LL |     5 + get_number();\n    |     ^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `5;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:57:5\n+  --> $DIR/unnecessary_operation.rs:63:5\n    |\n LL |     *&get_number();\n    |     ^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:58:5\n+  --> $DIR/unnecessary_operation.rs:64:5\n    |\n LL |     &get_number();\n    |     ^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:59:5\n+  --> $DIR/unnecessary_operation.rs:65:5\n    |\n LL |     (5, 6, get_number());\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `5;6;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:60:5\n+  --> $DIR/unnecessary_operation.rs:66:5\n    |\n LL |     box get_number();\n    |     ^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:61:5\n+  --> $DIR/unnecessary_operation.rs:67:5\n    |\n LL |     get_number()..;\n    |     ^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:62:5\n+  --> $DIR/unnecessary_operation.rs:68:5\n    |\n LL |     ..get_number();\n    |     ^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:63:5\n+  --> $DIR/unnecessary_operation.rs:69:5\n    |\n LL |     5..get_number();\n    |     ^^^^^^^^^^^^^^^^ help: statement can be reduced to: `5;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:64:5\n+  --> $DIR/unnecessary_operation.rs:70:5\n    |\n LL |     [42, get_number()];\n    |     ^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `42;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:65:5\n+  --> $DIR/unnecessary_operation.rs:71:5\n    |\n LL |     [42, 55][get_usize()];\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: statement can be written as: `assert!([42, 55].len() > get_usize());`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:66:5\n+  --> $DIR/unnecessary_operation.rs:72:5\n    |\n LL |     (42, get_number()).1;\n    |     ^^^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `42;get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:67:5\n+  --> $DIR/unnecessary_operation.rs:73:5\n    |\n LL |     [get_number(); 55];\n    |     ^^^^^^^^^^^^^^^^^^^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:68:5\n+  --> $DIR/unnecessary_operation.rs:74:5\n    |\n LL |     [42; 55][get_usize()];\n    |     ^^^^^^^^^^^^^^^^^^^^^^ help: statement can be written as: `assert!([42; 55].len() > get_usize());`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:69:5\n+  --> $DIR/unnecessary_operation.rs:75:5\n    |\n LL | /     {\n LL | |         get_number()\n LL | |     };\n    | |______^ help: statement can be reduced to: `get_number();`\n \n error: unnecessary operation\n-  --> $DIR/unnecessary_operation.rs:72:5\n+  --> $DIR/unnecessary_operation.rs:78:5\n    |\n LL | /     FooString {\n LL | |         s: String::from(\"blah\"),"}, {"sha": "b47129e4a36a881f6aa9caf3157aaabbc4425544", "filename": "tests/ui/unnecessary_struct_initialization.fixed", "status": "added", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/c72c914d21264653006dc572dba1022c6577eb81/tests%2Fui%2Funnecessary_struct_initialization.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c72c914d21264653006dc572dba1022c6577eb81/tests%2Fui%2Funnecessary_struct_initialization.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_struct_initialization.fixed?ref=c72c914d21264653006dc572dba1022c6577eb81", "patch": "@@ -0,0 +1,73 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::unnecessary_struct_initialization)]\n+\n+struct S {\n+    f: String,\n+}\n+\n+#[derive(Clone, Copy)]\n+struct T {\n+    f: u32,\n+}\n+\n+struct U {\n+    f: u32,\n+}\n+\n+impl Clone for U {\n+    fn clone(&self) -> Self {\n+        // Do not lint: `Self` does not implement `Copy`\n+        Self { ..*self }\n+    }\n+}\n+\n+#[derive(Copy)]\n+struct V {\n+    f: u32,\n+}\n+\n+impl Clone for V {\n+    fn clone(&self) -> Self {\n+        // Lint: `Self` implements `Copy`\n+        *self\n+    }\n+}\n+\n+fn main() {\n+    // Should lint: `a` would be consumed anyway\n+    let a = S { f: String::from(\"foo\") };\n+    let mut b = a;\n+\n+    // Should lint: `b` would be consumed, and is mutable\n+    let c = &mut b;\n+\n+    // Should not lint as `d` is not mutable\n+    let d = S { f: String::from(\"foo\") };\n+    let e = &mut S { ..d };\n+\n+    // Should lint as `f` would be consumed anyway\n+    let f = S { f: String::from(\"foo\") };\n+    let g = &f;\n+\n+    // Should lint: the result of an expression is mutable\n+    let h = &mut *Box::new(S { f: String::from(\"foo\") });\n+\n+    // Should not lint: `m` would be both alive and borrowed\n+    let m = T { f: 17 };\n+    let n = &T { ..m };\n+\n+    // Should not lint: `m` should not be modified\n+    let o = &mut T { ..m };\n+    o.f = 32;\n+    assert_eq!(m.f, 17);\n+\n+    // Should not lint: `m` should not be modified\n+    let o = &mut T { ..m } as *mut T;\n+    unsafe { &mut *o }.f = 32;\n+    assert_eq!(m.f, 17);\n+\n+    // Should lint: the result of an expression is mutable and temporary\n+    let p = &mut *Box::new(T { f: 5 });\n+}"}, {"sha": "63b11c626e5bff36b99da37e7e1c7a9add5ccecd", "filename": "tests/ui/unnecessary_struct_initialization.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/c72c914d21264653006dc572dba1022c6577eb81/tests%2Fui%2Funnecessary_struct_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c72c914d21264653006dc572dba1022c6577eb81/tests%2Fui%2Funnecessary_struct_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_struct_initialization.rs?ref=c72c914d21264653006dc572dba1022c6577eb81", "patch": "@@ -0,0 +1,77 @@\n+// run-rustfix\n+\n+#![allow(unused)]\n+#![warn(clippy::unnecessary_struct_initialization)]\n+\n+struct S {\n+    f: String,\n+}\n+\n+#[derive(Clone, Copy)]\n+struct T {\n+    f: u32,\n+}\n+\n+struct U {\n+    f: u32,\n+}\n+\n+impl Clone for U {\n+    fn clone(&self) -> Self {\n+        // Do not lint: `Self` does not implement `Copy`\n+        Self { ..*self }\n+    }\n+}\n+\n+#[derive(Copy)]\n+struct V {\n+    f: u32,\n+}\n+\n+impl Clone for V {\n+    fn clone(&self) -> Self {\n+        // Lint: `Self` implements `Copy`\n+        Self { ..*self }\n+    }\n+}\n+\n+fn main() {\n+    // Should lint: `a` would be consumed anyway\n+    let a = S { f: String::from(\"foo\") };\n+    let mut b = S { ..a };\n+\n+    // Should lint: `b` would be consumed, and is mutable\n+    let c = &mut S { ..b };\n+\n+    // Should not lint as `d` is not mutable\n+    let d = S { f: String::from(\"foo\") };\n+    let e = &mut S { ..d };\n+\n+    // Should lint as `f` would be consumed anyway\n+    let f = S { f: String::from(\"foo\") };\n+    let g = &S { ..f };\n+\n+    // Should lint: the result of an expression is mutable\n+    let h = &mut S {\n+        ..*Box::new(S { f: String::from(\"foo\") })\n+    };\n+\n+    // Should not lint: `m` would be both alive and borrowed\n+    let m = T { f: 17 };\n+    let n = &T { ..m };\n+\n+    // Should not lint: `m` should not be modified\n+    let o = &mut T { ..m };\n+    o.f = 32;\n+    assert_eq!(m.f, 17);\n+\n+    // Should not lint: `m` should not be modified\n+    let o = &mut T { ..m } as *mut T;\n+    unsafe { &mut *o }.f = 32;\n+    assert_eq!(m.f, 17);\n+\n+    // Should lint: the result of an expression is mutable and temporary\n+    let p = &mut T {\n+        ..*Box::new(T { f: 5 })\n+    };\n+}"}, {"sha": "ca497057702f602cc7829f8d0c542eb324fde917", "filename": "tests/ui/unnecessary_struct_initialization.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/c72c914d21264653006dc572dba1022c6577eb81/tests%2Fui%2Funnecessary_struct_initialization.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c72c914d21264653006dc572dba1022c6577eb81/tests%2Fui%2Funnecessary_struct_initialization.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_struct_initialization.stderr?ref=c72c914d21264653006dc572dba1022c6577eb81", "patch": "@@ -0,0 +1,46 @@\n+error: unnecessary struct building\n+  --> $DIR/unnecessary_struct_initialization.rs:34:9\n+   |\n+LL |         Self { ..*self }\n+   |         ^^^^^^^^^^^^^^^^ help: replace with: `*self`\n+   |\n+   = note: `-D clippy::unnecessary-struct-initialization` implied by `-D warnings`\n+\n+error: unnecessary struct building\n+  --> $DIR/unnecessary_struct_initialization.rs:41:17\n+   |\n+LL |     let mut b = S { ..a };\n+   |                 ^^^^^^^^^ help: replace with: `a`\n+\n+error: unnecessary struct building\n+  --> $DIR/unnecessary_struct_initialization.rs:44:18\n+   |\n+LL |     let c = &mut S { ..b };\n+   |                  ^^^^^^^^^ help: replace with: `b`\n+\n+error: unnecessary struct building\n+  --> $DIR/unnecessary_struct_initialization.rs:52:14\n+   |\n+LL |     let g = &S { ..f };\n+   |              ^^^^^^^^^ help: replace with: `f`\n+\n+error: unnecessary struct building\n+  --> $DIR/unnecessary_struct_initialization.rs:55:18\n+   |\n+LL |       let h = &mut S {\n+   |  __________________^\n+LL | |         ..*Box::new(S { f: String::from(\"foo\") })\n+LL | |     };\n+   | |_____^ help: replace with: `*Box::new(S { f: String::from(\"foo\") })`\n+\n+error: unnecessary struct building\n+  --> $DIR/unnecessary_struct_initialization.rs:74:18\n+   |\n+LL |       let p = &mut T {\n+   |  __________________^\n+LL | |         ..*Box::new(T { f: 5 })\n+LL | |     };\n+   | |_____^ help: replace with: `*Box::new(T { f: 5 })`\n+\n+error: aborting due to 6 previous errors\n+"}]}