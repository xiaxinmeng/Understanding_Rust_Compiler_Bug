{"sha": "211d49c73cccdcf10444c0db3b8ae1e91582c6cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMWQ0OWM3M2NjY2RjZjEwNDQ0YzBkYjNiOGFlMWU5MTU4MmM2Y2Q=", "commit": {"author": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-02-06T16:29:56Z"}, "committer": {"name": "The8472", "email": "git@infinite-source.de", "date": "2021-02-20T22:12:53Z"}, "message": "parallelize x.py test tidy\n\nold:\n\n```\nreal\t0m11.123s\nuser\t0m14.495s\nsys\t0m5.227s\n```\n\nnew:\n\n```\nreal\t0m2.767s\nuser\t0m13.014s\nsys\t0m1.691s\n```", "tree": {"sha": "e4228c1a94cf6c0014637710507fa31bdd0178b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e4228c1a94cf6c0014637710507fa31bdd0178b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/211d49c73cccdcf10444c0db3b8ae1e91582c6cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/211d49c73cccdcf10444c0db3b8ae1e91582c6cd", "html_url": "https://github.com/rust-lang/rust/commit/211d49c73cccdcf10444c0db3b8ae1e91582c6cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/211d49c73cccdcf10444c0db3b8ae1e91582c6cd/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9920ef7749d11fc71cc32ca4ba055bcfeaab945", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9920ef7749d11fc71cc32ca4ba055bcfeaab945", "html_url": "https://github.com/rust-lang/rust/commit/e9920ef7749d11fc71cc32ca4ba055bcfeaab945"}], "stats": {"total": 83, "additions": 64, "deletions": 19}, "files": [{"sha": "40043c6e31ad2f85a983592a754b25cbd80066be", "filename": "src/bootstrap/format.rs", "status": "modified", "additions": 64, "deletions": 19, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/211d49c73cccdcf10444c0db3b8ae1e91582c6cd/src%2Fbootstrap%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/211d49c73cccdcf10444c0db3b8ae1e91582c6cd/src%2Fbootstrap%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fformat.rs?ref=211d49c73cccdcf10444c0db3b8ae1e91582c6cd", "patch": "@@ -3,10 +3,12 @@\n use crate::Build;\n use build_helper::{output, t};\n use ignore::WalkBuilder;\n-use std::path::Path;\n+use std::collections::VecDeque;\n+use std::path::{Path, PathBuf};\n use std::process::{Command, Stdio};\n+use std::sync::mpsc::SyncSender;\n \n-fn rustfmt(src: &Path, rustfmt: &Path, path: &Path, check: bool) {\n+fn rustfmt(src: &Path, rustfmt: &Path, paths: &[PathBuf], check: bool) -> Box<impl FnMut()> {\n     let mut cmd = Command::new(&rustfmt);\n     // avoid the submodule config paths from coming into play,\n     // we only allow a single global config for the workspace for now\n@@ -17,18 +19,22 @@ fn rustfmt(src: &Path, rustfmt: &Path, path: &Path, check: bool) {\n     if check {\n         cmd.arg(\"--check\");\n     }\n-    cmd.arg(&path);\n+    cmd.args(paths);\n     let cmd_debug = format!(\"{:?}\", cmd);\n-    let status = cmd.status().expect(\"executing rustfmt\");\n-    if !status.success() {\n-        eprintln!(\n-            \"Running `{}` failed.\\nIf you're running `tidy`, \\\n-            try again with `--bless`. Or, if you just want to format \\\n-            code, run `./x.py fmt` instead.\",\n-            cmd_debug,\n-        );\n-        std::process::exit(1);\n-    }\n+    let mut cmd = cmd.spawn().expect(\"running rustfmt\");\n+    // poor man's async: return a box that'll wait for rustfmt's completion\n+    Box::new(move || {\n+        let status = cmd.wait().unwrap();\n+        if !status.success() {\n+            eprintln!(\n+                \"Running `{}` failed.\\nIf you're running `tidy`, \\\n+                        try again with `--bless`. Or, if you just want to format \\\n+                        code, run `./x.py fmt` instead.\",\n+                cmd_debug,\n+            );\n+            std::process::exit(1);\n+        }\n+    })\n }\n \n #[derive(serde::Deserialize)]\n@@ -101,19 +107,58 @@ pub fn format(build: &Build, check: bool) {\n     }\n     let ignore_fmt = ignore_fmt.build().unwrap();\n \n-    let rustfmt_path = build.config.initial_rustfmt.as_ref().unwrap_or_else(|| {\n-        eprintln!(\"./x.py fmt is not supported on this channel\");\n-        std::process::exit(1);\n+    let rustfmt_path = build\n+        .config\n+        .initial_rustfmt\n+        .as_ref()\n+        .unwrap_or_else(|| {\n+            eprintln!(\"./x.py fmt is not supported on this channel\");\n+            std::process::exit(1);\n+        })\n+        .to_path_buf();\n+    let src = build.src.clone();\n+    let (tx, rx): (SyncSender<PathBuf>, _) = std::sync::mpsc::sync_channel(128);\n+    let walker =\n+        WalkBuilder::new(src.clone()).types(matcher).overrides(ignore_fmt).build_parallel();\n+\n+    // there is a lot of blocking involved in spawning a child process and reading files to format.\n+    // spawn more processes than available cores to keep the CPU busy\n+    let max_processes = num_cpus::get() * 2;\n+\n+    // spawn child processes on a separate thread so we can batch entries we have received from ignore\n+    let thread = std::thread::spawn(move || {\n+        let mut children = VecDeque::new();\n+        while let Ok(path) = rx.recv() {\n+            // try getting a few more paths from the channel to amortize the overhead of spawning processes\n+            let paths: Vec<_> = rx.try_iter().take(7).chain(std::iter::once(path)).collect();\n+\n+            let child = rustfmt(&src, &rustfmt_path, paths.as_slice(), check);\n+            children.push_back(child);\n+\n+            if children.len() > max_processes {\n+                // await oldest child\n+                children.pop_front().unwrap()();\n+            }\n+        }\n+\n+        // await remaining children\n+        for mut child in children {\n+            child();\n+        }\n     });\n-    let src = &build.src;\n-    let walker = WalkBuilder::new(src).types(matcher).overrides(ignore_fmt).build_parallel();\n+\n     walker.run(|| {\n+        let tx = tx.clone();\n         Box::new(move |entry| {\n             let entry = t!(entry);\n             if entry.file_type().map_or(false, |t| t.is_file()) {\n-                rustfmt(src, &rustfmt_path, &entry.path(), check);\n+                t!(tx.send(entry.into_path()));\n             }\n             ignore::WalkState::Continue\n         })\n     });\n+\n+    drop(tx);\n+\n+    thread.join().unwrap();\n }"}]}