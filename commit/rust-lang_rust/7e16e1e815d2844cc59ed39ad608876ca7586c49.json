{"sha": "7e16e1e815d2844cc59ed39ad608876ca7586c49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMTZlMWU4MTVkMjg0NGNjNTllZDM5YWQ2MDg4NzZjYTc1ODZjNDk=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-11-25T22:25:57Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-03-09T17:51:37Z"}, "message": "Access attrs directly from HirId in rustc_lint::levels.", "tree": {"sha": "f99f2ed0d52ada04c9230e0053cb0960e6931df0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f99f2ed0d52ada04c9230e0053cb0960e6931df0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e16e1e815d2844cc59ed39ad608876ca7586c49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e16e1e815d2844cc59ed39ad608876ca7586c49", "html_url": "https://github.com/rust-lang/rust/commit/7e16e1e815d2844cc59ed39ad608876ca7586c49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e16e1e815d2844cc59ed39ad608876ca7586c49/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b84bdf1dae14a935a26cc3860f389242a85a1215", "url": "https://api.github.com/repos/rust-lang/rust/commits/b84bdf1dae14a935a26cc3860f389242a85a1215", "html_url": "https://github.com/rust-lang/rust/commit/b84bdf1dae14a935a26cc3860f389242a85a1215"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "9542a51fedc67d80c78625be1f4beb0ce7f3a458", "filename": "compiler/rustc_lint/src/levels.rs", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7e16e1e815d2844cc59ed39ad608876ca7586c49/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e16e1e815d2844cc59ed39ad608876ca7586c49/compiler%2Frustc_lint%2Fsrc%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flevels.rs?ref=7e16e1e815d2844cc59ed39ad608876ca7586c49", "patch": "@@ -566,11 +566,12 @@ struct LintLevelMapBuilder<'a, 'tcx> {\n }\n \n impl LintLevelMapBuilder<'_, '_> {\n-    fn with_lint_attrs<F>(&mut self, id: hir::HirId, attrs: &[ast::Attribute], f: F)\n+    fn with_lint_attrs<F>(&mut self, id: hir::HirId, f: F)\n     where\n         F: FnOnce(&mut Self),\n     {\n         let is_crate_hir = id == hir::CRATE_HIR_ID;\n+        let attrs = self.tcx.hir().attrs(id);\n         let push = self.levels.push(attrs, self.store, is_crate_hir);\n         if push.changed {\n             self.levels.register_id(id);\n@@ -588,19 +589,19 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n     }\n \n     fn visit_param(&mut self, param: &'tcx hir::Param<'tcx>) {\n-        self.with_lint_attrs(param.hir_id, &param.attrs, |builder| {\n+        self.with_lint_attrs(param.hir_id, |builder| {\n             intravisit::walk_param(builder, param);\n         });\n     }\n \n     fn visit_item(&mut self, it: &'tcx hir::Item<'tcx>) {\n-        self.with_lint_attrs(it.hir_id(), &it.attrs, |builder| {\n+        self.with_lint_attrs(it.hir_id(), |builder| {\n             intravisit::walk_item(builder, it);\n         });\n     }\n \n     fn visit_foreign_item(&mut self, it: &'tcx hir::ForeignItem<'tcx>) {\n-        self.with_lint_attrs(it.hir_id(), &it.attrs, |builder| {\n+        self.with_lint_attrs(it.hir_id(), |builder| {\n             intravisit::walk_foreign_item(builder, it);\n         })\n     }\n@@ -613,13 +614,13 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n     }\n \n     fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {\n-        self.with_lint_attrs(e.hir_id, &e.attrs, |builder| {\n+        self.with_lint_attrs(e.hir_id, |builder| {\n             intravisit::walk_expr(builder, e);\n         })\n     }\n \n     fn visit_struct_field(&mut self, s: &'tcx hir::StructField<'tcx>) {\n-        self.with_lint_attrs(s.hir_id, &s.attrs, |builder| {\n+        self.with_lint_attrs(s.hir_id, |builder| {\n             intravisit::walk_struct_field(builder, s);\n         })\n     }\n@@ -630,31 +631,31 @@ impl<'tcx> intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n         g: &'tcx hir::Generics<'tcx>,\n         item_id: hir::HirId,\n     ) {\n-        self.with_lint_attrs(v.id, &v.attrs, |builder| {\n+        self.with_lint_attrs(v.id, |builder| {\n             intravisit::walk_variant(builder, v, g, item_id);\n         })\n     }\n \n     fn visit_local(&mut self, l: &'tcx hir::Local<'tcx>) {\n-        self.with_lint_attrs(l.hir_id, &l.attrs, |builder| {\n+        self.with_lint_attrs(l.hir_id, |builder| {\n             intravisit::walk_local(builder, l);\n         })\n     }\n \n     fn visit_arm(&mut self, a: &'tcx hir::Arm<'tcx>) {\n-        self.with_lint_attrs(a.hir_id, &a.attrs, |builder| {\n+        self.with_lint_attrs(a.hir_id, |builder| {\n             intravisit::walk_arm(builder, a);\n         })\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n-        self.with_lint_attrs(trait_item.hir_id(), &trait_item.attrs, |builder| {\n+        self.with_lint_attrs(trait_item.hir_id(), |builder| {\n             intravisit::walk_trait_item(builder, trait_item);\n         });\n     }\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem<'tcx>) {\n-        self.with_lint_attrs(impl_item.hir_id(), &impl_item.attrs, |builder| {\n+        self.with_lint_attrs(impl_item.hir_id(), |builder| {\n             intravisit::walk_impl_item(builder, impl_item);\n         });\n     }"}]}