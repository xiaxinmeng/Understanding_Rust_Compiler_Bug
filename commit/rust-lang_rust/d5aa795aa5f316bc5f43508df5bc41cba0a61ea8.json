{"sha": "d5aa795aa5f316bc5f43508df5bc41cba0a61ea8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1YWE3OTVhYTVmMzE2YmM1ZjQzNTA4ZGY1YmM0MWNiYTBhNjFlYTg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-28T03:53:03Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-02-28T18:46:12Z"}, "message": "std: Add cfg(test) to UnsafeArc assertions\n\nThis is a ubiquitous type in concurrent code, and the assertions are causing\nsignificant code bloat for simple operations such as reading the pointer\n(injecting a failure point, etc).\n\nI am testing executable sizes with no I/O implementations (everything stubbed\nout to return nothing), and this took the size of a libnative executable from\n328K to 207K (37% reduction in size), so I think that this is one assertion\nthat's well worth configuring off for now.", "tree": {"sha": "7f249584ed7618932165c489a885c22f5a7b6a7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f249584ed7618932165c489a885c22f5a7b6a7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5aa795aa5f316bc5f43508df5bc41cba0a61ea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5aa795aa5f316bc5f43508df5bc41cba0a61ea8", "html_url": "https://github.com/rust-lang/rust/commit/d5aa795aa5f316bc5f43508df5bc41cba0a61ea8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5aa795aa5f316bc5f43508df5bc41cba0a61ea8/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f01a9a8d02f6c09b89a3cecadaa5b62073381180", "url": "https://api.github.com/repos/rust-lang/rust/commits/f01a9a8d02f6c09b89a3cecadaa5b62073381180", "html_url": "https://github.com/rust-lang/rust/commit/f01a9a8d02f6c09b89a3cecadaa5b62073381180"}], "stats": {"total": 12, "additions": 8, "deletions": 4}, "files": [{"sha": "10369a52f0f17306b237a017ad637e63d7c072b5", "filename": "src/libstd/sync/arc.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d5aa795aa5f316bc5f43508df5bc41cba0a61ea8/src%2Flibstd%2Fsync%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5aa795aa5f316bc5f43508df5bc41cba0a61ea8/src%2Flibstd%2Fsync%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Farc.rs?ref=d5aa795aa5f316bc5f43508df5bc41cba0a61ea8", "patch": "@@ -80,7 +80,8 @@ impl<T: Send> UnsafeArc<T> {\n     #[inline]\n     pub fn get(&self) -> *mut T {\n         unsafe {\n-            assert!((*self.data).count.load(Relaxed) > 0);\n+            // FIXME(#12049): this needs some sort of debug assertion\n+            if cfg!(test) { assert!((*self.data).count.load(Relaxed) > 0); }\n             return &mut (*self.data).data as *mut T;\n         }\n     }\n@@ -90,7 +91,8 @@ impl<T: Send> UnsafeArc<T> {\n     #[inline]\n     pub fn get_immut(&self) -> *T {\n         unsafe {\n-            assert!((*self.data).count.load(Relaxed) > 0);\n+            // FIXME(#12049): this needs some sort of debug assertion\n+            if cfg!(test) { assert!((*self.data).count.load(Relaxed) > 0); }\n             return &(*self.data).data as *T;\n         }\n     }\n@@ -109,7 +111,8 @@ impl<T: Send> Clone for UnsafeArc<T> {\n         unsafe {\n             // This barrier might be unnecessary, but I'm not sure...\n             let old_count = (*self.data).count.fetch_add(1, Acquire);\n-            assert!(old_count >= 1);\n+            // FIXME(#12049): this needs some sort of debug assertion\n+            if cfg!(test) { assert!(old_count >= 1); }\n             return UnsafeArc { data: self.data };\n         }\n     }\n@@ -127,7 +130,8 @@ impl<T> Drop for UnsafeArc<T>{\n             // Must be acquire+release, not just release, to make sure this\n             // doesn't get reordered to after the unwrapper pointer load.\n             let old_count = (*self.data).count.fetch_sub(1, SeqCst);\n-            assert!(old_count >= 1);\n+            // FIXME(#12049): this needs some sort of debug assertion\n+            if cfg!(test) { assert!(old_count >= 1); }\n             if old_count == 1 {\n                 let _: ~ArcData<T> = cast::transmute(self.data);\n             }"}]}