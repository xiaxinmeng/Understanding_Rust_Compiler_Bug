{"sha": "ceeb9bdee6de1883012be5894c360b34b644fa44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlZWI5YmRlZTZkZTE4ODMwMTJiZTU4OTRjMzYwYjM0YjY0NGZhNDQ=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-05-12T09:41:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-05-12T09:41:15Z"}, "message": "Rollup merge of #72128 - RalfJung:str-validity, r=oli-obk\n\nstrings do not have to be valid UTF-8 any more\n\nCc https://github.com/rust-lang/reference/pull/792\nr? @oli-obk", "tree": {"sha": "aa59db539531cfd59fe1af12db6363baaff96632", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa59db539531cfd59fe1af12db6363baaff96632"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceeb9bdee6de1883012be5894c360b34b644fa44", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeum87CRBK7hj4Ov3rIwAAdHIIAIAbRzd8AToxRNpVyglhCzTo\nJPyKOJFiZ2IS0ThA6qy1KNy14BDxNLO7WMFxsrWj7FjTGGR6MRS8GMjGNGE0Hxzf\nrijkFZHouVPO3520moIXGKK49fShkVxRxNI18jjqrx53sASRh/kBrrifuPOP9GHW\nUCRn6X7CUGMWXy4gygZlBqNzXutX6V60w1XRoulm+PpavPEfM37AP5HKtlBtPJD5\nI5E+zQgPoCf71hp3vYmOwlR2wIraeEGJcvGReshStDqXOCUgaUeWWrr0Qh8Wduv8\nQi4BnfJ7He8DUik6w7MDzTTAV4aVW6al0b4qOOEToGojoehhfV1QXyQMZgqHcAo=\n=McrF\n-----END PGP SIGNATURE-----\n", "payload": "tree aa59db539531cfd59fe1af12db6363baaff96632\nparent 31e5be027e717eaedb51992a4c938f8aa9e7fdd1\nparent 6f9810c981f43cab6f4598d2d3b3e6e9b82d56ee\nauthor Dylan DPC <dylan.dpc@gmail.com> 1589276475 +0200\ncommitter GitHub <noreply@github.com> 1589276475 +0200\n\nRollup merge of #72128 - RalfJung:str-validity, r=oli-obk\n\nstrings do not have to be valid UTF-8 any more\n\nCc https://github.com/rust-lang/reference/pull/792\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceeb9bdee6de1883012be5894c360b34b644fa44", "html_url": "https://github.com/rust-lang/rust/commit/ceeb9bdee6de1883012be5894c360b34b644fa44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceeb9bdee6de1883012be5894c360b34b644fa44/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31e5be027e717eaedb51992a4c938f8aa9e7fdd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/31e5be027e717eaedb51992a4c938f8aa9e7fdd1", "html_url": "https://github.com/rust-lang/rust/commit/31e5be027e717eaedb51992a4c938f8aa9e7fdd1"}, {"sha": "6f9810c981f43cab6f4598d2d3b3e6e9b82d56ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f9810c981f43cab6f4598d2d3b3e6e9b82d56ee", "html_url": "https://github.com/rust-lang/rust/commit/6f9810c981f43cab6f4598d2d3b3e6e9b82d56ee"}], "stats": {"total": 23, "additions": 12, "deletions": 11}, "files": [{"sha": "7eb05ba2d2c54d2f36fb021ac70451beb257486b", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ceeb9bdee6de1883012be5894c360b34b644fa44/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceeb9bdee6de1883012be5894c360b34b644fa44/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=ceeb9bdee6de1883012be5894c360b34b644fa44", "patch": "@@ -15,7 +15,7 @@ use rustc_middle::mir::interpret::{InterpError, InterpErrorInfo};\n use rustc_middle::ty;\n use rustc_middle::ty::layout::TyAndLayout;\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_target::abi::{Abi, LayoutOf, Scalar, VariantIdx, Variants};\n+use rustc_target::abi::{Abi, LayoutOf, Scalar, Size, VariantIdx, Variants};\n \n use std::hash::Hash;\n \n@@ -744,10 +744,11 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValueVisitor<'mir, 'tcx, M>\n         match op.layout.ty.kind {\n             ty::Str => {\n                 let mplace = op.assert_mem_place(self.ecx); // strings are never immediate\n+                let len = mplace.len(self.ecx)?;\n                 try_validation!(\n-                    self.ecx.read_str(mplace),\n+                    self.ecx.memory.read_bytes(mplace.ptr, Size::from_bytes(len)),\n                     self.path,\n-                    err_ub!(InvalidStr(..)) => { \"uninitialized or non-UTF-8 data in str\" },\n+                    err_ub!(InvalidUninitBytes(..)) => { \"uninitialized data in `str`\" },\n                 );\n             }\n             ty::Array(tys, ..) | ty::Slice(tys)"}, {"sha": "f69f6a1109f76653b56bf49251cf2c3348571c21", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ceeb9bdee6de1883012be5894c360b34b644fa44/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceeb9bdee6de1883012be5894c360b34b644fa44/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.rs?ref=ceeb9bdee6de1883012be5894c360b34b644fa44", "patch": "@@ -42,11 +42,11 @@ const MY_STR_LENGTH_PTR: &MyStr = unsafe { mem::transmute((&42u8, &3)) };\n const MY_STR_MUCH_TOO_LONG: &MyStr = unsafe { mem::transmute((&42u8, usize::MAX)) };\n //~^ ERROR it is undefined behavior to use this value\n \n-// invalid UTF-8\n-const STR_NO_UTF8: &str = unsafe { mem::transmute::<&[u8], _>(&[0xFF]) };\n+// uninitialized byte\n+const STR_NO_INIT: &str = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n //~^ ERROR it is undefined behavior to use this value\n-// invalid UTF-8 in user-defined str-like\n-const MYSTR_NO_UTF8: &MyStr = unsafe { mem::transmute::<&[u8], _>(&[0xFF]) };\n+// uninitialized byte in user-defined str-like\n+const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n //~^ ERROR it is undefined behavior to use this value\n \n // # slice"}, {"sha": "47d29ffc9b3c16617311a29975476641d9898787", "filename": "src/test/ui/consts/const-eval/ub-wide-ptr.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ceeb9bdee6de1883012be5894c360b34b644fa44/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ceeb9bdee6de1883012be5894c360b34b644fa44/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-wide-ptr.stderr?ref=ceeb9bdee6de1883012be5894c360b34b644fa44", "patch": "@@ -41,16 +41,16 @@ LL | const MY_STR_MUCH_TOO_LONG: &MyStr = unsafe { mem::transmute((&42u8, usize:\n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:46:1\n    |\n-LL | const STR_NO_UTF8: &str = unsafe { mem::transmute::<&[u8], _>(&[0xFF]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized or non-UTF-8 data in str at .<deref>\n+LL | const STR_NO_INIT: &str = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized data in `str` at .<deref>\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n \n error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-wide-ptr.rs:49:1\n    |\n-LL | const MYSTR_NO_UTF8: &MyStr = unsafe { mem::transmute::<&[u8], _>(&[0xFF]) };\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized or non-UTF-8 data in str at .<deref>.0\n+LL | const MYSTR_NO_INIT: &MyStr = unsafe { mem::transmute::<&[_], _>(&[MaybeUninit::<u8> { uninit: () }]) };\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered uninitialized data in `str` at .<deref>.0\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rustc repository if you believe it should not be considered undefined behavior.\n "}]}