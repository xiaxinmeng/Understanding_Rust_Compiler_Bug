{"sha": "8b6af3eacbeb359c2041a3b5efc12042d3c33deb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhiNmFmM2VhY2JlYjM1OWMyMDQxYTNiNWVmYzEyMDQyZDNjMzNkZWI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-17T14:18:53Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-17T14:21:43Z"}, "message": "avoid using unchecked casts or arithmetic", "tree": {"sha": "843da8a197ad61335d750bf9b2674f61e97618fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/843da8a197ad61335d750bf9b2674f61e97618fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8b6af3eacbeb359c2041a3b5efc12042d3c33deb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8b6af3eacbeb359c2041a3b5efc12042d3c33deb", "html_url": "https://github.com/rust-lang/rust/commit/8b6af3eacbeb359c2041a3b5efc12042d3c33deb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9082cc406abf2ff520dc8b073330850edb5489e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/9082cc406abf2ff520dc8b073330850edb5489e7", "html_url": "https://github.com/rust-lang/rust/commit/9082cc406abf2ff520dc8b073330850edb5489e7"}], "stats": {"total": 132, "additions": 71, "deletions": 61}, "files": [{"sha": "4a54867c99640c4c5f75f690965405a19c63ae4a", "filename": "src/bin/miri.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=8b6af3eacbeb359c2041a3b5efc12042d3c33deb", "patch": "@@ -259,7 +259,6 @@ fn main() {\n     rustc_driver::install_ice_hook();\n     let result = rustc_driver::catch_fatal_errors(move || {\n         rustc_driver::run_compiler(&rustc_args, &mut MiriCompilerCalls { miri_config }, None, None)\n-    })\n-    .and_then(|result| result);\n+    });\n     std::process::exit(result.is_err() as i32);\n }"}, {"sha": "64beff6eb77fe3ade2699e0db3802ddadfbd53a6", "filename": "src/eval.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=8b6af3eacbeb359c2041a3b5efc12042d3c33deb", "patch": "@@ -1,6 +1,7 @@\n //! Main evaluator loop and setting up the initial stack frame.\n \n use std::ffi::OsStr;\n+use std::convert::TryFrom;\n \n use rand::rngs::StdRng;\n use rand::SeedableRng;\n@@ -101,25 +102,25 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n     // First argument: pointer to `main()`.\n     let main_ptr = ecx.memory.create_fn_alloc(FnVal::Instance(main_instance));\n     // Second argument (argc): length of `config.args`.\n-    let argc = Scalar::from_uint(config.args.len() as u128, ecx.pointer_size());\n+    let argc = Scalar::from_uint(u64::try_from(config.args.len()).unwrap(), ecx.pointer_size());\n     // Third argument (`argv`): created from `config.args`.\n     let argv = {\n         // Put each argument in memory, collect pointers.\n         let mut argvs = Vec::<Scalar<Tag>>::new();\n         for arg in config.args.iter() {\n             // Make space for `0` terminator.\n-            let size = arg.len() as u64 + 1;\n+            let size = u64::try_from(arg.len()).unwrap().checked_add(1).unwrap();\n             let arg_type = tcx.mk_array(tcx.types.u8, size);\n             let arg_place = ecx.allocate(ecx.layout_of(arg_type)?, MiriMemoryKind::Machine.into());\n             ecx.write_os_str_to_c_str(OsStr::new(arg), arg_place.ptr, size)?;\n             argvs.push(arg_place.ptr);\n         }\n         // Make an array with all these pointers, in the Miri memory.\n         let argvs_layout =\n-            ecx.layout_of(tcx.mk_array(tcx.mk_imm_ptr(tcx.types.u8), argvs.len() as u64))?;\n+            ecx.layout_of(tcx.mk_array(tcx.mk_imm_ptr(tcx.types.u8), u64::try_from(argvs.len()).unwrap()))?;\n         let argvs_place = ecx.allocate(argvs_layout, MiriMemoryKind::Machine.into());\n         for (idx, arg) in argvs.into_iter().enumerate() {\n-            let place = ecx.mplace_field(argvs_place, idx as u64)?;\n+            let place = ecx.mplace_field(argvs_place, u64::try_from(idx).unwrap())?;\n             ecx.write_scalar(arg, place.into())?;\n         }\n         ecx.memory.mark_immutable(argvs_place.ptr.assert_ptr().alloc_id)?;\n@@ -153,13 +154,13 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n             cmd.push(std::char::from_u32(0).unwrap());\n \n             let cmd_utf16: Vec<u16> = cmd.encode_utf16().collect();\n-            let cmd_type = tcx.mk_array(tcx.types.u16, cmd_utf16.len() as u64);\n+            let cmd_type = tcx.mk_array(tcx.types.u16, u64::try_from(cmd_utf16.len()).unwrap());\n             let cmd_place = ecx.allocate(ecx.layout_of(cmd_type)?, MiriMemoryKind::Machine.into());\n             ecx.machine.cmd_line = Some(cmd_place.ptr);\n             // Store the UTF-16 string. We just allocated so we know the bounds are fine.\n             let char_size = Size::from_bytes(2);\n             for (idx, &c) in cmd_utf16.iter().enumerate() {\n-                let place = ecx.mplace_field(cmd_place, idx as u64)?;\n+                let place = ecx.mplace_field(cmd_place, u64::try_from(idx).unwrap())?;\n                 ecx.write_scalar(Scalar::from_uint(c, char_size), place.into())?;\n             }\n         }"}, {"sha": "ecb3a5d8bce9c346fccd49daf983559e1ec60324", "filename": "src/helpers.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=8b6af3eacbeb359c2041a3b5efc12042d3c33deb", "patch": "@@ -1,5 +1,6 @@\n use std::ffi::OsStr;\n use std::{iter, mem};\n+use std::convert::TryFrom;\n \n use rustc::mir;\n use rustc::ty::{\n@@ -81,7 +82,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n     }\n \n     /// Generate some random bytes, and write them to `dest`.\n-    fn gen_random(&mut self, ptr: Scalar<Tag>, len: usize) -> InterpResult<'tcx> {\n+    fn gen_random(&mut self, ptr: Scalar<Tag>, len: u64) -> InterpResult<'tcx> {\n         // Some programs pass in a null pointer and a length of 0\n         // to their platform's random-generation function (e.g. getrandom())\n         // on Linux. For compatibility with these programs, we don't perform\n@@ -92,7 +93,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         }\n         let this = self.eval_context_mut();\n \n-        let mut data = vec![0; len];\n+        let mut data = vec![0; usize::try_from(len).unwrap()];\n \n         if this.machine.communicate {\n             // Fill the buffer using the host's rng.\n@@ -499,7 +500,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let bytes = os_str_to_bytes(os_str)?;\n         // If `size` is smaller or equal than `bytes.len()`, writing `bytes` plus the required null\n         // terminator to memory using the `ptr` pointer would cause an out-of-bounds access.\n-        let string_length = bytes.len() as u64;\n+        let string_length = u64::try_from(bytes.len()).unwrap();\n         if size <= string_length {\n             return Ok((false, string_length));\n         }\n@@ -514,7 +515,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         os_str: &OsStr,\n         memkind: MemoryKind<MiriMemoryKind>,\n     ) -> Pointer<Tag> {\n-        let size = os_str.len() as u64 + 1; // Make space for `0` terminator.\n+        let size = u64::try_from(os_str.len()).unwrap().checked_add(1).unwrap(); // Make space for `0` terminator.\n         let this = self.eval_context_mut();\n \n         let arg_type = this.tcx.mk_array(this.tcx.types.u8, size);"}, {"sha": "9027a97cf54e438dcab0101d56f42aec90ffc72f", "filename": "src/shims/dlsym.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Fdlsym.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Fdlsym.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fdlsym.rs?ref=8b6af3eacbeb359c2041a3b5efc12042d3c33deb", "patch": "@@ -37,7 +37,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             GetEntropy => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let len = this.read_scalar(args[1])?.to_machine_usize(this)?;\n-                this.gen_random(ptr, len as usize)?;\n+                this.gen_random(ptr, len)?;\n                 this.write_null(dest)?;\n             }\n         }"}, {"sha": "da634c1aeb23742b68036687e8af0a7e9bb0ffda", "filename": "src/shims/env.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fenv.rs?ref=8b6af3eacbeb359c2041a3b5efc12042d3c33deb", "patch": "@@ -1,5 +1,6 @@\n use std::ffi::{OsString, OsStr};\n use std::env;\n+use std::convert::TryFrom;\n \n use crate::stacked_borrows::Tag;\n use crate::rustc_target::abi::LayoutOf;\n@@ -58,7 +59,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         Ok(match this.machine.env_vars.map.get(name) {\n             // The offset is used to strip the \"{name}=\" part of the string.\n             Some(var_ptr) => {\n-                Scalar::from(var_ptr.offset(Size::from_bytes(name.len() as u64 + 1), this)?)\n+                Scalar::from(var_ptr.offset(Size::from_bytes(u64::try_from(name.len()).unwrap().checked_add(1).unwrap()), this)?)\n             }\n             None => Scalar::ptr_null(&*this.tcx),\n         })\n@@ -181,10 +182,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         // Make an array with all these pointers inside Miri.\n         let tcx = this.tcx;\n         let vars_layout =\n-            this.layout_of(tcx.mk_array(tcx.types.usize, vars.len() as u64))?;\n+            this.layout_of(tcx.mk_array(tcx.types.usize, u64::try_from(vars.len()).unwrap()))?;\n         let vars_place = this.allocate(vars_layout, MiriMemoryKind::Machine.into());\n         for (idx, var) in vars.into_iter().enumerate() {\n-            let place = this.mplace_field(vars_place, idx as u64)?;\n+            let place = this.mplace_field(vars_place, u64::try_from(idx).unwrap())?;\n             this.write_scalar(var, place.into())?;\n         }\n         this.write_scalar("}, {"sha": "deabbdd6081933a22d5daad07a3a86f228f4634c", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=8b6af3eacbeb359c2041a3b5efc12042d3c33deb", "patch": "@@ -1,7 +1,7 @@\n mod windows;\n mod posix;\n \n-use std::{convert::TryInto, iter};\n+use std::{convert::{TryInto, TryFrom}, iter};\n \n use rustc_hir::def_id::DefId;\n use rustc::mir;\n@@ -250,7 +250,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     MiriMemoryKind::Rust.into(),\n                 );\n                 // We just allocated this, the access is definitely in-bounds.\n-                this.memory.write_bytes(ptr.into(), iter::repeat(0u8).take(size as usize)).unwrap();\n+                this.memory.write_bytes(ptr.into(), iter::repeat(0u8).take(usize::try_from(size).unwrap())).unwrap();\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"__rust_dealloc\" => {\n@@ -350,7 +350,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"strlen\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let n = this.memory.read_c_str(ptr)?.len();\n-                this.write_scalar(Scalar::from_uint(n as u64, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_uint(u64::try_from(n).unwrap(), dest.layout.size), dest)?;\n             }\n \n             // math functions\n@@ -440,9 +440,9 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n                 // Saturating cast to i16. Even those are outside the valid exponent range to\n                 // `scalbn` below will do its over/underflow handling.\n-                let exp = if exp > i16::MAX as i32 {\n+                let exp = if exp > i32::from(i16::MAX) {\n                     i16::MAX\n-                } else if exp < i16::MIN as i32 {\n+                } else if exp < i32::from(i16::MIN) {\n                     i16::MIN\n                 } else {\n                     exp.try_into().unwrap()"}, {"sha": "f73ec288284abd96e02352fab86b06da02048f39", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=8b6af3eacbeb359c2041a3b5efc12042d3c33deb", "patch": "@@ -1,6 +1,8 @@\n mod linux;\n mod macos;\n \n+use std::convert::TryFrom;\n+\n use crate::*;\n use rustc::mir;\n use rustc::ty::layout::{Align, LayoutOf, Size};\n@@ -84,7 +86,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                         io::stderr().write(buf_cont)\n                     };\n                     match res {\n-                        Ok(n) => n as i64,\n+                        Ok(n) => i64::try_from(n).unwrap(),\n                         Err(_) => -1,\n                     }\n                 } else {"}, {"sha": "023fee4ca7b1eef68bc37bed701bb41680e52751", "filename": "src/shims/foreign_items/posix/linux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs?ref=8b6af3eacbeb359c2041a3b5efc12042d3c33deb", "patch": "@@ -114,7 +114,7 @@ fn getrandom<'tcx>(\n     // neither of which have any effect on our current PRNG.\n     let _flags = this.read_scalar(args[2])?.to_i32()?;\n \n-    this.gen_random(ptr, len as usize)?;\n+    this.gen_random(ptr, len)?;\n     this.write_scalar(Scalar::from_uint(len, dest.layout.size), dest)?;\n     Ok(())\n }"}, {"sha": "34661fb2383c308ca29fa270338efcb290619904", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=8b6af3eacbeb359c2041a3b5efc12042d3c33deb", "patch": "@@ -97,7 +97,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"SecRandomCopyBytes\" => {\n                 let len = this.read_scalar(args[1])?.to_machine_usize(this)?;\n                 let ptr = this.read_scalar(args[2])?.not_undef()?;\n-                this.gen_random(ptr, len as usize)?;\n+                this.gen_random(ptr, len)?;\n                 this.write_null(dest)?;\n             }\n "}, {"sha": "306d2f7b0e37cd8bec96a82d8fa0450fe36a1bee", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=8b6af3eacbeb359c2041a3b5efc12042d3c33deb", "patch": "@@ -165,12 +165,12 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_uint(key, dest.layout.size), dest)?;\n             }\n             \"TlsGetValue\" => {\n-                let key = this.read_scalar(args[0])?.to_u32()? as u128;\n+                let key = u128::from(this.read_scalar(args[0])?.to_u32()?);\n                 let ptr = this.machine.tls.load_tls(key, tcx)?;\n                 this.write_scalar(ptr, dest)?;\n             }\n             \"TlsSetValue\" => {\n-                let key = this.read_scalar(args[0])?.to_u32()? as u128;\n+                let key = u128::from(this.read_scalar(args[0])?.to_u32()?);\n                 let new_ptr = this.read_scalar(args[1])?.not_undef()?;\n                 this.machine.tls.store_tls(key, this.test_null(new_ptr)?)?;\n \n@@ -197,7 +197,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             \"SystemFunction036\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let len = this.read_scalar(args[1])?.to_u32()?;\n-                this.gen_random(ptr, len as usize)?;\n+                this.gen_random(ptr, len.into())?;\n                 this.write_scalar(Scalar::from_bool(true), dest)?;\n             }\n             // We don't support threading."}, {"sha": "7c755143f2e81407bdbce5d43b74ff58b03f0d36", "filename": "src/shims/fs.rs", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ffs.rs?ref=8b6af3eacbeb359c2041a3b5efc12042d3c33deb", "patch": "@@ -10,7 +10,7 @@ use rustc::ty::layout::{Align, LayoutOf, Size};\n \n use crate::stacked_borrows::Tag;\n use crate::*;\n-use helpers::immty_from_uint_checked;\n+use helpers::{immty_from_int_checked, immty_from_uint_checked};\n use shims::time::system_time_to_duration;\n \n #[derive(Debug)]\n@@ -56,7 +56,7 @@ impl FileHandler {\n         let new_fd = candidate_new_fd.unwrap_or_else(|| {\n             // find_map ran out of BTreeMap entries before finding a free fd, use one plus the\n             // maximum fd in the map\n-            self.handles.last_entry().map(|entry| entry.key() + 1).unwrap_or(min_fd)\n+            self.handles.last_entry().map(|entry| entry.key().checked_add(1).unwrap()).unwrap_or(min_fd)\n         });\n \n         self.handles.insert(new_fd, file_handle).unwrap_none();\n@@ -167,11 +167,11 @@ trait EvalContextExtPrivate<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, '\n         match file_type {\n             Ok(file_type) => {\n                 if file_type.is_dir() {\n-                    Ok(this.eval_libc(\"DT_DIR\")?.to_u8()? as i32)\n+                    Ok(this.eval_libc(\"DT_DIR\")?.to_u8()?.into())\n                 } else if file_type.is_file() {\n-                    Ok(this.eval_libc(\"DT_REG\")?.to_u8()? as i32)\n+                    Ok(this.eval_libc(\"DT_REG\")?.to_u8()?.into())\n                 } else if file_type.is_symlink() {\n-                    Ok(this.eval_libc(\"DT_LNK\")?.to_u8()? as i32)\n+                    Ok(this.eval_libc(\"DT_LNK\")?.to_u8()?.into())\n                 } else {\n                     // Certain file types are only supported when the host is a Unix system.\n                     // (i.e. devices and sockets) If it is, check those cases, if not, fall back to\n@@ -181,19 +181,19 @@ trait EvalContextExtPrivate<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, '\n                     {\n                         use std::os::unix::fs::FileTypeExt;\n                         if file_type.is_block_device() {\n-                            Ok(this.eval_libc(\"DT_BLK\")?.to_u8()? as i32)\n+                            Ok(this.eval_libc(\"DT_BLK\")?.to_u8()?.into())\n                         } else if file_type.is_char_device() {\n-                            Ok(this.eval_libc(\"DT_CHR\")?.to_u8()? as i32)\n+                            Ok(this.eval_libc(\"DT_CHR\")?.to_u8()?.into())\n                         } else if file_type.is_fifo() {\n-                            Ok(this.eval_libc(\"DT_FIFO\")?.to_u8()? as i32)\n+                            Ok(this.eval_libc(\"DT_FIFO\")?.to_u8()?.into())\n                         } else if file_type.is_socket() {\n-                            Ok(this.eval_libc(\"DT_SOCK\")?.to_u8()? as i32)\n+                            Ok(this.eval_libc(\"DT_SOCK\")?.to_u8()?.into())\n                         } else {\n-                            Ok(this.eval_libc(\"DT_UNKNOWN\")?.to_u8()? as i32)\n+                            Ok(this.eval_libc(\"DT_UNKNOWN\")?.to_u8()?.into())\n                         }\n                     }\n                     #[cfg(not(unix))]\n-                    Ok(this.eval_libc(\"DT_UNKNOWN\")?.to_u8()? as i32)\n+                    Ok(this.eval_libc(\"DT_UNKNOWN\")?.to_u8()?.into())\n                 }\n             }\n             Err(e) => return match e.raw_os_error() {\n@@ -507,7 +507,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let whence = this.read_scalar(whence_op)?.to_i32()?;\n \n         let seek_from = if whence == this.eval_libc_i32(\"SEEK_SET\")? {\n-            SeekFrom::Start(offset as u64)\n+            SeekFrom::Start(u64::try_from(offset).unwrap())\n         } else if whence == this.eval_libc_i32(\"SEEK_CUR\")? {\n             SeekFrom::Current(offset)\n         } else if whence == this.eval_libc_i32(\"SEEK_END\")? {\n@@ -519,7 +519,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         };\n \n         if let Some(FileHandle { file, writable: _ }) = this.machine.file_handler.handles.get_mut(&fd) {\n-            let result = file.seek(seek_from).map(|offset| offset as i64);\n+            let result = file.seek(seek_from).map(|offset| i64::try_from(offset).unwrap());\n             this.try_unwrap_io_result(result)\n         } else {\n             this.handle_not_found()\n@@ -810,7 +810,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         this.check_no_isolation(\"mkdir\")?;\n \n         let _mode = if this.tcx.sess.target.target.target_os.as_str() == \"macos\" {\n-            this.read_scalar(mode_op)?.not_undef()?.to_u16()? as u32\n+            u32::from(this.read_scalar(mode_op)?.not_undef()?.to_u16()?)\n         } else {\n             this.read_scalar(mode_op)?.to_u32()?\n         };\n@@ -929,13 +929,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 #[cfg(not(unix))]\n                 let ino = 0u64;\n \n-                let file_type = this.file_type_to_d_type(dir_entry.file_type())? as u128;\n+                let file_type = this.file_type_to_d_type(dir_entry.file_type())?;\n \n                 let imms = [\n                     immty_from_uint_checked(ino, ino64_t_layout)?, // d_ino\n                     immty_from_uint_checked(0u128, off64_t_layout)?, // d_off\n                     immty_from_uint_checked(0u128, c_ushort_layout)?, // d_reclen\n-                    immty_from_uint_checked(file_type, c_uchar_layout)?, // d_type\n+                    immty_from_int_checked(file_type, c_uchar_layout)?, // d_type\n                 ];\n                 this.write_packed_immediates(entry_place, &imms)?;\n \n@@ -1017,14 +1017,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 #[cfg(not(unix))]\n                 let ino = 0u64;\n \n-                let file_type = this.file_type_to_d_type(dir_entry.file_type())? as u128;\n+                let file_type = this.file_type_to_d_type(dir_entry.file_type())?;\n \n                 let imms = [\n                     immty_from_uint_checked(ino, ino_t_layout)?, // d_ino\n                     immty_from_uint_checked(0u128, off_t_layout)?, // d_seekoff\n                     immty_from_uint_checked(0u128, c_ushort_layout)?, // d_reclen\n                     immty_from_uint_checked(file_name_len, c_ushort_layout)?, // d_namlen\n-                    immty_from_uint_checked(file_type, c_uchar_layout)?, // d_type\n+                    immty_from_int_checked(file_type, c_uchar_layout)?, // d_type\n                 ];\n                 this.write_packed_immediates(entry_place, &imms)?;\n "}, {"sha": "6837d45158d9774463fe710e991aa6f47963bc80", "filename": "src/shims/intrinsics.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fintrinsics.rs?ref=8b6af3eacbeb359c2041a3b5efc12042d3c33deb", "patch": "@@ -1,4 +1,5 @@\n use std::iter;\n+use std::convert::TryFrom;\n \n use rustc::mir;\n use rustc::mir::interpret::{InterpResult, PointerArithmetic};\n@@ -48,7 +49,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n \n                 let pointee_ty = substs.type_at(0);\n-                let pointee_size = this.layout_of(pointee_ty)?.size.bytes() as i64;\n+                let pointee_size = i64::try_from(this.layout_of(pointee_ty)?.size.bytes()).unwrap();\n                 let offset = offset.overflowing_mul(pointee_size).0;\n                 let result_ptr = ptr.ptr_wrapping_signed_offset(offset, this);\n                 this.write_scalar(result_ptr, dest)?;\n@@ -229,7 +230,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let count = this.read_scalar(args[2])?.to_machine_usize(this)?;\n                 let elem_align = elem_layout.align.abi;\n \n-                let size = Size::from_bytes(count * elem_size);\n+                let size = Size::from_bytes(count) * elem_size;\n                 let src = this.read_scalar(args[0])?.not_undef()?;\n                 let src = this.memory.check_ptr_access(src, size, elem_align)?;\n                 let dest = this.read_scalar(args[1])?.not_undef()?;\n@@ -419,7 +420,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 let layout = this.layout_of(ty)?;\n                 let align = layout.align.pref.bytes();\n                 let ptr_size = this.pointer_size();\n-                let align_val = Scalar::from_uint(align as u128, ptr_size);\n+                let align_val = Scalar::from_uint(align, ptr_size);\n                 this.write_scalar(align_val, dest)?;\n             }\n \n@@ -502,7 +503,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     .size_and_align_of_mplace(mplace)?\n                     .expect(\"size_of_val called on extern type\");\n                 let ptr_size = this.pointer_size();\n-                this.write_scalar(Scalar::from_uint(size.bytes() as u128, ptr_size), dest)?;\n+                this.write_scalar(Scalar::from_uint(size.bytes(), ptr_size), dest)?;\n             }\n \n             #[rustfmt::skip]"}, {"sha": "d9e4d226ecc9a6d428751be0f3b08baf3c3f71e1", "filename": "src/shims/mod.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fmod.rs?ref=8b6af3eacbeb359c2041a3b5efc12042d3c33deb", "patch": "@@ -7,9 +7,12 @@ pub mod panic;\n pub mod time;\n pub mod tls;\n \n-use crate::*;\n+use std::convert::TryFrom;\n+\n use rustc::{mir, ty};\n \n+use crate::*;\n+\n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n     fn find_mir_or_eval_fn(\n@@ -54,8 +57,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let (dest, ret) = ret.unwrap();\n \n         let req_align = this\n-            .force_bits(this.read_scalar(align_op)?.not_undef()?, this.pointer_size())?\n-            as usize;\n+            .force_bits(this.read_scalar(align_op)?.not_undef()?, this.pointer_size())?;\n \n         // Stop if the alignment is not a power of two.\n         if !req_align.is_power_of_two() {\n@@ -69,12 +71,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         if let Ok(ptr) = this.force_ptr(ptr_scalar) {\n             // Only do anything if we can identify the allocation this goes to.\n             let cur_align =\n-                this.memory.get_size_and_align(ptr.alloc_id, AllocCheck::MaybeDead)?.1.bytes()\n-                    as usize;\n-            if cur_align >= req_align {\n+                this.memory.get_size_and_align(ptr.alloc_id, AllocCheck::MaybeDead)?.1.bytes();\n+            if u128::from(cur_align) >= req_align {\n                 // If the allocation alignment is at least the required alignment we use the\n-                // libcore implementation\n-                result = (this.force_bits(ptr_scalar, this.pointer_size())? as *const i8).align_offset(req_align) as u128;\n+                // libcore implementation.\n+                // FIXME: is this correct in case of truncation?\n+                result = u128::try_from(\n+                    (this.force_bits(ptr_scalar, this.pointer_size())? as *const i8)\n+                        .align_offset(usize::try_from(req_align).unwrap())\n+                ).unwrap();\n             }\n         }\n "}, {"sha": "d761698e0d27807e17756e05eeb53389959031fe", "filename": "src/shims/time.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8b6af3eacbeb359c2041a3b5efc12042d3c33deb/src%2Fshims%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Ftime.rs?ref=8b6af3eacbeb359c2041a3b5efc12042d3c33deb", "patch": "@@ -37,8 +37,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let tp = this.deref_operand(tp_op)?;\n \n         let duration = get_time()?;\n-        let tv_sec = duration.as_secs() as i128;\n-        let tv_nsec = duration.subsec_nanos() as i128;\n+        let tv_sec = duration.as_secs();\n+        let tv_nsec = duration.subsec_nanos();\n \n         let imms = [\n             immty_from_int_checked(tv_sec, this.libc_ty_layout(\"time_t\")?)?,\n@@ -69,8 +69,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         let tv = this.deref_operand(tv_op)?;\n \n         let duration = get_time()?;\n-        let tv_sec = duration.as_secs() as i128;\n-        let tv_usec = duration.subsec_micros() as i128;\n+        let tv_sec = duration.as_secs();\n+        let tv_usec = duration.subsec_micros();\n \n         let imms = [\n             immty_from_int_checked(tv_sec, this.libc_ty_layout(\"time_t\")?)?,"}]}