{"sha": "1b406afe23c17467f43a5c1bd83b4af1d55d08d9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNDA2YWZlMjNjMTc0NjdmNDNhNWMxYmQ4M2I0YWYxZDU1ZDA4ZDk=", "commit": {"author": {"name": "Cl\u00e9ment Renault", "email": "clement@meilisearch.com", "date": "2020-12-10T10:37:40Z"}, "committer": {"name": "Cl\u00e9ment Renault", "email": "clement@meilisearch.com", "date": "2020-12-10T10:37:40Z"}, "message": "Use none as the issue instead of 0", "tree": {"sha": "b906c09910c59fbd9d3b0623af7cd565eb009103", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b906c09910c59fbd9d3b0623af7cd565eb009103"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b406afe23c17467f43a5c1bd83b4af1d55d08d9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEAUNXpSBlykwfjB4xkq2k6TXnH6QFAl/R+nQACgkQkq2k6TXn\nH6QNRQ/+JrvRYMs9Rg5g2eBZSdsvviEmJJm/ZkWyKUaOHZWCstFQ9Q6dbCLBIrJy\n/LvQu6nIkgY3i/rjKp8ZAr+JDt+cS9IYi2nYuwDRC17NCehBJu07TrRByzr4v9i/\nkwbjJhVtFF7Krmr3VdMhhHtNWluw5IioLV62XcZ/IJcd+kG1ZKbbogyZPZ318IZ2\nz1JIY2gfCMAWTJJsUWau3HJLJQmgY9nK+UBcRQRBdJO+yIyyQD3N1zMIgV9d6uWe\nyXtWmjAO+AEA/wxrLBJekTWY9lKiv7z2C9P45cqaweAs9yErzP6AvtFCSqilCLJ4\n211H/u5f2veyr1XTuP5UyQvx3IHWDERsIoKHVg4ES4M5Fivb2lBQmoM/j7gtdlOz\nQEH4XIzyJng5pVX7vUMR1h0sytWIHe2We+ObQpauTeMmVFr1KKPVNFYwRp26HgQC\nBJcgMcu5b97GPinMa9Lk9wSeoaTNRY7w5iIz+TaIYb4LYcHVhXBgoPSOCx00gWDn\ni2OJHKpIxLxc3SKAIB2QEm1/RFbrpYRXkl9kDinSJqXUU7rr2F3UWzonGoS8qZcY\nWAe6pWslLiThczIbC6qGVZcqsdPzrNateMic6JqCoGjCWBD6pk1R0pAYWOaa/RTe\ng2wBvNNx+ds5Had1sRgpWQ+wlBqJTRDpmZpi1k3SD/Wc8sc/m3Y=\n=aWe2\n-----END PGP SIGNATURE-----", "payload": "tree b906c09910c59fbd9d3b0623af7cd565eb009103\nparent 005912fce87700c5aee6185701e9c2aea3f216d2\nauthor Cl\u00e9ment Renault <clement@meilisearch.com> 1607596660 +0100\ncommitter Cl\u00e9ment Renault <clement@meilisearch.com> 1607596660 +0100\n\nUse none as the issue instead of 0\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b406afe23c17467f43a5c1bd83b4af1d55d08d9", "html_url": "https://github.com/rust-lang/rust/commit/1b406afe23c17467f43a5c1bd83b4af1d55d08d9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b406afe23c17467f43a5c1bd83b4af1d55d08d9/comments", "author": {"login": "Kerollmops", "id": 3610253, "node_id": "MDQ6VXNlcjM2MTAyNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3610253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kerollmops", "html_url": "https://github.com/Kerollmops", "followers_url": "https://api.github.com/users/Kerollmops/followers", "following_url": "https://api.github.com/users/Kerollmops/following{/other_user}", "gists_url": "https://api.github.com/users/Kerollmops/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kerollmops/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kerollmops/subscriptions", "organizations_url": "https://api.github.com/users/Kerollmops/orgs", "repos_url": "https://api.github.com/users/Kerollmops/repos", "events_url": "https://api.github.com/users/Kerollmops/events{/privacy}", "received_events_url": "https://api.github.com/users/Kerollmops/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Kerollmops", "id": 3610253, "node_id": "MDQ6VXNlcjM2MTAyNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3610253?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kerollmops", "html_url": "https://github.com/Kerollmops", "followers_url": "https://api.github.com/users/Kerollmops/followers", "following_url": "https://api.github.com/users/Kerollmops/following{/other_user}", "gists_url": "https://api.github.com/users/Kerollmops/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kerollmops/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kerollmops/subscriptions", "organizations_url": "https://api.github.com/users/Kerollmops/orgs", "repos_url": "https://api.github.com/users/Kerollmops/repos", "events_url": "https://api.github.com/users/Kerollmops/events{/privacy}", "received_events_url": "https://api.github.com/users/Kerollmops/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "005912fce87700c5aee6185701e9c2aea3f216d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/005912fce87700c5aee6185701e9c2aea3f216d2", "html_url": "https://github.com/rust-lang/rust/commit/005912fce87700c5aee6185701e9c2aea3f216d2"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "5f92dfe539fb4db9365ff13a5b1af7b5bdc8c9fd", "filename": "library/alloc/src/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b406afe23c17467f43a5c1bd83b4af1d55d08d9/library%2Falloc%2Fsrc%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b406afe23c17467f43a5c1bd83b4af1d55d08d9/library%2Falloc%2Fsrc%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fslice.rs?ref=1b406afe23c17467f43a5c1bd83b4af1d55d08d9", "patch": "@@ -118,7 +118,7 @@ pub use core::slice::{RChunks, RChunksExact, RChunksExactMut, RChunksMut};\n pub use core::slice::{RSplit, RSplitMut};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub use core::slice::{RSplitN, RSplitNMut, SplitN, SplitNMut};\n-#[unstable(feature = \"slice_group_by\", issue = \"0\")]\n+#[unstable(feature = \"slice_group_by\", issue = \"none\")]\n pub use core::slice::{GroupBy, GroupByMut};\n \n ////////////////////////////////////////////////////////////////////////////////"}, {"sha": "9053376bdf24fa7df805fab6ea65ec993162424a", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/1b406afe23c17467f43a5c1bd83b4af1d55d08d9/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b406afe23c17467f43a5c1bd83b4af1d55d08d9/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=1b406afe23c17467f43a5c1bd83b4af1d55d08d9", "patch": "@@ -2974,21 +2974,21 @@ unsafe impl<'a, T> TrustedRandomAccess for IterMut<'a, T> {\n ///\n /// [`group_by`]: ../../std/primitive.slice.html#method.group_by\n /// [slices]: ../../std/primitive.slice.html\n-#[unstable(feature = \"slice_group_by\", issue = \"0\")]\n+#[unstable(feature = \"slice_group_by\", issue = \"none\")]\n #[derive(Debug)] // FIXME implement Debug to be more user friendly\n pub struct GroupBy<'a, T: 'a, P> {\n     slice: &'a [T],\n     predicate: P,\n }\n \n-#[unstable(feature = \"slice_group_by\", issue = \"0\")]\n+#[unstable(feature = \"slice_group_by\", issue = \"none\")]\n impl<'a, T: 'a, P> GroupBy<'a, T, P> {\n     pub(super) fn new(slice: &'a [T], predicate: P) -> Self {\n         GroupBy { slice, predicate }\n     }\n }\n \n-#[unstable(feature = \"slice_group_by\", issue = \"0\")]\n+#[unstable(feature = \"slice_group_by\", issue = \"none\")]\n impl<'a, T: 'a, P> Iterator for GroupBy<'a, T, P>\n where P: FnMut(&T, &T) -> bool,\n {\n@@ -3025,7 +3025,7 @@ where P: FnMut(&T, &T) -> bool,\n     }\n }\n \n-#[unstable(feature = \"slice_group_by\", issue = \"0\")]\n+#[unstable(feature = \"slice_group_by\", issue = \"none\")]\n impl<'a, T: 'a, P> DoubleEndedIterator for GroupBy<'a, T, P>\n where P: FnMut(&T, &T) -> bool,\n {\n@@ -3046,7 +3046,7 @@ where P: FnMut(&T, &T) -> bool,\n     }\n }\n \n-#[unstable(feature = \"slice_group_by\", issue = \"0\")]\n+#[unstable(feature = \"slice_group_by\", issue = \"none\")]\n impl<'a, T: 'a, P> FusedIterator for GroupBy<'a, T, P>\n where P: FnMut(&T, &T) -> bool,\n { }\n@@ -3058,21 +3058,21 @@ where P: FnMut(&T, &T) -> bool,\n ///\n /// [`group_by_mut`]: ../../std/primitive.slice.html#method.group_by_mut\n /// [slices]: ../../std/primitive.slice.html\n-#[unstable(feature = \"slice_group_by\", issue = \"0\")]\n+#[unstable(feature = \"slice_group_by\", issue = \"none\")]\n #[derive(Debug)] // FIXME implement Debug to be more user friendly\n pub struct GroupByMut<'a, T: 'a, P> {\n     slice: &'a mut [T],\n     predicate: P,\n }\n \n-#[unstable(feature = \"slice_group_by\", issue = \"0\")]\n+#[unstable(feature = \"slice_group_by\", issue = \"none\")]\n impl<'a, T: 'a, P> GroupByMut<'a, T, P> {\n     pub(super) fn new(slice: &'a mut [T], predicate: P) -> Self {\n         GroupByMut { slice, predicate }\n     }\n }\n \n-#[unstable(feature = \"slice_group_by\", issue = \"0\")]\n+#[unstable(feature = \"slice_group_by\", issue = \"none\")]\n impl<'a, T: 'a, P> Iterator for GroupByMut<'a, T, P>\n where P: FnMut(&T, &T) -> bool,\n {\n@@ -3110,7 +3110,7 @@ where P: FnMut(&T, &T) -> bool,\n     }\n }\n \n-#[unstable(feature = \"slice_group_by\", issue = \"0\")]\n+#[unstable(feature = \"slice_group_by\", issue = \"none\")]\n impl<'a, T: 'a, P> DoubleEndedIterator for GroupByMut<'a, T, P>\n where P: FnMut(&T, &T) -> bool,\n {"}, {"sha": "40f480fa85be3f78bf5052c34151604f60ede409", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b406afe23c17467f43a5c1bd83b4af1d55d08d9/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b406afe23c17467f43a5c1bd83b4af1d55d08d9/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=1b406afe23c17467f43a5c1bd83b4af1d55d08d9", "patch": "@@ -1228,7 +1228,7 @@ impl<T> [T] {\n     /// assert_eq!(iter.next(), Some(&[2, 2, 2][..]));\n     /// assert_eq!(iter.next(), None);\n     /// ```\n-    #[unstable(feature = \"slice_group_by\", issue = \"0\")]\n+    #[unstable(feature = \"slice_group_by\", issue = \"none\")]\n     #[inline]\n     pub fn group_by<F>(&self, pred: F) -> GroupBy<T, F>\n     where F: FnMut(&T, &T) -> bool\n@@ -1257,7 +1257,7 @@ impl<T> [T] {\n     /// assert_eq!(iter.next(), Some(&mut [2, 2, 2][..]));\n     /// assert_eq!(iter.next(), None);\n     /// ```\n-    #[unstable(feature = \"slice_group_by\", issue = \"0\")]\n+    #[unstable(feature = \"slice_group_by\", issue = \"none\")]\n     #[inline]\n     pub fn group_by_mut<F>(&mut self, pred: F) -> GroupByMut<T, F>\n     where F: FnMut(&T, &T) -> bool"}]}