{"sha": "c3d0fc23d4980f9408656c61bd71049f1bd56849", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZDBmYzIzZDQ5ODBmOTQwODY1NmM2MWJkNzEwNDlmMWJkNTY4NDk=", "commit": {"author": {"name": "David Creswick", "email": "dcrewi@gyrae.net", "date": "2013-09-07T01:47:54Z"}, "committer": {"name": "David Creswick", "email": "dcrewi@gyrae.net", "date": "2013-09-09T17:15:19Z"}, "message": "Implement bitwise operations on BigUint", "tree": {"sha": "38433bf8c76743a8d3050890d48c5d4426ea61b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38433bf8c76743a8d3050890d48c5d4426ea61b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3d0fc23d4980f9408656c61bd71049f1bd56849", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d0fc23d4980f9408656c61bd71049f1bd56849", "html_url": "https://github.com/rust-lang/rust/commit/c3d0fc23d4980f9408656c61bd71049f1bd56849", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3d0fc23d4980f9408656c61bd71049f1bd56849/comments", "author": {"login": "dcrewi", "id": 1852207, "node_id": "MDQ6VXNlcjE4NTIyMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1852207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcrewi", "html_url": "https://github.com/dcrewi", "followers_url": "https://api.github.com/users/dcrewi/followers", "following_url": "https://api.github.com/users/dcrewi/following{/other_user}", "gists_url": "https://api.github.com/users/dcrewi/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcrewi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcrewi/subscriptions", "organizations_url": "https://api.github.com/users/dcrewi/orgs", "repos_url": "https://api.github.com/users/dcrewi/repos", "events_url": "https://api.github.com/users/dcrewi/events{/privacy}", "received_events_url": "https://api.github.com/users/dcrewi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dcrewi", "id": 1852207, "node_id": "MDQ6VXNlcjE4NTIyMDc=", "avatar_url": "https://avatars.githubusercontent.com/u/1852207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dcrewi", "html_url": "https://github.com/dcrewi", "followers_url": "https://api.github.com/users/dcrewi/followers", "following_url": "https://api.github.com/users/dcrewi/following{/other_user}", "gists_url": "https://api.github.com/users/dcrewi/gists{/gist_id}", "starred_url": "https://api.github.com/users/dcrewi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dcrewi/subscriptions", "organizations_url": "https://api.github.com/users/dcrewi/orgs", "repos_url": "https://api.github.com/users/dcrewi/repos", "events_url": "https://api.github.com/users/dcrewi/events{/privacy}", "received_events_url": "https://api.github.com/users/dcrewi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d84a7b5ae3b3a820fb0a26292632856ceb959b3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d84a7b5ae3b3a820fb0a26292632856ceb959b3e", "html_url": "https://github.com/rust-lang/rust/commit/d84a7b5ae3b3a820fb0a26292632856ceb959b3e"}], "stats": {"total": 79, "additions": 79, "deletions": 0}, "files": [{"sha": "a9574f4103bb31bf3194e19bedb321a6543af7a2", "filename": "src/libextra/num/bigint.rs", "status": "modified", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/c3d0fc23d4980f9408656c61bd71049f1bd56849/src%2Flibextra%2Fnum%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3d0fc23d4980f9408656c61bd71049f1bd56849/src%2Flibextra%2Fnum%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnum%2Fbigint.rs?ref=c3d0fc23d4980f9408656c61bd71049f1bd56849", "patch": "@@ -153,6 +153,43 @@ impl Orderable for BigUint {\n     }\n }\n \n+impl BitAnd<BigUint, BigUint> for BigUint {\n+    fn bitand(&self, other: &BigUint) -> BigUint {\n+        let new_len = num::min(self.data.len(), other.data.len());\n+        let anded = do vec::from_fn(new_len) |i| {\n+            // i will never be less than the size of either data vector\n+            let ai = self.data[i];\n+            let bi = other.data[i];\n+            ai & bi\n+        };\n+        return BigUint::new(anded);\n+    }\n+}\n+\n+impl BitOr<BigUint, BigUint> for BigUint {\n+    fn bitor(&self, other: &BigUint) -> BigUint {\n+        let new_len = num::max(self.data.len(), other.data.len());\n+        let ored = do vec::from_fn(new_len) |i| {\n+            let ai = if i < self.data.len()  { self.data[i]  } else { 0 };\n+            let bi = if i < other.data.len() { other.data[i] } else { 0 };\n+            ai | bi\n+        };\n+        return BigUint::new(ored);\n+    }\n+}\n+\n+impl BitXor<BigUint, BigUint> for BigUint {\n+    fn bitxor(&self, other: &BigUint) -> BigUint {\n+        let new_len = num::max(self.data.len(), other.data.len());\n+        let xored = do vec::from_fn(new_len) |i| {\n+            let ai = if i < self.data.len()  { self.data[i]  } else { 0 };\n+            let bi = if i < other.data.len() { other.data[i] } else { 0 };\n+            ai ^ bi\n+        };\n+        return BigUint::new(xored);\n+    }\n+}\n+\n impl Shl<uint, BigUint> for BigUint {\n     #[inline]\n     fn shl(&self, rhs: &uint) -> BigUint {\n@@ -1166,6 +1203,48 @@ mod biguint_tests {\n         }\n     }\n \n+    #[test]\n+    fn test_bitand() {\n+        fn check(left: ~[BigDigit],\n+                 right: ~[BigDigit],\n+                 expected: ~[BigDigit]) {\n+            assert_eq!(BigUint::new(left) & BigUint::new(right),\n+                       BigUint::new(expected));\n+        }\n+        check(~[], ~[], ~[]);\n+        check(~[268, 482, 17],\n+              ~[964, 54],\n+              ~[260, 34]);\n+    }\n+\n+    #[test]\n+    fn test_bitor() {\n+        fn check(left: ~[BigDigit],\n+                 right: ~[BigDigit],\n+                 expected: ~[BigDigit]) {\n+            assert_eq!(BigUint::new(left) | BigUint::new(right),\n+                       BigUint::new(expected));\n+        }\n+        check(~[], ~[], ~[]);\n+        check(~[268, 482, 17],\n+              ~[964, 54],\n+              ~[972, 502, 17]);\n+    }\n+\n+    #[test]\n+    fn test_bitxor() {\n+        fn check(left: ~[BigDigit],\n+                 right: ~[BigDigit],\n+                 expected: ~[BigDigit]) {\n+            assert_eq!(BigUint::new(left) ^ BigUint::new(right),\n+                       BigUint::new(expected));\n+        }\n+        check(~[], ~[], ~[]);\n+        check(~[268, 482, 17],\n+              ~[964, 54],\n+              ~[712, 468, 17]);\n+    }\n+\n     #[test]\n     fn test_shl() {\n         fn check(s: &str, shift: uint, ans: &str) {"}]}