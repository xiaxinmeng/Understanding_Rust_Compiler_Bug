{"sha": "2ba883ce98eb608dc4338a6813432e1ca96370c6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiYTg4M2NlOThlYjYwOGRjNDMzOGE2ODEzNDMyZTFjYTk2MzcwYzY=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-03T23:20:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-02-03T23:20:05Z"}, "message": "Merge pull request #107 from canndrew/rename_map_hir\n\nTyCtxt's map renamed to hir", "tree": {"sha": "409c4f7b6bccaf18a3418a50fcd825ca14a7b4a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/409c4f7b6bccaf18a3418a50fcd825ca14a7b4a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2ba883ce98eb608dc4338a6813432e1ca96370c6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba883ce98eb608dc4338a6813432e1ca96370c6", "html_url": "https://github.com/rust-lang/rust/commit/2ba883ce98eb608dc4338a6813432e1ca96370c6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2ba883ce98eb608dc4338a6813432e1ca96370c6/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b490a4077cbb2d3c4038fecfd913a0049027d8e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/b490a4077cbb2d3c4038fecfd913a0049027d8e5", "html_url": "https://github.com/rust-lang/rust/commit/b490a4077cbb2d3c4038fecfd913a0049027d8e5"}, {"sha": "1752af689f57667173f844eafda93bfa86c98ba4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1752af689f57667173f844eafda93bfa86c98ba4", "html_url": "https://github.com/rust-lang/rust/commit/1752af689f57667173f844eafda93bfa86c98ba4"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "8ff1b418b1a4743c2b8b49a0e3668dcb2391f22d", "filename": "src/bin/miri.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2ba883ce98eb608dc4338a6813432e1ca96370c6/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba883ce98eb608dc4338a6813432e1ca96370c6/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=2ba883ce98eb608dc4338a6813432e1ca96370c6", "patch": "@@ -83,8 +83,8 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n             fn visit_item(&mut self, i: &'hir hir::Item) {\n                 if let hir::Item_::ItemFn(_, _, _, _, _, body_id) = i.node {\n                     if i.attrs.iter().any(|attr| attr.value.name == \"test\") {\n-                        let did = self.1.map.body_owner_def_id(body_id);\n-                        println!(\"running test: {}\", self.1.map.def_path(did).to_string(self.1));\n+                        let did = self.1.hir.body_owner_def_id(body_id);\n+                        println!(\"running test: {}\", self.1.hir.def_path(did).to_string(self.1));\n                         miri::eval_main(self.1, did, self.0);\n                         self.2.session.abort_if_errors();\n                     }\n@@ -96,7 +96,7 @@ fn after_analysis<'a, 'tcx>(state: &mut CompileState<'a, 'tcx>) {\n         state.hir_crate.unwrap().visit_all_item_likes(&mut Visitor(limits, tcx, state));\n     } else {\n         if let Some((entry_node_id, _)) = *state.session.entry_fn.borrow() {\n-            let entry_def_id = tcx.map.local_def_id(entry_node_id);\n+            let entry_def_id = tcx.hir.local_def_id(entry_node_id);\n             miri::eval_main(tcx, entry_def_id, limits);\n \n             state.session.abort_if_errors();"}, {"sha": "1cc9eb4bb4dac6a3b2610a7140f0809b2c20de09", "filename": "src/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2ba883ce98eb608dc4338a6813432e1ca96370c6/src%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2ba883ce98eb608dc4338a6813432e1ca96370c6/src%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstep.rs?ref=2ba883ce98eb608dc4338a6813432e1ca96370c6", "patch": "@@ -225,7 +225,7 @@ impl<'a, 'b, 'tcx> Visitor<'tcx> for ConstantExtractor<'a, 'b, 'tcx> {\n         if let mir::Lvalue::Static(def_id) = *lvalue {\n             let substs = self.ecx.tcx.intern_substs(&[]);\n             let span = self.span;\n-            if let Some(node_item) = self.ecx.tcx.map.get_if_local(def_id) {\n+            if let Some(node_item) = self.ecx.tcx.hir.get_if_local(def_id) {\n                 if let hir::map::Node::NodeItem(&hir::Item { ref node, .. }) = node_item {\n                     if let hir::ItemStatic(_, m, _) = *node {\n                         self.global_item(def_id, substs, span, m == hir::MutImmutable);"}]}