{"sha": "b29e5486331aa9d2610c818fcd10b4b63985f41f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyOWU1NDg2MzMxYWE5ZDI2MTBjODE4ZmNkMTBiNGI2Mzk4NWY0MWY=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-24T21:45:31Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2013-12-24T21:45:31Z"}, "message": "std::vec: clarify & examplify more docs.", "tree": {"sha": "558abd0e5c466758628b2017756c959327b22e86", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/558abd0e5c466758628b2017756c959327b22e86"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b29e5486331aa9d2610c818fcd10b4b63985f41f", "comment_count": 17, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b29e5486331aa9d2610c818fcd10b4b63985f41f", "html_url": "https://github.com/rust-lang/rust/commit/b29e5486331aa9d2610c818fcd10b4b63985f41f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b29e5486331aa9d2610c818fcd10b4b63985f41f/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc4e7077ad403aa68f00d621806a3fffa6ed28ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc4e7077ad403aa68f00d621806a3fffa6ed28ac", "html_url": "https://github.com/rust-lang/rust/commit/cc4e7077ad403aa68f00d621806a3fffa6ed28ac"}], "stats": {"total": 95, "additions": 79, "deletions": 16}, "files": [{"sha": "390bdd07994948a254c4013c51d82d4d603ed46e", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 79, "deletions": 16, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/b29e5486331aa9d2610c818fcd10b4b63985f41f/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b29e5486331aa9d2610c818fcd10b4b63985f41f/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=b29e5486331aa9d2610c818fcd10b4b63985f41f", "patch": "@@ -2143,26 +2143,69 @@ pub trait MutableVector<'a, T> {\n      */\n     fn mut_pop_ref(&mut self) -> &'a mut T;\n \n-    /**\n-     * Swaps two elements in a vector\n-     *\n-     * # Arguments\n-     *\n-     * * a - The index of the first element\n-     * * b - The index of the second element\n-     */\n+    /// Swaps two elements in a vector.\n+    ///\n+    /// Fails if `a` or `b` are out of bounds.\n+    ///\n+    /// # Arguments\n+    ///\n+    /// * a - The index of the first element\n+    /// * b - The index of the second element\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut v = [\"a\", \"b\", \"c\", \"d\"];\n+    /// v.swap(1, 3);\n+    /// assert_eq!(v, [\"a\", \"d\", \"c\", \"b\"]);\n+    /// ```\n     fn swap(self, a: uint, b: uint);\n \n-    /**\n-     * Divides one `&mut` into two. The first will\n-     * contain all indices from `0..mid` (excluding the index `mid`\n-     * itself) and the second will contain all indices from\n-     * `mid..len` (excluding the index `len` itself).\n-     */\n+\n+    /// Divides one `&mut` into two at an index.\n+    ///\n+    /// The first will contain all indices from `[0, mid)` (excluding\n+    /// the index `mid` itself) and the second will contain all\n+    /// indices from `[mid, len)` (excluding the index `len` itself).\n+    ///\n+    /// Fails if `mid > len`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut v = [1, 2, 3, 4, 5, 6];\n+    ///\n+    /// // scoped to restrict the lifetime of the borrows\n+    /// {\n+    ///    let (left, right) = v.mut_split_at(0);\n+    ///    assert_eq!(left, &mut []);\n+    ///    assert_eq!(right, &mut [1, 2, 3, 4, 5, 6]);\n+    /// }\n+    ///\n+    /// {\n+    ///     let (left, right) = v.mut_split_at(2);\n+    ///     assert_eq!(left, &mut [1, 2]);\n+    ///     assert_eq!(right, &mut [3, 4, 5, 6]);\n+    /// }\n+    ///\n+    /// {\n+    ///     let (left, right) = v.mut_split_at(6);\n+    ///     assert_eq!(left, &mut [1, 2, 3, 4, 5, 6]);\n+    ///     assert_eq!(right, &mut []);\n+    /// }\n+    /// ```\n     fn mut_split_at(self, mid: uint) -> (&'a mut [T],\n                                       &'a mut [T]);\n \n-    /// Reverse the order of elements in a vector, in place\n+    /// Reverse the order of elements in a vector, in place.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut v = [1, 2, 3];\n+    /// v.reverse();\n+    /// assert_eq!(v, [3, 2, 1]);\n+    /// ```\n     fn reverse(self);\n \n     /// Sort the vector, in place, using `compare` to compare\n@@ -2212,7 +2255,27 @@ pub trait MutableVector<'a, T> {\n     #[inline]\n     fn as_mut_ptr(self) -> *mut T;\n \n-    /// Unsafely sets the element in index to the value\n+    /// Unsafely sets the element in index to the value.\n+    ///\n+    /// This performs no bounds checks, and it is undefined behaviour\n+    /// if `index` is larger than the length of `self`. However, it\n+    /// does run the destructor at `index`. It is equivalent to\n+    /// `self[index] = val`.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// let mut v = ~[~\"foo\", ~\"bar\", ~\"baz\"];\n+    ///\n+    /// unsafe {\n+    ///     // `~\"baz\"` is deallocated.\n+    ///     v.unsafe_set(2, ~\"qux\");\n+    ///\n+    ///     // Out of bounds: could cause a crash, or overwriting\n+    ///     // other data, or something else.\n+    ///     // v.unsafe_set(10, ~\"oops\");\n+    /// }\n+    /// ```\n     unsafe fn unsafe_set(self, index: uint, val: T);\n \n     /// Unchecked vector index assignment.  Does not drop the"}]}