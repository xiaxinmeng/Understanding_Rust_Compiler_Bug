{"sha": "05d8f5fee7ceacb68e18a6c9c7fc4d15adc75b22", "node_id": "C_kwDOAAsO6NoAKDA1ZDhmNWZlZTdjZWFjYjY4ZTE4YTZjOWM3ZmM0ZDE1YWRjNzViMjI", "commit": {"author": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-21T12:57:09Z"}, "committer": {"name": "Amos Wenger", "email": "amoswenger@gmail.com", "date": "2022-07-21T12:57:09Z"}, "message": "Use a thread-local for the symbol interner (1/2)", "tree": {"sha": "24a15c7adf225b37caf9e5d67a83480c61ec6946", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24a15c7adf225b37caf9e5d67a83480c61ec6946"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05d8f5fee7ceacb68e18a6c9c7fc4d15adc75b22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05d8f5fee7ceacb68e18a6c9c7fc4d15adc75b22", "html_url": "https://github.com/rust-lang/rust/commit/05d8f5fee7ceacb68e18a6c9c7fc4d15adc75b22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05d8f5fee7ceacb68e18a6c9c7fc4d15adc75b22/comments", "author": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fasterthanlime", "id": 7998310, "node_id": "MDQ6VXNlcjc5OTgzMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/7998310?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fasterthanlime", "html_url": "https://github.com/fasterthanlime", "followers_url": "https://api.github.com/users/fasterthanlime/followers", "following_url": "https://api.github.com/users/fasterthanlime/following{/other_user}", "gists_url": "https://api.github.com/users/fasterthanlime/gists{/gist_id}", "starred_url": "https://api.github.com/users/fasterthanlime/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fasterthanlime/subscriptions", "organizations_url": "https://api.github.com/users/fasterthanlime/orgs", "repos_url": "https://api.github.com/users/fasterthanlime/repos", "events_url": "https://api.github.com/users/fasterthanlime/events{/privacy}", "received_events_url": "https://api.github.com/users/fasterthanlime/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30769598a406a30f05d4b8a72430824708bdc73f", "url": "https://api.github.com/repos/rust-lang/rust/commits/30769598a406a30f05d4b8a72430824708bdc73f", "html_url": "https://github.com/rust-lang/rust/commit/30769598a406a30f05d4b8a72430824708bdc73f"}], "stats": {"total": 50, "additions": 33, "deletions": 17}, "files": [{"sha": "0204617d5dfdafa18875e26519587844807196a9", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05d8f5fee7ceacb68e18a6c9c7fc4d15adc75b22/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/05d8f5fee7ceacb68e18a6c9c7fc4d15adc75b22/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=05d8f5fee7ceacb68e18a6c9c7fc4d15adc75b22", "patch": "@@ -1167,7 +1167,6 @@ dependencies = [\n  \"mbe\",\n  \"memmap2\",\n  \"object 0.29.0\",\n- \"once_cell\",\n  \"paths\",\n  \"proc-macro-api\",\n  \"proc-macro-test\","}, {"sha": "e39026ac70bfd52e4d78b7b6a08a85d6938306ac", "filename": "crates/proc-macro-srv/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05d8f5fee7ceacb68e18a6c9c7fc4d15adc75b22/crates%2Fproc-macro-srv%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/05d8f5fee7ceacb68e18a6c9c7fc4d15adc75b22/crates%2Fproc-macro-srv%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2FCargo.toml?ref=05d8f5fee7ceacb68e18a6c9c7fc4d15adc75b22", "patch": "@@ -24,7 +24,6 @@ tt = { path = \"../tt\", version = \"0.0.0\" }\n mbe = { path = \"../mbe\", version = \"0.0.0\" }\n paths = { path = \"../paths\", version = \"0.0.0\" }\n proc-macro-api = { path = \"../proc-macro-api\", version = \"0.0.0\" }\n-once_cell = \"1.13.0\"\n \n [dev-dependencies]\n expect-test = \"1.4.0\""}, {"sha": "066e0e26ac874e0c8ae2af5e280853e6b38bb3ce", "filename": "crates/proc-macro-srv/src/abis/abi_sysroot/ra_server.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/05d8f5fee7ceacb68e18a6c9c7fc4d15adc75b22/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8f5fee7ceacb68e18a6c9c7fc4d15adc75b22/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server.rs?ref=05d8f5fee7ceacb68e18a6c9c7fc4d15adc75b22", "patch": "@@ -83,7 +83,7 @@ impl server::FreeFunctions for RustAnalyzer {\n         s: &str,\n     ) -> Result<bridge::Literal<Self::Span, Self::Symbol>, ()> {\n         // FIXME: keep track of LitKind and Suffix\n-        let symbol = SYMBOL_INTERNER.lock().unwrap().intern(s);\n+        let symbol = ThreadLocalSymbolInterner::intern(s);\n         Ok(bridge::Literal {\n             kind: bridge::LitKind::Err,\n             symbol,\n@@ -124,18 +124,19 @@ impl server::TokenStream for RustAnalyzer {\n \n             bridge::TokenTree::Ident(ident) => {\n                 // FIXME: handle raw idents\n-                let text = SYMBOL_INTERNER.lock().unwrap().get(&ident.sym).clone();\n+                let text = ThreadLocalSymbolInterner::get_cloned(&ident.sym);\n                 let ident: tt::Ident = tt::Ident { text, id: ident.span };\n                 let leaf = tt::Leaf::from(ident);\n                 let tree = TokenTree::from(leaf);\n                 Self::TokenStream::from_iter(vec![tree])\n             }\n \n             bridge::TokenTree::Literal(literal) => {\n-                let symbol = SYMBOL_INTERNER.lock().unwrap().get(&literal.symbol).clone();\n+                // FIXME: remove unnecessary clones here\n+                let symbol = ThreadLocalSymbolInterner::get_cloned(&literal.symbol);\n \n                 let text: tt::SmolStr = if let Some(suffix) = literal.suffix {\n-                    let suffix = SYMBOL_INTERNER.lock().unwrap().get(&suffix).clone();\n+                    let suffix = ThreadLocalSymbolInterner::get_cloned(&suffix);\n                     format!(\"{symbol}{suffix}\").into()\n                 } else {\n                     symbol\n@@ -203,7 +204,7 @@ impl server::TokenStream for RustAnalyzer {\n             .map(|tree| match tree {\n                 tt::TokenTree::Leaf(tt::Leaf::Ident(ident)) => {\n                     bridge::TokenTree::Ident(bridge::Ident {\n-                        sym: SYMBOL_INTERNER.lock().unwrap().intern(&ident.text),\n+                        sym: ThreadLocalSymbolInterner::intern(&ident.text),\n                         // FIXME: handle raw idents\n                         is_raw: false,\n                         span: ident.id,\n@@ -213,7 +214,7 @@ impl server::TokenStream for RustAnalyzer {\n                     bridge::TokenTree::Literal(bridge::Literal {\n                         // FIXME: handle literal kinds\n                         kind: bridge::LitKind::Err,\n-                        symbol: SYMBOL_INTERNER.lock().unwrap().intern(&lit.text),\n+                        symbol: ThreadLocalSymbolInterner::intern(&lit.text),\n                         // FIXME: handle suffixes\n                         suffix: None,\n                         span: lit.id,\n@@ -407,11 +408,11 @@ impl server::Server for RustAnalyzer {\n     }\n \n     fn intern_symbol(ident: &str) -> Self::Symbol {\n-        SYMBOL_INTERNER.lock().unwrap().intern(&tt::SmolStr::from(ident))\n+        ThreadLocalSymbolInterner::intern(&tt::SmolStr::from(ident))\n     }\n \n     fn with_symbol_string(symbol: &Self::Symbol, f: impl FnOnce(&str)) {\n-        f(SYMBOL_INTERNER.lock().unwrap().get(symbol).as_str())\n+        ThreadLocalSymbolInterner::with(symbol, |s| f(s.as_str()))\n     }\n }\n "}, {"sha": "294ef76c24aa91d5cb0017cfdf345651e74b7d96", "filename": "crates/proc-macro-srv/src/abis/abi_sysroot/ra_server/symbol.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/05d8f5fee7ceacb68e18a6c9c7fc4d15adc75b22/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05d8f5fee7ceacb68e18a6c9c7fc4d15adc75b22/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-srv%2Fsrc%2Fabis%2Fabi_sysroot%2Fra_server%2Fsymbol.rs?ref=05d8f5fee7ceacb68e18a6c9c7fc4d15adc75b22", "patch": "@@ -1,23 +1,24 @@\n //! Symbol interner for proc-macro-srv\n \n-use once_cell::sync::Lazy;\n-use std::{collections::HashMap, sync::Mutex};\n+use std::{cell::RefCell, collections::HashMap};\n use tt::SmolStr;\n \n-pub(super) static SYMBOL_INTERNER: Lazy<Mutex<SymbolInterner>> = Lazy::new(|| Default::default());\n+thread_local! {\n+    static SYMBOL_INTERNER: RefCell<SymbolInterner> = Default::default();\n+}\n \n // ID for an interned symbol.\n #[derive(Hash, Eq, PartialEq, Copy, Clone)]\n pub struct Symbol(u32);\n \n #[derive(Default)]\n-pub(super) struct SymbolInterner {\n+struct SymbolInterner {\n     idents: HashMap<SmolStr, u32>,\n     ident_data: Vec<SmolStr>,\n }\n \n impl SymbolInterner {\n-    pub(super) fn intern(&mut self, data: &str) -> Symbol {\n+    fn intern(&mut self, data: &str) -> Symbol {\n         if let Some(index) = self.idents.get(data) {\n             return Symbol(*index);\n         }\n@@ -29,7 +30,23 @@ impl SymbolInterner {\n         Symbol(index)\n     }\n \n-    pub(super) fn get(&self, index: &Symbol) -> &SmolStr {\n-        &self.ident_data[index.0 as usize]\n+    fn get(&self, sym: &Symbol) -> &SmolStr {\n+        &self.ident_data[sym.0 as usize]\n+    }\n+}\n+\n+pub(super) struct ThreadLocalSymbolInterner;\n+\n+impl ThreadLocalSymbolInterner {\n+    pub(super) fn intern(data: &str) -> Symbol {\n+        SYMBOL_INTERNER.with(|i| i.borrow_mut().intern(data))\n+    }\n+\n+    pub(super) fn with<T>(sym: &Symbol, f: impl FnOnce(&SmolStr) -> T) -> T {\n+        SYMBOL_INTERNER.with(|i| f(i.borrow().get(sym)))\n+    }\n+\n+    pub(super) fn get_cloned(sym: &Symbol) -> SmolStr {\n+        Self::with(sym, |s| s.clone())\n     }\n }"}]}