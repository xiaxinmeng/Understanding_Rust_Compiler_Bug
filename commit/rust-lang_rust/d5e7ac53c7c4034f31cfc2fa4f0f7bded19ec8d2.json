{"sha": "d5e7ac53c7c4034f31cfc2fa4f0f7bded19ec8d2", "node_id": "C_kwDOAAsO6NoAKGQ1ZTdhYzUzYzdjNDAzNGYzMWNmYzJmYTRmMGY3YmRlZDE5ZWM4ZDI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-04-28T12:27:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-04-28T15:24:16Z"}, "message": "avoid duplicating TLS state between test std and realstd", "tree": {"sha": "18bce3c75c662e51a6e8202243d59161549a1011", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18bce3c75c662e51a6e8202243d59161549a1011"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5e7ac53c7c4034f31cfc2fa4f0f7bded19ec8d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5e7ac53c7c4034f31cfc2fa4f0f7bded19ec8d2", "html_url": "https://github.com/rust-lang/rust/commit/d5e7ac53c7c4034f31cfc2fa4f0f7bded19ec8d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5e7ac53c7c4034f31cfc2fa4f0f7bded19ec8d2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fce2290865f012391b8f3e581c3852a248031fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fce2290865f012391b8f3e581c3852a248031fa", "html_url": "https://github.com/rust-lang/rust/commit/2fce2290865f012391b8f3e581c3852a248031fa"}], "stats": {"total": 39, "additions": 22, "deletions": 17}, "files": [{"sha": "17c085cc92ccb462f76cac52860d88207aed687c", "filename": "library/std/src/sys/common/thread_local/mod.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d5e7ac53c7c4034f31cfc2fa4f0f7bded19ec8d2/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5e7ac53c7c4034f31cfc2fa4f0f7bded19ec8d2/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fmod.rs?ref=d5e7ac53c7c4034f31cfc2fa4f0f7bded19ec8d2", "patch": "@@ -1,5 +1,10 @@\n #![unstable(feature = \"thread_local_internals\", reason = \"should not be necessary\", issue = \"none\")]\n \n+// There are three thread-local implementations: \"static\", \"fast\", \"OS\".\n+// The \"OS\" thread local key type is accessed via platform-specific API calls and is slow, while the\n+// \"fast\" key type is accessed via code generated via LLVM, where TLS keys are set up by the linker.\n+// \"static\" is for single-threaded platforms where a global static is sufficient.\n+\n cfg_if::cfg_if! {\n     if #[cfg(all(target_family = \"wasm\", not(target_feature = \"atomics\")))] {\n         #[doc(hidden)]"}, {"sha": "6b01f6e44d38bbc169362f4b197a2dbfcf23ef62", "filename": "library/std/src/sys/common/thread_local/os_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5e7ac53c7c4034f31cfc2fa4f0f7bded19ec8d2/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5e7ac53c7c4034f31cfc2fa4f0f7bded19ec8d2/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Fthread_local%2Fos_local.rs?ref=d5e7ac53c7c4034f31cfc2fa4f0f7bded19ec8d2", "patch": "@@ -18,7 +18,7 @@ pub macro thread_local_inner {\n         ) -> $crate::option::Option<&'static $t> {\n             const INIT_EXPR: $t = $init;\n \n-                        // On platforms without `#[thread_local]` we fall back to the\n+            // On platforms without `#[thread_local]` we fall back to the\n             // same implementation as below for os thread locals.\n             #[inline]\n             const fn __init() -> $t { INIT_EXPR }"}, {"sha": "f712c872708ac97c2510cbb0d859c6c1222026a5", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d5e7ac53c7c4034f31cfc2fa4f0f7bded19ec8d2/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5e7ac53c7c4034f31cfc2fa4f0f7bded19ec8d2/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=d5e7ac53c7c4034f31cfc2fa4f0f7bded19ec8d2", "patch": "@@ -193,22 +193,22 @@ pub use scoped::{scope, Scope, ScopedJoinHandle};\n #[macro_use]\n mod local;\n \n-#[stable(feature = \"rust1\", since = \"1.0.0\")]\n-pub use self::local::{AccessError, LocalKey};\n-\n-// Provide the type used by the thread_local! macro to access TLS keys. This\n-// needs to be kept in sync with the macro itself (in `local.rs`).\n-// There are three types: \"static\", \"fast\", \"OS\". The \"OS\" thread local key\n-// type is accessed via platform-specific API calls and is slow, while the \"fast\"\n-// key type is accessed via code generated via LLVM, where TLS keys are set up\n-// by the elf linker. \"static\" is for single-threaded platforms where a global\n-// static is sufficient.\n-\n-// Implementation details used by the thread_local!{} macro.\n-#[doc(hidden)]\n-#[unstable(feature = \"thread_local_internals\", issue = \"none\")]\n-pub mod local_impl {\n-    pub use crate::sys::common::thread_local::{thread_local_inner, Key};\n+cfg_if::cfg_if! {\n+    if #[cfg(test)] {\n+        // Avoid duplicating the global state assoicated with thread-locals between this crate and\n+        // realstd. Miri relies on this.\n+        pub use realstd::thread::{local_impl, AccessError, LocalKey};\n+    } else {\n+        #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+        pub use self::local::{AccessError, LocalKey};\n+\n+        // Implementation details used by the thread_local!{} macro.\n+        #[doc(hidden)]\n+        #[unstable(feature = \"thread_local_internals\", issue = \"none\")]\n+        pub mod local_impl {\n+            pub use crate::sys::common::thread_local::{thread_local_inner, Key};\n+        }\n+    }\n }\n \n ////////////////////////////////////////////////////////////////////////////////"}]}