{"sha": "310c97b6ba7e6b8d4e3e7f337db0cff97f45f5c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMxMGM5N2I2YmE3ZTZiOGQ0ZTNlN2YzMzdkYjBjZmY5N2Y0NWY1YzA=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-07-04T21:46:04Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2020-07-04T21:46:04Z"}, "message": "Fix caching issue when building tools.", "tree": {"sha": "335d865a3c2132b1add0a1a73027e7455340f10c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/335d865a3c2132b1add0a1a73027e7455340f10c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/310c97b6ba7e6b8d4e3e7f337db0cff97f45f5c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/310c97b6ba7e6b8d4e3e7f337db0cff97f45f5c0", "html_url": "https://github.com/rust-lang/rust/commit/310c97b6ba7e6b8d4e3e7f337db0cff97f45f5c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/310c97b6ba7e6b8d4e3e7f337db0cff97f45f5c0/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939", "html_url": "https://github.com/rust-lang/rust/commit/0cd7ff7ddfb75a38dca81ad3e76b1e984129e939"}], "stats": {"total": 22, "additions": 18, "deletions": 4}, "files": [{"sha": "fd36cd9bd8bebf7d7b9744113df3b6ec6f93fc6e", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/310c97b6ba7e6b8d4e3e7f337db0cff97f45f5c0/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/310c97b6ba7e6b8d4e3e7f337db0cff97f45f5c0/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=310c97b6ba7e6b8d4e3e7f337db0cff97f45f5c0", "patch": "@@ -76,6 +76,10 @@ fn main() {\n         cmd.env(\"RUST_BACKTRACE\", \"1\");\n     }\n \n+    if let Ok(lint_flags) = env::var(\"RUSTC_LINT_FLAGS\") {\n+        cmd.args(lint_flags.split_whitespace());\n+    }\n+\n     if target.is_some() {\n         // The stage0 compiler has a special sysroot distinct from what we\n         // actually downloaded, so we just always pass the `--sysroot` option,"}, {"sha": "557fb1aa550a5862b70910fd697b2978c3595d58", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/310c97b6ba7e6b8d4e3e7f337db0cff97f45f5c0/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/310c97b6ba7e6b8d4e3e7f337db0cff97f45f5c0/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=310c97b6ba7e6b8d4e3e7f337db0cff97f45f5c0", "patch": "@@ -1130,22 +1130,32 @@ impl<'a> Builder<'a> {\n         cargo.env(\"RUSTC_VERBOSE\", self.verbosity.to_string());\n \n         if source_type == SourceType::InTree {\n+            let mut lint_flags = Vec::new();\n             // When extending this list, add the new lints to the RUSTFLAGS of the\n             // build_bootstrap function of src/bootstrap/bootstrap.py as well as\n             // some code doesn't go through this `rustc` wrapper.\n-            rustflags.arg(\"-Wrust_2018_idioms\");\n-            rustflags.arg(\"-Wunused_lifetimes\");\n+            lint_flags.push(\"-Wrust_2018_idioms\");\n+            lint_flags.push(\"-Wunused_lifetimes\");\n \n             if self.config.deny_warnings {\n-                rustflags.arg(\"-Dwarnings\");\n+                lint_flags.push(\"-Dwarnings\");\n             }\n \n             // FIXME(#58633) hide \"unused attribute\" errors in incremental\n             // builds of the standard library, as the underlying checks are\n             // not yet properly integrated with incremental recompilation.\n             if mode == Mode::Std && compiler.stage == 0 && self.config.incremental {\n-                rustflags.arg(\"-Aunused-attributes\");\n+                lint_flags.push(\"-Aunused-attributes\");\n             }\n+            // This does not use RUSTFLAGS due to caching issues with Cargo.\n+            // Clippy is treated as an \"in tree\" tool, but shares the same\n+            // cache as other \"submodule\" tools. With these options set in\n+            // RUSTFLAGS, that causes *every* shared dependency to be rebuilt.\n+            // By injecting this into the rustc wrapper, this circumvents\n+            // Cargo's fingerprint detection. This is fine because lint flags\n+            // are always ignored in dependencies. Eventually this should be\n+            // fixed via better support from Cargo.\n+            cargo.env(\"RUSTC_LINT_FLAGS\", lint_flags.join(\" \"));\n         }\n \n         if let Mode::Rustc | Mode::Codegen = mode {"}]}