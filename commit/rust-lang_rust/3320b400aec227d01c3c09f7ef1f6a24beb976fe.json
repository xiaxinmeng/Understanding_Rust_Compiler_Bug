{"sha": "3320b400aec227d01c3c09f7ef1f6a24beb976fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzMjBiNDAwYWVjMjI3ZDAxYzNjMDlmN2VmMWY2YTI0YmViOTc2ZmU=", "commit": {"author": {"name": "David Wood", "email": "devel@dtwood.uk", "date": "2017-12-24T12:01:59Z"}, "committer": {"name": "David Wood", "email": "devel@dtwood.uk", "date": "2017-12-24T12:01:59Z"}, "message": "Merge branch 'master' of https://github.com/rust-lang-nursery/rustfmt", "tree": {"sha": "f81655cf1692df04fa455750fe7db85ef862ebbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f81655cf1692df04fa455750fe7db85ef862ebbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3320b400aec227d01c3c09f7ef1f6a24beb976fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3320b400aec227d01c3c09f7ef1f6a24beb976fe", "html_url": "https://github.com/rust-lang/rust/commit/3320b400aec227d01c3c09f7ef1f6a24beb976fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3320b400aec227d01c3c09f7ef1f6a24beb976fe/comments", "author": {"login": "dtwood", "id": 1207240, "node_id": "MDQ6VXNlcjEyMDcyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1207240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtwood", "html_url": "https://github.com/dtwood", "followers_url": "https://api.github.com/users/dtwood/followers", "following_url": "https://api.github.com/users/dtwood/following{/other_user}", "gists_url": "https://api.github.com/users/dtwood/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtwood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtwood/subscriptions", "organizations_url": "https://api.github.com/users/dtwood/orgs", "repos_url": "https://api.github.com/users/dtwood/repos", "events_url": "https://api.github.com/users/dtwood/events{/privacy}", "received_events_url": "https://api.github.com/users/dtwood/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dtwood", "id": 1207240, "node_id": "MDQ6VXNlcjEyMDcyNDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1207240?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dtwood", "html_url": "https://github.com/dtwood", "followers_url": "https://api.github.com/users/dtwood/followers", "following_url": "https://api.github.com/users/dtwood/following{/other_user}", "gists_url": "https://api.github.com/users/dtwood/gists{/gist_id}", "starred_url": "https://api.github.com/users/dtwood/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dtwood/subscriptions", "organizations_url": "https://api.github.com/users/dtwood/orgs", "repos_url": "https://api.github.com/users/dtwood/repos", "events_url": "https://api.github.com/users/dtwood/events{/privacy}", "received_events_url": "https://api.github.com/users/dtwood/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef8b2efd135c79ddabcb707b06dabc1af08b7bed", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef8b2efd135c79ddabcb707b06dabc1af08b7bed", "html_url": "https://github.com/rust-lang/rust/commit/ef8b2efd135c79ddabcb707b06dabc1af08b7bed"}, {"sha": "939a6c58202f775a63e46fbde4e0d6b3b04cf8aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/939a6c58202f775a63e46fbde4e0d6b3b04cf8aa", "html_url": "https://github.com/rust-lang/rust/commit/939a6c58202f775a63e46fbde4e0d6b3b04cf8aa"}], "stats": {"total": 147, "additions": 57, "deletions": 90}, "files": [{"sha": "86fbafbef8c9ce7176f432f043316f5373d572a6", "filename": "CHANGELOG.md", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3320b400aec227d01c3c09f7ef1f6a24beb976fe/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/3320b400aec227d01c3c09f7ef1f6a24beb976fe/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=3320b400aec227d01c3c09f7ef1f6a24beb976fe", "patch": "@@ -2,6 +2,16 @@\n \n ## [Unreleased]\n \n+## [0.3.4] 2017-12-23\n+\n+### Added\n+\n+- Add `--version` flag to `cargo-fmt`, allow `carfo fmt --version`.\n+\n+### Fixed\n+\n+- Rustup to `rustc 1.24.0-nightly (5165ee9e2 2017-12-22)`.\n+\n ## [0.3.3] 2017-12-22\n \n ### Added"}, {"sha": "87d2529fe24c8522639739707232dff539520e01", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3320b400aec227d01c3c09f7ef1f6a24beb976fe/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3320b400aec227d01c3c09f7ef1f6a24beb976fe/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3320b400aec227d01c3c09f7ef1f6a24beb976fe", "patch": "@@ -31,7 +31,7 @@ dependencies = [\n \n [[package]]\n name = \"cargo_metadata\"\n-version = \"0.3.3\"\n+version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -172,9 +172,9 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"rustfmt-nightly\"\n-version = \"0.3.3\"\n+version = \"0.3.4\"\n dependencies = [\n- \"cargo_metadata 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargo_metadata 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"derive-new 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -327,7 +327,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum aho-corasick 0.6.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d6531d44de723825aa81398a6415283229725a00fa30713812ab9323faa82fc4\"\n \"checksum backtrace 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8709cc7ec06f6f0ae6c2c7e12f6ed41540781f72b488d83734978295ceae182e\"\n \"checksum backtrace-sys 0.1.16 (registry+https://github.com/rust-lang/crates.io-index)\" = \"44585761d6161b0f57afc49482ab6bd067e4edef48c12a152c237eb0203f7661\"\n-\"checksum cargo_metadata 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f56ec3e469bca7c276f2eea015aa05c5e381356febdbb0683c2580189604537\"\n+\"checksum cargo_metadata 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"20d6fb2b5574726329c85cdba0df0347fddfec3cf9c8b588f9931708280f5643\"\n \"checksum cc 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9b13a57efd6b30ecd6598ebdb302cca617930b5470647570468a65d12ef9719\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n \"checksum dbghelp-sys 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"97590ba53bcb8ac28279161ca943a924d1fd4a8fb3fa63302591647c4fc5b850\""}, {"sha": "a0f974c661443cbc1898f977b9c8d8331eea2321", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3320b400aec227d01c3c09f7ef1f6a24beb976fe/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3320b400aec227d01c3c09f7ef1f6a24beb976fe/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=3320b400aec227d01c3c09f7ef1f6a24beb976fe", "patch": "@@ -1,7 +1,7 @@\n [package]\n \n name = \"rustfmt-nightly\"\n-version = \"0.3.3\"\n+version = \"0.3.4\"\n authors = [\"Nicholas Cameron <ncameron@mozilla.com>\", \"The Rustfmt developers\"]\n description = \"Tool to find and fix Rust formatting issues\"\n repository = \"https://github.com/rust-lang-nursery/rustfmt\"\n@@ -43,7 +43,7 @@ log = \"0.3\"\n env_logger = \"0.4\"\n getopts = \"0.2\"\n derive-new = \"0.5\"\n-cargo_metadata = \"0.3\"\n+cargo_metadata = \"0.4\"\n \n [target.'cfg(unix)'.dependencies]\n libc = \"0.2.11\""}, {"sha": "270ed1446d6b0c1e07774454f3350a1f17d171b0", "filename": "src/bin/cargo-fmt.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fbin%2Fcargo-fmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fbin%2Fcargo-fmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fcargo-fmt.rs?ref=3320b400aec227d01c3c09f7ef1f6a24beb976fe", "patch": "@@ -252,24 +252,13 @@ fn get_targets_root_only(targets: &mut HashSet<Target>) -> Result<(), io::Error>\n \n     for package in metadata.packages {\n         for target in package.targets {\n-            if is_target_workspace_members(&target.name, &metadata.workspace_members) {\n-                targets.insert(Target::from_target(&target));\n-            }\n+            targets.insert(Target::from_target(&target));\n         }\n     }\n \n     Ok(())\n }\n \n-fn is_target_workspace_members(target: &str, workspace_members: &[String]) -> bool {\n-    workspace_members.iter().any(|member| {\n-        member\n-            .split_whitespace()\n-            .nth(0)\n-            .map_or(false, |name| name == target)\n-    })\n-}\n-\n fn get_targets_recursive(\n     manifest_path: Option<&Path>,\n     mut targets: &mut HashSet<Target>,"}, {"sha": "383e7077d660d3997495db66fbbde3b6cec54bd6", "filename": "src/chains.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=3320b400aec227d01c3c09f7ef1f6a24beb976fe", "patch": "@@ -59,11 +59,11 @@\n //!            .qux\n //! ```\n \n-use shape::Shape;\n use config::IndentStyle;\n use expr::rewrite_call;\n use macros::convert_try_mac;\n use rewrite::{Rewrite, RewriteContext};\n+use shape::Shape;\n use utils::{first_line_width, last_line_extendable, last_line_width, mk_sp,\n             trimmed_last_line_width, wrap_str};\n "}, {"sha": "f63242f635540102530a9e9137eb3c6b6a05ba38", "filename": "src/closures.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fclosures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fclosures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fclosures.rs?ref=3320b400aec227d01c3c09f7ef1f6a24beb976fe", "patch": "@@ -135,6 +135,7 @@ fn rewrite_closure_with_block(\n         id: ast::NodeId::new(0),\n         rules: ast::BlockCheckMode::Default,\n         span: body.span,\n+        recovered: false,\n     };\n     let block = ::expr::rewrite_block_with_visitor(context, \"\", &block, shape, false)?;\n     Some(format!(\"{} {}\", prefix, block))"}, {"sha": "bdf39ed6a2c05486775626d6ad39a18afa82b4d2", "filename": "src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=3320b400aec227d01c3c09f7ef1f6a24beb976fe", "patch": "@@ -17,9 +17,9 @@ use std::fs::File;\n use std::io::{Error, ErrorKind, Read};\n use std::path::{Path, PathBuf};\n \n+use Summary;\n use file_lines::FileLines;\n use lists::{ListTactic, SeparatorPlace, SeparatorTactic};\n-use Summary;\n \n /// Check if we're in a nightly build.\n ///"}, {"sha": "2d4b731a69d7425d88543df34e89da9e2bc5497d", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=3320b400aec227d01c3c09f7ef1f6a24beb976fe", "patch": "@@ -8,14 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::cmp::min;\n use std::borrow::Cow;\n+use std::cmp::min;\n use std::iter::{repeat, ExactSizeIterator};\n \n use syntax::{ast, ptr};\n use syntax::codemap::{BytePos, CodeMap, Span};\n \n-use spanned::Spanned;\n use chains::rewrite_chain;\n use closures;\n use codemap::{LineRangeUtils, SpanUtils};\n@@ -29,6 +28,7 @@ use macros::{rewrite_macro, MacroArg, MacroPosition};\n use patterns::{can_be_overflowed_pat, TuplePatField};\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n+use spanned::Spanned;\n use string::{rewrite_string, StringFormat};\n use types::{can_be_overflowed_type, rewrite_path, PathContext};\n use utils::{colon_spaces, contains_skip, extra_offset, first_line_width, inner_attributes,"}, {"sha": "81f950cfb9b504be4dd42bbe0315bd2db9d71077", "filename": "src/filemap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Ffilemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Ffilemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffilemap.rs?ref=3320b400aec227d01c3c09f7ef1f6a24beb976fe", "patch": "@@ -120,7 +120,7 @@ where\n     match config.write_mode() {\n         WriteMode::Replace => {\n             let filename = filename_to_path();\n-            if let Ok((ori, fmt)) = source_and_formatted_text(text, &filename, config) {\n+            if let Ok((ori, fmt)) = source_and_formatted_text(text, filename, config) {\n                 if fmt != ori {\n                     // Do a little dance to make writing safer - write to a temp file\n                     // rename the original to a .bk, then rename the temp file to the\n@@ -141,7 +141,7 @@ where\n         WriteMode::Overwrite => {\n             // Write text directly over original file if there is a diff.\n             let filename = filename_to_path();\n-            let (source, formatted) = source_and_formatted_text(text, &filename, config)?;\n+            let (source, formatted) = source_and_formatted_text(text, filename, config)?;\n             if source != formatted {\n                 let file = File::create(filename)?;\n                 write_system_newlines(file, text, config)?;\n@@ -156,7 +156,7 @@ where\n         }\n         WriteMode::Diff => {\n             let filename = filename_to_path();\n-            if let Ok((ori, fmt)) = source_and_formatted_text(text, &filename, config) {\n+            if let Ok((ori, fmt)) = source_and_formatted_text(text, filename, config) {\n                 let mismatch = make_diff(&ori, &fmt, 3);\n                 let has_diff = !mismatch.is_empty();\n                 print_diff(\n@@ -169,7 +169,7 @@ where\n         }\n         WriteMode::Checkstyle => {\n             let filename = filename_to_path();\n-            let diff = create_diff(&filename, text, config)?;\n+            let diff = create_diff(filename, text, config)?;\n             output_checkstyle_file(out, filename, diff)?;\n         }\n     }"}, {"sha": "dac748af9b1ea8b8d6390c637d4d62eedf5c7965", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=3320b400aec227d01c3c09f7ef1f6a24beb976fe", "patch": "@@ -13,14 +13,14 @@ use std::cmp::Ordering;\n use syntax::ast;\n use syntax::codemap::{BytePos, Span};\n \n-use spanned::Spanned;\n use codemap::SpanUtils;\n use comment::combine_strs_with_missing_comments;\n use config::IndentStyle;\n use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, ListFormatting,\n             ListItem, Separator, SeparatorPlace, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n+use spanned::Spanned;\n use types::{rewrite_path, PathContext};\n use utils::{format_visibility, mk_sp};\n use visitor::{rewrite_extern_crate, FmtVisitor};"}, {"sha": "d09d95699b7d7e04e74c26f465341ab2817bd89c", "filename": "src/items.rs", "status": "modified", "additions": 15, "deletions": 44, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=3320b400aec227d01c3c09f7ef1f6a24beb976fe", "patch": "@@ -18,7 +18,6 @@ use syntax::ast::{CrateSugar, ImplItem};\n use syntax::codemap::{BytePos, Span};\n use syntax::visit;\n \n-use spanned::Spanned;\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{combine_strs_with_missing_comments, contains_comment, recover_comment_removed,\n               recover_missing_comment_in_span, rewrite_missing_comment, FindUncommented};\n@@ -29,10 +28,11 @@ use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, L\n             ListItem, ListTactic, Separator, SeparatorPlace, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n+use spanned::Spanned;\n use types::join_bounds;\n-use utils::{colon_spaces, contains_skip, end_typaram, first_line_width, format_abi,\n-            format_constness, format_defaultness, format_mutability, format_unsafety,\n-            format_visibility, is_attributes_extendable, last_line_contains_single_line_comment,\n+use utils::{colon_spaces, contains_skip, first_line_width, format_abi, format_constness,\n+            format_defaultness, format_mutability, format_unsafety, format_visibility,\n+            is_attributes_extendable, last_line_contains_single_line_comment,\n             last_line_used_width, last_line_width, mk_sp, semicolon_for_expr, starts_with_newline,\n             stmt_expr, trim_newlines, trimmed_last_line_width};\n use vertical::rewrite_with_alignment;\n@@ -1871,12 +1871,8 @@ fn rewrite_fn_base(\n         .generics\n         .params\n         .iter()\n-        .filter_map(|p| match p {\n-            &ast::GenericParam::Type(ref t) => Some(t),\n-            _ => None,\n-        })\n         .last()\n-        .map_or(lo_after_visibility, |tp| end_typaram(tp));\n+        .map_or(lo_after_visibility, |param| param.span().hi());\n     let args_end = if fd.inputs.is_empty() {\n         context\n             .codemap\n@@ -2346,47 +2342,13 @@ fn rewrite_generics_inner(\n     // FIXME: convert bounds to where clauses where they get too big or if\n     // there is a where clause at all.\n \n-    // Wrapper type\n-    enum GenericsArg<'a> {\n-        Lifetime(&'a ast::LifetimeDef),\n-        TyParam(&'a ast::TyParam),\n-    }\n-    impl<'a> Rewrite for GenericsArg<'a> {\n-        fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-            match *self {\n-                GenericsArg::Lifetime(lifetime) => lifetime.rewrite(context, shape),\n-                GenericsArg::TyParam(ty) => ty.rewrite(context, shape),\n-            }\n-        }\n-    }\n-    impl<'a> Spanned for GenericsArg<'a> {\n-        fn span(&self) -> Span {\n-            match *self {\n-                GenericsArg::Lifetime(lifetime) => lifetime.span(),\n-                GenericsArg::TyParam(ty) => ty.span(),\n-            }\n-        }\n-    }\n-\n     if generics.params.is_empty() {\n         return Some(String::new());\n     }\n \n-    let generics_args = generics\n-        .params\n-        .iter()\n-        .filter_map(|p| match p {\n-            &ast::GenericParam::Lifetime(ref l) => Some(l),\n-            _ => None,\n-        })\n-        .map(|lt| GenericsArg::Lifetime(lt))\n-        .chain(generics.params.iter().filter_map(|ty| match ty {\n-            &ast::GenericParam::Type(ref ty) => Some(GenericsArg::TyParam(ty)),\n-            _ => None,\n-        }));\n     let items = itemize_list(\n         context.codemap,\n-        generics_args,\n+        generics.params.iter(),\n         \">\",\n         \",\",\n         |arg| arg.span().lo(),\n@@ -2868,3 +2830,12 @@ impl Rewrite for ast::ForeignItem {\n         )\n     }\n }\n+\n+impl Rewrite for ast::GenericParam {\n+    fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n+        match *self {\n+            ast::GenericParam::Lifetime(ref lifetime_def) => lifetime_def.rewrite(context, shape),\n+            ast::GenericParam::Type(ref ty) => ty.rewrite(context, shape),\n+        }\n+    }\n+}"}, {"sha": "0f439910324e997429af6bb1a499b1426a7b8119", "filename": "src/modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=3320b400aec227d01c3c09f7ef1f6a24beb976fe", "patch": "@@ -9,8 +9,8 @@\n // except according to those terms.\n \n use std::collections::BTreeMap;\n-use std::path::{Path, PathBuf};\n use std::io;\n+use std::path::{Path, PathBuf};\n \n use syntax::ast;\n use syntax::codemap::{self, FileName};"}, {"sha": "f877239f51893535b381021c78208204c0bba779", "filename": "src/patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=3320b400aec227d01c3c09f7ef1f6a24beb976fe", "patch": "@@ -12,7 +12,6 @@ use syntax::ast::{self, BindingMode, FieldPat, Pat, PatKind, RangeEnd, RangeSynt\n use syntax::codemap::{self, BytePos, Span};\n use syntax::ptr;\n \n-use spanned::Spanned;\n use codemap::SpanUtils;\n use comment::FindUncommented;\n use expr::{can_be_overflowed_expr, rewrite_call_inner, rewrite_pair, rewrite_unary_prefix,\n@@ -22,6 +21,7 @@ use lists::{itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_sh\n use macros::{rewrite_macro, MacroPosition};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n+use spanned::Spanned;\n use types::{rewrite_path, PathContext};\n use utils::{format_mutability, mk_sp};\n "}, {"sha": "eb36a1174289d506aa5e5819b29257a56ecb7142", "filename": "src/spanned.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=3320b400aec227d01c3c09f7ef1f6a24beb976fe", "patch": "@@ -105,6 +105,15 @@ impl Spanned for ast::Arg {\n     }\n }\n \n+impl Spanned for ast::GenericParam {\n+    fn span(&self) -> Span {\n+        match *self {\n+            ast::GenericParam::Lifetime(ref lifetime_def) => lifetime_def.span(),\n+            ast::GenericParam::Type(ref ty) => ty.span(),\n+        }\n+    }\n+}\n+\n impl Spanned for ast::StructField {\n     fn span(&self) -> Span {\n         span_with_attrs_lo_hi!(self, self.span.lo(), self.ty.span.hi())"}, {"sha": "77dffd3cd89d0b6d3ec0cff406a2230d2f01f70a", "filename": "src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=3320b400aec227d01c3c09f7ef1f6a24beb976fe", "patch": "@@ -16,7 +16,6 @@ use syntax::codemap::{self, BytePos, Span};\n use syntax::print::pprust;\n use syntax::symbol::keywords;\n \n-use spanned::Spanned;\n use codemap::SpanUtils;\n use config::{IndentStyle, TypeDensity};\n use expr::{rewrite_pair, rewrite_tuple, rewrite_unary_prefix, wrap_args_with_parens, PairParts};\n@@ -26,6 +25,7 @@ use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTac\n use macros::{rewrite_macro, MacroPosition};\n use rewrite::{Rewrite, RewriteContext};\n use shape::Shape;\n+use spanned::Spanned;\n use utils::{colon_spaces, extra_offset, first_line_width, format_abi, format_mutability,\n             last_line_width, mk_sp};\n "}, {"sha": "1bad8aecdf416449a27ce0ffa11ddf7c7530d4dc", "filename": "src/utils.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=3320b400aec227d01c3c09f7ef1f6a24beb976fe", "patch": "@@ -213,19 +213,6 @@ pub fn contains_skip(attrs: &[Attribute]) -> bool {\n         .any(|a| a.meta().map_or(false, |a| is_skip(&a)))\n }\n \n-// Find the end of a TyParam\n-#[inline]\n-pub fn end_typaram(typaram: &ast::TyParam) -> BytePos {\n-    typaram\n-        .bounds\n-        .last()\n-        .map_or(typaram.span, |bound| match *bound {\n-            ast::RegionTyParamBound(ref lt) => lt.span,\n-            ast::TraitTyParamBound(ref prt, _) => prt.span,\n-        })\n-        .hi()\n-}\n-\n #[inline]\n pub fn semicolon_for_expr(context: &RewriteContext, expr: &ast::Expr) -> bool {\n     match expr.node {"}, {"sha": "9644f76cca425f1bdb37934bf93bb1a159069f25", "filename": "src/vertical.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=3320b400aec227d01c3c09f7ef1f6a24beb976fe", "patch": "@@ -15,7 +15,6 @@ use std::cmp;\n use syntax::ast;\n use syntax::codemap::{BytePos, Span};\n \n-use spanned::Spanned;\n use codemap::SpanUtils;\n use comment::{combine_strs_with_missing_comments, contains_comment};\n use expr::rewrite_field;\n@@ -24,6 +23,7 @@ use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListTac\n             SeparatorPlace};\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n+use spanned::Spanned;\n use utils::{contains_skip, is_attributes_extendable, mk_sp};\n \n pub trait AlignedItem {"}, {"sha": "095f5c6865b103e112f0c2717a5e3b2648bb9709", "filename": "src/visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3320b400aec227d01c3c09f7ef1f6a24beb976fe/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=3320b400aec227d01c3c09f7ef1f6a24beb976fe", "patch": "@@ -15,13 +15,12 @@ use syntax::attr::HasAttrs;\n use syntax::codemap::{self, BytePos, CodeMap, Pos, Span};\n use syntax::parse::ParseSess;\n \n-use expr::rewrite_literal;\n-use spanned::Spanned;\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{combine_strs_with_missing_comments, contains_comment, remove_trailing_white_spaces,\n               CodeCharKind, CommentCodeSlices, FindUncommented};\n use comment::rewrite_comment;\n use config::{BraceStyle, Config};\n+use expr::rewrite_literal;\n use items::{format_impl, format_trait, format_trait_alias, rewrite_associated_impl_type,\n             rewrite_associated_type, rewrite_type_alias, FnSig, StaticParts, StructParts};\n use lists::{itemize_list, write_list, DefinitiveListTactic, ListFormatting, SeparatorPlace,\n@@ -30,6 +29,7 @@ use macros::{rewrite_macro, MacroPosition};\n use regex::Regex;\n use rewrite::{Rewrite, RewriteContext};\n use shape::{Indent, Shape};\n+use spanned::Spanned;\n use utils::{self, contains_skip, count_newlines, inner_attributes, mk_sp, ptr_vec_to_ref_vec};\n \n fn is_use_item(item: &ast::Item) -> bool {"}]}