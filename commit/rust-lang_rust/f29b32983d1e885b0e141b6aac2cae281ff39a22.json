{"sha": "f29b32983d1e885b0e141b6aac2cae281ff39a22", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyOWIzMjk4M2QxZTg4NWIwZTE0MWI2YWFjMmNhZTI4MWZmMzlhMjI=", "commit": {"author": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2021-01-22T17:55:37Z"}, "committer": {"name": "D\u00e1niel Buga", "email": "bugadani@gmail.com", "date": "2021-01-22T17:55:37Z"}, "message": "Fix formatting", "tree": {"sha": "a34019d7b874d2fdbcb253566c6e27616022fbf6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a34019d7b874d2fdbcb253566c6e27616022fbf6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f29b32983d1e885b0e141b6aac2cae281ff39a22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f29b32983d1e885b0e141b6aac2cae281ff39a22", "html_url": "https://github.com/rust-lang/rust/commit/f29b32983d1e885b0e141b6aac2cae281ff39a22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f29b32983d1e885b0e141b6aac2cae281ff39a22/comments", "author": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bugadani", "id": 977627, "node_id": "MDQ6VXNlcjk3NzYyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/977627?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bugadani", "html_url": "https://github.com/bugadani", "followers_url": "https://api.github.com/users/bugadani/followers", "following_url": "https://api.github.com/users/bugadani/following{/other_user}", "gists_url": "https://api.github.com/users/bugadani/gists{/gist_id}", "starred_url": "https://api.github.com/users/bugadani/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bugadani/subscriptions", "organizations_url": "https://api.github.com/users/bugadani/orgs", "repos_url": "https://api.github.com/users/bugadani/repos", "events_url": "https://api.github.com/users/bugadani/events{/privacy}", "received_events_url": "https://api.github.com/users/bugadani/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aa4f5833e1e3dc468923be7be988eb9e25a9e4c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/aa4f5833e1e3dc468923be7be988eb9e25a9e4c1", "html_url": "https://github.com/rust-lang/rust/commit/aa4f5833e1e3dc468923be7be988eb9e25a9e4c1"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "518090a710d3bda2038b54de9f463eeb5af85fe3", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/f29b32983d1e885b0e141b6aac2cae281ff39a22/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f29b32983d1e885b0e141b6aac2cae281ff39a22/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=f29b32983d1e885b0e141b6aac2cae281ff39a22", "patch": "@@ -929,25 +929,23 @@ pub(super) fn check_impl_items_against_trait<'tcx>(\n     for impl_item in impl_items {\n         let ty_impl_item = tcx.associated_item(tcx.hir().local_def_id(impl_item.hir_id));\n \n-        let mut items = associated_items.filter_by_name(tcx, ty_impl_item.ident, impl_trait_ref.def_id);\n+        let mut items =\n+            associated_items.filter_by_name(tcx, ty_impl_item.ident, impl_trait_ref.def_id);\n \n         let (compatible_kind, ty_trait_item) = if let Some(ty_trait_item) = items.next() {\n-\n-            let is_compatible = |ty: &&ty::AssocItem| {\n-                match (ty.kind, &impl_item.kind) {\n-                    (ty::AssocKind::Const, hir::ImplItemKind::Const(..)) => true,\n-                    (ty::AssocKind::Fn, hir::ImplItemKind::Fn(..)) => true,\n-                    (ty::AssocKind::Type, hir::ImplItemKind::TyAlias(..)) => true,\n-                    _ => false\n-                }\n+            let is_compatible = |ty: &&ty::AssocItem| match (ty.kind, &impl_item.kind) {\n+                (ty::AssocKind::Const, hir::ImplItemKind::Const(..)) => true,\n+                (ty::AssocKind::Fn, hir::ImplItemKind::Fn(..)) => true,\n+                (ty::AssocKind::Type, hir::ImplItemKind::TyAlias(..)) => true,\n+                _ => false,\n             };\n \n             // If we don't have a compatible item, we'll use the first one whose name matches\n             // to report an error.\n             let mut compatible_kind = is_compatible(&ty_trait_item);\n             let mut trait_item = ty_trait_item;\n \n-            if  !compatible_kind {\n+            if !compatible_kind {\n                 if let Some(ty_trait_item) = items.find(is_compatible) {\n                     compatible_kind = true;\n                     trait_item = ty_trait_item;\n@@ -1003,7 +1001,13 @@ pub(super) fn check_impl_items_against_trait<'tcx>(\n                 impl_item,\n             );\n         } else {\n-            report_mismatch_error(tcx, ty_trait_item.def_id, impl_trait_ref, impl_item, &ty_impl_item);\n+            report_mismatch_error(\n+                tcx,\n+                ty_trait_item.def_id,\n+                impl_trait_ref,\n+                impl_item,\n+                &ty_impl_item,\n+            );\n         }\n     }\n "}]}