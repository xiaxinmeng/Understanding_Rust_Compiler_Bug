{"sha": "6a5f537fb902864ad3b3b4a3b043bcc0ee64ec54", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNWY1MzdmYjkwMjg2NGFkM2IzYjRhM2IwNDNiY2MwZWU2NGVjNTQ=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-15T09:12:10Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-11-21T18:22:31Z"}, "message": "Rename prefix_chunk to prefix_chunk_size", "tree": {"sha": "1626292b81c8a6abb84f78406862a70d69680adc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1626292b81c8a6abb84f78406862a70d69680adc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a5f537fb902864ad3b3b4a3b043bcc0ee64ec54", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a5f537fb902864ad3b3b4a3b043bcc0ee64ec54", "html_url": "https://github.com/rust-lang/rust/commit/6a5f537fb902864ad3b3b4a3b043bcc0ee64ec54", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a5f537fb902864ad3b3b4a3b043bcc0ee64ec54/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "39b8b2b623087fa643daeed424bd2fa79076f463", "url": "https://api.github.com/repos/rust-lang/rust/commits/39b8b2b623087fa643daeed424bd2fa79076f463", "html_url": "https://github.com/rust-lang/rust/commit/39b8b2b623087fa643daeed424bd2fa79076f463"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "915dd3d9eda1586ecef67545eb8514b309e790cb", "filename": "compiler/rustc_codegen_llvm/src/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a5f537fb902864ad3b3b4a3b043bcc0ee64ec54/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5f537fb902864ad3b3b4a3b043bcc0ee64ec54/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fabi.rs?ref=6a5f537fb902864ad3b3b4a3b043bcc0ee64ec54", "patch": "@@ -158,7 +158,7 @@ impl LlvmType for CastTarget {\n             .prefix\n             .iter()\n             .flat_map(|option_kind| {\n-                option_kind.map(|kind| Reg { kind, size: self.prefix_chunk }.llvm_type(cx))\n+                option_kind.map(|kind| Reg { kind, size: self.prefix_chunk_size }.llvm_type(cx))\n             })\n             .chain((0..rest_count).map(|_| rest_ll_unit))\n             .collect();"}, {"sha": "f91552740feb84614db76d7323679d298689158b", "filename": "compiler/rustc_target/src/abi/call/mips64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6a5f537fb902864ad3b3b4a3b043bcc0ee64ec54/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5f537fb902864ad3b3b4a3b043bcc0ee64ec54/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmips64.rs?ref=6a5f537fb902864ad3b3b4a3b043bcc0ee64ec54", "patch": "@@ -137,7 +137,7 @@ where\n     let rest_size = size - Size::from_bytes(8) * prefix_index as u64;\n     arg.cast_to(CastTarget {\n         prefix,\n-        prefix_chunk: Size::from_bytes(8),\n+        prefix_chunk_size: Size::from_bytes(8),\n         rest: Uniform { unit: Reg::i64(), total: rest_size },\n     });\n }"}, {"sha": "83e08f637e3a2521310ba944cfc3845d21d79212", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6a5f537fb902864ad3b3b4a3b043bcc0ee64ec54/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a5f537fb902864ad3b3b4a3b043bcc0ee64ec54/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=6a5f537fb902864ad3b3b4a3b043bcc0ee64ec54", "patch": "@@ -203,7 +203,7 @@ impl Uniform {\n #[derive(Clone, Copy, PartialEq, Eq, Debug)]\n pub struct CastTarget {\n     pub prefix: [Option<RegKind>; 8],\n-    pub prefix_chunk: Size,\n+    pub prefix_chunk_size: Size,\n     pub rest: Uniform,\n }\n \n@@ -215,29 +215,29 @@ impl From<Reg> for CastTarget {\n \n impl From<Uniform> for CastTarget {\n     fn from(uniform: Uniform) -> CastTarget {\n-        CastTarget { prefix: [None; 8], prefix_chunk: Size::ZERO, rest: uniform }\n+        CastTarget { prefix: [None; 8], prefix_chunk_size: Size::ZERO, rest: uniform }\n     }\n }\n \n impl CastTarget {\n     pub fn pair(a: Reg, b: Reg) -> CastTarget {\n         CastTarget {\n             prefix: [Some(a.kind), None, None, None, None, None, None, None],\n-            prefix_chunk: a.size,\n+            prefix_chunk_size: a.size,\n             rest: Uniform::from(b),\n         }\n     }\n \n     pub fn size<C: HasDataLayout>(&self, cx: &C) -> Size {\n-        (self.prefix_chunk * self.prefix.iter().filter(|x| x.is_some()).count() as u64)\n+        (self.prefix_chunk_size * self.prefix.iter().filter(|x| x.is_some()).count() as u64)\n             .align_to(self.rest.align(cx))\n             + self.rest.total\n     }\n \n     pub fn align<C: HasDataLayout>(&self, cx: &C) -> Align {\n         self.prefix\n             .iter()\n-            .filter_map(|x| x.map(|kind| Reg { kind, size: self.prefix_chunk }.align(cx)))\n+            .filter_map(|x| x.map(|kind| Reg { kind, size: self.prefix_chunk_size }.align(cx)))\n             .fold(cx.data_layout().aggregate_align.abi.max(self.rest.align(cx)), |acc, align| {\n                 acc.max(align)\n             })"}]}