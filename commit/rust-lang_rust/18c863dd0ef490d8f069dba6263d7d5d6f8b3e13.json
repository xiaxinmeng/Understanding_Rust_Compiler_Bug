{"sha": "18c863dd0ef490d8f069dba6263d7d5d6f8b3e13", "node_id": "C_kwDOAAsO6NoAKDE4Yzg2M2RkMGVmNDkwZDhmMDY5ZGJhNjI2M2Q3ZDVkNmY4YjNlMTM", "commit": {"author": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T23:53:05Z"}, "committer": {"name": "Nathaniel Hamovitz", "email": "18648574+nhamovitz@users.noreply.github.com", "date": "2021-10-18T23:53:05Z"}, "message": "Improve help message", "tree": {"sha": "3d67b12802973907c918db3ee567096825bf7259", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3d67b12802973907c918db3ee567096825bf7259"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18c863dd0ef490d8f069dba6263d7d5d6f8b3e13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18c863dd0ef490d8f069dba6263d7d5d6f8b3e13", "html_url": "https://github.com/rust-lang/rust/commit/18c863dd0ef490d8f069dba6263d7d5d6f8b3e13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18c863dd0ef490d8f069dba6263d7d5d6f8b3e13/comments", "author": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nhamovitz", "id": 18648574, "node_id": "MDQ6VXNlcjE4NjQ4NTc0", "avatar_url": "https://avatars.githubusercontent.com/u/18648574?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nhamovitz", "html_url": "https://github.com/nhamovitz", "followers_url": "https://api.github.com/users/nhamovitz/followers", "following_url": "https://api.github.com/users/nhamovitz/following{/other_user}", "gists_url": "https://api.github.com/users/nhamovitz/gists{/gist_id}", "starred_url": "https://api.github.com/users/nhamovitz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nhamovitz/subscriptions", "organizations_url": "https://api.github.com/users/nhamovitz/orgs", "repos_url": "https://api.github.com/users/nhamovitz/repos", "events_url": "https://api.github.com/users/nhamovitz/events{/privacy}", "received_events_url": "https://api.github.com/users/nhamovitz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8bacf078a0c0d1dd3f15e6554338805f2d7256b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8bacf078a0c0d1dd3f15e6554338805f2d7256b", "html_url": "https://github.com/rust-lang/rust/commit/d8bacf078a0c0d1dd3f15e6554338805f2d7256b"}], "stats": {"total": 87, "additions": 26, "deletions": 61}, "files": [{"sha": "0c9066fda8226d008f7bf1d726075c85f34f63f9", "filename": "clippy_lints/src/trailing_zero_sized_array_without_repr.rs", "status": "modified", "additions": 26, "deletions": 61, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/18c863dd0ef490d8f069dba6263d7d5d6f8b3e13/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18c863dd0ef490d8f069dba6263d7d5d6f8b3e13/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrailing_zero_sized_array_without_repr.rs?ref=18c863dd0ef490d8f069dba6263d7d5d6f8b3e13", "patch": "@@ -2,12 +2,10 @@ use clippy_utils::{\n     diagnostics::{span_lint_and_help, span_lint_and_sugg, span_lint_and_then},\n     source::{indent_of, snippet},\n };\n-use rustc_ast::Attribute;\n use rustc_errors::Applicability;\n use rustc_hir::{HirId, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_middle::dep_graph::DepContext;\n-use rustc_middle::ty::{self as ty_mod, Const, ReprFlags};\n+use rustc_middle::ty::{Const, TyS};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n@@ -43,18 +41,28 @@ declare_lint_pass!(TrailingZeroSizedArrayWithoutRepr => [TRAILING_ZERO_SIZED_ARR\n impl<'tcx> LateLintPass<'tcx> for TrailingZeroSizedArrayWithoutRepr {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) {\n         dbg!(item.ident);\n-        if is_struct_with_trailing_zero_sized_array(cx, item) && !has_repr_attr(cx, item) {\n-            eprintln!(\"consider yourself linted \ud83d\ude0e\");\n-            // span_lint_and_help(\n-            //     cx,\n-            //     TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR,\n-            //     item.span,\n-            //     \"trailing zero-sized array in a struct which is not marked with a `repr`\n-            //     attribute\",\n-            //     None,\n-            //     \"consider annotating the struct definition with `#[repr(C)]` or another\n-            //     `repr` attribute\",\n-            // );\n+        if is_struct_with_trailing_zero_sized_array(cx, item) && !has_repr_attr(cx, item.hir_id()) {\n+            let help_msg = format!(\n+                \"consider annotating {} with `#[repr(C)]` or another `repr` attribute\",\n+                cx.tcx\n+                    .type_of(item.def_id)\n+                    .ty_adt_def()\n+                    .map(|adt_def| cx.tcx.def_path_str(adt_def.did))\n+                    .unwrap_or_else(\n+                        // I don't think this will ever be the case, since we made it through\n+                        // `is_struct_with_trailing_zero_sized_array`, but I don't feel comfortable putting an `unwrap`\n+                        || \"the struct definition\".to_string()\n+                    )\n+            );\n+\n+            span_lint_and_help(\n+                cx,\n+                TRAILING_ZERO_SIZED_ARRAY_WITHOUT_REPR,\n+                item.span,\n+                \"trailing zero-sized array in a struct which is not marked with a `repr` attribute\",\n+                None,\n+                &help_msg,\n+            );\n         }\n     }\n }\n@@ -83,52 +91,9 @@ fn is_struct_with_trailing_zero_sized_array(cx: &LateContext<'tcx>, item: &'tcx\n     }\n }\n \n-fn has_repr_attr(cx: &LateContext<'tcx>, item: &'tcx Item<'tcx>) -> bool {\n+fn has_repr_attr(cx: &LateContext<'tcx>, hir_id: HirId) -> bool {\n     // NOTE: there's at least four other ways to do this but I liked this one the best. (All five agreed\n-    // on all testcases (when i wrote this comment. I added a few since then).) Happy to use another;\n+    // on all testcases.) Happy to use another;\n     // they're in the commit history if you want to look (or I can go find them).\n-\n-    let attrs1 = cx.tcx.hir().attrs(item.hir_id());\n-    let attrs2 = cx.tcx.get_attrs(item.def_id.to_def_id());\n-\n-    let res11 = {\n-        let sess = cx.tcx.sess(); // are captured values in closures evaluated once or every time?\n-        attrs1\n-            .iter()\n-            .any(|attr| !rustc_attr::find_repr_attrs(sess, attr).is_empty())\n-    };\n-    let res12 = { attrs1.iter().any(|attr| attr.has_name(sym::repr)) };\n-\n-    let res21 = {\n-        let sess = cx.tcx.sess(); // are captured values in closures evaluated once or every time?\n-        attrs2\n-            .iter()\n-            .any(|attr| !rustc_attr::find_repr_attrs(sess, attr).is_empty())\n-    };\n-    let res22 = { attrs2.iter().any(|attr| attr.has_name(sym::repr)) };\n-\n-    let res_adt = {\n-        let ty = cx.tcx.type_of(item.def_id.to_def_id());\n-        if let ty_mod::Adt(adt, _) = ty.kind() {\n-            if adt.is_struct() {\n-                let repr = adt.repr;\n-                let repr_attr = ReprFlags::IS_C | ReprFlags::IS_TRANSPARENT | ReprFlags::IS_SIMD | ReprFlags::IS_LINEAR;\n-                repr.int.is_some() || repr.align.is_some() || repr.pack.is_some() || repr.flags.intersects(repr_attr)\n-            } else {\n-                false\n-            }\n-        } else {\n-            false\n-        }\n-    };\n-\n-    let all_same = (res11 && res12 && res21 && res22 && res_adt) || (!res11 && !res12 && !res21 && !res22 && !res_adt);\n-\n-    \n-    dbg!((\n-        (res11, res12, res21, res22, res_adt),\n-        all_same,\n-    ));\n-\n-    res12\n+    cx.tcx.hir().attrs(hir_id).iter().any(|attr| attr.has_name(sym::repr))\n }"}]}