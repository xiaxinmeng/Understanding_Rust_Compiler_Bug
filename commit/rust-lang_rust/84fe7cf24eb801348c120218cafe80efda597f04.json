{"sha": "84fe7cf24eb801348c120218cafe80efda597f04", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0ZmU3Y2YyNGViODAxMzQ4YzEyMDIxOGNhZmU4MGVmZGE1OTdmMDQ=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-12-09T10:50:34Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2020-12-09T10:59:10Z"}, "message": "Also generate `StorageDead` in constants", "tree": {"sha": "cea4e9315e06619db0a040dcf4a8506dd7cc5359", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cea4e9315e06619db0a040dcf4a8506dd7cc5359"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/84fe7cf24eb801348c120218cafe80efda597f04", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/84fe7cf24eb801348c120218cafe80efda597f04", "html_url": "https://github.com/rust-lang/rust/commit/84fe7cf24eb801348c120218cafe80efda597f04", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/84fe7cf24eb801348c120218cafe80efda597f04/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db85512bd8d922e0785029eff41152b0f35690f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/db85512bd8d922e0785029eff41152b0f35690f1", "html_url": "https://github.com/rust-lang/rust/commit/db85512bd8d922e0785029eff41152b0f35690f1"}], "stats": {"total": 149, "additions": 92, "deletions": 57}, "files": [{"sha": "d48b7fb3b9247f13f105e77e9c36114d293a2a6b", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/84fe7cf24eb801348c120218cafe80efda597f04/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84fe7cf24eb801348c120218cafe80efda597f04/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=84fe7cf24eb801348c120218cafe80efda597f04", "patch": "@@ -4,7 +4,7 @@ use std::mem;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_hir::{self as hir, def::DefKind, def_id::DefId, definitions::DefPathData};\n+use rustc_hir::{self as hir, def_id::DefId, definitions::DefPathData};\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use rustc_middle::ich::StableHashingContext;\n@@ -700,21 +700,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         let mut locals = IndexVec::from_elem(dummy, &body.local_decls);\n \n         // Now mark those locals as dead that we do not want to initialize\n-        match self.tcx.def_kind(instance.def_id()) {\n-            // statics and constants don't have `Storage*` statements, no need to look for them\n-            //\n-            // FIXME: The above is likely untrue. See\n-            // <https://github.com/rust-lang/rust/pull/70004#issuecomment-602022110>. Is it\n-            // okay to ignore `StorageDead`/`StorageLive` annotations during CTFE?\n-            DefKind::Static | DefKind::Const | DefKind::AssocConst => {}\n-            _ => {\n-                // Mark locals that use `Storage*` annotations as dead on function entry.\n-                let always_live = AlwaysLiveLocals::new(self.body());\n-                for local in locals.indices() {\n-                    if !always_live.contains(local) {\n-                        locals[local].value = LocalValue::Dead;\n-                    }\n-                }\n+        // Mark locals that use `Storage*` annotations as dead on function entry.\n+        let always_live = AlwaysLiveLocals::new(self.body());\n+        for local in locals.indices() {\n+            if !always_live.contains(local) {\n+                locals[local].value = LocalValue::Dead;\n             }\n         }\n         // done"}, {"sha": "60f8d8c8a9f36fd1c1c104723cbf87d29261d7bd", "filename": "compiler/rustc_mir_build/src/build/expr/as_operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/84fe7cf24eb801348c120218cafe80efda597f04/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84fe7cf24eb801348c120218cafe80efda597f04/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_operand.rs?ref=84fe7cf24eb801348c120218cafe80efda597f04", "patch": "@@ -19,7 +19,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         M: Mirror<'tcx, Output = Expr<'tcx>>,\n     {\n         let local_scope = self.local_scope();\n-        self.as_operand(block, local_scope, expr)\n+        self.as_operand(block, Some(local_scope), expr)\n     }\n \n     /// Returns an operand suitable for use until the end of the current scope expression and\n@@ -79,7 +79,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         M: Mirror<'tcx, Output = Expr<'tcx>>,\n     {\n         let local_scope = self.local_scope();\n-        self.as_call_operand(block, local_scope, expr)\n+        self.as_call_operand(block, Some(local_scope), expr)\n     }\n \n     /// Compile `expr` into a value that can be used as an operand."}, {"sha": "6537ba745c17a66954fa05465ac8168f251862db", "filename": "compiler/rustc_mir_build/src/build/expr/as_rvalue.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/84fe7cf24eb801348c120218cafe80efda597f04/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84fe7cf24eb801348c120218cafe80efda597f04/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=84fe7cf24eb801348c120218cafe80efda597f04", "patch": "@@ -25,7 +25,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         M: Mirror<'tcx, Output = Expr<'tcx>>,\n     {\n         let local_scope = self.local_scope();\n-        self.as_rvalue(block, local_scope, expr)\n+        self.as_rvalue(block, Some(local_scope), expr)\n     }\n \n     /// Compile `expr`, yielding an rvalue.\n@@ -445,9 +445,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             Rvalue::Ref(this.hir.tcx().lifetimes.re_erased, borrow_kind, arg_place),\n         );\n \n-        // In constants, temp_lifetime is None. We should not need to drop\n-        // anything because no values with a destructor can be created in\n-        // a constant at this time, even if the type may need dropping.\n+        // See the comment in `expr_as_temp` and on the `rvalue_scopes` field for why\n+        // this can be `None`.\n         if let Some(temp_lifetime) = temp_lifetime {\n             this.schedule_drop_storage_and_value(upvar_span, temp_lifetime, temp);\n         }"}, {"sha": "1f70fdb5ae30b4d2475376820a7c7353c516bbcf", "filename": "compiler/rustc_mir_build/src/build/expr/into.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/84fe7cf24eb801348c120218cafe80efda597f04/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84fe7cf24eb801348c120218cafe80efda597f04/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Finto.rs?ref=84fe7cf24eb801348c120218cafe80efda597f04", "patch": "@@ -79,7 +79,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n                 // (#66975) Source could be a const of type `!`, so has to\n                 // exist in the generated MIR.\n-                unpack!(block = this.as_temp(block, this.local_scope(), source, Mutability::Mut,));\n+                unpack!(block = this.as_temp(block, Some(this.local_scope()), source, Mutability::Mut,));\n \n                 // This is an optimization. If the expression was a call then we already have an\n                 // unreachable block. Don't bother to terminate it and create a new one.\n@@ -300,7 +300,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 // (evaluating them in order given by user)\n                 let fields_map: FxHashMap<_, _> = fields\n                     .into_iter()\n-                    .map(|f| (f.name, unpack!(block = this.as_operand(block, scope, f.expr))))\n+                    .map(|f| (f.name, unpack!(block = this.as_operand(block, Some(scope), f.expr))))\n                     .collect();\n \n                 let field_names = this.hir.all_fields(adt_def, variant_index);\n@@ -468,7 +468,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n \n             ExprKind::Yield { value } => {\n                 let scope = this.local_scope();\n-                let value = unpack!(block = this.as_operand(block, scope, value));\n+                let value = unpack!(block = this.as_operand(block, Some(scope), value));\n                 let resume = this.cfg.start_new_block();\n                 this.record_operands_moved(slice::from_ref(&value));\n                 this.cfg.terminate("}, {"sha": "e137f77ffbb0b0bd0cfa45a279175b166e2f4575", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 8, "deletions": 32, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/84fe7cf24eb801348c120218cafe80efda597f04/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84fe7cf24eb801348c120218cafe80efda597f04/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=84fe7cf24eb801348c120218cafe80efda597f04", "patch": "@@ -85,7 +85,6 @@ use crate::build::matches::{ArmHasGuard, Candidate};\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder, CFG};\n use crate::thir::{Arm, Expr, ExprRef, LintLevel};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_hir as hir;\n use rustc_index::vec::IndexVec;\n use rustc_middle::middle::region;\n use rustc_middle::mir::*;\n@@ -740,18 +739,8 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// We would allocate the box but then free it on the unwinding\n     /// path; we would also emit a free on the 'success' path from\n     /// panic, but that will turn out to be removed as dead-code.\n-    ///\n-    /// When building statics/constants, returns `None` since\n-    /// intermediate values do not have to be dropped in that case.\n-    crate fn local_scope(&self) -> Option<region::Scope> {\n-        match self.hir.body_owner_kind {\n-            hir::BodyOwnerKind::Const | hir::BodyOwnerKind::Static(_) =>\n-            // No need to free storage in this context.\n-            {\n-                None\n-            }\n-            hir::BodyOwnerKind::Closure | hir::BodyOwnerKind::Fn => Some(self.scopes.topmost()),\n-        }\n+    crate fn local_scope(&self) -> region::Scope {\n+        self.scopes.topmost()\n     }\n \n     // Scheduling drops\n@@ -938,23 +927,13 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// not the `DROP(_X)` itself, but the (spurious) unwind pathways\n     /// that it creates. See #64391 for an example.\n     crate fn record_operands_moved(&mut self, operands: &[Operand<'tcx>]) {\n-        let scope = match self.local_scope() {\n-            None => {\n-                // if there is no local scope, operands won't be dropped anyway\n-                return;\n-            }\n+        let local_scope = self.local_scope();\n+        let scope = self.scopes.scopes.last_mut().unwrap();\n \n-            Some(local_scope) => {\n-                let top_scope = self.scopes.scopes.last_mut().unwrap();\n-                assert!(\n-                    top_scope.region_scope == local_scope,\n-                    \"local scope ({:?}) is not the topmost scope!\",\n-                    local_scope\n-                );\n-\n-                top_scope\n-            }\n-        };\n+        assert_eq!(\n+            scope.region_scope, local_scope,\n+            \"local scope is not the topmost scope!\",\n+        );\n \n         // look for moves of a local variable, like `MOVE(_X)`\n         let locals_moved = operands\n@@ -993,9 +972,6 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         match cond {\n             // Don't try to drop a constant\n             Operand::Constant(_) => (),\n-            // If constants and statics, we don't generate StorageLive for this\n-            // temporary, so don't try to generate StorageDead for it either.\n-            _ if self.local_scope().is_none() => (),\n             Operand::Copy(place) | Operand::Move(place) => {\n                 if let Some(cond_temp) = place.as_local() {\n                     // Manually drop the condition on both branches."}, {"sha": "0f13fe1b48c8a15b150fb313fe7a4ef8790c3302", "filename": "src/test/mir-opt/const-promotion-extern-static.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84fe7cf24eb801348c120218cafe80efda597f04/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/84fe7cf24eb801348c120218cafe80efda597f04/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst-promotion-extern-static.rs?ref=84fe7cf24eb801348c120218cafe80efda597f04", "patch": "@@ -12,4 +12,7 @@ static mut BAR: *const &i32 = [&Y].as_ptr();\n // EMIT_MIR const_promotion_extern_static.FOO-promoted[0].ConstProp.after.mir\n static mut FOO: *const &i32 = [unsafe { &X }].as_ptr();\n \n+// EMIT_MIR const_promotion_extern_static.BOP.mir_map.0.mir\n+static BOP: &i32 = &13;\n+\n fn main() {}"}, {"sha": "5ba76c4f0bd70906101943976df344f1499bff62", "filename": "src/test/mir-opt/const_promotion_extern_static.BAR.PromoteTemps.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84fe7cf24eb801348c120218cafe80efda597f04/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/84fe7cf24eb801348c120218cafe80efda597f04/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BAR.PromoteTemps.diff?ref=84fe7cf24eb801348c120218cafe80efda597f04", "patch": "@@ -33,6 +33,8 @@\n +                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(WithOptConstParam { did: DefId(0:6 ~ const_promotion_extern_static[317d]::BAR), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:35\n+-         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:34: 9:35\n+          StorageDead(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:34: 9:35\n           _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:9:31: 9:44\n                                            // mir::Constant\n                                            // + span: $DIR/const-promotion-extern-static.rs:9:36: 9:42\n@@ -42,6 +44,7 @@\n       bb1: {\n -         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n -         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n+          StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:9:43: 9:44\n           return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:9:1: 9:45\n       }\n   "}, {"sha": "4d24387afc761f99008f91730149b3d3cd98ef90", "filename": "src/test/mir-opt/const_promotion_extern_static.BOP.mir_map.0.mir", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/84fe7cf24eb801348c120218cafe80efda597f04/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/84fe7cf24eb801348c120218cafe80efda597f04/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.BOP.mir_map.0.mir?ref=84fe7cf24eb801348c120218cafe80efda597f04", "patch": "@@ -0,0 +1,17 @@\n+// MIR for `BOP` 0 mir_map\n+\n+static BOP: &i32 = {\n+    let mut _0: &i32;                    // return place in scope 0 at $DIR/const-promotion-extern-static.rs:16:13: 16:17\n+    let _1: &i32;                        // in scope 0 at $DIR/const-promotion-extern-static.rs:16:20: 16:23\n+    let _2: i32;                         // in scope 0 at $DIR/const-promotion-extern-static.rs:16:21: 16:23\n+\n+    bb0: {\n+        StorageLive(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:16:20: 16:23\n+        StorageLive(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:16:21: 16:23\n+        _2 = const 13_i32;               // scope 0 at $DIR/const-promotion-extern-static.rs:16:21: 16:23\n+        _1 = &_2;                        // scope 0 at $DIR/const-promotion-extern-static.rs:16:20: 16:23\n+        _0 = &(*_1);                     // scope 0 at $DIR/const-promotion-extern-static.rs:16:20: 16:23\n+        StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:16:22: 16:23\n+        return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:16:1: 16:24\n+    }\n+}"}, {"sha": "1565cc7d5e72f776f5e1c1bb314325138b1cf56d", "filename": "src/test/mir-opt/const_promotion_extern_static.FOO.PromoteTemps.diff", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/84fe7cf24eb801348c120218cafe80efda597f04/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "raw_url": "https://github.com/rust-lang/rust/raw/84fe7cf24eb801348c120218cafe80efda597f04/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fconst_promotion_extern_static.FOO.PromoteTemps.diff?ref=84fe7cf24eb801348c120218cafe80efda597f04", "patch": "@@ -35,6 +35,8 @@\n +                                          // + literal: Const { ty: &[&i32; 1], val: Unevaluated(WithOptConstParam { did: DefId(0:7 ~ const_promotion_extern_static[317d]::FOO), const_param_did: None }, [], Some(promoted[0])) }\n +         _2 = &(*_6);                     // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n           _1 = move _2 as &[&i32] (Pointer(Unsize)); // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:46\n+-         StorageDead(_4);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:45: 13:46\n+          StorageDead(_2);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:45: 13:46\n           _0 = core::slice::<impl [&i32]>::as_ptr(move _1) -> [return: bb1, unwind: bb2]; // scope 0 at $DIR/const-promotion-extern-static.rs:13:31: 13:55\n                                            // mir::Constant\n                                            // + span: $DIR/const-promotion-extern-static.rs:13:47: 13:53\n@@ -44,6 +46,7 @@\n       bb1: {\n -         StorageDead(_5);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n -         StorageDead(_3);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n+          StorageDead(_1);                 // scope 0 at $DIR/const-promotion-extern-static.rs:13:54: 13:55\n           return;                          // scope 0 at $DIR/const-promotion-extern-static.rs:13:1: 13:56\n       }\n   "}, {"sha": "6c22af787d341ad99efcda22918ba0939fff9bbc", "filename": "src/test/mir-opt/storage_live_dead_in_statics.XXX.mir_map.0.mir", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/84fe7cf24eb801348c120218cafe80efda597f04/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/84fe7cf24eb801348c120218cafe80efda597f04/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_live_dead_in_statics.XXX.mir_map.0.mir?ref=84fe7cf24eb801348c120218cafe80efda597f04", "patch": "@@ -143,16 +143,60 @@ static XXX: &Foo = {\n         StorageLive(_48);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:25: 21:31\n         _48 = (const 0_u32, const 3_u32); // scope 0 at $DIR/storage_live_dead_in_statics.rs:21:25: 21:31\n         _6 = [move _7, move _8, move _9, move _10, move _11, move _12, move _13, move _14, move _15, move _16, move _17, move _18, move _19, move _20, move _21, move _22, move _23, move _24, move _25, move _26, move _27, move _28, move _29, move _30, move _31, move _32, move _33, move _34, move _35, move _36, move _37, move _38, move _39, move _40, move _41, move _42, move _43, move _44, move _45, move _46, move _47, move _48]; // scope 0 at $DIR/storage_live_dead_in_statics.rs:7:12: 22:6\n+        StorageDead(_48);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_47);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_46);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_45);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_44);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_43);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_42);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_41);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_40);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_39);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_38);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_37);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_36);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_35);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_34);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_33);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_32);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_31);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_30);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_29);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_28);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_27);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_26);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_25);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_24);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_23);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_22);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_21);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_20);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_19);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_18);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_17);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_16);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_15);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_14);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_13);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_12);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_11);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_10);                // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_9);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_8);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n+        StorageDead(_7);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n         _5 = &_6;                        // scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n         _4 = &(*_5);                     // scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n         _3 = move _4 as &[(u32, u32)] (Pointer(Unsize)); // scope 0 at $DIR/storage_live_dead_in_statics.rs:7:11: 22:6\n+        StorageDead(_4);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:22:5: 22:6\n         _2 = Foo { tup: const \"hi\", data: move _3 }; // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:29: 23:2\n                                          // ty::Const\n                                          // + ty: &str\n                                          // + val: Value(Slice { data: Allocation { bytes: [104, 105], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 })\n                                          // mir::Constant\n                                          // + span: $DIR/storage_live_dead_in_statics.rs:6:10: 6:14\n                                          // + literal: Const { ty: &str, val: Value(Slice { data: Allocation { bytes: [104, 105], relocations: Relocations(SortedMap { data: [] }), init_mask: InitMask { blocks: [3], len: Size { raw: 2 } }, size: Size { raw: 2 }, align: Align { pow2: 0 }, mutability: Not, extra: () }, start: 0, end: 2 }) }\n+        StorageDead(_3);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:23:1: 23:2\n         _1 = &_2;                        // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:28: 23:2\n         _0 = &(*_1);                     // scope 0 at $DIR/storage_live_dead_in_statics.rs:5:28: 23:2\n         StorageDead(_5);                 // scope 0 at $DIR/storage_live_dead_in_statics.rs:23:1: 23:2"}]}