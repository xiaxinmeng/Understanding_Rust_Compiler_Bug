{"sha": "8d4afbe4136933b47082dd1efa9c1132a31dfb0d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkNGFmYmU0MTM2OTMzYjQ3MDgyZGQxZWZhOWMxMTMyYTMxZGZiMGQ=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2019-02-20T20:27:00Z"}, "committer": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2019-03-27T02:03:42Z"}, "message": "Use informational target machine for metadata\n\nSince there is nothing to optimise there...", "tree": {"sha": "6d73dd5ad453677b17d88c4dccf1d4c7b1da27e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d73dd5ad453677b17d88c4dccf1d4c7b1da27e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d4afbe4136933b47082dd1efa9c1132a31dfb0d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d4afbe4136933b47082dd1efa9c1132a31dfb0d", "html_url": "https://github.com/rust-lang/rust/commit/8d4afbe4136933b47082dd1efa9c1132a31dfb0d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d4afbe4136933b47082dd1efa9c1132a31dfb0d/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54479c624cc24bb852291d83e11cc19389dcb21b", "url": "https://api.github.com/repos/rust-lang/rust/commits/54479c624cc24bb852291d83e11cc19389dcb21b", "html_url": "https://github.com/rust-lang/rust/commit/54479c624cc24bb852291d83e11cc19389dcb21b"}], "stats": {"total": 53, "additions": 35, "deletions": 18}, "files": [{"sha": "7f259024cee91d74b90cab405acd12a172c76814", "filename": "src/librustc_codegen_llvm/back/write.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8d4afbe4136933b47082dd1efa9c1132a31dfb0d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4afbe4136933b47082dd1efa9c1132a31dfb0d/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fback%2Fwrite.rs?ref=8d4afbe4136933b47082dd1efa9c1132a31dfb0d", "patch": "@@ -10,9 +10,9 @@ use crate::type_::Type;\n use crate::context::{is_pie_binary, get_reloc_model};\n use crate::common;\n use crate::LlvmCodegenBackend;\n+use rustc::hir::def_id::LOCAL_CRATE;\n use rustc_codegen_ssa::back::write::{CodegenContext, ModuleConfig, run_assembler};\n use rustc_codegen_ssa::traits::*;\n-use rustc::hir::def_id::LOCAL_CRATE;\n use rustc::session::config::{self, OutputType, Passes, Lto};\n use rustc::session::Session;\n use rustc::ty::TyCtxt;\n@@ -82,14 +82,6 @@ pub fn write_output_file(\n     }\n }\n \n-pub fn create_target_machine(\n-    tcx: TyCtxt<'_, '_, '_>,\n-    find_features: bool,\n-) -> &'static mut llvm::TargetMachine {\n-    target_machine_factory(tcx.sess, tcx.backend_optimization_level(LOCAL_CRATE), find_features)()\n-        .unwrap_or_else(|err| llvm_err(tcx.sess.diagnostic(), &err).raise() )\n-}\n-\n pub fn create_informational_target_machine(\n     sess: &Session,\n     find_features: bool,\n@@ -99,6 +91,15 @@ pub fn create_informational_target_machine(\n     })\n }\n \n+pub fn create_target_machine(\n+    tcx: TyCtxt<'_, '_, '_>,\n+    find_features: bool,\n+) -> &'static mut llvm::TargetMachine {\n+    target_machine_factory(&tcx.sess, tcx.backend_optimization_level(LOCAL_CRATE), find_features)()\n+    .unwrap_or_else(|err| {\n+        llvm_err(tcx.sess.diagnostic(), &err).raise()\n+    })\n+}\n \n pub fn to_llvm_opt_settings(cfg: config::OptLevel) -> (llvm::CodeGenOptLevel, llvm::CodeGenOptSize)\n {"}, {"sha": "7ea5e912309059dcc95cbed59a96c12320d0ab46", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d4afbe4136933b47082dd1efa9c1132a31dfb0d/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4afbe4136933b47082dd1efa9c1132a31dfb0d/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=8d4afbe4136933b47082dd1efa9c1132a31dfb0d", "patch": "@@ -13,10 +13,9 @@\n //!   but one `llvm::Type` corresponds to many `Ty`s; for instance, `tup(int, int,\n //!   int)` and `rec(x=int, y=int, z=int)` will have the same `llvm::Type`.\n \n-use super::ModuleLlvm;\n+use super::{LlvmCodegenBackend, ModuleLlvm};\n use rustc_codegen_ssa::{ModuleCodegen, ModuleKind};\n use rustc_codegen_ssa::base::maybe_create_entry_wrapper;\n-use super::LlvmCodegenBackend;\n \n use crate::llvm;\n use crate::metadata;\n@@ -163,10 +162,9 @@ pub fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         cgu_name: InternedString)\n         -> (Stats, ModuleCodegen<ModuleLlvm>)\n     {\n-        let backend = LlvmCodegenBackend(());\n         let cgu = tcx.codegen_unit(cgu_name);\n         // Instantiate monomorphizations without filling out definitions yet...\n-        let llvm_module = backend.new_metadata(tcx, &cgu_name.as_str());\n+        let llvm_module = ModuleLlvm::new(tcx, &cgu_name.as_str());\n         let stats = {\n             let cx = CodegenCx::new(tcx, cgu, &llvm_module);\n             let mono_items = cx.codegen_unit"}, {"sha": "619304ad9afd0f22b3801a668892a519c0ae29e2", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8d4afbe4136933b47082dd1efa9c1132a31dfb0d/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4afbe4136933b47082dd1efa9c1132a31dfb0d/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=8d4afbe4136933b47082dd1efa9c1132a31dfb0d", "patch": "@@ -154,7 +154,7 @@ pub unsafe fn create_module(\n \n     // Ensure the data-layout values hardcoded remain the defaults.\n     if sess.target.target.options.is_builtin {\n-        let tm = crate::back::write::create_target_machine(tcx, false);\n+        let tm = crate::back::write::create_informational_target_machine(&tcx.sess, false);\n         llvm::LLVMRustSetDataLayoutFromTargetMachine(llmod, tm);\n         llvm::LLVMRustDisposeTargetMachine(tm);\n "}, {"sha": "c95feafa29aba6a5369dd019bdeba25a39961035", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8d4afbe4136933b47082dd1efa9c1132a31dfb0d/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4afbe4136933b47082dd1efa9c1132a31dfb0d/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=8d4afbe4136933b47082dd1efa9c1132a31dfb0d", "patch": "@@ -23,7 +23,7 @@\n #![deny(rust_2018_idioms)]\n #![allow(explicit_outlives_requirements)]\n \n-use back::write::create_target_machine;\n+use back::write::{create_target_machine, create_informational_target_machine};\n use syntax_pos::symbol::Symbol;\n \n extern crate flate2;\n@@ -112,8 +112,9 @@ pub struct LlvmCodegenBackend(());\n \n impl ExtraBackendMethods for LlvmCodegenBackend {\n     fn new_metadata(&self, tcx: TyCtxt<'_, '_, '_>, mod_name: &str) -> ModuleLlvm {\n-        ModuleLlvm::new(tcx, mod_name)\n+        ModuleLlvm::new_metadata(tcx, mod_name)\n     }\n+\n     fn write_metadata<'b, 'gcx>(\n         &self,\n         tcx: TyCtxt<'b, 'gcx, 'gcx>,\n@@ -363,7 +364,6 @@ impl ModuleLlvm {\n         unsafe {\n             let llcx = llvm::LLVMRustContextCreate(tcx.sess.fewer_names());\n             let llmod_raw = context::create_module(tcx, llcx, mod_name) as *const _;\n-\n             ModuleLlvm {\n                 llmod_raw,\n                 llcx,\n@@ -372,6 +372,18 @@ impl ModuleLlvm {\n         }\n     }\n \n+    fn new_metadata(tcx: TyCtxt<'_, '_, '_>, mod_name: &str) -> Self {\n+        unsafe {\n+            let llcx = llvm::LLVMRustContextCreate(tcx.sess.fewer_names());\n+            let llmod_raw = context::create_module(tcx, llcx, mod_name) as *const _;\n+            ModuleLlvm {\n+                llmod_raw,\n+                llcx,\n+                tm: create_informational_target_machine(&tcx.sess, false),\n+            }\n+        }\n+    }\n+\n     fn parse(\n         cgcx: &CodegenContext<LlvmCodegenBackend>,\n         name: &str,"}, {"sha": "55b7855ac0862f44eb76b43b3868fc46624e6924", "filename": "src/librustc_codegen_ssa/back/write.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d4afbe4136933b47082dd1efa9c1132a31dfb0d/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d4afbe4136933b47082dd1efa9c1132a31dfb0d/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fwrite.rs?ref=8d4afbe4136933b47082dd1efa9c1132a31dfb0d", "patch": "@@ -1075,7 +1075,13 @@ fn start_executing_work<B: ExtraBackendMethods>(\n         None\n     };\n \n-    let ol = tcx.backend_optimization_level(LOCAL_CRATE);\n+    let ol = if tcx.sess.opts.debugging_opts.no_codegen\n+             || !tcx.sess.opts.output_types.should_codegen() {\n+        // If we know that we won\u2019t be doing codegen, create target machines without optimisation.\n+        config::OptLevel::No\n+    } else {\n+        tcx.backend_optimization_level(LOCAL_CRATE)\n+    };\n     let cgcx = CodegenContext::<B> {\n         backend: backend.clone(),\n         crate_types: sess.crate_types.borrow().clone(),"}]}