{"sha": "0c97bbf424e976df4de1de0abf8c714095a2924b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjOTdiYmY0MjRlOTc2ZGY0ZGUxZGUwYWJmOGM3MTQwOTVhMjkyNGI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-08-13T10:30:54Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2017-08-13T10:30:54Z"}, "message": "Remove some more cfg's", "tree": {"sha": "0c86b7ab3947bf0d4fbc05b9d3816c6cabf92552", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c86b7ab3947bf0d4fbc05b9d3816c6cabf92552"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0c97bbf424e976df4de1de0abf8c714095a2924b", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: GPGTools - https://gpgtools.org\n\niQIcBAABCgAGBQJZkCpjAAoJEEpHzFJ6U7W8S9YQAMJeXc/l2H4SQw8V5HzM90wv\nGNaK8LSd3+kgibNYbhFSjgTHl5WWRd9wVyFqne7OCgqzibMMhBrie6VmhIVcr9dP\nOZ0MyEw84iHmTQKuDWzT66pIHv1Ut8QDt34NOb8pu20sppl2+2bG7/uRUkGoN252\ni4ut+TrZs6KQ0pLiY0cZEDdSREYFjPG0I3Nw8SvRi4JkRSeKl/J7EAJD8GpaNfq+\nyZiymUOtz1gSm8DfViQcc8CpBJMR8IDH3CwiIUIGJurEQobt3KU2uG+YiVg6AL9/\nuHC654+Tjr1ZxO8BlnG30HGODiyMjefqQJ6SthQgHOu6vq967eCzuf+UxztbB2tp\nQIe30/IafypU6Mlmr+//YV3SiByDmAqTODbzbB8f2XY4OfoON2r4fYdtwg2WgQtL\n6eUfgtmczGEv+IBqBDb7OifkomapGzFJ+1GJF3bRSx5YMrk7Y3D9n009QZv9/sp0\nmb3DWSAjENvqRoCuCgTT9UUFeL9b3S9FO+WFiY9BxDZMOokkhfsMXwPCaOXJs1f0\n41wODR3Gg8HlcsvoNv5zKHRnkivu4nrzxwgJxCNwINPUVC66wy9ec4/uBYmIJ3ol\npETbGRxyj8awkmf2I5cR7hyTbpb2SzRcxofHeO9qfcGXbjCCIyQDqaWCJyLlp/N8\nGDaZfgPX8qAtZerYdyMi\n=QXe6\n-----END PGP SIGNATURE-----", "payload": "tree 0c86b7ab3947bf0d4fbc05b9d3816c6cabf92552\nparent 03584a2d8c76036bf380cdbb759f3e57033f5301\nauthor bjorn3 <bjorn3@users.noreply.github.com> 1502620254 +0200\ncommitter bjorn3 <bjorn3@users.noreply.github.com> 1502620254 +0200\n\nRemove some more cfg's\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0c97bbf424e976df4de1de0abf8c714095a2924b", "html_url": "https://github.com/rust-lang/rust/commit/0c97bbf424e976df4de1de0abf8c714095a2924b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0c97bbf424e976df4de1de0abf8c714095a2924b/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03584a2d8c76036bf380cdbb759f3e57033f5301", "url": "https://api.github.com/repos/rust-lang/rust/commits/03584a2d8c76036bf380cdbb759f3e57033f5301", "html_url": "https://github.com/rust-lang/rust/commit/03584a2d8c76036bf380cdbb759f3e57033f5301"}], "stats": {"total": 225, "additions": 119, "deletions": 106}, "files": [{"sha": "95ac71d948bc17062215751845ac96fa160ebc9d", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/0c97bbf424e976df4de1de0abf8c714095a2924b/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c97bbf424e976df4de1de0abf8c714095a2924b/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=0c97bbf424e976df4de1de0abf8c714095a2924b", "patch": "@@ -618,12 +618,6 @@ impl Step for Compiletest {\n         if let Some(ref dir) = build.lldb_python_dir {\n             cmd.arg(\"--lldb-python-dir\").arg(dir);\n         }\n-        let llvm_config = build.llvm_config(target);\n-        let llvm_version = output(Command::new(&llvm_config).arg(\"--version\"));\n-        cmd.arg(\"--llvm-version\").arg(llvm_version);\n-        if !build.is_rust_llvm(target) {\n-            cmd.arg(\"--system-llvm\");\n-        }\n \n         cmd.args(&build.flags.cmd.test_args());\n \n@@ -635,17 +629,32 @@ impl Step for Compiletest {\n             cmd.arg(\"--quiet\");\n         }\n \n-        // Only pass correct values for these flags for the `run-make` suite as it\n-        // requires that a C++ compiler was configured which isn't always the case.\n-        if suite == \"run-make\" {\n-            let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n-            let llvm_cxxflags = output(Command::new(&llvm_config).arg(\"--cxxflags\"));\n-            cmd.arg(\"--cc\").arg(build.cc(target))\n-               .arg(\"--cxx\").arg(build.cxx(target).unwrap())\n-               .arg(\"--cflags\").arg(build.cflags(target).join(\" \"))\n-               .arg(\"--llvm-components\").arg(llvm_components.trim())\n-               .arg(\"--llvm-cxxflags\").arg(llvm_cxxflags.trim());\n-        } else {\n+        if build.config.llvm_enabled {\n+            let llvm_config = build.llvm_config(target);\n+            let llvm_version = output(Command::new(&llvm_config).arg(\"--version\"));\n+            cmd.arg(\"--llvm-version\").arg(llvm_version);\n+            if !build.is_rust_llvm(target) {\n+                cmd.arg(\"--system-llvm\");\n+            }\n+\n+            // Only pass correct values for these flags for the `run-make` suite as it\n+            // requires that a C++ compiler was configured which isn't always the case.\n+            if suite == \"run-make\" {\n+                let llvm_components = output(Command::new(&llvm_config).arg(\"--components\"));\n+                let llvm_cxxflags = output(Command::new(&llvm_config).arg(\"--cxxflags\"));\n+                cmd.arg(\"--cc\").arg(build.cc(target))\n+                .arg(\"--cxx\").arg(build.cxx(target).unwrap())\n+                .arg(\"--cflags\").arg(build.cflags(target).join(\" \"))\n+                .arg(\"--llvm-components\").arg(llvm_components.trim())\n+                .arg(\"--llvm-cxxflags\").arg(llvm_cxxflags.trim());\n+            }\n+        }\n+        if suite == \"run-make\" && !build.config.llvm_enabled {\n+            println!(\"Ignoring run-make test suite\");\n+            return;\n+        }\n+\n+        if suite != \"run-make\" {\n             cmd.arg(\"--cc\").arg(\"\")\n                .arg(\"--cxx\").arg(\"\")\n                .arg(\"--cflags\").arg(\"\")"}, {"sha": "82ced4d1bcd035d8bd5e380356cc898db36e4c4d", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 27, "deletions": 28, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/0c97bbf424e976df4de1de0abf8c714095a2924b/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c97bbf424e976df4de1de0abf8c714095a2924b/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=0c97bbf424e976df4de1de0abf8c714095a2924b", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![cfg_attr(not(feature=\"llvm\"), allow(dead_code))]\n+\n use rustc::hir::{self, map as hir_map};\n use rustc::hir::lowering::lower_crate;\n use rustc::ich::Fingerprint;\n@@ -19,8 +21,6 @@ use rustc::session::config::{self, Input, OutputFilenames, OutputType};\n use rustc::session::search_paths::PathKind;\n use rustc::lint;\n use rustc::middle::{self, stability, reachable};\n-#[cfg(feature=\"llvm\")]\n-use rustc::middle::dependency_format;\n use rustc::middle::privacy::AccessLevels;\n use rustc::mir::transform::{MIR_CONST, MIR_VALIDATED, MIR_OPTIMIZED, Passes};\n use rustc::ty::{self, TyCtxt, Resolutions, GlobalArenas};\n@@ -33,9 +33,7 @@ use rustc_incremental::{self, IncrementalHashesMap};\n use rustc_resolve::{MakeGlobMap, Resolver};\n use rustc_metadata::creader::CrateLoader;\n use rustc_metadata::cstore::{self, CStore};\n-#[cfg(feature=\"llvm\")]\n-use rustc_trans::back::{link, write};\n-#[cfg(feature=\"llvm\")]\n+use rustc_trans::back::write;\n use rustc_trans as trans;\n use rustc_typeck as typeck;\n use rustc_privacy;\n@@ -73,8 +71,6 @@ pub fn compile_input(sess: &Session,\n                      output: &Option<PathBuf>,\n                      addl_plugins: Option<Vec<String>>,\n                      control: &CompileController) -> CompileResult {\n-    use rustc_trans::back::write::OngoingCrateTranslation;\n-\n     macro_rules! controller_entry_point {\n         ($point: ident, $tsess: expr, $make_state: expr, $phase_result: expr) => {{\n             let state = &mut $make_state;\n@@ -91,10 +87,27 @@ pub fn compile_input(sess: &Session,\n         }}\n     }\n \n+    if cfg!(not(feature=\"llvm\")) {\n+        use rustc::session::config::CrateType;\n+        if !sess.opts.debugging_opts.no_trans && sess.opts.output_types.should_trans() {\n+            sess.err(\"LLVM is not supported by this rustc. Please use -Z no-trans to compile\")\n+        }\n+\n+        if sess.opts.crate_types.iter().all(|&t|{\n+            t != CrateType::CrateTypeRlib && t != CrateType::CrateTypeExecutable\n+        }) {\n+            sess.err(\n+                \"LLVM is not supported by this rustc, so non rlib libraries are not supported\"\n+            );\n+        }\n+\n+        sess.abort_if_errors();\n+    }\n+\n     // We need nested scopes here, because the intermediate results can keep\n     // large chunks of memory alive and we want to free them as soon as\n     // possible to keep the peak memory usage low\n-    let (outputs, trans): (OutputFilenames, OngoingCrateTranslation) = {\n+    let (outputs, trans): (OutputFilenames, write::OngoingCrateTranslation) = {\n         let krate = match phase_1_parse_input(control, sess, input) {\n             Ok(krate) => krate,\n             Err(mut parse_error) => {\n@@ -214,7 +227,6 @@ pub fn compile_input(sess: &Session,\n                 tcx.print_debug_stats();\n             }\n \n-            #[cfg(feature=\"llvm\")]\n             let trans = phase_4_translate_to_llvm(tcx, analysis, incremental_hashes_map,\n                                                   &outputs);\n \n@@ -230,24 +242,14 @@ pub fn compile_input(sess: &Session,\n                 }\n             }\n \n-            #[cfg(not(feature=\"llvm\"))]\n-            {\n-                let _ = incremental_hashes_map;\n-                sess.err(&format!(\"LLVM is not supported by this rustc\"));\n-                sess.abort_if_errors();\n-                unreachable!();\n-            }\n-\n-            #[cfg(feature=\"llvm\")]\n             Ok((outputs, trans))\n         })??\n     };\n \n     #[cfg(not(feature=\"llvm\"))]\n     {\n-        let _ = outputs;\n-        let _ = trans;\n-        unreachable!();\n+        let (_, _) = (outputs, trans);\n+        sess.fatal(\"LLVM is not supported by this rustc\");\n     }\n \n     #[cfg(feature=\"llvm\")]\n@@ -504,7 +506,6 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n         }\n     }\n \n-    #[cfg(feature=\"llvm\")]\n     fn state_after_llvm(input: &'a Input,\n                         session: &'tcx Session,\n                         out_dir: &'a Option<PathBuf>,\n@@ -518,7 +519,6 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n         }\n     }\n \n-    #[cfg(feature=\"llvm\")]\n     fn state_when_compilation_done(input: &'a Input,\n                                    session: &'tcx Session,\n                                    out_dir: &'a Option<PathBuf>,\n@@ -1095,7 +1095,6 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n \n /// Run the translation phase to LLVM, after which the AST and analysis can\n /// be discarded.\n-#[cfg(feature=\"llvm\")]\n pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            analysis: ty::CrateAnalysis,\n                                            incremental_hashes_map: IncrementalHashesMap,\n@@ -1105,7 +1104,7 @@ pub fn phase_4_translate_to_llvm<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     time(time_passes,\n          \"resolving dependency formats\",\n-         || dependency_format::calculate(tcx));\n+         || ::rustc::middle::dependency_format::calculate(tcx));\n \n     let translation =\n         time(time_passes,\n@@ -1140,9 +1139,9 @@ pub fn phase_5_run_llvm_passes(sess: &Session,\n pub fn phase_6_link_output(sess: &Session,\n                            trans: &trans::CrateTranslation,\n                            outputs: &OutputFilenames) {\n-    time(sess.time_passes(),\n-         \"linking\",\n-         || link::link_binary(sess, trans, outputs, &trans.crate_name.as_str()));\n+    time(sess.time_passes(), \"linking\", || {\n+        ::rustc_trans::back::link::link_binary(sess, trans, outputs, &trans.crate_name.as_str())\n+    });\n }\n \n fn escape_dep_filename(filename: &str) -> String {"}, {"sha": "4fc4b8dab2d9ae4d70944176f30726246be60f93", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 66, "deletions": 60, "changes": 126, "blob_url": "https://github.com/rust-lang/rust/blob/0c97bbf424e976df4de1de0abf8c714095a2924b/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c97bbf424e976df4de1de0abf8c714095a2924b/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=0c97bbf424e976df4de1de0abf8c714095a2924b", "patch": "@@ -28,15 +28,10 @@\n #![feature(rustc_diagnostic_macros)]\n #![feature(set_stdio)]\n \n-#[cfg(not(feature=\"llvm\"))]\n-extern crate ar;\n-\n extern crate arena;\n extern crate getopts;\n extern crate graphviz;\n extern crate env_logger;\n-#[cfg(not(feature=\"llvm\"))]\n-extern crate owning_ref;\n extern crate libc;\n extern crate rustc;\n extern crate rustc_allocator;\n@@ -79,13 +74,9 @@ use rustc::session::config::nightly_options;\n use rustc::session::{early_error, early_warn};\n use rustc::lint::Lint;\n use rustc::lint;\n-#[cfg(not(feature=\"llvm\"))]\n-use rustc::middle::cstore::MetadataLoader as MetadataLoaderTrait;\n use rustc_metadata::locator;\n use rustc_metadata::cstore::CStore;\n use rustc::util::common::{time, ErrorReported};\n-#[cfg(not(feature=\"llvm\"))]\n-use rustc_back::target::Target;\n \n use serialize::json::ToJson;\n \n@@ -98,8 +89,6 @@ use std::ffi::OsString;\n use std::io::{self, Read, Write};\n use std::iter::repeat;\n use std::path::PathBuf;\n-#[cfg(not(feature=\"llvm\"))]\n-use std::path::Path;\n use std::process::{self, Command, Stdio};\n use std::rc::Rc;\n use std::str;\n@@ -112,15 +101,11 @@ use syntax::feature_gate::{GatedCfg, UnstableFeatures};\n use syntax::parse::{self, PResult};\n use syntax_pos::{DUMMY_SP, MultiSpan};\n \n-#[cfg(not(feature=\"llvm\"))]\n-use owning_ref::{OwningRef, ErasedBoxRef};\n-\n #[cfg(test)]\n pub mod test;\n \n pub mod driver;\n pub mod pretty;\n-#[cfg(feature=\"llvm\")]\n pub mod target_features;\n mod derive_registrar;\n \n@@ -167,67 +152,98 @@ pub fn run<F>(run_compiler: F) -> isize\n }\n \n #[cfg(not(feature=\"llvm\"))]\n-pub struct NoLLvmMetadataLoader;\n-\n-#[cfg(not(feature=\"llvm\"))]\n-pub use NoLLvmMetadataLoader as MetadataLoader;\n+pub use no_llvm_metadata_loader::NoLLvmMetadataLoader as MetadataLoader;\n #[cfg(feature=\"llvm\")]\n pub use rustc_trans::LlvmMetadataLoader as MetadataLoader;\n \n #[cfg(not(feature=\"llvm\"))]\n-impl MetadataLoaderTrait for NoLLvmMetadataLoader {\n-    fn get_rlib_metadata(&self, _: &Target, filename: &Path) -> Result<ErasedBoxRef<[u8]>, String> {\n-        use std::fs::File;\n-        use std::io;\n-        use self::ar::Archive;\n-\n-        let file = File::open(filename).map_err(|e|format!(\"metadata file open err: {:?}\", e))?;\n-        let mut archive = Archive::new(file);\n-\n-        while let Some(entry_result) = archive.next_entry() {\n-            let mut entry = entry_result.map_err(|e|format!(\"metadata section read err: {:?}\", e))?;\n-            if entry.header().identifier() == \"rust.metadata.bin\" {\n-                let mut buf = Vec::new();\n-                io::copy(&mut entry, &mut buf).unwrap();\n-                let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n-                return Ok(buf.map_owner_box().erase_owner());\n+mod no_llvm_metadata_loader{\n+    extern crate ar;\n+    extern crate owning_ref;\n+    \n+    use rustc::middle::cstore::MetadataLoader as MetadataLoaderTrait;\n+    use rustc_back::target::Target;\n+    use std::io;\n+    use std::fs::File;\n+    use std::path::Path;\n+    \n+    use self::ar::Archive;\n+    use self::owning_ref::{OwningRef, ErasedBoxRef};\n+\n+    pub struct NoLLvmMetadataLoader;\n+\n+    impl MetadataLoaderTrait for NoLLvmMetadataLoader {\n+        fn get_rlib_metadata(&self, _: &Target, filename: &Path) -> Result<ErasedBoxRef<[u8]>, String> {\n+            let file = File::open(filename).map_err(|e|format!(\"metadata file open err: {:?}\", e))?;\n+            let mut archive = Archive::new(file);\n+\n+            while let Some(entry_result) = archive.next_entry() {\n+                let mut entry = entry_result.map_err(|e|format!(\"metadata section read err: {:?}\", e))?;\n+                if entry.header().identifier() == \"rust.metadata.bin\" {\n+                    let mut buf = Vec::new();\n+                    io::copy(&mut entry, &mut buf).unwrap();\n+                    let buf: OwningRef<Vec<u8>, [u8]> = OwningRef::new(buf).into();\n+                    return Ok(buf.map_owner_box().erase_owner());\n+                }\n             }\n-        }\n \n-        Err(\"Couldnt find metadata section\".to_string())\n-    }\n+            Err(\"Couldnt find metadata section\".to_string())\n+        }\n \n-    fn get_dylib_metadata(&self,\n-                          _target: &Target,\n-                          _filename: &Path)\n-                          -> Result<ErasedBoxRef<[u8]>, String> {\n-        panic!(\"Dylib metadata loading not supported without LLVM\")\n+        fn get_dylib_metadata(&self,\n+                            _target: &Target,\n+                            _filename: &Path)\n+                            -> Result<ErasedBoxRef<[u8]>, String> {\n+            panic!(\"Dylib metadata loading not supported without LLVM\")\n+        }\n     }\n }\n \n-#[cfg(feature=\"llvm\")]\n+#[cfg(not(feature=\"llvm\"))]\n mod rustc_trans {\n+    use syntax_pos::symbol::Symbol;\n+    use rustc::session::Session;\n+    use rustc::session::config::{PrintRequest, OutputFilenames};\n+    use rustc::ty::{TyCtxt, CrateAnalysis};\n     use rustc::ty::maps::Providers;\n+    use rustc_incremental::IncrementalHashesMap;\n+\n+    use self::back::write::OngoingCrateTranslation;\n+\n     pub fn init(_sess: &Session) {}\n     pub fn enable_llvm_debug() {}\n     pub fn provide(_providers: &mut Providers) {}\n+    pub fn print_version() {}\n+    pub fn print_passes() {}\n+    pub fn print(_req: PrintRequest, _sess: &Session) {}\n+    pub fn target_features(_sess: &Session) -> Vec<Symbol> { vec![] }\n+\n+    pub fn trans_crate<'a, 'tcx>(\n+        _tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        _analysis: CrateAnalysis,\n+        _incr_hashes_map: IncrementalHashesMap,\n+        _output_filenames: &OutputFilenames\n+    ) -> OngoingCrateTranslation {\n+        OngoingCrateTranslation(())\n+    }\n+\n     pub struct CrateTranslation(());\n+\n     pub mod back {\n         pub mod write {\n-            pub struct OngoingCrateTranslation(());\n+            pub struct OngoingCrateTranslation(pub (in ::rustc_trans) ());\n+\n+            pub const RELOC_MODEL_ARGS: [(&'static str, ()); 0] = [];\n+            pub const CODE_GEN_MODEL_ARGS: [(&'static str, ()); 0] = [];\n         }\n     }\n-    mod diagnostics {\n-        register_long_diagnostics! {}\n-    }\n \n-    pub use diagnostics::DIAGNOSTICS;\n+    __build_diagnostic_array! { librustc_trans, DIAGNOSTICS }\n }\n \n // Parse args and run the compiler. This is the primary entry point for rustc.\n // See comments on CompilerCalls below for details about the callbacks argument.\n // The FileLoader provides a way to load files from sources other than the file system.\n-#[cfg_attr(not(feature=\"llvm\"), allow(unused_mut))]\n pub fn run_compiler<'a>(args: &[String],\n                         callbacks: &mut CompilerCalls<'a>,\n                         file_loader: Option<Box<FileLoader + 'static>>,\n@@ -282,7 +298,6 @@ pub fn run_compiler<'a>(args: &[String],\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n \n     let mut cfg = config::build_configuration(&sess, cfg);\n-    #[cfg(feature=\"llvm\")]\n     target_features::add_configuration(&mut cfg, &sess);\n     sess.parse_sess.config = cfg;\n \n@@ -535,7 +550,6 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n         Compilation::Continue\n     }\n \n-    #[cfg_attr(not(feature=\"llvm\"), allow(unused_mut))]\n     fn no_input(&mut self,\n                 matches: &getopts::Matches,\n                 sopts: &config::Options,\n@@ -562,7 +576,6 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                 rustc_trans::init(&sess);\n                 rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n                 let mut cfg = config::build_configuration(&sess, cfg.clone());\n-                #[cfg(feature=\"llvm\")]\n                 target_features::add_configuration(&mut cfg, &sess);\n                 sess.parse_sess.config = cfg;\n                 let should_stop =\n@@ -816,25 +829,20 @@ impl RustcDefaultCalls {\n                 }\n                 PrintRequest::RelocationModels => {\n                     println!(\"Available relocation models:\");\n-                    #[cfg(feature=\"llvm\")]\n                     for &(name, _) in rustc_trans::back::write::RELOC_MODEL_ARGS.iter() {\n                         println!(\"    {}\", name);\n                     }\n                     println!(\"\");\n                 }\n                 PrintRequest::CodeModels => {\n                     println!(\"Available code models:\");\n-                    #[cfg(feature=\"llvm\")]\n                     for &(name, _) in rustc_trans::back::write::CODE_GEN_MODEL_ARGS.iter(){\n                         println!(\"    {}\", name);\n                     }\n                     println!(\"\");\n                 }\n                 PrintRequest::TargetCPUs | PrintRequest::TargetFeatures => {\n-                    #[cfg(feature=\"llvm\")]\n                     rustc_trans::print(*req, sess);\n-                    #[cfg(not(feature=\"llvm\"))]\n-                    panic!(\"LLVM not supported by this rustc\")\n                 }\n             }\n         }\n@@ -873,7 +881,6 @@ pub fn version(binary: &str, matches: &getopts::Matches) {\n         println!(\"commit-date: {}\", unw(commit_date_str()));\n         println!(\"host: {}\", config::host_triple());\n         println!(\"release: {}\", unw(release_str()));\n-        #[cfg(feature=\"llvm\")]\n         rustc_trans::print_version();\n     }\n }\n@@ -1171,7 +1178,6 @@ pub fn handle_options(args: &[String]) -> Option<getopts::Matches> {\n     }\n \n     if cg_flags.contains(&\"passes=list\".to_string()) {\n-        #[cfg(feature=\"llvm\")]\n         rustc_trans::print_passes();\n         return None;\n     }"}, {"sha": "b187cdaa480ed17fff846ff205846c7827f78178", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0c97bbf424e976df4de1de0abf8c714095a2924b/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c97bbf424e976df4de1de0abf8c714095a2924b/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=0c97bbf424e976df4de1de0abf8c714095a2924b", "patch": "@@ -14,7 +14,6 @@ use driver;\n use rustc::dep_graph::DepGraph;\n use rustc_lint;\n use rustc_resolve::MakeGlobMap;\n-#[cfg(feature=\"llvm\")]\n use rustc_trans;\n use rustc::middle::lang_items;\n use rustc::middle::free_region::FreeRegionMap;"}]}