{"sha": "26e5bcd22025a0d949b76766af76e92ed4434199", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI2ZTViY2QyMjAyNWEwZDk0OWI3Njc2NmFmNzZlOTJlZDQ0MzQxOTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-11T13:44:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-11T13:44:00Z"}, "message": "Auto merge of #81350 - tmiasko:instrument-debug, r=lcnr\n\nReduce log level used by tracing instrumentation from info to debug\n\nRestore log level to debug to avoid make info log level overly verbose (the uses of instrument attribute modified there, were for the most part a replacement for `debug!`;  one use was novel).", "tree": {"sha": "39029b552b4309d6f6db2ece7c2d8affba89f1e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/39029b552b4309d6f6db2ece7c2d8affba89f1e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/26e5bcd22025a0d949b76766af76e92ed4434199", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/26e5bcd22025a0d949b76766af76e92ed4434199", "html_url": "https://github.com/rust-lang/rust/commit/26e5bcd22025a0d949b76766af76e92ed4434199", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/26e5bcd22025a0d949b76766af76e92ed4434199/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2918062d1d94b65dfd53d265e957d86fcb8bfdbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2918062d1d94b65dfd53d265e957d86fcb8bfdbd", "html_url": "https://github.com/rust-lang/rust/commit/2918062d1d94b65dfd53d265e957d86fcb8bfdbd"}, {"sha": "59457ab86e9554cd045c34fe2f70ce076687df25", "url": "https://api.github.com/repos/rust-lang/rust/commits/59457ab86e9554cd045c34fe2f70ce076687df25", "html_url": "https://github.com/rust-lang/rust/commit/59457ab86e9554cd045c34fe2f70ce076687df25"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "6904ea5b77d16e5f3fadf7b69c1d9239b375b747", "filename": "compiler/rustc_mir/src/interpret/intern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e5bcd22025a0d949b76766af76e92ed4434199/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e5bcd22025a0d949b76766af76e92ed4434199/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintern.rs?ref=26e5bcd22025a0d949b76766af76e92ed4434199", "patch": "@@ -292,7 +292,7 @@ pub enum InternKind {\n /// tracks where in the value we are and thus can show much better error messages.\n /// Any errors here would anyway be turned into `const_err` lints, whereas validation failures\n /// are hard errors.\n-#[tracing::instrument(skip(ecx))]\n+#[tracing::instrument(level = \"debug\", skip(ecx))]\n pub fn intern_const_alloc_recursive<M: CompileTimeMachine<'mir, 'tcx, const_eval::MemoryKind>>(\n     ecx: &mut InterpCx<'mir, 'tcx, M>,\n     intern_kind: InternKind,"}, {"sha": "4973450ca8374beb64a86647ec019cb5bd1bc3cb", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e5bcd22025a0d949b76766af76e92ed4434199/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e5bcd22025a0d949b76766af76e92ed4434199/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=26e5bcd22025a0d949b76766af76e92ed4434199", "patch": "@@ -812,7 +812,7 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n         }\n     }\n \n-    #[instrument(skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn visit_terminator(&mut self, terminator: &Terminator<'tcx>, location: Location) {\n         use rustc_target::spec::abi::Abi::RustIntrinsic;\n "}, {"sha": "ef1419b5b743c8b7035f8e302b5ecb9ca69086e9", "filename": "compiler/rustc_mir_build/src/thir/pattern/const_to_pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e5bcd22025a0d949b76766af76e92ed4434199/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e5bcd22025a0d949b76766af76e92ed4434199/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fconst_to_pat.rs?ref=26e5bcd22025a0d949b76766af76e92ed4434199", "patch": "@@ -18,7 +18,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n     /// Converts an evaluated constant to a pattern (if possible).\n     /// This means aggregate values (like structs and enums) are converted\n     /// to a pattern that matches the value (as if you'd compared via structural equality).\n-    #[instrument(skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     pub(super) fn const_to_pat(\n         &self,\n         cv: &'tcx ty::Const<'tcx>,"}, {"sha": "c908e1418c164713d2078c9c343f8ddc3caa8af8", "filename": "compiler/rustc_trait_selection/src/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e5bcd22025a0d949b76766af76e92ed4434199/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e5bcd22025a0d949b76766af76e92ed4434199/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Fnormalize.rs?ref=26e5bcd22025a0d949b76766af76e92ed4434199", "patch": "@@ -97,7 +97,7 @@ impl<'cx, 'tcx> TypeFolder<'tcx> for QueryNormalizer<'cx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    #[instrument(skip(self))]\n+    #[instrument(level = \"debug\", skip(self))]\n     fn fold_ty(&mut self, ty: Ty<'tcx>) -> Ty<'tcx> {\n         if !ty.has_projections() {\n             return ty;"}, {"sha": "012ccb1af46b16fef82dd19643d3dda41715739c", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e5bcd22025a0d949b76766af76e92ed4434199/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e5bcd22025a0d949b76766af76e92ed4434199/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=26e5bcd22025a0d949b76766af76e92ed4434199", "patch": "@@ -477,7 +477,7 @@ pub(super) fn check_opaque<'tcx>(\n \n /// Checks that an opaque type does not use `Self` or `T::Foo` projections that would result\n /// in \"inheriting lifetimes\".\n-#[instrument(skip(tcx, span))]\n+#[instrument(level = \"debug\", skip(tcx, span))]\n pub(super) fn check_opaque_for_inheriting_lifetimes(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,"}, {"sha": "5df00ea1d75af3a67dc08c9f5ddf792e8e21ce14", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e5bcd22025a0d949b76766af76e92ed4434199/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e5bcd22025a0d949b76766af76e92ed4434199/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=26e5bcd22025a0d949b76766af76e92ed4434199", "patch": "@@ -150,7 +150,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     ///\n     /// Outside of this module, `check_pat_top` should always be used.\n     /// Conversely, inside this module, `check_pat_top` should never be used.\n-    #[instrument(skip(self, ti))]\n+    #[instrument(level = \"debug\", skip(self, ti))]\n     fn check_pat(\n         &self,\n         pat: &'tcx Pat<'tcx>,"}, {"sha": "4e53b8c3615c8a8ab261f84930e685368ae0b0ff", "filename": "compiler/rustc_typeck/src/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/26e5bcd22025a0d949b76766af76e92ed4434199/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26e5bcd22025a0d949b76766af76e92ed4434199/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fvariance%2Fconstraints.rs?ref=26e5bcd22025a0d949b76766af76e92ed4434199", "patch": "@@ -207,7 +207,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n         }\n     }\n \n-    #[instrument(skip(self, current))]\n+    #[instrument(level = \"debug\", skip(self, current))]\n     fn add_constraints_from_invariant_substs(\n         &mut self,\n         current: &CurrentItem,"}]}