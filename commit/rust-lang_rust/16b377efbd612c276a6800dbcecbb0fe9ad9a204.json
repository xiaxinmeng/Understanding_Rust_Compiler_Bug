{"sha": "16b377efbd612c276a6800dbcecbb0fe9ad9a204", "node_id": "C_kwDOAAsO6NoAKDE2YjM3N2VmYmQ2MTJjMjc2YTY4MDBkYmNlY2JiMGZlOWFkOWEyMDQ", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-02-26T02:48:44Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2023-02-26T02:48:44Z"}, "message": "Remove comment", "tree": {"sha": "2bd49a4bd81471771af005c3086e6d7eeb838908", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2bd49a4bd81471771af005c3086e6d7eeb838908"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/16b377efbd612c276a6800dbcecbb0fe9ad9a204", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/16b377efbd612c276a6800dbcecbb0fe9ad9a204", "html_url": "https://github.com/rust-lang/rust/commit/16b377efbd612c276a6800dbcecbb0fe9ad9a204", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/16b377efbd612c276a6800dbcecbb0fe9ad9a204/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edee0973b24382d641c5b1c5ab43ee16e8d4ec36", "url": "https://api.github.com/repos/rust-lang/rust/commits/edee0973b24382d641c5b1c5ab43ee16e8d4ec36", "html_url": "https://github.com/rust-lang/rust/commit/edee0973b24382d641c5b1c5ab43ee16e8d4ec36"}], "stats": {"total": 2, "additions": 1, "deletions": 1}, "files": [{"sha": "233d0b7f739d1b67ac3346fccedd5be84e9cb168", "filename": "src/intrinsic/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/16b377efbd612c276a6800dbcecbb0fe9ad9a204/src%2Fintrinsic%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/16b377efbd612c276a6800dbcecbb0fe9ad9a204/src%2Fintrinsic%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fsimd.rs?ref=16b377efbd612c276a6800dbcecbb0fe9ad9a204", "patch": "@@ -549,7 +549,7 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         let mut mask_values = vec![];\n         for i in 0..in_len {\n             let index = bx.context.new_rvalue_from_long(bx.i32_type, i as i64);\n-            mask_types.push(bx.context.new_field(None, bx.i32_type, \"m\")); // TODO: choose an integer based on the size of the vector element type.\n+            mask_types.push(bx.context.new_field(None, bx.i32_type, \"m\"));\n             let mask_value = bx.context.new_vector_access(None, mask, index).to_rvalue();\n             let masked = bx.context.new_rvalue_from_int(bx.i32_type, in_len as i32) & mask_value;\n             let value = index + masked;"}]}