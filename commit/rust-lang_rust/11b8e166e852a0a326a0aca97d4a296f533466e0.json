{"sha": "11b8e166e852a0a326a0aca97d4a296f533466e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYjhlMTY2ZTg1MmEwYTMyNmEwYWNhOTdkNGEyOTZmNTMzNDY2ZTA=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2019-11-25T14:05:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-25T14:05:25Z"}, "message": "Rollup merge of #66684 - mark-i-m:error-reporting-cleanup, r=davidtwco\n\nDrive-by cleanup in region naming", "tree": {"sha": "18071aede861e5e4c0704768a749ea60fe72e1ed", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18071aede861e5e4c0704768a749ea60fe72e1ed"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11b8e166e852a0a326a0aca97d4a296f533466e0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd29+lCRBK7hj4Ov3rIwAAdHIIAK+XnSrYjN/5yHEd6RSw/rAH\nL9l2oauyTmMjVqCmIX0cMA1+stiwOstsrIFegxvAGM3O2u41eCJf3zfh7lWSJgUo\n+F2V3RdYioqYWm7EWzSVMK3kJLNpa4it5ZB1fXha3K9HcOCiwvcXOfomLwCpyb7A\nQx1FdzOU7RZbsIZI534hb8sjkujP+yf5SWDwbVlYTw0+rcxdcY9xvYARPJOjMvHT\n+i4uoHmkdV0Jxur40Vzb8rF6pd21Xh6fcotaznFFNng83c44jF3GVyMwyDG0HniH\n0GdfcOdyY5bhLZQSa2rF7AMr7ZTV+qVj6JQFwvXK4BhCpvlTsEetY/QFuIquH14=\n=y9XM\n-----END PGP SIGNATURE-----\n", "payload": "tree 18071aede861e5e4c0704768a749ea60fe72e1ed\nparent b6dc227299ed2d4e8d22826c432f17d3a3d18346\nparent 135c8b9297597732daa938d6afada16d36cc42c3\nauthor Pietro Albini <pietro@pietroalbini.org> 1574690725 +0100\ncommitter GitHub <noreply@github.com> 1574690725 +0100\n\nRollup merge of #66684 - mark-i-m:error-reporting-cleanup, r=davidtwco\n\nDrive-by cleanup in region naming\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11b8e166e852a0a326a0aca97d4a296f533466e0", "html_url": "https://github.com/rust-lang/rust/commit/11b8e166e852a0a326a0aca97d4a296f533466e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11b8e166e852a0a326a0aca97d4a296f533466e0/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6dc227299ed2d4e8d22826c432f17d3a3d18346", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6dc227299ed2d4e8d22826c432f17d3a3d18346", "html_url": "https://github.com/rust-lang/rust/commit/b6dc227299ed2d4e8d22826c432f17d3a3d18346"}, {"sha": "135c8b9297597732daa938d6afada16d36cc42c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/135c8b9297597732daa938d6afada16d36cc42c3", "html_url": "https://github.com/rust-lang/rust/commit/135c8b9297597732daa938d6afada16d36cc42c3"}], "stats": {"total": 43, "additions": 21, "deletions": 22}, "files": [{"sha": "a8cc0cc044a01ce437bbae0e91ef3ca9f962c544", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 21, "deletions": 22, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/11b8e166e852a0a326a0aca97d4a296f533466e0/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11b8e166e852a0a326a0aca97d4a296f533466e0/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=11b8e166e852a0a326a0aca97d4a296f533466e0", "patch": "@@ -77,17 +77,30 @@ impl RegionErrorNamingCtx {\n         }\n     }\n \n+    /// Get the name of `region` if it has previously been named.\n     crate fn get(&self, region: &RegionVid) -> Option<&RegionName> {\n         self.renctx.get(region)\n     }\n \n+    /// Give `region` the name `name`.\n     crate fn insert(&mut self, region: RegionVid, name: RegionName) {\n         self.renctx.insert(region, name);\n     }\n+\n+    /// Creates a synthetic region named `'N`, where `N` is the next value of the counter. Then,\n+    /// increment the counter.\n+    ///\n+    /// The name is not memoized. A separate call to `insert` should be made later. (Currently,\n+    /// this happens at the end of `give_region_a_name`).\n+    crate fn synthesize_region_name(&mut self) -> Symbol {\n+        let c = self.counter;\n+        self.counter += 1;\n+\n+        Symbol::intern(&format!(\"'{:?}\", c))\n+    }\n }\n \n impl RegionName {\n-    #[allow(dead_code)]\n     crate fn was_named(&self) -> bool {\n         match self.source {\n             RegionNameSource::NamedEarlyBoundRegion(..) |\n@@ -103,12 +116,6 @@ impl RegionName {\n         }\n     }\n \n-    #[allow(dead_code)]\n-    crate fn was_synthesized(&self) -> bool {\n-        !self.was_named()\n-    }\n-\n-    #[allow(dead_code)]\n     crate fn name(&self) -> Symbol {\n         self.name\n     }\n@@ -298,7 +305,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                         } else {\n                             bug!(\"Closure is not defined by a closure expr\");\n                         };\n-                        let region_name = self.synthesize_region_name(renctx);\n+                        let region_name = renctx.synthesize_region_name();\n \n                         let closure_kind_ty = substs.as_closure().kind_ty(def_id, tcx);\n                         let note = match closure_kind_ty.to_opt_closure_kind() {\n@@ -478,7 +485,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 // This counter value will already have been used, so this function will increment\n                 // it so the next value will be used next and return the region name that would\n                 // have been used.\n-                name: self.synthesize_region_name(renctx),\n+                name: renctx.synthesize_region_name(),\n                 source: RegionNameSource::CannotMatchHirTy(span, type_name),\n             })\n         } else {\n@@ -533,7 +540,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     hir::TyKind::Rptr(_lifetime, referent_hir_ty),\n                 ) => {\n                     if region.to_region_vid() == needle_fr {\n-                        let region_name = self.synthesize_region_name(renctx);\n+                        let region_name = renctx.synthesize_region_name();\n \n                         // Just grab the first character, the `&`.\n                         let source_map = tcx.sess.source_map();\n@@ -621,7 +628,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             | hir::LifetimeName::Error\n             | hir::LifetimeName::Static\n             | hir::LifetimeName::Underscore => {\n-                let region_name = self.synthesize_region_name(renctx);\n+                let region_name = renctx.synthesize_region_name();\n                 let ampersand_span = lifetime.span;\n                 Some(RegionName {\n                     name: region_name,\n@@ -713,7 +720,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let upvar_index = self.get_upvar_index_for_region(tcx, fr)?;\n         let (upvar_name, upvar_span) =\n             self.get_upvar_name_and_span_for_region(tcx, upvars, upvar_index);\n-        let region_name = self.synthesize_region_name(renctx);\n+        let region_name = renctx.synthesize_region_name();\n \n         Some(RegionName {\n             name: region_name,\n@@ -776,7 +783,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             // This counter value will already have been used, so this function will increment it\n             // so the next value will be used next and return the region name that would have been\n             // used.\n-            name: self.synthesize_region_name(renctx),\n+            name: renctx.synthesize_region_name(),\n             source: RegionNameSource::AnonRegionFromOutput(\n                 return_span,\n                 mir_description.to_string(),\n@@ -831,16 +838,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         );\n \n         Some(RegionName {\n-            name: self.synthesize_region_name(renctx),\n+            name: renctx.synthesize_region_name(),\n             source: RegionNameSource::AnonRegionFromYieldTy(yield_span, type_name),\n         })\n     }\n-\n-    /// Creates a synthetic region named `'1`, incrementing the counter.\n-    fn synthesize_region_name(&self, renctx: &mut RegionErrorNamingCtx) -> Symbol {\n-        let c = renctx.counter;\n-        renctx.counter += 1;\n-\n-        Symbol::intern(&format!(\"'{:?}\", c))\n-    }\n }"}]}