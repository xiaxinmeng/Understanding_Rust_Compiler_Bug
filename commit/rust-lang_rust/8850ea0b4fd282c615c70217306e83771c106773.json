{"sha": "8850ea0b4fd282c615c70217306e83771c106773", "node_id": "C_kwDOAAsO6NoAKDg4NTBlYTBiNGZkMjgyYzYxNWM3MDIxNzMwNmU4Mzc3MWMxMDY3NzM", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-29T01:09:39Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-29T01:09:39Z"}, "message": "collect defs from body blocks", "tree": {"sha": "e6f52ca71a5bf87ff38cd3bd242c195341c3f23a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e6f52ca71a5bf87ff38cd3bd242c195341c3f23a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8850ea0b4fd282c615c70217306e83771c106773", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8850ea0b4fd282c615c70217306e83771c106773", "html_url": "https://github.com/rust-lang/rust/commit/8850ea0b4fd282c615c70217306e83771c106773", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8850ea0b4fd282c615c70217306e83771c106773/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257", "url": "https://api.github.com/repos/rust-lang/rust/commits/8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257", "html_url": "https://github.com/rust-lang/rust/commit/8307d38dc1c1eb8a26d4a9e1a8e40832d1fd1257"}], "stats": {"total": 79, "additions": 56, "deletions": 23}, "files": [{"sha": "3308170773907d7d07e2a38b1fe5ecd48e2ad4a8", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8850ea0b4fd282c615c70217306e83771c106773/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8850ea0b4fd282c615c70217306e83771c106773/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=8850ea0b4fd282c615c70217306e83771c106773", "patch": "@@ -44,9 +44,9 @@ use hir_def::{\n     nameres,\n     per_ns::PerNs,\n     resolver::{HasResolver, Resolver},\n-    AssocItemId, AttrDefId, ConstId, ConstParamId, DefWithBodyId, EnumId, FunctionId, GenericDefId,\n-    HasModule, ImplId, LifetimeParamId, LocalEnumVariantId, LocalFieldId, StaticId, StructId,\n-    TraitId, TypeAliasId, TypeParamId, UnionId,\n+    AssocItemId, AttrDefId, ConstId, ConstParamId, EnumId, FunctionId, GenericDefId, HasModule,\n+    ImplId, LifetimeParamId, LocalEnumVariantId, LocalFieldId, StaticId, StructId, TraitId,\n+    TypeAliasId, TypeParamId, UnionId,\n };\n use hir_expand::{name::name, MacroCallKind, MacroDefId, MacroDefKind};\n use hir_ty::{\n@@ -116,6 +116,7 @@ pub use {\n         AdtId,\n         AssocContainerId,\n         AssocItemLoc,\n+        DefWithBodyId,\n         ItemLoc,\n         Lookup,\n         ModuleDefId,"}, {"sha": "c4e02ba1da2edaf678b833bee7678aad8c1b62f6", "filename": "crates/ide_db/src/symbol_index.rs", "status": "modified", "additions": 52, "deletions": 20, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/8850ea0b4fd282c615c70217306e83771c106773/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8850ea0b4fd282c615c70217306e83771c106773/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fsymbol_index.rs?ref=8850ea0b4fd282c615c70217306e83771c106773", "patch": "@@ -34,8 +34,8 @@ use base_db::{\n };\n use fst::{self, Streamer};\n use hir::{\n-    db::DefDatabase, AdtId, AssocContainerId, AssocItemLoc, DefHasSource, HirFileId, InFile,\n-    ItemLoc, ItemScope, ItemTreeNode, Lookup, ModuleData, ModuleDefId, ModuleId, Semantics,\n+    db::DefDatabase, AdtId, AssocContainerId, AssocItemLoc, DefHasSource, DefWithBodyId, HirFileId,\n+    InFile, ItemLoc, ItemScope, ItemTreeNode, Lookup, ModuleData, ModuleDefId, ModuleId, Semantics,\n };\n use rayon::prelude::*;\n use rustc_hash::{FxHashMap, FxHashSet};\n@@ -542,23 +542,55 @@ fn collect_symbols_from_item_scope(\n         })\n     }\n \n-    let symbols_iter = scope.declarations().filter_map(|module_def_id| match module_def_id {\n-        ModuleDefId::ModuleId(module_id) => decl_module(db, module_id),\n-        ModuleDefId::FunctionId(function_id) => {\n-            decl_assoc(db, function_id, FileSymbolKind::Function)\n-        }\n-        ModuleDefId::AdtId(AdtId::StructId(struct_id)) => {\n-            decl(db, struct_id, FileSymbolKind::Struct)\n+    let collect_symbols_from_scope =\n+        |scope: &ItemScope,\n+         symbols: &mut Vec<FileSymbol>,\n+         bodies_to_traverse: &mut Vec<DefWithBodyId>| {\n+            let symbols_iter =\n+                scope.declarations().filter_map(|module_def_id| match module_def_id {\n+                    ModuleDefId::ModuleId(module_id) => decl_module(db, module_id),\n+                    ModuleDefId::FunctionId(function_id) => {\n+                        bodies_to_traverse.push(function_id.into());\n+                        decl_assoc(db, function_id, FileSymbolKind::Function)\n+                    }\n+                    ModuleDefId::AdtId(AdtId::StructId(struct_id)) => {\n+                        decl(db, struct_id, FileSymbolKind::Struct)\n+                    }\n+                    ModuleDefId::AdtId(AdtId::EnumId(enum_id)) => {\n+                        decl(db, enum_id, FileSymbolKind::Enum)\n+                    }\n+                    ModuleDefId::AdtId(AdtId::UnionId(union_id)) => {\n+                        decl(db, union_id, FileSymbolKind::Union)\n+                    }\n+                    ModuleDefId::ConstId(const_id) => {\n+                        bodies_to_traverse.push(const_id.into());\n+                        decl_assoc(db, const_id, FileSymbolKind::Const)\n+                    }\n+                    ModuleDefId::StaticId(static_id) => {\n+                        bodies_to_traverse.push(static_id.into());\n+                        decl(db, static_id, FileSymbolKind::Static)\n+                    }\n+                    ModuleDefId::TraitId(trait_id) => decl(db, trait_id, FileSymbolKind::Trait),\n+                    ModuleDefId::TypeAliasId(alias_id) => {\n+                        decl_assoc(db, alias_id, FileSymbolKind::TypeAlias)\n+                    }\n+                    ModuleDefId::BuiltinType(_) => None,\n+                    ModuleDefId::EnumVariantId(_) => None,\n+                });\n+\n+            symbols.extend(symbols_iter);\n+        };\n+\n+    let mut bodies_to_traverse = Vec::new();\n+    collect_symbols_from_scope(scope, symbols, &mut bodies_to_traverse);\n+\n+    while let Some(body) = bodies_to_traverse.pop() {\n+        let body = db.body(body);\n+\n+        for (_, block_def_map) in body.blocks(db) {\n+            for (_, module_data) in block_def_map.modules() {\n+                collect_symbols_from_scope(&module_data.scope, symbols, &mut bodies_to_traverse);\n+            }\n         }\n-        ModuleDefId::AdtId(AdtId::EnumId(enum_id)) => decl(db, enum_id, FileSymbolKind::Enum),\n-        ModuleDefId::AdtId(AdtId::UnionId(union_id)) => decl(db, union_id, FileSymbolKind::Union),\n-        ModuleDefId::EnumVariantId(_) => None,\n-        ModuleDefId::ConstId(const_id) => decl_assoc(db, const_id, FileSymbolKind::Const),\n-        ModuleDefId::StaticId(static_id) => decl(db, static_id, FileSymbolKind::Static),\n-        ModuleDefId::TraitId(trait_id) => decl(db, trait_id, FileSymbolKind::Trait),\n-        ModuleDefId::TypeAliasId(alias_id) => decl_assoc(db, alias_id, FileSymbolKind::TypeAlias),\n-        ModuleDefId::BuiltinType(_) => None,\n-    });\n-\n-    symbols.extend(symbols_iter);\n+    }\n }"}]}