{"sha": "1927c2e1d8d222656cae7051cdd924aa44428622", "node_id": "C_kwDOAAsO6NoAKDE5MjdjMmUxZDhkMjIyNjU2Y2FlNzA1MWNkZDkyNGFhNDQ0Mjg2MjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-24T17:58:32Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-12-24T17:58:32Z"}, "message": "Auto merge of #13830 - nyurik:lints, r=lnicola\n\nMinor manual cleanup\n\n* use default derive\n* use `strip_prefix` where possible to avoid dup work", "tree": {"sha": "28d6f3b1e00ac3d94c7e9a9fa94e1a8a5a686e03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28d6f3b1e00ac3d94c7e9a9fa94e1a8a5a686e03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1927c2e1d8d222656cae7051cdd924aa44428622", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1927c2e1d8d222656cae7051cdd924aa44428622", "html_url": "https://github.com/rust-lang/rust/commit/1927c2e1d8d222656cae7051cdd924aa44428622", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1927c2e1d8d222656cae7051cdd924aa44428622/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb0db2a4202165cf501a755f4d12210043ffb90a", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb0db2a4202165cf501a755f4d12210043ffb90a", "html_url": "https://github.com/rust-lang/rust/commit/fb0db2a4202165cf501a755f4d12210043ffb90a"}, {"sha": "ec55dd1d7b766bb2cf5cb91f77fbb175c20e128f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ec55dd1d7b766bb2cf5cb91f77fbb175c20e128f", "html_url": "https://github.com/rust-lang/rust/commit/ec55dd1d7b766bb2cf5cb91f77fbb175c20e128f"}], "stats": {"total": 33, "additions": 9, "deletions": 24}, "files": [{"sha": "dd6203e2eeb997f9558f16299f0ba03e2bbd55ff", "filename": "crates/proc-macro-test/build.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/1927c2e1d8d222656cae7051cdd924aa44428622/crates%2Fproc-macro-test%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1927c2e1d8d222656cae7051cdd924aa44428622/crates%2Fproc-macro-test%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproc-macro-test%2Fbuild.rs?ref=1927c2e1d8d222656cae7051cdd924aa44428622", "patch": "@@ -85,16 +85,13 @@ fn main() {\n \n     let mut artifact_path = None;\n     for message in Message::parse_stream(output.stdout.as_slice()) {\n-        match message.unwrap() {\n-            Message::CompilerArtifact(artifact) => {\n-                if artifact.target.kind.contains(&\"proc-macro\".to_string()) {\n-                    let repr = format!(\"{} {}\", name, version);\n-                    if artifact.package_id.repr.starts_with(&repr) {\n-                        artifact_path = Some(PathBuf::from(&artifact.filenames[0]));\n-                    }\n+        if let Message::CompilerArtifact(artifact) = message.unwrap() {\n+            if artifact.target.kind.contains(&\"proc-macro\".to_string()) {\n+                let repr = format!(\"{} {}\", name, version);\n+                if artifact.package_id.repr.starts_with(&repr) {\n+                    artifact_path = Some(PathBuf::from(&artifact.filenames[0]));\n                 }\n             }\n-            _ => (), // Unknown message\n         }\n     }\n "}, {"sha": "700aebe0b34f1e5f5294c86d0554134045b176ef", "filename": "crates/vfs/src/file_set.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1927c2e1d8d222656cae7051cdd924aa44428622/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1927c2e1d8d222656cae7051cdd924aa44428622/crates%2Fvfs%2Fsrc%2Ffile_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Ffile_set.rs?ref=1927c2e1d8d222656cae7051cdd924aa44428622", "patch": "@@ -140,16 +140,11 @@ impl FileSetConfig {\n }\n \n /// Builder for [`FileSetConfig`].\n+#[derive(Default)]\n pub struct FileSetConfigBuilder {\n     roots: Vec<Vec<VfsPath>>,\n }\n \n-impl Default for FileSetConfigBuilder {\n-    fn default() -> Self {\n-        FileSetConfigBuilder { roots: Vec::new() }\n-    }\n-}\n-\n impl FileSetConfigBuilder {\n     /// Returns the number of sets currently held.\n     pub fn len(&self) -> usize {"}, {"sha": "64f51976053d490cc25ae317a182feff19e0be65", "filename": "crates/vfs/src/path_interner.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1927c2e1d8d222656cae7051cdd924aa44428622/crates%2Fvfs%2Fsrc%2Fpath_interner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1927c2e1d8d222656cae7051cdd924aa44428622/crates%2Fvfs%2Fsrc%2Fpath_interner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fvfs%2Fsrc%2Fpath_interner.rs?ref=1927c2e1d8d222656cae7051cdd924aa44428622", "patch": "@@ -9,16 +9,11 @@ use rustc_hash::FxHasher;\n use crate::{FileId, VfsPath};\n \n /// Structure to map between [`VfsPath`] and [`FileId`].\n+#[derive(Default)]\n pub(crate) struct PathInterner {\n     map: IndexSet<VfsPath, BuildHasherDefault<FxHasher>>,\n }\n \n-impl Default for PathInterner {\n-    fn default() -> Self {\n-        Self { map: IndexSet::default() }\n-    }\n-}\n-\n impl PathInterner {\n     /// Get the id corresponding to `path`.\n     ///"}, {"sha": "7df8f89dbe22a441176467180acf800dbc69c422", "filename": "xtask/src/release/changelog.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1927c2e1d8d222656cae7051cdd924aa44428622/xtask%2Fsrc%2Frelease%2Fchangelog.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1927c2e1d8d222656cae7051cdd924aa44428622/xtask%2Fsrc%2Frelease%2Fchangelog.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Frelease%2Fchangelog.rs?ref=1927c2e1d8d222656cae7051cdd924aa44428622", "patch": "@@ -113,11 +113,9 @@ fn unescape(s: &str) -> String {\n fn parse_pr_number(s: &str) -> Option<u32> {\n     const BORS_PREFIX: &str = \"Merge #\";\n     const HOMU_PREFIX: &str = \"Auto merge of #\";\n-    if s.starts_with(BORS_PREFIX) {\n-        let s = &s[BORS_PREFIX.len()..];\n+    if let Some(s) = s.strip_prefix(BORS_PREFIX) {\n         s.parse().ok()\n-    } else if s.starts_with(HOMU_PREFIX) {\n-        let s = &s[HOMU_PREFIX.len()..];\n+    } else if let Some(s) = s.strip_prefix(HOMU_PREFIX) {\n         if let Some(space) = s.find(' ') {\n             s[..space].parse().ok()\n         } else {"}]}