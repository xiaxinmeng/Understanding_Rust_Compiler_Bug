{"sha": "4cb7bd36d7809d656d585656b9002b12d6d40e4f", "node_id": "C_kwDOAAsO6NoAKDRjYjdiZDM2ZDc4MDlkNjU2ZDU4NTY1NmI5MDAyYjEyZDZkNDBlNGY", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-12-22T21:44:51Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2022-12-23T23:14:54Z"}, "message": "Codegen test for derived `<` on trivial newtype [TEST ONLY]", "tree": {"sha": "8af5d755e2588d4a9e528efb458950d42846bee9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8af5d755e2588d4a9e528efb458950d42846bee9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cb7bd36d7809d656d585656b9002b12d6d40e4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb7bd36d7809d656d585656b9002b12d6d40e4f", "html_url": "https://github.com/rust-lang/rust/commit/4cb7bd36d7809d656d585656b9002b12d6d40e4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cb7bd36d7809d656d585656b9002b12d6d40e4f/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5e4eef02d443eae5089a330e59a69a4f350db81", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e4eef02d443eae5089a330e59a69a4f350db81", "html_url": "https://github.com/rust-lang/rust/commit/e5e4eef02d443eae5089a330e59a69a4f350db81"}], "stats": {"total": 49, "additions": 49, "deletions": 0}, "files": [{"sha": "5cf6c3ac0a2333f55db87a00349ae93ae0ee9fef", "filename": "src/test/codegen/comparison-operators-newtype.rs", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/4cb7bd36d7809d656d585656b9002b12d6d40e4f/src%2Ftest%2Fcodegen%2Fcomparison-operators-newtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb7bd36d7809d656d585656b9002b12d6d40e4f/src%2Ftest%2Fcodegen%2Fcomparison-operators-newtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fcomparison-operators-newtype.rs?ref=4cb7bd36d7809d656d585656b9002b12d6d40e4f", "patch": "@@ -0,0 +1,49 @@\n+// The `derive(PartialOrd)` for a newtype doesn't override `lt`/`le`/`gt`/`ge`.\n+// This double-checks that the `Option<Ordering>` intermediate values used\n+// in the operators for such a type all optimize away.\n+\n+// compile-flags: -C opt-level=1\n+// min-llvm-version: 15.0\n+\n+#![crate_type = \"lib\"]\n+\n+use std::cmp::Ordering;\n+\n+#[derive(PartialOrd, PartialEq)]\n+pub struct Foo(u16);\n+\n+// CHECK-LABEL: @check_lt\n+// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+#[no_mangle]\n+pub fn check_lt(a: Foo, b: Foo) -> bool {\n+    // CHECK: %[[R:.+]] = icmp ult i16 %[[A]], %[[B]]\n+    // CHECK-NEXT: ret i1 %[[R]]\n+    a < b\n+}\n+\n+// CHECK-LABEL: @check_le\n+// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+#[no_mangle]\n+pub fn check_le(a: Foo, b: Foo) -> bool {\n+    // CHECK: %[[R:.+]] = icmp ule i16 %[[A]], %[[B]]\n+    // CHECK-NEXT: ret i1 %[[R]]\n+    a <= b\n+}\n+\n+// CHECK-LABEL: @check_gt\n+// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+#[no_mangle]\n+pub fn check_gt(a: Foo, b: Foo) -> bool {\n+    // CHECK: %[[R:.+]] = icmp ugt i16 %[[A]], %[[B]]\n+    // CHECK-NEXT: ret i1 %[[R]]\n+    a > b\n+}\n+\n+// CHECK-LABEL: @check_ge\n+// CHECK-SAME: (i16 %[[A:.+]], i16 %[[B:.+]])\n+#[no_mangle]\n+pub fn check_ge(a: Foo, b: Foo) -> bool {\n+    // CHECK: %[[R:.+]] = icmp uge i16 %[[A]], %[[B]]\n+    // CHECK-NEXT: ret i1 %[[R]]\n+    a >= b\n+}"}]}