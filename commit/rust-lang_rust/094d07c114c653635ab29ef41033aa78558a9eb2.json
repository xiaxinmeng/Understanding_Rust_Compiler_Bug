{"sha": "094d07c114c653635ab29ef41033aa78558a9eb2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA5NGQwN2MxMTRjNjUzNjM1YWIyOWVmNDEwMzNhYTc4NTU4YTllYjI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-22T07:21:05Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-22T07:21:05Z"}, "message": "Merge remote-tracking branch 'origin/master' into rustup", "tree": {"sha": "14da8061f42c39f51ea4d4c6b89dd453edea319f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14da8061f42c39f51ea4d4c6b89dd453edea319f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/094d07c114c653635ab29ef41033aa78558a9eb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/094d07c114c653635ab29ef41033aa78558a9eb2", "html_url": "https://github.com/rust-lang/rust/commit/094d07c114c653635ab29ef41033aa78558a9eb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/094d07c114c653635ab29ef41033aa78558a9eb2/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "984c3368a9d362eb1523d47c9efce20c793cd825", "url": "https://api.github.com/repos/rust-lang/rust/commits/984c3368a9d362eb1523d47c9efce20c793cd825", "html_url": "https://github.com/rust-lang/rust/commit/984c3368a9d362eb1523d47c9efce20c793cd825"}, {"sha": "e26ecc42c8553b3e77912eb2817fe87aff67149e", "url": "https://api.github.com/repos/rust-lang/rust/commits/e26ecc42c8553b3e77912eb2817fe87aff67149e", "html_url": "https://github.com/rust-lang/rust/commit/e26ecc42c8553b3e77912eb2817fe87aff67149e"}], "stats": {"total": 50, "additions": 17, "deletions": 33}, "files": [{"sha": "f26ef40ea9f8342623f43e498d8387388b86f203", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 7, "deletions": 30, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/094d07c114c653635ab29ef41033aa78558a9eb2/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094d07c114c653635ab29ef41033aa78558a9eb2/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=094d07c114c653635ab29ef41033aa78558a9eb2", "patch": "@@ -151,6 +151,10 @@ impl<'tcx> Stack {\n     /// Returns the index of the item we matched, `None` if it was the frozen one.\n     /// `kind` indicates which kind of reference is being dereferenced.\n     fn deref(&self, bor: Borrow, kind: RefKind) -> Result<Option<usize>, String> {\n+        // Exclude unique ref with frozen tag.\n+        if let (RefKind::Unique, Borrow::Shr(Some(_))) = (kind, bor) {\n+            return Err(format!(\"Encountered mutable reference with frozen tag ({:?})\", bor));\n+        }\n         // Checks related to freezing\n         match bor {\n             Borrow::Shr(Some(bor_t)) if kind == RefKind::Frozen => {\n@@ -490,36 +494,9 @@ impl<'a, 'mir, 'tcx> EvalContextExt<'tcx> for MiriEvalContext<'a, 'mir, 'tcx> {\n             if let Some(mutability) = mutability { format!(\"{:?}\", mutability) } else { format!(\"raw\") },\n             place.ptr, place.layout.ty);\n         let ptr = place.ptr.to_ptr()?;\n-        // In principle we should not have to do anything here.  However, with transmutes involved,\n-        // it can happen that the tag of `ptr` does not actually match `mutability`, and we\n-        // should adjust for that.\n-        // Notably, the compiler can introduce such transmutes by optimizing away `&[mut]*`.\n-        // That can transmute a raw ptr to a (shared/mut) ref, and a mut ref to a shared one.\n-        match (mutability, ptr.tag) {\n-            (None, _) => {\n-                // No further validation on raw accesses.\n-                return Ok(());\n-            }\n-            (Some(MutMutable), Borrow::Uniq(_)) |\n-            (Some(MutImmutable), Borrow::Shr(_)) => {\n-                // Expected combinations.  Nothing to do.\n-            }\n-            (Some(MutMutable), Borrow::Shr(None)) => {\n-                // Raw transmuted to mut ref.  This is something real unsafe code does.\n-                // We cannot reborrow here because we do not want to mutate state on a deref.\n-            }\n-            (Some(MutImmutable), Borrow::Uniq(_)) => {\n-                // A mut got transmuted to shr.  Can happen even from compiler transformations:\n-                // `&*x` gets optimized to `x` even when `x` is a `&mut`.\n-            }\n-            (Some(MutMutable), Borrow::Shr(Some(_))) => {\n-                // This is just invalid: A shr got transmuted to a mut.\n-                // If we ever allow this, we have to consider what we do when a turn a\n-                // `Raw`-tagged `&mut` into a raw pointer pointing to a frozen location.\n-                // We probably do not want to allow that, but we have to allow\n-                // turning a `Raw`-tagged `&` into a raw ptr to a frozen location.\n-                return err!(MachineError(format!(\"Encountered mutable reference with frozen tag {:?}\", ptr.tag)))\n-            }\n+        if mutability.is_none() {\n+            // No further checks on raw derefs -- only the access itself will be checked.\n+            return Ok(());\n         }\n \n         // Get the allocation"}, {"sha": "c092cbfe5098594ea79af8b5da8019842b270410", "filename": "tests/compile-fail-fullmir/stacked_borrows/static_memory_modification.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/094d07c114c653635ab29ef41033aa78558a9eb2/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fstatic_memory_modification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094d07c114c653635ab29ef41033aa78558a9eb2/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fstatic_memory_modification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail-fullmir%2Fstacked_borrows%2Fstatic_memory_modification.rs?ref=094d07c114c653635ab29ef41033aa78558a9eb2", "patch": "@@ -1,6 +1,3 @@\n-// FIXME still considering whether we are okay with this not being an error\n-// ignore-test\n-\n static X: usize = 5;\n \n #[allow(mutable_transmutes)]"}, {"sha": "93bdf5ffbf326bef3bf65f38a1e72aa169771da9", "filename": "tests/run-pass/stacked-borrows.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/094d07c114c653635ab29ef41033aa78558a9eb2/tests%2Frun-pass%2Fstacked-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/094d07c114c653635ab29ef41033aa78558a9eb2/tests%2Frun-pass%2Fstacked-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstacked-borrows.rs?ref=094d07c114c653635ab29ef41033aa78558a9eb2", "patch": "@@ -7,6 +7,7 @@ fn main() {\n     mut_shr_raw();\n     mut_raw_then_mut_shr();\n     mut_raw_mut();\n+    partially_invalidate_mut();\n }\n \n // Deref a raw ptr to access a field of a large struct, where the field\n@@ -97,3 +98,12 @@ fn mut_raw_mut() {\n     }\n     assert_eq!(x, 4);\n }\n+\n+fn partially_invalidate_mut() {\n+    let data = &mut (0u8, 0u8);\n+    let reborrow = &mut *data as *mut (u8, u8);\n+    let shard = unsafe { &mut (*reborrow).0 };\n+    data.1 += 1; // the deref overlaps with `shard`, but that is okay; the access does not overlap.\n+    *shard += 1; // so we can still use `shard`.\n+    assert_eq!(*data, (1, 1));\n+}"}]}