{"sha": "51c0dd427b63faf6d3a3810ebd7942aae9a62065", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxYzBkZDQyN2I2M2ZhZjZkM2EzODEwZWJkNzk0MmFhZTlhNjIwNjU=", "commit": {"author": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-01-13T19:03:22Z"}, "committer": {"name": "Wilco Kusee", "email": "wilcokusee@gmail.com", "date": "2019-01-13T19:03:22Z"}, "message": "Add run-rustfix to unnecessary_fold", "tree": {"sha": "c1bce70e5bfea2df6aa44335c863d906c4ac62ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1bce70e5bfea2df6aa44335c863d906c4ac62ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51c0dd427b63faf6d3a3810ebd7942aae9a62065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51c0dd427b63faf6d3a3810ebd7942aae9a62065", "html_url": "https://github.com/rust-lang/rust/commit/51c0dd427b63faf6d3a3810ebd7942aae9a62065", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51c0dd427b63faf6d3a3810ebd7942aae9a62065/comments", "author": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "detrumi", "id": 5758008, "node_id": "MDQ6VXNlcjU3NTgwMDg=", "avatar_url": "https://avatars.githubusercontent.com/u/5758008?v=4", "gravatar_id": "", "url": "https://api.github.com/users/detrumi", "html_url": "https://github.com/detrumi", "followers_url": "https://api.github.com/users/detrumi/followers", "following_url": "https://api.github.com/users/detrumi/following{/other_user}", "gists_url": "https://api.github.com/users/detrumi/gists{/gist_id}", "starred_url": "https://api.github.com/users/detrumi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/detrumi/subscriptions", "organizations_url": "https://api.github.com/users/detrumi/orgs", "repos_url": "https://api.github.com/users/detrumi/repos", "events_url": "https://api.github.com/users/detrumi/events{/privacy}", "received_events_url": "https://api.github.com/users/detrumi/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c325137d086e76bbe658ad9ebe44979743b03264", "url": "https://api.github.com/repos/rust-lang/rust/commits/c325137d086e76bbe658ad9ebe44979743b03264", "html_url": "https://github.com/rust-lang/rust/commit/c325137d086e76bbe658ad9ebe44979743b03264"}], "stats": {"total": 76, "additions": 62, "deletions": 14}, "files": [{"sha": "5f12d72a76ae1911a8a3468ed804b48aecd4bc9a", "filename": "tests/ui/unnecessary_fold.fixed", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/51c0dd427b63faf6d3a3810ebd7942aae9a62065/tests%2Fui%2Funnecessary_fold.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/51c0dd427b63faf6d3a3810ebd7942aae9a62065/tests%2Fui%2Funnecessary_fold.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_fold.fixed?ref=51c0dd427b63faf6d3a3810ebd7942aae9a62065", "patch": "@@ -0,0 +1,44 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n+/// Calls which should trigger the `UNNECESSARY_FOLD` lint\n+fn unnecessary_fold() {\n+    // Can be replaced by .any\n+    let _ = (0..3).any(|x| x > 2);\n+    // Can be replaced by .all\n+    let _ = (0..3).all(|x| x > 2);\n+    // Can be replaced by .sum\n+    let _: i32 = (0..3).sum();\n+    // Can be replaced by .product\n+    let _: i32 = (0..3).product();\n+}\n+\n+/// Should trigger the `UNNECESSARY_FOLD` lint, with an error span including exactly `.fold(...)`\n+fn unnecessary_fold_span_for_multi_element_chain() {\n+    let _: bool = (0..3).map(|x| 2 * x).any(|x| x > 2);\n+}\n+\n+/// Calls which should not trigger the `UNNECESSARY_FOLD` lint\n+fn unnecessary_fold_should_ignore() {\n+    let _ = (0..3).fold(true, |acc, x| acc || x > 2);\n+    let _ = (0..3).fold(false, |acc, x| acc && x > 2);\n+    let _ = (0..3).fold(1, |acc, x| acc + x);\n+    let _ = (0..3).fold(0, |acc, x| acc * x);\n+    let _ = (0..3).fold(0, |acc, x| 1 + acc + x);\n+\n+    // We only match against an accumulator on the left\n+    // hand side. We could lint for .sum and .product when\n+    // it's on the right, but don't for now (and this wouldn't\n+    // be valid if we extended the lint to cover arbitrary numeric\n+    // types).\n+    let _ = (0..3).fold(false, |acc, x| x > 2 || acc);\n+    let _ = (0..3).fold(true, |acc, x| x > 2 && acc);\n+    let _ = (0..3).fold(0, |acc, x| x + acc);\n+    let _ = (0..3).fold(1, |acc, x| x * acc);\n+\n+    let _ = [(0..2), (0..3)].iter().fold(0, |a, b| a + b.len());\n+    let _ = [(0..2), (0..3)].iter().fold(1, |a, b| a * b.len());\n+}\n+\n+fn main() {}"}, {"sha": "ae667d1ac06326660af6ff5fb148c5fe5f757f49", "filename": "tests/ui/unnecessary_fold.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/51c0dd427b63faf6d3a3810ebd7942aae9a62065/tests%2Fui%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51c0dd427b63faf6d3a3810ebd7942aae9a62065/tests%2Fui%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_fold.rs?ref=51c0dd427b63faf6d3a3810ebd7942aae9a62065", "patch": "@@ -1,18 +1,22 @@\n+// run-rustfix\n+\n+#![allow(dead_code)]\n+\n /// Calls which should trigger the `UNNECESSARY_FOLD` lint\n fn unnecessary_fold() {\n     // Can be replaced by .any\n     let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n     // Can be replaced by .all\n     let _ = (0..3).fold(true, |acc, x| acc && x > 2);\n     // Can be replaced by .sum\n-    let _ = (0..3).fold(0, |acc, x| acc + x);\n+    let _: i32 = (0..3).fold(0, |acc, x| acc + x);\n     // Can be replaced by .product\n-    let _ = (0..3).fold(1, |acc, x| acc * x);\n+    let _: i32 = (0..3).fold(1, |acc, x| acc * x);\n }\n \n /// Should trigger the `UNNECESSARY_FOLD` lint, with an error span including exactly `.fold(...)`\n fn unnecessary_fold_span_for_multi_element_chain() {\n-    let _ = (0..3).map(|x| 2 * x).fold(false, |acc, x| acc || x > 2);\n+    let _: bool = (0..3).map(|x| 2 * x).fold(false, |acc, x| acc || x > 2);\n }\n \n /// Calls which should not trigger the `UNNECESSARY_FOLD` lint"}, {"sha": "f9911d4a3dcbef05116df8587f811ea35d492de1", "filename": "tests/ui/unnecessary_fold.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/51c0dd427b63faf6d3a3810ebd7942aae9a62065/tests%2Fui%2Funnecessary_fold.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/51c0dd427b63faf6d3a3810ebd7942aae9a62065/tests%2Fui%2Funnecessary_fold.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funnecessary_fold.stderr?ref=51c0dd427b63faf6d3a3810ebd7942aae9a62065", "patch": "@@ -1,34 +1,34 @@\n error: this `.fold` can be written more succinctly using another method\n-  --> $DIR/unnecessary_fold.rs:4:19\n+  --> $DIR/unnecessary_fold.rs:8:19\n    |\n LL |     let _ = (0..3).fold(false, |acc, x| acc || x > 2);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n    |\n    = note: `-D clippy::unnecessary-fold` implied by `-D warnings`\n \n error: this `.fold` can be written more succinctly using another method\n-  --> $DIR/unnecessary_fold.rs:6:19\n+  --> $DIR/unnecessary_fold.rs:10:19\n    |\n LL |     let _ = (0..3).fold(true, |acc, x| acc && x > 2);\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.all(|x| x > 2)`\n \n error: this `.fold` can be written more succinctly using another method\n-  --> $DIR/unnecessary_fold.rs:8:19\n+  --> $DIR/unnecessary_fold.rs:12:24\n    |\n-LL |     let _ = (0..3).fold(0, |acc, x| acc + x);\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.sum()`\n+LL |     let _: i32 = (0..3).fold(0, |acc, x| acc + x);\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.sum()`\n \n error: this `.fold` can be written more succinctly using another method\n-  --> $DIR/unnecessary_fold.rs:10:19\n+  --> $DIR/unnecessary_fold.rs:14:24\n    |\n-LL |     let _ = (0..3).fold(1, |acc, x| acc * x);\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.product()`\n+LL |     let _: i32 = (0..3).fold(1, |acc, x| acc * x);\n+   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.product()`\n \n error: this `.fold` can be written more succinctly using another method\n-  --> $DIR/unnecessary_fold.rs:15:34\n+  --> $DIR/unnecessary_fold.rs:19:40\n    |\n-LL |     let _ = (0..3).map(|x| 2 * x).fold(false, |acc, x| acc || x > 2);\n-   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n+LL |     let _: bool = (0..3).map(|x| 2 * x).fold(false, |acc, x| acc || x > 2);\n+   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `.any(|x| x > 2)`\n \n error: aborting due to 5 previous errors\n "}]}