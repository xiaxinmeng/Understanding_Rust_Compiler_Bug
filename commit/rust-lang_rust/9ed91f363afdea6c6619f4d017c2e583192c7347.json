{"sha": "9ed91f363afdea6c6619f4d017c2e583192c7347", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZDkxZjM2M2FmZGVhNmM2NjE5ZjRkMDE3YzJlNTgzMTkyYzczNDc=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-08T17:37:44Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-22T04:22:42Z"}, "message": "resolve: Add public entrypoint `traits_in_module`\n\n- Consider the implicit prelude as well", "tree": {"sha": "6d13236447425852946fad178496e6dd6fee76c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d13236447425852946fad178496e6dd6fee76c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ed91f363afdea6c6619f4d017c2e583192c7347", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ed91f363afdea6c6619f4d017c2e583192c7347", "html_url": "https://github.com/rust-lang/rust/commit/9ed91f363afdea6c6619f4d017c2e583192c7347", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ed91f363afdea6c6619f4d017c2e583192c7347/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0647a48dc5ad98c2c7279889a5b5de2e0505c251", "url": "https://api.github.com/repos/rust-lang/rust/commits/0647a48dc5ad98c2c7279889a5b5de2e0505c251", "html_url": "https://github.com/rust-lang/rust/commit/0647a48dc5ad98c2c7279889a5b5de2e0505c251"}], "stats": {"total": 25, "additions": 25, "deletions": 0}, "files": [{"sha": "fdf094fae1e437b20d1a8972fd66358a5b91f217", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9ed91f363afdea6c6619f4d017c2e583192c7347/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ed91f363afdea6c6619f4d017c2e583192c7347/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=9ed91f363afdea6c6619f4d017c2e583192c7347", "patch": "@@ -3125,6 +3125,31 @@ impl<'a> Resolver<'a> {\n         })\n     }\n \n+    pub fn traits_in_scope(&mut self, module_id: DefId) -> Vec<TraitCandidate> {\n+        let module = self.get_module(module_id);\n+        module.ensure_traits(self);\n+        let traits = module.traits.borrow();\n+        let to_candidate =\n+            |this: &mut Self, &(trait_name, binding): &(Ident, &NameBinding<'_>)| TraitCandidate {\n+                def_id: binding.res().def_id(),\n+                import_ids: this.find_transitive_imports(&binding.kind, trait_name),\n+            };\n+\n+        let mut candidates: Vec<_> =\n+            traits.as_ref().unwrap().iter().map(|x| to_candidate(self, x)).collect();\n+\n+        if let Some(prelude) = self.prelude {\n+            if !module.no_implicit_prelude {\n+                prelude.ensure_traits(self);\n+                candidates.extend(\n+                    prelude.traits.borrow().as_ref().unwrap().iter().map(|x| to_candidate(self, x)),\n+                );\n+            }\n+        }\n+\n+        candidates\n+    }\n+\n     /// Rustdoc uses this to resolve things in a recoverable way. `ResolutionError<'a>`\n     /// isn't something that can be returned because it can't be made to live that long,\n     /// and also it's a private type. Fortunately rustdoc doesn't need to know the error,"}]}