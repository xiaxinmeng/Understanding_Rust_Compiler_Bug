{"sha": "d623ec6ba32b2d056810c7a8dabdc3e5198a2a53", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ2MjNlYzZiYTMyYjJkMDU2ODEwYzdhOGRhYmRjM2U1MTk4YTJhNTM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-28T09:17:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-09-28T09:17:28Z"}, "message": "Auto merge of #54568 - levex:issue-54130, r=nagisa\n\ncodegen_llvm: check inline assembly constraints with LLVM\n\n---%<---\nHey all,\n\nAs issue #54130 highlights, constraints are not checked and passing bad constraints to LLVM can crash it since a `Verify()` call is placed inside an assertion (see: `src/llvm/lib/IR/InlineAsm.cpp:39`).\n\nAs this is my first PR to the Rust compiler (woot! :tada:), there might be better ways of achieving this result. In particular, I am not too happy about generating an error in codegen; it would be much nicer if we did it earlier. However, @rkruppe [noted on IRC](https://botbot.me/mozilla/rustc/2018-09-25/?msg=104791581&page=1) that this should be fine for an unstable feature and a much better solution than the _status quo_, which is an ICE.\n\nThanks!\n--->%---\n\nLLVM provides a way of checking whether the constraints and the actual\ninline assembly make sense. This commit introduces a check before\nemitting code for the inline assembly. If LLVM rejects the inline\nassembly (or its constraints), then the compiler emits an error E0668\n(\"malformed inline assembly\").\n\nFixes: #54130\nSigned-off-by: Levente Kurusa \\<lkurusa@acm.org\\>", "tree": {"sha": "794a6e273ec9f299722e53b3d8359db5b18bcf98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/794a6e273ec9f299722e53b3d8359db5b18bcf98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53", "html_url": "https://github.com/rust-lang/rust/commit/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd8d030d014a4aa13b9b02b0ce98e2de2a2c54be", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8d030d014a4aa13b9b02b0ce98e2de2a2c54be", "html_url": "https://github.com/rust-lang/rust/commit/bd8d030d014a4aa13b9b02b0ce98e2de2a2c54be"}, {"sha": "0991d2098f9b750331962ad5566200644a00f69e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0991d2098f9b750331962ad5566200644a00f69e", "html_url": "https://github.com/rust-lang/rust/commit/0991d2098f9b750331962ad5566200644a00f69e"}], "stats": {"total": 128, "additions": 122, "deletions": 6}, "files": [{"sha": "f1bb41bcebacf3e3f85608d9b92cff01725bee62", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=d623ec6ba32b2d056810c7a8dabdc3e5198a2a53", "patch": "@@ -30,7 +30,7 @@ pub fn codegen_inline_asm(\n     ia: &hir::InlineAsm,\n     outputs: Vec<PlaceRef<'ll, 'tcx>>,\n     mut inputs: Vec<&'ll Value>\n-) {\n+) -> bool {\n     let mut ext_constraints = vec![];\n     let mut output_types = vec![];\n \n@@ -97,6 +97,10 @@ pub fn codegen_inline_asm(\n         ia.alignstack,\n         dialect\n     );\n+    if r.is_none() {\n+        return false;\n+    }\n+    let r = r.unwrap();\n \n     // Again, based on how many outputs we have\n     let outputs = ia.outputs.iter().zip(&outputs).filter(|&(ref o, _)| !o.is_indirect);\n@@ -117,6 +121,8 @@ pub fn codegen_inline_asm(\n         llvm::LLVMSetMetadata(r, kind,\n             llvm::LLVMMDNodeInContext(bx.cx.llcx, &val, 1));\n     }\n+\n+    return true;\n }\n \n pub fn codegen_global_asm<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,"}, {"sha": "77de88997e4903ebc0326203049a4d1756e670a7", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=d623ec6ba32b2d056810c7a8dabdc3e5198a2a53", "patch": "@@ -737,7 +737,7 @@ impl Builder<'a, 'll, 'tcx> {\n     pub fn inline_asm_call(&self, asm: *const c_char, cons: *const c_char,\n                          inputs: &[&'ll Value], output: &'ll Type,\n                          volatile: bool, alignstack: bool,\n-                         dia: AsmDialect) -> &'ll Value {\n+                         dia: AsmDialect) -> Option<&'ll Value> {\n         self.count_insn(\"inlineasm\");\n \n         let volatile = if volatile { llvm::True }\n@@ -753,9 +753,17 @@ impl Builder<'a, 'll, 'tcx> {\n         debug!(\"Asm Output Type: {:?}\", output);\n         let fty = Type::func(&argtys[..], output);\n         unsafe {\n-            let v = llvm::LLVMRustInlineAsm(\n-                fty, asm, cons, volatile, alignstack, dia);\n-            self.call(v, inputs, None)\n+            // Ask LLVM to verify that the constraints are well-formed.\n+            let constraints_ok = llvm::LLVMRustInlineAsmVerify(fty, cons);\n+            debug!(\"Constraint verification result: {:?}\", constraints_ok);\n+            if constraints_ok == llvm::True {\n+                let v = llvm::LLVMRustInlineAsm(\n+                    fty, asm, cons, volatile, alignstack, dia);\n+                Some(self.call(v, inputs, None))\n+            } else {\n+                // LLVM has detected an issue with our constaints, bail out\n+                None\n+            }\n         }\n     }\n "}, {"sha": "242b7a1a119f7ef54b8aace01f4769ead2a40329", "filename": "src/librustc_codegen_llvm/diagnostics.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53/src%2Flibrustc_codegen_llvm%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53/src%2Flibrustc_codegen_llvm%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdiagnostics.rs?ref=d623ec6ba32b2d056810c7a8dabdc3e5198a2a53", "patch": "@@ -47,4 +47,26 @@ unsafe { simd_add(i32x2(0, 0), i32x2(1, 2)); } // ok!\n ```\n \"##,\n \n+E0668: r##\"\n+Malformed inline assembly rejected by LLVM.\n+\n+LLVM checks the validity of the constraints and the assembly string passed to\n+it. This error implies that LLVM seems something wrong with the inline\n+assembly call.\n+\n+In particular, it can happen if you forgot the closing bracket of a register\n+constraint (see issue #51430):\n+```ignore (error-emitted-at-codegen-which-cannot-be-handled-by-compile_fail)\n+#![feature(asm)]\n+\n+fn main() {\n+    let rax: u64;\n+    unsafe {\n+        asm!(\"\" :\"={rax\"(rax));\n+        println!(\"Accumulator is: {}\", rax);\n+    }\n+}\n+```\n+\"##,\n+\n }"}, {"sha": "8485db4210cb0b691fb2cfcbe7b6987838bf6f96", "filename": "src/librustc_codegen_llvm/llvm/ffi.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fllvm%2Fffi.rs?ref=d623ec6ba32b2d056810c7a8dabdc3e5198a2a53", "patch": "@@ -1208,6 +1208,9 @@ extern \"C\" {\n                              AlignStack: Bool,\n                              Dialect: AsmDialect)\n                              -> &Value;\n+    pub fn LLVMRustInlineAsmVerify(Ty: &Type,\n+                             Constraints: *const c_char)\n+                             -> Bool;\n \n     pub fn LLVMRustDebugMetadataVersion() -> u32;\n     pub fn LLVMRustVersionMajor() -> u32;"}, {"sha": "6bd41bfe16feee3d6c23e6f8fd8eb271ecc45123", "filename": "src/librustc_codegen_llvm/mir/statement.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fstatement.rs?ref=d623ec6ba32b2d056810c7a8dabdc3e5198a2a53", "patch": "@@ -86,7 +86,11 @@ impl FunctionCx<'a, 'll, 'tcx> {\n                     self.codegen_operand(&bx, input).immediate()\n                 }).collect();\n \n-                asm::codegen_inline_asm(&bx, asm, outputs, input_vals);\n+                let res = asm::codegen_inline_asm(&bx, asm, outputs, input_vals);\n+                if !res {\n+                    span_err!(bx.sess(), statement.source_info.span, E0668,\n+                              \"malformed inline assembly\");\n+                }\n                 bx\n             }\n             mir::StatementKind::FakeRead(..) |"}, {"sha": "f1ab1d4ddfa476d8fb0006583f4a3b7521eac4e6", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=d623ec6ba32b2d056810c7a8dabdc3e5198a2a53", "patch": "@@ -426,6 +426,11 @@ extern \"C\" LLVMValueRef LLVMRustInlineAsm(LLVMTypeRef Ty, char *AsmString,\n                              HasSideEffects, IsAlignStack, fromRust(Dialect)));\n }\n \n+extern \"C\" bool LLVMRustInlineAsmVerify(LLVMTypeRef Ty,\n+                                          char *Constraints) {\n+  return InlineAsm::Verify(unwrap<FunctionType>(Ty), Constraints);\n+}\n+\n extern \"C\" void LLVMRustAppendModuleInlineAsm(LLVMModuleRef M, const char *Asm) {\n   unwrap(M)->appendModuleInlineAsm(StringRef(Asm));\n }"}, {"sha": "654f230741e96f6e9b5cef5e55fe92cec7da9b56", "filename": "src/test/ui/inline-asm-bad-constraint.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53/src%2Ftest%2Fui%2Finline-asm-bad-constraint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53/src%2Ftest%2Fui%2Finline-asm-bad-constraint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-constraint.rs?ref=d623ec6ba32b2d056810c7a8dabdc3e5198a2a53", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the compiler will catch invalid inline assembly constraints.\n+\n+#![feature(asm)]\n+\n+extern \"C\" {\n+    fn foo(a: usize);\n+}\n+\n+fn main() {\n+    bad_register_constraint();\n+    bad_input();\n+    wrong_size_output();\n+}\n+\n+// Issue #54130\n+fn bad_register_constraint() {\n+    let rax: u64;\n+    unsafe {\n+        asm!(\"\" :\"={rax\"(rax)) //~ ERROR E0668\n+    };\n+    println!(\"Accumulator is: {}\", rax);\n+}\n+\n+// Issue #54376\n+fn bad_input() {\n+    unsafe {\n+        asm!(\"callq $0\" : : \"0\"(foo)) //~ ERROR E0668\n+    };\n+}\n+\n+fn wrong_size_output() {\n+    let rax: u64 = 0;\n+    unsafe {\n+        asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax))); //~ ERROR E0668\n+    }\n+    println!(\"rax: {}\", rax);\n+}"}, {"sha": "ce1f274749f1f70b67e5c70bfe67cdca050b9aa2", "filename": "src/test/ui/inline-asm-bad-constraint.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d623ec6ba32b2d056810c7a8dabdc3e5198a2a53/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finline-asm-bad-constraint.stderr?ref=d623ec6ba32b2d056810c7a8dabdc3e5198a2a53", "patch": "@@ -0,0 +1,21 @@\n+error[E0668]: malformed inline assembly\n+  --> $DIR/inline-asm-bad-constraint.rs:29:9\n+   |\n+LL |         asm!(\"\" :\"={rax\"(rax)) //~ ERROR E0668\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0668]: malformed inline assembly\n+  --> $DIR/inline-asm-bad-constraint.rs:37:9\n+   |\n+LL |         asm!(\"callq $0\" : : \"0\"(foo)) //~ ERROR E0668\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0668]: malformed inline assembly\n+  --> $DIR/inline-asm-bad-constraint.rs:44:9\n+   |\n+LL |         asm!(\"addb $1, $0\" : \"={rax}\"((0i32, rax))); //~ ERROR E0668\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+For more information about this error, try `rustc --explain E0668`."}]}