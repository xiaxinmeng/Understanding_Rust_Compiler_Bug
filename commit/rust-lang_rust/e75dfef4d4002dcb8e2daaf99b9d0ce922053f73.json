{"sha": "e75dfef4d4002dcb8e2daaf99b9d0ce922053f73", "node_id": "C_kwDOAAsO6NoAKGU3NWRmZWY0ZDQwMDJkY2I4ZTJkYWFmOTliOWQwY2U5MjIwNTNmNzM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-11-28T17:37:30Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-12-01T19:00:32Z"}, "message": "Put all temporary build artifacts in build/", "tree": {"sha": "705a4b564730432f3699baa7e3aa69f62b33669c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/705a4b564730432f3699baa7e3aa69f62b33669c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73", "html_url": "https://github.com/rust-lang/rust/commit/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e97a3951d8a6c6fe0f0c5b6b0f42a42563a2bc8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e97a3951d8a6c6fe0f0c5b6b0f42a42563a2bc8", "html_url": "https://github.com/rust-lang/rust/commit/5e97a3951d8a6c6fe0f0c5b6b0f42a42563a2bc8"}], "stats": {"total": 91, "additions": 42, "deletions": 49}, "files": [{"sha": "469df9483a7f7b0b68e4141f81bff7be663ca5d1", "filename": "build_system/abi_cafe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73/build_system%2Fabi_cafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73/build_system%2Fabi_cafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fabi_cafe.rs?ref=e75dfef4d4002dcb8e2daaf99b9d0ce922053f73", "patch": "@@ -9,7 +9,7 @@ use super::SysrootKind;\n pub(crate) static ABI_CAFE_REPO: GitRepo =\n     GitRepo::github(\"Gankra\", \"abi-cafe\", \"4c6dc8c9c687e2b3a760ff2176ce236872b37212\", \"abi-cafe\");\n \n-static ABI_CAFE: CargoProject = CargoProject::git(&ABI_CAFE_REPO, \".\");\n+static ABI_CAFE: CargoProject = CargoProject::git(&ABI_CAFE_REPO, \".\", \"abi_cafe\");\n \n pub(crate) fn run(\n     channel: &str,"}, {"sha": "b1c902abd17d1f35faf3bd4add591418292b3f99", "filename": "build_system/build_backend.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73/build_system%2Fbuild_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73/build_system%2Fbuild_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_backend.rs?ref=e75dfef4d4002dcb8e2daaf99b9d0ce922053f73", "patch": "@@ -4,7 +4,7 @@ use std::path::PathBuf;\n use super::rustc_info::get_file_name;\n use super::utils::{is_ci, CargoProject, Compiler};\n \n-static CG_CLIF: CargoProject = CargoProject::local(\".\");\n+static CG_CLIF: CargoProject = CargoProject::local(\".\", \"cg_clif\");\n \n pub(crate) fn build_backend(\n     channel: &str,\n@@ -43,8 +43,7 @@ pub(crate) fn build_backend(\n     super::utils::spawn_and_wait(cmd);\n \n     CG_CLIF\n-        .source_dir()\n-        .join(\"target\")\n+        .target_dir()\n         .join(host_triple)\n         .join(channel)\n         .join(get_file_name(\"rustc_codegen_cranelift\", \"dylib\"))"}, {"sha": "f78803268d36d5a5cfc064148180281cc5bcc219", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=e75dfef4d4002dcb8e2daaf99b9d0ce922053f73", "patch": "@@ -1,5 +1,5 @@\n use std::fs;\n-use std::path::{Path, PathBuf};\n+use std::path::Path;\n use std::process::{self, Command};\n \n use super::rustc_info::{get_file_name, get_rustc_version, get_wrapper_file_name};\n@@ -40,7 +40,7 @@ pub(crate) fn build_sysroot(\n \n         let mut build_cargo_wrapper_cmd = Command::new(\"rustc\");\n         build_cargo_wrapper_cmd\n-            .arg(PathBuf::from(\"scripts\").join(format!(\"{wrapper}.rs\")))\n+            .arg(Path::new(\"scripts\").join(format!(\"{wrapper}.rs\")))\n             .arg(\"-o\")\n             .arg(dist_dir.join(wrapper_name))\n             .arg(\"-g\");\n@@ -149,7 +149,7 @@ pub(crate) fn build_sysroot(\n     }\n }\n \n-static STANDARD_LIBRARY: CargoProject = CargoProject::local(\"build_sysroot\");\n+static STANDARD_LIBRARY: CargoProject = CargoProject::local(\"build_sysroot\", \"build_sysroot\");\n \n fn build_clif_sysroot_for_triple(\n     channel: &str,\n@@ -176,7 +176,7 @@ fn build_clif_sysroot_for_triple(\n         }\n     }\n \n-    let build_dir = Path::new(\"build_sysroot\").join(\"target\").join(triple).join(channel);\n+    let build_dir = STANDARD_LIBRARY.target_dir().join(triple).join(channel);\n \n     if !super::config::get_bool(\"keep_sysroot\") {\n         // Cleanup the deps dir, but keep build scripts and the incremental cache for faster\n@@ -207,10 +207,7 @@ fn build_clif_sysroot_for_triple(\n     spawn_and_wait(build_cmd);\n \n     // Copy all relevant files to the sysroot\n-    for entry in\n-        fs::read_dir(Path::new(\"build_sysroot/target\").join(triple).join(channel).join(\"deps\"))\n-            .unwrap()\n-    {\n+    for entry in fs::read_dir(build_dir.join(\"deps\")).unwrap() {\n         let entry = entry.unwrap();\n         if let Some(ext) = entry.path().extension() {\n             if ext == \"rmeta\" || ext == \"d\" || ext == \"dSYM\" || ext == \"clif\" {"}, {"sha": "f3ccfcb1518694663e6d2b2af82f29e65f92160a", "filename": "build_system/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=e75dfef4d4002dcb8e2daaf99b9d0ce922053f73", "patch": "@@ -49,13 +49,14 @@ pub fn main() {\n     env::set_var(\"CG_CLIF_DISPLAY_CG_TIME\", \"1\");\n     env::set_var(\"CG_CLIF_DISABLE_INCR_CACHE\", \"1\");\n \n+    std::fs::create_dir_all(\"build\").unwrap();\n+\n     {\n         // Make sure we always explicitly specify the target dir\n         let target = \"build/target_dir_should_be_set_explicitly\";\n         env::set_var(\"CARGO_TARGET_DIR\", target);\n-        std::fs::create_dir_all(\"build\").unwrap();\n         let _ = std::fs::remove_file(target);\n-        let file = std::fs::File::create(target).unwrap();\n+        std::fs::File::create(target).unwrap();\n     }\n \n     if is_ci() {"}, {"sha": "99ec3ef2092f6ebb6337dbf5f1bb7f2f470f86a7", "filename": "build_system/prepare.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=e75dfef4d4002dcb8e2daaf99b9d0ce922053f73", "patch": "@@ -35,9 +35,7 @@ pub(crate) fn prepare() {\n             .join(&host_compiler.triple)\n             .join(\"debug\")\n             .join(get_file_name(\"main\", \"bin\")),\n-        super::tests::SIMPLE_RAYTRACER_REPO\n-            .source_dir()\n-            .join(get_file_name(\"raytracer_cg_llvm\", \"bin\")),\n+        Path::new(\"build\").join(get_file_name(\"raytracer_cg_llvm\", \"bin\")),\n     )\n     .unwrap();\n }"}, {"sha": "0645b69bf7c1a8cdb4e76b2c53d4b6d78d96940d", "filename": "build_system/tests.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=e75dfef4d4002dcb8e2daaf99b9d0ce922053f73", "patch": "@@ -223,12 +223,12 @@ const BASE_SYSROOT_SUITE: &[TestCase] = &[\n pub(crate) static RAND_REPO: GitRepo =\n     GitRepo::github(\"rust-random\", \"rand\", \"0f933f9c7176e53b2a3c7952ded484e1783f0bf1\", \"rand\");\n \n-static RAND: CargoProject = CargoProject::git(&RAND_REPO, \".\");\n+static RAND: CargoProject = CargoProject::git(&RAND_REPO, \".\", \"rand\");\n \n pub(crate) static REGEX_REPO: GitRepo =\n     GitRepo::github(\"rust-lang\", \"regex\", \"341f207c1071f7290e3f228c710817c280c8dca1\", \"regex\");\n \n-static REGEX: CargoProject = CargoProject::git(&REGEX_REPO, \".\");\n+static REGEX: CargoProject = CargoProject::git(&REGEX_REPO, \".\", \"regex\");\n \n pub(crate) static PORTABLE_SIMD_REPO: GitRepo = GitRepo::github(\n     \"rust-lang\",\n@@ -237,7 +237,7 @@ pub(crate) static PORTABLE_SIMD_REPO: GitRepo = GitRepo::github(\n     \"portable-simd\",\n );\n \n-static PORTABLE_SIMD: CargoProject = CargoProject::git(&PORTABLE_SIMD_REPO, \".\");\n+static PORTABLE_SIMD: CargoProject = CargoProject::git(&PORTABLE_SIMD_REPO, \".\", \"portable_simd\");\n \n pub(crate) static SIMPLE_RAYTRACER_REPO: GitRepo = GitRepo::github(\n     \"ebobby\",\n@@ -246,10 +246,11 @@ pub(crate) static SIMPLE_RAYTRACER_REPO: GitRepo = GitRepo::github(\n     \"<none>\",\n );\n \n-pub(crate) static SIMPLE_RAYTRACER: CargoProject = CargoProject::git(&SIMPLE_RAYTRACER_REPO, \".\");\n+pub(crate) static SIMPLE_RAYTRACER: CargoProject =\n+    CargoProject::git(&SIMPLE_RAYTRACER_REPO, \".\", \"simple_raytracer\");\n \n static LIBCORE_TESTS: CargoProject =\n-    CargoProject::local(\"build_sysroot/sysroot_src/library/core/tests\");\n+    CargoProject::local(\"build_sysroot/sysroot_src/library/core/tests\", \"core_tests\");\n \n const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n     TestCase::new(\"test.rust-random/rand\", &|runner| {\n@@ -276,7 +277,6 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n                 .unwrap()\n                 .join(\"dist\")\n                 .join(get_wrapper_file_name(\"cargo-clif\", \"bin\"));\n-            let source_dir = SIMPLE_RAYTRACER.source_dir();\n             let manifest_path = SIMPLE_RAYTRACER.manifest_path();\n             let target_dir = SIMPLE_RAYTRACER.target_dir();\n \n@@ -303,17 +303,15 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n             spawn_and_wait(bench_compile);\n \n             eprintln!(\"[BENCH RUN] ebobby/simple-raytracer\");\n-            fs::copy(target_dir.join(\"debug\").join(\"main\"), source_dir.join(\"raytracer_cg_clif\"))\n-                .unwrap();\n-\n-            let mut bench_run = hyperfine_command(\n-                0,\n-                run_runs,\n-                None,\n-                &source_dir.join(\"raytracer_cg_llvm\").display().to_string(),\n-                &source_dir.join(\"raytracer_cg_clif\").display().to_string(),\n-            );\n-            bench_run.current_dir(SIMPLE_RAYTRACER.source_dir());\n+            fs::copy(\n+                target_dir.join(\"debug\").join(\"main\"),\n+                Path::new(\"build\").join(\"raytracer_cg_clif\"),\n+            )\n+            .unwrap();\n+\n+            let mut bench_run =\n+                hyperfine_command(0, run_runs, None, \"./raytracer_cg_llvm\", \"./raytracer_cg_clif\");\n+            bench_run.current_dir(Path::new(\"build\"));\n             spawn_and_wait(bench_run);\n         } else {\n             spawn_and_wait(SIMPLE_RAYTRACER.clean(&runner.target_compiler.cargo));\n@@ -449,7 +447,7 @@ pub(crate) fn run_tests(\n             &target_triple,\n         );\n \n-        let _ = fs::remove_dir_all(Path::new(\"target\").join(\"out\"));\n+        let _ = fs::remove_dir_all(Path::new(\"build\").join(\"example\"));\n         runner.run_testsuite(NO_SYSROOT_SUITE);\n     } else {\n         eprintln!(\"[SKIP] no_sysroot tests\");\n@@ -495,8 +493,8 @@ impl TestRunner {\n         let root_dir = env::current_dir().unwrap();\n \n         let mut out_dir = root_dir.clone();\n-        out_dir.push(\"target\");\n-        out_dir.push(\"out\");\n+        out_dir.push(\"build\");\n+        out_dir.push(\"example\");\n \n         let is_native = host_triple == target_triple;\n         let jit_supported ="}, {"sha": "5a03fcf08562511a610d89ef0ade5704816915cd", "filename": "build_system/utils.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73/build_system%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73/build_system%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Futils.rs?ref=e75dfef4d4002dcb8e2daaf99b9d0ce922053f73", "patch": "@@ -51,15 +51,20 @@ enum CargoProjectSource {\n pub(crate) struct CargoProject {\n     source: CargoProjectSource,\n     path: &'static str,\n+    target: &'static str,\n }\n \n impl CargoProject {\n-    pub(crate) const fn local(path: &'static str) -> CargoProject {\n-        CargoProject { source: CargoProjectSource::Local, path }\n+    pub(crate) const fn local(path: &'static str, target: &'static str) -> CargoProject {\n+        CargoProject { source: CargoProjectSource::Local, path, target }\n     }\n \n-    pub(crate) const fn git(git_repo: &'static GitRepo, path: &'static str) -> CargoProject {\n-        CargoProject { source: CargoProjectSource::GitRepo(git_repo), path }\n+    pub(crate) const fn git(\n+        git_repo: &'static GitRepo,\n+        path: &'static str,\n+        target: &'static str,\n+    ) -> CargoProject {\n+        CargoProject { source: CargoProjectSource::GitRepo(git_repo), path, target }\n     }\n \n     pub(crate) fn source_dir(&self) -> PathBuf {\n@@ -75,12 +80,7 @@ impl CargoProject {\n     }\n \n     pub(crate) fn target_dir(&self) -> PathBuf {\n-        match self.source {\n-            CargoProjectSource::Local => std::env::current_dir().unwrap(),\n-            CargoProjectSource::GitRepo(git_repo) => git_repo.source_dir(),\n-        }\n-        .join(self.path)\n-        .join(\"target\")\n+        std::env::current_dir().unwrap().join(\"build\").join(self.target)\n     }\n \n     fn base_cmd(&self, command: &str, cargo: &Path) -> Command {"}, {"sha": "1760e5836ecce00a48f7a0236748dfb94329fce0", "filename": "clean_all.sh", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73/clean_all.sh", "raw_url": "https://github.com/rust-lang/rust/raw/e75dfef4d4002dcb8e2daaf99b9d0ce922053f73/clean_all.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clean_all.sh?ref=e75dfef4d4002dcb8e2daaf99b9d0ce922053f73", "patch": "@@ -2,9 +2,9 @@\n set -e\n \n rm -rf build_sysroot/{sysroot_src/,target/,compiler-builtins/,rustc_version}\n-rm -rf target/ dist/ perf.data{,.old} y.bin\n+rm -rf target/ build/ dist/ perf.data{,.old} y.bin\n rm -rf download/\n \n # Kept for now in case someone updates their checkout of cg_clif before running clean_all.sh\n # FIXME remove at some point in the future\n-rm -rf rand/ regex/ simple-raytracer/ portable-simd/ abi-checker/ abi-cafe/ build/\n+rm -rf rand/ regex/ simple-raytracer/ portable-simd/ abi-checker/ abi-cafe/"}]}