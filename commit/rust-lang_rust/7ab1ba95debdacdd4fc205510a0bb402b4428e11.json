{"sha": "7ab1ba95debdacdd4fc205510a0bb402b4428e11", "node_id": "C_kwDOAAsO6NoAKDdhYjFiYTk1ZGViZGFjZGQ0ZmMyMDU1MTBhMGJiNDAyYjQ0MjhlMTE", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-10-05T20:01:33Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-07T09:35:20Z"}, "message": "Remove `Unknown` state in favor of `Value(Top)`", "tree": {"sha": "2875500c3064a5e54ea36f4d7755f670617ea1cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2875500c3064a5e54ea36f4d7755f670617ea1cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7ab1ba95debdacdd4fc205510a0bb402b4428e11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7ab1ba95debdacdd4fc205510a0bb402b4428e11", "html_url": "https://github.com/rust-lang/rust/commit/7ab1ba95debdacdd4fc205510a0bb402b4428e11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7ab1ba95debdacdd4fc205510a0bb402b4428e11/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1765587846ac9bee95f4f293862b0aae9b8ff4ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/1765587846ac9bee95f4f293862b0aae9b8ff4ff", "html_url": "https://github.com/rust-lang/rust/commit/1765587846ac9bee95f4f293862b0aae9b8ff4ff"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "924d3d72a524b912ada5c4c554e084061382404a", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 18, "deletions": 13, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/7ab1ba95debdacdd4fc205510a0bb402b4428e11/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab1ba95debdacdd4fc205510a0bb402b4428e11/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=7ab1ba95debdacdd4fc205510a0bb402b4428e11", "patch": "@@ -183,15 +183,15 @@ pub trait ValueAnalysis<'tcx> {\n                 .map()\n                 .find(place.as_ref())\n                 .map(ValueOrPlaceOrRef::Ref)\n-                .unwrap_or(ValueOrPlaceOrRef::Unknown),\n+                .unwrap_or(ValueOrPlaceOrRef::top()),\n             Rvalue::Ref(_, _, place) | Rvalue::AddressOf(_, place) => {\n                 state.flood(place.as_ref(), self.map());\n-                ValueOrPlaceOrRef::Unknown\n+                ValueOrPlaceOrRef::top()\n             }\n             Rvalue::CopyForDeref(place) => {\n                 self.handle_operand(&Operand::Copy(*place), state).into()\n             }\n-            _ => ValueOrPlaceOrRef::Unknown,\n+            _ => ValueOrPlaceOrRef::top(),\n         }\n     }\n \n@@ -218,7 +218,7 @@ pub trait ValueAnalysis<'tcx> {\n                 self.map()\n                     .find(place.as_ref())\n                     .map(ValueOrPlace::Place)\n-                    .unwrap_or(ValueOrPlace::Unknown)\n+                    .unwrap_or(ValueOrPlace::top())\n             }\n         }\n     }\n@@ -511,9 +511,6 @@ impl<V: Clone + HasTop> State<V> {\n                     self.assign_place_idx(target_deref, source, map);\n                 }\n             }\n-            ValueOrPlaceOrRef::Unknown => {\n-                self.flood_idx(target, map);\n-            }\n         }\n     }\n \n@@ -756,27 +753,35 @@ impl<'a> Iterator for Children<'a> {\n         }\n     }\n }\n-\n-// FIXME: See if we can get rid of `Unknown`.\n pub enum ValueOrPlace<V> {\n     Value(V),\n     Place(PlaceIndex),\n-    Unknown,\n+}\n+\n+impl<V: HasTop> ValueOrPlace<V> {\n+    pub fn top() -> Self {\n+        ValueOrPlace::Value(V::top())\n+    }\n }\n \n pub enum ValueOrPlaceOrRef<V> {\n     Value(V),\n     Place(PlaceIndex),\n-    Ref(PlaceIndex),\n-    Unknown,\n+    Ref(PlaceIndex)\n }\n \n+impl<V: HasTop> ValueOrPlaceOrRef<V> {\n+    pub fn top() -> Self {\n+        ValueOrPlaceOrRef::Value(V::top())\n+    }\n+}\n+\n+\n impl<V> From<ValueOrPlace<V>> for ValueOrPlaceOrRef<V> {\n     fn from(x: ValueOrPlace<V>) -> Self {\n         match x {\n             ValueOrPlace::Value(value) => ValueOrPlaceOrRef::Value(value),\n             ValueOrPlace::Place(place) => ValueOrPlaceOrRef::Place(place),\n-            ValueOrPlace::Unknown => ValueOrPlaceOrRef::Unknown,\n         }\n     }\n }"}, {"sha": "a6f5f71d091934280a12e572573813e3192cf303", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7ab1ba95debdacdd4fc205510a0bb402b4428e11/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7ab1ba95debdacdd4fc205510a0bb402b4428e11/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=7ab1ba95debdacdd4fc205510a0bb402b4428e11", "patch": "@@ -105,8 +105,8 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'tcx> {\n                         .ecx\n                         .misc_cast(&operand, *ty)\n                         .map(|result| ValueOrPlaceOrRef::Value(self.wrap_immediate(result, *ty)))\n-                        .unwrap_or(ValueOrPlaceOrRef::Unknown),\n-                    _ => ValueOrPlaceOrRef::Unknown,\n+                        .unwrap_or(ValueOrPlaceOrRef::top()),\n+                    _ => ValueOrPlaceOrRef::top(),\n                 }\n             }\n             Rvalue::BinaryOp(op, box (left, right)) => {\n@@ -156,7 +156,6 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'tcx> {\n                     let value = match self.handle_operand(discr, state) {\n                         ValueOrPlace::Value(value) => value,\n                         ValueOrPlace::Place(place) => state.get_idx(place, self.map()),\n-                        ValueOrPlace::Unknown => FlatSet::Top,\n                     };\n                     let result = match value {\n                         FlatSet::Top => FlatSet::Top,\n@@ -241,7 +240,6 @@ impl<'tcx> ConstAnalysis<'tcx> {\n         let value = match self.handle_operand(op, state) {\n             ValueOrPlace::Value(value) => value,\n             ValueOrPlace::Place(place) => state.get_idx(place, &self.map),\n-            ValueOrPlace::Unknown => FlatSet::Top,\n         };\n         match value {\n             FlatSet::Top => FlatSet::Top,\n@@ -384,9 +382,7 @@ impl<'tcx, 'map, 'a> Visitor<'tcx> for OperandCollector<'tcx, 'map, 'a> {\n                     FlatSet::Elem(value) => {\n                         self.visitor.before_effect.insert((location, *place), value);\n                     }\n-                    FlatSet::Bottom => {\n-                        // This only happens if this location is unreachable.\n-                    }\n+                    FlatSet::Bottom => (),\n                 }\n             }\n             _ => (),"}]}