{"sha": "9462a207ffe7ffbb922493cb4a5ed246955cd788", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk0NjJhMjA3ZmZlN2ZmYmI5MjI0OTNjYjRhNWVkMjQ2OTU1Y2Q3ODg=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-02-16T19:40:38Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-02-16T19:42:20Z"}, "message": "Make orphan check diagnostics clearer\n\ncloses #22388", "tree": {"sha": "527604cf186c3d47568c6f3afb2bee55b8155963", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/527604cf186c3d47568c6f3afb2bee55b8155963"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9462a207ffe7ffbb922493cb4a5ed246955cd788", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9462a207ffe7ffbb922493cb4a5ed246955cd788", "html_url": "https://github.com/rust-lang/rust/commit/9462a207ffe7ffbb922493cb4a5ed246955cd788", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9462a207ffe7ffbb922493cb4a5ed246955cd788/comments", "author": null, "committer": null, "parents": [{"sha": "c5db290bf6df986a6acd5ce993f278c18e55ca37", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5db290bf6df986a6acd5ce993f278c18e55ca37", "html_url": "https://github.com/rust-lang/rust/commit/c5db290bf6df986a6acd5ce993f278c18e55ca37"}], "stats": {"total": 62, "additions": 46, "deletions": 16}, "files": [{"sha": "f43469363cd81f435c03b018bac9cf8d606fd8a7", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=9462a207ffe7ffbb922493cb4a5ed246955cd788", "patch": "@@ -88,15 +88,10 @@ impl<'cx, 'tcx,'v> visit::Visitor<'v> for OrphanChecker<'cx, 'tcx> {\n                     Err(traits::OrphanCheckErr::UncoveredTy(param_ty)) => {\n                         if !ty::has_attr(self.tcx, trait_def_id, \"old_orphan_check\") {\n                             span_err!(self.tcx.sess, item.span, E0210,\n-                                    \"type parameter `{}` is not constrained by any local type; \\\n-                                     only traits defined in the current crate can be implemented \\\n-                                     for a type parameter\",\n+                                    \"type parameter `{}` must be used as the type parameter for \\\n+                                     some local type (e.g. `MyStruct<T>`); only traits defined in \\\n+                                     the current crate can be implemented for a type parameter\",\n                                     param_ty.user_string(self.tcx));\n-                            self.tcx.sess.span_note(\n-                                item.span,\n-                                &format!(\"for a limited time, you can add \\\n-                                          `#![feature(old_orphan_check)]` to your crate \\\n-                                          to disable this rule\"));\n                         }\n                     }\n                 }"}, {"sha": "7647f159401a74412b0590625e37d5102536f7d0", "filename": "src/test/auxiliary/orphan_check_diagnostics.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Ftest%2Fauxiliary%2Forphan_check_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Ftest%2Fauxiliary%2Forphan_check_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Forphan_check_diagnostics.rs?ref=9462a207ffe7ffbb922493cb4a5ed246955cd788", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub trait RemoteTrait {}"}, {"sha": "b7ca499be736623db82a570eccbda76c7718a28e", "filename": "src/test/compile-fail/coherence-bigint-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-bigint-param.rs?ref=9462a207ffe7ffbb922493cb4a5ed246955cd788", "patch": "@@ -16,6 +16,6 @@ use lib::Remote1;\n pub struct BigInt;\n \n impl<T> Remote1<BigInt> for T { }\n-//~^ ERROR type parameter `T` is not constrained\n+//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n \n fn main() { }"}, {"sha": "1bec97de53386a4020f4ef071327b69a8a51f28a", "filename": "src/test/compile-fail/coherence-cow-no-cover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Ftest%2Fcompile-fail%2Fcoherence-cow-no-cover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Ftest%2Fcompile-fail%2Fcoherence-cow-no-cover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-cow-no-cover.rs?ref=9462a207ffe7ffbb922493cb4a5ed246955cd788", "patch": "@@ -18,6 +18,6 @@ use lib::{Remote,Pair};\n pub struct Cover<T>(T);\n \n impl<T,U> Remote for Pair<Cover<T>,U> { }\n-//~^ ERROR type parameter `U` is not constrained by any local type\n+//~^ ERROR type parameter `U` must be used as the type parameter for some local type\n \n fn main() { }"}, {"sha": "a020b518d8273a9ad0e1d6b1812f07cd7c9900ce", "filename": "src/test/compile-fail/coherence-cross-crate-conflict.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Ftest%2Fcompile-fail%2Fcoherence-cross-crate-conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Ftest%2Fcompile-fail%2Fcoherence-cross-crate-conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-cross-crate-conflict.rs?ref=9462a207ffe7ffbb922493cb4a5ed246955cd788", "patch": "@@ -16,7 +16,7 @@ extern crate trait_impl_conflict;\n use trait_impl_conflict::Foo;\n \n impl<A> Foo for A {\n-    //~^ ERROR type parameter `A` is not constrained\n+    //~^ ERROR type parameter `A` must be used as the type parameter for some local type\n     //~^^ ERROR E0119\n }\n "}, {"sha": "9f7481f12f2f7d3201c3b0bcf629b8f34615194d", "filename": "src/test/compile-fail/coherence-lone-type-parameter.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Ftest%2Fcompile-fail%2Fcoherence-lone-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Ftest%2Fcompile-fail%2Fcoherence-lone-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-lone-type-parameter.rs?ref=9462a207ffe7ffbb922493cb4a5ed246955cd788", "patch": "@@ -13,6 +13,7 @@\n extern crate \"coherence-lib\" as lib;\n use lib::Remote;\n \n-impl<T> Remote for T { } //~ ERROR type parameter `T` is not constrained\n+impl<T> Remote for T { }\n+//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n \n fn main() { }"}, {"sha": "9878bdec2c36ffc56100fbffe72ad6c1716389f7", "filename": "src/test/compile-fail/coherence-overlapping-pairs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Ftest%2Fcompile-fail%2Fcoherence-overlapping-pairs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Ftest%2Fcompile-fail%2Fcoherence-overlapping-pairs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-overlapping-pairs.rs?ref=9462a207ffe7ffbb922493cb4a5ed246955cd788", "patch": "@@ -16,6 +16,6 @@ use lib::Remote;\n struct Foo;\n \n impl<T> Remote for lib::Pair<T,Foo> { }\n-//~^ ERROR type parameter `T` is not constrained\n+//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n \n fn main() { }"}, {"sha": "2bdcc346f70d3055193c616afa1324ece4c7f08e", "filename": "src/test/compile-fail/coherence-pair-covered-uncovered-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered-1.rs?ref=9462a207ffe7ffbb922493cb4a5ed246955cd788", "patch": "@@ -18,7 +18,7 @@ use lib::{Remote1, Pair};\n \n pub struct Local<T>(T);\n \n-impl<T,U> Remote1<Pair<T,Local<U>>> for i32 { }\n-//~^ ERROR type parameter `T` is not constrained\n+impl<T, U> Remote1<Pair<T, Local<U>>> for i32 { }\n+//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n \n fn main() { }"}, {"sha": "881494f009f1576784b3f10d345ffa88e94d83bb", "filename": "src/test/compile-fail/coherence-pair-covered-uncovered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-pair-covered-uncovered.rs?ref=9462a207ffe7ffbb922493cb4a5ed246955cd788", "patch": "@@ -16,6 +16,6 @@ use lib::{Remote, Pair};\n struct Local<T>(T);\n \n impl<T,U> Remote for Pair<T,Local<U>> { }\n-//~^ ERROR type parameter `T` is not constrained\n+//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n \n fn main() { }"}, {"sha": "ff5c101b9178f60a5998d9e0fffb0142017fb1a9", "filename": "src/test/compile-fail/orphan-check-diagnostics.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Ftest%2Fcompile-fail%2Forphan-check-diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9462a207ffe7ffbb922493cb4a5ed246955cd788/src%2Ftest%2Fcompile-fail%2Forphan-check-diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Forphan-check-diagnostics.rs?ref=9462a207ffe7ffbb922493cb4a5ed246955cd788", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:orphan_check_diagnostics.rs\n+// see #22388\n+\n+extern crate orphan_check_diagnostics;\n+\n+use orphan_check_diagnostics::RemoteTrait;\n+\n+trait LocalTrait {}\n+\n+impl<T> RemoteTrait for T where T: LocalTrait {}\n+//~^ ERROR type parameter `T` must be used as the type parameter for some local type\n+\n+fn main() {}"}]}