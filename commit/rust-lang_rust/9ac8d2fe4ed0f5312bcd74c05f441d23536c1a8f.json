{"sha": "9ac8d2fe4ed0f5312bcd74c05f441d23536c1a8f", "node_id": "C_kwDOAAsO6NoAKDlhYzhkMmZlNGVkMGY1MzEyYmNkNzRjMDVmNDQxZDIzNTM2YzFhOGY", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2022-03-30T13:14:25Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2022-04-05T13:37:14Z"}, "message": "track proc-macro expansions in the self-profiler\n\nUse the proc-macro descr to track their individual expansions with\nself-profiling events. This will help diagnose performance issues\nwith slow proc-macros.", "tree": {"sha": "850701162df123280c69758786d9dfddb7142162", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/850701162df123280c69758786d9dfddb7142162"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ac8d2fe4ed0f5312bcd74c05f441d23536c1a8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ac8d2fe4ed0f5312bcd74c05f441d23536c1a8f", "html_url": "https://github.com/rust-lang/rust/commit/9ac8d2fe4ed0f5312bcd74c05f441d23536c1a8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ac8d2fe4ed0f5312bcd74c05f441d23536c1a8f/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f132bcf3bdf6d3ff9be7d02e8d0088b99007cd5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/f132bcf3bdf6d3ff9be7d02e8d0088b99007cd5e", "html_url": "https://github.com/rust-lang/rust/commit/f132bcf3bdf6d3ff9be7d02e8d0088b99007cd5e"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "9fa33062c4859888ec97f5d2d3e5e6181fee833b", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ac8d2fe4ed0f5312bcd74c05f441d23536c1a8f/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac8d2fe4ed0f5312bcd74c05f441d23536c1a8f/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=9ac8d2fe4ed0f5312bcd74c05f441d23536c1a8f", "patch": "@@ -1047,6 +1047,12 @@ impl<'a> ExtCtxt<'a> {\n         self.current_expansion.id.expn_data().call_site\n     }\n \n+    /// Returns the current expansion kind's description.\n+    pub(crate) fn expansion_descr(&self) -> String {\n+        let expn_data = self.current_expansion.id.expn_data();\n+        expn_data.kind.descr()\n+    }\n+\n     /// Equivalent of `Span::def_site` from the proc macro API,\n     /// except that the location is taken from the span passed as an argument.\n     pub fn with_def_site_ctxt(&self, span: Span) -> Span {"}, {"sha": "b4bae8ce5fbeb17fd03d57f3042d737c849e013d", "filename": "compiler/rustc_expand/src/proc_macro.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/9ac8d2fe4ed0f5312bcd74c05f441d23536c1a8f/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ac8d2fe4ed0f5312bcd74c05f441d23536c1a8f/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fproc_macro.rs?ref=9ac8d2fe4ed0f5312bcd74c05f441d23536c1a8f", "patch": "@@ -24,6 +24,8 @@ impl base::ProcMacro for BangProcMacro {\n         span: Span,\n         input: TokenStream,\n     ) -> Result<TokenStream, ErrorGuaranteed> {\n+        let _timer =\n+            ecx.sess.prof.generic_activity_with_arg(\"expand_proc_macro\", ecx.expansion_descr());\n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n         let server = proc_macro_server::Rustc::new(ecx);\n         self.client.run(&EXEC_STRATEGY, server, input, proc_macro_backtrace).map_err(|e| {\n@@ -48,6 +50,8 @@ impl base::AttrProcMacro for AttrProcMacro {\n         annotation: TokenStream,\n         annotated: TokenStream,\n     ) -> Result<TokenStream, ErrorGuaranteed> {\n+        let _timer =\n+            ecx.sess.prof.generic_activity_with_arg(\"expand_proc_macro\", ecx.expansion_descr());\n         let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n         let server = proc_macro_server::Rustc::new(ecx);\n         self.client\n@@ -97,17 +101,21 @@ impl MultiItemModifier for ProcMacroDerive {\n             nt_to_tokenstream(&item, &ecx.sess.parse_sess, CanSynthesizeMissingTokens::No)\n         };\n \n-        let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n-        let server = proc_macro_server::Rustc::new(ecx);\n-        let stream = match self.client.run(&EXEC_STRATEGY, server, input, proc_macro_backtrace) {\n-            Ok(stream) => stream,\n-            Err(e) => {\n-                let mut err = ecx.struct_span_err(span, \"proc-macro derive panicked\");\n-                if let Some(s) = e.as_str() {\n-                    err.help(&format!(\"message: {}\", s));\n+        let stream = {\n+            let _timer =\n+                ecx.sess.prof.generic_activity_with_arg(\"expand_proc_macro\", ecx.expansion_descr());\n+            let proc_macro_backtrace = ecx.ecfg.proc_macro_backtrace;\n+            let server = proc_macro_server::Rustc::new(ecx);\n+            match self.client.run(&EXEC_STRATEGY, server, input, proc_macro_backtrace) {\n+                Ok(stream) => stream,\n+                Err(e) => {\n+                    let mut err = ecx.struct_span_err(span, \"proc-macro derive panicked\");\n+                    if let Some(s) = e.as_str() {\n+                        err.help(&format!(\"message: {}\", s));\n+                    }\n+                    err.emit();\n+                    return ExpandResult::Ready(vec![]);\n                 }\n-                err.emit();\n-                return ExpandResult::Ready(vec![]);\n             }\n         };\n "}]}