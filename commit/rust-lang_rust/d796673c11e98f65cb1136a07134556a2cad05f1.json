{"sha": "d796673c11e98f65cb1136a07134556a2cad05f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3OTY2NzNjMTFlOThmNjVjYjExMzZhMDcxMzQ1NTZhMmNhZDA1ZjE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-30T07:57:28Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-06-30T07:57:28Z"}, "message": "Reimplement backup scheme for handling lvals not yet resolved by typechecker.", "tree": {"sha": "6b8b941cbf45db52ab9e5656a46b8b1f47a5534d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b8b941cbf45db52ab9e5656a46b8b1f47a5534d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d796673c11e98f65cb1136a07134556a2cad05f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d796673c11e98f65cb1136a07134556a2cad05f1", "html_url": "https://github.com/rust-lang/rust/commit/d796673c11e98f65cb1136a07134556a2cad05f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d796673c11e98f65cb1136a07134556a2cad05f1/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8120a59097ce81e98fed6c670e5da03cc3b9c78f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8120a59097ce81e98fed6c670e5da03cc3b9c78f", "html_url": "https://github.com/rust-lang/rust/commit/8120a59097ce81e98fed6c670e5da03cc3b9c78f"}], "stats": {"total": 53, "additions": 38, "deletions": 15}, "files": [{"sha": "26d38e0383a7a15d74978ace3b638cc70b3fe7ef", "filename": "src/boot/me/semant.ml", "status": "modified", "additions": 38, "deletions": 15, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/d796673c11e98f65cb1136a07134556a2cad05f1/src%2Fboot%2Fme%2Fsemant.ml", "raw_url": "https://github.com/rust-lang/rust/raw/d796673c11e98f65cb1136a07134556a2cad05f1/src%2Fboot%2Fme%2Fsemant.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fsemant.ml?ref=d796673c11e98f65cb1136a07134556a2cad05f1", "patch": "@@ -1173,8 +1173,45 @@ let lval_is_direct_mod (cx:ctxt) (lval:Ast.lval) : bool =\n         | _ -> false\n ;;\n \n+let get_item (cx:ctxt) (node:node_id) : Ast.mod_item_decl =\n+  match htab_search cx.ctxt_all_defns node with\n+      Some (DEFN_item item) -> item\n+    | Some _ -> bugi cx node \"defn is not an item\"\n+    | None -> bugi cx node \"missing defn\"\n+;;\n+\n+let get_slot (cx:ctxt) (node:node_id) : Ast.slot =\n+  match htab_search cx.ctxt_all_defns node with\n+      Some (DEFN_slot slot) -> slot\n+    | Some _ -> bugi cx node \"defn is not a slot\"\n+    | None -> bugi cx node \"missing defn\"\n+;;\n+\n let lval_ty (cx:ctxt) (lval:Ast.lval) : Ast.ty =\n-  Hashtbl.find cx.ctxt_all_lval_types (lval_base_id lval)\n+  (*\n+    FIXME: The correct definition of this function is just: \n+    \n+       Hashtbl.find cx.ctxt_all_lval_types (lval_base_id lval)\n+    \n+    However, since the typechecker is not presently handling\n+    every stmt, we have a fallback mode to \"pick out the slot\n+    type and hope for the best\".\n+  *)\n+  match htab_search cx.ctxt_all_lval_types (lval_base_id lval) with\n+      Some t -> t\n+    | None ->\n+        let rec type_of (lval:Ast.lval) : Ast.ty =\n+          match lval with\n+              Ast.LVAL_base nbi ->\n+                let referent = lval_to_referent cx nbi.id in\n+                  if lval_is_slot cx lval\n+                  then slot_ty (get_slot cx referent)\n+                  else Hashtbl.find cx.ctxt_all_item_types nbi.id\n+            | Ast.LVAL_ext (base, comp) ->\n+                let base_ty = type_of base in\n+                  project_type base_ty comp\n+        in\n+          type_of lval\n ;;\n \n let lval_is_static (cx:ctxt) (lval:Ast.lval) : bool =\n@@ -1455,20 +1492,6 @@ let unreferenced_required_item_ignoring_visitor\n \n type resolved = ((scope list * node_id) option) ;;\n \n-let get_item (cx:ctxt) (node:node_id) : Ast.mod_item_decl =\n-  match htab_search cx.ctxt_all_defns node with\n-      Some (DEFN_item item) -> item\n-    | Some _ -> bugi cx node \"defn is not an item\"\n-    | None -> bugi cx node \"missing defn\"\n-;;\n-\n-let get_slot (cx:ctxt) (node:node_id) : Ast.slot =\n-  match htab_search cx.ctxt_all_defns node with\n-      Some (DEFN_slot slot) -> slot\n-    | Some _ -> bugi cx node \"defn is not a slot\"\n-    | None -> bugi cx node \"missing defn\"\n-;;\n-\n let get_mod_item\n     (cx:ctxt)\n     (node:node_id)"}]}