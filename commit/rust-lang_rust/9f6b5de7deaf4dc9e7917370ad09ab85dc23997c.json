{"sha": "9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNmI1ZGU3ZGVhZjRkYzllNzkxNzM3MGFkMDlhYjg1ZGMyMzk5N2M=", "commit": {"author": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-03-25T18:29:11Z"}, "committer": {"name": "flip1995", "email": "philipp.krones@embecosm.com", "date": "2021-03-25T18:29:11Z"}, "message": "Merge commit '0e87918536b9833bbc6c683d1f9d51ee2bf03ef1' into clippyup", "tree": {"sha": "9a22fbb24606de4921c8d6842b5d81316ad9ffc2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a22fbb24606de4921c8d6842b5d81316ad9ffc2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "html_url": "https://github.com/rust-lang/rust/commit/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e06731bb2837215765530c8768a7d251155c2137", "url": "https://api.github.com/repos/rust-lang/rust/commits/e06731bb2837215765530c8768a7d251155c2137", "html_url": "https://github.com/rust-lang/rust/commit/e06731bb2837215765530c8768a7d251155c2137"}], "stats": {"total": 8562, "additions": 5714, "deletions": 2848}, "files": [{"sha": "f7916511edfe7a7e662962ae971b68cd2a531af1", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -2103,6 +2103,7 @@ Released 2018-09-13\n [`if_let_some_result`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_let_some_result\n [`if_not_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else\n [`if_same_then_else`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else\n+[`if_then_some_else_none`]: https://rust-lang.github.io/rust-clippy/master/index.html#if_then_some_else_none\n [`ifs_same_cond`]: https://rust-lang.github.io/rust-clippy/master/index.html#ifs_same_cond\n [`implicit_clone`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_clone\n [`implicit_hasher`]: https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher"}, {"sha": "e0a4d4455e9c6c2182ebb60639f228f35eaec621", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 29, "deletions": 7, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -18,11 +18,13 @@ All contributors are expected to follow the [Rust Code of Conduct].\n     - [Finding something to fix/improve](#finding-something-to-fiximprove)\n   - [Writing code](#writing-code)\n   - [Getting code-completion for rustc internals to work](#getting-code-completion-for-rustc-internals-to-work)\n+    - [IntelliJ Rust](#intellij-rust)\n+    - [Rust Analyzer](#rust-analyzer)\n   - [How Clippy works](#how-clippy-works)\n-  - [Syncing changes between Clippy and `rust-lang/rust`](#syncing-changes-between-clippy-and-rust-langrust)\n+  - [Syncing changes between Clippy and [`rust-lang/rust`]](#syncing-changes-between-clippy-and-rust-langrust)\n     - [Patching git-subtree to work with big repos](#patching-git-subtree-to-work-with-big-repos)\n-    - [Performing the sync from `rust-lang/rust` to Clippy](#performing-the-sync-from-rust-langrust-to-clippy)\n-    - [Performing the sync from Clippy to `rust-lang/rust`](#performing-the-sync-from-clippy-to-rust-langrust)\n+    - [Performing the sync from [`rust-lang/rust`] to Clippy](#performing-the-sync-from-rust-langrust-to-clippy)\n+    - [Performing the sync from Clippy to [`rust-lang/rust`]](#performing-the-sync-from-clippy-to-rust-langrust)\n     - [Defining remotes](#defining-remotes)\n   - [Issue and PR triage](#issue-and-pr-triage)\n   - [Bors and Homu](#bors-and-homu)\n@@ -105,21 +107,41 @@ quick read.\n \n ## Getting code-completion for rustc internals to work\n \n-Unfortunately, [`rust-analyzer`][ra_homepage] does not (yet?) understand how Clippy uses compiler-internals\n+### IntelliJ Rust\n+Unfortunately, [`IntelliJ Rust`][IntelliJ_rust_homepage] does not (yet?) understand how Clippy uses compiler-internals\n using `extern crate` and it also needs to be able to read the source files of the rustc-compiler which are not\n available via a `rustup` component at the time of writing.\n To work around this, you need to have a copy of the [rustc-repo][rustc_repo] available which can be obtained via\n `git clone https://github.com/rust-lang/rust/`.\n Then you can run a `cargo dev` command to automatically make Clippy use the rustc-repo via path-dependencies\n-which rust-analyzer will be able to understand.\n-Run `cargo dev ra_setup --repo-path <repo-path>` where `<repo-path>` is an absolute path to the rustc repo\n+which `IntelliJ Rust` will be able to understand.\n+Run `cargo dev ide_setup --repo-path <repo-path>` where `<repo-path>` is a path to the rustc repo\n you just cloned.\n The command will add path-dependencies pointing towards rustc-crates inside the rustc repo to\n Clippys `Cargo.toml`s and should allow rust-analyzer to understand most of the types that Clippy uses.\n Just make sure to remove the dependencies again before finally making a pull request!\n \n-[ra_homepage]: https://rust-analyzer.github.io/\n [rustc_repo]: https://github.com/rust-lang/rust/\n+[IntelliJ_rust_homepage]: https://intellij-rust.github.io/\n+\n+### Rust Analyzer\n+As of [#6869][6869], [`rust-analyzer`][ra_homepage] can understand that Clippy uses compiler-internals\n+using `extern crate` when `package.metadata.rust-analyzer.rustc_private` is set to `true` in Clippys `Cargo.toml.`\n+You will required a `nightly` toolchain with the `rustc-dev` component installed.\n+Make sure that in the `rust-analyzer` configuration, you set\n+```\n+{ \"rust-analyzer.rustcSource\": \"discover\" }\n+```\n+and\n+```\n+{ \"rust-analyzer.updates.channel\": \"nightly\" }\n+```\n+You should be able to see information on things like `Expr` or `EarlyContext` now if you hover them, also\n+a lot more type hints.\n+This will work with `rust-analyzer 2021-03-15` shipped in nightly `1.52.0-nightly (107896c32 2021-03-15)` or later.\n+\n+[ra_homepage]: https://rust-analyzer.github.io/\n+[6869]: https://github.com/rust-lang/rust-clippy/pull/6869\n \n ## How Clippy works\n "}, {"sha": "cade44a0a9ab4a8bc0cd4a3ad2489f86a4dded74", "filename": "Cargo.toml", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.52\"\n+version = \"0.1.53\"\n authors = [\"The Rust Clippy Developers\"]\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n repository = \"https://github.com/rust-lang/rust-clippy\"\n@@ -37,6 +37,8 @@ clippy-mini-macro-test = { version = \"0.2\", path = \"mini-macro\" }\n serde = { version = \"1.0\", features = [\"derive\"] }\n derive-new = \"0.5\"\n regex = \"1.4\"\n+quote = \"1\"\n+syn = { version = \"1\", features = [\"full\"] }\n \n # A noop dependency that changes in the Rust repository, it's a bit of a hack.\n # See the `src/tools/rustc-workspace-hack/README.md` file in `rust-lang/rust`"}, {"sha": "111c79c332d0596e4a5d25cb338c95374da4a88d", "filename": "clippy_dev/src/fmt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_dev%2Fsrc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_dev%2Fsrc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Ffmt.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -90,7 +90,7 @@ pub fn run(check: bool, verbose: bool) {\n             },\n             CliError::RaSetupActive => {\n                 eprintln!(\n-                    \"error: a local rustc repo is enabled as path dependency via `cargo dev ra_setup`.\n+                    \"error: a local rustc repo is enabled as path dependency via `cargo dev ide_setup`.\n Not formatting because that would format the local repo as well!\n Please revert the changes to Cargo.tomls first.\"\n                 );"}, {"sha": "defb1133e44e60f285bf642a48abd5c22ffe8cc1", "filename": "clippy_dev/src/ide_setup.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_dev%2Fsrc%2Fide_setup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_dev%2Fsrc%2Fide_setup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fide_setup.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -55,7 +55,7 @@ fn inject_deps_into_manifest(\n     // do not inject deps if we have aleady done so\n     if cargo_toml.contains(\"[target.'cfg(NOT_A_PLATFORM)'.dependencies]\") {\n         eprintln!(\n-            \"cargo dev ra_setup: warning: deps already found inside {}, doing nothing.\",\n+            \"cargo dev ide_setup: warning: deps already found inside {}, doing nothing.\",\n             manifest_path\n         );\n         return Ok(());", "previous_filename": "clippy_dev/src/ra_setup.rs"}, {"sha": "a5e94683878ec7ff78b9a8eb932546fc273c1e7b", "filename": "clippy_dev/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flib.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -12,8 +12,8 @@ use walkdir::WalkDir;\n \n pub mod bless;\n pub mod fmt;\n+pub mod ide_setup;\n pub mod new_lint;\n-pub mod ra_setup;\n pub mod serve;\n pub mod stderr_length_check;\n pub mod update_lints;"}, {"sha": "f4da783502c5fdc8c8e51dd8eef0a4ee61929c67", "filename": "clippy_dev/src/main.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_dev%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_dev%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Fmain.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,7 @@\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n \n use clap::{App, Arg, ArgMatches, SubCommand};\n-use clippy_dev::{bless, fmt, new_lint, ra_setup, serve, stderr_length_check, update_lints};\n+use clippy_dev::{bless, fmt, ide_setup, new_lint, serve, stderr_length_check, update_lints};\n fn main() {\n     let matches = get_clap_config();\n \n@@ -34,7 +34,7 @@ fn main() {\n         (\"limit_stderr_length\", _) => {\n             stderr_length_check::check();\n         },\n-        (\"ra_setup\", Some(matches)) => ra_setup::run(matches.value_of(\"rustc-repo-path\")),\n+        (\"ide_setup\", Some(matches)) => ide_setup::run(matches.value_of(\"rustc-repo-path\")),\n         (\"serve\", Some(matches)) => {\n             let port = matches.value_of(\"port\").unwrap().parse().unwrap();\n             let lint = matches.value_of(\"lint\");\n@@ -138,8 +138,8 @@ fn get_clap_config<'a>() -> ArgMatches<'a> {\n                 .about(\"Ensures that stderr files do not grow longer than a certain amount of lines.\"),\n         )\n         .subcommand(\n-            SubCommand::with_name(\"ra_setup\")\n-                .about(\"Alter dependencies so rust-analyzer can find rustc internals\")\n+            SubCommand::with_name(\"ide_setup\")\n+                .about(\"Alter dependencies so Intellij Rust can find rustc internals\")\n                 .arg(\n                     Arg::with_name(\"rustc-repo-path\")\n                         .long(\"repo-path\")"}, {"sha": "05cdd9d064a8e44b3d0d4d28361afe4b74ffc126", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.1.52\"\n+version = \"0.1.53\"\n # end automatic update\n authors = [\"The Rust Clippy Developers\"]\n description = \"A bunch of helpful lints to avoid common pitfalls in Rust\"\n@@ -20,16 +20,13 @@ pulldown-cmark = { version = \"0.8\", default-features = false }\n quine-mc_cluskey = \"0.2.2\"\n regex-syntax = \"0.6\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n-smallvec = { version = \"1\", features = [\"union\"] }\n toml = \"0.5.3\"\n unicode-normalization = \"0.1\"\n semver = \"0.11\"\n rustc-semver = \"1.1.0\"\n # NOTE: cargo requires serde feat in its url dep\n # see <https://github.com/rust-lang/rust/pull/63587#issuecomment-522343864>\n url = { version = \"2.1.0\", features = [\"serde\"] }\n-quote = \"1\"\n-syn = { version = \"1\", features = [\"full\"] }\n \n [features]\n deny-warnings = []"}, {"sha": "3d04abe094d7811e25c34e0d42b9b8456776bb39", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::span_lint;\n+use clippy_utils::diagnostics::span_lint;\n use rustc_ast::ast::{FloatTy, LitFloatType, LitKind};\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "c560f545d6a6155fd6785bd715afbb75efbb5019", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,5 @@\n use crate::consts::constant_simple;\n-use crate::utils::span_lint;\n+use clippy_utils::diagnostics::span_lint;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};"}, {"sha": "4b31e16094e9f9a1b2d6b84bef58239698c62b8b", "filename": "clippy_lints/src/as_conversions.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fas_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fas_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fas_conversions.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,10 +1,9 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{Expr, ExprKind};\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::span_lint_and_help;\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `as` conversions.\n     ///"}, {"sha": "b970c71b753cec24a83c6cc20f65918cab12d0e0", "filename": "clippy_lints/src/asm_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fasm_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fasm_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fasm_syntax.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,6 @@\n use std::fmt;\n \n-use crate::utils::span_lint_and_help;\n+use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{Expr, ExprKind, InlineAsmOptions};\n use rustc_lint::{EarlyContext, EarlyLintPass, Lint};\n use rustc_session::{declare_lint_pass, declare_tool_lint};"}, {"sha": "16905781c56b6851b5ffcce9c89b1ccbdc381f0b", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,7 @@\n use crate::consts::{constant, Constant};\n-use crate::utils::{is_direct_expn_of, is_expn_of, match_panic_call, snippet_opt, span_lint_and_help};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::{is_direct_expn_of, is_expn_of, match_panic_call};\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "bc6eec0051a41d872c466b2a0a4f5becee8b5585", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,8 @@\n-use crate::utils::{\n-    eq_expr_value, get_trait_def_id, implements_trait, snippet_opt, span_lint_and_then, trait_ref_of_method,\n-};\n-use crate::utils::{higher, sugg};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::ty::implements_trait;\n+use clippy_utils::{eq_expr_value, get_trait_def_id, trait_ref_of_method};\n+use clippy_utils::{higher, paths, sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -92,7 +93,7 @@ impl<'tcx> LateLintPass<'tcx> for AssignOps {\n                              $($trait_name:ident),+) => {\n                                 match $op {\n                                     $(hir::BinOpKind::$trait_name => {\n-                                        let [krate, module] = crate::utils::paths::OPS_MODULE;\n+                                        let [krate, module] = paths::OPS_MODULE;\n                                         let path: [&str; 3] = [krate, module, concat!(stringify!($trait_name), \"Assign\")];\n                                         let trait_id = if let Some(trait_id) = get_trait_def_id($cx, &path) {\n                                             trait_id"}, {"sha": "e6c7c68f91a07a0ce3cb320f67a43aa7a7a5d0e8", "filename": "clippy_lints/src/async_yields_async.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fasync_yields_async.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fasync_yields_async.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{implements_trait, snippet, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::implements_trait;\n use rustc_errors::Applicability;\n use rustc_hir::{AsyncGeneratorKind, Body, BodyId, ExprKind, GeneratorKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "dfb1819932563c03575cae032477a045f03e01f9", "filename": "clippy_lints/src/atomic_ordering.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fatomic_ordering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fatomic_ordering.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{match_def_path, span_lint_and_help};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::match_def_path;\n use if_chain::if_chain;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{Expr, ExprKind};"}, {"sha": "3cef8d2a78bf727eb6e99e0414b29ca1f216ac48", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,9 +1,8 @@\n //! checks for attributes\n \n-use crate::utils::{\n-    first_line_of_span, is_present_in_source, match_panic_def_id, snippet_opt, span_lint, span_lint_and_help,\n-    span_lint_and_sugg, span_lint_and_then, without_block_comments,\n-};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::match_panic_def_id;\n+use clippy_utils::source::{first_line_of_span, is_present_in_source, snippet_opt, without_block_comments};\n use if_chain::if_chain;\n use rustc_ast::{AttrKind, AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n use rustc_errors::Applicability;\n@@ -431,7 +430,7 @@ fn is_relevant_block(cx: &LateContext<'_>, typeck_results: &ty::TypeckResults<'_\n         |stmt| match &stmt.kind {\n             StmtKind::Local(_) => true,\n             StmtKind::Expr(expr) | StmtKind::Semi(expr) => is_relevant_expr(cx, typeck_results, expr),\n-            _ => false,\n+            StmtKind::Item(_) => false,\n         },\n     )\n }\n@@ -565,7 +564,7 @@ fn check_deprecated_cfg_attr(cx: &EarlyContext<'_>, attr: &Attribute) {\n         // check for `rustfmt_skip` and `rustfmt::skip`\n         if let Some(skip_item) = &items[1].meta_item();\n         if skip_item.has_name(sym!(rustfmt_skip)) ||\n-            skip_item.path.segments.last().expect(\"empty path in attribute\").ident.name == sym!(skip);\n+            skip_item.path.segments.last().expect(\"empty path in attribute\").ident.name == sym::skip;\n         // Only lint outer attributes, because custom inner attributes are unstable\n         // Tracking issue: https://github.com/rust-lang/rust/issues/54726\n         if let AttrStyle::Outer = attr.style;\n@@ -614,7 +613,7 @@ fn check_mismatched_target_os(cx: &EarlyContext<'_>, attr: &Attribute) {\n                             }\n                         }\n                     },\n-                    _ => {},\n+                    MetaItemKind::NameValue(..) => {},\n                 }\n             }\n         }"}, {"sha": "68eee0520b38357b4a39bfe85e9069ef768ddf9c", "filename": "clippy_lints/src/await_holding_invalid.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fawait_holding_invalid.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{match_def_path, paths, span_lint_and_note};\n+use clippy_utils::diagnostics::span_lint_and_note;\n+use clippy_utils::{match_def_path, paths};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{AsyncGeneratorKind, Body, BodyId, GeneratorKind};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "f7daf3dab49481848e7d8e1fa3b0a2280bea109b", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,6 @@\n use crate::consts::{constant, Constant};\n-use crate::utils::sugg::Sugg;\n-use crate::utils::{span_lint, span_lint_and_then};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n+use clippy_utils::sugg::Sugg;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;"}, {"sha": "b26ef33e056981ccd084623f97c13356dadec84b", "filename": "clippy_lints/src/blacklisted_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fblacklisted_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblacklisted_name.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::span_lint;\n+use clippy_utils::diagnostics::span_lint;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::{Pat, PatKind};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "badcf8d2a43cd8e7082ce27dd4ec4f39c852a70b", "filename": "clippy_lints/src/blocks_in_if_conditions.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblocks_in_if_conditions.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,7 @@\n-use crate::utils::{\n-    differing_macro_contexts, get_parent_expr, get_trait_def_id, implements_trait, paths,\n-    snippet_block_with_applicability, span_lint, span_lint_and_sugg,\n-};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n+use clippy_utils::source::snippet_block_with_applicability;\n+use clippy_utils::ty::implements_trait;\n+use clippy_utils::{differing_macro_contexts, get_parent_expr};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n@@ -10,6 +10,7 @@ use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for `if` conditions that use blocks containing an\n@@ -61,7 +62,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n                 if let Some(parent) = get_parent_expr(self.cx, expr);\n                 if let ExprKind::MethodCall(_, _, args, _) = parent.kind;\n                 let caller = self.cx.typeck_results().expr_ty(&args[0]);\n-                if let Some(iter_id) = get_trait_def_id(self.cx, &paths::ITERATOR);\n+                if let Some(iter_id) = self.cx.tcx.get_diagnostic_item(sym::Iterator);\n                 if implements_trait(self.cx, caller, iter_id, &[]);\n                 then {\n                     return;"}, {"sha": "58d9aa9c005c2226966d0f148413a83f9b5ade15", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,7 @@\n-use crate::utils::{\n-    eq_expr_value, get_trait_def_id, implements_trait, in_macro, is_type_diagnostic_item, paths, snippet_opt,\n-    span_lint_and_sugg, span_lint_and_then,\n-};\n+use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n+use clippy_utils::{eq_expr_value, get_trait_def_id, in_macro, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;"}, {"sha": "846ac08e93a414deec23082898f1c9ddd74e984c", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,7 @@\n-use crate::utils::{\n-    contains_name, get_pat_name, match_type, paths, single_segment_path, snippet_with_applicability, span_lint_and_sugg,\n-};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::match_type;\n+use clippy_utils::{contains_name, get_pat_name, paths, single_segment_path};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, UnOp};"}, {"sha": "fce5c559672371cc119b8ec1e6dea5a97c299b57", "filename": "clippy_lints/src/cargo_common_metadata.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcargo_common_metadata.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -2,7 +2,8 @@\n \n use std::path::PathBuf;\n \n-use crate::utils::{run_lints, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::run_lints;\n use rustc_hir::{hir_id::CRATE_HIR_ID, Crate};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};"}, {"sha": "c9ef379be565d382a168474b1d8f72cf9cfbab0f", "filename": "clippy_lints/src/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcase_sensitive_file_extension_comparisons.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::span_lint_and_help;\n+use clippy_utils::diagnostics::span_lint_and_help;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_hir::{Expr, ExprKind, PathSegment};"}, {"sha": "869deecfbd53a7ff882cb96d70f5dc2afa89ad00", "filename": "clippy_lints/src/casts/cast_lossless.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_lossless.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,10 +1,12 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::in_constant;\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::ty::is_isize_or_usize;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, FloatTy, Ty};\n \n-use crate::utils::{in_constant, is_isize_or_usize, snippet_opt, span_lint_and_sugg};\n-\n use super::{utils, CAST_LOSSLESS};\n \n pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_op: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {"}, {"sha": "833ad122e0d4e20c46ae07f32c94157a4120f218", "filename": "clippy_lints/src/casts/cast_possible_truncation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_truncation.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,9 +1,9 @@\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::ty::is_isize_or_usize;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, FloatTy, Ty};\n \n-use crate::utils::{is_isize_or_usize, span_lint};\n-\n use super::{utils, CAST_POSSIBLE_TRUNCATION};\n \n pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {"}, {"sha": "2c5c1d7cb4654720e7c905ec3fd71d0d52611dbe", "filename": "clippy_lints/src/casts/cast_possible_wrap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_wrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_wrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_possible_wrap.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,9 +1,9 @@\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::ty::is_isize_or_usize;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::Ty;\n \n-use crate::utils::{is_isize_or_usize, span_lint};\n-\n use super::{utils, CAST_POSSIBLE_WRAP};\n \n pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {"}, {"sha": "63ac8fd2dd269959f08149e2bf7c9efb36ef2efe", "filename": "clippy_lints/src/casts/cast_precision_loss.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fcast_precision_loss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fcast_precision_loss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_precision_loss.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,9 +1,9 @@\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::ty::is_isize_or_usize;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, FloatTy, Ty};\n \n-use crate::utils::{is_isize_or_usize, span_lint};\n-\n use super::{utils, CAST_PRECISION_LOSS};\n \n pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {"}, {"sha": "5208156ffd2f40b8bf5dbe7bacebb92e48d2e497", "filename": "clippy_lints/src/casts/cast_ptr_alignment.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_ptr_alignment.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,13 +1,12 @@\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::is_hir_ty_cfg_dependant;\n+use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind, GenericArg};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::symbol::sym;\n use rustc_target::abi::LayoutOf;\n \n-use if_chain::if_chain;\n-\n-use crate::utils::{is_hir_ty_cfg_dependant, span_lint};\n-\n use super::CAST_PTR_ALIGNMENT;\n \n pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {"}, {"sha": "d9bf1ea58b97bb8a49ad3ed0588b0ec3c0175146", "filename": "clippy_lints/src/casts/cast_ref_to_mut.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fcast_ref_to_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fcast_ref_to_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_ref_to_mut.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,11 +1,9 @@\n+use clippy_utils::diagnostics::span_lint;\n+use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind, MutTy, Mutability, TyKind, UnOp};\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n \n-use if_chain::if_chain;\n-\n-use crate::utils::span_lint;\n-\n use super::CAST_REF_TO_MUT;\n \n pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {"}, {"sha": "bf722d0a3f49689dad1edb04c7604fe4b7bc9cd2", "filename": "clippy_lints/src/casts/cast_sign_loss.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fcast_sign_loss.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fcast_sign_loss.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_sign_loss.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,12 +1,11 @@\n+use crate::consts::{constant, Constant};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{method_chain_args, sext};\n+use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n \n-use if_chain::if_chain;\n-\n-use crate::consts::{constant, Constant};\n-use crate::utils::{method_chain_args, sext, span_lint};\n-\n use super::CAST_SIGN_LOSS;\n \n pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_op: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {"}, {"sha": "099a0de881ff0fb27eb868631b3742304bd424c0", "filename": "clippy_lints/src/casts/char_lit_as_u8.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fchar_lit_as_u8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fchar_lit_as_u8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fchar_lit_as_u8.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,13 +1,12 @@\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet_with_applicability;\n+use if_chain::if_chain;\n use rustc_ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, UintTy};\n \n-use if_chain::if_chain;\n-\n-use crate::utils::{snippet_with_applicability, span_lint_and_then};\n-\n use super::CHAR_LIT_AS_U8;\n \n pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {"}, {"sha": "35350d8a25b86ce9cefff7c6ce83e6a6b4ee9fe9", "filename": "clippy_lints/src/casts/fn_to_numeric_cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,10 +1,10 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty, UintTy};\n \n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n-\n use super::{utils, FN_TO_NUMERIC_CAST};\n \n pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {"}, {"sha": "6287f479b5bfec4db1b51a6c1cc6fbe6310e97a0", "filename": "clippy_lints/src/casts/fn_to_numeric_cast_with_truncation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_with_truncation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_with_truncation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_with_truncation.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,10 +1,10 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n \n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n-\n use super::{utils, FN_TO_NUMERIC_CAST_WITH_TRUNCATION};\n \n pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {"}, {"sha": "d9e172c01a70d9342efcf8d903cbbe79b69c9712", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -12,14 +12,13 @@ mod ptr_as_ptr;\n mod unnecessary_cast;\n mod utils;\n \n+use clippy_utils::is_hir_ty_cfg_dependant;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-use crate::utils::is_hir_ty_cfg_dependant;\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for casts from any numerical to a float type where\n     /// the receiving type cannot store all values from the original type without"}, {"sha": "9113e5a0920a250b57c849c6e13b9fac06c45114", "filename": "clippy_lints/src/casts/ptr_as_ptr.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fptr_as_ptr.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,16 +1,15 @@\n use std::borrow::Cow;\n \n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::meets_msrv;\n+use clippy_utils::sugg::Sugg;\n+use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, Mutability, TyKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, TypeAndMut};\n use rustc_semver::RustcVersion;\n \n-use if_chain::if_chain;\n-\n-use crate::utils::sugg::Sugg;\n-use crate::utils::{meets_msrv, span_lint_and_sugg};\n-\n use super::PTR_AS_PTR;\n \n const PTR_AS_PTR_MSRV: RustcVersion = RustcVersion::new(1, 38, 0);"}, {"sha": "9ed359922fd4da4f4e80fa34dd9f99e72074e38a", "filename": "clippy_lints/src/casts/unnecessary_cast.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Funnecessary_cast.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,14 +1,14 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::numeric_literal::NumericLiteral;\n+use clippy_utils::source::snippet_opt;\n+use if_chain::if_chain;\n use rustc_ast::{LitFloatType, LitIntType, LitKind};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, Lit, UnOp};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, FloatTy, InferTy, Ty};\n \n-use if_chain::if_chain;\n-\n-use crate::utils::{numeric_literal::NumericLiteral, snippet_opt, span_lint, span_lint_and_sugg};\n-\n use super::UNNECESSARY_CAST;\n \n pub(super) fn check(\n@@ -44,16 +44,28 @@ pub(super) fn check(\n                 lint_unnecessary_cast(cx, expr, &literal_str, cast_from, cast_to);\n             },\n             LitKind::Int(_, LitIntType::Unsuffixed) | LitKind::Float(_, LitFloatType::Unsuffixed) => {},\n+            LitKind::Int(_, LitIntType::Signed(_) | LitIntType::Unsigned(_))\n+            | LitKind::Float(_, LitFloatType::Suffixed(_))\n+                if cast_from.kind() == cast_to.kind() =>\n+            {\n+                if let Some(src) = snippet_opt(cx, lit.span) {\n+                    let num_lit = NumericLiteral::from_lit_kind(&src, &lit.node).unwrap();\n+                    lint_unnecessary_cast(cx, expr, num_lit.integer, cast_from, cast_to);\n+                }\n+            },\n             _ => {\n                 if cast_from.kind() == cast_to.kind() && !in_external_macro(cx.sess(), expr.span) {\n-                    span_lint(\n+                    span_lint_and_sugg(\n                         cx,\n                         UNNECESSARY_CAST,\n                         expr.span,\n                         &format!(\n                             \"casting to the same type is unnecessary (`{}` -> `{}`)\",\n                             cast_from, cast_to\n                         ),\n+                        \"try\",\n+                        literal_str,\n+                        Applicability::MachineApplicable,\n                     );\n                     return true;\n                 }"}, {"sha": "ed46cac493aad38c8ad686a4c254272c33844df3", "filename": "clippy_lints/src/checked_conversions.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fchecked_conversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fchecked_conversions.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,8 @@\n //! lint on manually implemented checked conversions that could be transformed into `try_from`\n \n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{meets_msrv, SpanlessEq};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -9,8 +12,6 @@ use rustc_middle::lint::in_external_macro;\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-use crate::utils::{meets_msrv, snippet_with_applicability, span_lint_and_sugg, SpanlessEq};\n-\n const CHECKED_CONVERSIONS_MSRV: RustcVersion = RustcVersion::new(1, 34, 0);\n \n declare_clippy_lint! {"}, {"sha": "4cc542f723ccea49daa1956bede86960f54ebd42", "filename": "clippy_lints/src/cognitive_complexity.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcognitive_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcognitive_complexity.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,9 @@\n //! calculate cognitive complexity and warn about overly complex functions\n \n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::LimitStack;\n use rustc_ast::ast::Attribute;\n use rustc_hir::intravisit::{walk_expr, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{Body, Expr, ExprKind, FnDecl, HirId};\n@@ -9,8 +13,6 @@ use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_span::{sym, BytePos};\n \n-use crate::utils::{is_type_diagnostic_item, snippet_opt, span_lint_and_help, LimitStack};\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for methods with high cognitive complexity.\n     ///"}, {"sha": "dae5c86bd4437b28c9025b399214351b15a99d8e", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -12,15 +12,15 @@\n //!\n //! This lint is **warn** by default\n \n+use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::source::{snippet_block, snippet_block_with_applicability};\n+use clippy_utils::sugg::Sugg;\n use if_chain::if_chain;\n use rustc_ast::ast;\n+use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::sugg::Sugg;\n-use crate::utils::{snippet_block, snippet_block_with_applicability, span_lint_and_sugg, span_lint_and_then};\n-use rustc_errors::Applicability;\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for nested `if` statements which can be collapsed\n     /// by `&&`-combining their conditions."}, {"sha": "e2b3686ddf0acfe3f22a47911eb6718a11232f86", "filename": "clippy_lints/src/collapsible_match.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_match.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n-use crate::utils::visitors::LocalUsedVisitor;\n-use crate::utils::{path_to_local, span_lint_and_then, SpanlessEq};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::visitors::LocalUsedVisitor;\n+use clippy_utils::{path_to_local, SpanlessEq};\n use if_chain::if_chain;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind, Res};\n use rustc_hir::{Arm, Expr, ExprKind, Guard, HirId, Pat, PatKind, QPath, StmtKind, UnOp};"}, {"sha": "d601cb7c22473ca561c059be8d29e1fda99e8735", "filename": "clippy_lints/src/comparison_chain.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcomparison_chain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcomparison_chain.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,6 @@\n-use crate::utils::{\n-    get_trait_def_id, if_sequence, implements_trait, parent_node_is_if_expr, paths, span_lint_and_help, SpanlessEq,\n-};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::ty::implements_trait;\n+use clippy_utils::{get_trait_def_id, if_sequence, parent_node_is_if_expr, paths, SpanlessEq};\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};"}, {"sha": "46093a16571bb884a0ba827450ab9626d8233067", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n-use crate::utils::{eq_expr_value, in_macro, search_same, SpanlessEq, SpanlessHash};\n-use crate::utils::{get_parent_expr, if_sequence, span_lint_and_note};\n+use clippy_utils::diagnostics::span_lint_and_note;\n+use clippy_utils::{eq_expr_value, in_macro, search_same, SpanlessEq, SpanlessHash};\n+use clippy_utils::{get_parent_expr, if_sequence};\n use rustc_hir::{Block, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};"}, {"sha": "35079c6bedc02d10b47311a9737d1087c73bf5c4", "filename": "clippy_lints/src/copy_iterator.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcopy_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopy_iterator.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,11 @@\n-use crate::utils::{is_copy, match_path, paths, span_lint_and_note};\n+use clippy_utils::diagnostics::span_lint_and_note;\n+use clippy_utils::ty::is_copy;\n use rustc_hir::{Impl, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::sym;\n+\n+use if_chain::if_chain;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for types that implement `Copy` as well as\n@@ -33,14 +37,16 @@ declare_lint_pass!(CopyIterator => [COPY_ITERATOR]);\n \n impl<'tcx> LateLintPass<'tcx> for CopyIterator {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if let ItemKind::Impl(Impl {\n-            of_trait: Some(ref trait_ref),\n-            ..\n-        }) = item.kind\n-        {\n+        if_chain! {\n+            if let ItemKind::Impl(Impl {\n+                of_trait: Some(ref trait_ref),\n+                ..\n+            }) = item.kind;\n             let ty = cx.tcx.type_of(item.def_id);\n-\n-            if is_copy(cx, ty) && match_path(&trait_ref.path, &paths::ITERATOR) {\n+            if is_copy(cx, ty);\n+            if let Some(trait_id) = trait_ref.trait_def_id();\n+            if cx.tcx.is_diagnostic_item(sym::Iterator, trait_id);\n+            then {\n                 span_lint_and_note(\n                     cx,\n                     COPY_ITERATOR,"}, {"sha": "ac890c90c97c38bdd22c01c6cedcf10ddf7641ce", "filename": "clippy_lints/src/create_dir.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcreate_dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fcreate_dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcreate_dir.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{match_def_path, paths, snippet, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n+use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};"}, {"sha": "286cc7e223efb997cd3422b00a26a1382e3ac601", "filename": "clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdbg_macro.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{snippet_opt, span_lint_and_help, span_lint_and_sugg};\n+use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n+use clippy_utils::source::snippet_opt;\n use rustc_ast::ast;\n use rustc_ast::tokenstream::TokenStream;\n use rustc_errors::Applicability;"}, {"sha": "568a174445c1805a9669acbafb6c307580dcbd3c", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,6 @@\n-use crate::utils::{\n-    any_parent_is_automatically_derived, contains_name, match_def_path, paths, snippet_with_macro_callsite,\n-};\n-use crate::utils::{span_lint_and_note, span_lint_and_sugg};\n+use clippy_utils::diagnostics::{span_lint_and_note, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_macro_callsite;\n+use clippy_utils::{any_parent_is_automatically_derived, contains_name, match_def_path, paths};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n@@ -105,6 +104,7 @@ impl LateLintPass<'_> for Default {\n         }\n     }\n \n+    #[allow(clippy::too_many_lines)]\n     fn check_block<'tcx>(&mut self, cx: &LateContext<'tcx>, block: &Block<'tcx>) {\n         // start from the `let mut _ = _::default();` and look at all the following\n         // statements, see if they re-assign the fields of the binding\n@@ -198,6 +198,24 @@ impl LateLintPass<'_> for Default {\n                     .collect::<Vec<String>>()\n                     .join(\", \");\n \n+                // give correct suggestion if generics are involved (see #6944)\n+                let binding_type = if_chain! {\n+                    if let ty::Adt(adt_def, substs) = binding_type.kind();\n+                    if !substs.is_empty();\n+                    let adt_def_ty_name = cx.tcx.item_name(adt_def.did);\n+                    let generic_args = substs.iter().collect::<Vec<_>>();\n+                    let tys_str = generic_args\n+                        .iter()\n+                        .map(ToString::to_string)\n+                        .collect::<Vec<_>>()\n+                        .join(\", \");\n+                    then {\n+                        format!(\"{}::<{}>\", adt_def_ty_name, &tys_str)\n+                    } else {\n+                        binding_type.to_string()\n+                    }\n+                };\n+\n                 let sugg = if ext_with_default {\n                     if field_list.is_empty() {\n                         format!(\"{}::default()\", binding_type)"}, {"sha": "d136db9373c2d1273fd1cf3b4f532a62b88006f9", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,3 +1,6 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n+use if_chain::if_chain;\n use rustc_ast::ast::{LitFloatType, LitIntType, LitKind};\n use rustc_errors::Applicability;\n use rustc_hir::{\n@@ -11,10 +14,6 @@ use rustc_middle::{\n };\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use if_chain::if_chain;\n-\n-use crate::utils::{snippet, span_lint_and_sugg};\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of unconstrained numeric literals which may cause default numeric fallback in type\n     /// inference."}, {"sha": "1415f8e235a7e8936ef370fc3613d67a4c05e2a1", "filename": "clippy_lints/src/dereference.rs", "status": "modified", "additions": 257, "deletions": 65, "changes": 322, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdereference.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,11 +1,14 @@\n-use crate::utils::{get_parent_expr, implements_trait, snippet, span_lint_and_sugg};\n-use if_chain::if_chain;\n-use rustc_ast::util::parser::{ExprPrecedence, PREC_POSTFIX, PREC_PREFIX};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_context;\n+use clippy_utils::ty::peel_mid_ty_refs;\n+use clippy_utils::{get_parent_node, in_macro, is_allowed};\n+use rustc_ast::util::parser::PREC_PREFIX;\n use rustc_errors::Applicability;\n-use rustc_hir::{Expr, ExprKind};\n+use rustc_hir::{BorrowKind, Expr, ExprKind, HirId, MatchSource, Mutability, Node, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::source_map::Span;\n+use rustc_middle::ty::{self, Ty, TyCtxt, TyS, TypeckResults};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use rustc_span::{symbol::sym, Span};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for explicit `deref()` or `deref_mut()` method calls.\n@@ -34,76 +37,265 @@ declare_clippy_lint! {\n     \"Explicit use of deref or deref_mut method while not in a method chain.\"\n }\n \n-declare_lint_pass!(Dereferencing => [\n-    EXPLICIT_DEREF_METHODS\n+impl_lint_pass!(Dereferencing => [\n+    EXPLICIT_DEREF_METHODS,\n ]);\n \n+#[derive(Default)]\n+pub struct Dereferencing {\n+    state: Option<(State, StateData)>,\n+\n+    // While parsing a `deref` method call in ufcs form, the path to the function is itself an\n+    // expression. This is to store the id of that expression so it can be skipped when\n+    // `check_expr` is called for it.\n+    skip_expr: Option<HirId>,\n+}\n+\n+struct StateData {\n+    /// Span of the top level expression\n+    span: Span,\n+    /// The required mutability\n+    target_mut: Mutability,\n+}\n+\n+enum State {\n+    // Any number of deref method calls.\n+    DerefMethod {\n+        // The number of calls in a sequence which changed the referenced type\n+        ty_changed_count: usize,\n+        is_final_ufcs: bool,\n+    },\n+}\n+\n+// A reference operation considered by this lint pass\n+enum RefOp {\n+    Method(Mutability),\n+    Deref,\n+    AddrOf,\n+}\n+\n impl<'tcx> LateLintPass<'tcx> for Dereferencing {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if_chain! {\n-            if !expr.span.from_expansion();\n-            if let ExprKind::MethodCall(ref method_name, _, ref args, _) = &expr.kind;\n-            if args.len() == 1;\n-\n-            then {\n-                if let Some(parent_expr) = get_parent_expr(cx, expr) {\n-                    // Check if we have the whole call chain here\n-                    if let ExprKind::MethodCall(..) = parent_expr.kind {\n-                        return;\n-                    }\n-                    // Check for Expr that we don't want to be linted\n-                    let precedence = parent_expr.precedence();\n-                    match precedence {\n-                        // Lint a Call is ok though\n-                        ExprPrecedence::Call | ExprPrecedence::AddrOf => (),\n-                        _ => {\n-                            if precedence.order() >= PREC_PREFIX && precedence.order() <= PREC_POSTFIX {\n-                                return;\n-                            }\n-                        }\n+        // Skip path expressions from deref calls. e.g. `Deref::deref(e)`\n+        if Some(expr.hir_id) == self.skip_expr.take() {\n+            return;\n+        }\n+\n+        // Stop processing sub expressions when a macro call is seen\n+        if in_macro(expr.span) {\n+            if let Some((state, data)) = self.state.take() {\n+                report(cx, expr, state, data);\n+            }\n+            return;\n+        }\n+\n+        let typeck = cx.typeck_results();\n+        let (kind, sub_expr) = if let Some(x) = try_parse_ref_op(cx.tcx, typeck, expr) {\n+            x\n+        } else {\n+            // The whole chain of reference operations has been seen\n+            if let Some((state, data)) = self.state.take() {\n+                report(cx, expr, state, data);\n+            }\n+            return;\n+        };\n+\n+        match (self.state.take(), kind) {\n+            (None, kind) => {\n+                let parent = get_parent_node(cx.tcx, expr.hir_id);\n+                let expr_ty = typeck.expr_ty(expr);\n+\n+                match kind {\n+                    RefOp::Method(target_mut)\n+                        if !is_allowed(cx, EXPLICIT_DEREF_METHODS, expr.hir_id)\n+                            && is_linted_explicit_deref_position(parent, expr.hir_id, expr.span) =>\n+                    {\n+                        self.state = Some((\n+                            State::DerefMethod {\n+                                ty_changed_count: if deref_method_same_type(expr_ty, typeck.expr_ty(sub_expr)) {\n+                                    0\n+                                } else {\n+                                    1\n+                                },\n+                                is_final_ufcs: matches!(expr.kind, ExprKind::Call(..)),\n+                            },\n+                            StateData {\n+                                span: expr.span,\n+                                target_mut,\n+                            },\n+                        ));\n                     }\n+                    _ => (),\n                 }\n-                let name = method_name.ident.as_str();\n-                lint_deref(cx, &*name, &args[0], args[0].span, expr.span);\n-            }\n+            },\n+            (Some((State::DerefMethod { ty_changed_count, .. }, data)), RefOp::Method(_)) => {\n+                self.state = Some((\n+                    State::DerefMethod {\n+                        ty_changed_count: if deref_method_same_type(typeck.expr_ty(expr), typeck.expr_ty(sub_expr)) {\n+                            ty_changed_count\n+                        } else {\n+                            ty_changed_count + 1\n+                        },\n+                        is_final_ufcs: matches!(expr.kind, ExprKind::Call(..)),\n+                    },\n+                    data,\n+                ));\n+            },\n+\n+            (Some((state, data)), _) => report(cx, expr, state, data),\n         }\n     }\n }\n \n-fn lint_deref(cx: &LateContext<'_>, method_name: &str, call_expr: &Expr<'_>, var_span: Span, expr_span: Span) {\n-    match method_name {\n-        \"deref\" => {\n-            let impls_deref_trait = cx.tcx.lang_items().deref_trait().map_or(false, |id| {\n-                implements_trait(cx, cx.typeck_results().expr_ty(&call_expr), id, &[])\n-            });\n-            if impls_deref_trait {\n-                span_lint_and_sugg(\n-                    cx,\n-                    EXPLICIT_DEREF_METHODS,\n-                    expr_span,\n-                    \"explicit deref method call\",\n-                    \"try this\",\n-                    format!(\"&*{}\", &snippet(cx, var_span, \"..\")),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n+fn try_parse_ref_op(\n+    tcx: TyCtxt<'tcx>,\n+    typeck: &'tcx TypeckResults<'_>,\n+    expr: &'tcx Expr<'_>,\n+) -> Option<(RefOp, &'tcx Expr<'tcx>)> {\n+    let (def_id, arg) = match expr.kind {\n+        ExprKind::MethodCall(_, _, [arg], _) => (typeck.type_dependent_def_id(expr.hir_id)?, arg),\n+        ExprKind::Call(\n+            Expr {\n+                kind: ExprKind::Path(path),\n+                hir_id,\n+                ..\n+            },\n+            [arg],\n+        ) => (typeck.qpath_res(path, *hir_id).opt_def_id()?, arg),\n+        ExprKind::Unary(UnOp::Deref, sub_expr) if !typeck.expr_ty(sub_expr).is_unsafe_ptr() => {\n+            return Some((RefOp::Deref, sub_expr));\n         },\n-        \"deref_mut\" => {\n-            let impls_deref_mut_trait = cx.tcx.lang_items().deref_mut_trait().map_or(false, |id| {\n-                implements_trait(cx, cx.typeck_results().expr_ty(&call_expr), id, &[])\n-            });\n-            if impls_deref_mut_trait {\n-                span_lint_and_sugg(\n-                    cx,\n-                    EXPLICIT_DEREF_METHODS,\n-                    expr_span,\n-                    \"explicit deref_mut method call\",\n-                    \"try this\",\n-                    format!(\"&mut *{}\", &snippet(cx, var_span, \"..\")),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n+        ExprKind::AddrOf(BorrowKind::Ref, _, sub_expr) => return Some((RefOp::AddrOf, sub_expr)),\n+        _ => return None,\n+    };\n+    if tcx.is_diagnostic_item(sym::deref_method, def_id) {\n+        Some((RefOp::Method(Mutability::Not), arg))\n+    } else if tcx.trait_of_item(def_id)? == tcx.lang_items().deref_mut_trait()? {\n+        Some((RefOp::Method(Mutability::Mut), arg))\n+    } else {\n+        None\n+    }\n+}\n+\n+// Checks whether the type for a deref call actually changed the type, not just the mutability of\n+// the reference.\n+fn deref_method_same_type(result_ty: Ty<'tcx>, arg_ty: Ty<'tcx>) -> bool {\n+    match (result_ty.kind(), arg_ty.kind()) {\n+        (ty::Ref(_, result_ty, _), ty::Ref(_, arg_ty, _)) => TyS::same_type(result_ty, arg_ty),\n+\n+        // The result type for a deref method is always a reference\n+        // Not matching the previous pattern means the argument type is not a reference\n+        // This means that the type did change\n+        _ => false,\n+    }\n+}\n+\n+// Checks whether the parent node is a suitable context for switching from a deref method to the\n+// deref operator.\n+fn is_linted_explicit_deref_position(parent: Option<Node<'_>>, child_id: HirId, child_span: Span) -> bool {\n+    let parent = match parent {\n+        Some(Node::Expr(e)) if e.span.ctxt() == child_span.ctxt() => e,\n+        _ => return true,\n+    };\n+    match parent.kind {\n+        // Leave deref calls in the middle of a method chain.\n+        // e.g. x.deref().foo()\n+        ExprKind::MethodCall(_, _, [self_arg, ..], _) if self_arg.hir_id == child_id => false,\n+\n+        // Leave deref calls resulting in a called function\n+        // e.g. (x.deref())()\n+        ExprKind::Call(func_expr, _) if func_expr.hir_id == child_id => false,\n+\n+        // Makes an ugly suggestion\n+        // e.g. *x.deref() => *&*x\n+        ExprKind::Unary(UnOp::Deref, _)\n+        // Postfix expressions would require parens\n+        | ExprKind::Match(_, _, MatchSource::TryDesugar | MatchSource::AwaitDesugar)\n+        | ExprKind::Field(..)\n+        | ExprKind::Index(..)\n+        | ExprKind::Err => false,\n+\n+        ExprKind::Box(..)\n+        | ExprKind::ConstBlock(..)\n+        | ExprKind::Array(_)\n+        | ExprKind::Call(..)\n+        | ExprKind::MethodCall(..)\n+        | ExprKind::Tup(..)\n+        | ExprKind::Binary(..)\n+        | ExprKind::Unary(..)\n+        | ExprKind::Lit(..)\n+        | ExprKind::Cast(..)\n+        | ExprKind::Type(..)\n+        | ExprKind::DropTemps(..)\n+        | ExprKind::If(..)\n+        | ExprKind::Loop(..)\n+        | ExprKind::Match(..)\n+        | ExprKind::Closure(..)\n+        | ExprKind::Block(..)\n+        | ExprKind::Assign(..)\n+        | ExprKind::AssignOp(..)\n+        | ExprKind::Path(..)\n+        | ExprKind::AddrOf(..)\n+        | ExprKind::Break(..)\n+        | ExprKind::Continue(..)\n+        | ExprKind::Ret(..)\n+        | ExprKind::InlineAsm(..)\n+        | ExprKind::LlvmInlineAsm(..)\n+        | ExprKind::Struct(..)\n+        | ExprKind::Repeat(..)\n+        | ExprKind::Yield(..) => true,\n+    }\n+}\n+\n+#[allow(clippy::needless_pass_by_value)]\n+fn report(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, state: State, data: StateData) {\n+    match state {\n+        State::DerefMethod {\n+            ty_changed_count,\n+            is_final_ufcs,\n+        } => {\n+            let mut app = Applicability::MachineApplicable;\n+            let (expr_str, expr_is_macro_call) = snippet_with_context(cx, expr.span, data.span.ctxt(), \"..\", &mut app);\n+            let ty = cx.typeck_results().expr_ty(expr);\n+            let (_, ref_count) = peel_mid_ty_refs(ty);\n+            let deref_str = if ty_changed_count >= ref_count && ref_count != 0 {\n+                // a deref call changing &T -> &U requires two deref operators the first time\n+                // this occurs. One to remove the reference, a second to call the deref impl.\n+                \"*\".repeat(ty_changed_count + 1)\n+            } else {\n+                \"*\".repeat(ty_changed_count)\n+            };\n+            let addr_of_str = if ty_changed_count < ref_count {\n+                // Check if a reborrow from &mut T -> &T is required.\n+                if data.target_mut == Mutability::Not && matches!(ty.kind(), ty::Ref(_, _, Mutability::Mut)) {\n+                    \"&*\"\n+                } else {\n+                    \"\"\n+                }\n+            } else if data.target_mut == Mutability::Mut {\n+                \"&mut \"\n+            } else {\n+                \"&\"\n+            };\n+\n+            let expr_str = if !expr_is_macro_call && is_final_ufcs && expr.precedence().order() < PREC_PREFIX {\n+                format!(\"({})\", expr_str)\n+            } else {\n+                expr_str.into_owned()\n+            };\n+\n+            span_lint_and_sugg(\n+                cx,\n+                EXPLICIT_DEREF_METHODS,\n+                data.span,\n+                match data.target_mut {\n+                    Mutability::Not => \"explicit `deref` method call\",\n+                    Mutability::Mut => \"explicit `deref_mut` method call\",\n+                },\n+                \"try this\",\n+                format!(\"{}{}{}\", addr_of_str, deref_str, expr_str),\n+                app,\n+            );\n         },\n-        _ => (),\n     }\n }"}, {"sha": "834136f910d9c98ac9886f33c2e800ec645b975d", "filename": "clippy_lints/src/derive.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fderive.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,8 +1,7 @@\n-use crate::utils::paths;\n-use crate::utils::{\n-    get_trait_def_id, is_allowed, is_automatically_derived, is_copy, match_def_path, span_lint_and_help,\n-    span_lint_and_note, span_lint_and_then,\n-};\n+use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_note, span_lint_and_then};\n+use clippy_utils::paths;\n+use clippy_utils::ty::is_copy;\n+use clippy_utils::{get_trait_def_id, is_allowed, is_automatically_derived, match_def_path};\n use if_chain::if_chain;\n use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{walk_expr, walk_fn, walk_item, FnKind, NestedVisitorMap, Visitor};"}, {"sha": "ded0a0fff54b24573df89db5978904dbb71d2d1b", "filename": "clippy_lints/src/disallowed_method.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fdisallowed_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdisallowed_method.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{fn_def_id, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::fn_def_id;\n \n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::Expr;"}, {"sha": "14338ac8fafea9066e7b4d3e49634e945160e813", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,6 @@\n-use crate::utils::{\n-    implements_trait, is_entrypoint_fn, is_expn_of, is_type_diagnostic_item, match_panic_def_id, method_chain_args,\n-    return_ty, span_lint, span_lint_and_note,\n-};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_note};\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n+use clippy_utils::{is_entrypoint_fn, is_expn_of, match_panic_def_id, method_chain_args, return_ty};\n use if_chain::if_chain;\n use itertools::Itertools;\n use rustc_ast::ast::{Async, AttrKind, Attribute, FnKind, FnRetTy, ItemKind};\n@@ -584,7 +583,7 @@ fn check_code(cx: &LateContext<'_>, text: &str, edition: Edition, span: Span) {\n                                 let returns_nothing = match &sig.decl.output {\n                                     FnRetTy::Default(..) => true,\n                                     FnRetTy::Ty(ty) if ty.kind.is_unit() => true,\n-                                    _ => false,\n+                                    FnRetTy::Ty(_) => false,\n                                 };\n \n                                 if returns_nothing && !is_async && !block.stmts.is_empty() {"}, {"sha": "1d291565ec19d3136e6aaff8a747dd08a2cc679c", "filename": "clippy_lints/src/double_comparison.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fdouble_comparison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_comparison.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,13 +1,14 @@\n //! Lint on unnecessary double comparisons. Some examples:\n \n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::eq_expr_value;\n+use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n-use crate::utils::{eq_expr_value, snippet_with_applicability, span_lint_and_sugg};\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for double comparisons that could be simplified to a single expression.\n     ///"}, {"sha": "5afdcb3c09f592aa8261524c079d1797375d367e", "filename": "clippy_lints/src/double_parens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fdouble_parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fdouble_parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdouble_parens.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::span_lint;\n+use clippy_utils::diagnostics::span_lint;\n use rustc_ast::ast::{Expr, ExprKind};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};"}, {"sha": "7e7ec017bbbcbda0fb875a055c5e4c93055ec846", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{is_copy, match_def_path, paths, span_lint_and_note};\n+use clippy_utils::diagnostics::span_lint_and_note;\n+use clippy_utils::ty::is_copy;\n+use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "746c1f6df916f4c65791033df1f8fa79c9e82eef", "filename": "clippy_lints/src/duration_subsec.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fduration_subsec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fduration_subsec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fduration_subsec.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,3 +1,5 @@\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::match_type;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n@@ -6,8 +8,8 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n \n use crate::consts::{constant, Constant};\n-use crate::utils::paths;\n-use crate::utils::{match_type, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::paths;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for calculation of subsecond microseconds or milliseconds"}, {"sha": "26984df9539774d64c624e3075db7dcb08dfef52", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,12 +1,11 @@\n //! Lint on if expressions with an else if, but without a final else branch.\n \n+use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{Expr, ExprKind};\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::span_lint_and_help;\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of if expressions with an `else if` branch,\n     /// but without a final `else` branch."}, {"sha": "c92984a98346d4c7a135cfb6db71079819f35436", "filename": "clippy_lints/src/empty_enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fempty_enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fempty_enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fempty_enum.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,6 @@\n //! lint when there is an enum with no variants\n \n-use crate::utils::span_lint_and_help;\n+use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};"}, {"sha": "25eb048448ca71b8c5a8ec4c95caa0a74c453207", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,8 @@\n-use crate::utils::SpanlessEq;\n-use crate::utils::{get_item_name, is_type_diagnostic_item, match_type, paths, snippet, snippet_opt};\n-use crate::utils::{snippet_with_applicability, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::{snippet, snippet_opt, snippet_with_applicability};\n+use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n+use clippy_utils::SpanlessEq;\n+use clippy_utils::{get_item_name, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};"}, {"sha": "7a98ae39d3ae9b0921b13b790aff2cf88a937cb3", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -2,7 +2,7 @@\n //! don't fit into an `i32`\n \n use crate::consts::{miri_to_const, Constant};\n-use crate::utils::span_lint;\n+use clippy_utils::diagnostics::span_lint;\n use rustc_hir::{Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::util::IntTypeExt;"}, {"sha": "0ecc0bc3eb60a3b2d5f1bfbf3d9fcbb17451618b", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,8 @@\n //! lint on enum variants that are prefixed or suffixed by the same characters\n \n-use crate::utils::{camel_case, is_present_in_source};\n-use crate::utils::{span_lint, span_lint_and_help};\n+use clippy_utils::camel_case;\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n+use clippy_utils::source::is_present_in_source;\n use rustc_ast::ast::{EnumDef, Item, ItemKind, VisibilityKind};\n use rustc_lint::{EarlyContext, EarlyLintPass, Lint};\n use rustc_session::{declare_tool_lint, impl_lint_pass};"}, {"sha": "6d7046ac8b7b717037d230e9bfacf3825c6c94c6", "filename": "clippy_lints/src/eq_op.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Feq_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Feq_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feq_op.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,7 @@\n-use crate::utils::{\n-    ast_utils::is_useless_with_eq_exprs, eq_expr_value, higher, implements_trait, in_macro, is_copy, is_expn_of,\n-    multispan_sugg, snippet, span_lint, span_lint_and_then,\n-};\n+use clippy_utils::diagnostics::{multispan_sugg, span_lint, span_lint_and_then};\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::{implements_trait, is_copy};\n+use clippy_utils::{ast_utils::is_useless_with_eq_exprs, eq_expr_value, higher, in_macro, is_expn_of};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, StmtKind};"}, {"sha": "5960261678119e1b1cb8d8aab957544771abe583", "filename": "clippy_lints/src/erasing_op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ferasing_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ferasing_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ferasing_op.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,10 +1,10 @@\n+use clippy_utils::diagnostics::span_lint;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n use crate::consts::{constant_simple, Constant};\n-use crate::utils::span_lint;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for erasing operations, e.g., `x * 0`."}, {"sha": "3581ab41906f414f26e97311c5d8360c2c855f21", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,3 +1,5 @@\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::ty::contains_ty;\n use rustc_hir::intravisit;\n use rustc_hir::{self, AssocItemKind, Body, FnDecl, HirId, HirIdSet, Impl, ItemKind, Node};\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -11,8 +13,6 @@ use rustc_target::abi::LayoutOf;\n use rustc_target::spec::abi::Abi;\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n-use crate::utils::{contains_ty, span_lint};\n-\n #[derive(Copy, Clone)]\n pub struct BoxedLocal {\n     pub too_large_for_stack: u64,\n@@ -186,7 +186,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n         }\n     }\n \n-    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) { }\n+    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}\n }\n \n impl<'a, 'tcx> EscapeDelegate<'a, 'tcx> {"}, {"sha": "99253555a95e36659b14d1caa114d587e20e17bb", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,3 +1,9 @@\n+use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::higher;\n+use clippy_utils::higher::VecArgs;\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::ty::{implements_trait, type_is_unsafe_function};\n+use clippy_utils::{is_adjusted, iter_input_pats};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{def_id, Expr, ExprKind, Param, PatKind, QPath};\n@@ -6,13 +12,6 @@ use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{\n-    implements_trait, is_adjusted, iter_input_pats, snippet_opt, span_lint_and_sugg, span_lint_and_then,\n-    type_is_unsafe_function,\n-};\n-use clippy_utils::higher;\n-use clippy_utils::higher::VecArgs;\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for closures which just call another function where\n     /// the function can be called directly. `unsafe` functions or calls where types"}, {"sha": "ea33a4d98fd2a2f7d74f2ece926aae691b47ba41", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{get_parent_expr, path_to_local, path_to_local_id, span_lint, span_lint_and_note};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_note};\n+use clippy_utils::{get_parent_expr, path_to_local, path_to_local_id};\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, Guard, HirId, Local, Node, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -272,7 +273,7 @@ fn check_stmt<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, stmt: &'tcx Stmt<'_>) -\n             .init\n             .as_ref()\n             .map_or(StopEarly::KeepGoing, |expr| check_expr(vis, expr)),\n-        _ => StopEarly::KeepGoing,\n+        StmtKind::Item(..) => StopEarly::KeepGoing,\n     }\n }\n "}, {"sha": "6c9652fd87df476a827232151cf5e2b0b6c06e41", "filename": "clippy_lints/src/excessive_bools.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fexcessive_bools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexcessive_bools.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,6 @@\n-use crate::utils::{attr_by_name, in_macro, match_path_ast, span_lint_and_help};\n-use rustc_ast::ast::{\n-    AssocItemKind, Extern, FnKind, FnSig, ImplKind, Item, ItemKind, TraitKind, Ty, TyKind,\n-};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::{attr_by_name, in_macro, match_path_ast};\n+use rustc_ast::ast::{AssocItemKind, Extern, FnKind, FnSig, ImplKind, Item, ItemKind, TraitKind, Ty, TyKind};\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::Span;"}, {"sha": "60ad2e8ee1404fec06b5b71a5b9bc68c96a11b02", "filename": "clippy_lints/src/exhaustive_items.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fexhaustive_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexhaustive_items.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{indent_of, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::indent_of;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind};"}, {"sha": "635b6d83eab72e8a31978a7ce43d612cfd772832", "filename": "clippy_lints/src/exit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fexit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fexit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexit.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_entrypoint_fn, match_def_path, paths, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{is_entrypoint_fn, match_def_path, paths};\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind, Item, ItemKind, Node};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "4146b7baa1021364d11083635242a18f2704b719", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_expn_of, match_function_call, paths, span_lint, span_lint_and_sugg};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n+use clippy_utils::{is_expn_of, match_function_call, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;"}, {"sha": "52a5a7acf0d0d6de09bf697446de09fea2edaeed", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{is_expn_of, is_type_diagnostic_item, match_panic_def_id, method_chain_args, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{is_expn_of, match_panic_def_id, method_chain_args};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "0c59db360f9a24bfd6e2acca3b26440fbf691bef", "filename": "clippy_lints/src/float_equality_without_abs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_equality_without_abs.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{match_def_path, paths, span_lint_and_then, sugg};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::{match_def_path, paths, sugg};\n use if_chain::if_chain;\n use rustc_ast::util::parser::AssocOp;\n use rustc_errors::Applicability;"}, {"sha": "1ca5c685a75c50419c8e85ad9e51773ea888eb0b", "filename": "clippy_lints/src/float_literal.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ffloat_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ffloat_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloat_literal.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{numeric_literal, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::numeric_literal;\n use if_chain::if_chain;\n use rustc_ast::ast::{self, LitFloatType, LitKind};\n use rustc_errors::Applicability;"}, {"sha": "0b5f0379ce64417442c70483edc5826f1cd0b1d1", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -2,7 +2,8 @@ use crate::consts::{\n     constant, constant_simple, Constant,\n     Constant::{Int, F32, F64},\n };\n-use crate::utils::{eq_expr_value, get_parent_expr, numeric_literal, span_lint_and_sugg, sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::{eq_expr_value, get_parent_expr, numeric_literal, sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind, PathSegment, UnOp};"}, {"sha": "a33f987b423ac27627469262cdc9f8b023993f84", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,8 +1,8 @@\n-use crate::utils::paths;\n-use crate::utils::{\n-    is_expn_of, is_type_diagnostic_item, last_path_segment, match_def_path, match_function_call, snippet, snippet_opt,\n-    span_lint_and_then,\n-};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::paths;\n+use clippy_utils::source::{snippet, snippet_opt};\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{is_expn_of, last_path_segment, match_def_path, match_function_call};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;"}, {"sha": "b10e83c0ea819e5c1c891d310d6a3b7cd3288a72", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{differing_macro_contexts, snippet_opt, span_lint_and_help, span_lint_and_note};\n+use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_note};\n+use clippy_utils::differing_macro_contexts;\n+use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_ast::ast::{BinOpKind, Block, Expr, ExprKind, StmtKind, UnOp};\n use rustc_lint::{EarlyContext, EarlyLintPass};"}, {"sha": "e5ec245e5029bca40396ab43226625f7bc9eaea7", "filename": "clippy_lints/src/from_over_into.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ffrom_over_into.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_over_into.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n-use crate::utils::paths::INTO;\n-use crate::utils::{match_def_path, meets_msrv, span_lint_and_help};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::paths::INTO;\n+use clippy_utils::{match_def_path, meets_msrv};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass, LintContext};"}, {"sha": "3da5bc95b6db15e1aa49f45c03b111331befdf28", "filename": "clippy_lints/src/from_str_radix_10.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffrom_str_radix_10.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,3 +1,6 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::sugg::Sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{def, Expr, ExprKind, PrimTy, QPath, TyKind};\n@@ -6,10 +9,6 @@ use rustc_middle::ty::Ty;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n-use crate::utils::is_type_diagnostic_item;\n-use crate::utils::span_lint_and_sugg;\n-use crate::utils::sugg::Sugg;\n-\n declare_clippy_lint! {\n     /// **What it does:**\n     /// Checks for function invocations of the form `primitive::from_str_radix(s, 10)`"}, {"sha": "730492fc7e3efafd787169327b883ec2d94608a7", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,9 @@\n-use crate::utils::{\n-    attr_by_name, attrs::is_proc_macro, is_must_use_ty, is_trait_impl_item, is_type_diagnostic_item, iter_input_pats,\n-    match_def_path, must_use_attr, path_to_local, return_ty, snippet, snippet_opt, span_lint, span_lint_and_help,\n-    span_lint_and_then, trait_ref_of_method, type_is_unsafe_function,\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_then};\n+use clippy_utils::source::{snippet, snippet_opt};\n+use clippy_utils::ty::{is_must_use_ty, is_type_diagnostic_item, type_is_unsafe_function};\n+use clippy_utils::{\n+    attr_by_name, attrs::is_proc_macro, is_trait_impl_item, iter_input_pats, match_def_path, must_use_attr,\n+    path_to_local, return_ty, trait_ref_of_method,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;"}, {"sha": "04730ace887c92868297202034a18da178571f8e", "filename": "clippy_lints/src/future_not_send.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ffuture_not_send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffuture_not_send.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils;\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::return_ty;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, FnDecl, HirId};\n use rustc_infer::infer::TyCtxtInferExt;\n@@ -61,7 +62,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n         if let FnKind::Closure = kind {\n             return;\n         }\n-        let ret_ty = utils::return_ty(cx, hir_id);\n+        let ret_ty = return_ty(cx, hir_id);\n         if let Opaque(id, subst) = *ret_ty.kind() {\n             let preds = cx.tcx.explicit_item_bounds(id);\n             let mut is_future = false;\n@@ -84,7 +85,7 @@ impl<'tcx> LateLintPass<'tcx> for FutureNotSend {\n                     fulfillment_cx.select_all_or_error(&infcx)\n                 });\n                 if let Err(send_errors) = send_result {\n-                    utils::span_lint_and_then(\n+                    span_lint_and_then(\n                         cx,\n                         FUTURE_NOT_SEND,\n                         span,"}, {"sha": "cbcef567c53299d58f702f93a5ac9be9b7d4f499", "filename": "clippy_lints/src/get_last_with_len.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fget_last_with_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fget_last_with_len.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,9 @@\n //! lint on using `x.get(x.len() - 1)` instead of `x.last()`\n \n-use crate::utils::{is_type_diagnostic_item, snippet_with_applicability, span_lint_and_sugg, SpanlessEq};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::SpanlessEq;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;"}, {"sha": "8bed5e1bf640edfc03a47023a64b72bd274bbbec", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,3 +1,4 @@\n+use clippy_utils::source::snippet;\n use if_chain::if_chain;\n use rustc_hir::{BinOp, BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -6,7 +7,8 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n use crate::consts::{constant_simple, Constant};\n-use crate::utils::{clip, snippet, span_lint, unsext};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{clip, unsext};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for identity operations, e.g., `x + 0`."}, {"sha": "4aab43256bf0cadbc32f6857ef3d603cccd122b9", "filename": "clippy_lints/src/if_let_mutex.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fif_let_mutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_mutex.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{is_type_diagnostic_item, span_lint_and_help, SpanlessEq};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::SpanlessEq;\n use if_chain::if_chain;\n use rustc_hir::intravisit::{self as visit, NestedVisitorMap, Visitor};\n use rustc_hir::{Expr, ExprKind, MatchSource};"}, {"sha": "6e9280c8c7e012b7c7d9556cdb5c2a5425691c9d", "filename": "clippy_lints/src/if_let_some_result.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fif_let_some_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_let_some_result.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,7 @@\n-use crate::utils::{is_type_diagnostic_item, method_chain_args, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::method_chain_args;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, MatchSource, PatKind, QPath};"}, {"sha": "c56f67df0618f3b6d47e1d2193ae1e613333db55", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,13 +1,12 @@\n //! lint on if branches that could be swapped so no `!` operation is necessary\n //! on the condition\n \n+use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{BinOpKind, Expr, ExprKind, UnOp};\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::span_lint_and_help;\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `!` or `!=` in an if condition with an\n     /// else branch."}, {"sha": "0b5bf060d4cdf77202f6c5cac72f6341202f8581", "filename": "clippy_lints/src/if_then_some_else_none.rs", "status": "added", "additions": 117, "deletions": 0, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_then_some_else_none.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -0,0 +1,117 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::source::snippet_with_macro_callsite;\n+use clippy_utils::{match_qpath, meets_msrv, parent_node_is_if_expr};\n+use if_chain::if_chain;\n+use rustc_hir::{Expr, ExprKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n+use rustc_middle::lint::in_external_macro;\n+use rustc_semver::RustcVersion;\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n+\n+const IF_THEN_SOME_ELSE_NONE_MSRV: RustcVersion = RustcVersion::new(1, 50, 0);\n+\n+declare_clippy_lint! {\n+    /// **What it does:** Checks for if-else that could be written to `bool::then`.\n+    ///\n+    /// **Why is this bad?** Looks a little redundant. Using `bool::then` helps it have less lines of code.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    ///\n+    /// ```rust\n+    /// # let v = vec![0];\n+    /// let a = if v.is_empty() {\n+    ///     println!(\"true!\");\n+    ///     Some(42)\n+    /// } else {\n+    ///     None\n+    /// };\n+    /// ```\n+    ///\n+    /// Could be written:\n+    ///\n+    /// ```rust\n+    /// # let v = vec![0];\n+    /// let a = v.is_empty().then(|| {\n+    ///     println!(\"true!\");\n+    ///     42\n+    /// });\n+    /// ```\n+    pub IF_THEN_SOME_ELSE_NONE,\n+    restriction,\n+    \"Finds if-else that could be written using `bool::then`\"\n+}\n+\n+pub struct IfThenSomeElseNone {\n+    msrv: Option<RustcVersion>,\n+}\n+\n+impl IfThenSomeElseNone {\n+    #[must_use]\n+    pub fn new(msrv: Option<RustcVersion>) -> Self {\n+        Self { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(IfThenSomeElseNone => [IF_THEN_SOME_ELSE_NONE]);\n+\n+impl LateLintPass<'_> for IfThenSomeElseNone {\n+    fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'tcx Expr<'_>) {\n+        if !meets_msrv(self.msrv.as_ref(), &IF_THEN_SOME_ELSE_NONE_MSRV) {\n+            return;\n+        }\n+\n+        if in_external_macro(cx.sess(), expr.span) {\n+            return;\n+        }\n+\n+        // We only care about the top-most `if` in the chain\n+        if parent_node_is_if_expr(expr, cx) {\n+            return;\n+        }\n+\n+        if_chain! {\n+            if let ExprKind::If(ref cond, ref then, Some(ref els)) = expr.kind;\n+            if let ExprKind::Block(ref then_block, _) = then.kind;\n+            if let Some(ref then_expr) = then_block.expr;\n+            if let ExprKind::Call(ref then_call, [then_arg]) = then_expr.kind;\n+            if let ExprKind::Path(ref then_call_qpath) = then_call.kind;\n+            if match_qpath(then_call_qpath, &clippy_utils::paths::OPTION_SOME);\n+            if let ExprKind::Block(ref els_block, _) = els.kind;\n+            if els_block.stmts.is_empty();\n+            if let Some(ref els_expr) = els_block.expr;\n+            if let ExprKind::Path(ref els_call_qpath) = els_expr.kind;\n+            if match_qpath(els_call_qpath, &clippy_utils::paths::OPTION_NONE);\n+            then {\n+                let cond_snip = snippet_with_macro_callsite(cx, cond.span, \"[condition]\");\n+                let cond_snip = if matches!(cond.kind, ExprKind::Unary(_, _) | ExprKind::Binary(_, _, _)) {\n+                    format!(\"({})\", cond_snip)\n+                } else {\n+                    cond_snip.into_owned()\n+                };\n+                let arg_snip = snippet_with_macro_callsite(cx, then_arg.span, \"\");\n+                let closure_body = if then_block.stmts.is_empty() {\n+                    arg_snip.into_owned()\n+                } else {\n+                    format!(\"{{ /* snippet */ {} }}\", arg_snip)\n+                };\n+                let help = format!(\n+                    \"consider using `bool::then` like: `{}.then(|| {})`\",\n+                    cond_snip,\n+                    closure_body,\n+                );\n+                span_lint_and_help(\n+                    cx,\n+                    IF_THEN_SOME_ELSE_NONE,\n+                    expr.span,\n+                    \"this could be simplified with `bool::then`\",\n+                    None,\n+                    &help,\n+                );\n+            }\n+        }\n+    }\n+\n+    extract_msrv_attr!(LateContext);\n+}"}, {"sha": "6863645a92dbeabbbc882296bdc08f6d5361f0ff", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{match_panic_def_id, snippet_opt, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::match_panic_def_id;\n+use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;"}, {"sha": "5207c628987263776989fe329171f7d9072c1d23", "filename": "clippy_lints/src/implicit_saturating_sub.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_saturating_sub.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{in_macro, match_qpath, span_lint_and_sugg, SpanlessEq};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::{in_macro, match_qpath, SpanlessEq};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;"}, {"sha": "d7ca24487a884ba0d374c91ea44bb93898a5099f", "filename": "clippy_lints/src/inconsistent_struct_constructor.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finconsistent_struct_constructor.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,17 +1,17 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n+use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::Symbol;\n \n-use if_chain::if_chain;\n-\n-use crate::utils::{snippet, span_lint_and_sugg};\n-\n declare_clippy_lint! {\n-    /// **What it does:** Checks for struct constructors where the order of the field init\n-    /// shorthand in the constructor is inconsistent with the order in the struct definition.\n+    /// **What it does:** Checks for struct constructors where all fields are shorthand and\n+    /// the order of the field init shorthand in the constructor is inconsistent\n+    /// with the order in the struct definition.\n     ///\n     /// **Why is this bad?** Since the order of fields in a constructor doesn't affect the\n     /// resulted instance as the below example indicates,\n@@ -25,11 +25,11 @@ declare_clippy_lint! {\n     /// let x = 1;\n     /// let y = 2;\n     ///\n-    /// // This assertion never fails.\n+    /// // This assertion never fails:\n     /// assert_eq!(Foo { x, y }, Foo { y, x });\n     /// ```\n     ///\n-    /// inconsistent order means nothing and just decreases readability and consistency.\n+    /// inconsistent order can be confusing and decreases readability and consistency.\n     ///\n     /// **Known problems:** None.\n     ///\n@@ -42,6 +42,7 @@ declare_clippy_lint! {\n     /// }\n     /// let x = 1;\n     /// let y = 2;\n+    ///\n     /// Foo { y, x };\n     /// ```\n     ///\n@@ -107,7 +108,7 @@ impl LateLintPass<'_> for InconsistentStructConstructor {\n                     cx,\n                     INCONSISTENT_STRUCT_CONSTRUCTOR,\n                     expr.span,\n-                    \"inconsistent struct constructor\",\n+                    \"struct constructor field order is inconsistent with struct definition field order\",\n                     \"try\",\n                     sugg,\n                     Applicability::MachineApplicable,"}, {"sha": "94d39019608f76b8d3c4b97d43b72a2143adb6c6", "filename": "clippy_lints/src/indexing_slicing.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Findexing_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Findexing_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Findexing_slicing.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,8 @@\n //! lint on indexing and slicing operations\n \n use crate::consts::{constant, Constant};\n-use crate::utils::{higher, span_lint, span_lint_and_help};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n+use clippy_utils::higher;\n use rustc_ast::ast::RangeLimits;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "fb35bc1e78051c0bda11d30adbcec226c92c0b16", "filename": "clippy_lints/src/infinite_iter.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Finfinite_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Finfinite_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfinite_iter.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,9 +1,10 @@\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::ty::{implements_trait, match_type};\n+use clippy_utils::{get_trait_def_id, higher, match_qpath, paths};\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{get_trait_def_id, higher, implements_trait, match_qpath, match_type, paths, span_lint};\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for iteration that is guaranteed to be infinite.\n     ///"}, {"sha": "5b2e70e3ce94f3d9c72477d951fafca9bc40ca0c", "filename": "clippy_lints/src/inherent_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Finherent_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Finherent_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_impl.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,7 @@\n //! lint on inherent implementations\n \n-use crate::utils::{in_macro, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::in_macro;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir::{def_id, Crate, Impl, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "b023e13e846c7d19b6a090386109b65879854656", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,14 +1,12 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n+use clippy_utils::{get_trait_def_id, paths, return_ty, trait_ref_of_method};\n use if_chain::if_chain;\n use rustc_hir::{ImplItem, ImplItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n-use crate::utils::{\n-    get_trait_def_id, implements_trait, is_type_diagnostic_item, paths, return_ty, span_lint_and_help,\n-    trait_ref_of_method,\n-};\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for the definition of inherent methods with a signature of `to_string(&self) -> String`.\n     ///"}, {"sha": "20f00bd51ba868dcf440314e8b11045e5764519c", "filename": "clippy_lints/src/inline_fn_without_body.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Finline_fn_without_body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finline_fn_without_body.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,7 @@\n //! checks for `#[inline]` on trait methods without bodies\n \n-use crate::utils::span_lint_and_then;\n-use crate::utils::sugg::DiagnosticBuilderExt;\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::sugg::DiagnosticBuilderExt;\n use rustc_ast::ast::Attribute;\n use rustc_errors::Applicability;\n use rustc_hir::{TraitFn, TraitItem, TraitItemKind};"}, {"sha": "c4a1222b51fbe294854106e94ca409f7ff2fc7ec", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,12 +1,12 @@\n //! lint on blocks unnecessarily using >= with a + 1 or - 1\n \n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_opt;\n use rustc_ast::ast::{BinOpKind, Expr, ExprKind, Lit, LitKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{snippet_opt, span_lint_and_sugg};\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `x >= y + 1` or `x - 1 >= y` (and `<=`) in a block\n     ///"}, {"sha": "e5482f675e78b64295b9a32641a78e04e8e3ca76", "filename": "clippy_lints/src/integer_division.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Finteger_division.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Finteger_division.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finteger_division.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::span_lint_and_help;\n+use clippy_utils::diagnostics::span_lint_and_help;\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "c69571f32a2442bbaa2d07fdc64156fc502cc46a", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,6 @@\n //! lint when items are used after statements\n \n-use crate::utils::span_lint;\n+use clippy_utils::diagnostics::span_lint;\n use rustc_ast::ast::{Block, ItemKind, StmtKind};\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;"}, {"sha": "48dc5fefe99784d9e98f66994a069c478921f075", "filename": "clippy_lints/src/large_const_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Flarge_const_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_const_arrays.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,5 @@\n use crate::rustc_target::abi::LayoutOf;\n-use crate::utils::span_lint_and_then;\n+use clippy_utils::diagnostics::span_lint_and_then;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind};"}, {"sha": "76584dc18222282c4ed6e25500858773eafee7e3", "filename": "clippy_lints/src/large_enum_variant.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Flarge_enum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_enum_variant.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,7 @@\n //! lint when there is a large size difference between variants on an enum\n \n-use crate::utils::{snippet_opt, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet_opt;\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind, VariantData};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "c46b98022c6cad6c76a877f69d5e0652c4d4a333", "filename": "clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,13 +1,13 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::source::snippet;\n+use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::mir::interpret::ConstValue;\n use rustc_middle::ty::{self, ConstKind};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-use if_chain::if_chain;\n-\n use crate::rustc_target::abi::LayoutOf;\n-use crate::utils::{snippet, span_lint_and_help};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for local arrays that may be too large."}, {"sha": "717f2ea84f42af7037eb6fb2c851b71bdd6819ce", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,6 @@\n-use crate::utils::{\n-    get_item_name, get_parent_as_impl, is_allowed, snippet_with_applicability, span_lint, span_lint_and_sugg,\n-    span_lint_and_then,\n-};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{get_item_name, get_parent_as_impl, is_allowed};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_data_structures::fx::FxHashSet;"}, {"sha": "2d7d9c9befbb2414f2701324320abdcc3049f91e", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{path_to_local_id, snippet, span_lint_and_then, visitors::LocalUsedVisitor};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet;\n+use clippy_utils::{path_to_local_id, visitors::LocalUsedVisitor};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "7e3a76ded2cfab0060d65da18d44822444a11f49", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,12 +1,13 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::ty::{is_must_use_ty, match_type};\n+use clippy_utils::{is_must_use_func_call, paths};\n use if_chain::if_chain;\n use rustc_hir::{Local, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{is_must_use_func_call, is_must_use_ty, match_type, paths, span_lint_and_help};\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for `let _ = <expr>`\n     /// where expr is #[must_use]"}, {"sha": "1c3841f8efd6feed9eb6d4801b8de63e7a1885e9", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -42,7 +42,7 @@ extern crate rustc_target;\n extern crate rustc_trait_selection;\n extern crate rustc_typeck;\n \n-use crate::utils::parse_msrv;\n+use clippy_utils::parse_msrv;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_lint::LintId;\n use rustc_session::Session;\n@@ -231,6 +231,7 @@ mod identity_op;\n mod if_let_mutex;\n mod if_let_some_result;\n mod if_not_else;\n+mod if_then_some_else_none;\n mod implicit_return;\n mod implicit_saturating_sub;\n mod inconsistent_struct_constructor;\n@@ -349,6 +350,7 @@ mod types;\n mod undropped_manually_drops;\n mod unicode;\n mod unit_return_expecting_ord;\n+mod unit_types;\n mod unnamed_address;\n mod unnecessary_sort_by;\n mod unnecessary_wraps;\n@@ -680,6 +682,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &if_let_mutex::IF_LET_MUTEX,\n         &if_let_some_result::IF_LET_SOME_RESULT,\n         &if_not_else::IF_NOT_ELSE,\n+        &if_then_some_else_none::IF_THEN_SOME_ELSE_NONE,\n         &implicit_return::IMPLICIT_RETURN,\n         &implicit_saturating_sub::IMPLICIT_SATURATING_SUB,\n         &inconsistent_struct_constructor::INCONSISTENT_STRUCT_CONSTRUCTOR,\n@@ -958,20 +961,20 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         &types::BOX_VEC,\n         &types::IMPLICIT_HASHER,\n         &types::INVALID_UPCAST_COMPARISONS,\n-        &types::LET_UNIT_VALUE,\n         &types::LINKEDLIST,\n         &types::OPTION_OPTION,\n         &types::RC_BUFFER,\n         &types::REDUNDANT_ALLOCATION,\n         &types::TYPE_COMPLEXITY,\n-        &types::UNIT_ARG,\n-        &types::UNIT_CMP,\n         &types::VEC_BOX,\n         &undropped_manually_drops::UNDROPPED_MANUALLY_DROPS,\n         &unicode::INVISIBLE_CHARACTERS,\n         &unicode::NON_ASCII_LITERAL,\n         &unicode::UNICODE_NOT_NFC,\n         &unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD,\n+        &unit_types::LET_UNIT_VALUE,\n+        &unit_types::UNIT_ARG,\n+        &unit_types::UNIT_CMP,\n         &unnamed_address::FN_ADDRESS_COMPARISONS,\n         &unnamed_address::VTABLE_ADDRESS_COMPARISONS,\n         &unnecessary_sort_by::UNNECESSARY_SORT_BY,\n@@ -1082,8 +1085,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box map_clone::MapClone);\n     store.register_late_pass(|| box map_err_ignore::MapErrIgnore);\n     store.register_late_pass(|| box shadow::Shadow);\n-    store.register_late_pass(|| box types::LetUnitValue);\n-    store.register_late_pass(|| box types::UnitCmp);\n+    store.register_late_pass(|| box unit_types::UnitTypes);\n     store.register_late_pass(|| box loops::Loops);\n     store.register_late_pass(|| box main_recursion::MainRecursion::default());\n     store.register_late_pass(|| box lifetimes::Lifetimes);\n@@ -1158,7 +1160,6 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box useless_conversion::UselessConversion::default());\n     store.register_late_pass(|| box types::ImplicitHasher);\n     store.register_late_pass(|| box fallible_impl_from::FallibleImplFrom);\n-    store.register_late_pass(|| box types::UnitArg);\n     store.register_late_pass(|| box double_comparison::DoubleComparisons);\n     store.register_late_pass(|| box question_mark::QuestionMark);\n     store.register_early_pass(|| box suspicious_operation_groupings::SuspiciousOperationGroupings);\n@@ -1241,7 +1242,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box verbose_file_reads::VerboseFileReads);\n     store.register_late_pass(|| box redundant_pub_crate::RedundantPubCrate::default());\n     store.register_late_pass(|| box unnamed_address::UnnamedAddress);\n-    store.register_late_pass(|| box dereference::Dereferencing);\n+    store.register_late_pass(|| box dereference::Dereferencing::default());\n     store.register_late_pass(|| box option_if_let_else::OptionIfLetElse);\n     store.register_late_pass(|| box future_not_send::FutureNotSend);\n     store.register_late_pass(|| box if_let_mutex::IfLetMutex);\n@@ -1280,6 +1281,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|| box redundant_slicing::RedundantSlicing);\n     store.register_late_pass(|| box from_str_radix_10::FromStrRadix10);\n     store.register_late_pass(|| box manual_map::ManualMap);\n+    store.register_late_pass(move || box if_then_some_else_none::IfThenSomeElseNone::new(msrv));\n \n     store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), vec![\n         LintId::of(&arithmetic::FLOAT_ARITHMETIC),\n@@ -1295,6 +1297,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&exhaustive_items::EXHAUSTIVE_STRUCTS),\n         LintId::of(&exit::EXIT),\n         LintId::of(&float_literal::LOSSY_FLOAT_LITERAL),\n+        LintId::of(&if_then_some_else_none::IF_THEN_SOME_ELSE_NONE),\n         LintId::of(&implicit_return::IMPLICIT_RETURN),\n         LintId::of(&indexing_slicing::INDEXING_SLICING),\n         LintId::of(&inherent_impl::MULTIPLE_INHERENT_IMPL),\n@@ -1411,11 +1414,11 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&trait_bounds::TYPE_REPETITION_IN_BOUNDS),\n         LintId::of(&types::IMPLICIT_HASHER),\n         LintId::of(&types::INVALID_UPCAST_COMPARISONS),\n-        LintId::of(&types::LET_UNIT_VALUE),\n         LintId::of(&types::LINKEDLIST),\n         LintId::of(&types::OPTION_OPTION),\n         LintId::of(&unicode::NON_ASCII_LITERAL),\n         LintId::of(&unicode::UNICODE_NOT_NFC),\n+        LintId::of(&unit_types::LET_UNIT_VALUE),\n         LintId::of(&unnecessary_wraps::UNNECESSARY_WRAPS),\n         LintId::of(&unnested_or_patterns::UNNESTED_OR_PATTERNS),\n         LintId::of(&unused_self::UNUSED_SELF),\n@@ -1704,12 +1707,12 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&types::BOX_VEC),\n         LintId::of(&types::REDUNDANT_ALLOCATION),\n         LintId::of(&types::TYPE_COMPLEXITY),\n-        LintId::of(&types::UNIT_ARG),\n-        LintId::of(&types::UNIT_CMP),\n         LintId::of(&types::VEC_BOX),\n         LintId::of(&undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n         LintId::of(&unicode::INVISIBLE_CHARACTERS),\n         LintId::of(&unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n+        LintId::of(&unit_types::UNIT_ARG),\n+        LintId::of(&unit_types::UNIT_CMP),\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n         LintId::of(&unnecessary_sort_by::UNNECESSARY_SORT_BY),\n@@ -1930,8 +1933,8 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&transmute::TRANSMUTE_PTR_TO_REF),\n         LintId::of(&types::BORROWED_BOX),\n         LintId::of(&types::TYPE_COMPLEXITY),\n-        LintId::of(&types::UNIT_ARG),\n         LintId::of(&types::VEC_BOX),\n+        LintId::of(&unit_types::UNIT_ARG),\n         LintId::of(&unnecessary_sort_by::UNNECESSARY_SORT_BY),\n         LintId::of(&unwrap::UNNECESSARY_UNWRAP),\n         LintId::of(&useless_conversion::USELESS_CONVERSION),\n@@ -2001,10 +2004,10 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n         LintId::of(&transmute::WRONG_TRANSMUTE),\n         LintId::of(&transmuting_null::TRANSMUTING_NULL),\n         LintId::of(&types::ABSURD_EXTREME_COMPARISONS),\n-        LintId::of(&types::UNIT_CMP),\n         LintId::of(&undropped_manually_drops::UNDROPPED_MANUALLY_DROPS),\n         LintId::of(&unicode::INVISIBLE_CHARACTERS),\n         LintId::of(&unit_return_expecting_ord::UNIT_RETURN_EXPECTING_ORD),\n+        LintId::of(&unit_types::UNIT_CMP),\n         LintId::of(&unnamed_address::FN_ADDRESS_COMPARISONS),\n         LintId::of(&unnamed_address::VTABLE_ADDRESS_COMPARISONS),\n         LintId::of(&unused_io_amount::UNUSED_IO_AMOUNT),"}, {"sha": "e3b3fa21cabb4a5298d9ec2436e4a87c4476338f", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{in_macro, span_lint, trait_ref_of_method};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{in_macro, trait_ref_of_method};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::intravisit::{\n     walk_fn_decl, walk_generic_param, walk_generics, walk_item, walk_param_bound, walk_poly_trait_ref, walk_ty,"}, {"sha": "7fd55151226b40c39d604e6216ea7640ed931022", "filename": "clippy_lints/src/literal_representation.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fliteral_representation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fliteral_representation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fliteral_representation.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,10 +1,11 @@\n //! Lints concerned with the grouping of digits with underscores in integral or\n //! floating-point literal expressions.\n \n-use crate::utils::{\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::{\n     in_macro,\n     numeric_literal::{NumericLiteral, Radix},\n-    snippet_opt, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n use rustc_ast::ast::{Expr, ExprKind, Lit, LitKind};"}, {"sha": "dda09fecdf90f5918fa396569c981f89f80359f7", "filename": "clippy_lints/src/loops/empty_loop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fempty_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fempty_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fempty_loop.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n use super::EMPTY_LOOP;\n-use crate::utils::{is_in_panic_handler, is_no_std_crate, span_lint_and_help};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::{is_in_panic_handler, is_no_std_crate};\n \n use rustc_hir::{Block, Expr};\n use rustc_lint::LateContext;"}, {"sha": "f14dbb1d642196ab913da32e7b03dbc0458ecc85", "filename": "clippy_lints/src/loops/explicit_counter_loop.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_counter_loop.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,9 @@\n use super::{\n     get_span_of_entire_for_loop, make_iterator_snippet, IncrementVisitor, InitializeVisitor, EXPLICIT_COUNTER_LOOP,\n };\n-use crate::utils::{get_enclosing_block, is_integer_const, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{get_enclosing_block, is_integer_const};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_block, walk_expr};"}, {"sha": "4871a03118739d15261d2a7bb557ea46f2a27447", "filename": "clippy_lints/src/loops/explicit_into_iter_loop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_into_iter_loop.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n use super::EXPLICIT_INTO_ITER_LOOP;\n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;"}, {"sha": "92aa2beb66d455690c6aa05a44f2074849b7afbc", "filename": "clippy_lints/src/loops/explicit_iter_loop.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fexplicit_iter_loop.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,13 +1,14 @@\n use super::EXPLICIT_ITER_LOOP;\n-use crate::utils::{match_trait_method, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n+use clippy_utils::{match_trait_method, paths};\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, Mutability};\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty, TyS};\n use rustc_span::sym;\n \n-use crate::utils::{is_type_diagnostic_item, match_type, paths};\n-\n pub(super) fn check(cx: &LateContext<'_>, args: &[Expr<'_>], arg: &Expr<'_>, method_name: &str) {\n     let should_lint = match method_name {\n         \"iter\" | \"iter_mut\" => is_ref_iterable_type(cx, &args[0]),"}, {"sha": "8f18f54119bd7a2d809a3087f8626cafd63b5791", "filename": "clippy_lints/src/loops/for_kv_map.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_kv_map.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,9 @@\n use super::FOR_KV_MAP;\n-use crate::utils::visitors::LocalUsedVisitor;\n-use crate::utils::{is_type_diagnostic_item, match_type, multispan_sugg, paths, snippet, span_lint_and_then, sugg};\n+use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n+use clippy_utils::visitors::LocalUsedVisitor;\n+use clippy_utils::{paths, sugg};\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, Pat, PatKind};\n use rustc_lint::LateContext;\n use rustc_middle::ty;"}, {"sha": "d49b0517dcf3eceef04c1c8905f08f2a9c7fd3fd", "filename": "clippy_lints/src/loops/for_loops_over_fallibles.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Ffor_loops_over_fallibles.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,7 @@\n use super::FOR_LOOPS_OVER_FALLIBLES;\n-use crate::utils::{is_type_diagnostic_item, snippet, span_lint_and_help};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_hir::{Expr, Pat};\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;"}, {"sha": "9148fbfd497af3e1c4de607ff583296135995e35", "filename": "clippy_lints/src/loops/iter_next_loop.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fiter_next_loop.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,10 +1,12 @@\n use super::ITER_NEXT_LOOP;\n-use crate::utils::{match_trait_method, paths, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::is_trait_method;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n pub(super) fn check(cx: &LateContext<'_>, arg: &Expr<'_>, expr: &Expr<'_>) -> bool {\n-    if match_trait_method(cx, arg, &paths::ITERATOR) {\n+    if is_trait_method(cx, arg, sym::Iterator) {\n         span_lint(\n             cx,\n             ITER_NEXT_LOOP,"}, {"sha": "8d2b9cccba468421a7126532c52eab0ccdf10de9", "filename": "clippy_lints/src/loops/manual_flatten.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fmanual_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fmanual_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_flatten.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,10 +1,12 @@\n use super::utils::make_iterator_snippet;\n use super::MANUAL_FLATTEN;\n-use crate::utils::{is_ok_ctor, is_some_ctor, path_to_local_id, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::{is_ok_ctor, is_some_ctor, path_to_local_id};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, MatchSource, Pat, PatKind, QPath, StmtKind};\n use rustc_lint::LateContext;\n+use rustc_middle::ty;\n use rustc_span::source_map::Span;\n \n /// Check for unnecessary `if let` usage in a for loop where only the `Some` or `Ok` variant of the\n@@ -53,14 +55,21 @@ pub(super) fn check<'tcx>(\n                 // Prepare the help message\n                 let mut applicability = Applicability::MaybeIncorrect;\n                 let arg_snippet = make_iterator_snippet(cx, arg, &mut applicability);\n+                let copied = match cx.typeck_results().expr_ty(match_expr).kind() {\n+                    ty::Ref(_, inner, _) => match inner.kind() {\n+                        ty::Ref(..) => \".copied()\",\n+                        _ => \"\"\n+                    }\n+                    _ => \"\"\n+                };\n \n                 span_lint_and_then(\n                     cx,\n                     MANUAL_FLATTEN,\n                     span,\n                     &msg,\n                     |diag| {\n-                        let sugg = format!(\"{}.flatten()\", arg_snippet);\n+                        let sugg = format!(\"{}{}.flatten()\", arg_snippet, copied);\n                         diag.span_suggestion(\n                             arg.span,\n                             \"try\","}, {"sha": "f5758b68f6021e38aca34bb2371bf015f53b0704", "filename": "clippy_lints/src/loops/manual_memcpy.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmanual_memcpy.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,8 +1,9 @@\n use super::{get_span_of_entire_for_loop, IncrementVisitor, InitializeVisitor, MANUAL_MEMCPY};\n-use crate::utils::sugg::Sugg;\n-use crate::utils::{\n-    get_enclosing_block, higher, is_type_diagnostic_item, path_to_local, snippet, span_lint_and_sugg, sugg,\n-};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n+use clippy_utils::sugg::Sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{get_enclosing_block, higher, path_to_local, sugg};\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_errors::Applicability;"}, {"sha": "202914919987c942b116b3a3fcc3e2e688f19f36", "filename": "clippy_lints/src/loops/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmod.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -18,7 +18,7 @@ mod while_immutable_condition;\n mod while_let_loop;\n mod while_let_on_iterator;\n \n-use crate::utils::higher;\n+use clippy_utils::higher;\n use rustc_hir::{Expr, ExprKind, LoopSource, Pat};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};"}, {"sha": "1425d50f56046c2fcc9abc8a31be988154e1bc74", "filename": "clippy_lints/src/loops/mut_range_bound.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fmut_range_bound.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,11 +1,11 @@\n use super::MUT_RANGE_BOUND;\n-use crate::utils::{higher, path_to_local, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{higher, path_to_local};\n use if_chain::if_chain;\n use rustc_hir::{BindingAnnotation, Expr, HirId, Node, PatKind};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_lint::LateContext;\n-use rustc_middle::mir::FakeReadCause;\n-use rustc_middle::ty;\n+use rustc_middle::{mir::FakeReadCause, ty};\n use rustc_span::source_map::Span;\n use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceBase, PlaceWithHirId};\n \n@@ -108,7 +108,7 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate<'_, 'tcx> {\n         }\n     }\n \n-    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _:HirId) { }\n+    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}\n }\n \n impl MutatePairDelegate<'_, '_> {"}, {"sha": "5594fc7b046e738e48fa7c032f1760fe90cbee2a", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,9 +1,9 @@\n use super::NEEDLESS_COLLECT;\n-use crate::utils::sugg::Sugg;\n-use crate::utils::{\n-    is_type_diagnostic_item, match_trait_method, match_type, path_to_local_id, paths, snippet, span_lint_and_sugg,\n-    span_lint_and_then,\n-};\n+use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::source::snippet;\n+use clippy_utils::sugg::Sugg;\n+use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n+use clippy_utils::{is_trait_method, path_to_local_id, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_block, walk_expr, NestedVisitorMap, Visitor};\n@@ -23,7 +23,7 @@ fn check_needless_collect_direct_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCont\n     if_chain! {\n         if let ExprKind::MethodCall(ref method, _, ref args, _) = expr.kind;\n         if let ExprKind::MethodCall(ref chain_method, _, _, _) = args[0].kind;\n-        if chain_method.ident.name == sym!(collect) && match_trait_method(cx, &args[0], &paths::ITERATOR);\n+        if chain_method.ident.name == sym!(collect) && is_trait_method(cx, &args[0], sym::Iterator);\n         if let Some(ref generic_args) = chain_method.args;\n         if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n         then {\n@@ -94,7 +94,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n                     init: Some(ref init_expr), .. }\n                 ) = stmt.kind;\n                 if let ExprKind::MethodCall(ref method_name, _, &[ref iter_source], ..) = init_expr.kind;\n-                if method_name.ident.name == sym!(collect) && match_trait_method(cx, &init_expr, &paths::ITERATOR);\n+                if method_name.ident.name == sym!(collect) && is_trait_method(cx, &init_expr, sym::Iterator);\n                 if let Some(ref generic_args) = method_name.args;\n                 if let Some(GenericArg::Type(ref ty)) = generic_args.args.get(0);\n                 if let ty = cx.typeck_results().node_type(ty.hir_id);"}, {"sha": "3c40d54cb42106f33d92757dc01d86609ba915a7", "filename": "clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,8 +1,10 @@\n use super::NEEDLESS_RANGE_LOOP;\n-use crate::utils::visitors::LocalUsedVisitor;\n-use crate::utils::{\n-    contains_name, has_iter_method, higher, is_integer_const, match_trait_method, multispan_sugg, path_to_local_id,\n-    paths, snippet, span_lint_and_then, sugg, SpanlessEq,\n+use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::has_iter_method;\n+use clippy_utils::visitors::LocalUsedVisitor;\n+use clippy_utils::{\n+    contains_name, higher, is_integer_const, match_trait_method, path_to_local_id, paths, sugg, SpanlessEq,\n };\n use if_chain::if_chain;\n use rustc_ast::ast;"}, {"sha": "f63a3761a0d16910a4cdbeaf9c1d9b693740f1de", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,5 @@\n use super::NEVER_LOOP;\n-use crate::utils::span_lint;\n+use clippy_utils::diagnostics::span_lint;\n use rustc_hir::{Block, Expr, ExprKind, HirId, InlineAsmOperand, Stmt, StmtKind};\n use rustc_lint::LateContext;\n use std::iter::{once, Iterator};\n@@ -78,7 +78,7 @@ fn stmt_to_expr<'tcx>(stmt: &Stmt<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n     match stmt.kind {\n         StmtKind::Semi(ref e, ..) | StmtKind::Expr(ref e, ..) => Some(e),\n         StmtKind::Local(ref local) => local.init.as_deref(),\n-        _ => None,\n+        StmtKind::Item(..) => None,\n     }\n }\n "}, {"sha": "849d7ec718cfb9b6df141711b503701e4608c12d", "filename": "clippy_lints/src/loops/same_item_push.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fsame_item_push.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,7 @@\n use super::SAME_ITEM_PUSH;\n-use crate::utils::{implements_trait, is_type_diagnostic_item, snippet_with_macro_callsite, span_lint_and_help};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::source::snippet_with_macro_callsite;\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};"}, {"sha": "8451c1c6130de48e5005a6a8b43d41b1e89d7b14", "filename": "clippy_lints/src/loops/single_element_loop.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,7 @@\n use super::{get_span_of_entire_for_loop, SINGLE_ELEMENT_LOOP};\n-use crate::utils::{indent_of, single_segment_path, snippet, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::single_segment_path;\n+use clippy_utils::source::{indent_of, snippet};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind, Pat, PatKind};"}, {"sha": "bb409c4853286b45087bdb26b40ea77a3d3e4796", "filename": "clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Futils.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,5 @@\n-use crate::utils::{\n-    get_parent_expr, get_trait_def_id, has_iter_method, implements_trait, is_integer_const, path_to_local,\n-    path_to_local_id, paths, sugg,\n-};\n+use clippy_utils::ty::{has_iter_method, implements_trait};\n+use clippy_utils::{get_parent_expr, is_integer_const, path_to_local, path_to_local_id, sugg};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n@@ -10,7 +8,7 @@ use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, HirId, Mutability, Pat, P\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{sym, Symbol};\n use std::iter::Iterator;\n \n #[derive(Debug, PartialEq)]\n@@ -316,7 +314,7 @@ pub(super) fn get_span_of_entire_for_loop(expr: &Expr<'_>) -> Span {\n /// If `arg` was the argument to a `for` loop, return the \"cleanest\" way of writing the\n /// actual `Iterator` that the loop uses.\n pub(super) fn make_iterator_snippet(cx: &LateContext<'_>, arg: &Expr<'_>, applic_ref: &mut Applicability) -> String {\n-    let impls_iterator = get_trait_def_id(cx, &paths::ITERATOR).map_or(false, |id| {\n+    let impls_iterator = cx.tcx.get_diagnostic_item(sym::Iterator).map_or(false, |id| {\n         implements_trait(cx, cx.typeck_results().expr_ty(arg), id, &[])\n     });\n     if impls_iterator {"}, {"sha": "cad9ff8489a9c3e8544b40acec051a2696c99f1f", "filename": "clippy_lints/src/loops/while_immutable_condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_immutable_condition.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,7 @@\n use super::WHILE_IMMUTABLE_CONDITION;\n use crate::consts::constant;\n-use crate::utils::span_lint_and_then;\n-use crate::utils::usage::mutated_variables;\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::usage::mutated_variables;\n use if_chain::if_chain;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_hir::def::{DefKind, Res};"}, {"sha": "ffe8c0c5494b0f61aec63dae5585011f6fa0a235", "filename": "clippy_lints/src/loops/while_let_loop.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n use super::WHILE_LET_LOOP;\n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir::{Block, Expr, ExprKind, MatchSource, StmtKind};\n use rustc_lint::{LateContext, LintContext};"}, {"sha": "57fc6250a9ae8d762cdf1578537e08d78e7cd14c", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,17 +1,18 @@\n use super::utils::{LoopNestVisitor, Nesting};\n use super::WHILE_LET_ON_ITERATOR;\n-use crate::utils::usage::mutated_variables;\n-use crate::utils::{\n-    get_enclosing_block, get_trait_def_id, implements_trait, is_refutable, last_path_segment, match_trait_method,\n-    path_to_local, path_to_local_id, paths, snippet_with_applicability, span_lint_and_sugg,\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::implements_trait;\n+use clippy_utils::usage::mutated_variables;\n+use clippy_utils::{\n+    get_enclosing_block, is_refutable, is_trait_method, last_path_segment, path_to_local, path_to_local_id,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_block, walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{Expr, ExprKind, HirId, MatchSource, Node, PatKind};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n-\n use rustc_span::symbol::sym;\n \n pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n@@ -27,7 +28,7 @@ pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n             // Don't lint when the iterator is recreated on every iteration\n             if_chain! {\n                 if let ExprKind::MethodCall(..) | ExprKind::Call(..) = iter_expr.kind;\n-                if let Some(iter_def_id) = get_trait_def_id(cx, &paths::ITERATOR);\n+                if let Some(iter_def_id) = cx.tcx.get_diagnostic_item(sym::Iterator);\n                 if implements_trait(cx, cx.typeck_results().expr_ty(iter_expr), iter_def_id, &[]);\n                 then {\n                     return;\n@@ -36,7 +37,7 @@ pub(super) fn check(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n \n             let lhs_constructor = last_path_segment(qpath);\n             if method_path.ident.name == sym::next\n-                && match_trait_method(cx, match_expr, &paths::ITERATOR)\n+                && is_trait_method(cx, match_expr, sym::Iterator)\n                 && lhs_constructor.ident.name == sym::Some\n                 && (pat_args.is_empty()\n                     || !is_refutable(cx, &pat_args[0])"}, {"sha": "d573c29783876ab845504aa767444082c4171442", "filename": "clippy_lints/src/macro_use.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmacro_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmacro_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmacro_use.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{in_macro, snippet, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::in_macro;\n+use clippy_utils::source::snippet;\n use hir::def::{DefKind, Res};\n use if_chain::if_chain;\n use rustc_ast::ast;"}, {"sha": "07d8a440aea4c440e1047c10a4b3c3c069710d7d", "filename": "clippy_lints/src/main_recursion.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmain_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmain_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmain_recursion.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,10 +1,11 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::source::snippet;\n+use clippy_utils::{is_entrypoint_fn, is_no_std_crate};\n+use if_chain::if_chain;\n use rustc_hir::{Crate, Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n \n-use crate::utils::{is_entrypoint_fn, is_no_std_crate, snippet, span_lint_and_help};\n-use if_chain::if_chain;\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for recursion using the entrypoint.\n     ///"}, {"sha": "5d88ff3b99f3191d0705d43804778e014d7814e5", "filename": "clippy_lints/src/manual_async_fn.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmanual_async_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_async_fn.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,7 @@\n-use crate::utils::paths::FUTURE_FROM_GENERATOR;\n-use crate::utils::{match_function_call, position_before_rarrow, snippet_block, snippet_opt, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::match_function_call;\n+use clippy_utils::paths::FUTURE_FROM_GENERATOR;\n+use clippy_utils::source::{position_before_rarrow, snippet_block, snippet_opt};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::FnKind;"}, {"sha": "ed157783b723f7e7e40e0566c4a785096689680e", "filename": "clippy_lints/src/manual_map.rs", "status": "modified", "additions": 21, "deletions": 17, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmanual_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmanual_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_map.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,18 +1,14 @@\n-use crate::{\n-    map_unit_fn::OPTION_MAP_UNIT_FN,\n-    matches::MATCH_AS_REF,\n-    utils::{\n-        can_partially_move_ty, is_allowed, is_type_diagnostic_item, match_def_path, match_var, paths,\n-        peel_hir_expr_refs, peel_mid_ty_refs_is_mutable, snippet_with_applicability, snippet_with_context,\n-        span_lint_and_sugg,\n-    },\n-};\n+use crate::{map_unit_fn::OPTION_MAP_UNIT_FN, matches::MATCH_AS_REF};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::{snippet_with_applicability, snippet_with_context};\n+use clippy_utils::ty::{can_partially_move_ty, is_type_diagnostic_item, peel_mid_ty_refs_is_mutable};\n+use clippy_utils::{is_allowed, is_else_clause_of_if_let_else, match_def_path, match_var, paths, peel_hir_expr_refs};\n use rustc_ast::util::parser::PREC_POSTFIX;\n use rustc_errors::Applicability;\n use rustc_hir::{\n     def::Res,\n     intravisit::{walk_expr, ErasedMap, NestedVisitorMap, Visitor},\n-    Arm, BindingAnnotation, Block, Expr, ExprKind, Mutability, Pat, PatKind, Path, QPath,\n+    Arm, BindingAnnotation, Block, Expr, ExprKind, MatchSource, Mutability, Pat, PatKind, Path, QPath,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n@@ -55,8 +51,11 @@ impl LateLintPass<'_> for ManualMap {\n             return;\n         }\n \n-        if let ExprKind::Match(scrutinee, [arm1 @ Arm { guard: None, .. }, arm2 @ Arm { guard: None, .. }], _) =\n-            expr.kind\n+        if let ExprKind::Match(\n+            scrutinee,\n+            [arm1 @ Arm { guard: None, .. }, arm2 @ Arm { guard: None, .. }],\n+            match_kind,\n+        ) = expr.kind\n         {\n             let (scrutinee_ty, ty_ref_count, ty_mutability) =\n                 peel_mid_ty_refs_is_mutable(cx.typeck_results().expr_ty(scrutinee));\n@@ -129,7 +128,7 @@ impl LateLintPass<'_> for ManualMap {\n             // Remove address-of expressions from the scrutinee. Either `as_ref` will be called, or\n             // it's being passed by value.\n             let scrutinee = peel_hir_expr_refs(scrutinee).0;\n-            let scrutinee_str = snippet_with_context(cx, scrutinee.span, expr_ctxt, \"..\", &mut app);\n+            let (scrutinee_str, _) = snippet_with_context(cx, scrutinee.span, expr_ctxt, \"..\", &mut app);\n             let scrutinee_str =\n                 if scrutinee.span.ctxt() == expr.span.ctxt() && scrutinee.precedence().order() < PREC_POSTFIX {\n                     format!(\"({})\", scrutinee_str)\n@@ -160,16 +159,16 @@ impl LateLintPass<'_> for ManualMap {\n                             \"|{}{}| {}\",\n                             annotation,\n                             some_binding,\n-                            snippet_with_context(cx, some_expr.span, expr_ctxt, \"..\", &mut app)\n+                            snippet_with_context(cx, some_expr.span, expr_ctxt, \"..\", &mut app).0\n                         )\n                     },\n                 }\n             } else if !is_wild_none && explicit_ref.is_none() {\n                 // TODO: handle explicit reference annotations.\n                 format!(\n                     \"|{}| {}\",\n-                    snippet_with_context(cx, some_pat.span, expr_ctxt, \"..\", &mut app),\n-                    snippet_with_context(cx, some_expr.span, expr_ctxt, \"..\", &mut app)\n+                    snippet_with_context(cx, some_pat.span, expr_ctxt, \"..\", &mut app).0,\n+                    snippet_with_context(cx, some_expr.span, expr_ctxt, \"..\", &mut app).0\n                 )\n             } else {\n                 // Refutable bindings and mixed reference annotations can't be handled by `map`.\n@@ -182,7 +181,12 @@ impl LateLintPass<'_> for ManualMap {\n                 expr.span,\n                 \"manual implementation of `Option::map`\",\n                 \"try this\",\n-                format!(\"{}{}.map({})\", scrutinee_str, as_ref_str, body_str),\n+                if matches!(match_kind, MatchSource::IfLetDesugar { .. }) && is_else_clause_of_if_let_else(cx.tcx, expr)\n+                {\n+                    format!(\"{{ {}{}.map({}) }}\", scrutinee_str, as_ref_str, body_str)\n+                } else {\n+                    format!(\"{}{}.map({})\", scrutinee_str, as_ref_str, body_str)\n+                },\n                 app,\n             );\n         }"}, {"sha": "95261580b8e7413d9cd60caa45d6d460ec02d91d", "filename": "clippy_lints/src/manual_non_exhaustive.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_non_exhaustive.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,8 @@\n-use crate::utils::{meets_msrv, snippet_opt, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::meets_msrv;\n+use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n-use rustc_ast::ast::{Attribute, Item, ItemKind, FieldDef, Variant, VariantData, VisibilityKind};\n+use rustc_ast::ast::{Attribute, FieldDef, Item, ItemKind, Variant, VariantData, VisibilityKind};\n use rustc_attr as attr;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};"}, {"sha": "9bfae602c407d26f6bf78f761f86f3eeccbfbbf7", "filename": "clippy_lints/src/manual_ok_or.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmanual_ok_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_ok_or.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,7 @@\n-use crate::utils::{\n-    indent_of, is_type_diagnostic_item, match_qpath, path_to_local_id, paths, reindent_multiline, snippet_opt,\n-    span_lint_and_sugg,\n-};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::{indent_of, reindent_multiline, snippet_opt};\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{match_qpath, path_to_local_id, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, PatKind};"}, {"sha": "9da37efddac98563d288e0185be253d5ef657c9b", "filename": "clippy_lints/src/manual_strip.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmanual_strip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmanual_strip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_strip.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,9 +1,8 @@\n use crate::consts::{constant, Constant};\n-use crate::utils::usage::mutated_variables;\n-use crate::utils::{\n-    eq_expr_value, higher, match_def_path, meets_msrv, multispan_sugg, paths, snippet, span_lint_and_then,\n-};\n-\n+use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n+use clippy_utils::source::snippet;\n+use clippy_utils::usage::mutated_variables;\n+use clippy_utils::{eq_expr_value, higher, match_def_path, meets_msrv, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_hir::def::Res;"}, {"sha": "f296d6a1a15f5f3af7f8b2ad688e14ec96fdee47", "filename": "clippy_lints/src/manual_unwrap_or.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmanual_unwrap_or.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,9 @@\n use crate::consts::constant_simple;\n-use crate::utils;\n-use crate::utils::{path_to_local_id, sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::{indent_of, reindent_multiline, snippet_opt};\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::usage::contains_return_break_continue_macro;\n+use clippy_utils::{in_constant, match_qpath, path_to_local_id, paths, sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Arm, Expr, ExprKind, Pat, PatKind};\n@@ -42,7 +45,7 @@ declare_lint_pass!(ManualUnwrapOr => [MANUAL_UNWRAP_OR]);\n \n impl LateLintPass<'_> for ManualUnwrapOr {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if in_external_macro(cx.sess(), expr.span) {\n+        if in_external_macro(cx.sess(), expr.span) || in_constant(cx, expr.hir_id) {\n             return;\n         }\n         lint_manual_unwrap_or(cx, expr);\n@@ -72,19 +75,19 @@ fn lint_manual_unwrap_or<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n             if let Some((idx, or_arm)) = arms.iter().enumerate().find(|(_, arm)|\n                 match arm.pat.kind {\n                     PatKind::Path(ref some_qpath) =>\n-                        utils::match_qpath(some_qpath, &utils::paths::OPTION_NONE),\n+                        match_qpath(some_qpath, &paths::OPTION_NONE),\n                     PatKind::TupleStruct(ref err_qpath, &[Pat { kind: PatKind::Wild, .. }], _) =>\n-                        utils::match_qpath(err_qpath, &utils::paths::RESULT_ERR),\n+                        match_qpath(err_qpath, &paths::RESULT_ERR),\n                     _ => false,\n                 }\n             );\n             let unwrap_arm = &arms[1 - idx];\n             if let PatKind::TupleStruct(ref unwrap_qpath, &[unwrap_pat], _) = unwrap_arm.pat.kind;\n-            if utils::match_qpath(unwrap_qpath, &utils::paths::OPTION_SOME)\n-                || utils::match_qpath(unwrap_qpath, &utils::paths::RESULT_OK);\n+            if match_qpath(unwrap_qpath, &paths::OPTION_SOME)\n+                || match_qpath(unwrap_qpath, &paths::RESULT_OK);\n             if let PatKind::Binding(_, binding_hir_id, ..) = unwrap_pat.kind;\n             if path_to_local_id(unwrap_arm.body, binding_hir_id);\n-            if !utils::usage::contains_return_break_continue_macro(or_arm.body);\n+            if !contains_return_break_continue_macro(or_arm.body);\n             then {\n                 Some(or_arm)\n             } else {\n@@ -96,21 +99,21 @@ fn lint_manual_unwrap_or<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n     if_chain! {\n         if let ExprKind::Match(scrutinee, match_arms, _) = expr.kind;\n         let ty = cx.typeck_results().expr_ty(scrutinee);\n-        if let Some(case) = if utils::is_type_diagnostic_item(cx, ty, sym::option_type) {\n+        if let Some(case) = if is_type_diagnostic_item(cx, ty, sym::option_type) {\n             Some(Case::Option)\n-        } else if utils::is_type_diagnostic_item(cx, ty, sym::result_type) {\n+        } else if is_type_diagnostic_item(cx, ty, sym::result_type) {\n             Some(Case::Result)\n         } else {\n             None\n         };\n         if let Some(or_arm) = applicable_or_arm(match_arms);\n-        if let Some(or_body_snippet) = utils::snippet_opt(cx, or_arm.body.span);\n-        if let Some(indent) = utils::indent_of(cx, expr.span);\n+        if let Some(or_body_snippet) = snippet_opt(cx, or_arm.body.span);\n+        if let Some(indent) = indent_of(cx, expr.span);\n         if constant_simple(cx, cx.typeck_results(), or_arm.body).is_some();\n         then {\n             let reindented_or_body =\n-                utils::reindent_multiline(or_body_snippet.into(), true, Some(indent));\n-            utils::span_lint_and_sugg(\n+                reindent_multiline(or_body_snippet.into(), true, Some(indent));\n+            span_lint_and_sugg(\n                 cx,\n                 MANUAL_UNWRAP_OR, expr.span,\n                 &format!(\"this pattern reimplements `{}`\", case.unwrap_fn_path()),"}, {"sha": "cfcc705eabc9c640ddef320af0565eb6f6fd2859", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,8 @@\n-use crate::utils::paths;\n-use crate::utils::{\n-    is_copy, is_type_diagnostic_item, match_trait_method, remove_blocks, snippet_with_applicability, span_lint_and_sugg,\n-};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_trait_method;\n+use clippy_utils::remove_blocks;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::{is_copy, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -55,7 +56,7 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n             if args.len() == 2;\n             if method.ident.name == sym::map;\n             let ty = cx.typeck_results().expr_ty(&args[0]);\n-            if is_type_diagnostic_item(cx, ty, sym::option_type) || match_trait_method(cx, e, &paths::ITERATOR);\n+            if is_type_diagnostic_item(cx, ty, sym::option_type) || is_trait_method(cx, e, sym::Iterator);\n             if let hir::ExprKind::Closure(_, _, body_id, _, _) = args[1].kind;\n             let closure_body = cx.tcx.hir().body(body_id);\n             let closure_expr = remove_blocks(&closure_body.value);"}, {"sha": "a6a63961be572608f29f4605131388d5af6f8420", "filename": "clippy_lints/src/map_err_ignore.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmap_err_ignore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_err_ignore.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,4 @@\n-use crate::utils::span_lint_and_help;\n-\n+use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_hir::{CaptureBy, Expr, ExprKind, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};"}, {"sha": "75191e1f9ee8d104670e67b2404472e87ba19e1e", "filename": "clippy_lints/src/map_identity.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmap_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmap_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_identity.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,6 @@\n-use crate::utils::{\n-    is_adjusted, is_type_diagnostic_item, match_path, match_trait_method, match_var, paths, remove_blocks,\n-    span_lint_and_sugg,\n-};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{is_adjusted, is_trait_method, match_path, match_var, paths, remove_blocks};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Body, Expr, ExprKind, Pat, PatKind, QPath, StmtKind};\n@@ -65,7 +64,7 @@ fn get_map_argument<'a>(cx: &LateContext<'_>, expr: &'a Expr<'a>) -> Option<&'a\n         if let ExprKind::MethodCall(ref method, _, ref args, _) = expr.kind;\n         if args.len() == 2 && method.ident.name == sym::map;\n         let caller_ty = cx.typeck_results().expr_ty(&args[0]);\n-        if match_trait_method(cx, expr, &paths::ITERATOR)\n+        if is_trait_method(cx, expr, sym::Iterator)\n             || is_type_diagnostic_item(cx, caller_ty, sym::result_type)\n             || is_type_diagnostic_item(cx, caller_ty, sym::option_type);\n         then {"}, {"sha": "d4764b5ccffd6bf82b5a9fd5d00f74855659f22b", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,7 @@\n-use crate::utils::{is_type_diagnostic_item, iter_input_pats, method_chain_args, snippet, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{iter_input_pats, method_chain_args};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "ccaa5e98c83a9e38677735784274a43013c31725", "filename": "clippy_lints/src/match_on_vec_items.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatch_on_vec_items.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{is_type_diagnostic_item, is_type_lang_item, snippet, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::{is_type_diagnostic_item, is_type_lang_item};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, LangItem, MatchSource};"}, {"sha": "3680429fed7d8709ba446ec993d6a39da6fd6d39", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 183, "deletions": 100, "changes": 283, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,26 +1,28 @@\n use crate::consts::{constant, miri_to_const, Constant};\n-use crate::utils::sugg::Sugg;\n-use crate::utils::visitors::LocalUsedVisitor;\n-use crate::utils::{\n-    expr_block, get_parent_expr, implements_trait, in_macro, indent_of, is_allowed, is_expn_of, is_refutable,\n-    is_type_diagnostic_item, is_wild, match_qpath, match_type, meets_msrv, multispan_sugg, path_to_local,\n-    path_to_local_id, peel_hir_pat_refs, peel_mid_ty_refs, peel_n_hir_expr_refs, remove_blocks, snippet, snippet_block,\n-    snippet_opt, snippet_with_applicability, span_lint_and_help, span_lint_and_note, span_lint_and_sugg,\n-    span_lint_and_then, strip_pat_refs,\n+use clippy_utils::diagnostics::{\n+    multispan_sugg, span_lint_and_help, span_lint_and_note, span_lint_and_sugg, span_lint_and_then,\n };\n-use crate::utils::{paths, search_same, SpanlessEq, SpanlessHash};\n+use clippy_utils::source::{expr_block, indent_of, snippet, snippet_block, snippet_opt, snippet_with_applicability};\n+use clippy_utils::sugg::Sugg;\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item, match_type, peel_mid_ty_refs};\n+use clippy_utils::visitors::LocalUsedVisitor;\n+use clippy_utils::{\n+    get_parent_expr, in_macro, is_allowed, is_expn_of, is_refutable, is_wild, match_qpath, meets_msrv, path_to_local,\n+    path_to_local_id, peel_hir_pat_refs, peel_n_hir_expr_refs, recurse_or_patterns, remove_blocks, strip_pat_refs,\n+};\n+use clippy_utils::{paths, search_same, SpanlessEq, SpanlessHash};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n-use rustc_hir::def::CtorKind;\n+use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::{\n-    Arm, BindingAnnotation, Block, BorrowKind, Expr, ExprKind, Guard, HirId, Local, MatchSource, Mutability, Node, Pat,\n-    PatKind, QPath, RangeEnd,\n+    self as hir, Arm, BindingAnnotation, Block, BorrowKind, Expr, ExprKind, Guard, HirId, Local, MatchSource,\n+    Mutability, Node, Pat, PatKind, PathSegment, QPath, RangeEnd, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n-use rustc_middle::ty::{self, Ty, TyS};\n+use rustc_middle::ty::{self, Ty, TyS, VariantDef};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::{Span, Spanned};\n@@ -954,114 +956,181 @@ fn check_wild_err_arm<'tcx>(cx: &LateContext<'tcx>, ex: &Expr<'tcx>, arms: &[Arm\n     }\n }\n \n-fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n-    let ty = cx.typeck_results().expr_ty(ex);\n-    if !ty.is_enum() {\n-        // If there isn't a nice closed set of possible values that can be conveniently enumerated,\n-        // don't complain about not enumerating the mall.\n-        return;\n+enum CommonPrefixSearcher<'a> {\n+    None,\n+    Path(&'a [PathSegment<'a>]),\n+    Mixed,\n+}\n+impl CommonPrefixSearcher<'a> {\n+    fn with_path(&mut self, path: &'a [PathSegment<'a>]) {\n+        match path {\n+            [path @ .., _] => self.with_prefix(path),\n+            [] => (),\n+        }\n     }\n \n+    fn with_prefix(&mut self, path: &'a [PathSegment<'a>]) {\n+        match self {\n+            Self::None => *self = Self::Path(path),\n+            Self::Path(self_path)\n+                if path\n+                    .iter()\n+                    .map(|p| p.ident.name)\n+                    .eq(self_path.iter().map(|p| p.ident.name)) => {},\n+            Self::Path(_) => *self = Self::Mixed,\n+            Self::Mixed => (),\n+        }\n+    }\n+}\n+\n+#[allow(clippy::too_many_lines)]\n+fn check_wild_enum_match(cx: &LateContext<'_>, ex: &Expr<'_>, arms: &[Arm<'_>]) {\n+    let ty = cx.typeck_results().expr_ty(ex).peel_refs();\n+    let adt_def = match ty.kind() {\n+        ty::Adt(adt_def, _)\n+            if adt_def.is_enum()\n+                && !(is_type_diagnostic_item(cx, ty, sym::option_type)\n+                    || is_type_diagnostic_item(cx, ty, sym::result_type)) =>\n+        {\n+            adt_def\n+        },\n+        _ => return,\n+    };\n+\n     // First pass - check for violation, but don't do much book-keeping because this is hopefully\n     // the uncommon case, and the book-keeping is slightly expensive.\n     let mut wildcard_span = None;\n     let mut wildcard_ident = None;\n+    let mut has_non_wild = false;\n     for arm in arms {\n-        if let PatKind::Wild = arm.pat.kind {\n-            wildcard_span = Some(arm.pat.span);\n-        } else if let PatKind::Binding(_, _, ident, None) = arm.pat.kind {\n-            wildcard_span = Some(arm.pat.span);\n-            wildcard_ident = Some(ident);\n+        match peel_hir_pat_refs(arm.pat).0.kind {\n+            PatKind::Wild => wildcard_span = Some(arm.pat.span),\n+            PatKind::Binding(_, _, ident, None) => {\n+                wildcard_span = Some(arm.pat.span);\n+                wildcard_ident = Some(ident);\n+            },\n+            _ => has_non_wild = true,\n         }\n     }\n+    let wildcard_span = match wildcard_span {\n+        Some(x) if has_non_wild => x,\n+        _ => return,\n+    };\n \n-    if let Some(wildcard_span) = wildcard_span {\n-        // Accumulate the variants which should be put in place of the wildcard because they're not\n-        // already covered.\n+    // Accumulate the variants which should be put in place of the wildcard because they're not\n+    // already covered.\n+    let mut missing_variants: Vec<_> = adt_def.variants.iter().collect();\n \n-        let mut missing_variants = vec![];\n-        if let ty::Adt(def, _) = ty.kind() {\n-            for variant in &def.variants {\n-                missing_variants.push(variant);\n+    let mut path_prefix = CommonPrefixSearcher::None;\n+    for arm in arms {\n+        // Guards mean that this case probably isn't exhaustively covered. Technically\n+        // this is incorrect, as we should really check whether each variant is exhaustively\n+        // covered by the set of guards that cover it, but that's really hard to do.\n+        recurse_or_patterns(arm.pat, |pat| {\n+            let path = match &peel_hir_pat_refs(pat).0.kind {\n+                PatKind::Path(path) => {\n+                    #[allow(clippy::match_same_arms)]\n+                    let id = match cx.qpath_res(path, pat.hir_id) {\n+                        Res::Def(DefKind::Const | DefKind::ConstParam | DefKind::AnonConst, _) => return,\n+                        Res::Def(_, id) => id,\n+                        _ => return,\n+                    };\n+                    if arm.guard.is_none() {\n+                        missing_variants.retain(|e| e.ctor_def_id != Some(id));\n+                    }\n+                    path\n+                },\n+                PatKind::TupleStruct(path, patterns, ..) => {\n+                    if arm.guard.is_none() && patterns.iter().all(|p| !is_refutable(cx, p)) {\n+                        let id = cx.qpath_res(path, pat.hir_id).def_id();\n+                        missing_variants.retain(|e| e.ctor_def_id != Some(id));\n+                    }\n+                    path\n+                },\n+                PatKind::Struct(path, patterns, ..) => {\n+                    if arm.guard.is_none() && patterns.iter().all(|p| !is_refutable(cx, p.pat)) {\n+                        let id = cx.qpath_res(path, pat.hir_id).def_id();\n+                        missing_variants.retain(|e| e.def_id != id);\n+                    }\n+                    path\n+                },\n+                _ => return,\n+            };\n+            match path {\n+                QPath::Resolved(_, path) => path_prefix.with_path(path.segments),\n+                QPath::TypeRelative(\n+                    hir::Ty {\n+                        kind: TyKind::Path(QPath::Resolved(_, path)),\n+                        ..\n+                    },\n+                    _,\n+                ) => path_prefix.with_prefix(path.segments),\n+                _ => (),\n             }\n-        }\n+        });\n+    }\n \n-        for arm in arms {\n-            if arm.guard.is_some() {\n-                // Guards mean that this case probably isn't exhaustively covered. Technically\n-                // this is incorrect, as we should really check whether each variant is exhaustively\n-                // covered by the set of guards that cover it, but that's really hard to do.\n-                continue;\n-            }\n-            if let PatKind::Path(ref path) = arm.pat.kind {\n-                if let QPath::Resolved(_, p) = path {\n-                    missing_variants.retain(|e| e.ctor_def_id != Some(p.res.def_id()));\n-                }\n-            } else if let PatKind::TupleStruct(QPath::Resolved(_, p), ref patterns, ..) = arm.pat.kind {\n-                // Some simple checks for exhaustive patterns.\n-                // There is a room for improvements to detect more cases,\n-                // but it can be more expensive to do so.\n-                let is_pattern_exhaustive =\n-                    |pat: &&Pat<'_>| matches!(pat.kind, PatKind::Wild | PatKind::Binding(.., None));\n-                if patterns.iter().all(is_pattern_exhaustive) {\n-                    missing_variants.retain(|e| e.ctor_def_id != Some(p.res.def_id()));\n+    let format_suggestion = |variant: &VariantDef| {\n+        format!(\n+            \"{}{}{}{}\",\n+            if let Some(ident) = wildcard_ident {\n+                format!(\"{} @ \", ident.name)\n+            } else {\n+                String::new()\n+            },\n+            if let CommonPrefixSearcher::Path(path_prefix) = path_prefix {\n+                let mut s = String::new();\n+                for seg in path_prefix {\n+                    s.push_str(&seg.ident.as_str());\n+                    s.push_str(\"::\");\n                 }\n+                s\n+            } else {\n+                let mut s = cx.tcx.def_path_str(adt_def.did);\n+                s.push_str(\"::\");\n+                s\n+            },\n+            variant.ident.name,\n+            match variant.ctor_kind {\n+                CtorKind::Fn if variant.fields.len() == 1 => \"(_)\",\n+                CtorKind::Fn => \"(..)\",\n+                CtorKind::Const => \"\",\n+                CtorKind::Fictive => \"{ .. }\",\n             }\n-        }\n-\n-        let mut suggestion: Vec<String> = missing_variants\n-            .iter()\n-            .map(|v| {\n-                let suffix = match v.ctor_kind {\n-                    CtorKind::Fn => \"(..)\",\n-                    CtorKind::Const | CtorKind::Fictive => \"\",\n-                };\n-                let ident_str = if let Some(ident) = wildcard_ident {\n-                    format!(\"{} @ \", ident.name)\n-                } else {\n-                    String::new()\n-                };\n-                // This path assumes that the enum type is imported into scope.\n-                format!(\"{}{}{}\", ident_str, cx.tcx.def_path_str(v.def_id), suffix)\n-            })\n-            .collect();\n-\n-        if suggestion.is_empty() {\n-            return;\n-        }\n-\n-        let mut message = \"wildcard match will miss any future added variants\";\n+        )\n+    };\n \n-        if let ty::Adt(def, _) = ty.kind() {\n-            if def.is_variant_list_non_exhaustive() {\n-                message = \"match on non-exhaustive enum doesn't explicitly match all known variants\";\n-                suggestion.push(String::from(\"_\"));\n-            }\n-        }\n+    match missing_variants.as_slice() {\n+        [] => (),\n+        [x] if !adt_def.is_variant_list_non_exhaustive() => span_lint_and_sugg(\n+            cx,\n+            MATCH_WILDCARD_FOR_SINGLE_VARIANTS,\n+            wildcard_span,\n+            \"wildcard matches only a single variant and will also match any future added variants\",\n+            \"try this\",\n+            format_suggestion(x),\n+            Applicability::MaybeIncorrect,\n+        ),\n+        variants => {\n+            let mut suggestions: Vec<_> = variants.iter().cloned().map(format_suggestion).collect();\n+            let message = if adt_def.is_variant_list_non_exhaustive() {\n+                suggestions.push(\"_\".into());\n+                \"wildcard matches known variants and will also match future added variants\"\n+            } else {\n+                \"wildcard match will also match any future added variants\"\n+            };\n \n-        if suggestion.len() == 1 {\n-            // No need to check for non-exhaustive enum as in that case len would be greater than 1\n             span_lint_and_sugg(\n                 cx,\n-                MATCH_WILDCARD_FOR_SINGLE_VARIANTS,\n+                WILDCARD_ENUM_MATCH_ARM,\n                 wildcard_span,\n                 message,\n                 \"try this\",\n-                suggestion[0].clone(),\n+                suggestions.join(\" | \"),\n                 Applicability::MaybeIncorrect,\n             )\n-        };\n-\n-        span_lint_and_sugg(\n-            cx,\n-            WILDCARD_ENUM_MATCH_ARM,\n-            wildcard_span,\n-            message,\n-            \"try this\",\n-            suggestion.join(\" | \"),\n-            Applicability::MaybeIncorrect,\n-        )\n-    }\n+        },\n+    };\n }\n \n // If the block contains only a `panic!` macro (as expression or statement)\n@@ -1284,6 +1353,7 @@ fn find_bool_lit(ex: &ExprKind<'_>, desugared: bool) -> Option<bool> {\n     }\n }\n \n+#[allow(clippy::too_many_lines)]\n fn check_match_single_binding<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[Arm<'_>], expr: &Expr<'_>) {\n     if in_macro(expr.span) || arms.len() != 1 || is_refutable(cx, arms[0].pat) {\n         return;\n@@ -1358,7 +1428,18 @@ fn check_match_single_binding<'a>(cx: &LateContext<'a>, ex: &Expr<'a>, arms: &[A\n                         indent = \" \".repeat(indent_of(cx, bind_names).unwrap_or(0));\n                         cbrace_start = format!(\"{{\\n{}\", indent);\n                     }\n-                };\n+                }\n+                // If the parent is already an arm, and the body is another match statement,\n+                // we need curly braces around suggestion\n+                let parent_node_id = cx.tcx.hir().get_parent_node(expr.hir_id);\n+                if let Node::Arm(arm) = &cx.tcx.hir().get(parent_node_id) {\n+                    if let ExprKind::Match(..) = arm.body.kind {\n+                        cbrace_end = format!(\"\\n{}}}\", indent);\n+                        // Fix body indent due to the match\n+                        indent = \" \".repeat(indent_of(cx, bind_names).unwrap_or(0));\n+                        cbrace_start = format!(\"{{\\n{}\", indent);\n+                    }\n+                }\n                 (\n                     expr.span,\n                     format!(\n@@ -1614,7 +1695,9 @@ where\n \n mod redundant_pattern_match {\n     use super::REDUNDANT_PATTERN_MATCHING;\n-    use crate::utils::{match_qpath, match_trait_method, paths, snippet, span_lint_and_then};\n+    use clippy_utils::diagnostics::span_lint_and_then;\n+    use clippy_utils::source::snippet;\n+    use clippy_utils::{is_trait_method, match_qpath, paths};\n     use if_chain::if_chain;\n     use rustc_ast::ast::LitKind;\n     use rustc_errors::Applicability;\n@@ -1679,7 +1762,7 @@ mod redundant_pattern_match {\n             if keyword == \"while\";\n             if let ExprKind::MethodCall(method_path, _, _, _) = op.kind;\n             if method_path.ident.name == sym::next;\n-            if match_trait_method(cx, op, &paths::ITERATOR);\n+            if is_trait_method(cx, op, sym::Iterator);\n             then {\n                 return;\n             }"}, {"sha": "7895ba9f1e07687154eb16e46d063964a12546ef", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,10 +1,12 @@\n-use crate::utils::{match_def_path, paths, snippet, span_lint_and_then, walk_ptrs_ty_depth};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::walk_ptrs_ty_depth;\n+use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BorrowKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-\n use std::iter;\n \n declare_clippy_lint! {"}, {"sha": "c13802e395391a209523c195f164ee01b37612aa", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{match_def_path, paths, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{match_def_path, paths};\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};"}, {"sha": "426c108d89fb59c2d5240e3c931ab7ea9efe5051", "filename": "clippy_lints/src/mem_replace.rs", "status": "modified", "additions": 37, "deletions": 5, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmem_replace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmem_replace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_replace.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,9 +1,10 @@\n-use crate::utils::{\n-    in_macro, match_def_path, match_qpath, meets_msrv, paths, snippet, snippet_with_applicability, span_lint_and_help,\n-    span_lint_and_sugg, span_lint_and_then,\n-};\n+use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::is_diagnostic_assoc_item;\n+use clippy_utils::source::{snippet, snippet_with_applicability};\n+use clippy_utils::{in_macro, match_def_path, match_qpath, meets_msrv, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n+use rustc_hir::def_id::DefId;\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n@@ -194,13 +195,44 @@ fn check_replace_with_uninit(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<'\n     }\n }\n \n+/// Returns true if the `def_id` associated with the `path` is recognized as a \"default-equivalent\"\n+/// constructor from the std library\n+fn is_default_equivalent_ctor(cx: &LateContext<'_>, def_id: DefId, path: &QPath<'_>) -> bool {\n+    let std_types_symbols = &[\n+        sym::string_type,\n+        sym::vec_type,\n+        sym::vecdeque_type,\n+        sym::LinkedList,\n+        sym::hashmap_type,\n+        sym::BTreeMap,\n+        sym::hashset_type,\n+        sym::BTreeSet,\n+        sym::BinaryHeap,\n+    ];\n+\n+    if std_types_symbols\n+        .iter()\n+        .any(|symbol| is_diagnostic_assoc_item(cx, def_id, *symbol))\n+    {\n+        if let QPath::TypeRelative(_, ref method) = path {\n+            if method.ident.name == sym::new {\n+                return true;\n+            }\n+        }\n+    }\n+\n+    false\n+}\n+\n fn check_replace_with_default(cx: &LateContext<'_>, src: &Expr<'_>, dest: &Expr<'_>, expr_span: Span) {\n     if let ExprKind::Call(ref repl_func, _) = src.kind {\n         if_chain! {\n             if !in_external_macro(cx.tcx.sess, expr_span);\n             if let ExprKind::Path(ref repl_func_qpath) = repl_func.kind;\n             if let Some(repl_def_id) = cx.qpath_res(repl_func_qpath, repl_func.hir_id).opt_def_id();\n-            if match_def_path(cx, repl_def_id, &paths::DEFAULT_TRAIT_METHOD);\n+            if is_diagnostic_assoc_item(cx, repl_def_id, sym::Default)\n+                || is_default_equivalent_ctor(cx, repl_def_id, repl_func_qpath);\n+\n             then {\n                 span_lint_and_then(\n                     cx,"}, {"sha": "0ba8a98a01851398f2558656ddb5f31cfcaba5d4", "filename": "clippy_lints/src/methods/bind_instead_of_map.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbind_instead_of_map.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,8 +1,8 @@\n use super::{contains_return, BIND_INSTEAD_OF_MAP};\n-use crate::utils::{\n-    in_macro, match_qpath, match_type, method_calls, multispan_sugg_with_applicability, paths, remove_blocks, snippet,\n-    snippet_with_macro_callsite, span_lint_and_sugg, span_lint_and_then, visitors::find_all_ret_expressions,\n-};\n+use clippy_utils::diagnostics::{multispan_sugg_with_applicability, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n+use clippy_utils::ty::match_type;\n+use clippy_utils::{in_macro, match_qpath, method_calls, paths, remove_blocks, visitors::find_all_ret_expressions};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "4f88f80a304bd6cbfaec64ebefa98b285adbd7c0", "filename": "clippy_lints/src/methods/bytes_nth.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fbytes_nth.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{is_type_diagnostic_item, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};"}, {"sha": "c668fe52781dc32a5c0e0dcac0f1e59818ab7bcf", "filename": "clippy_lints/src/methods/chars_cmp.rs", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -0,0 +1,54 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{method_chain_args, single_segment_path};\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_lint::Lint;\n+use rustc_middle::ty;\n+use rustc_span::sym;\n+\n+/// Wrapper fn for `CHARS_NEXT_CMP` and `CHARS_LAST_CMP` lints.\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    info: &crate::methods::BinaryExprInfo<'_>,\n+    chain_methods: &[&str],\n+    lint: &'static Lint,\n+    suggest: &str,\n+) -> bool {\n+    if_chain! {\n+        if let Some(args) = method_chain_args(info.chain, chain_methods);\n+        if let hir::ExprKind::Call(ref fun, ref arg_char) = info.other.kind;\n+        if arg_char.len() == 1;\n+        if let hir::ExprKind::Path(ref qpath) = fun.kind;\n+        if let Some(segment) = single_segment_path(qpath);\n+        if segment.ident.name == sym::Some;\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+            let self_ty = cx.typeck_results().expr_ty_adjusted(&args[0][0]).peel_refs();\n+\n+            if *self_ty.kind() != ty::Str {\n+                return false;\n+            }\n+\n+            span_lint_and_sugg(\n+                cx,\n+                lint,\n+                info.expr.span,\n+                &format!(\"you should use the `{}` method\", suggest),\n+                \"like this\",\n+                format!(\"{}{}.{}({})\",\n+                        if info.eq { \"\" } else { \"!\" },\n+                        snippet_with_applicability(cx, args[0][0].span, \"..\", &mut applicability),\n+                        suggest,\n+                        snippet_with_applicability(cx, arg_char[0].span, \"..\", &mut applicability)),\n+                applicability,\n+            );\n+\n+            return true;\n+        }\n+    }\n+\n+    false\n+}"}, {"sha": "4275857757fee4552ee56536a9622261a78a86e5", "filename": "clippy_lints/src/methods/chars_cmp_with_unwrap.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_cmp_with_unwrap.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -0,0 +1,44 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::method_chain_args;\n+use clippy_utils::source::snippet_with_applicability;\n+use if_chain::if_chain;\n+use rustc_ast::ast;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_lint::Lint;\n+\n+/// Wrapper fn for `CHARS_NEXT_CMP` and `CHARS_LAST_CMP` lints with `unwrap()`.\n+pub(super) fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    info: &crate::methods::BinaryExprInfo<'_>,\n+    chain_methods: &[&str],\n+    lint: &'static Lint,\n+    suggest: &str,\n+) -> bool {\n+    if_chain! {\n+        if let Some(args) = method_chain_args(info.chain, chain_methods);\n+        if let hir::ExprKind::Lit(ref lit) = info.other.kind;\n+        if let ast::LitKind::Char(c) = lit.node;\n+        then {\n+            let mut applicability = Applicability::MachineApplicable;\n+            span_lint_and_sugg(\n+                cx,\n+                lint,\n+                info.expr.span,\n+                &format!(\"you should use the `{}` method\", suggest),\n+                \"like this\",\n+                format!(\"{}{}.{}('{}')\",\n+                        if info.eq { \"\" } else { \"!\" },\n+                        snippet_with_applicability(cx, args[0][0].span, \"..\", &mut applicability),\n+                        suggest,\n+                        c),\n+                applicability,\n+            );\n+\n+            true\n+        } else {\n+            false\n+        }\n+    }\n+}"}, {"sha": "07bbc5ca1bf46cdf843966ea89ce87b3378164e9", "filename": "clippy_lints/src/methods/chars_last_cmp.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -0,0 +1,13 @@\n+use crate::methods::chars_cmp;\n+use rustc_lint::LateContext;\n+\n+use super::CHARS_LAST_CMP;\n+\n+/// Checks for the `CHARS_LAST_CMP` lint.\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n+    if chars_cmp::check(cx, info, &[\"chars\", \"last\"], CHARS_LAST_CMP, \"ends_with\") {\n+        true\n+    } else {\n+        chars_cmp::check(cx, info, &[\"chars\", \"next_back\"], CHARS_LAST_CMP, \"ends_with\")\n+    }\n+}"}, {"sha": "c29ee0ec8c8ca5720430947f701cdc6ed6c2e7e9", "filename": "clippy_lints/src/methods/chars_last_cmp_with_unwrap.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp_with_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp_with_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_last_cmp_with_unwrap.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -0,0 +1,13 @@\n+use crate::methods::chars_cmp_with_unwrap;\n+use rustc_lint::LateContext;\n+\n+use super::CHARS_LAST_CMP;\n+\n+/// Checks for the `CHARS_LAST_CMP` lint with `unwrap()`.\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n+    if chars_cmp_with_unwrap::check(cx, info, &[\"chars\", \"last\", \"unwrap\"], CHARS_LAST_CMP, \"ends_with\") {\n+        true\n+    } else {\n+        chars_cmp_with_unwrap::check(cx, info, &[\"chars\", \"next_back\", \"unwrap\"], CHARS_LAST_CMP, \"ends_with\")\n+    }\n+}"}, {"sha": "a6701d8830e77d099f17bcc7192f6f6cac566190", "filename": "clippy_lints/src/methods/chars_next_cmp.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -0,0 +1,8 @@\n+use rustc_lint::LateContext;\n+\n+use super::CHARS_NEXT_CMP;\n+\n+/// Checks for the `CHARS_NEXT_CMP` lint.\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n+    crate::methods::chars_cmp::check(cx, info, &[\"chars\", \"next\"], CHARS_NEXT_CMP, \"starts_with\")\n+}"}, {"sha": "28ede28e9358bee56a41817d121950bf3e0cd2d6", "filename": "clippy_lints/src/methods/chars_next_cmp_with_unwrap.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp_with_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp_with_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fchars_next_cmp_with_unwrap.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -0,0 +1,8 @@\n+use rustc_lint::LateContext;\n+\n+use super::CHARS_NEXT_CMP;\n+\n+/// Checks for the `CHARS_NEXT_CMP` lint with `unwrap()`.\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, info: &crate::methods::BinaryExprInfo<'_>) -> bool {\n+    crate::methods::chars_cmp_with_unwrap::check(cx, info, &[\"chars\", \"next\", \"unwrap\"], CHARS_NEXT_CMP, \"starts_with\")\n+}"}, {"sha": "edb6649b87b4da3dec83356492fa497947784304", "filename": "clippy_lints/src/methods/clone_on_copy.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,15 +1,23 @@\n-use crate::utils::{is_copy, span_lint_and_then, sugg};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::sugg;\n+use clippy_utils::ty::is_copy;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, Ty};\n+use rustc_middle::ty;\n+use rustc_span::symbol::{sym, Symbol};\n use std::iter;\n \n use super::CLONE_DOUBLE_REF;\n use super::CLONE_ON_COPY;\n \n /// Checks for the `CLONE_ON_COPY` lint.\n-pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<'_>, arg_ty: Ty<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, method_name: Symbol, args: &[hir::Expr<'_>]) {\n+    if !(args.len() == 1 && method_name == sym::clone) {\n+        return;\n+    }\n+    let arg = &args[0];\n+    let arg_ty = cx.typeck_results().expr_ty_adjusted(&args[0]);\n     let ty = cx.typeck_results().expr_ty(expr);\n     if let ty::Ref(_, inner, _) = arg_ty.kind() {\n         if let ty::Ref(_, innermost, _) = inner.kind() {"}, {"sha": "6417bc81304739e9c72ac75a9fb1c9d4045e097f", "filename": "clippy_lints/src/methods/clone_on_ref_ptr.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fclone_on_ref_ptr.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,13 +1,20 @@\n-use crate::utils::{is_type_diagnostic_item, match_type, paths, snippet_with_macro_callsite, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::paths;\n+use clippy_utils::source::snippet_with_macro_callsite;\n+use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n-use rustc_span::symbol::sym;\n+use rustc_span::symbol::{sym, Symbol};\n \n use super::CLONE_ON_REF_PTR;\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, arg: &hir::Expr<'_>) {\n+pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, method_name: Symbol, args: &[hir::Expr<'_>]) {\n+    if !(args.len() == 1 && method_name == sym::clone) {\n+        return;\n+    }\n+    let arg = &args[0];\n     let obj_ty = cx.typeck_results().expr_ty(arg).peel_refs();\n \n     if let ty::Adt(_, subst) = obj_ty.kind() {"}, {"sha": "e7bffa66b3fcb1627618cb2aecb4d28268a13381", "filename": "clippy_lints/src/methods/expect_fun_call.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_fun_call.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,7 @@\n-use crate::utils::{is_expn_of, is_type_diagnostic_item, snippet, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_expn_of;\n+use clippy_utils::source::{snippet, snippet_with_applicability};\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "64531b29ade2f6c26fc61b4f439e903dc3151ff6", "filename": "clippy_lints/src/methods/expect_used.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_type_diagnostic_item, span_lint_and_help};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_span::sym;"}, {"sha": "39d2f15dbc8bab844c54d6cd469afca1abca4865", "filename": "clippy_lints/src/methods/filetype_is_file.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Ffiletype_is_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Ffiletype_is_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffiletype_is_file.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{get_parent_expr, match_type, paths, span_lint_and_help};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::ty::match_type;\n+use clippy_utils::{get_parent_expr, paths};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "1588eec88824bfdfc97ebee00565fe846a81f179", "filename": "clippy_lints/src/methods/filter_flat_map.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Ffilter_flat_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Ffilter_flat_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_flat_map.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,18 +1,15 @@\n-use crate::utils::{match_trait_method, paths, span_lint_and_help};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::is_trait_method;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::FILTER_MAP;\n \n /// lint use of `filter().flat_map()` for `Iterators`\n-pub(super) fn check<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx hir::Expr<'_>,\n-    _filter_args: &'tcx [hir::Expr<'_>],\n-    _map_args: &'tcx [hir::Expr<'_>],\n-) {\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n     // lint if caller of `.filter().flat_map()` is an Iterator\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         let msg = \"called `filter(..).flat_map(..)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n                     and filtering by returning `iter::empty()`\";"}, {"sha": "2cb476acb2b3c91649b7751f95bb1de3df8a7466", "filename": "clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{match_trait_method, path_to_local_id, paths, snippet, span_lint_and_sugg, SpanlessEq};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n+use clippy_utils::{is_trait_method, path_to_local_id, SpanlessEq};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -15,7 +17,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, is_\n     if_chain! {\n         if let ExprKind::MethodCall(_, _, [map_recv, map_arg], map_span) = expr.kind;\n         if let ExprKind::MethodCall(_, _, [_, filter_arg], filter_span) = map_recv.kind;\n-        if match_trait_method(cx, map_recv, &paths::ITERATOR);\n+        if is_trait_method(cx, map_recv, sym::Iterator);\n \n         // filter(|x| ...is_some())...\n         if let ExprKind::Closure(_, _, filter_body_id, ..) = filter_arg.kind;"}, {"sha": "741b1e7e361255c09560bbdadd26ca46e32963b7", "filename": "clippy_lints/src/methods/filter_map_flat_map.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_flat_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_flat_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_flat_map.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,18 +1,15 @@\n-use crate::utils::{match_trait_method, paths, span_lint_and_help};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::is_trait_method;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::FILTER_MAP;\n \n /// lint use of `filter_map().flat_map()` for `Iterators`\n-pub(super) fn check<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx hir::Expr<'_>,\n-    _filter_args: &'tcx [hir::Expr<'_>],\n-    _map_args: &'tcx [hir::Expr<'_>],\n-) {\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n     // lint if caller of `.filter_map().flat_map()` is an Iterator\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         let msg = \"called `filter_map(..).flat_map(..)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by calling `.flat_map(..)` \\\n                     and filtering by returning `iter::empty()`\";"}, {"sha": "80598d88508483323fafe84fa26b161b79774ef0", "filename": "clippy_lints/src/methods/filter_map_identity.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_identity.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,9 +1,10 @@\n-use crate::utils::{match_qpath, match_trait_method, path_to_local_id, paths, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::{is_trait_method, match_qpath, path_to_local_id, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_span::source_map::Span;\n+use rustc_span::{source_map::Span, sym};\n \n use super::FILTER_MAP_IDENTITY;\n \n@@ -13,7 +14,7 @@ pub(super) fn check(\n     filter_map_args: &[hir::Expr<'_>],\n     filter_map_span: Span,\n ) {\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         let arg_node = &filter_map_args[1].kind;\n \n         let apply_lint = |message: &str| {"}, {"sha": "713bbf258370d9ac08b1cf67d288e173abe4dd14", "filename": "clippy_lints/src/methods/filter_map_map.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_map.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,18 +1,15 @@\n-use crate::utils::{match_trait_method, paths, span_lint_and_help};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::is_trait_method;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::FILTER_MAP;\n \n /// lint use of `filter_map().map()` for `Iterators`\n-pub(super) fn check<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx hir::Expr<'_>,\n-    _filter_args: &'tcx [hir::Expr<'_>],\n-    _map_args: &'tcx [hir::Expr<'_>],\n-) {\n+pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) {\n     // lint if caller of `.filter_map().map()` is an Iterator\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         let msg = \"called `filter_map(..).map(..)` on an `Iterator`\";\n         let hint = \"this is more succinctly expressed by only calling `.filter_map(..)` instead\";\n         span_lint_and_help(cx, FILTER_MAP, expr.span, msg, None, hint);"}, {"sha": "ba57abd16c9269046362c76242abeb54f16a3f05", "filename": "clippy_lints/src/methods/filter_map_next.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_map_next.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,8 +1,11 @@\n-use crate::utils::{match_trait_method, meets_msrv, paths, snippet, span_lint, span_lint_and_sugg};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n+use clippy_utils::source::snippet;\n+use clippy_utils::{is_trait_method, meets_msrv};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_semver::RustcVersion;\n+use rustc_span::sym;\n \n use super::FILTER_MAP_NEXT;\n \n@@ -14,7 +17,7 @@ pub(super) fn check<'tcx>(\n     filter_args: &'tcx [hir::Expr<'_>],\n     msrv: Option<&RustcVersion>,\n ) {\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         if !meets_msrv(msrv, &FILTER_MAP_NEXT_MSRV) {\n             return;\n         }"}, {"sha": "6cd24334414b4c33be2ee4867fddfe03649c216a", "filename": "clippy_lints/src/methods/filter_next.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Ffilter_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Ffilter_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffilter_next.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,14 +1,17 @@\n-use crate::utils::{match_trait_method, paths, snippet, span_lint, span_lint_and_sugg};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n+use clippy_utils::is_trait_method;\n+use clippy_utils::source::snippet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::FILTER_NEXT;\n \n /// lint use of `filter().next()` for `Iterators`\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, filter_args: &'tcx [hir::Expr<'_>]) {\n     // lint if caller of `.filter().next()` is an Iterator\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         let msg = \"called `filter(..).next()` on an `Iterator`. This is more succinctly expressed by calling \\\n                    `.find(..)` instead\";\n         let filter_snippet = snippet(cx, filter_args[1].span, \"..\");"}, {"sha": "034ea6c6562776dc6c5c071257ad2967783c7853", "filename": "clippy_lints/src/methods/flat_map_identity.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fflat_map_identity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fflat_map_identity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fflat_map_identity.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,9 +1,10 @@\n-use crate::utils::{match_qpath, match_trait_method, paths, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::{is_trait_method, match_qpath, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_span::source_map::Span;\n+use rustc_span::{source_map::Span, sym};\n \n use super::FLAT_MAP_IDENTITY;\n \n@@ -14,7 +15,7 @@ pub(super) fn check<'tcx>(\n     flat_map_args: &'tcx [hir::Expr<'_>],\n     flat_map_span: Span,\n ) {\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         let arg_node = &flat_map_args[1].kind;\n \n         let apply_lint = |message: &str| {"}, {"sha": "15cf567431387c3e0c57aefb9fac3679a174cd64", "filename": "clippy_lints/src/methods/from_iter_instead_of_collect.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Ffrom_iter_instead_of_collect.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,19 +1,24 @@\n-use crate::utils::{get_trait_def_id, implements_trait, paths, span_lint_and_sugg, sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::ty::implements_trait;\n+use clippy_utils::{get_trait_def_id, match_qpath, paths, sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n+use rustc_hir::ExprKind;\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::ty::Ty;\n+use rustc_span::sym;\n \n use super::FROM_ITER_INSTEAD_OF_COLLECT;\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n-    let ty = cx.typeck_results().expr_ty(expr);\n-    let arg_ty = cx.typeck_results().expr_ty(&args[0]);\n-\n+pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>], func_kind: &ExprKind<'_>) {\n     if_chain! {\n+        if let hir::ExprKind::Path(path) = func_kind;\n+        if match_qpath(path, &[\"from_iter\"]);\n+        let ty = cx.typeck_results().expr_ty(expr);\n+        let arg_ty = cx.typeck_results().expr_ty(&args[0]);\n         if let Some(from_iter_id) = get_trait_def_id(cx, &paths::FROM_ITERATOR);\n-        if let Some(iter_id) = get_trait_def_id(cx, &paths::ITERATOR);\n+        if let Some(iter_id) = cx.tcx.get_diagnostic_item(sym::Iterator);\n \n         if implements_trait(cx, ty, from_iter_id, &[]) && implements_trait(cx, arg_ty, iter_id, &[]);\n         then {"}, {"sha": "b3a9743c61475d6ddba26d563bfae6dbbcffa291", "filename": "clippy_lints/src/methods/get_unwrap.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fget_unwrap.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,8 @@\n-use crate::methods::derefs_to_slice;\n-use crate::utils::{\n-    get_parent_expr, is_type_diagnostic_item, match_type, paths, snippet_with_applicability, span_lint_and_sugg,\n-};\n+use super::utils::derefs_to_slice;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n+use clippy_utils::{get_parent_expr, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "04461ad5c3a6f245acf7e41e67c4dda91376c8f7", "filename": "clippy_lints/src/methods/implicit_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fimplicit_clone.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::span_lint_and_sugg;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "950ec62c9fe4f107199ae675cde17a98f7dfaa63", "filename": "clippy_lints/src/methods/inefficient_to_string.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finefficient_to_string.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,20 +1,24 @@\n-use super::INEFFICIENT_TO_STRING;\n-use crate::utils::{\n-    is_type_diagnostic_item, match_def_path, paths, snippet_with_applicability, span_lint_and_then, walk_ptrs_ty_depth,\n-};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::{is_type_diagnostic_item, walk_ptrs_ty_depth};\n+use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n-use rustc_span::sym;\n+use rustc_span::symbol::{sym, Symbol};\n+\n+use super::INEFFICIENT_TO_STRING;\n \n /// Checks for the `INEFFICIENT_TO_STRING` lint\n-pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, arg: &hir::Expr<'_>, arg_ty: Ty<'tcx>) {\n+pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, method_name: Symbol, args: &[hir::Expr<'_>]) {\n     if_chain! {\n+        if args.len() == 1 && method_name == sym!(to_string);\n         if let Some(to_string_meth_did) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if match_def_path(cx, to_string_meth_did, &paths::TO_STRING_METHOD);\n         if let Some(substs) = cx.typeck_results().node_substs_opt(expr.hir_id);\n+        let arg_ty = cx.typeck_results().expr_ty_adjusted(&args[0]);\n         let self_ty = substs.type_at(0);\n         let (deref_self_ty, deref_count) = walk_ptrs_ty_depth(self_ty);\n         if deref_count >= 1;\n@@ -31,7 +35,7 @@ pub fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, arg: &hir::Expr\n                         self_ty, deref_self_ty\n                     ));\n                     let mut applicability = Applicability::MachineApplicable;\n-                    let arg_snippet = snippet_with_applicability(cx, arg.span, \"..\", &mut applicability);\n+                    let arg_snippet = snippet_with_applicability(cx, args[0].span, \"..\", &mut applicability);\n                     diag.span_suggestion(\n                         expr.span,\n                         \"try dereferencing the receiver\","}, {"sha": "7fd3ef1a622a0b1a12453f9614096df53ee42b17", "filename": "clippy_lints/src/methods/inspect_for_each.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Finspect_for_each.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Finspect_for_each.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finspect_for_each.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,14 +1,14 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::is_trait_method;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_span::source_map::Span;\n-\n-use crate::utils::{match_trait_method, paths, span_lint_and_help};\n+use rustc_span::{source_map::Span, sym};\n \n use super::INSPECT_FOR_EACH;\n \n /// lint use of `inspect().for_each()` for `Iterators`\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, inspect_span: Span) {\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         let msg = \"called `inspect(..).for_each(..)` on an `Iterator`\";\n         let hint = \"move the code from `inspect(..)` to `for_each(..)` and remove the `inspect(..)`\";\n         span_lint_and_help("}, {"sha": "da13b4ba37a562f6c06d2e39714cb3a90a8e0278", "filename": "clippy_lints/src/methods/into_iter_on_ref.rs", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Finto_iter_on_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Finto_iter_on_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Finto_iter_on_ref.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,30 +1,43 @@\n-use crate::utils::{has_iter_method, match_trait_method, paths, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_trait_method;\n+use clippy_utils::ty::has_iter_method;\n+use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};\n use rustc_span::source_map::Span;\n-use rustc_span::symbol::Symbol;\n+use rustc_span::symbol::{sym, Symbol};\n \n use super::INTO_ITER_ON_REF;\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, self_ref_ty: Ty<'_>, method_span: Span) {\n-    if !match_trait_method(cx, expr, &paths::INTO_ITERATOR) {\n-        return;\n-    }\n-    if let Some((kind, method_name)) = ty_has_iter_method(cx, self_ref_ty) {\n-        span_lint_and_sugg(\n-            cx,\n-            INTO_ITER_ON_REF,\n-            method_span,\n-            &format!(\n-                \"this `.into_iter()` call is equivalent to `.{}()` and will not consume the `{}`\",\n-                method_name, kind,\n-            ),\n-            \"call directly\",\n-            method_name.to_string(),\n-            Applicability::MachineApplicable,\n-        );\n+pub(super) fn check(\n+    cx: &LateContext<'_>,\n+    expr: &hir::Expr<'_>,\n+    method_span: Span,\n+    method_name: Symbol,\n+    args: &[hir::Expr<'_>],\n+) {\n+    let self_ty = cx.typeck_results().expr_ty_adjusted(&args[0]);\n+    if_chain! {\n+        if let ty::Ref(..) = self_ty.kind();\n+        if method_name == sym::into_iter;\n+        if is_trait_method(cx, expr, sym::IntoIterator);\n+        if let Some((kind, method_name)) = ty_has_iter_method(cx, self_ty);\n+        then {\n+            span_lint_and_sugg(\n+                cx,\n+                INTO_ITER_ON_REF,\n+                method_span,\n+                &format!(\n+                    \"this `.into_iter()` call is equivalent to `.{}()` and will not consume the `{}`\",\n+                    method_name, kind,\n+                ),\n+                \"call directly\",\n+                method_name.to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        }\n     }\n }\n "}, {"sha": "848f47e39f6b48e1ae8e4eda297506f21f98aa96", "filename": "clippy_lints/src/methods/iter_cloned_collect.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fiter_cloned_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fiter_cloned_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_cloned_collect.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n-use crate::methods::derefs_to_slice;\n-use crate::utils::{is_type_diagnostic_item, span_lint_and_sugg};\n+use crate::methods::utils::derefs_to_slice;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "e394a8fe8195e6da741e818843ac79ae3653de09", "filename": "clippy_lints/src/methods/iter_count.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_count.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,8 @@\n-use crate::methods::derefs_to_slice;\n-use crate::utils::{is_type_diagnostic_item, match_type, paths, snippet_with_applicability, span_lint_and_sugg};\n-\n+use super::utils::derefs_to_slice;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::paths;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::{is_type_diagnostic_item, match_type};\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;"}, {"sha": "e9b37b6f2bd9360f715a0d5b8a7a4215546a8286", "filename": "clippy_lints/src/methods/iter_next_slice.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_next_slice.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,8 @@\n-use crate::methods::derefs_to_slice;\n-use crate::utils::{get_parent_expr, higher, is_type_diagnostic_item, snippet_with_applicability, span_lint_and_sugg};\n+use super::utils::derefs_to_slice;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{get_parent_expr, higher};\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_errors::Applicability;\n@@ -44,12 +47,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, ite\n                 );\n             }\n         }\n-    } else if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(caller_expr), sym::vec_type)\n-        || matches!(\n-            &cx.typeck_results().expr_ty(caller_expr).peel_refs().kind(),\n-            ty::Array(_, _)\n-        )\n-    {\n+    } else if is_vec_or_array(cx, caller_expr) {\n         // caller is a Vec or an Array\n         let mut applicability = Applicability::MachineApplicable;\n         span_lint_and_sugg(\n@@ -66,3 +64,8 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, ite\n         );\n     }\n }\n+\n+fn is_vec_or_array<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>) -> bool {\n+    is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(expr), sym::vec_type)\n+        || matches!(&cx.typeck_results().expr_ty(expr).peel_refs().kind(), ty::Array(_, _))\n+}"}, {"sha": "c46af427b3c67e1a3aed4245eddce33a010b8749", "filename": "clippy_lints/src/methods/iter_nth.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,7 @@\n-use crate::methods::derefs_to_slice;\n+use super::utils::derefs_to_slice;\n use crate::methods::iter_nth_zero;\n-use crate::utils::{is_type_diagnostic_item, span_lint_and_help};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;"}, {"sha": "a12f672739c7b6172eb164698b2cbb2f01987732", "filename": "clippy_lints/src/methods/iter_nth_zero.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_nth_zero.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,15 +1,18 @@\n use crate::consts::{constant, Constant};\n-use crate::utils::{match_trait_method, paths, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_trait_method;\n+use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::ITER_NTH_ZERO;\n \n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, nth_args: &'tcx [hir::Expr<'_>]) {\n     if_chain! {\n-        if match_trait_method(cx, expr, &paths::ITERATOR);\n+        if is_trait_method(cx, expr, sym::Iterator);\n         if let Some((Constant::Int(0), _)) = constant(cx, cx.typeck_results(), &nth_args[1]);\n         then {\n             let mut applicability = Applicability::MachineApplicable;"}, {"sha": "b1d398876d3a5ebda1c57599363bf5b048a0d4f9", "filename": "clippy_lints/src/methods/iter_skip_next.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiter_skip_next.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,22 +1,24 @@\n-use crate::utils::{match_trait_method, paths, snippet, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_trait_method;\n+use clippy_utils::source::snippet;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::ITER_SKIP_NEXT;\n \n pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, skip_args: &[hir::Expr<'_>]) {\n     // lint if caller of skip is an Iterator\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         if let [caller, n] = skip_args {\n-            let hint = format!(\".nth({})\", snippet(cx, n.span, \"..\"));\n             span_lint_and_sugg(\n                 cx,\n                 ITER_SKIP_NEXT,\n                 expr.span.trim_start(caller.span).unwrap(),\n                 \"called `skip(..).next()` on an iterator\",\n                 \"use `nth` instead\",\n-                hint,\n+                format!(\".nth({})\", snippet(cx, n.span, \"..\")),\n                 Applicability::MachineApplicable,\n             );\n         }"}, {"sha": "3baa580314f337d98d1e947ea7fba25bcd0989d1", "filename": "clippy_lints/src/methods/iterator_step_by_zero.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fiterator_step_by_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fiterator_step_by_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fiterator_step_by_zero.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,12 +1,14 @@\n use crate::consts::{constant, Constant};\n-use crate::utils::{match_trait_method, paths, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::is_trait_method;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::ITERATOR_STEP_BY_ZERO;\n \n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, args: &'tcx [hir::Expr<'_>]) {\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         if let Some((Constant::Int(0), _)) = constant(cx, cx.typeck_results(), &args[1]) {\n             span_lint(\n                 cx,"}, {"sha": "f16699322d13d7ba104f2710706f9ce94bfabb91", "filename": "clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{match_qpath, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::match_qpath;\n+use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_errors::Applicability;"}, {"sha": "e4402b2da21752eba48d5fb0aa5723c0fc674286", "filename": "clippy_lints/src/methods/map_collect_result_unit.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fmap_collect_result_unit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fmap_collect_result_unit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_collect_result_unit.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,7 @@\n-use crate::utils::{is_type_diagnostic_item, match_trait_method, paths, snippet, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_trait_method;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -17,7 +20,7 @@ pub(super) fn check(\n     if_chain! {\n         // called on Iterator\n         if let [map_expr] = collect_args;\n-        if match_trait_method(cx, map_expr, &paths::ITERATOR);\n+        if is_trait_method(cx, map_expr, sym::Iterator);\n         // return of collect `Result<(),_>`\n         let collect_ret_ty = cx.typeck_results().expr_ty(expr);\n         if is_type_diagnostic_item(cx, collect_ret_ty, sym::result_type);"}, {"sha": "4bc52b036a8d41e797a851720d023c6827aba92c", "filename": "clippy_lints/src/methods/map_flatten.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_flatten.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,7 @@\n-use crate::utils::{is_type_diagnostic_item, match_trait_method, paths, snippet, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_trait_method;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -10,7 +13,7 @@ use super::MAP_FLATTEN;\n /// lint use of `map().flatten()` for `Iterators` and 'Options'\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, map_args: &'tcx [hir::Expr<'_>]) {\n     // lint if caller of `.map().flatten()` is an Iterator\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         let map_closure_ty = cx.typeck_results().expr_ty(&map_args[1]);\n         let is_map_to_option = match map_closure_ty.kind() {\n             ty::Closure(_, _) | ty::FnDef(_, _) | ty::FnPtr(_) => {"}, {"sha": "deb4b4492b5d104461be56a42312a64f74bfba6e", "filename": "clippy_lints/src/methods/map_unwrap_or.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmap_unwrap_or.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,8 @@\n-use crate::utils::usage::mutated_variables;\n-use crate::utils::{is_type_diagnostic_item, meets_msrv, snippet, span_lint, span_lint_and_sugg};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n+use clippy_utils::meets_msrv;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::usage::mutated_variables;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "fccdee078778e523e3ce3af6fa78dca9b366a46f", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 119, "deletions": 267, "changes": 386, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,11 @@\n mod bind_instead_of_map;\n mod bytes_nth;\n+mod chars_cmp;\n+mod chars_cmp_with_unwrap;\n+mod chars_last_cmp;\n+mod chars_last_cmp_with_unwrap;\n+mod chars_next_cmp;\n+mod chars_next_cmp_with_unwrap;\n mod clone_on_copy;\n mod clone_on_ref_ptr;\n mod expect_fun_call;\n@@ -36,6 +42,7 @@ mod option_map_or_none;\n mod option_map_unwrap_or;\n mod or_fun_call;\n mod search_is_some;\n+mod single_char_add_str;\n mod single_char_insert_string;\n mod single_char_pattern;\n mod single_char_push_string;\n@@ -48,29 +55,26 @@ mod unnecessary_fold;\n mod unnecessary_lazy_eval;\n mod unwrap_used;\n mod useless_asref;\n+mod utils;\n mod wrong_self_convention;\n mod zst_offset;\n \n use bind_instead_of_map::BindInsteadOfMap;\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n+use clippy_utils::ty::{contains_adt_constructor, contains_ty, implements_trait, is_copy, is_type_diagnostic_item};\n+use clippy_utils::{contains_return, get_trait_def_id, in_macro, iter_input_pats, method_calls, paths, return_ty};\n use if_chain::if_chain;\n-use rustc_ast::ast;\n-use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_hir::{TraitItem, TraitItemKind};\n-use rustc_lint::{LateContext, LateLintPass, Lint, LintContext};\n+use rustc_hir::def::Res;\n+use rustc_hir::{PrimTy, QPath, TraitItem, TraitItemKind};\n+use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, TraitRef, Ty, TyS};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::{sym, SymbolStr};\n use rustc_typeck::hir_ty_to_ty;\n \n-use crate::utils::{\n-    contains_return, contains_ty, get_trait_def_id, implements_trait, in_macro, is_copy, is_type_diagnostic_item,\n-    iter_input_pats, match_def_path, match_qpath, method_calls, method_chain_args, paths, return_ty,\n-    single_segment_path, snippet_with_applicability, span_lint, span_lint_and_help, span_lint_and_sugg, SpanlessEq,\n-};\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for `.unwrap()` calls on `Option`s and on `Result`s.\n     ///\n@@ -191,13 +195,18 @@ declare_clippy_lint! {\n     /// **What it does:** Checks for methods with certain name prefixes and which\n     /// doesn't match how self is taken. The actual rules are:\n     ///\n-    /// |Prefix |`self` taken          |\n-    /// |-------|----------------------|\n-    /// |`as_`  |`&self` or `&mut self`|\n-    /// |`from_`| none                 |\n-    /// |`into_`|`self`                |\n-    /// |`is_`  |`&self` or none       |\n-    /// |`to_`  |`&self`               |\n+    /// |Prefix |Postfix     |`self` taken           | `self` type  |\n+    /// |-------|------------|-----------------------|--------------|\n+    /// |`as_`  | none       |`&self` or `&mut self` | any          |\n+    /// |`from_`| none       | none                  | any          |\n+    /// |`into_`| none       |`self`                 | any          |\n+    /// |`is_`  | none       |`&self` or none        | any          |\n+    /// |`to_`  | `_mut`     |`&mut self`            | any          |\n+    /// |`to_`  | not `_mut` |`self`                 | `Copy`       |\n+    /// |`to_`  | not `_mut` |`&self`                | not `Copy`   |\n+    ///\n+    /// Please find more info here:\n+    /// https://rust-lang.github.io/api-guidelines/naming.html#ad-hoc-conversions-follow-as_-to_-into_-conventions-c-conv\n     ///\n     /// **Why is this bad?** Consistency breeds readability. If you follow the\n     /// conventions, your users won't be surprised that they, e.g., need to supply a\n@@ -582,26 +591,31 @@ declare_clippy_lint! {\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for an iterator or string search (such as `find()`,\n-    /// `position()`, or `rposition()`) followed by a call to `is_some()`.\n+    /// `position()`, or `rposition()`) followed by a call to `is_some()` or `is_none()`.\n     ///\n-    /// **Why is this bad?** Readability, this can be written more concisely as\n-    /// `_.any(_)` or `_.contains(_)`.\n+    /// **Why is this bad?** Readability, this can be written more concisely as:\n+    /// * `_.any(_)`, or `_.contains(_)` for `is_some()`,\n+    /// * `!_.any(_)`, or `!_.contains(_)` for `is_none()`.\n     ///\n     /// **Known problems:** None.\n     ///\n     /// **Example:**\n     /// ```rust\n-    /// # let vec = vec![1];\n+    /// let vec = vec![1];\n     /// vec.iter().find(|x| **x == 0).is_some();\n+    ///\n+    /// let _ = \"hello world\".find(\"world\").is_none();\n     /// ```\n     /// Could be written as\n     /// ```rust\n-    /// # let vec = vec![1];\n+    /// let vec = vec![1];\n     /// vec.iter().any(|x| *x == 0);\n+    ///\n+    /// let _ = !\"hello world\".contains(\"world\");\n     /// ```\n     pub SEARCH_IS_SOME,\n     complexity,\n-    \"using an iterator or string search followed by `is_some()`, which is more succinctly expressed as a call to `any()` or `contains()`\"\n+    \"using an iterator or string search followed by `is_some()` or `is_none()`, which is more succinctly expressed as a call to `any()` or `contains()` (with negation in case of `is_none()`)\"\n }\n \n declare_clippy_lint! {\n@@ -1707,19 +1721,49 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             [\"next\", \"skip_while\"] => skip_while_next::check(cx, expr, arg_lists[1]),\n             [\"next\", \"iter\"] => iter_next_slice::check(cx, expr, arg_lists[1]),\n             [\"map\", \"filter\"] => filter_map::check(cx, expr, false),\n-            [\"map\", \"filter_map\"] => filter_map_map::check(cx, expr, arg_lists[1], arg_lists[0]),\n+            [\"map\", \"filter_map\"] => filter_map_map::check(cx, expr),\n             [\"next\", \"filter_map\"] => filter_map_next::check(cx, expr, arg_lists[1], self.msrv.as_ref()),\n             [\"map\", \"find\"] => filter_map::check(cx, expr, true),\n-            [\"flat_map\", \"filter\"] => filter_flat_map::check(cx, expr, arg_lists[1], arg_lists[0]),\n-            [\"flat_map\", \"filter_map\"] => filter_map_flat_map::check(cx, expr, arg_lists[1], arg_lists[0]),\n+            [\"flat_map\", \"filter\"] => filter_flat_map::check(cx, expr),\n+            [\"flat_map\", \"filter_map\"] => filter_map_flat_map::check(cx, expr),\n             [\"flat_map\", ..] => flat_map_identity::check(cx, expr, arg_lists[0], method_spans[0]),\n             [\"flatten\", \"map\"] => map_flatten::check(cx, expr, arg_lists[1]),\n-            [\"is_some\", \"find\"] => search_is_some::check(cx, expr, \"find\", arg_lists[1], arg_lists[0], method_spans[1]),\n-            [\"is_some\", \"position\"] => {\n-                search_is_some::check(cx, expr, \"position\", arg_lists[1], arg_lists[0], method_spans[1])\n+            [option_check_method, \"find\"] if \"is_some\" == *option_check_method || \"is_none\" == *option_check_method => {\n+                search_is_some::check(\n+                    cx,\n+                    expr,\n+                    \"find\",\n+                    option_check_method,\n+                    arg_lists[1],\n+                    arg_lists[0],\n+                    method_spans[1],\n+                )\n             },\n-            [\"is_some\", \"rposition\"] => {\n-                search_is_some::check(cx, expr, \"rposition\", arg_lists[1], arg_lists[0], method_spans[1])\n+            [option_check_method, \"position\"]\n+                if \"is_some\" == *option_check_method || \"is_none\" == *option_check_method =>\n+            {\n+                search_is_some::check(\n+                    cx,\n+                    expr,\n+                    \"position\",\n+                    option_check_method,\n+                    arg_lists[1],\n+                    arg_lists[0],\n+                    method_spans[1],\n+                )\n+            },\n+            [option_check_method, \"rposition\"]\n+                if \"is_some\" == *option_check_method || \"is_none\" == *option_check_method =>\n+            {\n+                search_is_some::check(\n+                    cx,\n+                    expr,\n+                    \"rposition\",\n+                    option_check_method,\n+                    arg_lists[1],\n+                    arg_lists[0],\n+                    method_spans[1],\n+                )\n             },\n             [\"extend\", ..] => string_extend_chars::check(cx, expr, arg_lists[0]),\n             [\"count\", \"into_iter\"] => iter_count::check(cx, expr, &arg_lists[1], \"into_iter\"),\n@@ -1739,7 +1783,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 unnecessary_filter_map::check(cx, expr, arg_lists[0]);\n                 filter_map_identity::check(cx, expr, arg_lists[0], method_spans[0]);\n             },\n-            [\"count\", \"map\"] => suspicious_map::check(cx, expr),\n+            [\"count\", \"map\"] => suspicious_map::check(cx, expr, arg_lists[1], arg_lists[0]),\n             [\"assume_init\"] => uninit_assumed_init::check(cx, &arg_lists[0][0], expr),\n             [\"unwrap_or\", arith @ (\"checked_add\" | \"checked_sub\" | \"checked_mul\")] => {\n                 manual_saturating_arithmetic::check(cx, expr, &arg_lists, &arith[\"checked_\".len()..])\n@@ -1768,46 +1812,17 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n \n         match expr.kind {\n             hir::ExprKind::Call(ref func, ref args) => {\n-                if let hir::ExprKind::Path(path) = &func.kind {\n-                    if match_qpath(path, &[\"from_iter\"]) {\n-                        from_iter_instead_of_collect::check(cx, expr, args);\n-                    }\n-                }\n+                from_iter_instead_of_collect::check(cx, expr, args, &func.kind);\n             },\n             hir::ExprKind::MethodCall(ref method_call, ref method_span, ref args, _) => {\n                 or_fun_call::check(cx, expr, *method_span, &method_call.ident.as_str(), args);\n                 expect_fun_call::check(cx, expr, *method_span, &method_call.ident.as_str(), args);\n-\n-                let self_ty = cx.typeck_results().expr_ty_adjusted(&args[0]);\n-                if args.len() == 1 && method_call.ident.name == sym::clone {\n-                    clone_on_copy::check(cx, expr, &args[0], self_ty);\n-                    clone_on_ref_ptr::check(cx, expr, &args[0]);\n-                }\n-                if args.len() == 1 && method_call.ident.name == sym!(to_string) {\n-                    inefficient_to_string::check(cx, expr, &args[0], self_ty);\n-                }\n-\n-                if let Some(fn_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n-                    if match_def_path(cx, fn_def_id, &paths::PUSH_STR) {\n-                        single_char_push_string::check(cx, expr, args);\n-                    } else if match_def_path(cx, fn_def_id, &paths::INSERT_STR) {\n-                        single_char_insert_string::check(cx, expr, args);\n-                    }\n-                }\n-\n-                match self_ty.kind() {\n-                    ty::Ref(_, ty, _) if *ty.kind() == ty::Str => {\n-                        for &(method, pos) in &PATTERN_METHODS {\n-                            if method_call.ident.name.as_str() == method && args.len() > pos {\n-                                single_char_pattern::check(cx, expr, &args[pos]);\n-                            }\n-                        }\n-                    },\n-                    ty::Ref(..) if method_call.ident.name == sym::into_iter => {\n-                        into_iter_on_ref::check(cx, expr, self_ty, *method_span);\n-                    },\n-                    _ => (),\n-                }\n+                clone_on_copy::check(cx, expr, method_call.ident.name, args);\n+                clone_on_ref_ptr::check(cx, expr, method_call.ident.name, args);\n+                inefficient_to_string::check(cx, expr, method_call.ident.name, args);\n+                single_char_add_str::check(cx, expr, args);\n+                into_iter_on_ref::check(cx, expr, *method_span, method_call.ident.name, args);\n+                single_char_pattern::check(cx, expr, method_call.ident.name, args);\n             },\n             hir::ExprKind::Binary(op, ref lhs, ref rhs)\n                 if op.node == hir::BinOpKind::Eq || op.node == hir::BinOpKind::Ne =>\n@@ -1834,10 +1849,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         let item = cx.tcx.hir().expect_item(parent);\n         let self_ty = cx.tcx.type_of(item.def_id);\n \n-        // if this impl block implements a trait, lint in trait definition instead\n-        if let hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = item.kind {\n-            return;\n-        }\n+        let implements_trait = matches!(item.kind, hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }));\n \n         if_chain! {\n             if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind;\n@@ -1852,12 +1864,13 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let Some(first_arg_ty) = first_arg_ty;\n \n             then {\n-                if cx.access_levels.is_exported(impl_item.hir_id()) {\n+                // if this impl block implements a trait, lint in trait definition instead\n+                if !implements_trait && cx.access_levels.is_exported(impl_item.hir_id()) {\n                     // check missing trait implementations\n                     for method_config in &TRAIT_METHODS {\n                         if name == method_config.method_name &&\n                             sig.decl.inputs.len() == method_config.param_count &&\n-                            method_config.output_type.matches(cx, &sig.decl.output) &&\n+                            method_config.output_type.matches(&sig.decl.output) &&\n                             method_config.self_kind.matches(cx, self_ty, first_arg_ty) &&\n                             fn_header_equals(method_config.fn_header, sig.header) &&\n                             method_config.lifetime_param_cond(&impl_item)\n@@ -1888,16 +1901,26 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     item.vis.node.is_pub(),\n                     self_ty,\n                     first_arg_ty,\n-                    first_arg.pat.span\n+                    first_arg.pat.span,\n+                    false\n                 );\n             }\n         }\n \n+        // if this impl block implements a trait, lint in trait definition instead\n+        if implements_trait {\n+            return;\n+        }\n+\n         if let hir::ImplItemKind::Fn(_, _) = impl_item.kind {\n             let ret_ty = return_ty(cx, impl_item.hir_id());\n \n             // walk the return type and check for Self (this does not check associated types)\n-            if contains_ty(ret_ty, self_ty) {\n+            if let Some(self_adt) = self_ty.ty_adt_def() {\n+                if contains_adt_constructor(ret_ty, self_adt) {\n+                    return;\n+                }\n+            } else if contains_ty(ret_ty, self_ty) {\n                 return;\n             }\n \n@@ -1907,7 +1930,11 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                 for &(predicate, _span) in cx.tcx.explicit_item_bounds(def_id) {\n                     if let ty::PredicateKind::Projection(projection_predicate) = predicate.kind().skip_binder() {\n                         // walk the associated type and check for Self\n-                        if contains_ty(projection_predicate.ty, self_ty) {\n+                        if let Some(self_adt) = self_ty.ty_adt_def() {\n+                            if contains_adt_constructor(projection_predicate.ty, self_adt) {\n+                                return;\n+                            }\n+                        } else if contains_ty(projection_predicate.ty, self_ty) {\n                             return;\n                         }\n                     }\n@@ -1944,7 +1971,8 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n                     false,\n                     self_ty,\n                     first_arg_ty,\n-                    first_arg_span\n+                    first_arg_span,\n+                    true\n                 );\n             }\n         }\n@@ -1969,47 +1997,6 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n \n     extract_msrv_attr!(LateContext);\n }\n-\n-fn derefs_to_slice<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    expr: &'tcx hir::Expr<'tcx>,\n-    ty: Ty<'tcx>,\n-) -> Option<&'tcx hir::Expr<'tcx>> {\n-    fn may_slice<'a>(cx: &LateContext<'a>, ty: Ty<'a>) -> bool {\n-        match ty.kind() {\n-            ty::Slice(_) => true,\n-            ty::Adt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n-            ty::Adt(..) => is_type_diagnostic_item(cx, ty, sym::vec_type),\n-            ty::Array(_, size) => size\n-                .try_eval_usize(cx.tcx, cx.param_env)\n-                .map_or(false, |size| size < 32),\n-            ty::Ref(_, inner, _) => may_slice(cx, inner),\n-            _ => false,\n-        }\n-    }\n-\n-    if let hir::ExprKind::MethodCall(ref path, _, ref args, _) = expr.kind {\n-        if path.ident.name == sym::iter && may_slice(cx, cx.typeck_results().expr_ty(&args[0])) {\n-            Some(&args[0])\n-        } else {\n-            None\n-        }\n-    } else {\n-        match ty.kind() {\n-            ty::Slice(_) => Some(expr),\n-            ty::Adt(def, _) if def.is_box() && may_slice(cx, ty.boxed_ty()) => Some(expr),\n-            ty::Ref(_, inner, _) => {\n-                if may_slice(cx, inner) {\n-                    Some(expr)\n-                } else {\n-                    None\n-                }\n-            },\n-            _ => None,\n-        }\n-    }\n-}\n-\n /// Used for `lint_binary_expr_with_method_call`.\n #[derive(Copy, Clone)]\n struct BinaryExprInfo<'a> {\n@@ -2022,7 +2009,7 @@ struct BinaryExprInfo<'a> {\n /// Checks for the `CHARS_NEXT_CMP` and `CHARS_LAST_CMP` lints.\n fn lint_binary_expr_with_method_call(cx: &LateContext<'_>, info: &mut BinaryExprInfo<'_>) {\n     macro_rules! lint_with_both_lhs_and_rhs {\n-        ($func:ident, $cx:expr, $info:ident) => {\n+        ($func:expr, $cx:expr, $info:ident) => {\n             if !$func($cx, $info) {\n                 ::std::mem::swap(&mut $info.chain, &mut $info.other);\n                 if $func($cx, $info) {\n@@ -2032,145 +2019,10 @@ fn lint_binary_expr_with_method_call(cx: &LateContext<'_>, info: &mut BinaryExpr\n         };\n     }\n \n-    lint_with_both_lhs_and_rhs!(lint_chars_next_cmp, cx, info);\n-    lint_with_both_lhs_and_rhs!(lint_chars_last_cmp, cx, info);\n-    lint_with_both_lhs_and_rhs!(lint_chars_next_cmp_with_unwrap, cx, info);\n-    lint_with_both_lhs_and_rhs!(lint_chars_last_cmp_with_unwrap, cx, info);\n-}\n-\n-/// Wrapper fn for `CHARS_NEXT_CMP` and `CHARS_LAST_CMP` lints.\n-fn lint_chars_cmp(\n-    cx: &LateContext<'_>,\n-    info: &BinaryExprInfo<'_>,\n-    chain_methods: &[&str],\n-    lint: &'static Lint,\n-    suggest: &str,\n-) -> bool {\n-    if_chain! {\n-        if let Some(args) = method_chain_args(info.chain, chain_methods);\n-        if let hir::ExprKind::Call(ref fun, ref arg_char) = info.other.kind;\n-        if arg_char.len() == 1;\n-        if let hir::ExprKind::Path(ref qpath) = fun.kind;\n-        if let Some(segment) = single_segment_path(qpath);\n-        if segment.ident.name == sym::Some;\n-        then {\n-            let mut applicability = Applicability::MachineApplicable;\n-            let self_ty = cx.typeck_results().expr_ty_adjusted(&args[0][0]).peel_refs();\n-\n-            if *self_ty.kind() != ty::Str {\n-                return false;\n-            }\n-\n-            span_lint_and_sugg(\n-                cx,\n-                lint,\n-                info.expr.span,\n-                &format!(\"you should use the `{}` method\", suggest),\n-                \"like this\",\n-                format!(\"{}{}.{}({})\",\n-                        if info.eq { \"\" } else { \"!\" },\n-                        snippet_with_applicability(cx, args[0][0].span, \"..\", &mut applicability),\n-                        suggest,\n-                        snippet_with_applicability(cx, arg_char[0].span, \"..\", &mut applicability)),\n-                applicability,\n-            );\n-\n-            return true;\n-        }\n-    }\n-\n-    false\n-}\n-\n-/// Checks for the `CHARS_NEXT_CMP` lint.\n-fn lint_chars_next_cmp<'tcx>(cx: &LateContext<'tcx>, info: &BinaryExprInfo<'_>) -> bool {\n-    lint_chars_cmp(cx, info, &[\"chars\", \"next\"], CHARS_NEXT_CMP, \"starts_with\")\n-}\n-\n-/// Checks for the `CHARS_LAST_CMP` lint.\n-fn lint_chars_last_cmp<'tcx>(cx: &LateContext<'tcx>, info: &BinaryExprInfo<'_>) -> bool {\n-    if lint_chars_cmp(cx, info, &[\"chars\", \"last\"], CHARS_LAST_CMP, \"ends_with\") {\n-        true\n-    } else {\n-        lint_chars_cmp(cx, info, &[\"chars\", \"next_back\"], CHARS_LAST_CMP, \"ends_with\")\n-    }\n-}\n-\n-/// Wrapper fn for `CHARS_NEXT_CMP` and `CHARS_LAST_CMP` lints with `unwrap()`.\n-fn lint_chars_cmp_with_unwrap<'tcx>(\n-    cx: &LateContext<'tcx>,\n-    info: &BinaryExprInfo<'_>,\n-    chain_methods: &[&str],\n-    lint: &'static Lint,\n-    suggest: &str,\n-) -> bool {\n-    if_chain! {\n-        if let Some(args) = method_chain_args(info.chain, chain_methods);\n-        if let hir::ExprKind::Lit(ref lit) = info.other.kind;\n-        if let ast::LitKind::Char(c) = lit.node;\n-        then {\n-            let mut applicability = Applicability::MachineApplicable;\n-            span_lint_and_sugg(\n-                cx,\n-                lint,\n-                info.expr.span,\n-                &format!(\"you should use the `{}` method\", suggest),\n-                \"like this\",\n-                format!(\"{}{}.{}('{}')\",\n-                        if info.eq { \"\" } else { \"!\" },\n-                        snippet_with_applicability(cx, args[0][0].span, \"..\", &mut applicability),\n-                        suggest,\n-                        c),\n-                applicability,\n-            );\n-\n-            true\n-        } else {\n-            false\n-        }\n-    }\n-}\n-\n-/// Checks for the `CHARS_NEXT_CMP` lint with `unwrap()`.\n-fn lint_chars_next_cmp_with_unwrap<'tcx>(cx: &LateContext<'tcx>, info: &BinaryExprInfo<'_>) -> bool {\n-    lint_chars_cmp_with_unwrap(cx, info, &[\"chars\", \"next\", \"unwrap\"], CHARS_NEXT_CMP, \"starts_with\")\n-}\n-\n-/// Checks for the `CHARS_LAST_CMP` lint with `unwrap()`.\n-fn lint_chars_last_cmp_with_unwrap<'tcx>(cx: &LateContext<'tcx>, info: &BinaryExprInfo<'_>) -> bool {\n-    if lint_chars_cmp_with_unwrap(cx, info, &[\"chars\", \"last\", \"unwrap\"], CHARS_LAST_CMP, \"ends_with\") {\n-        true\n-    } else {\n-        lint_chars_cmp_with_unwrap(cx, info, &[\"chars\", \"next_back\", \"unwrap\"], CHARS_LAST_CMP, \"ends_with\")\n-    }\n-}\n-\n-fn get_hint_if_single_char_arg(\n-    cx: &LateContext<'_>,\n-    arg: &hir::Expr<'_>,\n-    applicability: &mut Applicability,\n-) -> Option<String> {\n-    if_chain! {\n-        if let hir::ExprKind::Lit(lit) = &arg.kind;\n-        if let ast::LitKind::Str(r, style) = lit.node;\n-        let string = r.as_str();\n-        if string.chars().count() == 1;\n-        then {\n-            let snip = snippet_with_applicability(cx, arg.span, &string, applicability);\n-            let ch = if let ast::StrStyle::Raw(nhash) = style {\n-                let nhash = nhash as usize;\n-                // for raw string: r##\"a\"##\n-                &snip[(nhash + 2)..(snip.len() - 1 - nhash)]\n-            } else {\n-                // for regular string: \"a\"\n-                &snip[1..(snip.len() - 1)]\n-            };\n-            let hint = format!(\"'{}'\", if ch == \"'\" { \"\\\\'\" } else { ch });\n-            Some(hint)\n-        } else {\n-            None\n-        }\n-    }\n+    lint_with_both_lhs_and_rhs!(chars_next_cmp::check, cx, info);\n+    lint_with_both_lhs_and_rhs!(chars_last_cmp::check, cx, info);\n+    lint_with_both_lhs_and_rhs!(chars_next_cmp_with_unwrap::check, cx, info);\n+    lint_with_both_lhs_and_rhs!(chars_last_cmp_with_unwrap::check, cx, info);\n }\n \n const FN_HEADER: hir::FnHeader = hir::FnHeader {\n@@ -2336,10 +2188,10 @@ impl SelfKind {\n     #[must_use]\n     fn description(self) -> &'static str {\n         match self {\n-            Self::Value => \"self by value\",\n-            Self::Ref => \"self by reference\",\n-            Self::RefMut => \"self by mutable reference\",\n-            Self::No => \"no self\",\n+            Self::Value => \"`self` by value\",\n+            Self::Ref => \"`self` by reference\",\n+            Self::RefMut => \"`self` by mutable reference\",\n+            Self::No => \"no `self`\",\n         }\n     }\n }\n@@ -2353,8 +2205,8 @@ enum OutType {\n }\n \n impl OutType {\n-    fn matches(self, cx: &LateContext<'_>, ty: &hir::FnRetTy<'_>) -> bool {\n-        let is_unit = |ty: &hir::Ty<'_>| SpanlessEq::new(cx).eq_ty_kind(&ty.kind, &hir::TyKind::Tup(&[]));\n+    fn matches(self, ty: &hir::FnRetTy<'_>) -> bool {\n+        let is_unit = |ty: &hir::Ty<'_>| matches!(ty.kind, hir::TyKind::Tup(&[]));\n         match (self, ty) {\n             (Self::Unit, &hir::FnRetTy::DefaultReturn(_)) => true,\n             (Self::Unit, &hir::FnRetTy::Return(ref ty)) if is_unit(ty) => true,\n@@ -2367,8 +2219,8 @@ impl OutType {\n }\n \n fn is_bool(ty: &hir::Ty<'_>) -> bool {\n-    if let hir::TyKind::Path(ref p) = ty.kind {\n-        match_qpath(p, &[\"bool\"])\n+    if let hir::TyKind::Path(QPath::Resolved(_, path)) = ty.kind {\n+        matches!(path.res, Res::PrimTy(PrimTy::Bool))\n     } else {\n         false\n     }"}, {"sha": "e6ce9cac39729ec8383052f2fb0572ee027eb459", "filename": "clippy_lints/src/methods/ok_expect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fok_expect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fok_expect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fok_expect.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{implements_trait, is_type_diagnostic_item, span_lint_and_help};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "d11ede080dc8d8aac522a6c5a3a4d568d324e2ca", "filename": "clippy_lints/src/methods/option_as_ref_deref.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_as_ref_deref.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,7 @@\n-use crate::utils::{\n-    is_type_diagnostic_item, match_def_path, meets_msrv, path_to_local_id, paths, remove_blocks, snippet,\n-    span_lint_and_sugg,\n-};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{match_def_path, meets_msrv, path_to_local_id, paths, remove_blocks};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "d93db2c22e4c98f5b2f6ff81a27e2f2baaa54c85", "filename": "clippy_lints/src/methods/option_map_or_none.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_or_none.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,7 @@\n-use crate::utils::{is_type_diagnostic_item, match_qpath, paths, snippet, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{match_qpath, paths};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "e252abc177a2e6993fd45582ef4ce42f68d1061d", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,8 @@\n-use crate::utils::{differing_macro_contexts, snippet_with_applicability, span_lint_and_then};\n-use crate::utils::{is_copy, is_type_diagnostic_item};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::differing_macro_contexts;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::is_copy;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_path, NestedVisitorMap, Visitor};"}, {"sha": "89dedc5f0d80715d1d5db376d78fcd869e8f7067", "filename": "clippy_lints/src/methods/or_fun_call.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2For_fun_call.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,11 +1,12 @@\n-use crate::utils::eager_or_lazy::is_lazyness_candidate;\n-use crate::utils::{\n-    contains_return, get_trait_def_id, implements_trait, is_type_diagnostic_item, last_path_segment, match_type, paths,\n-    snippet, snippet_with_applicability, snippet_with_macro_callsite, span_lint_and_sugg,\n-};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::eager_or_lazy::is_lazyness_candidate;\n+use clippy_utils::source::{snippet, snippet_with_applicability, snippet_with_macro_callsite};\n+use clippy_utils::ty::{implements_trait, is_type_diagnostic_item, match_type};\n+use clippy_utils::{contains_return, get_trait_def_id, last_path_segment, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n+use rustc_hir::{BlockCheckMode, UnsafeSource};\n use rustc_lint::LateContext;\n use rustc_middle::ty;\n use rustc_span::source_map::Span;\n@@ -90,7 +91,7 @@ pub(super) fn check<'tcx>(\n                 let ty = cx.typeck_results().expr_ty(&args[0]).peel_refs();\n \n                 match ty.kind() {\n-                    ty::Slice(_) | ty::Array(_, _) => return,\n+                    ty::Slice(_) | ty::Array(_, _) | ty::Str => return,\n                     _ => (),\n                 }\n \n@@ -167,7 +168,16 @@ pub(super) fn check<'tcx>(\n             hir::ExprKind::Index(..) | hir::ExprKind::MethodCall(..) => {\n                 check_general_case(cx, name, method_span, &args[0], &args[1], expr.span, None);\n             },\n-            _ => {},\n+            hir::ExprKind::Block(block, _) => {\n+                if let BlockCheckMode::UnsafeBlock(UnsafeSource::UserProvided) = block.rules {\n+                    if let Some(block_expr) = block.expr {\n+                        if let hir::ExprKind::MethodCall(..) = block_expr.kind {\n+                            check_general_case(cx, name, method_span, &args[0], &args[1], expr.span, None);\n+                        }\n+                    }\n+                }\n+            },\n+            _ => (),\n         }\n     }\n }"}, {"sha": "de7d168295fb90907a8e1af1d1dd6cdb1271fd45", "filename": "clippy_lints/src/methods/search_is_some.rs", "status": "modified", "additions": 83, "deletions": 34, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsearch_is_some.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,7 @@\n-use crate::utils::{\n-    is_type_diagnostic_item, match_trait_method, paths, snippet, snippet_with_applicability, span_lint_and_help,\n-    span_lint_and_sugg, strip_pat_refs,\n-};\n+use clippy_utils::diagnostics::{span_lint_and_help, span_lint_and_sugg};\n+use clippy_utils::source::{snippet, snippet_with_applicability};\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{is_trait_method, strip_pat_refs};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -14,22 +14,23 @@ use rustc_span::symbol::sym;\n use super::SEARCH_IS_SOME;\n \n /// lint searching an Iterator followed by `is_some()`\n-/// or calling `find()` on a string followed by `is_some()`\n+/// or calling `find()` on a string followed by `is_some()` or `is_none()`\n+#[allow(clippy::too_many_lines)]\n pub(super) fn check<'tcx>(\n     cx: &LateContext<'tcx>,\n     expr: &'tcx hir::Expr<'_>,\n     search_method: &str,\n+    option_check_method: &str,\n     search_args: &'tcx [hir::Expr<'_>],\n     is_some_args: &'tcx [hir::Expr<'_>],\n     method_span: Span,\n ) {\n     // lint if caller of search is an Iterator\n-    if match_trait_method(cx, &is_some_args[0], &paths::ITERATOR) {\n+    if is_trait_method(cx, &is_some_args[0], sym::Iterator) {\n         let msg = format!(\n-            \"called `is_some()` after searching an `Iterator` with `{}`\",\n-            search_method\n+            \"called `{}()` after searching an `Iterator` with `{}`\",\n+            option_check_method, search_method\n         );\n-        let hint = \"this is more succinctly expressed by calling `any()`\";\n         let search_snippet = snippet(cx, search_args[1].span, \"..\");\n         if search_snippet.lines().count() <= 1 {\n             // suggest `any(|x| ..)` instead of `any(|&x| ..)` for `find(|&x| ..).is_some()`\n@@ -53,20 +54,49 @@ pub(super) fn check<'tcx>(\n                 }\n             };\n             // add note if not multi-line\n-            span_lint_and_sugg(\n-                cx,\n-                SEARCH_IS_SOME,\n-                method_span.with_hi(expr.span.hi()),\n-                &msg,\n-                \"use `any()` instead\",\n-                format!(\n-                    \"any({})\",\n-                    any_search_snippet.as_ref().map_or(&*search_snippet, String::as_str)\n-                ),\n-                Applicability::MachineApplicable,\n-            );\n+            match option_check_method {\n+                \"is_some\" => {\n+                    span_lint_and_sugg(\n+                        cx,\n+                        SEARCH_IS_SOME,\n+                        method_span.with_hi(expr.span.hi()),\n+                        &msg,\n+                        \"use `any()` instead\",\n+                        format!(\n+                            \"any({})\",\n+                            any_search_snippet.as_ref().map_or(&*search_snippet, String::as_str)\n+                        ),\n+                        Applicability::MachineApplicable,\n+                    );\n+                },\n+                \"is_none\" => {\n+                    let iter = snippet(cx, search_args[0].span, \"..\");\n+                    span_lint_and_sugg(\n+                        cx,\n+                        SEARCH_IS_SOME,\n+                        expr.span,\n+                        &msg,\n+                        \"use `!_.any()` instead\",\n+                        format!(\n+                            \"!{}.any({})\",\n+                            iter,\n+                            any_search_snippet.as_ref().map_or(&*search_snippet, String::as_str)\n+                        ),\n+                        Applicability::MachineApplicable,\n+                    );\n+                },\n+                _ => (),\n+            }\n         } else {\n-            span_lint_and_help(cx, SEARCH_IS_SOME, expr.span, &msg, None, hint);\n+            let hint = format!(\n+                \"this is more succinctly expressed by calling `any()`{}\",\n+                if option_check_method == \"is_none\" {\n+                    \" with negation\"\n+                } else {\n+                    \"\"\n+                }\n+            );\n+            span_lint_and_help(cx, SEARCH_IS_SOME, expr.span, &msg, None, &hint);\n         }\n     }\n     // lint if `find()` is called by `String` or `&str`\n@@ -83,18 +113,37 @@ pub(super) fn check<'tcx>(\n             if is_string_or_str_slice(&search_args[0]);\n             if is_string_or_str_slice(&search_args[1]);\n             then {\n-                let msg = \"called `is_some()` after calling `find()` on a string\";\n-                let mut applicability = Applicability::MachineApplicable;\n-                let find_arg = snippet_with_applicability(cx, search_args[1].span, \"..\", &mut applicability);\n-                span_lint_and_sugg(\n-                    cx,\n-                    SEARCH_IS_SOME,\n-                    method_span.with_hi(expr.span.hi()),\n-                    msg,\n-                    \"use `contains()` instead\",\n-                    format!(\"contains({})\", find_arg),\n-                    applicability,\n-                );\n+                let msg = format!(\"called `{}()` after calling `find()` on a string\", option_check_method);\n+                match option_check_method {\n+                    \"is_some\" => {\n+                        let mut applicability = Applicability::MachineApplicable;\n+                        let find_arg = snippet_with_applicability(cx, search_args[1].span, \"..\", &mut applicability);\n+                        span_lint_and_sugg(\n+                            cx,\n+                            SEARCH_IS_SOME,\n+                            method_span.with_hi(expr.span.hi()),\n+                            &msg,\n+                            \"use `contains()` instead\",\n+                            format!(\"contains({})\", find_arg),\n+                            applicability,\n+                        );\n+                    },\n+                    \"is_none\" => {\n+                        let string = snippet(cx, search_args[0].span, \"..\");\n+                        let mut applicability = Applicability::MachineApplicable;\n+                        let find_arg = snippet_with_applicability(cx, search_args[1].span, \"..\", &mut applicability);\n+                        span_lint_and_sugg(\n+                            cx,\n+                            SEARCH_IS_SOME,\n+                            expr.span,\n+                            &msg,\n+                            \"use `!_.contains()` instead\",\n+                            format!(\"!{}.contains({})\", string, find_arg),\n+                            applicability,\n+                        );\n+                    },\n+                    _ => (),\n+                }\n             }\n         }\n     }"}, {"sha": "9a5fabcf7cd5064e9ef86af014f83882ae6e5d09", "filename": "clippy_lints/src/methods/single_char_add_str.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_add_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_add_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_add_str.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -0,0 +1,14 @@\n+use crate::methods::{single_char_insert_string, single_char_push_string};\n+use clippy_utils::{match_def_path, paths};\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n+    if let Some(fn_def_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id) {\n+        if match_def_path(cx, fn_def_id, &paths::PUSH_STR) {\n+            single_char_push_string::check(cx, expr, args);\n+        } else if match_def_path(cx, fn_def_id, &paths::INSERT_STR) {\n+            single_char_insert_string::check(cx, expr, args);\n+        }\n+    }\n+}"}, {"sha": "6cdc954c03be15ea38f0f15e587104e09ea61a78", "filename": "clippy_lints/src/methods/single_char_insert_string.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_insert_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_insert_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_insert_string.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n-use crate::methods::get_hint_if_single_char_arg;\n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use super::utils::get_hint_if_single_char_arg;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "f4090c7c617d4499c07cc79b6c3bcd5030f43ef4", "filename": "clippy_lints/src/methods/single_char_pattern.rs", "status": "modified", "additions": 26, "deletions": 14, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_pattern.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,23 +1,35 @@\n-use crate::methods::get_hint_if_single_char_arg;\n-use crate::utils::span_lint_and_sugg;\n+use super::utils::get_hint_if_single_char_arg;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_middle::ty;\n+use rustc_span::symbol::Symbol;\n \n use super::SINGLE_CHAR_PATTERN;\n \n /// lint for length-1 `str`s for methods in `PATTERN_METHODS`\n-pub(super) fn check(cx: &LateContext<'_>, _expr: &hir::Expr<'_>, arg: &hir::Expr<'_>) {\n-    let mut applicability = Applicability::MachineApplicable;\n-    if let Some(hint) = get_hint_if_single_char_arg(cx, arg, &mut applicability) {\n-        span_lint_and_sugg(\n-            cx,\n-            SINGLE_CHAR_PATTERN,\n-            arg.span,\n-            \"single-character string constant used as pattern\",\n-            \"try using a `char` instead\",\n-            hint,\n-            applicability,\n-        );\n+pub(super) fn check(cx: &LateContext<'_>, _expr: &hir::Expr<'_>, method_name: Symbol, args: &[hir::Expr<'_>]) {\n+    for &(method, pos) in &crate::methods::PATTERN_METHODS {\n+        if_chain! {\n+            if let ty::Ref(_, ty, _) = cx.typeck_results().expr_ty_adjusted(&args[0]).kind();\n+            if *ty.kind() == ty::Str;\n+            if method_name.as_str() == method && args.len() > pos;\n+            let arg = &args[pos];\n+            let mut applicability = Applicability::MachineApplicable;\n+            if let Some(hint) = get_hint_if_single_char_arg(cx, arg, &mut applicability);\n+            then {\n+                span_lint_and_sugg(\n+                    cx,\n+                    SINGLE_CHAR_PATTERN,\n+                    arg.span,\n+                    \"single-character string constant used as pattern\",\n+                    \"try using a `char` instead\",\n+                    hint,\n+                    applicability,\n+                );\n+            }\n+        }\n     }\n }"}, {"sha": "0237d39cbdb4e767eecba43e99d478dfffd021bb", "filename": "clippy_lints/src/methods/single_char_push_string.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_push_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_push_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsingle_char_push_string.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n-use crate::methods::get_hint_if_single_char_arg;\n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use super::utils::get_hint_if_single_char_arg;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "3db83785b591e21c012cc355f9ffb21ea3cba161", "filename": "clippy_lints/src/methods/skip_while_next.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fskip_while_next.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fskip_while_next.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fskip_while_next.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,13 +1,15 @@\n-use crate::utils::{match_trait_method, paths, span_lint_and_help};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::is_trait_method;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::SKIP_WHILE_NEXT;\n \n /// lint use of `skip_while().next()` for `Iterators`\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, _skip_while_args: &'tcx [hir::Expr<'_>]) {\n     // lint if caller of `.skip_while().next()` is an Iterator\n-    if match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if is_trait_method(cx, expr, sym::Iterator) {\n         span_lint_and_help(\n             cx,\n             SKIP_WHILE_NEXT,"}, {"sha": "5c688ac56211ea45d380206e8f62d7d3adf62272", "filename": "clippy_lints/src/methods/string_extend_chars.rs", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstring_extend_chars.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,7 @@\n-use crate::utils::{is_type_diagnostic_item, method_chain_args, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::method_chain_args;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n@@ -9,34 +12,35 @@ use super::STRING_EXTEND_CHARS;\n \n pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n     let obj_ty = cx.typeck_results().expr_ty(&args[0]).peel_refs();\n-    if is_type_diagnostic_item(cx, obj_ty, sym::string_type) {\n-        let arg = &args[1];\n-        if let Some(arglists) = method_chain_args(arg, &[\"chars\"]) {\n-            let target = &arglists[0][0];\n-            let self_ty = cx.typeck_results().expr_ty(target).peel_refs();\n-            let ref_str = if *self_ty.kind() == ty::Str {\n-                \"\"\n-            } else if is_type_diagnostic_item(cx, self_ty, sym::string_type) {\n-                \"&\"\n-            } else {\n-                return;\n-            };\n+    if !is_type_diagnostic_item(cx, obj_ty, sym::string_type) {\n+        return;\n+    }\n+    let arg = &args[1];\n+    if let Some(arglists) = method_chain_args(arg, &[\"chars\"]) {\n+        let target = &arglists[0][0];\n+        let self_ty = cx.typeck_results().expr_ty(target).peel_refs();\n+        let ref_str = if *self_ty.kind() == ty::Str {\n+            \"\"\n+        } else if is_type_diagnostic_item(cx, self_ty, sym::string_type) {\n+            \"&\"\n+        } else {\n+            return;\n+        };\n \n-            let mut applicability = Applicability::MachineApplicable;\n-            span_lint_and_sugg(\n-                cx,\n-                STRING_EXTEND_CHARS,\n-                expr.span,\n-                \"calling `.extend(_.chars())`\",\n-                \"try this\",\n-                format!(\n-                    \"{}.push_str({}{})\",\n-                    snippet_with_applicability(cx, args[0].span, \"..\", &mut applicability),\n-                    ref_str,\n-                    snippet_with_applicability(cx, target.span, \"..\", &mut applicability)\n-                ),\n-                applicability,\n-            );\n-        }\n+        let mut applicability = Applicability::MachineApplicable;\n+        span_lint_and_sugg(\n+            cx,\n+            STRING_EXTEND_CHARS,\n+            expr.span,\n+            \"calling `.extend(_.chars())`\",\n+            \"try this\",\n+            format!(\n+                \"{}.push_str({}{})\",\n+                snippet_with_applicability(cx, args[0].span, \"..\", &mut applicability),\n+                ref_str,\n+                snippet_with_applicability(cx, target.span, \"..\", &mut applicability)\n+            ),\n+            applicability,\n+        );\n     }\n }"}, {"sha": "7015bd54c35dd71fa823199e9697bf18908753a3", "filename": "clippy_lints/src/methods/suspicious_map.rs", "status": "modified", "additions": 36, "deletions": 10, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fsuspicious_map.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,16 +1,42 @@\n-use crate::utils::span_lint_and_help;\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::usage::mutated_variables;\n+use clippy_utils::{expr_or_init, is_trait_method};\n+use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n+use rustc_span::sym;\n \n use super::SUSPICIOUS_MAP;\n \n-pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>) {\n-    span_lint_and_help(\n-        cx,\n-        SUSPICIOUS_MAP,\n-        expr.span,\n-        \"this call to `map()` won't have an effect on the call to `count()`\",\n-        None,\n-        \"make sure you did not confuse `map` with `filter` or `for_each`\",\n-    );\n+pub fn check<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &hir::Expr<'_>,\n+    map_args: &[hir::Expr<'_>],\n+    count_args: &[hir::Expr<'_>],\n+) {\n+    if_chain! {\n+        if let [count_recv] = count_args;\n+        if let [_, map_arg] = map_args;\n+        if is_trait_method(cx, count_recv, sym::Iterator);\n+        let closure = expr_or_init(cx, map_arg);\n+        if let Some(body_id) = cx.tcx.hir().maybe_body_owned_by(closure.hir_id);\n+        let closure_body = cx.tcx.hir().body(body_id);\n+        if !cx.typeck_results().expr_ty(&closure_body.value).is_unit();\n+        then {\n+            if let Some(map_mutated_vars) = mutated_variables(&closure_body.value, cx) {\n+                // A variable is used mutably inside of the closure. Suppress the lint.\n+                if !map_mutated_vars.is_empty() {\n+                    return;\n+                }\n+            }\n+            span_lint_and_help(\n+                cx,\n+                SUSPICIOUS_MAP,\n+                expr.span,\n+                \"this call to `map()` won't have an effect on the call to `count()`\",\n+                None,\n+                \"make sure you did not confuse `map` with `filter` or `for_each`\",\n+            );\n+        }\n+    }\n }"}, {"sha": "f2f6ef4be6cfd46d003f803fd91c9fbf0fd21f4f", "filename": "clippy_lints/src/methods/uninit_assumed_init.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Funinit_assumed_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Funinit_assumed_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funinit_assumed_init.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{match_def_path, match_qpath, paths, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{match_def_path, match_qpath, paths};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "48d905ab8330a7fb9f8fb00df03b28b40b8e31b5", "filename": "clippy_lints/src/methods/unnecessary_filter_map.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_filter_map.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,16 +1,17 @@\n-use crate::utils::usage::mutated_variables;\n-use crate::utils::{match_qpath, match_trait_method, path_to_local_id, paths, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::usage::mutated_variables;\n+use clippy_utils::{is_trait_method, match_qpath, path_to_local_id, paths};\n+use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n-\n-use if_chain::if_chain;\n+use rustc_span::sym;\n \n use super::UNNECESSARY_FILTER_MAP;\n \n pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir::Expr<'_>]) {\n-    if !match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if !is_trait_method(cx, expr, sym::Iterator) {\n         return;\n     }\n "}, {"sha": "1268fd4bda99c6292405f1123fcbd342273d7bf2", "filename": "clippy_lints/src/methods/unnecessary_fold.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_fold.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,14 +1,13 @@\n-use crate::utils::{\n-    match_trait_method, path_to_local_id, paths, remove_blocks, snippet_with_applicability, span_lint_and_sugg,\n-    strip_pat_refs,\n-};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{is_trait_method, path_to_local_id, remove_blocks, strip_pat_refs};\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_hir::PatKind;\n use rustc_lint::LateContext;\n-use rustc_span::source_map::Span;\n+use rustc_span::{source_map::Span, sym};\n \n use super::UNNECESSARY_FOLD;\n \n@@ -71,7 +70,7 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, fold_args: &[hir\n     }\n \n     // Check that this is a call to Iterator::fold rather than just some function called fold\n-    if !match_trait_method(cx, expr, &paths::ITERATOR) {\n+    if !is_trait_method(cx, expr, sym::Iterator) {\n         return;\n     }\n "}, {"sha": "a86185bf0a6c3205e7fead0757c6e456b13fbdee", "filename": "clippy_lints/src/methods/unnecessary_lazy_eval.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funnecessary_lazy_eval.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,7 @@\n-use crate::utils::{eager_or_lazy, usage};\n-use crate::utils::{is_type_diagnostic_item, snippet, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{eager_or_lazy, usage};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "2f5806115bd5a55005c89a512f376f087a8c5c9c", "filename": "clippy_lints/src/methods/unwrap_used.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_type_diagnostic_item, span_lint_and_help};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_span::sym;"}, {"sha": "b5505af0f7ee59181a33461113d48e6d766959c4", "filename": "clippy_lints/src/methods/useless_asref.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fuseless_asref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fuseless_asref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fuseless_asref.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,7 @@\n-use crate::utils::{\n-    get_parent_expr, match_trait_method, paths, snippet_with_applicability, span_lint_and_sugg, walk_ptrs_ty_depth,\n-};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::walk_ptrs_ty_depth;\n+use clippy_utils::{get_parent_expr, match_trait_method, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "ac6b55396da7de6de4e025c416fe677a15b442fe", "filename": "clippy_lints/src/methods/utils.rs", "status": "added", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Futils.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -0,0 +1,77 @@\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use if_chain::if_chain;\n+use rustc_ast::ast;\n+use rustc_errors::Applicability;\n+use rustc_hir as hir;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::{self, Ty};\n+use rustc_span::symbol::sym;\n+\n+pub(super) fn derefs_to_slice<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    expr: &'tcx hir::Expr<'tcx>,\n+    ty: Ty<'tcx>,\n+) -> Option<&'tcx hir::Expr<'tcx>> {\n+    fn may_slice<'a>(cx: &LateContext<'a>, ty: Ty<'a>) -> bool {\n+        match ty.kind() {\n+            ty::Slice(_) => true,\n+            ty::Adt(def, _) if def.is_box() => may_slice(cx, ty.boxed_ty()),\n+            ty::Adt(..) => is_type_diagnostic_item(cx, ty, sym::vec_type),\n+            ty::Array(_, size) => size\n+                .try_eval_usize(cx.tcx, cx.param_env)\n+                .map_or(false, |size| size < 32),\n+            ty::Ref(_, inner, _) => may_slice(cx, inner),\n+            _ => false,\n+        }\n+    }\n+\n+    if let hir::ExprKind::MethodCall(ref path, _, ref args, _) = expr.kind {\n+        if path.ident.name == sym::iter && may_slice(cx, cx.typeck_results().expr_ty(&args[0])) {\n+            Some(&args[0])\n+        } else {\n+            None\n+        }\n+    } else {\n+        match ty.kind() {\n+            ty::Slice(_) => Some(expr),\n+            ty::Adt(def, _) if def.is_box() && may_slice(cx, ty.boxed_ty()) => Some(expr),\n+            ty::Ref(_, inner, _) => {\n+                if may_slice(cx, inner) {\n+                    Some(expr)\n+                } else {\n+                    None\n+                }\n+            },\n+            _ => None,\n+        }\n+    }\n+}\n+\n+pub(super) fn get_hint_if_single_char_arg(\n+    cx: &LateContext<'_>,\n+    arg: &hir::Expr<'_>,\n+    applicability: &mut Applicability,\n+) -> Option<String> {\n+    if_chain! {\n+        if let hir::ExprKind::Lit(lit) = &arg.kind;\n+        if let ast::LitKind::Str(r, style) = lit.node;\n+        let string = r.as_str();\n+        if string.chars().count() == 1;\n+        then {\n+            let snip = snippet_with_applicability(cx, arg.span, &string, applicability);\n+            let ch = if let ast::StrStyle::Raw(nhash) = style {\n+                let nhash = nhash as usize;\n+                // for raw string: r##\"a\"##\n+                &snip[(nhash + 2)..(snip.len() - 1 - nhash)]\n+            } else {\n+                // for regular string: \"a\"\n+                &snip[1..(snip.len() - 1)]\n+            };\n+            let hint = format!(\"'{}'\", if ch == \"'\" { \"\\\\'\" } else { ch });\n+            Some(hint)\n+        } else {\n+            None\n+        }\n+    }\n+}"}, {"sha": "59e683aa9a786fb18f732ad80ebffd9ab4e7aaa6", "filename": "clippy_lints/src/methods/wrong_self_convention.rs", "status": "modified", "additions": 75, "deletions": 16, "changes": 91, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fwrong_self_convention.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n use crate::methods::SelfKind;\n-use crate::utils::span_lint;\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::ty::is_copy;\n use rustc_lint::LateContext;\n use rustc_middle::ty::TyS;\n use rustc_span::source_map::Span;\n@@ -9,35 +10,58 @@ use super::WRONG_PUB_SELF_CONVENTION;\n use super::WRONG_SELF_CONVENTION;\n \n #[rustfmt::skip]\n-const CONVENTIONS: [(Convention, &[SelfKind]); 7] = [\n-    (Convention::Eq(\"new\"), &[SelfKind::No]),\n-    (Convention::StartsWith(\"as_\"), &[SelfKind::Ref, SelfKind::RefMut]),\n-    (Convention::StartsWith(\"from_\"), &[SelfKind::No]),\n-    (Convention::StartsWith(\"into_\"), &[SelfKind::Value]),\n-    (Convention::StartsWith(\"is_\"), &[SelfKind::Ref, SelfKind::No]),\n-    (Convention::Eq(\"to_mut\"), &[SelfKind::RefMut]),\n-    (Convention::StartsWith(\"to_\"), &[SelfKind::Ref]),\n+const CONVENTIONS: [(&[Convention], &[SelfKind]); 9] = [\n+    (&[Convention::Eq(\"new\")], &[SelfKind::No]),\n+    (&[Convention::StartsWith(\"as_\")], &[SelfKind::Ref, SelfKind::RefMut]),\n+    (&[Convention::StartsWith(\"from_\")], &[SelfKind::No]),\n+    (&[Convention::StartsWith(\"into_\")], &[SelfKind::Value]),\n+    (&[Convention::StartsWith(\"is_\")], &[SelfKind::Ref, SelfKind::No]),\n+    (&[Convention::Eq(\"to_mut\")], &[SelfKind::RefMut]),\n+    (&[Convention::StartsWith(\"to_\"), Convention::EndsWith(\"_mut\")], &[SelfKind::RefMut]),\n+\n+    // Conversion using `to_` can use borrowed (non-Copy types) or owned (Copy types).\n+    // Source: https://rust-lang.github.io/api-guidelines/naming.html#ad-hoc-conversions-follow-as_-to_-into_-conventions-c-conv\n+    (&[Convention::StartsWith(\"to_\"), Convention::NotEndsWith(\"_mut\"), Convention::IsSelfTypeCopy(false), Convention::ImplementsTrait(false)], &[SelfKind::Ref]),\n+    (&[Convention::StartsWith(\"to_\"), Convention::NotEndsWith(\"_mut\"), Convention::IsSelfTypeCopy(true), Convention::ImplementsTrait(false)], &[SelfKind::Value]),\n ];\n+\n enum Convention {\n     Eq(&'static str),\n     StartsWith(&'static str),\n+    EndsWith(&'static str),\n+    NotEndsWith(&'static str),\n+    IsSelfTypeCopy(bool),\n+    ImplementsTrait(bool),\n }\n \n impl Convention {\n     #[must_use]\n-    fn check(&self, other: &str) -> bool {\n+    fn check<'tcx>(&self, cx: &LateContext<'tcx>, self_ty: &'tcx TyS<'tcx>, other: &str, is_trait_def: bool) -> bool {\n         match *self {\n             Self::Eq(this) => this == other,\n             Self::StartsWith(this) => other.starts_with(this) && this != other,\n+            Self::EndsWith(this) => other.ends_with(this) && this != other,\n+            Self::NotEndsWith(this) => !Self::EndsWith(this).check(cx, self_ty, other, is_trait_def),\n+            Self::IsSelfTypeCopy(is_true) => is_true == is_copy(cx, self_ty),\n+            Self::ImplementsTrait(is_true) => is_true == is_trait_def,\n         }\n     }\n }\n \n impl fmt::Display for Convention {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {\n         match *self {\n-            Self::Eq(this) => this.fmt(f),\n-            Self::StartsWith(this) => this.fmt(f).and_then(|_| '*'.fmt(f)),\n+            Self::Eq(this) => format!(\"`{}`\", this).fmt(f),\n+            Self::StartsWith(this) => format!(\"`{}*`\", this).fmt(f),\n+            Self::EndsWith(this) => format!(\"`*{}`\", this).fmt(f),\n+            Self::NotEndsWith(this) => format!(\"`~{}`\", this).fmt(f),\n+            Self::IsSelfTypeCopy(is_true) => {\n+                format!(\"`self` type is{} `Copy`\", if is_true { \"\" } else { \" not\" }).fmt(f)\n+            },\n+            Self::ImplementsTrait(is_true) => {\n+                let (negation, s_suffix) = if is_true { (\"\", \"s\") } else { (\" does not\", \"\") };\n+                format!(\"Method{} implement{} a trait\", negation, s_suffix).fmt(f)\n+            },\n         }\n     }\n }\n@@ -49,27 +73,62 @@ pub(super) fn check<'tcx>(\n     self_ty: &'tcx TyS<'tcx>,\n     first_arg_ty: &'tcx TyS<'tcx>,\n     first_arg_span: Span,\n+    is_trait_item: bool,\n ) {\n     let lint = if is_pub {\n         WRONG_PUB_SELF_CONVENTION\n     } else {\n         WRONG_SELF_CONVENTION\n     };\n-    if let Some((ref conv, self_kinds)) = &CONVENTIONS.iter().find(|(ref conv, _)| conv.check(item_name)) {\n+    if let Some((conventions, self_kinds)) = &CONVENTIONS.iter().find(|(convs, _)| {\n+        convs\n+            .iter()\n+            .all(|conv| conv.check(cx, self_ty, item_name, is_trait_item))\n+    }) {\n         if !self_kinds.iter().any(|k| k.matches(cx, self_ty, first_arg_ty)) {\n-            span_lint(\n+            let suggestion = {\n+                if conventions.len() > 1 {\n+                    // Don't mention `NotEndsWith` when there is also `StartsWith` convention present\n+                    let cut_ends_with_conv = conventions.iter().any(|conv| matches!(conv, Convention::StartsWith(_)))\n+                        && conventions\n+                            .iter()\n+                            .any(|conv| matches!(conv, Convention::NotEndsWith(_)));\n+\n+                    let s = conventions\n+                        .iter()\n+                        .filter_map(|conv| {\n+                            if (cut_ends_with_conv && matches!(conv, Convention::NotEndsWith(_)))\n+                                || matches!(conv, Convention::ImplementsTrait(_))\n+                            {\n+                                None\n+                            } else {\n+                                Some(conv.to_string())\n+                            }\n+                        })\n+                        .collect::<Vec<_>>()\n+                        .join(\" and \");\n+\n+                    format!(\"methods with the following characteristics: ({})\", &s)\n+                } else {\n+                    format!(\"methods called {}\", &conventions[0])\n+                }\n+            };\n+\n+            span_lint_and_help(\n                 cx,\n                 lint,\n                 first_arg_span,\n                 &format!(\n-                    \"methods called `{}` usually take {}; consider choosing a less ambiguous name\",\n-                    conv,\n+                    \"{} usually take {}\",\n+                    suggestion,\n                     &self_kinds\n                         .iter()\n                         .map(|k| k.description())\n                         .collect::<Vec<_>>()\n                         .join(\" or \")\n                 ),\n+                None,\n+                \"consider choosing a less ambiguous name\",\n             );\n         }\n     }"}, {"sha": "9f6a7c4db1736bb8ccf64749a23f1a8314741365", "filename": "clippy_lints/src/methods/zst_offset.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fzst_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmethods%2Fzst_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fzst_offset.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::span_lint;\n+use clippy_utils::diagnostics::span_lint;\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_lint::LateContext;"}, {"sha": "776f4c7b7413d90c62b6ddfb3937e914b51358cf", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n use crate::consts::{constant_simple, Constant};\n-use crate::utils::{match_def_path, match_trait_method, paths, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{match_def_path, match_trait_method, paths};\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "026ea50936a4a1520a23a7f4e3ceccd87d66ddfb", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,3 +1,6 @@\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then, span_lint_hir_and_then};\n+use clippy_utils::source::{snippet, snippet_opt};\n+use clippy_utils::ty::implements_trait;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n@@ -15,11 +18,10 @@ use rustc_span::source_map::{ExpnKind, Span};\n use rustc_span::symbol::sym;\n \n use crate::consts::{constant, Constant};\n-use crate::utils::sugg::Sugg;\n-use crate::utils::{\n-    get_item_name, get_parent_expr, higher, implements_trait, in_constant, is_diagnostic_assoc_item, is_integer_const,\n-    iter_input_pats, last_path_segment, match_qpath, snippet, snippet_opt, span_lint, span_lint_and_sugg,\n-    span_lint_and_then, span_lint_hir_and_then, unsext, SpanlessEq,\n+use clippy_utils::sugg::Sugg;\n+use clippy_utils::{\n+    get_item_name, get_parent_expr, higher, in_constant, is_diagnostic_assoc_item, is_integer_const, iter_input_pats,\n+    last_path_segment, match_qpath, unsext, SpanlessEq,\n };\n \n declare_clippy_lint! {"}, {"sha": "3c6a7071c24a7e62cab0d4b2b49c7564e6ee57a3", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{snippet_opt, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::source::snippet_opt;\n use rustc_ast::ast::{\n     BindingMode, Expr, ExprKind, GenericParamKind, Generics, Lit, LitFloatType, LitIntType, LitKind, Mutability,\n     NodeId, Pat, PatKind, UnOp,"}, {"sha": "23554669d9774f030744697859e29a820fd005de", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,7 @@\n-use crate::utils::qualify_min_const_fn::is_min_const_fn;\n-use crate::utils::{\n-    fn_has_unsatisfiable_preds, has_drop, is_entrypoint_fn, meets_msrv, span_lint, trait_ref_of_method,\n-};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::qualify_min_const_fn::is_min_const_fn;\n+use clippy_utils::ty::has_drop;\n+use clippy_utils::{fn_has_unsatisfiable_preds, is_entrypoint_fn, meets_msrv, trait_ref_of_method};\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{Body, Constness, FnDecl, GenericParamKind, HirId};"}, {"sha": "ff87828c2e777811450bca1be835d91e46e435ef", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -5,7 +5,7 @@\n // [`missing_doc`]: https://github.com/rust-lang/rust/blob/cf9cf7c923eb01146971429044f216a3ca905e06/compiler/rustc_lint/src/builtin.rs#L415\n //\n \n-use crate::utils::span_lint;\n+use clippy_utils::diagnostics::span_lint;\n use if_chain::if_chain;\n use rustc_ast::ast::{self, MetaItem, MetaItemKind};\n use rustc_ast::attr;"}, {"sha": "dd4488f3f026128e75c66ea22e215579bb0b75d4", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::span_lint;\n+use clippy_utils::diagnostics::span_lint;\n use rustc_ast::ast;\n use rustc_hir as hir;\n use rustc_lint::{self, LateContext, LateLintPass, LintContext};"}, {"sha": "6a52de4f713644f965009ae3fd31bf77ad7232ee", "filename": "clippy_lints/src/modulo_arithmetic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmodulo_arithmetic.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n use crate::consts::{constant, Constant};\n-use crate::utils::{sext, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::sext;\n use if_chain::if_chain;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "584daa5e11992a17921f4252592051ff8e598524", "filename": "clippy_lints/src/multiple_crate_versions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmultiple_crate_versions.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,7 @@\n //! lint on multiple versions of a crate being used\n \n-use crate::utils::{run_lints, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::run_lints;\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::{Crate, CRATE_HIR_ID};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "41bd07bcf1ea2fd2523a790792d2183762b67da1", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{match_def_path, paths, span_lint, trait_ref_of_method};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{match_def_path, paths, trait_ref_of_method};\n use rustc_hir as hir;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::TypeFoldable;"}, {"sha": "ef33e41a5fa9e6ca3c46413b1eabb5a81574537a", "filename": "clippy_lints/src/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mut.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{higher, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::higher;\n use rustc_hir as hir;\n use rustc_hir::intravisit;\n use rustc_lint::{LateContext, LateLintPass, LintContext};"}, {"sha": "b9ba74c7d025284db2d7091c1f204b87e22e757f", "filename": "clippy_lints/src/mut_mutex_lock.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_mutex_lock.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_type_diagnostic_item, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, Mutability};"}, {"sha": "0c09ddb80733d3ee7a16ce53e0afaee323535c25", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::span_lint;\n+use clippy_utils::diagnostics::span_lint;\n use rustc_hir::{BorrowKind, Expr, ExprKind, Mutability};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::subst::Subst;"}, {"sha": "7dfe12cd4ebc07a8ffce24664536c3cc87ad4807", "filename": "clippy_lints/src/mutable_debug_assertion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutable_debug_assertion.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{higher, is_direct_expn_of, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{higher, is_direct_expn_of};\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n use rustc_hir::{BorrowKind, Expr, ExprKind, MatchSource, Mutability};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "354e2c3fb7480548465e2c1597b0f2b03620a4f9", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -2,7 +2,8 @@\n //!\n //! This lint is **warn** by default\n \n-use crate::utils::{is_type_diagnostic_item, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use rustc_hir::Expr;\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty::{self, Ty};"}, {"sha": "3e2b2782ed5ffc2c04e2dd21846fe49759ebc7ac", "filename": "clippy_lints/src/needless_arbitrary_self_type.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_arbitrary_self_type.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{in_macro, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::in_macro;\n use if_chain::if_chain;\n use rustc_ast::ast::{BindingMode, Lifetime, Mutability, Param, PatKind, Path, TyKind};\n use rustc_errors::Applicability;"}, {"sha": "db7b3423ad9df3d20f7437c8cf299112b83fa369", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -2,8 +2,10 @@\n //!\n //! This lint is **warn** by default\n \n-use crate::utils::sugg::Sugg;\n-use crate::utils::{is_expn_of, parent_node_is_if_expr, snippet_with_applicability, span_lint, span_lint_and_sugg};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::sugg::Sugg;\n+use clippy_utils::{is_expn_of, parent_node_is_if_expr};\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Block, Expr, ExprKind, StmtKind, UnOp};"}, {"sha": "79d84da2dfc09c8af7686a9c592872729e7413e1", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -2,7 +2,9 @@\n //!\n //! This lint is **warn** by default\n \n-use crate::utils::{is_automatically_derived, snippet_opt, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::is_automatically_derived;\n+use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BindingAnnotation, BorrowKind, Expr, ExprKind, Item, Mutability, Pat, PatKind};"}, {"sha": "7fbffe04a3f5a1b38d9514307b8aed26dccc6c5a", "filename": "clippy_lints/src/needless_borrowed_ref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrowed_ref.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{snippet_with_applicability, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BindingAnnotation, Mutability, Node, Pat, PatKind};"}, {"sha": "91c97ef7c2a404dbfd319132454950180416bf11", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -33,14 +33,14 @@\n //! ```\n //!\n //! This lint is **warn** by default.\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::source::{indent_of, snippet, snippet_block};\n use rustc_ast::ast;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::{original_sp, DUMMY_SP};\n use rustc_span::Span;\n \n-use crate::utils::{indent_of, snippet, snippet_block, span_lint_and_help};\n-\n declare_clippy_lint! {\n     /// **What it does:** The lint checks for `if`-statements appearing in loops\n     /// that contain a `continue` statement in either their main blocks or their"}, {"sha": "e70c248e87bea066b31200ca2829f764f5b10548", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,8 +1,8 @@\n-use crate::utils::ptr::get_spans;\n-use crate::utils::{\n-    get_trait_def_id, implements_trait, is_copy, is_self, is_type_diagnostic_item, multispan_sugg, paths, snippet,\n-    snippet_opt, span_lint_and_then,\n-};\n+use clippy_utils::diagnostics::{multispan_sugg, span_lint_and_then};\n+use clippy_utils::ptr::get_spans;\n+use clippy_utils::source::{snippet, snippet_opt};\n+use clippy_utils::ty::{implements_trait, is_copy, is_type_diagnostic_item};\n+use clippy_utils::{get_trait_def_id, is_self, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -335,5 +335,5 @@ impl<'tcx> euv::Delegate<'tcx> for MovedVariablesCtxt {\n \n     fn mutate(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: HirId) {}\n \n-    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) { }\n+    fn fake_read(&mut self, _: rustc_typeck::expr_use_visitor::Place<'tcx>, _: FakeReadCause, _: HirId) {}\n }"}, {"sha": "9852633b7342e48b8448d0c8228b2f9a3189581b", "filename": "clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 19, "deletions": 12, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,13 +1,15 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{differing_macro_contexts, is_ok_ctor, is_some_ctor, meets_msrv};\n+use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Body, Expr, ExprKind, LangItem, MatchSource, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_semver::RustcVersion;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n \n-use crate::utils;\n-use if_chain::if_chain;\n-\n declare_clippy_lint! {\n     /// **What it does:**\n     /// Suggests alternatives for useless applications of `?` in terminating expressions\n@@ -138,13 +140,13 @@ fn emit_lint(cx: &LateContext<'_>, expr: &SomeOkCall<'_>) {\n         SomeOkCall::OkCall(outer, inner) | SomeOkCall::SomeCall(outer, inner) => (outer, inner),\n     };\n \n-    utils::span_lint_and_sugg(\n+    span_lint_and_sugg(\n         cx,\n         NEEDLESS_QUESTION_MARK,\n         entire_expr.span,\n         \"question mark operator is useless here\",\n         \"try\",\n-        format!(\"{}\", utils::snippet(cx, inner_expr.span, r#\"\"...\"\"#)),\n+        format!(\"{}\", snippet(cx, inner_expr.span, r#\"\"...\"\"#)),\n         Applicability::MachineApplicable,\n     );\n }\n@@ -158,7 +160,7 @@ fn is_some_or_ok_call<'a>(\n         // Check outer expression matches CALL_IDENT(ARGUMENT) format\n         if let ExprKind::Call(path, args) = &expr.kind;\n         if let ExprKind::Path(QPath::Resolved(None, path)) = &path.kind;\n-        if utils::is_some_ctor(cx, path.res) || utils::is_ok_ctor(cx, path.res);\n+        if is_some_ctor(cx, path.res) || is_ok_ctor(cx, path.res);\n \n         // Extract inner expression from ARGUMENT\n         if let ExprKind::Match(inner_expr_with_q, _, MatchSource::TryDesugar) = &args[0].kind;\n@@ -171,29 +173,34 @@ fn is_some_or_ok_call<'a>(\n             // question mark operator\n             let inner_expr = &args[0];\n \n+            // if the inner expr is inside macro but the outer one is not, do not lint (#6921)\n+            if  differing_macro_contexts(expr.span, inner_expr.span) {\n+                return None;\n+            }\n+\n             let inner_ty = cx.typeck_results().expr_ty(inner_expr);\n             let outer_ty = cx.typeck_results().expr_ty(expr);\n \n             // Check if outer and inner type are Option\n-            let outer_is_some = utils::is_type_diagnostic_item(cx, outer_ty, sym::option_type);\n-            let inner_is_some = utils::is_type_diagnostic_item(cx, inner_ty, sym::option_type);\n+            let outer_is_some = is_type_diagnostic_item(cx, outer_ty, sym::option_type);\n+            let inner_is_some = is_type_diagnostic_item(cx, inner_ty, sym::option_type);\n \n             // Check for Option MSRV\n-            let meets_option_msrv = utils::meets_msrv(nqml.msrv.as_ref(), &NEEDLESS_QUESTION_MARK_OPTION_MSRV);\n+            let meets_option_msrv = meets_msrv(nqml.msrv.as_ref(), &NEEDLESS_QUESTION_MARK_OPTION_MSRV);\n             if outer_is_some && inner_is_some && meets_option_msrv {\n                 return Some(SomeOkCall::SomeCall(expr, inner_expr));\n             }\n \n             // Check if outer and inner type are Result\n-            let outer_is_result = utils::is_type_diagnostic_item(cx, outer_ty, sym::result_type);\n-            let inner_is_result = utils::is_type_diagnostic_item(cx, inner_ty, sym::result_type);\n+            let outer_is_result = is_type_diagnostic_item(cx, outer_ty, sym::result_type);\n+            let inner_is_result = is_type_diagnostic_item(cx, inner_ty, sym::result_type);\n \n             // Additional check: if the error type of the Result can be converted\n             // via the From trait, then don't match\n             let does_not_call_from = !has_implicit_error_from(cx, expr, inner_expr);\n \n             // Must meet Result MSRV\n-            let meets_result_msrv = utils::meets_msrv(nqml.msrv.as_ref(), &NEEDLESS_QUESTION_MARK_RESULT_MSRV);\n+            let meets_result_msrv = meets_msrv(nqml.msrv.as_ref(), &NEEDLESS_QUESTION_MARK_RESULT_MSRV);\n             if outer_is_result && inner_is_result && does_not_call_from && meets_result_msrv {\n                 return Some(SomeOkCall::OkCall(expr, inner_expr));\n             }"}, {"sha": "e93de8a252a34befc63b1aac34164f0bf266213b", "filename": "clippy_lints/src/needless_update.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneedless_update.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneedless_update.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_update.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::span_lint;\n+use clippy_utils::diagnostics::span_lint;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;"}, {"sha": "4b935c7b906aec25e49327152d053963c7398935", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,11 +1,12 @@\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::ty::implements_trait;\n+use clippy_utils::{self, get_trait_def_id, paths};\n use if_chain::if_chain;\n use rustc_hir::{BinOpKind, Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{self, paths, span_lint};\n-\n declare_clippy_lint! {\n     /// **What it does:**\n     /// Checks for the usage of negated comparison operators on types which only implement\n@@ -59,16 +60,16 @@ impl<'tcx> LateLintPass<'tcx> for NoNegCompOpForPartialOrd {\n                 let ty = cx.typeck_results().expr_ty(left);\n \n                 let implements_ord = {\n-                    if let Some(id) = utils::get_trait_def_id(cx, &paths::ORD) {\n-                        utils::implements_trait(cx, ty, id, &[])\n+                    if let Some(id) = get_trait_def_id(cx, &paths::ORD) {\n+                        implements_trait(cx, ty, id, &[])\n                     } else {\n                         return;\n                     }\n                 };\n \n                 let implements_partial_ord = {\n                     if let Some(id) = cx.tcx.lang_items().partial_ord_trait() {\n-                        utils::implements_trait(cx, ty, id, &[])\n+                        implements_trait(cx, ty, id, &[])\n                     } else {\n                         return;\n                     }"}, {"sha": "7b00879251f768c4d41b2cab35b4af212812587d", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,11 +1,11 @@\n+use clippy_utils::diagnostics::span_lint;\n use if_chain::if_chain;\n use rustc_hir::{BinOpKind, Expr, ExprKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n \n use crate::consts::{self, Constant};\n-use crate::utils::span_lint;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for multiplication by -1 as a form of negation."}, {"sha": "3789572ad439ea1929776238ac201d56a52634d7", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,8 @@\n-use crate::utils::paths;\n-use crate::utils::sugg::DiagnosticBuilderExt;\n-use crate::utils::{get_trait_def_id, return_ty, span_lint_hir_and_then};\n+use clippy_utils::diagnostics::span_lint_hir_and_then;\n+use clippy_utils::paths;\n+use clippy_utils::source::snippet;\n+use clippy_utils::sugg::DiagnosticBuilderExt;\n+use clippy_utils::{get_trait_def_id, return_ty};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -61,7 +63,10 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n     #[allow(clippy::too_many_lines)]\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::Item<'_>) {\n         if let hir::ItemKind::Impl(hir::Impl {\n-            of_trait: None, items, ..\n+            of_trait: None,\n+            ref generics,\n+            items,\n+            ..\n         }) = item.kind\n         {\n             for assoc_item in items {\n@@ -125,6 +130,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                                         }\n                                     }\n \n+                                    let generics_sugg = snippet(cx, generics.span, \"\");\n                                     span_lint_hir_and_then(\n                                         cx,\n                                         NEW_WITHOUT_DEFAULT,\n@@ -139,7 +145,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                                                 cx,\n                                                 item.span,\n                                                 \"try this\",\n-                                                &create_new_without_default_suggest_msg(self_ty),\n+                                                &create_new_without_default_suggest_msg(self_ty, &generics_sugg),\n                                                 Applicability::MaybeIncorrect,\n                                             );\n                                         },\n@@ -154,12 +160,12 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n     }\n }\n \n-fn create_new_without_default_suggest_msg(ty: Ty<'_>) -> String {\n+fn create_new_without_default_suggest_msg(ty: Ty<'_>, generics_sugg: &str) -> String {\n     #[rustfmt::skip]\n     format!(\n-\"impl Default for {} {{\n+\"impl{} Default for {} {{\n     fn default() -> Self {{\n         Self::new()\n     }}\n-}}\", ty)\n+}}\", generics_sugg, ty)\n }"}, {"sha": "83953a16bc8d1e80120104a98451e58a17817916", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{has_drop, snippet_opt, span_lint, span_lint_and_sugg};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::ty::has_drop;\n use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::{BinOpKind, BlockCheckMode, Expr, ExprKind, Stmt, StmtKind, UnsafeSource};"}, {"sha": "aa1d8fbe300ce9f83d8c6c543791fb613e5699b0", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 12, "deletions": 14, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -4,6 +4,9 @@\n \n use std::ptr;\n \n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::in_constant;\n+use if_chain::if_chain;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{\n@@ -18,9 +21,6 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::{InnerSpan, Span, DUMMY_SP};\n use rustc_typeck::hir_ty_to_ty;\n \n-use crate::utils::{in_constant, span_lint_and_then};\n-use if_chain::if_chain;\n-\n // FIXME: this is a correctness problem but there's no suitable\n // warn-by-default category.\n declare_clippy_lint! {\n@@ -179,17 +179,15 @@ fn is_value_unfrozen_poly<'tcx>(cx: &LateContext<'tcx>, body_id: BodyId, ty: Ty<\n fn is_value_unfrozen_expr<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId, def_id: DefId, ty: Ty<'tcx>) -> bool {\n     let substs = cx.typeck_results().node_substs(hir_id);\n \n-    let result = cx\n-        .tcx\n-        .const_eval_resolve(\n-            cx.param_env,\n-            ty::Unevaluated {\n-                def: ty::WithOptConstParam::unknown(def_id),\n-                substs,\n-                promoted: None\n-            },\n-            None\n-        );\n+    let result = cx.tcx.const_eval_resolve(\n+        cx.param_env,\n+        ty::Unevaluated {\n+            def: ty::WithOptConstParam::unknown(def_id),\n+            substs,\n+            promoted: None,\n+        },\n+        None,\n+    );\n     is_value_unfrozen_raw(cx, result, ty)\n }\n "}, {"sha": "4c8bceaf2cb8bf90e66be13c3fbb72941d56dae5", "filename": "clippy_lints/src/non_expressive_names.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fnon_expressive_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_expressive_names.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::{span_lint, span_lint_and_then};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n use rustc_ast::ast::{\n     Arm, AssocItem, AssocItemKind, Attribute, Block, FnDecl, FnKind, Item, ItemKind, Local, Pat,\n     PatKind,"}, {"sha": "c61dff4b8e04360cb9a2a1fcfb7d4b595ad36f16", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{match_type, paths, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::paths;\n+use clippy_utils::ty::match_type;\n use rustc_ast::ast::LitKind;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "a0bc324e02692c3d9363966beb115513ccfcb84a", "filename": "clippy_lints/src/option_env_unwrap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Foption_env_unwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Foption_env_unwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_env_unwrap.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_direct_expn_of, span_lint_and_help};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::is_direct_expn_of;\n use if_chain::if_chain;\n use rustc_ast::ast::{Expr, ExprKind};\n use rustc_lint::{EarlyContext, EarlyLintPass};"}, {"sha": "a76a4a33f1f3b12a491ac1c82ae5b2f3f4f0608e", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,9 +1,10 @@\n-use crate::utils;\n-use crate::utils::eager_or_lazy;\n-use crate::utils::sugg::Sugg;\n-use crate::utils::{is_type_diagnostic_item, paths, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::paths;\n+use clippy_utils::sugg::Sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::usage::contains_return_break_continue_macro;\n+use clippy_utils::{eager_or_lazy, get_enclosing_block, in_macro, match_qpath};\n use if_chain::if_chain;\n-\n use rustc_errors::Applicability;\n use rustc_hir::{Arm, BindingAnnotation, Block, Expr, ExprKind, MatchSource, Mutability, PatKind, UnOp};\n use rustc_lint::{LateContext, LateLintPass};\n@@ -108,7 +109,7 @@ fn extract_body_from_arm<'a>(arm: &'a Arm<'a>) -> Option<&'a Expr<'a>> {\n /// If this is the else body of an if/else expression, then we need to wrap\n /// it in curly braces. Otherwise, we don't.\n fn should_wrap_in_braces(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n-    utils::get_enclosing_block(cx, expr.hir_id).map_or(false, |parent| {\n+    get_enclosing_block(cx, expr.hir_id).map_or(false, |parent| {\n         let mut should_wrap = false;\n \n         if let Some(Expr {\n@@ -158,15 +159,15 @@ fn detect_option_if_let_else<'tcx>(\n     expr: &'_ Expr<'tcx>,\n ) -> Option<OptionIfLetElseOccurence> {\n     if_chain! {\n-        if !utils::in_macro(expr.span); // Don't lint macros, because it behaves weirdly\n+        if !in_macro(expr.span); // Don't lint macros, because it behaves weirdly\n         if let ExprKind::Match(cond_expr, arms, MatchSource::IfLetDesugar{contains_else_clause: true}) = &expr.kind;\n         if arms.len() == 2;\n         if !is_result_ok(cx, cond_expr); // Don't lint on Result::ok because a different lint does it already\n         if let PatKind::TupleStruct(struct_qpath, &[inner_pat], _) = &arms[0].pat.kind;\n-        if utils::match_qpath(struct_qpath, &paths::OPTION_SOME);\n+        if match_qpath(struct_qpath, &paths::OPTION_SOME);\n         if let PatKind::Binding(bind_annotation, _, id, _) = &inner_pat.kind;\n-        if !utils::usage::contains_return_break_continue_macro(arms[0].body);\n-        if !utils::usage::contains_return_break_continue_macro(arms[1].body);\n+        if !contains_return_break_continue_macro(arms[0].body);\n+        if !contains_return_break_continue_macro(arms[1].body);\n         then {\n             let capture_mut = if bind_annotation == &BindingAnnotation::Mutable { \"mut \" } else { \"\" };\n             let some_body = extract_body_from_arm(&arms[0])?;"}, {"sha": "cf667c6e805341f46c18c61e5e4773c8bd562b5f", "filename": "clippy_lints/src/overflow_check_conditional.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{span_lint, SpanlessEq};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::SpanlessEq;\n use if_chain::if_chain;\n use rustc_hir::{BinOpKind, Expr, ExprKind, QPath};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "d32b937b209c5324f4fbf1e4b518062387b04a75", "filename": "clippy_lints/src/panic_in_result_fn.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_in_result_fn.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{find_macro_calls, is_type_diagnostic_item, return_ty, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{find_macro_calls, return_ty};\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "d06e7f8fe1e0e58eef7f89cf37700c67da0d67bc", "filename": "clippy_lints/src/panic_unimplemented.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic_unimplemented.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_expn_of, match_panic_call, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{is_expn_of, match_panic_call};\n use if_chain::if_chain;\n use rustc_hir::Expr;\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "1251ddd9a02733bd55e95c68c03496ed22d3f03b", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_automatically_derived, span_lint_hir};\n+use clippy_utils::diagnostics::span_lint_hir;\n+use clippy_utils::is_automatically_derived;\n use if_chain::if_chain;\n use rustc_hir::{Impl, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "9a5b1c3b9442a7e7f8658df06e98f5233dccd107", "filename": "clippy_lints/src/pass_by_ref_or_value.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpass_by_ref_or_value.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,9 @@\n use std::cmp;\n \n-use crate::utils::{is_copy, is_self_ty, snippet, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::is_self_ty;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::is_copy;\n use if_chain::if_chain;\n use rustc_ast::attr;\n use rustc_errors::Applicability;"}, {"sha": "95ffae28d8c27847912b8b8dd3a07d0e2a451d5c", "filename": "clippy_lints/src/path_buf_push_overwrite.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpath_buf_push_overwrite.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_type_diagnostic_item, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;"}, {"sha": "4550b367da4bf92fd9a39493554c9e105dc2621b", "filename": "clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,7 @@\n-use crate::utils::{last_path_segment, span_lint_and_help};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::last_path_segment;\n use rustc_hir::{\n-    intravisit, Body, Expr, ExprKind, PatField, FnDecl, HirId, LocalSource, MatchSource, Mutability, Pat, PatKind,\n+    intravisit, Body, Expr, ExprKind, FnDecl, HirId, LocalSource, MatchSource, Mutability, Pat, PatField, PatKind,\n     QPath, Stmt, StmtKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};"}, {"sha": "9cf00c953b95f16afd34ec6e047f944d534c840e", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n use rustc_ast::ast::{BinOpKind, Expr, ExprKind, LitKind, UnOp};\n use rustc_errors::Applicability;"}, {"sha": "be686b1b0cd814f6c7fffd341a2a97fad8dc377c", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,10 +1,10 @@\n //! Checks for usage of  `&Vec[_]` and `&String`.\n \n-use crate::utils::ptr::get_spans;\n-use crate::utils::{\n-    is_allowed, is_type_diagnostic_item, match_qpath, match_type, paths, snippet_opt, span_lint, span_lint_and_sugg,\n-    span_lint_and_then, walk_ptrs_hir_ty,\n-};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::ptr::get_spans;\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::ty::{is_type_diagnostic_item, match_type, walk_ptrs_hir_ty};\n+use clippy_utils::{is_allowed, match_qpath, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{"}, {"sha": "5796c59c8b3fb6a53a1c6c3eddc5b78f19bf1404", "filename": "clippy_lints/src/ptr_eq.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fptr_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fptr_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_eq.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::in_macro;\n+use clippy_utils::source::snippet_opt;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, Expr, ExprKind};\n@@ -40,7 +42,7 @@ static LINT_MSG: &str = \"use `std::ptr::eq` when comparing raw pointers\";\n \n impl LateLintPass<'_> for PtrEq {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if utils::in_macro(expr.span) {\n+        if in_macro(expr.span) {\n             return;\n         }\n \n@@ -54,10 +56,10 @@ impl LateLintPass<'_> for PtrEq {\n                 if_chain! {\n                     if let Some(left_var) = expr_as_cast_to_raw_pointer(cx, left);\n                     if let Some(right_var) = expr_as_cast_to_raw_pointer(cx, right);\n-                    if let Some(left_snip) = utils::snippet_opt(cx, left_var.span);\n-                    if let Some(right_snip) = utils::snippet_opt(cx, right_var.span);\n+                    if let Some(left_snip) = snippet_opt(cx, left_var.span);\n+                    if let Some(right_snip) = snippet_opt(cx, right_var.span);\n                     then {\n-                        utils::span_lint_and_sugg(\n+                        span_lint_and_sugg(\n                             cx,\n                             PTR_EQ,\n                             expr.span,"}, {"sha": "c04b42552569fec67f6529c82aa8e161846f6ed4", "filename": "clippy_lints/src/ptr_offset_with_cast.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_offset_with_cast.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{snippet_opt, span_lint, span_lint_and_sugg};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg};\n+use clippy_utils::source::snippet_opt;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "2054255a7c9dee1a2884c8c84894fdbe057e0d3d", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,3 +1,8 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::sugg::Sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{eq_expr_value, match_def_path, match_qpath, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::def::{DefKind, Res};\n@@ -6,12 +11,6 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n-use crate::utils::sugg::Sugg;\n-use crate::utils::{\n-    eq_expr_value, is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet_with_applicability,\n-    span_lint_and_sugg,\n-};\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for expressions that could be replaced by the question mark operator.\n     ///"}, {"sha": "95b21489eb50e9f706c41ecd6de9ad432391bcae", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,9 @@\n use crate::consts::{constant, Constant};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::source::{snippet, snippet_opt, snippet_with_applicability};\n+use clippy_utils::sugg::Sugg;\n+use clippy_utils::{get_parent_expr, in_constant, is_integer_const, meets_msrv, single_segment_path};\n+use clippy_utils::{higher, SpanlessEq};\n use if_chain::if_chain;\n use rustc_ast::ast::RangeLimits;\n use rustc_errors::Applicability;\n@@ -12,13 +17,6 @@ use rustc_span::sym;\n use rustc_span::symbol::Ident;\n use std::cmp::Ordering;\n \n-use crate::utils::sugg::Sugg;\n-use crate::utils::{\n-    get_parent_expr, in_constant, is_integer_const, meets_msrv, single_segment_path, snippet, snippet_opt,\n-    snippet_with_applicability, span_lint, span_lint_and_sugg, span_lint_and_then,\n-};\n-use crate::utils::{higher, SpanlessEq};\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for zipping a collection with the range of\n     /// `0.._.len()`."}, {"sha": "3abe619207e9106317ee27b74e26848498e7752b", "filename": "clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_clone.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,7 @@\n-use crate::utils::{\n-    fn_has_unsatisfiable_preds, has_drop, is_copy, is_type_diagnostic_item, match_def_path, paths, snippet_opt,\n-    span_lint_hir, span_lint_hir_and_then, walk_ptrs_ty_depth,\n-};\n+use clippy_utils::diagnostics::{span_lint_hir, span_lint_hir_and_then};\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::ty::{has_drop, is_copy, is_type_diagnostic_item, walk_ptrs_ty_depth};\n+use clippy_utils::{fn_has_unsatisfiable_preds, match_def_path, paths};\n use if_chain::if_chain;\n use rustc_data_structures::{fx::FxHashMap, transitive_relation::TransitiveRelation};\n use rustc_errors::Applicability;\n@@ -556,7 +556,7 @@ impl<'a, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'tcx> {\n                     mir::Operand::Copy(p) | mir::Operand::Move(p) => {\n                         self.possible_borrower.add(p.local, *dest);\n                     },\n-                    _ => (),\n+                    mir::Operand::Constant(..) => (),\n                 }\n             }\n         }\n@@ -578,7 +578,7 @@ fn rvalue_locals(rvalue: &mir::Rvalue<'_>, mut visit: impl FnMut(mir::Local)) {\n \n     let mut visit_op = |op: &mir::Operand<'_>| match op {\n         mir::Operand::Copy(p) | mir::Operand::Move(p) => visit(p.local),\n-        _ => (),\n+        mir::Operand::Constant(..) => (),\n     };\n \n     match rvalue {"}, {"sha": "2977a108d141bfa72abe922114e04f51e7a84c33", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{snippet_with_applicability, span_lint, span_lint_and_then};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n+use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n use rustc_ast::ast;\n use rustc_ast::visit as ast_visit;"}, {"sha": "061526c6f09fa3b67692528d7a73d5b9d8f5b47c", "filename": "clippy_lints/src/redundant_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fredundant_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fredundant_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_else.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::span_lint_and_help;\n+use clippy_utils::diagnostics::span_lint_and_help;\n use rustc_ast::ast::{Block, Expr, ExprKind, Stmt, StmtKind};\n use rustc_ast::visit::{walk_expr, Visitor};\n use rustc_lint::{EarlyContext, EarlyLintPass};"}, {"sha": "abebd4227975ef3425c2edb2ffefc5ebc7613761", "filename": "clippy_lints/src/redundant_field_names.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fredundant_field_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_field_names.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{meets_msrv, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::meets_msrv;\n use rustc_ast::ast::{Expr, ExprKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};"}, {"sha": "e091095de136a5f941746e62c4ca797d1bd48381", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::span_lint_and_then;\n+use clippy_utils::diagnostics::span_lint_and_then;\n use rustc_errors::Applicability;\n use rustc_hir::{Item, ItemKind, VisibilityKind};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "6da7b5fbcc8a009a40856c9f5a71b609a37e23ae", "filename": "clippy_lints/src/redundant_slicing.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fredundant_slicing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_slicing.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,12 +1,13 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::ty::is_type_lang_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, LangItem};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::{lint::in_external_macro, ty::TyS};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n \n-use crate::utils::{is_type_lang_item, snippet_with_applicability, span_lint_and_sugg};\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for redundant slicing expressions which use the full range, and\n     /// do not change the type."}, {"sha": "32b57698ec54dc6481c0daa7468ec3b919860d25", "filename": "clippy_lints/src/redundant_static_lifetimes.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_static_lifetimes.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{meets_msrv, snippet, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::meets_msrv;\n+use clippy_utils::source::snippet;\n use rustc_ast::ast::{Item, ItemKind, Ty, TyKind};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};"}, {"sha": "0922cfa494e6fabfddfe754417012c7994a0123f", "filename": "clippy_lints/src/ref_option_ref.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fref_option_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fref_option_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fref_option_ref.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,12 +1,13 @@\n-use crate::utils::{last_path_segment, snippet, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::last_path_segment;\n+use clippy_utils::source::snippet;\n+use if_chain::if_chain;\n+use rustc_errors::Applicability;\n use rustc_hir::{GenericArg, Mutability, Ty, TyKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::symbol::sym;\n \n-use if_chain::if_chain;\n-use rustc_errors::Applicability;\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `&Option<&T>`.\n     ///"}, {"sha": "d6336389b0af12308a586f8ccc28e81707196895", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,7 @@\n-use crate::utils::sugg::Sugg;\n-use crate::utils::{in_macro, snippet_opt, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::in_macro;\n+use clippy_utils::source::{snippet_opt, snippet_with_applicability};\n+use clippy_utils::sugg::Sugg;\n use if_chain::if_chain;\n use rustc_ast::ast::{Expr, ExprKind, Mutability, UnOp};\n use rustc_errors::Applicability;"}, {"sha": "1cc332de894e16eb2527176ea5bf1a2f85d01dce", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n use crate::consts::{constant, Constant};\n-use crate::utils::{match_def_path, paths, span_lint, span_lint_and_help};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_help};\n+use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_ast::ast::{LitKind, StrStyle};\n use rustc_data_structures::fx::FxHashSet;"}, {"sha": "63e5ec69e66d1ada4bb34bb3cb96e648f9670f34", "filename": "clippy_lints/src/repeat_once.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Frepeat_once.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Frepeat_once.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Frepeat_once.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,8 @@\n use crate::consts::{constant_context, Constant};\n-use crate::utils::{in_macro, is_type_diagnostic_item, snippet, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::in_macro;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::is_type_diagnostic_item;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};"}, {"sha": "8995ae431adadb1e357ee846ce721a7abd3e2681", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,3 +1,6 @@\n+use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::{fn_def_id, in_macro, match_qpath};\n use if_chain::if_chain;\n use rustc_ast::ast::Attribute;\n use rustc_errors::Applicability;\n@@ -11,8 +14,6 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n-use crate::utils::{fn_def_id, in_macro, match_qpath, snippet_opt, span_lint_and_sugg, span_lint_and_then};\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for `let`-bindings, which are subsequently\n     /// returned."}, {"sha": "e7925c4fbdeffdad43968210c2f93ce0b4097dd6", "filename": "clippy_lints/src/self_assignment.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fself_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fself_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fself_assignment.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{eq_expr_value, snippet, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::eq_expr_value;\n+use clippy_utils::source::snippet;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};"}, {"sha": "f61af15fbed0ebbf5edaaa357a7c23bf0dd711e5", "filename": "clippy_lints/src/semicolon_if_nothing_returned.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsemicolon_if_nothing_returned.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{in_macro, snippet_with_macro_callsite, span_lint_and_sugg, sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_macro_callsite;\n+use clippy_utils::{in_macro, sugg};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Block, ExprKind};"}, {"sha": "169f7d26285cd902c8abb1835e093c3542739c92", "filename": "clippy_lints/src/serde_api.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fserde_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fserde_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde_api.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{get_trait_def_id, paths, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{get_trait_def_id, paths};\n use rustc_hir::{Impl, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};"}, {"sha": "612d2fd84cb6fd70029f83556a2c007edcb849bd", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{contains_name, higher, iter_input_pats, snippet, span_lint_and_then};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet;\n+use clippy_utils::{contains_name, higher, iter_input_pats};\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n     Block, Body, Expr, ExprKind, FnDecl, Guard, HirId, Local, MutTy, Pat, PatKind, Path, QPath, StmtKind, Ty, TyKind,"}, {"sha": "c9d72aabb6a3cb68d6d7dc14717e88fa103f6387", "filename": "clippy_lints/src/single_component_path_imports.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsingle_component_path_imports.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{in_macro, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::in_macro;\n use if_chain::if_chain;\n use rustc_ast::{Item, ItemKind, UseTreeKind};\n use rustc_errors::Applicability;"}, {"sha": "09e00866815568a8478b4097b55b0efde6683e2d", "filename": "clippy_lints/src/size_of_in_element_count.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsize_of_in_element_count.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,8 @@\n //! Lint on use of `size_of` or `size_of_val` of T in an expression\n //! expecting a count of T\n \n-use crate::utils::{match_def_path, paths, span_lint_and_help};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::{match_def_path, paths};\n use if_chain::if_chain;\n use rustc_hir::BinOpKind;\n use rustc_hir::{Expr, ExprKind};"}, {"sha": "d55a83f16136adc7d3de61e07a69ea9372d7a17d", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n-use crate::utils::sugg::Sugg;\n-use crate::utils::{get_enclosing_block, match_qpath, span_lint_and_then, SpanlessEq};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::sugg::Sugg;\n+use clippy_utils::{get_enclosing_block, match_qpath, SpanlessEq};\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n use rustc_errors::Applicability;"}, {"sha": "65790375c737946cde63eabca848e69fc7587d70", "filename": "clippy_lints/src/stable_sort_primitive.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstable_sort_primitive.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,6 @@\n-use crate::utils::{is_slice_of_primitives, span_lint_and_then, sugg::Sugg};\n-\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::{is_slice_of_primitives, sugg::Sugg};\n use if_chain::if_chain;\n-\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "99ca7ef77a5c5ed281cda4d2d2844a7912eba9df", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 35, "deletions": 9, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,3 +1,9 @@\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_help, span_lint_and_sugg};\n+use clippy_utils::source::{snippet, snippet_with_applicability};\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::SpanlessEq;\n+use clippy_utils::{get_parent_expr, is_allowed, match_function_call, method_calls, paths};\n+use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, LangItem, QPath};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n@@ -7,14 +13,6 @@ use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Spanned;\n use rustc_span::sym;\n \n-use if_chain::if_chain;\n-\n-use crate::utils::SpanlessEq;\n-use crate::utils::{\n-    get_parent_expr, is_allowed, is_type_diagnostic_item, match_function_call, method_calls, paths, span_lint,\n-    span_lint_and_help, span_lint_and_sugg,\n-};\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for string appends of the form `x = x + y` (without\n     /// `let`!).\n@@ -205,7 +203,6 @@ declare_lint_pass!(StringLitAsBytes => [STRING_LIT_AS_BYTES, STRING_FROM_UTF8_AS\n \n impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, e: &'tcx Expr<'_>) {\n-        use crate::utils::{snippet, snippet_with_applicability};\n         use rustc_ast::LitKind;\n \n         if_chain! {\n@@ -287,6 +284,35 @@ impl<'tcx> LateLintPass<'tcx> for StringLitAsBytes {\n                 }\n             }\n         }\n+\n+        if_chain! {\n+            if let ExprKind::MethodCall(path, _, [recv], _) = &e.kind;\n+            if path.ident.name == sym!(into_bytes);\n+            if let ExprKind::MethodCall(path, _, [recv], _) = &recv.kind;\n+            if matches!(&*path.ident.name.as_str(), \"to_owned\" | \"to_string\");\n+            if let ExprKind::Lit(lit) = &recv.kind;\n+            if let LitKind::Str(lit_content, _) = &lit.node;\n+\n+            if lit_content.as_str().is_ascii();\n+            if lit_content.as_str().len() <= MAX_LENGTH_BYTE_STRING_LIT;\n+            if !recv.span.from_expansion();\n+            then {\n+                let mut applicability = Applicability::MachineApplicable;\n+\n+                span_lint_and_sugg(\n+                    cx,\n+                    STRING_LIT_AS_BYTES,\n+                    e.span,\n+                    \"calling `into_bytes()` on a string literal\",\n+                    \"consider using a byte string literal instead\",\n+                    format!(\n+                        \"b{}.to_vec()\",\n+                        snippet_with_applicability(cx, recv.span, r#\"\"..\"\"#, &mut applicability)\n+                    ),\n+                    applicability,\n+                );\n+            }\n+        }\n     }\n }\n "}, {"sha": "46f423204a21d3282ed3cb1097e9826b32980bf1", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n-use crate::utils::ast_utils::{eq_id, is_useless_with_eq_exprs, IdentIter};\n-use crate::utils::{snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::ast_utils::{eq_id, is_useless_with_eq_exprs, IdentIter};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n use core::ops::{Add, AddAssign};\n use if_chain::if_chain;\n use rustc_ast::ast::{BinOpKind, Expr, ExprKind, StmtKind};"}, {"sha": "99e3d818b798b53ed3253fa1762f15c14f4ebdff", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{get_trait_def_id, span_lint, trait_ref_of_method};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{get_trait_def_id, paths, trait_ref_of_method};\n use if_chain::if_chain;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_expr, NestedVisitorMap, Visitor};\n@@ -158,7 +159,7 @@ fn check_binop(\n     expected_ops: &[hir::BinOpKind],\n ) -> Option<&'static str> {\n     let mut trait_ids = vec![];\n-    let [krate, module] = crate::utils::paths::OPS_MODULE;\n+    let [krate, module] = paths::OPS_MODULE;\n \n     for &t in traits {\n         let path = [krate, module, t];"}, {"sha": "14519eaa962e33dd47adcec19b5a5ff9dade6079", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,8 @@\n-use crate::utils::sugg::Sugg;\n-use crate::utils::{\n-    differing_macro_contexts, eq_expr_value, is_type_diagnostic_item, snippet_with_applicability, span_lint_and_then,\n-};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::sugg::Sugg;\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{differing_macro_contexts, eq_expr_value};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Block, Expr, ExprKind, PatKind, QPath, StmtKind};"}, {"sha": "88bd2feaaddae6b893b8b67f5ee817a6f21a241f", "filename": "clippy_lints/src/tabs_in_doc_comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,4 @@\n-use crate::utils::span_lint_and_sugg;\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n use rustc_ast::ast;\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};"}, {"sha": "8ef25dc816c65a995d413faaf79de5f142f9861e", "filename": "clippy_lints/src/temporary_assignment.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftemporary_assignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftemporary_assignment.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_adjusted, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::is_adjusted;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};"}, {"sha": "c66a596c784611e7afcb5bd605524c83a1090df1", "filename": "clippy_lints/src/to_digit_is_some.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fto_digit_is_some.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fto_digit_is_some.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_digit_is_some.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{match_def_path, snippet_with_applicability, span_lint_and_sugg};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::match_def_path;\n+use clippy_utils::source::snippet_with_applicability;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;"}, {"sha": "42ec14c31b5b1aec4bf6586f2b256842b6454796", "filename": "clippy_lints/src/to_string_in_display.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Fto_string_in_display.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fto_string_in_display.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,5 @@\n-use crate::utils::{is_diagnostic_assoc_item, match_def_path, path_to_local_id, paths, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{is_diagnostic_assoc_item, match_def_path, path_to_local_id, paths};\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind, HirId, Impl, ImplItem, ImplItemKind, Item, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "3ff27c3bcf49f0447f61762e1675620f3d6e8321", "filename": "clippy_lints/src/trait_bounds.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftrait_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftrait_bounds.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{in_macro, snippet, snippet_with_applicability, span_lint_and_help, SpanlessHash};\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::source::{snippet, snippet_with_applicability};\n+use clippy_utils::{in_macro, SpanlessHash};\n use if_chain::if_chain;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;"}, {"sha": "25d0543c8611c831d897496ee3d59588a2d0c5be", "filename": "clippy_lints/src/transmute/crosspointer_transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Fcrosspointer_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Fcrosspointer_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fcrosspointer_transmute.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,5 @@\n use super::CROSSPOINTER_TRANSMUTE;\n-use crate::utils::span_lint;\n+use clippy_utils::diagnostics::span_lint;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};"}, {"sha": "47d58bd30db51b9934d71abb261c1a5d38957ed9", "filename": "clippy_lints/src/transmute/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fmod.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -12,7 +12,7 @@ mod useless_transmute;\n mod utils;\n mod wrong_transmute;\n \n-use crate::utils::{in_constant, match_def_path, paths};\n+use clippy_utils::{in_constant, match_def_path, paths};\n use if_chain::if_chain;\n use rustc_hir::{Expr, ExprKind};\n use rustc_lint::{LateContext, LateLintPass};"}, {"sha": "72489f27cd32856d34695c980cfcb445971665f9", "filename": "clippy_lints/src/transmute/transmute_float_to_int.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_float_to_int.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n use super::TRANSMUTE_FLOAT_TO_INT;\n-use crate::utils::{span_lint_and_then, sugg};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::sugg;\n use if_chain::if_chain;\n use rustc_ast as ast;\n use rustc_errors::Applicability;"}, {"sha": "cc0a5643e2a7d35295de3f9eff785371fdbc1ad7", "filename": "clippy_lints/src/transmute/transmute_int_to_bool.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_bool.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n use super::TRANSMUTE_INT_TO_BOOL;\n-use crate::utils::{span_lint_and_then, sugg};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::sugg;\n use rustc_ast as ast;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;"}, {"sha": "8f884e6a4a17b74203247569d2f9b3a925a60c7c", "filename": "clippy_lints/src/transmute/transmute_int_to_char.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_char.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n use super::TRANSMUTE_INT_TO_CHAR;\n-use crate::utils::{span_lint_and_then, sugg};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::sugg;\n use rustc_ast as ast;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;"}, {"sha": "2b6a4cff81eb5d60549b0dc4d97497e37f89e783", "filename": "clippy_lints/src/transmute/transmute_int_to_float.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_float.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_float.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_int_to_float.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n use super::TRANSMUTE_INT_TO_FLOAT;\n-use crate::utils::{span_lint_and_then, sugg};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::sugg;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;"}, {"sha": "7b646bfc0c6d13e0bb544d4aef8fede6beb8f0cb", "filename": "clippy_lints/src/transmute/transmute_ptr_to_ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ptr.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n use super::TRANSMUTE_PTR_TO_PTR;\n-use crate::utils::{span_lint_and_then, sugg};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::sugg;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;"}, {"sha": "f14eef936453114abb3b4814fafe2cfe09c95826", "filename": "clippy_lints/src/transmute/transmute_ptr_to_ref.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ptr_to_ref.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,7 @@\n use super::utils::get_type_snippet;\n use super::TRANSMUTE_PTR_TO_REF;\n-use crate::utils::{span_lint_and_then, sugg};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::sugg;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, Mutability, QPath};\n use rustc_lint::LateContext;"}, {"sha": "d105e37abf9c08281553f4298958db2e2f1bc9c6", "filename": "clippy_lints/src/transmute/transmute_ref_to_ref.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmute_ref_to_ref.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,7 @@\n use super::{TRANSMUTE_BYTES_TO_STR, TRANSMUTE_PTR_TO_PTR};\n-use crate::utils::{snippet, span_lint_and_sugg, span_lint_and_then, sugg};\n+use clippy_utils::diagnostics::{span_lint_and_sugg, span_lint_and_then};\n+use clippy_utils::source::snippet;\n+use clippy_utils::sugg;\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, Mutability};"}, {"sha": "e2c6d130f3c9cd40c537732af1e4b02e8305e0a7", "filename": "clippy_lints/src/transmute/transmutes_expressible_as_ptr_casts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Ftransmutes_expressible_as_ptr_casts.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,7 @@\n use super::utils::can_be_expressed_as_pointer_cast;\n use super::TRANSMUTES_EXPRESSIBLE_AS_PTR_CASTS;\n-use crate::utils::{span_lint_and_then, sugg};\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::sugg;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;"}, {"sha": "de9277e016e3a7cbbf447af459d3547835d83a86", "filename": "clippy_lints/src/transmute/unsound_collection_transmute.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Funsound_collection_transmute.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,6 +1,7 @@\n use super::utils::is_layout_incompatible;\n use super::UNSOUND_COLLECTION_TRANSMUTE;\n-use crate::utils::{match_def_path, paths, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{match_def_path, paths};\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};"}, {"sha": "445bcf60fa71a68e4481a945f4abda3a012d2cb3", "filename": "clippy_lints/src/transmute/useless_transmute.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fuseless_transmute.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n use super::USELESS_TRANSMUTE;\n-use crate::utils::{span_lint, span_lint_and_then, sugg};\n+use clippy_utils::diagnostics::{span_lint, span_lint_and_then};\n+use clippy_utils::sugg;\n use rustc_errors::Applicability;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;"}, {"sha": "c6d0d63b0b5426f32f9c1cc3a3eeca1a50ca8885", "filename": "clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,4 +1,6 @@\n-use crate::utils::{is_normalizable, last_path_segment, snippet};\n+use clippy_utils::last_path_segment;\n+use clippy_utils::source::snippet;\n+use clippy_utils::ty::is_normalizable;\n use if_chain::if_chain;\n use rustc_hir::{Expr, GenericArg, QPath, TyKind};\n use rustc_lint::LateContext;"}, {"sha": "2118f3d6950041ee585ad613ed6ef139872d5a32", "filename": "clippy_lints/src/transmute/wrong_transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Fwrong_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmute%2Fwrong_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Fwrong_transmute.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,5 @@\n use super::WRONG_TRANSMUTE;\n-use crate::utils::span_lint;\n+use clippy_utils::diagnostics::span_lint;\n use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{self, Ty};"}, {"sha": "d42cdde110e7789e95cc5eb48f63af9d2093c524", "filename": "clippy_lints/src/transmuting_null.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftransmuting_null.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmuting_null.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,5 +1,6 @@\n use crate::consts::{constant_context, Constant};\n-use crate::utils::{match_qpath, paths, span_lint};\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::{match_qpath, paths};\n use if_chain::if_chain;\n use rustc_ast::LitKind;\n use rustc_hir::{Expr, ExprKind};"}, {"sha": "e61058c2749083b616ae5676375bef2e2f9aff25", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,7 +1,7 @@\n-use crate::utils::{\n-    differing_macro_contexts, in_macro, is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet,\n-    snippet_with_macro_callsite, span_lint_and_sugg,\n-};\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::{snippet, snippet_with_macro_callsite};\n+use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{differing_macro_contexts, in_macro, match_def_path, match_qpath, paths};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, LangItem, MatchSource, QPath};"}, {"sha": "d68c6db4e23343b4055b4a0f55ee1190aa400616", "filename": "clippy_lints/src/types/borrowed_box.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fborrowed_box.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,14 +1,14 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet;\n+use clippy_utils::{match_path, paths};\n+use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{\n     self as hir, GenericArg, GenericBounds, GenericParamKind, HirId, Lifetime, MutTy, Mutability, Node, QPath,\n     SyntheticTyParamKind, TyKind,\n };\n use rustc_lint::LateContext;\n \n-use if_chain::if_chain;\n-\n-use crate::utils::{match_path, paths, snippet, span_lint_and_sugg};\n-\n use super::BORROWED_BOX;\n \n pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, lt: &Lifetime, mut_ty: &MutTy<'_>) -> bool {"}, {"sha": "d8b1953457ccc961f4803370e7195540ee168ca3", "filename": "clippy_lints/src/types/box_vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftypes%2Fbox_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftypes%2Fbox_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fbox_vec.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,9 +1,9 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::is_ty_param_diagnostic_item;\n use rustc_hir::{self as hir, def_id::DefId, QPath};\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n \n-use crate::utils::{is_ty_param_diagnostic_item, span_lint_and_help};\n-\n use super::BOX_VEC;\n \n pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {"}, {"sha": "a9fbe7aa315c823dcdff245207507210cb501964", "filename": "clippy_lints/src/types/linked_list.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftypes%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftypes%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Flinked_list.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,8 +1,8 @@\n+use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::{match_def_path, paths};\n use rustc_hir::{self as hir, def_id::DefId};\n use rustc_lint::LateContext;\n \n-use crate::utils::{match_def_path, paths, span_lint_and_help};\n-\n use super::LINKEDLIST;\n \n pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, def_id: DefId) -> bool {"}, {"sha": "c73c1c9d92db65b27e12ab9fc39995bf37d68319", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 14, "deletions": 401, "changes": 415, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -13,34 +13,31 @@ use std::borrow::Cow;\n use std::cmp::Ordering;\n use std::collections::BTreeMap;\n \n+use clippy_utils::diagnostics::{multispan_sugg, span_lint, span_lint_and_help, span_lint_and_then};\n+use clippy_utils::source::{snippet, snippet_opt};\n+use clippy_utils::ty::{is_isize_or_usize, is_type_diagnostic_item};\n use if_chain::if_chain;\n-use rustc_errors::{Applicability, DiagnosticBuilder};\n+use rustc_errors::DiagnosticBuilder;\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_body, walk_expr, walk_ty, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::{\n-    BinOpKind, Block, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericParamKind, HirId, ImplItem,\n-    ImplItemKind, Item, ItemKind, Local, MatchSource, MutTy, Node, QPath, Stmt, StmtKind, TraitFn, TraitItem,\n-    TraitItemKind, TyKind,\n+    BinOpKind, Body, Expr, ExprKind, FnDecl, FnRetTy, FnSig, GenericArg, GenericParamKind, HirId, ImplItem,\n+    ImplItemKind, Item, ItemKind, Local, MutTy, QPath, TraitFn, TraitItem, TraitItemKind, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::hir::map::Map;\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::{self, IntTy, Ty, TyS, TypeckResults, UintTy};\n use rustc_session::{declare_lint_pass, declare_tool_lint, impl_lint_pass};\n-use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::sym;\n use rustc_target::abi::LayoutOf;\n use rustc_target::spec::abi::Abi;\n use rustc_typeck::hir_ty_to_ty;\n \n use crate::consts::{constant, Constant};\n-use crate::utils::paths;\n-use crate::utils::{\n-    clip, comparisons, differing_macro_contexts, higher, indent_of, int_bits, is_isize_or_usize,\n-    is_type_diagnostic_item, match_path, multispan_sugg, reindent_multiline, sext, snippet, snippet_opt,\n-    snippet_with_macro_callsite, span_lint, span_lint_and_help, span_lint_and_then, unsext,\n-};\n+use clippy_utils::paths;\n+use clippy_utils::{clip, comparisons, differing_macro_contexts, int_bits, match_path, sext, unsext};\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for use of `Box<Vec<_>>` anywhere in the code.\n@@ -279,7 +276,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n         match item.kind {\n             TraitItemKind::Const(ref ty, _) | TraitItemKind::Type(_, Some(ref ty)) => self.check_ty(cx, ty, false),\n             TraitItemKind::Fn(ref sig, _) => self.check_fn_decl(cx, &sig.decl),\n-            _ => (),\n+            TraitItemKind::Type(..) => (),\n         }\n     }\n \n@@ -390,390 +387,6 @@ impl Types {\n     }\n }\n \n-declare_clippy_lint! {\n-    /// **What it does:** Checks for binding a unit value.\n-    ///\n-    /// **Why is this bad?** A unit value cannot usefully be used anywhere. So\n-    /// binding one is kind of pointless.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```rust\n-    /// let x = {\n-    ///     1;\n-    /// };\n-    /// ```\n-    pub LET_UNIT_VALUE,\n-    pedantic,\n-    \"creating a `let` binding to a value of unit type, which usually can't be used afterwards\"\n-}\n-\n-declare_lint_pass!(LetUnitValue => [LET_UNIT_VALUE]);\n-\n-impl<'tcx> LateLintPass<'tcx> for LetUnitValue {\n-    fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n-        if let StmtKind::Local(ref local) = stmt.kind {\n-            if is_unit(cx.typeck_results().pat_ty(&local.pat)) {\n-                if in_external_macro(cx.sess(), stmt.span) || local.pat.span.from_expansion() {\n-                    return;\n-                }\n-                if higher::is_from_for_desugar(local) {\n-                    return;\n-                }\n-                span_lint_and_then(\n-                    cx,\n-                    LET_UNIT_VALUE,\n-                    stmt.span,\n-                    \"this let-binding has unit value\",\n-                    |diag| {\n-                        if let Some(expr) = &local.init {\n-                            let snip = snippet_with_macro_callsite(cx, expr.span, \"()\");\n-                            diag.span_suggestion(\n-                                stmt.span,\n-                                \"omit the `let` binding\",\n-                                format!(\"{};\", snip),\n-                                Applicability::MachineApplicable, // snippet\n-                            );\n-                        }\n-                    },\n-                );\n-            }\n-        }\n-    }\n-}\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for comparisons to unit. This includes all binary\n-    /// comparisons (like `==` and `<`) and asserts.\n-    ///\n-    /// **Why is this bad?** Unit is always equal to itself, and thus is just a\n-    /// clumsily written constant. Mostly this happens when someone accidentally\n-    /// adds semicolons at the end of the operands.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```rust\n-    /// # fn foo() {};\n-    /// # fn bar() {};\n-    /// # fn baz() {};\n-    /// if {\n-    ///     foo();\n-    /// } == {\n-    ///     bar();\n-    /// } {\n-    ///     baz();\n-    /// }\n-    /// ```\n-    /// is equal to\n-    /// ```rust\n-    /// # fn foo() {};\n-    /// # fn bar() {};\n-    /// # fn baz() {};\n-    /// {\n-    ///     foo();\n-    ///     bar();\n-    ///     baz();\n-    /// }\n-    /// ```\n-    ///\n-    /// For asserts:\n-    /// ```rust\n-    /// # fn foo() {};\n-    /// # fn bar() {};\n-    /// assert_eq!({ foo(); }, { bar(); });\n-    /// ```\n-    /// will always succeed\n-    pub UNIT_CMP,\n-    correctness,\n-    \"comparing unit values\"\n-}\n-\n-declare_lint_pass!(UnitCmp => [UNIT_CMP]);\n-\n-impl<'tcx> LateLintPass<'tcx> for UnitCmp {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>) {\n-        if expr.span.from_expansion() {\n-            if let Some(callee) = expr.span.source_callee() {\n-                if let ExpnKind::Macro(MacroKind::Bang, symbol) = callee.kind {\n-                    if let ExprKind::Binary(ref cmp, ref left, _) = expr.kind {\n-                        let op = cmp.node;\n-                        if op.is_comparison() && is_unit(cx.typeck_results().expr_ty(left)) {\n-                            let result = match &*symbol.as_str() {\n-                                \"assert_eq\" | \"debug_assert_eq\" => \"succeed\",\n-                                \"assert_ne\" | \"debug_assert_ne\" => \"fail\",\n-                                _ => return,\n-                            };\n-                            span_lint(\n-                                cx,\n-                                UNIT_CMP,\n-                                expr.span,\n-                                &format!(\n-                                    \"`{}` of unit values detected. This will always {}\",\n-                                    symbol.as_str(),\n-                                    result\n-                                ),\n-                            );\n-                        }\n-                    }\n-                }\n-            }\n-            return;\n-        }\n-        if let ExprKind::Binary(ref cmp, ref left, _) = expr.kind {\n-            let op = cmp.node;\n-            if op.is_comparison() && is_unit(cx.typeck_results().expr_ty(left)) {\n-                let result = match op {\n-                    BinOpKind::Eq | BinOpKind::Le | BinOpKind::Ge => \"true\",\n-                    _ => \"false\",\n-                };\n-                span_lint(\n-                    cx,\n-                    UNIT_CMP,\n-                    expr.span,\n-                    &format!(\n-                        \"{}-comparison of unit values detected. This will always be {}\",\n-                        op.as_str(),\n-                        result\n-                    ),\n-                );\n-            }\n-        }\n-    }\n-}\n-\n-declare_clippy_lint! {\n-    /// **What it does:** Checks for passing a unit value as an argument to a function without using a\n-    /// unit literal (`()`).\n-    ///\n-    /// **Why is this bad?** This is likely the result of an accidental semicolon.\n-    ///\n-    /// **Known problems:** None.\n-    ///\n-    /// **Example:**\n-    /// ```rust,ignore\n-    /// foo({\n-    ///     let a = bar();\n-    ///     baz(a);\n-    /// })\n-    /// ```\n-    pub UNIT_ARG,\n-    complexity,\n-    \"passing unit to a function\"\n-}\n-\n-declare_lint_pass!(UnitArg => [UNIT_ARG]);\n-\n-impl<'tcx> LateLintPass<'tcx> for UnitArg {\n-    fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n-        if expr.span.from_expansion() {\n-            return;\n-        }\n-\n-        // apparently stuff in the desugaring of `?` can trigger this\n-        // so check for that here\n-        // only the calls to `Try::from_error` is marked as desugared,\n-        // so we need to check both the current Expr and its parent.\n-        if is_questionmark_desugar_marked_call(expr) {\n-            return;\n-        }\n-        if_chain! {\n-            let map = &cx.tcx.hir();\n-            let opt_parent_node = map.find(map.get_parent_node(expr.hir_id));\n-            if let Some(hir::Node::Expr(parent_expr)) = opt_parent_node;\n-            if is_questionmark_desugar_marked_call(parent_expr);\n-            then {\n-                return;\n-            }\n-        }\n-\n-        match expr.kind {\n-            ExprKind::Call(_, args) | ExprKind::MethodCall(_, _, args, _) => {\n-                let args_to_recover = args\n-                    .iter()\n-                    .filter(|arg| {\n-                        if is_unit(cx.typeck_results().expr_ty(arg)) && !is_unit_literal(arg) {\n-                            !matches!(\n-                                &arg.kind,\n-                                ExprKind::Match(.., MatchSource::TryDesugar) | ExprKind::Path(..)\n-                            )\n-                        } else {\n-                            false\n-                        }\n-                    })\n-                    .collect::<Vec<_>>();\n-                if !args_to_recover.is_empty() {\n-                    lint_unit_args(cx, expr, &args_to_recover);\n-                }\n-            },\n-            _ => (),\n-        }\n-    }\n-}\n-\n-fn fmt_stmts_and_call(\n-    cx: &LateContext<'_>,\n-    call_expr: &Expr<'_>,\n-    call_snippet: &str,\n-    args_snippets: &[impl AsRef<str>],\n-    non_empty_block_args_snippets: &[impl AsRef<str>],\n-) -> String {\n-    let call_expr_indent = indent_of(cx, call_expr.span).unwrap_or(0);\n-    let call_snippet_with_replacements = args_snippets\n-        .iter()\n-        .fold(call_snippet.to_owned(), |acc, arg| acc.replacen(arg.as_ref(), \"()\", 1));\n-\n-    let mut stmts_and_call = non_empty_block_args_snippets\n-        .iter()\n-        .map(|it| it.as_ref().to_owned())\n-        .collect::<Vec<_>>();\n-    stmts_and_call.push(call_snippet_with_replacements);\n-    stmts_and_call = stmts_and_call\n-        .into_iter()\n-        .map(|v| reindent_multiline(v.into(), true, Some(call_expr_indent)).into_owned())\n-        .collect();\n-\n-    let mut stmts_and_call_snippet = stmts_and_call.join(&format!(\"{}{}\", \";\\n\", \" \".repeat(call_expr_indent)));\n-    // expr is not in a block statement or result expression position, wrap in a block\n-    let parent_node = cx.tcx.hir().find(cx.tcx.hir().get_parent_node(call_expr.hir_id));\n-    if !matches!(parent_node, Some(Node::Block(_))) && !matches!(parent_node, Some(Node::Stmt(_))) {\n-        let block_indent = call_expr_indent + 4;\n-        stmts_and_call_snippet =\n-            reindent_multiline(stmts_and_call_snippet.into(), true, Some(block_indent)).into_owned();\n-        stmts_and_call_snippet = format!(\n-            \"{{\\n{}{}\\n{}}}\",\n-            \" \".repeat(block_indent),\n-            &stmts_and_call_snippet,\n-            \" \".repeat(call_expr_indent)\n-        );\n-    }\n-    stmts_and_call_snippet\n-}\n-\n-fn lint_unit_args(cx: &LateContext<'_>, expr: &Expr<'_>, args_to_recover: &[&Expr<'_>]) {\n-    let mut applicability = Applicability::MachineApplicable;\n-    let (singular, plural) = if args_to_recover.len() > 1 {\n-        (\"\", \"s\")\n-    } else {\n-        (\"a \", \"\")\n-    };\n-    span_lint_and_then(\n-        cx,\n-        UNIT_ARG,\n-        expr.span,\n-        &format!(\"passing {}unit value{} to a function\", singular, plural),\n-        |db| {\n-            let mut or = \"\";\n-            args_to_recover\n-                .iter()\n-                .filter_map(|arg| {\n-                    if_chain! {\n-                        if let ExprKind::Block(block, _) = arg.kind;\n-                        if block.expr.is_none();\n-                        if let Some(last_stmt) = block.stmts.iter().last();\n-                        if let StmtKind::Semi(last_expr) = last_stmt.kind;\n-                        if let Some(snip) = snippet_opt(cx, last_expr.span);\n-                        then {\n-                            Some((\n-                                last_stmt.span,\n-                                snip,\n-                            ))\n-                        }\n-                        else {\n-                            None\n-                        }\n-                    }\n-                })\n-                .for_each(|(span, sugg)| {\n-                    db.span_suggestion(\n-                        span,\n-                        \"remove the semicolon from the last statement in the block\",\n-                        sugg,\n-                        Applicability::MaybeIncorrect,\n-                    );\n-                    or = \"or \";\n-                    applicability = Applicability::MaybeIncorrect;\n-                });\n-\n-            let arg_snippets: Vec<String> = args_to_recover\n-                .iter()\n-                .filter_map(|arg| snippet_opt(cx, arg.span))\n-                .collect();\n-            let arg_snippets_without_empty_blocks: Vec<String> = args_to_recover\n-                .iter()\n-                .filter(|arg| !is_empty_block(arg))\n-                .filter_map(|arg| snippet_opt(cx, arg.span))\n-                .collect();\n-\n-            if let Some(call_snippet) = snippet_opt(cx, expr.span) {\n-                let sugg = fmt_stmts_and_call(\n-                    cx,\n-                    expr,\n-                    &call_snippet,\n-                    &arg_snippets,\n-                    &arg_snippets_without_empty_blocks,\n-                );\n-\n-                if arg_snippets_without_empty_blocks.is_empty() {\n-                    db.multipart_suggestion(\n-                        &format!(\"use {}unit literal{} instead\", singular, plural),\n-                        args_to_recover\n-                            .iter()\n-                            .map(|arg| (arg.span, \"()\".to_string()))\n-                            .collect::<Vec<_>>(),\n-                        applicability,\n-                    );\n-                } else {\n-                    let plural = arg_snippets_without_empty_blocks.len() > 1;\n-                    let empty_or_s = if plural { \"s\" } else { \"\" };\n-                    let it_or_them = if plural { \"them\" } else { \"it\" };\n-                    db.span_suggestion(\n-                        expr.span,\n-                        &format!(\n-                            \"{}move the expression{} in front of the call and replace {} with the unit literal `()`\",\n-                            or, empty_or_s, it_or_them\n-                        ),\n-                        sugg,\n-                        applicability,\n-                    );\n-                }\n-            }\n-        },\n-    );\n-}\n-\n-fn is_empty_block(expr: &Expr<'_>) -> bool {\n-    matches!(\n-        expr.kind,\n-        ExprKind::Block(\n-            Block {\n-                stmts: &[],\n-                expr: None,\n-                ..\n-            },\n-            _,\n-        )\n-    )\n-}\n-\n-fn is_questionmark_desugar_marked_call(expr: &Expr<'_>) -> bool {\n-    use rustc_span::hygiene::DesugaringKind;\n-    if let ExprKind::Call(ref callee, _) = expr.kind {\n-        callee.span.is_desugaring(DesugaringKind::QuestionMark)\n-    } else {\n-        false\n-    }\n-}\n-\n-fn is_unit(ty: Ty<'_>) -> bool {\n-    matches!(ty.kind(), ty::Tuple(slice) if slice.is_empty())\n-}\n-\n-fn is_unit_literal(expr: &Expr<'_>) -> bool {\n-    matches!(expr.kind, ExprKind::Tup(ref slice) if slice.is_empty())\n-}\n-\n declare_clippy_lint! {\n     /// **What it does:** Checks for types used in structs, parameters and `let`\n     /// declarations above a certain complexity threshold.\n@@ -839,15 +452,15 @@ impl<'tcx> LateLintPass<'tcx> for TypeComplexity {\n             TraitItemKind::Const(ref ty, _) | TraitItemKind::Type(_, Some(ref ty)) => self.check_type(cx, ty),\n             TraitItemKind::Fn(FnSig { ref decl, .. }, TraitFn::Required(_)) => self.check_fndecl(cx, decl),\n             // methods with default impl are covered by check_fn\n-            _ => (),\n+            TraitItemKind::Type(..) | TraitItemKind::Fn(_, TraitFn::Provided(_)) => (),\n         }\n     }\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         match item.kind {\n             ImplItemKind::Const(ref ty, _) | ImplItemKind::TyAlias(ref ty) => self.check_type(cx, ty),\n             // methods are covered by check_fn\n-            _ => (),\n+            ImplItemKind::Fn(..) => (),\n         }\n     }\n \n@@ -911,7 +524,7 @@ impl<'tcx> Visitor<'tcx> for TypeComplexityVisitor {\n             // function types bring a lot of overhead\n             TyKind::BareFn(ref bare) if bare.abi == Abi::Rust => (50 * self.nest, 1),\n \n-            TyKind::TraitObject(ref param_bounds, ..) => {\n+            TyKind::TraitObject(ref param_bounds, _, _) => {\n                 let has_lifetime_parameters = param_bounds.iter().any(|bound| {\n                     bound\n                         .bound_generic_params\n@@ -1005,7 +618,7 @@ fn detect_absurd_comparison<'tcx>(\n ) -> Option<(ExtremeExpr<'tcx>, AbsurdComparisonResult)> {\n     use crate::types::AbsurdComparisonResult::{AlwaysFalse, AlwaysTrue, InequalityImpossible};\n     use crate::types::ExtremeType::{Maximum, Minimum};\n-    use crate::utils::comparisons::{normalize_comparison, Rel};\n+    use clippy_utils::comparisons::{normalize_comparison, Rel};\n \n     // absurd comparison only makes sense on primitive types\n     // primitive types don't implement comparison operators with each other\n@@ -1247,7 +860,7 @@ fn upcast_comparison_bounds_err<'tcx>(\n     rhs: &'tcx Expr<'_>,\n     invert: bool,\n ) {\n-    use crate::utils::comparisons::Rel;\n+    use clippy_utils::comparisons::Rel;\n \n     if let Some((lb, ub)) = lhs_bounds {\n         if let Some(norm_rhs_val) = node_as_const_fullint(cx, rhs) {"}, {"sha": "b2692c48076b64288d01e8cc646f1c2e5b4fca9b", "filename": "clippy_lints/src/types/option_option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftypes%2Foption_option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftypes%2Foption_option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Foption_option.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,9 +1,9 @@\n+use clippy_utils::diagnostics::span_lint;\n+use clippy_utils::is_ty_param_diagnostic_item;\n use rustc_hir::{self as hir, def_id::DefId, QPath};\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n \n-use crate::utils::{is_ty_param_diagnostic_item, span_lint};\n-\n use super::OPTION_OPTION;\n \n pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {"}, {"sha": "ef629a35d107eb383b8af192ac92fa166be4cedf", "filename": "clippy_lints/src/types/rc_buffer.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f6b5de7deaf4dc9e7917370ad09ab85dc23997c/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Frc_buffer.rs?ref=9f6b5de7deaf4dc9e7917370ad09ab85dc23997c", "patch": "@@ -1,12 +1,11 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use clippy_utils::{get_qpath_generic_tys, is_ty_param_diagnostic_item};\n use rustc_errors::Applicability;\n use rustc_hir::{self as hir, def_id::DefId, QPath, TyKind};\n use rustc_lint::LateContext;\n use rustc_span::symbol::sym;\n \n-use crate::utils::{\n-    get_qpath_generic_tys, is_ty_param_diagnostic_item, snippet_with_applicability, span_lint_and_sugg,\n-};\n-\n use super::RC_BUFFER;\n \n pub(super) fn check(cx: &LateContext<'_>, hir_ty: &hir::Ty<'_>, qpath: &QPath<'_>, def_id: DefId) -> bool {"}]}