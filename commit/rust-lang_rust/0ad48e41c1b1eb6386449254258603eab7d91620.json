{"sha": "0ad48e41c1b1eb6386449254258603eab7d91620", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZDQ4ZTQxYzFiMWViNjM4NjQ0OTI1NDI1ODYwM2VhYjdkOTE2MjA=", "commit": {"author": {"name": "York Xiang", "email": "bombless@126.com", "date": "2015-04-18T01:18:46Z"}, "committer": {"name": "York Xiang", "email": "bombless@126.com", "date": "2015-04-25T03:29:28Z"}, "message": "Fix #20616", "tree": {"sha": "878e670c89bcbf0e3700b42b374b1cc3be40beef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/878e670c89bcbf0e3700b42b374b1cc3be40beef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ad48e41c1b1eb6386449254258603eab7d91620", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ad48e41c1b1eb6386449254258603eab7d91620", "html_url": "https://github.com/rust-lang/rust/commit/0ad48e41c1b1eb6386449254258603eab7d91620", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ad48e41c1b1eb6386449254258603eab7d91620/comments", "author": {"login": "bombless", "id": 1296393, "node_id": "MDQ6VXNlcjEyOTYzOTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1296393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bombless", "html_url": "https://github.com/bombless", "followers_url": "https://api.github.com/users/bombless/followers", "following_url": "https://api.github.com/users/bombless/following{/other_user}", "gists_url": "https://api.github.com/users/bombless/gists{/gist_id}", "starred_url": "https://api.github.com/users/bombless/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bombless/subscriptions", "organizations_url": "https://api.github.com/users/bombless/orgs", "repos_url": "https://api.github.com/users/bombless/repos", "events_url": "https://api.github.com/users/bombless/events{/privacy}", "received_events_url": "https://api.github.com/users/bombless/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bombless", "id": 1296393, "node_id": "MDQ6VXNlcjEyOTYzOTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1296393?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bombless", "html_url": "https://github.com/bombless", "followers_url": "https://api.github.com/users/bombless/followers", "following_url": "https://api.github.com/users/bombless/following{/other_user}", "gists_url": "https://api.github.com/users/bombless/gists{/gist_id}", "starred_url": "https://api.github.com/users/bombless/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bombless/subscriptions", "organizations_url": "https://api.github.com/users/bombless/orgs", "repos_url": "https://api.github.com/users/bombless/repos", "events_url": "https://api.github.com/users/bombless/events{/privacy}", "received_events_url": "https://api.github.com/users/bombless/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9d439b41777103b8b349635e68e9ccd3648aabc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/9d439b41777103b8b349635e68e9ccd3648aabc2", "html_url": "https://github.com/rust-lang/rust/commit/9d439b41777103b8b349635e68e9ccd3648aabc2"}], "stats": {"total": 509, "additions": 507, "deletions": 2}, "files": [{"sha": "17658675ee2807bc1a660b4a57cb2cd82a883dac", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=0ad48e41c1b1eb6386449254258603eab7d91620", "patch": "@@ -364,7 +364,7 @@ pub fn all_traits<'a>(ccx: &'a CrateCtxt) -> AllTraits<'a> {\n }\n \n pub struct AllTraits<'a> {\n-    borrow: cell::Ref<'a Option<AllTraitsVec>>,\n+    borrow: cell::Ref<'a, Option<AllTraitsVec>>,\n     idx: usize\n }\n "}, {"sha": "47ea8d556fa0b42479766a26c34dc4c7a2cfd6c3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 32, "deletions": 1, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0ad48e41c1b1eb6386449254258603eab7d91620", "patch": "@@ -902,7 +902,9 @@ impl<'a> Parser<'a> {\n     pub fn bump(&mut self) -> PResult<()> {\n         self.last_span = self.span;\n         // Stash token for error recovery (sometimes; clone is not necessarily cheap).\n-        self.last_token = if self.token.is_ident() || self.token.is_path() {\n+        self.last_token = if self.token.is_ident() ||\n+                          self.token.is_path() ||\n+                          self.token == token::Comma {\n             Some(Box::new(self.token.clone()))\n         } else {\n             None\n@@ -3807,8 +3809,37 @@ impl<'a> Parser<'a> {\n     fn parse_generic_values_after_lt(&mut self) -> PResult<(Vec<ast::Lifetime>,\n                                                             Vec<P<Ty>>,\n                                                             Vec<P<TypeBinding>>)> {\n+        let span_lo = self.span.lo;\n         let lifetimes = try!(self.parse_lifetimes(token::Comma));\n \n+        let missing_comma = !lifetimes.is_empty() &&\n+                            !self.token.is_like_gt() &&\n+                            self.last_token\n+                                .as_ref().map_or(true,\n+                                                 |x| &**x != &token::Comma);\n+\n+        if missing_comma {\n+\n+            let msg = format!(\"expected `,` or `>` after lifetime \\\n+                              name, found `{}`\",\n+                              self.this_token_to_string());\n+            self.span_err(self.span, &msg);\n+\n+            let span_hi = self.span.hi;\n+            let span_hi = if self.parse_ty_nopanic().is_ok() {\n+                self.span.hi\n+            } else {\n+                span_hi\n+            };\n+\n+            let msg = format!(\"did you mean a single argument type &'a Type, \\\n+                              or did you mean the comma-separated arguments \\\n+                              'a, Type?\");\n+            self.span_note(mk_sp(span_lo, span_hi), &msg);\n+\n+            self.abort_if_errors()\n+        }\n+\n         // First parse types.\n         let (types, returned) = try!(self.parse_seq_to_gt_or_return(\n             Some(token::Comma),"}, {"sha": "9ec66f19dfe0a4e0ab67803b0f0953e34c25c5a3", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=0ad48e41c1b1eb6386449254258603eab7d91620", "patch": "@@ -173,6 +173,14 @@ pub enum Token {\n }\n \n impl Token {\n+    /// Returns `true` if the token starts with '>'.\n+    pub fn is_like_gt(&self) -> bool {\n+        match *self {\n+            BinOp(Shr) | BinOpEq(Shr) | Gt | Ge => true,\n+            _ => false,\n+        }\n+    }\n+\n     /// Returns `true` if the token can appear at the start of an expression.\n     pub fn can_begin_expr(&self) -> bool {\n         match *self {"}, {"sha": "5b4f9942d28b606fd41e60e9f562b6059c3a89e0", "filename": "src/test/compile-fail/issue-20616-1.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Fcompile-fail%2Fissue-20616-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Fcompile-fail%2Fissue-20616-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-1.rs?ref=0ad48e41c1b1eb6386449254258603eab7d91620", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// We need all these 9 issue-20616-N.rs files\n+// becase we can only catch one parsing error at a time\n+\n+\n+\n+type Type_1_<'a, T> = &'a T;\n+\n+\n+type Type_1<'a T> = &'a T; //~ error: expected `,` or `>` after lifetime name, found `T`\n+\n+\n+//type Type_2 = Type_1_<'static ()>; // error: expected `,` or `>` after lifetime name, found `(`\n+\n+\n+//type Type_3<T> = Box<T,,>; // error: expected type, found `,`\n+\n+\n+//type Type_4<T> = Type_1_<'static,, T>; // error: expected type, found `,`\n+\n+\n+type Type_5_<'a> = Type_1_<'a, ()>;\n+\n+\n+//type Type_5<'a> = Type_1_<'a, (),,>; // error: expected type, found `,`\n+\n+\n+//type Type_6 = Type_5_<'a,,>; // error: expected type, found `,`\n+\n+\n+//type Type_7 = Box<(),,>; // error: expected type, found `,`\n+\n+\n+//type Type_8<'a,,> = &'a (); // error: expected ident, found `,`\n+\n+\n+//type Type_9<T,,> = Box<T>; // error: expected ident, found `,`"}, {"sha": "65305ff3ac82f2490af1e89841018ce241943b86", "filename": "src/test/compile-fail/issue-20616-2.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Fcompile-fail%2Fissue-20616-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Fcompile-fail%2Fissue-20616-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-2.rs?ref=0ad48e41c1b1eb6386449254258603eab7d91620", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// We need all these 9 issue-20616-N.rs files\n+// becase we can only catch one parsing error at a time\n+\n+\n+\n+type Type_1_<'a, T> = &'a T;\n+\n+\n+//type Type_1<'a T> = &'a T; // error: expected `,` or `>` after lifetime name, found `T`\n+\n+\n+type Type_2 = Type_1_<'static ()>; //~ error: expected `,` or `>` after lifetime name, found `(`\n+\n+\n+//type Type_3<T> = Box<T,,>; // error: expected type, found `,`\n+\n+\n+//type Type_4<T> = Type_1_<'static,, T>; // error: expected type, found `,`\n+\n+\n+type Type_5_<'a> = Type_1_<'a, ()>;\n+\n+\n+//type Type_5<'a> = Type_1_<'a, (),,>; // error: expected type, found `,`\n+\n+\n+//type Type_6 = Type_5_<'a,,>; // error: expected type, found `,`\n+\n+\n+//type Type_7 = Box<(),,>; // error: expected type, found `,`\n+\n+\n+//type Type_8<'a,,> = &'a (); // error: expected ident, found `,`\n+\n+\n+//type Type_9<T,,> = Box<T>; // error: expected ident, found `,`"}, {"sha": "101f81019d97cd4e3de9e3aa3e729f81de80ff98", "filename": "src/test/compile-fail/issue-20616-3.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Fcompile-fail%2Fissue-20616-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Fcompile-fail%2Fissue-20616-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-3.rs?ref=0ad48e41c1b1eb6386449254258603eab7d91620", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// We need all these 9 issue-20616-N.rs files\n+// becase we can only catch one parsing error at a time\n+\n+\n+\n+type Type_1_<'a, T> = &'a T;\n+\n+\n+//type Type_1<'a T> = &'a T; // error: expected `,` or `>` after lifetime name, found `T`\n+\n+\n+//type Type_2 = Type_1_<'static ()>; // error: expected `,` or `>` after lifetime name, found `(`\n+\n+\n+type Type_3<T> = Box<T,,>; //~ error: expected type, found `,`\n+\n+\n+//type Type_4<T> = Type_1_<'static,, T>; // error: expected type, found `,`\n+\n+\n+type Type_5_<'a> = Type_1_<'a, ()>;\n+\n+\n+//type Type_5<'a> = Type_1_<'a, (),,>; // error: expected type, found `,`\n+\n+\n+//type Type_6 = Type_5_<'a,,>; // error: expected type, found `,`\n+\n+\n+//type Type_7 = Box<(),,>; // error: expected type, found `,`\n+\n+\n+//type Type_8<'a,,> = &'a (); // error: expected ident, found `,`\n+\n+\n+//type Type_9<T,,> = Box<T>; // error: expected ident, found `,`"}, {"sha": "6450e9ed68cb710fba8db89e817f112d0a4f3cdb", "filename": "src/test/compile-fail/issue-20616-4.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Fcompile-fail%2Fissue-20616-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Fcompile-fail%2Fissue-20616-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-4.rs?ref=0ad48e41c1b1eb6386449254258603eab7d91620", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// We need all these 9 issue-20616-N.rs files\n+// becase we can only catch one parsing error at a time\n+\n+\n+\n+type Type_1_<'a, T> = &'a T;\n+\n+\n+//type Type_1<'a T> = &'a T; // error: expected `,` or `>` after lifetime name, found `T`\n+\n+\n+//type Type_2 = Type_1_<'static ()>; // error: expected `,` or `>` after lifetime name, found `(`\n+\n+\n+//type Type_3<T> = Box<T,,>; // error: expected type, found `,`\n+\n+\n+type Type_4<T> = Type_1_<'static,, T>; //~ error: expected type, found `,`\n+\n+\n+type Type_5_<'a> = Type_1_<'a, ()>;\n+\n+\n+//type Type_5<'a> = Type_1_<'a, (),,>; // error: expected type, found `,`\n+\n+\n+//type Type_6 = Type_5_<'a,,>; // error: expected type, found `,`\n+\n+\n+//type Type_7 = Box<(),,>; // error: expected type, found `,`\n+\n+\n+//type Type_8<'a,,> = &'a (); // error: expected ident, found `,`\n+\n+\n+//type Type_9<T,,> = Box<T>; // error: expected ident, found `,`"}, {"sha": "d1840427ad8b24319c1517f883cfd3f1ce7ccb68", "filename": "src/test/compile-fail/issue-20616-5.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Fcompile-fail%2Fissue-20616-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Fcompile-fail%2Fissue-20616-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-5.rs?ref=0ad48e41c1b1eb6386449254258603eab7d91620", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// We need all these 9 issue-20616-N.rs files\n+// becase we can only catch one parsing error at a time\n+\n+\n+\n+type Type_1_<'a, T> = &'a T;\n+\n+\n+//type Type_1<'a T> = &'a T; // error: expected `,` or `>` after lifetime name, found `T`\n+\n+\n+//type Type_2 = Type_1_<'static ()>; // error: expected `,` or `>` after lifetime name, found `(`\n+\n+\n+//type Type_3<T> = Box<T,,>; // error: expected type, found `,`\n+\n+\n+//type Type_4<T> = Type_1_<'static,, T>; // error: expected type, found `,`\n+\n+\n+type Type_5_<'a> = Type_1_<'a, ()>;\n+\n+\n+type Type_5<'a> = Type_1_<'a, (),,>; //~ error: expected type, found `,`\n+\n+\n+//type Type_6 = Type_5_<'a,,>; // error: expected type, found `,`\n+\n+\n+//type Type_7 = Box<(),,>; // error: expected type, found `,`\n+\n+\n+//type Type_8<'a,,> = &'a (); // error: expected ident, found `,`\n+\n+\n+//type Type_9<T,,> = Box<T>; // error: expected ident, found `,`"}, {"sha": "b0b5bc653f6d0bdfc55976cff3296f0b56869d68", "filename": "src/test/compile-fail/issue-20616-6.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Fcompile-fail%2Fissue-20616-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Fcompile-fail%2Fissue-20616-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-6.rs?ref=0ad48e41c1b1eb6386449254258603eab7d91620", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// We need all these 9 issue-20616-N.rs files\n+// becase we can only catch one parsing error at a time\n+\n+\n+\n+type Type_1_<'a, T> = &'a T;\n+\n+\n+//type Type_1<'a T> = &'a T; // error: expected `,` or `>` after lifetime name, found `T`\n+\n+\n+//type Type_2 = Type_1_<'static ()>; // error: expected `,` or `>` after lifetime name, found `(`\n+\n+\n+//type Type_3<T> = Box<T,,>; // error: expected type, found `,`\n+\n+\n+//type Type_4<T> = Type_1_<'static,, T>; // error: expected type, found `,`\n+\n+\n+type Type_5_<'a> = Type_1_<'a, ()>;\n+\n+\n+//type Type_5<'a> = Type_1_<'a, (),,>; // error: expected type, found `,`\n+\n+\n+type Type_6 = Type_5_<'a,,>; //~ error: expected type, found `,`\n+\n+\n+//type Type_7 = Box<(),,>; // error: expected type, found `,`\n+\n+\n+//type Type_8<'a,,> = &'a (); // error: expected ident, found `,`\n+\n+\n+//type Type_9<T,,> = Box<T>; // error: expected ident, found `,`"}, {"sha": "0958f8b4ed22c4a538a9db4ec48a7d0d54ad7e47", "filename": "src/test/compile-fail/issue-20616-7.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Fcompile-fail%2Fissue-20616-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Fcompile-fail%2Fissue-20616-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-7.rs?ref=0ad48e41c1b1eb6386449254258603eab7d91620", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// We need all these 9 issue-20616-N.rs files\n+// becase we can only catch one parsing error at a time\n+\n+\n+\n+type Type_1_<'a, T> = &'a T;\n+\n+\n+//type Type_1<'a T> = &'a T; // error: expected `,` or `>` after lifetime name, found `T`\n+\n+\n+//type Type_2 = Type_1_<'static ()>; // error: expected `,` or `>` after lifetime name, found `(`\n+\n+\n+//type Type_3<T> = Box<T,,>; // error: expected type, found `,`\n+\n+\n+//type Type_4<T> = Type_1_<'static,, T>; // error: expected type, found `,`\n+\n+\n+type Type_5_<'a> = Type_1_<'a, ()>;\n+\n+\n+//type Type_5<'a> = Type_1_<'a, (),,>; // error: expected type, found `,`\n+\n+\n+//type Type_6 = Type_5_<'a,,>; // error: expected type, found `,`\n+\n+\n+type Type_7 = Box<(),,>; //~ error: expected type, found `,`\n+\n+\n+//type Type_8<'a,,> = &'a (); // error: expected ident, found `,`\n+\n+\n+//type Type_9<T,,> = Box<T>; // error: expected ident, found `,`"}, {"sha": "07ced7a97ba96db862c30a9bb4ace18a00191fc3", "filename": "src/test/compile-fail/issue-20616-8.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Fcompile-fail%2Fissue-20616-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Fcompile-fail%2Fissue-20616-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-8.rs?ref=0ad48e41c1b1eb6386449254258603eab7d91620", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// We need all these 9 issue-20616-N.rs files\n+// becase we can only catch one parsing error at a time\n+\n+\n+\n+type Type_1_<'a, T> = &'a T;\n+\n+\n+//type Type_1<'a T> = &'a T; // error: expected `,` or `>` after lifetime name, found `T`\n+\n+\n+//type Type_2 = Type_1_<'static ()>; // error: expected `,` or `>` after lifetime name, found `(`\n+\n+\n+//type Type_3<T> = Box<T,,>; // error: expected type, found `,`\n+\n+\n+//type Type_4<T> = Type_1_<'static,, T>; // error: expected type, found `,`\n+\n+\n+type Type_5_<'a> = Type_1_<'a, ()>;\n+\n+\n+//type Type_5<'a> = Type_1_<'a, (),,>; // error: expected type, found `,`\n+\n+\n+//type Type_6 = Type_5_<'a,,>; // error: expected type, found `,`\n+\n+\n+//type Type_7 = Box<(),,>; // error: expected type, found `,`\n+\n+\n+type Type_8<'a,,> = &'a (); //~ error: expected ident, found `,`\n+\n+\n+//type Type_9<T,,> = Box<T>; // error: expected ident, found `,`"}, {"sha": "7847dea69ef59486e411755f10769af5abdb1708", "filename": "src/test/compile-fail/issue-20616-9.rs", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Fcompile-fail%2Fissue-20616-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Fcompile-fail%2Fissue-20616-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-9.rs?ref=0ad48e41c1b1eb6386449254258603eab7d91620", "patch": "@@ -0,0 +1,46 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// We need all these 9 issue-20616-N.rs files\n+// becase we can only catch one parsing error at a time\n+\n+\n+\n+type Type_1_<'a, T> = &'a T;\n+\n+\n+//type Type_1<'a T> = &'a T; // error: expected `,` or `>` after lifetime name, found `T`\n+\n+\n+//type Type_2 = Type_1_<'static ()>; // error: expected `,` or `>` after lifetime name, found `(`\n+\n+\n+//type Type_3<T> = Box<T,,>; // error: expected type, found `,`\n+\n+\n+//type Type_4<T> = Type_1_<'static,, T>; // error: expected type, found `,`\n+\n+\n+type Type_5_<'a> = Type_1_<'a, ()>;\n+\n+\n+//type Type_5<'a> = Type_1_<'a, (),,>; // error: expected type, found `,`\n+\n+\n+//type Type_6 = Type_5_<'a,,>; // error: expected type, found `,`\n+\n+\n+//type Type_7 = Box<(),,>; // error: expected type, found `,`\n+\n+\n+//type Type_8<'a,,> = &'a (); // error: expected ident, found `,`\n+\n+\n+type Type_9<T,,> = Box<T>; //~ error: expected ident, found `,`"}, {"sha": "e6b256f7e8413888dcd7c9362666b284001bcb7f", "filename": "src/test/run-pass/issue-20616.rs", "status": "added", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Frun-pass%2Fissue-20616.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0ad48e41c1b1eb6386449254258603eab7d91620/src%2Ftest%2Frun-pass%2Fissue-20616.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20616.rs?ref=0ad48e41c1b1eb6386449254258603eab7d91620", "patch": "@@ -0,0 +1,52 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+type MyType<'a, T> = &'a T;\n+\n+// combine lifetime bounds and type arguments in usual way\n+type TypeA<'a> = MyType<'a, ()>;\n+\n+// ensure token `>>` works fine\n+type TypeB = Box<TypeA<'static>>;\n+type TypeB_ = Box<TypeA<'static,>>;\n+\n+// trailing comma when combine lifetime bounds and type arguments\n+type TypeC<'a> = MyType<'a, (),>;\n+\n+// normal lifetime bounds\n+type TypeD = TypeA<'static>;\n+\n+// trailing comma on lifetime bounds\n+type TypeE = TypeA<'static,>;\n+\n+// normal type arugment\n+type TypeF<T> = Box<T>;\n+\n+// type argument with trailing comma\n+type TypeG<T> = Box<T,>;\n+\n+// trailing comma on liftime defs\n+type TypeH<'a,> = &'a ();\n+\n+// trailing comma on type argument\n+type TypeI<T,> = T;\n+\n+static STATIC: () = ();\n+\n+fn main() {\n+\n+    // ensure token `>=` works fine\n+    let _: TypeA<'static>= &STATIC;\n+    let _: TypeA<'static,>= &STATIC;\n+\n+    // ensure token `>>=` works fine\n+    let _: Box<TypeA<'static>>= Box::new(&STATIC);\n+    let _: Box<TypeA<'static,>>= Box::new(&STATIC);\n+}"}]}