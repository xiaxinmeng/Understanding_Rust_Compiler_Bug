{"sha": "b3f814fd304bca454b8444edacdf39c2e9704233", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzZjgxNGZkMzA0YmNhNDU0Yjg0NDRlZGFjZGYzOWMyZTk3MDQyMzM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2019-02-05T15:29:20Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-05T15:29:20Z"}, "message": "Rollup merge of #58182 - jethrogb:jb/sgx-bytebuffer-len-0, r=joshtriplett\n\nSGX target: handle empty user buffers correctly\n\nAlso, expose correct items in `os::fortanix_sgx::usercalls::alloc`\n\n* [read_alloc documentation](https://edp.fortanix.com/docs/api/fortanix_sgx_abi/struct.Usercalls.html#method.read_alloc)\n* [Clarified ByteBuffer documentation](https://github.com/fortanix/rust-sgx/pull/94/files#diff-ca843ad9e25cacd63a80579c0f7efa56)\n\nr? @joshtriplett", "tree": {"sha": "7c8acaf4172c4d8ab9fae4e8381146744462d8d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c8acaf4172c4d8ab9fae4e8381146744462d8d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3f814fd304bca454b8444edacdf39c2e9704233", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcWavQCRBK7hj4Ov3rIwAAdHIIAIcCOIw/hDgCBMPt9o8ZuBha\n24ma32wp4UWJrSo4GSK1AdWd67ko8i9E9EHyI0OKUd/71qBs/Dakb1v+ye+6Shj3\n5znKiOLoFB9219Tl5OW3pv6aX6rYPPdJomqPyUnuNuDZldx8buPoz81apRTpCW00\njkru8LeSgz4X1I6ZhWOSL8slakmTZh/rYS42Qaa62tJtDU3sPO6wn+nV2QcVvlW7\nCz+WGEtZvWvwhLcJkmi9CUSGzf/4R9b9K03qGT+VwdgVbMkxKE0lnGZZ8Cgi4E9v\nbwr+ZzLoMEYQZb/xy16wa81M959aN3iawfxi4r1v9grX4YqKNMOrE6SxhuXcBco=\n=TQqV\n-----END PGP SIGNATURE-----\n", "payload": "tree 7c8acaf4172c4d8ab9fae4e8381146744462d8d3\nparent 7e72d06c7dd3d1219b03c3f811273561ee9b2589\nparent d89ebdd475ceaa35173e7d39dfdf23f8b7318745\nauthor kennytm <kennytm@gmail.com> 1549380560 +0900\ncommitter GitHub <noreply@github.com> 1549380560 +0900\n\nRollup merge of #58182 - jethrogb:jb/sgx-bytebuffer-len-0, r=joshtriplett\n\nSGX target: handle empty user buffers correctly\n\nAlso, expose correct items in `os::fortanix_sgx::usercalls::alloc`\n\n* [read_alloc documentation](https://edp.fortanix.com/docs/api/fortanix_sgx_abi/struct.Usercalls.html#method.read_alloc)\n* [Clarified ByteBuffer documentation](https://github.com/fortanix/rust-sgx/pull/94/files#diff-ca843ad9e25cacd63a80579c0f7efa56)\n\nr? @joshtriplett\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3f814fd304bca454b8444edacdf39c2e9704233", "html_url": "https://github.com/rust-lang/rust/commit/b3f814fd304bca454b8444edacdf39c2e9704233", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3f814fd304bca454b8444edacdf39c2e9704233/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7e72d06c7dd3d1219b03c3f811273561ee9b2589", "url": "https://api.github.com/repos/rust-lang/rust/commits/7e72d06c7dd3d1219b03c3f811273561ee9b2589", "html_url": "https://github.com/rust-lang/rust/commit/7e72d06c7dd3d1219b03c3f811273561ee9b2589"}, {"sha": "d89ebdd475ceaa35173e7d39dfdf23f8b7318745", "url": "https://api.github.com/repos/rust-lang/rust/commits/d89ebdd475ceaa35173e7d39dfdf23f8b7318745", "html_url": "https://github.com/rust-lang/rust/commit/d89ebdd475ceaa35173e7d39dfdf23f8b7318745"}], "stats": {"total": 12, "additions": 9, "deletions": 3}, "files": [{"sha": "bd6f4b4465b24e5dc5343c3f30dfe5db0aefac13", "filename": "src/libstd/os/fortanix_sgx/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3f814fd304bca454b8444edacdf39c2e9704233/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f814fd304bca454b8444edacdf39c2e9704233/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Ffortanix_sgx%2Fmod.rs?ref=b3f814fd304bca454b8444edacdf39c2e9704233", "patch": "@@ -16,7 +16,7 @@ pub mod usercalls {\n     /// Primitives for allocating memory in userspace as well as copying data\n     /// to and from user memory.\n     pub mod alloc {\n-        pub use sys::abi::usercalls::alloc;\n+        pub use sys::abi::usercalls::alloc::*;\n     }\n \n     /// Lowest-level interfaces to usercalls and usercall ABI type definitions."}, {"sha": "2efbaa9b1487ae2ce779f3ff9f57094482dbc005", "filename": "src/libstd/sys/sgx/abi/usercalls/alloc.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b3f814fd304bca454b8444edacdf39c2e9704233/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f814fd304bca454b8444edacdf39c2e9704233/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Falloc.rs?ref=b3f814fd304bca454b8444edacdf39c2e9704233", "patch": "@@ -537,7 +537,12 @@ impl UserRef<super::raw::ByteBuffer> {\n     pub fn copy_user_buffer(&self) -> Vec<u8> {\n         unsafe {\n             let buf = self.to_enclave();\n-            User::from_raw_parts(buf.data as _, buf.len).to_enclave()\n+            if buf.len > 0 {\n+                User::from_raw_parts(buf.data as _, buf.len).to_enclave()\n+            } else {\n+                // Mustn't look at `data` or call `free` if `len` is `0`.\n+                Vec::with_capacity(0)\n+            }\n         }\n     }\n }"}, {"sha": "bae044b906b1621514f638d9252b0c83d8a42c3a", "filename": "src/libstd/sys/sgx/abi/usercalls/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b3f814fd304bca454b8444edacdf39c2e9704233/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3f814fd304bca454b8444edacdf39c2e9704233/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fabi%2Fusercalls%2Fmod.rs?ref=b3f814fd304bca454b8444edacdf39c2e9704233", "patch": "@@ -22,7 +22,8 @@ pub fn read(fd: Fd, buf: &mut [u8]) -> IoResult<usize> {\n #[unstable(feature = \"sgx_platform\", issue = \"56975\")]\n pub fn read_alloc(fd: Fd) -> IoResult<Vec<u8>> {\n     unsafe {\n-        let mut userbuf = alloc::User::<ByteBuffer>::uninitialized();\n+        let userbuf = ByteBuffer { data: ::ptr::null_mut(), len: 0 };\n+        let mut userbuf = alloc::User::new_from_enclave(&userbuf);\n         raw::read_alloc(fd, userbuf.as_raw_mut_ptr()).from_sgx_result()?;\n         Ok(userbuf.copy_user_buffer())\n     }"}]}