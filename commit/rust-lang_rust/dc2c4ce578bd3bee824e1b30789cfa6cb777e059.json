{"sha": "dc2c4ce578bd3bee824e1b30789cfa6cb777e059", "node_id": "C_kwDOAAsO6NoAKGRjMmM0Y2U1NzhiZDNiZWU4MjRlMWIzMDc4OWNmYTZjYjc3N2UwNTk", "commit": {"author": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-11-24T03:39:47Z"}, "committer": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2022-12-21T03:30:37Z"}, "message": "Update code based on PR comments\n\nThis patch does the following:\n- Refactor some repeated lines into a single one\n- Split the `ungated_async_fn_caller` lint into multiple lines, and make\n  one of those lines only print out on nightly\n- Use test revisions instead of copying an existing test", "tree": {"sha": "52c388a3ce5238b51c10933d2b0069cf75775f29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52c388a3ce5238b51c10933d2b0069cf75775f29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc2c4ce578bd3bee824e1b30789cfa6cb777e059", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc2c4ce578bd3bee824e1b30789cfa6cb777e059", "html_url": "https://github.com/rust-lang/rust/commit/dc2c4ce578bd3bee824e1b30789cfa6cb777e059", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc2c4ce578bd3bee824e1b30789cfa6cb777e059/comments", "author": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04926e0534be77ed1b33602057d60d0bb14c1d66", "url": "https://api.github.com/repos/rust-lang/rust/commits/04926e0534be77ed1b33602057d60d0bb14c1d66", "html_url": "https://github.com/rust-lang/rust/commit/04926e0534be77ed1b33602057d60d0bb14c1d66"}], "stats": {"total": 157, "additions": 51, "deletions": 106}, "files": [{"sha": "a36a511bd4aa64e436313be0dcde0493aa4a5666", "filename": "compiler/rustc_error_messages/locales/en-US/lint.ftl", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dc2c4ce578bd3bee824e1b30789cfa6cb777e059/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/dc2c4ce578bd3bee824e1b30789cfa6cb777e059/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Flint.ftl?ref=dc2c4ce578bd3bee824e1b30789cfa6cb777e059", "patch": "@@ -350,7 +350,8 @@ lint_builtin_mutable_transmutes =\n \n lint_builtin_unstable_features = unstable feature\n \n-lint_ungated_async_fn_track_caller = `#[track_caller]` on async functions is a no-op, unless the `closure_track_caller` feature is enabled\n+lint_ungated_async_fn_track_caller = `#[track_caller]` on async functions is a no-op\n+     .suggestion = enable this feature\n \n lint_builtin_unreachable_pub = unreachable `pub` {$what}\n     .suggestion = consider restricting its visibility"}, {"sha": "e90572cb23880873fd96a1e3d76862ed2b0fc677", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc2c4ce578bd3bee824e1b30789cfa6cb777e059/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2c4ce578bd3bee824e1b30789cfa6cb777e059/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=dc2c4ce578bd3bee824e1b30789cfa6cb777e059", "patch": "@@ -1404,10 +1404,16 @@ impl<'tcx> LateLintPass<'tcx> for UngatedAsyncFnTrackCaller {\n             if let Some(attr) = maybe_track_caller {\n                 cx.struct_span_lint(\n                     UNGATED_ASYNC_FN_TRACK_CALLER,\n-                    span.with_hi(attr.span.hi()),\n+                    attr.span,\n                     fluent::lint_ungated_async_fn_track_caller,\n-                    |lint| lint,\n-                    );\n+                    |lint| {\n+                        lint.span_label(span, \"this function will not propagate the caller location\");\n+                        if cx.tcx.sess.is_nightly_build() {\n+                            lint.span_suggestion(attr.span, fluent::suggestion, \"#[closure_track_caller]\", Applicability::MachineApplicable);\n+                        }\n+                        lint\n+                    }\n+                );\n             }\n         }\n     }"}, {"sha": "5ef40408e2693c09df65d1659999ac3d7c3697f6", "filename": "src/test/ui/async-await/track-caller/issue-104588-no-op-panic-track-caller.rs", "status": "removed", "additions": 0, "deletions": 78, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/04926e0534be77ed1b33602057d60d0bb14c1d66/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-panic-track-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04926e0534be77ed1b33602057d60d0bb14c1d66/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-panic-track-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-panic-track-caller.rs?ref=04926e0534be77ed1b33602057d60d0bb14c1d66", "patch": "@@ -1,78 +0,0 @@\n-// run-pass\n-// edition:2021\n-// needs-unwind\n-\n-\n-use std::future::Future;\n-use std::panic;\n-use std::sync::{Arc, Mutex};\n-use std::task::{Context, Poll, Wake};\n-use std::thread::{self, Thread};\n-\n-/// A waker that wakes up the current thread when called.\n-struct ThreadWaker(Thread);\n-\n-impl Wake for ThreadWaker {\n-    fn wake(self: Arc<Self>) {\n-        self.0.unpark();\n-    }\n-}\n-\n-/// Run a future to completion on the current thread.\n-fn block_on<T>(fut: impl Future<Output = T>) -> T {\n-    // Pin the future so it can be polled.\n-    let mut fut = Box::pin(fut);\n-\n-    // Create a new context to be passed to the future.\n-    let t = thread::current();\n-    let waker = Arc::new(ThreadWaker(t)).into();\n-    let mut cx = Context::from_waker(&waker);\n-\n-    // Run the future to completion.\n-    loop {\n-        match fut.as_mut().poll(&mut cx) {\n-            Poll::Ready(res) => return res,\n-            Poll::Pending => thread::park(),\n-        }\n-    }\n-}\n-\n-async fn bar() {\n-    panic!()\n-}\n-\n-async fn foo() {\n-    bar().await\n-}\n-\n-#[track_caller] //~ WARN `#[track_caller]` on async functions is a no-op, unless the `closure_track_caller` feature is enabled [ungated_async_fn_track_caller]\n-async fn bar_track_caller() {\n-    panic!()\n-}\n-\n-async fn foo_track_caller() {\n-    bar_track_caller().await\n-}\n-\n-fn panicked_at(f: impl FnOnce() + panic::UnwindSafe) -> u32 {\n-    let loc = Arc::new(Mutex::new(None));\n-\n-    let hook = panic::take_hook();\n-    {\n-        let loc = loc.clone();\n-        panic::set_hook(Box::new(move |info| {\n-            *loc.lock().unwrap() = info.location().map(|loc| loc.line())\n-        }));\n-    }\n-    panic::catch_unwind(f).unwrap_err();\n-    panic::set_hook(hook);\n-    let x = loc.lock().unwrap().unwrap();\n-    x\n-}\n-\n-fn main() {\n-    assert_eq!(panicked_at(|| block_on(foo())), 41);\n-    // Since the `closure_track_caller` feature is not enabled, the\n-    // `track_caller annotation does nothing.\n-    assert_eq!(panicked_at(|| block_on(foo_track_caller())), 50);\n-}"}, {"sha": "5bfd9ed8490fd3d0dc39525c9f683c61f573803c", "filename": "src/test/ui/async-await/track-caller/issue-104588-no-op-panic-track-caller.stderr", "status": "removed", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/04926e0534be77ed1b33602057d60d0bb14c1d66/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-panic-track-caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/04926e0534be77ed1b33602057d60d0bb14c1d66/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-panic-track-caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-panic-track-caller.stderr?ref=04926e0534be77ed1b33602057d60d0bb14c1d66", "patch": "@@ -1,12 +0,0 @@\n-warning: `#[track_caller]` on async functions is a no-op, unless the `closure_track_caller` feature is enabled\n-  --> $DIR/issue-104588-no-op-panic-track-caller.rs:48:16\n-   |\n-LL |   #[track_caller]\n-   |  ________________^\n-LL | | async fn bar_track_caller() {\n-   | |_\n-   |\n-   = note: `#[warn(ungated_async_fn_track_caller)]` on by default\n-\n-warning: 1 warning emitted\n-"}, {"sha": "6443e14296da884ace58a3f1fed5a1db97647751", "filename": "src/test/ui/async-await/track-caller/issue-104588-no-op-track-caller.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dc2c4ce578bd3bee824e1b30789cfa6cb777e059/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-track-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2c4ce578bd3bee824e1b30789cfa6cb777e059/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-track-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-track-caller.rs?ref=dc2c4ce578bd3bee824e1b30789cfa6cb777e059", "patch": "@@ -1,7 +1,7 @@\n // check-pass\n // edition:2021\n \n-#[track_caller] //~ WARN `#[track_caller]` on async functions is a no-op, unless the `closure_track_caller` feature is enabled\n+#[track_caller] //~ WARN `#[track_caller]` on async functions is a no-op\n async fn foo() {}\n \n fn main() {"}, {"sha": "bd39c9d092cac88c6a91a087629faedb5453becb", "filename": "src/test/ui/async-await/track-caller/issue-104588-no-op-track-caller.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dc2c4ce578bd3bee824e1b30789cfa6cb777e059/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-track-caller.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2c4ce578bd3bee824e1b30789cfa6cb777e059/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-track-caller.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fissue-104588-no-op-track-caller.stderr?ref=dc2c4ce578bd3bee824e1b30789cfa6cb777e059", "patch": "@@ -1,10 +1,10 @@\n-warning: `#[track_caller]` on async functions is a no-op, unless the `closure_track_caller` feature is enabled\n-  --> $DIR/issue-104588-no-op-track-caller.rs:4:16\n+warning: `#[track_caller]` on async functions is a no-op\n+  --> $DIR/issue-104588-no-op-track-caller.rs:4:1\n    |\n-LL |   #[track_caller]\n-   |  ________________^\n-LL | | async fn foo() {}\n-   | |_\n+LL | #[track_caller]\n+   | ^^^^^^^^^^^^^^^ help: enable this feature: `#[closure_track_caller]`\n+LL | async fn foo() {}\n+   | ----------------- this function will not propagate the caller location\n    |\n    = note: `#[warn(ungated_async_fn_track_caller)]` on by default\n "}, {"sha": "e0201f2238ddb8fb661216192733bef0ebb85602", "filename": "src/test/ui/async-await/track-caller/panic-track-caller.nofeat.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dc2c4ce578bd3bee824e1b30789cfa6cb777e059/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.nofeat.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dc2c4ce578bd3bee824e1b30789cfa6cb777e059/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.nofeat.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.nofeat.stderr?ref=dc2c4ce578bd3bee824e1b30789cfa6cb777e059", "patch": "@@ -0,0 +1,14 @@\n+warning: `#[track_caller]` on async functions is a no-op\n+  --> $DIR/panic-track-caller.rs:50:1\n+   |\n+LL |   #[track_caller]\n+   |   ^^^^^^^^^^^^^^^ help: enable this feature: `#[closure_track_caller]`\n+LL | / async fn bar_track_caller() {\n+LL | |     panic!()\n+LL | | }\n+   | |_- this function will not propagate the caller location\n+   |\n+   = note: `#[warn(ungated_async_fn_track_caller)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "ee37e64be4fa374e6aeab0e7364b174c4debb740", "filename": "src/test/ui/async-await/track-caller/panic-track-caller.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/dc2c4ce578bd3bee824e1b30789cfa6cb777e059/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc2c4ce578bd3bee824e1b30789cfa6cb777e059/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Ftrack-caller%2Fpanic-track-caller.rs?ref=dc2c4ce578bd3bee824e1b30789cfa6cb777e059", "patch": "@@ -1,7 +1,9 @@\n // run-pass\n // edition:2021\n+// revisions: feat nofeat\n // needs-unwind\n-#![feature(closure_track_caller, async_closure, stmt_expr_attributes)]\n+#![feature(async_closure, stmt_expr_attributes)]\n+#![cfg_attr(feat, feature(closure_track_caller))]\n \n use std::future::Future;\n use std::panic;\n@@ -45,7 +47,7 @@ async fn foo() {\n     bar().await\n }\n \n-#[track_caller]\n+#[track_caller] //[nofeat]~ WARN `#[track_caller]` on async functions is a no-op\n async fn bar_track_caller() {\n     panic!()\n }\n@@ -91,8 +93,20 @@ fn panicked_at(f: impl FnOnce() + panic::UnwindSafe) -> u32 {\n }\n \n fn main() {\n-    assert_eq!(panicked_at(|| block_on(foo())), 41);\n-    assert_eq!(panicked_at(|| block_on(foo_track_caller())), 54);\n-    assert_eq!(panicked_at(|| block_on(foo_assoc())), 67);\n+    assert_eq!(panicked_at(|| block_on(foo())), 43);\n+\n+    #[cfg(feat)]\n+    assert_eq!(panicked_at(|| block_on(foo_track_caller())), 56);\n+    #[cfg(nofeat)]\n+    assert_eq!(panicked_at(|| block_on(foo_track_caller())), 52);\n+\n+    #[cfg(feat)]\n+    assert_eq!(panicked_at(|| block_on(foo_assoc())), 69);\n+    #[cfg(nofeat)]\n+    assert_eq!(panicked_at(|| block_on(foo_assoc())), 64);\n+\n+    #[cfg(feat)]\n+    assert_eq!(panicked_at(|| block_on(foo_closure())), 76);\n+    #[cfg(feat)]\n     assert_eq!(panicked_at(|| block_on(foo_closure())), 74);\n }"}]}