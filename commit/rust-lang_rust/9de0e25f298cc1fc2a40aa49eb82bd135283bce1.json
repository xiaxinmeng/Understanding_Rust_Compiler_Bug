{"sha": "9de0e25f298cc1fc2a40aa49eb82bd135283bce1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkZTBlMjVmMjk4Y2MxZmMyYTQwYWE0OWViODJiZDEzNTI4M2JjZTE=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-06-11T15:10:20Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2015-06-11T15:10:20Z"}, "message": "Merge pull request #94 from Manishearth/unicode\n\nfirst unicode lint: zero_width_space", "tree": {"sha": "10163eaf7654d6ae66160a346edf64a9d5e5a4ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/10163eaf7654d6ae66160a346edf64a9d5e5a4ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9de0e25f298cc1fc2a40aa49eb82bd135283bce1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9de0e25f298cc1fc2a40aa49eb82bd135283bce1", "html_url": "https://github.com/rust-lang/rust/commit/9de0e25f298cc1fc2a40aa49eb82bd135283bce1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9de0e25f298cc1fc2a40aa49eb82bd135283bce1/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad8841c20b86e7f35544bc124050e3d124f45d09", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad8841c20b86e7f35544bc124050e3d124f45d09", "html_url": "https://github.com/rust-lang/rust/commit/ad8841c20b86e7f35544bc124050e3d124f45d09"}, {"sha": "0e5b62c8d83046595f1be9231af3564644c4cfc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/0e5b62c8d83046595f1be9231af3564644c4cfc1", "html_url": "https://github.com/rust-lang/rust/commit/0e5b62c8d83046595f1be9231af3564644c4cfc1"}], "stats": {"total": 88, "additions": 84, "deletions": 4}, "files": [{"sha": "979fb47985a6a176d3d57ce283a030635bbd8567", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9de0e25f298cc1fc2a40aa49eb82bd135283bce1/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/9de0e25f298cc1fc2a40aa49eb82bd135283bce1/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=9de0e25f298cc1fc2a40aa49eb82bd135283bce1", "patch": "@@ -29,6 +29,7 @@ Lints included in this crate:\n  - `redundant_closure` warns on creating a closure where none is needed, e.g. `|x| foo(x)`, where `foo` can be used directly\n  - `inline_always`: Warns on `#[inline(always)]`, because in most cases it is a bad idea\n  - `collapsible_if`: Warns on cases where two nested `if`-expressions can be collapsed into one, e.g. `if x { if y { foo() } }` can be written as `if x && y { foo() }`\n+ - `zero_width_space`: Warns on encountering a unicode zero-width space\n \n To use, add the following lines to your Cargo.toml:\n "}, {"sha": "647128e0f0c4bfe3346d8b6725360f6ade2c3044", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9de0e25f298cc1fc2a40aa49eb82bd135283bce1/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9de0e25f298cc1fc2a40aa49eb82bd135283bce1/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=9de0e25f298cc1fc2a40aa49eb82bd135283bce1", "patch": "@@ -26,6 +26,7 @@ pub mod mut_mut;\n pub mod len_zero;\n pub mod attrs;\n pub mod collapsible_if;\n+pub mod unicode;\n pub mod utils;\n \n #[plugin_registrar]\n@@ -49,6 +50,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n     reg.register_lint_pass(box misc::CmpOwned as LintPassObject);\n     reg.register_lint_pass(box attrs::AttrPass as LintPassObject);\n     reg.register_lint_pass(box collapsible_if::CollapsibleIf as LintPassObject);\n+    reg.register_lint_pass(box unicode::Unicode as LintPassObject);\n     \n     reg.register_lint_group(\"clippy\", vec![types::BOX_VEC, types::LINKEDLIST,\n                                            misc::SINGLE_MATCH, misc::STR_TO_STRING,\n@@ -67,5 +69,6 @@ pub fn plugin_registrar(reg: &mut Registry) {\n                                            len_zero::LEN_WITHOUT_IS_EMPTY,\n                                            attrs::INLINE_ALWAYS,\n                                            collapsible_if::COLLAPSIBLE_IF,\n+                                           unicode::ZERO_WIDTH_SPACE,\n                                            ]);\n }"}, {"sha": "ec609fd26186d5164705ed77c5f7425047a3066d", "filename": "src/misc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9de0e25f298cc1fc2a40aa49eb82bd135283bce1/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9de0e25f298cc1fc2a40aa49eb82bd135283bce1/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=9de0e25f298cc1fc2a40aa49eb82bd135283bce1", "patch": "@@ -7,8 +7,8 @@ use rustc::lint::{Context, LintPass, LintArray, Lint, Level};\n use rustc::middle::ty::{self, expr_ty, ty_str, ty_ptr, ty_rptr, ty_float};\n use syntax::codemap::{Span, Spanned};\n \n-\n use types::span_note_and_lint;\n+use utils::match_path;\n \n pub fn walk_ty<'t>(ty: ty::Ty<'t>) -> ty::Ty<'t> {\n \tmatch ty.sty {\n@@ -248,8 +248,8 @@ fn check_to_owned(cx: &Context, expr: &Expr, other_span: Span) {\n \t\t},\n \t\t&ExprCall(ref path, _) => {\n \t\t\tif let &ExprPath(None, ref path) = &path.node {\n-\t\t\t\tif path.segments.iter().zip([\"String\", \"from_str\"].iter()).all(\n-\t\t\t\t\t\t|(seg, name)| &seg.identifier.as_str() == name) {\n+\t\t\t\tif match_path(path, &[\"String\", \"from_str\"]) ||\n+\t\t\t\t\t\tmatch_path(path, &[\"String\", \"from\"]) {\n \t\t\t\t\tcx.span_lint(CMP_OWNED, expr.span, &format!(\n \t\t\t\t\t\"this creates an owned instance just for comparison. \\\n \t\t\t\t\tConsider using {}.as_slice() to compare without allocation\","}, {"sha": "3ffcf699c26f95f038cec2e78b47a93c03a4c3bc", "filename": "src/unicode.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/9de0e25f298cc1fc2a40aa49eb82bd135283bce1/src%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9de0e25f298cc1fc2a40aa49eb82bd135283bce1/src%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Funicode.rs?ref=9de0e25f298cc1fc2a40aa49eb82bd135283bce1", "patch": "@@ -0,0 +1,45 @@\n+use rustc::lint::*;\n+use syntax::ast::*;\n+use syntax::codemap::{BytePos, Span};\n+\n+declare_lint!{ pub ZERO_WIDTH_SPACE, Deny, \"Zero-width space is confusing\" }\n+\n+#[derive(Copy, Clone)]\n+pub struct Unicode;\n+\n+impl LintPass for Unicode {\n+\tfn get_lints(&self) -> LintArray {\n+        lint_array!(ZERO_WIDTH_SPACE)\n+    }\n+    \n+    fn check_expr(&mut self, cx: &Context, expr: &Expr) {\n+\t\tif let ExprLit(ref lit) = expr.node {\n+\t\t\tif let LitStr(ref string, _) = lit.node {\n+\t\t\t\tcheck_str(cx, string, lit.span)\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n+\n+fn check_str(cx: &Context, string: &str, span: Span) {\n+\tlet mut start: Option<usize> = None;\n+\tfor (i, c) in string.char_indices() {\n+\t\tif c == '\\u{200B}' {\n+\t\t\tif start.is_none() { start = Some(i); }\n+\t\t} else {\n+\t\t\tlint_zero_width(cx, span, start);\n+\t\t\tstart = None;\n+\t\t}\n+\t}\n+\tlint_zero_width(cx, span, start);\n+}\n+\n+fn lint_zero_width(cx: &Context, span: Span, start: Option<usize>) {\n+\tstart.map(|index| {\n+\t\tcx.span_lint(ZERO_WIDTH_SPACE, Span {\n+\t\t\tlo: span.lo + BytePos(index as u32),\n+\t\t\thi: span.lo + BytePos(index as u32),\n+\t\t\texpn_id: span.expn_id,\n+\t\t}, \"Zero-width space detected. Consider using \\\\u{200B}\")\n+\t});\n+}"}, {"sha": "d7399e6d3aad16ebd8617454edf6e2f7849f31ec", "filename": "tests/compile-fail/cmp_owned.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9de0e25f298cc1fc2a40aa49eb82bd135283bce1/tests%2Fcompile-fail%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9de0e25f298cc1fc2a40aa49eb82bd135283bce1/tests%2Fcompile-fail%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcmp_owned.rs?ref=9de0e25f298cc1fc2a40aa49eb82bd135283bce1", "patch": "@@ -13,5 +13,11 @@ fn main() {\n \t\n \tx != \"foo\".to_owned(); //~ERROR this creates an owned instance\n \t\n-\tx != String::from_str(\"foo\"); //~ERROR this creates an owned instance\n+\t#[allow(deprecated)] // for from_str\n+\tfn old_timey(x : &str) {\n+\t\tx != String::from_str(\"foo\"); //~ERROR this creates an owned instance\n+\t}\n+\told_timey(x);\n+\t\n+\tx != String::from(\"foo\"); //~ERROR this creates an owned instance\n }"}, {"sha": "0385f45cc5ea0886660a163e01cc51f4195d52bf", "filename": "tests/compile-fail/unicode.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/9de0e25f298cc1fc2a40aa49eb82bd135283bce1/tests%2Fcompile-fail%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9de0e25f298cc1fc2a40aa49eb82bd135283bce1/tests%2Fcompile-fail%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funicode.rs?ref=9de0e25f298cc1fc2a40aa49eb82bd135283bce1", "patch": "@@ -0,0 +1,25 @@\n+#![feature(plugin)]\n+#![plugin(clippy)]\n+\n+#[deny(zero_width_space)]\n+fn zero() {\n+\tprint!(\"Here >\u200b< is a ZWS, and \u200banother\"); \n+\t\t\t\t//~^ ERROR Zero-width space detected. Consider using \\u{200B}\n+\t\t\t\t\t\t\t\t//~^^ ERROR Zero-width space detected. Consider using \\u{200B}\n+}\n+\n+//#[deny(unicode_canon)]\n+fn canon() {\n+\tprint!(\"\u0300ah?\"); //not yet ~ERROR Non-canonical unicode sequence detected. Consider using \u00e0\n+}\n+\n+//#[deny(ascii_only)]\n+fn uni() {\n+\tprintln!(\"\u00dcben!\"); //not yet ~ERROR Unicode literal detected. Consider using \\u{FC}\n+}\n+\n+fn main() {\n+\tzero();\n+\tuni();\n+\tcanon();\n+}"}]}