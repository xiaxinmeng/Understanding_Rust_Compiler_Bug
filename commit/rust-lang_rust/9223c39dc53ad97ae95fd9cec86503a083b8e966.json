{"sha": "9223c39dc53ad97ae95fd9cec86503a083b8e966", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMjNjMzlkYzUzYWQ5N2FlOTVmZDljZWM4NjUwM2EwODNiOGU5NjY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-16T00:32:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-16T00:32:21Z"}, "message": "Auto merge of #45191 - petrochenkov:yesar, r=Mark-Simulacrum\n\nrustbuild: Support specifying archiver and linker explicitly\n\nWith this patch `x.py test` passes without toolchain being in `PATH` if `cc`, `cxx`, `ar`, `linker` and `gdb` are specified in `config.toml` (except for a few `run-make` tests using `nm`).\n\nFixes https://github.com/rust-lang/rust/issues/41821\nr? @Mark-Simulacrum", "tree": {"sha": "0260e0115d326e3a030bc19e448c0e69e7e18ea5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0260e0115d326e3a030bc19e448c0e69e7e18ea5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9223c39dc53ad97ae95fd9cec86503a083b8e966", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9223c39dc53ad97ae95fd9cec86503a083b8e966", "html_url": "https://github.com/rust-lang/rust/commit/9223c39dc53ad97ae95fd9cec86503a083b8e966", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9223c39dc53ad97ae95fd9cec86503a083b8e966/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29ed49fb0aeab444adcfe16ef3d04e5e910fb08d", "url": "https://api.github.com/repos/rust-lang/rust/commits/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d", "html_url": "https://github.com/rust-lang/rust/commit/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d"}, {"sha": "0577b60832627e774337456ecbb9bfc9dbb0b0fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/0577b60832627e774337456ecbb9bfc9dbb0b0fc", "html_url": "https://github.com/rust-lang/rust/commit/0577b60832627e774337456ecbb9bfc9dbb0b0fc"}], "stats": {"total": 338, "additions": 213, "deletions": 125}, "files": [{"sha": "f50543e18a764845d76fab7ef6eb990d850f1fb1", "filename": "config.toml.example", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -300,7 +300,7 @@\n # =============================================================================\n [target.x86_64-unknown-linux-gnu]\n \n-# C compiler to be used to compiler C code and link Rust code. Note that the\n+# C compiler to be used to compiler C code. Note that the\n # default value is platform specific, and if not specified it may also depend on\n # what platform is crossing to what platform.\n #cc = \"cc\"\n@@ -309,6 +309,15 @@\n # This is only used for host targets.\n #cxx = \"c++\"\n \n+# Archiver to be used to assemble static libraries compiled from C/C++ code.\n+# Note: an absolute path should be used, otherwise LLVM build will break.\n+#ar = \"ar\"\n+\n+# Linker to be used to link Rust code. Note that the\n+# default value is platform specific, and if not specified it may also depend on\n+# what platform is crossing to what platform.\n+#linker = \"cc\"\n+\n # Path to the `llvm-config` binary of the installation of a custom LLVM to link\n # against. Note that if this is specifed we don't compile LLVM at all for this\n # target."}, {"sha": "2b95be27ffea7513dca5c794992931dc07da06ce", "filename": "src/Cargo.lock", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -1994,7 +1994,6 @@ dependencies = [\n  \"alloc_jemalloc 0.0.0\",\n  \"alloc_system 0.0.0\",\n  \"build_helper 0.1.0\",\n- \"cc 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"collections 0.0.0\",\n  \"compiler_builtins 0.0.0\",\n  \"core 0.0.0\","}, {"sha": "aeeda85e924ef1657825aa28993741867561f2c6", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -120,10 +120,9 @@ fn main() {\n             cmd.arg(\"-L\").arg(&root);\n         }\n \n-        // Pass down extra flags, commonly used to configure `-Clinker` when\n-        // cross compiling.\n-        if let Ok(s) = env::var(\"RUSTC_FLAGS\") {\n-            cmd.args(&s.split(\" \").filter(|s| !s.is_empty()).collect::<Vec<_>>());\n+        // Override linker if necessary.\n+        if let Ok(target_linker) = env::var(\"RUSTC_TARGET_LINKER\") {\n+            cmd.arg(format!(\"-Clinker={}\", target_linker));\n         }\n \n         // Pass down incremental directory, if any.\n@@ -252,6 +251,11 @@ fn main() {\n         if env::var_os(\"RUSTC_FORCE_UNSTABLE\").is_some() {\n             cmd.arg(\"-Z\").arg(\"force-unstable-if-unmarked\");\n         }\n+    } else {\n+        // Override linker if necessary.\n+        if let Ok(host_linker) = env::var(\"RUSTC_HOST_LINKER\") {\n+            cmd.arg(format!(\"-Clinker={}\", host_linker));\n+        }\n     }\n \n     let color = match env::var(\"RUSTC_COLOR\") {"}, {"sha": "4e975adc9721cdef87aac309521056c7816ba39c", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -47,6 +47,9 @@ fn main() {\n     if env::var_os(\"RUSTC_FORCE_UNSTABLE\").is_some() {\n         cmd.arg(\"-Z\").arg(\"force-unstable-if-unmarked\");\n     }\n+    if let Some(linker) = env::var_os(\"RUSTC_TARGET_LINKER\") {\n+        cmd.arg(\"--linker\").arg(linker).arg(\"-Z\").arg(\"unstable-options\");\n+    }\n \n     // Bootstrap's Cargo-command builder sets this variable to the current Rust version; let's pick\n     // it up so we can make rustdoc print this into the docs"}, {"sha": "6480b5a619c03c48d51138fc394229ebfb2b9bc2", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 41, "deletions": 15, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -413,13 +413,15 @@ impl<'a> Builder<'a> {\n     pub fn rustdoc_cmd(&self, host: Interned<String>) -> Command {\n         let mut cmd = Command::new(&self.out.join(\"bootstrap/debug/rustdoc\"));\n         let compiler = self.compiler(self.top_stage, host);\n-        cmd\n-            .env(\"RUSTC_STAGE\", compiler.stage.to_string())\n-            .env(\"RUSTC_SYSROOT\", self.sysroot(compiler))\n-            .env(\"RUSTC_LIBDIR\", self.sysroot_libdir(compiler, self.build.build))\n-            .env(\"CFG_RELEASE_CHANNEL\", &self.build.config.channel)\n-            .env(\"RUSTDOC_REAL\", self.rustdoc(host))\n-            .env(\"RUSTDOC_CRATE_VERSION\", self.build.rust_version());\n+        cmd.env(\"RUSTC_STAGE\", compiler.stage.to_string())\n+           .env(\"RUSTC_SYSROOT\", self.sysroot(compiler))\n+           .env(\"RUSTC_LIBDIR\", self.sysroot_libdir(compiler, self.build.build))\n+           .env(\"CFG_RELEASE_CHANNEL\", &self.build.config.channel)\n+           .env(\"RUSTDOC_REAL\", self.rustdoc(host))\n+           .env(\"RUSTDOC_CRATE_VERSION\", self.build.rust_version());\n+        if let Some(linker) = self.build.linker(host) {\n+            cmd.env(\"RUSTC_TARGET_LINKER\", linker);\n+        }\n         cmd\n     }\n \n@@ -482,8 +484,14 @@ impl<'a> Builder<'a> {\n              } else {\n                  PathBuf::from(\"/path/to/nowhere/rustdoc/not/required\")\n              })\n-             .env(\"TEST_MIRI\", self.config.test_miri.to_string())\n-             .env(\"RUSTC_FLAGS\", self.rustc_flags(target).join(\" \"));\n+             .env(\"TEST_MIRI\", self.config.test_miri.to_string());\n+\n+        if let Some(host_linker) = self.build.linker(compiler.host) {\n+            cargo.env(\"RUSTC_HOST_LINKER\", host_linker);\n+        }\n+        if let Some(target_linker) = self.build.linker(target) {\n+            cargo.env(\"RUSTC_TARGET_LINKER\", target_linker);\n+        }\n \n         if mode != Mode::Tool {\n             // Tools don't get debuginfo right now, e.g. cargo and rls don't\n@@ -557,17 +565,35 @@ impl<'a> Builder<'a> {\n \n         cargo.env(\"RUSTC_VERBOSE\", format!(\"{}\", self.verbosity));\n \n-        // Specify some various options for build scripts used throughout\n-        // the build.\n+        // Throughout the build Cargo can execute a number of build scripts\n+        // compiling C/C++ code and we need to pass compilers, archivers, flags, etc\n+        // obtained previously to those build scripts.\n+        // Build scripts use either the `cc` crate or `configure/make` so we pass\n+        // the options through environment variables that are fetched and understood by both.\n         //\n         // FIXME: the guard against msvc shouldn't need to be here\n         if !target.contains(\"msvc\") {\n-            cargo.env(format!(\"CC_{}\", target), self.cc(target))\n-                 .env(format!(\"AR_{}\", target), self.ar(target).unwrap()) // only msvc is None\n-                 .env(format!(\"CFLAGS_{}\", target), self.cflags(target).join(\" \"));\n+            let cc = self.cc(target);\n+            cargo.env(format!(\"CC_{}\", target), cc)\n+                 .env(\"CC\", cc);\n+\n+            let cflags = self.cflags(target).join(\" \");\n+            cargo.env(format!(\"CFLAGS_{}\", target), cflags.clone())\n+                 .env(\"CFLAGS\", cflags.clone());\n+\n+            if let Some(ar) = self.ar(target) {\n+                let ranlib = format!(\"{} s\", ar.display());\n+                cargo.env(format!(\"AR_{}\", target), ar)\n+                     .env(\"AR\", ar)\n+                     .env(format!(\"RANLIB_{}\", target), ranlib.clone())\n+                     .env(\"RANLIB\", ranlib);\n+            }\n \n             if let Ok(cxx) = self.cxx(target) {\n-                 cargo.env(format!(\"CXX_{}\", target), cxx);\n+                cargo.env(format!(\"CXX_{}\", target), cxx)\n+                     .env(\"CXX\", cxx)\n+                     .env(format!(\"CXXFLAGS_{}\", target), cflags.clone())\n+                     .env(\"CXXFLAGS\", cflags);\n             }\n         }\n "}, {"sha": "6e3e3c920291d00e51738f284ce8498e699bb8d5", "filename": "src/bootstrap/cc_detect.rs", "status": "modified", "additions": 45, "deletions": 7, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbootstrap%2Fcc_detect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbootstrap%2Fcc_detect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcc_detect.rs?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -31,20 +31,51 @@\n //! ever be probed for. Instead the compilers found here will be used for\n //! everything.\n \n+use std::collections::HashSet;\n+use std::{env, iter};\n+use std::path::{Path, PathBuf};\n use std::process::Command;\n-use std::iter;\n \n-use build_helper::{cc2ar, output};\n+use build_helper::output;\n use cc;\n \n use Build;\n use config::Target;\n use cache::Interned;\n \n+// The `cc` crate doesn't provide a way to obtain a path to the detected archiver,\n+// so use some simplified logic here. First we respect the environment variable `AR`, then\n+// try to infer the archiver path from the C compiler path.\n+// In the future this logic should be replaced by calling into the `cc` crate.\n+fn cc2ar(cc: &Path, target: &str) -> Option<PathBuf> {\n+    if let Some(ar) = env::var_os(\"AR\") {\n+        Some(PathBuf::from(ar))\n+    } else if target.contains(\"msvc\") {\n+        None\n+    } else if target.contains(\"musl\") {\n+        Some(PathBuf::from(\"ar\"))\n+    } else if target.contains(\"openbsd\") {\n+        Some(PathBuf::from(\"ar\"))\n+    } else {\n+        let parent = cc.parent().unwrap();\n+        let file = cc.file_name().unwrap().to_str().unwrap();\n+        for suffix in &[\"gcc\", \"cc\", \"clang\"] {\n+            if let Some(idx) = file.rfind(suffix) {\n+                let mut file = file[..idx].to_owned();\n+                file.push_str(\"ar\");\n+                return Some(parent.join(&file));\n+            }\n+        }\n+        Some(parent.join(file))\n+    }\n+}\n+\n pub fn find(build: &mut Build) {\n     // For all targets we're going to need a C compiler for building some shims\n     // and such as well as for being a linker for Rust code.\n-    for target in build.targets.iter().chain(&build.hosts).cloned().chain(iter::once(build.build)) {\n+    let targets = build.targets.iter().chain(&build.hosts).cloned().chain(iter::once(build.build))\n+                               .collect::<HashSet<_>>();\n+    for target in targets.into_iter() {\n         let mut cfg = cc::Build::new();\n         cfg.cargo_metadata(false).opt_level(0).warnings(false).debug(false)\n            .target(&target).host(&build.build);\n@@ -57,16 +88,23 @@ pub fn find(build: &mut Build) {\n         }\n \n         let compiler = cfg.get_compiler();\n-        let ar = cc2ar(compiler.path(), &target);\n+        let ar = if let ar @ Some(..) = config.and_then(|c| c.ar.clone()) {\n+            ar\n+        } else {\n+            cc2ar(compiler.path(), &target)\n+        };\n+\n         build.verbose(&format!(\"CC_{} = {:?}\", &target, compiler.path()));\n-        if let Some(ref ar) = ar {\n+        build.cc.insert(target, compiler);\n+        if let Some(ar) = ar {\n             build.verbose(&format!(\"AR_{} = {:?}\", &target, ar));\n+            build.ar.insert(target, ar);\n         }\n-        build.cc.insert(target, (compiler, ar));\n     }\n \n     // For all host triples we need to find a C++ compiler as well\n-    for host in build.hosts.iter().cloned().chain(iter::once(build.build)) {\n+    let hosts = build.hosts.iter().cloned().chain(iter::once(build.build)).collect::<HashSet<_>>();\n+    for host in hosts.into_iter() {\n         let mut cfg = cc::Build::new();\n         cfg.cargo_metadata(false).opt_level(0).warnings(false).debug(false).cpp(true)\n            .target(&host).host(&build.build);"}, {"sha": "d9ee63eef8cdd95ceb2b35fd1ca1d672c1c57431", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -747,12 +747,14 @@ impl Step for Compiletest {\n             flags.push(\"-g\".to_string());\n         }\n \n-        let mut hostflags = build.rustc_flags(compiler.host);\n-        hostflags.extend(flags.clone());\n+        if let Some(linker) = build.linker(target) {\n+            cmd.arg(\"--linker\").arg(linker);\n+        }\n+\n+        let hostflags = flags.clone();\n         cmd.arg(\"--host-rustcflags\").arg(hostflags.join(\" \"));\n \n-        let mut targetflags = build.rustc_flags(target);\n-        targetflags.extend(flags);\n+        let mut targetflags = flags.clone();\n         targetflags.push(format!(\"-Lnative={}\",\n                                  build.test_helpers_out(target).display()));\n         cmd.arg(\"--target-rustcflags\").arg(targetflags.join(\" \"));\n@@ -806,6 +808,9 @@ impl Step for Compiletest {\n                 .arg(\"--cflags\").arg(build.cflags(target).join(\" \"))\n                 .arg(\"--llvm-components\").arg(llvm_components.trim())\n                 .arg(\"--llvm-cxxflags\").arg(llvm_cxxflags.trim());\n+                if let Some(ar) = build.ar(target) {\n+                    cmd.arg(\"--ar\").arg(ar);\n+                }\n             }\n         }\n         if suite == \"run-make\" && !build.config.llvm_enabled {\n@@ -831,7 +836,7 @@ impl Step for Compiletest {\n         // Note that if we encounter `PATH` we make sure to append to our own `PATH`\n         // rather than stomp over it.\n         if target.contains(\"msvc\") {\n-            for &(ref k, ref v) in build.cc[&target].0.env() {\n+            for &(ref k, ref v) in build.cc[&target].env() {\n                 if k != \"PATH\" {\n                     cmd.env(k, v);\n                 }"}, {"sha": "69e0f58f1cd068f8639cb4737bdf6ae73461cd79", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -143,6 +143,8 @@ pub struct Target {\n     pub jemalloc: Option<PathBuf>,\n     pub cc: Option<PathBuf>,\n     pub cxx: Option<PathBuf>,\n+    pub ar: Option<PathBuf>,\n+    pub linker: Option<PathBuf>,\n     pub ndk: Option<PathBuf>,\n     pub crt_static: Option<bool>,\n     pub musl_root: Option<PathBuf>,\n@@ -282,6 +284,8 @@ struct TomlTarget {\n     jemalloc: Option<String>,\n     cc: Option<String>,\n     cxx: Option<String>,\n+    ar: Option<String>,\n+    linker: Option<String>,\n     android_ndk: Option<String>,\n     crt_static: Option<bool>,\n     musl_root: Option<String>,\n@@ -484,8 +488,10 @@ impl Config {\n                 if let Some(ref s) = cfg.android_ndk {\n                     target.ndk = Some(env::current_dir().unwrap().join(s));\n                 }\n-                target.cxx = cfg.cxx.clone().map(PathBuf::from);\n                 target.cc = cfg.cc.clone().map(PathBuf::from);\n+                target.cxx = cfg.cxx.clone().map(PathBuf::from);\n+                target.ar = cfg.ar.clone().map(PathBuf::from);\n+                target.linker = cfg.linker.clone().map(PathBuf::from);\n                 target.crt_static = cfg.crt_static.clone();\n                 target.musl_root = cfg.musl_root.clone().map(PathBuf::from);\n                 target.qemu_rootfs = cfg.qemu_rootfs.clone().map(PathBuf::from);"}, {"sha": "6ac919d3fbdda544922e5cf1ef678d9e75e53991", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 18, "deletions": 20, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -240,10 +240,11 @@ pub struct Build {\n     lldb_python_dir: Option<String>,\n \n     // Runtime state filled in later on\n-    // target -> (cc, ar)\n-    cc: HashMap<Interned<String>, (cc::Tool, Option<PathBuf>)>,\n-    // host -> (cc, ar)\n+    // C/C++ compilers and archiver for all targets\n+    cc: HashMap<Interned<String>, cc::Tool>,\n     cxx: HashMap<Interned<String>, cc::Tool>,\n+    ar: HashMap<Interned<String>, PathBuf>,\n+    // Misc\n     crates: HashMap<Interned<String>, Crate>,\n     is_sudo: bool,\n     ci_env: CiEnv,\n@@ -324,6 +325,7 @@ impl Build {\n             rls_info,\n             cc: HashMap::new(),\n             cxx: HashMap::new(),\n+            ar: HashMap::new(),\n             crates: HashMap::new(),\n             lldb_version: None,\n             lldb_python_dir: None,\n@@ -612,15 +614,15 @@ impl Build {\n \n     /// Returns the path to the C compiler for the target specified.\n     fn cc(&self, target: Interned<String>) -> &Path {\n-        self.cc[&target].0.path()\n+        self.cc[&target].path()\n     }\n \n     /// Returns a list of flags to pass to the C compiler for the target\n     /// specified.\n     fn cflags(&self, target: Interned<String>) -> Vec<String> {\n         // Filter out -O and /O (the optimization flags) that we picked up from\n         // cc-rs because the build scripts will determine that for themselves.\n-        let mut base = self.cc[&target].0.args().iter()\n+        let mut base = self.cc[&target].args().iter()\n                            .map(|s| s.to_string_lossy().into_owned())\n                            .filter(|s| !s.starts_with(\"-O\") && !s.starts_with(\"/O\"))\n                            .collect::<Vec<_>>();\n@@ -644,7 +646,7 @@ impl Build {\n \n     /// Returns the path to the `ar` archive utility for the target specified.\n     fn ar(&self, target: Interned<String>) -> Option<&Path> {\n-        self.cc[&target].1.as_ref().map(|p| &**p)\n+        self.ar.get(&target).map(|p| &**p)\n     }\n \n     /// Returns the path to the C++ compiler for the target specified.\n@@ -657,21 +659,17 @@ impl Build {\n         }\n     }\n \n-    /// Returns flags to pass to the compiler to generate code for `target`.\n-    fn rustc_flags(&self, target: Interned<String>) -> Vec<String> {\n-        // New flags should be added here with great caution!\n-        //\n-        // It's quite unfortunate to **require** flags to generate code for a\n-        // target, so it should only be passed here if absolutely necessary!\n-        // Most default configuration should be done through target specs rather\n-        // than an entry here.\n-\n-        let mut base = Vec::new();\n-        if target != self.config.build && !target.contains(\"msvc\") &&\n-            !target.contains(\"emscripten\") {\n-            base.push(format!(\"-Clinker={}\", self.cc(target).display()));\n+    /// Returns the path to the linker for the given target if it needs to be overriden.\n+    fn linker(&self, target: Interned<String>) -> Option<&Path> {\n+        if let Some(linker) = self.config.target_config.get(&target)\n+                                                       .and_then(|c| c.linker.as_ref()) {\n+            Some(linker)\n+        } else if target != self.config.build &&\n+                  !target.contains(\"msvc\") && !target.contains(\"emscripten\") {\n+            Some(self.cc(target))\n+        } else {\n+            None\n         }\n-        base\n     }\n \n     /// Returns if this target should statically link the C runtime, if specified"}, {"sha": "941ea96bbec23c8b327acf9a6a3471a11c6c21fe", "filename": "src/bootstrap/native.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbootstrap%2Fnative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbootstrap%2Fnative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fnative.rs?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -227,6 +227,13 @@ impl Step for Llvm {\n             cfg.build_arg(\"-j\").build_arg(build.jobs().to_string());\n             cfg.define(\"CMAKE_C_FLAGS\", build.cflags(target).join(\" \"));\n             cfg.define(\"CMAKE_CXX_FLAGS\", build.cflags(target).join(\" \"));\n+            if let Some(ar) = build.ar(target) {\n+                if ar.is_absolute() {\n+                    // LLVM build breaks if `CMAKE_AR` is a relative path, for some reason it\n+                    // tries to resolve this path in the LLVM build directory.\n+                    cfg.define(\"CMAKE_AR\", sanitize_cc(ar));\n+                }\n+            }\n         };\n \n         configure_compilers(&mut cfg);"}, {"sha": "662c56d728dfe9f0d7b34aa80adf77a4b456e9a9", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -561,7 +561,7 @@ impl<'a> Builder<'a> {\n         if compiler.host.contains(\"msvc\") {\n             let curpaths = env::var_os(\"PATH\").unwrap_or_default();\n             let curpaths = env::split_paths(&curpaths).collect::<Vec<_>>();\n-            for &(ref k, ref v) in self.cc[&compiler.host].0.env() {\n+            for &(ref k, ref v) in self.cc[&compiler.host].env() {\n                 if k != \"PATH\" {\n                     continue\n                 }"}, {"sha": "97723e260f6cb4404aa04618a546f474db70b024", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -138,27 +138,6 @@ pub fn gnu_target(target: &str) -> String {\n     }\n }\n \n-pub fn cc2ar(cc: &Path, target: &str) -> Option<PathBuf> {\n-    if target.contains(\"msvc\") {\n-        None\n-    } else if target.contains(\"musl\") {\n-        Some(PathBuf::from(\"ar\"))\n-    } else if target.contains(\"openbsd\") {\n-        Some(PathBuf::from(\"ar\"))\n-    } else {\n-        let parent = cc.parent().unwrap();\n-        let file = cc.file_name().unwrap().to_str().unwrap();\n-        for suffix in &[\"gcc\", \"cc\", \"clang\"] {\n-            if let Some(idx) = file.rfind(suffix) {\n-                let mut file = file[..idx].to_owned();\n-                file.push_str(\"ar\");\n-                return Some(parent.join(&file));\n-            }\n-        }\n-        Some(parent.join(file))\n-    }\n-}\n-\n pub fn make(host: &str) -> PathBuf {\n     if host.contains(\"bitrig\") || host.contains(\"dragonfly\") ||\n         host.contains(\"freebsd\") || host.contains(\"netbsd\") ||"}, {"sha": "65e035d4ffdef39bde2246c1fb80d36dd31806f3", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 1, "deletions": 14, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -63,24 +63,13 @@ fn main() {\n         _ => return,\n     };\n \n-    let compiler = cc::Build::new().get_compiler();\n-    // only msvc returns None for ar so unwrap is okay\n-    let ar = build_helper::cc2ar(compiler.path(), &target).unwrap();\n-    let cflags = compiler.args()\n-        .iter()\n-        .map(|s| s.to_str().unwrap())\n-        .collect::<Vec<_>>()\n-        .join(\" \");\n-\n     let mut cmd = Command::new(\"sh\");\n     cmd.arg(native.src_dir.join(\"configure\")\n                           .to_str()\n                           .unwrap()\n                           .replace(\"C:\\\\\", \"/c/\")\n                           .replace(\"\\\\\", \"/\"))\n        .current_dir(&native.out_dir)\n-       .env(\"CC\", compiler.path())\n-       .env(\"EXTRA_CFLAGS\", cflags.clone())\n        // jemalloc generates Makefile deps using GCC's \"-MM\" flag. This means\n        // that GCC will run the preprocessor, and only the preprocessor, over\n        // jemalloc's source files. If we don't specify CPPFLAGS, then at least\n@@ -89,9 +78,7 @@ fn main() {\n        // passed to GCC, and then GCC won't define the\n        // \"__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4\" macro that jemalloc needs to\n        // select an atomic operation implementation.\n-       .env(\"CPPFLAGS\", cflags.clone())\n-       .env(\"AR\", &ar)\n-       .env(\"RANLIB\", format!(\"{} s\", ar.display()));\n+       .env(\"CPPFLAGS\", env::var_os(\"CFLAGS\").unwrap_or_default());\n \n     if target.contains(\"ios\") {\n         cmd.arg(\"--disable-tls\");"}, {"sha": "890e1169c05918e1ea8a9024fe11acd39602cebe", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -246,6 +246,9 @@ pub fn opts() -> Vec<RustcOptGroup> {\n         unstable(\"crate-version\", |o| {\n             o.optopt(\"\", \"crate-version\", \"crate version to print into documentation\", \"VERSION\")\n         }),\n+        unstable(\"linker\", |o| {\n+            o.optopt(\"\", \"linker\", \"linker used for building executable test code\", \"PATH\")\n+        }),\n     ]\n }\n \n@@ -357,15 +360,16 @@ pub fn main_args(args: &[String]) -> isize {\n     let playground_url = matches.opt_str(\"playground-url\");\n     let maybe_sysroot = matches.opt_str(\"sysroot\").map(PathBuf::from);\n     let display_warnings = matches.opt_present(\"display-warnings\");\n+    let linker = matches.opt_str(\"linker\");\n \n     match (should_test, markdown_input) {\n         (true, true) => {\n             return markdown::test(input, cfgs, libs, externs, test_args, maybe_sysroot, render_type,\n-                                  display_warnings)\n+                                  display_warnings, linker)\n         }\n         (true, false) => {\n             return test::run(input, cfgs, libs, externs, test_args, crate_name, maybe_sysroot,\n-                             render_type, display_warnings)\n+                             render_type, display_warnings, linker)\n         }\n         (false, true) => return markdown::render(input,\n                                                  output.unwrap_or(PathBuf::from(\"doc\")),"}, {"sha": "fe6bd985bb6181fc5c65f8eaf22a2746d7458fbe", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -142,7 +142,7 @@ pub fn render(input: &str, mut output: PathBuf, matches: &getopts::Matches,\n /// Run any tests/code examples in the markdown file `input`.\n pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n             mut test_args: Vec<String>, maybe_sysroot: Option<PathBuf>,\n-            render_type: RenderType, display_warnings: bool) -> isize {\n+            render_type: RenderType, display_warnings: bool, linker: Option<String>) -> isize {\n     let input_str = match load_string(input) {\n         Ok(s) => s,\n         Err(LoadStringError::ReadFail) => return 1,\n@@ -154,7 +154,7 @@ pub fn test(input: &str, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n     let mut collector = Collector::new(input.to_string(), cfgs, libs, externs,\n                                        true, opts, maybe_sysroot, None,\n                                        Some(input.to_owned()),\n-                                       render_type);\n+                                       render_type, linker);\n     if render_type == RenderType::Pulldown {\n         old_find_testable_code(&input_str, &mut collector, DUMMY_SP);\n         find_testable_code(&input_str, &mut collector, DUMMY_SP);"}, {"sha": "8b2c8d2da395a1f87074507b17e8cb2118d04e49", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 13, "deletions": 5, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -61,7 +61,8 @@ pub fn run(input: &str,\n            crate_name: Option<String>,\n            maybe_sysroot: Option<PathBuf>,\n            render_type: RenderType,\n-           display_warnings: bool)\n+           display_warnings: bool,\n+           linker: Option<String>)\n            -> isize {\n     let input_path = PathBuf::from(input);\n     let input = config::Input::File(input_path.clone());\n@@ -121,7 +122,8 @@ pub fn run(input: &str,\n                                        maybe_sysroot,\n                                        Some(codemap),\n                                        None,\n-                                       render_type);\n+                                       render_type,\n+                                       linker);\n \n     {\n         let map = hir::map::map_crate(&sess, &*cstore, &mut hir_forest, &defs);\n@@ -180,7 +182,8 @@ fn run_test(test: &str, cratename: &str, filename: &str, cfgs: Vec<String>, libs\n             externs: Externs,\n             should_panic: bool, no_run: bool, as_test_harness: bool,\n             compile_fail: bool, mut error_codes: Vec<String>, opts: &TestOptions,\n-            maybe_sysroot: Option<PathBuf>) {\n+            maybe_sysroot: Option<PathBuf>,\n+            linker: Option<String>) {\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n     let test = make_test(test, Some(cratename), as_test_harness, opts);\n@@ -201,6 +204,7 @@ fn run_test(test: &str, cratename: &str, filename: &str, cfgs: Vec<String>, libs\n         externs,\n         cg: config::CodegenOptions {\n             prefer_dynamic: true,\n+            linker,\n             .. config::basic_codegen_options()\n         },\n         test: as_test_harness,\n@@ -442,13 +446,14 @@ pub struct Collector {\n     filename: Option<String>,\n     // to be removed when hoedown will be removed as well\n     pub render_type: RenderType,\n+    linker: Option<String>,\n }\n \n impl Collector {\n     pub fn new(cratename: String, cfgs: Vec<String>, libs: SearchPaths, externs: Externs,\n                use_headers: bool, opts: TestOptions, maybe_sysroot: Option<PathBuf>,\n                codemap: Option<Rc<CodeMap>>, filename: Option<String>,\n-               render_type: RenderType) -> Collector {\n+               render_type: RenderType, linker: Option<String>) -> Collector {\n         Collector {\n             tests: Vec::new(),\n             old_tests: HashMap::new(),\n@@ -464,6 +469,7 @@ impl Collector {\n             codemap,\n             filename,\n             render_type,\n+            linker,\n         }\n     }\n \n@@ -510,6 +516,7 @@ impl Collector {\n         let cratename = self.cratename.to_string();\n         let opts = self.opts.clone();\n         let maybe_sysroot = self.maybe_sysroot.clone();\n+        let linker = self.linker.clone();\n         debug!(\"Creating test {}: {}\", name, test);\n         self.tests.push(testing::TestDescAndFn {\n             desc: testing::TestDesc {\n@@ -538,7 +545,8 @@ impl Collector {\n                                  compile_fail,\n                                  error_codes,\n                                  &opts,\n-                                 maybe_sysroot)\n+                                 maybe_sysroot,\n+                                 linker)\n                     })\n                 } {\n                     Ok(()) => (),"}, {"sha": "866c0038a7fd9b5b501456c3987d2a216cfc5748", "filename": "src/libstd/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Flibstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Flibstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2FCargo.toml?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -36,7 +36,6 @@ rustc_tsan = { path = \"../librustc_tsan\" }\n \n [build-dependencies]\n build_helper = { path = \"../build_helper\" }\n-cc = \"1.0.1\"\n \n [features]\n backtrace = []"}, {"sha": "0e6214ea04fc0a20a939fae3b739f44b2b6913a4", "filename": "src/libstd/build.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -11,7 +11,6 @@\n #![deny(warnings)]\n \n extern crate build_helper;\n-extern crate cc;\n \n use std::env;\n use std::process::Command;\n@@ -77,12 +76,6 @@ fn main() {\n fn build_libbacktrace(host: &str, target: &str) -> Result<(), ()> {\n     let native = native_lib_boilerplate(\"libbacktrace\", \"libbacktrace\", \"backtrace\", \".libs\")?;\n \n-    let compiler = cc::Build::new().get_compiler();\n-    // only msvc returns None for ar so unwrap is okay\n-    let ar = build_helper::cc2ar(compiler.path(), target).unwrap();\n-    let mut cflags = compiler.args().iter().map(|s| s.to_str().unwrap())\n-                             .collect::<Vec<_>>().join(\" \");\n-    cflags.push_str(\" -fvisibility=hidden\");\n     run(Command::new(\"sh\")\n                 .current_dir(&native.out_dir)\n                 .arg(native.src_dir.join(\"configure\").to_str().unwrap()\n@@ -94,10 +87,7 @@ fn build_libbacktrace(host: &str, target: &str) -> Result<(), ()> {\n                 .arg(\"--disable-host-shared\")\n                 .arg(format!(\"--host={}\", build_helper::gnu_target(target)))\n                 .arg(format!(\"--build={}\", build_helper::gnu_target(host)))\n-                .env(\"CC\", compiler.path())\n-                .env(\"AR\", &ar)\n-                .env(\"RANLIB\", format!(\"{} s\", ar.display()))\n-                .env(\"CFLAGS\", cflags),\n+                .env(\"CFLAGS\", env::var(\"CFLAGS\").unwrap_or_default() + \" -fvisibility=hidden\"),\n         BuildExpectation::None);\n \n     run(Command::new(build_helper::make(host))"}, {"sha": "93711c41d79f82cc8a906f761a74b76828a18adf", "filename": "src/test/run-make/archive-duplicate-names/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftest%2Frun-make%2Farchive-duplicate-names%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftest%2Frun-make%2Farchive-duplicate-names%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Farchive-duplicate-names%2FMakefile?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -5,7 +5,7 @@ all:\n \tmkdir $(TMPDIR)/b\n \t$(call COMPILE_OBJ,$(TMPDIR)/a/foo.o,foo.c)\n \t$(call COMPILE_OBJ,$(TMPDIR)/b/foo.o,bar.c)\n-\tar crus $(TMPDIR)/libfoo.a $(TMPDIR)/a/foo.o $(TMPDIR)/b/foo.o\n+\t$(AR) crus $(TMPDIR)/libfoo.a $(TMPDIR)/a/foo.o $(TMPDIR)/b/foo.o\n \t$(RUSTC) foo.rs\n \t$(RUSTC) bar.rs\n \t$(call RUN,bar)"}, {"sha": "06d1bb6698ece6ba07aa4379cd2ad0ce9f22238c", "filename": "src/test/run-make/compiler-rt-works-on-mingw/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftest%2Frun-make%2Fcompiler-rt-works-on-mingw%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftest%2Frun-make%2Fcompiler-rt-works-on-mingw%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fcompiler-rt-works-on-mingw%2FMakefile?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -3,8 +3,8 @@\n ifneq (,$(findstring MINGW,$(UNAME)))\n ifndef IS_MSVC\n all:\n-\tg++ foo.cpp -c -o $(TMPDIR)/foo.o\n-\tar crus $(TMPDIR)/libfoo.a $(TMPDIR)/foo.o\n+\t$(CXX) foo.cpp -c -o $(TMPDIR)/foo.o\n+\t$(AR) crus $(TMPDIR)/libfoo.a $(TMPDIR)/foo.o\n \t$(RUSTC) foo.rs -lfoo -lstdc++\n \t$(call RUN,foo)\n else"}, {"sha": "5c9cc9935099f55efecea3971289169f27b926c0", "filename": "src/test/run-make/invalid-library/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftest%2Frun-make%2Finvalid-library%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftest%2Frun-make%2Finvalid-library%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Finvalid-library%2FMakefile?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -2,5 +2,5 @@\n \n all:\n \ttouch $(TMPDIR)/rust.metadata.bin\n-\tar crus $(TMPDIR)/libfoo-ffffffff-1.0.rlib $(TMPDIR)/rust.metadata.bin\n+\t$(AR) crus $(TMPDIR)/libfoo-ffffffff-1.0.rlib $(TMPDIR)/rust.metadata.bin\n \t$(RUSTC) foo.rs 2>&1 | grep \"can't find crate for\""}, {"sha": "4db027aaeef7150632f058e02da47e7a29f6dc87", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -18,7 +18,6 @@ extern crate rustc_errors;\n extern crate rustc_trans;\n extern crate syntax;\n \n-use rustc::dep_graph::DepGraph;\n use rustc::session::{build_session, Session};\n use rustc::session::config::{basic_options, build_configuration, Input,\n                              OutputType, OutputTypes};\n@@ -56,6 +55,9 @@ fn basic_sess(sysroot: PathBuf) -> (Session, Rc<CStore>) {\n     let mut opts = basic_options();\n     opts.output_types = OutputTypes::new(&[(OutputType::Exe, None)]);\n     opts.maybe_sysroot = Some(sysroot);\n+    if let Ok(linker) = std::env::var(\"RUSTC_LINKER\") {\n+        opts.cg.linker = Some(linker);\n+    }\n \n     let descriptions = Registry::new(&rustc::DIAGNOSTICS);\n     let cstore = Rc::new(CStore::new(Box::new(rustc_trans::LlvmMetadataLoader)));\n@@ -67,8 +69,7 @@ fn basic_sess(sysroot: PathBuf) -> (Session, Rc<CStore>) {\n \n fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n     let (sess, cstore) = basic_sess(sysroot);\n-    let cfg = build_configuration(&sess, HashSet::new());\n     let control = CompileController::basic();\n     let input = Input::Str { name: anon_src(), input: code };\n-    compile_input(&sess, &cstore, &input, &None, &Some(output), None, &control);\n+    let _ = compile_input(&sess, &cstore, &input, &None, &Some(output), None, &control);\n }"}, {"sha": "cb4f14627334876917a6702826dea3271fe1ce70", "filename": "src/test/run-make/issue-22131/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftest%2Frun-make%2Fissue-22131%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftest%2Frun-make%2Fissue-22131%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-22131%2FMakefile?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -2,6 +2,6 @@\n \n all: foo.rs\n \t$(RUSTC) --cfg 'feature=\"bar\"' --crate-type lib foo.rs\n-\t$(HOST_RPATH_ENV) '$(RUSTDOC)' --test --cfg 'feature=\"bar\"' \\\n+\t$(RUSTDOC) --test --cfg 'feature=\"bar\"' \\\n \t\t-L $(TMPDIR) foo.rs |\\\n \t\tgrep -q 'foo.rs - foo (line 11) ... ok'"}, {"sha": "8ce1c699526cd1b9e4c49aa2627bf5650e95b63f", "filename": "src/test/run-make/rustdoc-output-path/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftest%2Frun-make%2Frustdoc-output-path%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftest%2Frun-make%2Frustdoc-output-path%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Frustdoc-output-path%2FMakefile?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -1,4 +1,4 @@\n -include ../tools.mk\n \n all:\n-\t$(HOST_RPATH_ENV) '$(RUSTDOC)' -o \"$(TMPDIR)/foo/bar/doc\" foo.rs\n+\t$(RUSTDOC) -o \"$(TMPDIR)/foo/bar/doc\" foo.rs"}, {"sha": "92a278825c242941a41b2af7eaf1e620d22c7ce3", "filename": "src/test/run-make/staticlib-blank-lib/Makefile", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftest%2Frun-make%2Fstaticlib-blank-lib%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftest%2Frun-make%2Fstaticlib-blank-lib%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fstaticlib-blank-lib%2FMakefile?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -1,6 +1,6 @@\n -include ../tools.mk\n \n all:\n-\tar crus $(TMPDIR)/libfoo.a foo.rs\n-\tar d $(TMPDIR)/libfoo.a foo.rs\n+\t$(AR) crus $(TMPDIR)/libfoo.a foo.rs\n+\t$(AR) d $(TMPDIR)/libfoo.a foo.rs\n \t$(RUSTC) foo.rs"}, {"sha": "c5d5626bf7269f41f03ab4836edbab937da21e4b", "filename": "src/test/run-make/tools.mk", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftest%2Frun-make%2Ftools.mk", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftest%2Frun-make%2Ftools.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Ftools.mk?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -7,7 +7,13 @@ TARGET_RPATH_ENV = \\\n \n RUSTC_ORIGINAL := $(RUSTC)\n BARE_RUSTC := $(HOST_RPATH_ENV) '$(RUSTC)'\n+BARE_RUSTDOC := $(HOST_RPATH_ENV) '$(RUSTDOC)'\n RUSTC := $(BARE_RUSTC) --out-dir $(TMPDIR) -L $(TMPDIR) $(RUSTFLAGS)\n+RUSTDOC := $(BARE_RUSTDOC)\n+ifdef RUSTC_LINKER\n+RUSTC := $(RUSTC) -Clinker=$(RUSTC_LINKER)\n+RUSTDOC := $(RUSTDOC) --linker $(RUSTC_LINKER) -Z unstable-options\n+endif\n #CC := $(CC) -L $(TMPDIR)\n HTMLDOCCK := $(PYTHON) $(S)/src/etc/htmldocck.py\n \n@@ -102,13 +108,13 @@ REMOVE_DYLIBS     = rm $(TMPDIR)/$(call DYLIB_GLOB,$(1))\n REMOVE_RLIBS      = rm $(TMPDIR)/$(call RLIB_GLOB,$(1))\n \n %.a: %.o\n-\tar crus $@ $<\n+\t$(AR) crus $@ $<\n ifdef IS_MSVC\n %.lib: lib%.o\n \t$(MSVC_LIB) -out:`cygpath -w $@` $<\n else\n %.lib: lib%.o\n-\tar crus $@ $<\n+\t$(AR) crus $@ $<\n endif\n %.dylib: %.o\n \t$(CC) -dynamiclib -Wl,-dylib -o $@ $<"}, {"sha": "aa98f818f40405a241e03ce3db37c7eb574546c3", "filename": "src/tools/compiletest/src/common.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fcommon.rs?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -201,6 +201,8 @@ pub struct Config {\n     pub cc: String,\n     pub cxx: String,\n     pub cflags: String,\n+    pub ar: String,\n+    pub linker: Option<String>,\n     pub llvm_components: String,\n     pub llvm_cxxflags: String,\n     pub nodejs: Option<String>,"}, {"sha": "1701c8a3e43eec5194cac204527bad1590e6e694", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -102,6 +102,8 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         .reqopt(\"\", \"cc\", \"path to a C compiler\", \"PATH\")\n         .reqopt(\"\", \"cxx\", \"path to a C++ compiler\", \"PATH\")\n         .reqopt(\"\", \"cflags\", \"flags for the C compiler\", \"FLAGS\")\n+        .optopt(\"\", \"ar\", \"path to an archiver\", \"PATH\")\n+        .optopt(\"\", \"linker\", \"path to a linker\", \"PATH\")\n         .reqopt(\"\", \"llvm-components\", \"list of LLVM components built in\", \"LIST\")\n         .reqopt(\"\", \"llvm-cxxflags\", \"C++ flags for LLVM\", \"FLAGS\")\n         .optopt(\"\", \"nodejs\", \"the name of nodejs\", \"PATH\")\n@@ -198,6 +200,8 @@ pub fn parse_config(args: Vec<String> ) -> Config {\n         cc: matches.opt_str(\"cc\").unwrap(),\n         cxx: matches.opt_str(\"cxx\").unwrap(),\n         cflags: matches.opt_str(\"cflags\").unwrap(),\n+        ar: matches.opt_str(\"ar\").unwrap_or(\"ar\".into()),\n+        linker: matches.opt_str(\"linker\"),\n         llvm_components: matches.opt_str(\"llvm-components\").unwrap(),\n         llvm_cxxflags: matches.opt_str(\"llvm-cxxflags\").unwrap(),\n         nodejs: matches.opt_str(\"nodejs\"),\n@@ -234,6 +238,8 @@ pub fn log_config(config: &Config) {\n     logv(c, format!(\"adb_test_dir: {:?}\", config.adb_test_dir));\n     logv(c, format!(\"adb_device_status: {}\",\n                     config.adb_device_status));\n+    logv(c, format!(\"ar: {}\", config.ar));\n+    logv(c, format!(\"linker: {:?}\", config.linker));\n     logv(c, format!(\"verbose: {}\", config.verbose));\n     logv(c, format!(\"quiet: {}\", config.quiet));\n     logv(c, \"\\n\".to_string());"}, {"sha": "d61077643f1fe435c36b318f6cf097e7e1100d3d", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9223c39dc53ad97ae95fd9cec86503a083b8e966/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=9223c39dc53ad97ae95fd9cec86503a083b8e966", "patch": "@@ -1155,6 +1155,9 @@ actual:\\n\\\n             .arg(\"-o\").arg(out_dir)\n             .arg(&self.testpaths.file)\n             .args(&self.props.compile_flags);\n+        if let Some(ref linker) = self.config.linker {\n+            rustdoc.arg(\"--linker\").arg(linker).arg(\"-Z\").arg(\"unstable-options\");\n+        }\n \n         self.compose_and_run_compiler(rustdoc, None)\n     }\n@@ -1441,6 +1444,9 @@ actual:\\n\\\n         } else {\n             rustc.args(self.split_maybe_args(&self.config.target_rustcflags));\n         }\n+        if let Some(ref linker) = self.config.linker {\n+            rustc.arg(format!(\"-Clinker={}\", linker));\n+        }\n \n         rustc.args(&self.props.compile_flags);\n \n@@ -2101,6 +2107,10 @@ actual:\\n\\\n            .env(\"LLVM_COMPONENTS\", &self.config.llvm_components)\n            .env(\"LLVM_CXXFLAGS\", &self.config.llvm_cxxflags);\n \n+        if let Some(ref linker) = self.config.linker {\n+            cmd.env(\"RUSTC_LINKER\", linker);\n+        }\n+\n         // We don't want RUSTFLAGS set from the outside to interfere with\n         // compiler flags set in the test cases:\n         cmd.env_remove(\"RUSTFLAGS\");\n@@ -2123,7 +2133,8 @@ actual:\\n\\\n                .env(\"CXX\", &self.config.cxx);\n         } else {\n             cmd.env(\"CC\", format!(\"{} {}\", self.config.cc, self.config.cflags))\n-               .env(\"CXX\", format!(\"{} {}\", self.config.cxx, self.config.cflags));\n+               .env(\"CXX\", format!(\"{} {}\", self.config.cxx, self.config.cflags))\n+               .env(\"AR\", &self.config.ar);\n \n             if self.config.target.contains(\"windows\") {\n                 cmd.env(\"IS_WINDOWS\", \"1\");"}]}