{"sha": "15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZDMyZmZiYjJjYmQ4YTQ5YmNiZmNhMzk2NDIzZDRmOGNhNTA0OGY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-12-15T18:02:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2016-01-04T10:18:56Z"}, "message": "Feature-gate defaulted type parameters outside of types.", "tree": {"sha": "d637216a15b362bf28d93bdf62ca44fa0572f337", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d637216a15b362bf28d93bdf62ca44fa0572f337"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f", "html_url": "https://github.com/rust-lang/rust/commit/15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "191ff2d8fd57a8238d85302a8f06e2bd11b2f6d2", "url": "https://api.github.com/repos/rust-lang/rust/commits/191ff2d8fd57a8238d85302a8f06e2bd11b2f6d2", "html_url": "https://github.com/rust-lang/rust/commit/191ff2d8fd57a8238d85302a8f06e2bd11b2f6d2"}], "stats": {"total": 44, "additions": 30, "deletions": 14}, "files": [{"sha": "f87f5e6c2e6b74f7769d238b2542c7cbb473b8f0", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f", "patch": "@@ -1591,10 +1591,10 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     #[unstable(feature = \"btree_range\",\n                reason = \"matches collection reform specification, waiting for dust to settle\",\n                issue = \"27787\")]\n-    pub fn range<Min: ?Sized + Ord = K, Max: ?Sized + Ord = K>(&self,\n-                                                               min: Bound<&Min>,\n-                                                               max: Bound<&Max>)\n-                                                               -> Range<K, V>\n+    pub fn range<Min: ?Sized + Ord, Max: ?Sized + Ord>(&self,\n+                                                       min: Bound<&Min>,\n+                                                       max: Bound<&Max>)\n+                                                       -> Range<K, V>\n         where K: Borrow<Min> + Borrow<Max>\n     {\n         range_impl!(&self.root,\n@@ -1633,10 +1633,10 @@ impl<K: Ord, V> BTreeMap<K, V> {\n     #[unstable(feature = \"btree_range\",\n                reason = \"matches collection reform specification, waiting for dust to settle\",\n                issue = \"27787\")]\n-    pub fn range_mut<Min: ?Sized + Ord = K, Max: ?Sized + Ord = K>(&mut self,\n-                                                                   min: Bound<&Min>,\n-                                                                   max: Bound<&Max>)\n-                                                                   -> RangeMut<K, V>\n+    pub fn range_mut<Min: ?Sized + Ord, Max: ?Sized + Ord>(&mut self,\n+                                                           min: Bound<&Min>,\n+                                                           max: Bound<&Max>)\n+                                                           -> RangeMut<K, V>\n         where K: Borrow<Min> + Borrow<Max>\n     {\n         range_impl!(&mut self.root,"}, {"sha": "55e9e3a1c34bb15644e9f8d0ec4f88e5b7b6ed0b", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f", "patch": "@@ -154,10 +154,10 @@ impl<T: Ord> BTreeSet<T> {\n     #[unstable(feature = \"btree_range\",\n                reason = \"matches collection reform specification, waiting for dust to settle\",\n                issue = \"27787\")]\n-    pub fn range<'a, Min: ?Sized + Ord = T, Max: ?Sized + Ord = T>(&'a self,\n-                                                                   min: Bound<&Min>,\n-                                                                   max: Bound<&Max>)\n-                                                                   -> Range<'a, T>\n+    pub fn range<'a, Min: ?Sized + Ord, Max: ?Sized + Ord>(&'a self,\n+                                                           min: Bound<&Min>,\n+                                                           max: Bound<&Max>)\n+                                                           -> Range<'a, T>\n         where T: Borrow<Min> + Borrow<Max>\n     {\n         fn first<A, B>((a, _): (A, B)) -> A {"}, {"sha": "a30e5b1372af98daf081ea88d524c177e1d0b533", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f", "patch": "@@ -2132,7 +2132,7 @@ pub trait Iterator {\n     /// ```\n     #[unstable(feature = \"iter_arith\", reason = \"bounds recently changed\",\n                issue = \"27739\")]\n-    fn sum<S=<Self as Iterator>::Item>(self) -> S where\n+    fn sum<S>(self) -> S where\n         S: Add<Self::Item, Output=S> + Zero,\n         Self: Sized,\n     {\n@@ -2157,7 +2157,7 @@ pub trait Iterator {\n     /// ```\n     #[unstable(feature=\"iter_arith\", reason = \"bounds recently changed\",\n                issue = \"27739\")]\n-    fn product<P=<Self as Iterator>::Item>(self) -> P where\n+    fn product<P>(self) -> P where\n         P: Mul<Self::Item, Output=P> + One,\n         Self: Sized,\n     {"}, {"sha": "2b3ee9fe6dc6663353c6706ac89e8100b35982db", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f", "patch": "@@ -92,6 +92,7 @@ use syntax::abi;\n use syntax::ast;\n use syntax::attr;\n use syntax::codemap::Span;\n+use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::parse::token::special_idents;\n use syntax::ptr::P;\n use rustc_front::hir;\n@@ -1933,6 +1934,18 @@ fn get_or_create_type_parameter_def<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n \n     let parent = tcx.map.get_parent(param.id);\n \n+    if space != TypeSpace && default.is_some() {\n+        if !tcx.sess.features.borrow().default_type_parameter_fallback {\n+            emit_feature_err(&tcx.sess.parse_sess.span_diagnostic,\n+                             \"default_type_parameter_fallback\",\n+                             param.span,\n+                             GateIssue::Language,\n+                             \"other than on a `struct` or `enum` definition, \\\n+                              defaults for type parameters are experimental \\\n+                              and known to be buggy\");\n+        }\n+    }\n+\n     let def = ty::TypeParameterDef {\n         space: space,\n         index: index,"}, {"sha": "4bd8ecacb96b3ddcb5e86e42654dd18cfe6c0fa9", "filename": "src/test/auxiliary/default_ty_param_cross_crate_crate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f/src%2Ftest%2Fauxiliary%2Fdefault_ty_param_cross_crate_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f/src%2Ftest%2Fauxiliary%2Fdefault_ty_param_cross_crate_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fdefault_ty_param_cross_crate_crate.rs?ref=15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f", "patch": "@@ -10,6 +10,7 @@\n \n #![crate_type = \"lib\"]\n #![crate_name = \"default_param_test\"]\n+#![feature(default_type_parameter_fallback)]\n \n use std::marker::PhantomData;\n "}, {"sha": "060a66846d36f7afcaba4e4a38ac03f7d95c9fe3", "filename": "src/test/compile-fail/issue-26812.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f/src%2Ftest%2Fcompile-fail%2Fissue-26812.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f/src%2Ftest%2Fcompile-fail%2Fissue-26812.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-26812.rs?ref=15d32ffbb2cbd8a49bcbfca396423d4f8ca5048f", "patch": "@@ -8,5 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(default_type_parameter_fallback)]\n+\n fn avg<T=T::Item>(_: T) {} //~ ERROR associated type `Item` not found for `T`\n fn main() {}"}]}