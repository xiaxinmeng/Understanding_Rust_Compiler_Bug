{"sha": "6189e99c8605578aae841be6fba9e27bfbad97fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxODllOTljODYwNTU3OGFhZTg0MWJlNmZiYTllMjdiZmJhZDk3ZmM=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-02-19T23:10:08Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2015-03-03T11:10:57Z"}, "message": "Accommodate arith-overflow in `rand` and `std::rand`.\n\nRegarding the `rand` changes: It is unfortunate that Wrapping(T) does\nnot support the `+=` operator.  We may want to try to fix that before\n1.0 to make porting code like this palatable.\n\nRegarding `std::rand`, just arith-overflow in first example from\n`std::rand::random()` doc.", "tree": {"sha": "3c4019f4987c0825d751474029637a9b670f9dbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c4019f4987c0825d751474029637a9b670f9dbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6189e99c8605578aae841be6fba9e27bfbad97fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6189e99c8605578aae841be6fba9e27bfbad97fc", "html_url": "https://github.com/rust-lang/rust/commit/6189e99c8605578aae841be6fba9e27bfbad97fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6189e99c8605578aae841be6fba9e27bfbad97fc/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7c8edabac8030889f4a885b944c86190772953fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c8edabac8030889f4a885b944c86190772953fd", "html_url": "https://github.com/rust-lang/rust/commit/7c8edabac8030889f4a885b944c86190772953fd"}], "stats": {"total": 79, "additions": 41, "deletions": 38}, "files": [{"sha": "71ace016d6b1691b4ec6c36f171fb681a795960f", "filename": "src/librand/chacha.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6189e99c8605578aae841be6fba9e27bfbad97fc/src%2Flibrand%2Fchacha.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6189e99c8605578aae841be6fba9e27bfbad97fc/src%2Flibrand%2Fchacha.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fchacha.rs?ref=6189e99c8605578aae841be6fba9e27bfbad97fc", "patch": "@@ -12,6 +12,7 @@\n \n use core::prelude::*;\n use core::num::Int;\n+use core::num::wrapping::WrappingOps;\n use {Rng, SeedableRng, Rand};\n \n const KEY_WORDS    : uint =  8; // 8 words for the 256-bit key\n@@ -43,10 +44,10 @@ static EMPTY: ChaChaRng = ChaChaRng {\n \n macro_rules! quarter_round{\n     ($a: expr, $b: expr, $c: expr, $d: expr) => {{\n-        $a += $b; $d ^= $a; $d = $d.rotate_left(16);\n-        $c += $d; $b ^= $c; $b = $b.rotate_left(12);\n-        $a += $b; $d ^= $a; $d = $d.rotate_left( 8);\n-        $c += $d; $b ^= $c; $b = $b.rotate_left( 7);\n+        $a = $a.wrapping_add($b); $d = $d ^ $a; $d = $d.rotate_left(16);\n+        $c = $c.wrapping_add($d); $b = $b ^ $c; $b = $b.rotate_left(12);\n+        $a = $a.wrapping_add($b); $d = $d ^ $a; $d = $d.rotate_left( 8);\n+        $c = $c.wrapping_add($d); $b = $b ^ $c; $b = $b.rotate_left( 7);\n     }}\n }\n \n@@ -74,7 +75,7 @@ fn core(output: &mut [u32; STATE_WORDS], input: &[u32; STATE_WORDS]) {\n     }\n \n     for i in 0..STATE_WORDS {\n-        output[i] += input[i];\n+        output[i] = output[i].wrapping_add(input[i]);\n     }\n }\n "}, {"sha": "fb73a44c2b94510b096a35ea621e537992fcc0b2", "filename": "src/librand/distributions/range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6189e99c8605578aae841be6fba9e27bfbad97fc/src%2Flibrand%2Fdistributions%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6189e99c8605578aae841be6fba9e27bfbad97fc/src%2Flibrand%2Fdistributions%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fdistributions%2Frange.rs?ref=6189e99c8605578aae841be6fba9e27bfbad97fc", "patch": "@@ -123,7 +123,7 @@ macro_rules! integer_impl {\n                     // be uniformly distributed)\n                     if v < r.accept_zone as $unsigned {\n                         // and return it, with some adjustments\n-                        return r.low + (v % r.range as $unsigned) as $ty;\n+                        return r.low.wrapping_add((v % r.range as $unsigned) as $ty);\n                     }\n                 }\n             }"}, {"sha": "6bc00abd85f10e17a8f70418f95b8f0c5776dab3", "filename": "src/librand/isaac.rs", "status": "modified", "additions": 32, "deletions": 30, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/6189e99c8605578aae841be6fba9e27bfbad97fc/src%2Flibrand%2Fisaac.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6189e99c8605578aae841be6fba9e27bfbad97fc/src%2Flibrand%2Fisaac.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Fisaac.rs?ref=6189e99c8605578aae841be6fba9e27bfbad97fc", "patch": "@@ -13,6 +13,7 @@\n use core::prelude::*;\n use core::slice;\n use core::iter::{range_step, repeat};\n+use core::num::wrapping::Wrapping;\n \n use {Rng, SeedableRng, Rand};\n \n@@ -60,7 +61,7 @@ impl IsaacRng {\n     /// of `rsl` as a seed, otherwise construct one algorithmically (not\n     /// randomly).\n     fn init(&mut self, use_rsl: bool) {\n-        let mut a = 0x9e3779b9;\n+        let mut a = Wrapping(0x9e3779b9);\n         let mut b = a;\n         let mut c = a;\n         let mut d = a;\n@@ -71,14 +72,14 @@ impl IsaacRng {\n \n         macro_rules! mix {\n             () => {{\n-                a^=b<<11; d+=a; b+=c;\n-                b^=c>>2;  e+=b; c+=d;\n-                c^=d<<8;  f+=c; d+=e;\n-                d^=e>>16; g+=d; e+=f;\n-                e^=f<<10; h+=e; f+=g;\n-                f^=g>>4;  a+=f; g+=h;\n-                g^=h<<8;  b+=g; h+=a;\n-                h^=a>>9;  c+=h; a+=b;\n+                a=a^(b<<11); d=d+a; b=b+c;\n+                b=b^(c>>2);  e=e+b; c=c+d;\n+                c=c^(d<<8);  f=f+c; d=d+e;\n+                d=d^(e>>16); g=g+d; e=e+f;\n+                e=e^(f<<10); h=h+e; f=f+g;\n+                f=f^(g>>4);  a=a+f; g=g+h;\n+                g=g^(h<<8);  b=b+g; h=h+a;\n+                h=h^(a>>9);  c=c+h; a=a+b;\n             }}\n         }\n \n@@ -90,15 +91,15 @@ impl IsaacRng {\n             macro_rules! memloop {\n                 ($arr:expr) => {{\n                     for i in range_step(0, RAND_SIZE as uint, 8) {\n-                        a+=$arr[i  ]; b+=$arr[i+1];\n-                        c+=$arr[i+2]; d+=$arr[i+3];\n-                        e+=$arr[i+4]; f+=$arr[i+5];\n-                        g+=$arr[i+6]; h+=$arr[i+7];\n+                        a=a+Wrapping($arr[i  ]); b=b+Wrapping($arr[i+1]);\n+                        c=c+Wrapping($arr[i+2]); d=d+Wrapping($arr[i+3]);\n+                        e=e+Wrapping($arr[i+4]); f=f+Wrapping($arr[i+5]);\n+                        g=g+Wrapping($arr[i+6]); h=h+Wrapping($arr[i+7]);\n                         mix!();\n-                        self.mem[i  ]=a; self.mem[i+1]=b;\n-                        self.mem[i+2]=c; self.mem[i+3]=d;\n-                        self.mem[i+4]=e; self.mem[i+5]=f;\n-                        self.mem[i+6]=g; self.mem[i+7]=h;\n+                        self.mem[i  ]=a.0; self.mem[i+1]=b.0;\n+                        self.mem[i+2]=c.0; self.mem[i+3]=d.0;\n+                        self.mem[i+4]=e.0; self.mem[i+5]=f.0;\n+                        self.mem[i+6]=g.0; self.mem[i+7]=h.0;\n                     }\n                 }}\n             }\n@@ -108,10 +109,10 @@ impl IsaacRng {\n         } else {\n             for i in range_step(0, RAND_SIZE as uint, 8) {\n                 mix!();\n-                self.mem[i  ]=a; self.mem[i+1]=b;\n-                self.mem[i+2]=c; self.mem[i+3]=d;\n-                self.mem[i+4]=e; self.mem[i+5]=f;\n-                self.mem[i+6]=g; self.mem[i+7]=h;\n+                self.mem[i  ]=a.0; self.mem[i+1]=b.0;\n+                self.mem[i+2]=c.0; self.mem[i+3]=d.0;\n+                self.mem[i+4]=e.0; self.mem[i+5]=f.0;\n+                self.mem[i+6]=g.0; self.mem[i+7]=h.0;\n             }\n         }\n \n@@ -130,7 +131,8 @@ impl IsaacRng {\n         static MIDPOINT: uint = (RAND_SIZE / 2) as uint;\n \n         macro_rules! ind {\n-            ($x:expr) => ( self.mem[(($x >> 2) as uint & ((RAND_SIZE - 1) as uint))] )\n+            ($x:expr) => (Wrapping( self.mem[(($x >> 2) as uint &\n+                                              ((RAND_SIZE - 1) as uint))] ))\n         }\n \n         let r = [(0, MIDPOINT), (MIDPOINT, 0)];\n@@ -142,11 +144,11 @@ impl IsaacRng {\n                     let mix = a << $shift as uint;\n \n                     let x = self.mem[base  + mr_offset];\n-                    a = (a ^ mix) + self.mem[base + m2_offset];\n-                    let y = ind!(x) + a + b;\n-                    self.mem[base + mr_offset] = y;\n+                    a = (Wrapping(a ^ mix) + Wrapping(self.mem[base + m2_offset])).0;\n+                    let y = ind!(x) + Wrapping(a) + Wrapping(b);\n+                    self.mem[base + mr_offset] = y.0;\n \n-                    b = ind!(y >> RAND_SIZE_LEN as uint) + x;\n+                    b = (ind!(y.0 >> RAND_SIZE_LEN as uint) + Wrapping(x)).0;\n                     self.rsl[base + mr_offset] = b;\n                 }}\n             }\n@@ -157,11 +159,11 @@ impl IsaacRng {\n                     let mix = a >> $shift as uint;\n \n                     let x = self.mem[base  + mr_offset];\n-                    a = (a ^ mix) + self.mem[base + m2_offset];\n-                    let y = ind!(x) + a + b;\n-                    self.mem[base + mr_offset] = y;\n+                    a = (Wrapping(a ^ mix) + Wrapping(self.mem[base + m2_offset])).0;\n+                    let y = ind!(x) + Wrapping(a) + Wrapping(b);\n+                    self.mem[base + mr_offset] = y.0;\n \n-                    b = ind!(y >> RAND_SIZE_LEN as uint) + x;\n+                    b = (ind!(y.0 >> RAND_SIZE_LEN as uint) + Wrapping(x)).0;\n                     self.rsl[base + mr_offset] = b;\n                 }}\n             }"}, {"sha": "ac7622fc7f724837fd4407b31fb5ace5c95e905d", "filename": "src/libstd/rand/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6189e99c8605578aae841be6fba9e27bfbad97fc/src%2Flibstd%2Frand%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6189e99c8605578aae841be6fba9e27bfbad97fc/src%2Flibstd%2Frand%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frand%2Fmod.rs?ref=6189e99c8605578aae841be6fba9e27bfbad97fc", "patch": "@@ -386,8 +386,8 @@ impl Rng for ThreadRng {\n /// ```\n /// use std::rand;\n ///\n-/// let x = rand::random();\n-/// println!(\"{}\", 2u8 * x);\n+/// let x: u8 = rand::random();\n+/// println!(\"{}\", 2 * x as u16);\n ///\n /// let y = rand::random::<f64>();\n /// println!(\"{}\", y);"}]}