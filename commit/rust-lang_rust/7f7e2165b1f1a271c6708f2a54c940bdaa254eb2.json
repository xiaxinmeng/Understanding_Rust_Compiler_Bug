{"sha": "7f7e2165b1f1a271c6708f2a54c940bdaa254eb2", "node_id": "C_kwDOAAsO6NoAKDdmN2UyMTY1YjFmMWEyNzFjNjcwOGYyYTU0Yzk0MGJkYWEyNTRlYjI", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-27T02:04:03Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-09-27T02:04:03Z"}, "message": "Rename some variables.\n\nThese make the delimiter processing clearer.", "tree": {"sha": "33b2d0ac416153eedb7ccd68f1cd06d284ab2870", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33b2d0ac416153eedb7ccd68f1cd06d284ab2870"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f7e2165b1f1a271c6708f2a54c940bdaa254eb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f7e2165b1f1a271c6708f2a54c940bdaa254eb2", "html_url": "https://github.com/rust-lang/rust/commit/7f7e2165b1f1a271c6708f2a54c940bdaa254eb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f7e2165b1f1a271c6708f2a54c940bdaa254eb2/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "880ebb657a066ef039139592750f4f4ca45f8277", "url": "https://api.github.com/repos/rust-lang/rust/commits/880ebb657a066ef039139592750f4f4ca45f8277", "html_url": "https://github.com/rust-lang/rust/commit/880ebb657a066ef039139592750f4f4ca45f8277"}], "stats": {"total": 20, "additions": 10, "deletions": 10}, "files": [{"sha": "6f6ab16cb597bf8348edf096e153bf325bbb1833", "filename": "compiler/rustc_parse/src/lexer/tokentrees.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7f7e2165b1f1a271c6708f2a54c940bdaa254eb2/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f7e2165b1f1a271c6708f2a54c940bdaa254eb2/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs?ref=7f7e2165b1f1a271c6708f2a54c940bdaa254eb2", "patch": "@@ -110,12 +110,12 @@ impl<'a> TokenTreesReader<'a> {\n         err\n     }\n \n-    fn parse_token_tree_open_delim(&mut self, delim: Delimiter) -> TokenTree {\n+    fn parse_token_tree_open_delim(&mut self, open_delim: Delimiter) -> TokenTree {\n         // The span for beginning of the delimited section\n         let pre_span = self.token.span;\n \n         // Move past the open delimiter.\n-        self.open_braces.push((delim, self.token.span));\n+        self.open_braces.push((open_delim, self.token.span));\n         self.token = self.string_reader.next_token().0;\n \n         // Parse the token trees within the delimiters.\n@@ -128,7 +128,7 @@ impl<'a> TokenTreesReader<'a> {\n \n         match self.token.kind {\n             // Correct delimiter.\n-            token::CloseDelim(d) if d == delim => {\n+            token::CloseDelim(close_delim) if close_delim == open_delim => {\n                 let (open_brace, open_brace_span) = self.open_braces.pop().unwrap();\n                 let close_brace_span = self.token.span;\n \n@@ -138,12 +138,12 @@ impl<'a> TokenTreesReader<'a> {\n                     if !sm.is_multiline(empty_block_span) {\n                         // Only track if the block is in the form of `{}`, otherwise it is\n                         // likely that it was written on purpose.\n-                        self.last_delim_empty_block_spans.insert(delim, empty_block_span);\n+                        self.last_delim_empty_block_spans.insert(open_delim, empty_block_span);\n                     }\n                 }\n \n                 //only add braces\n-                if let (Delimiter::Brace, Delimiter::Brace) = (open_brace, delim) {\n+                if let (Delimiter::Brace, Delimiter::Brace) = (open_brace, open_delim) {\n                     self.matching_block_spans.push((open_brace_span, close_brace_span));\n                 }\n \n@@ -158,7 +158,7 @@ impl<'a> TokenTreesReader<'a> {\n                 self.token = self.string_reader.next_token().0;\n             }\n             // Incorrect delimiter.\n-            token::CloseDelim(other) => {\n+            token::CloseDelim(close_delim) => {\n                 let mut unclosed_delimiter = None;\n                 let mut candidate = None;\n \n@@ -176,7 +176,7 @@ impl<'a> TokenTreesReader<'a> {\n                         for (brace, brace_span) in &self.open_braces {\n                             if let Some(padding) = sm.span_to_margin(*brace_span) {\n                                 // high likelihood of these two corresponding\n-                                if current_padding == padding && brace == &other {\n+                                if current_padding == padding && brace == &close_delim {\n                                     candidate = Some(*brace_span);\n                                 }\n                             }\n@@ -185,7 +185,7 @@ impl<'a> TokenTreesReader<'a> {\n                     let (tok, _) = self.open_braces.pop().unwrap();\n                     self.unmatched_braces.push(UnmatchedBrace {\n                         expected_delim: tok,\n-                        found_delim: Some(other),\n+                        found_delim: Some(close_delim),\n                         found_span: self.token.span,\n                         unclosed_span: unclosed_delimiter,\n                         candidate_span: candidate,\n@@ -201,7 +201,7 @@ impl<'a> TokenTreesReader<'a> {\n                 // fn foo() {\n                 //     bar(baz(\n                 // }  // Incorrect delimiter but matches the earlier `{`\n-                if !self.open_braces.iter().any(|&(b, _)| b == other) {\n+                if !self.open_braces.iter().any(|&(b, _)| b == close_delim) {\n                     self.token = self.string_reader.next_token().0;\n                 }\n             }\n@@ -213,7 +213,7 @@ impl<'a> TokenTreesReader<'a> {\n             _ => unreachable!(),\n         }\n \n-        TokenTree::Delimited(delim_span, delim, tts)\n+        TokenTree::Delimited(delim_span, open_delim, tts)\n     }\n \n     fn close_delim_err(&mut self, delim: Delimiter) -> PErr<'a> {"}]}