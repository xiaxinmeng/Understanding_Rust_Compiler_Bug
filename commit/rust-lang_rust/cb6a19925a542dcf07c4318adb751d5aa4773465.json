{"sha": "cb6a19925a542dcf07c4318adb751d5aa4773465", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNmExOTkyNWE1NDJkY2YwN2M0MzE4YWRiNzUxZDVhYTQ3NzM0NjU=", "commit": {"author": {"name": "steveklabnik", "email": "steve@steveklabnik.com", "date": "2018-04-10T20:35:28Z"}, "committer": {"name": "steveklabnik", "email": "steve@steveklabnik.com", "date": "2018-04-10T20:35:28Z"}, "message": "add codegen options section", "tree": {"sha": "9c293238b5aee364aced997771893f0628caf470", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c293238b5aee364aced997771893f0628caf470"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb6a19925a542dcf07c4318adb751d5aa4773465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb6a19925a542dcf07c4318adb751d5aa4773465", "html_url": "https://github.com/rust-lang/rust/commit/cb6a19925a542dcf07c4318adb751d5aa4773465", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb6a19925a542dcf07c4318adb751d5aa4773465/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "142c52f4a3f7db42613239953d4615ab5a0ac3c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/142c52f4a3f7db42613239953d4615ab5a0ac3c6", "html_url": "https://github.com/rust-lang/rust/commit/142c52f4a3f7db42613239953d4615ab5a0ac3c6"}], "stats": {"total": 208, "additions": 208, "deletions": 0}, "files": [{"sha": "70dae9314c1f75c945155453e1c2bde39bfac221", "filename": "src/doc/rustc/src/codegen-options/index.md", "status": "modified", "additions": 208, "deletions": 0, "changes": 208, "blob_url": "https://github.com/rust-lang/rust/blob/cb6a19925a542dcf07c4318adb751d5aa4773465/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/cb6a19925a542dcf07c4318adb751d5aa4773465/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fcodegen-options%2Findex.md?ref=cb6a19925a542dcf07c4318adb751d5aa4773465", "patch": "@@ -1 +1,209 @@\n # Codegen options\n+\n+All of these options are passed to `rustc` via the `-C` flag, short for \"codegen.\" You can see\n+a version of this list for your exact compiler by running `rustc -C help`.\n+\n+## ar\n+\n+This option is deprecated and does nothing.\n+\n+## linker\n+\n+This flag lets you control which linker `rustc` invokes to link your code.\n+\n+## link-arg=val\n+\n+This flag lets you append a single extra argument to the linker invocation.\n+\n+\"Append\" is significant; you can pass this flag multiple times to add multiple arguments.\n+\n+## link-args\n+\n+This flag lets you append multiple extra arguments to the linker invocation. The\n+options should be separated by spaces.\n+\n+## link-dead-code\n+\n+Normally, the linker will remove dead code. This flag disables this behavior.\n+\n+An example of when this flag might be useful is when trying to construct code coverage\n+metrics.\n+\n+## lto\n+\n+This flag instructs LLVM to use [link time\n+optimizations](https://llvm.org/docs/LinkTimeOptimization.html).\n+\n+It takes one of two values, `thin` and `fat`. 'thin' LTO [is a new feature of\n+LLVM](http://blog.llvm.org/2016/06/thinlto-scalable-and-incremental-lto.html),\n+'fat' referring to the classic version of LTO.\n+\n+## target-cpu\n+\n+This instructs `rustc` to generate code specifically for a particular processor.\n+\n+You can run `rustc --print target-cpus` to see the valid options to pass\n+here. Additionally, `native` can be passed to use the processor of the host\n+machine.\n+\n+## target-feature\n+\n+Individual targets will support different features; this flag lets you control\n+enabling or disabling a feature.\n+\n+To see the valid options and an example of use, run `rustc --print\n+target-features`.\n+\n+## passes\n+\n+This flag can be used to add extra LLVM passes to the compilation.\n+\n+The list must be separated by spaces.\n+\n+## llvm-args\n+\n+This flag can be used to pass a list of arguments directly to LLVM.\n+\n+The list must be separated by spaces.\n+\n+## save-temps\n+\n+`rustc` will generate temporary files during compilation; normally it will\n+delete them after it's done with its work. This option will cause them to be\n+preserved instead of removed.\n+\n+## rpath\n+\n+This option allows you to set the value of\n+[`rpath`](https://en.wikipedia.org/wiki/Rpath).\n+\n+## overflow-checks\n+\n+This flag allows you to control the behavior of integer overflow. This flag\n+can be passed many options:\n+\n+* To turn overflow checks on: `y`, `yes`, or `on`.\n+* To turn overflow checks off: `n`, `no`, or `off`.\n+\n+## no-prepopulate-passes\n+\n+The pass manager comes pre-populated with a list of passes; this flag\n+ensures that list is empty.\n+\n+## no-vectorize-loops\n+\n+By default, `rustc` will attempt to [vectorize\n+loops](https://llvm.org/docs/Vectorizers.html#the-loop-vectorizer). This\n+flag will turn that behavior off.\n+\n+## no-vectorize-slp\n+\n+By default, `rustc` will attempt to vectorize loops using [superword-level\n+parallism](https://llvm.org/docs/Vectorizers.html#the-slp-vectorizer). This\n+flag will turn that behavior off.\n+\n+## soft-float\n+\n+This option will make `rustc` generate code using \"soft floats.\" By default,\n+a lot of hardware supports floating point instructions, and so the code generated\n+will take advantage of this. \"soft floats\" emulate floating point instructions\n+in software.\n+\n+## prefer-dynamic\n+\n+By default, `rustc` prefers to statically link dependencies. This option will\n+make it use dynamic linking instead.\n+\n+## no-integrated-as\n+\n+LLVM comes with an internal assembler; this option will let you use an\n+external assembler instead.\n+\n+## no-redzone\n+\n+This flag allows you to disable [the\n+red zone](https://en.wikipedia.org/wiki/Red_zone_\\(computing\\)). This flag can\n+be passed many options:\n+\n+* To enable the red zone: `y`, `yes`, or `on`.\n+* To disable it: `n`, `no`, or `off`.\n+\n+## relocation-model\n+\n+This option lets you choose which relocation model to use.\n+\n+To find the valid options for this flag, run `rustc --print relocation-models`.\n+\n+## code-model=val\n+\n+This option lets you choose which code model to use.\n+\n+To find the valid options for this flag, run `rustc --print code-models`.\n+\n+## metadata\n+\n+This option allows you to control the metadata used for symbol mangling.\n+\n+## extra-filename\n+\n+This option allows you to put extra data in each output filename.\n+\n+## codegen-units\n+\n+This flag lets you control how many threads are used when doing\n+code generation.\n+\n+Increasing paralellism may speed up compile times, but may also\n+produce slower code.\n+\n+## remark\n+\n+This flag lets you print remarks for these optimization passes.\n+\n+The list of passes should be separated by spaces.\n+\n+`all` will remark on every pass.\n+\n+## no-stack-check\n+\n+This option is deprecated and does nothing.\n+\n+## debuginfo\n+\n+This flag lets you control debug information:\n+\n+* `0`: no debug info at all\n+* `1`: line tables only\n+* `2`: full debug info\n+\n+## opt-level\n+\n+This flag lets you control the optimization level.\n+\n+* `0`: no optimizations\n+* `1`: basic optimizations\n+* `2`: some optimizations\n+* `3`: all optimizations\n+* `s`: optimize for binary size\n+* `z`: optimize for binary size, but also turn off loop vectorization.\n+\n+## debug-assertions\n+\n+This flag lets you turn `cfg(debug_assertions)` on or off.\n+\n+## inline-threshold\n+\n+This option lets you set the threshold for inlining a function.\n+\n+The default is 225.\n+\n+## panic\n+\n+This option lets you control what happens when the code panics.\n+\n+* `abort`: terminate the process upon panic\n+* `unwind`: unwind the stack upon panic\n+\n+## incremental\n+\n+This flag allows you to enable incremental compilation.\n\\ No newline at end of file"}]}