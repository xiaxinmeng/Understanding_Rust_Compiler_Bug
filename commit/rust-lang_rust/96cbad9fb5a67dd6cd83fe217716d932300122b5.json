{"sha": "96cbad9fb5a67dd6cd83fe217716d932300122b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2Y2JhZDlmYjVhNjdkZDZjZDgzZmUyMTc3MTZkOTMyMzAwMTIyYjU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-25T09:11:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-25T09:11:26Z"}, "message": "Merge #4873\n\n4873: Resolve links in hover documentation r=matklad a=zacps\n\nThis PR resolves links in hover documentation. Both the upcoming intra-doc-links style and the old \"path-based\" style.\r\n\r\n## Todo\r\n\r\n* [x] More tests\r\n* [ ] Benchmark (Is there an easy way to benchmark this?)\r\n* [x] ~~Resolve issues with the markdown parser/get rid of it~~ Migrate to `pulldown_cmark_to_cmark`\r\n* [x] Reorganise code (Tips appreciated)\r\n\r\n---\r\n\r\nFixes #503\n\nCo-authored-by: Zac Pullar-Strecker <zacmps@gmail.com>", "tree": {"sha": "b62378abb477d2cdfedf462c1b25b6d9fecc9f75", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b62378abb477d2cdfedf462c1b25b6d9fecc9f75"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/96cbad9fb5a67dd6cd83fe217716d932300122b5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfRNW+CRBK7hj4Ov3rIwAAdHIIAFN6wsEaa2aBitCBIF2zdpWQ\n8CWPixiKfJeQu2m5zMUUMn/zdimdr+P2hNd83DOIBhBl1B2bNT73aVDKB9U29soc\n8IOQxYqx5+y5E9LcJNTD6kM4lqVPCEe16O+PwZDFdKKXq8TY4EFSU5xegc/SQTDg\n5CVrK1SFhamVcJyXlIVxmYDbfPyURIAHbMTq9sxuj4PornIMujyBL1iBpTUnDhJC\nqWX6HgNboZZOR0zhZFBT6Cb7CGgDwfgoFTQ5liSP1tNjTRiC1L3SPOTiJuv3pa69\n+0qmDzh5ofKcEh2CdSGfmgaORoPOOTPVz4PwByT0FhyGYBPFFFEVeCiJFftuX5g=\n=sdL+\n-----END PGP SIGNATURE-----\n", "payload": "tree b62378abb477d2cdfedf462c1b25b6d9fecc9f75\nparent b4bc34649857cfcf7fcb39b9af02342fb7b8c89e\nparent b835f06cecd2189cb32a431fdb85245fbf53032a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1598346686 +0000\ncommitter GitHub <noreply@github.com> 1598346686 +0000\n\nMerge #4873\n\n4873: Resolve links in hover documentation r=matklad a=zacps\n\nThis PR resolves links in hover documentation. Both the upcoming intra-doc-links style and the old \"path-based\" style.\r\n\r\n## Todo\r\n\r\n* [x] More tests\r\n* [ ] Benchmark (Is there an easy way to benchmark this?)\r\n* [x] ~~Resolve issues with the markdown parser/get rid of it~~ Migrate to `pulldown_cmark_to_cmark`\r\n* [x] Reorganise code (Tips appreciated)\r\n\r\n---\r\n\r\nFixes #503\n\nCo-authored-by: Zac Pullar-Strecker <zacmps@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/96cbad9fb5a67dd6cd83fe217716d932300122b5", "html_url": "https://github.com/rust-lang/rust/commit/96cbad9fb5a67dd6cd83fe217716d932300122b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/96cbad9fb5a67dd6cd83fe217716d932300122b5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4bc34649857cfcf7fcb39b9af02342fb7b8c89e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4bc34649857cfcf7fcb39b9af02342fb7b8c89e", "html_url": "https://github.com/rust-lang/rust/commit/b4bc34649857cfcf7fcb39b9af02342fb7b8c89e"}, {"sha": "b835f06cecd2189cb32a431fdb85245fbf53032a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b835f06cecd2189cb32a431fdb85245fbf53032a", "html_url": "https://github.com/rust-lang/rust/commit/b835f06cecd2189cb32a431fdb85245fbf53032a"}], "stats": {"total": 1076, "additions": 1015, "deletions": 61}, "files": [{"sha": "015f84ba8cce5bb7338a87a31c85e7f23973694c", "filename": "Cargo.lock", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/96cbad9fb5a67dd6cd83fe217716d932300122b5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/96cbad9fb5a67dd6cd83fe217716d932300122b5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=96cbad9fb5a67dd6cd83fe217716d932300122b5", "patch": "@@ -497,6 +497,8 @@ dependencies = [\n  \"rustc-hash\",\n  \"stdx\",\n  \"syntax\",\n+ \"tt\",\n+ \"url\",\n ]\n \n [[package]]\n@@ -596,6 +598,8 @@ dependencies = [\n  \"log\",\n  \"oorandom\",\n  \"profile\",\n+ \"pulldown-cmark\",\n+ \"pulldown-cmark-to-cmark\",\n  \"rustc-hash\",\n  \"ssr\",\n  \"stdx\",\n@@ -824,6 +828,12 @@ dependencies = [\n  \"tt\",\n ]\n \n+[[package]]\n+name = \"memchr\"\n+version = \"2.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3728d817d99e5ac407411fa471ff9800a778d88a24685968b36824eaf4bee400\"\n+\n [[package]]\n name = \"memmap\"\n version = \"0.7.0\"\n@@ -1140,6 +1150,26 @@ dependencies = [\n  \"toolchain\",\n ]\n \n+[[package]]\n+name = \"pulldown-cmark\"\n+version = \"0.7.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ca36dea94d187597e104a5c8e4b07576a8a45aa5db48a65e12940d3eb7461f55\"\n+dependencies = [\n+ \"bitflags\",\n+ \"memchr\",\n+ \"unicase\",\n+]\n+\n+[[package]]\n+name = \"pulldown-cmark-to-cmark\"\n+version = \"5.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"32accf4473121d8c0b508ca5673363703762d6cc59cf25af1df48f653346f736\"\n+dependencies = [\n+ \"pulldown-cmark\",\n+]\n+\n [[package]]\n name = \"quote\"\n version = \"1.0.7\"\n@@ -1692,6 +1722,15 @@ version = \"1.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"ca4d39065b45f658d33013f7cc93ee050708cd543f6e07dd15b4293fcf217e12\"\n \n+[[package]]\n+name = \"unicase\"\n+version = \"2.6.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"50f37be617794602aabbeee0be4f259dc1778fabe05e2d67ee8f79326d5cb4f6\"\n+dependencies = [\n+ \"version_check\",\n+]\n+\n [[package]]\n name = \"unicode-bidi\"\n version = \"0.3.4\"\n@@ -1734,6 +1773,12 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"version_check\"\n+version = \"0.9.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b5a972e5669d67ba988ce3dc826706fb0a8b01471c088cb0b6110b805cc36aed\"\n+\n [[package]]\n name = \"vfs\"\n version = \"0.0.0\""}, {"sha": "72f941c463fd8f9df450fbeb7278d778542d4391", "filename": "crates/hir/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Fhir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Fhir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2FCargo.toml?ref=96cbad9fb5a67dd6cd83fe217716d932300122b5", "patch": "@@ -15,6 +15,7 @@ rustc-hash = \"1.1.0\"\n either = \"1.5.3\"\n arrayvec = \"0.5.1\"\n itertools = \"0.9.0\"\n+url = \"2.1.1\"\n \n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }\n@@ -23,3 +24,4 @@ profile = { path = \"../profile\", version = \"0.0.0\" }\n hir_expand = { path = \"../hir_expand\", version = \"0.0.0\" }\n hir_def = { path = \"../hir_def\", version = \"0.0.0\" }\n hir_ty = { path = \"../hir_ty\", version = \"0.0.0\" }\n+tt = { path = \"../tt\", version = \"0.0.0\" }"}, {"sha": "94dd7f6f57d5ebd139a364f794b71b86e42a5896", "filename": "crates/hir/src/code_model.rs", "status": "modified", "additions": 101, "deletions": 2, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Fhir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Fhir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fcode_model.rs?ref=96cbad9fb5a67dd6cd83fe217716d932300122b5", "patch": "@@ -20,7 +20,7 @@ use hir_def::{\n     type_ref::{Mutability, TypeRef},\n     AdtId, AssocContainerId, ConstId, DefWithBodyId, EnumId, FunctionId, GenericDefId, HasModule,\n     ImplId, LocalEnumVariantId, LocalFieldId, LocalModuleId, Lookup, ModuleId, StaticId, StructId,\n-    TraitId, TypeAliasId, TypeParamId, UnionId,\n+    TraitId, TypeAliasId, TypeParamId, UnionId, VariantId,\n };\n use hir_expand::{\n     diagnostics::DiagnosticSink,\n@@ -39,9 +39,11 @@ use syntax::{\n     ast::{self, AttrsOwner, NameOwner},\n     AstNode, SmolStr,\n };\n+use tt::{Ident, Leaf, Literal, TokenTree};\n \n use crate::{\n     db::{DefDatabase, HirDatabase},\n+    doc_links::Resolvable,\n     has_source::HasSource,\n     HirDisplay, InFile, Name,\n };\n@@ -122,6 +124,31 @@ impl Crate {\n     pub fn all(db: &dyn HirDatabase) -> Vec<Crate> {\n         db.crate_graph().iter().map(|id| Crate { id }).collect()\n     }\n+\n+    /// Try to get the root URL of the documentation of a crate.\n+    pub fn get_html_root_url(self: &Crate, db: &dyn HirDatabase) -> Option<String> {\n+        // Look for #![doc(html_root_url = \"...\")]\n+        let attrs = db.attrs(AttrDef::from(self.root_module(db)).into());\n+        let doc_attr_q = attrs.by_key(\"doc\");\n+\n+        if !doc_attr_q.exists() {\n+            return None;\n+        }\n+\n+        let doc_url = doc_attr_q.tt_values().map(|tt| {\n+            let name = tt.token_trees.iter()\n+                .skip_while(|tt| !matches!(tt, TokenTree::Leaf(Leaf::Ident(Ident{text: ref ident, ..})) if ident == \"html_root_url\"))\n+                .skip(2)\n+                .next();\n+\n+            match name {\n+                Some(TokenTree::Leaf(Leaf::Literal(Literal{ref text, ..}))) => Some(text),\n+                _ => None\n+            }\n+        }).flat_map(|t| t).next();\n+\n+        doc_url.map(|s| s.trim_matches('\"').trim_end_matches(\"/\").to_owned() + \"/\")\n+    }\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -198,7 +225,6 @@ impl ModuleDef {\n             ModuleDef::Function(it) => Some(it.name(db)),\n             ModuleDef::EnumVariant(it) => Some(it.name(db)),\n             ModuleDef::TypeAlias(it) => Some(it.name(db)),\n-\n             ModuleDef::Module(it) => it.name(db),\n             ModuleDef::Const(it) => it.name(db),\n             ModuleDef::Static(it) => it.name(db),\n@@ -1771,3 +1797,76 @@ pub trait HasVisibility {\n         vis.is_visible_from(db.upcast(), module.id)\n     }\n }\n+\n+impl Resolvable for ModuleDef {\n+    fn resolver<D: DefDatabase + HirDatabase>(&self, db: &D) -> Option<Resolver> {\n+        Some(match self {\n+            ModuleDef::Module(m) => ModuleId::from(m.clone()).resolver(db),\n+            ModuleDef::Function(f) => FunctionId::from(f.clone()).resolver(db),\n+            ModuleDef::Adt(adt) => AdtId::from(adt.clone()).resolver(db),\n+            ModuleDef::EnumVariant(ev) => {\n+                GenericDefId::from(GenericDef::from(ev.clone())).resolver(db)\n+            }\n+            ModuleDef::Const(c) => GenericDefId::from(GenericDef::from(c.clone())).resolver(db),\n+            ModuleDef::Static(s) => StaticId::from(s.clone()).resolver(db),\n+            ModuleDef::Trait(t) => TraitId::from(t.clone()).resolver(db),\n+            ModuleDef::TypeAlias(t) => ModuleId::from(t.module(db)).resolver(db),\n+            // FIXME: This should be a resolver relative to `std/core`\n+            ModuleDef::BuiltinType(_t) => None?,\n+        })\n+    }\n+\n+    fn try_into_module_def(self) -> Option<ModuleDef> {\n+        Some(self)\n+    }\n+}\n+\n+impl Resolvable for TypeParam {\n+    fn resolver<D: DefDatabase + HirDatabase>(&self, db: &D) -> Option<Resolver> {\n+        Some(Into::<ModuleId>::into(self.module(db)).resolver(db))\n+    }\n+\n+    fn try_into_module_def(self) -> Option<ModuleDef> {\n+        None\n+    }\n+}\n+\n+impl Resolvable for MacroDef {\n+    fn resolver<D: DefDatabase + HirDatabase>(&self, db: &D) -> Option<Resolver> {\n+        Some(Into::<ModuleId>::into(self.module(db)?).resolver(db))\n+    }\n+\n+    fn try_into_module_def(self) -> Option<ModuleDef> {\n+        None\n+    }\n+}\n+\n+impl Resolvable for Field {\n+    fn resolver<D: DefDatabase + HirDatabase>(&self, db: &D) -> Option<Resolver> {\n+        Some(Into::<VariantId>::into(Into::<VariantDef>::into(self.parent_def(db))).resolver(db))\n+    }\n+\n+    fn try_into_module_def(self) -> Option<ModuleDef> {\n+        None\n+    }\n+}\n+\n+impl Resolvable for ImplDef {\n+    fn resolver<D: DefDatabase + HirDatabase>(&self, db: &D) -> Option<Resolver> {\n+        Some(Into::<ModuleId>::into(self.module(db)).resolver(db))\n+    }\n+\n+    fn try_into_module_def(self) -> Option<ModuleDef> {\n+        None\n+    }\n+}\n+\n+impl Resolvable for Local {\n+    fn resolver<D: DefDatabase + HirDatabase>(&self, db: &D) -> Option<Resolver> {\n+        Some(Into::<ModuleId>::into(self.module(db)).resolver(db))\n+    }\n+\n+    fn try_into_module_def(self) -> Option<ModuleDef> {\n+        None\n+    }\n+}"}, {"sha": "dd2379bfc6668a26d77994bfcfc3491672946c7d", "filename": "crates/hir/src/doc_links.rs", "status": "added", "additions": 233, "deletions": 0, "changes": 233, "blob_url": "https://github.com/rust-lang/rust/blob/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Fhir%2Fsrc%2Fdoc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Fhir%2Fsrc%2Fdoc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fdoc_links.rs?ref=96cbad9fb5a67dd6cd83fe217716d932300122b5", "patch": "@@ -0,0 +1,233 @@\n+//! Resolves links in markdown documentation.\n+\n+use std::iter::once;\n+\n+use itertools::Itertools;\n+use url::Url;\n+\n+use crate::{db::HirDatabase, Adt, AsName, Crate, Hygiene, ItemInNs, ModPath, ModuleDef};\n+use hir_def::{db::DefDatabase, resolver::Resolver};\n+use syntax::ast::Path;\n+\n+pub fn resolve_doc_link<T: Resolvable + Clone, D: DefDatabase + HirDatabase>(\n+    db: &D,\n+    definition: &T,\n+    link_text: &str,\n+    link_target: &str,\n+) -> Option<(String, String)> {\n+    try_resolve_intra(db, definition, link_text, &link_target).or_else(|| {\n+        if let Some(definition) = definition.clone().try_into_module_def() {\n+            try_resolve_path(db, &definition, &link_target)\n+                .map(|target| (target, link_text.to_string()))\n+        } else {\n+            None\n+        }\n+    })\n+}\n+\n+/// Try to resolve path to local documentation via intra-doc-links (i.e. `super::gateway::Shard`).\n+///\n+/// See [RFC1946](https://github.com/rust-lang/rfcs/blob/master/text/1946-intra-rustdoc-links.md).\n+fn try_resolve_intra<T: Resolvable, D: DefDatabase + HirDatabase>(\n+    db: &D,\n+    definition: &T,\n+    link_text: &str,\n+    link_target: &str,\n+) -> Option<(String, String)> {\n+    // Set link_target for implied shortlinks\n+    let link_target =\n+        if link_target.is_empty() { link_text.trim_matches('`') } else { link_target };\n+\n+    let doclink = IntraDocLink::from(link_target);\n+\n+    // Parse link as a module path\n+    let path = Path::parse(doclink.path).ok()?;\n+    let modpath = ModPath::from_src(path, &Hygiene::new_unhygienic()).unwrap();\n+\n+    // Resolve it relative to symbol's location (according to the RFC this should consider small scopes)\n+    let resolver = definition.resolver(db)?;\n+\n+    let resolved = resolver.resolve_module_path_in_items(db, &modpath);\n+    let (defid, namespace) = match doclink.namespace {\n+        // FIXME: .or(resolved.macros)\n+        None => resolved\n+            .types\n+            .map(|t| (t.0, Namespace::Types))\n+            .or(resolved.values.map(|t| (t.0, Namespace::Values)))?,\n+        Some(ns @ Namespace::Types) => (resolved.types?.0, ns),\n+        Some(ns @ Namespace::Values) => (resolved.values?.0, ns),\n+        // FIXME:\n+        Some(Namespace::Macros) => None?,\n+    };\n+\n+    // Get the filepath of the final symbol\n+    let def: ModuleDef = defid.into();\n+    let module = def.module(db)?;\n+    let krate = module.krate();\n+    let ns = match namespace {\n+        Namespace::Types => ItemInNs::Types(defid),\n+        Namespace::Values => ItemInNs::Values(defid),\n+        // FIXME:\n+        Namespace::Macros => None?,\n+    };\n+    let import_map = db.import_map(krate.into());\n+    let path = import_map.path_of(ns)?;\n+\n+    Some((\n+        get_doc_url(db, &krate)?\n+            .join(&format!(\"{}/\", krate.display_name(db)?))\n+            .ok()?\n+            .join(&path.segments.iter().map(|name| name.to_string()).join(\"/\"))\n+            .ok()?\n+            .join(&get_symbol_filename(db, &def)?)\n+            .ok()?\n+            .into_string(),\n+        strip_prefixes_suffixes(link_text).to_string(),\n+    ))\n+}\n+\n+/// Try to resolve path to local documentation via path-based links (i.e. `../gateway/struct.Shard.html`).\n+fn try_resolve_path(db: &dyn HirDatabase, moddef: &ModuleDef, link_target: &str) -> Option<String> {\n+    if !link_target.contains(\"#\") && !link_target.contains(\".html\") {\n+        return None;\n+    }\n+    let ns = ItemInNs::Types(moddef.clone().into());\n+\n+    let module = moddef.module(db)?;\n+    let krate = module.krate();\n+    let import_map = db.import_map(krate.into());\n+    let base = once(format!(\"{}\", krate.display_name(db)?))\n+        .chain(import_map.path_of(ns)?.segments.iter().map(|name| format!(\"{}\", name)))\n+        .join(\"/\");\n+\n+    get_doc_url(db, &krate)\n+        .and_then(|url| url.join(&base).ok())\n+        .and_then(|url| {\n+            get_symbol_filename(db, moddef).as_deref().map(|f| url.join(f).ok()).flatten()\n+        })\n+        .and_then(|url| url.join(link_target).ok())\n+        .map(|url| url.into_string())\n+}\n+\n+/// Strip prefixes, suffixes, and inline code marks from the given string.\n+fn strip_prefixes_suffixes(mut s: &str) -> &str {\n+    s = s.trim_matches('`');\n+\n+    [\n+        (TYPES.0.iter(), TYPES.1.iter()),\n+        (VALUES.0.iter(), VALUES.1.iter()),\n+        (MACROS.0.iter(), MACROS.1.iter()),\n+    ]\n+    .iter()\n+    .for_each(|(prefixes, suffixes)| {\n+        prefixes.clone().for_each(|prefix| s = s.trim_start_matches(*prefix));\n+        suffixes.clone().for_each(|suffix| s = s.trim_end_matches(*suffix));\n+    });\n+    let s = s.trim_start_matches(\"@\").trim();\n+    s\n+}\n+\n+fn get_doc_url(db: &dyn HirDatabase, krate: &Crate) -> Option<Url> {\n+    krate\n+        .get_html_root_url(db)\n+        .or_else(||\n+        // Fallback to docs.rs\n+        // FIXME: Specify an exact version here. This may be difficult, as multiple versions of the same crate could exist.\n+        Some(format!(\"https://docs.rs/{}/*/\", krate.display_name(db)?)))\n+        .and_then(|s| Url::parse(&s).ok())\n+}\n+\n+/// Get the filename and extension generated for a symbol by rustdoc.\n+///\n+/// Example: `struct.Shard.html`\n+fn get_symbol_filename(db: &dyn HirDatabase, definition: &ModuleDef) -> Option<String> {\n+    Some(match definition {\n+        ModuleDef::Adt(adt) => match adt {\n+            Adt::Struct(s) => format!(\"struct.{}.html\", s.name(db)),\n+            Adt::Enum(e) => format!(\"enum.{}.html\", e.name(db)),\n+            Adt::Union(u) => format!(\"union.{}.html\", u.name(db)),\n+        },\n+        ModuleDef::Module(_) => \"index.html\".to_string(),\n+        ModuleDef::Trait(t) => format!(\"trait.{}.html\", t.name(db)),\n+        ModuleDef::TypeAlias(t) => format!(\"type.{}.html\", t.name(db)),\n+        ModuleDef::BuiltinType(t) => format!(\"primitive.{}.html\", t.as_name()),\n+        ModuleDef::Function(f) => format!(\"fn.{}.html\", f.name(db)),\n+        ModuleDef::EnumVariant(ev) => {\n+            format!(\"enum.{}.html#variant.{}\", ev.parent_enum(db).name(db), ev.name(db))\n+        }\n+        ModuleDef::Const(c) => format!(\"const.{}.html\", c.name(db)?),\n+        ModuleDef::Static(s) => format!(\"static.{}.html\", s.name(db)?),\n+    })\n+}\n+\n+struct IntraDocLink<'s> {\n+    path: &'s str,\n+    namespace: Option<Namespace>,\n+}\n+\n+impl<'s> From<&'s str> for IntraDocLink<'s> {\n+    fn from(s: &'s str) -> Self {\n+        Self { path: strip_prefixes_suffixes(s), namespace: Namespace::from_intra_spec(s) }\n+    }\n+}\n+\n+#[derive(PartialEq, Eq, Hash, Copy, Clone, Debug)]\n+enum Namespace {\n+    Types,\n+    Values,\n+    Macros,\n+}\n+\n+static TYPES: ([&str; 7], [&str; 0]) =\n+    ([\"type\", \"struct\", \"enum\", \"mod\", \"trait\", \"union\", \"module\"], []);\n+static VALUES: ([&str; 8], [&str; 1]) =\n+    ([\"value\", \"function\", \"fn\", \"method\", \"const\", \"static\", \"mod\", \"module\"], [\"()\"]);\n+static MACROS: ([&str; 1], [&str; 1]) = ([\"macro\"], [\"!\"]);\n+\n+impl Namespace {\n+    /// Extract the specified namespace from an intra-doc-link if one exists.\n+    ///\n+    /// # Examples\n+    ///\n+    /// * `struct MyStruct` -> `Namespace::Types`\n+    /// * `panic!` -> `Namespace::Macros`\n+    /// * `fn@from_intra_spec` -> `Namespace::Values`\n+    fn from_intra_spec(s: &str) -> Option<Self> {\n+        [\n+            (Namespace::Types, (TYPES.0.iter(), TYPES.1.iter())),\n+            (Namespace::Values, (VALUES.0.iter(), VALUES.1.iter())),\n+            (Namespace::Macros, (MACROS.0.iter(), MACROS.1.iter())),\n+        ]\n+        .iter()\n+        .filter(|(_ns, (prefixes, suffixes))| {\n+            prefixes\n+                .clone()\n+                .map(|prefix| {\n+                    s.starts_with(*prefix)\n+                        && s.chars()\n+                            .nth(prefix.len() + 1)\n+                            .map(|c| c == '@' || c == ' ')\n+                            .unwrap_or(false)\n+                })\n+                .any(|cond| cond)\n+                || suffixes\n+                    .clone()\n+                    .map(|suffix| {\n+                        s.starts_with(*suffix)\n+                            && s.chars()\n+                                .nth(suffix.len() + 1)\n+                                .map(|c| c == '@' || c == ' ')\n+                                .unwrap_or(false)\n+                    })\n+                    .any(|cond| cond)\n+        })\n+        .map(|(ns, (_, _))| *ns)\n+        .next()\n+    }\n+}\n+\n+/// Sealed trait used solely for the generic bound on [`resolve_doc_link`].\n+pub trait Resolvable {\n+    fn resolver<D: DefDatabase + HirDatabase>(&self, db: &D) -> Option<Resolver>;\n+    fn try_into_module_def(self) -> Option<ModuleDef>;\n+}"}, {"sha": "d1f4d7813236553c05b52cea39b1dcee3dcf6162", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=96cbad9fb5a67dd6cd83fe217716d932300122b5", "patch": "@@ -27,6 +27,7 @@ pub mod diagnostics;\n \n mod from_id;\n mod code_model;\n+mod doc_links;\n \n mod has_source;\n \n@@ -37,6 +38,7 @@ pub use crate::{\n         Function, GenericDef, HasAttrs, HasVisibility, ImplDef, Local, MacroDef, Module, ModuleDef,\n         ScopeDef, Static, Struct, Trait, Type, TypeAlias, TypeParam, Union, VariantDef, Visibility,\n     },\n+    doc_links::resolve_doc_link,\n     has_source::HasSource,\n     semantics::{original_range, PathResolution, Semantics, SemanticsScope},\n };\n@@ -47,13 +49,14 @@ pub use hir_def::{\n     body::scope::ExprScopes,\n     builtin_type::BuiltinType,\n     docs::Documentation,\n+    item_scope::ItemInNs,\n     nameres::ModuleSource,\n     path::ModPath,\n     type_ref::{Mutability, TypeRef},\n };\n pub use hir_expand::{\n-    name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc, /* FIXME */ MacroDefId,\n-    MacroFile, Origin,\n+    name::AsName, name::Name, HirFileId, InFile, MacroCallId, MacroCallLoc,\n+    /* FIXME */ MacroDefId, MacroFile, Origin,\n };\n pub use hir_ty::display::HirDisplay;\n "}, {"sha": "e61c276df5e6a9b36c71eea9f1d9e99d4d8ca677", "filename": "crates/ide/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Fide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Fide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2FCargo.toml?ref=96cbad9fb5a67dd6cd83fe217716d932300122b5", "patch": "@@ -16,6 +16,8 @@ itertools = \"0.9.0\"\n log = \"0.4.8\"\n rustc-hash = \"1.1.0\"\n oorandom = \"11.1.2\"\n+pulldown-cmark-to-cmark = \"5.0.0\"\n+pulldown-cmark = {version = \"0.7.2\", default-features = false}\n \n stdx = { path = \"../stdx\", version = \"0.0.0\" }\n syntax = { path = \"../syntax\", version = \"0.0.0\" }"}, {"sha": "b012e4900f144cdbdb62e79de17c3000733e9fd7", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 542, "deletions": 55, "changes": 597, "blob_url": "https://github.com/rust-lang/rust/blob/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=96cbad9fb5a67dd6cd83fe217716d932300122b5", "patch": "@@ -14,6 +14,7 @@ use test_utils::mark;\n \n use crate::{\n     display::{macro_label, ShortLabel, ToNav, TryToNav},\n+    link_rewrite::rewrite_links,\n     markup::Markup,\n     runnables::runnable,\n     FileId, FilePosition, NavigationTarget, RangeInfo, Runnable,\n@@ -92,7 +93,8 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n     };\n     if let Some(definition) = definition {\n         if let Some(markup) = hover_for_definition(db, definition) {\n-            res.markup = markup;\n+            let markup = rewrite_links(db, &markup.as_str(), &definition);\n+            res.markup = Markup::from(markup);\n             if let Some(action) = show_implementations_action(db, definition) {\n                 res.actions.push(action);\n             }\n@@ -425,6 +427,7 @@ fn main() {\n \"#,\n             expect![[r#\"\n                 *iter*\n+\n                 ```rust\n                 Iter<Scan<OtherStruct<OtherStruct<i32>>, |&mut u32, &u32, &mut u32| -> Option<u32>, u32>>\n                 ```\n@@ -443,6 +446,11 @@ fn main() { let foo_test = fo<|>o(); }\n \"#,\n             expect![[r#\"\n                 *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n                 ```rust\n                 pub fn foo() -> u32\n                 ```\n@@ -487,6 +495,11 @@ fn main() { let foo_test = fo<|>o(); }\n         \"#,\n             expect![[r#\"\n                 *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n                 ```rust\n                 pub fn foo<'a, T: AsRef<str>>(b: &'a T) -> &'a str\n                 ```\n@@ -504,6 +517,11 @@ fn main() { }\n \"#,\n             expect![[r#\"\n                 *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n                 ```rust\n                 pub fn foo(a: u32, b: u32) -> u32\n                 ```\n@@ -525,20 +543,27 @@ pub fn foo<|>(_: &Path) {}\n \n fn main() { }\n \"#,\n-            expect![[r#\"\n+            expect![[r##\"\n                 *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n                 ```rust\n                 pub fn foo(_: &Path)\n                 ```\n-                ___\n+\n+                ---\n \n                 # Example\n+\n                 ```\n                 # use std::path::Path;\n                 #\n                 foo(Path::new(\"hello, world!\"))\n                 ```\n-            \"#]],\n+            \"##]],\n         );\n     }\n \n@@ -555,8 +580,9 @@ fn main() {\n \"#,\n             expect![[r#\"\n                 *field_a*\n+\n                 ```rust\n-                Foo\n+                test::Foo\n                 ```\n \n                 ```rust\n@@ -576,8 +602,9 @@ fn main() {\n \"#,\n             expect![[r#\"\n                 *field_a*\n+\n                 ```rust\n-                Foo\n+                test::Foo\n                 ```\n \n                 ```rust\n@@ -593,6 +620,11 @@ fn main() {\n             r#\"const foo<|>: u32 = 123;\"#,\n             expect![[r#\"\n                 *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n                 ```rust\n                 const foo: u32 = 123\n                 ```\n@@ -602,6 +634,11 @@ fn main() {\n             r#\"static foo<|>: u32 = 456;\"#,\n             expect![[r#\"\n                 *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n                 ```rust\n                 static foo: u32\n                 ```\n@@ -620,6 +657,7 @@ fn main() {\n }\"#,\n             expect![[r#\"\n                 *zz*\n+\n                 ```rust\n                 Test<i32, u8>\n                 ```\n@@ -638,8 +676,9 @@ fn main() { So<|>me(12); }\n \"#,\n             expect![[r#\"\n                 *Some*\n+\n                 ```rust\n-                Option\n+                test::Option\n                 ```\n \n                 ```rust\n@@ -657,6 +696,7 @@ fn main() { let b<|>ar = Some(12); }\n \"#,\n             expect![[r#\"\n                 *bar*\n+\n                 ```rust\n                 Option<i32>\n                 ```\n@@ -675,14 +715,16 @@ enum Option<T> {\n \"#,\n             expect![[r#\"\n                 *None*\n+\n                 ```rust\n-                Option\n+                test::Option\n                 ```\n \n                 ```rust\n                 None\n                 ```\n-                ___\n+\n+                ---\n \n                 The None variant\n             \"#]],\n@@ -700,14 +742,16 @@ fn main() {\n \"#,\n             expect![[r#\"\n                 *Some*\n+\n                 ```rust\n-                Option\n+                test::Option\n                 ```\n \n                 ```rust\n                 Some\n                 ```\n-                ___\n+\n+                ---\n \n                 The Some variant\n             \"#]],\n@@ -720,6 +764,7 @@ fn main() {\n             r#\"fn func(foo: i32) { fo<|>o; }\"#,\n             expect![[r#\"\n                 *foo*\n+\n                 ```rust\n                 i32\n                 ```\n@@ -733,6 +778,7 @@ fn main() {\n             r#\"fn func(fo<|>o: i32) {}\"#,\n             expect![[r#\"\n                 *foo*\n+\n                 ```rust\n                 i32\n                 ```\n@@ -746,6 +792,7 @@ fn main() {\n             r#\"fn func(foo: i32) { if true { <|>foo; }; }\"#,\n             expect![[r#\"\n                 *foo*\n+\n                 ```rust\n                 i32\n                 ```\n@@ -759,6 +806,7 @@ fn main() {\n             r#\"fn func(<|>foo: i32) {}\"#,\n             expect![[r#\"\n                 *foo*\n+\n                 ```rust\n                 i32\n                 ```\n@@ -778,6 +826,7 @@ fn main() {\n             fn f(_x<|>: impl Deref<Target=u8> + DerefMut<Target=u8>) {}\"#,\n             expect![[r#\"\n                 *_x*\n+\n                 ```rust\n                 impl Deref<Target = u8> + DerefMut<Target = u8>\n                 ```\n@@ -799,6 +848,7 @@ fn main() { let foo_<|>test = Thing::new(); }\n             \"#,\n             expect![[r#\"\n                 *foo_test*\n+\n                 ```rust\n                 Thing\n                 ```\n@@ -822,8 +872,9 @@ fn main() { let foo_test = wrapper::Thing::new<|>(); }\n \"#,\n             expect![[r#\"\n                 *new*\n+\n                 ```rust\n-                wrapper::Thing\n+                test::wrapper::Thing\n                 ```\n \n                 ```rust\n@@ -852,6 +903,11 @@ fn main() {\n \"#,\n             expect![[r#\"\n                 *C*\n+\n+                ```rust\n+                test\n+                ```\n+\n                 ```rust\n                 const C: u32 = 1\n                 ```\n@@ -929,6 +985,7 @@ fn y() {\n \"#,\n             expect![[r#\"\n                 *x*\n+\n                 ```rust\n                 i32\n                 ```\n@@ -946,6 +1003,11 @@ fn f() { fo<|>o!(); }\n \"#,\n             expect![[r#\"\n                 *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n                 ```rust\n                 macro_rules! foo\n                 ```\n@@ -976,6 +1038,11 @@ id! {\n \"#,\n             expect![[r#\"\n                 *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n                 ```rust\n                 fn foo()\n                 ```\n@@ -992,6 +1059,7 @@ fn foo(bar:u32) { let a = id!(ba<|>r); }\n \"#,\n             expect![[r#\"\n                 *bar*\n+\n                 ```rust\n                 u32\n                 ```\n@@ -1009,6 +1077,7 @@ fn foo(bar:u32) { let a = id!(ba<|>r); }\n \"#,\n             expect![[r#\"\n                 *bar*\n+\n                 ```rust\n                 u32\n                 ```\n@@ -1067,6 +1136,11 @@ fn foo() {\n \"#,\n             expect![[r#\"\n                 *bar*\n+\n+                ```rust\n+                test\n+                ```\n+\n                 ```rust\n                 fn bar() -> bool\n                 ```\n@@ -1099,12 +1173,18 @@ fn bar() { fo<|>o(); }\n \",\n             expect![[r#\"\n                 *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n                 ```rust\n                 fn foo()\n                 ```\n-                ___\n \n-                <- `\u3000` here\n+                ---\n+\n+                \\<- `\u3000` here\n             \"#]],\n         );\n     }\n@@ -1115,6 +1195,11 @@ fn bar() { fo<|>o(); }\n             r#\"async fn foo<|>() {}\"#,\n             expect![[r#\"\n                 *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n                 ```rust\n                 async fn foo()\n                 ```\n@@ -1124,6 +1209,11 @@ fn bar() { fo<|>o(); }\n             r#\"pub const unsafe fn foo<|>() {}\"#,\n             expect![[r#\"\n                 *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n                 ```rust\n                 pub const unsafe fn foo()\n                 ```\n@@ -1133,6 +1223,11 @@ fn bar() { fo<|>o(); }\n             r#\"pub(crate) async unsafe extern \"C\" fn foo<|>() {}\"#,\n             expect![[r#\"\n                 *foo*\n+\n+                ```rust\n+                test\n+                ```\n+\n                 ```rust\n                 pub(crate) async unsafe extern \"C\" fn foo()\n                 ```\n@@ -1210,6 +1305,11 @@ fn my() {}\n \"#,\n             expect![[r#\"\n                 *my*\n+\n+                ```rust\n+                test\n+                ```\n+\n                 ```rust\n                 mod my\n                 ```\n@@ -1228,10 +1328,16 @@ fn foo() { let bar = Ba<|>r; }\n \"#,\n             expect![[r#\"\n                 *Bar*\n+\n+                ```rust\n+                test\n+                ```\n+\n                 ```rust\n                 struct Bar\n                 ```\n-                ___\n+\n+                ---\n \n                 bar docs\n             \"#]],\n@@ -1249,10 +1355,16 @@ fn foo() { let bar = Ba<|>r; }\n \"#,\n             expect![[r#\"\n                 *Bar*\n+\n+                ```rust\n+                test\n+                ```\n+\n                 ```rust\n                 struct Bar\n                 ```\n-                ___\n+\n+                ---\n \n                 bar docs\n             \"#]],\n@@ -1272,10 +1384,16 @@ fn foo() { let bar = Ba<|>r; }\n \"#,\n             expect![[r#\"\n                 *Bar*\n+\n+                ```rust\n+                test\n+                ```\n+\n                 ```rust\n                 struct Bar\n                 ```\n-                ___\n+\n+                ---\n \n                 bar docs 0\n \n@@ -1286,6 +1404,371 @@ fn foo() { let bar = Ba<|>r; }\n         );\n     }\n \n+    #[test]\n+    fn test_hover_path_link() {\n+        check(\n+            r\"\n+            //- /lib.rs\n+            pub struct Foo;\n+            /// [Foo](struct.Foo.html)\n+            pub struct B<|>ar\n+            \",\n+            expect![[r#\"\n+                *Bar*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                pub struct Bar\n+                ```\n+\n+                ---\n+\n+                [Foo](https://docs.rs/test/*/test/struct.Foo.html)\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_path_link_no_strip() {\n+        check(\n+            r\"\n+            //- /lib.rs\n+            pub struct Foo;\n+            /// [struct Foo](struct.Foo.html)\n+            pub struct B<|>ar\n+            \",\n+            expect![[r#\"\n+                *Bar*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                pub struct Bar\n+                ```\n+\n+                ---\n+\n+                [struct Foo](https://docs.rs/test/*/test/struct.Foo.html)\n+            \"#]],\n+        );\n+    }\n+\n+    #[ignore = \"path based links currently only support documentation on ModuleDef items\"]\n+    #[test]\n+    fn test_hover_path_link_field() {\n+        check(\n+            r\"\n+            //- /lib.rs\n+            pub struct Foo;\n+            pub struct Bar {\n+                /// [Foo](struct.Foo.html)\n+                fie<|>ld: ()\n+            }\n+            \",\n+            expect![[r#\"\n+                *field*\n+\n+                ```rust\n+                test::Bar\n+                ```\n+\n+                ```rust\n+                field: ()\n+                ```\n+\n+                ---\n+\n+                [Foo](https://docs.rs/test/*/test/struct.Foo.html)\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_intra_link() {\n+        check(\n+            r\"\n+            //- /lib.rs\n+            pub mod foo {\n+                pub struct Foo;\n+            }\n+            /// [Foo](foo::Foo)\n+            pub struct B<|>ar\n+            \",\n+            expect![[r#\"\n+                *Bar*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                pub struct Bar\n+                ```\n+\n+                ---\n+\n+                [Foo](https://docs.rs/test/*/test/foo/struct.Foo.html)\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_intra_link_html_root_url() {\n+        check(\n+            r#\"\n+            //- /lib.rs\n+\n+            #![doc(arbitrary_attribute = \"test\", html_root_url = \"https:/example.com\", arbitrary_attribute2)]\n+\n+            pub mod foo {\n+                pub struct Foo;\n+            }\n+            /// [Foo](foo::Foo)\n+            pub struct B<|>ar\n+            \"#,\n+            expect![[r#\"\n+                *Bar*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                pub struct Bar\n+                ```\n+\n+                ---\n+\n+                [Foo](https://example.com/test/foo/struct.Foo.html)\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_intra_link_shortlink() {\n+        check(\n+            r\"\n+            //- /lib.rs\n+            pub struct Foo;\n+            /// [Foo]\n+            pub struct B<|>ar\n+            \",\n+            expect![[r#\"\n+                *Bar*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                pub struct Bar\n+                ```\n+\n+                ---\n+\n+                [Foo](https://docs.rs/test/*/test/struct.Foo.html)\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_intra_link_shortlink_code() {\n+        check(\n+            r\"\n+            //- /lib.rs\n+            pub struct Foo;\n+            /// [`Foo`]\n+            pub struct B<|>ar\n+            \",\n+            expect![[r#\"\n+                *Bar*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                pub struct Bar\n+                ```\n+\n+                ---\n+\n+                [`Foo`](https://docs.rs/test/*/test/struct.Foo.html)\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_intra_link_namespaced() {\n+        check(\n+            r\"\n+            //- /lib.rs\n+            pub struct Foo;\n+            fn Foo() {}\n+            /// [Foo()]\n+            pub struct B<|>ar\n+            \",\n+            expect![[r#\"\n+                *Bar*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                pub struct Bar\n+                ```\n+\n+                ---\n+\n+                [Foo](https://docs.rs/test/*/test/struct.Foo.html)\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_intra_link_shortlink_namspaced_code() {\n+        check(\n+            r\"\n+            //- /lib.rs\n+            pub struct Foo;\n+            /// [`struct Foo`]\n+            pub struct B<|>ar\n+            \",\n+            expect![[r#\"\n+                *Bar*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                pub struct Bar\n+                ```\n+\n+                ---\n+\n+                [`Foo`](https://docs.rs/test/*/test/struct.Foo.html)\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_intra_link_shortlink_namspaced_code_with_at() {\n+        check(\n+            r\"\n+            //- /lib.rs\n+            pub struct Foo;\n+            /// [`struct@Foo`]\n+            pub struct B<|>ar\n+            \",\n+            expect![[r#\"\n+                *Bar*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                pub struct Bar\n+                ```\n+\n+                ---\n+\n+                [`Foo`](https://docs.rs/test/*/test/struct.Foo.html)\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_intra_link_reference() {\n+        check(\n+            r\"\n+            //- /lib.rs\n+            pub struct Foo;\n+            /// [my Foo][foo]\n+            ///\n+            /// [foo]: Foo\n+            pub struct B<|>ar\n+            \",\n+            expect![[r#\"\n+                *Bar*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                pub struct Bar\n+                ```\n+\n+                ---\n+\n+                [my Foo](https://docs.rs/test/*/test/struct.Foo.html)\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn test_hover_external_url() {\n+        check(\n+            r\"\n+            //- /lib.rs\n+            pub struct Foo;\n+            /// [external](https://www.google.com)\n+            pub struct B<|>ar\n+            \",\n+            expect![[r#\"\n+                *Bar*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                pub struct Bar\n+                ```\n+\n+                ---\n+\n+                [external](https://www.google.com)\n+            \"#]],\n+        );\n+    }\n+\n+    // Check that we don't rewrite links which we can't identify\n+    #[test]\n+    fn test_hover_unknown_target() {\n+        check(\n+            r\"\n+            //- /lib.rs\n+            pub struct Foo;\n+            /// [baz](Baz)\n+            pub struct B<|>ar\n+            \",\n+            expect![[r#\"\n+                *Bar*\n+\n+                ```rust\n+                test\n+                ```\n+\n+                ```rust\n+                pub struct Bar\n+                ```\n+\n+                ---\n+\n+                [baz](Baz)\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn test_hover_macro_generated_struct_fn_doc_comment() {\n         mark::check!(hover_macro_generated_struct_fn_doc_comment);\n@@ -1308,16 +1791,18 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n \"#,\n             expect![[r#\"\n                 *foo*\n+\n                 ```rust\n-                Bar\n+                test::Bar\n                 ```\n \n                 ```rust\n                 fn foo(&self)\n                 ```\n-                ___\n \n-                 Do the foo\n+                ---\n+\n+                Do the foo\n             \"#]],\n         );\n     }\n@@ -1344,14 +1829,16 @@ fn foo() { let bar = Bar; bar.fo<|>o(); }\n \"#,\n             expect![[r#\"\n                 *foo*\n+\n                 ```rust\n-                Bar\n+                test::Bar\n                 ```\n \n                 ```rust\n                 fn foo(&self)\n                 ```\n-                ___\n+\n+                ---\n \n                 Do the foo\n             \"#]],\n@@ -1526,7 +2013,7 @@ fn main() { let s<|>t = S{ f1:0 }; }\n                     GoToType(\n                         [\n                             HoverGotoTypeData {\n-                                mod_path: \"S\",\n+                                mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -1565,7 +2052,7 @@ fn main() { let s<|>t = S{ f1:Arg(0) }; }\n                     GoToType(\n                         [\n                             HoverGotoTypeData {\n-                                mod_path: \"S\",\n+                                mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -1584,7 +2071,7 @@ fn main() { let s<|>t = S{ f1:Arg(0) }; }\n                                 },\n                             },\n                             HoverGotoTypeData {\n-                                mod_path: \"Arg\",\n+                                mod_path: \"test::Arg\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -1623,7 +2110,7 @@ fn main() { let s<|>t = S{ f1: S{ f1: Arg(0) } }; }\n                     GoToType(\n                         [\n                             HoverGotoTypeData {\n-                                mod_path: \"S\",\n+                                mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -1642,7 +2129,7 @@ fn main() { let s<|>t = S{ f1: S{ f1: Arg(0) } }; }\n                                 },\n                             },\n                             HoverGotoTypeData {\n-                                mod_path: \"Arg\",\n+                                mod_path: \"test::Arg\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -1684,7 +2171,7 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                     GoToType(\n                         [\n                             HoverGotoTypeData {\n-                                mod_path: \"A\",\n+                                mod_path: \"test::A\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -1703,7 +2190,7 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                 },\n                             },\n                             HoverGotoTypeData {\n-                                mod_path: \"B\",\n+                                mod_path: \"test::B\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -1722,7 +2209,7 @@ fn main() { let s<|>t = (A(1), B(2), M::C(3) ); }\n                                 },\n                             },\n                             HoverGotoTypeData {\n-                                mod_path: \"M::C\",\n+                                mod_path: \"test::M::C\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -1761,7 +2248,7 @@ fn main() { let s<|>t = foo(); }\n                     GoToType(\n                         [\n                             HoverGotoTypeData {\n-                                mod_path: \"Foo\",\n+                                mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -1801,7 +2288,7 @@ fn main() { let s<|>t = foo(); }\n                     GoToType(\n                         [\n                             HoverGotoTypeData {\n-                                mod_path: \"Foo\",\n+                                mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -1820,7 +2307,7 @@ fn main() { let s<|>t = foo(); }\n                                 },\n                             },\n                             HoverGotoTypeData {\n-                                mod_path: \"S\",\n+                                mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -1860,7 +2347,7 @@ fn main() { let s<|>t = foo(); }\n                     GoToType(\n                         [\n                             HoverGotoTypeData {\n-                                mod_path: \"Foo\",\n+                                mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -1879,7 +2366,7 @@ fn main() { let s<|>t = foo(); }\n                                 },\n                             },\n                             HoverGotoTypeData {\n-                                mod_path: \"Bar\",\n+                                mod_path: \"test::Bar\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -1922,7 +2409,7 @@ fn main() { let s<|>t = foo(); }\n                     GoToType(\n                         [\n                             HoverGotoTypeData {\n-                                mod_path: \"Foo\",\n+                                mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -1941,7 +2428,7 @@ fn main() { let s<|>t = foo(); }\n                                 },\n                             },\n                             HoverGotoTypeData {\n-                                mod_path: \"Bar\",\n+                                mod_path: \"test::Bar\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -1960,7 +2447,7 @@ fn main() { let s<|>t = foo(); }\n                                 },\n                             },\n                             HoverGotoTypeData {\n-                                mod_path: \"S1\",\n+                                mod_path: \"test::S1\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -1979,7 +2466,7 @@ fn main() { let s<|>t = foo(); }\n                                 },\n                             },\n                             HoverGotoTypeData {\n-                                mod_path: \"S2\",\n+                                mod_path: \"test::S2\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -2016,7 +2503,7 @@ fn foo(ar<|>g: &impl Foo) {}\n                     GoToType(\n                         [\n                             HoverGotoTypeData {\n-                                mod_path: \"Foo\",\n+                                mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -2056,7 +2543,7 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                     GoToType(\n                         [\n                             HoverGotoTypeData {\n-                                mod_path: \"Foo\",\n+                                mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -2075,7 +2562,7 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                 },\n                             },\n                             HoverGotoTypeData {\n-                                mod_path: \"Bar\",\n+                                mod_path: \"test::Bar\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -2094,7 +2581,7 @@ fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n                                 },\n                             },\n                             HoverGotoTypeData {\n-                                mod_path: \"S\",\n+                                mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -2132,7 +2619,7 @@ fn foo(ar<|>g: &impl Foo<S>) {}\n                     GoToType(\n                         [\n                             HoverGotoTypeData {\n-                                mod_path: \"Foo\",\n+                                mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -2151,7 +2638,7 @@ fn foo(ar<|>g: &impl Foo<S>) {}\n                                 },\n                             },\n                             HoverGotoTypeData {\n-                                mod_path: \"S\",\n+                                mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -2194,7 +2681,7 @@ fn main() { let s<|>t = foo(); }\n                     GoToType(\n                         [\n                             HoverGotoTypeData {\n-                                mod_path: \"B\",\n+                                mod_path: \"test::B\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -2213,7 +2700,7 @@ fn main() { let s<|>t = foo(); }\n                                 },\n                             },\n                             HoverGotoTypeData {\n-                                mod_path: \"Foo\",\n+                                mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -2250,7 +2737,7 @@ fn foo(ar<|>g: &dyn Foo) {}\n                     GoToType(\n                         [\n                             HoverGotoTypeData {\n-                                mod_path: \"Foo\",\n+                                mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -2288,7 +2775,7 @@ fn foo(ar<|>g: &dyn Foo<S>) {}\n                     GoToType(\n                         [\n                             HoverGotoTypeData {\n-                                mod_path: \"Foo\",\n+                                mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -2307,7 +2794,7 @@ fn foo(ar<|>g: &dyn Foo<S>) {}\n                                 },\n                             },\n                             HoverGotoTypeData {\n-                                mod_path: \"S\",\n+                                mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -2348,7 +2835,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                     GoToType(\n                         [\n                             HoverGotoTypeData {\n-                                mod_path: \"ImplTrait\",\n+                                mod_path: \"test::ImplTrait\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -2367,7 +2854,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                 },\n                             },\n                             HoverGotoTypeData {\n-                                mod_path: \"B\",\n+                                mod_path: \"test::B\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -2386,7 +2873,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                 },\n                             },\n                             HoverGotoTypeData {\n-                                mod_path: \"DynTrait\",\n+                                mod_path: \"test::DynTrait\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -2405,7 +2892,7 @@ fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n                                 },\n                             },\n                             HoverGotoTypeData {\n-                                mod_path: \"S\",\n+                                mod_path: \"test::S\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,\n@@ -2453,7 +2940,7 @@ fn main() { let s<|>t = test().get(); }\n                     GoToType(\n                         [\n                             HoverGotoTypeData {\n-                                mod_path: \"Foo\",\n+                                mod_path: \"test::Foo\",\n                                 nav: NavigationTarget {\n                                     file_id: FileId(\n                                         1,"}, {"sha": "570790384ee59d2e80afb023b3beb6f0f2d88d19", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=96cbad9fb5a67dd6cd83fe217716d932300122b5", "patch": "@@ -43,6 +43,7 @@ mod status;\n mod syntax_highlighting;\n mod syntax_tree;\n mod typing;\n+mod link_rewrite;\n \n use std::sync::Arc;\n "}, {"sha": "ff3200eefb4d86a36b7d30250d73dd575f1f34d2", "filename": "crates/ide/src/link_rewrite.rs", "status": "added", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Fide%2Fsrc%2Flink_rewrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Fide%2Fsrc%2Flink_rewrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flink_rewrite.rs?ref=96cbad9fb5a67dd6cd83fe217716d932300122b5", "patch": "@@ -0,0 +1,81 @@\n+//! Resolves and rewrites links in markdown documentation.\n+//!\n+//! Most of the implementation can be found in [`hir::doc_links`].\n+\n+use pulldown_cmark::{CowStr, Event, Options, Parser, Tag};\n+use pulldown_cmark_to_cmark::{cmark_with_options, Options as CmarkOptions};\n+\n+use hir::resolve_doc_link;\n+use ide_db::{defs::Definition, RootDatabase};\n+\n+/// Rewrite documentation links in markdown to point to an online host (e.g. docs.rs)\n+pub fn rewrite_links(db: &RootDatabase, markdown: &str, definition: &Definition) -> String {\n+    let doc = Parser::new_with_broken_link_callback(\n+        markdown,\n+        Options::empty(),\n+        Some(&|label, _| Some((/*url*/ label.to_string(), /*title*/ label.to_string()))),\n+    );\n+\n+    let doc = map_links(doc, |target, title: &str| {\n+        // This check is imperfect, there's some overlap between valid intra-doc links\n+        // and valid URLs so we choose to be too eager to try to resolve what might be\n+        // a URL.\n+        if target.contains(\"://\") {\n+            (target.to_string(), title.to_string())\n+        } else {\n+            // Two posibilities:\n+            // * path-based links: `../../module/struct.MyStruct.html`\n+            // * module-based links (AKA intra-doc links): `super::super::module::MyStruct`\n+            let resolved = match definition {\n+                Definition::ModuleDef(t) => resolve_doc_link(db, t, title, target),\n+                Definition::Macro(t) => resolve_doc_link(db, t, title, target),\n+                Definition::Field(t) => resolve_doc_link(db, t, title, target),\n+                Definition::SelfType(t) => resolve_doc_link(db, t, title, target),\n+                Definition::Local(t) => resolve_doc_link(db, t, title, target),\n+                Definition::TypeParam(t) => resolve_doc_link(db, t, title, target),\n+            };\n+\n+            match resolved {\n+                Some((target, title)) => (target, title),\n+                None => (target.to_string(), title.to_string()),\n+            }\n+        }\n+    });\n+    let mut out = String::new();\n+    let mut options = CmarkOptions::default();\n+    options.code_block_backticks = 3;\n+    cmark_with_options(doc, &mut out, None, options).ok();\n+    out\n+}\n+\n+// Rewrites a markdown document, resolving links using `callback` and additionally striping prefixes/suffixes on link titles.\n+fn map_links<'e>(\n+    events: impl Iterator<Item = Event<'e>>,\n+    callback: impl Fn(&str, &str) -> (String, String),\n+) -> impl Iterator<Item = Event<'e>> {\n+    let mut in_link = false;\n+    let mut link_target: Option<CowStr> = None;\n+\n+    events.map(move |evt| match evt {\n+        Event::Start(Tag::Link(_link_type, ref target, _)) => {\n+            in_link = true;\n+            link_target = Some(target.clone());\n+            evt\n+        }\n+        Event::End(Tag::Link(link_type, _target, _)) => {\n+            in_link = false;\n+            Event::End(Tag::Link(link_type, link_target.take().unwrap(), CowStr::Borrowed(\"\")))\n+        }\n+        Event::Text(s) if in_link => {\n+            let (link_target_s, link_name) = callback(&link_target.take().unwrap(), &s);\n+            link_target = Some(CowStr::Boxed(link_target_s.into()));\n+            Event::Text(CowStr::Boxed(link_name.into()))\n+        }\n+        Event::Code(s) if in_link => {\n+            let (link_target_s, link_name) = callback(&link_target.take().unwrap(), &s);\n+            link_target = Some(CowStr::Boxed(link_target_s.into()));\n+            Event::Code(CowStr::Boxed(link_name.into()))\n+        }\n+        _ => evt,\n+    })\n+}"}, {"sha": "235796dbce78af439cf419e3be09e5b0fa0e2abd", "filename": "crates/ide/src/mock_analysis.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Fide%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Fide%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fmock_analysis.rs?ref=96cbad9fb5a67dd6cd83fe217716d932300122b5", "patch": "@@ -115,7 +115,7 @@ impl MockAnalysis {\n                 root_crate = Some(crate_graph.add_crate_root(\n                     file_id,\n                     edition,\n-                    None,\n+                    Some(\"test\".to_string()),\n                     cfg,\n                     env,\n                     Default::default(),"}, {"sha": "e97784c477df8a46c2cbaf05f85ca0cd25fe006a", "filename": "crates/rust-analyzer/tests/rust-analyzer/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cbad9fb5a67dd6cd83fe217716d932300122b5/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Frust-analyzer%2Fmain.rs?ref=96cbad9fb5a67dd6cd83fe217716d932300122b5", "patch": "@@ -690,5 +690,5 @@ pub fn foo(_input: TokenStream) -> TokenStream {\n     });\n \n     let value = res.get(\"contents\").unwrap().get(\"value\").unwrap().to_string();\n-    assert_eq!(value, r#\"\"```rust\\nfoo::Bar\\n```\\n\\n```rust\\nfn bar()\\n```\"\"#)\n+    assert_eq!(value, r#\"\"\\n```rust\\nfoo::Bar\\n```\\n\\n```rust\\nfn bar()\\n```\"\"#)\n }"}, {"sha": "3b140822245e4e45bcd085e89891ee6208932fd8", "filename": "xtask/tests/tidy.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/96cbad9fb5a67dd6cd83fe217716d932300122b5/xtask%2Ftests%2Ftidy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/96cbad9fb5a67dd6cd83fe217716d932300122b5/xtask%2Ftests%2Ftidy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Ftests%2Ftidy.rs?ref=96cbad9fb5a67dd6cd83fe217716d932300122b5", "patch": "@@ -68,6 +68,7 @@ See https://github.com/rust-lang/rust-clippy/issues/5537 for discussion.\n fn check_licenses() {\n     let expected = \"\n 0BSD OR MIT OR Apache-2.0\n+Apache-2.0\n Apache-2.0 OR BSL-1.0\n Apache-2.0 OR MIT\n Apache-2.0/MIT"}]}