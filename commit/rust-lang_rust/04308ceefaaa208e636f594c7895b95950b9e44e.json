{"sha": "04308ceefaaa208e636f594c7895b95950b9e44e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MzA4Y2VlZmFhYTIwOGU2MzZmNTk0Yzc4OTViOTU5NTBiOWU0NGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-10T17:40:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-05-10T17:40:02Z"}, "message": "Auto merge of #33488 - eddyb:trans-fixes, r=Aatch\n\nFix several -Z orbit crater blockers.\n\nFixes 3 of the issues found by @nikomatsakis' crater run with `-Z orbit` forced on:\nhttps://gist.github.com/nikomatsakis/6688c30a0e5d3fed07cc1ebd4efb1412\n\nTwo of the regressions seemed to be fixed by #33130 and the remaining two are timeouts.", "tree": {"sha": "fae4c48f4a1b3e1a591416259fe31cc9267a24c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fae4c48f4a1b3e1a591416259fe31cc9267a24c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04308ceefaaa208e636f594c7895b95950b9e44e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04308ceefaaa208e636f594c7895b95950b9e44e", "html_url": "https://github.com/rust-lang/rust/commit/04308ceefaaa208e636f594c7895b95950b9e44e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04308ceefaaa208e636f594c7895b95950b9e44e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d6588097d4d65e567fb234c042e61ad8ce4d41e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d6588097d4d65e567fb234c042e61ad8ce4d41e6", "html_url": "https://github.com/rust-lang/rust/commit/d6588097d4d65e567fb234c042e61ad8ce4d41e6"}, {"sha": "cb3a557e0cae65d5d4a1d87ee4316e7995188c34", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3a557e0cae65d5d4a1d87ee4316e7995188c34", "html_url": "https://github.com/rust-lang/rust/commit/cb3a557e0cae65d5d4a1d87ee4316e7995188c34"}], "stats": {"total": 55, "additions": 44, "deletions": 11}, "files": [{"sha": "e1318396e317d98aa4066eda7c19e5abec60c03f", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/04308ceefaaa208e636f594c7895b95950b9e44e/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04308ceefaaa208e636f594c7895b95950b9e44e/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=04308ceefaaa208e636f594c7895b95950b9e44e", "patch": "@@ -213,7 +213,8 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n \n                 let extra_args = &args[sig.inputs.len()..];\n                 let extra_args = extra_args.iter().map(|op_arg| {\n-                    self.mir.operand_ty(bcx.tcx(), op_arg)\n+                    let op_ty = self.mir.operand_ty(bcx.tcx(), op_arg);\n+                    bcx.monomorphize(&op_ty)\n                 }).collect::<Vec<_>>();\n                 let fn_ty = callee.direct_fn_type(bcx.ccx(), &extra_args);\n "}, {"sha": "b39a6ac1ce38178ea3da711a16b0e31a362804e2", "filename": "src/librustc_trans/mir/lvalue.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/04308ceefaaa208e636f594c7895b95950b9e44e/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04308ceefaaa208e636f594c7895b95950b9e44e/src%2Flibrustc_trans%2Fmir%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Flvalue.rs?ref=04308ceefaaa208e636f594c7895b95950b9e44e", "patch": "@@ -16,11 +16,11 @@ use abi;\n use adt;\n use base;\n use builder::Builder;\n-use common::{self, BlockAndBuilder, CrateContext, C_uint};\n+use common::{self, BlockAndBuilder, CrateContext, C_uint, C_undef};\n use consts;\n use machine;\n+use type_of::type_of;\n use mir::drop;\n-use llvm;\n use Disr;\n \n use std::ptr;\n@@ -116,10 +116,7 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                     // Ergo, we return an undef ValueRef, so we do not have to special-case every\n                     // place using lvalues, and could use it the same way you use a regular\n                     // ReturnPointer LValue (i.e. store into it, load from it etc).\n-                    let llty = fcx.fn_ty.ret.original_ty.ptr_to();\n-                    unsafe {\n-                        llvm::LLVMGetUndef(llty.to_ref())\n-                    }\n+                    C_undef(fcx.fn_ty.ret.original_ty.ptr_to())\n                 };\n                 let fn_return_ty = bcx.monomorphize(&self.mir.return_ty);\n                 let return_ty = fn_return_ty.unwrap();\n@@ -228,7 +225,19 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n                         ret\n                     }\n                     TempRef::Operand(Some(_)) => {\n-                        bug!(\"Lvalue temp already set\");\n+                        let lvalue_ty = self.mir.lvalue_ty(bcx.tcx(), lvalue);\n+                        let lvalue_ty = bcx.monomorphize(&lvalue_ty);\n+\n+                        // See comments in TempRef::new_operand as to why\n+                        // we always have Some in a ZST TempRef::Operand.\n+                        let ty = lvalue_ty.to_ty(bcx.tcx());\n+                        if common::type_is_zero_size(bcx.ccx(), ty) {\n+                            // Pass an undef pointer as no stores can actually occur.\n+                            let llptr = C_undef(type_of(bcx.ccx(), ty).ptr_to());\n+                            f(self, LvalueRef::new_sized(llptr, lvalue_ty))\n+                        } else {\n+                            bug!(\"Lvalue temp already set\");\n+                        }\n                     }\n                 }\n             }"}, {"sha": "45b6bcd920fdf7322e6f244575129d8ef1db2758", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/04308ceefaaa208e636f594c7895b95950b9e44e/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04308ceefaaa208e636f594c7895b95950b9e44e/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=04308ceefaaa208e636f594c7895b95950b9e44e", "patch": "@@ -55,6 +55,8 @@ impl<'bcx, 'tcx> MirContext<'bcx, 'tcx> {\n            }\n \n             mir::Rvalue::Cast(mir::CastKind::Unsize, ref source, cast_ty) => {\n+                let cast_ty = bcx.monomorphize(&cast_ty);\n+\n                 if common::type_is_fat_ptr(bcx.tcx(), cast_ty) {\n                     // into-coerce of a thin pointer to a fat pointer - just\n                     // use the operand path."}, {"sha": "09dd52e30bef9ff7e1bd8c2db70ed5d410c64a6f", "filename": "src/test/run-pass/mir_coercions.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/04308ceefaaa208e636f594c7895b95950b9e44e/src%2Ftest%2Frun-pass%2Fmir_coercions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04308ceefaaa208e636f594c7895b95950b9e44e/src%2Ftest%2Frun-pass%2Fmir_coercions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_coercions.rs?ref=04308ceefaaa208e636f594c7895b95950b9e44e", "patch": "@@ -55,6 +55,13 @@ fn coerce_fat_ptr_wrapper(p: PtrWrapper<Fn(u32) -> u32+Send>)\n     p\n }\n \n+#[rustc_mir]\n+fn coerce_ptr_wrapper_poly<'a, T, Trait: ?Sized>(p: PtrWrapper<'a, T>)\n+                                                 -> PtrWrapper<'a, Trait>\n+    where PtrWrapper<'a, T>: CoerceUnsized<PtrWrapper<'a, Trait>>\n+{\n+    p\n+}\n \n fn main() {\n     let a = [0,1,2];\n@@ -73,4 +80,8 @@ fn main() {\n \n     let z = coerce_fat_ptr_wrapper(PtrWrapper(2,3,(),&square_local));\n     assert_eq!((z.3)(6), 36);\n+\n+    let z: PtrWrapper<Fn(u32) -> u32> =\n+        coerce_ptr_wrapper_poly(PtrWrapper(2,3,(),&square_local));\n+    assert_eq!((z.3)(6), 36);\n }"}, {"sha": "31e2c8925711cc28959bda1a13351178f03ceb14", "filename": "src/test/run-pass/mir_trans_calls.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/04308ceefaaa208e636f594c7895b95950b9e44e/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04308ceefaaa208e636f594c7895b95950b9e44e/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_calls.rs?ref=04308ceefaaa208e636f594c7895b95950b9e44e", "patch": "@@ -138,6 +138,15 @@ fn test_fn_nil_call<F>(f: &F) -> i32\n     f()\n }\n \n+#[rustc_mir]\n+fn test_fn_transmute_zst(x: ()) -> [(); 1] {\n+    fn id<T>(x: T) -> T {x}\n+\n+    id(unsafe {\n+        std::mem::transmute(x)\n+    })\n+}\n+\n fn main() {\n     assert_eq!(test1(1, (2, 3), &[4, 5, 6]), (1, (2, 3), &[4, 5, 6][..]));\n     assert_eq!(test2(98), 98);\n@@ -159,4 +168,5 @@ fn main() {\n     assert_eq!(test_fn_direct_call(&closure, 100, 4), 324);\n \n     assert_eq!(test_fn_nil_call(&(|| 42)), 42);\n+    assert_eq!(test_fn_transmute_zst(()), [()]);\n }"}, {"sha": "7f711b2758dc7f5b6dde3df1fd7b393fee32c681", "filename": "src/test/run-pass/mir_trans_calls_variadic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/04308ceefaaa208e636f594c7895b95950b9e44e/src%2Ftest%2Frun-pass%2Fmir_trans_calls_variadic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04308ceefaaa208e636f594c7895b95950b9e44e/src%2Ftest%2Frun-pass%2Fmir_trans_calls_variadic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmir_trans_calls_variadic.rs?ref=04308ceefaaa208e636f594c7895b95950b9e44e", "patch": "@@ -16,17 +16,17 @@ extern {\n }\n \n #[rustc_mir]\n-fn test(a: i64, b: i64, c: i64, d: i64, e: i64, f: i64) -> i64 {\n+fn test<T, U>(a: i64, b: i64, c: i64, d: i64, e: i64, f: T, g: U) -> i64 {\n     unsafe {\n         rust_interesting_average(6, a, a as f64,\n                                     b, b as f64,\n                                     c, c as f64,\n                                     d, d as f64,\n                                     e, e as f64,\n-                                    f, f as f64) as i64\n+                                    f, g) as i64\n     }\n }\n \n fn main(){\n-    assert_eq!(test(10, 20, 30, 40, 50, 60), 70);\n+    assert_eq!(test(10, 20, 30, 40, 50, 60_i64, 60.0_f64), 70);\n }"}]}