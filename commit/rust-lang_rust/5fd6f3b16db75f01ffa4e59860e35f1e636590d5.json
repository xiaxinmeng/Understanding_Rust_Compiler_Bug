{"sha": "5fd6f3b16db75f01ffa4e59860e35f1e636590d5", "node_id": "C_kwDOAAsO6NoAKDVmZDZmM2IxNmRiNzVmMDFmZmE0ZTU5ODYwZTM1ZjFlNjM2NTkwZDU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-22T01:13:49Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-09-22T01:13:49Z"}, "message": "Auto merge of #88629 - wesleywiser:fix_debuginfo_for_scalarpair_params, r=oli-obk\n\nFix debuginfo for parameters passed via the ScalarPair abi on Windows\n\nMark all of these as locals so the debugger does not try to interpret\nthem as being a pointer to the value. This extends the approach used\nin #81898.\n\nFixes #88625", "tree": {"sha": "a2bfbbede0599641a9326aaaad631a5ae708da78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2bfbbede0599641a9326aaaad631a5ae708da78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5fd6f3b16db75f01ffa4e59860e35f1e636590d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5fd6f3b16db75f01ffa4e59860e35f1e636590d5", "html_url": "https://github.com/rust-lang/rust/commit/5fd6f3b16db75f01ffa4e59860e35f1e636590d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5fd6f3b16db75f01ffa4e59860e35f1e636590d5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8d1d1059a7837551c0065fc060dcb806ad729ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d1d1059a7837551c0065fc060dcb806ad729ef", "html_url": "https://github.com/rust-lang/rust/commit/d8d1d1059a7837551c0065fc060dcb806ad729ef"}, {"sha": "a6c642a9f861c504a63ae0a624b3cb559eee0051", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6c642a9f861c504a63ae0a624b3cb559eee0051", "html_url": "https://github.com/rust-lang/rust/commit/a6c642a9f861c504a63ae0a624b3cb559eee0051"}], "stats": {"total": 127, "additions": 112, "deletions": 15}, "files": [{"sha": "c710fcc2c1dcb665e131a2bd147c2fbced879c61", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 10, "deletions": 15, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/5fd6f3b16db75f01ffa4e59860e35f1e636590d5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd6f3b16db75f01ffa4e59860e35f1e636590d5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=5fd6f3b16db75f01ffa4e59860e35f1e636590d5", "patch": "@@ -3,9 +3,11 @@ use rustc_index::vec::IndexVec;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir;\n use rustc_middle::ty;\n+use rustc_middle::ty::layout::LayoutOf;\n use rustc_session::config::DebugInfo;\n use rustc_span::symbol::{kw, Symbol};\n use rustc_span::{BytePos, Span};\n+use rustc_target::abi::Abi;\n use rustc_target::abi::Size;\n \n use super::operand::{OperandRef, OperandValue};\n@@ -368,21 +370,14 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         {\n                             let arg_index = place.local.index() - 1;\n                             if target_is_msvc {\n-                                // Rust compiler decomposes every &str or slice argument into two components:\n-                                // a pointer to the memory address where the data is stored and a usize representing\n-                                // the length of the str (or slice). These components will later be used to reconstruct\n-                                // the original argument inside the body of the function that owns it (see the\n-                                // definition of debug_introduce_local for more details).\n-                                //\n-                                // Since the original argument is declared inside a function rather than being passed\n-                                // in as an argument, it must be marked as a LocalVariable for MSVC debuggers to visualize\n-                                // its data correctly. (See issue #81894 for an in-depth description of the problem).\n-                                match *var_ty.kind() {\n-                                    ty::Ref(_, inner_type, _) => match *inner_type.kind() {\n-                                        ty::Slice(_) | ty::Str => VariableKind::LocalVariable,\n-                                        _ => VariableKind::ArgumentVariable(arg_index + 1),\n-                                    },\n-                                    _ => VariableKind::ArgumentVariable(arg_index + 1),\n+                                // ScalarPair parameters are spilled to the stack so they need to\n+                                // be marked as a `LocalVariable` for MSVC debuggers to visualize\n+                                // their data correctly. (See #81894 & #88625)\n+                                let var_ty_layout = self.cx.layout_of(var_ty);\n+                                if let Abi::ScalarPair(_, _) = var_ty_layout.abi {\n+                                    VariableKind::LocalVariable\n+                                } else {\n+                                    VariableKind::ArgumentVariable(arg_index + 1)\n                                 }\n                             } else {\n                                 // FIXME(eddyb) shouldn't `ArgumentVariable` indices be"}, {"sha": "37f5de309baffe7bff940fc45faaf93bb6adf534", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5fd6f3b16db75f01ffa4e59860e35f1e636590d5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd6f3b16db75f01ffa4e59860e35f1e636590d5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=5fd6f3b16db75f01ffa4e59860e35f1e636590d5", "patch": "@@ -129,6 +129,7 @@ impl<'a, 'tcx, V: CodegenObject> LocalRef<'tcx, V> {\n \n ///////////////////////////////////////////////////////////////////////////\n \n+#[instrument(level = \"debug\", skip(cx))]\n pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n     cx: &'a Bx::CodegenCx,\n     instance: Instance<'tcx>,"}, {"sha": "3846fb42f81a5ecc1b2c1fb10281cba837efeef6", "filename": "src/test/debuginfo/msvc-scalarpair-params.rs", "status": "added", "additions": 101, "deletions": 0, "changes": 101, "blob_url": "https://github.com/rust-lang/rust/blob/5fd6f3b16db75f01ffa4e59860e35f1e636590d5/src%2Ftest%2Fdebuginfo%2Fmsvc-scalarpair-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5fd6f3b16db75f01ffa4e59860e35f1e636590d5/src%2Ftest%2Fdebuginfo%2Fmsvc-scalarpair-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fdebuginfo%2Fmsvc-scalarpair-params.rs?ref=5fd6f3b16db75f01ffa4e59860e35f1e636590d5", "patch": "@@ -0,0 +1,101 @@\n+// only-cdb\n+// compile-flags: -g\n+\n+// cdb-command: g\n+\n+// cdb-command: dx r1\n+// cdb-check:r1               : (0xa..0xc) [Type: core::ops::range::Range<u32>]\n+// cdb-command: dx r2\n+// cdb-check:r2               : (0x14..0x1e) [Type: core::ops::range::Range<u64>]\n+\n+// cdb-command: g\n+\n+// cdb-command: dx r1\n+// cdb-check:r1               : (0x9..0x64) [Type: core::ops::range::Range<u32>]\n+// cdb-command: dx r2\n+// cdb-check:r2               : (0xc..0x5a) [Type: core::ops::range::Range<u64>]\n+\n+// cdb-command: g\n+\n+// cdb-command: dx o1\n+// cdb-check:o1               : Some [Type: enum$<core::option::Option<u32> >]\n+// cdb-check:    [variant]        : Some\n+// cdb-check:    [+0x004] __0              : 0x4d2 [Type: [...]]\n+// cdb-command: dx o2\n+// cdb-check:o2               : Some [Type: enum$<core::option::Option<u64> >]\n+// cdb-check:    [variant]        : Some\n+// cdb-check:    [+0x008] __0              : 0x162e [Type: unsigned __int64]\n+\n+// cdb-command: g\n+\n+// cdb-command: dx t1\n+// cdb-check:t1               : (0xa, 0x14) [Type: tuple$<u32,u32>]\n+// cdb-check:    [0]              : 0xa [Type: unsigned int]\n+// cdb-check:    [1]              : 0x14 [Type: unsigned int]\n+// cdb-command: dx t2\n+// cdb-check:t2               : (0x1e, 0x28) [Type: tuple$<u64,u64>]\n+// cdb-check:    [0]              : 0x1e [Type: unsigned __int64]\n+// cdb-check:    [1]              : 0x28 [Type: unsigned __int64]\n+\n+// cdb-command: g\n+\n+// cdb-command: dx s\n+// cdb-check:s                : \"this is a static str\" [Type: str]\n+// cdb-check:    [len]            : 0x14 [Type: unsigned [...]]\n+// cdb-check:    [chars]\n+\n+// cdb-command: g\n+\n+// cdb-command: dx s\n+// cdb-check:s                : { len=0x5 } [Type: slice$<u8>]\n+// cdb-check:    [len]            : 0x5 [Type: unsigned [...]]\n+// cdb-check:    [0]              : 0x1 [Type: unsigned char]\n+// cdb-check:    [1]              : 0x2 [Type: unsigned char]\n+// cdb-check:    [2]              : 0x3 [Type: unsigned char]\n+// cdb-check:    [3]              : 0x4 [Type: unsigned char]\n+// cdb-check:    [4]              : 0x5 [Type: unsigned char]\n+\n+use std::ops::Range;\n+\n+fn range(r1: Range<u32>, r2: Range<u64>) {\n+    zzz(); // #break\n+}\n+\n+fn range_mut(mut r1: Range<u32>, mut r2: Range<u64>) {\n+    if r1.start == 9 {\n+        r1.end = 100;\n+    }\n+\n+    if r2.start == 12 {\n+        r2.end = 90;\n+    }\n+\n+    zzz(); // #break\n+}\n+\n+fn option(o1: Option<u32>, o2: Option<u64>) {\n+    zzz(); // #break\n+}\n+\n+fn tuple(t1: (u32, u32), t2: (u64, u64)) {\n+    zzz(); // #break\n+}\n+\n+fn str(s: &str) {\n+    zzz(); // #break\n+}\n+\n+fn slice(s: &[u8]) {\n+    zzz(); // #break\n+}\n+\n+fn zzz() { }\n+\n+fn main() {\n+    range(10..12, 20..30);\n+    range_mut(9..20, 12..80);\n+    option(Some(1234), Some(5678));\n+    tuple((10, 20), (30, 40));\n+    str(\"this is a static str\");\n+    slice(&[1, 2, 3, 4, 5]);\n+}"}]}