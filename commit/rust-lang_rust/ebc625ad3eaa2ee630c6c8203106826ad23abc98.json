{"sha": "ebc625ad3eaa2ee630c6c8203106826ad23abc98", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViYzYyNWFkM2VhYTJlZTYzMGM2YzgyMDMxMDY4MjZhZDIzYWJjOTg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-08T09:01:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-11-08T09:01:33Z"}, "message": "auto merge of #18634 : alexcrichton/rust/cfg-attr-crate-level, r=sfackler\n\nThis commit implements processing these two attributes at the crate level as\r\nwell as at the item level. When #[cfg] is applied at the crate level, then the\r\nentire crate will be omitted if the cfg doesn't match. The #[cfg_attr] attribute\r\nis processed as usual in that the attribute is included or not depending on\r\nwhether the cfg matches.\r\n\r\nThis was spurred on by motivations of #18585 where #[cfg_attr] annotations will\r\nbe applied at the crate-level.\r\n\r\ncc #18585", "tree": {"sha": "27b1d977d7431350799c5d8e1a35a85eb346c27a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/27b1d977d7431350799c5d8e1a35a85eb346c27a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebc625ad3eaa2ee630c6c8203106826ad23abc98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebc625ad3eaa2ee630c6c8203106826ad23abc98", "html_url": "https://github.com/rust-lang/rust/commit/ebc625ad3eaa2ee630c6c8203106826ad23abc98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebc625ad3eaa2ee630c6c8203106826ad23abc98/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "afd657e20724f6a9093e34818c4923aa8601cafb", "url": "https://api.github.com/repos/rust-lang/rust/commits/afd657e20724f6a9093e34818c4923aa8601cafb", "html_url": "https://github.com/rust-lang/rust/commit/afd657e20724f6a9093e34818c4923aa8601cafb"}, {"sha": "3dbd32854f6bdee94c98c5e3e5da58fb79d79fd9", "url": "https://api.github.com/repos/rust-lang/rust/commits/3dbd32854f6bdee94c98c5e3e5da58fb79d79fd9", "html_url": "https://github.com/rust-lang/rust/commit/3dbd32854f6bdee94c98c5e3e5da58fb79d79fd9"}], "stats": {"total": 150, "additions": 127, "deletions": 23}, "files": [{"sha": "299ae9eb41d143923a03887df75d0b9f6ddcb120", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=ebc625ad3eaa2ee630c6c8203106826ad23abc98", "patch": "@@ -212,11 +212,6 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n         *ty == config::CrateTypeExecutable\n     });\n \n-    krate = time(time_passes, \"crate injection\", krate, |krate|\n-                 syntax::std_inject::maybe_inject_crates_ref(krate,\n-                                                             sess.opts.alt_std_name.clone(),\n-                                                             any_exe));\n-\n     // strip before expansion to allow macros to depend on\n     // configuration variables e.g/ in\n     //\n@@ -228,6 +223,11 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n     krate = time(time_passes, \"configuration 1\", krate, |krate|\n                  syntax::config::strip_unconfigured_items(sess.diagnostic(), krate));\n \n+    krate = time(time_passes, \"crate injection\", krate, |krate|\n+                 syntax::std_inject::maybe_inject_crates_ref(krate,\n+                                                             sess.opts.alt_std_name.clone(),\n+                                                             any_exe));\n+\n     let mut addl_plugins = Some(addl_plugins);\n     let Plugins { macros, registrars }\n         = time(time_passes, \"plugin loading\", (), |_|"}, {"sha": "257bfd69f433d1ff061db68c1cfe974e8010f184", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=ebc625ad3eaa2ee630c6c8203106826ad23abc98", "patch": "@@ -15,6 +15,8 @@ use {ast, fold, attr};\n use codemap::Spanned;\n use ptr::P;\n \n+use util::small_vector::SmallVector;\n+\n /// A folder that strips out items that do not belong in the current\n /// configuration.\n struct Context<'a> {\n@@ -47,6 +49,9 @@ impl<'a> fold::Folder for Context<'a> {\n     fn fold_mac(&mut self, mac: ast::Mac) -> ast::Mac {\n         fold::noop_fold_mac(mac, self)\n     }\n+    fn fold_item(&mut self, item: P<ast::Item>) -> SmallVector<P<ast::Item>> {\n+        fold_item(self, item)\n+    }\n }\n \n pub fn strip_items(krate: ast::Crate,\n@@ -72,13 +77,9 @@ fn fold_mod(cx: &mut Context, ast::Mod {inner, view_items, items}: ast::Mod) ->\n         view_items: view_items.into_iter().filter_map(|a| {\n             filter_view_item(cx, a).map(|x| cx.fold_view_item(x))\n         }).collect(),\n-        items: items.into_iter().filter_map(|a| {\n-            if item_in_cfg(cx, &*a) {\n-                Some(cx.fold_item(a))\n-            } else {\n-                None\n-            }\n-        }).flat_map(|x| x.into_iter()).collect()\n+        items: items.into_iter().flat_map(|a| {\n+            cx.fold_item(a).into_iter()\n+        }).collect()\n     }\n }\n \n@@ -104,6 +105,14 @@ fn fold_foreign_mod(cx: &mut Context, ast::ForeignMod {abi, view_items, items}:\n     }\n }\n \n+fn fold_item(cx: &mut Context, item: P<ast::Item>) -> SmallVector<P<ast::Item>> {\n+    if item_in_cfg(cx, &*item) {\n+        SmallVector::one(item.map(|i| cx.fold_item_simple(i)))\n+    } else {\n+        SmallVector::zero()\n+    }\n+}\n+\n fn fold_item_underscore(cx: &mut Context, item: ast::Item_) -> ast::Item_ {\n     let item = match item {\n         ast::ItemImpl(a, b, c, impl_items) => {"}, {"sha": "d977f2b99cc453f47e074e01ed183c79f8e6de27", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=ebc625ad3eaa2ee630c6c8203106826ad23abc98", "patch": "@@ -1061,12 +1061,41 @@ pub fn noop_fold_mod<T: Folder>(Mod {inner, view_items, items}: Mod, folder: &mu\n \n pub fn noop_fold_crate<T: Folder>(Crate {module, attrs, config, exported_macros, span}: Crate,\n                                   folder: &mut T) -> Crate {\n+    let config = folder.fold_meta_items(config);\n+\n+    let mut items = folder.fold_item(P(ast::Item {\n+        ident: token::special_idents::invalid,\n+        attrs: attrs,\n+        id: ast::DUMMY_NODE_ID,\n+        vis: ast::Public,\n+        span: span,\n+        node: ast::ItemMod(module),\n+    })).into_iter();\n+\n+    let (module, attrs, span) = match items.next() {\n+        Some(item) => {\n+            assert!(items.next().is_none(),\n+                    \"a crate cannot expand to more than one item\");\n+            item.and_then(|ast::Item { attrs, span, node, .. }| {\n+                match node {\n+                    ast::ItemMod(m) => (m, attrs, span),\n+                    _ => panic!(\"fold converted a module to not a module\"),\n+                }\n+            })\n+        }\n+        None => (ast::Mod {\n+            inner: span,\n+            view_items: Vec::new(),\n+            items: Vec::new(),\n+        }, Vec::new(), span)\n+    };\n+\n     Crate {\n-        module: folder.fold_mod(module),\n-        attrs: attrs.move_map(|x| folder.fold_attribute(x)),\n-        config: folder.fold_meta_items(config),\n+        module: module,\n+        attrs: attrs,\n+        config: config,\n         exported_macros: exported_macros,\n-        span: folder.new_span(span)\n+        span: span,\n     }\n }\n "}, {"sha": "29637e88dd53d0a3a51e4d858137148bf89bb570", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=ebc625ad3eaa2ee630c6c8203106826ad23abc98", "patch": "@@ -108,7 +108,10 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n     }\n \n     fn fold_item(&mut self, i: P<ast::Item>) -> SmallVector<P<ast::Item>> {\n-        self.cx.path.push(i.ident);\n+        let ident = i.ident;\n+        if ident.name != token::special_idents::invalid.name {\n+            self.cx.path.push(ident);\n+        }\n         debug!(\"current path: {}\",\n                ast_util::path_name_i(self.cx.path.as_slice()));\n \n@@ -143,7 +146,9 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n             ast::ItemMod(..) => fold::noop_fold_item(i, self),\n             _ => SmallVector::one(i),\n         };\n-        self.cx.path.pop();\n+        if ident.name != token::special_idents::invalid.name {\n+            self.cx.path.pop();\n+        }\n         res\n     }\n "}, {"sha": "6b2e8e7758f1aa60358c71e665da823b9cefc908", "filename": "src/test/auxiliary/stability_cfg1.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Ftest%2Fauxiliary%2Fstability_cfg1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Ftest%2Fauxiliary%2Fstability_cfg1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstability_cfg1.rs?ref=ebc625ad3eaa2ee630c6c8203106826ad23abc98", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![cfg_attr(foo, experimental)]\n+#![cfg_attr(not(foo), stable)]"}, {"sha": "3387b319abfd506855ba0e7d376de21cf96fdd48", "filename": "src/test/auxiliary/stability_cfg2.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Ftest%2Fauxiliary%2Fstability_cfg2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Ftest%2Fauxiliary%2Fstability_cfg2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstability_cfg2.rs?ref=ebc625ad3eaa2ee630c6c8203106826ad23abc98", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags:--cfg foo\n+\n+#![cfg_attr(foo, experimental)]\n+#![cfg_attr(not(foo), stable)]\n+"}, {"sha": "94ae8d89b4fc49a790ac600a93dd49a75b661641", "filename": "src/test/compile-fail/cfg-in-crate-1.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Ftest%2Fcompile-fail%2Fcfg-in-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Ftest%2Fcompile-fail%2Fcfg-in-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcfg-in-crate-1.rs?ref=ebc625ad3eaa2ee630c6c8203106826ad23abc98", "patch": "@@ -0,0 +1,13 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern:main function not found\n+\n+#![cfg(bar)]"}, {"sha": "483a3b6d667871c7249d4a46ede3f8b9a8d98b49", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=ebc625ad3eaa2ee630c6c8203106826ad23abc98", "patch": "@@ -10,6 +10,8 @@\n \n // aux-build:lint_stability.rs\n // aux-build:inherited_stability.rs\n+// aux-build:stability_cfg1.rs\n+// aux-build:stability_cfg2.rs\n \n #![feature(globs, phase)]\n #![deny(unstable)]\n@@ -18,6 +20,9 @@\n #![allow(dead_code)]\n \n mod cross_crate {\n+    extern crate stability_cfg1;\n+    extern crate stability_cfg2; //~ ERROR: use of experimental item\n+\n     #[phase(plugin, link)]\n     extern crate lint_stability; //~ ERROR: use of unmarked item\n     use self::lint_stability::*;"}, {"sha": "1986c27ad439ba93f37ddf563de9c48fc524fb73", "filename": "src/test/run-make/graphviz-flowgraph/f03.dot-expected.dot", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.dot-expected.dot", "raw_url": "https://github.com/rust-lang/rust/raw/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.dot-expected.dot", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.dot-expected.dot?ref=ebc625ad3eaa2ee630c6c8203106826ad23abc98", "patch": "@@ -2,10 +2,10 @@ digraph block {\n     N0[label=\"entry\"];\n     N1[label=\"exit\"];\n     N2[label=\"expr 3i\"];\n-    N3[label=\"expr 33i\"];\n-    N4[label=\"expr 3i + 33i\"];\n-    N5[label=\"stmt 3i + 33i;\"];\n-    N6[label=\"block { 3i + 33i; }\"];\n+    N3[label=\"expr 4\"];\n+    N4[label=\"expr 3i + 4\"];\n+    N5[label=\"stmt 3i + 4;\"];\n+    N6[label=\"block { 3i + 4; }\"];\n     N0 -> N2;\n     N2 -> N3;\n     N3 -> N4;"}, {"sha": "051409a49b14488da143b2408643779b0555d196", "filename": "src/test/run-make/graphviz-flowgraph/f03.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fgraphviz-flowgraph%2Ff03.rs?ref=ebc625ad3eaa2ee630c6c8203106826ad23abc98", "patch": "@@ -9,5 +9,5 @@\n // except according to those terms.\n \n pub fn expr_add_3() {\n-    3i + 33i;\n+    3i + 4;\n }"}, {"sha": "06f679b7fca9a0870c4801ef9e43ab4fc279a4ee", "filename": "src/test/run-pass/cfg-in-crate-1.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Ftest%2Frun-pass%2Fcfg-in-crate-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ebc625ad3eaa2ee630c6c8203106826ad23abc98/src%2Ftest%2Frun-pass%2Fcfg-in-crate-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-in-crate-1.rs?ref=ebc625ad3eaa2ee630c6c8203106826ad23abc98", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --cfg bar -D warnings\n+// ignore-pretty\n+\n+#![cfg(bar)]\n+\n+fn main() {}"}]}