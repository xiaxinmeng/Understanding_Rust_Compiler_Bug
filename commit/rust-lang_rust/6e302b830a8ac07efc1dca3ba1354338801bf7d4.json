{"sha": "6e302b830a8ac07efc1dca3ba1354338801bf7d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlMzAyYjgzMGE4YWMwN2VmYzFkY2EzYmExMzU0MzM4ODAxYmY3ZDQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-22T22:32:19Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-22T22:32:19Z"}, "message": "link to some websites for UB explanations", "tree": {"sha": "7a0c9be0f86b3fdee62209beb65c79603a12c7b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7a0c9be0f86b3fdee62209beb65c79603a12c7b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6e302b830a8ac07efc1dca3ba1354338801bf7d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6e302b830a8ac07efc1dca3ba1354338801bf7d4", "html_url": "https://github.com/rust-lang/rust/commit/6e302b830a8ac07efc1dca3ba1354338801bf7d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6e302b830a8ac07efc1dca3ba1354338801bf7d4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dd4fef0cd95ba90ea6e1a13f054e2b66f36772ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/dd4fef0cd95ba90ea6e1a13f054e2b66f36772ff", "html_url": "https://github.com/rust-lang/rust/commit/dd4fef0cd95ba90ea6e1a13f054e2b66f36772ff"}], "stats": {"total": 72, "additions": 45, "deletions": 27}, "files": [{"sha": "a2cdffdf80b3d894c8ec96a0ddfcb5a571ab09d4", "filename": "src/diagnostics.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6e302b830a8ac07efc1dca3ba1354338801bf7d4/src%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e302b830a8ac07efc1dca3ba1354338801bf7d4/src%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdiagnostics.rs?ref=6e302b830a8ac07efc1dca3ba1354338801bf7d4", "patch": "@@ -9,6 +9,7 @@ pub enum TerminationInfo {\n     Exit(i64),\n     Abort(Option<String>),\n     UnsupportedInIsolation(String),\n+    ExperimentalUb { msg: String, url: String }\n }\n \n /// Miri specific diagnostics\n@@ -25,7 +26,7 @@ pub fn report_error<'tcx, 'mir>(\n     use InterpError::*;\n \n     e.print_backtrace();\n-    let (title, msg, help) = match e.kind {\n+    let (title, msg, helps) = match e.kind {\n         MachineStop(info) => {\n             let info = info.downcast_ref::<TerminationInfo>().expect(\"invalid MachineStop payload\");\n             use TerminationInfo::*;\n@@ -37,13 +38,20 @@ pub fn report_error<'tcx, 'mir>(\n                     (\"abnormal termination\", format!(\"the evaluated program aborted execution: {}\", msg)),\n                 UnsupportedInIsolation(msg) =>\n                     (\"unsupported operation\", format!(\"{}\", msg)),\n+                ExperimentalUb { msg, .. } =>\n+                    (\"Undefined Behavior\", format!(\"{}\", msg)),\n             };\n-            let help = match info {\n+            let helps = match info {\n                 UnsupportedInIsolation(_) =>\n-                    Some(\"pass the flag `-Zmiri-disable-isolation` to disable isolation\"),\n-                _ => None,\n+                    vec![format!(\"pass the flag `-Zmiri-disable-isolation` to disable isolation\")],\n+                ExperimentalUb { url, .. } =>\n+                    vec![\n+                        format!(\"this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\"),\n+                        format!(\"see {} for further information\", url),\n+                    ],\n+                _ => vec![],\n             };\n-            (title, msg, help)\n+            (title, msg, helps)\n         }\n         _ => {\n             let (title, msg) = match e.kind {\n@@ -56,21 +64,22 @@ pub fn report_error<'tcx, 'mir>(\n                 _ =>\n                     bug!(\"This error should be impossible in Miri: {}\", e),\n             };\n-            let help = match e.kind {\n+            let helps = match e.kind {\n                 Unsupported(UnsupportedOpInfo::NoMirFor(..)) =>\n-                    Some(\"make sure to use a Miri sysroot, which you can prepare with `cargo miri setup`\"),\n+                    vec![format!(\"make sure to use a Miri sysroot, which you can prepare with `cargo miri setup`\")],\n                 Unsupported(_) =>\n-                    Some(\"this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\"),\n-                UndefinedBehavior(UndefinedBehaviorInfo::UbExperimental(_)) =>\n-                    Some(\"this indicates a potential bug in the program: it performed an invalid operation, but the rules it violated are still experimental\"),\n+                    vec![format!(\"this is likely not a bug in the program; it indicates that the program performed an operation that the interpreter does not support\")],\n                 UndefinedBehavior(_) =>\n-                    Some(\"this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\"),\n-                _ => None,\n+                    vec![\n+                        format!(\"this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\"),\n+                        format!(\"see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\"),\n+                    ],\n+                _ => vec![],\n             };\n-            (title, msg, help)\n+            (title, msg, helps)\n         }\n     };\n-    report_msg(ecx, &format!(\"{}: {}\", title, msg), msg, help, true)\n+    report_msg(ecx, &format!(\"{}: {}\", title, msg), msg, &helps, true)\n }\n \n /// Report an error or note (depending on the `error` argument) at the current frame's current statement.\n@@ -79,7 +88,7 @@ fn report_msg<'tcx, 'mir>(\n     ecx: &InterpCx<'mir, 'tcx, Evaluator<'tcx>>,\n     title: &str,\n     span_msg: String,\n-    help: Option<&str>,\n+    helps: &[String],\n     error: bool,\n ) -> Option<i64> {\n     let span = if let Some(frame) = ecx.stack().last() {\n@@ -93,7 +102,7 @@ fn report_msg<'tcx, 'mir>(\n         ecx.tcx.sess.diagnostic().span_note_diag(span, title)\n     };\n     err.span_label(span, span_msg);\n-    if let Some(help) = help {\n+    for help in helps {\n         err.help(help);\n     }\n     // Add backtrace\n@@ -149,7 +158,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                     CreatedAlloc(AllocId(id)) =>\n                         format!(\"created allocation with id {}\", id),\n                 };\n-                report_msg(this, \"tracking was triggered\", msg, None, false);\n+                report_msg(this, \"tracking was triggered\", msg, &[], false);\n             }\n         });\n     }"}, {"sha": "05b9c478cfea343d4c8735201f851ccfde501c8c", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6e302b830a8ac07efc1dca3ba1354338801bf7d4/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6e302b830a8ac07efc1dca3ba1354338801bf7d4/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=6e302b830a8ac07efc1dca3ba1354338801bf7d4", "patch": "@@ -192,6 +192,15 @@ impl GlobalState {\n     }\n }\n \n+/// Error reporting\n+fn err_sb_ub(msg: String) -> InterpError<'static> {\n+    // FIXME: use `err_machine_stop!` macro, once that exists.\n+    InterpError::MachineStop(Box::new(TerminationInfo::ExperimentalUb {\n+        msg,\n+        url: format!(\"https://github.com/rust-lang/unsafe-code-guidelines/blob/master/wip/stacked-borrows.md\"),\n+    }))\n+}\n+\n // # Stacked Borrows Core Begin\n \n /// We need to make at least the following things true:\n@@ -272,15 +281,15 @@ impl<'tcx> Stack {\n         if let Some(call) = item.protector {\n             if global.is_active(call) {\n                 if let Some(tag) = tag {\n-                    throw_ub!(UbExperimental(format!(\n+                    Err(err_sb_ub(format!(\n                         \"not granting access to tag {:?} because incompatible item is protected: {:?}\",\n                         tag, item\n-                    )));\n+                    )))?\n                 } else {\n-                    throw_ub!(UbExperimental(format!(\n+                    Err(err_sb_ub(format!(\n                         \"deallocating while item is protected: {:?}\",\n                         item\n-                    )));\n+                    )))?\n                 }\n             }\n         }\n@@ -294,10 +303,10 @@ impl<'tcx> Stack {\n \n         // Step 1: Find granting item.\n         let granting_idx = self.find_granting(access, tag).ok_or_else(|| {\n-            err_ub!(UbExperimental(format!(\n+            err_sb_ub(format!(\n                 \"no item granting {} to tag {:?} found in borrow stack.\",\n                 access, tag\n-            ),))\n+            ))\n         })?;\n \n         // Step 2: Remove incompatible items above them.  Make sure we do not remove protected\n@@ -338,10 +347,10 @@ impl<'tcx> Stack {\n     fn dealloc(&mut self, tag: Tag, global: &GlobalState) -> InterpResult<'tcx> {\n         // Step 1: Find granting item.\n         self.find_granting(AccessKind::Write, tag).ok_or_else(|| {\n-            err_ub!(UbExperimental(format!(\n+            err_sb_ub(format!(\n                 \"no item granting write access for deallocation to tag {:?} found in borrow stack\",\n                 tag,\n-            )))\n+            ))\n         })?;\n \n         // Step 2: Remove all items.  Also checks for protectors.\n@@ -363,10 +372,10 @@ impl<'tcx> Stack {\n         // Now we figure out which item grants our parent (`derived_from`) this kind of access.\n         // We use that to determine where to put the new item.\n         let granting_idx = self.find_granting(access, derived_from)\n-            .ok_or_else(|| err_ub!(UbExperimental(format!(\n+            .ok_or_else(|| err_sb_ub(format!(\n                 \"trying to reborrow for {:?}, but parent tag {:?} does not have an appropriate item in the borrow stack\",\n                 new.perm, derived_from,\n-            ))))?;\n+            )))?;\n \n         // Compute where to put the new item.\n         // Either way, we ensure that we insert the new item in a way such that between"}]}