{"sha": "c9e97251adf538be8f7f34bfd3e02a4bed164cbd", "node_id": "C_kwDOAAsO6NoAKGM5ZTk3MjUxYWRmNTM4YmU4ZjdmMzRiZmQzZTAyYTRiZWQxNjRjYmQ", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-15T21:54:03Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-06-15T23:52:04Z"}, "message": "Remove unused `hir_id` arg from `visit_attribute`.", "tree": {"sha": "fdd335474786d13cf9b0dfbdd96008339f58d7a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdd335474786d13cf9b0dfbdd96008339f58d7a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9e97251adf538be8f7f34bfd3e02a4bed164cbd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9e97251adf538be8f7f34bfd3e02a4bed164cbd", "html_url": "https://github.com/rust-lang/rust/commit/c9e97251adf538be8f7f34bfd3e02a4bed164cbd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9e97251adf538be8f7f34bfd3e02a4bed164cbd/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "969a2cc8c1e83ce93a13ab126c4519a72405bb69", "url": "https://api.github.com/repos/rust-lang/rust/commits/969a2cc8c1e83ce93a13ab126c4519a72405bb69", "html_url": "https://github.com/rust-lang/rust/commit/969a2cc8c1e83ce93a13ab126c4519a72405bb69"}], "stats": {"total": 20, "additions": 9, "deletions": 11}, "files": [{"sha": "cce5aa9f7324d0977a38d15a261faa365157893a", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9e97251adf538be8f7f34bfd3e02a4bed164cbd/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e97251adf538be8f7f34bfd3e02a4bed164cbd/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=c9e97251adf538be8f7f34bfd3e02a4bed164cbd", "patch": "@@ -466,7 +466,7 @@ pub trait Visitor<'v>: Sized {\n     fn visit_assoc_type_binding(&mut self, type_binding: &'v TypeBinding<'v>) {\n         walk_assoc_type_binding(self, type_binding)\n     }\n-    fn visit_attribute(&mut self, _id: HirId, _attr: &'v Attribute) {}\n+    fn visit_attribute(&mut self, _attr: &'v Attribute) {}\n     fn visit_associated_item_kind(&mut self, kind: &'v AssocItemKind) {\n         walk_associated_item_kind(self, kind);\n     }"}, {"sha": "94097357f8c10fb4cc34a6f24f5540d6067e1568", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9e97251adf538be8f7f34bfd3e02a4bed164cbd/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e97251adf538be8f7f34bfd3e02a4bed164cbd/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=c9e97251adf538be8f7f34bfd3e02a4bed164cbd", "patch": "@@ -21,7 +21,6 @@\n \n use rustc_ast::{self as ast, Attribute, NestedMetaItem};\n use rustc_data_structures::fx::FxHashSet;\n-use rustc_hir as hir;\n use rustc_hir::def_id::LocalDefId;\n use rustc_hir::intravisit;\n use rustc_hir::Node as HirNode;\n@@ -473,7 +472,7 @@ impl<'tcx> intravisit::Visitor<'tcx> for FindAllAttrs<'tcx> {\n         self.tcx.hir()\n     }\n \n-    fn visit_attribute(&mut self, _: hir::HirId, attr: &'tcx Attribute) {\n+    fn visit_attribute(&mut self, attr: &'tcx Attribute) {\n         if self.is_active_attr(attr) {\n             self.found_attrs.push(attr);\n         }"}, {"sha": "e9b14b2693ca7654f2f30518419df7a1bff6f7a2", "filename": "compiler/rustc_lint/src/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9e97251adf538be8f7f34bfd3e02a4bed164cbd/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e97251adf538be8f7f34bfd3e02a4bed164cbd/compiler%2Frustc_lint%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flate.rs?ref=c9e97251adf538be8f7f34bfd3e02a4bed164cbd", "patch": "@@ -337,7 +337,7 @@ impl<'tcx, T: LateLintPass<'tcx>> hir_visit::Visitor<'tcx> for LateContextAndPas\n         hir_visit::walk_path(self, p);\n     }\n \n-    fn visit_attribute(&mut self, _hir_id: hir::HirId, attr: &'tcx ast::Attribute) {\n+    fn visit_attribute(&mut self, attr: &'tcx ast::Attribute) {\n         lint_callback!(self, check_attribute, attr);\n     }\n }\n@@ -400,7 +400,7 @@ fn late_lint_mod_pass<'tcx, T: LateLintPass<'tcx>>(\n     // Visit the crate attributes\n     if hir_id == hir::CRATE_HIR_ID {\n         for attr in tcx.hir().attrs(hir::CRATE_HIR_ID).iter() {\n-            cx.visit_attribute(hir_id, attr)\n+            cx.visit_attribute(attr)\n         }\n     }\n }"}, {"sha": "4c853ba0fa906d96e81ac2d633ef4f07701b4fd0", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c9e97251adf538be8f7f34bfd3e02a4bed164cbd/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e97251adf538be8f7f34bfd3e02a4bed164cbd/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=c9e97251adf538be8f7f34bfd3e02a4bed164cbd", "patch": "@@ -577,12 +577,11 @@ impl<'hir> Map<'hir> {\n     /// Walks the attributes in a crate.\n     pub fn walk_attributes(self, visitor: &mut impl Visitor<'hir>) {\n         let krate = self.krate();\n-        for (owner, info) in krate.owners.iter_enumerated() {\n+        for info in krate.owners.iter() {\n             if let MaybeOwner::Owner(info) = info {\n-                for (local_id, attrs) in info.attrs.map.iter() {\n-                    let id = HirId { owner, local_id: *local_id };\n+                for attrs in info.attrs.map.values() {\n                     for a in *attrs {\n-                        visitor.visit_attribute(id, a)\n+                        visitor.visit_attribute(a)\n                     }\n                 }\n             }"}, {"sha": "a3be827a7ccec3a5f4a1aa16a6dac1bbfdd115cb", "filename": "compiler/rustc_passes/src/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9e97251adf538be8f7f34bfd3e02a4bed164cbd/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e97251adf538be8f7f34bfd3e02a4bed164cbd/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fhir_stats.rs?ref=c9e97251adf538be8f7f34bfd3e02a4bed164cbd", "patch": "@@ -238,7 +238,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_assoc_type_binding(self, type_binding)\n     }\n \n-    fn visit_attribute(&mut self, _: hir::HirId, attr: &'v ast::Attribute) {\n+    fn visit_attribute(&mut self, attr: &'v ast::Attribute) {\n         self.record(\"Attribute\", Id::Attr(attr.id), attr);\n     }\n }"}, {"sha": "26bfa4737a7524ee48581a8034eac7ff77643816", "filename": "compiler/rustc_passes/src/lib_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9e97251adf538be8f7f34bfd3e02a4bed164cbd/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9e97251adf538be8f7f34bfd3e02a4bed164cbd/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib_features.rs?ref=c9e97251adf538be8f7f34bfd3e02a4bed164cbd", "patch": "@@ -120,7 +120,7 @@ impl<'tcx> Visitor<'tcx> for LibFeatureCollector<'tcx> {\n         self.tcx.hir()\n     }\n \n-    fn visit_attribute(&mut self, _: rustc_hir::HirId, attr: &'tcx Attribute) {\n+    fn visit_attribute(&mut self, attr: &'tcx Attribute) {\n         if let Some((feature, stable, span)) = self.extract(attr) {\n             self.collect_feature(feature, stable, span);\n         }"}]}