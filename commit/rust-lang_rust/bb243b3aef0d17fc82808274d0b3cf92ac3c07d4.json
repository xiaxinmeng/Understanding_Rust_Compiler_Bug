{"sha": "bb243b3aef0d17fc82808274d0b3cf92ac3c07d4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMjQzYjNhZWYwZDE3ZmM4MjgwODI3NGQwYjNjZjkyYWMzYzA3ZDQ=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-13T21:26:38Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-13T21:26:38Z"}, "message": "Desugar the head stmts all the way out of STMT_for, rather than stashing them in the node. That's only necessary for STMT_while.", "tree": {"sha": "9b71189815b8da1697cdfea2277523313b780003", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b71189815b8da1697cdfea2277523313b780003"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb243b3aef0d17fc82808274d0b3cf92ac3c07d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb243b3aef0d17fc82808274d0b3cf92ac3c07d4", "html_url": "https://github.com/rust-lang/rust/commit/bb243b3aef0d17fc82808274d0b3cf92ac3c07d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb243b3aef0d17fc82808274d0b3cf92ac3c07d4/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "15ef6c12d9bdbbd41db7c3df8fb6c3efd8e84493", "url": "https://api.github.com/repos/rust-lang/rust/commits/15ef6c12d9bdbbd41db7c3df8fb6c3efd8e84493", "html_url": "https://github.com/rust-lang/rust/commit/15ef6c12d9bdbbd41db7c3df8fb6c3efd8e84493"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "31138a519628e10540d6e8d84cff27f852f227b8", "filename": "src/boot/fe/ast.ml", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb243b3aef0d17fc82808274d0b3cf92ac3c07d4/src%2Fboot%2Ffe%2Fast.ml", "raw_url": "https://github.com/rust-lang/rust/raw/bb243b3aef0d17fc82808274d0b3cf92ac3c07d4/src%2Fboot%2Ffe%2Fast.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fast.ml?ref=bb243b3aef0d17fc82808274d0b3cf92ac3c07d4", "patch": "@@ -283,7 +283,7 @@ and stmt_for_each =\n and stmt_for =\n     {\n       for_slot: (slot identified * ident);\n-      for_seq: ((stmt array) * lval);\n+      for_seq: lval;\n       for_body: block;\n     }\n \n@@ -1098,15 +1098,14 @@ and fmt_stmt_body (ff:Format.formatter) (s:stmt) : unit =\n \n       | STMT_for sfor ->\n           let (slot, ident) = sfor.for_slot in\n-          let (stmts, lval) = sfor.for_seq in\n+          let lval = sfor.for_seq in\n             begin\n               fmt_obox ff;\n               fmt ff \"for (\";\n               fmt_slot ff slot.node;\n               fmt ff \" \";\n               fmt_ident ff ident;\n               fmt ff \" in \";\n-              fmt_stmts ff stmts;\n               fmt_lval ff lval;\n               fmt ff \") \";\n               fmt_obr ff;"}, {"sha": "0b5efd6736b022f4f6f7051b770a333f67ff2e2d", "filename": "src/boot/fe/item.ml", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bb243b3aef0d17fc82808274d0b3cf92ac3c07d4/src%2Fboot%2Ffe%2Fitem.ml", "raw_url": "https://github.com/rust-lang/rust/raw/bb243b3aef0d17fc82808274d0b3cf92ac3c07d4/src%2Fboot%2Ffe%2Fitem.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Ffe%2Fitem.ml?ref=bb243b3aef0d17fc82808274d0b3cf92ac3c07d4", "patch": "@@ -369,17 +369,18 @@ and parse_stmts (ps:pstate) : Ast.stmt array =\n                   let inner ps =\n                     let slot = (parse_identified_slot_and_ident false ps) in\n                     let _    = (expect ps IN) in\n-                    let lval = (parse_lval ps) in\n-                      (slot, lval) in\n-                  let (slot, seq) =\n+                      (slot, (parse_lval ps))\n+                  in\n+                  let (slot, (stmts, lval)) =\n                     ctxt \"stmts: for head\" (bracketed LPAREN RPAREN inner) ps\n                   in\n                   let body_block = ctxt \"stmts: for body\" parse_block ps in\n                   let bpos = lexpos ps in\n-                    [| span ps apos bpos\n-                         (Ast.STMT_for\n+                    Array.append stmts\n+                      [| span ps apos bpos\n+                           (Ast.STMT_for\n                             { Ast.for_slot = slot;\n-                              Ast.for_seq = seq;\n+                              Ast.for_seq = lval;\n                               Ast.for_body = body_block; }) |]\n           end\n "}, {"sha": "df0801b9347e6496d1791046f7cf128d6cf9ee9d", "filename": "src/boot/me/trans.ml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb243b3aef0d17fc82808274d0b3cf92ac3c07d4/src%2Fboot%2Fme%2Ftrans.ml", "raw_url": "https://github.com/rust-lang/rust/raw/bb243b3aef0d17fc82808274d0b3cf92ac3c07d4/src%2Fboot%2Fme%2Ftrans.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftrans.ml?ref=bb243b3aef0d17fc82808274d0b3cf92ac3c07d4", "patch": "@@ -4021,10 +4021,9 @@ let trans_visitor\n     let dst_slot_id = (fst (fo.Ast.for_slot)).id in\n     let dst_slot = get_slot cx dst_slot_id in\n     let dst_cell = cell_of_block_slot dst_slot_id in\n-    let (head_stmts, seq) = fo.Ast.for_seq in\n+    let seq = fo.Ast.for_seq in\n     let (seq_cell, seq_ty) = trans_lval seq in\n     let unit_ty = seq_unit_ty seq_ty in\n-      Array.iter trans_stmt head_stmts;\n       iter_seq_parts ty_params seq_cell seq_cell unit_ty\n         begin\n           fun _ src_cell unit_ty _ ->"}, {"sha": "701bee1a384e791f8ee93c52bafa9de11bc11ff0", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb243b3aef0d17fc82808274d0b3cf92ac3c07d4/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/bb243b3aef0d17fc82808274d0b3cf92ac3c07d4/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=bb243b3aef0d17fc82808274d0b3cf92ac3c07d4", "patch": "@@ -1263,7 +1263,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n             let mem_tv = ref TYSPEC_all in\n             let seq_tv = ref (TYSPEC_collection mem_tv) in\n             let (si, _) = fo.Ast.for_slot in\n-            let (_, seq) = fo.Ast.for_seq in\n+            let seq = fo.Ast.for_seq in\n               unify_lval rval_ctx seq seq_tv;\n               unify_slot lval_ctx si.node (Some si.id) mem_tv\n "}, {"sha": "b9a189c2bc6ad3671bd872cbaf7b27ff334ea874", "filename": "src/boot/me/typestate.ml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb243b3aef0d17fc82808274d0b3cf92ac3c07d4/src%2Fboot%2Fme%2Ftypestate.ml", "raw_url": "https://github.com/rust-lang/rust/raw/bb243b3aef0d17fc82808274d0b3cf92ac3c07d4/src%2Fboot%2Fme%2Ftypestate.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftypestate.ml?ref=bb243b3aef0d17fc82808274d0b3cf92ac3c07d4", "patch": "@@ -533,7 +533,7 @@ let condition_assigning_visitor\n \n         | Ast.STMT_for fo ->\n             let (si, _) = fo.Ast.for_slot in\n-            let (_, lval) = fo.Ast.for_seq in\n+            let lval = fo.Ast.for_seq in\n             let precond = slot_inits (lval_slots cx lval) in\n             let block_entry_state = [| Constr_init si.id |] in\n               raise_pre_post_cond s.id precond;"}, {"sha": "49db07e51dad5924ba8c44507ecfa6ea3656d565", "filename": "src/boot/me/walk.ml", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb243b3aef0d17fc82808274d0b3cf92ac3c07d4/src%2Fboot%2Fme%2Fwalk.ml", "raw_url": "https://github.com/rust-lang/rust/raw/bb243b3aef0d17fc82808274d0b3cf92ac3c07d4/src%2Fboot%2Fme%2Fwalk.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Fwalk.ml?ref=bb243b3aef0d17fc82808274d0b3cf92ac3c07d4", "patch": "@@ -419,9 +419,8 @@ and walk_stmt\n       (s:Ast.stmt_for)\n       : unit =\n     let (si,_) = s.Ast.for_slot in\n-    let (ss,lv) = s.Ast.for_seq in\n+    let lv = s.Ast.for_seq in\n       walk_slot_identified v si;\n-      Array.iter (walk_stmt v) ss;\n       walk_lval v lv;\n       walk_block v s.Ast.for_body\n   in"}]}