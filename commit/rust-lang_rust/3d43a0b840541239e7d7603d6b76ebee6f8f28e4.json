{"sha": "3d43a0b840541239e7d7603d6b76ebee6f8f28e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkNDNhMGI4NDA1NDEyMzllN2Q3NjAzZDZiNzZlYmVlNmY4ZjI4ZTQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-05-15T07:29:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-15T07:29:26Z"}, "message": "Rustup (#723)\n\nRustup", "tree": {"sha": "ce7c01579d0ed01ad5747c92c95e4067679afaaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce7c01579d0ed01ad5747c92c95e4067679afaaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3d43a0b840541239e7d7603d6b76ebee6f8f28e4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc27/WCRBK7hj4Ov3rIwAAdHIIAFpOPf3l2jbN5I3AlH1j8q/L\nQ1el3qS2L4hx0p2uJpyeFd2sajxN1PRSKgqQIQ7ssRslnz0o1LXSim7KpgYpXcn1\nVu/QEapy0Wn2iap2qJ+hSmXCnOx+OiLEr2o0yejCXC3d1Z4YlVWG7HSrIzPUvaVy\nj+2I6e1KdoBMILw7eOSTqX3pj6HXUqt+rXy/V83dyYKwWSc+p9zfQVTc0d/gV546\nuioHnL/CdEwtQAe6EIzcxafgoZPUNzUyMytBogacojBM0vQKH5sCVFyDoLn28Mmh\nVCZAHejpO87ED6/Kd+0x1EK8EFE2RDw/Jbij9mD9OAqrGXiycemePmwEz0ZCWIk=\n=Prb3\n-----END PGP SIGNATURE-----\n", "payload": "tree ce7c01579d0ed01ad5747c92c95e4067679afaaf\nparent 260256923e5be5b9c441e5471b453ca40cdb4baa\nparent 7a5a0303be8a053339d9fd88b4adee9d01e6469f\nauthor Ralf Jung <post@ralfj.de> 1557905366 +0200\ncommitter GitHub <noreply@github.com> 1557905366 +0200\n\nRustup (#723)\n\nRustup"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3d43a0b840541239e7d7603d6b76ebee6f8f28e4", "html_url": "https://github.com/rust-lang/rust/commit/3d43a0b840541239e7d7603d6b76ebee6f8f28e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3d43a0b840541239e7d7603d6b76ebee6f8f28e4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "260256923e5be5b9c441e5471b453ca40cdb4baa", "url": "https://api.github.com/repos/rust-lang/rust/commits/260256923e5be5b9c441e5471b453ca40cdb4baa", "html_url": "https://github.com/rust-lang/rust/commit/260256923e5be5b9c441e5471b453ca40cdb4baa"}, {"sha": "7a5a0303be8a053339d9fd88b4adee9d01e6469f", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a5a0303be8a053339d9fd88b4adee9d01e6469f", "html_url": "https://github.com/rust-lang/rust/commit/7a5a0303be8a053339d9fd88b4adee9d01e6469f"}], "stats": {"total": 42, "additions": 21, "deletions": 21}, "files": [{"sha": "4cf2697aa4212dc7a211b624fe89f5380bac6d86", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3d43a0b840541239e7d7603d6b76ebee6f8f28e4/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/3d43a0b840541239e7d7603d6b76ebee6f8f28e4/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=3d43a0b840541239e7d7603d6b76ebee6f8f28e4", "patch": "@@ -1 +1 @@\n-7c71bc3208031b1307573de45a3b3e18fa45787a\n+372be4f360ce42b1a10126a711189796f8440ab4"}, {"sha": "cf50f8125c4bd84dd1feb6f096001ed32dc15646", "filename": "src/bin/miri-rustc-tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3d43a0b840541239e7d7603d6b76ebee6f8f28e4/src%2Fbin%2Fmiri-rustc-tests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d43a0b840541239e7d7603d6b76ebee6f8f28e4/src%2Fbin%2Fmiri-rustc-tests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri-rustc-tests.rs?ref=3d43a0b840541239e7d7603d6b76ebee6f8f28e4", "patch": "@@ -30,7 +30,7 @@ struct MiriCompilerCalls {\n impl rustc_driver::Callbacks for MiriCompilerCalls {\n     fn after_parsing(&mut self, compiler: &interface::Compiler) -> bool {\n         let attr = (\n-            String::from(\"miri\"),\n+            syntax::symbol::Symbol::intern(\"miri\"),\n             syntax::feature_gate::AttributeType::Whitelisted,\n         );\n         compiler.session().plugin_attributes.borrow_mut().push(attr);\n@@ -47,7 +47,7 @@ impl rustc_driver::Callbacks for MiriCompilerCalls {\n                 impl<'a, 'tcx: 'a, 'hir> itemlikevisit::ItemLikeVisitor<'hir> for Visitor<'a, 'tcx> {\n                     fn visit_item(&mut self, i: &'hir hir::Item) {\n                         if let hir::ItemKind::Fn(.., body_id) = i.node {\n-                            if i.attrs.iter().any(|attr| attr.check_name(\"test\")) {\n+                            if i.attrs.iter().any(|attr| attr.check_name(syntax::symbol::sym::test)) {\n                                 let config = MiriConfig { validate: true, args: vec![], seed: None };\n                                 let did = self.0.hir().body_owner_def_id(body_id);\n                                 println!(\"running test: {}\", self.0.def_path_debug_str(did));"}, {"sha": "31ed5f2ccd5386cddab1d1782f1eb0149f866db6", "filename": "src/bin/miri.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3d43a0b840541239e7d7603d6b76ebee6f8f28e4/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d43a0b840541239e7d7603d6b76ebee6f8f28e4/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=3d43a0b840541239e7d7603d6b76ebee6f8f28e4", "patch": "@@ -27,7 +27,7 @@ struct MiriCompilerCalls {\n impl rustc_driver::Callbacks for MiriCompilerCalls {\n     fn after_parsing(&mut self, compiler: &interface::Compiler) -> bool {\n         let attr = (\n-            String::from(\"miri\"),\n+            syntax::symbol::Symbol::intern(\"miri\"),\n             syntax::feature_gate::AttributeType::Whitelisted,\n         );\n         compiler.session().plugin_attributes.borrow_mut().push(attr);\n@@ -66,26 +66,26 @@ fn init_early_loggers() {\n     // If it is not set, we avoid initializing now so that we can initialize\n     // later with our custom settings, and *not* log anything for what happens before\n     // `miri` gets started.\n-    if env::var(\"RUST_LOG\").is_ok() {\n+    if env::var(\"RUSTC_LOG\").is_ok() {\n         rustc_driver::init_rustc_env_logger();\n     }\n }\n \n fn init_late_loggers() {\n-    // We initialize loggers right before we start evaluation. We overwrite the `RUST_LOG`\n+    // We initialize loggers right before we start evaluation. We overwrite the `RUSTC_LOG`\n     // env var if it is not set, control it based on `MIRI_LOG`.\n     if let Ok(var) = env::var(\"MIRI_LOG\") {\n-        if env::var(\"RUST_LOG\").is_err() {\n+        if env::var(\"RUSTC_LOG\").is_err() {\n             // We try to be a bit clever here: if `MIRI_LOG` is just a single level\n             // used for everything, we only apply it to the parts of rustc that are\n-            // CTFE-related. Otherwise, we use it verbatim for `RUST_LOG`.\n+            // CTFE-related. Otherwise, we use it verbatim for `RUSTC_LOG`.\n             // This way, if you set `MIRI_LOG=trace`, you get only the right parts of\n             // rustc traced, but you can also do `MIRI_LOG=miri=trace,rustc_mir::interpret=debug`.\n             if log::Level::from_str(&var).is_ok() {\n-                env::set_var(\"RUST_LOG\",\n+                env::set_var(\"RUSTC_LOG\",\n                     &format!(\"rustc::mir::interpret={0},rustc_mir::interpret={0}\", var));\n             } else {\n-                env::set_var(\"RUST_LOG\", &var);\n+                env::set_var(\"RUSTC_LOG\", &var);\n             }\n             rustc_driver::init_rustc_env_logger();\n         }"}, {"sha": "3ff0c1eb18a0dfdc7c2c8151fd8c404f06e7e537", "filename": "src/fn_call.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d43a0b840541239e7d7603d6b76ebee6f8f28e4/src%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d43a0b840541239e7d7603d6b76ebee6f8f28e4/src%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffn_call.rs?ref=3d43a0b840541239e7d7603d6b76ebee6f8f28e4", "patch": "@@ -3,6 +3,7 @@ use rustc::ty::layout::{Align, LayoutOf, Size};\n use rustc::hir::def_id::DefId;\n use rustc::mir;\n use syntax::attr;\n+use syntax::symbol::sym;\n \n use rand::RngCore;\n \n@@ -141,7 +142,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n     ) -> EvalResult<'tcx> {\n         let this = self.eval_context_mut();\n         let attrs = this.tcx.get_attrs(def_id);\n-        let link_name = match attr::first_attr_value_str_by_name(&attrs, \"link_name\") {\n+        let link_name = match attr::first_attr_value_str_by_name(&attrs, sym::link_name) {\n             Some(name) => name.as_str(),\n             None => this.tcx.item_name(def_id).as_str(),\n         };"}, {"sha": "89aba494724ca3f1ec0564be861923975a9de5a2", "filename": "src/helpers.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d43a0b840541239e7d7603d6b76ebee6f8f28e4/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d43a0b840541239e7d7603d6b76ebee6f8f28e4/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=3d43a0b840541239e7d7603d6b76ebee6f8f28e4", "patch": "@@ -14,7 +14,7 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n         this.tcx\n             .crates()\n             .iter()\n-            .find(|&&krate| this.tcx.original_crate_name(krate) == path[0])\n+            .find(|&&krate| this.tcx.original_crate_name(krate).as_str() == path[0])\n             .and_then(|krate| {\n                 let krate = DefId {\n                     krate: *krate,\n@@ -25,12 +25,12 @@ pub trait EvalContextExt<'a, 'mir, 'tcx: 'a + 'mir>: crate::MiriEvalContextExt<'\n \n                 while let Some(segment) = path_it.next() {\n                     for item in mem::replace(&mut items, Default::default()).iter() {\n-                        if item.ident.name == *segment {\n+                        if item.ident.name.as_str() == *segment {\n                             if path_it.peek().is_none() {\n-                                return Some(ty::Instance::mono(this.tcx.tcx, item.def.def_id()));\n+                                return Some(ty::Instance::mono(this.tcx.tcx, item.res.def_id()));\n                             }\n \n-                            items = this.tcx.item_children(item.def.def_id());\n+                            items = this.tcx.item_children(item.res.def_id());\n                             break;\n                         }\n                     }"}, {"sha": "d3e30bbdde8f9f4152a6e3851cc063ff38582023", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3d43a0b840541239e7d7603d6b76ebee6f8f28e4/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d43a0b840541239e7d7603d6b76ebee6f8f28e4/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=3d43a0b840541239e7d7603d6b76ebee6f8f28e4", "patch": "@@ -37,6 +37,7 @@ pub use rustc_mir::interpret::*;\n pub use rustc_mir::interpret::{self, AllocMap, PlaceTy};\n use syntax::attr;\n use syntax::source_map::DUMMY_SP;\n+use syntax::symbol::sym;\n \n pub use crate::fn_call::EvalContextExt as MissingFnsEvalContextExt;\n pub use crate::operator::EvalContextExt as OperatorEvalContextExt;\n@@ -478,7 +479,7 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n         memory_extra: &Self::MemoryExtra,\n     ) -> EvalResult<'tcx, Cow<'tcx, Allocation<Tag, Self::AllocExtra>>> {\n         let attrs = tcx.get_attrs(def_id);\n-        let link_name = match attr::first_attr_value_str_by_name(&attrs, \"link_name\") {\n+        let link_name = match attr::first_attr_value_str_by_name(&attrs, sym::link_name) {\n             Some(name) => name.as_str(),\n             None => tcx.item_name(def_id).as_str(),\n         };"}, {"sha": "e249238d48cbff3893a0cc48cb415e1190612441", "filename": "tests/run-pass/hashmap.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3d43a0b840541239e7d7603d6b76ebee6f8f28e4/tests%2Frun-pass%2Fhashmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3d43a0b840541239e7d7603d6b76ebee6f8f28e4/tests%2Frun-pass%2Fhashmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fhashmap.rs?ref=3d43a0b840541239e7d7603d6b76ebee6f8f28e4", "patch": "@@ -24,12 +24,10 @@ fn test_map<S: BuildHasher>(mut map: HashMap<i32, i32, S>) {\n }\n \n fn main() {\n-    if cfg!(target_os = \"macos\") { // TODO: Implement random number generation on OS X.\n+    if cfg!(target_os = \"macos\") { // TODO: Implement libstd HashMap seeding for macOS (https://github.com/rust-lang/miri/issues/686).\n         // Until then, use a deterministic map.\n-        let map : HashMap<i32, i32, BuildHasherDefault<collections::hash_map::DefaultHasher>> = HashMap::default();\n-        test_map(map);\n+        test_map::<BuildHasherDefault<collections::hash_map::DefaultHasher>>(HashMap::default());\n     } else {\n-        let map: HashMap<i32, i32> = HashMap::default();\n-        test_map(map);\n+        test_map(HashMap::new());\n     }\n }"}]}