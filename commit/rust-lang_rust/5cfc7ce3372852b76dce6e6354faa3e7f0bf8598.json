{"sha": "5cfc7ce3372852b76dce6e6354faa3e7f0bf8598", "node_id": "C_kwDOAAsO6NoAKDVjZmM3Y2UzMzcyODUyYjc2ZGNlNmU2MzU0ZmFhM2U3ZjBiZjg1OTg", "commit": {"author": {"name": "Muhammad Falak R Wani", "email": "falakreyaz@gmail.com", "date": "2021-11-11T06:30:02Z"}, "committer": {"name": "Muhammad Falak R Wani", "email": "falakreyaz@gmail.com", "date": "2021-11-11T13:02:31Z"}, "message": "librustdoc: revert use of def_id for one of the edge case\n\nSigned-off-by: Muhammad Falak R Wani <falakreyaz@gmail.com>", "tree": {"sha": "5d53fbccca33bd3bccb7903c5aff17236cd9f68e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d53fbccca33bd3bccb7903c5aff17236cd9f68e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cfc7ce3372852b76dce6e6354faa3e7f0bf8598", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEUur4WEwOm1FAXKgN0yOl4BdMht0FAmGNFIoACgkQ0yOl4BdM\nht1dLRAAvCqlLHTERU0n279b1mtLOy6SVEPh1tc+vXBbhd9zCYQhYqQr/8xv8gK1\niPwha3PmkmkmtlNxHIKLJqsnX6/C5rmJxgH+tzja33A/YeTHlHOkA/oVoZ7ULVfR\nkJDFo5oMI6PuqZVTyVGN4kabDsmhy9aAnO8tu5rHOGXxZIqyJkrs1U5Zo5yAtxRG\nnN7QEOoCqhXrjVxY4uEvQSMMgt+czaDwXpIY927W8LCoUtwp7fJD++O8OpKybnjc\nM05vxzusTcR4eaBe3Q79jdE3li4GJCqb3OKjYdaaKv0ZRaUosA95Jt7y2rFrvKgt\ngvUMYE55j9itBBguNpG+/J38M/vwnj0AJdj0SEmsakcAr8IBkWJOGjYvmI02OCz/\nYemftxCxb0UebXy8JYHwEKkd+do5OlV0WZU1PzHEOyJqtm+n8Zq0qo097AYWXglZ\nWIyDdLFSFgQ+k3hxlihtPuM45OfC6dq9o67c+k3iapD3TnNbPwS+fjZl8O3OnOVm\n1KgYokFlQq4GLGFIh8olpCJAv3EyVYO848wgC3b9eQ9oqoa0rc4pmAxAPhZy6GCg\n3jUJWu4hdN678BxtrJCHgVNppZTEbPEataa6bWF3DudBiitvZ9ujzlqr4uPS9LOE\nh21L8bP0BeSoV3lVeLUTWEjpF0korCN2bneI9fuLYE+viM7yDi8=\n=1azy\n-----END PGP SIGNATURE-----", "payload": "tree 5d53fbccca33bd3bccb7903c5aff17236cd9f68e\nparent d4684182096326ccc57ea70bdb080c95607ff238\nauthor Muhammad Falak R Wani <falakreyaz@gmail.com> 1636612202 +0530\ncommitter Muhammad Falak R Wani <falakreyaz@gmail.com> 1636635751 +0530\n\nlibrustdoc: revert use of def_id for one of the edge case\n\nSigned-off-by: Muhammad Falak R Wani <falakreyaz@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cfc7ce3372852b76dce6e6354faa3e7f0bf8598", "html_url": "https://github.com/rust-lang/rust/commit/5cfc7ce3372852b76dce6e6354faa3e7f0bf8598", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cfc7ce3372852b76dce6e6354faa3e7f0bf8598/comments", "author": {"login": "mfrw", "id": 4929861, "node_id": "MDQ6VXNlcjQ5Mjk4NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4929861?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfrw", "html_url": "https://github.com/mfrw", "followers_url": "https://api.github.com/users/mfrw/followers", "following_url": "https://api.github.com/users/mfrw/following{/other_user}", "gists_url": "https://api.github.com/users/mfrw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfrw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfrw/subscriptions", "organizations_url": "https://api.github.com/users/mfrw/orgs", "repos_url": "https://api.github.com/users/mfrw/repos", "events_url": "https://api.github.com/users/mfrw/events{/privacy}", "received_events_url": "https://api.github.com/users/mfrw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mfrw", "id": 4929861, "node_id": "MDQ6VXNlcjQ5Mjk4NjE=", "avatar_url": "https://avatars.githubusercontent.com/u/4929861?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mfrw", "html_url": "https://github.com/mfrw", "followers_url": "https://api.github.com/users/mfrw/followers", "following_url": "https://api.github.com/users/mfrw/following{/other_user}", "gists_url": "https://api.github.com/users/mfrw/gists{/gist_id}", "starred_url": "https://api.github.com/users/mfrw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mfrw/subscriptions", "organizations_url": "https://api.github.com/users/mfrw/orgs", "repos_url": "https://api.github.com/users/mfrw/repos", "events_url": "https://api.github.com/users/mfrw/events{/privacy}", "received_events_url": "https://api.github.com/users/mfrw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4684182096326ccc57ea70bdb080c95607ff238", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4684182096326ccc57ea70bdb080c95607ff238", "html_url": "https://github.com/rust-lang/rust/commit/d4684182096326ccc57ea70bdb080c95607ff238"}], "stats": {"total": 15, "additions": 10, "deletions": 5}, "files": [{"sha": "1dda80ff38c580bd0cbaa68179bc17c67a9fd0f1", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/5cfc7ce3372852b76dce6e6354faa3e7f0bf8598/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cfc7ce3372852b76dce6e6354faa3e7f0bf8598/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=5cfc7ce3372852b76dce6e6354faa3e7f0bf8598", "patch": "@@ -257,7 +257,7 @@ crate fn get_real_types<'tcx>(\n         tcx: TyCtxt<'_>,\n         ty: Type,\n         mut generics: Vec<TypeWithKind>,\n-        cache: &Cache,\n+        _cache: &Cache,\n     ) {\n         let is_full_generic = ty.is_full_generic();\n \n@@ -309,7 +309,7 @@ crate fn get_real_types<'tcx>(\n             // We remove the name of the full generic because we have no use for it.\n             index_ty.name = Some(String::new());\n             res.push(TypeWithKind::from((index_ty, ItemType::Generic)));\n-        } else if let Some(kind) = ty.def_id(cache).map(|did| tcx.def_kind(did).into()) {\n+        } else if let Some(kind) = ty.def_id_no_primitives().map(|did| tcx.def_kind(did).into()) {\n             res.push(TypeWithKind::from((index_ty, kind)));\n         } else if ty.is_primitive() {\n             // This is a primitive, let's store it as such.\n@@ -324,7 +324,9 @@ crate fn get_real_types<'tcx>(\n \n     if let Type::Generic(arg_s) = *arg {\n         if let Some(where_pred) = generics.where_predicates.iter().find(|g| match g {\n-            WherePredicate::BoundPredicate { ty, .. } => ty.def_id(cache) == arg.def_id(cache),\n+            WherePredicate::BoundPredicate { ty, .. } => {\n+                ty.def_id_no_primitives() == arg.def_id_no_primitives()\n+            }\n             _ => false,\n         }) {\n             let mut ty_generics = Vec::new();\n@@ -395,7 +397,8 @@ crate fn get_all_types<'tcx>(\n             // `all_types.extend(args.drain(..));`.\n             all_types.extend(args);\n         } else {\n-            if let Some(kind) = arg.type_.def_id(cache).map(|did| tcx.def_kind(did).into()) {\n+            if let Some(kind) = arg.type_.def_id_no_primitives().map(|did| tcx.def_kind(did).into())\n+            {\n                 all_types.push(TypeWithKind::from((get_index_type(&arg.type_, vec![]), kind)));\n             }\n         }\n@@ -406,7 +409,9 @@ crate fn get_all_types<'tcx>(\n         FnRetTy::Return(ref return_type) => {\n             get_real_types(generics, return_type, tcx, 0, &mut ret_types, cache);\n             if ret_types.is_empty() {\n-                if let Some(kind) = return_type.def_id(cache).map(|did| tcx.def_kind(did).into()) {\n+                if let Some(kind) =\n+                    return_type.def_id_no_primitives().map(|did| tcx.def_kind(did).into())\n+                {\n                     ret_types.push(TypeWithKind::from((get_index_type(return_type, vec![]), kind)));\n                 }\n             }"}]}