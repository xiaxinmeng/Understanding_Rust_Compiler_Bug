{"sha": "f1a46914c4241c05a5b44f6f8dad4630a150e292", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxYTQ2OTE0YzQyNDFjMDVhNWI0NGY2ZjhkYWQ0NjMwYTE1MGUyOTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-19T02:02:39Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-05-19T02:07:19Z"}, "message": "add a new debugging aid--tracing", "tree": {"sha": "0d9d26a219b1a771b386b01c0370bae8d3101c16", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d9d26a219b1a771b386b01c0370bae8d3101c16"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1a46914c4241c05a5b44f6f8dad4630a150e292", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1a46914c4241c05a5b44f6f8dad4630a150e292", "html_url": "https://github.com/rust-lang/rust/commit/f1a46914c4241c05a5b44f6f8dad4630a150e292", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1a46914c4241c05a5b44f6f8dad4630a150e292/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c568cf6099b94d50ff7ca28e60d376ebe2cc9255", "url": "https://api.github.com/repos/rust-lang/rust/commits/c568cf6099b94d50ff7ca28e60d376ebe2cc9255", "html_url": "https://github.com/rust-lang/rust/commit/c568cf6099b94d50ff7ca28e60d376ebe2cc9255"}], "stats": {"total": 75, "additions": 69, "deletions": 6}, "files": [{"sha": "9ad1f3a5e4d051b5405f672ead5f11bbb3fc9efe", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f1a46914c4241c05a5b44f6f8dad4630a150e292/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f1a46914c4241c05a5b44f6f8dad4630a150e292/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=f1a46914c4241c05a5b44f6f8dad4630a150e292", "patch": "@@ -129,6 +129,28 @@ upcall_fail(char const *expr,\n     UPCALL_SWITCH_STACK(&args, upcall_s_fail);\n }\n \n+struct s_trace_args {\n+    char const *msg;\n+    char const *file;\n+    size_t line;\n+};\n+\n+extern \"C\" CDECL void\n+upcall_s_trace(s_trace_args *args) {\n+    rust_task *task = rust_get_current_task();\n+    LOG_UPCALL_ENTRY(task);\n+    LOG(task, trace, \"Trace %s:%d: %s\",\n+        args->file, args->line, args->msg);\n+}\n+\n+extern \"C\" CDECL void\n+upcall_trace(char const *msg,\n+             char const *file,\n+             size_t line) {\n+    s_trace_args args = {msg,file,line};\n+    UPCALL_SWITCH_STACK(&args, upcall_s_trace);\n+}\n+\n /**********************************************************************\n  * Allocate an object in the task-local heap.\n  */"}, {"sha": "ed7fb146928f5e4e29e3c7e59051bb9216521f51", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1a46914c4241c05a5b44f6f8dad4630a150e292/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/f1a46914c4241c05a5b44f6f8dad4630a150e292/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=f1a46914c4241c05a5b44f6f8dad4630a150e292", "patch": "@@ -65,6 +65,7 @@ vec_from_buf_shared\n unsupervise\n upcall_cmp_type\n upcall_fail\n+upcall_trace\n upcall_free\n upcall_validate_box\n upcall_log_type"}, {"sha": "7cc71fca0b280ac51b488112f272e4f422988f8d", "filename": "src/rustc/back/upcall.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f1a46914c4241c05a5b44f6f8dad4630a150e292/src%2Frustc%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a46914c4241c05a5b44f6f8dad4630a150e292/src%2Frustc%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fback%2Fupcall.rs?ref=f1a46914c4241c05a5b44f6f8dad4630a150e292", "patch": "@@ -9,6 +9,7 @@ import lib::llvm::{type_names, ModuleRef, ValueRef, TypeRef};\n \n type upcalls =\n     {_fail: ValueRef,\n+     trace: ValueRef,\n      malloc: ValueRef,\n      free: ValueRef,\n      validate_box: ValueRef,\n@@ -53,6 +54,9 @@ fn declare_upcalls(targ_cfg: @session::config,\n     ret @{_fail: dv(\"fail\", [T_ptr(T_i8()),\n                              T_ptr(T_i8()),\n                              size_t]),\n+          trace: dv(\"trace\", [T_ptr(T_i8()),\n+                              T_ptr(T_i8()),\n+                              int_t]),\n           malloc:\n               nothrow(d(\"malloc\", [T_ptr(tydesc_type)],\n                         T_ptr(T_i8()))),"}, {"sha": "ea815d9e4106ee2a85a85d5362f70b0022b63458", "filename": "src/rustc/driver/session.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1a46914c4241c05a5b44f6f8dad4630a150e292/src%2Frustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a46914c4241c05a5b44f6f8dad4630a150e292/src%2Frustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Fsession.rs?ref=f1a46914c4241c05a5b44f6f8dad4630a150e292", "patch": "@@ -30,6 +30,7 @@ const time_llvm_passes: uint = 8u;\n const stats: uint = 16u;\n const no_asm_comments: uint = 32u;\n const no_verify: uint = 64u;\n+const trace: uint = 128u;\n \n fn debugging_opts_map() -> [(str, str, uint)] {\n     [(\"ppregions\", \"prettyprint regions with \\\n@@ -40,7 +41,8 @@ fn debugging_opts_map() -> [(str, str, uint)] {\n      (\"time-llvm-passes\", \"measure time of each LLVM pass\", time_llvm_passes),\n      (\"stats\", \"gather trans statistics\", stats),\n      (\"no-asm-comments\", \"omit comments when using -S\", no_asm_comments),\n-     (\"no-verify\", \"skip LLVM verification\", no_verify)]\n+     (\"no-verify\", \"skip LLVM verification\", no_verify),\n+     (\"trace\", \"emit trace logs\", trace)]\n }\n \n type options =\n@@ -141,6 +143,7 @@ impl session for session {\n     fn stats() -> bool { self.debugging_opt(stats) }\n     fn no_asm_comments() -> bool { self.debugging_opt(no_asm_comments) }\n     fn no_verify() -> bool { self.debugging_opt(no_verify) }\n+    fn trace() -> bool { self.debugging_opt(trace) }\n }\n \n #[doc = \"Some reasonable defaults\"]"}, {"sha": "d55f4ae9e509b01c7baff9df6ebded734a8a6670", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 33, "deletions": 5, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f1a46914c4241c05a5b44f6f8dad4630a150e292/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a46914c4241c05a5b44f6f8dad4630a150e292/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=f1a46914c4241c05a5b44f6f8dad4630a150e292", "patch": "@@ -1683,10 +1683,12 @@ fn trans_assign_op(bcx: block, ex: @ast::expr, op: ast::binop,\n \n fn root_value(bcx: block, val: ValueRef, ty: ty::t,\n               scope_id: ast::node_id) {\n-    if !bcx.sess().no_asm_comments() {\n-        add_comment(bcx, #fmt[\"preserving until end of scope %d\",\n-                              scope_id]);\n+    if bcx.sess().trace() {\n+        trans_trace(\n+            bcx, none,\n+            #fmt[\"preserving until end of scope %d\", scope_id]);\n     }\n+\n     let root_loc = alloca(bcx, type_of(bcx.ccx(), ty));\n     copy_val(bcx, INIT, root_loc, val, ty);\n     add_root_cleanup(bcx, scope_id, root_loc, ty);\n@@ -3725,6 +3727,30 @@ fn trans_fail_expr(bcx: block, sp_opt: option<span>,\n     }\n }\n \n+fn trans_trace(bcx: block, sp_opt: option<span>, trace_str: str) {\n+    if !bcx.sess().trace() { ret; }\n+    let _icx = bcx.insn_ctxt(\"trans_trace\");\n+    add_comment(bcx, trace_str);\n+    let V_trace_str = C_cstr(bcx.ccx(), trace_str);\n+    let {V_filename, V_line} = alt sp_opt {\n+      some(sp) {\n+        let sess = bcx.sess();\n+        let loc = codemap::lookup_char_pos(sess.parse_sess.cm, sp.lo);\n+        {V_filename: C_cstr(bcx.ccx(), loc.file.name),\n+         V_line: loc.line as int}\n+      }\n+      none {\n+        {V_filename: C_cstr(bcx.ccx(), \"<runtime>\"),\n+         V_line: 0}\n+      }\n+    };\n+    let ccx = bcx.ccx();\n+    let V_trace_str = PointerCast(bcx, V_trace_str, T_ptr(T_i8()));\n+    let V_filename = PointerCast(bcx, V_filename, T_ptr(T_i8()));\n+    let args = [V_trace_str, V_filename, C_int(ccx, V_line)];\n+    Call(bcx, ccx.upcalls.trace, args);\n+}\n+\n fn trans_fail(bcx: block, sp_opt: option<span>, fail_str: str) ->\n     block {\n     let _icx = bcx.insn_ctxt(\"trans_fail\");\n@@ -4040,8 +4066,10 @@ fn cleanup_and_leave(bcx: block, upto: option<BasicBlockRef>,\n     loop {\n         #debug[\"cleanup_and_leave: leaving %s\", cur.to_str()];\n \n-        if !bcx.sess().no_asm_comments() {\n-            add_comment(bcx, #fmt[\"cleanup_and_leave(%s)\", cur.to_str()]);\n+        if bcx.sess().trace() {\n+            trans_trace(\n+                bcx, none,\n+                #fmt[\"cleanup_and_leave(%s)\", cur.to_str()]);\n         }\n \n         alt cur.kind {"}, {"sha": "cbc07ce6d2876eec74deee93ed9082eab874f85f", "filename": "src/rustc/middle/trans/build.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f1a46914c4241c05a5b44f6f8dad4630a150e292/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1a46914c4241c05a5b44f6f8dad4630a150e292/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbuild.rs?ref=f1a46914c4241c05a5b44f6f8dad4630a150e292", "patch": "@@ -669,6 +669,11 @@ fn Call(cx: block, Fn: ValueRef, Args: [ValueRef]) -> ValueRef {\n     if cx.unreachable { ret _UndefReturn(cx, Fn); }\n     unsafe {\n         count_insn(cx, \"call\");\n+\n+        #debug[\"Call(Fn=%s, Args=%?)\",\n+               val_str(cx.ccx().tn, Fn),\n+               Args.map { |arg| val_str(cx.ccx().tn, arg) }];\n+\n         ret llvm::LLVMBuildCall(B(cx), Fn, vec::unsafe::to_ptr(Args),\n                                 Args.len() as c_uint, noname());\n     }"}]}