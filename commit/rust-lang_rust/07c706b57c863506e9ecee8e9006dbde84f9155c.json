{"sha": "07c706b57c863506e9ecee8e9006dbde84f9155c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3YzcwNmI1N2M4NjM1MDZlOWVjZWU4ZTkwMDZkYmRlODRmOTE1NWM=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-07-29T16:04:45Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-01T19:06:47Z"}, "message": "Clean up `resolver.record_use()`.", "tree": {"sha": "5ab9ed9be7de9d69a146b6ff982aaf97b6b6843a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ab9ed9be7de9d69a146b6ff982aaf97b6b6843a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/07c706b57c863506e9ecee8e9006dbde84f9155c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/07c706b57c863506e9ecee8e9006dbde84f9155c", "html_url": "https://github.com/rust-lang/rust/commit/07c706b57c863506e9ecee8e9006dbde84f9155c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/07c706b57c863506e9ecee8e9006dbde84f9155c/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b107a4e4f669454b74dcc438c29b691c0bae086e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b107a4e4f669454b74dcc438c29b691c0bae086e", "html_url": "https://github.com/rust-lang/rust/commit/b107a4e4f669454b74dcc438c29b691c0bae086e"}], "stats": {"total": 32, "additions": 11, "deletions": 21}, "files": [{"sha": "48be5ad812aabe3f1e5a64f42b38e0a3424725eb", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/07c706b57c863506e9ecee8e9006dbde84f9155c/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/07c706b57c863506e9ecee8e9006dbde84f9155c/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=07c706b57c863506e9ecee8e9006dbde84f9155c", "patch": "@@ -1207,29 +1207,22 @@ impl<'a> Resolver<'a> {\n         match ns { ValueNS => &mut self.value_ribs, TypeNS => &mut self.type_ribs }\n     }\n \n-    #[inline]\n-    fn record_use(&mut self, name: Name, binding: &'a NameBinding<'a>) {\n+    fn record_use(&mut self, name: Name, ns: Namespace, binding: &'a NameBinding<'a>) {\n         // track extern crates for unused_extern_crate lint\n         if let Some(DefId { krate, .. }) = binding.module().and_then(ModuleS::def_id) {\n             self.used_crates.insert(krate);\n         }\n \n-        let directive = match binding.kind {\n-            NameBindingKind::Import { directive, .. } => directive,\n-            _ => return,\n-        };\n-\n-        if !self.make_glob_map {\n-            return;\n-        }\n-        if self.glob_map.contains_key(&directive.id) {\n-            self.glob_map.get_mut(&directive.id).unwrap().insert(name);\n-            return;\n+        if let NameBindingKind::Import { directive, .. } = binding.kind {\n+            self.used_imports.insert((directive.id, ns));\n+            self.add_to_glob_map(directive.id, name);\n         }\n+    }\n \n-        let mut new_set = FnvHashSet();\n-        new_set.insert(name);\n-        self.glob_map.insert(directive.id, new_set);\n+    fn add_to_glob_map(&mut self, id: NodeId, name: Name) {\n+        if self.make_glob_map {\n+            self.glob_map.entry(id).or_insert_with(FnvHashSet).insert(name);\n+        }\n     }\n \n     /// Resolves the given module path from the given root `module_`.\n@@ -1529,10 +1522,7 @@ impl<'a> Resolver<'a> {\n         self.populate_module_if_necessary(module);\n         module.resolve_name(name, namespace, use_lexical_scope).and_then(|binding| {\n             if record_used {\n-                if let NameBindingKind::Import { directive, .. } = binding.kind {\n-                    self.used_imports.insert((directive.id, namespace));\n-                }\n-                self.record_use(name, binding);\n+                self.record_use(name, namespace, binding);\n             }\n             Success(binding)\n         })\n@@ -3154,10 +3144,10 @@ impl<'a> Resolver<'a> {\n                         if let NameBindingKind::Import { directive, .. } = binding.kind {\n                             let id = directive.id;\n                             this.maybe_unused_trait_imports.insert(id);\n+                            this.add_to_glob_map(id, trait_name);\n                             import_id = Some(id);\n                         }\n                         add_trait_info(&mut found_traits, trait_def_id, import_id, name);\n-                        this.record_use(trait_name, binding);\n                     }\n                 }\n             };"}]}