{"sha": "57a656a46c279153a626dc5ee259c2c9c7d4af89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3YTY1NmE0NmMyNzkxNTNhNjI2ZGM1ZWUyNTljMmM5YzdkNGFmODk=", "commit": {"author": {"name": "Nadrieril", "email": "nadrieril@gmail.com", "date": "2019-09-23T15:44:24Z"}, "committer": {"name": "Nadrieril", "email": "nadrieril+git@gmail.com", "date": "2019-11-01T17:23:01Z"}, "message": "Clarify some variable names", "tree": {"sha": "70269846e8444bd167852e038c81e427657c9b18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70269846e8444bd167852e038c81e427657c9b18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57a656a46c279153a626dc5ee259c2c9c7d4af89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57a656a46c279153a626dc5ee259c2c9c7d4af89", "html_url": "https://github.com/rust-lang/rust/commit/57a656a46c279153a626dc5ee259c2c9c7d4af89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57a656a46c279153a626dc5ee259c2c9c7d4af89/comments", "author": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nadrieril", "id": 6783654, "node_id": "MDQ6VXNlcjY3ODM2NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6783654?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nadrieril", "html_url": "https://github.com/Nadrieril", "followers_url": "https://api.github.com/users/Nadrieril/followers", "following_url": "https://api.github.com/users/Nadrieril/following{/other_user}", "gists_url": "https://api.github.com/users/Nadrieril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nadrieril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nadrieril/subscriptions", "organizations_url": "https://api.github.com/users/Nadrieril/orgs", "repos_url": "https://api.github.com/users/Nadrieril/repos", "events_url": "https://api.github.com/users/Nadrieril/events{/privacy}", "received_events_url": "https://api.github.com/users/Nadrieril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "175976e2a2b03c3f347d4eff28661445c3c58372", "url": "https://api.github.com/repos/rust-lang/rust/commits/175976e2a2b03c3f347d4eff28661445c3c58372", "html_url": "https://github.com/rust-lang/rust/commit/175976e2a2b03c3f347d4eff28661445c3c58372"}], "stats": {"total": 65, "additions": 36, "deletions": 29}, "files": [{"sha": "97fe8bc56275201872cfec3dac1ac4928b4ae395", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 36, "deletions": 29, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/57a656a46c279153a626dc5ee259c2c9c7d4af89/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57a656a46c279153a626dc5ee259c2c9c7d4af89/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=57a656a46c279153a626dc5ee259c2c9c7d4af89", "patch": "@@ -391,13 +391,13 @@ impl<'p, 'tcx> PatStack<'p, 'tcx> {\n         &self,\n         cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         constructor: &Constructor<'tcx>,\n-        wild_patterns: &[&'q Pat<'tcx>],\n+        ctor_wild_subpatterns: &[&'q Pat<'tcx>],\n     ) -> Option<PatStack<'q, 'tcx>>\n     where\n         'a: 'q,\n         'p: 'q,\n     {\n-        specialize(cx, self, constructor, wild_patterns)\n+        specialize(cx, self, constructor, ctor_wild_subpatterns)\n     }\n }\n \n@@ -443,7 +443,7 @@ impl<'p, 'tcx> Matrix<'p, 'tcx> {\n         &self,\n         cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         constructor: &Constructor<'tcx>,\n-        wild_patterns: &[&'q Pat<'tcx>],\n+        ctor_wild_subpatterns: &[&'q Pat<'tcx>],\n     ) -> Matrix<'q, 'tcx>\n     where\n         'a: 'q,\n@@ -452,7 +452,7 @@ impl<'p, 'tcx> Matrix<'p, 'tcx> {\n         Matrix(\n             self.0\n                 .iter()\n-                .filter_map(|r| r.specialize_constructor(cx, constructor, wild_patterns))\n+                .filter_map(|r| r.specialize_constructor(cx, constructor, ctor_wild_subpatterns))\n                 .collect(),\n         )\n     }\n@@ -1340,7 +1340,7 @@ pub fn is_useful<'p, 'a, 'tcx>(\n     cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     matrix: &Matrix<'p, 'tcx>,\n     v: &PatStack<'_, 'tcx>,\n-    witness: WitnessPreference,\n+    witness_preference: WitnessPreference,\n     hir_id: HirId,\n ) -> Usefulness<'tcx> {\n     let &Matrix(ref rows) = matrix;\n@@ -1353,7 +1353,7 @@ pub fn is_useful<'p, 'a, 'tcx>(\n     // the type of the tuple we're checking is inhabited or not.\n     if v.is_empty() {\n         return if rows.is_empty() {\n-            match witness {\n+            match witness_preference {\n                 ConstructWitness => UsefulWithWitness(vec![Witness(vec![])]),\n                 LeaveOutWitness => Useful,\n             }\n@@ -1408,7 +1408,7 @@ pub fn is_useful<'p, 'a, 'tcx>(\n             Some(hir_id),\n         )\n         .into_iter()\n-        .map(|c| is_useful_specialized(cx, matrix, v, c, pcx.ty, witness, hir_id))\n+        .map(|c| is_useful_specialized(cx, matrix, v, c, pcx.ty, witness_preference, hir_id))\n         .find(|result| result.is_useful())\n         .unwrap_or(NotUseful)\n     } else {\n@@ -1475,14 +1475,14 @@ pub fn is_useful<'p, 'a, 'tcx>(\n                 None,\n             )\n             .into_iter()\n-            .map(|c| is_useful_specialized(cx, matrix, v, c, pcx.ty, witness, hir_id))\n+            .map(|c| is_useful_specialized(cx, matrix, v, c, pcx.ty, witness_preference, hir_id))\n             .find(|result| result.is_useful())\n             .unwrap_or(NotUseful)\n         } else {\n             let matrix = matrix.specialize_wildcard();\n             let v = v.to_tail();\n-            match is_useful(cx, &matrix, &v, witness, hir_id) {\n-                UsefulWithWitness(pats) => {\n+            match is_useful(cx, &matrix, &v, witness_preference, hir_id) {\n+                UsefulWithWitness(witnesses) => {\n                     let cx = &*cx;\n                     // In this case, there's at least one \"free\"\n                     // constructor that is only matched against by\n@@ -1540,7 +1540,7 @@ pub fn is_useful<'p, 'a, 'tcx>(\n                         missing_ctors.map(|ctor| ctor.apply_wildcards(cx, pcx.ty)).collect()\n                     };\n                     // Add the new patterns to each witness\n-                    let new_witnesses = pats\n+                    let new_witnesses = witnesses\n                         .into_iter()\n                         .flat_map(|witness| {\n                             new_patterns.iter().map(move |pat| {\n@@ -1566,16 +1566,16 @@ fn is_useful_specialized<'p, 'a, 'tcx>(\n     v: &PatStack<'_, 'tcx>,\n     ctor: Constructor<'tcx>,\n     lty: Ty<'tcx>,\n-    witness: WitnessPreference,\n+    witness_preference: WitnessPreference,\n     hir_id: HirId,\n ) -> Usefulness<'tcx> {\n     debug!(\"is_useful_specialized({:#?}, {:#?}, {:?})\", v, ctor, lty);\n \n-    let wild_patterns_owned: Vec<_> = ctor.wildcard_subpatterns(cx, lty).collect();\n-    let wild_patterns: Vec<_> = wild_patterns_owned.iter().collect();\n-    let matrix = matrix.specialize_constructor(cx, &ctor, &wild_patterns);\n-    match v.specialize_constructor(cx, &ctor, &wild_patterns) {\n-        Some(v) => match is_useful(cx, &matrix, &v, witness, hir_id) {\n+    let ctor_wild_subpatterns_owned: Vec<_> = ctor.wildcard_subpatterns(cx, lty).collect();\n+    let ctor_wild_subpatterns: Vec<_> = ctor_wild_subpatterns_owned.iter().collect();\n+    let matrix = matrix.specialize_constructor(cx, &ctor, &ctor_wild_subpatterns);\n+    match v.specialize_constructor(cx, &ctor, &ctor_wild_subpatterns) {\n+        Some(v) => match is_useful(cx, &matrix, &v, witness_preference, hir_id) {\n             UsefulWithWitness(witnesses) => UsefulWithWitness(\n                 witnesses\n                     .into_iter()\n@@ -2000,18 +2000,21 @@ fn constructor_covered_by_range<'tcx>(\n fn patterns_for_variant<'p, 'a: 'p, 'tcx>(\n     cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     subpatterns: &'p [FieldPat<'tcx>],\n-    wild_patterns: &[&'p Pat<'tcx>],\n+    ctor_wild_subpatterns: &[&'p Pat<'tcx>],\n     is_non_exhaustive: bool,\n ) -> PatStack<'p, 'tcx> {\n-    let mut result = SmallVec::from_slice(wild_patterns);\n+    let mut result = SmallVec::from_slice(ctor_wild_subpatterns);\n \n     for subpat in subpatterns {\n         if !is_non_exhaustive || !cx.is_uninhabited(subpat.pattern.ty) {\n             result[subpat.field.index()] = &subpat.pattern;\n         }\n     }\n \n-    debug!(\"patterns_for_variant({:#?}, {:#?}) = {:#?}\", subpatterns, wild_patterns, result);\n+    debug!(\n+        \"patterns_for_variant({:#?}, {:#?}) = {:#?}\",\n+        subpatterns, ctor_wild_subpatterns, result\n+    );\n     PatStack::from_vec(result)\n }\n \n@@ -2027,27 +2030,31 @@ fn specialize<'p, 'a: 'p, 'q: 'p, 'tcx>(\n     cx: &mut MatchCheckCtxt<'a, 'tcx>,\n     r: &PatStack<'q, 'tcx>,\n     constructor: &Constructor<'tcx>,\n-    wild_patterns: &[&'p Pat<'tcx>],\n+    ctor_wild_subpatterns: &[&'p Pat<'tcx>],\n ) -> Option<PatStack<'p, 'tcx>> {\n     let pat = r.head();\n \n     let new_head = match *pat.kind {\n         PatKind::AscribeUserType { ref subpattern, .. } => {\n-            specialize(cx, &PatStack::from_pattern(subpattern), constructor, wild_patterns)\n+            specialize(cx, &PatStack::from_pattern(subpattern), constructor, ctor_wild_subpatterns)\n         }\n \n-        PatKind::Binding { .. } | PatKind::Wild => Some(PatStack::from_slice(wild_patterns)),\n+        PatKind::Binding { .. } | PatKind::Wild => {\n+            Some(PatStack::from_slice(ctor_wild_subpatterns))\n+        }\n \n         PatKind::Variant { adt_def, variant_index, ref subpatterns, .. } => {\n             let ref variant = adt_def.variants[variant_index];\n             let is_non_exhaustive = variant.is_field_list_non_exhaustive() && !cx.is_local(pat.ty);\n             Some(Variant(variant.def_id))\n                 .filter(|variant_constructor| variant_constructor == constructor)\n-                .map(|_| patterns_for_variant(cx, subpatterns, wild_patterns, is_non_exhaustive))\n+                .map(|_| {\n+                    patterns_for_variant(cx, subpatterns, ctor_wild_subpatterns, is_non_exhaustive)\n+                })\n         }\n \n         PatKind::Leaf { ref subpatterns } => {\n-            Some(patterns_for_variant(cx, subpatterns, wild_patterns, false))\n+            Some(patterns_for_variant(cx, subpatterns, ctor_wild_subpatterns, false))\n         }\n \n         PatKind::Deref { ref subpattern } => Some(PatStack::from_pattern(subpattern)),\n@@ -2087,7 +2094,7 @@ fn specialize<'p, 'a: 'p, 'q: 'p, 'tcx>(\n                     constructor,\n                 ),\n             };\n-            if wild_patterns.len() as u64 == n {\n+            if ctor_wild_subpatterns.len() as u64 == n {\n                 // convert a constant slice/array pattern to a list of patterns.\n                 let layout = cx.tcx.layout_of(cx.param_env.and(ty)).ok()?;\n                 let ptr = Pointer::new(AllocId(0), offset);\n@@ -2141,13 +2148,13 @@ fn specialize<'p, 'a: 'p, 'q: 'p, 'tcx>(\n         | PatKind::Slice { ref prefix, ref slice, ref suffix } => match *constructor {\n             Slice(..) => {\n                 let pat_len = prefix.len() + suffix.len();\n-                if let Some(slice_count) = wild_patterns.len().checked_sub(pat_len) {\n+                if let Some(slice_count) = ctor_wild_subpatterns.len().checked_sub(pat_len) {\n                     if slice_count == 0 || slice.is_some() {\n                         Some(\n                             prefix\n                                 .iter()\n                                 .chain(\n-                                    wild_patterns\n+                                    ctor_wild_subpatterns\n                                         .iter()\n                                         .map(|p| *p)\n                                         .skip(prefix.len())\n@@ -2185,7 +2192,7 @@ fn specialize<'p, 'a: 'p, 'q: 'p, 'tcx>(\n             bug!(\"support for or-patterns has not been fully implemented yet.\");\n         }\n     };\n-    debug!(\"specialize({:#?}, {:#?}) = {:#?}\", r.head(), wild_patterns, new_head);\n+    debug!(\"specialize({:#?}, {:#?}) = {:#?}\", r.head(), ctor_wild_subpatterns, new_head);\n \n     new_head.map(|head| {\n         let mut head = head.0;"}]}