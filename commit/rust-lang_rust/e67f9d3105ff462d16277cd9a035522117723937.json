{"sha": "e67f9d3105ff462d16277cd9a035522117723937", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2N2Y5ZDMxMDVmZjQ2MmQxNjI3N2NkOWEwMzU1MjIxMTc3MjM5Mzc=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-23T16:45:30Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-12-30T02:13:06Z"}, "message": "Use `desc` as a doc-comment if none exist yet\n\n- Replace {} with the stringified expr\n\n  Giant thank you to `@danielhenrymantilla` for figuring out how to make\n  this work :heart:\n\n- Note that this is just an approximation and it would be better to add\n  a doc-comment", "tree": {"sha": "35acd4df4bf672fbbf9b0f13d735ffeba77c817b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35acd4df4bf672fbbf9b0f13d735ffeba77c817b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e67f9d3105ff462d16277cd9a035522117723937", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e67f9d3105ff462d16277cd9a035522117723937", "html_url": "https://github.com/rust-lang/rust/commit/e67f9d3105ff462d16277cd9a035522117723937", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e67f9d3105ff462d16277cd9a035522117723937/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "50a90975c0f78219db45d3bee0676a22695ec103", "url": "https://api.github.com/repos/rust-lang/rust/commits/50a90975c0f78219db45d3bee0676a22695ec103", "html_url": "https://github.com/rust-lang/rust/commit/50a90975c0f78219db45d3bee0676a22695ec103"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "6d876784be65368fcff190fd872d8ff9fb673f53", "filename": "compiler/rustc_macros/src/query.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/e67f9d3105ff462d16277cd9a035522117723937/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e67f9d3105ff462d16277cd9a035522117723937/compiler%2Frustc_macros%2Fsrc%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fquery.rs?ref=e67f9d3105ff462d16277cd9a035522117723937", "patch": "@@ -5,8 +5,8 @@ use syn::parse::{Parse, ParseStream, Result};\n use syn::punctuated::Punctuated;\n use syn::spanned::Spanned;\n use syn::{\n-    braced, parenthesized, parse_macro_input, AttrStyle, Attribute, Block, Error, Expr, Ident,\n-    ReturnType, Token, Type,\n+    braced, parenthesized, parse_macro_input, parse_quote, AttrStyle, Attribute, Block, Error,\n+    Expr, Ident, ReturnType, Token, Type,\n };\n \n mod kw {\n@@ -272,6 +272,40 @@ fn process_modifiers(query: &mut Query) -> QueryModifiers {\n                 if desc.is_some() {\n                     panic!(\"duplicate modifier `desc` for query `{}`\", query.name);\n                 }\n+                // If there are no doc-comments, give at least some idea of what\n+                // it does by showing the query description.\n+                if query.doc_comments.is_empty() {\n+                    use ::syn::*;\n+                    let mut list = list.iter();\n+                    let format_str: String = match list.next() {\n+                        Some(&Expr::Lit(ExprLit { lit: Lit::Str(ref lit_str), .. })) => {\n+                            lit_str.value().replace(\"`{}`\", \"{}\") // We add them later anyways for consistency\n+                        }\n+                        _ => panic!(\"Expected a string literal\"),\n+                    };\n+                    let mut fmt_fragments = format_str.split(\"{}\");\n+                    let mut doc_string = fmt_fragments.next().unwrap().to_string();\n+                    list.map(::quote::ToTokens::to_token_stream).zip(fmt_fragments).for_each(\n+                        |(tts, next_fmt_fragment)| {\n+                            use ::core::fmt::Write;\n+                            write!(\n+                                &mut doc_string,\n+                                \" `{}` {}\",\n+                                tts.to_string().replace(\" . \", \".\"),\n+                                next_fmt_fragment,\n+                            )\n+                            .unwrap();\n+                        },\n+                    );\n+                    let doc_string = format!(\n+                        \"[query description - consider adding a doc-comment!] {}\",\n+                        doc_string\n+                    );\n+                    let comment = parse_quote! {\n+                        #[doc = #doc_string]\n+                    };\n+                    query.doc_comments.push(comment);\n+                }\n                 desc = Some((tcx, list));\n             }\n             QueryModifier::FatalCycle => {"}]}