{"sha": "69a6e4c80c9efa5c611e357f56a4d8cbd9d81e6b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5YTZlNGM4MGM5ZWZhNWM2MTFlMzU3ZjU2YTRkOGNiZDlkODFlNmI=", "commit": {"author": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-02-27T20:29:19Z"}, "committer": {"name": "Chetan Khilosiya", "email": "chetan.khilosiya@gmail.com", "date": "2021-03-06T19:19:03Z"}, "message": "7708: Format code through rust-analyzer formatter.", "tree": {"sha": "b17c40425ad4363d108235db18a5f5f09c88d97c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b17c40425ad4363d108235db18a5f5f09c88d97c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69a6e4c80c9efa5c611e357f56a4d8cbd9d81e6b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69a6e4c80c9efa5c611e357f56a4d8cbd9d81e6b", "html_url": "https://github.com/rust-lang/rust/commit/69a6e4c80c9efa5c611e357f56a4d8cbd9d81e6b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69a6e4c80c9efa5c611e357f56a4d8cbd9d81e6b/comments", "author": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chetankhilosiya", "id": 1639535, "node_id": "MDQ6VXNlcjE2Mzk1MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/1639535?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chetankhilosiya", "html_url": "https://github.com/chetankhilosiya", "followers_url": "https://api.github.com/users/chetankhilosiya/followers", "following_url": "https://api.github.com/users/chetankhilosiya/following{/other_user}", "gists_url": "https://api.github.com/users/chetankhilosiya/gists{/gist_id}", "starred_url": "https://api.github.com/users/chetankhilosiya/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chetankhilosiya/subscriptions", "organizations_url": "https://api.github.com/users/chetankhilosiya/orgs", "repos_url": "https://api.github.com/users/chetankhilosiya/repos", "events_url": "https://api.github.com/users/chetankhilosiya/events{/privacy}", "received_events_url": "https://api.github.com/users/chetankhilosiya/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cb3f4d43d9646deadf27da54e0d2a204685ed665", "url": "https://api.github.com/repos/rust-lang/rust/commits/cb3f4d43d9646deadf27da54e0d2a204685ed665", "html_url": "https://github.com/rust-lang/rust/commit/cb3f4d43d9646deadf27da54e0d2a204685ed665"}], "stats": {"total": 79, "additions": 44, "deletions": 35}, "files": [{"sha": "e7f4591ac020d1d88e106410f691d15c70028fb7", "filename": "crates/ide_assists/src/handlers/generate_default_from_new.rs", "status": "modified", "additions": 44, "deletions": 35, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/69a6e4c80c9efa5c611e357f56a4d8cbd9d81e6b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69a6e4c80c9efa5c611e357f56a4d8cbd9d81e6b/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_default_from_new.rs?ref=69a6e4c80c9efa5c611e357f56a4d8cbd9d81e6b", "patch": "@@ -1,5 +1,11 @@\n-use crate::{AssistId, assist_context::{AssistContext, Assists}};\n-use syntax::{AstNode, SyntaxKind, SyntaxNode, SyntaxText, ast::{self, NameOwner}};\n+use crate::{\n+    assist_context::{AssistContext, Assists},\n+    AssistId,\n+};\n+use syntax::{\n+    ast::{self, NameOwner},\n+    AstNode, SyntaxKind, SyntaxNode, SyntaxText,\n+};\n use test_utils::mark;\n \n // Assist: generate_default_from_new\n@@ -51,7 +57,6 @@ pub(crate) fn generate_default_from_new(acc: &mut Assists, ctx: &AssistContext)\n \n     let default_fn_syntax = default_fn_node_for_new(struct_name);\n \n-\n     acc.add(\n         AssistId(\"generate_default_from_new\", crate::AssistKind::Generate),\n         \"Generate a Default impl from a new fn\",\n@@ -72,14 +77,15 @@ fn scope_for_fn_insertion_node(node: &SyntaxNode) -> Option<SyntaxNode> {\n fn default_fn_node_for_new(struct_name: SyntaxText) -> String {\n     // TODO: Update the implementation to consider the code indentation.\n     format!(\n-    r#\"\n+        r#\"\n \n impl Default for {} {{\n     fn default() -> Self {{\n         Self::new()\n     }}\n-}}\"#\n-    ,struct_name)\n+}}\"#,\n+        struct_name\n+    )\n }\n \n #[cfg(test)]\n@@ -157,24 +163,26 @@ impl Default for Test {\n     #[test]\n     fn new_function_with_parameters() {\n         mark::check!(new_function_with_parameters);\n-        check_assist_not_applicable(generate_default_from_new,\n-        r#\"\n+        check_assist_not_applicable(\n+            generate_default_from_new,\n+            r#\"\n struct Example { _inner: () }\n \n impl Example {\n     pub fn $0new(value: ()) -> Self {\n         Self { _inner: value }\n     }\n }\n-\"#\n+\"#,\n         );\n     }\n \n     #[test]\n     fn other_function_than_new() {\n         mark::check!(other_function_than_new);\n-        check_assist_not_applicable(generate_default_from_new,\n-        r#\"\n+        check_assist_not_applicable(\n+            generate_default_from_new,\n+            r#\"\n struct Example { _inner: () }\n \n impl Exmaple {\n@@ -183,39 +191,40 @@ impl Exmaple {\n     }\n }\n \n-\"#\n+\"#,\n         );\n     }\n \n-//     #[test]\n-//     fn default_block_is_already_present() {\n-//         check_assist_not_applicable(generate_default_from_new,\n-//         r#\"\n-// struct Example { _inner: () }\n-\n-// impl Exmaple {\n-//     pub fn n$0ew() -> Self {\n-//         Self { _inner: () }\n-//     }\n-// }\n-\n-// impl Default for Example {\n-//     fn default() -> Self {\n-//         Self::new()\n-//     }\n-// }\n-// \"#,\n-//         );\n-//     }\n+    //     #[test]\n+    //     fn default_block_is_already_present() {\n+    //         check_assist_not_applicable(generate_default_from_new,\n+    //         r#\"\n+    // struct Example { _inner: () }\n+\n+    // impl Exmaple {\n+    //     pub fn n$0ew() -> Self {\n+    //         Self { _inner: () }\n+    //     }\n+    // }\n+\n+    // impl Default for Example {\n+    //     fn default() -> Self {\n+    //         Self::new()\n+    //     }\n+    // }\n+    // \"#,\n+    //         );\n+    //     }\n \n     #[test]\n     fn standalone_new_function() {\n-        check_assist_not_applicable(generate_default_from_new,\n-        r#\"\n+        check_assist_not_applicable(\n+            generate_default_from_new,\n+            r#\"\n fn n$0ew() -> u32 {\n     0\n }\n-\"#\n+\"#,\n         );\n     }\n }"}]}