{"sha": "cd1a46d644791c79433db934ad4e6131c577efcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNkMWE0NmQ2NDQ3OTFjNzk0MzNkYjkzNGFkNGU2MTMxYzU3N2VmY2M=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-03T03:18:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-03T03:18:28Z"}, "message": "Auto merge of #73882 - nnethercote:avoid-unwrap_or_else-in-allocate_in, r=Amanieu\n\nAvoid `unwrap_or_else` in `RawVec::allocate_in`.\n\nThis reduces the amount of LLVM IR generated by up to 1 or 2%.\n\nr? @Amanieu", "tree": {"sha": "dbdebdd59f9a08bca0372d68b2da8fb5f6539ebf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbdebdd59f9a08bca0372d68b2da8fb5f6539ebf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cd1a46d644791c79433db934ad4e6131c577efcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cd1a46d644791c79433db934ad4e6131c577efcc", "html_url": "https://github.com/rust-lang/rust/commit/cd1a46d644791c79433db934ad4e6131c577efcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cd1a46d644791c79433db934ad4e6131c577efcc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f4abc16e1b2cb035eee6a5079ce45ce924c1f33", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f4abc16e1b2cb035eee6a5079ce45ce924c1f33", "html_url": "https://github.com/rust-lang/rust/commit/5f4abc16e1b2cb035eee6a5079ce45ce924c1f33"}, {"sha": "3f79d2f33e8b69812c9b981ff4adea0a1e7b9cb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f79d2f33e8b69812c9b981ff4adea0a1e7b9cb8", "html_url": "https://github.com/rust-lang/rust/commit/3f79d2f33e8b69812c9b981ff4adea0a1e7b9cb8"}], "stats": {"total": 17, "additions": 14, "deletions": 3}, "files": [{"sha": "ed81ce71ddfac76a3614cbf04dc47f39fefa5e94", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/cd1a46d644791c79433db934ad4e6131c577efcc/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cd1a46d644791c79433db934ad4e6131c577efcc/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=cd1a46d644791c79433db934ad4e6131c577efcc", "patch": "@@ -170,10 +170,21 @@ impl<T, A: AllocRef> RawVec<T, A> {\n         if mem::size_of::<T>() == 0 {\n             Self::new_in(alloc)\n         } else {\n-            let layout = Layout::array::<T>(capacity).unwrap_or_else(|_| capacity_overflow());\n-            alloc_guard(layout.size()).unwrap_or_else(|_| capacity_overflow());\n+            // We avoid `unwrap_or_else` here because it bloats the amount of\n+            // LLVM IR generated.\n+            let layout = match Layout::array::<T>(capacity) {\n+                Ok(layout) => layout,\n+                Err(_) => capacity_overflow(),\n+            };\n+            match alloc_guard(layout.size()) {\n+                Ok(_) => {}\n+                Err(_) => capacity_overflow(),\n+            }\n+            let memory = match alloc.alloc(layout, init) {\n+                Ok(memory) => memory,\n+                Err(_) => handle_alloc_error(layout),\n+            };\n \n-            let memory = alloc.alloc(layout, init).unwrap_or_else(|_| handle_alloc_error(layout));\n             Self {\n                 ptr: unsafe { Unique::new_unchecked(memory.ptr.cast().as_ptr()) },\n                 cap: Self::capacity_from_bytes(memory.size),"}]}