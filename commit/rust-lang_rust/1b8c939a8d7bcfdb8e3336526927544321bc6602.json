{"sha": "1b8c939a8d7bcfdb8e3336526927544321bc6602", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiOGM5MzlhOGQ3YmNmZGI4ZTMzMzY1MjY5Mjc1NDQzMjFiYzY2MDI=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-09-25T17:42:29Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-09-25T17:42:29Z"}, "message": "Rollup merge of #76973 - lzutao:unstably-const-assume, r=oli-obk\n\nUnstably allow assume intrinsic in const contexts\n\nNot sure much about this usage because there are concerns\nabout [blocking  optimization][1] and [slowing down LLVM][2] when using `assme` intrinsic\nin inline functions.\nBut since Oli suggested in https://github.com/rust-lang/rust/issues/76960#issuecomment-695772221,\nhere we are.\n\n[1]: https://github.com/rust-lang/rust/pull/54995#issuecomment-429302709\n[2]: https://github.com/rust-lang/rust/issues/49572#issuecomment-589615423", "tree": {"sha": "7f623843364f88a6d1cc2f89c69ff5cd31832b93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f623843364f88a6d1cc2f89c69ff5cd31832b93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b8c939a8d7bcfdb8e3336526927544321bc6602", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfbiwGCRBK7hj4Ov3rIwAAdHIIAGXMtZK2Vj6QLUqygxntPQwD\nfGMbiXmukrsPo2PicZ3Jt1HVBvvw4qlZr+3K65amwlh/Jc9aVbYUaf2K2IZsG3Mi\nrBdihLXtNrjIdxJ/z3kFlKiZlYAL42BoalzCbv77nIOT7XI0AOC9zjiVn+RBXjQV\ndCIbOl3TIM5Cpp925mTzMOEzuAhEAFUAsBLRb/GHVRp139mkptX2KjzhAztdyC/K\nnZf/OqyEooUgY2rz8+P9LHID6yvQsif6jsmOltzVCJn7HW+BnVmt1ZXCSsVMbZvr\nsYvjKAbcTbWhgvidxzHtrOdDFzHS1mWwX8RH1oNIDS4iK+qaYQzVpbb/nzjPH8A=\n=r3gp\n-----END PGP SIGNATURE-----\n", "payload": "tree 7f623843364f88a6d1cc2f89c69ff5cd31832b93\nparent a835af174cbfb2e480365c948071fc71fa319590\nparent 382d7243a70f7b9fd9330334a12f76985067ef06\nauthor Jonas Schievink <jonasschievink@gmail.com> 1601055749 +0200\ncommitter GitHub <noreply@github.com> 1601055749 +0200\n\nRollup merge of #76973 - lzutao:unstably-const-assume, r=oli-obk\n\nUnstably allow assume intrinsic in const contexts\n\nNot sure much about this usage because there are concerns\nabout [blocking  optimization][1] and [slowing down LLVM][2] when using `assme` intrinsic\nin inline functions.\nBut since Oli suggested in https://github.com/rust-lang/rust/issues/76960#issuecomment-695772221,\nhere we are.\n\n[1]: https://github.com/rust-lang/rust/pull/54995#issuecomment-429302709\n[2]: https://github.com/rust-lang/rust/issues/49572#issuecomment-589615423\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b8c939a8d7bcfdb8e3336526927544321bc6602", "html_url": "https://github.com/rust-lang/rust/commit/1b8c939a8d7bcfdb8e3336526927544321bc6602", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b8c939a8d7bcfdb8e3336526927544321bc6602/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a835af174cbfb2e480365c948071fc71fa319590", "url": "https://api.github.com/repos/rust-lang/rust/commits/a835af174cbfb2e480365c948071fc71fa319590", "html_url": "https://github.com/rust-lang/rust/commit/a835af174cbfb2e480365c948071fc71fa319590"}, {"sha": "382d7243a70f7b9fd9330334a12f76985067ef06", "url": "https://api.github.com/repos/rust-lang/rust/commits/382d7243a70f7b9fd9330334a12f76985067ef06", "html_url": "https://github.com/rust-lang/rust/commit/382d7243a70f7b9fd9330334a12f76985067ef06"}], "stats": {"total": 54, "additions": 39, "deletions": 15}, "files": [{"sha": "ccd294d92b2f473f8036f2a0f595ec04c2e400a3", "filename": "compiler/rustc_codegen_ssa/src/traits/intrinsic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b8c939a8d7bcfdb8e3336526927544321bc6602/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8c939a8d7bcfdb8e3336526927544321bc6602/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ftraits%2Fintrinsic.rs?ref=1b8c939a8d7bcfdb8e3336526927544321bc6602", "patch": "@@ -5,9 +5,9 @@ use rustc_span::Span;\n use rustc_target::abi::call::FnAbi;\n \n pub trait IntrinsicCallMethods<'tcx>: BackendTypes {\n-    /// Remember to add all intrinsics here, in librustc_typeck/check/mod.rs,\n-    /// and in libcore/intrinsics.rs; if you need access to any llvm intrinsics,\n-    /// add them to librustc_codegen_llvm/context.rs\n+    /// Remember to add all intrinsics here, in `compiler/rustc_typeck/src/check/mod.rs`,\n+    /// and in `library/core/src/intrinsics.rs`; if you need access to any LLVM intrinsics,\n+    /// add them to `compiler/rustc_codegen_llvm/src/context.rs`.\n     fn codegen_intrinsic_call(\n         &mut self,\n         instance: ty::Instance<'tcx>,"}, {"sha": "496174b28efac4cd65257d1b09d01fad33a53d50", "filename": "compiler/rustc_error_codes/src/error_codes/E0092.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b8c939a8d7bcfdb8e3336526927544321bc6602/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0092.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b8c939a8d7bcfdb8e3336526927544321bc6602/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0092.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0092.md?ref=1b8c939a8d7bcfdb8e3336526927544321bc6602", "patch": "@@ -12,8 +12,8 @@ extern \"rust-intrinsic\" {\n ```\n \n Please check you didn't make a mistake in the function's name. All intrinsic\n-functions are defined in `librustc_codegen_llvm/intrinsic.rs` and in\n-`libcore/intrinsics.rs` in the Rust source code. Example:\n+functions are defined in `compiler/rustc_codegen_llvm/src/intrinsic.rs` and in\n+`library/core/src/intrinsics.rs` in the Rust source code. Example:\n \n ```\n #![feature(intrinsics)]"}, {"sha": "6d58e50ec8813d515f80c6925995c75890e18743", "filename": "compiler/rustc_error_codes/src/error_codes/E0093.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b8c939a8d7bcfdb8e3336526927544321bc6602/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0093.md", "raw_url": "https://github.com/rust-lang/rust/raw/1b8c939a8d7bcfdb8e3336526927544321bc6602/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0093.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0093.md?ref=1b8c939a8d7bcfdb8e3336526927544321bc6602", "patch": "@@ -17,8 +17,8 @@ fn main() {\n ```\n \n Please check you didn't make a mistake in the function's name. All intrinsic\n-functions are defined in `librustc_codegen_llvm/intrinsic.rs` and in\n-`libcore/intrinsics.rs` in the Rust source code. Example:\n+functions are defined in `compiler/rustc_codegen_llvm/src/intrinsic.rs` and in\n+`library/core/src/intrinsics.rs` in the Rust source code. Example:\n \n ```\n #![feature(intrinsics)]"}, {"sha": "d3b6d706337edb90e445a67486b06fdef60f2453", "filename": "compiler/rustc_mir/src/interpret/intrinsics.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1b8c939a8d7bcfdb8e3336526927544321bc6602/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8c939a8d7bcfdb8e3336526927544321bc6602/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=1b8c939a8d7bcfdb8e3336526927544321bc6602", "patch": "@@ -435,6 +435,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // These just return their argument\n                 self.copy_op(args[0], dest)?;\n             }\n+            sym::assume => {\n+                let cond = self.read_scalar(args[0])?.check_init()?.to_bool()?;\n+                if !cond {\n+                    throw_ub_format!(\"`assume` intrinsic called with `false`\");\n+                }\n+            }\n             _ => return Ok(false),\n         }\n "}, {"sha": "9f200ca62b8c606c6ae2d62980c8b41ffe985506", "filename": "compiler/rustc_mir/src/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b8c939a8d7bcfdb8e3336526927544321bc6602/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8c939a8d7bcfdb8e3336526927544321bc6602/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fterminator.rs?ref=1b8c939a8d7bcfdb8e3336526927544321bc6602", "patch": "@@ -390,9 +390,9 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             ty::InstanceDef::Virtual(_, idx) => {\n                 let mut args = args.to_vec();\n                 // We have to implement all \"object safe receivers\".  Currently we\n-                // support built-in pointers (&, &mut, Box) as well as unsized-self.  We do\n+                // support built-in pointers `(&, &mut, Box)` as well as unsized-self.  We do\n                 // not yet support custom self types.\n-                // Also see librustc_codegen_llvm/abi.rs and librustc_codegen_llvm/mir/block.rs.\n+                // Also see `compiler/rustc_codegen_llvm/src/abi.rs` and `compiler/rustc_codegen_ssa/src/mir/block.rs`.\n                 let receiver_place = match args[0].layout.ty.builtin_deref(true) {\n                     Some(_) => {\n                         // Built-in pointer."}, {"sha": "2ee867c2dd648cace4e3dd1015a29ffce6d44fee", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1b8c939a8d7bcfdb8e3336526927544321bc6602/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8c939a8d7bcfdb8e3336526927544321bc6602/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=1b8c939a8d7bcfdb8e3336526927544321bc6602", "patch": "@@ -106,8 +106,8 @@ pub fn intrinsic_operation_unsafety(intrinsic: Symbol) -> hir::Unsafety {\n     }\n }\n \n-/// Remember to add all intrinsics here, in librustc_codegen_llvm/intrinsic.rs,\n-/// and in libcore/intrinsics.rs\n+/// Remember to add all intrinsics here, in `compiler/rustc_codegen_llvm/src/intrinsic.rs`,\n+/// and in `library/core/src/intrinsics.rs`.\n pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n     let param = |n| tcx.mk_ty_param(n, Symbol::intern(&format!(\"P{}\", n)));\n     let def_id = tcx.hir().local_def_id(it.hir_id).to_def_id();"}, {"sha": "de6b9800a6ce4b7de3a5bdf627d316a24e6cfa4c", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1b8c939a8d7bcfdb8e3336526927544321bc6602/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8c939a8d7bcfdb8e3336526927544321bc6602/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=1b8c939a8d7bcfdb8e3336526927544321bc6602", "patch": "@@ -1,7 +1,7 @@\n //! Compiler intrinsics.\n //!\n-//! The corresponding definitions are in `librustc_codegen_llvm/intrinsic.rs`.\n-//! The corresponding const implementations are in `librustc_mir/interpret/intrinsics.rs`\n+//! The corresponding definitions are in `compiler/rustc_codegen_llvm/src/intrinsic.rs`.\n+//! The corresponding const implementations are in `compiler/rustc_mir/src/interpret/intrinsics.rs`\n //!\n //! # Const intrinsics\n //!\n@@ -10,7 +10,7 @@\n //!\n //! In order to make an intrinsic usable at compile-time, one needs to copy the implementation\n //! from https://github.com/rust-lang/miri/blob/master/src/shims/intrinsics.rs to\n-//! `librustc_mir/interpret/intrinsics.rs` and add a\n+//! `compiler/rustc_mir/src/interpret/intrinsics.rs` and add a\n //! `#[rustc_const_unstable(feature = \"foo\", issue = \"01234\")]` to the intrinsic.\n //!\n //! If an intrinsic is supposed to be used from a `const fn` with a `rustc_const_stable` attribute,\n@@ -733,6 +733,7 @@ extern \"rust-intrinsic\" {\n     /// own, or if it does not enable any significant optimizations.\n     ///\n     /// This intrinsic does not have a stable counterpart.\n+    #[rustc_const_unstable(feature = \"const_assume\", issue = \"76972\")]\n     pub fn assume(b: bool);\n \n     /// Hints to the compiler that branch condition is likely to be true."}, {"sha": "de163a60c98f42686e4a1277b234c55befb5698e", "filename": "library/core/tests/intrinsics.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1b8c939a8d7bcfdb8e3336526927544321bc6602/library%2Fcore%2Ftests%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8c939a8d7bcfdb8e3336526927544321bc6602/library%2Fcore%2Ftests%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fintrinsics.rs?ref=1b8c939a8d7bcfdb8e3336526927544321bc6602", "patch": "@@ -1,4 +1,5 @@\n use core::any::TypeId;\n+use core::intrinsics::assume;\n \n #[test]\n fn test_typeid_sized_types() {\n@@ -20,3 +21,17 @@ fn test_typeid_unsized_types() {\n     assert_eq!(TypeId::of::<Y>(), TypeId::of::<Y>());\n     assert!(TypeId::of::<X>() != TypeId::of::<Y>());\n }\n+\n+// Check that `const_assume` feature allow `assume` intrinsic\n+// to be used in const contexts.\n+#[test]\n+fn test_assume_can_be_in_const_contexts() {\n+    const unsafe fn foo(x: usize, y: usize) -> usize {\n+        // SAFETY: the entire function is not safe,\n+        // but it is just an example not used elsewhere.\n+        unsafe { assume(y != 0) };\n+        x / y\n+    }\n+    let rs = unsafe { foo(42, 97) };\n+    assert_eq!(rs, 0);\n+}"}, {"sha": "8d86349244b0908f2a96d3e3c061f0ae0568ccde", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b8c939a8d7bcfdb8e3336526927544321bc6602/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8c939a8d7bcfdb8e3336526927544321bc6602/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=1b8c939a8d7bcfdb8e3336526927544321bc6602", "patch": "@@ -8,6 +8,8 @@\n #![feature(bound_cloned)]\n #![feature(box_syntax)]\n #![feature(cell_update)]\n+#![feature(const_assume)]\n+#![feature(core_intrinsics)]\n #![feature(core_private_bignum)]\n #![feature(core_private_diy_float)]\n #![feature(debug_non_exhaustive)]"}, {"sha": "5597bbb93d236fc711c0793e54c051127c191b25", "filename": "library/panic_unwind/src/seh.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1b8c939a8d7bcfdb8e3336526927544321bc6602/library%2Fpanic_unwind%2Fsrc%2Fseh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b8c939a8d7bcfdb8e3336526927544321bc6602/library%2Fpanic_unwind%2Fsrc%2Fseh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fseh.rs?ref=1b8c939a8d7bcfdb8e3336526927544321bc6602", "patch": "@@ -175,7 +175,7 @@ pub struct _TypeDescriptor {\n // to be able to catch Rust panics by simply declaring a `struct rust_panic`.\n //\n // When modifying, make sure that the type name string exactly matches\n-// the one used in src/librustc_codegen_llvm/intrinsic.rs.\n+// the one used in `compiler/rustc_codegen_llvm/src/intrinsic.rs`.\n const TYPE_NAME: [u8; 11] = *b\"rust_panic\\0\";\n \n static mut THROW_INFO: _ThrowInfo = _ThrowInfo {"}]}