{"sha": "996a42557e2816cd577120f464c52b865ef8a924", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk5NmE0MjU1N2UyODE2Y2Q1NzcxMjBmNDY0YzUyYjg2NWVmOGE5MjQ=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-02T09:01:22Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2018-11-05T08:40:05Z"}, "message": "the visitor can already load the value for visit_primitive", "tree": {"sha": "0851fc311c1b222b428be1d4192c60a4192bf920", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0851fc311c1b222b428be1d4192c60a4192bf920"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/996a42557e2816cd577120f464c52b865ef8a924", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/996a42557e2816cd577120f464c52b865ef8a924", "html_url": "https://github.com/rust-lang/rust/commit/996a42557e2816cd577120f464c52b865ef8a924", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/996a42557e2816cd577120f464c52b865ef8a924/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2677211f65758f19d7051d6f24a34ce0ec44119", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2677211f65758f19d7051d6f24a34ce0ec44119", "html_url": "https://github.com/rust-lang/rust/commit/c2677211f65758f19d7051d6f24a34ce0ec44119"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "5ba15f4bb99af3a557f63210635b776dac8c71a7", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/996a42557e2816cd577120f464c52b865ef8a924/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996a42557e2816cd577120f464c52b865ef8a924/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=996a42557e2816cd577120f464c52b865ef8a924", "patch": "@@ -20,7 +20,7 @@ use rustc::mir::interpret::{\n };\n \n use super::{\n-    OpTy, MPlaceTy, Machine, EvalContext, ValueVisitor\n+    OpTy, MPlaceTy, ImmTy, Machine, EvalContext, ValueVisitor\n };\n \n macro_rules! validation_failure {\n@@ -213,24 +213,25 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n     fn visit_value(&mut self, op: OpTy<'tcx, M::PointerTag>) -> EvalResult<'tcx>\n     {\n         trace!(\"visit_value: {:?}, {:?}\", *op, op.layout);\n-        // Translate enum discriminant errors to something nicer.\n+        // Translate some possible errors to something nicer.\n         match self.walk_value(op) {\n             Ok(()) => Ok(()),\n             Err(err) => match err.kind {\n                 EvalErrorKind::InvalidDiscriminant(val) =>\n                     validation_failure!(\n                         val, self.path, \"a valid enum discriminant\"\n                     ),\n+                EvalErrorKind::ReadPointerAsBytes =>\n+                    validation_failure!(\n+                        \"a pointer\", self.path, \"plain bytes\"\n+                    ),\n                 _ => Err(err),\n             }\n         }\n     }\n \n-    fn visit_primitive(&mut self, op: OpTy<'tcx, M::PointerTag>)\n-        -> EvalResult<'tcx>\n+    fn visit_primitive(&mut self, value: ImmTy<'tcx, M::PointerTag>) -> EvalResult<'tcx>\n     {\n-        let value = try_validation!(self.ecx.read_immediate(op),\n-            \"uninitialized or unrepresentable data\", self.path);\n         // Go over all the primitive types\n         let ty = value.layout.ty;\n         match ty.sty {\n@@ -379,8 +380,7 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n         Ok(())\n     }\n \n-    fn visit_uninhabited(&mut self, _op: OpTy<'tcx, M::PointerTag>)\n-        -> EvalResult<'tcx>\n+    fn visit_uninhabited(&mut self) -> EvalResult<'tcx>\n     {\n         validation_failure!(\"a value of an uninhabited type\", self.path)\n     }\n@@ -390,8 +390,7 @@ impl<'rt, 'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>>\n         op: OpTy<'tcx, M::PointerTag>,\n         layout: &layout::Scalar,\n     ) -> EvalResult<'tcx> {\n-        let value = try_validation!(self.ecx.read_scalar(op),\n-            \"uninitialized or unrepresentable data\", self.path);\n+        let value = self.ecx.read_scalar(op)?;\n         // Determine the allowed range\n         let (lo, hi) = layout.valid_range.clone().into_inner();\n         // `max_hi` is as big as the size fits"}, {"sha": "3211601400a701d6accddb20bf04639ea7285564", "filename": "src/librustc_mir/interpret/visitor.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/996a42557e2816cd577120f464c52b865ef8a924/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/996a42557e2816cd577120f464c52b865ef8a924/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvisitor.rs?ref=996a42557e2816cd577120f464c52b865ef8a924", "patch": "@@ -8,7 +8,7 @@ use rustc::mir::interpret::{\n };\n \n use super::{\n-    Machine, EvalContext, MPlaceTy, PlaceTy, OpTy,\n+    Machine, EvalContext, MPlaceTy, PlaceTy, OpTy, ImmTy,\n };\n \n // A thing that we can project into, and that has a layout.\n@@ -205,17 +205,19 @@ pub trait ValueVisitor<'a, 'mir, 'tcx: 'mir+'a, M: Machine<'a, 'mir, 'tcx>>: Siz\n     /// Called whenever we reach a value with uninhabited layout.\n     /// Recursing to fields will continue after this!\n     #[inline(always)]\n-    fn visit_uninhabited(&mut self, _v: Self::V) -> EvalResult<'tcx>\n+    fn visit_uninhabited(&mut self) -> EvalResult<'tcx>\n     { Ok(()) }\n     /// Called whenever we reach a value with scalar layout.\n+    /// We do NOT provide a `ScalarMaybeUndef` here to avoid accessing memory\n+    /// if the visitor is not even interested in scalars.\n     /// Recursing to fields will continue after this!\n     #[inline(always)]\n     fn visit_scalar(&mut self, _v: Self::V, _layout: &layout::Scalar) -> EvalResult<'tcx>\n     { Ok(()) }\n     /// Called whenever we reach a value of primitive type.  There can be no recursion\n     /// below such a value.\n     #[inline(always)]\n-    fn visit_primitive(&mut self, _v: Self::V) -> EvalResult<'tcx>\n+    fn visit_primitive(&mut self, _val: ImmTy<'tcx, M::PointerTag>) -> EvalResult<'tcx>\n     { Ok(()) }\n \n     // Default recursors. Not meant to be overloaded.\n@@ -275,7 +277,7 @@ pub trait ValueVisitor<'a, 'mir, 'tcx: 'mir+'a, M: Machine<'a, 'mir, 'tcx>>: Siz\n         // MyNewtype and then the scalar in there).\n         match v.layout().abi {\n             layout::Abi::Uninhabited => {\n-                self.visit_uninhabited(v)?;\n+                self.visit_uninhabited()?;\n             }\n             layout::Abi::Scalar(ref layout) => {\n                 self.visit_scalar(v, layout)?;\n@@ -295,7 +297,9 @@ pub trait ValueVisitor<'a, 'mir, 'tcx: 'mir+'a, M: Machine<'a, 'mir, 'tcx>>: Siz\n             _ => v.layout().ty.builtin_deref(true).is_some(),\n         };\n         if primitive {\n-            return self.visit_primitive(v);\n+            let op = v.to_op(self.ecx())?;\n+            let val = self.ecx().read_immediate(op)?;\n+            return self.visit_primitive(val);\n         }\n \n         // Proceed into the fields."}, {"sha": "c3f5f4a26f55594cbc6b2545df8774de73d588ab", "filename": "src/test/ui/consts/const-eval/ub-ref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/996a42557e2816cd577120f464c52b865ef8a924/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/996a42557e2816cd577120f464c52b865ef8a924/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fub-ref.stderr?ref=996a42557e2816cd577120f464c52b865ef8a924", "patch": "@@ -26,7 +26,7 @@ error[E0080]: it is undefined behavior to use this value\n   --> $DIR/ub-ref.rs:25:1\n    |\n LL | const REF_AS_USIZE_SLICE: &[usize] = &[unsafe { mem::transmute(&0) }];\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ a raw memory access tried to access part of a pointer value as raw bytes\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a pointer at .<deref>, but expected plain bytes\n    |\n    = note: The rules on what exactly is undefined behavior aren't clear, so this check might be overzealous. Please open an issue on the rust compiler repository if you believe it should not be considered undefined behavior\n "}]}