{"sha": "9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNmFlNjU4NjU4YTQ4YzQ2ODZhMGYwOWJlNWNmNmEzZjQ1ZTBmYjU=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-24T19:53:32Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2012-09-25T00:29:32Z"}, "message": "Support visibility qualifiers in crate directives properly.", "tree": {"sha": "66b9456a3a34f387c8d09d64fd6ad5a1248c25b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66b9456a3a34f387c8d09d64fd6ad5a1248c25b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5", "html_url": "https://github.com/rust-lang/rust/commit/9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c675cd396d729ad7e427abd370489767a0db6ab6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c675cd396d729ad7e427abd370489767a0db6ab6", "html_url": "https://github.com/rust-lang/rust/commit/c675cd396d729ad7e427abd370489767a0db6ab6"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "75a2081bc14f6ba65b097b50a9126d5d4250144c", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5", "patch": "@@ -265,8 +265,8 @@ type crate_ =\n      config: crate_cfg};\n \n enum crate_directive_ {\n-    cdir_src_mod(ident, ~[attribute]),\n-    cdir_dir_mod(ident, ~[@crate_directive], ~[attribute]),\n+    cdir_src_mod(visibility, ident, ~[attribute]),\n+    cdir_dir_mod(visibility, ident, ~[@crate_directive], ~[attribute]),\n \n     // NB: cdir_view_item is *not* processed by the rest of the compiler, the\n     // attached view_items are sunk into the crate's module during parsing,"}, {"sha": "f8f481c8f66b76af57ded12fa0bd447f48b1bf2f", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5", "patch": "@@ -162,11 +162,12 @@ fn noop_fold_crate(c: crate_, fld: ast_fold) -> crate_ {\n fn noop_fold_crate_directive(cd: crate_directive_, fld: ast_fold) ->\n    crate_directive_ {\n     return match cd {\n-          cdir_src_mod(id, attrs) => {\n-            cdir_src_mod(fld.fold_ident(id), /* FIXME (#2543) */ copy attrs)\n+          cdir_src_mod(vis, id, attrs) => {\n+            cdir_src_mod(vis, fld.fold_ident(id),\n+                         /* FIXME (#2543) */ copy attrs)\n           }\n-          cdir_dir_mod(id, cds, attrs) => {\n-            cdir_dir_mod(fld.fold_ident(id),\n+          cdir_dir_mod(vis, id, cds, attrs) => {\n+            cdir_dir_mod(vis, fld.fold_ident(id),\n                          vec::map(cds, |x| fld.fold_crate_directive(*x)),\n                          /* FIXME (#2543) */ copy attrs)\n           }"}, {"sha": "7127e2747eb77c219678de45b31c15cface2750a", "filename": "src/libsyntax/parse/eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5/src%2Flibsyntax%2Fparse%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5/src%2Flibsyntax%2Fparse%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Feval.rs?ref=9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5", "patch": "@@ -85,7 +85,7 @@ fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: &Path,\n                         &view_items: ~[@ast::view_item],\n                         &items: ~[@ast::item]) {\n     match cdir.node {\n-      ast::cdir_src_mod(id, attrs) => {\n+      ast::cdir_src_mod(vis, id, attrs) => {\n         let file_path = Path(cdir_path_opt(\n             cx.sess.interner.get(id) + ~\".rs\", attrs));\n         let full_path = if file_path.is_absolute {\n@@ -103,13 +103,13 @@ fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: &Path,\n \n         let i = p0.mk_item(cdir.span.lo, cdir.span.hi,\n                            /* FIXME (#2543) */ copy id,\n-                           ast::item_mod(m0), ast::public, mod_attrs);\n+                           ast::item_mod(m0), vis, mod_attrs);\n         // Thread defids, chpos and byte_pos through the parsers\n         cx.sess.chpos = r0.chpos;\n         cx.sess.byte_pos = cx.sess.byte_pos + r0.pos;\n         vec::push(items, i);\n       }\n-      ast::cdir_dir_mod(id, cdirs, attrs) => {\n+      ast::cdir_dir_mod(vis, id, cdirs, attrs) => {\n         let path = Path(cdir_path_opt(*cx.sess.interner.get(id), attrs));\n         let full_path = if path.is_absolute {\n             copy path\n@@ -123,7 +123,7 @@ fn eval_crate_directive(cx: ctx, cdir: @ast::crate_directive, prefix: &Path,\n               attrs: vec::append(attrs, a0),\n               id: cx.sess.next_id,\n               node: ast::item_mod(m0),\n-              vis: ast::public,\n+              vis: vis,\n               span: cdir.span};\n         cx.sess.next_id += 1;\n         vec::push(items, i);"}, {"sha": "681d6296d4ea852a0d08773aea83f78245f5bc5a", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5", "patch": "@@ -3601,6 +3601,7 @@ impl parser {\n         let expect_mod = vec::len(outer_attrs) > 0u;\n \n         let lo = self.span.lo;\n+        let vis = self.parse_visibility();\n         if expect_mod || self.is_keyword(~\"mod\") {\n \n             self.expect_keyword(~\"mod\");\n@@ -3611,7 +3612,7 @@ impl parser {\n               token::SEMI => {\n                 let mut hi = self.span.hi;\n                 self.bump();\n-                return spanned(lo, hi, cdir_src_mod(id, outer_attrs));\n+                return spanned(lo, hi, cdir_src_mod(vis, id, outer_attrs));\n               }\n               // mod x = \"foo_dir\" { ...directives... }\n               token::LBRACE => {\n@@ -3624,7 +3625,7 @@ impl parser {\n                 let mut hi = self.span.hi;\n                 self.expect(token::RBRACE);\n                 return spanned(lo, hi,\n-                            cdir_dir_mod(id, cdirs, mod_attrs));\n+                            cdir_dir_mod(vis, id, cdirs, mod_attrs));\n               }\n               _ => self.unexpected()\n             }"}, {"sha": "de9caf48b63f4c317586f778b98af6c37fd8ec98", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=9c6ae658658a48c4686a0f09be5cf6a3f45e0fb5", "patch": "@@ -96,8 +96,8 @@ fn visit_crate<E>(c: crate, e: E, v: vt<E>) {\n \n fn visit_crate_directive<E>(cd: @crate_directive, e: E, v: vt<E>) {\n     match cd.node {\n-      cdir_src_mod(_, _) => (),\n-      cdir_dir_mod(_, cdirs, _) => for cdirs.each |cdir| {\n+      cdir_src_mod(_, _, _) => (),\n+      cdir_dir_mod(_, _, cdirs, _) => for cdirs.each |cdir| {\n         visit_crate_directive(*cdir, e, v);\n       },\n       cdir_view_item(vi) => v.visit_view_item(vi, e, v),"}]}