{"sha": "dbbb847bf033003c89e105e337419649dae5384c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiYmI4NDdiZjAzMzAwM2M4OWUxMDVlMzM3NDE5NjQ5ZGFlNTM4NGM=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-05T07:29:59Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2014-05-08T19:06:22Z"}, "message": "Handle fallout in bench tests", "tree": {"sha": "93567992305e011b92f4f21cc59316ff1e11df72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93567992305e011b92f4f21cc59316ff1e11df72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbbb847bf033003c89e105e337419649dae5384c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbbb847bf033003c89e105e337419649dae5384c", "html_url": "https://github.com/rust-lang/rust/commit/dbbb847bf033003c89e105e337419649dae5384c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbbb847bf033003c89e105e337419649dae5384c/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eab6bb2ece0427d2ec165e510f2abaa84b857900", "url": "https://api.github.com/repos/rust-lang/rust/commits/eab6bb2ece0427d2ec165e510f2abaa84b857900", "html_url": "https://github.com/rust-lang/rust/commit/eab6bb2ece0427d2ec165e510f2abaa84b857900"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "6a8a56b4f1f8a2a4ce036226ef5e37775b7bdc20", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=dbbb847bf033003c89e105e337419649dae5384c", "patch": "@@ -90,6 +90,7 @@ fn vector<M: MutableMap<uint, uint>>(map: &mut M, n_keys: uint, dist: &[uint]) {\n \n fn main() {\n     let args = os::args();\n+    let args = args.as_slice();\n     let n_keys = {\n         if args.len() == 2 {\n             from_str::<uint>(args[1]).unwrap()"}, {"sha": "b1181a3c17c5ad24d8a3666e45043236fbcf8229", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=dbbb847bf033003c89e105e337419649dae5384c", "patch": "@@ -155,6 +155,7 @@ fn empty_results() -> Results {\n \n fn main() {\n     let args = os::args();\n+    let args = args.as_slice();\n     let num_keys = {\n         if args.len() == 2 {\n             from_str::<uint>(args[1]).unwrap()"}, {"sha": "7e54198bd3961655e4313fbfe103b942fc55f8c4", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=dbbb847bf033003c89e105e337419649dae5384c", "patch": "@@ -24,7 +24,7 @@ use std::vec;\n use std::io::File;\n \n macro_rules! bench (\n-    ($argv:expr, $id:ident) => (maybe_run_test($argv, stringify!($id).to_owned(), $id))\n+    ($argv:expr, $id:ident) => (maybe_run_test($argv.as_slice(), stringify!($id).to_owned(), $id))\n )\n \n fn main() {"}, {"sha": "bbe6b6c23f0f97082a618803abc7d7a00887b997", "filename": "src/test/bench/rt-messaging-ping-pong.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-messaging-ping-pong.rs?ref=dbbb847bf033003c89e105e337419649dae5384c", "patch": "@@ -61,6 +61,7 @@ fn ping_pong_bench(n: uint, m: uint) {\n fn main() {\n \n     let args = os::args();\n+    let args = args.as_slice();\n     let n = if args.len() == 3 {\n         from_str::<uint>(args[1]).unwrap()\n     } else {"}, {"sha": "29cee668389f873d89d557508625e63f43b6d265", "filename": "src/test/bench/rt-parfib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Frt-parfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Frt-parfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-parfib.rs?ref=dbbb847bf033003c89e105e337419649dae5384c", "patch": "@@ -31,6 +31,7 @@ fn parfib(n: uint) -> uint {\n fn main() {\n \n     let args = os::args();\n+    let args = args.as_slice();\n     let n = if args.len() == 2 {\n         from_str::<uint>(args[1]).unwrap()\n     } else {"}, {"sha": "48d4a41c1a39aae1f9d7032ffc8d990bccd3a7f4", "filename": "src/test/bench/rt-spawn-rate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Frt-spawn-rate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Frt-spawn-rate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Frt-spawn-rate.rs?ref=dbbb847bf033003c89e105e337419649dae5384c", "patch": "@@ -28,6 +28,7 @@ fn start(argc: int, argv: **u8) -> int {\n fn main() {\n \n     let args = os::args();\n+    let args = args.as_slice();\n     let n = if args.len() == 2 {\n         from_str::<uint>(args[1]).unwrap()\n     } else {"}, {"sha": "8914c5b327ecc6f843699269ca576a4684a4e31c", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=dbbb847bf033003c89e105e337419649dae5384c", "patch": "@@ -40,6 +40,7 @@ fn bottom_up_tree<'r>(arena: &'r TypedArena<Tree<'r>>, item: int, depth: int)\n \n fn main() {\n     let args = std::os::args();\n+    let args = args.as_slice();\n     let n = if std::os::getenv(\"RUST_BENCH\").is_some() {\n         17\n     } else if args.len() <= 1u {"}, {"sha": "07e5b08c37ccb996ce33065e420968f728359b2b", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=dbbb847bf033003c89e105e337419649dae5384c", "patch": "@@ -194,7 +194,7 @@ fn main() {\n     let nn = if std::os::getenv(\"RUST_BENCH\").is_some() {\n         200000\n     } else {\n-        std::os::args().get(1).and_then(|arg| from_str(*arg)).unwrap_or(600)\n+        std::os::args().as_slice().get(1).and_then(|arg| from_str(*arg)).unwrap_or(600)\n     };\n \n     print_complements();"}, {"sha": "3525b90d3f681c2fddbefa8aefc5aed08cd847a2", "filename": "src/test/bench/shootout-fannkuch-redux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuch-redux.rs?ref=dbbb847bf033003c89e105e337419649dae5384c", "patch": "@@ -53,7 +53,7 @@ fn fannkuch(n: uint, i: uint) -> (int, int) {\n }\n \n fn main() {\n-    let n = std::os::args().get(1).and_then(|arg| from_str(*arg)).unwrap_or(2u);\n+    let n = std::os::args().as_slice().get(1).and_then(|arg| from_str(*arg)).unwrap_or(2u);\n \n     let (tx, rx) = channel();\n     for i in range(0, n) {"}, {"sha": "3f8d3275b64f9456c33312b2da515b2b2e0abc3a", "filename": "src/test/bench/shootout-fasta-redux.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta-redux.rs?ref=dbbb847bf033003c89e105e337419649dae5384c", "patch": "@@ -177,6 +177,7 @@ impl<'a, W: Writer> RandomFasta<'a, W> {\n \n fn main() {\n     let args = os::args();\n+    let args = args.as_slice();\n     let n = if args.len() > 1 {\n         from_str::<uint>(args[1]).unwrap()\n     } else {"}, {"sha": "c526ef54caff2277c9af923bca84ec485929ca07", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=dbbb847bf033003c89e105e337419649dae5384c", "patch": "@@ -74,6 +74,7 @@ fn make_fasta<W: Writer, I: Iterator<u8>>(\n \n fn run<W: Writer>(writer: &mut W) {\n     let args = os::args();\n+    let args = args.as_slice();\n     let n = if os::getenv(\"RUST_BENCH\").is_some() {\n         25000000\n     } else if args.len() <= 1u {"}, {"sha": "e2bcc55d139828ca5da5186c4f25b242ce27a17a", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=dbbb847bf033003c89e105e337419649dae5384c", "patch": "@@ -72,7 +72,7 @@ fn sort_and_fmt(mm: &HashMap<Vec<u8> , uint>, total: uint) -> ~str {\n \n // given a map, search for the frequency of a pattern\n fn find(mm: &HashMap<Vec<u8> , uint>, key: ~str) -> uint {\n-   let key = key.into_ascii().to_lower().into_str();\n+   let key = key.into_ascii().as_slice().to_lower().into_str();\n    match mm.find_equiv(&key.as_bytes()) {\n       option::None      => { return 0u; }\n       option::Some(&num) => { return num; }"}, {"sha": "ee715aecec4fcb9ff1a76ed6658dfdbf372b3bf9", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=dbbb847bf033003c89e105e337419649dae5384c", "patch": "@@ -65,6 +65,7 @@ fn mandelbrot<W: io::Writer>(w: uint, mut out: W) -> io::IoResult<()> {\n \n fn main() {\n     let args = std::os::args();\n+    let args = args.as_slice();\n     let res = if args.len() < 2 {\n         println!(\"Test mode: do not dump the image because it's not utf8, \\\n                   which interferes with the test runner.\");"}, {"sha": "cb46c542f5bc84c03af85f141d9877f5226b301c", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=dbbb847bf033003c89e105e337419649dae5384c", "patch": "@@ -190,7 +190,7 @@ fn to_utf8(raw_sol: &List<u64>) -> ~str {\n             }\n         }\n     }\n-    std::str::from_utf8_owned(sol.move_iter().collect()).unwrap()\n+    std::str::from_utf8(sol.as_slice()).unwrap().to_owned()\n }\n \n // Prints a solution in ~str form.\n@@ -270,6 +270,7 @@ fn search(\n \n fn main () {\n     let args = std::os::args();\n+    let args = args.as_slice();\n     let stop_after = if args.len() <= 1 {\n         2098\n     } else {"}, {"sha": "49356e6e6458ebaf9a4444910c449ca2c28b6b96", "filename": "src/test/bench/shootout-pidigits.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-pidigits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-pidigits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pidigits.rs?ref=dbbb847bf033003c89e105e337419649dae5384c", "patch": "@@ -88,6 +88,7 @@ fn pidigits(n: int) {\n \n fn main() {\n     let args = std::os::args();\n+    let args = args.as_slice();\n     let n = if args.len() < 2 {\n         512\n     } else {"}, {"sha": "70a0e7a957c6b0aa9aa68f5c425f7eed374e7e45", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=dbbb847bf033003c89e105e337419649dae5384c", "patch": "@@ -94,6 +94,7 @@ fn mult_AtAv(v: Arc<RWLock<Vec<f64>>>, out: Arc<RWLock<Vec<f64>>>,\n \n fn main() {\n     let args = os::args();\n+    let args = args.as_slice();\n     let n = if os::getenv(\"RUST_BENCH\").is_some() {\n         5500\n     } else if args.len() < 2 {"}, {"sha": "60485f40ba4e0f064e268b0fe8420082d8c2e151", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbbb847bf033003c89e105e337419649dae5384c/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=dbbb847bf033003c89e105e337419649dae5384c", "patch": "@@ -35,6 +35,7 @@ fn roundtrip(id: int, tx: Sender<int>, rx: Receiver<int>) {\n \n fn main() {\n     let args = std::os::args();\n+    let args = args.as_slice();\n     let token = if std::os::getenv(\"RUST_BENCH\").is_some() {\n         2000000\n     } else {"}]}