{"sha": "ae859c3f7be2fe63ebb96dc5cba3c635b81da65b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlODU5YzNmN2JlMmZlNjNlYmI5NmRjNWNiYTNjNjM1YjgxZGE2NWI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-16T17:54:52Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-09-17T15:33:47Z"}, "message": "add comment mentioning alternative approach", "tree": {"sha": "6a626e64c37c98c6fd4fca1bc5e75b511a2275c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a626e64c37c98c6fd4fca1bc5e75b511a2275c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ae859c3f7be2fe63ebb96dc5cba3c635b81da65b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ae859c3f7be2fe63ebb96dc5cba3c635b81da65b", "html_url": "https://github.com/rust-lang/rust/commit/ae859c3f7be2fe63ebb96dc5cba3c635b81da65b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ae859c3f7be2fe63ebb96dc5cba3c635b81da65b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db067f4a3e611002b3b2b9cea9b2b65a2edb7385", "url": "https://api.github.com/repos/rust-lang/rust/commits/db067f4a3e611002b3b2b9cea9b2b65a2edb7385", "html_url": "https://github.com/rust-lang/rust/commit/db067f4a3e611002b3b2b9cea9b2b65a2edb7385"}], "stats": {"total": 5, "additions": 5, "deletions": 0}, "files": [{"sha": "522570626d09426842b35f710952ca6b44055a5a", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ae859c3f7be2fe63ebb96dc5cba3c635b81da65b/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ae859c3f7be2fe63ebb96dc5cba3c635b81da65b/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=ae859c3f7be2fe63ebb96dc5cba3c635b81da65b", "patch": "@@ -397,6 +397,11 @@ fn phase_cargo_miri(mut args: env::Args) {\n     setup(subcommand);\n \n     // Invoke actual cargo for the job, but with different flags.\n+    // We re-use `cargo test` and `cargo run`, which makes target and binary handling very easy but\n+    // requires some extra work to make the build check-only (see all the `--emit` hacks below).\n+    // <https://github.com/rust-lang/miri/pull/1540#issuecomment-693553191> describes an alternative\n+    // approach that uses `cargo check`, making that part easier but target and binary handling\n+    // harder.\n     let miri_path = std::env::current_exe().expect(\"current executable path invalid\");\n     let cargo_cmd = match subcommand {\n         MiriCommand::Test => \"test\","}]}