{"sha": "49798c597f810fbce14959bdbcdae0b635a5bde9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5Nzk4YzU5N2Y4MTBmYmNlMTQ5NTliZGJjZGFlMGI2MzVhNWJkZTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-13T05:55:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-13T05:55:50Z"}, "message": "Auto merge of #24323 - rprichard:panic-line-type, r=alexcrichton\n\nThere are syntax extensions that call `std::rt::begin_unwind` passing it a `usize`.  I updated the syntax extension to instead pass `u32`, but for bootstrapping reasons, I needed to create a `#[cfg(stage0)]` version of `std::rt::begin_unwind` and therefore also `panic!`.", "tree": {"sha": "8ffc335bd4ce1c13b6d1ed59e3e0080bc43dd02a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ffc335bd4ce1c13b6d1ed59e3e0080bc43dd02a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49798c597f810fbce14959bdbcdae0b635a5bde9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49798c597f810fbce14959bdbcdae0b635a5bde9", "html_url": "https://github.com/rust-lang/rust/commit/49798c597f810fbce14959bdbcdae0b635a5bde9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49798c597f810fbce14959bdbcdae0b635a5bde9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0cf99c3e06e84d20d68da649c888d63c72f33971", "url": "https://api.github.com/repos/rust-lang/rust/commits/0cf99c3e06e84d20d68da649c888d63c72f33971", "html_url": "https://github.com/rust-lang/rust/commit/0cf99c3e06e84d20d68da649c888d63c72f33971"}, {"sha": "ef25b7d5389a68d50904a8b4f4785287fc7c6ac3", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef25b7d5389a68d50904a8b4f4785287fc7c6ac3", "html_url": "https://github.com/rust-lang/rust/commit/ef25b7d5389a68d50904a8b4f4785287fc7c6ac3"}], "stats": {"total": 86, "additions": 75, "deletions": 11}, "files": [{"sha": "164d3e49385e7934a4c3894147afde56d3e06e00", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49798c597f810fbce14959bdbcdae0b635a5bde9/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49798c597f810fbce14959bdbcdae0b635a5bde9/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=49798c597f810fbce14959bdbcdae0b635a5bde9", "patch": "@@ -38,7 +38,7 @@\n //!   provided by the [rlibc crate](https://crates.io/crates/rlibc).\n //!\n //! * `rust_begin_unwind` - This function takes three arguments, a\n-//!   `fmt::Arguments`, a `&str`, and a `usize`. These three arguments dictate\n+//!   `fmt::Arguments`, a `&str`, and a `u32`. These three arguments dictate\n //!   the panic message, the file at which panic was invoked, and the line.\n //!   It is up to consumers of this core library to define this panic\n //!   function; it is only required to never return."}, {"sha": "0b8a52329dce66ff63845c6526e298cffff4ffb4", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49798c597f810fbce14959bdbcdae0b635a5bde9/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49798c597f810fbce14959bdbcdae0b635a5bde9/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=49798c597f810fbce14959bdbcdae0b635a5bde9", "patch": "@@ -16,7 +16,7 @@\n //! interface for panicking is:\n //!\n //! ```ignore\n-//! fn panic_impl(fmt: fmt::Arguments, &(&'static str, usize)) -> !;\n+//! fn panic_impl(fmt: fmt::Arguments, &(&'static str, u32)) -> !;\n //! ```\n //!\n //! This definition allows for panicking with any general message, but it does not\n@@ -58,8 +58,8 @@ pub fn panic_fmt(fmt: fmt::Arguments, file_line: &(&'static str, u32)) -> ! {\n     #[allow(improper_ctypes)]\n     extern {\n         #[lang = \"panic_fmt\"]\n-        fn panic_impl(fmt: fmt::Arguments, file: &'static str, line: usize) -> !;\n+        fn panic_impl(fmt: fmt::Arguments, file: &'static str, line: u32) -> !;\n     }\n     let (file, line) = *file_line;\n-    unsafe { panic_impl(fmt, file, line as usize) }\n+    unsafe { panic_impl(fmt, file, line) }\n }"}, {"sha": "f3e99a8541aaa6348af6cf59b385ccd3796b61bd", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/49798c597f810fbce14959bdbcdae0b635a5bde9/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49798c597f810fbce14959bdbcdae0b635a5bde9/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=49798c597f810fbce14959bdbcdae0b635a5bde9", "patch": "@@ -38,6 +38,7 @@\n #[macro_export]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[allow_internal_unstable]\n+#[cfg(stage0)]\n macro_rules! panic {\n     () => ({\n         panic!(\"explicit panic\")\n@@ -55,7 +56,53 @@ macro_rules! panic {\n             // used inside a dead function. Just `#[allow(dead_code)]` is\n             // insufficient, since the user may have\n             // `#[forbid(dead_code)]` and which cannot be overridden.\n-            static _FILE_LINE: (&'static str, usize) = (file!(), line!() as usize);\n+            static _FILE_LINE: (&'static str, u32) = (file!(), line!());\n+            &_FILE_LINE\n+        })\n+    });\n+}\n+\n+/// The entry point for panic of Rust tasks.\n+///\n+/// This macro is used to inject panic into a Rust task, causing the task to\n+/// unwind and panic entirely. Each task's panic can be reaped as the\n+/// `Box<Any>` type, and the single-argument form of the `panic!` macro will be\n+/// the value which is transmitted.\n+///\n+/// The multi-argument form of this macro panics with a string and has the\n+/// `format!` syntax for building a string.\n+///\n+/// # Examples\n+///\n+/// ```should_panic\n+/// # #![allow(unreachable_code)]\n+/// panic!();\n+/// panic!(\"this is a terrible mistake!\");\n+/// panic!(4); // panic with the value of 4 to be collected elsewhere\n+/// panic!(\"this is a {} {message}\", \"fancy\", message = \"message\");\n+/// ```\n+#[macro_export]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow_internal_unstable]\n+#[cfg(not(stage0))]\n+macro_rules! panic {\n+    () => ({\n+        panic!(\"explicit panic\")\n+    });\n+    ($msg:expr) => ({\n+        $crate::rt::begin_unwind($msg, {\n+            // static requires less code at runtime, more constant data\n+            static _FILE_LINE: (&'static str, u32) = (file!(), line!());\n+            &_FILE_LINE\n+        })\n+    });\n+    ($fmt:expr, $($arg:tt)+) => ({\n+        $crate::rt::begin_unwind_fmt(format_args!($fmt, $($arg)+), {\n+            // The leading _'s are to avoid dead code warnings if this is\n+            // used inside a dead function. Just `#[allow(dead_code)]` is\n+            // insufficient, since the user may have\n+            // `#[forbid(dead_code)]` and which cannot be overridden.\n+            static _FILE_LINE: (&'static str, u32) = (file!(), line!());\n             &_FILE_LINE\n         })\n     });"}, {"sha": "a498e634185f213240b4fd8af53de44c8933f815", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49798c597f810fbce14959bdbcdae0b635a5bde9/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49798c597f810fbce14959bdbcdae0b635a5bde9/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=49798c597f810fbce14959bdbcdae0b635a5bde9", "patch": "@@ -26,7 +26,7 @@ thread_local! {\n     }\n }\n \n-pub fn on_panic(obj: &(Any+Send), file: &'static str, line: usize) {\n+pub fn on_panic(obj: &(Any+Send), file: &'static str, line: u32) {\n     let msg = match obj.downcast_ref::<&'static str>() {\n         Some(s) => *s,\n         None => match obj.downcast_ref::<String>() {"}, {"sha": "b118010a0cc150e31957ad5735d5ce5f3b22dc32", "filename": "src/libstd/rt/unwind.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/49798c597f810fbce14959bdbcdae0b635a5bde9/src%2Flibstd%2Frt%2Funwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49798c597f810fbce14959bdbcdae0b635a5bde9/src%2Flibstd%2Frt%2Funwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Funwind.rs?ref=49798c597f810fbce14959bdbcdae0b635a5bde9", "patch": "@@ -78,7 +78,7 @@ struct Exception {\n     cause: Option<Box<Any + Send + 'static>>,\n }\n \n-pub type Callback = fn(msg: &(Any + Send), file: &'static str, line: usize);\n+pub type Callback = fn(msg: &(Any + Send), file: &'static str, line: u32);\n \n // Variables used for invoking callbacks when a thread starts to unwind.\n //\n@@ -484,7 +484,7 @@ pub mod eabi {\n /// Entry point of panic from the libcore crate.\n #[lang = \"panic_fmt\"]\n pub extern fn rust_begin_unwind(msg: fmt::Arguments,\n-                                file: &'static str, line: usize) -> ! {\n+                                file: &'static str, line: u32) -> ! {\n     begin_unwind_fmt(msg, &(file, line))\n }\n \n@@ -495,7 +495,7 @@ pub extern fn rust_begin_unwind(msg: fmt::Arguments,\n /// on (e.g.) the inlining of other functions as possible), by moving\n /// the actual formatting into this shared place.\n #[inline(never)] #[cold]\n-pub fn begin_unwind_fmt(msg: fmt::Arguments, file_line: &(&'static str, usize)) -> ! {\n+pub fn begin_unwind_fmt(msg: fmt::Arguments, file_line: &(&'static str, u32)) -> ! {\n     use fmt::Write;\n \n     // We do two allocations here, unfortunately. But (a) they're\n@@ -510,6 +510,7 @@ pub fn begin_unwind_fmt(msg: fmt::Arguments, file_line: &(&'static str, usize))\n \n /// This is the entry point of unwinding for panic!() and assert!().\n #[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n+#[cfg(stage0)]\n pub fn begin_unwind<M: Any + Send>(msg: M, file_line: &(&'static str, usize)) -> ! {\n     // Note that this should be the only allocation performed in this code path.\n     // Currently this means that panic!() on OOM will invoke this code path,\n@@ -518,6 +519,22 @@ pub fn begin_unwind<M: Any + Send>(msg: M, file_line: &(&'static str, usize)) ->\n     // be performed in the parent of this thread instead of the thread that's\n     // panicking.\n \n+    // see below for why we do the `Any` coercion here.\n+    let (file, line) = *file_line;\n+    begin_unwind_inner(Box::new(msg), &(file, line as u32))\n+}\n+\n+/// This is the entry point of unwinding for panic!() and assert!().\n+#[inline(never)] #[cold] // avoid code bloat at the call sites as much as possible\n+#[cfg(not(stage0))]\n+pub fn begin_unwind<M: Any + Send>(msg: M, file_line: &(&'static str, u32)) -> ! {\n+    // Note that this should be the only allocation performed in this code path.\n+    // Currently this means that panic!() on OOM will invoke this code path,\n+    // but then again we're not really ready for panic on OOM anyway. If\n+    // we do start doing this, then we should propagate this allocation to\n+    // be performed in the parent of this thread instead of the thread that's\n+    // panicking.\n+\n     // see below for why we do the `Any` coercion here.\n     begin_unwind_inner(Box::new(msg), file_line)\n }\n@@ -533,7 +550,7 @@ pub fn begin_unwind<M: Any + Send>(msg: M, file_line: &(&'static str, usize)) ->\n /// }` from ~1900/3700 (-O/no opts) to 180/590.\n #[inline(never)] #[cold] // this is the slow path, please never inline this\n fn begin_unwind_inner(msg: Box<Any + Send>,\n-                      file_line: &(&'static str, usize)) -> ! {\n+                      file_line: &(&'static str, u32)) -> ! {\n     // Make sure the default failure handler is registered before we look at the\n     // callbacks. We also use a raw sys-based mutex here instead of a\n     // `std::sync` one as accessing TLS can cause weird recursive problems (and"}, {"sha": "cde16d25412e5c52f42051ac7f632ed687e7723b", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/49798c597f810fbce14959bdbcdae0b635a5bde9/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49798c597f810fbce14959bdbcdae0b635a5bde9/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=49798c597f810fbce14959bdbcdae0b635a5bde9", "patch": "@@ -767,7 +767,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n         let loc = self.codemap().lookup_char_pos(span.lo);\n         let expr_file = self.expr_str(span,\n                                       token::intern_and_get_ident(&loc.file.name));\n-        let expr_line = self.expr_usize(span, loc.line);\n+        let expr_line = self.expr_u32(span, loc.line as u32);\n         let expr_file_line_tuple = self.expr_tuple(span, vec!(expr_file, expr_line));\n         let expr_file_line_ptr = self.expr_addr_of(span, expr_file_line_tuple);\n         self.expr_call_global("}]}