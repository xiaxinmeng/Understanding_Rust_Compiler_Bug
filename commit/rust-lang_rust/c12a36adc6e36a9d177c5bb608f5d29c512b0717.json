{"sha": "c12a36adc6e36a9d177c5bb608f5d29c512b0717", "node_id": "C_kwDOAAsO6NoAKGMxMmEzNmFkYzZlMzZhOWQxNzdjNWJiNjA4ZjVkMjljNTEyYjA3MTc", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-05-25T08:48:28Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-25T08:48:28Z"}, "message": "Rollup merge of #96913 - Urgau:rfc3239-part2, r=petrochenkov\n\nRFC3239: Implement `cfg(target)` - Part 2\n\nThis pull-request implements the compact `cfg(target(..))` part of [RFC 3239](https://github.com/rust-lang/rust/issues/96901).\n\nI recommend reviewing this PR on a per commit basics, because of some moving parts.\n\ncc `@GuillaumeGomez`\nr? `@petrochenkov`", "tree": {"sha": "995098fd50ac32439eb36d93c8406813202b3b41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/995098fd50ac32439eb36d93c8406813202b3b41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c12a36adc6e36a9d177c5bb608f5d29c512b0717", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJije1cCRBK7hj4Ov3rIwAA408IAE+jNxHINuEAzHJSSE79uzsm\nB3W/oe2uKGaEMjAm8Cf7Yq1jfI9qC0psF3iVRMS44W5dOi/zhNbZBPnha7Cjufj5\n/dYE85bxirDQlsB5/nFmOLGTGuFamuFi2m+MACbLGIh5YEazISOqQM5gcqfydZMo\nV/d9xGNlceYbzpl7t55MG1CtnrYjLf4EVsQA2IsEDmFqD0ZjyeL9pyhSKBvUjrmc\n8JqVERF6kFuzR5Y3fRTEf9Dmyy+U6UdqmYka6ka60CVZB0e5BAan0VUxEhP6/pq4\n+1gMbtq06fahnbZwu9Sm9GPKkExqvOfmGnGj6GTxNEq/zPsKdPiUtb85Tlzkfn0=\n=T6VS\n-----END PGP SIGNATURE-----\n", "payload": "tree 995098fd50ac32439eb36d93c8406813202b3b41\nparent 11faf2e12a31eb94e837862b193e7d7dbff8a496\nparent b9ae3db4ac47c80ecfb647920ceda77c22dd648c\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1653468508 +0200\ncommitter GitHub <noreply@github.com> 1653468508 +0200\n\nRollup merge of #96913 - Urgau:rfc3239-part2, r=petrochenkov\n\nRFC3239: Implement `cfg(target)` - Part 2\n\nThis pull-request implements the compact `cfg(target(..))` part of [RFC 3239](https://github.com/rust-lang/rust/issues/96901).\n\nI recommend reviewing this PR on a per commit basics, because of some moving parts.\n\ncc `@GuillaumeGomez`\nr? `@petrochenkov`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c12a36adc6e36a9d177c5bb608f5d29c512b0717", "html_url": "https://github.com/rust-lang/rust/commit/c12a36adc6e36a9d177c5bb608f5d29c512b0717", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c12a36adc6e36a9d177c5bb608f5d29c512b0717/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11faf2e12a31eb94e837862b193e7d7dbff8a496", "url": "https://api.github.com/repos/rust-lang/rust/commits/11faf2e12a31eb94e837862b193e7d7dbff8a496", "html_url": "https://github.com/rust-lang/rust/commit/11faf2e12a31eb94e837862b193e7d7dbff8a496"}, {"sha": "b9ae3db4ac47c80ecfb647920ceda77c22dd648c", "url": "https://api.github.com/repos/rust-lang/rust/commits/b9ae3db4ac47c80ecfb647920ceda77c22dd648c", "html_url": "https://github.com/rust-lang/rust/commit/b9ae3db4ac47c80ecfb647920ceda77c22dd648c"}], "stats": {"total": 314, "additions": 247, "deletions": 67}, "files": [{"sha": "c8f1e1dbb01514ff3a9b20fefe93f0af834f4733", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 83, "deletions": 58, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/c12a36adc6e36a9d177c5bb608f5d29c512b0717/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12a36adc6e36a9d177c5bb608f5d29c512b0717/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=c12a36adc6e36a9d177c5bb608f5d29c512b0717", "patch": "@@ -454,6 +454,15 @@ pub fn find_crate_name(sess: &Session, attrs: &[Attribute]) -> Option<Symbol> {\n     sess.first_attr_value_str_by_name(attrs, sym::crate_name)\n }\n \n+#[derive(Clone, Debug)]\n+pub struct Condition {\n+    pub name: Symbol,\n+    pub name_span: Span,\n+    pub value: Option<Symbol>,\n+    pub value_span: Option<Span>,\n+    pub span: Span,\n+}\n+\n /// Tests if a cfg-pattern matches the cfg set\n pub fn cfg_matches(\n     cfg: &ast::MetaItem,\n@@ -462,70 +471,42 @@ pub fn cfg_matches(\n     features: Option<&Features>,\n ) -> bool {\n     eval_condition(cfg, sess, features, &mut |cfg| {\n-        try_gate_cfg(cfg, sess, features);\n-        let error = |span, msg| {\n-            sess.span_diagnostic.span_err(span, msg);\n-            true\n-        };\n-        if cfg.path.segments.len() != 1 {\n-            return error(cfg.path.span, \"`cfg` predicate key must be an identifier\");\n-        }\n-        match &cfg.kind {\n-            MetaItemKind::List(..) => {\n-                error(cfg.span, \"unexpected parentheses after `cfg` predicate key\")\n-            }\n-            MetaItemKind::NameValue(lit) if !lit.kind.is_str() => {\n-                handle_errors(\n-                    sess,\n-                    lit.span,\n-                    AttrError::UnsupportedLiteral(\n-                        \"literal in `cfg` predicate value must be a string\",\n-                        lit.kind.is_bytestr(),\n-                    ),\n+        try_gate_cfg(cfg.name, cfg.span, sess, features);\n+        if let Some(names_valid) = &sess.check_config.names_valid {\n+            if !names_valid.contains(&cfg.name) {\n+                sess.buffer_lint_with_diagnostic(\n+                    UNEXPECTED_CFGS,\n+                    cfg.span,\n+                    lint_node_id,\n+                    \"unexpected `cfg` condition name\",\n+                    BuiltinLintDiagnostics::UnexpectedCfg((cfg.name, cfg.name_span), None),\n                 );\n-                true\n             }\n-            MetaItemKind::NameValue(..) | MetaItemKind::Word => {\n-                let ident = cfg.ident().expect(\"multi-segment cfg predicate\");\n-                let name = ident.name;\n-                let value = cfg.value_str();\n-                if let Some(names_valid) = &sess.check_config.names_valid {\n-                    if !names_valid.contains(&name) {\n-                        sess.buffer_lint_with_diagnostic(\n-                            UNEXPECTED_CFGS,\n-                            cfg.span,\n-                            lint_node_id,\n-                            \"unexpected `cfg` condition name\",\n-                            BuiltinLintDiagnostics::UnexpectedCfg((name, ident.span), None),\n-                        );\n-                    }\n-                }\n-                if let Some(value) = value {\n-                    if let Some(values) = &sess.check_config.values_valid.get(&name) {\n-                        if !values.contains(&value) {\n-                            sess.buffer_lint_with_diagnostic(\n-                                UNEXPECTED_CFGS,\n-                                cfg.span,\n-                                lint_node_id,\n-                                \"unexpected `cfg` condition value\",\n-                                BuiltinLintDiagnostics::UnexpectedCfg(\n-                                    (name, ident.span),\n-                                    Some((value, cfg.name_value_literal_span().unwrap())),\n-                                ),\n-                            );\n-                        }\n-                    }\n+        }\n+        if let Some(value) = cfg.value {\n+            if let Some(values) = &sess.check_config.values_valid.get(&cfg.name) {\n+                if !values.contains(&value) {\n+                    sess.buffer_lint_with_diagnostic(\n+                        UNEXPECTED_CFGS,\n+                        cfg.span,\n+                        lint_node_id,\n+                        \"unexpected `cfg` condition value\",\n+                        BuiltinLintDiagnostics::UnexpectedCfg(\n+                            (cfg.name, cfg.name_span),\n+                            cfg.value_span.map(|vs| (value, vs)),\n+                        ),\n+                    );\n                 }\n-                sess.config.contains(&(name, value))\n             }\n         }\n+        sess.config.contains(&(cfg.name, cfg.value))\n     })\n }\n \n-fn try_gate_cfg(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Features>) {\n-    let gate = find_gated_cfg(|sym| cfg.has_name(sym));\n+fn try_gate_cfg(name: Symbol, span: Span, sess: &ParseSess, features: Option<&Features>) {\n+    let gate = find_gated_cfg(|sym| sym == name);\n     if let (Some(feats), Some(gated_cfg)) = (features, gate) {\n-        gate_cfg(&gated_cfg, cfg.span, sess, feats);\n+        gate_cfg(&gated_cfg, span, sess, feats);\n     }\n }\n \n@@ -563,11 +544,11 @@ pub fn eval_condition(\n     cfg: &ast::MetaItem,\n     sess: &ParseSess,\n     features: Option<&Features>,\n-    eval: &mut impl FnMut(&ast::MetaItem) -> bool,\n+    eval: &mut impl FnMut(Condition) -> bool,\n ) -> bool {\n     match cfg.kind {\n         ast::MetaItemKind::List(ref mis) if cfg.name_or_empty() == sym::version => {\n-            try_gate_cfg(cfg, sess, features);\n+            try_gate_cfg(sym::version, cfg.span, sess, features);\n             let (min_version, span) = match &mis[..] {\n                 [NestedMetaItem::Literal(Lit { kind: LitKind::Str(sym, ..), span, .. })] => {\n                     (sym, span)\n@@ -649,6 +630,25 @@ pub fn eval_condition(\n \n                     !eval_condition(mis[0].meta_item().unwrap(), sess, features, eval)\n                 }\n+                sym::target => {\n+                    if let Some(features) = features && !features.cfg_target_compact {\n+                        feature_err(\n+                            sess,\n+                            sym::cfg_target_compact,\n+                            cfg.span,\n+                            &\"compact `cfg(target(..))` is experimental and subject to change\"\n+                        ).emit();\n+                    }\n+\n+                    mis.iter().fold(true, |res, mi| {\n+                        let mut mi = mi.meta_item().unwrap().clone();\n+                        if let [seg, ..] = &mut mi.path.segments[..] {\n+                            seg.ident.name = Symbol::intern(&format!(\"target_{}\", seg.ident.name));\n+                        }\n+\n+                        res & eval_condition(&mi, sess, features, eval)\n+                    })\n+                }\n                 _ => {\n                     struct_span_err!(\n                         sess.span_diagnostic,\n@@ -662,7 +662,32 @@ pub fn eval_condition(\n                 }\n             }\n         }\n-        ast::MetaItemKind::Word | ast::MetaItemKind::NameValue(..) => eval(cfg),\n+        ast::MetaItemKind::Word | MetaItemKind::NameValue(..) if cfg.path.segments.len() != 1 => {\n+            sess.span_diagnostic\n+                .span_err(cfg.path.span, \"`cfg` predicate key must be an identifier\");\n+            true\n+        }\n+        MetaItemKind::NameValue(ref lit) if !lit.kind.is_str() => {\n+            handle_errors(\n+                sess,\n+                lit.span,\n+                AttrError::UnsupportedLiteral(\n+                    \"literal in `cfg` predicate value must be a string\",\n+                    lit.kind.is_bytestr(),\n+                ),\n+            );\n+            true\n+        }\n+        ast::MetaItemKind::Word | ast::MetaItemKind::NameValue(..) => {\n+            let ident = cfg.ident().expect(\"multi-segment cfg predicate\");\n+            eval(Condition {\n+                name: ident.name,\n+                name_span: ident.span,\n+                value: cfg.value_str(),\n+                value_span: cfg.name_value_literal_span(),\n+                span: cfg.span,\n+            })\n+        }\n     }\n }\n "}, {"sha": "c3f9f0cf3621f8edf806b25bfa8f19e05abf8e48", "filename": "compiler/rustc_attr/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c12a36adc6e36a9d177c5bb608f5d29c512b0717/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12a36adc6e36a9d177c5bb608f5d29c512b0717/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Flib.rs?ref=c12a36adc6e36a9d177c5bb608f5d29c512b0717", "patch": "@@ -4,6 +4,7 @@\n //! The goal is to move the definition of `MetaItem` and things that don't need to be in `syntax`\n //! to this crate.\n \n+#![feature(let_chains)]\n #![feature(let_else)]\n \n #[macro_use]"}, {"sha": "5a02661513ca72f416dbf5e078af7538ca9ab0ad", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c12a36adc6e36a9d177c5bb608f5d29c512b0717/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12a36adc6e36a9d177c5bb608f5d29c512b0717/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=c12a36adc6e36a9d177c5bb608f5d29c512b0717", "patch": "@@ -319,6 +319,8 @@ declare_features! (\n     (active, cfg_sanitize, \"1.41.0\", Some(39699), None),\n     /// Allows `cfg(target_abi = \"...\")`.\n     (active, cfg_target_abi, \"1.55.0\", Some(80970), None),\n+    /// Allows `cfg(target(abi = \"...\"))`.\n+    (active, cfg_target_compact, \"1.63.0\", Some(96901), None),\n     /// Allows `cfg(target_has_atomic_load_store = \"...\")`.\n     (active, cfg_target_has_atomic, \"1.60.0\", Some(94039), None),\n     /// Allows `cfg(target_has_atomic_equal_alignment = \"...\")`."}, {"sha": "406e9a4113ef394f6a9337ddf514553c614934ce", "filename": "compiler/rustc_span/src/symbol.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c12a36adc6e36a9d177c5bb608f5d29c512b0717/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12a36adc6e36a9d177c5bb608f5d29c512b0717/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Fsymbol.rs?ref=c12a36adc6e36a9d177c5bb608f5d29c512b0717", "patch": "@@ -427,6 +427,7 @@ symbols! {\n         cfg_panic,\n         cfg_sanitize,\n         cfg_target_abi,\n+        cfg_target_compact,\n         cfg_target_feature,\n         cfg_target_has_atomic,\n         cfg_target_has_atomic_equal_alignment,\n@@ -1375,6 +1376,7 @@ symbols! {\n         sym,\n         sync,\n         t32,\n+        target,\n         target_abi,\n         target_arch,\n         target_endian,"}, {"sha": "ed7d16f7a5419e96a66be92abf801dea597b9cf3", "filename": "compiler/rustc_trait_selection/src/traits/on_unimplemented.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c12a36adc6e36a9d177c5bb608f5d29c512b0717/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12a36adc6e36a9d177c5bb608f5d29c512b0717/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fon_unimplemented.rs?ref=c12a36adc6e36a9d177c5bb608f5d29c512b0717", "patch": "@@ -89,8 +89,8 @@ impl<'tcx> OnUnimplementedDirective {\n                         None,\n                     )\n                 })?;\n-            attr::eval_condition(cond, &tcx.sess.parse_sess, Some(tcx.features()), &mut |item| {\n-                if let Some(symbol) = item.value_str() && let Err(guar) = parse_value(symbol) {\n+            attr::eval_condition(cond, &tcx.sess.parse_sess, Some(tcx.features()), &mut |cfg| {\n+                if let Some(value) = cfg.value && let Err(guar) = parse_value(value) {\n                     errored = Some(guar);\n                 }\n                 true\n@@ -226,14 +226,12 @@ impl<'tcx> OnUnimplementedDirective {\n                 condition,\n                 &tcx.sess.parse_sess,\n                 Some(tcx.features()),\n-                &mut |c| {\n-                    c.ident().map_or(false, |ident| {\n-                        let value = c.value_str().map(|s| {\n-                            OnUnimplementedFormatString(s).format(tcx, trait_ref, &options_map)\n-                        });\n+                &mut |cfg| {\n+                    let value = cfg.value.map(|v| {\n+                        OnUnimplementedFormatString(v).format(tcx, trait_ref, &options_map)\n+                    });\n \n-                        options.contains(&(ident.name, value))\n-                    })\n+                    options.contains(&(cfg.name, value))\n                 },\n             ) {\n                 debug!(\"evaluate: skipping {:?} due to condition\", command);"}, {"sha": "bca2275b1a957781988f76268f7590997aba3113", "filename": "src/test/ui/cfg/cfg-target-compact-errors.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c12a36adc6e36a9d177c5bb608f5d29c512b0717/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-compact-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12a36adc6e36a9d177c5bb608f5d29c512b0717/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-compact-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-compact-errors.rs?ref=c12a36adc6e36a9d177c5bb608f5d29c512b0717", "patch": "@@ -0,0 +1,17 @@\n+// check-fail\n+\n+#![feature(cfg_target_compact)]\n+\n+#[cfg(target(o::o))]\n+//~^ ERROR `cfg` predicate key must be an identifier\n+fn one() {}\n+\n+#[cfg(target(os = 8))]\n+//~^ ERROR literal in `cfg` predicate value must be a string\n+fn two() {}\n+\n+#[cfg(target(os = \"linux\", pointer(width = \"64\")))]\n+//~^ ERROR invalid predicate `target_pointer`\n+fn three() {}\n+\n+fn main() {}"}, {"sha": "bb858301eb58196f28e3d56356a321726c55a15f", "filename": "src/test/ui/cfg/cfg-target-compact-errors.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c12a36adc6e36a9d177c5bb608f5d29c512b0717/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-compact-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c12a36adc6e36a9d177c5bb608f5d29c512b0717/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-compact-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-compact-errors.stderr?ref=c12a36adc6e36a9d177c5bb608f5d29c512b0717", "patch": "@@ -0,0 +1,22 @@\n+error: `cfg` predicate key must be an identifier\n+  --> $DIR/cfg-target-compact-errors.rs:5:14\n+   |\n+LL | #[cfg(target(o::o))]\n+   |              ^^^^\n+\n+error[E0565]: literal in `cfg` predicate value must be a string\n+  --> $DIR/cfg-target-compact-errors.rs:9:19\n+   |\n+LL | #[cfg(target(os = 8))]\n+   |                   ^\n+\n+error[E0537]: invalid predicate `target_pointer`\n+  --> $DIR/cfg-target-compact-errors.rs:13:28\n+   |\n+LL | #[cfg(target(os = \"linux\", pointer(width = \"64\")))]\n+   |                            ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0537, E0565.\n+For more information about an error, try `rustc --explain E0537`."}, {"sha": "dc95a80915c4307ed32591e89ecac5773fac9926", "filename": "src/test/ui/cfg/cfg-target-compact.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c12a36adc6e36a9d177c5bb608f5d29c512b0717/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-compact.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12a36adc6e36a9d177c5bb608f5d29c512b0717/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-compact.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcfg%2Fcfg-target-compact.rs?ref=c12a36adc6e36a9d177c5bb608f5d29c512b0717", "patch": "@@ -0,0 +1,10 @@\n+// run-pass\n+#![feature(cfg_target_compact)]\n+\n+#[cfg(target(os = \"linux\", pointer_width = \"64\"))]\n+pub fn main() {\n+}\n+\n+#[cfg(not(target(os = \"linux\", pointer_width = \"64\")))]\n+pub fn main() {\n+}"}, {"sha": "bff807400396580b801b7faa38d079c9a9918f06", "filename": "src/test/ui/check-cfg/compact-names.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c12a36adc6e36a9d177c5bb608f5d29c512b0717/src%2Ftest%2Fui%2Fcheck-cfg%2Fcompact-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12a36adc6e36a9d177c5bb608f5d29c512b0717/src%2Ftest%2Fui%2Fcheck-cfg%2Fcompact-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fcompact-names.rs?ref=c12a36adc6e36a9d177c5bb608f5d29c512b0717", "patch": "@@ -0,0 +1,15 @@\n+// This test check that we correctly emit an warning for compact cfg\n+//\n+// check-pass\n+// compile-flags:--check-cfg=names() -Z unstable-options\n+\n+#![feature(cfg_target_compact)]\n+\n+#[cfg(target(os = \"linux\", arch = \"arm\"))]\n+pub fn expected() {}\n+\n+#[cfg(target(os = \"linux\", architecture = \"arm\"))]\n+//~^ WARNING unexpected `cfg` condition name\n+pub fn unexpected() {}\n+\n+fn main() {}"}, {"sha": "f1fc4285a71b79a0f852934cefa28b2c27e4b245", "filename": "src/test/ui/check-cfg/compact-names.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c12a36adc6e36a9d177c5bb608f5d29c512b0717/src%2Ftest%2Fui%2Fcheck-cfg%2Fcompact-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c12a36adc6e36a9d177c5bb608f5d29c512b0717/src%2Ftest%2Fui%2Fcheck-cfg%2Fcompact-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fcompact-names.stderr?ref=c12a36adc6e36a9d177c5bb608f5d29c512b0717", "patch": "@@ -0,0 +1,10 @@\n+warning: unexpected `cfg` condition name\n+  --> $DIR/compact-names.rs:11:28\n+   |\n+LL | #[cfg(target(os = \"linux\", architecture = \"arm\"))]\n+   |                            ^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+\n+warning: 1 warning emitted\n+"}, {"sha": "1f17057840ccadb5a56abfc50ca59c73a0a64d90", "filename": "src/test/ui/check-cfg/compact-values.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c12a36adc6e36a9d177c5bb608f5d29c512b0717/src%2Ftest%2Fui%2Fcheck-cfg%2Fcompact-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12a36adc6e36a9d177c5bb608f5d29c512b0717/src%2Ftest%2Fui%2Fcheck-cfg%2Fcompact-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fcompact-values.rs?ref=c12a36adc6e36a9d177c5bb608f5d29c512b0717", "patch": "@@ -0,0 +1,15 @@\n+// This test check that we correctly emit an warning for compact cfg\n+//\n+// check-pass\n+// compile-flags:--check-cfg=values() -Z unstable-options\n+\n+#![feature(cfg_target_compact)]\n+\n+#[cfg(target(os = \"linux\", arch = \"arm\"))]\n+pub fn expected() {}\n+\n+#[cfg(target(os = \"linux\", arch = \"X\"))]\n+//~^ WARNING unexpected `cfg` condition value\n+pub fn unexpected() {}\n+\n+fn main() {}"}, {"sha": "a196e1537df57b09e5f2491a74c115369b111a75", "filename": "src/test/ui/check-cfg/compact-values.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c12a36adc6e36a9d177c5bb608f5d29c512b0717/src%2Ftest%2Fui%2Fcheck-cfg%2Fcompact-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c12a36adc6e36a9d177c5bb608f5d29c512b0717/src%2Ftest%2Fui%2Fcheck-cfg%2Fcompact-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fcompact-values.stderr?ref=c12a36adc6e36a9d177c5bb608f5d29c512b0717", "patch": "@@ -0,0 +1,11 @@\n+warning: unexpected `cfg` condition value\n+  --> $DIR/compact-values.rs:11:28\n+   |\n+LL | #[cfg(target(os = \"linux\", arch = \"X\"))]\n+   |                            ^^^^^^^^^^\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+   = note: expected values for `target_arch` are: aarch64, arm, avr, bpf, hexagon, m68k, mips, mips64, msp430, nvptx64, powerpc, powerpc64, riscv32, riscv64, s390x, sparc, sparc64, wasm32, wasm64, x86, x86_64\n+\n+warning: 1 warning emitted\n+"}, {"sha": "df81b7d2297eae80732c4bebc28299789edd1060", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-compact.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c12a36adc6e36a9d177c5bb608f5d29c512b0717/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-compact.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c12a36adc6e36a9d177c5bb608f5d29c512b0717/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-compact.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-compact.rs?ref=c12a36adc6e36a9d177c5bb608f5d29c512b0717", "patch": "@@ -0,0 +1,13 @@\n+#[cfg(target(os = \"x\"))] //~ ERROR compact `cfg(target(..))` is experimental\n+struct Foo(u64, u64);\n+\n+#[cfg_attr(target(os = \"x\"), x)] //~ ERROR compact `cfg(target(..))` is experimental\n+struct Bar(u64, u64);\n+\n+#[cfg(not(any(all(target(os = \"x\")))))] //~ ERROR compact `cfg(target(..))` is experimental\n+fn foo() {}\n+\n+fn main() {\n+    cfg!(target(os = \"x\"));\n+    //~^ ERROR compact `cfg(target(..))` is experimental and subject to change\n+}"}, {"sha": "be6fe23ded17188799f13e35d87e7c54cf283ddd", "filename": "src/test/ui/feature-gates/feature-gate-cfg-target-compact.stderr", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/c12a36adc6e36a9d177c5bb608f5d29c512b0717/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-compact.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c12a36adc6e36a9d177c5bb608f5d29c512b0717/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-compact.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-cfg-target-compact.stderr?ref=c12a36adc6e36a9d177c5bb608f5d29c512b0717", "patch": "@@ -0,0 +1,39 @@\n+error[E0658]: compact `cfg(target(..))` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-compact.rs:1:7\n+   |\n+LL | #[cfg(target(os = \"x\"))]\n+   |       ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #96901 <https://github.com/rust-lang/rust/issues/96901> for more information\n+   = help: add `#![feature(cfg_target_compact)]` to the crate attributes to enable\n+\n+error[E0658]: compact `cfg(target(..))` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-compact.rs:4:12\n+   |\n+LL | #[cfg_attr(target(os = \"x\"), x)]\n+   |            ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #96901 <https://github.com/rust-lang/rust/issues/96901> for more information\n+   = help: add `#![feature(cfg_target_compact)]` to the crate attributes to enable\n+\n+error[E0658]: compact `cfg(target(..))` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-compact.rs:7:19\n+   |\n+LL | #[cfg(not(any(all(target(os = \"x\")))))]\n+   |                   ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #96901 <https://github.com/rust-lang/rust/issues/96901> for more information\n+   = help: add `#![feature(cfg_target_compact)]` to the crate attributes to enable\n+\n+error[E0658]: compact `cfg(target(..))` is experimental and subject to change\n+  --> $DIR/feature-gate-cfg-target-compact.rs:11:10\n+   |\n+LL |     cfg!(target(os = \"x\"));\n+   |          ^^^^^^^^^^^^^^^^\n+   |\n+   = note: see issue #96901 <https://github.com/rust-lang/rust/issues/96901> for more information\n+   = help: add `#![feature(cfg_target_compact)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0658`."}]}