{"sha": "1a355a21ebbe70ebfa2856dee2becc18d9ab3b13", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFhMzU1YTIxZWJiZTcwZWJmYTI4NTZkZWUyYmVjYzE4ZDlhYjNiMTM=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-06-25T17:08:06Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-06-25T17:08:06Z"}, "message": "Document some invariants correctly/more", "tree": {"sha": "d78f7052234d77d0ec72fbb369d2fee12da94673", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d78f7052234d77d0ec72fbb369d2fee12da94673"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a355a21ebbe70ebfa2856dee2becc18d9ab3b13", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a355a21ebbe70ebfa2856dee2becc18d9ab3b13", "html_url": "https://github.com/rust-lang/rust/commit/1a355a21ebbe70ebfa2856dee2becc18d9ab3b13", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a355a21ebbe70ebfa2856dee2becc18d9ab3b13/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "229e5b2640fc5715e77607a989748be588d983f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/229e5b2640fc5715e77607a989748be588d983f2", "html_url": "https://github.com/rust-lang/rust/commit/229e5b2640fc5715e77607a989748be588d983f2"}], "stats": {"total": 19, "additions": 13, "deletions": 6}, "files": [{"sha": "c7125a35165cfffeb7ca0465fcac735e9766a50c", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1a355a21ebbe70ebfa2856dee2becc18d9ab3b13/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a355a21ebbe70ebfa2856dee2becc18d9ab3b13/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=1a355a21ebbe70ebfa2856dee2becc18d9ab3b13", "patch": "@@ -350,14 +350,20 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n     }\n \n     fn get_const(&self, place: Place<'tcx>) -> Option<OpTy<'tcx>> {\n-        let op = self.ecx.eval_place_to_op(place, None).ok();\n+        let op = match self.ecx.eval_place_to_op(place, None) {\n+            Ok(op) => op,\n+            Err(e) => {\n+                trace!(\"get_const failed: {}\", e);\n+                return None;\n+            }\n+        };\n \n         // Try to read the local as an immediate so that if it is representable as a scalar, we can\n         // handle it as such, but otherwise, just return the value as is.\n-        match op.map(|ret| self.ecx.try_read_immediate(ret)) {\n-            Some(Ok(Ok(imm))) => Some(imm.into()),\n+        Some(match self.ecx.try_read_immediate(op) {\n+            Ok(Ok(imm)) => imm.into(),\n             _ => op,\n-        }\n+        })\n     }\n \n     /// Remove `local` from the pool of `Locals`. Allows writing to them,\n@@ -857,8 +863,9 @@ impl<'mir, 'tcx> MutVisitor<'tcx> for ConstPropagator<'mir, 'tcx> {\n             if let Ok(place_layout) = self.tcx.layout_of(self.param_env.and(place_ty)) {\n                 let can_const_prop = self.can_const_prop[place.local];\n                 if let Some(()) = self.const_prop(rval, place_layout, source_info, place) {\n-                    // This will return None for variables that are from other blocks,\n-                    // so it should be okay to propagate from here on down.\n+                    // This will return None if the above `const_prop` invocation only \"wrote\" a\n+                    // type whose creation requires no write. E.g. a generator whose initial state\n+                    // consists solely of uninitialized memory (so it doesn't capture any locals).\n                     if let Some(value) = self.get_const(place) {\n                         if self.should_const_prop(value) {\n                             trace!(\"replacing {:?} with {:?}\", rval, value);"}]}