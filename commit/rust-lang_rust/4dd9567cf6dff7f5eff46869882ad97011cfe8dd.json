{"sha": "4dd9567cf6dff7f5eff46869882ad97011cfe8dd", "node_id": "C_kwDOAAsO6NoAKDRkZDk1NjdjZjZkZmY3ZjVlZmY0Njg2OTg4MmFkOTcwMTFjZmU4ZGQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-03-28T14:08:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-03-28T14:08:09Z"}, "message": "Rollup merge of #95350 - petrochenkov:qpathregr, r=cjgillot\n\nresolve: Simplify some diagnostic code to avoid an ICE\n\nNo need to resolve those paths, they are already resolved, we just need to take the results from `partial_res_map`.\n\nFixes https://github.com/rust-lang/rust/issues/95327", "tree": {"sha": "05b4ad84eb3920ab7dabd8e06027163e525ac3c7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05b4ad84eb3920ab7dabd8e06027163e525ac3c7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4dd9567cf6dff7f5eff46869882ad97011cfe8dd", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiQcFJCRBK7hj4Ov3rIwAA9q8IABUQ3B47hkXOCvStWVqx0g/U\n29H8S5ifsr9fqQ3FOHYiwvZuSbEJfApHFDyIC8K5XtoQD2aMKJdssz08J81dIGzP\nctVAHGCeOQVbTC6wM5jPcS3blH8heupjvpTzJ9qB3QlDfTFC6dThI/hsatWERX9N\npj82vwwfeb3gDuIP0kz+54dWZ2geNp+YIKnXj7QaWMO3TShqr+UC3QxL7jG1D9vC\nsKeLO3JfqwM87Cjihti7+39BK/jsUaEzfJaoikuOhtw+AZVvQnryotwuQJN/Hj6r\n+QauAvF81mJufFqp8WB97n4hqEF1Q/kQKGbe3zjptgWXsM4YdDw58ITSG9+iNuU=\n=Dx/n\n-----END PGP SIGNATURE-----\n", "payload": "tree 05b4ad84eb3920ab7dabd8e06027163e525ac3c7\nparent 4651c8df02ecf9d69e74bc86a690b5ae6c103f32\nparent a7d7a268e9782493de4162c8150495bb7ff89f5b\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1648476489 +0200\ncommitter GitHub <noreply@github.com> 1648476489 +0200\n\nRollup merge of #95350 - petrochenkov:qpathregr, r=cjgillot\n\nresolve: Simplify some diagnostic code to avoid an ICE\n\nNo need to resolve those paths, they are already resolved, we just need to take the results from `partial_res_map`.\n\nFixes https://github.com/rust-lang/rust/issues/95327\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4dd9567cf6dff7f5eff46869882ad97011cfe8dd", "html_url": "https://github.com/rust-lang/rust/commit/4dd9567cf6dff7f5eff46869882ad97011cfe8dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4dd9567cf6dff7f5eff46869882ad97011cfe8dd/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4651c8df02ecf9d69e74bc86a690b5ae6c103f32", "url": "https://api.github.com/repos/rust-lang/rust/commits/4651c8df02ecf9d69e74bc86a690b5ae6c103f32", "html_url": "https://github.com/rust-lang/rust/commit/4651c8df02ecf9d69e74bc86a690b5ae6c103f32"}, {"sha": "a7d7a268e9782493de4162c8150495bb7ff89f5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a7d7a268e9782493de4162c8150495bb7ff89f5b", "html_url": "https://github.com/rust-lang/rust/commit/a7d7a268e9782493de4162c8150495bb7ff89f5b"}], "stats": {"total": 47, "additions": 28, "deletions": 19}, "files": [{"sha": "c8ca51348cc7199ffeb60e76d6fd016ae80b32d7", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 17, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4dd9567cf6dff7f5eff46869882ad97011cfe8dd/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd9567cf6dff7f5eff46869882ad97011cfe8dd/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=4dd9567cf6dff7f5eff46869882ad97011cfe8dd", "patch": "@@ -696,14 +696,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         ) = &bounded_ty.kind\n         {\n             // use this to verify that ident is a type param.\n-            let Ok(Some(partial_res)) = self.resolve_qpath_anywhere(\n-                None,\n-                &Segment::from_path(path),\n-                Namespace::TypeNS,\n-                span,\n-                true,\n-                Finalize::No,\n-            ) else {\n+            let Some(partial_res) = self.r.partial_res_map.get(&bounded_ty.id) else {\n                 return false;\n             };\n             if !(matches!(\n@@ -718,16 +711,10 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             return false;\n         };\n \n-        if let ast::TyKind::Path(None, type_param_path) = &ty.peel_refs().kind {\n+        let peeled_ty = ty.peel_refs();\n+        if let ast::TyKind::Path(None, type_param_path) = &peeled_ty.kind {\n             // Confirm that the `SelfTy` is a type parameter.\n-            let Ok(Some(partial_res)) = self.resolve_qpath_anywhere(\n-                None,\n-                &Segment::from_path(type_param_path),\n-                Namespace::TypeNS,\n-                span,\n-                true,\n-                Finalize::No,\n-            ) else {\n+            let Some(partial_res) = self.r.partial_res_map.get(&peeled_ty.id) else {\n                 return false;\n             };\n             if !(matches!("}, {"sha": "471a6b836b51e56932d2ae5a56ac3dc8c007c578", "filename": "src/test/ui/traits/associated_type_bound/assoc_type_bound_with_struct.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4dd9567cf6dff7f5eff46869882ad97011cfe8dd/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4dd9567cf6dff7f5eff46869882ad97011cfe8dd/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.rs?ref=4dd9567cf6dff7f5eff46869882ad97011cfe8dd", "patch": "@@ -16,4 +16,8 @@ fn foo<T: Bar>(_: T) where <T as Bar>::Baz: String { //~ ERROR expected trait, f\n fn qux<'a, T: Bar>(_: &'a T) where <&'a T as Bar>::Baz: String { //~ ERROR expected trait, found\n }\n \n+fn issue_95327() where <u8 as Unresolved>::Assoc: String {}\n+//~^ ERROR expected trait, found struct\n+//~| ERROR use of undeclared type `Unresolved`\n+\n fn main() {}"}, {"sha": "9ca446a0a891d82ecb0436977b226f971a18b68d", "filename": "src/test/ui/traits/associated_type_bound/assoc_type_bound_with_struct.stderr", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4dd9567cf6dff7f5eff46869882ad97011cfe8dd/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4dd9567cf6dff7f5eff46869882ad97011cfe8dd/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fassociated_type_bound%2Fassoc_type_bound_with_struct.stderr?ref=4dd9567cf6dff7f5eff46869882ad97011cfe8dd", "patch": "@@ -1,3 +1,9 @@\n+error[E0433]: failed to resolve: use of undeclared type `Unresolved`\n+  --> $DIR/assoc_type_bound_with_struct.rs:19:31\n+   |\n+LL | fn issue_95327() where <u8 as Unresolved>::Assoc: String {}\n+   |                               ^^^^^^^^^^ use of undeclared type `Unresolved`\n+\n error[E0404]: expected trait, found struct `String`\n   --> $DIR/assoc_type_bound_with_struct.rs:5:46\n    |\n@@ -78,6 +84,18 @@ help: a trait with a similar name exists\n LL | fn qux<'a, T: Bar>(_: &'a T) where <&'a T as Bar>::Baz: ToString {\n    |                                                         ~~~~~~~~\n \n-error: aborting due to 4 previous errors\n+error[E0404]: expected trait, found struct `String`\n+  --> $DIR/assoc_type_bound_with_struct.rs:19:51\n+   |\n+LL | fn issue_95327() where <u8 as Unresolved>::Assoc: String {}\n+   |                                                   ^^^^^^ help: a trait with a similar name exists: `ToString`\n+   |\n+  ::: $SRC_DIR/alloc/src/string.rs:LL:COL\n+   |\n+LL | pub trait ToString {\n+   | ------------------ similarly named trait `ToString` defined here\n+\n+error: aborting due to 6 previous errors\n \n-For more information about this error, try `rustc --explain E0404`.\n+Some errors have detailed explanations: E0404, E0433.\n+For more information about an error, try `rustc --explain E0404`."}]}