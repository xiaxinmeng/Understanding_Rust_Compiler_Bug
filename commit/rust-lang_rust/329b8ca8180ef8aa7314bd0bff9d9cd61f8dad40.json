{"sha": "329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMyOWI4Y2E4MTgwZWY4YWE3MzE0YmQwYmZmOWQ5Y2Q2MWY4ZGFkNDA=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-12-10T15:36:24Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T07:26:13Z"}, "message": "rustc: always rely on '_ to be not printed by ty::Region itself.", "tree": {"sha": "e40539338175c1c3222274a6427da8bee1fa8475", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e40539338175c1c3222274a6427da8bee1fa8475"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40", "html_url": "https://github.com/rust-lang/rust/commit/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "387cacf76bdee1af073f53948af382ca78d046e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/387cacf76bdee1af073f53948af382ca78d046e6", "html_url": "https://github.com/rust-lang/rust/commit/387cacf76bdee1af073f53948af382ca78d046e6"}], "stats": {"total": 148, "additions": 69, "deletions": 79}, "files": [{"sha": "69d5492c0f4502a5244604995b3a4d1e34c58329", "filename": "src/librustc/traits/specialize/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fmod.rs?ref=329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40", "patch": "@@ -411,7 +411,7 @@ fn to_pretty_impl_header(tcx: TyCtxt<'_, '_, '_>, impl_def_id: DefId) -> Option<\n         w.push('<');\n         w.push_str(&substs.iter()\n             .map(|k| k.to_string())\n-            .filter(|k| &k[..] != \"'_\")\n+            .filter(|k| !k.is_empty())\n             .collect::<Vec<_>>().join(\", \"));\n         w.push('>');\n     }"}, {"sha": "43ab32237dea5b69c2152c69354598a8b897d63f", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40", "patch": "@@ -55,6 +55,7 @@ CloneTypeFoldableAndLiftImpls! {\n     crate::ty::IntVarValue,\n     crate::ty::ParamConst,\n     crate::ty::ParamTy,\n+    crate::ty::RegionVid,\n     crate::ty::UniverseIndex,\n     crate::ty::Variance,\n     ::syntax_pos::Span,"}, {"sha": "2a03f32fdccdff68efd47040ff61b4d383238c9a", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 58, "deletions": 69, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40", "patch": "@@ -120,17 +120,6 @@ impl RegionHighlightMode {\n         Self::highlighting_region(&ty::ReVar(vid), number, op)\n     }\n \n-    /// Returns `true` if any placeholders are highlighted, and `false` otherwise.\n-    fn any_region_vids_highlighted(&self) -> bool {\n-        Self::get()\n-            .highlight_regions\n-            .iter()\n-            .any(|h| match h {\n-                Some((ty::ReVar(_), _)) => true,\n-                _ => false,\n-            })\n-    }\n-\n     /// Returns `Some(n)` with the number to use for the given region, if any.\n     fn region_highlighted(&self, region: ty::Region<'_>) -> Option<usize> {\n         Self::get()\n@@ -163,17 +152,6 @@ impl RegionHighlightMode {\n         )\n     }\n \n-    /// Returns `true` if any placeholders are highlighted, and `false` otherwise.\n-    pub fn any_placeholders_highlighted(&self) -> bool {\n-        Self::get()\n-            .highlight_regions\n-            .iter()\n-            .any(|h| match h {\n-                Some((ty::RePlaceholder(_), _)) => true,\n-                _ => false,\n-            })\n-    }\n-\n     /// Returns `Some(N)` if the placeholder `p` is highlighted to print as \"`'N`\".\n     pub fn placeholder_highlight(&self, p: ty::PlaceholderRegion) -> Option<usize> {\n         self.region_highlighted(&ty::RePlaceholder(p))\n@@ -421,7 +399,7 @@ impl PrintCx<'a, 'gcx, 'tcx> {\n                     if self.is_verbose {\n                         write!(f, \"{:?}\", region)?;\n                     } else {\n-                        let s = region.to_string();\n+                        let s = region.print_display_to_string(self);\n                         if s.is_empty() {\n                             // This happens when the value of the region\n                             // parameter is not easily serialized. This may be\n@@ -720,19 +698,20 @@ define_print! {\n                 return self.print_debug(f, cx);\n             }\n \n-            if let Some((region, counter)) = RegionHighlightMode::get().highlight_bound_region {\n-                if *self == region {\n-                    return match *self {\n-                        BrNamed(_, name) => write!(f, \"{}\", name),\n-                        BrAnon(_) | BrFresh(_) | BrEnv => write!(f, \"'{}\", counter)\n-                    };\n+            if let BrNamed(_, name) = *self {\n+                if name != \"\" && name != \"'_\" {\n+                    return write!(f, \"{}\", name);\n                 }\n             }\n \n-            match *self {\n-                BrNamed(_, name) => write!(f, \"{}\", name),\n-                BrAnon(_) | BrFresh(_) | BrEnv => Ok(())\n+            let highlight = RegionHighlightMode::get();\n+            if let Some((region, counter)) = highlight.highlight_bound_region {\n+                if *self == region {\n+                    return write!(f, \"'{}\", counter);\n+                }\n             }\n+\n+            Ok(())\n         }\n         debug {\n             return match *self {\n@@ -757,12 +736,10 @@ define_print! {\n \n             let highlight = RegionHighlightMode::get();\n             if let Some(counter) = highlight.placeholder_highlight(*self) {\n-                write!(f, \"'{}\", counter)\n-            } else if highlight.any_placeholders_highlighted() {\n-                write!(f, \"'_\")\n-            } else {\n-                write!(f, \"{}\", self.name)\n+                return write!(f, \"'{}\", counter);\n             }\n+\n+            write!(f, \"{}\", self.name)\n         }\n     }\n }\n@@ -785,7 +762,11 @@ define_print! {\n             // `explain_region()` or `note_and_explain_region()`.\n             match *self {\n                 ty::ReEarlyBound(ref data) => {\n-                    write!(f, \"{}\", data.name)\n+                    if data.name != \"'_\" {\n+                        write!(f, \"{}\", data.name)\n+                    } else {\n+                        Ok(())\n+                    }\n                 }\n                 ty::ReLateBound(_, br) |\n                 ty::ReFree(ty::FreeRegion { bound_region: br, .. }) => {\n@@ -812,14 +793,11 @@ define_print! {\n                         ),\n                     }\n                 }\n+                ty::ReVar(region_vid) if cx.identify_regions => {\n+                    write!(f, \"{:?}\", region_vid)\n+                }\n                 ty::ReVar(region_vid) => {\n-                    if RegionHighlightMode::get().any_region_vids_highlighted() {\n-                        write!(f, \"{:?}\", region_vid)\n-                    } else if cx.identify_regions {\n-                        write!(f, \"'{}rv\", region_vid.index())\n-                    } else {\n-                        Ok(())\n-                    }\n+                    write!(f, \"{}\", region_vid)\n                 }\n                 ty::ReScope(_) |\n                 ty::ReErased => Ok(()),\n@@ -938,32 +916,46 @@ impl fmt::Debug for ty::FloatVid {\n     }\n }\n \n-impl fmt::Debug for ty::RegionVid {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        if let Some(counter) = RegionHighlightMode::get().region_highlighted(&ty::ReVar(*self)) {\n-            return write!(f, \"'{:?}\", counter);\n-        } else if RegionHighlightMode::get().any_region_vids_highlighted() {\n-            return write!(f, \"'_\");\n+define_print! {\n+    () ty::RegionVid, (self, f, cx) {\n+        display {\n+            if cx.is_verbose {\n+                return self.print_debug(f, cx);\n+            }\n+\n+            let highlight = RegionHighlightMode::get();\n+            if let Some(counter) = highlight.region_highlighted(&ty::ReVar(*self)) {\n+                return write!(f, \"'{:?}\", counter);\n+            }\n+\n+            Ok(())\n         }\n+        debug {\n+            // HACK(eddyb) this is duplicated from `display` printing,\n+            // to keep NLL borrowck working even with `-Zverbose`.\n+            let highlight = RegionHighlightMode::get();\n+            if let Some(counter) = highlight.region_highlighted(&ty::ReVar(*self)) {\n+                return write!(f, \"'{:?}\", counter);\n+            }\n \n-        write!(f, \"'_#{}r\", self.index())\n+            write!(f, \"'_#{}r\", self.index())\n+        }\n     }\n }\n \n define_print! {\n     () ty::InferTy, (self, f, cx) {\n         display {\n             if cx.is_verbose {\n-                print!(f, cx, print_debug(self))\n-            } else {\n-                match *self {\n-                    ty::TyVar(_) => write!(f, \"_\"),\n-                    ty::IntVar(_) => write!(f, \"{}\", \"{integer}\"),\n-                    ty::FloatVar(_) => write!(f, \"{}\", \"{float}\"),\n-                    ty::FreshTy(v) => write!(f, \"FreshTy({})\", v),\n-                    ty::FreshIntTy(v) => write!(f, \"FreshIntTy({})\", v),\n-                    ty::FreshFloatTy(v) => write!(f, \"FreshFloatTy({})\", v)\n-                }\n+                return self.print_debug(f, cx);\n+            }\n+            match *self {\n+                ty::TyVar(_) => write!(f, \"_\"),\n+                ty::IntVar(_) => write!(f, \"{}\", \"{integer}\"),\n+                ty::FloatVar(_) => write!(f, \"{}\", \"{float}\"),\n+                ty::FreshTy(v) => write!(f, \"FreshTy({})\", v),\n+                ty::FreshIntTy(v) => write!(f, \"FreshIntTy({})\", v),\n+                ty::FreshFloatTy(v) => write!(f, \"FreshFloatTy({})\", v)\n             }\n         }\n         debug {\n@@ -1061,12 +1053,9 @@ define_print! {\n                 }\n                 Ref(r, ty, mutbl) => {\n                     write!(f, \"&\")?;\n-                    let s = r.print_to_string(cx);\n-                    if s != \"'_\" {\n-                        write!(f, \"{}\", s)?;\n-                        if !s.is_empty() {\n-                            write!(f, \" \")?;\n-                        }\n+                    let s = r.print_display_to_string(cx);\n+                    if !s.is_empty() {\n+                        write!(f, \"{} \", s)?;\n                     }\n                     ty::TypeAndMut { ty, mutbl }.print(f, cx)\n                 }\n@@ -1112,7 +1101,7 @@ define_print! {\n                 }\n                 Adt(def, substs) => cx.parameterized(f, def.did, substs, iter::empty()),\n                 Dynamic(data, r) => {\n-                    let r = r.print_to_string(cx);\n+                    let r = r.print_display_to_string(cx);\n                     if !r.is_empty() {\n                         write!(f, \"(\")?;\n                     }"}, {"sha": "e3909e0c1253f3fdedf97fa095bb45c6013240fd", "filename": "src/test/ui/issues/issue-17905-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-17905-2.stderr?ref=329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40", "patch": "@@ -4,7 +4,7 @@ error[E0308]: mismatched method receiver\n LL |     fn say(self: &Pair<&str, isize>) {\n    |                  ^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Pair<&'_ str, _>`\n+   = note: expected type `Pair<&str, _>`\n               found type `Pair<&str, _>`\n note: the anonymous lifetime #2 defined on the method body at 8:5...\n   --> $DIR/issue-17905-2.rs:8:5\n@@ -27,7 +27,7 @@ error[E0308]: mismatched method receiver\n LL |     fn say(self: &Pair<&str, isize>) {\n    |                  ^^^^^^^^^^^^^^^^^^ lifetime mismatch\n    |\n-   = note: expected type `Pair<&'_ str, _>`\n+   = note: expected type `Pair<&str, _>`\n               found type `Pair<&str, _>`\n note: the lifetime '_ as defined on the impl at 5:5...\n   --> $DIR/issue-17905-2.rs:5:5"}, {"sha": "46de13dbbbd9bbe944fd2c92781e4f1c77292fd8", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40", "patch": "@@ -16,7 +16,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |                                       -  -  ^^^^^^ assignment requires that `'1` must outlive `'2`\n    |                                       |  |\n    |                                       |  has type `&'1 i32`\n-   |                                       has type `&mut &'2 i32`\n+   |                                       has type `&'_#2r mut &'2 i32`\n \n note: No external requirements\n   --> $DIR/escape-argument-callee.rs:20:1"}, {"sha": "7eb4d96fc5f752c50901280f907cd7547531d86e", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40", "patch": "@@ -20,9 +20,9 @@ error: lifetime may not live long enough\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:46:13\n    |\n LL |         |_outlives1, _outlives2, _outlives3, x, y| {\n-   |          ----------              ---------- has type `std::cell::Cell<&'2 &u32>`\n+   |          ----------              ---------- has type `std::cell::Cell<&'2 &'_#3r u32>`\n    |          |\n-   |          has type `std::cell::Cell<&&'1 u32>`\n+   |          has type `std::cell::Cell<&'_#1r &'1 u32>`\n ...\n LL |             demand_y(x, y, p)\n    |             ^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`"}, {"sha": "f8b6bfa003b32fc6a4da19cd6f66c4269926ffda", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40", "patch": "@@ -20,9 +20,9 @@ error: lifetime may not live long enough\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:37:9\n    |\n LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-   |                                                ---------  - has type `&std::cell::Cell<&'1 u32>`\n+   |                                                ---------  - has type `&'_#7r std::cell::Cell<&'1 u32>`\n    |                                                |\n-   |                                                has type `&std::cell::Cell<&'2 &u32>`\n+   |                                                has type `&'_#5r std::cell::Cell<&'2 &'_#1r u32>`\n LL |         // Only works if 'x: 'y:\n LL |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`"}, {"sha": "7e7429405fa068d5434e5c20d055744451b07fb8", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=329b8ca8180ef8aa7314bd0bff9d9cd61f8dad40", "patch": "@@ -20,9 +20,9 @@ error: lifetime may not live long enough\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:41:9\n    |\n LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-   |                                                ----------  ---------- has type `&std::cell::Cell<&'2 &u32>`\n+   |                                                ----------  ---------- has type `&'_#8r std::cell::Cell<&'2 &'_#2r u32>`\n    |                                                |\n-   |                                                has type `&std::cell::Cell<&'1 &u32>`\n+   |                                                has type `&'_#6r std::cell::Cell<&'1 &'_#1r u32>`\n LL |         // Only works if 'x: 'y:\n LL |         demand_y(x, y, x.get())\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`"}]}