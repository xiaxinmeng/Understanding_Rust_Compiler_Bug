{"sha": "4d46735b8efb7e8591387447315037094a094d50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkNDY3MzViOGVmYjdlODU5MTM4NzQ0NzMxNTAzNzA5NGEwOTRkNTA=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-23T15:03:54Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-02-26T01:32:49Z"}, "message": "Convert the rest of the standard library primitives to intra-doc links\n\nNote that float methods in `core::intrinsics` weren't converted because\nthey are only defined in `std` (using language item hacks).", "tree": {"sha": "3ecfb6f570b7149ff30963127059b214b811185f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ecfb6f570b7149ff30963127059b214b811185f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d46735b8efb7e8591387447315037094a094d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d46735b8efb7e8591387447315037094a094d50", "html_url": "https://github.com/rust-lang/rust/commit/4d46735b8efb7e8591387447315037094a094d50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d46735b8efb7e8591387447315037094a094d50/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a75f4fed10a65e6cb779fc059f272deadd7ecc1", "html_url": "https://github.com/rust-lang/rust/commit/9a75f4fed10a65e6cb779fc059f272deadd7ecc1"}], "stats": {"total": 266, "additions": 128, "deletions": 138}, "files": [{"sha": "788fafa0adc5c79bd2d8f1b6235cf8dd618eacb5", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -9,8 +9,7 @@\n //! [Unicode code point]: http://www.unicode.org/glossary/#code_point\n //!\n //! This module exists for technical reasons, the primary documentation for\n-//! `char` is directly on [the `char` primitive type](../../std/primitive.char.html)\n-//! itself.\n+//! `char` is directly on [the `char` primitive type][char] itself.\n //!\n //! This module is the home of the iterator implementations for the iterators\n //! implemented on `char`, as well as some useful constants and conversion"}, {"sha": "690247bc96df96735feecd65ffe41dcfbc51e11f", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -1,6 +1,6 @@\n //! Constants specific to the `f32` single-precision floating point type.\n //!\n-//! *[See also the `f32` primitive type](../../std/primitive.f32.html).*\n+//! *[See also the `f32` primitive type][f32].*\n //!\n //! Mathematically significant numbers are provided in the `consts` sub-module.\n //!\n@@ -35,7 +35,7 @@ use crate::num::FpCategory;\n pub const RADIX: u32 = f32::RADIX;\n \n /// Number of significant digits in base 2.\n-/// Use [`f32::MANTISSA_DIGITS`](../../std/primitive.f32.html#associatedconstant.MANTISSA_DIGITS) instead.\n+/// Use [`f32::MANTISSA_DIGITS`] instead.\n ///\n /// # Examples\n ///\n@@ -55,7 +55,7 @@ pub const RADIX: u32 = f32::RADIX;\n pub const MANTISSA_DIGITS: u32 = f32::MANTISSA_DIGITS;\n \n /// Approximate number of significant digits in base 10.\n-/// Use [`f32::DIGITS`](../../std/primitive.f32.html#associatedconstant.DIGITS) instead.\n+/// Use [`f32::DIGITS`] instead.\n ///\n /// # Examples\n ///\n@@ -72,7 +72,7 @@ pub const MANTISSA_DIGITS: u32 = f32::MANTISSA_DIGITS;\n pub const DIGITS: u32 = f32::DIGITS;\n \n /// [Machine epsilon] value for `f32`.\n-/// Use [`f32::EPSILON`](../../std/primitive.f32.html#associatedconstant.EPSILON) instead.\n+/// Use [`f32::EPSILON`] instead.\n ///\n /// This is the difference between `1.0` and the next larger representable number.\n ///\n@@ -96,7 +96,7 @@ pub const DIGITS: u32 = f32::DIGITS;\n pub const EPSILON: f32 = f32::EPSILON;\n \n /// Smallest finite `f32` value.\n-/// Use [`f32::MIN`](../../std/primitive.f32.html#associatedconstant.MIN) instead.\n+/// Use [`f32::MIN`] instead.\n ///\n /// # Examples\n ///\n@@ -113,7 +113,7 @@ pub const EPSILON: f32 = f32::EPSILON;\n pub const MIN: f32 = f32::MIN;\n \n /// Smallest positive normal `f32` value.\n-/// Use [`f32::MIN_POSITIVE`](../../std/primitive.f32.html#associatedconstant.MIN_POSITIVE) instead.\n+/// Use [`f32::MIN_POSITIVE`] instead.\n ///\n /// # Examples\n ///\n@@ -133,7 +133,7 @@ pub const MIN: f32 = f32::MIN;\n pub const MIN_POSITIVE: f32 = f32::MIN_POSITIVE;\n \n /// Largest finite `f32` value.\n-/// Use [`f32::MAX`](../../std/primitive.f32.html#associatedconstant.MAX) instead.\n+/// Use [`f32::MAX`] instead.\n ///\n /// # Examples\n ///\n@@ -150,7 +150,7 @@ pub const MIN_POSITIVE: f32 = f32::MIN_POSITIVE;\n pub const MAX: f32 = f32::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n-/// Use [`f32::MIN_EXP`](../../std/primitive.f32.html#associatedconstant.MIN_EXP) instead.\n+/// Use [`f32::MIN_EXP`] instead.\n ///\n /// # Examples\n ///\n@@ -170,7 +170,7 @@ pub const MAX: f32 = f32::MAX;\n pub const MIN_EXP: i32 = f32::MIN_EXP;\n \n /// Maximum possible power of 2 exponent.\n-/// Use [`f32::MAX_EXP`](../../std/primitive.f32.html#associatedconstant.MAX_EXP) instead.\n+/// Use [`f32::MAX_EXP`] instead.\n ///\n /// # Examples\n ///\n@@ -190,7 +190,7 @@ pub const MIN_EXP: i32 = f32::MIN_EXP;\n pub const MAX_EXP: i32 = f32::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n-/// Use [`f32::MIN_10_EXP`](../../std/primitive.f32.html#associatedconstant.MIN_10_EXP) instead.\n+/// Use [`f32::MIN_10_EXP`] instead.\n ///\n /// # Examples\n ///\n@@ -210,7 +210,7 @@ pub const MAX_EXP: i32 = f32::MAX_EXP;\n pub const MIN_10_EXP: i32 = f32::MIN_10_EXP;\n \n /// Maximum possible power of 10 exponent.\n-/// Use [`f32::MAX_10_EXP`](../../std/primitive.f32.html#associatedconstant.MAX_10_EXP) instead.\n+/// Use [`f32::MAX_10_EXP`] instead.\n ///\n /// # Examples\n ///\n@@ -230,7 +230,7 @@ pub const MIN_10_EXP: i32 = f32::MIN_10_EXP;\n pub const MAX_10_EXP: i32 = f32::MAX_10_EXP;\n \n /// Not a Number (NaN).\n-/// Use [`f32::NAN`](../../std/primitive.f32.html#associatedconstant.NAN) instead.\n+/// Use [`f32::NAN`] instead.\n ///\n /// # Examples\n ///\n@@ -247,7 +247,7 @@ pub const MAX_10_EXP: i32 = f32::MAX_10_EXP;\n pub const NAN: f32 = f32::NAN;\n \n /// Infinity (\u221e).\n-/// Use [`f32::INFINITY`](../../std/primitive.f32.html#associatedconstant.INFINITY) instead.\n+/// Use [`f32::INFINITY`] instead.\n ///\n /// # Examples\n ///\n@@ -267,7 +267,7 @@ pub const NAN: f32 = f32::NAN;\n pub const INFINITY: f32 = f32::INFINITY;\n \n /// Negative infinity (\u2212\u221e).\n-/// Use [`f32::NEG_INFINITY`](../../std/primitive.f32.html#associatedconstant.NEG_INFINITY) instead.\n+/// Use [`f32::NEG_INFINITY`] instead.\n ///\n /// # Examples\n ///"}, {"sha": "6d3737224c0b6276fec5bcaa7c23463698a5f75c", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -1,6 +1,6 @@\n //! Constants specific to the `f64` double-precision floating point type.\n //!\n-//! *[See also the `f64` primitive type](../../std/primitive.f64.html).*\n+//! *[See also the `f64` primitive type][f64].*\n //!\n //! Mathematically significant numbers are provided in the `consts` sub-module.\n //!\n@@ -18,7 +18,7 @@ use crate::mem;\n use crate::num::FpCategory;\n \n /// The radix or base of the internal representation of `f64`.\n-/// Use [`f64::RADIX`](../../std/primitive.f64.html#associatedconstant.RADIX) instead.\n+/// Use [`f64::RADIX`] instead.\n ///\n /// # Examples\n ///\n@@ -35,7 +35,7 @@ use crate::num::FpCategory;\n pub const RADIX: u32 = f64::RADIX;\n \n /// Number of significant digits in base 2.\n-/// Use [`f64::MANTISSA_DIGITS`](../../std/primitive.f64.html#associatedconstant.MANTISSA_DIGITS) instead.\n+/// Use [`f64::MANTISSA_DIGITS`] instead.\n ///\n /// # Examples\n ///\n@@ -55,7 +55,7 @@ pub const RADIX: u32 = f64::RADIX;\n pub const MANTISSA_DIGITS: u32 = f64::MANTISSA_DIGITS;\n \n /// Approximate number of significant digits in base 10.\n-/// Use [`f64::DIGITS`](../../std/primitive.f64.html#associatedconstant.DIGITS) instead.\n+/// Use [`f64::DIGITS`] instead.\n ///\n /// # Examples\n ///\n@@ -72,7 +72,7 @@ pub const MANTISSA_DIGITS: u32 = f64::MANTISSA_DIGITS;\n pub const DIGITS: u32 = f64::DIGITS;\n \n /// [Machine epsilon] value for `f64`.\n-/// Use [`f64::EPSILON`](../../std/primitive.f64.html#associatedconstant.EPSILON) instead.\n+/// Use [`f64::EPSILON`] instead.\n ///\n /// This is the difference between `1.0` and the next larger representable number.\n ///\n@@ -96,7 +96,7 @@ pub const DIGITS: u32 = f64::DIGITS;\n pub const EPSILON: f64 = f64::EPSILON;\n \n /// Smallest finite `f64` value.\n-/// Use [`f64::MIN`](../../std/primitive.f64.html#associatedconstant.MIN) instead.\n+/// Use [`f64::MIN`] instead.\n ///\n /// # Examples\n ///\n@@ -113,7 +113,7 @@ pub const EPSILON: f64 = f64::EPSILON;\n pub const MIN: f64 = f64::MIN;\n \n /// Smallest positive normal `f64` value.\n-/// Use [`f64::MIN_POSITIVE`](../../std/primitive.f64.html#associatedconstant.MIN_POSITIVE) instead.\n+/// Use [`f64::MIN_POSITIVE`] instead.\n ///\n /// # Examples\n ///\n@@ -133,7 +133,7 @@ pub const MIN: f64 = f64::MIN;\n pub const MIN_POSITIVE: f64 = f64::MIN_POSITIVE;\n \n /// Largest finite `f64` value.\n-/// Use [`f64::MAX`](../../std/primitive.f64.html#associatedconstant.MAX) instead.\n+/// Use [`f64::MAX`] instead.\n ///\n /// # Examples\n ///\n@@ -150,7 +150,7 @@ pub const MIN_POSITIVE: f64 = f64::MIN_POSITIVE;\n pub const MAX: f64 = f64::MAX;\n \n /// One greater than the minimum possible normal power of 2 exponent.\n-/// Use [`f64::MIN_EXP`](../../std/primitive.f64.html#associatedconstant.MIN_EXP) instead.\n+/// Use [`f64::MIN_EXP`] instead.\n ///\n /// # Examples\n ///\n@@ -170,7 +170,7 @@ pub const MAX: f64 = f64::MAX;\n pub const MIN_EXP: i32 = f64::MIN_EXP;\n \n /// Maximum possible power of 2 exponent.\n-/// Use [`f64::MAX_EXP`](../../std/primitive.f64.html#associatedconstant.MAX_EXP) instead.\n+/// Use [`f64::MAX_EXP`] instead.\n ///\n /// # Examples\n ///\n@@ -190,7 +190,7 @@ pub const MIN_EXP: i32 = f64::MIN_EXP;\n pub const MAX_EXP: i32 = f64::MAX_EXP;\n \n /// Minimum possible normal power of 10 exponent.\n-/// Use [`f64::MIN_10_EXP`](../../std/primitive.f64.html#associatedconstant.MIN_10_EXP) instead.\n+/// Use [`f64::MIN_10_EXP`] instead.\n ///\n /// # Examples\n ///\n@@ -210,7 +210,7 @@ pub const MAX_EXP: i32 = f64::MAX_EXP;\n pub const MIN_10_EXP: i32 = f64::MIN_10_EXP;\n \n /// Maximum possible power of 10 exponent.\n-/// Use [`f64::MAX_10_EXP`](../../std/primitive.f64.html#associatedconstant.MAX_10_EXP) instead.\n+/// Use [`f64::MAX_10_EXP`] instead.\n ///\n /// # Examples\n ///\n@@ -230,7 +230,7 @@ pub const MIN_10_EXP: i32 = f64::MIN_10_EXP;\n pub const MAX_10_EXP: i32 = f64::MAX_10_EXP;\n \n /// Not a Number (NaN).\n-/// Use [`f64::NAN`](../../std/primitive.f64.html#associatedconstant.NAN) instead.\n+/// Use [`f64::NAN`] instead.\n ///\n /// # Examples\n ///\n@@ -247,7 +247,7 @@ pub const MAX_10_EXP: i32 = f64::MAX_10_EXP;\n pub const NAN: f64 = f64::NAN;\n \n /// Infinity (\u221e).\n-/// Use [`f64::INFINITY`](../../std/primitive.f64.html#associatedconstant.INFINITY) instead.\n+/// Use [`f64::INFINITY`] instead.\n ///\n /// # Examples\n ///\n@@ -267,7 +267,7 @@ pub const NAN: f64 = f64::NAN;\n pub const INFINITY: f64 = f64::INFINITY;\n \n /// Negative infinity (\u2212\u221e).\n-/// Use [`f64::NEG_INFINITY`](../../std/primitive.f64.html#associatedconstant.NEG_INFINITY) instead.\n+/// Use [`f64::NEG_INFINITY`] instead.\n ///\n /// # Examples\n ///"}, {"sha": "b37767cd5eb6d9355051ba1fefb7195df4329aab", "filename": "library/core/src/num/shells/i128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi128.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 128-bit signed integer type.\n //!\n-//! *[See also the `i128` primitive type](../../std/primitive.i128.html).*\n+//! *[See also the `i128` primitive type][i128].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "3137e72ca00e5b6dba05a0b12a37669ccefc3a14", "filename": "library/core/src/num/shells/i16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi16.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 16-bit signed integer type.\n //!\n-//! *[See also the `i16` primitive type](../../std/primitive.i16.html).*\n+//! *[See also the `i16` primitive type][i16].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "bb70751d8ca1aed0df6f983dcb6b93884fccb917", "filename": "library/core/src/num/shells/i32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi32.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 32-bit signed integer type.\n //!\n-//! *[See also the `i32` primitive type](../../std/primitive.i32.html).*\n+//! *[See also the `i32` primitive type][i32].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "b08201c2555a88da3214c4705c01440aad386012", "filename": "library/core/src/num/shells/i64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi64.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 64-bit signed integer type.\n //!\n-//! *[See also the `i64` primitive type](../../std/primitive.i64.html).*\n+//! *[See also the `i64` primitive type][i64].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "a7ad9bbbbceb84fb34edf84bcc6818c4c4e58012", "filename": "library/core/src/num/shells/i8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fi8.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 8-bit signed integer type.\n //!\n-//! *[See also the `i8` primitive type](../../std/primitive.i8.html).*\n+//! *[See also the `i8` primitive type][i8].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "c6a5595d95804b7f2a8f5bb7562cd06ae0d0c539", "filename": "library/core/src/num/shells/int_macros.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fint_macros.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -5,8 +5,7 @@ macro_rules! int_module {\n     ($T:ident, #[$attr:meta]) => (\n         #[doc = concat!(\n             \"The smallest value that can be represented by this integer type. Use \",\n-            \"[`\", stringify!($T), \"::MIN\", \"`](../../std/primitive.\", stringify!($T), \".html#associatedconstant.MIN)\",\n-            \" instead.\",\n+            \"[`\", stringify!($T), \"::MIN\", \"`] instead.\"\n         )]\n         ///\n         /// # Examples\n@@ -25,8 +24,7 @@ macro_rules! int_module {\n \n         #[doc = concat!(\n             \"The largest value that can be represented by this integer type. Use \",\n-            \"[`\", stringify!($T), \"::MAX\", \"`](../../std/primitive.\", stringify!($T), \".html#associatedconstant.MAX)\",\n-            \" instead.\",\n+            \"[`\", stringify!($T), \"::MAX\", \"`] instead.\"\n         )]\n         ///\n         /// # Examples"}, {"sha": "d719936c0b2c0972e6084f64ea7d4f7e8d3fa9ed", "filename": "library/core/src/num/shells/isize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fisize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fisize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fisize.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the pointer-sized signed integer type.\n //!\n-//! *[See also the `isize` primitive type](../../std/primitive.isize.html).*\n+//! *[See also the `isize` primitive type][isize].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "49f56c67c37a8e77e5f5afc997053c16e12e8bc5", "filename": "library/core/src/num/shells/u128.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu128.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 128-bit unsigned integer type.\n //!\n-//! *[See also the `u128` primitive type](../../std/primitive.u128.html).*\n+//! *[See also the `u128` primitive type][u128].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "b1d58ad4b9d8de2ad433157d8dbc6ec04df249dc", "filename": "library/core/src/num/shells/u16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu16.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 16-bit unsigned integer type.\n //!\n-//! *[See also the `u16` primitive type](../../std/primitive.u16.html).*\n+//! *[See also the `u16` primitive type][u16].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "b6acf950035f4270a4b358179f7372b634caa5d5", "filename": "library/core/src/num/shells/u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu32.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 32-bit unsigned integer type.\n //!\n-//! *[See also the `u32` primitive type](../../std/primitive.u32.html).*\n+//! *[See also the `u32` primitive type][u32].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "d43726f84fa2fdccc5572706290ca406e1fba8e0", "filename": "library/core/src/num/shells/u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu64.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 64-bit unsigned integer type.\n //!\n-//! *[See also the `u64` primitive type](../../std/primitive.u64.html).*\n+//! *[See also the `u64` primitive type][u64].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "0eadf85ec6d275262e867fd56d5e151336773968", "filename": "library/core/src/num/shells/u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fu8.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the 8-bit unsigned integer type.\n //!\n-//! *[See also the `u8` primitive type](../../std/primitive.u8.html).*\n+//! *[See also the `u8` primitive type][u8].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "deeed67d4960fe757339b5a0c488cec75a5f0da8", "filename": "library/core/src/num/shells/usize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fusize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fusize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Fshells%2Fusize.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -1,6 +1,6 @@\n //! Constants for the pointer-sized unsigned integer type.\n //!\n-//! *[See also the `usize` primitive type](../../std/primitive.usize.html).*\n+//! *[See also the `usize` primitive type][usize].*\n //!\n //! New code should use the associated constants directly on the primitive type.\n "}, {"sha": "15b5b433cff79a0af7917c486e36bfd23f66077b", "filename": "library/core/src/result.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -1285,11 +1285,10 @@ impl<T> Result<T, T> {\n     /// `Err`.\n     ///\n     /// This can be useful in conjunction with APIs such as\n-    /// [`Atomic*::compare_exchange`], or [`slice::binary_search`][binary_search], but only in\n+    /// [`Atomic*::compare_exchange`], or [`slice::binary_search`], but only in\n     /// cases where you don't care if the result was `Ok` or not.\n     ///\n     /// [`Atomic*::compare_exchange`]: crate::sync::atomic::AtomicBool::compare_exchange\n-    /// [binary_search]: ../../std/primitive.slice.html#method.binary_search\n     ///\n     /// # Examples\n     ///"}, {"sha": "c92b37b14be4fa91d021d66822095ff000600db4", "filename": "library/core/src/slice/index.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fslice%2Findex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Findex.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -464,8 +464,8 @@ unsafe impl<T> SliceIndex<[T]> for ops::RangeToInclusive<usize> {\n ///\n /// [`Range`]: ops::Range\n /// [`RangeTo`]: ops::RangeTo\n-/// [`slice::get_unchecked`]: ../../std/primitive.slice.html#method.get_unchecked\n-/// [`slice::get_unchecked_mut`]: ../../std/primitive.slice.html#method.get_unchecked_mut\n+/// [`slice::get_unchecked`]: slice::get_unchecked\n+/// [`slice::get_unchecked_mut`]: slice::get_unchecked_mut\n ///\n /// # Panics\n ///"}, {"sha": "8e651091cab484ac48ed6214fdf60925e2ae3179", "filename": "library/core/src/slice/iter.rs", "status": "modified", "additions": 52, "deletions": 52, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fiter.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -60,8 +60,8 @@ fn size_from_ptr<T>(_: *const T) -> usize {\n /// }\n /// ```\n ///\n-/// [`iter`]: ../../std/primitive.slice.html#method.iter\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`iter`]: slice::iter\n+/// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Iter<'a, T: 'a> {\n     ptr: NonNull<T>,\n@@ -179,8 +179,8 @@ impl<T> AsRef<[T]> for Iter<'_, T> {\n /// println!(\"{:?}\", slice);\n /// ```\n ///\n-/// [`iter_mut`]: ../../std/primitive.slice.html#method.iter_mut\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`iter_mut`]: slice::iter_mut\n+/// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct IterMut<'a, T: 'a> {\n     ptr: NonNull<T>,\n@@ -328,8 +328,8 @@ pub(super) trait SplitIter: DoubleEndedIterator {\n /// let mut iter = slice.split(|num| num % 3 == 0);\n /// ```\n ///\n-/// [`split`]: ../../std/primitive.slice.html#method.split\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`split`]: slice::split\n+/// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Split<'a, T: 'a, P>\n where\n@@ -450,8 +450,8 @@ impl<T, P> FusedIterator for Split<'_, T, P> where P: FnMut(&T) -> bool {}\n /// let mut iter = slice.split_inclusive(|num| num % 3 == 0);\n /// ```\n ///\n-/// [`split_inclusive`]: ../../std/primitive.slice.html#method.split_inclusive\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`split_inclusive`]: slice::split_inclusive\n+/// [slices]: slice\n #[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n pub struct SplitInclusive<'a, T: 'a, P>\n where\n@@ -562,8 +562,8 @@ impl<T, P> FusedIterator for SplitInclusive<'_, T, P> where P: FnMut(&T) -> bool\n /// let iter = v.split_mut(|num| *num % 3 == 0);\n /// ```\n ///\n-/// [`split_mut`]: ../../std/primitive.slice.html#method.split_mut\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`split_mut`]: slice::split_mut\n+/// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SplitMut<'a, T: 'a, P>\n where\n@@ -691,8 +691,8 @@ impl<T, P> FusedIterator for SplitMut<'_, T, P> where P: FnMut(&T) -> bool {}\n /// let iter = v.split_inclusive_mut(|num| *num % 3 == 0);\n /// ```\n ///\n-/// [`split_inclusive_mut`]: ../../std/primitive.slice.html#method.split_inclusive_mut\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`split_inclusive_mut`]: slice::split_inclusive_mut\n+/// [slices]: slice\n #[stable(feature = \"split_inclusive\", since = \"1.51.0\")]\n pub struct SplitInclusiveMut<'a, T: 'a, P>\n where\n@@ -812,8 +812,8 @@ impl<T, P> FusedIterator for SplitInclusiveMut<'_, T, P> where P: FnMut(&T) -> b\n /// let iter = slice.rsplit(|num| *num == 0);\n /// ```\n ///\n-/// [`rsplit`]: ../../std/primitive.slice.html#method.rsplit\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`rsplit`]: slice::rsplit\n+/// [slices]: slice\n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n #[derive(Clone)] // Is this correct, or does it incorrectly require `T: Clone`?\n pub struct RSplit<'a, T: 'a, P>\n@@ -898,8 +898,8 @@ impl<T, P> FusedIterator for RSplit<'_, T, P> where P: FnMut(&T) -> bool {}\n /// let iter = slice.rsplit_mut(|num| *num == 0);\n /// ```\n ///\n-/// [`rsplit_mut`]: ../../std/primitive.slice.html#method.rsplit_mut\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`rsplit_mut`]: slice::rsplit_mut\n+/// [slices]: slice\n #[stable(feature = \"slice_rsplit\", since = \"1.27.0\")]\n pub struct RSplitMut<'a, T: 'a, P>\n where\n@@ -1017,8 +1017,8 @@ impl<T, I: SplitIter<Item = T>> Iterator for GenericSplitN<I> {\n /// let iter = slice.splitn(2, |num| *num % 3 == 0);\n /// ```\n ///\n-/// [`splitn`]: ../../std/primitive.slice.html#method.splitn\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`splitn`]: slice::splitn\n+/// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SplitN<'a, T: 'a, P>\n where\n@@ -1057,8 +1057,8 @@ where\n /// let iter = slice.rsplitn(2, |num| *num % 3 == 0);\n /// ```\n ///\n-/// [`rsplitn`]: ../../std/primitive.slice.html#method.rsplitn\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`rsplitn`]: slice::rsplitn\n+/// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RSplitN<'a, T: 'a, P>\n where\n@@ -1096,8 +1096,8 @@ where\n /// let iter = slice.splitn_mut(2, |num| *num % 3 == 0);\n /// ```\n ///\n-/// [`splitn_mut`]: ../../std/primitive.slice.html#method.splitn_mut\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`splitn_mut`]: slice::splitn_mut\n+/// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct SplitNMut<'a, T: 'a, P>\n where\n@@ -1136,8 +1136,8 @@ where\n /// let iter = slice.rsplitn_mut(2, |num| *num % 3 == 0);\n /// ```\n ///\n-/// [`rsplitn_mut`]: ../../std/primitive.slice.html#method.rsplitn_mut\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`rsplitn_mut`]: slice::rsplitn_mut\n+/// [slices]: slice\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct RSplitNMut<'a, T: 'a, P>\n where\n@@ -1179,8 +1179,8 @@ forward_iterator! { RSplitNMut: T, &'a mut [T] }\n /// let iter = slice.windows(2);\n /// ```\n ///\n-/// [`windows`]: ../../std/primitive.slice.html#method.windows\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`windows`]: slice::windows\n+/// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Windows<'a, T: 'a> {\n@@ -1325,8 +1325,8 @@ unsafe impl<'a, T> TrustedRandomAccess for Windows<'a, T> {\n /// let iter = slice.chunks(2);\n /// ```\n ///\n-/// [`chunks`]: ../../std/primitive.slice.html#method.chunks\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`chunks`]: slice::chunks\n+/// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct Chunks<'a, T: 'a> {\n@@ -1493,8 +1493,8 @@ unsafe impl<'a, T> TrustedRandomAccess for Chunks<'a, T> {\n /// let iter = slice.chunks_mut(2);\n /// ```\n ///\n-/// [`chunks_mut`]: ../../std/primitive.slice.html#method.chunks_mut\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`chunks_mut`]: slice::chunks_mut\n+/// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct ChunksMut<'a, T: 'a> {\n@@ -1659,9 +1659,9 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksMut<'a, T> {\n /// let iter = slice.chunks_exact(2);\n /// ```\n ///\n-/// [`chunks_exact`]: ../../std/primitive.slice.html#method.chunks_exact\n+/// [`chunks_exact`]: slice::chunks_exact\n /// [`remainder`]: ChunksExact::remainder\n-/// [slices]: ../../std/primitive.slice.html\n+/// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n pub struct ChunksExact<'a, T: 'a> {\n@@ -1815,9 +1815,9 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksExact<'a, T> {\n /// let iter = slice.chunks_exact_mut(2);\n /// ```\n ///\n-/// [`chunks_exact_mut`]: ../../std/primitive.slice.html#method.chunks_exact_mut\n+/// [`chunks_exact_mut`]: slice::chunks_exact_mut\n /// [`into_remainder`]: ChunksExactMut::into_remainder\n-/// [slices]: ../../std/primitive.slice.html\n+/// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"chunks_exact\", since = \"1.31.0\")]\n pub struct ChunksExactMut<'a, T: 'a> {\n@@ -1966,8 +1966,8 @@ unsafe impl<'a, T> TrustedRandomAccess for ChunksExactMut<'a, T> {\n /// let iter = slice.array_windows::<2>();\n /// ```\n ///\n-/// [`array_windows`]: ../../std/primitive.slice.html#method.array_windows\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`array_windows`]: slice::array_windows\n+/// [slices]: slice\n #[derive(Debug, Clone, Copy)]\n #[unstable(feature = \"array_windows\", issue = \"75027\")]\n pub struct ArrayWindows<'a, T: 'a, const N: usize> {\n@@ -2087,9 +2087,9 @@ impl<T, const N: usize> ExactSizeIterator for ArrayWindows<'_, T, N> {\n /// let iter = slice.array_chunks::<2>();\n /// ```\n ///\n-/// [`array_chunks`]: ../../std/primitive.slice.html#method.array_chunks\n+/// [`array_chunks`]: slice::array_chunks\n /// [`remainder`]: ArrayChunks::remainder\n-/// [slices]: ../../std/primitive.slice.html\n+/// [slices]: slice\n #[derive(Debug)]\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n pub struct ArrayChunks<'a, T: 'a, const N: usize> {\n@@ -2209,9 +2209,9 @@ unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunks<'a, T, N>\n /// let iter = slice.array_chunks_mut::<2>();\n /// ```\n ///\n-/// [`array_chunks_mut`]: ../../std/primitive.slice.html#method.array_chunks_mut\n+/// [`array_chunks_mut`]: slice::array_chunks_mut\n /// [`into_remainder`]: ../../std/slice/struct.ArrayChunksMut.html#method.into_remainder\n-/// [slices]: ../../std/primitive.slice.html\n+/// [slices]: slice\n #[derive(Debug)]\n #[unstable(feature = \"array_chunks\", issue = \"74985\")]\n pub struct ArrayChunksMut<'a, T: 'a, const N: usize> {\n@@ -2320,8 +2320,8 @@ unsafe impl<'a, T, const N: usize> TrustedRandomAccess for ArrayChunksMut<'a, T,\n /// let iter = slice.rchunks(2);\n /// ```\n ///\n-/// [`rchunks`]: ../../std/primitive.slice.html#method.rchunks\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`rchunks`]: slice::rchunks\n+/// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n pub struct RChunks<'a, T: 'a> {\n@@ -2484,8 +2484,8 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunks<'a, T> {\n /// let iter = slice.rchunks_mut(2);\n /// ```\n ///\n-/// [`rchunks_mut`]: ../../std/primitive.slice.html#method.rchunks_mut\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`rchunks_mut`]: slice::rchunks_mut\n+/// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n pub struct RChunksMut<'a, T: 'a> {\n@@ -2648,9 +2648,9 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksMut<'a, T> {\n /// let iter = slice.rchunks_exact(2);\n /// ```\n ///\n-/// [`rchunks_exact`]: ../../std/primitive.slice.html#method.rchunks_exact\n+/// [`rchunks_exact`]: slice::rchunks_exact\n /// [`remainder`]: ChunksExact::remainder\n-/// [slices]: ../../std/primitive.slice.html\n+/// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n pub struct RChunksExact<'a, T: 'a> {\n@@ -2808,9 +2808,9 @@ unsafe impl<'a, T> TrustedRandomAccess for RChunksExact<'a, T> {\n /// let iter = slice.rchunks_exact_mut(2);\n /// ```\n ///\n-/// [`rchunks_exact_mut`]: ../../std/primitive.slice.html#method.rchunks_exact_mut\n+/// [`rchunks_exact_mut`]: slice::rchunks_exact_mut\n /// [`into_remainder`]: ChunksExactMut::into_remainder\n-/// [slices]: ../../std/primitive.slice.html\n+/// [slices]: slice\n #[derive(Debug)]\n #[stable(feature = \"rchunks\", since = \"1.31.0\")]\n pub struct RChunksExactMut<'a, T: 'a> {\n@@ -2969,8 +2969,8 @@ unsafe impl<'a, T> TrustedRandomAccess for IterMut<'a, T> {\n ///\n /// This struct is created by the [`group_by`] method on [slices].\n ///\n-/// [`group_by`]: ../../std/primitive.slice.html#method.group_by\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`group_by`]: slice::group_by\n+/// [slices]: slice\n #[unstable(feature = \"slice_group_by\", issue = \"80552\")]\n pub struct GroupBy<'a, T: 'a, P> {\n     slice: &'a [T],\n@@ -3055,8 +3055,8 @@ impl<'a, T: 'a + fmt::Debug, P> fmt::Debug for GroupBy<'a, T, P> {\n ///\n /// This struct is created by the [`group_by_mut`] method on [slices].\n ///\n-/// [`group_by_mut`]: ../../std/primitive.slice.html#method.group_by_mut\n-/// [slices]: ../../std/primitive.slice.html\n+/// [`group_by_mut`]: slice::group_by_mut\n+/// [slices]: slice\n #[unstable(feature = \"slice_group_by\", issue = \"80552\")]\n pub struct GroupByMut<'a, T: 'a, P> {\n     slice: &'a mut [T],"}, {"sha": "0a2743b1c31e5b106c282a58f4a341614cc515dd", "filename": "library/core/src/str/traits.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Ftraits.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -540,9 +540,7 @@ pub trait FromStr: Sized {\n     ///\n     /// # Examples\n     ///\n-    /// Basic usage with [`i32`][ithirtytwo], a type that implements `FromStr`:\n-    ///\n-    /// [ithirtytwo]: ../../std/primitive.i32.html\n+    /// Basic usage with [`i32`], a type that implements `FromStr`:\n     ///\n     /// ```\n     /// use std::str::FromStr;"}, {"sha": "ca39224602e6970ab7e256e5c0df29db9e07bf06", "filename": "library/core/src/sync/atomic.rs", "status": "modified", "additions": 28, "deletions": 32, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d46735b8efb7e8591387447315037094a094d50/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fsync%2Fatomic.rs?ref=4d46735b8efb7e8591387447315037094a094d50", "patch": "@@ -1307,7 +1307,7 @@ macro_rules! atomic_int {\n      $stable_nand:meta,\n      $const_stable:meta,\n      $stable_init_const:meta,\n-     $s_int_type:literal, $int_ref:expr,\n+     $s_int_type:literal,\n      $extra_feature:expr,\n      $min_fn:ident, $max_fn:ident,\n      $align:expr,\n@@ -1318,18 +1318,14 @@ macro_rules! atomic_int {\n         /// This type has the same in-memory representation as the underlying\n         /// integer type, [`\n         #[doc = $s_int_type]\n-        /// `](\n-        #[doc = $int_ref]\n-        /// ). For more about the differences between atomic types and\n+        /// `]. For more about the differences between atomic types and\n         /// non-atomic types as well as information about the portability of\n         /// this type, please see the [module-level documentation].\n         ///\n         /// **Note:** This type is only available on platforms that support\n         /// atomic loads and stores of [`\n         #[doc = $s_int_type]\n-        /// `](\n-        #[doc = $int_ref]\n-        /// ).\n+        /// `].\n         ///\n         /// [module-level documentation]: crate::sync::atomic\n         #[$stable]\n@@ -1525,7 +1521,7 @@ macro_rules! atomic_int {\n             /// using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1557,7 +1553,7 @@ macro_rules! atomic_int {\n             /// happens, and using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Migrating to `compare_exchange` and `compare_exchange_weak`\n             ///\n@@ -1626,7 +1622,7 @@ macro_rules! atomic_int {\n             /// and must be equivalent to or weaker than the success ordering.\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1678,7 +1674,7 @@ macro_rules! atomic_int {\n             /// and must be equivalent to or weaker than the success ordering.\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1720,7 +1716,7 @@ macro_rules! atomic_int {\n             /// using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1749,7 +1745,7 @@ macro_rules! atomic_int {\n             /// using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1781,7 +1777,7 @@ macro_rules! atomic_int {\n             /// using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1813,7 +1809,7 @@ macro_rules! atomic_int {\n             /// using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1845,7 +1841,7 @@ macro_rules! atomic_int {\n             /// using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1877,7 +1873,7 @@ macro_rules! atomic_int {\n             /// using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1916,7 +1912,7 @@ macro_rules! atomic_int {\n             /// and must be equivalent to or weaker than the success ordering.\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -1960,7 +1956,7 @@ macro_rules! atomic_int {\n             /// using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -2003,7 +1999,7 @@ macro_rules! atomic_int {\n             /// using [`Release`] makes the load part [`Relaxed`].\n             ///\n             /// **Note**: This method is only available on platforms that support atomic operations on\n-            #[doc = concat!(\"[`\", $s_int_type, \"`](\", $int_ref, \").\")]\n+            #[doc = concat!(\"[`\", $s_int_type, \"`].\")]\n             ///\n             /// # Examples\n             ///\n@@ -2088,7 +2084,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"i8\", \"../../../std/primitive.i8.html\",\n+    \"i8\",\n     \"\",\n     atomic_min, atomic_max,\n     1,\n@@ -2107,7 +2103,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"u8\", \"../../../std/primitive.u8.html\",\n+    \"u8\",\n     \"\",\n     atomic_umin, atomic_umax,\n     1,\n@@ -2126,7 +2122,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"i16\", \"../../../std/primitive.i16.html\",\n+    \"i16\",\n     \"\",\n     atomic_min, atomic_max,\n     2,\n@@ -2145,7 +2141,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"u16\", \"../../../std/primitive.u16.html\",\n+    \"u16\",\n     \"\",\n     atomic_umin, atomic_umax,\n     2,\n@@ -2164,7 +2160,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"i32\", \"../../../std/primitive.i32.html\",\n+    \"i32\",\n     \"\",\n     atomic_min, atomic_max,\n     4,\n@@ -2183,7 +2179,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"u32\", \"../../../std/primitive.u32.html\",\n+    \"u32\",\n     \"\",\n     atomic_umin, atomic_umax,\n     4,\n@@ -2202,7 +2198,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"i64\", \"../../../std/primitive.i64.html\",\n+    \"i64\",\n     \"\",\n     atomic_min, atomic_max,\n     8,\n@@ -2221,7 +2217,7 @@ atomic_int! {\n     stable(feature = \"integer_atomics_stable\", since = \"1.34.0\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"u64\", \"../../../std/primitive.u64.html\",\n+    \"u64\",\n     \"\",\n     atomic_umin, atomic_umax,\n     8,\n@@ -2240,7 +2236,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"i128\", \"../../../std/primitive.i128.html\",\n+    \"i128\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_min, atomic_max,\n     16,\n@@ -2259,7 +2255,7 @@ atomic_int! {\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n     rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n     unstable(feature = \"integer_atomics\", issue = \"32976\"),\n-    \"u128\", \"../../../std/primitive.u128.html\",\n+    \"u128\",\n     \"#![feature(integer_atomics)]\\n\\n\",\n     atomic_umin, atomic_umax,\n     16,\n@@ -2282,7 +2278,7 @@ macro_rules! atomic_int_ptr_sized {\n             stable(feature = \"atomic_nand\", since = \"1.27.0\"),\n             rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n             stable(feature = \"rust1\", since = \"1.0.0\"),\n-            \"isize\", \"../../../std/primitive.isize.html\",\n+            \"isize\",\n             \"\",\n             atomic_min, atomic_max,\n             $align,\n@@ -2302,7 +2298,7 @@ macro_rules! atomic_int_ptr_sized {\n             stable(feature = \"atomic_nand\", since = \"1.27.0\"),\n             rustc_const_stable(feature = \"const_integer_atomics\", since = \"1.34.0\"),\n             stable(feature = \"rust1\", since = \"1.0.0\"),\n-            \"usize\", \"../../../std/primitive.usize.html\",\n+            \"usize\",\n             \"\",\n             atomic_umin, atomic_umax,\n             $align,"}]}