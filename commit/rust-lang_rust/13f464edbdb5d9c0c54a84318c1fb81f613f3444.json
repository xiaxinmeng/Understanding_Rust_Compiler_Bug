{"sha": "13f464edbdb5d9c0c54a84318c1fb81f613f3444", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZjQ2NGVkYmRiNWQ5YzBjNTRhODQzMThjMWZiODFmNjEzZjM0NDQ=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-16T11:29:03Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-02-16T11:29:03Z"}, "message": "Merge #836\n\n836: auto_import: fix bug when the common path was shorter than both the c\u2026 r=matklad a=eulerdisk\n\nFix bug when the common path was shorter than both the current use and target path.\r\n\r\nWrong 1 (unnecessary self)\r\n```\r\nuse std::fmt::nested::Debug;\r\nstd::fmt::Display<|>\r\n```\r\n--->\r\n```\r\nuse std::fmt::{ self, Display, nested::Debug};\r\nDisplay<|>\r\n```\r\n\r\nWrong 2 (unnecessary, Debug disappear!!)\r\n```\r\nuse std::fmt::Debug;\r\nstd::fmt::nested::Display\r\n```\r\n-->\r\n```\r\nuse std::fmt::Debug::{ self, nested::Display, };\r\nDisplay<|>\r\n```\n\nCo-authored-by: Andrea Pretto <eulerdisk@gmail.com>", "tree": {"sha": "02cd4dae393b0f3818a005ecd813e08e770bc3af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02cd4dae393b0f3818a005ecd813e08e770bc3af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13f464edbdb5d9c0c54a84318c1fb81f613f3444", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13f464edbdb5d9c0c54a84318c1fb81f613f3444", "html_url": "https://github.com/rust-lang/rust/commit/13f464edbdb5d9c0c54a84318c1fb81f613f3444", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13f464edbdb5d9c0c54a84318c1fb81f613f3444/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "c06f5d497979535f6e4b3ff1ca44972415e7ebed", "url": "https://api.github.com/repos/rust-lang/rust/commits/c06f5d497979535f6e4b3ff1ca44972415e7ebed", "html_url": "https://github.com/rust-lang/rust/commit/c06f5d497979535f6e4b3ff1ca44972415e7ebed"}, {"sha": "e8f3c1650a489bcbfdebe9cdf21f96c0ed84bdea", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8f3c1650a489bcbfdebe9cdf21f96c0ed84bdea", "html_url": "https://github.com/rust-lang/rust/commit/e8f3c1650a489bcbfdebe9cdf21f96c0ed84bdea"}], "stats": {"total": 85, "additions": 67, "deletions": 18}, "files": [{"sha": "105c888d592ca844e2511dcccca569579c2034b7", "filename": "crates/ra_assists/src/auto_import.rs", "status": "modified", "additions": 67, "deletions": 18, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/13f464edbdb5d9c0c54a84318c1fb81f613f3444/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13f464edbdb5d9c0c54a84318c1fb81f613f3444/crates%2Fra_assists%2Fsrc%2Fauto_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fauto_import.rs?ref=13f464edbdb5d9c0c54a84318c1fb81f613f3444", "patch": "@@ -1,4 +1,5 @@\n use hir::db::HirDatabase;\n+\n use ra_syntax::{\n     ast::{ self, NameOwner }, AstNode, SyntaxNode, Direction, TextRange,\n     SyntaxKind::{ PATH, PATH_SEGMENT, COLONCOLON, COMMA }\n@@ -267,7 +268,7 @@ fn walk_use_tree_for_best_action<'a>(\n                 false,\n             )\n         }\n-        common if left.len() > right.len() => {\n+        common if common == right.len() && left.len() > right.len() => {\n             // e.g: target is std::fmt and we can have\n             // 1- use std;\n             // 2- use std::{ ... };\n@@ -294,12 +295,12 @@ fn walk_use_tree_for_best_action<'a>(\n                     }\n                 }\n             } else {\n-                // Case 1, split\n+                // Case 1, split adding self\n                 better_action = ImportAction::add_nested_import(prev_len + common, path, None, true)\n             }\n             better_action\n         }\n-        common if left.len() < right.len() => {\n+        common if common == left.len() && left.len() < right.len() => {\n             // e.g: target is std::fmt and we can have\n             // use std::fmt::Debug;\n             let segments_to_split = current_path_segments.split_at(prev_len + common).1;\n@@ -310,6 +311,17 @@ fn walk_use_tree_for_best_action<'a>(\n                 true,\n             )\n         }\n+        common if common < left.len() && common < right.len() => {\n+            // e.g: target is std::fmt::nested::Debug\n+            // use std::fmt::Display\n+            let segments_to_split = current_path_segments.split_at(prev_len + common).1;\n+            ImportAction::add_nested_import(\n+                prev_len + common,\n+                path,\n+                Some(segments_to_split[0]),\n+                false,\n+            )\n+        }\n         _ => unreachable!(),\n     };\n \n@@ -500,8 +512,6 @@ fn apply_auto_import<'a>(\n \n pub(crate) fn auto_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n     let node = ctx.covering_node();\n-    let current_file = node.ancestors().find_map(ast::SourceFile::cast)?;\n-\n     let path = node.ancestors().find_map(ast::Path::cast)?;\n     // We don't want to mess with use statements\n     if path.syntax().ancestors().find_map(ast::UseItem::cast).is_some() {\n@@ -523,6 +533,7 @@ pub(crate) fn auto_import(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist\n             );\n         }\n     } else {\n+        let current_file = node.ancestors().find_map(ast::SourceFile::cast)?;\n         ctx.add_action(format!(\"import {} in the current file\", fmt_segments(&segments)), |edit| {\n             apply_auto_import(current_file.syntax(), path, &segments, edit);\n         });\n@@ -537,7 +548,7 @@ mod tests {\n     use crate::helpers::{ check_assist, check_assist_not_applicable };\n \n     #[test]\n-    fn test_auto_import_file_add_use_no_anchor() {\n+    fn test_auto_import_add_use_no_anchor() {\n         check_assist(\n             auto_import,\n             \"\n@@ -552,7 +563,7 @@ Debug<|>\n     }\n \n     #[test]\n-    fn test_auto_import_file_add_use_no_anchor_2seg() {\n+    fn test_auto_import_add_use_no_anchor_2seg() {\n         check_assist(\n             auto_import,\n             \"\n@@ -567,7 +578,7 @@ fmt<|>::Debug\n     }\n \n     #[test]\n-    fn test_auto_import_file_add_use() {\n+    fn test_auto_import_add_use() {\n         check_assist(\n             auto_import,\n             \"\n@@ -587,7 +598,7 @@ impl Debug<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_file_add_use_other_anchor() {\n+    fn test_auto_import_file_use_other_anchor() {\n         check_assist(\n             auto_import,\n             \"\n@@ -604,7 +615,7 @@ impl Debug<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_file_add_use_other_anchor_indent() {\n+    fn test_auto_import_add_use_other_anchor_indent() {\n         check_assist(\n             auto_import,\n             \"\n@@ -621,7 +632,7 @@ impl Debug<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_file_split_different() {\n+    fn test_auto_import_split_different() {\n         check_assist(\n             auto_import,\n             \"\n@@ -640,7 +651,7 @@ impl io<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_file_split_self_for_use() {\n+    fn test_auto_import_split_self_for_use() {\n         check_assist(\n             auto_import,\n             \"\n@@ -659,7 +670,7 @@ impl Debug<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_file_split_self_for_target() {\n+    fn test_auto_import_split_self_for_target() {\n         check_assist(\n             auto_import,\n             \"\n@@ -678,7 +689,7 @@ impl fmt<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_file_add_to_nested_self_nested() {\n+    fn test_auto_import_add_to_nested_self_nested() {\n         check_assist(\n             auto_import,\n             \"\n@@ -697,7 +708,7 @@ impl nested<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_file_add_to_nested_self_already_included() {\n+    fn test_auto_import_add_to_nested_self_already_included() {\n         check_assist(\n             auto_import,\n             \"\n@@ -716,7 +727,7 @@ impl nested<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_file_add_to_nested_nested() {\n+    fn test_auto_import_add_to_nested_nested() {\n         check_assist(\n             auto_import,\n             \"\n@@ -735,7 +746,45 @@ impl Debug<|> for Foo {\n     }\n \n     #[test]\n-    fn test_auto_import_file_alias() {\n+    fn test_auto_import_split_common_target_longer() {\n+        check_assist(\n+            auto_import,\n+            \"\n+use std::fmt::Debug;\n+\n+impl std::fmt::nested::Display<|> for Foo {\n+}\n+\",\n+            \"\n+use std::fmt::{ nested::Display, Debug};\n+\n+impl Display<|> for Foo {\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_auto_import_split_common_use_longer() {\n+        check_assist(\n+            auto_import,\n+            \"\n+use std::fmt::nested::Debug;\n+\n+impl std::fmt::Display<|> for Foo {\n+}\n+\",\n+            \"\n+use std::fmt::{ Display, nested::Debug};\n+\n+impl Display<|> for Foo {\n+}\n+\",\n+        );\n+    }\n+\n+    #[test]\n+    fn test_auto_import_alias() {\n         check_assist(\n             auto_import,\n             \"\n@@ -775,7 +824,7 @@ use std::fmt<|>;\n     }\n \n     #[test]\n-    fn test_auto_import_file_add_use_no_anchor_in_mod_mod() {\n+    fn test_auto_import_add_use_no_anchor_in_mod_mod() {\n         check_assist(\n             auto_import,\n             \""}]}