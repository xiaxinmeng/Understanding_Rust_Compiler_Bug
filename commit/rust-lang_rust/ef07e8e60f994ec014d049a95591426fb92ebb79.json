{"sha": "ef07e8e60f994ec014d049a95591426fb92ebb79", "node_id": "C_kwDOAAsO6NoAKGVmMDdlOGU2MGY5OTRlYzAxNGQwNDlhOTU1OTE0MjZmYjkyZWJiNzk", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-02-08T18:09:50Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-04-29T11:27:28Z"}, "message": "Integrate better with Cranelift's profiling infrastructure", "tree": {"sha": "1e5eefc379ac1825a5cd3c3012d149ac434f2bef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e5eefc379ac1825a5cd3c3012d149ac434f2bef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef07e8e60f994ec014d049a95591426fb92ebb79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef07e8e60f994ec014d049a95591426fb92ebb79", "html_url": "https://github.com/rust-lang/rust/commit/ef07e8e60f994ec014d049a95591426fb92ebb79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef07e8e60f994ec014d049a95591426fb92ebb79/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "517b5c1f1bb803d220b6f4c8dc5a1c3918d440ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/517b5c1f1bb803d220b6f4c8dc5a1c3918d440ea", "html_url": "https://github.com/rust-lang/rust/commit/517b5c1f1bb803d220b6f4c8dc5a1c3918d440ea"}], "stats": {"total": 58, "additions": 37, "deletions": 21}, "files": [{"sha": "a259a4f30b27cca87f816fe92f717a2d37648e98", "filename": "src/base.rs", "status": "modified", "additions": 0, "deletions": 21, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/ef07e8e60f994ec014d049a95591426fb92ebb79/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef07e8e60f994ec014d049a95591426fb92ebb79/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=ef07e8e60f994ec014d049a95591426fb92ebb79", "patch": "@@ -172,27 +172,6 @@ pub(crate) fn compile_fn(\n     cx.profiler.generic_activity(\"define function\").run(|| {\n         context.want_disasm = cx.should_write_ir;\n         module.define_function(codegened_func.func_id, context).unwrap();\n-\n-        if cx.profiler.enabled() {\n-            let mut recording_args = false;\n-            cx.profiler\n-                .generic_activity_with_arg_recorder(\n-                    \"define function (clif pass timings)\",\n-                    |recorder| {\n-                        let pass_times = cranelift_codegen::timing::take_current();\n-                        // Replace newlines with | as measureme doesn't allow control characters like\n-                        // newlines inside strings.\n-                        recorder.record_arg(format!(\"{}\", pass_times).replace('\\n', \" | \"));\n-                        recording_args = true;\n-                    },\n-                )\n-                .run(|| {\n-                    if recording_args {\n-                        // Wait a tiny bit to ensure chrome's profiler doesn't hide the event\n-                        std::thread::sleep(std::time::Duration::from_nanos(2))\n-                    }\n-                });\n-        }\n     });\n \n     if cx.should_write_ir {"}, {"sha": "0e6c6ad95aa1ada40c59f4dc5df66c8e6a71b1bb", "filename": "src/driver/aot.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef07e8e60f994ec014d049a95591426fb92ebb79/src%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef07e8e60f994ec014d049a95591426fb92ebb79/src%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Faot.rs?ref=ef07e8e60f994ec014d049a95591426fb92ebb79", "patch": "@@ -324,6 +324,10 @@ fn module_codegen(\n     OngoingModuleCodegen::Async(std::thread::spawn(move || {\n         cx.profiler.clone().verbose_generic_activity_with_arg(\"compile functions\", &*cgu_name).run(\n             || {\n+                cranelift_codegen::timing::set_thread_profiler(Box::new(super::MeasuremeProfiler(\n+                    cx.profiler.clone(),\n+                )));\n+\n                 let mut cached_context = Context::new();\n                 for codegened_func in codegened_functions {\n                     crate::base::compile_fn("}, {"sha": "3118105a4e2d7a26b7abff8ff25b2b2529d4e134", "filename": "src/driver/jit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ef07e8e60f994ec014d049a95591426fb92ebb79/src%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef07e8e60f994ec014d049a95591426fb92ebb79/src%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fjit.rs?ref=ef07e8e60f994ec014d049a95591426fb92ebb79", "patch": "@@ -224,6 +224,10 @@ pub(crate) fn codegen_and_compile_fn<'tcx>(\n     module: &mut dyn Module,\n     instance: Instance<'tcx>,\n ) {\n+    cranelift_codegen::timing::set_thread_profiler(Box::new(super::MeasuremeProfiler(\n+        cx.profiler.clone(),\n+    )));\n+\n     tcx.prof.generic_activity(\"codegen and compile fn\").run(|| {\n         let _inst_guard =\n             crate::PrintOnPanic(|| format!(\"{:?} {}\", instance, tcx.symbol_name(instance).name));"}, {"sha": "5c52c9c18adfde49e1c60b56f909146bbce98732", "filename": "src/driver/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/ef07e8e60f994ec014d049a95591426fb92ebb79/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef07e8e60f994ec014d049a95591426fb92ebb79/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=ef07e8e60f994ec014d049a95591426fb92ebb79", "patch": "@@ -4,6 +4,7 @@\n //! [`codegen_fn`]: crate::base::codegen_fn\n //! [`codegen_static`]: crate::constant::codegen_static\n \n+use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_middle::mir::mono::{Linkage as RLinkage, MonoItem, Visibility};\n \n use crate::prelude::*;\n@@ -39,3 +40,31 @@ fn predefine_mono_items<'tcx>(\n         }\n     });\n }\n+\n+struct MeasuremeProfiler(SelfProfilerRef);\n+\n+struct TimingGuard {\n+    profiler: std::mem::ManuallyDrop<SelfProfilerRef>,\n+    inner: Option<rustc_data_structures::profiling::TimingGuard<'static>>,\n+}\n+\n+impl Drop for TimingGuard {\n+    fn drop(&mut self) {\n+        self.inner.take();\n+        unsafe {\n+            std::mem::ManuallyDrop::drop(&mut self.profiler);\n+        }\n+    }\n+}\n+\n+impl cranelift_codegen::timing::Profiler for MeasuremeProfiler {\n+    fn start_pass(&self, pass: cranelift_codegen::timing::Pass) -> Box<dyn std::any::Any> {\n+        let mut timing_guard =\n+            TimingGuard { profiler: std::mem::ManuallyDrop::new(self.0.clone()), inner: None };\n+        timing_guard.inner = Some(\n+            unsafe { &*(&*timing_guard.profiler as &SelfProfilerRef as *const SelfProfilerRef) }\n+                .generic_activity(pass.description()),\n+        );\n+        Box::new(timing_guard)\n+    }\n+}"}]}