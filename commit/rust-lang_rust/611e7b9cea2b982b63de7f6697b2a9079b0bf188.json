{"sha": "611e7b9cea2b982b63de7f6697b2a9079b0bf188", "node_id": "C_kwDOAAsO6NoAKDYxMWU3YjljZWEyYjk4MmI2M2RlN2Y2Njk3YjJhOTA3OWIwYmYxODg", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-19T22:22:07Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-19T22:22:07Z"}, "message": "Auto merge of #97268 - jyn514:faster-assemble, r=Mark-Simulacrum\n\nMake \"Assemble stage1 compiler\" orders of magnitude faster (take 2)\n\nThis used to take upwards of 5 seconds for me locally. I found that the culprit was copying the downloaded LLVM shared object:\n```\n[22:28:03] Install \"/home/jnelson/rust-lang/rust/build/x86_64-unknown-linux-gnu/ci-llvm/lib/libLLVM-14-rust-1.62.0-nightly.so\" to \"/home/jnelson/rust-lang/rust/build/x86_64-unknown-linux-gnu/stage1/lib/rustlib/x86_64-unknown-linux-gnu/lib/libLLVM-14-rust-1.62.0-nightly.so\"\n[22:28:09]   c Sysroot { compiler: Compiler { stage: 1, host: x86_64-unknown-linux-gnu(x86_64-unknown-linux-gnu) } }\n```\n\nIt turned out that `install()` used full copies unconditionally. Change it to try using a hard-link before falling back to copying.\n\n- Panic if we generate a symbolic link in a tarball\n- Change install to use copy internally, like in my previous PR\n- Change copy to dereference symbolic links, which avoids the previous regression in #96803.\n\nI also took the liberty of fixing `x dist llvm-tools` to work even if you don't call `x build` previously.", "tree": {"sha": "c3448ee402d72d6b595bea149096065dd82d996c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c3448ee402d72d6b595bea149096065dd82d996c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/611e7b9cea2b982b63de7f6697b2a9079b0bf188", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/611e7b9cea2b982b63de7f6697b2a9079b0bf188", "html_url": "https://github.com/rust-lang/rust/commit/611e7b9cea2b982b63de7f6697b2a9079b0bf188", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/611e7b9cea2b982b63de7f6697b2a9079b0bf188/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb8c2f41174caceec00c28bc6c5c20ae9f9a175c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb8c2f41174caceec00c28bc6c5c20ae9f9a175c", "html_url": "https://github.com/rust-lang/rust/commit/bb8c2f41174caceec00c28bc6c5c20ae9f9a175c"}, {"sha": "057eab7ae96ee491f8939e52722b6c29ce3cc445", "url": "https://api.github.com/repos/rust-lang/rust/commits/057eab7ae96ee491f8939e52722b6c29ce3cc445", "html_url": "https://github.com/rust-lang/rust/commit/057eab7ae96ee491f8939e52722b6c29ce3cc445"}], "stats": {"total": 67, "additions": 47, "deletions": 20}, "files": [{"sha": "1ca6ce25ba151c50c395586dc02e8578c52ac220", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/611e7b9cea2b982b63de7f6697b2a9079b0bf188/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/611e7b9cea2b982b63de7f6697b2a9079b0bf188/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=611e7b9cea2b982b63de7f6697b2a9079b0bf188", "patch": "@@ -236,6 +236,7 @@ dependencies = [\n  \"sysinfo\",\n  \"tar\",\n  \"toml\",\n+ \"walkdir\",\n  \"winapi\",\n  \"xz2\",\n ]"}, {"sha": "ed5c59a259522f783cc5789979e3a2af02d996ed", "filename": "src/bootstrap/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/611e7b9cea2b982b63de7f6697b2a9079b0bf188/src%2Fbootstrap%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/611e7b9cea2b982b63de7f6697b2a9079b0bf188/src%2Fbootstrap%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2FCargo.toml?ref=611e7b9cea2b982b63de7f6697b2a9079b0bf188", "patch": "@@ -51,6 +51,7 @@ ignore = \"0.4.10\"\n opener = \"0.5\"\n once_cell = \"1.7.2\"\n xz2 = \"0.1\"\n+walkdir = \"2\"\n \n # Dependencies needed by the build-metrics feature\n sysinfo = { version = \"0.24.1\", optional = true }"}, {"sha": "b1fae356d89310659d9036cc33a3ddf2fe56daa7", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/611e7b9cea2b982b63de7f6697b2a9079b0bf188/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/611e7b9cea2b982b63de7f6697b2a9079b0bf188/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=611e7b9cea2b982b63de7f6697b2a9079b0bf188", "patch": "@@ -845,7 +845,12 @@ impl Step for PlainSourceTarball {\n \n     /// Creates the plain source tarball\n     fn run(self, builder: &Builder<'_>) -> GeneratedTarball {\n-        let tarball = Tarball::new(builder, \"rustc\", \"src\");\n+        // NOTE: This is a strange component in a lot of ways. It uses `src` as the target, which\n+        // means neither rustup nor rustup-toolchain-install-master know how to download it.\n+        // It also contains symbolic links, unlike other any other dist tarball.\n+        // It's used for distros building rustc from source in a pre-vendored environment.\n+        let mut tarball = Tarball::new(builder, \"rustc\", \"src\");\n+        tarball.permit_symlinks(true);\n         let plain_dst_src = tarball.image_dir();\n \n         // This is the set of root paths which will become part of the source package\n@@ -1847,7 +1852,6 @@ fn add_env(builder: &Builder<'_>, cmd: &mut Command, target: TargetSelection) {\n \n /// Maybe add LLVM object files to the given destination lib-dir. Allows either static or dynamic linking.\n ///\n-\n /// Returns whether the files were actually copied.\n fn maybe_install_llvm(builder: &Builder<'_>, target: TargetSelection, dst_libdir: &Path) -> bool {\n     if let Some(config) = builder.config.target_config.get(&target) {\n@@ -1957,6 +1961,8 @@ impl Step for LlvmTools {\n             }\n         }\n \n+        builder.ensure(crate::native::Llvm { target });\n+\n         let mut tarball = Tarball::new(builder, \"llvm-tools\", &target.triple);\n         tarball.set_overlay(OverlayKind::LLVM);\n         tarball.is_preview(true);"}, {"sha": "4ac857b470e806b772c3d598d01892456cc65b02", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/611e7b9cea2b982b63de7f6697b2a9079b0bf188/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/611e7b9cea2b982b63de7f6697b2a9079b0bf188/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=611e7b9cea2b982b63de7f6697b2a9079b0bf188", "patch": "@@ -1427,6 +1427,10 @@ impl Build {\n \n     /// Copies a file from `src` to `dst`\n     pub fn copy(&self, src: &Path, dst: &Path) {\n+        self.copy_internal(src, dst, false);\n+    }\n+\n+    fn copy_internal(&self, src: &Path, dst: &Path, dereference_symlinks: bool) {\n         if self.config.dry_run {\n             return;\n         }\n@@ -1436,15 +1440,22 @@ impl Build {\n         }\n         let _ = fs::remove_file(&dst);\n         let metadata = t!(src.symlink_metadata());\n+        let mut src = src.to_path_buf();\n         if metadata.file_type().is_symlink() {\n-            let link = t!(fs::read_link(src));\n-            t!(symlink_file(link, dst));\n-        } else if let Ok(()) = fs::hard_link(src, dst) {\n+            if dereference_symlinks {\n+                src = t!(fs::canonicalize(src));\n+            } else {\n+                let link = t!(fs::read_link(src));\n+                t!(symlink_file(link, dst));\n+                return;\n+            }\n+        }\n+        if let Ok(()) = fs::hard_link(&src, dst) {\n             // Attempt to \"easy copy\" by creating a hard link\n             // (symlinks don't work on windows), but if that fails\n             // just fall back to a slow `copy` operation.\n         } else {\n-            if let Err(e) = fs::copy(src, dst) {\n+            if let Err(e) = fs::copy(&src, dst) {\n                 panic!(\"failed to copy `{}` to `{}`: {}\", src.display(), dst.display(), e)\n             }\n             t!(fs::set_permissions(dst, metadata.permissions()));\n@@ -1516,20 +1527,10 @@ impl Build {\n         let dst = dstdir.join(src.file_name().unwrap());\n         self.verbose_than(1, &format!(\"Install {:?} to {:?}\", src, dst));\n         t!(fs::create_dir_all(dstdir));\n-        drop(fs::remove_file(&dst));\n-        {\n-            if !src.exists() {\n-                panic!(\"Error: File \\\"{}\\\" not found!\", src.display());\n-            }\n-            let metadata = t!(src.symlink_metadata());\n-            if let Err(e) = fs::copy(&src, &dst) {\n-                panic!(\"failed to copy `{}` to `{}`: {}\", src.display(), dst.display(), e)\n-            }\n-            t!(fs::set_permissions(&dst, metadata.permissions()));\n-            let atime = FileTime::from_last_access_time(&metadata);\n-            let mtime = FileTime::from_last_modification_time(&metadata);\n-            t!(filetime::set_file_times(&dst, atime, mtime));\n+        if !src.exists() {\n+            panic!(\"Error: File \\\"{}\\\" not found!\", src.display());\n         }\n+        self.copy_internal(src, &dst, true);\n         chmod(&dst, perms);\n     }\n "}, {"sha": "7b0c029c1912106526871f29f17d034a99bdb354", "filename": "src/bootstrap/tarball.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/611e7b9cea2b982b63de7f6697b2a9079b0bf188/src%2Fbootstrap%2Ftarball.rs", "raw_url": "https://github.com/rust-lang/rust/raw/611e7b9cea2b982b63de7f6697b2a9079b0bf188/src%2Fbootstrap%2Ftarball.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftarball.rs?ref=611e7b9cea2b982b63de7f6697b2a9079b0bf188", "patch": "@@ -102,6 +102,7 @@ pub(crate) struct Tarball<'a> {\n \n     include_target_in_component_name: bool,\n     is_preview: bool,\n+    permit_symlinks: bool,\n }\n \n impl<'a> Tarball<'a> {\n@@ -141,6 +142,7 @@ impl<'a> Tarball<'a> {\n \n             include_target_in_component_name: false,\n             is_preview: false,\n+            permit_symlinks: false,\n         }\n     }\n \n@@ -160,6 +162,10 @@ impl<'a> Tarball<'a> {\n         self.is_preview = is;\n     }\n \n+    pub(crate) fn permit_symlinks(&mut self, flag: bool) {\n+        self.permit_symlinks = flag;\n+    }\n+\n     pub(crate) fn image_dir(&self) -> &Path {\n         t!(std::fs::create_dir_all(&self.image_dir));\n         &self.image_dir\n@@ -316,6 +322,18 @@ impl<'a> Tarball<'a> {\n         }\n         self.builder.run(&mut cmd);\n \n+        // Ensure there are no symbolic links in the tarball. In particular,\n+        // rustup-toolchain-install-master and most versions of Windows can't handle symbolic links.\n+        let decompressed_output = self.temp_dir.join(&package_name);\n+        if !self.builder.config.dry_run && !self.permit_symlinks {\n+            for entry in walkdir::WalkDir::new(&decompressed_output) {\n+                let entry = t!(entry);\n+                if entry.path_is_symlink() {\n+                    panic!(\"generated a symlink in a tarball: {}\", entry.path().display());\n+                }\n+            }\n+        }\n+\n         // Use either the first compression format defined, or \"gz\" as the default.\n         let ext = self\n             .builder\n@@ -328,7 +346,7 @@ impl<'a> Tarball<'a> {\n \n         GeneratedTarball {\n             path: crate::dist::distdir(self.builder).join(format!(\"{}.tar.{}\", package_name, ext)),\n-            decompressed_output: self.temp_dir.join(package_name),\n+            decompressed_output,\n             work: self.temp_dir,\n         }\n     }"}]}