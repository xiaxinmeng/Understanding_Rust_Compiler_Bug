{"sha": "17d78c4ef922f81e752feb077d66fbce80630c6c", "node_id": "C_kwDOAAsO6NoAKDE3ZDc4YzRlZjkyMmY4MWU3NTJmZWIwNzdkNjZmYmNlODA2MzBjNmM", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-06T11:36:07Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-10-06T11:51:10Z"}, "message": "poll_fn and Unpin: fix pinning", "tree": {"sha": "6a76e8603e707d9f1fbd088890ac482e88975e7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a76e8603e707d9f1fbd088890ac482e88975e7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17d78c4ef922f81e752feb077d66fbce80630c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17d78c4ef922f81e752feb077d66fbce80630c6c", "html_url": "https://github.com/rust-lang/rust/commit/17d78c4ef922f81e752feb077d66fbce80630c6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17d78c4ef922f81e752feb077d66fbce80630c6c/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0", "html_url": "https://github.com/rust-lang/rust/commit/c97d02cdb5ca5f5e9eff1fa9e4560d220d1fd2a0"}], "stats": {"total": 11, "additions": 7, "deletions": 4}, "files": [{"sha": "90cb797391a0839d7ad1fad357abbb477b8e05fa", "filename": "library/core/src/future/poll_fn.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/17d78c4ef922f81e752feb077d66fbce80630c6c/library%2Fcore%2Fsrc%2Ffuture%2Fpoll_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17d78c4ef922f81e752feb077d66fbce80630c6c/library%2Fcore%2Fsrc%2Ffuture%2Fpoll_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffuture%2Fpoll_fn.rs?ref=17d78c4ef922f81e752feb077d66fbce80630c6c", "patch": "@@ -5,7 +5,9 @@ use crate::task::{Context, Poll};\n \n /// Creates a future that wraps a function returning [`Poll`].\n ///\n-/// Polling the future delegates to the wrapped function.\n+/// Polling the future delegates to the wrapped function. If the returned future is pinned, then the\n+/// captured environment of the wrapped function is also pinned in-place, so as long as the closure\n+/// does not move out of its captures it can soundly create pinned references to them.\n ///\n /// # Examples\n ///\n@@ -41,7 +43,7 @@ pub struct PollFn<F> {\n }\n \n #[stable(feature = \"future_poll_fn\", since = \"1.64.0\")]\n-impl<F> Unpin for PollFn<F> {}\n+impl<F: Unpin> Unpin for PollFn<F> {}\n \n #[stable(feature = \"future_poll_fn\", since = \"1.64.0\")]\n impl<F> fmt::Debug for PollFn<F> {\n@@ -57,7 +59,8 @@ where\n {\n     type Output = T;\n \n-    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<T> {\n-        (&mut self.f)(cx)\n+    fn poll(self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<T> {\n+        // SAFETY: We are not moving out of the pinned field.\n+        (unsafe { &mut self.get_unchecked_mut().f })(cx)\n     }\n }"}]}