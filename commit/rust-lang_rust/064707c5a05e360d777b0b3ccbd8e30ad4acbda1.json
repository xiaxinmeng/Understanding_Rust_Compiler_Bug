{"sha": "064707c5a05e360d777b0b3ccbd8e30ad4acbda1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2NDcwN2M1YTA1ZTM2MGQ3NzdiMGIzY2NiZDhlMzBhZDRhY2JkYTE=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-03-06T19:40:42Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-03-06T19:40:42Z"}, "message": "Use source map", "tree": {"sha": "6d7d8c3e6ccc95a7f9a7c4398516393ff2786623", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d7d8c3e6ccc95a7f9a7c4398516393ff2786623"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/064707c5a05e360d777b0b3ccbd8e30ad4acbda1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/064707c5a05e360d777b0b3ccbd8e30ad4acbda1", "html_url": "https://github.com/rust-lang/rust/commit/064707c5a05e360d777b0b3ccbd8e30ad4acbda1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/064707c5a05e360d777b0b3ccbd8e30ad4acbda1/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aac421b1351d6c6dddb37a92a33d929b79ed1d70", "url": "https://api.github.com/repos/rust-lang/rust/commits/aac421b1351d6c6dddb37a92a33d929b79ed1d70", "html_url": "https://github.com/rust-lang/rust/commit/aac421b1351d6c6dddb37a92a33d929b79ed1d70"}], "stats": {"total": 25, "additions": 10, "deletions": 15}, "files": [{"sha": "a6e744ea70e1d5b540f8f98253a86d092332c85c", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/064707c5a05e360d777b0b3ccbd8e30ad4acbda1/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/064707c5a05e360d777b0b3ccbd8e30ad4acbda1/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=064707c5a05e360d777b0b3ccbd8e30ad4acbda1", "patch": "@@ -60,7 +60,7 @@ pub use self::{\n     impl_block::{ImplBlock, ImplItem},\n     docs::{Docs, Documentation},\n     adt::AdtDef,\n-    expr::{ExprScopes, ScopesWithSourceMap, ScopeEntryWithSyntax, Pat},\n+    expr::{ExprScopes, ScopesWithSourceMap, ScopeEntryWithSyntax},\n     resolve::{Resolver, Resolution},\n };\n "}, {"sha": "dd5f9f31c9afc77e385ef752145d4e4bff309bd3", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/064707c5a05e360d777b0b3ccbd8e30ad4acbda1/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/064707c5a05e360d777b0b3ccbd8e30ad4acbda1/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=064707c5a05e360d777b0b3ccbd8e30ad4acbda1", "patch": "@@ -5,7 +5,7 @@ use ra_syntax::{\n     SyntaxNode,\n };\n use test_utils::tested_by;\n-use hir::{Pat, Resolution};\n+use hir::Resolution;\n \n use crate::{FilePosition, NavigationTarget, db::RootDatabase, RangeInfo};\n \n@@ -149,20 +149,15 @@ pub(crate) fn reference_definition(\n                         name_ref.syntax().ancestors().find_map(ast::PathPat::cast)\n                     {\n                         let infer_result = function.infer(db);\n+                        let source_map = function.body_source_map(db);\n \n-                        if let Some(p) = path_pat.path().and_then(hir::Path::from_ast) {\n-                            if let Some(pat_id) =\n-                                function.body(db).pats().find_map(|(pat_id, pat)| match pat {\n-                                    Pat::Path(ref path) if *path == p => Some(pat_id),\n-                                    _ => None,\n-                                })\n-                            {\n-                                if let Some(res) =\n-                                    infer_result.assoc_resolutions_for_pat(pat_id.into())\n-                                {\n-                                    return Exact(NavigationTarget::from_impl_item(db, res));\n-                                }\n-                            }\n+                        let pat: &ast::Pat = path_pat.into();\n+\n+                        if let Some(res) = source_map\n+                            .node_pat(pat)\n+                            .and_then(|it| infer_result.assoc_resolutions_for_pat(it.into()))\n+                        {\n+                            return Exact(NavigationTarget::from_impl_item(db, res));\n                         }\n                     }\n                 }"}]}