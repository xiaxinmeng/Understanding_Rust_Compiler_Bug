{"sha": "8453097dd52f6fdd6a710c382978af02d7f55844", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0NTMwOTdkZDUyZjZmZGQ2YTcxMGMzODI5NzhhZjAyZDdmNTU4NDQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-27T21:09:47Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-08-27T21:10:55Z"}, "message": "remove ipv4 match which looks like it was... purposeless", "tree": {"sha": "eff62114cb956da246a503c332b1db6bb757ada3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eff62114cb956da246a503c332b1db6bb757ada3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8453097dd52f6fdd6a710c382978af02d7f55844", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8453097dd52f6fdd6a710c382978af02d7f55844", "html_url": "https://github.com/rust-lang/rust/commit/8453097dd52f6fdd6a710c382978af02d7f55844", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8453097dd52f6fdd6a710c382978af02d7f55844/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6d788198d784c126ca75475f5a0178722db82d56", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d788198d784c126ca75475f5a0178722db82d56", "html_url": "https://github.com/rust-lang/rust/commit/6d788198d784c126ca75475f5a0178722db82d56"}], "stats": {"total": 112, "additions": 54, "deletions": 58}, "files": [{"sha": "7ffe5b42f9f0042ccf02e9123b74b388f706daa9", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 54, "deletions": 58, "changes": 112, "blob_url": "https://github.com/rust-lang/rust/blob/8453097dd52f6fdd6a710c382978af02d7f55844/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8453097dd52f6fdd6a710c382978af02d7f55844/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=8453097dd52f6fdd6a710c382978af02d7f55844", "patch": "@@ -152,64 +152,60 @@ fn connect(-input_ip: ip::ip_addr, port: uint,\n         match uv::ll::tcp_init( loop_ptr, stream_handle_ptr) {\n           0i32 => {\n             log(debug, ~\"tcp_init successful\");\n-            match input_ip {\n-              _ipv4 => {\n-                log(debug, ~\"dealing w/ ipv4 connection..\");\n-                let connect_req_ptr =\n-                    ptr::addr_of((*socket_data_ptr).connect_req);\n-                let addr_str = ip::format_addr(input_ip);\n-                let connect_result = match input_ip {\n-                  ip::ipv4(addr) => {\n-                    // have to \"recreate\" the sockaddr_in/6\n-                    // since the ip_addr discards the port\n-                    // info.. should probably add an additional\n-                    // rust type that actually is closer to\n-                    // what the libuv API expects (ip str + port num)\n-                    log(debug, fmt!(\"addr: %?\", addr));\n-                    let in_addr = uv::ll::ip4_addr(addr_str, port as int);\n-                    uv::ll::tcp_connect(\n-                        connect_req_ptr,\n-                        stream_handle_ptr,\n-                        ptr::addr_of(in_addr),\n-                        tcp_connect_on_connect_cb)\n-                  }\n-                  ip::ipv6(addr) => {\n-                    log(debug, fmt!(\"addr: %?\", addr));\n-                    let in_addr = uv::ll::ip6_addr(addr_str, port as int);\n-                    uv::ll::tcp_connect6(\n-                        connect_req_ptr,\n-                        stream_handle_ptr,\n-                        ptr::addr_of(in_addr),\n-                        tcp_connect_on_connect_cb)\n-                  }\n-                };\n-                match connect_result {\n-                  0i32 => {\n-                    log(debug, ~\"tcp_connect successful\");\n-                    // reusable data that we'll have for the\n-                    // duration..\n-                    uv::ll::set_data_for_uv_handle(stream_handle_ptr,\n-                                               socket_data_ptr as\n-                                                  *libc::c_void);\n-                    // just so the connect_cb can send the\n-                    // outcome..\n-                    uv::ll::set_data_for_req(connect_req_ptr,\n-                                             conn_data_ptr);\n-                    log(debug, ~\"leaving tcp_connect interact cb...\");\n-                    // let tcp_connect_on_connect_cb send on\n-                    // the result_ch, now..\n-                  }\n-                  _ => {\n-                    // immediate connect failure.. probably a garbage\n-                    // ip or somesuch\n-                    let err_data = uv::ll::get_last_err_data(loop_ptr);\n-                    core::comm::send((*conn_data_ptr).result_ch,\n-                               conn_failure(err_data.to_tcp_err()));\n-                    uv::ll::set_data_for_uv_handle(stream_handle_ptr,\n-                                                   conn_data_ptr);\n-                    uv::ll::close(stream_handle_ptr, stream_error_close_cb);\n-                  }\n-                }\n+            log(debug, ~\"dealing w/ ipv4 connection..\");\n+            let connect_req_ptr =\n+                ptr::addr_of((*socket_data_ptr).connect_req);\n+            let addr_str = ip::format_addr(input_ip);\n+            let connect_result = match input_ip {\n+              ip::ipv4(addr) => {\n+                // have to \"recreate\" the sockaddr_in/6\n+                // since the ip_addr discards the port\n+                // info.. should probably add an additional\n+                // rust type that actually is closer to\n+                // what the libuv API expects (ip str + port num)\n+                log(debug, fmt!(\"addr: %?\", addr));\n+                let in_addr = uv::ll::ip4_addr(addr_str, port as int);\n+                uv::ll::tcp_connect(\n+                    connect_req_ptr,\n+                    stream_handle_ptr,\n+                    ptr::addr_of(in_addr),\n+                    tcp_connect_on_connect_cb)\n+              }\n+              ip::ipv6(addr) => {\n+                log(debug, fmt!(\"addr: %?\", addr));\n+                let in_addr = uv::ll::ip6_addr(addr_str, port as int);\n+                uv::ll::tcp_connect6(\n+                    connect_req_ptr,\n+                    stream_handle_ptr,\n+                    ptr::addr_of(in_addr),\n+                    tcp_connect_on_connect_cb)\n+              }\n+            };\n+            match connect_result {\n+              0i32 => {\n+                log(debug, ~\"tcp_connect successful\");\n+                // reusable data that we'll have for the\n+                // duration..\n+                uv::ll::set_data_for_uv_handle(stream_handle_ptr,\n+                                           socket_data_ptr as\n+                                              *libc::c_void);\n+                // just so the connect_cb can send the\n+                // outcome..\n+                uv::ll::set_data_for_req(connect_req_ptr,\n+                                         conn_data_ptr);\n+                log(debug, ~\"leaving tcp_connect interact cb...\");\n+                // let tcp_connect_on_connect_cb send on\n+                // the result_ch, now..\n+              }\n+              _ => {\n+                // immediate connect failure.. probably a garbage\n+                // ip or somesuch\n+                let err_data = uv::ll::get_last_err_data(loop_ptr);\n+                core::comm::send((*conn_data_ptr).result_ch,\n+                           conn_failure(err_data.to_tcp_err()));\n+                uv::ll::set_data_for_uv_handle(stream_handle_ptr,\n+                                               conn_data_ptr);\n+                uv::ll::close(stream_handle_ptr, stream_error_close_cb);\n               }\n             }\n         }"}]}