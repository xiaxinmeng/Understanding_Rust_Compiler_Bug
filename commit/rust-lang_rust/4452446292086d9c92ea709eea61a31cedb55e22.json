{"sha": "4452446292086d9c92ea709eea61a31cedb55e22", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0NTI0NDYyOTIwODZkOWM5MmVhNzA5ZWVhNjFhMzFjZWRiNTVlMjI=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2018-02-16T14:56:50Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2018-02-17T16:38:49Z"}, "message": "fix more typos found by codespell.", "tree": {"sha": "261a9b2a1b4fb4468673a71fbe774ee84527599f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/261a9b2a1b4fb4468673a71fbe774ee84527599f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4452446292086d9c92ea709eea61a31cedb55e22", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4452446292086d9c92ea709eea61a31cedb55e22", "html_url": "https://github.com/rust-lang/rust/commit/4452446292086d9c92ea709eea61a31cedb55e22", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4452446292086d9c92ea709eea61a31cedb55e22/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b298607864b76ea6b7b7a4b8bb482472f1604c8d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b298607864b76ea6b7b7a4b8bb482472f1604c8d", "html_url": "https://github.com/rust-lang/rust/commit/b298607864b76ea6b7b7a4b8bb482472f1604c8d"}], "stats": {"total": 178, "additions": 89, "deletions": 89}, "files": [{"sha": "64e2145e0f37b444953dfef48c7f1f28f6f69cfd", "filename": "RELEASES.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/RELEASES.md", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/RELEASES.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/RELEASES.md?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -29,7 +29,7 @@ Libraries\n - [Copied `AsciiExt` methods onto `char`][46077]\n - [Remove `T: Sized` requirement on `ptr::is_null()`][46094]\n - [impl `From<RecvError>` for `{TryRecvError, RecvTimeoutError}`][45506]\n-- [Optimised `f32::{min, max}` to generate more efficent x86 assembly][47080]\n+- [Optimised `f32::{min, max}` to generate more efficient x86 assembly][47080]\n - [`[u8]::contains` now uses memchr which provides a 3x speed improvement][46713]\n \n Stabilized APIs"}, {"sha": "8d1fa3eec5cf2df5d484cd51539293a5914a5c93", "filename": "config.toml.example", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/config.toml.example", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/config.toml.example", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/config.toml.example?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -151,8 +151,8 @@\n # default.\n #extended = false\n \n-# Installs choosen set of extended tools if enables. By default builds all.\n-# If choosen tool failed to build the installation fails.\n+# Installs chosen set of extended tools if enables. By default builds all.\n+# If chosen tool failed to build the installation fails.\n #tools = [\"cargo\", \"rls\", \"rustfmt\", \"analysis\", \"src\"]\n \n # Verbosity level: 0 == not verbose, 1 == verbose, 2 == very verbose"}, {"sha": "7b48566276029b10822e29a52e0afb22131cf776", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -935,7 +935,7 @@ impl Step for Compiletest {\n             }\n         }\n         if suite == \"run-make\" && !build.config.llvm_enabled {\n-            println!(\"Ignoring run-make test suite as they generally dont work without LLVM\");\n+            println!(\"Ignoring run-make test suite as they generally don't work without LLVM\");\n             return;\n         }\n "}, {"sha": "287516474d49a55865f9fae16a265c88deeea1bc", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -1891,7 +1891,7 @@ is a function pointer, which is not zero-sized.\n This pattern should be rewritten. There are a few possible ways to do this:\n \n - change the original fn declaration to match the expected signature,\n-  and do the cast in the fn body (the prefered option)\n+  and do the cast in the fn body (the preferred option)\n - cast the fn item fo a fn pointer before calling transmute, as shown here:\n \n     ```"}, {"sha": "bc03f7ead8187ddf475796e64aa35a41124b945c", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -543,7 +543,7 @@ impl Generics {\n }\n \n /// Synthetic Type Parameters are converted to an other form during lowering, this allows\n-/// to track the original form they had. Usefull for error messages.\n+/// to track the original form they had. Useful for error messages.\n #[derive(Copy, Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum SyntheticTyParamKind {\n     ImplTrait"}, {"sha": "700d06acf11a4520ea85090b60124c6a89cc3e25", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -734,7 +734,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            // When finding T != &T, hightlight only the borrow\n+            // When finding T != &T, highlight only the borrow\n             (&ty::TyRef(r1, ref tnm1), _) if equals(&tnm1.ty, &t2) => {\n                 let mut values = (DiagnosticStyledString::new(), DiagnosticStyledString::new());\n                 push_ty_ref(&r1, tnm1, &mut values.0);\n@@ -946,7 +946,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                         let type_param = generics.type_param(param, self.tcx);\n                         let hir = &self.tcx.hir;\n                         hir.as_local_node_id(type_param.def_id).map(|id| {\n-                            // Get the `hir::TyParam` to verify wether it already has any bounds.\n+                            // Get the `hir::TyParam` to verify whether it already has any bounds.\n                             // We do this to avoid suggesting code that ends up as `T: 'a'b`,\n                             // instead we suggest `T: 'a + 'b` in that case.\n                             let has_lifetimes = if let hir_map::NodeTyParam(ref p) = hir.get(id) {"}, {"sha": "36e657f78b4b2e74dd4d35406b2798c34e5988f0", "filename": "src/librustc/infer/outlives/obligations.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Foutlives%2Fobligations.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -106,7 +106,7 @@ impl<'cx, 'gcx, 'tcx> InferCtxt<'cx, 'gcx, 'tcx> {\n     /// done (or else an assert will fire).\n     ///\n     /// See the `region_obligations` field of `InferCtxt` for some\n-    /// comments about how this funtion fits into the overall expected\n+    /// comments about how this function fits into the overall expected\n     /// flow of the the inferencer. The key point is that it is\n     /// invoked after all type-inference variables have been bound --\n     /// towards the end of regionck. This also ensures that the"}, {"sha": "95f9c8c835398e5ef09e15d9fa18a5cabb48b5d5", "filename": "src/librustc/infer/region_constraints/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Finfer%2Fregion_constraints%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Finfer%2Fregion_constraints%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_constraints%2FREADME.md?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -19,7 +19,7 @@ The constraints are always of one of three possible forms:\n   a subregion of Rj\n - `ConstrainRegSubVar(R, Ri)` states that the concrete region R (which\n   must not be a variable) must be a subregion of the variable Ri\n-- `ConstrainVarSubReg(Ri, R)` states the variable Ri shoudl be less\n+- `ConstrainVarSubReg(Ri, R)` states the variable Ri should be less\n   than the concrete region R. This is kind of deprecated and ought to\n   be replaced with a verify (they essentially play the same role).\n "}, {"sha": "3ce4ab04777ca9e886aca8188a9b71c15dddb5e1", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -886,7 +886,7 @@ fn resolve_block<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>, blk:\n     //\n     // Each of the statements within the block is a terminating\n     // scope, and thus a temporary (e.g. the result of calling\n-    // `bar()` in the initalizer expression for `let inner = ...;`)\n+    // `bar()` in the initializer expression for `let inner = ...;`)\n     // will be cleaned up immediately after its corresponding\n     // statement (i.e. `let inner = ...;`) executes.\n     //"}, {"sha": "a80695ec9b987c2651b0a673522f0b79828b184b", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -56,7 +56,7 @@ pub struct GlobalId<'tcx> {\n ////////////////////////////////////////////////////////////////////////////////\n \n pub trait PointerArithmetic: layout::HasDataLayout {\n-    // These are not supposed to be overriden.\n+    // These are not supposed to be overridden.\n \n     //// Trunace the given value to the pointer size; also return whether there was an overflow\n     fn truncate_to_ptr(self, val: u128) -> (u64, bool) {"}, {"sha": "b88dea871ce67a91462c47ff74e7c17598f4ac2a", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -1950,7 +1950,7 @@ pub struct GeneratorLayout<'tcx> {\n /// ```\n ///\n /// here, there is one unique free region (`'a`) but it appears\n-/// twice. We would \"renumber\" each occurence to a unique vid, as follows:\n+/// twice. We would \"renumber\" each occurrence to a unique vid, as follows:\n ///\n /// ```text\n /// ClosureSubsts = ["}, {"sha": "7311b47974ac539bf25e72bc8a5f2120084559fe", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -277,7 +277,7 @@ pub fn orphan_check<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n ///     is bad, because the only local type with `T` as a subtree is\n ///     `LocalType<T>`, and `Vec<->` is between it and the type parameter.\n ///     - similarly, `FundamentalPair<LocalType<T>, T>` is bad, because\n-///     the second occurence of `T` is not a subtree of *any* local type.\n+///     the second occurrence of `T` is not a subtree of *any* local type.\n ///     - however, `LocalType<Vec<T>>` is OK, because `T` is a subtree of\n ///     `LocalType<Vec<T>>`, which is local and has no types between it and\n ///     the type parameter."}, {"sha": "41cc8ca601ac067df4bd161a5eb000d98192427f", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -621,7 +621,7 @@ pub fn fully_normalize<'a, 'gcx, 'tcx, T>(infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n     // FIXME (@jroesch) ISSUE 26721\n     // I'm not sure if this is a bug or not, needs further investigation.\n     // It appears that by reusing the fulfillment_cx here we incur more\n-    // obligations and later trip an asssertion on regionck.rs line 337.\n+    // obligations and later trip an assertion on regionck.rs line 337.\n     //\n     // The two possibilities I see is:\n     //      - normalization is not actually fully happening and we"}, {"sha": "c3cd65230bd86114530f49b73ebd9410dd59298d", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -2059,7 +2059,7 @@ impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n         // can however trigger recursive invocations of `layout_of`.\n         // Therefore, we execute it *after* the main query has\n         // completed, to avoid problems around recursive structures\n-        // and the like. (Admitedly, I wasn't able to reproduce a problem\n+        // and the like. (Admittedly, I wasn't able to reproduce a problem\n         // here, but it seems like the right thing to do. -nmatsakis)\n         self.record_layout_for_printing(layout);\n \n@@ -2085,7 +2085,7 @@ impl<'a, 'tcx> LayoutOf<Ty<'tcx>> for LayoutCx<'tcx, ty::maps::TyCtxtAt<'a, 'tcx\n         // can however trigger recursive invocations of `layout_of`.\n         // Therefore, we execute it *after* the main query has\n         // completed, to avoid problems around recursive structures\n-        // and the like. (Admitedly, I wasn't able to reproduce a problem\n+        // and the like. (Admittedly, I wasn't able to reproduce a problem\n         // here, but it seems like the right thing to do. -nmatsakis)\n         let cx = LayoutCx {\n             tcx: *self.tcx,"}, {"sha": "ff46ee79c31d02f28adb74656196fc8b426e7a61", "filename": "src/librustc_apfloat/tests/ieee.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_apfloat%2Ftests%2Fieee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_apfloat%2Ftests%2Fieee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_apfloat%2Ftests%2Fieee.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -2201,12 +2201,12 @@ fn is_finite_non_zero() {\n     assert!(!Single::ZERO.is_finite_non_zero());\n     assert!(!(-Single::ZERO).is_finite_non_zero());\n \n-    // Test +/- qNaN. +/- dont mean anything with qNaN but paranoia can't hurt in\n+    // Test +/- qNaN. +/- don't mean anything with qNaN but paranoia can't hurt in\n     // this instance.\n     assert!(!Single::NAN.is_finite_non_zero());\n     assert!(!(-Single::NAN).is_finite_non_zero());\n \n-    // Test +/- sNaN. +/- dont mean anything with sNaN but paranoia can't hurt in\n+    // Test +/- sNaN. +/- don't mean anything with sNaN but paranoia can't hurt in\n     // this instance.\n     assert!(!Single::snan(None).is_finite_non_zero());\n     assert!(!(-Single::snan(None)).is_finite_non_zero());"}, {"sha": "58818d0ce803315d6dc164234a34483a7358a36e", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -1111,7 +1111,7 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n \n     /// Given a type, if it is an immutable reference, return a suggestion to make it mutable\n     fn suggest_mut_for_immutable(&self, pty: &hir::Ty, is_implicit_self: bool) -> Option<String> {\n-        // Check wether the argument is an immutable reference\n+        // Check whether the argument is an immutable reference\n         debug!(\"suggest_mut_for_immutable({:?}, {:?})\", pty, is_implicit_self);\n         if let hir::TyRptr(lifetime, hir::MutTy {\n             mutbl: hir::Mutability::MutImmutable,"}, {"sha": "e30f5cb4f12935566b7543397e53aeeae557335e", "filename": "src/librustc_const_eval/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_const_eval%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_const_eval%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2F_match.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -607,7 +607,7 @@ pub fn is_useful<'p, 'a: 'p, 'tcx: 'a>(cx: &mut MatchCheckCtxt<'a, 'tcx>,\n         // be able to observe whether the types of the struct's fields are\n         // inhabited.\n         //\n-        // If the field is truely inaccessible, then all the patterns\n+        // If the field is truly inaccessible, then all the patterns\n         // matching against it must be wildcard patterns, so its type\n         // does not matter.\n         //"}, {"sha": "b11ca107af7dd038e8863001f3da55420b851286", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -204,7 +204,7 @@ macro_rules! newtype_index {\n                           $($tokens)*);\n     );\n \n-    // The case where no derives are added, but encodable is overriden. Don't\n+    // The case where no derives are added, but encodable is overridden. Don't\n     // derive serialization traits\n     (@pub          [$($pub:tt)*]\n      @type         [$type:ident]"}, {"sha": "c6ed971f767cf15fba9385874c3d511e14e49cbc", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -117,7 +117,7 @@ fn do_mir_borrowck<'a, 'gcx, 'tcx>(\n             for move_error in move_errors {\n                 let (span, kind): (Span, IllegalMoveOriginKind) = match move_error {\n                     MoveError::UnionMove { .. } => {\n-                        unimplemented!(\"dont know how to report union move errors yet.\")\n+                        unimplemented!(\"don't know how to report union move errors yet.\")\n                     }\n                     MoveError::IllegalMove {\n                         cannot_move_out_of: o,\n@@ -1424,7 +1424,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     /// tracked in the MoveData.\n     ///\n     /// An Err result includes a tag indicated why the search failed.\n-    /// Currenly this can only occur if the place is built off of a\n+    /// Currently this can only occur if the place is built off of a\n     /// static variable, as we do not track those in the MoveData.\n     fn move_path_closest_to(\n         &mut self,\n@@ -1439,7 +1439,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n         match *last_prefix {\n             Place::Local(_) => panic!(\"should have move path for every Local\"),\n-            Place::Projection(_) => panic!(\"PrefixSet::All meant dont stop for Projection\"),\n+            Place::Projection(_) => panic!(\"PrefixSet::All meant don't stop for Projection\"),\n             Place::Static(_) => return Err(NoMovePathFound::ReachedStatic),\n         }\n     }\n@@ -1484,7 +1484,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                         { }\n \n                         ProjectionElem::Subslice { .. } => {\n-                            panic!(\"we dont allow assignments to subslices, context: {:?}\",\n+                            panic!(\"we don't allow assignments to subslices, context: {:?}\",\n                                    context);\n                         }\n "}, {"sha": "07e5091da9c1ef5e7026842c44af006608ae87e0", "filename": "src/librustc_mir/borrow_check/nll/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fmod.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -278,7 +278,7 @@ fn for_each_region_constraint(\n \n /// Right now, we piggy back on the `ReVar` to store our NLL inference\n /// regions. These are indexed with `RegionVid`. This method will\n-/// assert that the region is a `ReVar` and extract its interal index.\n+/// assert that the region is a `ReVar` and extract its internal index.\n /// This is reasonable because in our MIR we replace all universal regions\n /// with inference variables.\n pub trait ToRegionVid {"}, {"sha": "33c012dfad829203ecc0e08389745e2ff87fc26d", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -964,7 +964,7 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     debug!(\"check_universal_region: fr_minus={:?}\", fr_minus);\n \n                     // Grow `shorter_fr` until we find a non-local\n-                    // regon. (We always will.)  We'll call that\n+                    // region. (We always will.)  We'll call that\n                     // `shorter_fr+` -- it's ever so slightly larger than\n                     // `fr`.\n                     let shorter_fr_plus = self.universal_regions.non_local_upper_bound(shorter_fr);"}, {"sha": "45236bbc4aae287101fff08859589605126b77ed", "filename": "src/librustc_mir/borrow_check/nll/region_infer/values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fvalues.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -150,7 +150,7 @@ pub(super) enum RegionElement {\n     /// A point in the control-flow graph.\n     Location(Location),\n \n-    /// An in-scope, universally quantified region (e.g., a liftime parameter).\n+    /// An in-scope, universally quantified region (e.g., a lifetime parameter).\n     UniversalRegion(RegionVid),\n }\n "}, {"sha": "58ce572ae8d88abd79e7936d6f871fbc4b72cf92", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-//! Code related to match expresions. These are sufficiently complex\n+//! Code related to match expressions. These are sufficiently complex\n //! to warrant their own module and submodules. :) This main module\n //! includes the high-level algorithm, the submodules contain the\n //! details."}, {"sha": "8ab4035cf4aecacd27a8393d5b1053b7c9d2141d", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -80,14 +80,14 @@ pub struct Borrows<'a, 'gcx: 'tcx, 'tcx: 'a> {\n /// tracking (phased) borrows. It computes where a borrow is reserved;\n /// i.e. where it can reach in the control flow starting from its\n /// initial `assigned = &'rgn borrowed` statement, and ending\n-/// whereever `'rgn` itself ends.\n+/// wherever `'rgn` itself ends.\n pub(crate) struct Reservations<'a, 'gcx: 'tcx, 'tcx: 'a>(pub(crate) Borrows<'a, 'gcx, 'tcx>);\n \n /// The `ActiveBorrows` analysis is the second of the two flow\n /// analyses tracking (phased) borrows. It computes where any given\n /// borrow `&assigned = &'rgn borrowed` is *active*, which starts at\n /// the first use of `assigned` after the reservation has started, and\n-/// ends whereever `'rgn` itself ends.\n+/// ends wherever `'rgn` itself ends.\n pub(crate) struct ActiveBorrows<'a, 'gcx: 'tcx, 'tcx: 'a>(pub(crate) Borrows<'a, 'gcx, 'tcx>);\n \n impl<'a, 'gcx, 'tcx> Reservations<'a, 'gcx, 'tcx> {"}, {"sha": "3491faf9cdac0bb25e08d2f88c61660f31c49d06", "filename": "src/librustc_mir/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_mir%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_mir%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdiagnostics.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -365,7 +365,7 @@ with `#[derive(Clone)]`.\n Some types have no ownership semantics at all and are trivial to duplicate. An\n example is `i32` and the other number types. We don't have to call `.clone()` to\n clone them, because they are marked `Copy` in addition to `Clone`.  Implicit\n-cloning is more convienient in this case. We can mark our own types `Copy` if\n+cloning is more convenient in this case. We can mark our own types `Copy` if\n all their members also are marked `Copy`.\n \n In the example below, we implement a `Point` type. Because it only stores two"}, {"sha": "3578164feb7c5796f5dcd628f0e44d0e5b186989", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -84,7 +84,7 @@ pub struct Frame<'tcx> {\n     /// return).\n     pub block: mir::BasicBlock,\n \n-    /// The index of the currently evaluated statment.\n+    /// The index of the currently evaluated statement.\n     pub stmt: usize,\n }\n "}, {"sha": "a5078187a57e30d14e60a7981487ce0d942f08ce", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -68,7 +68,7 @@ pub enum InstantiationMode {\n         /// however, our local copy may conflict with other crates also\n         /// inlining the same function.\n         ///\n-        /// This flag indicates that this situation is occuring, and informs\n+        /// This flag indicates that this situation is occurring, and informs\n         /// symbol name calculation that some extra mangling is needed to\n         /// avoid conflicts. Note that this may eventually go away entirely if\n         /// ThinLTO enables us to *always* have a globally shared instance of a"}, {"sha": "6ae047609535e51ba992d8ff657aeee07ae376da", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -781,7 +781,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n     // Additionally, until better reachability analysis for macros 2.0 is available,\n     // we prohibit access to private statics from other crates, this allows to give\n     // more code internal visibility at link time. (Access to private functions\n-    // is already prohibited by type privacy for funciton types.)\n+    // is already prohibited by type privacy for function types.)\n     fn visit_qpath(&mut self, qpath: &'tcx hir::QPath, id: ast::NodeId, span: Span) {\n         let def = match *qpath {\n             hir::QPath::Resolved(_, ref path) => match path.def {"}, {"sha": "a757ac92df5c1cd29f5613d382f6c29511c2b50c", "filename": "src/librustc_resolve/check_unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_resolve%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_resolve%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fcheck_unused.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -17,7 +17,7 @@\n // `use` directives.\n //\n // Unused trait imports can't be checked until the method resolution. We save\n-// candidates here, and do the acutal check in librustc_typeck/check_unused.rs.\n+// candidates here, and do the actual check in librustc_typeck/check_unused.rs.\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "d8e03552a6a6fd917d5f750f8fcbaac6f86eade1", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -1440,7 +1440,7 @@ impl<'a> Resolver<'a> {\n     /// Rustdoc uses this to resolve things in a recoverable way. ResolutionError<'a>\n     /// isn't something that can be returned because it can't be made to live that long,\n     /// and also it's a private type. Fortunately rustdoc doesn't need to know the error,\n-    /// just that an error occured.\n+    /// just that an error occurred.\n     pub fn resolve_str_path_error(&mut self, span: Span, path_str: &str, is_value: bool)\n         -> Result<hir::Path, ()> {\n         use std::iter;"}, {"sha": "438ab3a3513fcc2f24bf39bd7de31b22753ce867", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -186,7 +186,7 @@ impl<'a> Resolver<'a> {\n         }\n \n         let check_usable = |this: &mut Self, binding: &'a NameBinding<'a>| {\n-            // `extern crate` are always usable for backwards compatability, see issue #37020.\n+            // `extern crate` are always usable for backwards compatibility, see issue #37020.\n             let usable = this.is_accessible(binding.vis) || binding.is_extern_crate();\n             if usable { Ok(binding) } else { Err(Determined) }\n         };"}, {"sha": "ab354a30d41516f530466a5c07c3ce1d1d017139", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -84,7 +84,7 @@ impl LtoModuleTranslation {\n         }\n     }\n \n-    /// A \"guage\" of how costly it is to optimize this module, used to sort\n+    /// A \"gauge\" of how costly it is to optimize this module, used to sort\n     /// biggest modules first.\n     pub fn cost(&self) -> u64 {\n         match *self {\n@@ -726,7 +726,7 @@ impl ThinModule {\n         // which was basically a resurgence of #45511 after LLVM's bug 35212 was\n         // fixed.\n         //\n-        // This function below is a huge hack around tihs problem. The function\n+        // This function below is a huge hack around this problem. The function\n         // below is defined in `PassWrapper.cpp` and will basically \"merge\"\n         // all `DICompileUnit` instances in a module. Basically it'll take all\n         // the objects, rewrite all pointers of `DISubprogram` to point to the"}, {"sha": "d4e05a18e3a506cbdabd781d3e710c58b99b352c", "filename": "src/librustc_trans/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_trans%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_trans%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbuilder.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -1240,7 +1240,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n     /// on), and `ptr` is nonzero-sized, then extracts the size of `ptr`\n     /// and the intrinsic for `lt` and passes them to `emit`, which is in\n     /// charge of generating code to call the passed intrinsic on whatever\n-    /// block of generated code is targetted for the intrinsic.\n+    /// block of generated code is targeted for the intrinsic.\n     ///\n     /// If LLVM lifetime intrinsic support is disabled (i.e.  optimizations\n     /// off) or `ptr` is zero-sized, then no-op (does not call `emit`)."}, {"sha": "34ac44cec025a3dd0af8ee2903affcedd5fe3b8f", "filename": "src/librustc_trans/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_trans%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Frvalue.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -844,7 +844,7 @@ fn cast_float_to_int(bx: &Builder,\n     // They are exactly equal to int_ty::{MIN,MAX} if float_ty has enough significand bits.\n     // Otherwise, int_ty::MAX must be rounded towards zero, as it is one less than a power of two.\n     // int_ty::MIN, however, is either zero or a negative power of two and is thus exactly\n-    // representable. Note that this only works if float_ty's exponent range is sufficently large.\n+    // representable. Note that this only works if float_ty's exponent range is sufficiently large.\n     // f16 or 256 bit integers would break this property. Right now the smallest float type is f32\n     // with exponents ranging up to 127, which is barely enough for i128::MIN = -2^127.\n     // On the other hand, f_max works even if int_ty::MAX is greater than float_ty::MAX. Because"}, {"sha": "9943a9bd398aa1d9d29323832cb2f70db8312dd9", "filename": "src/librustc_trans_utils/trans_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Ftrans_crate.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -151,7 +151,7 @@ impl MetadataLoader for NoLlvmMetadataLoader {\n             }\n         }\n \n-        Err(\"Couldnt find metadata section\".to_string())\n+        Err(\"Couldn't find metadata section\".to_string())\n     }\n \n     fn get_dylib_metadata("}, {"sha": "9250c1c437b2a639bd66a19d4623d86924d94dbf", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -293,7 +293,7 @@ impl<R: Seek> Seek for BufReader<R> {\n     /// where `n` minus the internal buffer length overflows an `i64`, two\n     /// seeks will be performed instead of one. If the second seek returns\n     /// `Err`, the underlying reader will be left at the same position it would\n-    /// have if you seeked to `SeekFrom::Current(0)`.\n+    /// have if you called `seek` with `SeekFrom::Current(0)`.\n     ///\n     /// [`seek_relative`]: #method.seek_relative\n     fn seek(&mut self, pos: SeekFrom) -> io::Result<u64> {"}, {"sha": "f7fdedc0d2179fc347d82a46297d712f5c3acc3a", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -24,8 +24,8 @@ use sys_common::rwlock as sys;\n /// typically allows for read-only access (shared access).\n ///\n /// In comparison, a [`Mutex`] does not distinguish between readers or writers\n-/// that aquire the lock, therefore blocking any threads waiting for the lock to\n-/// become available. An `RwLock` will allow any number of readers to aquire the\n+/// that acquire the lock, therefore blocking any threads waiting for the lock to\n+/// become available. An `RwLock` will allow any number of readers to acquire the\n /// lock as long as a writer is not holding the lock.\n ///\n /// The priority policy of the lock is dependent on the underlying operating"}, {"sha": "1955f3ec9a28fc98f129e9341c0289ae948bedf8", "filename": "src/libstd/sys_common/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibstd%2Fsys_common%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fbacktrace.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -136,7 +136,7 @@ pub fn __rust_begin_short_backtrace<F, T>(f: F) -> T\n     f()\n }\n \n-/// Controls how the backtrace should be formated.\n+/// Controls how the backtrace should be formatted.\n #[derive(Debug, Copy, Clone, Eq, PartialEq)]\n pub enum PrintFormat {\n     /// Show all the frames with absolute path for files."}, {"sha": "e74c40ae04b5d4ed55ad64921fa43db2f2c60fbe", "filename": "src/libstd/sys_common/poison.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibstd%2Fsys_common%2Fpoison.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibstd%2Fsys_common%2Fpoison.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fpoison.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -98,7 +98,7 @@ pub struct PoisonError<T> {\n }\n \n /// An enumeration of possible errors associated with a [`TryLockResult`] which\n-/// can occur while trying to aquire a lock, from the [`try_lock`] method on a\n+/// can occur while trying to acquire a lock, from the [`try_lock`] method on a\n /// [`Mutex`] or the [`try_read`] and [`try_write`] methods on an [`RwLock`].\n ///\n /// [`Mutex`]: struct.Mutex.html"}, {"sha": "8c1e5cf75867e28081072092903903b1cb53b278", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -918,7 +918,7 @@ pub struct Expr {\n }\n \n impl Expr {\n-    /// Wether this expression would be valid somewhere that expects a value, for example, an `if`\n+    /// Whether this expression would be valid somewhere that expects a value, for example, an `if`\n     /// condition.\n     pub fn returns(&self) -> bool {\n         if let ExprKind::Block(ref block) = self.node {"}, {"sha": "aa360ed1bf5bf12a25a25dabec2ee991e60c2d5e", "filename": "src/libsyntax/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibsyntax%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibsyntax%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fconfig.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -114,7 +114,7 @@ impl<'a> StripUnconfigured<'a> {\n         }\n     }\n \n-    // Determine if a node with the given attributes should be included in this configuation.\n+    // Determine if a node with the given attributes should be included in this configuration.\n     pub fn in_cfg(&mut self, attrs: &[ast::Attribute]) -> bool {\n         attrs.iter().all(|attr| {\n             // When not compiling with --test we should not compile the #[test] functions"}, {"sha": "7915109ce3af8c45a03b9a78427745faf909d6ac", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -3912,7 +3912,7 @@ impl<'a> Parser<'a> {\n                                           \"use `=` if you meant to assign\",\n                                           \"=\".to_string());\n                 err.emit();\n-                // As this was parsed successfuly, continue as if the code has been fixed for the\n+                // As this was parsed successfully, continue as if the code has been fixed for the\n                 // rest of the file. It will still fail due to the emitted error, but we avoid\n                 // extra noise.\n                 init\n@@ -6571,7 +6571,7 @@ impl<'a> Parser<'a> {\n             return Ok(Some(macro_def));\n         }\n \n-        // Verify wether we have encountered a struct or method definition where the user forgot to\n+        // Verify whether we have encountered a struct or method definition where the user forgot to\n         // add the `struct` or `fn` keyword after writing `pub`: `pub S {}`\n         if visibility == Visibility::Public &&\n             self.check_ident() &&"}, {"sha": "b804bb2981ba6cdd4e12b13b2c643b7ae69c52be", "filename": "src/test/compile-fail/coerce-to-bang.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoerce-to-bang.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -14,7 +14,7 @@\n fn foo(x: usize, y: !, z: usize) { }\n \n fn call_foo_a() {\n-    // FIXME(#40800) -- accepted beacuse divergence happens **before**\n+    // FIXME(#40800) -- accepted because divergence happens **before**\n     // the coercion to `!`, but within same expression. Not clear that\n     // these are the rules we want.\n     foo(return, 22, 44);"}, {"sha": "4ef92981314fdde2ff432dff79ca8857b6fd4fce", "filename": "src/test/compile-fail/directory_ownership/macro_expanded_mod_helper/foo/bar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fdirectory_ownership%2Fmacro_expanded_mod_helper%2Ffoo%2Fbar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fdirectory_ownership%2Fmacro_expanded_mod_helper%2Ffoo%2Fbar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdirectory_ownership%2Fmacro_expanded_mod_helper%2Ffoo%2Fbar.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test not a test, auxillary\n+// ignore-test not a test, auxiliary"}, {"sha": "41a8c288e7cdb159dc26843dbe0d26c29e34a0f7", "filename": "src/test/compile-fail/directory_ownership/macro_expanded_mod_helper/foo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fdirectory_ownership%2Fmacro_expanded_mod_helper%2Ffoo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fdirectory_ownership%2Fmacro_expanded_mod_helper%2Ffoo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdirectory_ownership%2Fmacro_expanded_mod_helper%2Ffoo%2Fmod.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -8,6 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test not a test, auxillary\n+// ignore-test not a test, auxiliary\n \n mod_decl!(bar);"}, {"sha": "86df2382732b57cdebcb2ed9fac2a85253be530c", "filename": "src/test/compile-fail/hr-subtype.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fhr-subtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fhr-subtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhr-subtype.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -84,7 +84,7 @@ check! { free_inv_x_vs_free_inv_y: (fn(Inv<'x>),\n                                     fn(Inv<'y>)) }\n \n // Somewhat surprisingly, a fn taking two distinct bound lifetimes and\n-// a fn taking one bound lifetime can be interchangable, but only if\n+// a fn taking one bound lifetime can be interchangeable, but only if\n // we are co- or contra-variant with respect to both lifetimes.\n //\n // The reason is:\n@@ -100,7 +100,7 @@ check! { bound_contra_a_contra_b_ret_co_a: (for<'a,'b> fn(Contra<'a>, Contra<'b>\n check! { bound_co_a_co_b_ret_contra_a: (for<'a,'b> fn(Co<'a>, Co<'b>) -> Contra<'a>,\n                                         for<'a>    fn(Co<'a>, Co<'a>) -> Contra<'a>) }\n \n-// If we make those lifetimes invariant, then the two types are not interchangable.\n+// If we make those lifetimes invariant, then the two types are not interchangeable.\n check! { bound_inv_a_b_vs_bound_inv_a: (for<'a,'b> fn(Inv<'a>, Inv<'b>),\n                                         for<'a>    fn(Inv<'a>, Inv<'a>)) }\n check! { bound_a_b_ret_a_vs_bound_a_ret_a: (for<'a,'b> fn(&'a u32, &'b u32) -> &'a u32,"}, {"sha": "3e29383d62cf8ae9ca684477866e49c28a1b40a5", "filename": "src/test/compile-fail/issue-20616-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fissue-20616-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fissue-20616-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-1.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // We need all these 9 issue-20616-N.rs files\n-// becase we can only catch one parsing error at a time\n+// because we can only catch one parsing error at a time\n \n \n "}, {"sha": "1ec7a74559a6e614959b2312eadd70ac67feeb64", "filename": "src/test/compile-fail/issue-20616-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fissue-20616-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fissue-20616-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-2.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // We need all these 9 issue-20616-N.rs files\n-// becase we can only catch one parsing error at a time\n+// because we can only catch one parsing error at a time\n \n \n "}, {"sha": "885fd246547312aba978d33de71275cea37dfc3b", "filename": "src/test/compile-fail/issue-20616-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fissue-20616-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fissue-20616-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-3.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // We need all these 9 issue-20616-N.rs files\n-// becase we can only catch one parsing error at a time\n+// because we can only catch one parsing error at a time\n \n \n "}, {"sha": "0dbe92fc1bcb35d830aa07c84f00de7497de627f", "filename": "src/test/compile-fail/issue-20616-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fissue-20616-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fissue-20616-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-4.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // We need all these 9 issue-20616-N.rs files\n-// becase we can only catch one parsing error at a time\n+// because we can only catch one parsing error at a time\n \n \n "}, {"sha": "794e5178f4b2ca3c0f345b33593c791535286664", "filename": "src/test/compile-fail/issue-20616-5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fissue-20616-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fissue-20616-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-5.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // We need all these 9 issue-20616-N.rs files\n-// becase we can only catch one parsing error at a time\n+// because we can only catch one parsing error at a time\n \n \n "}, {"sha": "fe91751a4a06b853d0905007fa15de5e079057cb", "filename": "src/test/compile-fail/issue-20616-6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fissue-20616-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fissue-20616-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-6.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // We need all these 9 issue-20616-N.rs files\n-// becase we can only catch one parsing error at a time\n+// because we can only catch one parsing error at a time\n \n \n "}, {"sha": "184ad02710268c760c192dfd269f2b48a5b22a28", "filename": "src/test/compile-fail/issue-20616-7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fissue-20616-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fissue-20616-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-7.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // We need all these 9 issue-20616-N.rs files\n-// becase we can only catch one parsing error at a time\n+// because we can only catch one parsing error at a time\n \n \n "}, {"sha": "5cdec33e94b9282fc2ec0343b3807b220ba7b868", "filename": "src/test/compile-fail/issue-20616-8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fissue-20616-8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fissue-20616-8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-8.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // We need all these 9 issue-20616-N.rs files\n-// becase we can only catch one parsing error at a time\n+// because we can only catch one parsing error at a time\n \n \n "}, {"sha": "7995addb692cca3e1ae8bfa6bcf566545b905760", "filename": "src/test/compile-fail/issue-20616-9.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fissue-20616-9.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fissue-20616-9.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20616-9.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // We need all these 9 issue-20616-N.rs files\n-// becase we can only catch one parsing error at a time\n+// because we can only catch one parsing error at a time\n \n \n "}, {"sha": "b2cc5cae69750e2da40bc84f9d8aa748abc786fb", "filename": "src/test/compile-fail/no_crate_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fno_crate_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fcompile-fail%2Fno_crate_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_crate_type.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// regresion test for issue 11256\n+// regression test for issue 11256\n #![crate_type]  //~ ERROR `crate_type` requires a value\n \n fn main() {"}, {"sha": "ad4932b9fb9454a9611791a4d516aab6a695451c", "filename": "src/test/mir-opt/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fmir-opt%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fmir-opt%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2FREADME.md?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -26,7 +26,7 @@ other non-matched lines before and after, but not between $expected_lines,\n should you want to skip lines, you must include an elision comment, of the form\n (as a regex) `//\\s*...\\s*`. The lines will be skipped lazily, that is, if there\n are two identical lines in the output that match the line after the elision\n-comment, the first one wil be matched.\n+comment, the first one will be matched.\n \n Examples:\n "}, {"sha": "17e6119f968aca0ea1778a096e35ee2c969743e1", "filename": "src/test/pretty/stmt_expr_attributes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fstmt_expr_attributes.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -255,7 +255,7 @@ fn _11() {\n     while true { let _ = #[attr] break ; }\n     || #[attr] return;\n     let _ = #[attr] expr_mac!();\n-    /* FIXME: pp bug, loosing delimiter styles\n+    /* FIXME: pp bug, losing delimiter styles\n     let _ = #[attr] expr_mac![];\n     let _ = #[attr] expr_mac!{};\n     */"}, {"sha": "2ddf3aa5439f62d4b0d3be11924d705da4fa5a6e", "filename": "src/test/run-make/hotplug_codegen_backend/Makefile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2FMakefile", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2FMakefile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2FMakefile?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -6,4 +6,4 @@ all:\n \t\t-o $(TMPDIR)/the_backend.dylib\n \t$(RUSTC) some_crate.rs --crate-name some_crate --crate-type bin -o $(TMPDIR)/some_crate \\\n \t\t-Z codegen-backend=$(TMPDIR)/the_backend.dylib -Z unstable-options\n-\tgrep -x \"This has been \\\"compiled\\\" succesfully.\" $(TMPDIR)/some_crate\n+\tgrep -x \"This has been \\\"compiled\\\" successfully.\" $(TMPDIR)/some_crate"}, {"sha": "9e87268e6999da1ec81d5193fa093d19ab68776e", "filename": "src/test/run-make/hotplug_codegen_backend/the_backend.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2Fthe_backend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2Fthe_backend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fhotplug_codegen_backend%2Fthe_backend.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -69,7 +69,7 @@ impl TransCrate for TheBackend {\n             let output_name =\n                 out_filename(sess, crate_type, &outputs, &*crate_name.as_str());\n             let mut out_file = ::std::fs::File::create(output_name).unwrap();\n-            write!(out_file, \"This has been \\\"compiled\\\" succesfully.\").unwrap();\n+            write!(out_file, \"This has been \\\"compiled\\\" successfully.\").unwrap();\n         }\n         Ok(())\n     }"}, {"sha": "cfaf913216a5c68a3b10a8002c89ad7d7eef89a9", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/derive-reexport.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fderive-reexport.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test not a test, auxillary\n+// ignore-test not a test, auxiliary\n \n #![feature(macro_reexport)]\n "}, {"sha": "d4463fed1a6747ab2d280bc13952b63af00fc840", "filename": "src/test/run-pass/issue-29746.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Frun-pass%2Fissue-29746.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Frun-pass%2Fissue-29746.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-29746.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -17,7 +17,7 @@ macro_rules! zip {\n     };\n \n     // Intermediate steps to build the zipped expression, the match pattern, and\n-    //  and the output tuple of the closure, using macro hygene to repeatedly\n+    //  and the output tuple of the closure, using macro hygiene to repeatedly\n     //  introduce new variables named 'x'.\n     ([$a:expr, $($rest:expr),*], $zip:expr, $pat:pat, [$($flat:expr),*]) => {\n         zip!([$($rest),*], $zip.zip($a), ($pat,x), [$($flat),*, x])"}, {"sha": "95890d2e1b47b0585f7801a64693911a1aabe62c", "filename": "src/test/run-pass/issue-32008.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Frun-pass%2Fissue-32008.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Frun-pass%2Fissue-32008.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-32008.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // Tests that binary operators allow subtyping on both the LHS and RHS,\n-// and as such do not introduce unnecesarily strict lifetime constraints.\n+// and as such do not introduce unnecessarily strict lifetime constraints.\n \n use std::ops::Add;\n "}, {"sha": "94b2a586ddfa04274043c62959d06d1d2b908fb5", "filename": "src/test/run-pass/rfc1857-drop-order.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Frun-pass%2Frfc1857-drop-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Frun-pass%2Frfc1857-drop-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc1857-drop-order.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -67,7 +67,7 @@ fn test_drop_tuple() {\n     panic::catch_unwind(|| {\n         (PushOnDrop::new(2, cloned.clone()),\n          PushOnDrop::new(1, cloned.clone()),\n-         panic!(\"this panic is catched :D\"));\n+         panic!(\"this panic is caught :D\"));\n     }).err().unwrap();\n     assert_eq!(*dropped_fields.borrow(), &[1, 2]);\n }\n@@ -99,7 +99,7 @@ fn test_drop_struct() {\n         TestStruct {\n             x: PushOnDrop::new(2, cloned.clone()),\n             y: PushOnDrop::new(1, cloned.clone()),\n-            z: panic!(\"this panic is catched :D\")\n+            z: panic!(\"this panic is caught :D\")\n         };\n     }).err().unwrap();\n     assert_eq!(*dropped_fields.borrow(), &[1, 2]);\n@@ -111,7 +111,7 @@ fn test_drop_struct() {\n         TestStruct {\n             y: PushOnDrop::new(2, cloned.clone()),\n             x: PushOnDrop::new(1, cloned.clone()),\n-            z: panic!(\"this panic is catched :D\")\n+            z: panic!(\"this panic is caught :D\")\n         };\n     }).err().unwrap();\n     assert_eq!(*dropped_fields.borrow(), &[1, 2]);\n@@ -122,7 +122,7 @@ fn test_drop_struct() {\n     panic::catch_unwind(|| {\n         TestTupleStruct(PushOnDrop::new(2, cloned.clone()),\n                         PushOnDrop::new(1, cloned.clone()),\n-                        panic!(\"this panic is catched :D\"));\n+                        panic!(\"this panic is caught :D\"));\n     }).err().unwrap();\n     assert_eq!(*dropped_fields.borrow(), &[1, 2]);\n }\n@@ -154,7 +154,7 @@ fn test_drop_enum() {\n         TestEnum::Struct {\n             x: PushOnDrop::new(2, cloned.clone()),\n             y: PushOnDrop::new(1, cloned.clone()),\n-            z: panic!(\"this panic is catched :D\")\n+            z: panic!(\"this panic is caught :D\")\n         };\n     }).err().unwrap();\n     assert_eq!(*dropped_fields.borrow(), &[1, 2]);\n@@ -166,7 +166,7 @@ fn test_drop_enum() {\n         TestEnum::Struct {\n             y: PushOnDrop::new(2, cloned.clone()),\n             x: PushOnDrop::new(1, cloned.clone()),\n-            z: panic!(\"this panic is catched :D\")\n+            z: panic!(\"this panic is caught :D\")\n         };\n     }).err().unwrap();\n     assert_eq!(*dropped_fields.borrow(), &[1, 2]);\n@@ -177,7 +177,7 @@ fn test_drop_enum() {\n     panic::catch_unwind(|| {\n         TestEnum::Tuple(PushOnDrop::new(2, cloned.clone()),\n                         PushOnDrop::new(1, cloned.clone()),\n-                        panic!(\"this panic is catched :D\"));\n+                        panic!(\"this panic is caught :D\"));\n     }).err().unwrap();\n     assert_eq!(*dropped_fields.borrow(), &[1, 2]);\n }\n@@ -207,7 +207,7 @@ fn test_drop_list() {\n         vec![\n             PushOnDrop::new(2, cloned.clone()),\n             PushOnDrop::new(1, cloned.clone()),\n-            panic!(\"this panic is catched :D\")\n+            panic!(\"this panic is caught :D\")\n         ];\n     }).err().unwrap();\n     assert_eq!(*dropped_fields.borrow(), &[1, 2]);\n@@ -219,7 +219,7 @@ fn test_drop_list() {\n         [\n             PushOnDrop::new(2, cloned.clone()),\n             PushOnDrop::new(1, cloned.clone()),\n-            panic!(\"this panic is catched :D\")\n+            panic!(\"this panic is caught :D\")\n         ];\n     }).err().unwrap();\n     assert_eq!(*dropped_fields.borrow(), &[1, 2]);"}, {"sha": "3c54921ac6e02409d3811f65650dacd5e20453e1", "filename": "src/test/run-pass/simd-target-feature-mixup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Frun-pass%2Fsimd-target-feature-mixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Frun-pass%2Fsimd-target-feature-mixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-target-feature-mixup.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -30,7 +30,7 @@ fn main() {\n \n         // We don't actually know if our computer has the requisite target features\n         // for the test below. Testing for that will get added to libstd later so\n-        // for now just asume sigill means this is a machine that can't run this test.\n+        // for now just assume sigill means this is a machine that can't run this test.\n         if is_sigill(status) {\n             println!(\"sigill with {}, assuming spurious\", level);\n             continue"}, {"sha": "1d055ccbeadefeed30e31cee8369181bb610ad1e", "filename": "src/test/rustdoc/impl-parts-crosscrate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fimpl-parts-crosscrate.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -17,7 +17,7 @@ extern crate rustdoc_impl_parts_crosscrate;\n \n pub struct Bar<T> { t: T }\n \n-// The output file is html embeded in javascript, so the html tags\n+// The output file is html embedded in javascript, so the html tags\n // aren't stripped by the processing script and we can't check for the\n // full impl string.  Instead, just make sure something from each part\n // is mentioned."}, {"sha": "411cdfb335b342dd16f7a0d0fbcb51f8a23895fb", "filename": "src/test/ui/explain.stdout", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fui%2Fexplain.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fui%2Fexplain.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexplain.stdout?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -45,7 +45,7 @@ is a function pointer, which is not zero-sized.\n This pattern should be rewritten. There are a few possible ways to do this:\n \n - change the original fn declaration to match the expected signature,\n-  and do the cast in the fn body (the prefered option)\n+  and do the cast in the fn body (the preferred option)\n - cast the fn item fo a fn pointer before calling transmute, as shown here:\n \n     ```"}, {"sha": "21950402c8c41cedd3007d2368b4b28253a17cbc", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -509,7 +509,7 @@ mod reexport_test_harness_main {\n     //~^ WARN unused attribute\n }\n \n-// Cannnot feed \"2700\" to `#[macro_escape]` without signaling an error.\n+// Cannot feed \"2700\" to `#[macro_escape]` without signaling an error.\n #[macro_escape]\n //~^ WARN macro_escape is a deprecated synonym for macro_use\n mod macro_escape {"}, {"sha": "20a2cbfd3aa784b41d1dc9a569d85c5dd5d17d83", "filename": "src/test/ui/lifetime-errors/liveness-assign-imm-local-notes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fui%2Flifetime-errors%2Fliveness-assign-imm-local-notes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4452446292086d9c92ea709eea61a31cedb55e22/src%2Ftest%2Fui%2Flifetime-errors%2Fliveness-assign-imm-local-notes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetime-errors%2Fliveness-assign-imm-local-notes.rs?ref=4452446292086d9c92ea709eea61a31cedb55e22", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // FIXME: Change to UI Test\n-// Check notes are placed on an assignment that can actually preceed the current assigmnent\n+// Check notes are placed on an assignment that can actually precede the current assigmnent\n // Don't emmit a first assignment for assignment in a loop.\n \n // compile-flags: -Zborrowck=compare"}]}