{"sha": "6367bcf4276c06d41b0d66f10711ca3b076ae547", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNjdiY2Y0Mjc2YzA2ZDQxYjBkNjZmMTA3MTFjYTNiMDc2YWU1NDc=", "commit": {"author": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-22T01:08:34Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-06-27T16:58:39Z"}, "message": "Fixed a few concurrency bugs. Still not perfect, but overall it seems much more reliable.", "tree": {"sha": "14f52a00319dcba17755330da3bcf978a53c0b3d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/14f52a00319dcba17755330da3bcf978a53c0b3d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6367bcf4276c06d41b0d66f10711ca3b076ae547", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6367bcf4276c06d41b0d66f10711ca3b076ae547", "html_url": "https://github.com/rust-lang/rust/commit/6367bcf4276c06d41b0d66f10711ca3b076ae547", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6367bcf4276c06d41b0d66f10711ca3b076ae547/comments", "author": null, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d99bf9af2107523c01566968e889c4f1a5de49e", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d99bf9af2107523c01566968e889c4f1a5de49e", "html_url": "https://github.com/rust-lang/rust/commit/4d99bf9af2107523c01566968e889c4f1a5de49e"}], "stats": {"total": 31, "additions": 20, "deletions": 11}, "files": [{"sha": "ac258f5c97329c9ad24ee191151c7926a8e94ca1", "filename": "src/rt/rust_dom.cpp", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6367bcf4276c06d41b0d66f10711ca3b076ae547/src%2Frt%2Frust_dom.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6367bcf4276c06d41b0d66f10711ca3b076ae547/src%2Frt%2Frust_dom.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dom.cpp?ref=6367bcf4276c06d41b0d66f10711ca3b076ae547", "patch": "@@ -166,9 +166,11 @@ rust_dom::number_of_live_tasks() {\n  */\n void\n rust_dom::reap_dead_tasks() {\n+    I(this, scheduler_lock.lock_held_by_current_thread());\n     for (size_t i = 0; i < dead_tasks.length(); ) {\n         rust_task *task = dead_tasks[i];\n-        if (task->ref_count == 0) {\n+        // Make sure this task isn't still running somewhere else...\n+        if (task->ref_count == 0 && task->can_schedule()) {\n             I(this, task->tasks_waiting_to_join.is_empty());\n             dead_tasks.remove(task);\n             DLOG(this, task,\n@@ -315,13 +317,14 @@ rust_dom::start_main_loop(int id) {\n         DLOG(this, task,\n              \"Running task %p on worker %d\",\n              scheduled_task, id);\n+        I(this, !scheduled_task->active);\n         scheduled_task->active = true;\n         activate(scheduled_task);\n         scheduled_task->active = false;\n \n         DLOG(this, task,\n              \"returned from task %s @0x%\" PRIxPTR\n-             \" in state '%s', sp=0x%, worker id=%d\" PRIxPTR,\n+             \" in state '%s', sp=0x%x, worker id=%d\" PRIxPTR,\n              scheduled_task->name,\n              (uintptr_t)scheduled_task,\n              scheduled_task->state->name,\n@@ -349,7 +352,9 @@ rust_dom::start_main_loop(int id) {\n                 \"scheduler yielding ...\",\n                 dead_tasks.length());\n             log_state();\n+            scheduler_lock.unlock();\n             sync::yield();\n+            scheduler_lock.lock();\n         } else {\n             drain_incoming_message_queue(true);\n         }"}, {"sha": "7f49b52019d81d5522abaaacecf9da4d014efafb", "filename": "src/rt/rust_srv.cpp", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6367bcf4276c06d41b0d66f10711ca3b076ae547/src%2Frt%2Frust_srv.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6367bcf4276c06d41b0d66f10711ca3b076ae547/src%2Frt%2Frust_srv.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_srv.cpp?ref=6367bcf4276c06d41b0d66f10711ca3b076ae547", "patch": "@@ -54,7 +54,8 @@ rust_srv::fatal(const char *expression,\n              \"fatal, '%s' failed, %s:%d %s\",\n              expression, file, (int)line, buf);\n     log(msg);\n-    exit(1);\n+    abort();\n+    //exit(1);\n }\n \n void"}, {"sha": "3f9a0660300c62273c64e2d0100981ec4d988ddc", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6367bcf4276c06d41b0d66f10711ca3b076ae547/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/6367bcf4276c06d41b0d66f10711ca3b076ae547/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=6367bcf4276c06d41b0d66f10711ca3b076ae547", "patch": "@@ -53,7 +53,7 @@ rust_task : public maybe_proxy<rust_task>,\n     \n     // This flag indicates that a worker is either currently running the task\n     // or is about to run this task.\n-    bool active;\n+    volatile bool active;\n \n     // Only a pointer to 'name' is kept, so it must live as long as this task.\n     rust_task(rust_dom *dom,"}, {"sha": "ba29203ca1d56acf80aea76c464cd97529c3f82c", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6367bcf4276c06d41b0d66f10711ca3b076ae547/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/6367bcf4276c06d41b0d66f10711ca3b076ae547/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=6367bcf4276c06d41b0d66f10711ca3b076ae547", "patch": "@@ -223,9 +223,12 @@ upcall_recv(rust_task *task, uintptr_t *dptr, rust_port *port) {\n     // on the port. Remember the rendezvous location so that any sender\n     // task can write to it before waking up this task.\n \n-    LOG(task, comm, \"<=== waiting for rendezvous data ===\");\n-    task->rendezvous_ptr = dptr;\n-    task->block(port, \"waiting for rendezvous data\");\n+    {\n+        scoped_lock sync(port->lock);\n+        LOG(task, comm, \"<=== waiting for rendezvous data ===\");\n+        task->rendezvous_ptr = dptr;\n+        task->block(port, \"waiting for rendezvous data\");\n+    }\n     task->yield(3);\n }\n "}, {"sha": "f7fda8b81102586881303fa7a675691cc1090516", "filename": "src/test/bench/shootout/pfib.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6367bcf4276c06d41b0d66f10711ca3b076ae547/src%2Ftest%2Fbench%2Fshootout%2Fpfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6367bcf4276c06d41b0d66f10711ca3b076ae547/src%2Ftest%2Fbench%2Fshootout%2Fpfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout%2Fpfib.rs?ref=6367bcf4276c06d41b0d66f10711ca3b076ae547", "patch": "@@ -34,8 +34,8 @@ fn fib(int n) -> int {\n }\n \n fn main() {\n-    assert (fib(8) == 21);\n-    assert (fib(15) == 610);\n-    log fib(8);\n-    log fib(15);\n+  assert (fib(8) == 21);\n+  assert (fib(15) == 610);\n+  log fib(8);\n+  log fib(15);\n }"}]}