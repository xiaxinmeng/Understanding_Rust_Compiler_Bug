{"sha": "df42976e4db6565e8693460c34387e515d10ecfd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNDI5NzZlNGRiNjU2NWU4NjkzNDYwYzM0Mzg3ZTUxNWQxMGVjZmQ=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-05-06T19:24:13Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2015-05-06T19:24:13Z"}, "message": "improve comment", "tree": {"sha": "86ac77c9df7061336fb158387962d347ebef68de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/86ac77c9df7061336fb158387962d347ebef68de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df42976e4db6565e8693460c34387e515d10ecfd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df42976e4db6565e8693460c34387e515d10ecfd", "html_url": "https://github.com/rust-lang/rust/commit/df42976e4db6565e8693460c34387e515d10ecfd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df42976e4db6565e8693460c34387e515d10ecfd/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4d8d68f80d2fb474188c1c2ee26d6266b4eaa003", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d8d68f80d2fb474188c1c2ee26d6266b4eaa003", "html_url": "https://github.com/rust-lang/rust/commit/4d8d68f80d2fb474188c1c2ee26d6266b4eaa003"}], "stats": {"total": 6, "additions": 4, "deletions": 2}, "files": [{"sha": "ea29c48983f12f4f764bf984dc28c9bdba9945ad", "filename": "src/librustc/middle/traits/error_reporting.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/df42976e4db6565e8693460c34387e515d10ecfd/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df42976e4db6565e8693460c34387e515d10ecfd/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ferror_reporting.rs?ref=df42976e4db6565e8693460c34387e515d10ecfd", "patch": "@@ -57,8 +57,10 @@ pub fn report_projection_error<'a, 'tcx>(infcx: &InferCtxt<'a, 'tcx>,\n     let predicate =\n         infcx.resolve_type_vars_if_possible(&obligation.predicate);\n     // The ty_err created by normalize_to_error can end up being unified\n-    // into all obligations - we still have to report an error in that\n-    // case.\n+    // into all obligations: for example, if our obligation is something\n+    // like `$X = <() as Foo<$X>>::Out` and () does not implement Foo<_>,\n+    // then $X will be unified with ty_err, but the error still needs to be\n+    // reported.\n     if !infcx.tcx.sess.has_errors() || !predicate.references_error() {\n         span_err!(infcx.tcx.sess, obligation.cause.span, E0271,\n                 \"type mismatch resolving `{}`: {}\","}]}