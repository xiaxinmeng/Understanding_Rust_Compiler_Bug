{"sha": "54fa9cab7c64b195ceb263b7feaabe20b6c01ece", "node_id": "C_kwDOAAsO6NoAKDU0ZmE5Y2FiN2M2NGIxOTVjZWIyNjNiN2ZlYWFiZTIwYjZjMDFlY2U", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-02-25T19:12:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-25T19:12:46Z"}, "message": "Rollup merge of #93850 - asquared31415:extern-static-size-ice, r=jackh726\n\nDon't ICE when an extern static is too big for the current architecture\n\nFixes #93760\n\nEmit an error instead of ICEing when an `extern` static's size overflows the allowed maximum for the target.\n\nChanges the error message in the existing `delay_span_bug` call to the true layout error, first for debugging purposes, but opted to leave in to potentially assist future developers as it was being reached in unexpected ways already.", "tree": {"sha": "9b9525dd5daaef280ed5d2ec0ebb4b7d759b26ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b9525dd5daaef280ed5d2ec0ebb4b7d759b26ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/54fa9cab7c64b195ceb263b7feaabe20b6c01ece", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiGSouCRBK7hj4Ov3rIwAAVWwIAAdNb7BzSmeHftq4R8Bzh8Kk\n0/eJh2kExSt5ldmE6nyZk5A4geqwD5shASPRhx3Kzi9HqqaxlIVT2RiOpZ1qHJKN\n3rVF84S25FNDDIGZhmCGU0biVdb/XcQWG493n6nwMU0GdplmDJ8XTUmZ0VT6cm5c\nFjvxUZJ7vPOnz4AjDffxk0AVxI21rHxqbj6lYBa+7XKUt/QvOSuJVYvVl1JAqyFb\nT/MUBsM66HNu5VG1On/vES6+H4DpOblmjoogHCxdDQUOiBYDG+Tfp+lXq0zzo8Bu\n+HgN4vcJFiQVJ6O4qX9jrUBY3WcukGiGpf2kMFuWP1IpXoHE8eHXJMGjuO8jizk=\n=psOK\n-----END PGP SIGNATURE-----\n", "payload": "tree 9b9525dd5daaef280ed5d2ec0ebb4b7d759b26ce\nparent 6cbc6c35e4b0c948114619a1c883a75b731d32c5\nparent 75b15c68f81094ad6f1da6f29bd42a1197585257\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1645816366 +0100\ncommitter GitHub <noreply@github.com> 1645816366 +0100\n\nRollup merge of #93850 - asquared31415:extern-static-size-ice, r=jackh726\n\nDon't ICE when an extern static is too big for the current architecture\n\nFixes #93760\n\nEmit an error instead of ICEing when an `extern` static's size overflows the allowed maximum for the target.\n\nChanges the error message in the existing `delay_span_bug` call to the true layout error, first for debugging purposes, but opted to leave in to potentially assist future developers as it was being reached in unexpected ways already.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/54fa9cab7c64b195ceb263b7feaabe20b6c01ece", "html_url": "https://github.com/rust-lang/rust/commit/54fa9cab7c64b195ceb263b7feaabe20b6c01ece", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/54fa9cab7c64b195ceb263b7feaabe20b6c01ece/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cbc6c35e4b0c948114619a1c883a75b731d32c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cbc6c35e4b0c948114619a1c883a75b731d32c5", "html_url": "https://github.com/rust-lang/rust/commit/6cbc6c35e4b0c948114619a1c883a75b731d32c5"}, {"sha": "75b15c68f81094ad6f1da6f29bd42a1197585257", "url": "https://api.github.com/repos/rust-lang/rust/commits/75b15c68f81094ad6f1da6f29bd42a1197585257", "html_url": "https://github.com/rust-lang/rust/commit/75b15c68f81094ad6f1da6f29bd42a1197585257"}], "stats": {"total": 92, "additions": 88, "deletions": 4}, "files": [{"sha": "8ed87497f1b32e817efc8037f54dbb22e3a009ca", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/54fa9cab7c64b195ceb263b7feaabe20b6c01ece/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa9cab7c64b195ceb263b7feaabe20b6c01ece/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=54fa9cab7c64b195ceb263b7feaabe20b6c01ece", "patch": "@@ -14,7 +14,7 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_infer::infer::{RegionVariableOrigin, TyCtxtInferExt};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::fold::TypeFoldable;\n-use rustc_middle::ty::layout::MAX_SIMD_LANES;\n+use rustc_middle::ty::layout::{LayoutError, MAX_SIMD_LANES};\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_middle::ty::util::{Discr, IntTypeExt};\n use rustc_middle::ty::{self, OpaqueTypeKey, ParamEnv, Ty, TyCtxt};\n@@ -417,10 +417,31 @@ fn check_static_inhabited<'tcx>(tcx: TyCtxt<'tcx>, def_id: LocalDefId, span: Spa\n     // have UB during initialization if they are uninhabited, but there also seems to be no good\n     // reason to allow any statics to be uninhabited.\n     let ty = tcx.type_of(def_id);\n-    let Ok(layout) = tcx.layout_of(ParamEnv::reveal_all().and(ty)) else {\n+    let layout = match tcx.layout_of(ParamEnv::reveal_all().and(ty)) {\n+        Ok(l) => l,\n+        // Foreign statics that overflow their allowed size should emit an error\n+        Err(LayoutError::SizeOverflow(_))\n+            if {\n+                let node = tcx.hir().get_by_def_id(def_id);\n+                matches!(\n+                    node,\n+                    hir::Node::ForeignItem(hir::ForeignItem {\n+                        kind: hir::ForeignItemKind::Static(..),\n+                        ..\n+                    })\n+                )\n+            } =>\n+        {\n+            tcx.sess\n+                .struct_span_err(span, \"extern static is too large for the current architecture\")\n+                .emit();\n+            return;\n+        }\n         // Generic statics are rejected, but we still reach this case.\n-        tcx.sess.delay_span_bug(span, \"generic static must be rejected\");\n-        return;\n+        Err(e) => {\n+            tcx.sess.delay_span_bug(span, &e.to_string());\n+            return;\n+        }\n     };\n     if layout.abi.is_uninhabited() {\n         tcx.struct_span_lint_hir("}, {"sha": "30a0c445466861415415e9363acf5f6538a09647", "filename": "src/test/ui/extern/extern-static-size-overflow.rs", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/54fa9cab7c64b195ceb263b7feaabe20b6c01ece/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/54fa9cab7c64b195ceb263b7feaabe20b6c01ece/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.rs?ref=54fa9cab7c64b195ceb263b7feaabe20b6c01ece", "patch": "@@ -0,0 +1,43 @@\n+#[repr(C)]\n+struct ReallyBig {\n+    _a: [u8; usize::MAX],\n+}\n+\n+// The limit for \"too big for the current architecture\" is dependent on the target pointer size\n+// however it's artifically limited on 64 bits\n+// logic copied from rustc_target::abi::TargetDataLayout::obj_size_bound()\n+const fn max_size() -> usize {\n+    #[cfg(target_pointer_width = \"16\")]\n+    {\n+        1 << 15\n+    }\n+\n+    #[cfg(target_pointer_width = \"32\")]\n+    {\n+        1 << 31\n+    }\n+\n+    #[cfg(target_pointer_width = \"64\")]\n+    {\n+        1 << 47\n+    }\n+\n+    #[cfg(not(any(\n+        target_pointer_width = \"16\",\n+        target_pointer_width = \"32\",\n+        target_pointer_width = \"64\"\n+    )))]\n+    {\n+        isize::MAX as usize\n+    }\n+}\n+\n+extern \"C\" {\n+    static FOO: [u8; 1];\n+    static BAR: [u8; max_size() - 1];\n+    static BAZ: [u8; max_size()]; //~ ERROR extern static is too large\n+    static UWU: [usize; usize::MAX]; //~ ERROR extern static is too large\n+    static A: ReallyBig; //~ ERROR extern static is too large\n+}\n+\n+fn main() {}"}, {"sha": "f5173feec75d490ab1722b14c966a41774ea892c", "filename": "src/test/ui/extern/extern-static-size-overflow.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/54fa9cab7c64b195ceb263b7feaabe20b6c01ece/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/54fa9cab7c64b195ceb263b7feaabe20b6c01ece/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fextern%2Fextern-static-size-overflow.stderr?ref=54fa9cab7c64b195ceb263b7feaabe20b6c01ece", "patch": "@@ -0,0 +1,20 @@\n+error: extern static is too large for the current architecture\n+  --> $DIR/extern-static-size-overflow.rs:38:5\n+   |\n+LL |     static BAZ: [u8; max_size()];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: extern static is too large for the current architecture\n+  --> $DIR/extern-static-size-overflow.rs:39:5\n+   |\n+LL |     static UWU: [usize; usize::MAX];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: extern static is too large for the current architecture\n+  --> $DIR/extern-static-size-overflow.rs:40:5\n+   |\n+LL |     static A: ReallyBig;\n+   |     ^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+"}]}