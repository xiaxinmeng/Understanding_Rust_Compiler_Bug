{"sha": "f03e5345aa5bbee3c35a394238431b1267f7ab93", "node_id": "C_kwDOAAsO6NoAKGYwM2U1MzQ1YWE1YmJlZTNjMzVhMzk0MjM4NDMxYjEyNjdmN2FiOTM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2023-03-01T18:10:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-01T18:10:18Z"}, "message": "Rollup merge of #108143 - notriddle:notriddle/filter-exclamation-macro, r=GuillaumeGomez\n\nrustdoc: search by macro when query ends with `!`\n\nRelated to #96399\n\nNote: the `never` type alias is tested in [`/tests/rustdoc-js-std/alias-3.js`](https://github.com/notriddle/rust/blob/08ad401633037cc226b3806a3c5f48c2f34703bf/tests/rustdoc-js-std/alias-3.js)\n\n## Before\n\n![image](https://user-images.githubusercontent.com/1593513/219504192-54cc0753-ff97-4a37-ad4a-8ae915181325.png)\n\n## After\n\n![image](https://user-images.githubusercontent.com/1593513/219504251-589a7e11-1e7b-4b7b-879d-1b564080017c.png)", "tree": {"sha": "4ee6ad45cedc9e2e4bf6487e72e891f5d7e8d816", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4ee6ad45cedc9e2e4bf6487e72e891f5d7e8d816"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f03e5345aa5bbee3c35a394238431b1267f7ab93", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj/5UKCRBK7hj4Ov3rIwAALB8IABT4U+iBO5MHOid6SpOtk3JE\n078jxmFZ7MCNsA7gLG5zITS7BHjo73ZW6sVh81jbaiygNbRB9lLp8NDp1x0PviZd\nAY9P7n4xhjrOSeqmqZT26hwYZhsHzrLYYDVVrlRdPCxXuObD42ct2BLr3WRupCGs\nFI0MsO21Zy0gxEbJ+97wVBOhv8USH4INTGKqNKu3M2wtOSndj88GOr5zFa51+7Jw\nXF8ZEWunhXchYFHE6/H4RPIVevMj+E1D7bNog0hC7xoST3ihwEOL61s0sN887TYE\n7QSQHjIW5m12em673Xvdrslh9Jw1hp6AZ0DfU/ygooGWCMcnFcxz+M6KXBsGwt8=\n=7s8r\n-----END PGP SIGNATURE-----\n", "payload": "tree 4ee6ad45cedc9e2e4bf6487e72e891f5d7e8d816\nparent 5423745db8b434fcde54888b35f518f00cce00e4\nparent 96e6fb6c57c951ab705bc773cb1f242005d6ea19\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1677694218 +0530\ncommitter GitHub <noreply@github.com> 1677694218 +0530\n\nRollup merge of #108143 - notriddle:notriddle/filter-exclamation-macro, r=GuillaumeGomez\n\nrustdoc: search by macro when query ends with `!`\n\nRelated to #96399\n\nNote: the `never` type alias is tested in [`/tests/rustdoc-js-std/alias-3.js`](https://github.com/notriddle/rust/blob/08ad401633037cc226b3806a3c5f48c2f34703bf/tests/rustdoc-js-std/alias-3.js)\n\n## Before\n\n![image](https://user-images.githubusercontent.com/1593513/219504192-54cc0753-ff97-4a37-ad4a-8ae915181325.png)\n\n## After\n\n![image](https://user-images.githubusercontent.com/1593513/219504251-589a7e11-1e7b-4b7b-879d-1b564080017c.png)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f03e5345aa5bbee3c35a394238431b1267f7ab93", "html_url": "https://github.com/rust-lang/rust/commit/f03e5345aa5bbee3c35a394238431b1267f7ab93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f03e5345aa5bbee3c35a394238431b1267f7ab93/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5423745db8b434fcde54888b35f518f00cce00e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/5423745db8b434fcde54888b35f518f00cce00e4", "html_url": "https://github.com/rust-lang/rust/commit/5423745db8b434fcde54888b35f518f00cce00e4"}, {"sha": "96e6fb6c57c951ab705bc773cb1f242005d6ea19", "url": "https://api.github.com/repos/rust-lang/rust/commits/96e6fb6c57c951ab705bc773cb1f242005d6ea19", "html_url": "https://github.com/rust-lang/rust/commit/96e6fb6c57c951ab705bc773cb1f242005d6ea19"}], "stats": {"total": 162, "additions": 137, "deletions": 25}, "files": [{"sha": "28a004a92531a895059962406ff3c163457d5318", "filename": "src/doc/rustdoc/src/how-to-read-rustdoc.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f03e5345aa5bbee3c35a394238431b1267f7ab93/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-read-rustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/f03e5345aa5bbee3c35a394238431b1267f7ab93/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-read-rustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-read-rustdoc.md?ref=f03e5345aa5bbee3c35a394238431b1267f7ab93", "patch": "@@ -84,6 +84,9 @@ When typing in the search bar, you can prefix your search term with a type\n followed by a colon (such as `mod:`) to restrict the results to just that\n kind of item. (The available items are listed in the help popup.)\n \n+Searching for `println!` will search for a macro named `println`, just like\n+searching for `macro:println` does.\n+\n ### Changing displayed theme\n \n You can change the displayed theme by opening the settings menu (the gear"}, {"sha": "6501d32531fc1774f4ea6c4b7cc4059a3cf47dd7", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f03e5345aa5bbee3c35a394238431b1267f7ab93/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/f03e5345aa5bbee3c35a394238431b1267f7ab93/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=f03e5345aa5bbee3c35a394238431b1267f7ab93", "patch": "@@ -300,20 +300,21 @@ function initSearch(rawSearchIndex) {\n      * @return {integer}\n      */\n     function getIdentEndPosition(parserState) {\n+        const start = parserState.pos;\n         let end = parserState.pos;\n-        let foundExclamation = false;\n+        let foundExclamation = -1;\n         while (parserState.pos < parserState.length) {\n             const c = parserState.userQuery[parserState.pos];\n             if (!isIdentCharacter(c)) {\n                 if (c === \"!\") {\n-                    if (foundExclamation) {\n+                    if (foundExclamation !== -1) {\n                         throw new Error(\"Cannot have more than one `!` in an ident\");\n                     } else if (parserState.pos + 1 < parserState.length &&\n                         isIdentCharacter(parserState.userQuery[parserState.pos + 1])\n                     ) {\n                         throw new Error(\"`!` can only be at the end of an ident\");\n                     }\n-                    foundExclamation = true;\n+                    foundExclamation = parserState.pos;\n                 } else if (isErrorCharacter(c)) {\n                     throw new Error(`Unexpected \\`${c}\\``);\n                 } else if (\n@@ -326,16 +327,35 @@ function initSearch(rawSearchIndex) {\n                     if (!isPathStart(parserState)) {\n                         break;\n                     }\n+                    if (foundExclamation !== -1) {\n+                        if (start <= (end - 2)) {\n+                            throw new Error(\"Cannot have associated items in macros\");\n+                        } else {\n+                            // if start == end - 1, we got the never type\n+                            // while the never type has no associated macros, we still\n+                            // can parse a path like that\n+                            foundExclamation = -1;\n+                        }\n+                    }\n                     // Skip current \":\".\n                     parserState.pos += 1;\n-                    foundExclamation = false;\n                 } else {\n                     throw new Error(`Unexpected \\`${c}\\``);\n                 }\n             }\n             parserState.pos += 1;\n             end = parserState.pos;\n         }\n+        // if start == end - 1, we got the never type\n+        if (foundExclamation !== -1 && start <= (end - 2)) {\n+            if (parserState.typeFilter === null) {\n+                parserState.typeFilter = \"macro\";\n+            } else if (parserState.typeFilter !== \"macro\") {\n+                throw new Error(\"Invalid search type: macro `!` and \" +\n+                    `\\`${parserState.typeFilter}\\` both specified`);\n+            }\n+            end = foundExclamation;\n+        }\n         return end;\n     }\n \n@@ -589,8 +609,8 @@ function initSearch(rawSearchIndex) {\n      *\n      * The supported syntax by this parser is as follow:\n      *\n-     * ident = *(ALPHA / DIGIT / \"_\") [!]\n-     * path = ident *(DOUBLE-COLON ident)\n+     * ident = *(ALPHA / DIGIT / \"_\")\n+     * path = ident *(DOUBLE-COLON ident) [!]\n      * arg = path [generics]\n      * arg-without-generic = path\n      * type-sep = COMMA/WS *(COMMA/WS)"}, {"sha": "f82a2472063ce62b15086a0d630d789a3363881d", "filename": "tests/rustdoc-js-std/parser-errors.js", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f03e5345aa5bbee3c35a394238431b1267f7ab93/tests%2Frustdoc-js-std%2Fparser-errors.js", "raw_url": "https://github.com/rust-lang/rust/raw/f03e5345aa5bbee3c35a394238431b1267f7ab93/tests%2Frustdoc-js-std%2Fparser-errors.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-errors.js?ref=f03e5345aa5bbee3c35a394238431b1267f7ab93", "patch": "@@ -37,6 +37,8 @@ const QUERY = [\n     \"mod : :\",\n     \"a!a\",\n     \"a!!\",\n+    \"mod:a!\",\n+    \"a!::a\",\n ];\n \n const PARSED = [\n@@ -382,4 +384,22 @@ const PARSED = [\n         userQuery: \"a!!\",\n         error: 'Cannot have more than one `!` in an ident',\n     },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: \"mod:a!\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"mod:a!\",\n+        error: 'Invalid search type: macro `!` and `mod` both specified',\n+    },\n+    {\n+        elems: [],\n+        foundElems: 0,\n+        original: \"a!::a\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"a!::a\",\n+        error: 'Cannot have associated items in macros',\n+    },\n ];"}, {"sha": "01f65b478f8e9bdb0a6e298fc18aebd32f1284cc", "filename": "tests/rustdoc-js-std/parser-filter.js", "status": "modified", "additions": 46, "deletions": 1, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/f03e5345aa5bbee3c35a394238431b1267f7ab93/tests%2Frustdoc-js-std%2Fparser-filter.js", "raw_url": "https://github.com/rust-lang/rust/raw/f03e5345aa5bbee3c35a394238431b1267f7ab93/tests%2Frustdoc-js-std%2Fparser-filter.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-filter.js?ref=f03e5345aa5bbee3c35a394238431b1267f7ab93", "patch": "@@ -1,4 +1,4 @@\n-const QUERY = ['fn:foo', 'enum : foo', 'macro<f>:foo'];\n+const QUERY = ['fn:foo', 'enum : foo', 'macro<f>:foo', 'macro!', 'macro:mac!', 'a::mac!'];\n \n const PARSED = [\n     {\n@@ -40,4 +40,49 @@ const PARSED = [\n         userQuery: \"macro<f>:foo\",\n         error: \"Unexpected `:`\",\n     },\n+    {\n+        elems: [{\n+            name: \"macro\",\n+            fullPath: [\"macro\"],\n+            pathWithoutLast: [],\n+            pathLast: \"macro\",\n+            generics: [],\n+        }],\n+        foundElems: 1,\n+        original: \"macro!\",\n+        returned: [],\n+        typeFilter: 14,\n+        userQuery: \"macro!\",\n+        error: null,\n+    },\n+    {\n+        elems: [{\n+            name: \"mac\",\n+            fullPath: [\"mac\"],\n+            pathWithoutLast: [],\n+            pathLast: \"mac\",\n+            generics: [],\n+        }],\n+        foundElems: 1,\n+        original: \"macro:mac!\",\n+        returned: [],\n+        typeFilter: 14,\n+        userQuery: \"macro:mac!\",\n+        error: null,\n+    },\n+    {\n+        elems: [{\n+            name: \"a::mac\",\n+            fullPath: [\"a\", \"mac\"],\n+            pathWithoutLast: [\"a\"],\n+            pathLast: \"mac\",\n+            generics: [],\n+        }],\n+        foundElems: 1,\n+        original: \"a::mac!\",\n+        returned: [],\n+        typeFilter: 14,\n+        userQuery: \"a::mac!\",\n+        error: null,\n+    },\n ];"}, {"sha": "6c17d00f16edc1e6658dcdb4a386e993ca467251", "filename": "tests/rustdoc-js-std/parser-ident.js", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f03e5345aa5bbee3c35a394238431b1267f7ab93/tests%2Frustdoc-js-std%2Fparser-ident.js", "raw_url": "https://github.com/rust-lang/rust/raw/f03e5345aa5bbee3c35a394238431b1267f7ab93/tests%2Frustdoc-js-std%2Fparser-ident.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js-std%2Fparser-ident.js?ref=f03e5345aa5bbee3c35a394238431b1267f7ab93", "patch": "@@ -3,6 +3,7 @@ const QUERY = [\n     \"!\",\n     \"a!\",\n     \"a!::b\",\n+    \"!::b\",\n     \"a!::b!\",\n ];\n \n@@ -47,47 +48,50 @@ const PARSED = [\n     },\n     {\n         elems: [{\n-            name: \"a!\",\n-            fullPath: [\"a!\"],\n+            name: \"a\",\n+            fullPath: [\"a\"],\n             pathWithoutLast: [],\n-            pathLast: \"a!\",\n+            pathLast: \"a\",\n             generics: [],\n         }],\n         foundElems: 1,\n         original: \"a!\",\n         returned: [],\n-        typeFilter: -1,\n+        typeFilter: 14,\n         userQuery: \"a!\",\n         error: null,\n     },\n     {\n-        elems: [{\n-            name: \"a!::b\",\n-            fullPath: [\"a!\", \"b\"],\n-            pathWithoutLast: [\"a!\"],\n-            pathLast: \"b\",\n-            generics: [],\n-        }],\n-        foundElems: 1,\n+        elems: [],\n+        foundElems: 0,\n         original: \"a!::b\",\n         returned: [],\n         typeFilter: -1,\n         userQuery: \"a!::b\",\n-        error: null,\n+        error: \"Cannot have associated items in macros\",\n     },\n     {\n         elems: [{\n-            name: \"a!::b!\",\n-            fullPath: [\"a!\", \"b!\"],\n-            pathWithoutLast: [\"a!\"],\n-            pathLast: \"b!\",\n+            name: \"!::b\",\n+            fullPath: [\"!\", \"b\"],\n+            pathWithoutLast: [\"!\"],\n+            pathLast: \"b\",\n             generics: [],\n         }],\n         foundElems: 1,\n+        original: \"!::b\",\n+        returned: [],\n+        typeFilter: -1,\n+        userQuery: \"!::b\",\n+        error: null,\n+    },\n+    {\n+        elems: [],\n+        foundElems: 0,\n         original: \"a!::b!\",\n         returned: [],\n         typeFilter: -1,\n         userQuery: \"a!::b!\",\n-        error: null,\n+        error: \"Cannot have associated items in macros\",\n     },\n ];"}, {"sha": "2b179ce146bf0cc5a1b7f77169c554ede5b80fe6", "filename": "tests/rustdoc-js/macro-search.js", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f03e5345aa5bbee3c35a394238431b1267f7ab93/tests%2Frustdoc-js%2Fmacro-search.js", "raw_url": "https://github.com/rust-lang/rust/raw/f03e5345aa5bbee3c35a394238431b1267f7ab93/tests%2Frustdoc-js%2Fmacro-search.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fmacro-search.js?ref=f03e5345aa5bbee3c35a394238431b1267f7ab93", "patch": "@@ -0,0 +1,10 @@\n+// exact-check\n+\n+const QUERY = 'abracadabra!';\n+\n+const EXPECTED = {\n+    'others': [\n+        { 'path': 'macro_search', 'name': 'abracadabra' },\n+        { 'path': 'macro_search', 'name': 'abracadabra_b' },\n+    ],\n+};"}, {"sha": "dc397490cf583f996e75b6dff5c7710dddbd57ff", "filename": "tests/rustdoc-js/macro-search.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f03e5345aa5bbee3c35a394238431b1267f7ab93/tests%2Frustdoc-js%2Fmacro-search.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f03e5345aa5bbee3c35a394238431b1267f7ab93/tests%2Frustdoc-js%2Fmacro-search.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-js%2Fmacro-search.rs?ref=f03e5345aa5bbee3c35a394238431b1267f7ab93", "patch": "@@ -0,0 +1,10 @@\n+#[macro_export]\n+macro_rules! abracadabra {\n+    () => {}\n+}\n+#[macro_export]\n+macro_rules! abracadabra_b {\n+    () => {}\n+}\n+pub fn abracadabra() {}\n+pub fn abracadabra_c() {}"}]}