{"sha": "f7bfc4879390117e850da74ad73eb9f9df588350", "node_id": "C_kwDOAAsO6NoAKGY3YmZjNDg3OTM5MDExN2U4NTBkYTc0YWQ3M2ViOWY5ZGY1ODgzNTA", "commit": {"author": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-11-21T23:25:43Z"}, "committer": {"name": "The 8472", "email": "git@infinite-source.de", "date": "2022-12-17T13:32:12Z"}, "message": "optimize line-by-line style checks in tidy", "tree": {"sha": "9f912f495919bd4366de39477773da52cf487d2e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f912f495919bd4366de39477773da52cf487d2e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7bfc4879390117e850da74ad73eb9f9df588350", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7bfc4879390117e850da74ad73eb9f9df588350", "html_url": "https://github.com/rust-lang/rust/commit/f7bfc4879390117e850da74ad73eb9f9df588350", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7bfc4879390117e850da74ad73eb9f9df588350/comments", "author": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "committer": {"login": "the8472", "id": 1065730, "node_id": "MDQ6VXNlcjEwNjU3MzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1065730?v=4", "gravatar_id": "", "url": "https://api.github.com/users/the8472", "html_url": "https://github.com/the8472", "followers_url": "https://api.github.com/users/the8472/followers", "following_url": "https://api.github.com/users/the8472/following{/other_user}", "gists_url": "https://api.github.com/users/the8472/gists{/gist_id}", "starred_url": "https://api.github.com/users/the8472/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/the8472/subscriptions", "organizations_url": "https://api.github.com/users/the8472/orgs", "repos_url": "https://api.github.com/users/the8472/repos", "events_url": "https://api.github.com/users/the8472/events{/privacy}", "received_events_url": "https://api.github.com/users/the8472/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "49c2279ef658d8732597c4da93897d84838f3df5", "url": "https://api.github.com/repos/rust-lang/rust/commits/49c2279ef658d8732597c4da93897d84838f3df5", "html_url": "https://github.com/rust-lang/rust/commit/49c2279ef658d8732597c4da93897d84838f3df5"}], "stats": {"total": 59, "additions": 35, "deletions": 24}, "files": [{"sha": "f91e38262f64ff8fd1800c99b1cc10ec85856569", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 35, "deletions": 24, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/f7bfc4879390117e850da74ad73eb9f9df588350/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7bfc4879390117e850da74ad73eb9f9df588350/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=f7bfc4879390117e850da74ad73eb9f9df588350", "patch": "@@ -17,7 +17,7 @@\n //! `// ignore-tidy-CHECK-NAME`.\n \n use crate::walk::{filter_dirs, walk};\n-use regex::Regex;\n+use regex::{Regex, RegexSet};\n use std::path::Path;\n \n /// Error code markdown is restricted to 80 columns because they can be\n@@ -225,6 +225,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:x}\", v)))\n         .chain(PROBLEMATIC_CONSTS.iter().map(|v| format!(\"{:X}\", v)))\n         .collect();\n+    let problematic_regex = RegexSet::new(problematic_consts_strings.as_slice()).unwrap();\n     walk(path, &mut skip, &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n@@ -281,7 +282,27 @@ pub fn check(path: &Path, bad: &mut bool) {\n         let mut trailing_new_lines = 0;\n         let mut lines = 0;\n         let mut last_safety_comment = false;\n+        let is_test = file.components().any(|c| c.as_os_str() == \"tests\");\n+        // scanning the whole file for multiple needles at once is more efficient than\n+        // executing lines times needles separate searches.\n+        let any_problematic_line = problematic_regex.is_match(contents);\n         for (i, line) in contents.split('\\n').enumerate() {\n+            if line.is_empty() {\n+                if i == 0 {\n+                    leading_new_lines = true;\n+                }\n+                trailing_new_lines += 1;\n+                continue;\n+            } else {\n+                trailing_new_lines = 0;\n+            }\n+\n+            let trimmed = line.trim();\n+\n+            if !trimmed.starts_with(\"//\") {\n+                lines += 1;\n+            }\n+\n             let mut err = |msg: &str| {\n                 tidy_error!(bad, \"{}:{}: {}\", file.display(), i + 1, msg);\n             };\n@@ -308,36 +329,38 @@ pub fn check(path: &Path, bad: &mut bool) {\n                 suppressible_tidy_err!(err, skip_cr, \"CR character\");\n             }\n             if filename != \"style.rs\" {\n-                if line.contains(\"TODO\") {\n+                if trimmed.contains(\"TODO\") {\n                     err(\"TODO is deprecated; use FIXME\")\n                 }\n-                if line.contains(\"//\") && line.contains(\" XXX\") {\n+                if trimmed.contains(\"//\") && trimmed.contains(\" XXX\") {\n                     err(\"XXX is deprecated; use FIXME\")\n                 }\n-                for s in problematic_consts_strings.iter() {\n-                    if line.contains(s) {\n-                        err(\"Don't use magic numbers that spell things (consider 0x12345678)\");\n+                if any_problematic_line {\n+                    for s in problematic_consts_strings.iter() {\n+                        if trimmed.contains(s) {\n+                            err(\"Don't use magic numbers that spell things (consider 0x12345678)\");\n+                        }\n                     }\n                 }\n             }\n-            let is_test = || file.components().any(|c| c.as_os_str() == \"tests\");\n             // for now we just check libcore\n-            if line.contains(\"unsafe {\") && !line.trim().starts_with(\"//\") && !last_safety_comment {\n-                if file.components().any(|c| c.as_os_str() == \"core\") && !is_test() {\n+            if trimmed.contains(\"unsafe {\") && !trimmed.starts_with(\"//\") && !last_safety_comment {\n+                if file.components().any(|c| c.as_os_str() == \"core\") && !is_test {\n                     suppressible_tidy_err!(err, skip_undocumented_unsafe, \"undocumented unsafe\");\n                 }\n             }\n-            if line.contains(\"// SAFETY:\") {\n+            if trimmed.contains(\"// SAFETY:\") {\n                 last_safety_comment = true;\n-            } else if line.trim().starts_with(\"//\") || line.trim().is_empty() {\n+            } else if trimmed.starts_with(\"//\") || trimmed.is_empty() {\n                 // keep previous value\n             } else {\n                 last_safety_comment = false;\n             }\n             if (line.starts_with(\"// Copyright\")\n                 || line.starts_with(\"# Copyright\")\n                 || line.starts_with(\"Copyright\"))\n-                && (line.contains(\"Rust Developers\") || line.contains(\"Rust Project Developers\"))\n+                && (trimmed.contains(\"Rust Developers\")\n+                    || trimmed.contains(\"Rust Project Developers\"))\n             {\n                 suppressible_tidy_err!(\n                     err,\n@@ -351,18 +374,6 @@ pub fn check(path: &Path, bad: &mut bool) {\n             if filename.ends_with(\".cpp\") && line.contains(\"llvm_unreachable\") {\n                 err(LLVM_UNREACHABLE_INFO);\n             }\n-            if line.is_empty() {\n-                if i == 0 {\n-                    leading_new_lines = true;\n-                }\n-                trailing_new_lines += 1;\n-            } else {\n-                trailing_new_lines = 0;\n-            }\n-\n-            if !line.trim().starts_with(\"//\") {\n-                lines += 1;\n-            }\n         }\n         if leading_new_lines {\n             let mut err = |_| {"}]}