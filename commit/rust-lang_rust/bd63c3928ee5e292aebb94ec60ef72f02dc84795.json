{"sha": "bd63c3928ee5e292aebb94ec60ef72f02dc84795", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJkNjNjMzkyOGVlNWUyOTJhZWJiOTRlYzYwZWY3MmYwMmRjODQ3OTU=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-17T05:12:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-17T05:12:36Z"}, "message": "rustc: Move some attribute accessors from rustdoc to rustc", "tree": {"sha": "5d53314d99ef0eb58bba288935376dad51b49b79", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d53314d99ef0eb58bba288935376dad51b49b79"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd63c3928ee5e292aebb94ec60ef72f02dc84795", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd63c3928ee5e292aebb94ec60ef72f02dc84795", "html_url": "https://github.com/rust-lang/rust/commit/bd63c3928ee5e292aebb94ec60ef72f02dc84795", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd63c3928ee5e292aebb94ec60ef72f02dc84795/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f2ad6b1241741db2af192b87b9af1b1d1679af1", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f2ad6b1241741db2af192b87b9af1b1d1679af1", "html_url": "https://github.com/rust-lang/rust/commit/4f2ad6b1241741db2af192b87b9af1b1d1679af1"}], "stats": {"total": 107, "additions": 55, "deletions": 52}, "files": [{"sha": "642f6eb439ee6f087148d69c5a3c50fe574f4c24", "filename": "src/comp/front/attr.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/bd63c3928ee5e292aebb94ec60ef72f02dc84795/src%2Fcomp%2Ffront%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd63c3928ee5e292aebb94ec60ef72f02dc84795/src%2Fcomp%2Ffront%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fattr.rs?ref=bd63c3928ee5e292aebb94ec60ef72f02dc84795", "patch": "@@ -20,6 +20,9 @@ export get_meta_item_name;\n export get_meta_item_value_str;\n export get_meta_item_value_str_by_name;\n export get_meta_item_list;\n+export meta_item_value_from_list;\n+export meta_item_list_from_list;\n+export name_value_str_pair;\n export mk_name_value_item_str;\n export mk_name_value_item;\n export mk_list_item;\n@@ -217,6 +220,53 @@ fn native_abi(attrs: [ast::attribute]) -> either::t<str, ast::native_abi> {\n     };\n }\n \n+fn meta_item_from_list(\n+    items: [@ast::meta_item],\n+    name: str\n+) -> option<@ast::meta_item> {\n+    let items = attr::find_meta_items_by_name(items, name);\n+    vec::last(items)\n+}\n+\n+fn meta_item_value_from_list(\n+    items: [@ast::meta_item],\n+    name: str\n+) -> option<str> {\n+    alt meta_item_from_list(items, name) {\n+      some(item) {\n+        alt attr::get_meta_item_value_str(item) {\n+          some(value) { some(value) }\n+          none. { none }\n+        }\n+      }\n+      none. { none }\n+    }\n+}\n+\n+fn meta_item_list_from_list(\n+    items: [@ast::meta_item],\n+    name: str\n+) -> option<[@ast::meta_item]> {\n+    alt meta_item_from_list(items, name) {\n+      some(item) {\n+        attr::get_meta_item_list(item)\n+      }\n+      none. { none }\n+    }\n+}\n+\n+fn name_value_str_pair(\n+    item: @ast::meta_item\n+) -> option<(str, str)> {\n+    alt attr::get_meta_item_value_str(item) {\n+      some(value) {\n+        let name = attr::get_meta_item_name(item);\n+        some((name, value))\n+      }\n+      none. { none }\n+    }\n+}\n+\n fn span<T: copy>(item: T) -> ast::spanned<T> {\n     ret {node: item, span: ast_util::dummy_sp()};\n }"}, {"sha": "39c569347f4d50dbaa7ce02e94aa20214a2c0cca", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 5, "deletions": 52, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/bd63c3928ee5e292aebb94ec60ef72f02dc84795/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd63c3928ee5e292aebb94ec60ef72f02dc84795/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=bd63c3928ee5e292aebb94ec60ef72f02dc84795", "patch": "@@ -71,64 +71,17 @@ fn parse_fn(\n     };\n }\n \n-fn meta_item_from_list(\n-    items: [@ast::meta_item],\n-    name: str\n-) -> option<@ast::meta_item> {\n-    let items = attr::find_meta_items_by_name(items, name);\n-    vec::last(items)\n-}\n-\n-fn meta_item_value_from_list(\n-    items: [@ast::meta_item],\n-    name: str\n-) -> option<str> {\n-    alt meta_item_from_list(items, name) {\n-      some(item) {\n-        alt attr::get_meta_item_value_str(item) {\n-          some(value) { some(value) }\n-          none. { none }\n-        }\n-      }\n-      none. { none }\n-    }\n-}\n-\n-fn meta_item_list_from_list(\n-    items: [@ast::meta_item],\n-    name: str\n-) -> option<[@ast::meta_item]> {\n-    alt meta_item_from_list(items, name) {\n-      some(item) {\n-        attr::get_meta_item_list(item)\n-      }\n-      none. { none }\n-    }\n-}\n-\n-fn name_value_str_pair(\n-    item: @ast::meta_item\n-) -> option<(str, str)> {\n-    alt attr::get_meta_item_value_str(item) {\n-      some(value) {\n-        let name = attr::get_meta_item_name(item);\n-        some((name, value))\n-      }\n-      none. { none }\n-    }\n-}\n-\n fn parse_fn_(\n     items: [@ast::meta_item]\n ) -> fn_attrs {\n-    let brief = meta_item_value_from_list(items, \"brief\");\n-    let desc = meta_item_value_from_list(items, \"desc\");\n-    let return = meta_item_value_from_list(items, \"return\");\n+    let brief = attr::meta_item_value_from_list(items, \"brief\");\n+    let desc = attr::meta_item_value_from_list(items, \"desc\");\n+    let return = attr::meta_item_value_from_list(items, \"return\");\n \n-    let args = alt meta_item_list_from_list(items, \"args\") {\n+    let args = alt attr::meta_item_list_from_list(items, \"args\") {\n       some(items) {\n         vec::filter_map(items) {|item|\n-            option::map(name_value_str_pair(item)) { |pair|\n+            option::map(attr::name_value_str_pair(item)) { |pair|\n                 {\n                     name: util::fst(pair),\n                     desc: util::snd(pair)"}]}