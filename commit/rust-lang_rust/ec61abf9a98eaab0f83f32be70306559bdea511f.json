{"sha": "ec61abf9a98eaab0f83f32be70306559bdea511f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNjFhYmY5YTk4ZWFhYjBmODNmMzJiZTcwMzA2NTU5YmRlYTUxMWY=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-04-24T03:17:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-24T03:17:11Z"}, "message": "Rollup merge of #84496 - marmeladema:specialization-test, r=JohnTitor\n\nAdd some specialization tests\n\nCloses #33017\nCloses #51892\n\nr? `@JohnTitor`", "tree": {"sha": "92236f714e02c650eccdc1dcd4df07282ae7baae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92236f714e02c650eccdc1dcd4df07282ae7baae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec61abf9a98eaab0f83f32be70306559bdea511f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgg424CRBK7hj4Ov3rIwAAw2AIAIJh4F4hf9ZrRW876mpjquZz\nYJsskVhluJtzqkDr5DtP2QRFWP1iT4bdu78G6ByV15XiXdzpqehEW/73nQdFB6qu\nK/zV0JyIy8IGg1lVAqwmD2v/HcG+cveVY2kRWyAaC7hpcw1MOjhmw77ngPfb29d9\nsnsXcxKu6S43hYncnmEoSwRiLIzEXDhUu2ihUdF00sgNZYZ2WIh0ZvJ27jbYTHSM\nTLyGPyiWaZMaBpOfAXqoZ2TEYIx99jv7Hybh25zEEuAgq71KOexmCm37lwjWHidB\nokcxIIk++iK2oXLa/PA4dupZXCT3Dk8BkYP2Wwoj+NYKB/aDiHz8iAYijrHkrXM=\n=gkJc\n-----END PGP SIGNATURE-----\n", "payload": "tree 92236f714e02c650eccdc1dcd4df07282ae7baae\nparent aae871d6e3e2cabb0681dc646de88e9db2c1bfcf\nparent 9b430df4dc37c2d96110f808a9313f5127e27def\nauthor Yuki Okushi <jtitor@2k36.org> 1619234231 +0900\ncommitter GitHub <noreply@github.com> 1619234231 +0900\n\nRollup merge of #84496 - marmeladema:specialization-test, r=JohnTitor\n\nAdd some specialization tests\n\nCloses #33017\nCloses #51892\n\nr? `@JohnTitor`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec61abf9a98eaab0f83f32be70306559bdea511f", "html_url": "https://github.com/rust-lang/rust/commit/ec61abf9a98eaab0f83f32be70306559bdea511f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec61abf9a98eaab0f83f32be70306559bdea511f/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aae871d6e3e2cabb0681dc646de88e9db2c1bfcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/aae871d6e3e2cabb0681dc646de88e9db2c1bfcf", "html_url": "https://github.com/rust-lang/rust/commit/aae871d6e3e2cabb0681dc646de88e9db2c1bfcf"}, {"sha": "9b430df4dc37c2d96110f808a9313f5127e27def", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b430df4dc37c2d96110f808a9313f5127e27def", "html_url": "https://github.com/rust-lang/rust/commit/9b430df4dc37c2d96110f808a9313f5127e27def"}], "stats": {"total": 91, "additions": 91, "deletions": 0}, "files": [{"sha": "4d19230df6badfacbed2d791e4fb94bb56fdf3c8", "filename": "src/test/ui/specialization/issue-33017.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ec61abf9a98eaab0f83f32be70306559bdea511f/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec61abf9a98eaab0f83f32be70306559bdea511f/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.rs?ref=ec61abf9a98eaab0f83f32be70306559bdea511f", "patch": "@@ -0,0 +1,45 @@\n+// Test to ensure that trait bounds are propertly\n+// checked on specializable associated types\n+\n+#![allow(incomplete_features)]\n+#![feature(specialization)]\n+\n+trait UncheckedCopy: Sized {\n+    type Output: From<Self> + Copy + Into<Self>;\n+}\n+\n+impl<T> UncheckedCopy for T {\n+    default type Output = Self;\n+    //~^ ERROR: the trait bound `T: Copy` is not satisfied\n+}\n+\n+fn unchecked_copy<T: UncheckedCopy>(other: &T::Output) -> T {\n+    (*other).into()\n+}\n+\n+fn bug(origin: String) {\n+    // Turn the String into it's Output type...\n+    // Which we can just do by `.into()`, the assoc type states `From<Self>`.\n+    let origin_output = origin.into();\n+\n+    // Make a copy of String::Output, which is a String...\n+    let mut copy: String = unchecked_copy::<String>(&origin_output);\n+\n+    // Turn the Output type into a String again,\n+    // Which we can just do by `.into()`, the assoc type states `Into<Self>`.\n+    let mut origin: String = origin_output.into();\n+\n+    // assert both Strings use the same buffer.\n+    assert_eq!(copy.as_ptr(), origin.as_ptr());\n+\n+    // Any use of the copy we made becomes invalid,\n+    drop(origin);\n+\n+    // OH NO! UB UB UB UB!\n+    copy.push_str(\" world!\");\n+    println!(\"{}\", copy);\n+}\n+\n+fn main() {\n+    bug(String::from(\"hello\"));\n+}"}, {"sha": "bff4618d0be4c3b7294a43c6ce551623bf78871e", "filename": "src/test/ui/specialization/issue-33017.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/ec61abf9a98eaab0f83f32be70306559bdea511f/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec61abf9a98eaab0f83f32be70306559bdea511f/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-33017.stderr?ref=ec61abf9a98eaab0f83f32be70306559bdea511f", "patch": "@@ -0,0 +1,17 @@\n+error[E0277]: the trait bound `T: Copy` is not satisfied\n+  --> $DIR/issue-33017.rs:12:5\n+   |\n+LL |     type Output: From<Self> + Copy + Into<Self>;\n+   |                               ---- required by this bound in `UncheckedCopy::Output`\n+...\n+LL |     default type Output = Self;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `T`\n+   |\n+help: consider restricting type parameter `T`\n+   |\n+LL | impl<T: std::marker::Copy> UncheckedCopy for T {\n+   |       ^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "3cd0711ae42c641e9df857cf60a3c4ad3a9a6ed5", "filename": "src/test/ui/specialization/issue-51892.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ec61abf9a98eaab0f83f32be70306559bdea511f/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec61abf9a98eaab0f83f32be70306559bdea511f/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.rs?ref=ec61abf9a98eaab0f83f32be70306559bdea511f", "patch": "@@ -0,0 +1,19 @@\n+#![allow(incomplete_features)]\n+#![feature(const_generics)]\n+#![feature(const_evaluatable_checked)]\n+#![feature(specialization)]\n+\n+pub trait Trait {\n+    type Type;\n+}\n+\n+impl<T: ?Sized> Trait for T {\n+    default type Type = [u8; 1];\n+}\n+\n+impl<T: Trait> Trait for *const T {\n+    type Type = [u8; std::mem::size_of::<<T as Trait>::Type>()];\n+    //~^ ERROR: unconstrained generic constant\n+}\n+\n+fn main() {}"}, {"sha": "2d30164380a8ee6ad1c91328be81113c1a09781d", "filename": "src/test/ui/specialization/issue-51892.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ec61abf9a98eaab0f83f32be70306559bdea511f/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ec61abf9a98eaab0f83f32be70306559bdea511f/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspecialization%2Fissue-51892.stderr?ref=ec61abf9a98eaab0f83f32be70306559bdea511f", "patch": "@@ -0,0 +1,10 @@\n+error: unconstrained generic constant\n+  --> $DIR/issue-51892.rs:15:5\n+   |\n+LL |     type Type = [u8; std::mem::size_of::<<T as Trait>::Type>()];\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: try adding a `where` bound using this expression: `where [(); std::mem::size_of::<<T as Trait>::Type>()]:`\n+\n+error: aborting due to previous error\n+"}]}