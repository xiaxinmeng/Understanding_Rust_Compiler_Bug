{"sha": "eaaa60dbea0aad371116cda05542cd4039942e26", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhYWE2MGRiZWEwYWFkMzcxMTE2Y2RhMDU1NDJjZDQwMzk5NDJlMjY=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-11-11T09:37:25Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2015-11-16T09:34:45Z"}, "message": "rename ImplItem_::*ImplItem to ImplItem_::*\n\n[breaking change]", "tree": {"sha": "99bdc43e89e058dc3a89b7dba9160424f2dc7b2d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99bdc43e89e058dc3a89b7dba9160424f2dc7b2d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaaa60dbea0aad371116cda05542cd4039942e26", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaaa60dbea0aad371116cda05542cd4039942e26", "html_url": "https://github.com/rust-lang/rust/commit/eaaa60dbea0aad371116cda05542cd4039942e26", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaaa60dbea0aad371116cda05542cd4039942e26/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af5d9d65e781d587414b266fb2e5815ed85f0bd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/af5d9d65e781d587414b266fb2e5815ed85f0bd3", "html_url": "https://github.com/rust-lang/rust/commit/af5d9d65e781d587414b266fb2e5815ed85f0bd3"}], "stats": {"total": 209, "additions": 103, "deletions": 106}, "files": [{"sha": "d208a2cd6db84e3d7920795216213f18bd716b47", "filename": "src/librustc/front/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -236,7 +236,7 @@ impl<'a> FnLikeNode<'a> {\n             },\n             map::NodeImplItem(ii) => {\n                 match ii.node {\n-                    ast::MethodImplItem(ref sig, ref body) => {\n+                    ast::ImplItem_::Method(ref sig, ref body) => {\n                         method(ii.id, ii.name, sig, Some(ii.vis), body, ii.span)\n                     }\n                     _ => {"}, {"sha": "114ee53a6f4a7d09ef994e3b8906ab5010278737", "filename": "src/librustc/front/map/collector.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fcollector.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -224,8 +224,8 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n \n     fn visit_impl_item(&mut self, ii: &'ast ImplItem) {\n         let def_data = match ii.node {\n-            MethodImplItem(..) | ConstImplItem(..) => DefPathData::Value(ii.name),\n-            TypeImplItem(..) => DefPathData::Type(ii.name),\n+            ImplItem_::Method(..) | ImplItem_::Const(..) => DefPathData::Value(ii.name),\n+            ImplItem_::Type(..) => DefPathData::Type(ii.name),\n         };\n \n         self.insert_def(ii.id, NodeImplItem(ii), def_data);\n@@ -234,7 +234,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n         self.parent_node = ii.id;\n \n         match ii.node {\n-            ConstImplItem(_, ref expr) => {\n+            ImplItem_::Const(_, ref expr) => {\n                 self.create_def(expr.id, DefPathData::Initializer);\n             }\n             _ => { }\n@@ -313,4 +313,3 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n         self.create_def(macro_def.id, DefPathData::MacroDef(macro_def.name));\n     }\n }\n-"}, {"sha": "c26616e618604442cf06989a72c2f0524c4e56bf", "filename": "src/librustc/front/map/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -937,18 +937,18 @@ fn node_id_to_string(map: &Map, id: NodeId, include_id: bool) -> String {\n         }\n         Some(NodeImplItem(ii)) => {\n             match ii.node {\n-                ConstImplItem(..) => {\n+                ImplItem_::Const(..) => {\n                     format!(\"assoc const {} in {}{}\",\n                             ii.name,\n                             map.path_to_string(id),\n                             id_str)\n                 }\n-                MethodImplItem(..) => {\n+                ImplItem_::Method(..) => {\n                     format!(\"method {} in {}{}\",\n                             ii.name,\n                             map.path_to_string(id), id_str)\n                 }\n-                TypeImplItem(_) => {\n+                ImplItem_::Type(_) => {\n                     format!(\"assoc type {} in {}{}\",\n                             ii.name,\n                             map.path_to_string(id),"}, {"sha": "213790ef0fbd860ee8273e2097785614a92d13f1", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -739,7 +739,7 @@ fn encode_info_for_method<'a, 'tcx>(ecx: &EncodeContext<'a, 'tcx>,\n     let elem = ast_map::PathName(m.name);\n     encode_path(rbml_w, impl_path.chain(Some(elem)));\n     if let Some(impl_item) = impl_item_opt {\n-        if let hir::MethodImplItem(ref sig, _) = impl_item.node {\n+        if let hir::ImplItem_::Method(ref sig, _) = impl_item.node {\n             encode_attributes(rbml_w, &impl_item.attrs);\n             let scheme = ecx.tcx.lookup_item_type(m.def_id);\n             let any_types = !scheme.generics.types.is_empty();"}, {"sha": "8f032c59ef569965ca14fe3a6076ea007bb2b0d9", "filename": "src/librustc/middle/check_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_const.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -348,7 +348,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for CheckCrateVisitor<'a, 'tcx> {\n \n     fn visit_impl_item(&mut self, i: &'v hir::ImplItem) {\n         match i.node {\n-            hir::ConstImplItem(_, ref expr) => {\n+            hir::ImplItem_::Const(_, ref expr) => {\n                 self.global_expr(Mode::Const, &*expr);\n             }\n             _ => self.with_mode(Mode::Var, |v| visit::walk_impl_item(v, i)),"}, {"sha": "4de278e1c8d9ae0668fb2788be9f1500d9fefc1b", "filename": "src/librustc/middle/check_static_recursion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static_recursion.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -79,7 +79,7 @@ impl<'a, 'ast: 'a> Visitor<'ast> for CheckCrateVisitor<'a, 'ast> {\n \n     fn visit_impl_item(&mut self, ii: &'ast hir::ImplItem) {\n         match ii.node {\n-            hir::ConstImplItem(..) => {\n+            hir::ImplItem_::Const(..) => {\n                 let mut recursion_visitor =\n                     CheckItemRecursionVisitor::new(self, &ii.span);\n                 recursion_visitor.visit_impl_item(ii);"}, {"sha": "984002f53845cc1958dcbbfd57404953f1e254b1", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -129,7 +129,7 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,\n                 _ => None\n             },\n             Some(ast_map::NodeImplItem(ii)) => match ii.node {\n-                hir::ConstImplItem(_, ref expr) => {\n+                hir::ImplItem_::Const(_, ref expr) => {\n                     Some(&*expr)\n                 }\n                 _ => None\n@@ -171,7 +171,7 @@ pub fn lookup_const_by_id<'a, 'tcx: 'a>(tcx: &'a ty::ctxt<'tcx>,\n                 _ => None\n             },\n             csearch::FoundAst::Found(&InlinedItem::ImplItem(_, ref ii)) => match ii.node {\n-                hir::ConstImplItem(_, ref expr) => Some(expr.id),\n+                hir::ImplItem_::Const(_, ref expr) => Some(expr.id),\n                 _ => None\n             },\n             _ => None\n@@ -996,7 +996,7 @@ pub fn eval_const_expr_partial<'tcx>(tcx: &ty::ctxt<'tcx>,\n                           },\n                           ty::ImplContainer(_) => match tcx.map.find(node_id) {\n                               Some(ast_map::NodeImplItem(ii)) => match ii.node {\n-                                  hir::ConstImplItem(ref ty, ref expr) => {\n+                                  hir::ImplItem_::Const(ref ty, ref expr) => {\n                                       (Some(&**expr), Some(&**ty))\n                                   }\n                                   _ => (None, None)"}, {"sha": "b45c5c9bdc39668c0c65208a5a3248f464cee5a5", "filename": "src/librustc/middle/dead.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Fmiddle%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Fmiddle%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdead.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -358,14 +358,14 @@ impl<'v> Visitor<'v> for LifeSeeder {\n             hir::ItemImpl(_, _, _, ref opt_trait, _, ref impl_items) => {\n                 for impl_item in impl_items {\n                     match impl_item.node {\n-                        hir::ConstImplItem(..) |\n-                        hir::MethodImplItem(..) => {\n+                        hir::ImplItem_::Const(..) |\n+                        hir::ImplItem_::Method(..) => {\n                             if opt_trait.is_some() ||\n                                     has_allow_dead_code_or_lang_attr(&impl_item.attrs) {\n                                 self.worklist.push(impl_item.id);\n                             }\n                         }\n-                        hir::TypeImplItem(_) => {}\n+                        hir::ImplItem_::Type(_) => {}\n                     }\n                 }\n             }\n@@ -571,21 +571,21 @@ impl<'a, 'tcx, 'v> Visitor<'v> for DeadVisitor<'a, 'tcx> {\n \n     fn visit_impl_item(&mut self, impl_item: &hir::ImplItem) {\n         match impl_item.node {\n-            hir::ConstImplItem(_, ref expr) => {\n+            hir::ImplItem_::Const(_, ref expr) => {\n                 if !self.symbol_is_live(impl_item.id, None) {\n                     self.warn_dead_code(impl_item.id, impl_item.span,\n                                         impl_item.name, \"associated const\");\n                 }\n                 visit::walk_expr(self, expr)\n             }\n-            hir::MethodImplItem(_, ref body) => {\n+            hir::ImplItem_::Method(_, ref body) => {\n                 if !self.symbol_is_live(impl_item.id, None) {\n                     self.warn_dead_code(impl_item.id, impl_item.span,\n                                         impl_item.name, \"method\");\n                 }\n                 visit::walk_block(self, body)\n             }\n-            hir::TypeImplItem(..) => {}\n+            hir::ImplItem_::Type(..) => {}\n         }\n     }\n "}, {"sha": "6e07ca84c67700fcde2a51693ae0c5240fe39e15", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -948,7 +948,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                 }\n                 ast_map::NodeImplItem(item) => {\n                     match item.node {\n-                        hir::MethodImplItem(ref sig, _) => {\n+                        hir::ImplItem_::Method(ref sig, _) => {\n                             Some((&sig.decl,\n                                   &sig.generics,\n                                   sig.unsafety,\n@@ -1839,7 +1839,7 @@ fn lifetimes_in_scope(tcx: &ty::ctxt,\n             },\n             ast_map::NodeImplItem(ii) => {\n                 match ii.node {\n-                    hir::MethodImplItem(ref sig, _) => {\n+                    hir::ImplItem_::Method(ref sig, _) => {\n                         taken.push_all(&sig.generics.lifetimes);\n                         Some(ii.id)\n                     }"}, {"sha": "3e2f24e9f45fb82432569c51684e68b61505e912", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -185,8 +185,8 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             }\n             Some(ast_map::NodeImplItem(impl_item)) => {\n                 match impl_item.node {\n-                    hir::ConstImplItem(..) => true,\n-                    hir::MethodImplItem(ref sig, _) => {\n+                    hir::ImplItem_::Const(..) => true,\n+                    hir::ImplItem_::Method(ref sig, _) => {\n                         if generics_require_inlining(&sig.generics) ||\n                                 attr::requests_inline(&impl_item.attrs) {\n                             true\n@@ -206,7 +206,7 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n                             }\n                         }\n                     }\n-                    hir::TypeImplItem(_) => false,\n+                    hir::ImplItem_::Type(_) => false,\n                 }\n             }\n             Some(_) => false,\n@@ -299,16 +299,16 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             }\n             ast_map::NodeImplItem(impl_item) => {\n                 match impl_item.node {\n-                    hir::ConstImplItem(_, ref expr) => {\n+                    hir::ImplItem_::Const(_, ref expr) => {\n                         self.visit_expr(&*expr);\n                     }\n-                    hir::MethodImplItem(ref sig, ref body) => {\n+                    hir::ImplItem_::Method(ref sig, ref body) => {\n                         let did = self.tcx.map.get_parent_did(search_item);\n                         if method_might_be_inlined(self.tcx, sig, impl_item, did) {\n                             visit::walk_block(self, body)\n                         }\n                     }\n-                    hir::TypeImplItem(_) => {}\n+                    hir::ImplItem_::Type(_) => {}\n                 }\n             }\n             // Nothing to recurse on for these"}, {"sha": "55eaa85f50898917d4ad2acc0d7aa6be10634c56", "filename": "src/librustc/middle/ty/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty%2Fmod.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -1124,7 +1124,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n         match cx.map.find(id) {\n             Some(ast_map::NodeImplItem(ref impl_item)) => {\n                 match impl_item.node {\n-                    hir::TypeImplItem(_) => {\n+                    hir::ImplItem_::Type(_) => {\n                         // associated types don't have their own entry (for some reason),\n                         // so for now just grab environment for the impl\n                         let impl_id = cx.map.get_parent(id);\n@@ -1136,7 +1136,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                                                            &predicates,\n                                                            id)\n                     }\n-                    hir::ConstImplItem(_, _) => {\n+                    hir::ImplItem_::Const(_, _) => {\n                         let def_id = cx.map.local_def_id(id);\n                         let scheme = cx.lookup_item_type(def_id);\n                         let predicates = cx.lookup_predicates(def_id);\n@@ -1145,7 +1145,7 @@ impl<'a, 'tcx> ParameterEnvironment<'a, 'tcx> {\n                                                            &predicates,\n                                                            id)\n                     }\n-                    hir::MethodImplItem(_, ref body) => {\n+                    hir::ImplItem_::Method(_, ref body) => {\n                         let method_def_id = cx.map.local_def_id(id);\n                         match cx.impl_or_trait_item(method_def_id) {\n                             MethodTraitItem(ref method_ty) => {\n@@ -2158,7 +2158,7 @@ impl<'tcx> ctxt<'tcx> {\n                 }\n                 ItemImpl(_, _, _, _, _, ref iis) => {\n                     iis.iter().filter_map(|ii| {\n-                        if let hir::ConstImplItem(_, _) = ii.node {\n+                        if let hir::ImplItem_::Const(_, _) = ii.node {\n                             match self.impl_or_trait_item(self.map.local_def_id(ii.id)) {\n                                 ConstTraitItem(ac) => Some(ac),\n                                 _ => {"}, {"sha": "4f6c5ec50554b07e9e872ef213b401d7990af593", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -89,7 +89,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for BorrowckCtxt<'a, 'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, ii: &hir::ImplItem) {\n-        if let hir::ConstImplItem(_, ref expr) = ii.node {\n+        if let hir::ImplItem_::Const(_, ref expr) = ii.node {\n             gather_loans::gather_loans_in_static_initializer(self, &*expr);\n         }\n         visit::walk_impl_item(self, ii);"}, {"sha": "474281008cc0da797386716c6a848a41c312af79", "filename": "src/librustc_front/fold.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_front%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_front%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Ffold.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -867,13 +867,13 @@ pub fn noop_fold_impl_item<T: Folder>(i: P<ImplItem>, folder: &mut T) -> P<ImplI\n             attrs: fold_attrs(attrs, folder),\n             vis: vis,\n             node: match node {\n-                ConstImplItem(ty, expr) => {\n-                    ConstImplItem(folder.fold_ty(ty), folder.fold_expr(expr))\n+                ImplItem_::Const(ty, expr) => {\n+                    ImplItem_::Const(folder.fold_ty(ty), folder.fold_expr(expr))\n                 }\n-                MethodImplItem(sig, body) => {\n-                    MethodImplItem(noop_fold_method_sig(sig, folder), folder.fold_block(body))\n+                ImplItem_::Method(sig, body) => {\n+                    ImplItem_::Method(noop_fold_method_sig(sig, folder), folder.fold_block(body))\n                 }\n-                TypeImplItem(ty) => TypeImplItem(folder.fold_ty(ty)),\n+                ImplItem_::Type(ty) => ImplItem_::Type(folder.fold_ty(ty)),\n             },\n             span: folder.new_span(span),\n         }"}, {"sha": "b4f1d7405386d4f69711da45af655f34f478cf6d", "filename": "src/librustc_front/hir.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_front%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_front%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fhir.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -19,7 +19,6 @@ pub use self::ExplicitSelf_::*;\n pub use self::Expr_::*;\n pub use self::FunctionRetTy::*;\n pub use self::ForeignItem_::*;\n-pub use self::ImplItem_::*;\n pub use self::Item_::*;\n pub use self::Mutability::*;\n pub use self::Pat_::*;\n@@ -777,9 +776,9 @@ pub struct ImplItem {\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub enum ImplItem_ {\n-    ConstImplItem(P<Ty>, P<Expr>),\n-    MethodImplItem(MethodSig, P<Block>),\n-    TypeImplItem(P<Ty>),\n+    Const(P<Ty>, P<Expr>),\n+    Method(MethodSig, P<Block>),\n+    Type(P<Ty>),\n }\n \n // Bind a type to an associated type: `A=Foo`."}, {"sha": "1efecf16070d38af9bf50da823c2473419d82bfb", "filename": "src/librustc_front/lowering.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_front%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_front%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Flowering.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -676,12 +676,12 @@ pub fn lower_impl_item(_lctx: &LoweringContext, i: &ImplItem) -> P<hir::ImplItem\n         vis: lower_visibility(_lctx, i.vis),\n         node: match i.node {\n             ConstImplItem(ref ty, ref expr) => {\n-                hir::ConstImplItem(lower_ty(_lctx, ty), lower_expr(_lctx, expr))\n+                hir::ImplItem_::Const(lower_ty(_lctx, ty), lower_expr(_lctx, expr))\n             }\n             MethodImplItem(ref sig, ref body) => {\n-                hir::MethodImplItem(lower_method_sig(_lctx, sig), lower_block(_lctx, body))\n+                hir::ImplItem_::Method(lower_method_sig(_lctx, sig), lower_block(_lctx, body))\n             }\n-            TypeImplItem(ref ty) => hir::TypeImplItem(lower_ty(_lctx, ty)),\n+            TypeImplItem(ref ty) => hir::ImplItem_::Type(lower_ty(_lctx, ty)),\n             MacImplItem(..) => panic!(\"Shouldn't exist any more\"),\n         },\n         span: i.span,"}, {"sha": "b4ed1d20d69d7008de397b965b1355f240522f98", "filename": "src/librustc_front/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_front%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fprint%2Fpprust.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -1011,16 +1011,16 @@ impl<'a> State<'a> {\n         try!(self.maybe_print_comment(ii.span.lo));\n         try!(self.print_outer_attributes(&ii.attrs));\n         match ii.node {\n-            hir::ConstImplItem(ref ty, ref expr) => {\n+            hir::ImplItem_::Const(ref ty, ref expr) => {\n                 try!(self.print_associated_const(ii.name, &ty, Some(&expr), ii.vis));\n             }\n-            hir::MethodImplItem(ref sig, ref body) => {\n+            hir::ImplItem_::Method(ref sig, ref body) => {\n                 try!(self.head(\"\"));\n                 try!(self.print_method_sig(ii.name, sig, ii.vis));\n                 try!(self.nbsp());\n                 try!(self.print_block_with_attrs(body, &ii.attrs));\n             }\n-            hir::TypeImplItem(ref ty) => {\n+            hir::ImplItem_::Type(ref ty) => {\n                 try!(self.print_associated_type(ii.name, None, Some(ty)));\n             }\n         }"}, {"sha": "00c99a6bb8dc4f920067457c9a0e38d05c6428fd", "filename": "src/librustc_front/visit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_front%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_front%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fvisit.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -614,18 +614,18 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n     visitor.visit_name(impl_item.span, impl_item.name);\n     walk_list!(visitor, visit_attribute, &impl_item.attrs);\n     match impl_item.node {\n-        ConstImplItem(ref ty, ref expr) => {\n+        ImplItem_::Const(ref ty, ref expr) => {\n             visitor.visit_ty(ty);\n             visitor.visit_expr(expr);\n         }\n-        MethodImplItem(ref sig, ref body) => {\n+        ImplItem_::Method(ref sig, ref body) => {\n             visitor.visit_fn(FnKind::Method(impl_item.name, sig, Some(impl_item.vis)),\n                              &sig.decl,\n                              body,\n                              impl_item.span,\n                              impl_item.id);\n         }\n-        TypeImplItem(ref ty) => {\n+        ImplItem_::Type(ref ty) => {\n             visitor.visit_ty(ty);\n         }\n     }"}, {"sha": "779b772348ff1b5b1fe02e18cb44c9d090d360ed", "filename": "src/librustc_lint/bad_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_lint%2Fbad_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_lint%2Fbad_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbad_style.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -351,7 +351,7 @@ impl LateLintPass for NonUpperCaseGlobals {\n \n     fn check_impl_item(&mut self, cx: &LateContext, ii: &hir::ImplItem) {\n         match ii.node {\n-            hir::ConstImplItem(..) => {\n+            hir::ImplItem_::Const(..) => {\n                 NonUpperCaseGlobals::check_upper_case(cx, \"associated constant\",\n                                                       ii.name, ii.span);\n             }"}, {"sha": "2ab28e6f2c2f9e393cff25c9ae29717bf323ba66", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -505,9 +505,9 @@ impl LateLintPass for MissingDoc {\n         }\n \n         let desc = match impl_item.node {\n-            hir::ConstImplItem(..) => \"an associated constant\",\n-            hir::MethodImplItem(..) => \"a method\",\n-            hir::TypeImplItem(_) => \"an associated type\",\n+            hir::ImplItem_::Const(..) => \"an associated constant\",\n+            hir::ImplItem_::Method(..) => \"a method\",\n+            hir::ImplItem_::Type(_) => \"an associated type\",\n         };\n         self.check_missing_docs_attrs(cx, Some(impl_item.id),\n                                       &impl_item.attrs,"}, {"sha": "06700dbd40ba8d82ffe684f14ab3417cfee4c8e4", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -99,10 +99,10 @@ impl<'a, 'tcx> visit::Visitor<'tcx> for OuterDump<'a, 'tcx> {\n \n     fn visit_impl_item(&mut self, impl_item: &'tcx hir::ImplItem) {\n         match impl_item.node {\n-            hir::MethodImplItem(..) => {\n+            hir::ImplItem_::Method(..) => {\n                 self.visit_mir(&impl_item.attrs, |c| visit::walk_impl_item(c, impl_item));\n             }\n-            hir::ConstImplItem(..) | hir::TypeImplItem(..) => {}\n+            hir::ImplItem_::Const(..) | hir::ImplItem_::Type(..) => {}\n         }\n         visit::walk_impl_item(self, impl_item);\n     }"}, {"sha": "a8059b676b80820dfe278a4b7ad844b49e12721e", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -553,8 +553,8 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n                 //               where the method was defined?\n                 Some(ast_map::NodeImplItem(ii)) => {\n                     match ii.node {\n-                        hir::ConstImplItem(..) |\n-                        hir::MethodImplItem(..) => {\n+                        hir::ImplItem_::Const(..) |\n+                        hir::ImplItem_::Method(..) => {\n                             let imp = self.tcx.map\n                                           .get_parent_did(closest_private_id);\n                             match self.tcx.impl_trait_ref(imp) {\n@@ -565,7 +565,7 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n                                 _ => ii.vis\n                             }\n                         }\n-                        hir::TypeImplItem(_) => return Allowable,\n+                        hir::ImplItem_::Type(_) => return Allowable,\n                     }\n                 }\n                 Some(ast_map::NodeTraitItem(_)) => {\n@@ -1293,11 +1293,11 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n                     impl_items.iter()\n                               .any(|impl_item| {\n                                   match impl_item.node {\n-                                      hir::ConstImplItem(..) |\n-                                      hir::MethodImplItem(..) => {\n+                                      hir::ImplItem_::Const(..) |\n+                                      hir::ImplItem_::Method(..) => {\n                                           self.exported_items.contains(&impl_item.id)\n                                       }\n-                                      hir::TypeImplItem(_) => false,\n+                                      hir::ImplItem_::Type(_) => false,\n                                   }\n                               });\n \n@@ -1316,13 +1316,13 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n                                 // don't erroneously report errors for private\n                                 // types in private items.\n                                 match impl_item.node {\n-                                    hir::ConstImplItem(..) |\n-                                    hir::MethodImplItem(..)\n+                                    hir::ImplItem_::Const(..) |\n+                                    hir::ImplItem_::Method(..)\n                                         if self.item_is_public(&impl_item.id, impl_item.vis) =>\n                                     {\n                                         visit::walk_impl_item(self, impl_item)\n                                     }\n-                                    hir::TypeImplItem(..) => {\n+                                    hir::ImplItem_::Type(..) => {\n                                         visit::walk_impl_item(self, impl_item)\n                                     }\n                                     _ => {}\n@@ -1347,7 +1347,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n \n                             // Those in 3. are warned with this call.\n                             for impl_item in impl_items {\n-                                if let hir::TypeImplItem(ref ty) = impl_item.node {\n+                                if let hir::ImplItem_::Type(ref ty) = impl_item.node {\n                                     self.visit_ty(ty);\n                                 }\n                             }\n@@ -1359,13 +1359,13 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n                     let mut found_pub_static = false;\n                     for impl_item in impl_items {\n                         match impl_item.node {\n-                            hir::ConstImplItem(..) => {\n+                            hir::ImplItem_::Const(..) => {\n                                 if self.item_is_public(&impl_item.id, impl_item.vis) {\n                                     found_pub_static = true;\n                                     visit::walk_impl_item(self, impl_item);\n                                 }\n                             }\n-                            hir::MethodImplItem(ref sig, _) => {\n+                            hir::ImplItem_::Method(ref sig, _) => {\n                                 if sig.explicit_self.node == hir::SelfStatic &&\n                                       self.item_is_public(&impl_item.id, impl_item.vis) {\n                                     found_pub_static = true;"}, {"sha": "ea6b943e3e083b70c2c6d1f4369fbcf197576cb4", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -79,20 +79,19 @@ use syntax::codemap::{self, Span, Pos};\n use rustc_front::visit::{self, FnKind, Visitor};\n use rustc_front::hir;\n use rustc_front::hir::{Arm, BindByRef, BindByValue, BindingMode, Block};\n-use rustc_front::hir::{ConstImplItem, Crate};\n+use rustc_front::hir::Crate;\n use rustc_front::hir::{Expr, ExprAgain, ExprBreak, ExprField};\n use rustc_front::hir::{ExprLoop, ExprWhile, ExprMethodCall};\n use rustc_front::hir::{ExprPath, ExprStruct, FnDecl};\n use rustc_front::hir::{ForeignItemFn, ForeignItemStatic, Generics};\n use rustc_front::hir::{ImplItem, Item, ItemConst, ItemEnum, ItemExternCrate};\n use rustc_front::hir::{ItemFn, ItemForeignMod, ItemImpl, ItemMod, ItemStatic, ItemDefaultImpl};\n use rustc_front::hir::{ItemStruct, ItemTrait, ItemTy, ItemUse};\n-use rustc_front::hir::{Local, MethodImplItem};\n+use rustc_front::hir::Local;\n use rustc_front::hir::{Pat, PatEnum, PatIdent, PatLit, PatQPath};\n use rustc_front::hir::{PatRange, PatStruct, Path, PrimTy};\n use rustc_front::hir::{TraitRef, Ty, TyBool, TyChar, TyFloat, TyInt};\n use rustc_front::hir::{TyRptr, TyStr, TyUint, TyPath, TyPtr};\n-use rustc_front::hir::TypeImplItem;\n use rustc_front::util::walk_pat;\n \n use std::collections::{HashMap, HashSet};\n@@ -2421,7 +2420,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                     this.with_current_self_type(self_type, |this| {\n                         for impl_item in impl_items {\n                             match impl_item.node {\n-                                ConstImplItem(..) => {\n+                                hir::ImplItem_::Const(..) => {\n                                     // If this is a trait impl, ensure the const\n                                     // exists in trait\n                                     this.check_trait_item(impl_item.name,\n@@ -2431,7 +2430,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                         visit::walk_impl_item(this, impl_item);\n                                     });\n                                 }\n-                                MethodImplItem(ref sig, _) => {\n+                                hir::ImplItem_::Method(ref sig, _) => {\n                                     // If this is a trait impl, ensure the method\n                                     // exists in trait\n                                     this.check_trait_item(impl_item.name,\n@@ -2448,7 +2447,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                                         visit::walk_impl_item(this, impl_item);\n                                     });\n                                 }\n-                                TypeImplItem(ref ty) => {\n+                                hir::ImplItem_::Type(ref ty) => {\n                                     // If this is a trait impl, ensure the type\n                                     // exists in trait\n                                     this.check_trait_item(impl_item.name,\n@@ -3545,7 +3544,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         _ => return false,\n                     },\n                     hir_map::NodeImplItem(impl_item) => match impl_item.node {\n-                        hir::MethodImplItem(ref sig, _) => sig,\n+                        hir::ImplItem_::Method(ref sig, _) => sig,\n                         _ => return false,\n                     },\n                     _ => return false,"}, {"sha": "ff472e4cf8848506e3b4903745a78b4c0e10d012", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -1326,7 +1326,7 @@ fn build_cfg(tcx: &ty::ctxt, id: ast::NodeId) -> (ast::NodeId, Option<cfg::CFG>)\n         }\n         Some(hir_map::NodeImplItem(impl_item)) => {\n             match impl_item.node {\n-                hir::MethodImplItem(_, ref body) => body,\n+                hir::ImplItem_::Method(_, ref body) => body,\n                 _ => {\n                     tcx.sess.bug(\"unexpected variant: non-method impl item in \\\n                                   has_nested_returns\")\n@@ -2614,7 +2614,7 @@ pub fn get_item_val(ccx: &CrateContext, id: ast::NodeId) -> ValueRef {\n \n         hir_map::NodeImplItem(impl_item) => {\n             match impl_item.node {\n-                hir::MethodImplItem(..) => {\n+                hir::ImplItem_::Method(..) => {\n                     register_method(ccx, id, &impl_item.attrs, impl_item.span)\n                 }\n                 _ => {"}, {"sha": "7debb71cb38360869ea1a794360d29a8db8d80e0", "filename": "src/librustc_trans/trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdebuginfo%2Fmod.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -253,7 +253,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n         }\n         hir_map::NodeImplItem(impl_item) => {\n             match impl_item.node {\n-                hir::MethodImplItem(ref sig, ref body) => {\n+                hir::ImplItem_::Method(ref sig, ref body) => {\n                     if contains_nodebug_attribute(&impl_item.attrs) {\n                         return FunctionDebugContext::FunctionWithoutDebugInfo;\n                     }"}, {"sha": "7cccd6b38593f51bca978d5080ceb63bb746a9de", "filename": "src/librustc_trans/trans/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_trans%2Ftrans%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Finline.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -160,7 +160,7 @@ fn instantiate_inline(ccx: &CrateContext, fn_id: DefId)\n             ccx.stats().n_inlines.set(ccx.stats().n_inlines.get() + 1);\n \n             // Translate monomorphic impl methods immediately.\n-            if let hir::MethodImplItem(ref sig, ref body) = impl_item.node {\n+            if let hir::ImplItem_::Method(ref sig, ref body) = impl_item.node {\n                 let impl_tpt = ccx.tcx().lookup_item_type(impl_did);\n                 if impl_tpt.generics.types.is_empty() &&\n                         sig.generics.ty_params.is_empty() {"}, {"sha": "8b843afdd6d785a3aa95095d3fd85981722ef82f", "filename": "src/librustc_trans/trans/meth.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmeth.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -70,7 +70,7 @@ pub fn trans_impl(ccx: &CrateContext,\n     if !generics.ty_params.is_empty() {\n         for impl_item in impl_items {\n             match impl_item.node {\n-                hir::MethodImplItem(..) => {\n+                hir::ImplItem_::Method(..) => {\n                     visit::walk_impl_item(&mut v, impl_item);\n                 }\n                 _ => {}\n@@ -80,7 +80,7 @@ pub fn trans_impl(ccx: &CrateContext,\n     }\n     for impl_item in impl_items {\n         match impl_item.node {\n-            hir::MethodImplItem(ref sig, ref body) => {\n+            hir::ImplItem_::Method(ref sig, ref body) => {\n                 if sig.generics.ty_params.is_empty() {\n                     let trans_everywhere = attr::requests_inline(&impl_item.attrs);\n                     for (ref ccx, is_origin) in ccx.maybe_iter(trans_everywhere) {"}, {"sha": "976a98b077e1829e395f821cae9dc7a0fa315ab8", "filename": "src/librustc_trans/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fmonomorphize.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -206,7 +206,7 @@ pub fn monomorphic_fn<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n         }\n         hir_map::NodeImplItem(impl_item) => {\n             match impl_item.node {\n-                hir::MethodImplItem(ref sig, ref body) => {\n+                hir::ImplItem_::Method(ref sig, ref body) => {\n                     let d = mk_lldecl(abi::Rust);\n                     let needs_body = setup_lldecl(d, &impl_item.attrs);\n                     if needs_body {"}, {"sha": "8ce4637be262859cbf532cafff9933e55040a457", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -764,14 +764,14 @@ pub fn check_item_body<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>, it: &'tcx hir::Item) {\n \n         for impl_item in impl_items {\n             match impl_item.node {\n-                hir::ConstImplItem(_, ref expr) => {\n+                hir::ImplItem_::Const(_, ref expr) => {\n                     check_const(ccx, impl_item.span, &*expr, impl_item.id)\n                 }\n-                hir::MethodImplItem(ref sig, ref body) => {\n+                hir::ImplItem_::Method(ref sig, ref body) => {\n                     check_method_body(ccx, &impl_pty.generics, sig, body,\n                                       impl_item.id, impl_item.span);\n                 }\n-                hir::TypeImplItem(_) => {\n+                hir::ImplItem_::Type(_) => {\n                     // Nothing to do here.\n                 }\n             }\n@@ -908,7 +908,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                                            impl_trait_ref));\n             });\n         match impl_item.node {\n-            hir::ConstImplItem(..) => {\n+            hir::ImplItem_::Const(..) => {\n                 let impl_const = match ty_impl_item {\n                     ty::ConstTraitItem(ref cti) => cti,\n                     _ => tcx.sess.span_bug(impl_item.span, \"non-const impl-item for const\")\n@@ -929,7 +929,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                               impl_trait_ref)\n                 }\n             }\n-            hir::MethodImplItem(ref sig, ref body) => {\n+            hir::ImplItem_::Method(ref sig, ref body) => {\n                 check_trait_fn_not_const(ccx, impl_item.span, sig.constness);\n \n                 let impl_method = match ty_impl_item {\n@@ -952,7 +952,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                               impl_trait_ref)\n                 }\n             }\n-            hir::TypeImplItem(_) => {\n+            hir::ImplItem_::Type(_) => {\n                 let impl_type = match ty_impl_item {\n                     ty::TypeTraitItem(ref tti) => tti,\n                     _ => tcx.sess.span_bug(impl_item.span, \"non-type impl-item for type\")\n@@ -983,7 +983,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             ty::ConstTraitItem(ref associated_const) => {\n                 let is_implemented = impl_items.iter().any(|ii| {\n                     match ii.node {\n-                        hir::ConstImplItem(..) => {\n+                        hir::ImplItem_::Const(..) => {\n                             ii.name == associated_const.name\n                         }\n                         _ => false,\n@@ -1003,7 +1003,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n                 let is_implemented =\n                     impl_items.iter().any(|ii| {\n                         match ii.node {\n-                            hir::MethodImplItem(..) => {\n+                            hir::ImplItem_::Method(..) => {\n                                 ii.name == trait_method.name\n                             }\n                             _ => false,\n@@ -1022,7 +1022,7 @@ fn check_impl_items_against_trait<'a, 'tcx>(ccx: &CrateCtxt<'a, 'tcx>,\n             ty::TypeTraitItem(ref associated_type) => {\n                 let is_implemented = impl_items.iter().any(|ii| {\n                     match ii.node {\n-                        hir::TypeImplItem(_) => {\n+                        hir::ImplItem_::Type(_) => {\n                             ii.name == associated_type.name\n                         }\n                         _ => false,"}, {"sha": "21d1e04d3bf76f509c85a961bd31638802a6b28d", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -196,13 +196,13 @@ impl<'a, 'tcx> CoherenceChecker<'a, 'tcx> {\n                 impl_items.iter().map(|impl_item| {\n                     let impl_def_id = self.crate_context.tcx.map.local_def_id(impl_item.id);\n                     match impl_item.node {\n-                        hir::ConstImplItem(..) => {\n+                        hir::ImplItem_::Const(..) => {\n                             ConstTraitItemId(impl_def_id)\n                         }\n-                        hir::MethodImplItem(..) => {\n+                        hir::ImplItem_::Method(..) => {\n                             MethodTraitItemId(impl_def_id)\n                         }\n-                        hir::TypeImplItem(_) => {\n+                        hir::ImplItem_::Type(_) => {\n                             TypeTraitItemId(impl_def_id)\n                         }\n                     }"}, {"sha": "869b162175e64524cd64d9d09f277c47c3cd6f0f", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -821,14 +821,14 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n \n             for impl_item in impl_items {\n                 let seen_items = match impl_item.node {\n-                    hir::TypeImplItem(_) => &mut seen_type_items,\n+                    hir::ImplItem_::Type(_) => &mut seen_type_items,\n                     _                    => &mut seen_value_items,\n                 };\n                 if !seen_items.insert(impl_item.name) {\n                     let desc = match impl_item.node {\n-                        hir::ConstImplItem(_, _) => \"associated constant\",\n-                        hir::TypeImplItem(_) => \"associated type\",\n-                        hir::MethodImplItem(ref sig, _) =>\n+                        hir::ImplItem_::Const(_, _) => \"associated constant\",\n+                        hir::ImplItem_::Type(_) => \"associated type\",\n+                        hir::ImplItem_::Method(ref sig, _) =>\n                             match sig.explicit_self.node {\n                                 hir::SelfStatic => \"associated function\",\n                                 _ => \"method\",\n@@ -838,7 +838,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n                     span_err!(tcx.sess, impl_item.span, E0201, \"duplicate {}\", desc);\n                 }\n \n-                if let hir::ConstImplItem(ref ty, _) = impl_item.node {\n+                if let hir::ImplItem_::Const(ref ty, _) = impl_item.node {\n                     let ty = ccx.icx(&ty_predicates)\n                                 .to_ty(&ExplicitRscope, &*ty);\n                     tcx.register_item_type(ccx.tcx.map.local_def_id(impl_item.id),\n@@ -855,7 +855,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n \n             // Convert all the associated types.\n             for impl_item in impl_items {\n-                if let hir::TypeImplItem(ref ty) = impl_item.node {\n+                if let hir::ImplItem_::Type(ref ty) = impl_item.node {\n                     if opt_trait_ref.is_none() {\n                         span_err!(tcx.sess, impl_item.span, E0202,\n                                   \"associated types are not allowed in inherent impls\");\n@@ -870,7 +870,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n             }\n \n             let methods = impl_items.iter().filter_map(|ii| {\n-                if let hir::MethodImplItem(ref sig, _) = ii.node {\n+                if let hir::ImplItem_::Method(ref sig, _) = ii.node {\n                     // if the method specifies a visibility, use that, otherwise\n                     // inherit the visibility from the impl (so `foo` in `pub impl\n                     // { fn foo(); }` is public, but private in `impl { fn\n@@ -889,7 +889,7 @@ fn convert_item(ccx: &CrateCtxt, it: &hir::Item) {\n                             &ty_predicates);\n \n             for impl_item in impl_items {\n-                if let hir::MethodImplItem(ref sig, ref body) = impl_item.node {\n+                if let hir::ImplItem_::Method(ref sig, ref body) = impl_item.node {\n                     let body_id = body.id;\n                     check_method_self_type(ccx,\n                                            &BindingRscope::new(),"}, {"sha": "bc07d4d937784094c18022aca99d0ddb1a931c80", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaaa60dbea0aad371116cda05542cd4039942e26/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=eaaa60dbea0aad371116cda05542cd4039942e26", "patch": "@@ -1271,16 +1271,16 @@ impl Clean<Item> for hir::TraitItem {\n impl Clean<Item> for hir::ImplItem {\n     fn clean(&self, cx: &DocContext) -> Item {\n         let inner = match self.node {\n-            hir::ConstImplItem(ref ty, ref expr) => {\n+            hir::ImplItem_::Const(ref ty, ref expr) => {\n                 ConstantItem(Constant{\n                     type_: ty.clean(cx),\n                     expr: expr.span.to_src(cx),\n                 })\n             }\n-            hir::MethodImplItem(ref sig, _) => {\n+            hir::ImplItem_::Method(ref sig, _) => {\n                 MethodItem(sig.clean(cx))\n             }\n-            hir::TypeImplItem(ref ty) => TypedefItem(Typedef {\n+            hir::ImplItem_::Type(ref ty) => TypedefItem(Typedef {\n                 type_: ty.clean(cx),\n                 generics: Generics {\n                     lifetimes: Vec::new(),"}]}