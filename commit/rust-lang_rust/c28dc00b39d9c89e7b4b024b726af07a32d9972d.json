{"sha": "c28dc00b39d9c89e7b4b024b726af07a32d9972d", "node_id": "C_kwDOAAsO6NoAKGMyOGRjMDBiMzlkOWM4OWU3YjRiMDI0YjcyNmFmMDdhMzJkOTk3MmQ", "commit": {"author": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-18T11:34:33Z"}, "committer": {"name": "Jake Heinz", "email": "jh@discordapp.com", "date": "2021-11-19T05:36:07Z"}, "message": "ide: dedupe or merge hover actions", "tree": {"sha": "26ae584ae1d165c80337ce36a4bdba21cc89116f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/26ae584ae1d165c80337ce36a4bdba21cc89116f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c28dc00b39d9c89e7b4b024b726af07a32d9972d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c28dc00b39d9c89e7b4b024b726af07a32d9972d", "html_url": "https://github.com/rust-lang/rust/commit/c28dc00b39d9c89e7b4b024b726af07a32d9972d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c28dc00b39d9c89e7b4b024b726af07a32d9972d/comments", "author": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jhgg", "id": 5489149, "node_id": "MDQ6VXNlcjU0ODkxNDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5489149?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jhgg", "html_url": "https://github.com/jhgg", "followers_url": "https://api.github.com/users/jhgg/followers", "following_url": "https://api.github.com/users/jhgg/following{/other_user}", "gists_url": "https://api.github.com/users/jhgg/gists{/gist_id}", "starred_url": "https://api.github.com/users/jhgg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jhgg/subscriptions", "organizations_url": "https://api.github.com/users/jhgg/orgs", "repos_url": "https://api.github.com/users/jhgg/repos", "events_url": "https://api.github.com/users/jhgg/events{/privacy}", "received_events_url": "https://api.github.com/users/jhgg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cfa26c3ac3d85d502f75c2f6b760aadcc997a1a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfa26c3ac3d85d502f75c2f6b760aadcc997a1a8", "html_url": "https://github.com/rust-lang/rust/commit/cfa26c3ac3d85d502f75c2f6b760aadcc997a1a8"}], "stats": {"total": 114, "additions": 94, "deletions": 20}, "files": [{"sha": "8d24bdcf4f930d7bf8605c4d45843d01ba6a63b8", "filename": "crates/ide/src/hover.rs", "status": "modified", "additions": 48, "deletions": 4, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c28dc00b39d9c89e7b4b024b726af07a32d9972d/crates%2Fide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28dc00b39d9c89e7b4b024b726af07a32d9972d/crates%2Fide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover.rs?ref=c28dc00b39d9c89e7b4b024b726af07a32d9972d", "patch": "@@ -11,7 +11,7 @@ use ide_db::{\n     base_db::FileRange,\n     defs::Definition,\n     helpers::{pick_best_token, FamousDefs},\n-    RootDatabase,\n+    FxIndexSet, RootDatabase,\n };\n use itertools::Itertools;\n use syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxNode, SyntaxToken, T};\n@@ -69,7 +69,7 @@ impl HoverAction {\n     }\n }\n \n-#[derive(Debug, Clone, Eq, PartialEq)]\n+#[derive(Debug, Clone, Eq, PartialEq, Hash)]\n pub struct HoverGotoTypeData {\n     pub mod_path: String,\n     pub nav: NavigationTarget,\n@@ -136,11 +136,12 @@ pub(crate) fn hover(\n         .flatten()\n         .unique_by(|&(def, _)| def)\n         .filter_map(|(def, node)| hover_for_definition(sema, file_id, def, &node, config))\n-        .reduce(|mut acc, HoverResult { markup, actions }| {\n+        .reduce(|mut acc: HoverResult, HoverResult { markup, actions }| {\n             acc.actions.extend(actions);\n             acc.markup = Markup::from(format!(\"{}\\n---\\n{}\", acc.markup, markup));\n             acc\n         });\n+\n     if result.is_none() {\n         // fallbacks, show keywords or types\n         if let Some(res) = render::keyword(sema, config, &original_token) {\n@@ -152,7 +153,10 @@ pub(crate) fn hover(\n             return res;\n         }\n     }\n-    result.map(|res| RangeInfo::new(original_token.text_range(), res))\n+    result.map(|mut res: HoverResult| {\n+        res.actions = dedupe_or_merge_hover_actions(res.actions);\n+        RangeInfo::new(original_token.text_range(), res)\n+    })\n }\n \n pub(crate) fn hover_for_definition(\n@@ -341,3 +345,43 @@ fn walk_and_push_ty(\n         }\n     });\n }\n+\n+fn dedupe_or_merge_hover_actions(actions: Vec<HoverAction>) -> Vec<HoverAction> {\n+    let mut deduped_actions = Vec::with_capacity(actions.len());\n+    let mut go_to_type_targets = FxIndexSet::default();\n+\n+    let mut seen_implementation = false;\n+    let mut seen_reference = false;\n+    let mut seen_runnable = false;\n+    for action in actions {\n+        match action {\n+            HoverAction::GoToType(targets) => {\n+                go_to_type_targets.extend(targets);\n+            }\n+            HoverAction::Implementation(..) => {\n+                if !seen_implementation {\n+                    seen_implementation = true;\n+                    deduped_actions.push(action);\n+                }\n+            }\n+            HoverAction::Reference(..) => {\n+                if !seen_reference {\n+                    seen_reference = true;\n+                    deduped_actions.push(action);\n+                }\n+            }\n+            HoverAction::Runnable(..) => {\n+                if !seen_runnable {\n+                    seen_runnable = true;\n+                    deduped_actions.push(action);\n+                }\n+            }\n+        };\n+    }\n+\n+    if !go_to_type_targets.is_empty() {\n+        deduped_actions.push(HoverAction::GoToType(go_to_type_targets.into_iter().collect()));\n+    }\n+\n+    deduped_actions\n+}"}, {"sha": "5db6fd79749b090e751e2f2dc8f2e6955b1ed7c5", "filename": "crates/ide/src/hover/tests.rs", "status": "modified", "additions": 46, "deletions": 16, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/c28dc00b39d9c89e7b4b024b726af07a32d9972d/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c28dc00b39d9c89e7b4b024b726af07a32d9972d/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fhover%2Ftests.rs?ref=c28dc00b39d9c89e7b4b024b726af07a32d9972d", "patch": "@@ -173,7 +173,7 @@ m!(ab$0c);\n             ---\n \n             Outer\n-            \"#]],\n+        \"#]],\n     );\n }\n \n@@ -1135,6 +1135,39 @@ fn foo() {\n     );\n }\n \n+#[test]\n+fn test_hover_multiple_actions() {\n+    check_actions(\n+        r#\"\n+struct Bar;\n+struct Foo { bar: Bar }\n+\n+fn foo(Foo { b$0ar }: &Foo) {}\n+        \"#,\n+        expect![[r#\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"test::Bar\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    0,\n+                                ),\n+                                full_range: 0..11,\n+                                focus_range: 7..10,\n+                                name: \"Bar\",\n+                                kind: Struct,\n+                                description: \"struct Bar\",\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+        \"#]],\n+    )\n+}\n+\n #[test]\n fn test_hover_through_literal_string_in_builtin_macro() {\n     check_hover_no_result(\n@@ -1750,9 +1783,6 @@ fn foo_$0test() {}\n                         cfg: None,\n                     },\n                 ),\n-                GoToType(\n-                    [],\n-                ),\n             ]\n         \"#]],\n     );\n@@ -2749,21 +2779,21 @@ fn main() {\n }\n \"#,\n         expect![[r#\"\n-                *f*\n+            *f*\n \n-                ```rust\n-                f: &i32\n-                ```\n-                ---\n+            ```rust\n+            f: &i32\n+            ```\n+            ---\n \n-                ```rust\n-                test::S\n-                ```\n+            ```rust\n+            test::S\n+            ```\n \n-                ```rust\n-                f: i32\n-                ```\n-            \"#]],\n+            ```rust\n+            f: i32\n+            ```\n+        \"#]],\n     );\n }\n "}]}