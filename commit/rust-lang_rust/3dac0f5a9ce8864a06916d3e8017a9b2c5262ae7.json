{"sha": "3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkYWMwZjVhOWNlODg2NGEwNjkxNmQzZTgwMTdhOWIyYzUyNjJhZTc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-23T02:07:35Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-01-23T19:01:38Z"}, "message": "Create `StructuredDiagnostic`\n\nCreate the concept of an `StructuredDiagnostic` that is self-contained\nwith enough knowledge of all variables to create a `DiagnosticBuilder`,\nincluding different possible versions (one line output and expanded\nexplanations).", "tree": {"sha": "0eedc24351ba95d4d2b1e0b7330a208218b5a604", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0eedc24351ba95d4d2b1e0b7330a208218b5a604"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7", "html_url": "https://github.com/rust-lang/rust/commit/3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d41cbad6a34976e3d6d0321ba1d4c433e24e21c", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d41cbad6a34976e3d6d0321ba1d4c433e24e21c", "html_url": "https://github.com/rust-lang/rust/commit/7d41cbad6a34976e3d6d0321ba1d4c433e24e21c"}], "stats": {"total": 215, "additions": 167, "deletions": 48}, "files": [{"sha": "995aef51cade7c890ea3fdc7606aa8c0e09b0907", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7", "patch": "@@ -831,6 +831,10 @@ impl Session {\n             _ => true,\n         }\n     }\n+\n+    pub fn explain(&self, code: &DiagnosticId) -> bool {\n+        self.opts.debugging_opts.explain && !self.parse_sess.span_diagnostic.code_emitted(code)\n+    }\n }\n \n pub fn build_session(sopts: config::Options,"}, {"sha": "b8be0d6c18279880b7bd333a81d8b03d720ee170", "filename": "src/librustc_typeck/check/cast.rs", "status": "modified", "additions": 6, "deletions": 29, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcast.rs?ref=3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7", "patch": "@@ -281,35 +281,12 @@ impl<'a, 'gcx, 'tcx> CastCheck<'tcx> {\n                                 .emit();\n             }\n             CastError::SizedUnsizedCast => {\n-                let mut err = type_error_struct!(\n-                    fcx.tcx.sess,\n-                    self.span,\n-                    self.expr_ty,\n-                    E0607,\n-                    \"cannot cast thin pointer `{}` to fat pointer `{}`\",\n-                    self.expr_ty,\n-                    fcx.ty_to_string(self.cast_ty)\n-                );\n-                if fcx.tcx.sess.opts.debugging_opts.explain\n-                    && !fcx.tcx.sess.parse_sess.span_diagnostic\n-                        .code_emitted(&err.get_code().unwrap()) {\n-                    err.help(\n-                        \"Thin pointers are \\\"simple\\\" pointers: they are purely a reference to a\n-memory address.\n-\n-Fat pointers are pointers referencing \\\"Dynamically Sized Types\\\" (also\n-called DST). DST don't have a statically known size, therefore they can\n-only exist behind some kind of pointers that contain additional\n-information. Slices and trait objects are DSTs. In the case of slices,\n-the additional information the fat pointer holds is their size.\n-\n-To fix this error, don't try to cast directly between thin and fat\n-pointers.\n-\n-For more information about casts, take a look at The Book:\n-https://doc.rust-lang.org/book/first-edition/casting-between-types.html\");\n-                }\n-                err.emit();\n+                use structured_errors::{SizedUnsizedCastError, StructuredDiagnostic};\n+                SizedUnsizedCastError::new(&fcx.tcx.sess,\n+                                           self.span,\n+                                           self.expr_ty,\n+                                           fcx.ty_to_string(self.cast_ty))\n+                    .diagnostic().emit();\n             }\n             CastError::UnknownCastPtrKind |\n             CastError::UnknownExprPtrKind => {"}, {"sha": "3cd327adf222dc8e136c27bd2693aa6033c685e3", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 3, "deletions": 16, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7", "patch": "@@ -103,6 +103,7 @@ use rustc::ty::maps::Providers;\n use rustc::ty::util::{Representability, IntTypeExt};\n use rustc::ty::layout::LayoutOf;\n use errors::{DiagnosticBuilder, DiagnosticId};\n+\n use require_c_abi_if_variadic;\n use session::{CompileIncomplete, config, Session};\n use TypeAndSubsts;\n@@ -2591,22 +2592,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         // arguments which we skipped above.\n         if variadic {\n             fn variadic_error<'tcx>(s: &Session, span: Span, t: Ty<'tcx>, cast_ty: &str) {\n-                let mut err = type_error_struct!(\n-                    s, span, t, E0617, \"can't pass `{}` to variadic function\", t);\n-                if s.opts.debugging_opts.explain {\n-                    err.note(&format!(\"certain types, like `{}`, must be cast before passing them \\\n-                                       to a variadic function, because of arcane ABI rules \\\n-                                       dictated by the C standard\",\n-                                      t));\n-                }\n-                if let Ok(snippet) = s.codemap().span_to_snippet(span) {\n-                    err.span_suggestion(span,\n-                                        &format!(\"cast the value to `{}`\", cast_ty),\n-                                        format!(\"{} as {}\", snippet, cast_ty));\n-                } else {\n-                    err.help(&format!(\"cast the value to `{}`\", cast_ty));\n-                }\n-                err.emit();\n+                use structured_errors::{VariadicError, StructuredDiagnostic};\n+                VariadicError::new(s, span, t, cast_ty).diagnostic().emit();\n             }\n \n             for arg in args.iter().skip(expected_arg_count) {"}, {"sha": "8d5d7dc04ec223c3dbc0ee5f02b950889c52c05e", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7", "patch": "@@ -122,16 +122,17 @@ use std::iter;\n // registered before they are used.\n mod diagnostics;\n \n+mod astconv;\n mod check;\n mod check_unused;\n-mod astconv;\n+mod coherence;\n mod collect;\n mod constrained_type_params;\n+mod structured_errors;\n mod impl_wf_check;\n-mod coherence;\n+mod namespace;\n mod outlives;\n mod variance;\n-mod namespace;\n \n pub struct TypeAndSubsts<'tcx> {\n     substs: &'tcx Substs<'tcx>,"}, {"sha": "e9b96ed2d6439bdc63af4b7f30052009204b9010", "filename": "src/librustc_typeck/structured_errors.rs", "status": "added", "additions": 150, "deletions": 0, "changes": 150, "blob_url": "https://github.com/rust-lang/rust/blob/3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7/src%2Flibrustc_typeck%2Fstructured_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7/src%2Flibrustc_typeck%2Fstructured_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fstructured_errors.rs?ref=3dac0f5a9ce8864a06916d3e8017a9b2c5262ae7", "patch": "@@ -0,0 +1,150 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use rustc::session::Session;\n+use syntax_pos::Span;\n+use errors::{DiagnosticId, DiagnosticBuilder};\n+use rustc::ty::{Ty, TypeFoldable};\n+\n+pub trait StructuredDiagnostic<'tcx> {\n+    fn session(&self) -> &Session;\n+\n+    fn code(&self) -> DiagnosticId;\n+\n+    fn common(&self) -> DiagnosticBuilder<'tcx>;\n+\n+    fn diagnostic(&self) -> DiagnosticBuilder<'tcx> {\n+        let err = self.common();\n+        if self.session().explain(&self.code()) {\n+            self.extended(err)\n+        } else {\n+            self.regular(err)\n+        }\n+    }\n+\n+    fn regular(&self, err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n+        err\n+    }\n+\n+    fn extended(&self, err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n+        err\n+    }\n+}\n+\n+pub struct VariadicError<'tcx> {\n+    sess: &'tcx Session,\n+    span: Span,\n+    t: Ty<'tcx>,\n+    cast_ty: &'tcx str,\n+}\n+\n+impl<'tcx> VariadicError<'tcx> {\n+    pub fn new(sess: &'tcx Session,\n+               span: Span,\n+               t: Ty<'tcx>,\n+               cast_ty: &'tcx str) -> VariadicError<'tcx> {\n+        VariadicError { sess, span, t, cast_ty }\n+    }\n+}\n+\n+impl<'tcx> StructuredDiagnostic<'tcx> for VariadicError<'tcx> {\n+    fn session(&self) -> &Session { self.sess }\n+\n+    fn code(&self) -> DiagnosticId {\n+        __diagnostic_used!(E0617);\n+        DiagnosticId::Error(\"E0617\".to_owned())\n+    }\n+\n+    fn common(&self) -> DiagnosticBuilder<'tcx> {\n+        let mut err = if self.t.references_error() {\n+            self.sess.diagnostic().struct_dummy()\n+        } else {\n+            self.sess.struct_span_fatal_with_code(\n+                self.span,\n+                &format!(\"can't pass `{}` to variadic function\", self.t),\n+                self.code(),\n+            )\n+        };\n+        if let Ok(snippet) = self.sess.codemap().span_to_snippet(self.span) {\n+            err.span_suggestion(self.span,\n+                                &format!(\"cast the value to `{}`\", self.cast_ty),\n+                                format!(\"{} as {}\", snippet, self.cast_ty));\n+        } else {\n+            err.help(&format!(\"cast the value to `{}`\", self.cast_ty));\n+        }\n+        err\n+    }\n+\n+    fn extended(&self, mut err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n+        err.note(&format!(\"certain types, like `{}`, must be cast before passing them to a \\\n+                           variadic function, because of arcane ABI rules dictated by the C \\\n+                           standard\",\n+                          self.t));\n+        err\n+    }\n+}\n+\n+pub struct SizedUnsizedCastError<'tcx> {\n+    sess: &'tcx Session,\n+    span: Span,\n+    expr_ty: Ty<'tcx>,\n+    cast_ty: String,\n+}\n+\n+impl<'tcx> SizedUnsizedCastError<'tcx> {\n+    pub fn new(sess: &'tcx Session,\n+               span: Span,\n+               expr_ty: Ty<'tcx>,\n+               cast_ty: String) -> SizedUnsizedCastError<'tcx> {\n+        SizedUnsizedCastError { sess, span, expr_ty, cast_ty }\n+    }\n+}\n+\n+impl<'tcx> StructuredDiagnostic<'tcx> for SizedUnsizedCastError<'tcx> {\n+    fn session(&self) -> &Session { self.sess }\n+\n+    fn code(&self) -> DiagnosticId {\n+        __diagnostic_used!(E0607);\n+        DiagnosticId::Error(\"E0607\".to_owned())\n+    }\n+\n+    fn common(&self) -> DiagnosticBuilder<'tcx> {\n+        if self.expr_ty.references_error() {\n+            self.sess.diagnostic().struct_dummy()\n+        } else {\n+            self.sess.struct_span_fatal_with_code(\n+                self.span,\n+                &format!(\"cannot cast thin pointer `{}` to fat pointer `{}`\",\n+                         self.expr_ty,\n+                         self.cast_ty),\n+                self.code(),\n+            )\n+        }\n+    }\n+\n+    fn extended(&self, mut err: DiagnosticBuilder<'tcx>) -> DiagnosticBuilder<'tcx> {\n+        err.help(\n+            \"Thin pointers are \\\"simple\\\" pointers: they are purely a reference to a\n+memory address.\n+\n+Fat pointers are pointers referencing \\\"Dynamically Sized Types\\\" (also\n+called DST). DST don't have a statically known size, therefore they can\n+only exist behind some kind of pointers that contain additional\n+information. Slices and trait objects are DSTs. In the case of slices,\n+the additional information the fat pointer holds is their size.\n+\n+To fix this error, don't try to cast directly between thin and fat\n+pointers.\n+\n+For more information about casts, take a look at The Book:\n+https://doc.rust-lang.org/book/first-edition/casting-between-types.html\");\n+        err\n+    }\n+}"}]}