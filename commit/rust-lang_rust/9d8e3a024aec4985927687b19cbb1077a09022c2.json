{"sha": "9d8e3a024aec4985927687b19cbb1077a09022c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkOGUzYTAyNGFlYzQ5ODU5Mjc2ODdiMTljYmIxMDc3YTA5MDIyYzI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-04T22:55:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-02-04T22:55:47Z"}, "message": "Auto merge of #31416 - steveklabnik:rollup, r=steveklabnik\n\n- Successful merges: #31007, #31396, #31401, #31411, #31412, #31413, #31415\n- Failed merges:", "tree": {"sha": "72747f78437db08317a8f4810b269d448ad55599", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72747f78437db08317a8f4810b269d448ad55599"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d8e3a024aec4985927687b19cbb1077a09022c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d8e3a024aec4985927687b19cbb1077a09022c2", "html_url": "https://github.com/rust-lang/rust/commit/9d8e3a024aec4985927687b19cbb1077a09022c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d8e3a024aec4985927687b19cbb1077a09022c2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c007e4a010e30db1c92bb3cd5157ffa8282dbbd6", "url": "https://api.github.com/repos/rust-lang/rust/commits/c007e4a010e30db1c92bb3cd5157ffa8282dbbd6", "html_url": "https://github.com/rust-lang/rust/commit/c007e4a010e30db1c92bb3cd5157ffa8282dbbd6"}, {"sha": "96d866a19db6ff21bcd0549f455437689e4237e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/96d866a19db6ff21bcd0549f455437689e4237e2", "html_url": "https://github.com/rust-lang/rust/commit/96d866a19db6ff21bcd0549f455437689e4237e2"}], "stats": {"total": 49, "additions": 35, "deletions": 14}, "files": [{"sha": "abe899803087120379021a1b88dd85ca4533cca0", "filename": "COPYRIGHT", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d8e3a024aec4985927687b19cbb1077a09022c2/COPYRIGHT", "raw_url": "https://github.com/rust-lang/rust/raw/9d8e3a024aec4985927687b19cbb1077a09022c2/COPYRIGHT", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/COPYRIGHT?ref=9d8e3a024aec4985927687b19cbb1077a09022c2", "patch": "@@ -6,7 +6,7 @@ terms.\n \n Longer version:\n \n-The Rust Project is copyright 2016, The Rust Project\n+The Rust Project is copyright 2010, The Rust Project\n Developers.\n \n Licensed under the Apache License, Version 2.0"}, {"sha": "25597d5838fa4cd7ff5c3c2bb1d1b4c3731eda7f", "filename": "LICENSE-MIT", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d8e3a024aec4985927687b19cbb1077a09022c2/LICENSE-MIT", "raw_url": "https://github.com/rust-lang/rust/raw/9d8e3a024aec4985927687b19cbb1077a09022c2/LICENSE-MIT", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/LICENSE-MIT?ref=9d8e3a024aec4985927687b19cbb1077a09022c2", "patch": "@@ -1,4 +1,4 @@\n-Copyright (c) 2016 The Rust Project Developers\n+Copyright (c) 2010 The Rust Project Developers\n \n Permission is hereby granted, free of charge, to any\n person obtaining a copy of this software and associated"}, {"sha": "fac488d9c4aa3259dc19d61483f0534dd36ef2ab", "filename": "src/doc/grammar.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9d8e3a024aec4985927687b19cbb1077a09022c2/src%2Fdoc%2Fgrammar.md", "raw_url": "https://github.com/rust-lang/rust/raw/9d8e3a024aec4985927687b19cbb1077a09022c2/src%2Fdoc%2Fgrammar.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fgrammar.md?ref=9d8e3a024aec4985927687b19cbb1077a09022c2", "patch": "@@ -516,7 +516,7 @@ struct_expr : expr_path '{' ident ':' expr\n ### Block expressions\n \n ```antlr\n-block_expr : '{' [ stmt ';' | item ] *\n+block_expr : '{' [ stmt | item ] *\n                  [ expr ] '}' ;\n ```\n "}, {"sha": "19c9b571a33c22b95ec8b7128bbed79abc203ef5", "filename": "src/doc/reference.md", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9d8e3a024aec4985927687b19cbb1077a09022c2/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/9d8e3a024aec4985927687b19cbb1077a09022c2/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=9d8e3a024aec4985927687b19cbb1077a09022c2", "patch": "@@ -984,8 +984,8 @@ fn first((value, _): (i32, i32)) -> i32 { value }\n #### Generic functions\n \n A _generic function_ allows one or more _parameterized types_ to appear in its\n-signature. Each type parameter must be explicitly declared, in an\n-angle-bracket-enclosed, comma-separated list following the function name.\n+signature. Each type parameter must be explicitly declared in an\n+angle-bracket-enclosed and comma-separated list, following the function name.\n \n ```rust,ignore\n // foo is generic over A and B\n@@ -1179,7 +1179,7 @@ Enumeration constructors can have either named or unnamed fields:\n ```rust\n enum Animal {\n     Dog (String, f64),\n-    Cat { name: String, weight: f64 }\n+    Cat { name: String, weight: f64 },\n }\n \n let mut a: Animal = Animal::Dog(\"Cocoa\".to_string(), 37.2);\n@@ -1237,12 +1237,12 @@ const STRING: &'static str = \"bitstring\";\n \n struct BitsNStrings<'a> {\n     mybits: [u32; 2],\n-    mystring: &'a str\n+    mystring: &'a str,\n }\n \n const BITS_N_STRINGS: BitsNStrings<'static> = BitsNStrings {\n     mybits: BITS,\n-    mystring: STRING\n+    mystring: STRING,\n };\n ```\n \n@@ -1661,7 +1661,7 @@ struct Foo;\n \n // Declare a public struct with a private field\n pub struct Bar {\n-    field: i32\n+    field: i32,\n }\n \n // Declare a public enum with two public variants\n@@ -3212,7 +3212,7 @@ may refer to the variables bound within the pattern they follow.\n let message = match maybe_digit {\n     Some(x) if x < 10 => process_digit(x),\n     Some(x) => process_other(x),\n-    None => panic!()\n+    None => panic!(),\n };\n ```\n \n@@ -3504,7 +3504,7 @@ An example of a `fn` type:\n \n ```\n fn add(x: i32, y: i32) -> i32 {\n-    return x + y;\n+    x + y\n }\n \n let mut x = add(5,7);"}, {"sha": "38f79079b29f3a00420c59ff1007d0c27bd8b4ec", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/9d8e3a024aec4985927687b19cbb1077a09022c2/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8e3a024aec4985927687b19cbb1077a09022c2/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=9d8e3a024aec4985927687b19cbb1077a09022c2", "patch": "@@ -18,6 +18,27 @@ use mem;\n use ops::Range;\n \n /// Extension methods for ASCII-subset only operations on string slices.\n+///\n+/// Be aware that operations on seemingly non-ASCII characters can sometimes\n+/// have unexpected results. Consider this example:\n+///\n+/// ```\n+/// use std::ascii::AsciiExt;\n+///\n+/// assert_eq!(\"cafe\u0301\".to_ascii_uppercase(), \"CAFE\u0301\");\n+/// assert_eq!(\"caf\u00e9\".to_ascii_uppercase(), \"CAF\u00e9\");\n+/// ```\n+///\n+/// In the first example, the lowercased string is represented `\"cafe\\u{301}\"`\n+/// (the last character is an acute accent [combining character]). Unlike the\n+/// other characters in the string, the combining character will not get mapped\n+/// to an uppercase variant, resulting in `\"CAFE\\u{301}\"`. In the second\n+/// example, the lowercased string is represented `\"caf\\u{e9}\"` (the last\n+/// character is a single Unicode character representing an 'e' with an acute\n+/// accent). Since the last character is defined outside the scope of ASCII,\n+/// it will not get mapped to an uppercase variant, resulting in `\"CAF\\u{e9}\"`.\n+///\n+/// [combining character]: https://en.wikipedia.org/wiki/Combining_character\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait AsciiExt {\n     /// Container type for copied ASCII characters."}, {"sha": "f8efada9f6c4519890930846af5ad324984097b4", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9d8e3a024aec4985927687b19cbb1077a09022c2/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d8e3a024aec4985927687b19cbb1077a09022c2/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=9d8e3a024aec4985927687b19cbb1077a09022c2", "patch": "@@ -282,9 +282,9 @@ fn test_resize_policy() {\n /// let mut player_stats = HashMap::new();\n ///\n /// fn random_stat_buff() -> u8 {\n-///   // could actually return some random value here - let's just return\n-///   // some fixed value for now\n-///   42\n+///     // could actually return some random value here - let's just return\n+///     // some fixed value for now\n+///     42\n /// }\n ///\n /// // insert a key only if it doesn't already exist"}]}