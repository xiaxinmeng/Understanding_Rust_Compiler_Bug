{"sha": "ee88a870b6738232c34aa4e1049d94099648386b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlODhhODcwYjY3MzgyMzJjMzRhYTRlMTA0OWQ5NDA5OTY0ODM4NmI=", "commit": {"author": {"name": "Tommy Ip", "email": "hkmp7tommy@gmail.com", "date": "2017-05-28T21:08:51Z"}, "committer": {"name": "Tommy Ip", "email": "hkmp7tommy@gmail.com", "date": "2017-05-30T10:05:16Z"}, "message": "Explain why closure is moved in error message", "tree": {"sha": "4704a10c34d4c423b38ba5af7989c94b00ca5443", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4704a10c34d4c423b38ba5af7989c94b00ca5443"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee88a870b6738232c34aa4e1049d94099648386b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee88a870b6738232c34aa4e1049d94099648386b", "html_url": "https://github.com/rust-lang/rust/commit/ee88a870b6738232c34aa4e1049d94099648386b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee88a870b6738232c34aa4e1049d94099648386b/comments", "author": {"login": "tommyip", "id": 18504232, "node_id": "MDQ6VXNlcjE4NTA0MjMy", "avatar_url": "https://avatars.githubusercontent.com/u/18504232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommyip", "html_url": "https://github.com/tommyip", "followers_url": "https://api.github.com/users/tommyip/followers", "following_url": "https://api.github.com/users/tommyip/following{/other_user}", "gists_url": "https://api.github.com/users/tommyip/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommyip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommyip/subscriptions", "organizations_url": "https://api.github.com/users/tommyip/orgs", "repos_url": "https://api.github.com/users/tommyip/repos", "events_url": "https://api.github.com/users/tommyip/events{/privacy}", "received_events_url": "https://api.github.com/users/tommyip/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tommyip", "id": 18504232, "node_id": "MDQ6VXNlcjE4NTA0MjMy", "avatar_url": "https://avatars.githubusercontent.com/u/18504232?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tommyip", "html_url": "https://github.com/tommyip", "followers_url": "https://api.github.com/users/tommyip/followers", "following_url": "https://api.github.com/users/tommyip/following{/other_user}", "gists_url": "https://api.github.com/users/tommyip/gists{/gist_id}", "starred_url": "https://api.github.com/users/tommyip/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tommyip/subscriptions", "organizations_url": "https://api.github.com/users/tommyip/orgs", "repos_url": "https://api.github.com/users/tommyip/repos", "events_url": "https://api.github.com/users/tommyip/events{/privacy}", "received_events_url": "https://api.github.com/users/tommyip/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf25b5eb823c3cbbacc06d33a3ff539de325be6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf25b5eb823c3cbbacc06d33a3ff539de325be6a", "html_url": "https://github.com/rust-lang/rust/commit/bf25b5eb823c3cbbacc06d33a3ff539de325be6a"}], "stats": {"total": 67, "additions": 38, "deletions": 29}, "files": [{"sha": "8deeb35270d259a10ef6bbb0c9a8e94217e58050", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee88a870b6738232c34aa4e1049d94099648386b/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee88a870b6738232c34aa4e1049d94099648386b/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=ee88a870b6738232c34aa4e1049d94099648386b", "patch": "@@ -230,9 +230,9 @@ pub struct TypeckTables<'tcx> {\n     /// Records the type of each closure.\n     pub closure_tys: NodeMap<ty::PolyFnSig<'tcx>>,\n \n-    /// Records the kind of each closure and the span of the variable that\n-    /// cause the closure to be this kind.\n-    pub closure_kinds: NodeMap<(ty::ClosureKind, Option<Span>)>,\n+    /// Records the kind of each closure and the span and name of the variable\n+    /// that caused the closure to be this kind.\n+    pub closure_kinds: NodeMap<(ty::ClosureKind, Option<(Span, ast::Name)>)>,\n \n     /// For each fn, records the \"liberated\" types of its arguments\n     /// and return type. Liberated means that all bound regions"}, {"sha": "b25252eef8c68d23a4c23909c1cb9c569ae08c98", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ee88a870b6738232c34aa4e1049d94099648386b/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee88a870b6738232c34aa4e1049d94099648386b/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=ee88a870b6738232c34aa4e1049d94099648386b", "patch": "@@ -39,8 +39,6 @@ use rustc::middle::free_region::RegionRelations;\n use rustc::ty::{self, TyCtxt};\n use rustc::ty::maps::Providers;\n \n-use syntax_pos::DUMMY_SP;\n-\n use std::fmt;\n use std::rc::Rc;\n use std::hash::{Hash, Hasher};\n@@ -594,12 +592,14 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     verb, msg, nl);\n                 let need_note = match lp.ty.sty {\n                     ty::TypeVariants::TyClosure(id, _) => {\n-                        if let Ok(ty::ClosureKind::FnOnce) =\n-                           ty::queries::closure_kind::try_get(self.tcx, DUMMY_SP, id) {\n-                            err.help(\"closure was moved because it only implements `FnOnce`\");\n-                            if let Some(&(_kind, Some(span))) = self.tables.closure_kinds.get( ) {\n-                                err.span_label(span, \"move occured here\");\n-                            }\n+                        let node_id = self.tcx.hir.as_local_node_id(id).unwrap();\n+                        if let Some(&(ty::ClosureKind::FnOnce, Some((span, name)))) =\n+                            self.tables.closure_kinds.get(&node_id)\n+                        {\n+                            err.help(&format!(\"closure cannot be invoked more than once because \\\n+                                              it moves the variable `{}` out of its environment\",\n+                                              name));\n+                            err.span_label(span, format!(\"{} moved here\", name));\n                             false\n                         } else {\n                             true"}, {"sha": "114290c52d195469dc23d6fe2b92d29ce182caab", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ee88a870b6738232c34aa4e1049d94099648386b/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee88a870b6738232c34aa4e1049d94099648386b/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=ee88a870b6738232c34aa4e1049d94099648386b", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n struct SeedBorrowKind<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n-    temp_closure_kinds: NodeMap<(ty::ClosureKind, Option<Span>)>,\n+    temp_closure_kinds: NodeMap<(ty::ClosureKind, Option<(Span, ast::Name)>)>,\n }\n \n impl<'a, 'gcx, 'tcx> Visitor<'gcx> for SeedBorrowKind<'a, 'gcx, 'tcx> {\n@@ -143,12 +143,12 @@ impl<'a, 'gcx, 'tcx> SeedBorrowKind<'a, 'gcx, 'tcx> {\n \n struct AdjustBorrowKind<'a, 'gcx: 'a+'tcx, 'tcx: 'a> {\n     fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n-    temp_closure_kinds: NodeMap<(ty::ClosureKind, Option<Span>)>,\n+    temp_closure_kinds: NodeMap<(ty::ClosureKind, Option<(Span, ast::Name)>)>,\n }\n \n impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n     fn new(fcx: &'a FnCtxt<'a, 'gcx, 'tcx>,\n-           temp_closure_kinds: NodeMap<(ty::ClosureKind, Option<Span>)>)\n+           temp_closure_kinds: NodeMap<(ty::ClosureKind, Option<(Span, ast::Name)>)>)\n            -> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n         AdjustBorrowKind { fcx: fcx, temp_closure_kinds: temp_closure_kinds }\n     }\n@@ -211,8 +211,8 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n \n         // If we are also inferred the closure kind here, update the\n         // main table and process any deferred resolutions.\n-        if let Some(&(kind, span)) = self.temp_closure_kinds.get(&id) {\n-            self.fcx.tables.borrow_mut().closure_kinds.insert(id, (kind, span));\n+        if let Some(&(kind, context)) = self.temp_closure_kinds.get(&id) {\n+            self.fcx.tables.borrow_mut().closure_kinds.insert(id, (kind, context));\n             let closure_def_id = self.fcx.tcx.hir.local_def_id(id);\n             debug!(\"closure_kind({:?}) = {:?}\", closure_def_id, kind);\n \n@@ -272,11 +272,12 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n             euv::Move(_) => { }\n         }\n \n+        let tcx = self.fcx.tcx;\n+\n         // watch out for a move of the deref of a borrowed pointer;\n         // for that to be legal, the upvar would have to be borrowed\n         // by value instead\n         let guarantor = cmt.guarantor();\n-        let tcx = self.fcx.tcx;\n         debug!(\"adjust_upvar_borrow_kind_for_consume: guarantor={:?}\",\n                guarantor);\n         match guarantor.cat {\n@@ -291,7 +292,8 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n                         // to move out of an upvar, this must be a FnOnce closure\n                         self.adjust_closure_kind(upvar_id.closure_expr_id,\n                                                  ty::ClosureKind::FnOnce,\n-                                                 tcx.hir.span(upvar_id.var_id));\n+                                                 guarantor.span,\n+                                                 tcx.hir.name(upvar_id.var_id));\n \n                         let upvar_capture_map =\n                             &mut self.fcx.tables.borrow_mut().upvar_capture_map;\n@@ -306,7 +308,8 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n                         // of the environment.\n                         self.adjust_closure_kind(upvar_id.closure_expr_id,\n                                                  ty::ClosureKind::FnOnce,\n-                                                 tcx.hir.span(upvar_id.var_id));\n+                                                 guarantor.span,\n+                                                 tcx.hir.name(upvar_id.var_id));\n                     }\n                     mc::NoteNone => {\n                     }\n@@ -334,7 +337,7 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n \n             Categorization::Deref(base, _, mc::BorrowedPtr(..)) |\n             Categorization::Deref(base, _, mc::Implicit(..)) => {\n-                if !self.try_adjust_upvar_deref(&cmt.note, ty::MutBorrow) {\n+                if !self.try_adjust_upvar_deref(cmt, ty::MutBorrow) {\n                     // assignment to deref of an `&mut`\n                     // borrowed pointer implies that the\n                     // pointer itself must be unique, but not\n@@ -368,7 +371,7 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n \n             Categorization::Deref(base, _, mc::BorrowedPtr(..)) |\n             Categorization::Deref(base, _, mc::Implicit(..)) => {\n-                if !self.try_adjust_upvar_deref(&cmt.note, ty::UniqueImmBorrow) {\n+                if !self.try_adjust_upvar_deref(cmt, ty::UniqueImmBorrow) {\n                     // for a borrowed pointer to be unique, its\n                     // base must be unique\n                     self.adjust_upvar_borrow_kind_for_unique(base);\n@@ -385,7 +388,7 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n     }\n \n     fn try_adjust_upvar_deref(&mut self,\n-                              note: &mc::Note,\n+                              cmt: mc::cmt<'tcx>,\n                               borrow_kind: ty::BorrowKind)\n                               -> bool\n     {\n@@ -399,7 +402,7 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n \n         let tcx = self.fcx.tcx;\n \n-        match *note {\n+        match cmt.note {\n             mc::NoteUpvarRef(upvar_id) => {\n                 // if this is an implicit deref of an\n                 // upvar, then we need to modify the\n@@ -414,7 +417,8 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n                 // also need to be in an FnMut closure since this is not an ImmBorrow\n                 self.adjust_closure_kind(upvar_id.closure_expr_id,\n                                          ty::ClosureKind::FnMut,\n-                                         tcx.hir.span(upvar_id.var_id));\n+                                         cmt.span,\n+                                         tcx.hir.name(upvar_id.var_id));\n \n                 true\n             }\n@@ -424,7 +428,8 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n                 // upvar, we need to be an FnMut closure\n                 self.adjust_closure_kind(upvar_id.closure_expr_id,\n                                          ty::ClosureKind::FnMut,\n-                                         tcx.hir.span(upvar_id.var_id));\n+                                         cmt.span,\n+                                         tcx.hir.name(upvar_id.var_id));\n \n                 true\n             }\n@@ -472,9 +477,10 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n     fn adjust_closure_kind(&mut self,\n                            closure_id: ast::NodeId,\n                            new_kind: ty::ClosureKind,\n-                           upvar_span: Span) {\n-        debug!(\"adjust_closure_kind(closure_id={}, new_kind={:?})\",\n-               closure_id, new_kind);\n+                           upvar_span: Span,\n+                           var_name: ast::Name) {\n+        debug!(\"adjust_closure_kind(closure_id={}, new_kind={:?}, upvar_span={:?}, var_name={})\",\n+               closure_id, new_kind, upvar_span, var_name);\n \n         if let Some(&(existing_kind, _)) = self.temp_closure_kinds.get(&closure_id) {\n             debug!(\"adjust_closure_kind: closure_id={}, existing_kind={:?}, new_kind={:?}\",\n@@ -492,7 +498,10 @@ impl<'a, 'gcx, 'tcx> AdjustBorrowKind<'a, 'gcx, 'tcx> {\n                 (ty::ClosureKind::Fn, ty::ClosureKind::FnOnce) |\n                 (ty::ClosureKind::FnMut, ty::ClosureKind::FnOnce) => {\n                     // new kind is stronger than the old kind\n-                    self.temp_closure_kinds.insert(closure_id, (new_kind, Some(upvar_span)));\n+                    self.temp_closure_kinds.insert(\n+                        closure_id,\n+                        (new_kind, Some((upvar_span, var_name)))\n+                    );\n                 }\n             }\n         }"}]}