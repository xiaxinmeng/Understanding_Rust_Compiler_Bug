{"sha": "7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "node_id": "C_kwDOAAsO6NoAKDdhNmE4MTI3OTRmNmMyZmY0NmE1YTZkMWEyOTkxZWNjNTkwM2IxMGM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-08T16:09:06Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-08T16:09:06Z"}, "message": "Auto merge of #2332 - rust-lang:slash_slash_at, r=oli-obk\n\nMore robust comment parsing\n\nfixes #2170\n\nI haven't ported the entire test suite yet. Once we've done that, I will remove the old parsing system (or in fact, turn them into errors so that accidental usage of old-style comments will be detected)", "tree": {"sha": "a9030b0abec4a8d2359c1fa9ebac256d9236a266", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9030b0abec4a8d2359c1fa9ebac256d9236a266"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "html_url": "https://github.com/rust-lang/rust/commit/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cde87d18239b8d9afa9c6bf1051bf5573dbf326e", "url": "https://api.github.com/repos/rust-lang/rust/commits/cde87d18239b8d9afa9c6bf1051bf5573dbf326e", "html_url": "https://github.com/rust-lang/rust/commit/cde87d18239b8d9afa9c6bf1051bf5573dbf326e"}, {"sha": "6e106617f10b2431aeb0fdb84d50cbdcb0d4dad8", "url": "https://api.github.com/repos/rust-lang/rust/commits/6e106617f10b2431aeb0fdb84d50cbdcb0d4dad8", "html_url": "https://github.com/rust-lang/rust/commit/6e106617f10b2431aeb0fdb84d50cbdcb0d4dad8"}], "stats": {"total": 1544, "additions": 1062, "deletions": 482}, "files": [{"sha": "cc707c630e54e4cd9f9b3477ef3fcd8f625838f6", "filename": "Cargo.lock", "status": "modified", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -2,6 +2,21 @@\n # It is not intended for manual editing.\n version = 3\n \n+[[package]]\n+name = \"addr2line\"\n+version = \"0.17.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b9ecd88a8c8378ca913a680cd98f0f13ac67383d35993f86c90a70e3f137816b\"\n+dependencies = [\n+ \"gimli\",\n+]\n+\n+[[package]]\n+name = \"adler\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n+\n [[package]]\n name = \"aho-corasick\"\n version = \"0.7.18\"\n@@ -37,18 +52,66 @@ version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n \n+[[package]]\n+name = \"backtrace\"\n+version = \"0.3.65\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"11a17d453482a265fd5f8479f2a3f405566e6ca627837aaddb85af8b1ab8ef61\"\n+dependencies = [\n+ \"addr2line\",\n+ \"cc\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"miniz_oxide\",\n+ \"object\",\n+ \"rustc-demangle\",\n+]\n+\n [[package]]\n name = \"bitflags\"\n version = \"1.3.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"bef38d45163c2f1dde094a7dfd33ccf595c92905c8f8f4fdc18d06fb1037718a\"\n \n+[[package]]\n+name = \"cc\"\n+version = \"1.0.73\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2fff2a6927b3bb87f9595d67196a70493f627687a71d87a0d692242c33f58c11\"\n+\n [[package]]\n name = \"cfg-if\"\n version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n+[[package]]\n+name = \"color-eyre\"\n+version = \"0.6.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8ebf286c900a6d5867aeff75cfee3192857bb7f24b547d4f0df2ed6baa812c90\"\n+dependencies = [\n+ \"backtrace\",\n+ \"color-spantrace\",\n+ \"eyre\",\n+ \"indenter\",\n+ \"once_cell\",\n+ \"owo-colors\",\n+ \"tracing-error\",\n+]\n+\n+[[package]]\n+name = \"color-spantrace\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1ba75b3d9449ecdccb27ecbc479fdc0b87fa2dd43d2f8298f9bf0e59aacc8dce\"\n+dependencies = [\n+ \"once_cell\",\n+ \"owo-colors\",\n+ \"tracing-core\",\n+ \"tracing-error\",\n+]\n+\n [[package]]\n name = \"colored\"\n version = \"2.0.0\"\n@@ -158,6 +221,16 @@ dependencies = [\n  \"termcolor\",\n ]\n \n+[[package]]\n+name = \"eyre\"\n+version = \"0.6.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4c2b6b5a29c02cdc822728b7d7b8ae1bab3e3b05d44522770ddd49722eeac7eb\"\n+dependencies = [\n+ \"indenter\",\n+ \"once_cell\",\n+]\n+\n [[package]]\n name = \"getrandom\"\n version = \"0.2.3\"\n@@ -169,6 +242,12 @@ dependencies = [\n  \"wasi\",\n ]\n \n+[[package]]\n+name = \"gimli\"\n+version = \"0.26.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"78cc372d058dcf6d5ecd98510e7fbc9e5aec4d21de70f65fea8fecebcd881bd4\"\n+\n [[package]]\n name = \"hermit-abi\"\n version = \"0.1.19\"\n@@ -184,6 +263,12 @@ version = \"2.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"9a3a5bfb195931eeb336b2a7b4d761daec841b97f947d34394601737a7bba5e4\"\n \n+[[package]]\n+name = \"indenter\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ce23b50ad8242c51a442f3ff322d56b02f08852c77e4c0b4d3fd684abc89c683\"\n+\n [[package]]\n name = \"instant\"\n version = \"0.1.12\"\n@@ -267,6 +352,15 @@ dependencies = [\n  \"autocfg\",\n ]\n \n+[[package]]\n+name = \"miniz_oxide\"\n+version = \"0.5.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6f5c75688da582b8ffc1f1799e9db273f32133c49e048f614d22ec3256773ccc\"\n+dependencies = [\n+ \"adler\",\n+]\n+\n [[package]]\n name = \"miri\"\n version = \"0.1.0\"\n@@ -286,6 +380,21 @@ dependencies = [\n  \"ui_test\",\n ]\n \n+[[package]]\n+name = \"object\"\n+version = \"0.28.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e42c982f2d955fac81dd7e1d0e1426a7d702acd9c98d19ab01083a6a0328c424\"\n+dependencies = [\n+ \"memchr\",\n+]\n+\n+[[package]]\n+name = \"once_cell\"\n+version = \"1.13.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"18a6dbe30758c9f83eb00cbea4ac95966305f5a7772f3f42ebfc7fc7eddbd8e1\"\n+\n [[package]]\n name = \"output_vt100\"\n version = \"0.1.3\"\n@@ -295,6 +404,12 @@ dependencies = [\n  \"winapi\",\n ]\n \n+[[package]]\n+name = \"owo-colors\"\n+version = \"3.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"decf7381921fea4dcb2549c5667eda59b3ec297ab7e2b5fc33eac69d2e7da87b\"\n+\n [[package]]\n name = \"parking_lot\"\n version = \"0.11.2\"\n@@ -329,6 +444,12 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"pin-project-lite\"\n+version = \"0.2.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e0a7ae3ac2f1173085d398531c705756c94a4c56843785df85a60c1a0afac116\"\n+\n [[package]]\n name = \"ppv-lite86\"\n version = \"0.2.15\"\n@@ -431,6 +552,12 @@ version = \"0.6.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"f497285884f3fcff424ffc933e56d7cbca511def0c9831a7f9b5f6153e3cc89b\"\n \n+[[package]]\n+name = \"rustc-demangle\"\n+version = \"0.1.21\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7ef03e0a2b150c7a90d01faf6254c9c48a41e95fb2a8c2ac1c6f0d2b9aefc342\"\n+\n [[package]]\n name = \"rustc-hash\"\n version = \"1.1.0\"\n@@ -501,6 +628,15 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"sharded-slab\"\n+version = \"0.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"900fba806f70c630b0a382d0d825e17a0f19fcd059a2ade1ff237bcddf446b31\"\n+dependencies = [\n+ \"lazy_static\",\n+]\n+\n [[package]]\n name = \"shell-escape\"\n version = \"0.1.5\"\n@@ -533,10 +669,62 @@ dependencies = [\n  \"winapi-util\",\n ]\n \n+[[package]]\n+name = \"thread_local\"\n+version = \"1.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5516c27b78311c50bf42c071425c560ac799b11c30b31f87e3081965fe5e0180\"\n+dependencies = [\n+ \"once_cell\",\n+]\n+\n+[[package]]\n+name = \"tracing\"\n+version = \"0.1.35\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a400e31aa60b9d44a52a8ee0343b5b18566b03a8321e0d321f695cf56e940160\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"pin-project-lite\",\n+ \"tracing-core\",\n+]\n+\n+[[package]]\n+name = \"tracing-core\"\n+version = \"0.1.28\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7b7358be39f2f274f322d2aaed611acc57f382e8eb1e5b48cb9ae30933495ce7\"\n+dependencies = [\n+ \"once_cell\",\n+ \"valuable\",\n+]\n+\n+[[package]]\n+name = \"tracing-error\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d686ec1c0f384b1277f097b2f279a2ecc11afe8c133c1aabf036a27cb4cd206e\"\n+dependencies = [\n+ \"tracing\",\n+ \"tracing-subscriber\",\n+]\n+\n+[[package]]\n+name = \"tracing-subscriber\"\n+version = \"0.3.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3a713421342a5a666b7577783721d3117f1b69a393df803ee17bb73b1e122a59\"\n+dependencies = [\n+ \"sharded-slab\",\n+ \"thread_local\",\n+ \"tracing-core\",\n+]\n+\n [[package]]\n name = \"ui_test\"\n version = \"0.1.0\"\n dependencies = [\n+ \"color-eyre\",\n  \"colored\",\n  \"crossbeam\",\n  \"lazy_static\",\n@@ -553,6 +741,12 @@ version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"d22af068fba1eb5edcb4aea19d382b2a3deb4c8f9d475c589b6ada9e0fd493ee\"\n \n+[[package]]\n+name = \"valuable\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n+\n [[package]]\n name = \"wasi\"\n version = \"0.10.2+wasi-snapshot-preview1\""}, {"sha": "008fc7806457fd45d36bfc38b1d0b08bd27572a9", "filename": "tests/compiletest.rs", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -2,13 +2,13 @@ use colored::*;\n use regex::Regex;\n use std::env;\n use std::path::PathBuf;\n-use ui_test::{Config, Mode, OutputConflictHandling};\n+use ui_test::{color_eyre::Result, Config, Mode, OutputConflictHandling};\n \n fn miri_path() -> PathBuf {\n     PathBuf::from(option_env!(\"MIRI\").unwrap_or(env!(\"CARGO_BIN_EXE_miri\")))\n }\n \n-fn run_tests(mode: Mode, path: &str, target: Option<String>) {\n+fn run_tests(mode: Mode, path: &str, target: Option<String>) -> Result<()> {\n     let in_rustc_test_suite = option_env!(\"RUSTC_STAGE\").is_some();\n \n     // Add some flags we always want.\n@@ -108,7 +108,7 @@ regexes! {\n     \"sys/[a-z]+/\"                    => \"sys/PLATFORM/\",\n }\n \n-fn ui(mode: Mode, path: &str) {\n+fn ui(mode: Mode, path: &str) -> Result<()> {\n     let target = get_target();\n \n     let msg = format!(\n@@ -117,20 +117,24 @@ fn ui(mode: Mode, path: &str) {\n     );\n     eprintln!(\"{}\", msg.green().bold());\n \n-    run_tests(mode, path, target);\n+    run_tests(mode, path, target)\n }\n \n fn get_target() -> Option<String> {\n     env::var(\"MIRI_TEST_TARGET\").ok()\n }\n \n-fn main() {\n+fn main() -> Result<()> {\n+    ui_test::color_eyre::install()?;\n+\n     // Add a test env var to do environment communication tests.\n     env::set_var(\"MIRI_ENV_VAR_TEST\", \"0\");\n     // Let the tests know where to store temp files (they might run for a different target, which can make this hard to find).\n     env::set_var(\"MIRI_TEMP\", env::temp_dir());\n \n-    ui(Mode::Pass, \"tests/pass\");\n-    ui(Mode::Panic, \"tests/panic\");\n-    ui(Mode::Fail, \"tests/fail\");\n+    ui(Mode::Pass, \"tests/pass\")?;\n+    ui(Mode::Panic, \"tests/panic\")?;\n+    ui(Mode::Fail, \"tests/fail\")?;\n+\n+    Ok(())\n }"}, {"sha": "a07d8254ad3d5095887bbce8f83510bb062aea5e", "filename": "tests/fail/alloc/deallocate-bad-alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fdeallocate-bad-alignment.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, dealloc, Layout};\n \n-// error-pattern: has size 1 and alignment 1, but gave size 1 and alignment 2\n+//@error-pattern: has size 1 and alignment 1, but gave size 1 and alignment 2\n \n fn main() {\n     unsafe {"}, {"sha": "47aaef1935e90220ef068ff7b4dded3a433ede0e", "filename": "tests/fail/alloc/deallocate-bad-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Falloc%2Fdeallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Falloc%2Fdeallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fdeallocate-bad-size.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, dealloc, Layout};\n \n-// error-pattern: has size 1 and alignment 1, but gave size 2 and alignment 1\n+//@error-pattern: has size 1 and alignment 1, but gave size 2 and alignment 1\n \n fn main() {\n     unsafe {"}, {"sha": "1eb9bbf91ca5c2c0fb634f589164e99d782216bb", "filename": "tests/fail/alloc/deallocate-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Falloc%2Fdeallocate-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Falloc%2Fdeallocate-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fdeallocate-twice.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, dealloc, Layout};\n \n-// error-pattern: dereferenced after this allocation got freed\n+//@error-pattern: dereferenced after this allocation got freed\n \n fn main() {\n     unsafe {"}, {"sha": "01db2f1a225df1203900f2713d48ee82c2e6d8cb", "filename": "tests/fail/alloc/global_system_mixup.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Falloc%2Fglobal_system_mixup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Falloc%2Fglobal_system_mixup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fglobal_system_mixup.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,10 +1,10 @@\n // Make sure we detect when the `Global` and `System` allocators are mixed\n // (even when the default `Global` uses `System`).\n-// error-pattern: which is Rust heap memory, using\n+//@error-pattern: which is Rust heap memory, using\n \n-// normalize-stderr-test: \"using [A-Za-z]+ heap deallocation operation\" -> \"using PLATFORM heap deallocation operation\"\n-// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n-// normalize-stderr-test: \"libc::free\\([^()]*\\)|unsafe \\{ HeapFree\\([^()]*\\) \\};\" -> \"FREE();\"\n+//@normalize-stderr-test: \"using [A-Za-z]+ heap deallocation operation\" -> \"using PLATFORM heap deallocation operation\"\n+//@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+//@normalize-stderr-test: \"libc::free\\([^()]*\\)|unsafe \\{ HeapFree\\([^()]*\\) \\};\" -> \"FREE();\"\n \n #![feature(allocator_api, slice_ptr_get)]\n "}, {"sha": "145c3393d677ae69616225448ac64a8786fc84cd", "filename": "tests/fail/alloc/reallocate-bad-size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Falloc%2Freallocate-bad-size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Falloc%2Freallocate-bad-size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Freallocate-bad-size.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, realloc, Layout};\n \n-// error-pattern: has size 1 and alignment 1, but gave size 2 and alignment 1\n+//@error-pattern: has size 1 and alignment 1, but gave size 2 and alignment 1\n \n fn main() {\n     unsafe {"}, {"sha": "34f1658344a5e9312505346ef677d58dde4f9965", "filename": "tests/fail/alloc/reallocate-dangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Falloc%2Freallocate-dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Falloc%2Freallocate-dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Freallocate-dangling.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n use std::alloc::{alloc, dealloc, realloc, Layout};\n \n-// error-pattern: dereferenced after this allocation got freed\n+//@error-pattern: dereferenced after this allocation got freed\n \n fn main() {\n     unsafe {"}, {"sha": "a97431bc2f05e77e44266a25aa7a91b0484f56ce", "filename": "tests/fail/alloc/stack_free.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Falloc%2Fstack_free.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Falloc%2Fstack_free.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Falloc%2Fstack_free.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,7 +1,7 @@\n // Validation/SB changes why we fail\n-// compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n-// error-pattern: which is stack variable memory, using Rust heap deallocation operation\n+//@error-pattern: which is stack variable memory, using Rust heap deallocation operation\n \n fn main() {\n     let x = 42;"}, {"sha": "319845d86a63bfd34e6d5b36c74998294d343317", "filename": "tests/fail/box-cell-alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fbox-cell-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fbox-cell-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fbox-cell-alias.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-strict-provenance\n+//@compile-flags: -Zmiri-strict-provenance\n \n // Taken from <https://github.com/rust-lang/unsafe-code-guidelines/issues/194#issuecomment-520934222>.\n "}, {"sha": "ab80cdd205bca4bd7cb9e2cd7fff2a7e83a8e859", "filename": "tests/fail/concurrency/libc_pthread_create_main_terminate.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_create_main_terminate.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: No libc on Windows\n-// error-pattern: the main thread terminated without waiting for all remaining threads\n+//@ignore-windows: No libc on Windows\n+//@error-pattern: the main thread terminated without waiting for all remaining threads\n \n // Check that we terminate the program when the main thread terminates.\n "}, {"sha": "1ec1d630ecb90726ac2f20ae06d727ae767327ec", "filename": "tests/fail/concurrency/libc_pthread_join_detached.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_detached.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_detached.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_detached.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n // Joining a detached thread is undefined behavior.\n "}, {"sha": "b067556e51b07f99d5ac81c2dba3b817575d8226", "filename": "tests/fail/concurrency/libc_pthread_join_joined.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_joined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_joined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_joined.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n // Joining an already joined thread is undefined behavior.\n "}, {"sha": "ebfe8c865e3dcc4f05b77e588422e89bb0ea7a95", "filename": "tests/fail/concurrency/libc_pthread_join_main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_main.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n // Joining the main thread is undefined behavior.\n "}, {"sha": "39cd9ff77976fada79c8e4a2309697c560e84ffe", "filename": "tests/fail/concurrency/libc_pthread_join_multiple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_multiple.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n // Joining the same thread from multiple threads is undefined behavior.\n "}, {"sha": "7b91560ab6b19dded6d262a20587e6c0d6764430", "filename": "tests/fail/concurrency/libc_pthread_join_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Flibc_pthread_join_self.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n // We are making scheduler assumptions here.\n-// compile-flags: -Zmiri-preemption-rate=0\n+//@compile-flags: -Zmiri-preemption-rate=0\n \n // Joining itself is undefined behavior.\n "}, {"sha": "650a42b43b5d3e915eddd658ac13b2f94cf45aee", "filename": "tests/fail/concurrency/thread-spawn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Fthread-spawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Fthread-spawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Fthread-spawn.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,8 +1,8 @@\n-// only-windows: Only Windows is not supported.\n+//@only-windows: Only Windows is not supported.\n \n use std::thread;\n \n-// error-pattern: can't create threads on Windows\n+//@error-pattern: can't create threads on Windows\n \n fn main() {\n     thread::spawn(|| {});"}, {"sha": "8cca1eba2d86c206d66cabe00e82ba8e31c9475a", "filename": "tests/fail/concurrency/thread_local_static_dealloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Fthread_local_static_dealloc.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n \n //! Ensure that thread-local statics get deallocated when the thread dies.\n "}, {"sha": "5d173b38480738bd713dca3fdc8f5146bf5ff589", "filename": "tests/fail/concurrency/too_few_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Ftoo_few_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Ftoo_few_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Ftoo_few_args.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n \n //! The thread function must have exactly one argument.\n "}, {"sha": "8305765a37a356bb5b05b628cba41338bf8a3155", "filename": "tests/fail/concurrency/too_many_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Ftoo_many_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Ftoo_many_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Ftoo_many_args.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n \n //! The thread function must have exactly one argument.\n "}, {"sha": "d5dfcd0871d8170ca541fb1abbf4a8dd7ab6bb6e", "filename": "tests/fail/concurrency/unwind_top_of_stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fconcurrency%2Funwind_top_of_stack.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-abi-check\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-disable-abi-check\n \n //! Unwinding past the top frame of a stack is Undefined Behavior.\n "}, {"sha": "a38a44c18f47ff8e94016c961c64b6c6705cefe5", "filename": "tests/fail/dangling_pointers/dangling_pointer_addr_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_addr_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_addr_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_addr_of.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Make sure we find these even with many checks disabled.\n-// compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n use std::ptr;\n \n fn main() {"}, {"sha": "55b5205a8b301885637fe02bcdfc6ae04a81de29", "filename": "tests/fail/dangling_pointers/dangling_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fdangling_pointer_deref.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Make sure we find these even with many checks disabled.\n-// compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n \n fn main() {\n     let p = {"}, {"sha": "2a09dc4b0e8910ce8e4a4a4860c23d4d1826db4d", "filename": "tests/fail/dangling_pointers/dangling_zst_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fdangling_zst_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fdangling_zst_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fdangling_zst_deref.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n // Make sure we find these even with many checks disabled.\n // Some optimizations remove ZST accesses, thus masking this UB.\n-// compile-flags: -Zmir-opt-level=0 -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n+//@compile-flags: -Zmir-opt-level=0 -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n \n fn main() {\n     let p = {"}, {"sha": "924021e8cb93acb70c2ec0ae729de837fc3f7ff8", "filename": "tests/fail/dangling_pointers/deref-invalid-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fderef-invalid-ptr.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation.\n-// compile-flags: -Zmiri-disable-validation -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-disable-validation -Zmiri-permissive-provenance\n \n fn main() {\n     let x = 16usize as *const u32;"}, {"sha": "adb7febe5074e5f4eb7eced0c6b1e4166099f7b7", "filename": "tests/fail/dangling_pointers/dyn_size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fdyn_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fdyn_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fdyn_size.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // should find the bug even without these, but gets masked by optimizations\n-// compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows -Zmir-opt-level=0\n+//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows -Zmir-opt-level=0\n \n struct SliceWithHead(u8, [u8]);\n "}, {"sha": "37fb91e28f2980b7391fee546aa39e35cfa87e53", "filename": "tests/fail/dangling_pointers/maybe_null_pointer_deref_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_deref_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_deref_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_deref_zst.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Some optimizations remove ZST accesses, thus masking this UB.\n-// compile-flags: -Zmir-opt-level=0\n+//@compile-flags: -Zmir-opt-level=0\n \n fn main() {\n     // This pointer *could* be NULL so we cannot load from it, not even at ZST"}, {"sha": "de8034bbbac3c15a4118c8d26e27a4914d1c421e", "filename": "tests/fail/dangling_pointers/maybe_null_pointer_write_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fmaybe_null_pointer_write_zst.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Some optimizations remove ZST accesses, thus masking this UB.\n-// compile-flags: -Zmir-opt-level=0\n+//@compile-flags: -Zmir-opt-level=0\n \n fn main() {\n     // This pointer *could* be NULL so we cannot load from it, not even at ZST."}, {"sha": "1f73983a8161924aac5004c7223bcdeededd2521", "filename": "tests/fail/dangling_pointers/null_pointer_deref_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_deref_zst.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Some optimizations remove ZST accesses, thus masking this UB.\n-// compile-flags: -Zmir-opt-level=0\n+//@compile-flags: -Zmir-opt-level=0\n \n #[allow(deref_nullptr)]\n fn main() {"}, {"sha": "7181a5979b442c244f9e7dfae973f81d41755986", "filename": "tests/fail/dangling_pointers/null_pointer_write_zst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fnull_pointer_write_zst.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n // Some optimizations remove ZST accesses, thus masking this UB.\n-// compile-flags: -Zmir-opt-level=0\n-// error-pattern: memory access failed: null pointer is a dangling pointer\n+//@compile-flags: -Zmir-opt-level=0\n+//@error-pattern: memory access failed: null pointer is a dangling pointer\n \n #[allow(deref_nullptr)]\n fn main() {"}, {"sha": "dc446ca4b3c81fbd8706942306310cb40ad9f78c", "filename": "tests/fail/dangling_pointers/stack_temporary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fstack_temporary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fstack_temporary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fstack_temporary.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation, but some MIR opts mask the error\n-// compile-flags: -Zmiri-disable-validation -Zmir-opt-level=0\n+//@compile-flags: -Zmiri-disable-validation -Zmir-opt-level=0\n \n unsafe fn make_ref<'a>(x: *mut i32) -> &'a mut i32 {\n     &mut *x"}, {"sha": "10c6e7f97d2ee08bcbb0b15d94639ab3200408d4", "filename": "tests/fail/dangling_pointers/storage_dead_dangling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fstorage_dead_dangling.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation, but some MIR opts mask the error\n-// compile-flags: -Zmiri-disable-validation -Zmir-opt-level=0 -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-disable-validation -Zmir-opt-level=0 -Zmiri-permissive-provenance\n \n static mut LEAK: usize = 0;\n "}, {"sha": "15d71a6bcccd274c95c8cd06e0e5e90a8adecb27", "filename": "tests/fail/dangling_pointers/wild_pointer_deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdangling_pointers%2Fwild_pointer_deref.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n \n fn main() {\n     let p = 44 as *const i32;"}, {"sha": "e3c003a343a04abfe5627d251c5305eaab67d9dd", "filename": "tests/fail/data_race/alloc_read_race.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Falloc_read_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Falloc_read_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Falloc_read_race.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n #![feature(new_uninit)]\n \n use std::mem::MaybeUninit;"}, {"sha": "4ad03ee87dda3ee24b8f75ecead2f0a80108eba7", "filename": "tests/fail/data_race/alloc_write_race.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Falloc_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Falloc_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Falloc_write_race.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n #![feature(new_uninit)]\n \n use std::ptr::null_mut;"}, {"sha": "71d7a66597d18e0225ace92554a342337ef14ce7", "filename": "tests/fail/data_race/atomic_read_na_write_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race1.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n #![feature(core_intrinsics)]\n \n use std::intrinsics;"}, {"sha": "a490f47da7c31d20d14afd83b0f478d9a325a01b", "filename": "tests/fail/data_race/atomic_read_na_write_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_read_na_write_race2.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n \n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;"}, {"sha": "40066d91b1ff2f1302c22ed382cececa9a4c1ed6", "filename": "tests/fail/data_race/atomic_write_na_read_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race1.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n \n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;"}, {"sha": "0bfadcba3ed34bc91257d1779839183463baec1e", "filename": "tests/fail/data_race/atomic_write_na_read_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_read_race2.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n #![feature(core_intrinsics)]\n \n use std::intrinsics::atomic_store;"}, {"sha": "258f5dd142efef302310b426cdefd056d5fb77e0", "filename": "tests/fail/data_race/atomic_write_na_write_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race1.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n #![feature(core_intrinsics)]\n \n use std::intrinsics::atomic_store;"}, {"sha": "51068262d5889e66034f1694a72e552b30786cd7", "filename": "tests/fail/data_race/atomic_write_na_write_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fatomic_write_na_write_race2.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n \n use std::sync::atomic::AtomicUsize;\n use std::sync::atomic::Ordering;"}, {"sha": "7bb20adfcd5fcdb2bad4cc90e8c780662637c90c", "filename": "tests/fail/data_race/dangling_thread_async_race.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdangling_thread_async_race.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-disable-isolation\n \n use std::mem;\n use std::thread::{sleep, spawn};"}, {"sha": "7e198eef6e94ee81482a274de826eab80085bdaa", "filename": "tests/fail/data_race/dangling_thread_race.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdangling_thread_race.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-disable-isolation\n \n use std::mem;\n use std::thread::{sleep, spawn};"}, {"sha": "634904cbfdce5613a7eec0e801c3473a6bef69bc", "filename": "tests/fail/data_race/dealloc_read_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race1.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n \n use std::thread::spawn;\n "}, {"sha": "91ec3c2bd8724ae6efa2240328055bac58b5c63d", "filename": "tests/fail/data_race/dealloc_read_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race2.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n \n use std::thread::spawn;\n "}, {"sha": "a43c96a6701e670f7b76dbc8d0b094e15feebfdf", "filename": "tests/fail/data_race/dealloc_read_race_stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_read_race_stack.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n use std::ptr::null_mut;\n use std::sync::atomic::{AtomicPtr, Ordering};"}, {"sha": "f95a9be17274918bcb4d3293847d2501ab783400", "filename": "tests/fail/data_race/dealloc_write_race1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race1.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n \n use std::thread::spawn;\n "}, {"sha": "922738354fb0702b563aaef62353260d12d02888", "filename": "tests/fail/data_race/dealloc_write_race2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race2.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n \n use std::thread::spawn;\n "}, {"sha": "6b87cbe61cad58974ac7ee4cb24e713ddb6979cb", "filename": "tests/fail/data_race/dealloc_write_race_stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fdealloc_write_race_stack.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n use std::ptr::null_mut;\n use std::sync::atomic::{AtomicPtr, Ordering};"}, {"sha": "757a41adc9328b03a09df93b3cd024e01433e2bc", "filename": "tests/fail/data_race/enable_after_join_to_main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fenable_after_join_to_main.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n \n use std::thread::spawn;\n "}, {"sha": "7a8d66bf8f29fbf342075cb7713b6fda5b51deb0", "filename": "tests/fail/data_race/fence_after_load.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Ffence_after_load.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Ffence_after_load.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Ffence_after_load.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n // We want to control preemption here.\n-// compile-flags: -Zmiri-disable-isolation -Zmiri-preemption-rate=0\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-disable-isolation -Zmiri-preemption-rate=0\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n use std::sync::atomic::{fence, AtomicUsize, Ordering};\n use std::sync::Arc;\n use std::thread;"}, {"sha": "cffbba1a70f33125ed819320a89030ac38fed2a0", "filename": "tests/fail/data_race/read_write_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fread_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fread_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fread_write_race.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n \n use std::thread::spawn;\n "}, {"sha": "3999c57bcf424f3d08e34344d94fa1bdd2753f0e", "filename": "tests/fail/data_race/read_write_race_stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fread_write_race_stack.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation -Zmir-opt-level=0 -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-disable-isolation -Zmir-opt-level=0 -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n // Note: mir-opt-level set to 0 to prevent the read of stack_var in thread 1\n // from being optimized away and preventing the detection of the data-race."}, {"sha": "3038efe99efa00ef98585c70aa78699575ffdb0a", "filename": "tests/fail/data_race/relax_acquire_race.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelax_acquire_race.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::thread::spawn;"}, {"sha": "ca227bf5ad29dbfd791f6df90b36dc202f236a91", "filename": "tests/fail/data_race/release_seq_race.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Frelease_seq_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Frelease_seq_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelease_seq_race.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::thread::{sleep, spawn};"}, {"sha": "c9b0cd7773ef740c46b8c9d179be4affe2cc700d", "filename": "tests/fail/data_race/release_seq_race_same_thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frelease_seq_race_same_thread.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::thread::spawn;"}, {"sha": "ca8123177ab3361b5bde364be723b664e69deb60", "filename": "tests/fail/data_race/rmw_race.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Frmw_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Frmw_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Frmw_race.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::thread::spawn;"}, {"sha": "a31c434604bb7dfa02a1729aa8f8fb6104de3dde", "filename": "tests/fail/data_race/stack_pop_race.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fstack_pop_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fstack_pop_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fstack_pop_race.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-preemption-rate=0\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-preemption-rate=0\n use std::thread;\n \n #[derive(Copy, Clone)]"}, {"sha": "ddd710bce08dc6eeb168b69974dcbc9447741f68", "filename": "tests/fail/data_race/write_write_race.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fwrite_write_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fwrite_write_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fwrite_write_race.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n \n use std::thread::spawn;\n "}, {"sha": "96b40affaed01af66ef7c7cad969a5a3d011e3a1", "filename": "tests/fail/data_race/write_write_race_stack.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fdata_race%2Fwrite_write_race_stack.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-disable-isolation -Zmiri-disable-weak-memory-emulation -Zmiri-preemption-rate=0\n \n use std::ptr::null_mut;\n use std::sync::atomic::{AtomicPtr, Ordering};"}, {"sha": "34941b9449234e9ccc0a5515f3073c25b060f4a3", "filename": "tests/fail/environ-gets-deallocated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fenviron-gets-deallocated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fenviron-gets-deallocated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fenviron-gets-deallocated.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Windows does not have a global environ list that the program can access directly\n+//@ignore-windows: Windows does not have a global environ list that the program can access directly\n \n #[cfg(any(target_os = \"linux\", target_os = \"freebsd\"))]\n fn get_environ() -> *const *const u8 {"}, {"sha": "ce1392d102b7a683cc7888e05085f1f782b50df0", "filename": "tests/fail/erroneous_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ferroneous_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ferroneous_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ferroneous_const.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,7 +1,7 @@\n //! Make sure we detect erroneous constants post-monomorphization even when they are unused.\n //! (https://github.com/rust-lang/miri/issues/1382)\n // Inlining changes the error location\n-// compile-flags: -Zmir-opt-level=0\n+//@compile-flags: -Zmir-opt-level=0\n #![feature(never_type)]\n #![warn(warnings, const_err)]\n "}, {"sha": "2737011128779fc9476c64f66af5f0838c6dc17a", "filename": "tests/fail/fs/close_stdout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffs%2Fclose_stdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffs%2Fclose_stdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fclose_stdout.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: No libc on Windows\n-// compile-flags: -Zmiri-disable-isolation\n+//@ignore-windows: No libc on Windows\n+//@compile-flags: -Zmiri-disable-isolation\n \n // FIXME: standard handles cannot be closed (https://github.com/rust-lang/rust/issues/40032)\n "}, {"sha": "00bb492147a8cab9ed3c306977a8642e1e1d2622", "filename": "tests/fail/fs/isolated_file.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffs%2Fisolated_file.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffs%2Fisolated_file.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fisolated_file.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: File handling is not implemented yet\n-// error-pattern: `open` not available when isolation is enabled\n+//@ignore-windows: File handling is not implemented yet\n+//@error-pattern: `open` not available when isolation is enabled\n \n fn main() {\n     let _file = std::fs::File::open(\"file.txt\").unwrap();"}, {"sha": "b41534c5c3a87a0686824670a3f7d6d9246b4fcc", "filename": "tests/fail/fs/isolated_stdin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffs%2Fisolated_stdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffs%2Fisolated_stdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fisolated_stdin.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "4862bf0a162c04432f1cd502f966a33e36a87ecd", "filename": "tests/fail/fs/read_from_stdout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffs%2Fread_from_stdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffs%2Fread_from_stdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fread_from_stdout.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// compile-flags: -Zmiri-disable-isolation\n-// ignore-windows: No libc on Windows\n+//@compile-flags: -Zmiri-disable-isolation\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "e714d26e7835c87bd87aa1e299e9bb9fe52c745c", "filename": "tests/fail/fs/unix_open_missing_required_mode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffs%2Funix_open_missing_required_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffs%2Funix_open_missing_required_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Funix_open_missing_required_mode.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: No libc on Windows\n-// compile-flags: -Zmiri-disable-isolation\n+//@ignore-windows: No libc on Windows\n+//@compile-flags: -Zmiri-disable-isolation\n \n #![feature(rustc_private)]\n "}, {"sha": "9d55a60b64b805893d180c4a13602110cc71d57f", "filename": "tests/fail/fs/write_to_stdin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffs%2Fwrite_to_stdin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffs%2Fwrite_to_stdin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffs%2Fwrite_to_stdin.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "e7372d5ec50a201bbd51c40bd92a5ad4e1d046a5", "filename": "tests/fail/function_calls/exported_symbol_abi_mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_abi_mismatch.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// revisions: no_cache cache fn_ptr\n+//@revisions: no_cache cache fn_ptr\n \n #[no_mangle]\n fn foo() {}"}, {"sha": "0a5636138d80fec126f2a744f259555914d3685b", "filename": "tests/fail/function_calls/exported_symbol_bad_unwind1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind1.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-disable-abi-check\n+//@compile-flags: -Zmiri-disable-abi-check\n #![feature(c_unwind)]\n \n #[no_mangle]"}, {"sha": "861789f862e6e716838c2e6c6e72c9328f8e60d4", "filename": "tests/fail/function_calls/exported_symbol_bad_unwind2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_calls%2Fexported_symbol_bad_unwind2.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// revisions: extern_block definition both\n+//@revisions: extern_block definition both\n #![feature(rustc_attrs, c_unwind)]\n \n #[cfg_attr(any(definition, both), rustc_allocator_nounwind)]"}, {"sha": "6edf88a543de914d8475edd294fb9ff36d75b895", "filename": "tests/fail/function_pointers/cast_box_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_box_int_to_fn_ptr.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Validation makes this fail in the wrong place\n-// compile-flags: -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-validation\n \n fn main() {\n     let b = Box::new(42);"}, {"sha": "272376307d7c1f2247759b06047a2e4ed9b30622", "filename": "tests/fail/function_pointers/cast_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fcast_int_to_fn_ptr.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Validation makes this fail in the wrong place\n-// compile-flags: -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-validation\n \n fn main() {\n     let g = unsafe { std::mem::transmute::<usize, fn(i32)>(42) };"}, {"sha": "0ca29a3594e521e30620298c2ea078627a06df5b", "filename": "tests/fail/function_pointers/execute_memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffunction_pointers%2Fexecute_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffunction_pointers%2Fexecute_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Fexecute_memory.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Validation makes this fail in the wrong place\n-// compile-flags: -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-validation\n \n #![feature(box_syntax)]\n "}, {"sha": "5f269760f1100518a50ad9318f01d57da3a4354a", "filename": "tests/fail/function_pointers/fn_ptr_offset.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffunction_pointers%2Ffn_ptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ffunction_pointers%2Ffn_ptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ffunction_pointers%2Ffn_ptr_offset.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Validation makes this fail in the wrong place\n-// compile-flags: -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-validation\n \n use std::mem;\n "}, {"sha": "915dcdea82e495799d976bf222371d05a8318f32", "filename": "tests/fail/generator-pinned-moved.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fgenerator-pinned-moved.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fgenerator-pinned-moved.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fgenerator-pinned-moved.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-validation\n #![feature(generators, generator_trait)]\n \n use std::{"}, {"sha": "c4ce192c449c3d9748f281653c21235c6de581ec", "filename": "tests/fail/intrinsics/copy_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fcopy_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fcopy_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fcopy_overflow.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: overflow computing total size\n+//@error-pattern: overflow computing total size\n use std::mem;\n \n fn main() {"}, {"sha": "0109bff696888b8e5e2a5c77aa3732056d01fb3a", "filename": "tests/fail/intrinsics/out_of_bounds_ptr_1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_1.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: pointer to 5 bytes starting at offset 0 is out-of-bounds\n+//@error-pattern: pointer to 5 bytes starting at offset 0 is out-of-bounds\n fn main() {\n     let v = [0i8; 4];\n     let x = &v as *const i8;"}, {"sha": "74d391dc212086b2719f258798b6023f42c61408", "filename": "tests/fail/intrinsics/out_of_bounds_ptr_2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_2.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: overflowing in-bounds pointer arithmetic\n+//@error-pattern: overflowing in-bounds pointer arithmetic\n fn main() {\n     let v = [0i8; 4];\n     let x = &v as *const i8;"}, {"sha": "b54cf3dd25c03ef334c980f2366da1537bf50015", "filename": "tests/fail/intrinsics/out_of_bounds_ptr_3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fout_of_bounds_ptr_3.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: pointer to 1 byte starting at offset -1 is out-of-bounds\n+//@error-pattern: pointer to 1 byte starting at offset -1 is out-of-bounds\n fn main() {\n     let v = [0i8; 4];\n     let x = &v as *const i8;"}, {"sha": "32974a825a54c4e8d27f32b360b9930c665f69b9", "filename": "tests/fail/intrinsics/ptr_offset_0_plus_0.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_0_plus_0.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// error-pattern: null pointer is a dangling pointer\n-// compile-flags: -Zmiri-permissive-provenance\n+//@error-pattern: null pointer is a dangling pointer\n+//@compile-flags: -Zmiri-permissive-provenance\n \n fn main() {\n     let x = 0 as *mut i32;"}, {"sha": "f51e00746e2fd36c0a2b913dcf5e6ff0ad3746da", "filename": "tests/fail/intrinsics/ptr_offset_int_plus_int.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_int.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// error-pattern: is a dangling pointer\n-// compile-flags: -Zmiri-permissive-provenance\n+//@error-pattern: is a dangling pointer\n+//@compile-flags: -Zmiri-permissive-provenance\n \n fn main() {\n     // Can't offset an integer pointer by non-zero offset."}, {"sha": "8fc4d7fe7350b02647cd6696cd4dbdd79f25d927", "filename": "tests/fail/intrinsics/ptr_offset_int_plus_ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_int_plus_ptr.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// error-pattern: is a dangling pointer\n-// compile-flags: -Zmiri-permissive-provenance\n+//@error-pattern: is a dangling pointer\n+//@compile-flags: -Zmiri-permissive-provenance\n \n fn main() {\n     let ptr = Box::into_raw(Box::new(0u32));"}, {"sha": "829cf90c855d70a8326f3cc95ecf43f646dd990c", "filename": "tests/fail/intrinsics/ptr_offset_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_overflow.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: overflowing in-bounds pointer arithmetic\n+//@error-pattern: overflowing in-bounds pointer arithmetic\n fn main() {\n     let v = [1i8, 2];\n     let x = &v[1] as *const i8;"}, {"sha": "f8ee7d0b5092a164d530d119da1049bedf67df20", "filename": "tests/fail/intrinsics/ptr_offset_ptr_plus_0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fptr_offset_ptr_plus_0.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: pointer at offset 32 is out-of-bounds\n+//@error-pattern: pointer at offset 32 is out-of-bounds\n \n fn main() {\n     let x = Box::into_raw(Box::new(0u32));"}, {"sha": "a5bae36d92a46d4be13b46937481b2e4eff2943a", "filename": "tests/fail/intrinsics/simd-float-to-int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-float-to-int.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: cannot be represented in target type `i32`\n+//@error-pattern: cannot be represented in target type `i32`\n #![feature(portable_simd)]\n use std::simd::*;\n "}, {"sha": "e394cce9a4fe3a5adb14641d2d0445533b7df3e3", "filename": "tests/fail/intrinsics/simd-gather.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fsimd-gather.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fsimd-gather.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-gather.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: pointer to 1 byte starting at offset 9 is out-of-bounds\n+//@error-pattern: pointer to 1 byte starting at offset 9 is out-of-bounds\n #![feature(portable_simd)]\n use std::simd::*;\n "}, {"sha": "d2bc73399548b2a609c926839cc82a06cd29c949", "filename": "tests/fail/intrinsics/simd-scatter.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fsimd-scatter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fsimd-scatter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fsimd-scatter.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: pointer to 1 byte starting at offset 9 is out-of-bounds\n+//@error-pattern: pointer to 1 byte starting at offset 9 is out-of-bounds\n #![feature(portable_simd)]\n use std::simd::*;\n "}, {"sha": "5c49dc00165c954d525df0bfbc97db52b9af28fd", "filename": "tests/fail/intrinsics/write_bytes_overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fintrinsics%2Fwrite_bytes_overflow.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: overflow computing total size of `write_bytes`\n+//@error-pattern: overflow computing total size of `write_bytes`\n use std::mem;\n \n fn main() {"}, {"sha": "b2052d982ed80b5ab794527b4ab4391a9eec4094", "filename": "tests/fail/invalid_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Finvalid_bool.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n // Validation makes this fail in the wrong place\n // Make sure we find these even with many checks disabled.\n-// compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n #![feature(bench_black_box)]\n \n fn main() {"}, {"sha": "8d814fd92e0c60dc614f563c01acf435c0d3c5ee", "filename": "tests/fail/invalid_char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Finvalid_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Finvalid_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Finvalid_char.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n // Validation makes this fail in the wrong place\n // Make sure we find these even with many checks disabled.\n-// compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n \n fn main() {\n     let c = 0xFFFFFFu32;"}, {"sha": "92cc1d1d34e48af7c933ae46c36a2ca7e6a61fd9", "filename": "tests/fail/invalid_enum_tag.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Finvalid_enum_tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Finvalid_enum_tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Finvalid_enum_tag.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,8 +1,8 @@\n // Validation makes this fail in the wrong place\n // Make sure we find these even with many checks disabled.\n-// compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n \n-// error-pattern: enum value has invalid tag\n+//@error-pattern: enum value has invalid tag\n \n use std::mem;\n "}, {"sha": "6914c66faec3875d06d3c2ccfe114a0565f54254", "filename": "tests/fail/invalid_int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Finvalid_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Finvalid_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Finvalid_int.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n // Validation makes this fail in the wrong place\n // Make sure we find these even with many checks disabled.\n-// compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n \n fn main() {\n     let i = unsafe { std::mem::MaybeUninit::<i32>::uninit().assume_init() };"}, {"sha": "d384caf81a57efcfd642664f4387ac96b43207b3", "filename": "tests/fail/memleak.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fmemleak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fmemleak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fmemleak.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// error-pattern: the evaluated program leaked memory\n-// normalize-stderr-test: \".*\u2502.*\" -> \"$$stripped$$\"\n+//@error-pattern: the evaluated program leaked memory\n+//@normalize-stderr-test: \".*\u2502.*\" -> \"$$stripped$$\"\n \n fn main() {\n     std::mem::forget(Box::new(42));"}, {"sha": "76ecd71b011aad0ac24ed80be52049372109b2be", "filename": "tests/fail/memleak_rc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fmemleak_rc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fmemleak_rc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fmemleak_rc.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n-// error-pattern: the evaluated program leaked memory\n-// stderr-per-bitwidth\n-// normalize-stderr-test: \".*\u2502.*\" -> \"$$stripped$$\"\n+//@error-pattern: the evaluated program leaked memory\n+//@stderr-per-bitwidth\n+//@normalize-stderr-test: \".*\u2502.*\" -> \"$$stripped$$\"\n \n use std::cell::RefCell;\n use std::rc::Rc;"}, {"sha": "290de49c82c0b09cdb83d7d5920d2abbfa1442fb", "filename": "tests/fail/memleak_rc.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fmemleak_rc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fmemleak_rc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fmemleak_rc.stderr?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -0,0 +1,11 @@\n+The following memory was leaked: ALLOC (Rust heap, size: 32, align: 8) {\n+    0x00 \u2502 01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 \u2502 ................\n+    0x10 \u2502 00 00 00 00 00 00 00 00 \u257e$HEX[a1765]<TAG>\u2500\u257c \u2502 ........\u257e\u2500\u2500\u2500\u2500\u2500\u2500\u257c\n+}\n+\n+error: the evaluated program leaked memory\n+\n+note: pass `-Zmiri-ignore-leaks` to disable this check\n+\n+error: aborting due to previous error\n+"}, {"sha": "3c47661a4b2d46a9488f4badde828f1f9001d14f", "filename": "tests/fail/modifying_constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fmodifying_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fmodifying_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fmodifying_constants.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation/SB\n-// compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n fn main() {\n     let x = &1; // the `&1` is promoted to a constant, but it used to be that only the pointer is marked static, not the pointee"}, {"sha": "6beaada56e9a43ceed8b936f0f5258f0519328ab", "filename": "tests/fail/never_say_never.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fnever_say_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fnever_say_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fnever_say_never.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation\n-// compile-flags: -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-validation\n \n #![feature(never_type)]\n #![allow(unreachable_code)]"}, {"sha": "010c9d4146d812b38c2071a0eb9a5d2f8fa56675", "filename": "tests/fail/never_transmute_humans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fnever_transmute_humans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fnever_transmute_humans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fnever_transmute_humans.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation\n-// compile-flags: -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-validation\n \n #![feature(never_type)]\n "}, {"sha": "d9c34aa7a5ca0d80be2b816e578e51fc17fd3bbe", "filename": "tests/fail/never_transmute_void.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fnever_transmute_void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fnever_transmute_void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fnever_transmute_void.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation\n-// compile-flags: -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-validation\n \n #![feature(never_type)]\n #![allow(unused, invalid_value)]"}, {"sha": "e28205040871a74fb8fb74d89746ebcf5d337d28", "filename": "tests/fail/no_main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fno_main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fno_main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fno_main.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,2 +1,2 @@\n-// error-pattern: miri can only run programs that have a main function\n+//@error-pattern: miri can only run programs that have a main function\n #![no_main]"}, {"sha": "9beeccd1d2204069d812d74a11ba953522b0da0a", "filename": "tests/fail/panic/bad_miri_start_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fpanic%2Fbad_miri_start_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fpanic%2Fbad_miri_start_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fbad_miri_start_panic.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-disable-abi-check\n+//@compile-flags: -Zmiri-disable-abi-check\n // This feature is required to trigger the error using the \"C\" ABI.\n #![feature(c_unwind)]\n "}, {"sha": "8919d51bb2f74b9ac6892eadf519d831be0e1f2e", "filename": "tests/fail/panic/double_panic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fpanic%2Fdouble_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fpanic%2Fdouble_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fdouble_panic.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n-// error-pattern: the program aborted\n-// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n-// normalize-stderr-test: \"unsafe \\{ libc::abort\\(\\) \\}|crate::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n+//@error-pattern: the program aborted\n+//@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+//@normalize-stderr-test: \"unsafe \\{ libc::abort\\(\\) \\}|crate::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n \n struct Foo;\n impl Drop for Foo {"}, {"sha": "00a01ce6e81374f4582a40bd10470b89f2761c40", "filename": "tests/fail/panic/panic_abort1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fpanic%2Fpanic_abort1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fpanic%2Fpanic_abort1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fpanic_abort1.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,7 +1,7 @@\n-// error-pattern: the program aborted execution\n-// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n-// normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n-// compile-flags: -C panic=abort\n+//@error-pattern: the program aborted execution\n+//@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+//@normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n+//@compile-flags: -C panic=abort\n \n fn main() {\n     std::panic!(\"panicking from libstd\");"}, {"sha": "dee0de96703a1969aa0e97534807bccfbc3e354d", "filename": "tests/fail/panic/panic_abort2.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fpanic%2Fpanic_abort2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fpanic%2Fpanic_abort2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fpanic_abort2.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,7 +1,7 @@\n-// error-pattern: the program aborted execution\n-// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n-// normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n-// compile-flags: -C panic=abort\n+//@error-pattern: the program aborted execution\n+//@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+//@normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n+//@compile-flags: -C panic=abort\n \n fn main() {\n     std::panic!(\"{}-panicking from libstd\", 42);"}, {"sha": "a448aab3ea4580e689d0c24147cacd7da4c0ba45", "filename": "tests/fail/panic/panic_abort3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fpanic%2Fpanic_abort3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fpanic%2Fpanic_abort3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fpanic_abort3.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,7 +1,7 @@\n-// error-pattern: the program aborted execution\n-// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n-// normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n-// compile-flags: -C panic=abort\n+//@error-pattern: the program aborted execution\n+//@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+//@normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n+//@compile-flags: -C panic=abort\n \n fn main() {\n     core::panic!(\"panicking from libcore\");"}, {"sha": "4995dad9d71ab475ddce111aaa7c49a0c2664ff3", "filename": "tests/fail/panic/panic_abort4.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fpanic%2Fpanic_abort4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fpanic%2Fpanic_abort4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Fpanic_abort4.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,7 +1,7 @@\n-// error-pattern: the program aborted execution\n-// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n-// normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n-// compile-flags: -C panic=abort\n+//@error-pattern: the program aborted execution\n+//@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+//@normalize-stderr-test: \"libc::abort\\(\\);|core::intrinsics::abort\\(\\);\" -> \"ABORT();\"\n+//@compile-flags: -C panic=abort\n \n fn main() {\n     core::panic!(\"{}-panicking from libcore\", 42);"}, {"sha": "40dcf1bc2a3a1303f5f74a800df63d6f6d52d72b", "filename": "tests/fail/panic/unwind_panic_abort.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fpanic%2Funwind_panic_abort.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fpanic%2Funwind_panic_abort.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpanic%2Funwind_panic_abort.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Cpanic=abort\n+//@compile-flags: -Cpanic=abort\n \n //! Unwinding despite `-C panic=abort` is an error.\n "}, {"sha": "95af3569f35b37eec262594da57e738746e5a27e", "filename": "tests/fail/pointer_partial_overwrite.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fpointer_partial_overwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fpointer_partial_overwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fpointer_partial_overwrite.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Make sure we find these even with many checks disabled.\n-// compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-alignment-check -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n \n // Test what happens when we overwrite parts of a pointer.\n // Also see <https://github.com/rust-lang/miri/issues/2181>."}, {"sha": "90208c88d6946f3178df831af23f7825a98d21d5", "filename": "tests/fail/provenance/provenance_transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fprovenance%2Fprovenance_transmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fprovenance%2Fprovenance_transmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fprovenance_transmute.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n #![feature(strict_provenance)]\n \n use std::mem;"}, {"sha": "5522aa33c74109ca8a48eccf9e0fa1708b3aeef8", "filename": "tests/fail/provenance/ptr_int_unexposed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fprovenance%2Fptr_int_unexposed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fprovenance%2Fptr_int_unexposed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fptr_int_unexposed.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n #![feature(strict_provenance)]\n \n fn main() {"}, {"sha": "a3510d8e89290428bf181563f5193e88f861208b", "filename": "tests/fail/provenance/ptr_invalid_offset.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fptr_invalid_offset.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// compile-flags: -Zmiri-strict-provenance\n-// error-pattern: is a dangling pointer\n+//@compile-flags: -Zmiri-strict-provenance\n+//@error-pattern: is a dangling pointer\n #![feature(strict_provenance)]\n \n fn main() {"}, {"sha": "bca7ea90a31d0d0e42f73e439cfc77b2e8269cc6", "filename": "tests/fail/provenance/strict_provenance_cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fprovenance%2Fstrict_provenance_cast.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-strict-provenance\n+//@compile-flags: -Zmiri-strict-provenance\n \n fn main() {\n     let addr = &0 as *const i32 as usize;"}, {"sha": "9aafa2628425ac52bd77dace8ad47921c85352f3", "filename": "tests/fail/rc_as_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Frc_as_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Frc_as_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Frc_as_ptr.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation\n-// compile-flags: -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-validation\n \n use std::ptr;\n use std::rc::{Rc, Weak};"}, {"sha": "d1ffdf8cddb427b3e57a06ba4e21c48a36b11b7f", "filename": "tests/fail/shim_arg_size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fshim_arg_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fshim_arg_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshim_arg_size.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// stderr-per-bitwidth\n+//@stderr-per-bitwidth\n \n fn main() {\n     extern \"C\" {"}, {"sha": "6478f446accc4306b08c6c579c7dfb23d23dd72c", "filename": "tests/fail/should-pass/cpp20_rwc_syncs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fshould-pass%2Fcpp20_rwc_syncs.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-ignore-leaks\n-// error-pattern: unreachable\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-ignore-leaks\n+//@error-pattern: unreachable\n \n // https://plv.mpi-sws.org/scfix/paper.pdf\n // 2.2 Second Problem: SC Fences are Too Weak"}, {"sha": "0798f863ce110e6b8234e9c6dfd58947e76bc3ab", "filename": "tests/fail/stacked_borrows/deallocate_against_barrier1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier1.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: deallocating while item is protected\n+//@error-pattern: deallocating while item is protected\n \n fn inner(x: &mut i32, f: fn(&mut i32)) {\n     // `f` may mutate, but it may not deallocate!"}, {"sha": "23c54c8d898837ea2470e96bae15a25f9c9e1274", "filename": "tests/fail/stacked_borrows/deallocate_against_barrier2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fdeallocate_against_barrier2.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: deallocating while item is protected\n+//@error-pattern: deallocating while item is protected\n use std::marker::PhantomPinned;\n \n pub struct NotUnpin(i32, PhantomPinned);"}, {"sha": "f2fdc213b143096e80e50158ed70653cf30bff64", "filename": "tests/fail/stacked_borrows/exposed_only_ro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fexposed_only_ro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fexposed_only_ro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fexposed_only_ro.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n #![feature(strict_provenance)]\n \n // If we have only exposed read-only pointers, doing a write through a wildcard ptr should fail."}, {"sha": "8f86a4f0a6b58367e65b109139c1e5ac904deee4", "filename": "tests/fail/stacked_borrows/illegal_read5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fillegal_read5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fillegal_read5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read5.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n // We *can* have aliasing &RefCell<T> and &mut T, but we cannot read through the former.\n // Else we couldn't optimize based on the assumption that `xref` below is truly unique.\n-// normalize-stderr-test: \"0x[0-9a-fA-F]+\" -> \"$$HEX\"\n+//@normalize-stderr-test: \"0x[0-9a-fA-F]+\" -> \"$$HEX\"\n \n use std::cell::RefCell;\n use std::{mem, ptr};"}, {"sha": "d779d4e446571c7dadd6d5d4b2b4aa4bd820fba0", "filename": "tests/fail/stacked_borrows/illegal_read_despite_exposed1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed1.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n \n fn main() {\n     unsafe {"}, {"sha": "20b44e9e027b43e952e3f774ebffc531587a74d4", "filename": "tests/fail/stacked_borrows/illegal_read_despite_exposed2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_read_despite_exposed2.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n \n fn main() {\n     unsafe {"}, {"sha": "f14fcb14793ce703f922a6097297b457e6ffd46b", "filename": "tests/fail/stacked_borrows/illegal_write_despite_exposed1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fillegal_write_despite_exposed1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fillegal_write_despite_exposed1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fillegal_write_despite_exposed1.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n \n fn main() {\n     unsafe {"}, {"sha": "6e14b9af146c6366e745c7662739943cd5288221", "filename": "tests/fail/stacked_borrows/issue-miri-1050-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-1.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: pointer to 4 bytes starting at offset 0 is out-of-bounds\n+//@error-pattern: pointer to 4 bytes starting at offset 0 is out-of-bounds\n \n fn main() {\n     unsafe {"}, {"sha": "571cb6213fec21c290a3c98ca36ceb0f800135c7", "filename": "tests/fail/stacked_borrows/issue-miri-1050-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fissue-miri-1050-2.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: is a dangling pointer\n+//@error-pattern: is a dangling pointer\n use std::ptr::NonNull;\n \n fn main() {"}, {"sha": "f0ae77f861012b59c9fd6afcdd71d6ea3cc80df3", "filename": "tests/fail/stacked_borrows/load_invalid_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_mut.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Make sure we catch this even without validation\n-// compile-flags: -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-validation\n \n // Make sure that we cannot load from memory a `&mut` that got already invalidated.\n fn main() {"}, {"sha": "36ffef656e7f3bcbba012f84582cd4da53c6d580", "filename": "tests/fail/stacked_borrows/load_invalid_shr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_shr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_shr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fload_invalid_shr.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Make sure we catch this even without validation\n-// compile-flags: -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-validation\n \n // Make sure that we cannot load from memory a `&` that got already invalidated.\n fn main() {"}, {"sha": "4786cd02d954f31e32d1239f9f874d9cc80c40c6", "filename": "tests/fail/stacked_borrows/newtype_retagging.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fnewtype_retagging.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// compile-flags: -Zmiri-retag-fields\n-// error-pattern: incompatible item is protected\n+//@compile-flags: -Zmiri-retag-fields\n+//@error-pattern: incompatible item is protected\n struct Newtype<'a>(&'a mut i32);\n \n fn dealloc_while_running(_n: Newtype<'_>, dealloc: impl FnOnce()) {"}, {"sha": "2fc05c2bf4cc7ba65919a7d704f9f10b973d779d", "filename": "tests/fail/stacked_borrows/shared_rw_borrows_are_weak2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fshared_rw_borrows_are_weak2.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,7 +1,7 @@\n // We want to test that granting a SharedReadWrite will be added\n // *below* an already granted SharedReadWrite -- so writing to\n // the SharedReadWrite will invalidate the SharedReadWrite.\n-// normalize-stderr-test: \"0x[0-9a-fA-F]+\" -> \"$$HEX\"\n+//@normalize-stderr-test: \"0x[0-9a-fA-F]+\" -> \"$$HEX\"\n \n use std::cell::RefCell;\n use std::mem;"}, {"sha": "e6cd8f09b1ad927c8ae51a0c0989e0f0f6b29130", "filename": "tests/fail/stacked_borrows/unescaped_local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Funescaped_local.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n \n // Make sure we cannot use raw ptrs to access a local that\n // we took the direct address of."}, {"sha": "27e035c404bab79723f6f30aa16e522ec893364a", "filename": "tests/fail/stacked_borrows/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fvtable.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: vtable pointer does not have permission\n+//@error-pattern: vtable pointer does not have permission\n #![feature(ptr_metadata)]\n \n trait Foo {}"}, {"sha": "3e27f514bc888e060b788d6b2303acade347ac56", "filename": "tests/fail/stacked_borrows/zst_slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fzst_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstacked_borrows%2Fzst_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstacked_borrows%2Fzst_slice.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// compile-flags: -Zmiri-strict-provenance\n-// error-pattern: does not exist in the borrow stack\n+//@compile-flags: -Zmiri-strict-provenance\n+//@error-pattern: does not exist in the borrow stack\n \n fn main() {\n     unsafe {"}, {"sha": "38e8af4c4f1a5b184926130dbea2a1490ce1c57d", "filename": "tests/fail/static_memory_modification1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstatic_memory_modification1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstatic_memory_modification1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstatic_memory_modification1.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Stacked Borrows detects that we are casting & to &mut and so it changes why we fail\n-// compile-flags: -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-stacked-borrows\n \n static X: usize = 5;\n "}, {"sha": "2e9d123c6d39482344d4248f5188fa57e24103d1", "filename": "tests/fail/static_memory_modification2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstatic_memory_modification2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstatic_memory_modification2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstatic_memory_modification2.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Stacked Borrows detects that we are casting & to &mut and so it changes why we fail\n-// compile-flags: -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-stacked-borrows\n \n use std::mem::transmute;\n "}, {"sha": "34ccd13c429d8b736aac154d5aac4f725f062abb", "filename": "tests/fail/static_memory_modification3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstatic_memory_modification3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fstatic_memory_modification3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fstatic_memory_modification3.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Stacked Borrows detects that we are casting & to &mut and so it changes why we fail\n-// compile-flags: -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-stacked-borrows\n \n use std::mem::transmute;\n "}, {"sha": "d358b3d4f631fb9810df9744fcc129f41c83e69f", "filename": "tests/fail/sync/libc_pthread_cond_double_destroy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_cond_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_cond_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_cond_double_destroy.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n #![feature(rustc_private)]\n \n /// Test that destroying a pthread_cond twice fails, even without a check for number validity"}, {"sha": "bf6b038a212f153d47a73bdcc03b1634575ef46c", "filename": "tests/fail/sync/libc_pthread_condattr_double_destroy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_condattr_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_condattr_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_condattr_double_destroy.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n #![feature(rustc_private)]\n \n /// Test that destroying a pthread_condattr twice fails, even without a check for number validity"}, {"sha": "22dd656023b73416a6b532b295f51b8d7ca60389", "filename": "tests/fail/sync/libc_pthread_mutex_NULL_deadlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_NULL_deadlock.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n //\n // Check that if we pass NULL attribute, then we get the default mutex type.\n "}, {"sha": "597d7721b12d2b5771f56c1bc22ee9c1d809ac08", "filename": "tests/fail/sync/libc_pthread_mutex_deadlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_deadlock.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "e34dfe5e367e1bf41aae578349f7bbcf5f6c0e3b", "filename": "tests/fail/sync/libc_pthread_mutex_default_deadlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_default_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_default_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_default_deadlock.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n //\n // Check that if we do not set the mutex type, it is the default.\n "}, {"sha": "ada3d311134d368415864258a74ad3da5181f245", "filename": "tests/fail/sync/libc_pthread_mutex_destroy_locked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_destroy_locked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_destroy_locked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_destroy_locked.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "4cf006437b391f8bbac266fa2beae78fd8f2e65a", "filename": "tests/fail/sync/libc_pthread_mutex_double_destroy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_double_destroy.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n #![feature(rustc_private)]\n \n /// Test that destroying a pthread_mutex twice fails, even without a check for number validity"}, {"sha": "8ecad494cfee6ad9703f2f3d27e376f87b582d3f", "filename": "tests/fail/sync/libc_pthread_mutex_normal_deadlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_deadlock.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "0109907a11862b84d53c013d8a87d390dad92a96", "filename": "tests/fail/sync/libc_pthread_mutex_normal_unlock_unlocked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_normal_unlock_unlocked.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "d91245104b0e1056ee2d8d18398aee7dab5b5e18", "filename": "tests/fail/sync/libc_pthread_mutex_wrong_owner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_wrong_owner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_wrong_owner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutex_wrong_owner.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "ffa786b65893f2a5cb996d562131dfbac87b6109", "filename": "tests/fail/sync/libc_pthread_mutexattr_double_destroy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_mutexattr_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_mutexattr_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_mutexattr_double_destroy.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n #![feature(rustc_private)]\n \n /// Test that destroying a pthread_mutexattr twice fails, even without a check for number validity"}, {"sha": "6a9f548d1a30131692187c6346dcf738ff9bce33", "filename": "tests/fail/sync/libc_pthread_rwlock_destroy_read_locked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_read_locked.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "5f5f16d2cf0ee3ff7b8497032ae61b864a770542", "filename": "tests/fail/sync/libc_pthread_rwlock_destroy_write_locked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_destroy_write_locked.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "1ba89fb22cf39b8bf3fe027cf21b39675166acd3", "filename": "tests/fail/sync/libc_pthread_rwlock_double_destroy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_double_destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_double_destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_double_destroy.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n #![feature(rustc_private)]\n \n /// Test that destroying a pthread_rwlock twice fails, even without a check for number validity"}, {"sha": "9c8d22310cab9e8f0d925a6fd4060c835f30825e", "filename": "tests/fail/sync/libc_pthread_rwlock_read_write_deadlock_single_thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_read_write_deadlock_single_thread.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "361cc7cdd850d80676a0b1c9fbc855079591d786", "filename": "tests/fail/sync/libc_pthread_rwlock_read_wrong_owner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_read_wrong_owner.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "7918a9665a033f9bd9fcf5ebbce21a4d0cc5b562", "filename": "tests/fail/sync/libc_pthread_rwlock_unlock_unlocked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_unlock_unlocked.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "3158b944a7f775dcbca9aca703a8d7c0ae6372c2", "filename": "tests/fail/sync/libc_pthread_rwlock_write_read_deadlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "c6b468eb89b11010b82f6ec085c1b88ba775e6b8", "filename": "tests/fail/sync/libc_pthread_rwlock_write_read_deadlock_single_thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_read_deadlock_single_thread.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "91adaf85499fa94298cb55f8338da6ecf6eb0d0a", "filename": "tests/fail/sync/libc_pthread_rwlock_write_write_deadlock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "13a7ceefc7bbe31befe2b6b9954ea4326387aec5", "filename": "tests/fail/sync/libc_pthread_rwlock_write_write_deadlock_single_thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_write_deadlock_single_thread.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "a205bbcb6b55b077f010b30c373cf579f8b8e29f", "filename": "tests/fail/sync/libc_pthread_rwlock_write_wrong_owner.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fsync%2Flibc_pthread_rwlock_write_wrong_owner.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "932964ebdd7b96289a35020e6aa984f8c044dc2c", "filename": "tests/fail/type-too-large.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ftype-too-large.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Ftype-too-large.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Ftype-too-large.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-32bit\n+//@ignore-32bit\n \n fn main() {\n     let _fat: [u8; (1 << 61) + (1 << 31)];"}, {"sha": "438e74e5b8d5228753458a87b913b43ab40a374b", "filename": "tests/fail/unaligned_pointers/alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Falignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Falignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Falignment.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n+//@normalize-stderr-test: \"\\| +\\^+\" -> \"| ^\"\n \n fn main() {\n     // No retry needed, this fails reliably."}, {"sha": "68b0efdbfeb4471dce6f7070094076a37d504902", "filename": "tests/fail/unaligned_pointers/atomic_unaligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fatomic_unaligned.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-symbolic-alignment-check\n+//@compile-flags: -Zmiri-symbolic-alignment-check\n #![feature(core_intrinsics)]\n \n fn main() {"}, {"sha": "fe9c39523029011b5d14f024a1c2352280f52533", "filename": "tests/fail/unaligned_pointers/dyn_alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fdyn_alignment.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // should find the bug even without validation and stacked borrows, but gets masked by optimizations\n-// compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows -Zmir-opt-level=0\n+//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows -Zmir-opt-level=0\n \n #[repr(align(256))]\n #[derive(Debug)]"}, {"sha": "172461424ec0467963e3fac0b5059c93a03f980f", "filename": "tests/fail/unaligned_pointers/intptrcast_alignment_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-symbolic-alignment-check -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-symbolic-alignment-check -Zmiri-permissive-provenance\n // With the symbolic alignment check, even with intptrcast and without\n // validation, we want to be *sure* to catch bugs that arise from pointers being\n // insufficiently aligned. The only way to achieve that is not not let programs"}, {"sha": "b4659805745aae5cda307d71851086d5dae81055", "filename": "tests/fail/unaligned_pointers/reference_to_packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Freference_to_packed.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation/SB\n-// compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n #![allow(dead_code, unused_variables, unaligned_references)]\n "}, {"sha": "a3b483281139da62d0319e3a470f689c502cc61e", "filename": "tests/fail/unaligned_pointers/unaligned_ptr1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr1.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation or Stacked Borrows.\n-// compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n fn main() {\n     // Try many times as this might work by chance."}, {"sha": "88fcd30278d72d6d87643ec30c7824895cfff1ac", "filename": "tests/fail/unaligned_pointers/unaligned_ptr2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr2.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation or Stacked Borrows.\n-// compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n fn main() {\n     // No retry needed, this fails reliably."}, {"sha": "3a4b1497ae6bbd6aad8741061182d1fbec589b80", "filename": "tests/fail/unaligned_pointers/unaligned_ptr3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr3.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation or Stacked Borrows.\n-// compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n fn main() {\n     // Try many times as this might work by chance."}, {"sha": "659fbf1470ce163b376d81f4ed6323eee25dec57", "filename": "tests/fail/unaligned_pointers/unaligned_ptr4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr4.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation or Stacked Borrows.\n-// compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n \n fn main() {\n     // Make sure we notice when a u16 is loaded at offset 1 into a u8 allocation."}, {"sha": "28a58556eb395ef12e9e3f271f003ac38eca8fb1", "filename": "tests/fail/unaligned_pointers/unaligned_ptr_addr_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation or Stacked Borrows.\n-// compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-validation -Zmiri-disable-stacked-borrows\n use std::ptr;\n \n fn main() {"}, {"sha": "26c315d34bf50c229bd726aca93472a4ca6e932b", "filename": "tests/fail/unaligned_pointers/unaligned_ptr_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funaligned_pointers%2Funaligned_ptr_zst.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n // This should fail even without validation\n // Some optimizations remove ZST accesses, thus masking this UB.\n-// compile-flags: -Zmir-opt-level=0 -Zmiri-disable-validation\n+//@compile-flags: -Zmir-opt-level=0 -Zmiri-disable-validation\n \n fn main() {\n     // Try many times as this might work by chance."}, {"sha": "d21371225e57181f5e7e9ea86dbb156044c56588", "filename": "tests/fail/uninit_buffer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funinit_buffer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funinit_buffer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funinit_buffer.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: memory is uninitialized at [0x4..0x10]\n+//@error-pattern: memory is uninitialized at [0x4..0x10]\n \n use std::alloc::{alloc, dealloc, Layout};\n use std::slice::from_raw_parts;"}, {"sha": "e08d34d138561f1861c469c37c3140653d01e062", "filename": "tests/fail/uninit_byte_read.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funinit_byte_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funinit_byte_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funinit_byte_read.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-stacked-borrows\n fn main() {\n     let v: Vec<u8> = Vec::with_capacity(10);\n     let undef = unsafe { *v.get_unchecked(5) }; //~ ERROR uninitialized"}, {"sha": "ef2bb42c65cc6cfcf91dfca98f7f506e1c82a571", "filename": "tests/fail/unreachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funreachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funreachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funreachable.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// error-pattern: entering unreachable code\n+//@error-pattern: entering unreachable code\n fn main() {\n     unsafe { std::hint::unreachable_unchecked() }\n }"}, {"sha": "9cdf3cfdc664f093cf4097b9fdc56f45bf045005", "filename": "tests/fail/unsupported_signal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funsupported_signal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Funsupported_signal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Funsupported_signal.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n //! `signal()` is special on Linux and macOS that it's only supported within libstd.\n //! The implementation is not complete enough to permit user code to call it.\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n #![feature(rustc_private)]\n \n extern crate libc;"}, {"sha": "1bd889e899941e57608e312a04b4ea21f5ee396f", "filename": "tests/fail/validity/cast_fn_ptr1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr1.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n \n fn main() {\n     // Cast a function pointer such that on a call, the argument gets transmuted"}, {"sha": "7e7ad4710f5c3d14748bb4a952815a514ca02003", "filename": "tests/fail/validity/cast_fn_ptr2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fcast_fn_ptr2.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n \n fn main() {\n     // Cast a function pointer such that when returning, the return value gets transmuted"}, {"sha": "cc94cc6ca0edb83ad8b6cd6c4abdd8a03954b545", "filename": "tests/fail/validity/dangling_ref1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fvalidity%2Fdangling_ref1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fvalidity%2Fdangling_ref1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fdangling_ref1.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Make sure we catch this even without Stacked Borrows\n-// compile-flags: -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-stacked-borrows\n use std::mem;\n \n fn main() {"}, {"sha": "eba026fdda86a02f22d74a5530ea6c2b906f3196", "filename": "tests/fail/validity/dangling_ref2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fvalidity%2Fdangling_ref2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fvalidity%2Fdangling_ref2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fdangling_ref2.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Make sure we catch this even without Stacked Borrows\n-// compile-flags: -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-stacked-borrows\n use std::mem;\n \n fn main() {"}, {"sha": "8decc845ecb45591b9e240135dbe2c24e8366249", "filename": "tests/fail/validity/dangling_ref3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fvalidity%2Fdangling_ref3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fvalidity%2Fdangling_ref3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fdangling_ref3.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Make sure we catch this even without Stacked Borrows\n-// compile-flags: -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-stacked-borrows\n use std::mem;\n \n fn dangling() -> *const u8 {"}, {"sha": "10e30cf85fe62e734a282d1b0a6f3885efe7d0aa", "filename": "tests/fail/validity/invalid_enum_tag_256variants_uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Finvalid_enum_tag_256variants_uninit.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Even when uninit numbers are allowed, this enum is not.\n-// compile-flags: -Zmiri-allow-uninit-numbers\n+//@compile-flags: -Zmiri-allow-uninit-numbers\n #![allow(unused, deprecated, invalid_value)]\n \n #[derive(Copy, Clone)]"}, {"sha": "6344bb61ae25e7c0e23d827cf4d4d14c9432eb36", "filename": "tests/fail/validity/nonzero.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fvalidity%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fvalidity%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fvalidity%2Fnonzero.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // gets masked by optimizations\n-// compile-flags: -Zmir-opt-level=0\n+//@compile-flags: -Zmir-opt-level=0\n #![feature(rustc_attrs)]\n #![allow(unused_attributes)]\n "}, {"sha": "3608377e9199e97de0903f9a9b47dbdc2a338e06", "filename": "tests/fail/weak_memory/racing_mixed_size.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fweak_memory%2Fracing_mixed_size.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fweak_memory%2Fracing_mixed_size.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fweak_memory%2Fracing_mixed_size.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n \n #![feature(core_intrinsics)]\n "}, {"sha": "e87b6d6fd01f5e5aad74720a9822a781ee9258fe", "filename": "tests/fail/weak_memory/racing_mixed_size_read.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fweak_memory%2Fracing_mixed_size_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fweak_memory%2Fracing_mixed_size_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fweak_memory%2Fracing_mixed_size_read.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n \n #![feature(core_intrinsics)]\n "}, {"sha": "55c78fe8f944e935d09afe27403f34ccff1fb4be", "filename": "tests/fail/zst2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fzst2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fzst2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fzst2.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Some optimizations remove ZST accesses, thus masking this UB.\n-// compile-flags: -Zmir-opt-level=0\n+//@compile-flags: -Zmir-opt-level=0\n \n fn main() {\n     // Not using the () type here, as writes of that type do not even have MIR generated."}, {"sha": "47a7c0d3c2a4b16def5d6398b71fc62b6d19bef2", "filename": "tests/fail/zst3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fzst3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Ffail%2Fzst3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ffail%2Fzst3.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Some optimizations remove ZST accesses, thus masking this UB.\n-// compile-flags: -Zmir-opt-level=0\n+//@compile-flags: -Zmir-opt-level=0\n \n fn main() {\n     // Not using the () type here, as writes of that type do not even have MIR generated."}, {"sha": "dbddf41fdbf71b96375a5102bd376804e4577dea", "filename": "tests/panic/panic/panic1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpanic%2Fpanic%2Fpanic1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpanic%2Fpanic%2Fpanic1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpanic%2Fpanic%2Fpanic1.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// rustc-env: RUST_BACKTRACE=1\n-// compile-flags: -Zmiri-disable-isolation\n+//@rustc-env: RUST_BACKTRACE=1\n+//@compile-flags: -Zmiri-disable-isolation\n \n fn main() {\n     std::panic!(\"panicking from libstd\");"}, {"sha": "a78646528fb125b810f7c7893dd140c1a62d9949", "filename": "tests/panic/panic/unsupported_foreign_function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpanic%2Fpanic%2Funsupported_foreign_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpanic%2Fpanic%2Funsupported_foreign_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpanic%2Fpanic%2Funsupported_foreign_function.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-panic-on-unsupported\n+//@compile-flags: -Zmiri-panic-on-unsupported\n \n fn main() {\n     extern \"Rust\" {"}, {"sha": "3338c46c04efcd2e09edfec41d7a49fcb07e54bd", "filename": "tests/panic/panic/unsupported_syscall.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpanic%2Fpanic%2Funsupported_syscall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpanic%2Fpanic%2Funsupported_syscall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpanic%2Fpanic%2Funsupported_syscall.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n-// ignore-windows: No libc on Windows\n-// ignore-apple: `syscall` is not supported on macOS\n-// compile-flags: -Zmiri-panic-on-unsupported\n+//@ignore-windows: No libc on Windows\n+//@ignore-apple: `syscall` is not supported on macOS\n+//@compile-flags: -Zmiri-panic-on-unsupported\n #![feature(rustc_private)]\n \n extern crate libc;"}, {"sha": "19e19b47cfed360027c3da4c418ecac2004eee3a", "filename": "tests/pass/0weak_memory_consistency.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2F0weak_memory_consistency.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2F0weak_memory_consistency.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2F0weak_memory_consistency.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-ignore-leaks -Zmiri-disable-stacked-borrows\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-ignore-leaks -Zmiri-disable-stacked-borrows\n \n // The following tests check whether our weak memory emulation produces\n // any inconsistent execution outcomes"}, {"sha": "0051c62121cd539e68ae1bacf64076e815d3cc5c", "filename": "tests/pass/adjacent-allocs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fadjacent-allocs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fadjacent-allocs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fadjacent-allocs.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n \n fn ensure_allocs_can_be_adjacent() {\n     for _ in 0..512 {"}, {"sha": "997abd7339226c3f849e08717c2c83639ff8d842", "filename": "tests/pass/align.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Falign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Falign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Falign.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n \n /// This manually makes sure that we have a pointer with the proper alignment.\n fn manual_alignment() {"}, {"sha": "b3e5733836390731d1b2dba5e5a312fca190dd0f", "filename": "tests/pass/align_offset_symbolic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Falign_offset_symbolic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Falign_offset_symbolic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Falign_offset_symbolic.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-symbolic-alignment-check\n+//@compile-flags: -Zmiri-symbolic-alignment-check\n \n fn test_align_offset() {\n     let d = Box::new([0u32; 4]);"}, {"sha": "8d3d71869f42ec953d75cca2d6ce5048c92fb838", "filename": "tests/pass/atomic-compare-exchange-weak-never-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fatomic-compare-exchange-weak-never-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fatomic-compare-exchange-weak-never-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fatomic-compare-exchange-weak-never-fail.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-compare-exchange-weak-failure-rate=0.0\n+//@compile-flags: -Zmiri-compare-exchange-weak-failure-rate=0.0\n use std::sync::atomic::{AtomicBool, Ordering::*};\n \n // Ensure that compare_exchange_weak never fails."}, {"sha": "9b82e006fa162d2f0a9becc2e198b8fa61b422d5", "filename": "tests/pass/atomic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fatomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fatomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fatomic.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-strict-provenance\n+//@compile-flags: -Zmiri-strict-provenance\n #![feature(strict_provenance, strict_provenance_atomic_ptr)]\n use std::sync::atomic::{\n     compiler_fence, fence, AtomicBool, AtomicIsize, AtomicPtr, AtomicU64, Ordering::*,"}, {"sha": "5cd12959ca40e5d057a5bcfcc509077ca7994da9", "filename": "tests/pass/backtrace/backtrace-api-v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fbacktrace%2Fbacktrace-api-v0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fbacktrace%2Fbacktrace-api-v0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fbacktrace%2Fbacktrace-api-v0.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// normalize-stderr-test: \"::<.*>\" -> \"\"\n+//@normalize-stderr-test: \"::<.*>\" -> \"\"\n \n #[inline(never)]\n fn func_a() -> Box<[*mut ()]> {"}, {"sha": "1e35574b39b6ccf2500e73ad3ac3613777ae6aab", "filename": "tests/pass/backtrace/backtrace-api-v1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fbacktrace%2Fbacktrace-api-v1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fbacktrace%2Fbacktrace-api-v1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fbacktrace%2Fbacktrace-api-v1.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// normalize-stderr-test: \"::<.*>\" -> \"\"\n+//@normalize-stderr-test: \"::<.*>\" -> \"\"\n \n #[inline(never)]\n fn func_a() -> Box<[*mut ()]> {"}, {"sha": "45d6535bc139a05ae177089049bc654b75743974", "filename": "tests/pass/backtrace/backtrace-global-alloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fbacktrace%2Fbacktrace-global-alloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fbacktrace%2Fbacktrace-global-alloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fbacktrace%2Fbacktrace-global-alloc.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-disable-isolation\n+//@compile-flags: -Zmiri-disable-isolation\n \n #![feature(backtrace)]\n "}, {"sha": "488b87ede8fc9afa8ccaa8504b494ef7c7ad8ab9", "filename": "tests/pass/backtrace/backtrace-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fbacktrace%2Fbacktrace-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fbacktrace%2Fbacktrace-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fbacktrace%2Fbacktrace-std.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-disable-isolation\n+//@compile-flags: -Zmiri-disable-isolation\n \n #![feature(backtrace)]\n "}, {"sha": "040c648d4747b4b1d197e1d6c931a08aae02d55a", "filename": "tests/pass/btreemap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fbtreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fbtreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fbtreemap.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-strict-provenance\n+//@compile-flags: -Zmiri-strict-provenance\n #![feature(btree_drain_filter)]\n use std::collections::{BTreeMap, BTreeSet};\n use std::mem;"}, {"sha": "a75bb0606118ada18b68ad657be18f263107ff19", "filename": "tests/pass/calloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fcalloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fcalloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fcalloc.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "e94c69b286d60d35b02d3957fe045a42a5e2e36c", "filename": "tests/pass/concurrency/channels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fchannels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fchannels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Fchannels.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-strict-provenance\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-strict-provenance\n \n use std::sync::mpsc::{channel, sync_channel};\n use std::thread;"}, {"sha": "6bd601abd56e9f8b80899a0dd29b3eeba1c2eb10", "filename": "tests/pass/concurrency/concurrent_caller_location.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fconcurrent_caller_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fconcurrent_caller_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Fconcurrent_caller_location.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n \n use std::panic::Location;\n use std::thread::spawn;"}, {"sha": "69b6c53a2b792d472bd7546b976711b0a0838f6e", "filename": "tests/pass/concurrency/data_race.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fdata_race.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fdata_race.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Fdata_race.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-weak-memory-emulation\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-disable-weak-memory-emulation\n \n use std::sync::atomic::{fence, AtomicUsize, Ordering};\n use std::thread::spawn;"}, {"sha": "a3c1e4621a3ac7259865b48addcbc25e44cd48e8", "filename": "tests/pass/concurrency/disable_data_race_detector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fdisable_data_race_detector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fdisable_data_race_detector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Fdisable_data_race_detector.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-data-race-detector\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-disable-data-race-detector\n \n use std::thread::spawn;\n "}, {"sha": "cfe9cf4cc2f7883f6c977e9b95af6da86b12b7a6", "filename": "tests/pass/concurrency/issue1643.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fissue1643.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fissue1643.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Fissue1643.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n \n use std::thread::spawn;\n "}, {"sha": "8d245e2f8ddd87fd65444766b646813a7bab0c48", "filename": "tests/pass/concurrency/libc_pthread_cond.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Flibc_pthread_cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Flibc_pthread_cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Flibc_pthread_cond.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n-// ignore-windows: No libc on Windows\n-// ignore-apple: pthread_condattr_setclock is not supported on MacOS.\n-// compile-flags: -Zmiri-disable-isolation\n+//@ignore-windows: No libc on Windows\n+//@ignore-apple: pthread_condattr_setclock is not supported on MacOS.\n+//@compile-flags: -Zmiri-disable-isolation\n \n #![feature(rustc_private)]\n "}, {"sha": "1ec0ec599f7b0569028a28d22cd7a0e16233317a", "filename": "tests/pass/concurrency/linux-futex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Flinux-futex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Flinux-futex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Flinux-futex.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// only-linux\n-// compile-flags: -Zmiri-disable-isolation\n+//@only-linux\n+//@compile-flags: -Zmiri-disable-isolation\n \n #![feature(rustc_private)]\n extern crate libc;"}, {"sha": "3ac0c9336b7b15c4abbafc50460eabb23fb10c5f", "filename": "tests/pass/concurrency/mutex_leak.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fmutex_leak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fmutex_leak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Fmutex_leak.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-ignore-leaks\n+//@compile-flags: -Zmiri-ignore-leaks\n use std::mem;\n use std::sync::Mutex;\n "}, {"sha": "ac268dab5e94b1897fde59fd1a5f32517fb58a56", "filename": "tests/pass/concurrency/simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Fsimple.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-strict-provenance\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-strict-provenance\n \n use std::thread;\n "}, {"sha": "e1c472589904d9ba9967adc9b76628f08c3aedb8", "filename": "tests/pass/concurrency/spin_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fspin_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fspin_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Fspin_loop.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::thread;\n "}, {"sha": "823d2ec76540cbf92c8cebd7b5c638433a397c3a", "filename": "tests/pass/concurrency/spin_loops_nopreempt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fspin_loops_nopreempt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fspin_loops_nopreempt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Fspin_loops_nopreempt.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n // This specifically tests behavior *without* preemption.\n-// compile-flags: -Zmiri-preemption-rate=0\n+//@compile-flags: -Zmiri-preemption-rate=0\n \n use std::cell::Cell;\n use std::sync::atomic::{AtomicBool, AtomicUsize, Ordering};"}, {"sha": "b7e6f229faae28de24cd6ff71f614a0e3bcc569b", "filename": "tests/pass/concurrency/sync.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Fsync.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-disable-isolation -Zmiri-strict-provenance\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-disable-isolation -Zmiri-strict-provenance\n \n use std::sync::{Arc, Barrier, Condvar, Mutex, Once, RwLock};\n use std::thread;"}, {"sha": "e6ee4fe594f10195f1fa162f152ce00307c66baf", "filename": "tests/pass/concurrency/sync_nopreempt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fsync_nopreempt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fsync_nopreempt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Fsync_nopreempt.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n // We are making scheduler assumptions here.\n-// compile-flags: -Zmiri-strict-provenance -Zmiri-preemption-rate=0\n+//@compile-flags: -Zmiri-strict-provenance -Zmiri-preemption-rate=0\n \n use std::sync::{Arc, Condvar, Mutex, RwLock};\n use std::thread;"}, {"sha": "82ce61d958d8905474e96409e11b78232ba05b4b", "filename": "tests/pass/concurrency/thread_locals.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fthread_locals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Fthread_locals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Fthread_locals.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-strict-provenance\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-strict-provenance\n \n //! The main purpose of this test is to check that if we take a pointer to\n //! thread's `t1` thread-local `A` and send it to another thread `t2`,"}, {"sha": "74ba8ee762071c71eb4612f36e2ab9151e62f54b", "filename": "tests/pass/concurrency/tls_lib_drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Ftls_lib_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Ftls_lib_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Ftls_lib_drop.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n \n use std::cell::RefCell;\n use std::thread;"}, {"sha": "b265e7da0b259b836aae9248eed1633b868a2f1c", "filename": "tests/pass/concurrency/tls_pthread_drop_order.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Ftls_pthread_drop_order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fconcurrency%2Ftls_pthread_drop_order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fconcurrency%2Ftls_pthread_drop_order.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n extern crate libc;"}, {"sha": "069b462ab371aa148ef3fe76aaa129bc6d2df69f", "filename": "tests/pass/current_dir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fcurrent_dir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fcurrent_dir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fcurrent_dir.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-disable-isolation\n+//@compile-flags: -Zmiri-disable-isolation\n use std::env;\n use std::io::ErrorKind;\n "}, {"sha": "9dbcfeae2d644d2642e819cc8b4071da6eff9165", "filename": "tests/pass/current_dir_with_isolation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fcurrent_dir_with_isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fcurrent_dir_with_isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fcurrent_dir_with_isolation.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n-// compile-flags: -Zmiri-isolation-error=warn-nobacktrace\n-// normalize-stderr-test: \"(getcwd|GetCurrentDirectoryW)\" -> \"$$GETCWD\"\n-// normalize-stderr-test: \"(chdir|SetCurrentDirectoryW)\" -> \"$$SETCWD\"\n+//@compile-flags: -Zmiri-isolation-error=warn-nobacktrace\n+//@normalize-stderr-test: \"(getcwd|GetCurrentDirectoryW)\" -> \"$$GETCWD\"\n+//@normalize-stderr-test: \"(chdir|SetCurrentDirectoryW)\" -> \"$$SETCWD\"\n \n use std::env;\n use std::io::ErrorKind;"}, {"sha": "366aff4a9f8ecf3f9cc6cc3d8f9ec23adfb81be2", "filename": "tests/pass/disable-alignment-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fdisable-alignment-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fdisable-alignment-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fdisable-alignment-check.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-disable-alignment-check\n+//@compile-flags: -Zmiri-disable-alignment-check\n \n fn main() {\n     let mut x = [0u8; 20];"}, {"sha": "4a3820777cff7a543697b46c4b9c4a52cac9f899", "filename": "tests/pass/enum_discriminant_ptr_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fenum_discriminant_ptr_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fenum_discriminant_ptr_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fenum_discriminant_ptr_value.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n // A niche-optimized enum where the discriminant is a pointer value -- relies on ptr-to-int casts in\n // the niche handling code.\n-// compile-flags: -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-stacked-borrows -Zmiri-disable-validation\n \n fn main() {\n     let x = 42;"}, {"sha": "14ad827463a4ea3ddddd0fd7c3e0e458d8a8b4b2", "filename": "tests/pass/env-exclude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fenv-exclude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fenv-exclude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fenv-exclude.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-disable-isolation -Zmiri-env-exclude=MIRI_ENV_VAR_TEST\n+//@compile-flags: -Zmiri-disable-isolation -Zmiri-env-exclude=MIRI_ENV_VAR_TEST\n \n fn main() {\n     assert!(std::env::var(\"MIRI_ENV_VAR_TEST\").is_err());"}, {"sha": "da7730b00f089bacabda0c2977ac58fe0c541c60", "filename": "tests/pass/env-forward.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fenv-forward.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fenv-forward.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fenv-forward.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-env-forward=MIRI_ENV_VAR_TEST\n+//@compile-flags: -Zmiri-env-forward=MIRI_ENV_VAR_TEST\n \n fn main() {\n     assert_eq!(std::env::var(\"MIRI_ENV_VAR_TEST\"), Ok(\"0\".to_owned()));"}, {"sha": "3d7461eecfe88b3e4e3ab779ed66e961d1243a1d", "filename": "tests/pass/env-without-isolation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fenv-without-isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fenv-without-isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fenv-without-isolation.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-disable-isolation\n+//@compile-flags: -Zmiri-disable-isolation\n \n fn main() {\n     assert_eq!(std::env::var(\"MIRI_ENV_VAR_TEST\"), Ok(\"0\".to_owned()));"}, {"sha": "ced7831568e7b3e7a79119067399929e5e51a5b7", "filename": "tests/pass/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Ffs.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: File handling is not implemented yet\n-// compile-flags: -Zmiri-disable-isolation\n+//@ignore-windows: File handling is not implemented yet\n+//@compile-flags: -Zmiri-disable-isolation\n \n #![feature(rustc_private)]\n #![feature(io_error_more)]"}, {"sha": "719882702cdd2559d97968ad0813b10877aec929", "filename": "tests/pass/fs_with_isolation.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Ffs_with_isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Ffs_with_isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Ffs_with_isolation.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n-// ignore-windows: File handling is not implemented yet\n-// compile-flags: -Zmiri-isolation-error=warn-nobacktrace\n-// normalize-stderr-test: \"(stat(x)?)\" -> \"$$STAT\"\n+//@ignore-windows: File handling is not implemented yet\n+//@compile-flags: -Zmiri-isolation-error=warn-nobacktrace\n+//@normalize-stderr-test: \"(stat(x)?)\" -> \"$$STAT\"\n \n #![feature(rustc_private)]\n "}, {"sha": "e6251b53558869e57f1205ade68213c49794e7b2", "filename": "tests/pass/function_calls/disable_abi_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Ffunction_calls%2Fdisable_abi_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Ffunction_calls%2Fdisable_abi_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Ffunction_calls%2Fdisable_abi_check.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-disable-abi-check\n+//@compile-flags: -Zmiri-disable-abi-check\n #![feature(core_intrinsics)]\n \n fn main() {"}, {"sha": "733545462ebc019a0ceb4ab154d4fe4f1f35f36f", "filename": "tests/pass/getpid.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fgetpid.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fgetpid.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fgetpid.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-disable-isolation\n+//@compile-flags: -Zmiri-disable-isolation\n \n fn getpid() -> u32 {\n     std::process::id()"}, {"sha": "cfd05a8396cb51869c8d607d67eff6bb980b03ae", "filename": "tests/pass/hide_stdout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fhide_stdout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fhide_stdout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fhide_stdout.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-mute-stdout-stderr\n+//@compile-flags: -Zmiri-mute-stdout-stderr\n \n fn main() {\n     println!(\"print to stdout\");"}, {"sha": "8608d12d4d8728156ad75595a1d48765b6161d2e", "filename": "tests/pass/integer-ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Finteger-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Finteger-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Finteger-ops.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Coverflow-checks=off\n+//@compile-flags: -Coverflow-checks=off\n #![feature(int_log)]\n #![allow(arithmetic_overflow)]\n "}, {"sha": "e7ff90cb6bf098c2aa5c16b495e3afe14ebd3fc4", "filename": "tests/pass/intptrcast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fintptrcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fintptrcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fintptrcast.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n \n use std::mem;\n "}, {"sha": "756744badaf9cc1ea3a13479c48f6f94df3149e1", "filename": "tests/pass/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fintrinsics.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n #![feature(core_intrinsics, const_raw_ptr_comparison)]\n #![feature(layout_for_ptr)]\n "}, {"sha": "8655681349194f287fffd783c9154156a5edaba3", "filename": "tests/pass/issues/issue-miri-1925.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fissues%2Fissue-miri-1925.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fissues%2Fissue-miri-1925.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fissues%2Fissue-miri-1925.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-symbolic-alignment-check\n+//@compile-flags: -Zmiri-symbolic-alignment-check\n \n use std::mem::size_of;\n "}, {"sha": "f33806e8b4433edc70791dd42a009cd4a1d67764", "filename": "tests/pass/issues/issue-miri-2068-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fissues%2Fissue-miri-2068-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fissues%2Fissue-miri-2068-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fissues%2Fissue-miri-2068-2.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-validation\n \n use std::mem::MaybeUninit;\n "}, {"sha": "53c85d2b07d1a8bed94eaac286a138ca8c51e926", "filename": "tests/pass/libc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flibc.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: No libc on Windows\n-// compile-flags: -Zmiri-disable-isolation\n+//@ignore-windows: No libc on Windows\n+//@compile-flags: -Zmiri-disable-isolation\n \n #![feature(rustc_private)]\n "}, {"sha": "90e054533c14dee345350562c9c1df6636dfbb1b", "filename": "tests/pass/linux-getrandom-without-isolation.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Flinux-getrandom-without-isolation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Flinux-getrandom-without-isolation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flinux-getrandom-without-isolation.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// only-linux\n-// compile-flags: -Zmiri-disable-isolation\n+//@only-linux\n+//@compile-flags: -Zmiri-disable-isolation\n #![feature(rustc_private)]\n extern crate libc;\n "}, {"sha": "70c106f6460aaf0c85977bfedd9e9f7000e08b61", "filename": "tests/pass/linux-getrandom.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Flinux-getrandom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Flinux-getrandom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Flinux-getrandom.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// only-linux\n+//@only-linux\n #![feature(rustc_private)]\n extern crate libc;\n "}, {"sha": "c0a6a89fbed0cacad031a3c445e79457582120a4", "filename": "tests/pass/malloc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fmalloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fmalloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fmalloc.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// ignore-windows: No libc on Windows\n+//@ignore-windows: No libc on Windows\n \n #![feature(rustc_private)]\n "}, {"sha": "60e06094e17710a69ab85a3e755744add904512e", "filename": "tests/pass/memleak_ignored.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fmemleak_ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fmemleak_ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fmemleak_ignored.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-ignore-leaks\n+//@compile-flags: -Zmiri-ignore-leaks\n \n fn main() {\n     std::mem::forget(Box::new(42));"}, {"sha": "220470b637fcba918f6e414894771d1b262657e0", "filename": "tests/pass/move-uninit-primval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fmove-uninit-primval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fmove-uninit-primval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fmove-uninit-primval.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-allow-uninit-numbers\n+//@compile-flags: -Zmiri-allow-uninit-numbers\n #![allow(deprecated)]\n \n struct Foo {"}, {"sha": "d8a462daf5a948fc6b63f7061efcce98b0311703", "filename": "tests/pass/no_std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fno_std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fno_std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fno_std.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -3,7 +3,7 @@\n // windows tls dtors go through libstd right now, thus this test\n // cannot pass. When windows tls dtors go through the special magic\n // windows linker section, we can run this test on windows again.\n-// ignore-windows\n+//@ignore-windows\n \n #[start]\n fn start(_: isize, _: *const *const u8) -> isize {"}, {"sha": "ca0f569860b8272ea2ebb965e76f2e197bac9863", "filename": "tests/pass/observed_local_mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fobserved_local_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fobserved_local_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fobserved_local_mut.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Stacked Borrows catches this (correctly) as UB.\n-// compile-flags: -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-stacked-borrows\n \n // This test is intended to guard against the problem described in commit\n // 39bb1254d1eaf74f45a4e741097e33fc942168d5."}, {"sha": "79aa510ef97fe656ced1f84c3b8d52e2f1fea91d", "filename": "tests/pass/overflow_checks_off.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Foverflow_checks_off.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Foverflow_checks_off.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Foverflow_checks_off.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -C overflow-checks=off\n+//@compile-flags: -C overflow-checks=off\n \n // Check that we correctly implement the intended behavior of these operators\n // when they are not being overflow-checked."}, {"sha": "308904406538c1a510ab4cf52155897b8bae2485", "filename": "tests/pass/panic/catch_panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fpanic%2Fcatch_panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fpanic%2Fcatch_panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fpanic%2Fcatch_panic.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // We test the `align_offset` panic below, make sure we test the interpreter impl and not the \"real\" one.\n-// compile-flags: -Zmiri-symbolic-alignment-check -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-symbolic-alignment-check -Zmiri-permissive-provenance\n #![feature(never_type)]\n #![allow(unconditional_panic, non_fmt_panics)]\n "}, {"sha": "1231760865fb05b318708c34b29f265533b9477e", "filename": "tests/pass/panic/concurrent-panic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fpanic%2Fconcurrent-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fpanic%2Fconcurrent-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fpanic%2Fconcurrent-panic.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n // We are making scheduler assumptions here.\n-// compile-flags: -Zmiri-preemption-rate=0\n+//@compile-flags: -Zmiri-preemption-rate=0\n \n //! Cause a panic in one thread while another thread is unwinding. This checks\n //! that separate threads have their own panicking state."}, {"sha": "0dfe617bd8dc94fed12ea29ea1c73bf8abba9d33", "filename": "tests/pass/portable-simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fportable-simd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fportable-simd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fportable-simd.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-strict-provenance\n+//@compile-flags: -Zmiri-strict-provenance\n #![feature(portable_simd, platform_intrinsics)]\n use std::simd::*;\n "}, {"sha": "3044ac092b7d48a8d395147b7910e9c83a4a7b20", "filename": "tests/pass/ptr_int_casts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fptr_int_casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fptr_int_casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fptr_int_casts.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n use std::mem;\n use std::ptr;\n "}, {"sha": "ef7ff34d26b232a38feec05eca6d25316138008e", "filename": "tests/pass/ptr_int_from_exposed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fptr_int_from_exposed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fptr_int_from_exposed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fptr_int_from_exposed.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n #![feature(strict_provenance)]\n \n use std::ptr;"}, {"sha": "5270e8663b2d711f1b7149e034a0bfa86f2b9fbb", "filename": "tests/pass/ptr_offset.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fptr_offset.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n use std::{mem, ptr};\n \n fn main() {"}, {"sha": "569dbc459a5b5d885b6767b13455b68442965a1d", "filename": "tests/pass/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Frc.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-strict-provenance\n+//@compile-flags: -Zmiri-strict-provenance\n #![feature(new_uninit)]\n #![feature(get_mut_unchecked)]\n "}, {"sha": "a56b97a5088faf2500d34d89b39ebd7b741871c9", "filename": "tests/pass/slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fslices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fslices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fslices.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-strict-provenance\n+//@compile-flags: -Zmiri-strict-provenance\n #![feature(new_uninit)]\n #![feature(slice_as_chunks)]\n #![feature(slice_partition_dedup)]"}, {"sha": "c3e30627a7ce35b85bfd270cc2c0ddd7fcce1b82", "filename": "tests/pass/stacked-borrows/int-to-ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fstacked-borrows%2Fint-to-ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fstacked-borrows%2Fint-to-ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fstacked-borrows%2Fint-to-ptr.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n #![feature(strict_provenance)]\n use std::ptr;\n "}, {"sha": "c6373a7eaf135f4b73f379420fb446017580be34", "filename": "tests/pass/stacked-borrows/interior_mutability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fstacked-borrows%2Finterior_mutability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fstacked-borrows%2Finterior_mutability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fstacked-borrows%2Finterior_mutability.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-retag-fields\n+//@compile-flags: -Zmiri-retag-fields\n use std::cell::{Cell, Ref, RefCell, RefMut, UnsafeCell};\n use std::mem::{self, MaybeUninit};\n "}, {"sha": "ef6eb346c17b12804cb9c92dd5caaa424d35dbec", "filename": "tests/pass/stacked-borrows/stacked-borrows.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fstacked-borrows%2Fstacked-borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fstacked-borrows%2Fstacked-borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fstacked-borrows%2Fstacked-borrows.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-retag-fields\n+//@compile-flags: -Zmiri-retag-fields\n #![feature(allocator_api)]\n use std::ptr;\n "}, {"sha": "5e2d2e9b5b5c1f43c1b5ca386f366d7070d47f09", "filename": "tests/pass/strings.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fstrings.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-strict-provenance\n+//@compile-flags: -Zmiri-strict-provenance\n \n fn empty() -> &'static str {\n     \"\""}, {"sha": "2ba0b453ff39416401b66f9b8ff3fc52242298cf", "filename": "tests/pass/threadleak_ignored.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fthreadleak_ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fthreadleak_ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fthreadleak_ignored.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n // FIXME: disallow preemption to work around https://github.com/rust-lang/rust/issues/55005\n-// compile-flags: -Zmiri-ignore-leaks -Zmiri-preemption-rate=0\n+//@compile-flags: -Zmiri-ignore-leaks -Zmiri-preemption-rate=0\n \n //! Test that leaking threads works, and that their destructors are not executed.\n "}, {"sha": "e1094006fb1fab02c62d4774a1a9ae54c24a0030", "filename": "tests/pass/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Ftime.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-disable-isolation\n+//@compile-flags: -Zmiri-disable-isolation\n \n use std::time::{Duration, Instant, SystemTime};\n "}, {"sha": "427c800dc51d2021cf38b26813b6a183d7e20208", "filename": "tests/pass/track-alloc-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Ftrack-alloc-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Ftrack-alloc-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Ftrack-alloc-1.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,6 +1,6 @@\n // Ensure that tracking early allocations doesn't ICE Miri.\n // Early allocations are probably part of the runtime and therefore uninteresting, but they\n // shouldn't cause a crash.\n-// compile-flags: -Zmiri-track-alloc-id=1\n-// normalize-stderr-test: \"[48] bytes\" -> \"SIZE bytes\"\n+//@compile-flags: -Zmiri-track-alloc-id=1\n+//@normalize-stderr-test: \"[48] bytes\" -> \"SIZE bytes\"\n fn main() {}"}, {"sha": "dfd78ace520c51b0e743ca139fcc713fe43ef74e", "filename": "tests/pass/transmute_fat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Ftransmute_fat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Ftransmute_fat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Ftransmute_fat.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // Stacked Borrows disallows this becuase the reference is never cast to a raw pointer.\n-// compile-flags: -Zmiri-disable-stacked-borrows\n+//@compile-flags: -Zmiri-disable-stacked-borrows\n \n fn main() {\n     // If we are careful, we can exploit data layout..."}, {"sha": "44f6fa2679853e9e851cc8ed44b40fb25945fc06", "filename": "tests/pass/uninit_number_ignored.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Funinit_number_ignored.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Funinit_number_ignored.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Funinit_number_ignored.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-allow-uninit-numbers\n+//@compile-flags: -Zmiri-allow-uninit-numbers\n // This test is adapted from https://github.com/rust-lang/miri/issues/1340#issue-600900312.\n \n fn main() {"}, {"sha": "26732cec5eb9afe61d4b248a60d4c589e39ef853", "filename": "tests/pass/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fvec.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-strict-provenance\n+//@compile-flags: -Zmiri-strict-provenance\n // Gather all references from a mutable iterator and make sure Miri notices if\n // using them is dangerous.\n fn test_all_refs<'a, T: 'a>(dummy: &mut T, iter: impl Iterator<Item = &'a mut T>) {"}, {"sha": "6f56f9d103e9d04e65131ec9fbd7c572771594bd", "filename": "tests/pass/vecdeque.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fvecdeque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fvecdeque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fvecdeque.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-strict-provenance\n+//@compile-flags: -Zmiri-strict-provenance\n use std::collections::VecDeque;\n \n fn test_all_refs<'a, T: 'a>(dummy: &mut T, iter: impl Iterator<Item = &'a mut T>) {"}, {"sha": "61ba1ab922489271338d62e3f48b4b4f84e9ba67", "filename": "tests/pass/weak_memory/extra_cpp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fweak_memory%2Fextra_cpp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fweak_memory%2Fextra_cpp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fweak_memory%2Fextra_cpp.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-ignore-leaks\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-ignore-leaks\n \n // Tests operations not perfomable through C++'s atomic API\n // but doable in safe (at least sound) Rust."}, {"sha": "0aff70ab7b7862a2c6f4852c182d8b4e457403f8", "filename": "tests/pass/weak_memory/extra_cpp_unsafe.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fweak_memory%2Fextra_cpp_unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fweak_memory%2Fextra_cpp_unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fweak_memory%2Fextra_cpp_unsafe.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-ignore-leaks\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-ignore-leaks\n \n // Tests operations not perfomable through C++'s atomic API\n // but doable in unsafe Rust which we think *should* be fine."}, {"sha": "1d82b85844f418672fee1b0701b485c6412fc1c5", "filename": "tests/pass/weak_memory/weak.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fweak_memory%2Fweak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fweak_memory%2Fweak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fweak_memory%2Fweak.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n-// ignore-windows: Concurrency on Windows is not supported yet.\n-// compile-flags: -Zmiri-ignore-leaks -Zmiri-preemption-rate=0\n+//@ignore-windows: Concurrency on Windows is not supported yet.\n+//@compile-flags: -Zmiri-ignore-leaks -Zmiri-preemption-rate=0\n \n // Tests showing weak memory behaviours are exhibited. All tests\n // return true when the desired behaviour is seen."}, {"sha": "934c44a7deb4dccc1a12c624d7c4292382f6f50f", "filename": "tests/pass/without-validation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fwithout-validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fwithout-validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fwithout-validation.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,5 +1,5 @@\n // When we notice something breaks only without validation, we add a test here.\n-// compile-flags: -Zmiri-disable-validation\n+//@compile-flags: -Zmiri-disable-validation\n use std::cell::*;\n \n fn refcell_unsize() {"}, {"sha": "bf23f65c7f0c7fa73050c355a47709ef4d1e523a", "filename": "tests/pass/wtf8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fwtf8.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// only-windows\n+//@only-windows\n \n use std::ffi::{OsStr, OsString};\n use std::os::windows::ffi::{OsStrExt, OsStringExt};"}, {"sha": "a56386a691f8dfb3c39908c74977c45703b64d19", "filename": "tests/pass/zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fzst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/tests%2Fpass%2Fzst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fpass%2Fzst.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: -Zmiri-permissive-provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n #[derive(PartialEq, Debug)]\n struct A;\n "}, {"sha": "2065cc34bef85ea7ab4daf6d9a146a687c3732ee", "filename": "ui_test/Cargo.lock", "status": "modified", "additions": 194, "deletions": 0, "changes": 194, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/ui_test%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/ui_test%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2FCargo.lock?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -2,6 +2,21 @@\n # It is not intended for manual editing.\n version = 3\n \n+[[package]]\n+name = \"addr2line\"\n+version = \"0.17.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b9ecd88a8c8378ca913a680cd98f0f13ac67383d35993f86c90a70e3f137816b\"\n+dependencies = [\n+ \"gimli\",\n+]\n+\n+[[package]]\n+name = \"adler\"\n+version = \"1.0.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f26201604c87b1e01bd3d98f8d5d9a8fcbb815e8cedb41ffccbeb4bf593a35fe\"\n+\n [[package]]\n name = \"aho-corasick\"\n version = \"0.7.18\"\n@@ -37,12 +52,60 @@ version = \"1.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n \n+[[package]]\n+name = \"backtrace\"\n+version = \"0.3.65\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"11a17d453482a265fd5f8479f2a3f405566e6ca627837aaddb85af8b1ab8ef61\"\n+dependencies = [\n+ \"addr2line\",\n+ \"cc\",\n+ \"cfg-if\",\n+ \"libc\",\n+ \"miniz_oxide\",\n+ \"object\",\n+ \"rustc-demangle\",\n+]\n+\n+[[package]]\n+name = \"cc\"\n+version = \"1.0.73\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2fff2a6927b3bb87f9595d67196a70493f627687a71d87a0d692242c33f58c11\"\n+\n [[package]]\n name = \"cfg-if\"\n version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n+[[package]]\n+name = \"color-eyre\"\n+version = \"0.6.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8ebf286c900a6d5867aeff75cfee3192857bb7f24b547d4f0df2ed6baa812c90\"\n+dependencies = [\n+ \"backtrace\",\n+ \"color-spantrace\",\n+ \"eyre\",\n+ \"indenter\",\n+ \"once_cell\",\n+ \"owo-colors\",\n+ \"tracing-error\",\n+]\n+\n+[[package]]\n+name = \"color-spantrace\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1ba75b3d9449ecdccb27ecbc479fdc0b87fa2dd43d2f8298f9bf0e59aacc8dce\"\n+dependencies = [\n+ \"once_cell\",\n+ \"owo-colors\",\n+ \"tracing-core\",\n+ \"tracing-error\",\n+]\n+\n [[package]]\n name = \"colored\"\n version = \"2.0.0\"\n@@ -139,6 +202,22 @@ version = \"0.1.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"0e25ea47919b1560c4e3b7fe0aaab9becf5b84a10325ddf7db0f0ba5e1026499\"\n \n+[[package]]\n+name = \"eyre\"\n+version = \"0.6.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4c2b6b5a29c02cdc822728b7d7b8ae1bab3e3b05d44522770ddd49722eeac7eb\"\n+dependencies = [\n+ \"indenter\",\n+ \"once_cell\",\n+]\n+\n+[[package]]\n+name = \"gimli\"\n+version = \"0.26.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"78cc372d058dcf6d5ecd98510e7fbc9e5aec4d21de70f65fea8fecebcd881bd4\"\n+\n [[package]]\n name = \"hermit-abi\"\n version = \"0.1.19\"\n@@ -148,6 +227,12 @@ dependencies = [\n  \"libc\",\n ]\n \n+[[package]]\n+name = \"indenter\"\n+version = \"0.3.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ce23b50ad8242c51a442f3ff322d56b02f08852c77e4c0b4d3fd684abc89c683\"\n+\n [[package]]\n name = \"itoa\"\n version = \"1.0.2\"\n@@ -181,6 +266,30 @@ dependencies = [\n  \"autocfg\",\n ]\n \n+[[package]]\n+name = \"miniz_oxide\"\n+version = \"0.5.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6f5c75688da582b8ffc1f1799e9db273f32133c49e048f614d22ec3256773ccc\"\n+dependencies = [\n+ \"adler\",\n+]\n+\n+[[package]]\n+name = \"object\"\n+version = \"0.28.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e42c982f2d955fac81dd7e1d0e1426a7d702acd9c98d19ab01083a6a0328c424\"\n+dependencies = [\n+ \"memchr\",\n+]\n+\n+[[package]]\n+name = \"once_cell\"\n+version = \"1.13.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"18a6dbe30758c9f83eb00cbea4ac95966305f5a7772f3f42ebfc7fc7eddbd8e1\"\n+\n [[package]]\n name = \"output_vt100\"\n version = \"0.1.3\"\n@@ -190,6 +299,18 @@ dependencies = [\n  \"winapi\",\n ]\n \n+[[package]]\n+name = \"owo-colors\"\n+version = \"3.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"decf7381921fea4dcb2549c5667eda59b3ec297ab7e2b5fc33eac69d2e7da87b\"\n+\n+[[package]]\n+name = \"pin-project-lite\"\n+version = \"0.2.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e0a7ae3ac2f1173085d398531c705756c94a4c56843785df85a60c1a0afac116\"\n+\n [[package]]\n name = \"pretty_assertions\"\n version = \"1.2.1\"\n@@ -237,6 +358,12 @@ version = \"0.6.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"49b3de9ec5dc0a3417da371aab17d729997c15010e7fd24ff707773a33bddb64\"\n \n+[[package]]\n+name = \"rustc-demangle\"\n+version = \"0.1.21\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7ef03e0a2b150c7a90d01faf6254c9c48a41e95fb2a8c2ac1c6f0d2b9aefc342\"\n+\n [[package]]\n name = \"rustc_version\"\n version = \"0.4.0\"\n@@ -295,6 +422,15 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"sharded-slab\"\n+version = \"0.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"900fba806f70c630b0a382d0d825e17a0f19fcd059a2ade1ff237bcddf446b31\"\n+dependencies = [\n+ \"lazy_static\",\n+]\n+\n [[package]]\n name = \"syn\"\n version = \"1.0.95\"\n@@ -306,10 +442,62 @@ dependencies = [\n  \"unicode-ident\",\n ]\n \n+[[package]]\n+name = \"thread_local\"\n+version = \"1.1.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5516c27b78311c50bf42c071425c560ac799b11c30b31f87e3081965fe5e0180\"\n+dependencies = [\n+ \"once_cell\",\n+]\n+\n+[[package]]\n+name = \"tracing\"\n+version = \"0.1.35\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a400e31aa60b9d44a52a8ee0343b5b18566b03a8321e0d321f695cf56e940160\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"pin-project-lite\",\n+ \"tracing-core\",\n+]\n+\n+[[package]]\n+name = \"tracing-core\"\n+version = \"0.1.28\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"7b7358be39f2f274f322d2aaed611acc57f382e8eb1e5b48cb9ae30933495ce7\"\n+dependencies = [\n+ \"once_cell\",\n+ \"valuable\",\n+]\n+\n+[[package]]\n+name = \"tracing-error\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d686ec1c0f384b1277f097b2f279a2ecc11afe8c133c1aabf036a27cb4cd206e\"\n+dependencies = [\n+ \"tracing\",\n+ \"tracing-subscriber\",\n+]\n+\n+[[package]]\n+name = \"tracing-subscriber\"\n+version = \"0.3.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"3a713421342a5a666b7577783721d3117f1b69a393df803ee17bb73b1e122a59\"\n+dependencies = [\n+ \"sharded-slab\",\n+ \"thread_local\",\n+ \"tracing-core\",\n+]\n+\n [[package]]\n name = \"ui_test\"\n version = \"0.1.0\"\n dependencies = [\n+ \"color-eyre\",\n  \"colored\",\n  \"crossbeam\",\n  \"lazy_static\",\n@@ -326,6 +514,12 @@ version = \"1.0.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"d22af068fba1eb5edcb4aea19d382b2a3deb4c8f9d475c589b6ada9e0fd493ee\"\n \n+[[package]]\n+name = \"valuable\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"830b7e5d4d90034032940e4ace0d9a9a057e7a45cd94e6c007832e39edb82f6d\"\n+\n [[package]]\n name = \"winapi\"\n version = \"0.3.9\""}, {"sha": "cdc5e5db472c181708cd50ffee65f3be63515c19", "filename": "ui_test/Cargo.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/ui_test%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/ui_test%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2FCargo.toml?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -17,3 +17,5 @@ crossbeam = \"0.8.1\"\n lazy_static = \"1.4.0\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n+color-eyre = { version = \"0.6.1\", default-features = false, features = [\"capture-spantrace\"] }\n+"}, {"sha": "fef2c6d44ba6af43667f063f7a6eb1574b3a90f7", "filename": "ui_test/README.md", "status": "modified", "additions": 25, "deletions": 15, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/ui_test%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/ui_test%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2FREADME.md?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -7,27 +7,37 @@ A smaller version of compiletest-rs\n \n ## Supported magic comment annotations\n \n-Note that the space after `//`, when it is present, is *not* optional -- it must be exactly one.\n+If your test tests for failure, you need to add a `//~` annotation where the error is happening\n+to make sure that the test will always keep failing with a specific message at the annotated line.\n \n-* `// ignore-XXX` avoids running the test on targets whose triple contains `XXX`\n+`//~ ERROR: XXX` make sure the stderr output contains `XXX` for an error in the line where this comment is written\n+\n+* Also supports `HELP`, `WARN` or `NOTE` for different kind of message\n+    * if one of those levels is specified explicitly, *all* diagnostics of this level or higher need an annotation. If you want to avoid this, just leave out the all caps level note entirely.\n+* If the all caps note is left out, a message of any level is matched. Leaving it out is not allowed for `ERROR` levels.\n+* This checks the output *before* normalization, so you can check things that get normalized away, but need to\n+    be careful not to accidentally have a pattern that differs between platforms.\n+\n+In order to change how a single test is tested, you can add various `//@` comments to the test.\n+Any other comments will be ignored, and all `//@` comments must be formatted precisely as\n+their command specifies, or the test will fail without even being run.\n+\n+* `//@ignore-XXX` avoids running the test on targets whose triple contains `XXX`\n     * `XXX` can also be one of `64bit`, `32bit` or `16bit`\n-* `// only-XXX` avoids running the test on targets whose triple **does not** contain `XXX`\n+* `//@only-XXX` avoids running the test on targets whose triple **does not** contain `XXX`\n     * `XXX` can also be one of `64bit`, `32bit` or `16bit`\n-* `// stderr-per-bitwidth` produces one stderr file per bitwidth, as they may differ significantly sometimes\n-* `// error-pattern: XXX` make sure the stderr output contains `XXX`\n-* `//~ ERROR: XXX` make sure the stderr output contains `XXX` for an error in the line where this comment is written\n-    * Also supports `HELP`, `WARN` or `NOTE` for different kind of message\n-        * if one of those levels is specified explicitly, *all* diagnostics of this level or higher need an annotation. If you want to avoid this, just leave out the all caps level note entirely.\n-    * If the all caps note is left out, a message of any level is matched. Leaving it out is not allowed for `ERROR` levels.\n-    * This checks the output *before* normalization, so you can check things that get normalized away, but need to\n-      be careful not to accidentally have a pattern that differs between platforms.\n-* `// revisions: XXX YYY` runs the test once for each space separated name in the list\n+* `//@stderr-per-bitwidth` produces one stderr file per bitwidth, as they may differ significantly sometimes\n+* `//@error-pattern: XXX` make sure the stderr output contains `XXX`\n+* `//@revisions: XXX YYY` runs the test once for each space separated name in the list\n     * emits one stderr file per revision\n     * `//~` comments can be restricted to specific revisions by adding the revision name before the `~` in square brackets: `//[XXX]~`\n-* `// compile-flags: XXX` appends `XXX` to the command line arguments passed to the rustc driver\n-* `// rustc-env: XXX=YYY` sets the env var `XXX` to `YYY` for the rustc driver execution.\n+* `//@compile-flags: XXX` appends `XXX` to the command line arguments passed to the rustc driver\n+    * you can specify this multiple times, and all the flags will accumulate\n+* `//@rustc-env: XXX=YYY` sets the env var `XXX` to `YYY` for the rustc driver execution.\n     * for Miri these env vars are used during compilation via rustc and during the emulation of the program\n-* `// normalize-stderr-test: \"REGEX\" -> \"REPLACEMENT\"` replaces all matches of `REGEX` in the stderr with `REPLACEMENT`. The replacement may specify `$1` and similar backreferences to paste captures.\n+    * you can specify this multiple times, accumulating all the env vars\n+* `//@normalize-stderr-test: \"REGEX\" -> \"REPLACEMENT\"` replaces all matches of `REGEX` in the stderr with `REPLACEMENT`. The replacement may specify `$1` and similar backreferences to paste captures.\n+    * you can specify multiple such commands, there is no need to create a single regex that handles multiple replacements that you want to perform.\n \n ## Significant differences to compiletest-rs\n "}, {"sha": "4046a9fc0ddf72695111c419f941763b5d0b2e63", "filename": "ui_test/src/comments.rs", "status": "modified", "additions": 194, "deletions": 85, "changes": 279, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/ui_test%2Fsrc%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/ui_test%2Fsrc%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Fcomments.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -4,6 +4,8 @@ use regex::Regex;\n \n use crate::rustc_stderr::Level;\n \n+use color_eyre::eyre::{bail, ensure, eyre, Result};\n+\n #[cfg(test)]\n mod tests;\n \n@@ -65,111 +67,218 @@ impl Condition {\n }\n \n impl Comments {\n-    pub(crate) fn parse_file(path: &Path) -> Self {\n-        let content = std::fs::read_to_string(path).unwrap();\n+    pub(crate) fn parse_file(path: &Path) -> Result<Self> {\n+        let content = std::fs::read_to_string(path)?;\n         Self::parse(path, &content)\n     }\n \n     /// Parse comments in `content`.\n     /// `path` is only used to emit diagnostics if parsing fails.\n-    pub(crate) fn parse(path: &Path, content: &str) -> Self {\n+    pub(crate) fn parse(path: &Path, content: &str) -> Result<Self> {\n         let mut this = Self::default();\n-        let error_pattern_regex =\n-            Regex::new(r\"//(\\[(?P<revision>[^\\]]+)\\])?~(?P<offset>\\||[\\^]+)? *(?P<level>ERROR|HELP|WARN|NOTE)?:?(?P<text>.*)\")\n-                .unwrap();\n \n-        // The line that a `|` will refer to\n-        let mut fallthrough_to = None;\n+        let mut fallthrough_to = None; // The line that a `|` will refer to.\n         for (l, line) in content.lines().enumerate() {\n             let l = l + 1; // enumerate starts at 0, but line numbers start at 1\n-            if let Some(revisions) = line.strip_prefix(\"// revisions:\") {\n-                assert_eq!(\n-                    this.revisions,\n-                    None,\n-                    \"{}:{l}, cannot specifiy revisions twice\",\n-                    path.display()\n-                );\n-                this.revisions =\n-                    Some(revisions.split_whitespace().map(|s| s.to_string()).collect());\n+            this.parse_checked_line(l, &mut fallthrough_to, line).map_err(|err| {\n+                err.wrap_err(format!(\"{}:{l}: failed to parse annotation\", path.display()))\n+            })?;\n+        }\n+        Ok(this)\n+    }\n+\n+    fn parse_checked_line(\n+        &mut self,\n+        l: usize,\n+        fallthrough_to: &mut Option<usize>,\n+        line: &str,\n+    ) -> Result<()> {\n+        if let Some((_, command)) = line.split_once(\"//@\") {\n+            self.parse_command(command.trim(), l)\n+        } else if let Some((_, pattern)) = line.split_once(\"//~\") {\n+            self.parse_pattern(pattern, fallthrough_to, l)\n+        } else if let Some((_, pattern)) = line.split_once(\"//[\") {\n+            self.parse_revisioned_pattern(pattern, fallthrough_to, l)\n+        } else {\n+            *fallthrough_to = None;\n+            Ok(())\n+        }\n+    }\n+\n+    fn parse_command(&mut self, command: &str, l: usize) -> Result<()> {\n+        // Commands are letters or dashes, grab everything until the first character that is neither of those.\n+        let (command, args) =\n+            match command.chars().position(|c: char| !c.is_alphanumeric() && c != '-') {\n+                None => (command, \"\"),\n+                Some(i) => {\n+                    let (command, args) = command.split_at(i);\n+                    let mut args = args.chars();\n+                    // Commands are separated from their arguments by ':' or ' '\n+                    let next = args\n+                        .next()\n+                        .expect(\"the `position` above guarantees that there is at least one char\");\n+                    // FIXME: this replicates the existing flexibility in our syntax. Consider requiring the colon.\n+                    let args = match next {\n+                        ':' | ' ' => args.as_str(),\n+                        _ => bail!(\"expected space or `:`, got `{next}`\"),\n+                    };\n+                    (command, args.trim())\n+                }\n+            };\n+\n+        match command {\n+            \"revisions\" => {\n+                ensure!(self.revisions.is_none(), \"cannot specifiy revisions twice\");\n+                self.revisions = Some(args.split_whitespace().map(|s| s.to_string()).collect());\n             }\n-            if let Some(s) = line.strip_prefix(\"// ignore-\") {\n-                let s = s\n-                    .split_once(|c: char| c == ':' || c.is_whitespace())\n-                    .map(|(s, _)| s)\n-                    .unwrap_or(s);\n-                this.ignore.push(Condition::parse(s));\n+            \"compile-flags\" => {\n+                self.compile_flags.extend(args.split_whitespace().map(|s| s.to_string()));\n             }\n-            if let Some(s) = line.strip_prefix(\"// only-\") {\n-                let s = s\n-                    .split_once(|c: char| c == ':' || c.is_whitespace())\n-                    .map(|(s, _)| s)\n-                    .unwrap_or(s);\n-                this.only.push(Condition::parse(s));\n+            \"rustc-env\" =>\n+                for env in args.split_whitespace() {\n+                    let (k, v) = env.split_once('=').ok_or_else(|| {\n+                        eyre!(\"environment variables must be key/value pairs separated by a `=`\")\n+                    })?;\n+                    self.env_vars.push((k.to_string(), v.to_string()));\n+                },\n+            \"normalize-stderr-test\" => {\n+                /// Parses a string literal. `s` has to start with `\"`; everything until the next `\"` is\n+                /// returned in the first component. `\\` can be used to escape arbitrary character.\n+                /// Second return component is the rest of the string with leading whitespace removed.\n+                fn parse_str(s: &str) -> Result<(&str, &str)> {\n+                    let mut chars = s.char_indices();\n+                    match chars.next().ok_or_else(|| eyre!(\"missing arguments\"))?.1 {\n+                        '\"' => {\n+                            let s = chars.as_str();\n+                            let mut escaped = false;\n+                            for (i, c) in chars {\n+                                if escaped {\n+                                    // Accept any character as literal after a `\\`.\n+                                    escaped = false;\n+                                } else if c == '\"' {\n+                                    return Ok((&s[..(i - 1)], s[i..].trim_start()));\n+                                } else {\n+                                    escaped = c == '\\\\';\n+                                }\n+                            }\n+                            bail!(\"no closing quotes found for {s}\")\n+                        }\n+                        c => bail!(\"expected '\\\"', got {c}\"),\n+                    }\n+                }\n+\n+                let (from, rest) = parse_str(args)?;\n+\n+                let to = rest.strip_prefix(\"->\").ok_or_else(|| {\n+                    eyre!(\"normalize-stderr-test needs a pattern and replacement separated by `->`\")\n+                })?.trim_start();\n+                let (to, rest) = parse_str(to)?;\n+\n+                ensure!(rest.is_empty(), \"trailing text after pattern replacement: {rest}\");\n+\n+                let from = Regex::new(from)?;\n+                self.normalize_stderr.push((from, to.to_string()));\n             }\n-            if line.starts_with(\"// stderr-per-bitwidth\") {\n-                assert!(\n-                    !this.stderr_per_bitwidth,\n-                    \"{}:{l}, cannot specifiy stderr-per-bitwidth twice\",\n-                    path.display()\n+            \"error-pattern\" => {\n+                ensure!(\n+                    self.error_pattern.is_none(),\n+                    \"cannot specifiy error_pattern twice, previous: {:?}\",\n+                    self.error_pattern\n                 );\n-                this.stderr_per_bitwidth = true;\n+                self.error_pattern = Some((args.trim().to_string(), l));\n             }\n-            if let Some(s) = line.strip_prefix(\"// compile-flags:\") {\n-                this.compile_flags.extend(s.split_whitespace().map(|s| s.to_string()));\n+            \"stderr-per-bitwidth\" => {\n+                ensure!(!self.stderr_per_bitwidth, \"cannot specifiy stderr-per-bitwidth twice\");\n+                self.stderr_per_bitwidth = true;\n             }\n-            if let Some(s) = line.strip_prefix(\"// rustc-env:\") {\n-                for env in s.split_whitespace() {\n-                    if let Some((k, v)) = env.split_once('=') {\n-                        this.env_vars.push((k.to_string(), v.to_string()));\n-                    }\n+            command => {\n+                if let Some(s) = command.strip_prefix(\"ignore-\") {\n+                    self.ignore.push(Condition::parse(s));\n+                    return Ok(());\n                 }\n+\n+                if let Some(s) = command.strip_prefix(\"only-\") {\n+                    self.only.push(Condition::parse(s));\n+                    return Ok(());\n+                }\n+                bail!(\"unknown command {command}\");\n             }\n-            if let Some(s) = line.strip_prefix(\"// normalize-stderr-test:\") {\n-                let (from, to) = s.split_once(\"->\").expect(\"normalize-stderr-test needs a `->`\");\n-                let from = from.trim().trim_matches('\"');\n-                let to = to.trim().trim_matches('\"');\n-                let from = Regex::new(from).unwrap();\n-                this.normalize_stderr.push((from, to.to_string()));\n-            }\n-            if let Some(s) = line.strip_prefix(\"// error-pattern:\") {\n-                assert_eq!(\n-                    this.error_pattern,\n-                    None,\n-                    \"{}:{l}, cannot specifiy error_pattern twice\",\n-                    path.display()\n-                );\n-                this.error_pattern = Some((s.trim().to_string(), l));\n-            }\n-            if let Some(captures) = error_pattern_regex.captures(line) {\n-                // FIXME: check that the error happens on the marked line\n-                let matched = captures[\"text\"].trim().to_string();\n+        }\n \n-                let revision = captures.name(\"revision\").map(|rev| rev.as_str().to_string());\n+        Ok(())\n+    }\n \n-                let level = captures.name(\"level\").map(|rev| rev.as_str().parse().unwrap());\n+    fn parse_pattern(\n+        &mut self,\n+        pattern: &str,\n+        fallthrough_to: &mut Option<usize>,\n+        l: usize,\n+    ) -> Result<()> {\n+        self.parse_pattern_inner(pattern, fallthrough_to, None, l)\n+    }\n \n-                let match_line = match captures.name(\"offset\").map(|rev| rev.as_str()) {\n-                    Some(\"|\") => fallthrough_to.expect(\"`//~|` pattern without preceding line\"),\n-                    Some(pat) => {\n-                        debug_assert!(pat.chars().all(|c| c == '^'));\n-                        l - pat.len()\n-                    }\n-                    None => l,\n-                };\n-\n-                fallthrough_to = Some(match_line);\n-\n-                this.error_matches.push(ErrorMatch {\n-                    matched,\n-                    revision,\n-                    level,\n-                    definition_line: l,\n-                    line: match_line,\n-                });\n-            } else {\n-                fallthrough_to = None;\n-            }\n+    fn parse_revisioned_pattern(\n+        &mut self,\n+        pattern: &str,\n+        fallthrough_to: &mut Option<usize>,\n+        l: usize,\n+    ) -> Result<()> {\n+        let (revision, pattern) =\n+            pattern.split_once(']').ok_or_else(|| eyre!(\"`//[` without corresponding `]`\"))?;\n+        if let Some(pattern) = pattern.strip_prefix('~') {\n+            self.parse_pattern_inner(pattern, fallthrough_to, Some(revision.to_owned()), l)\n+        } else {\n+            bail!(\"revisioned pattern must have `~` following the `]`\");\n         }\n-        this\n+    }\n+\n+    // parse something like (?P<offset>\\||[\\^]+)? *(?P<level>ERROR|HELP|WARN|NOTE)?:?(?P<text>.*)\n+    fn parse_pattern_inner(\n+        &mut self,\n+        pattern: &str,\n+        fallthrough_to: &mut Option<usize>,\n+        revision: Option<String>,\n+        l: usize,\n+    ) -> Result<()> {\n+        let (match_line, pattern) =\n+            match pattern.chars().next().ok_or_else(|| eyre!(\"no pattern specified\"))? {\n+                '|' =>\n+                    (\n+                        *fallthrough_to\n+                            .as_mut()\n+                            .ok_or_else(|| eyre!(\"`//~|` pattern without preceding line\"))?,\n+                        &pattern[1..],\n+                    ),\n+                '^' => {\n+                    let offset = pattern.chars().take_while(|&c| c == '^').count();\n+                    (l - offset, &pattern[offset..])\n+                }\n+                _ => (l, pattern),\n+            };\n+\n+        let (level, pattern) = match pattern.trim_start().split_once(|c| matches!(c, ':' | ' ')) {\n+            None => (None, pattern),\n+            Some((level, pattern_without_level)) =>\n+                match level.parse().ok() {\n+                    Some(level) => (Some(level), pattern_without_level),\n+                    None => (None, pattern),\n+                },\n+        };\n+\n+        let matched = pattern.trim().to_string();\n+\n+        ensure!(!matched.is_empty(), \"no pattern specified\");\n+\n+        *fallthrough_to = Some(match_line);\n+\n+        self.error_matches.push(ErrorMatch {\n+            matched,\n+            revision,\n+            level,\n+            definition_line: l,\n+            line: match_line,\n+        });\n+\n+        Ok(())\n     }\n }"}, {"sha": "15a0aae247b1d08b66da7d6cec7e0ff3a06d64f9", "filename": "ui_test/src/comments/tests.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/ui_test%2Fsrc%2Fcomments%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/ui_test%2Fsrc%2Fcomments%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Fcomments%2Ftests.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -2,21 +2,54 @@ use std::path::Path;\n \n use super::Comments;\n \n+use crate::tests::init;\n+use color_eyre::eyre::{bail, Result};\n+\n #[test]\n-fn parse_simple_comment() {\n+fn parse_simple_comment() -> Result<()> {\n+    init();\n     let s = r\"\n use std::mem;\n \n fn main() {\n     let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address $HEX is unallocated)\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n     println!(\"parsed comments: {:#?}\", comments);\n     assert_eq!(comments.error_matches[0].definition_line, 5);\n     assert_eq!(comments.error_matches[0].revision, None);\n     assert_eq!(\n         comments.error_matches[0].matched,\n         \"encountered a dangling reference (address $HEX is unallocated)\"\n     );\n+    Ok(())\n+}\n+\n+#[test]\n+fn parse_slash_slash_at() -> Result<()> {\n+    init();\n+    let s = r\"\n+//@  error-pattern:  foomp\n+use std::mem;\n+\n+    \";\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n+    println!(\"parsed comments: {:#?}\", comments);\n+    assert_eq!(comments.error_pattern, Some((\"foomp\".to_string(), 2)));\n+    Ok(())\n+}\n+\n+#[test]\n+fn parse_slash_slash_at_fail() -> Result<()> {\n+    init();\n+    let s = r\"\n+//@  error-patttern  foomp\n+use std::mem;\n+\n+    \";\n+    match Comments::parse(Path::new(\"<dummy>\"), s) {\n+        Ok(_) => bail!(\"expected parsing to fail\"),\n+        Err(_) => Ok(()),\n+    }\n }"}, {"sha": "da562fcac7d29e1fffa27e200779ad85a326f31b", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -7,6 +7,8 @@ use std::process::{Command, ExitStatus};\n use std::sync::atomic::{AtomicUsize, Ordering};\n use std::sync::Mutex;\n \n+pub use color_eyre;\n+use color_eyre::eyre::Result;\n use colored::*;\n use comments::ErrorMatch;\n use regex::Regex;\n@@ -51,7 +53,7 @@ pub enum OutputConflictHandling {\n \n pub type Filter = Vec<(Regex, &'static str)>;\n \n-pub fn run_tests(config: Config) {\n+pub fn run_tests(config: Config) -> Result<()> {\n     eprintln!(\"   Compiler flags: {:?}\", config.args);\n \n     // Get the triple with which to run the tests\n@@ -66,7 +68,7 @@ pub fn run_tests(config: Config) {\n     let ignored = AtomicUsize::default();\n     let filtered = AtomicUsize::default();\n \n-    crossbeam::scope(|s| {\n+    crossbeam::scope(|s| -> Result<()> {\n         // Create a thread that is in charge of walking the directory and submitting jobs.\n         // It closes the channel when it is done.\n         s.spawn(|_| {\n@@ -92,9 +94,11 @@ pub fn run_tests(config: Config) {\n             drop(submit);\n         });\n \n+        let mut threads = vec![];\n+\n         // Create N worker threads that receive files to test.\n         for _ in 0..std::thread::available_parallelism().unwrap().get() {\n-            s.spawn(|_| {\n+            threads.push(s.spawn(|_| -> Result<()> {\n                 for path in &receive {\n                     if !config.path_filter.is_empty() {\n                         let path_display = path.display().to_string();\n@@ -103,7 +107,7 @@ pub fn run_tests(config: Config) {\n                             continue;\n                         }\n                     }\n-                    let comments = Comments::parse_file(&path);\n+                    let comments = Comments::parse_file(&path)?;\n                     // Ignore file if only/ignore rules do (not) apply\n                     if !test_file_conditions(&comments, &target) {\n                         ignored.fetch_add(1, Ordering::Relaxed);\n@@ -142,10 +146,15 @@ pub fn run_tests(config: Config) {\n                         }\n                     }\n                 }\n-            });\n+                Ok(())\n+            }));\n+        }\n+        for thread in threads {\n+            thread.join().unwrap()?;\n         }\n+        Ok(())\n     })\n-    .unwrap();\n+    .unwrap()?;\n \n     // Print all errors in a single thread to show reliable output\n     let failures = failures.into_inner().unwrap();\n@@ -246,6 +255,7 @@ pub fn run_tests(config: Config) {\n         filtered.to_string().yellow(),\n     );\n     eprintln!();\n+    Ok(())\n }\n \n #[derive(Debug)]\n@@ -377,7 +387,7 @@ fn check_annotations(\n ) {\n     if let Some((ref error_pattern, definition_line)) = comments.error_pattern {\n         // first check the diagnostics messages outside of our file. We check this first, so that\n-        // you can mix in-file annotations with // error-pattern annotations, even if there is overlap\n+        // you can mix in-file annotations with //@error-pattern annotations, even if there is overlap\n         // in the messages.\n         if let Some(i) = messages_from_unknown_file_or_line\n             .iter()"}, {"sha": "11a3d6aca27847f2ad181054c50171e00b6da241", "filename": "ui_test/src/tests.rs", "status": "modified", "additions": 34, "deletions": 21, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/ui_test%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c/ui_test%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Ftests.rs?ref=7a6a812794f6c2ff46a5a6d1a2991ecc5903b10c", "patch": "@@ -20,7 +20,8 @@ fn config() -> Config {\n }\n \n #[test]\n-fn issue_2156() {\n+fn issue_2156() -> Result<()> {\n+    init();\n     let s = r\"\n use std::mem;\n \n@@ -29,7 +30,7 @@ fn main() {\n }\n     \";\n     let path = Path::new(\"$DIR/<dummy>\");\n-    let comments = Comments::parse(path, s);\n+    let comments = Comments::parse(path, s)?;\n     let mut errors = vec![];\n     let config = config();\n     let messages = vec![\n@@ -46,21 +47,22 @@ fn main() {\n         [\n             Error::PatternNotFound { definition_line: 5, .. },\n             Error::ErrorsWithoutPattern { path: Some((_, 5)), .. },\n-        ] => {}\n+        ] => Ok(()),\n         _ => panic!(\"{:#?}\", errors),\n     }\n }\n \n #[test]\n-fn find_pattern() {\n+fn find_pattern() -> Result<()> {\n+    init();\n     let s = r\"\n use std::mem;\n \n fn main() {\n     let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address 0x10 is unallocated)\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n     let config = config();\n     {\n         let messages = vec![vec![], vec![], vec![], vec![], vec![], vec![\n@@ -137,14 +139,15 @@ fn main() {\n         );\n         match &errors[..] {\n             // Note no `ErrorsWithoutPattern`, because there are no `//~NOTE` in the test file, so we ignore them\n-            [Error::PatternNotFound { definition_line: 5, .. }] => {}\n+            [Error::PatternNotFound { definition_line: 5, .. }] => Ok(()),\n             _ => panic!(\"not the expected error: {:#?}\", errors),\n         }\n     }\n }\n \n #[test]\n-fn duplicate_pattern() {\n+fn duplicate_pattern() -> Result<()> {\n+    init();\n     let s = r\"\n use std::mem;\n \n@@ -153,7 +156,7 @@ fn main() {\n     //~^ ERROR encountered a dangling reference (address 0x10 is unallocated)\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n     let config = config();\n     let messages = vec![\n         vec![], vec![], vec![], vec![], vec![],\n@@ -167,21 +170,22 @@ fn main() {\n     let mut errors = vec![];\n     check_annotations(messages, vec![], Path::new(\"moobar\"), &mut errors, &config, \"\", &comments);\n     match &errors[..] {\n-        [Error::PatternNotFound { definition_line: 6, .. }] => {}\n+        [Error::PatternNotFound { definition_line: 6, .. }] => Ok(()),\n         _ => panic!(\"{:#?}\", errors),\n     }\n }\n \n #[test]\n-fn missing_pattern() {\n+fn missing_pattern() -> Result<()> {\n+    init();\n     let s = r\"\n use std::mem;\n \n fn main() {\n     let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address 0x10 is unallocated)\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n     let config = config();\n     let messages = vec![\n         vec![], vec![], vec![], vec![], vec![],\n@@ -199,13 +203,14 @@ fn main() {\n     let mut errors = vec![];\n     check_annotations(messages, vec![], Path::new(\"moobar\"), &mut errors, &config, \"\", &comments);\n     match &errors[..] {\n-        [Error::ErrorsWithoutPattern { path: Some((_, 5)), .. }] => {}\n+        [Error::ErrorsWithoutPattern { path: Some((_, 5)), .. }] => Ok(()),\n         _ => panic!(\"{:#?}\", errors),\n     }\n }\n \n #[test]\n-fn missing_warn_pattern() {\n+fn missing_warn_pattern() -> Result<()> {\n+    init();\n     let s = r\"\n use std::mem;\n \n@@ -214,7 +219,7 @@ fn main() {\n     //~^ WARN cake\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n     let config = config();\n     let messages= vec![\n         vec![],\n@@ -242,15 +247,16 @@ fn main() {\n     match &errors[..] {\n         [Error::ErrorsWithoutPattern { path: Some((_, 5)), msgs, .. }] =>\n             match &msgs[..] {\n-                [Message { message, level: Level::Warn }] if message == \"kaboom\" => {}\n+                [Message { message, level: Level::Warn }] if message == \"kaboom\" => Ok(()),\n                 _ => panic!(\"{:#?}\", msgs),\n             },\n         _ => panic!(\"{:#?}\", errors),\n     }\n }\n \n #[test]\n-fn missing_implicit_warn_pattern() {\n+fn missing_implicit_warn_pattern() -> Result<()> {\n+    init();\n     let s = r\"\n use std::mem;\n \n@@ -259,7 +265,7 @@ fn main() {\n     //~^ cake\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n     let config = config();\n     let messages = vec![\n         vec![],\n@@ -285,21 +291,22 @@ fn main() {\n     let mut errors = vec![];\n     check_annotations(messages, vec![], Path::new(\"moobar\"), &mut errors, &config, \"\", &comments);\n     match &errors[..] {\n-        [] => {}\n+        [] => Ok(()),\n         _ => panic!(\"{:#?}\", errors),\n     }\n }\n \n #[test]\n-fn implicit_err_pattern() {\n+fn implicit_err_pattern() -> Result<()> {\n+    init();\n     let s = r\"\n use std::mem;\n \n fn main() {\n     let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ encountered a dangling reference (address 0x10 is unallocated)\n }\n     \";\n-    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s)?;\n     let config = config();\n     let messages = vec![\n         vec![],\n@@ -317,7 +324,13 @@ fn main() {\n     let mut errors = vec![];\n     check_annotations(messages, vec![], Path::new(\"moobar\"), &mut errors, &config, \"\", &comments);\n     match &errors[..] {\n-        [Error::ErrorPatternWithoutErrorAnnotation(_, 5)] => {}\n+        [Error::ErrorPatternWithoutErrorAnnotation(_, 5)] => Ok(()),\n         _ => panic!(\"{:#?}\", errors),\n     }\n }\n+\n+/// Call this from every test to initialize eyre only once across all tests.\n+pub fn init() {\n+    static INIT: std::sync::Once = std::sync::Once::new();\n+    INIT.call_once(|| color_eyre::install().unwrap());\n+}"}]}