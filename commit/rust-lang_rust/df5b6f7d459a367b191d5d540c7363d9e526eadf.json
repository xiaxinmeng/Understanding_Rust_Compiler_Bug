{"sha": "df5b6f7d459a367b191d5d540c7363d9e526eadf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNWI2ZjdkNDU5YTM2N2IxOTFkNWQ1NDBjNzM2M2Q5ZTUyNmVhZGY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-04-17T01:35:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-04-17T01:35:22Z"}, "message": "Merge #8549\n\n8549: Fix `TestDB::module_at_position` with submodules r=jonas-schievink a=jonas-schievink\n\nFound while looking into https://github.com/rust-analyzer/rust-analyzer/issues/8519\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "ffb5f57b1d989cbd94be19eae42ca091b060a4e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ffb5f57b1d989cbd94be19eae42ca091b060a4e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df5b6f7d459a367b191d5d540c7363d9e526eadf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgejtaCRBK7hj4Ov3rIwAAdvMIAAeyZjiYrYwgE8TB79xygK76\nVlrE1z87EPpRbpO9Sf4KIXEankYjFogjTZNiGoQfNN1vluKNRDVQh0D15aRcrzXO\n9jT+qCQxEKUX5v+O8aD9KGcxrHSMgNYMmTQqLTUn/Onrm+eL1MiRhvyjkJ1QFLtt\nT8SZOXJD2+oT4A6Ljl0xuVo/GHHF7l2Ej9MhwLAFh4zG5gNZPo6l/FHss/35c5NO\nHUb/j0ixTWoCM8+rmDjpdfFd0BDTehRQTqfb+rcEs7/FouxDbLdnJxLF12yHEMmn\nUQ6ZGCtQm6B40pXYP2023FsD88z7AuzyMx5aFX/Dihu+UNliOzM9dwsYBu7zEwM=\n=2XX6\n-----END PGP SIGNATURE-----\n", "payload": "tree ffb5f57b1d989cbd94be19eae42ca091b060a4e3\nparent 52585df24aed2c02c17b89913f5a5365b2e76e75\nparent 9e8feeb94aaa9e215c07bf817b6481a0447aed18\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1618623322 +0000\ncommitter GitHub <noreply@github.com> 1618623322 +0000\n\nMerge #8549\n\n8549: Fix `TestDB::module_at_position` with submodules r=jonas-schievink a=jonas-schievink\n\nFound while looking into https://github.com/rust-analyzer/rust-analyzer/issues/8519\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df5b6f7d459a367b191d5d540c7363d9e526eadf", "html_url": "https://github.com/rust-lang/rust/commit/df5b6f7d459a367b191d5d540c7363d9e526eadf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df5b6f7d459a367b191d5d540c7363d9e526eadf/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "52585df24aed2c02c17b89913f5a5365b2e76e75", "url": "https://api.github.com/repos/rust-lang/rust/commits/52585df24aed2c02c17b89913f5a5365b2e76e75", "html_url": "https://github.com/rust-lang/rust/commit/52585df24aed2c02c17b89913f5a5365b2e76e75"}, {"sha": "9e8feeb94aaa9e215c07bf817b6481a0447aed18", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e8feeb94aaa9e215c07bf817b6481a0447aed18", "html_url": "https://github.com/rust-lang/rust/commit/9e8feeb94aaa9e215c07bf817b6481a0447aed18"}], "stats": {"total": 74, "additions": 72, "deletions": 2}, "files": [{"sha": "2c4bbe585ea15e3f1608035b998faa1d4aed7f91", "filename": "crates/hir_def/src/find_path.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/df5b6f7d459a367b191d5d540c7363d9e526eadf/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df5b6f7d459a367b191d5d540c7363d9e526eadf/crates%2Fhir_def%2Fsrc%2Ffind_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ffind_path.rs?ref=df5b6f7d459a367b191d5d540c7363d9e526eadf", "patch": "@@ -954,6 +954,29 @@ fn main() {\n         )\n     }\n \n+    #[test]\n+    fn from_inside_module() {\n+        // This worked correctly, but the test suite logic was broken.\n+        cov_mark::check!(submodule_in_testdb);\n+        check_found_path(\n+            r#\"\n+mod baz {\n+    pub struct Foo {}\n+}\n+\n+mod bar {\n+    fn bar() {\n+        $0\n+    }\n+}\n+            \"#,\n+            \"crate::baz::Foo\",\n+            \"crate::baz::Foo\",\n+            \"crate::baz::Foo\",\n+            \"crate::baz::Foo\",\n+        )\n+    }\n+\n     #[test]\n     fn recursive_pub_mod_reexport() {\n         cov_mark::check!(recursive_imports);"}, {"sha": "8fa703a574e6ec2680de6e77f06a40e2516bcf58", "filename": "crates/hir_def/src/test_db.rs", "status": "modified", "additions": 49, "deletions": 2, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/df5b6f7d459a367b191d5d540c7363d9e526eadf/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df5b6f7d459a367b191d5d540c7363d9e526eadf/crates%2Fhir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Ftest_db.rs?ref=df5b6f7d459a367b191d5d540c7363d9e526eadf", "patch": "@@ -15,7 +15,12 @@ use rustc_hash::FxHashSet;\n use syntax::{algo, ast, AstNode, TextRange, TextSize};\n use test_utils::extract_annotations;\n \n-use crate::{db::DefDatabase, nameres::DefMap, src::HasSource, Lookup, ModuleDefId, ModuleId};\n+use crate::{\n+    db::DefDatabase,\n+    nameres::{DefMap, ModuleSource},\n+    src::HasSource,\n+    LocalModuleId, Lookup, ModuleDefId, ModuleId,\n+};\n \n #[salsa::database(\n     base_db::SourceDatabaseExtStorage,\n@@ -87,10 +92,11 @@ impl TestDB {\n     pub(crate) fn module_at_position(&self, position: FilePosition) -> ModuleId {\n         let file_module = self.module_for_file(position.file_id);\n         let mut def_map = file_module.def_map(self);\n+        let module = self.mod_at_position(&def_map, position);\n \n         def_map = match self.block_at_position(&def_map, position) {\n             Some(it) => it,\n-            None => return file_module,\n+            None => return def_map.module_id(module),\n         };\n         loop {\n             let new_map = self.block_at_position(&def_map, position);\n@@ -106,6 +112,47 @@ impl TestDB {\n         }\n     }\n \n+    /// Finds the smallest/innermost module in `def_map` containing `position`.\n+    fn mod_at_position(&self, def_map: &DefMap, position: FilePosition) -> LocalModuleId {\n+        let mut size = None;\n+        let mut res = def_map.root();\n+        for (module, data) in def_map.modules() {\n+            let src = data.definition_source(self);\n+            if src.file_id != position.file_id.into() {\n+                continue;\n+            }\n+\n+            let range = match src.value {\n+                ModuleSource::SourceFile(it) => it.syntax().text_range(),\n+                ModuleSource::Module(it) => it.syntax().text_range(),\n+                ModuleSource::BlockExpr(it) => it.syntax().text_range(),\n+            };\n+\n+            if !range.contains(position.offset) {\n+                continue;\n+            }\n+\n+            let new_size = match size {\n+                None => range.len(),\n+                Some(size) => {\n+                    if range.len() < size {\n+                        range.len()\n+                    } else {\n+                        size\n+                    }\n+                }\n+            };\n+\n+            if size != Some(new_size) {\n+                cov_mark::hit!(submodule_in_testdb);\n+                size = Some(new_size);\n+                res = module;\n+            }\n+        }\n+\n+        res\n+    }\n+\n     fn block_at_position(&self, def_map: &DefMap, position: FilePosition) -> Option<Arc<DefMap>> {\n         // Find the smallest (innermost) function in `def_map` containing the cursor.\n         let mut size = None;"}]}