{"sha": "6d215fe04ce3f638d717d7fcea95c40d0a655ff9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMjE1ZmUwNGNlM2Y2MzhkNzE3ZDdmY2VhOTVjNDBkMGE2NTVmZjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-14T21:44:55Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-14T21:44:55Z"}, "message": "Auto merge of #32169 - mitaa:anon-tip, r=nrc\n\nAllow custom filenames for anonymous inputs\n\nThis came out of #29253 but doesn't fix it.\n\nI thought it might be worth merging on its own nonetheless.", "tree": {"sha": "742976ee7873a820340a16e3493db77323814c2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/742976ee7873a820340a16e3493db77323814c2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d215fe04ce3f638d717d7fcea95c40d0a655ff9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d215fe04ce3f638d717d7fcea95c40d0a655ff9", "html_url": "https://github.com/rust-lang/rust/commit/6d215fe04ce3f638d717d7fcea95c40d0a655ff9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d215fe04ce3f638d717d7fcea95c40d0a655ff9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01118928fc2b280e96189ed394af749d65cbcffe", "url": "https://api.github.com/repos/rust-lang/rust/commits/01118928fc2b280e96189ed394af749d65cbcffe", "html_url": "https://github.com/rust-lang/rust/commit/01118928fc2b280e96189ed394af749d65cbcffe"}, {"sha": "ea7cf904b09a9a6dabb035d2bde4ef236d39144a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7cf904b09a9a6dabb035d2bde4ef236d39144a", "html_url": "https://github.com/rust-lang/rust/commit/ea7cf904b09a9a6dabb035d2bde4ef236d39144a"}], "stats": {"total": 51, "additions": 32, "deletions": 19}, "files": [{"sha": "9f097215a8ac5254ace403e67a8f8e9f1fc4a4a7", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6d215fe04ce3f638d717d7fcea95c40d0a655ff9/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d215fe04ce3f638d717d7fcea95c40d0a655ff9/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=6d215fe04ce3f638d717d7fcea95c40d0a655ff9", "patch": "@@ -172,16 +172,20 @@ pub enum PrintRequest {\n pub enum Input {\n     /// Load source from file\n     File(PathBuf),\n-    /// The string is the source\n-    Str(String)\n+    Str {\n+        /// String that is shown in place of a filename\n+        name: String,\n+        /// Anonymous source string\n+        input: String,\n+    },\n }\n \n impl Input {\n     pub fn filestem(&self) -> String {\n         match *self {\n             Input::File(ref ifile) => ifile.file_stem().unwrap()\n                                            .to_str().unwrap().to_string(),\n-            Input::Str(_) => \"rust_out\".to_string(),\n+            Input::Str { .. } => \"rust_out\".to_string(),\n         }\n     }\n }"}, {"sha": "8dac25cc0cbf1193dd635ed2d47f382c07bd0d5d", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d215fe04ce3f638d717d7fcea95c40d0a655ff9/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d215fe04ce3f638d717d7fcea95c40d0a655ff9/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=6d215fe04ce3f638d717d7fcea95c40d0a655ff9", "patch": "@@ -231,7 +231,6 @@ pub fn compile_input(sess: &Session,\n     Ok(())\n }\n \n-\n /// The name used for source code that doesn't originate in a file\n /// (e.g. source from stdin or a string)\n pub fn anon_src() -> String {\n@@ -242,7 +241,7 @@ pub fn source_name(input: &Input) -> String {\n     match *input {\n         // FIXME (#9639): This needs to handle non-utf8 paths\n         Input::File(ref ifile) => ifile.to_str().unwrap().to_string(),\n-        Input::Str(_) => anon_src(),\n+        Input::Str { ref name, .. } => name.clone(),\n     }\n }\n \n@@ -434,9 +433,9 @@ pub fn phase_1_parse_input<'a>(sess: &'a Session,\n             Input::File(ref file) => {\n                 parse::parse_crate_from_file(file, cfg.clone(), &sess.parse_sess)\n             }\n-            Input::Str(ref src) => {\n-                parse::parse_crate_from_source_str(anon_src().to_string(),\n-                                                   src.to_string(),\n+            Input::Str { ref input, ref name } => {\n+                parse::parse_crate_from_source_str(name.clone(),\n+                                                   input.clone(),\n                                                    cfg.clone(),\n                                                    &sess.parse_sess)\n             }"}, {"sha": "357c7238c1f6c9572a939d1b90615c005083688d", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6d215fe04ce3f638d717d7fcea95c40d0a655ff9/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d215fe04ce3f638d717d7fcea95c40d0a655ff9/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=6d215fe04ce3f638d717d7fcea95c40d0a655ff9", "patch": "@@ -223,7 +223,8 @@ fn make_input(free_matches: &[String]) -> Option<(Input, Option<PathBuf>)> {\n         if ifile == \"-\" {\n             let mut src = String::new();\n             io::stdin().read_to_string(&mut src).unwrap();\n-            Some((Input::Str(src), None))\n+            Some((Input::Str { name: driver::anon_src(), input: src },\n+                  None))\n         } else {\n             Some((Input::File(PathBuf::from(ifile)),\n                   Some(PathBuf::from(ifile))))\n@@ -511,7 +512,7 @@ impl RustcDefaultCalls {\n                         .unwrap();\n                     println!(\"{}\", String::from_utf8(v).unwrap());\n                 }\n-                &Input::Str(_) => {\n+                &Input::Str { .. } => {\n                     early_error(ErrorOutputType::default(), \"cannot list metadata for stdin\");\n                 }\n             }\n@@ -994,9 +995,9 @@ fn parse_crate_attrs<'a>(sess: &'a Session, input: &Input) -> PResult<'a, Vec<as\n         Input::File(ref ifile) => {\n             parse::parse_crate_attrs_from_file(ifile, Vec::new(), &sess.parse_sess)\n         }\n-        Input::Str(ref src) => {\n-            parse::parse_crate_attrs_from_source_str(driver::anon_src().to_string(),\n-                                                     src.to_string(),\n+        Input::Str { ref name, ref input } => {\n+            parse::parse_crate_attrs_from_source_str(name.clone(),\n+                                                     input.clone(),\n                                                      Vec::new(),\n                                                      &sess.parse_sess)\n         }"}, {"sha": "02d290e7bff803f6e5bfd095b02289640af2f076", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d215fe04ce3f638d717d7fcea95c40d0a655ff9/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d215fe04ce3f638d717d7fcea95c40d0a655ff9/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=6d215fe04ce3f638d717d7fcea95c40d0a655ff9", "patch": "@@ -113,7 +113,10 @@ fn test_env<F>(source_string: &str,\n                                        Rc::new(CodeMap::new()), cstore.clone());\n     rustc_lint::register_builtins(&mut sess.lint_store.borrow_mut(), Some(&sess));\n     let krate_config = Vec::new();\n-    let input = config::Input::Str(source_string.to_string());\n+    let input = config::Input::Str {\n+        name: driver::anon_src(),\n+        input: source_string.to_string(),\n+    };\n     let krate = driver::phase_1_parse_input(&sess, krate_config, &input).unwrap();\n     let krate = driver::phase_2_configure_and_expand(&sess, &cstore, krate, \"test\", None)\n                     .expect(\"phase 2 aborted\");"}, {"sha": "54821bd1161ee41648a7c94f0d2e069fb48045bf", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6d215fe04ce3f638d717d7fcea95c40d0a655ff9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d215fe04ce3f638d717d7fcea95c40d0a655ff9/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=6d215fe04ce3f638d717d7fcea95c40d0a655ff9", "patch": "@@ -205,7 +205,7 @@ impl<'a, 'tcx> Clean<Crate> for visit_ast::RustdocVisitor<'a, 'tcx> {\n                     current_dir().unwrap().join(path)\n                 }\n             },\n-            Input::Str(_) => PathBuf::new() // FIXME: this is wrong\n+            Input::Str { ref name, .. } => PathBuf::from(name.clone()),\n         };\n \n         Crate {"}, {"sha": "7d4061b655941e539775313ca1c16a77e1d185e9", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d215fe04ce3f638d717d7fcea95c40d0a655ff9/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d215fe04ce3f638d717d7fcea95c40d0a655ff9/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=6d215fe04ce3f638d717d7fcea95c40d0a655ff9", "patch": "@@ -180,7 +180,10 @@ fn runtest(test: &str, cratename: &str, cfgs: Vec<String>, libs: SearchPaths,\n     // the test harness wants its own `main` & top level functions, so\n     // never wrap the test in `fn main() { ... }`\n     let test = maketest(test, Some(cratename), as_test_harness, opts);\n-    let input = config::Input::Str(test.to_string());\n+    let input = config::Input::Str {\n+        name: driver::anon_src(),\n+        input: test.to_owned(),\n+    };\n     let mut outputs = HashMap::new();\n     outputs.insert(OutputType::Exe, None);\n "}, {"sha": "4ff531d4755c80c41b3191188736af04cbfa243c", "filename": "src/test/run-make/execution-engine/test.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6d215fe04ce3f638d717d7fcea95c40d0a655ff9/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d215fe04ce3f638d717d7fcea95c40d0a655ff9/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fexecution-engine%2Ftest.rs?ref=6d215fe04ce3f638d717d7fcea95c40d0a655ff9", "patch": "@@ -216,7 +216,10 @@ fn build_exec_options(sysroot: PathBuf) -> Options {\n /// for crates used in the given input.\n fn compile_program(input: &str, sysroot: PathBuf)\n                    -> Option<(llvm::ModuleRef, Vec<PathBuf>)> {\n-    let input = Input::Str(input.to_string());\n+    let input = Input::Str {\n+        name: driver::anon_src(),\n+        input: input.to_string(),\n+    };\n     let thread = Builder::new().name(\"compile_program\".to_string());\n \n     let handle = thread.spawn(move || {"}, {"sha": "80c06ca3274f245af1bd718ae3ae7edfc31d0782", "filename": "src/test/run-make/issue-19371/foo.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d215fe04ce3f638d717d7fcea95c40d0a655ff9/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d215fe04ce3f638d717d7fcea95c40d0a655ff9/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fissue-19371%2Ffoo.rs?ref=6d215fe04ce3f638d717d7fcea95c40d0a655ff9", "patch": "@@ -18,7 +18,7 @@ extern crate syntax;\n \n use rustc::session::{build_session, Session};\n use rustc::session::config::{basic_options, build_configuration, Input, OutputType};\n-use rustc_driver::driver::{compile_input, CompileController};\n+use rustc_driver::driver::{compile_input, CompileController, anon_src};\n use rustc_metadata::cstore::CStore;\n use syntax::diagnostics::registry::Registry;\n use syntax::parse::token;\n@@ -67,7 +67,7 @@ fn compile(code: String, output: PathBuf, sysroot: PathBuf) {\n \n     compile_input(&sess, &cstore,\n             cfg,\n-            &Input::Str(code),\n+            &Input::Str { name: anon_src(), input: code },\n             &None,\n             &Some(output),\n             None,"}]}