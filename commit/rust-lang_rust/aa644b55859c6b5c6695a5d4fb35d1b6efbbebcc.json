{"sha": "aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhNjQ0YjU1ODU5YzZiNWM2Njk1YTVkNGZiMzVkMWI2ZWZiYmViY2M=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-16T19:45:02Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-06-16T19:51:52Z"}, "message": "Move test_utils into tests module", "tree": {"sha": "47119538effd381ecd8e15d422103512f2b47406", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/47119538effd381ecd8e15d422103512f2b47406"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "html_url": "https://github.com/rust-lang/rust/commit/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11115ebad8d0cb367478a4f154abe08c0c25aa95", "url": "https://api.github.com/repos/rust-lang/rust/commits/11115ebad8d0cb367478a4f154abe08c0c25aa95", "html_url": "https://github.com/rust-lang/rust/commit/11115ebad8d0cb367478a4f154abe08c0c25aa95"}], "stats": {"total": 432, "additions": 194, "deletions": 238}, "files": [{"sha": "3866c5917d658306416b02c75ba91c154e7bb532", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -322,7 +322,7 @@ mod tests {\n \n     use expect_test::{expect, Expect};\n \n-    use crate::{test_utils::completion_list, CompletionKind};\n+    use crate::{tests::filtered_completion_list, CompletionKind};\n \n     #[test]\n     fn attributes_are_sorted() {\n@@ -341,7 +341,7 @@ mod tests {\n     }\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Attribute);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Attribute);\n         expect.assert_eq(&actual);\n     }\n "}, {"sha": "5201095e80c7410e97cd7cacd2fb1a1f5ba2248f", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -82,7 +82,7 @@ const DEFAULT_DERIVE_COMPLETIONS: &[DeriveDependencies] = &[\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::{test_utils::completion_list, CompletionKind};\n+    use crate::{tests::filtered_completion_list, CompletionKind};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let builtin_derives = r#\"\n@@ -106,7 +106,7 @@ pub macro PartialOrd {}\n pub macro Ord {}\n \n \"#;\n-        let actual = completion_list(\n+        let actual = filtered_completion_list(\n             &format!(\"{} {}\", builtin_derives, ra_fixture),\n             CompletionKind::Attribute,\n         );"}, {"sha": "4812b075cdfa7ee026d250a5dac47e8e4c3fe54e", "filename": "crates/ide_completion/src/completions/attribute/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -34,7 +34,7 @@ pub(super) fn complete_lint(\n #[cfg(test)]\n mod tests {\n \n-    use crate::test_utils::check_edit;\n+    use crate::tests::check_edit;\n \n     #[test]\n     fn check_empty() {"}, {"sha": "7f75d42988cb5d79e637b3409ced7355142ae8b8", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -101,10 +101,10 @@ fn complete_methods(\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::{test_utils::completion_list, CompletionKind};\n+    use crate::{tests::filtered_completion_list, CompletionKind};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Reference);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Reference);\n         expect.assert_eq(&actual);\n     }\n "}, {"sha": "4604feb5dc78fb8fdcf4a36d10ef5480de2a1dbd", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -227,11 +227,11 @@ mod tests {\n \n     use crate::{\n         item::CompletionKind,\n-        test_utils::{check_edit, check_edit_with_config, completion_list, TEST_CONFIG},\n+        tests::{check_edit, check_edit_with_config, filtered_completion_list, TEST_CONFIG},\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Magic);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Magic);\n         expect.assert_eq(&actual);\n     }\n "}, {"sha": "c9f0e2473afeea69365e11883036074599d586ff", "filename": "crates/ide_completion/src/completions/fn_param.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ffn_param.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -64,10 +64,10 @@ pub(crate) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::{test_utils::completion_list, CompletionKind};\n+    use crate::{tests::filtered_completion_list, CompletionKind};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Magic);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Magic);\n         expect.assert_eq(&actual);\n     }\n "}, {"sha": "73bbc43458ee9feb8b522dc14cff468aa1981492", "filename": "crates/ide_completion/src/completions/keyword.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fkeyword.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -190,12 +190,12 @@ mod tests {\n     use expect_test::{expect, Expect};\n \n     use crate::{\n-        test_utils::{check_edit, completion_list},\n+        tests::{check_edit, filtered_completion_list},\n         CompletionKind,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Keyword);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Keyword);\n         expect.assert_eq(&actual)\n     }\n "}, {"sha": "36f59516468ce314db531e721414a1a8b70c62be", "filename": "crates/ide_completion/src/completions/lifetime.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Flifetime.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -50,7 +50,7 @@ mod tests {\n     use expect_test::{expect, Expect};\n \n     use crate::{\n-        test_utils::{check_edit, completion_list_with_config, TEST_CONFIG},\n+        tests::{check_edit, filtered_completion_list_with_config, TEST_CONFIG},\n         CompletionConfig, CompletionKind,\n     };\n \n@@ -59,7 +59,8 @@ mod tests {\n     }\n \n     fn check_with_config(config: CompletionConfig, ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list_with_config(config, ra_fixture, CompletionKind::Reference);\n+        let actual =\n+            filtered_completion_list_with_config(config, ra_fixture, CompletionKind::Reference);\n         expect.assert_eq(&actual)\n     }\n "}, {"sha": "5def0d06adc6c0206b5211516a075ec7b0f601a7", "filename": "crates/ide_completion/src/completions/mod_.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fmod_.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -141,11 +141,11 @@ fn module_chain_to_containing_module_file(\n \n #[cfg(test)]\n mod tests {\n-    use crate::{test_utils::completion_list, CompletionKind};\n+    use crate::{tests::filtered_completion_list, CompletionKind};\n     use expect_test::{expect, Expect};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Magic);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Magic);\n         expect.assert_eq(&actual);\n     }\n "}, {"sha": "efe3c957ae7f512a11cefdf5550b03ad40001033", "filename": "crates/ide_completion/src/completions/pattern.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -61,17 +61,17 @@ mod tests {\n     use expect_test::{expect, Expect};\n \n     use crate::{\n-        test_utils::{check_edit, completion_list},\n+        tests::{check_edit, filtered_completion_list},\n         CompletionKind,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Reference);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Reference);\n         expect.assert_eq(&actual)\n     }\n \n     fn check_snippet(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Snippet);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Snippet);\n         expect.assert_eq(&actual)\n     }\n "}, {"sha": "c3c7e4589c8f359fc55efb9b118ba7a388a8cc9e", "filename": "crates/ide_completion/src/completions/postfix.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpostfix.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -307,12 +307,12 @@ mod tests {\n     use expect_test::{expect, Expect};\n \n     use crate::{\n-        test_utils::{check_edit, completion_list},\n+        tests::{check_edit, filtered_completion_list},\n         CompletionKind,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Postfix);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Postfix);\n         expect.assert_eq(&actual)\n     }\n "}, {"sha": "9432caa22e4540d8afcafb1ed137318214893046", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -198,17 +198,17 @@ mod tests {\n     use expect_test::{expect, Expect};\n \n     use crate::{\n-        test_utils::{check_edit, completion_list},\n+        tests::{check_edit, filtered_completion_list},\n         CompletionKind,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Reference);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Reference);\n         expect.assert_eq(&actual);\n     }\n \n     fn check_builtin(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::BuiltinType);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::BuiltinType);\n         expect.assert_eq(&actual);\n     }\n "}, {"sha": "47523f72f1d5a60c3a897c2a4dfc08500228e261", "filename": "crates/ide_completion/src/completions/record.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -51,25 +51,25 @@ mod tests {\n     use ide_db::helpers::FamousDefs;\n \n     use crate::{\n-        test_utils::{self, completion_list},\n+        tests::{self, filtered_completion_list},\n         CompletionKind,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Reference);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Reference);\n         expect.assert_eq(&actual);\n     }\n \n     fn check_snippet(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(\n+        let actual = filtered_completion_list(\n             &format!(\"//- /main.rs crate:main deps:core\\n{}\\n{}\", ra_fixture, FamousDefs::FIXTURE),\n             CompletionKind::Snippet,\n         );\n         expect.assert_eq(&actual);\n     }\n \n     fn check_edit(what: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-        test_utils::check_edit(\n+        tests::check_edit(\n             what,\n             &format!(\n                 \"//- /main.rs crate:main deps:core{}\\n{}\","}, {"sha": "81ddfa34fdc35f01f730b73d63874da2102adf6c", "filename": "crates/ide_completion/src/completions/snippet.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fsnippet.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -87,10 +87,10 @@ fn ${1:feature}() {\n mod tests {\n     use expect_test::{expect, Expect};\n \n-    use crate::{test_utils::completion_list, CompletionKind};\n+    use crate::{tests::filtered_completion_list, CompletionKind};\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Snippet);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Snippet);\n         expect.assert_eq(&actual)\n     }\n "}, {"sha": "dc1d198cc23825c92ca77b91b2c4761cc9c18eae", "filename": "crates/ide_completion/src/completions/trait_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Ftrait_impl.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -246,12 +246,12 @@ mod tests {\n     use expect_test::{expect, Expect};\n \n     use crate::{\n-        test_utils::{check_edit, completion_list},\n+        tests::{check_edit, filtered_completion_list},\n         CompletionKind,\n     };\n \n     fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture, CompletionKind::Magic);\n+        let actual = filtered_completion_list(ra_fixture, CompletionKind::Magic);\n         expect.assert_eq(&actual)\n     }\n "}, {"sha": "2868d9b1813898c8c697e4b9fc3621c16d498e7c", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -93,7 +93,7 @@ mod tests {\n     use expect_test::{expect, Expect};\n \n     use crate::{\n-        test_utils::{check_edit, completion_list_with_config, TEST_CONFIG},\n+        tests::{check_edit, filtered_completion_list_with_config, TEST_CONFIG},\n         CompletionConfig, CompletionKind,\n     };\n \n@@ -102,7 +102,8 @@ mod tests {\n     }\n \n     fn check_with_config(config: CompletionConfig, ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list_with_config(config, ra_fixture, CompletionKind::Reference);\n+        let actual =\n+            filtered_completion_list_with_config(config, ra_fixture, CompletionKind::Reference);\n         expect.assert_eq(&actual)\n     }\n "}, {"sha": "121909857bd64ed4a8cac2effbd0e9bf119bd414", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -695,7 +695,7 @@ mod tests {\n     use expect_test::{expect, Expect};\n     use hir::HirDisplay;\n \n-    use crate::test_utils::{position, TEST_CONFIG};\n+    use crate::tests::{position, TEST_CONFIG};\n \n     use super::CompletionContext;\n "}, {"sha": "bf73818dc569b0ab7ba90c10e223ca74ddccc0a1", "filename": "crates/ide_completion/src/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Flib.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -9,8 +9,6 @@ mod render;\n \n #[cfg(test)]\n mod tests;\n-#[cfg(test)]\n-mod test_utils;\n \n use completions::flyimport::position_for_import;\n use ide_db::{"}, {"sha": "62e4334decdf820126ce042d881dbf3d498ae8b7", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -11,7 +11,7 @@ use syntax::{\n };\n \n #[cfg(test)]\n-use crate::test_utils::{check_pattern_is_applicable, check_pattern_is_not_applicable};\n+use crate::tests::{check_pattern_is_applicable, check_pattern_is_not_applicable};\n \n /// Immediate previous node to what we are completing.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n@@ -324,7 +324,7 @@ fn previous_non_trivia_token(token: SyntaxToken) -> Option<SyntaxToken> {\n mod tests {\n     use syntax::algo::find_node_at_offset;\n \n-    use crate::test_utils::position;\n+    use crate::tests::position;\n \n     use super::*;\n "}, {"sha": "4b55f7504daedf223682f9d8c9bd776bcf1ef465", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -335,7 +335,7 @@ mod tests {\n \n     use crate::{\n         item::CompletionRelevanceTypeMatch,\n-        test_utils::{check_edit, do_completion, get_all_items, TEST_CONFIG},\n+        tests::{check_edit, do_completion, get_all_items, TEST_CONFIG},\n         CompletionKind, CompletionRelevance,\n     };\n "}, {"sha": "91dc178f345cf3aee9b76a54ae7dd924579a29bb", "filename": "crates/ide_completion/src/render/enum_variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fenum_variant.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -121,7 +121,7 @@ impl<'a> EnumRender<'a> {\n \n #[cfg(test)]\n mod tests {\n-    use crate::test_utils::check_edit;\n+    use crate::tests::check_edit;\n \n     #[test]\n     fn inserts_parens_for_tuple_enums() {"}, {"sha": "19f2c86e9c40ce7eed8cf56bda3cbda73550b8a6", "filename": "crates/ide_completion/src/render/function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Ffunction.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -191,7 +191,7 @@ impl<'a> FunctionRender<'a> {\n #[cfg(test)]\n mod tests {\n     use crate::{\n-        test_utils::{check_edit, check_edit_with_config, TEST_CONFIG},\n+        tests::{check_edit, check_edit_with_config, TEST_CONFIG},\n         CompletionConfig,\n     };\n "}, {"sha": "d5a1f45d3e6c0ffe3731faabbc1635d194d251f3", "filename": "crates/ide_completion/src/render/macro_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fmacro_.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -133,7 +133,7 @@ fn guess_macro_braces(macro_name: &str, docs: &str) -> (&'static str, &'static s\n \n #[cfg(test)]\n mod tests {\n-    use crate::test_utils::check_edit;\n+    use crate::tests::check_edit;\n \n     #[test]\n     fn dont_insert_macro_call_parens_unncessary() {"}, {"sha": "b0a4b2026b0b947ee243438438a40f8f24172fa7", "filename": "crates/ide_completion/src/test_utils.rs", "status": "removed", "additions": 0, "deletions": 154, "changes": 154, "blob_url": "https://github.com/rust-lang/rust/blob/11115ebad8d0cb367478a4f154abe08c0c25aa95/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11115ebad8d0cb367478a4f154abe08c0c25aa95/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftest_utils.rs?ref=11115ebad8d0cb367478a4f154abe08c0c25aa95", "patch": "@@ -1,154 +0,0 @@\n-//! Runs completion for testing purposes.\n-\n-use hir::{PrefixKind, Semantics};\n-use ide_db::{\n-    base_db::{fixture::ChangeFixture, FileLoader, FilePosition},\n-    helpers::{\n-        insert_use::{ImportGranularity, InsertUseConfig},\n-        SnippetCap,\n-    },\n-    RootDatabase,\n-};\n-use itertools::Itertools;\n-use stdx::{format_to, trim_indent};\n-use syntax::{AstNode, NodeOrToken, SyntaxElement};\n-use test_utils::assert_eq_text;\n-\n-use crate::{item::CompletionKind, CompletionConfig, CompletionItem};\n-\n-pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n-    enable_postfix_completions: true,\n-    enable_imports_on_the_fly: true,\n-    enable_self_on_the_fly: true,\n-    add_call_parenthesis: true,\n-    add_call_argument_snippets: true,\n-    snippet_cap: SnippetCap::new(true),\n-    insert_use: InsertUseConfig {\n-        granularity: ImportGranularity::Crate,\n-        prefix_kind: PrefixKind::Plain,\n-        enforce_granularity: true,\n-        group: true,\n-    },\n-};\n-\n-/// Creates analysis from a multi-file fixture, returns positions marked with $0.\n-pub(crate) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {\n-    let change_fixture = ChangeFixture::parse(ra_fixture);\n-    let mut database = RootDatabase::default();\n-    database.apply_change(change_fixture.change);\n-    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker ($0)\");\n-    let offset = range_or_offset.expect_offset();\n-    (database, FilePosition { file_id, offset })\n-}\n-\n-pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n-    do_completion_with_config(TEST_CONFIG, code, kind)\n-}\n-\n-pub(crate) fn do_completion_with_config(\n-    config: CompletionConfig,\n-    code: &str,\n-    kind: CompletionKind,\n-) -> Vec<CompletionItem> {\n-    get_all_items(config, code)\n-        .into_iter()\n-        .filter(|c| c.completion_kind == kind)\n-        .sorted_by(|l, r| l.label().cmp(r.label()))\n-        .collect()\n-}\n-\n-pub(crate) fn completion_list(code: &str, kind: CompletionKind) -> String {\n-    completion_list_with_config(TEST_CONFIG, code, kind)\n-}\n-\n-pub(crate) fn completion_list_with_config(\n-    config: CompletionConfig,\n-    code: &str,\n-    kind: CompletionKind,\n-) -> String {\n-    let kind_completions: Vec<CompletionItem> =\n-        get_all_items(config, code).into_iter().filter(|c| c.completion_kind == kind).collect();\n-    let label_width = kind_completions\n-        .iter()\n-        .map(|it| monospace_width(it.label()))\n-        .max()\n-        .unwrap_or_default()\n-        .min(16);\n-    kind_completions\n-        .into_iter()\n-        .map(|it| {\n-            let tag = it.kind().unwrap().tag();\n-            let var_name = format!(\"{} {}\", tag, it.label());\n-            let mut buf = var_name;\n-            if let Some(detail) = it.detail() {\n-                let width = label_width.saturating_sub(monospace_width(it.label()));\n-                format_to!(buf, \"{:width$} {}\", \"\", detail, width = width);\n-            }\n-            if it.deprecated() {\n-                format_to!(buf, \" DEPRECATED\");\n-            }\n-            format_to!(buf, \"\\n\");\n-            buf\n-        })\n-        .collect()\n-}\n-\n-fn monospace_width(s: &str) -> usize {\n-    s.chars().count()\n-}\n-\n-pub(crate) fn check_edit(what: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n-    check_edit_with_config(TEST_CONFIG, what, ra_fixture_before, ra_fixture_after)\n-}\n-\n-pub(crate) fn check_edit_with_config(\n-    config: CompletionConfig,\n-    what: &str,\n-    ra_fixture_before: &str,\n-    ra_fixture_after: &str,\n-) {\n-    let ra_fixture_after = trim_indent(ra_fixture_after);\n-    let (db, position) = position(ra_fixture_before);\n-    let completions: Vec<CompletionItem> =\n-        crate::completions(&db, &config, position).unwrap().into();\n-    let (completion,) = completions\n-        .iter()\n-        .filter(|it| it.lookup() == what)\n-        .collect_tuple()\n-        .unwrap_or_else(|| panic!(\"can't find {:?} completion in {:#?}\", what, completions));\n-    let mut actual = db.file_text(position.file_id).to_string();\n-\n-    let mut combined_edit = completion.text_edit().to_owned();\n-    if let Some(import_text_edit) =\n-        completion.import_to_add().and_then(|edit| edit.to_text_edit(config.insert_use))\n-    {\n-        combined_edit.union(import_text_edit).expect(\n-            \"Failed to apply completion resolve changes: change ranges overlap, but should not\",\n-        )\n-    }\n-\n-    combined_edit.apply(&mut actual);\n-    assert_eq_text!(&ra_fixture_after, &actual)\n-}\n-\n-pub(crate) fn check_pattern_is_applicable(code: &str, check: impl FnOnce(SyntaxElement) -> bool) {\n-    let (db, pos) = position(code);\n-\n-    let sema = Semantics::new(&db);\n-    let original_file = sema.parse(pos.file_id);\n-    let token = original_file.syntax().token_at_offset(pos.offset).left_biased().unwrap();\n-    assert!(check(NodeOrToken::Token(token)));\n-}\n-\n-pub(crate) fn check_pattern_is_not_applicable(code: &str, check: fn(SyntaxElement) -> bool) {\n-    let (db, pos) = position(code);\n-    let sema = Semantics::new(&db);\n-    let original_file = sema.parse(pos.file_id);\n-    let token = original_file.syntax().token_at_offset(pos.offset).left_biased().unwrap();\n-    assert!(!check(NodeOrToken::Token(token)));\n-}\n-\n-pub(crate) fn get_all_items(config: CompletionConfig, code: &str) -> Vec<CompletionItem> {\n-    let (db, position) = position(code);\n-    crate::completions(&db, &config, position).unwrap().into()\n-}"}, {"sha": "1495924ea360df8a1131be1e59de04d096b4caad", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 130, "deletions": 28, "changes": 158, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -1,30 +1,91 @@\n mod item_list;\n \n-use expect_test::Expect;\n-use stdx::format_to;\n+use hir::{PrefixKind, Semantics};\n+use ide_db::{\n+    base_db::{fixture::ChangeFixture, FileLoader, FilePosition},\n+    helpers::{\n+        insert_use::{ImportGranularity, InsertUseConfig},\n+        SnippetCap,\n+    },\n+    RootDatabase,\n+};\n+use itertools::Itertools;\n+use stdx::{format_to, trim_indent};\n+use syntax::{AstNode, NodeOrToken, SyntaxElement};\n+use test_utils::assert_eq_text;\n+\n+use crate::{item::CompletionKind, CompletionConfig, CompletionItem};\n \n-use crate::{\n-    test_utils::{self, get_all_items, TEST_CONFIG},\n-    CompletionConfig, CompletionItem,\n+pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n+    enable_postfix_completions: true,\n+    enable_imports_on_the_fly: true,\n+    enable_self_on_the_fly: true,\n+    add_call_parenthesis: true,\n+    add_call_argument_snippets: true,\n+    snippet_cap: SnippetCap::new(true),\n+    insert_use: InsertUseConfig {\n+        granularity: ImportGranularity::Crate,\n+        prefix_kind: PrefixKind::Plain,\n+        enforce_granularity: true,\n+        group: true,\n+    },\n };\n \n fn completion_list(code: &str) -> String {\n     completion_list_with_config(TEST_CONFIG, code)\n }\n \n fn completion_list_with_config(config: CompletionConfig, code: &str) -> String {\n+    render_completion_list(get_all_items(config, code))\n+}\n+\n+/// Creates analysis from a multi-file fixture, returns positions marked with $0.\n+pub(crate) fn position(ra_fixture: &str) -> (RootDatabase, FilePosition) {\n+    let change_fixture = ChangeFixture::parse(ra_fixture);\n+    let mut database = RootDatabase::default();\n+    database.apply_change(change_fixture.change);\n+    let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker ($0)\");\n+    let offset = range_or_offset.expect_offset();\n+    (database, FilePosition { file_id, offset })\n+}\n+\n+pub(crate) fn do_completion(code: &str, kind: CompletionKind) -> Vec<CompletionItem> {\n+    do_completion_with_config(TEST_CONFIG, code, kind)\n+}\n+\n+pub(crate) fn do_completion_with_config(\n+    config: CompletionConfig,\n+    code: &str,\n+    kind: CompletionKind,\n+) -> Vec<CompletionItem> {\n+    get_all_items(config, code)\n+        .into_iter()\n+        .filter(|c| c.completion_kind == kind)\n+        .sorted_by(|l, r| l.label().cmp(r.label()))\n+        .collect()\n+}\n+\n+pub(crate) fn filtered_completion_list(code: &str, kind: CompletionKind) -> String {\n+    filtered_completion_list_with_config(TEST_CONFIG, code, kind)\n+}\n+\n+pub(crate) fn filtered_completion_list_with_config(\n+    config: CompletionConfig,\n+    code: &str,\n+    kind: CompletionKind,\n+) -> String {\n+    let kind_completions: Vec<CompletionItem> =\n+        get_all_items(config, code).into_iter().filter(|c| c.completion_kind == kind).collect();\n+    render_completion_list(kind_completions)\n+}\n+\n+fn render_completion_list(completions: Vec<CompletionItem>) -> String {\n     fn monospace_width(s: &str) -> usize {\n         s.chars().count()\n     }\n-\n-    let kind_completions: Vec<CompletionItem> = get_all_items(config, code).into_iter().collect();\n-    let label_width = kind_completions\n-        .iter()\n-        .map(|it| monospace_width(it.label()))\n-        .max()\n-        .unwrap_or_default()\n-        .min(16);\n-    kind_completions\n+    let label_width =\n+        completions.iter().map(|it| monospace_width(it.label())).max().unwrap_or_default().min(16);\n+    completions\n         .into_iter()\n         .map(|it| {\n             let tag = it.kind().unwrap().tag();\n@@ -43,23 +104,64 @@ fn completion_list_with_config(config: CompletionConfig, code: &str) -> String {\n         .collect()\n }\n \n-fn check(ra_fixture: &str, expect: Expect) {\n-    let base = r#\"#[rustc_builtin_macro]\n-pub macro Clone {}\n-enum Enum { Variant }\n-struct Struct {}\n-#[macro_export]\n-macro_rules! foo {}\n-mod bar {}\n-const CONST: () = ();\n-trait Trait {}\n-\"#;\n-    let actual = completion_list(&format!(\"{}{}\", base, ra_fixture));\n-    expect.assert_eq(&actual)\n+pub(crate) fn check_edit(what: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n+    check_edit_with_config(TEST_CONFIG, what, ra_fixture_before, ra_fixture_after)\n+}\n+\n+pub(crate) fn check_edit_with_config(\n+    config: CompletionConfig,\n+    what: &str,\n+    ra_fixture_before: &str,\n+    ra_fixture_after: &str,\n+) {\n+    let ra_fixture_after = trim_indent(ra_fixture_after);\n+    let (db, position) = position(ra_fixture_before);\n+    let completions: Vec<CompletionItem> =\n+        crate::completions(&db, &config, position).unwrap().into();\n+    let (completion,) = completions\n+        .iter()\n+        .filter(|it| it.lookup() == what)\n+        .collect_tuple()\n+        .unwrap_or_else(|| panic!(\"can't find {:?} completion in {:#?}\", what, completions));\n+    let mut actual = db.file_text(position.file_id).to_string();\n+\n+    let mut combined_edit = completion.text_edit().to_owned();\n+    if let Some(import_text_edit) =\n+        completion.import_to_add().and_then(|edit| edit.to_text_edit(config.insert_use))\n+    {\n+        combined_edit.union(import_text_edit).expect(\n+            \"Failed to apply completion resolve changes: change ranges overlap, but should not\",\n+        )\n+    }\n+\n+    combined_edit.apply(&mut actual);\n+    assert_eq_text!(&ra_fixture_after, &actual)\n+}\n+\n+pub(crate) fn check_pattern_is_applicable(code: &str, check: impl FnOnce(SyntaxElement) -> bool) {\n+    let (db, pos) = position(code);\n+\n+    let sema = Semantics::new(&db);\n+    let original_file = sema.parse(pos.file_id);\n+    let token = original_file.syntax().token_at_offset(pos.offset).left_biased().unwrap();\n+    assert!(check(NodeOrToken::Token(token)));\n+}\n+\n+pub(crate) fn check_pattern_is_not_applicable(code: &str, check: fn(SyntaxElement) -> bool) {\n+    let (db, pos) = position(code);\n+    let sema = Semantics::new(&db);\n+    let original_file = sema.parse(pos.file_id);\n+    let token = original_file.syntax().token_at_offset(pos.offset).left_biased().unwrap();\n+    assert!(!check(NodeOrToken::Token(token)));\n+}\n+\n+pub(crate) fn get_all_items(config: CompletionConfig, code: &str) -> Vec<CompletionItem> {\n+    let (db, position) = position(code);\n+    crate::completions(&db, &config, position).unwrap().into()\n }\n \n fn check_no_completion(ra_fixture: &str) {\n-    let (db, position) = test_utils::position(ra_fixture);\n+    let (db, position) = position(ra_fixture);\n \n     assert!(\n         crate::completions(&db, &TEST_CONFIG, position).is_none(),"}, {"sha": "7c124ac370bc0bf1a23506dfe81b1573d0fa33d3", "filename": "crates/ide_completion/src/tests/item_list.rs", "status": "modified", "additions": 20, "deletions": 12, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=aa644b55859c6b5c6695a5d4fb35d1b6efbbebcc", "patch": "@@ -1,14 +1,26 @@\n-use expect_test::expect;\n+use expect_test::{expect, Expect};\n \n-use crate::tests::check;\n+use crate::tests::completion_list;\n+\n+fn check(ra_fixture: &str, expect: Expect) {\n+    let base = r#\"#[rustc_builtin_macro]\n+pub macro Clone {}\n+enum Enum { Variant }\n+struct Struct {}\n+#[macro_export]\n+macro_rules! foo {}\n+mod bar {}\n+const CONST: () = ();\n+trait Trait {}\n+\"#;\n+    let actual = completion_list(&format!(\"{}{}\", base, ra_fixture));\n+    expect.assert_eq(&actual)\n+}\n \n #[test]\n fn in_mod_item_list() {\n     check(\n-        r#\"mod tests {\n-    $0\n-}\n-\"#,\n+        r#\"mod tests { $0 }\"#,\n         expect![[r##\"\n             kw pub(crate)\n             kw pub\n@@ -164,9 +176,7 @@ fn after_visibility_unsafe() {\n #[test]\n fn in_impl_assoc_item_list() {\n     check(\n-        r#\"impl Struct {\n-    $0\n-}\"#,\n+        r#\"impl Struct { $0 }\"#,\n         expect![[r##\"\n             kw pub(crate)\n             kw pub\n@@ -184,9 +194,7 @@ fn in_impl_assoc_item_list() {\n #[test]\n fn in_impl_assoc_item_list_after_attr() {\n     check(\n-        r#\"impl Struct {\n-    #[attr] $0\n-}\"#,\n+        r#\"impl Struct { #[attr] $0 }\"#,\n         expect![[r#\"\n             kw pub(crate)\n             kw pub"}]}