{"sha": "9c5cfea43da9b4e0372f240e01f58c977bd44d92", "node_id": "MDY6Q29tbWl0NzI0NzEyOjljNWNmZWE0M2RhOWI0ZTAzNzJmMjQwZTAxZjU4Yzk3N2JkNDRkOTI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-11T14:48:34Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-08-12T21:58:57Z"}, "message": "traits: consider whether origin is RFC1214 when caching, ensuring\nthat the test rfc1214-warn-and-error.rs reports an error", "tree": {"sha": "efe99e4051155bf3dbc4f80d565f6f15586487c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efe99e4051155bf3dbc4f80d565f6f15586487c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9c5cfea43da9b4e0372f240e01f58c977bd44d92", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9c5cfea43da9b4e0372f240e01f58c977bd44d92", "html_url": "https://github.com/rust-lang/rust/commit/9c5cfea43da9b4e0372f240e01f58c977bd44d92", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9c5cfea43da9b4e0372f240e01f58c977bd44d92/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb1b6fca3638f0e3edf5a1aca8cb379d95cf2ab8", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb1b6fca3638f0e3edf5a1aca8cb379d95cf2ab8", "html_url": "https://github.com/rust-lang/rust/commit/fb1b6fca3638f0e3edf5a1aca8cb379d95cf2ab8"}], "stats": {"total": 79, "additions": 68, "deletions": 11}, "files": [{"sha": "1fca66f1379189ac3b205e199f457e33dded7cce", "filename": "src/librustc/middle/traits/fulfill.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9c5cfea43da9b4e0372f240e01f58c977bd44d92/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5cfea43da9b4e0372f240e01f58c977bd44d92/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Ffulfill.rs?ref=9c5cfea43da9b4e0372f240e01f58c977bd44d92", "patch": "@@ -27,12 +27,13 @@ use super::ObligationCause;\n use super::ObligationCauseCode;\n use super::PredicateObligation;\n use super::project;\n+use super::RFC1214Warning;\n use super::select::SelectionContext;\n use super::Unimplemented;\n use super::util::predicate_for_builtin_bound;\n \n pub struct FulfilledPredicates<'tcx> {\n-    set: HashSet<ty::Predicate<'tcx>>\n+    set: HashSet<(RFC1214Warning, ty::Predicate<'tcx>)>\n }\n \n /// The fulfillment context is used to drive trait resolution.  It\n@@ -190,7 +191,9 @@ impl<'tcx> FulfillmentContext<'tcx> {\n \n         assert!(!obligation.has_escaping_regions());\n \n-        if self.is_duplicate_or_add(infcx.tcx, &obligation.predicate) {\n+        let w = RFC1214Warning(obligation.cause.code.is_rfc1214());\n+\n+        if self.is_duplicate_or_add(infcx.tcx, w, &obligation.predicate) {\n             debug!(\"register_predicate({:?}) -- already seen, skip\", obligation);\n             return;\n         }\n@@ -253,7 +256,9 @@ impl<'tcx> FulfillmentContext<'tcx> {\n         &self.predicates\n     }\n \n-    fn is_duplicate_or_add(&mut self, tcx: &ty::ctxt<'tcx>,\n+    fn is_duplicate_or_add(&mut self,\n+                           tcx: &ty::ctxt<'tcx>,\n+                           w: RFC1214Warning,\n                            predicate: &ty::Predicate<'tcx>)\n                            -> bool {\n         // This is a kind of dirty hack to allow us to avoid \"rederiving\"\n@@ -268,10 +273,12 @@ impl<'tcx> FulfillmentContext<'tcx> {\n         // evaluating the 'nested obligations'.  This cache lets us\n         // skip those.\n \n-        if self.errors_will_be_reported && predicate.is_global() {\n-            tcx.fulfilled_predicates.borrow_mut().is_duplicate_or_add(predicate)\n+        let will_warn_due_to_rfc1214 = w.0;\n+        let errors_will_be_reported = self.errors_will_be_reported && !will_warn_due_to_rfc1214;\n+        if errors_will_be_reported && predicate.is_global() {\n+            tcx.fulfilled_predicates.borrow_mut().is_duplicate_or_add(w, predicate)\n         } else {\n-            self.duplicate_set.is_duplicate_or_add(predicate)\n+            self.duplicate_set.is_duplicate_or_add(w, predicate)\n         }\n     }\n \n@@ -537,11 +544,13 @@ impl<'tcx> FulfilledPredicates<'tcx> {\n         }\n     }\n \n-    pub fn is_duplicate(&self, p: &ty::Predicate<'tcx>) -> bool {\n-        self.set.contains(p)\n+    pub fn is_duplicate(&self, w: RFC1214Warning, p: &ty::Predicate<'tcx>) -> bool {\n+        let key = (w, p.clone());\n+        self.set.contains(&key)\n     }\n \n-    fn is_duplicate_or_add(&mut self, p: &ty::Predicate<'tcx>) -> bool {\n-        !self.set.insert(p.clone())\n+    fn is_duplicate_or_add(&mut self, w: RFC1214Warning, p: &ty::Predicate<'tcx>) -> bool {\n+        let key = (w, p.clone());\n+        !self.set.insert(key)\n     }\n }"}, {"sha": "6c501b1a609c4feeae55abe9e0e65d357f71b1d7", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9c5cfea43da9b4e0372f240e01f58c977bd44d92/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5cfea43da9b4e0372f240e01f58c977bd44d92/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=9c5cfea43da9b4e0372f240e01f58c977bd44d92", "patch": "@@ -528,6 +528,15 @@ impl<'tcx> ObligationCause<'tcx> {\n     }\n }\n \n+/// This marker is used in some caches to record whether the\n+/// predicate, if it is found to be false, will yield a warning (due\n+/// to RFC1214) or an error. We separate these two cases in the cache\n+/// so that if we see the same predicate twice, first resulting in a\n+/// warning, and next resulting in an error, we still report the\n+/// error, rather than considering it a duplicate.\n+#[derive(Copy, Clone, PartialEq, Eq, Hash)]\n+pub struct RFC1214Warning(bool);\n+\n impl<'tcx> ObligationCauseCode<'tcx> {\n     pub fn is_rfc1214(&self) -> bool {\n         match *self {"}, {"sha": "f63523b77d60f64cb0ff04d965263f88a27c6b9f", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9c5cfea43da9b4e0372f240e01f58c977bd44d92/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5cfea43da9b4e0372f240e01f58c977bd44d92/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=9c5cfea43da9b4e0372f240e01f58c977bd44d92", "patch": "@@ -27,6 +27,7 @@ use super::{ObligationCauseCode, BuiltinDerivedObligation, ImplDerivedObligation\n use super::{SelectionError, Unimplemented, OutputTypeParameterMismatch};\n use super::{ObjectCastObligation, Obligation};\n use super::TraitNotObjectSafe;\n+use super::RFC1214Warning;\n use super::Selection;\n use super::SelectionResult;\n use super::{VtableBuiltin, VtableImpl, VtableParam, VtableClosure,\n@@ -445,7 +446,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         // have been proven elsewhere. This cache only contains\n         // predicates that are global in scope and hence unaffected by\n         // the current environment.\n-        if self.tcx().fulfilled_predicates.borrow().is_duplicate(&obligation.predicate) {\n+        let w = RFC1214Warning(false);\n+        if self.tcx().fulfilled_predicates.borrow().is_duplicate(w, &obligation.predicate) {\n             return EvaluatedToOk;\n         }\n "}, {"sha": "50fd3fc961c1d808fa9e98147b594cb07bdcb5bf", "filename": "src/test/compile-fail/rfc1214-warn-and-error.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9c5cfea43da9b4e0372f240e01f58c977bd44d92/src%2Ftest%2Fcompile-fail%2Frfc1214-warn-and-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9c5cfea43da9b4e0372f240e01f58c977bd44d92/src%2Ftest%2Fcompile-fail%2Frfc1214-warn-and-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc1214-warn-and-error.rs?ref=9c5cfea43da9b4e0372f240e01f58c977bd44d92", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that an RFC1214 warning from an earlier function (`foo`) does\n+// not suppress an error for the same problem (`WantEq<NotEq>`,\n+// `NotEq: !Eq`) in a later function (`bar)`. Earlier versions of the\n+// warning mechanism had an issue due to caching.\n+\n+#![allow(dead_code)]\n+#![allow(unused_variables)]\n+\n+struct WantEq<T:Eq> { t: T }\n+\n+struct NotEq;\n+\n+trait Trait<T> { }\n+\n+fn foo() {\n+    let x: Box<Trait<WantEq<NotEq>>> = loop { };\n+    //~^ WARN E0277\n+}\n+\n+fn bar() {\n+    wf::<WantEq<NotEq>>();\n+    //~^ ERROR E0277\n+}\n+\n+fn wf<T>() { }\n+\n+fn main() { }"}]}