{"sha": "2cff123416cf62648ddbe7aab387aabe1a01314f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjZmYxMjM0MTZjZjYyNjQ4ZGRiZTdhYWIzODdhYWJlMWEwMTMxNGY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-04T16:52:26Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-02-06T03:16:42Z"}, "message": "Add -Zepoch", "tree": {"sha": "0b6c86b3c9dd706346d4311cb5d548143c76cc81", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b6c86b3c9dd706346d4311cb5d548143c76cc81"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2cff123416cf62648ddbe7aab387aabe1a01314f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2cff123416cf62648ddbe7aab387aabe1a01314f", "html_url": "https://github.com/rust-lang/rust/commit/2cff123416cf62648ddbe7aab387aabe1a01314f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2cff123416cf62648ddbe7aab387aabe1a01314f/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9af374abf9d41c533afa46e62e1047097c190445", "url": "https://api.github.com/repos/rust-lang/rust/commits/9af374abf9d41c533afa46e62e1047097c190445", "html_url": "https://github.com/rust-lang/rust/commit/9af374abf9d41c533afa46e62e1047097c190445"}], "stats": {"total": 53, "additions": 50, "deletions": 3}, "files": [{"sha": "a7a261950593164b3f4736bd86c8e073a722c8d5", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2cff123416cf62648ddbe7aab387aabe1a01314f/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cff123416cf62648ddbe7aab387aabe1a01314f/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=2cff123416cf62648ddbe7aab387aabe1a01314f", "patch": "@@ -58,6 +58,7 @@\n #![feature(macro_vis_matcher)]\n #![feature(match_default_bindings)]\n #![feature(never_type)]\n+#![feature(non_exhaustive)]\n #![feature(nonzero)]\n #![feature(quote)]\n #![feature(refcell_replace_swap)]"}, {"sha": "f1590f4aced45099605e9bab829d35da78d21b67", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 43, "deletions": 2, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2cff123416cf62648ddbe7aab387aabe1a01314f/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cff123416cf62648ddbe7aab387aabe1a01314f/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=2cff123416cf62648ddbe7aab387aabe1a01314f", "patch": "@@ -112,6 +112,31 @@ pub enum OutputType {\n     DepInfo,\n }\n \n+/// The epoch of the compiler (RFC 2052)\n+#[derive(Clone, Copy, Hash, PartialOrd, Ord, Eq, PartialEq)]\n+#[non_exhaustive]\n+pub enum Epoch {\n+    // epochs must be kept in order, newest to oldest\n+\n+    /// The 2015 epoch\n+    Epoch2015,\n+    /// The 2018 epoch\n+    Epoch2018,\n+\n+    // when adding new epochs, be sure to update:\n+    //\n+    // - the list in the `parse_epoch` static\n+    // - the match in the `parse_epoch` function\n+    // - add a `rust_####()` function to the session\n+    // - update the enum in Cargo's sources as well\n+    //\n+    // When -Zepoch becomes --epoch, there will\n+    // also be a check for the epoch being nightly-only\n+    // somewhere. That will need to be updated\n+    // whenever we're stabilizing/introducing a new epoch\n+    // as well as changing the default Cargo template.\n+}\n+\n impl_stable_hash_for!(enum self::OutputType {\n     Bitcode,\n     Assembly,\n@@ -802,11 +827,13 @@ macro_rules! options {\n             Some(\"`string` or `string=string`\");\n         pub const parse_lto: Option<&'static str> =\n             Some(\"one of `thin`, `fat`, or omitted\");\n+        pub const parse_epoch: Option<&'static str> =\n+            Some(\"one of: `2015`, `2018`\");\n     }\n \n     #[allow(dead_code)]\n     mod $mod_set {\n-        use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto};\n+        use super::{$struct_name, Passes, SomePasses, AllPasses, Sanitizer, Lto, Epoch};\n         use rustc_back::{LinkerFlavor, PanicStrategy, RelroLevel};\n         use std::path::PathBuf;\n \n@@ -1010,6 +1037,15 @@ macro_rules! options {\n             };\n             true\n         }\n+\n+        fn parse_epoch(slot: &mut Epoch, v: Option<&str>) -> bool {\n+            match v {\n+                Some(\"2015\") => *slot = Epoch::Epoch2015,\n+                Some(\"2018\") => *slot = Epoch::Epoch2018,\n+                _ => return false,\n+            }\n+            true\n+        }\n     }\n ) }\n \n@@ -1297,6 +1333,10 @@ options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n         `everybody_loops` (all function bodies replaced with `loop {}`),\n         `hir` (the HIR), `hir,identified`, or\n         `hir,typed` (HIR with types for each node).\"),\n+    epoch: Epoch = (Epoch::Epoch2015, parse_epoch, [TRACKED],\n+        \"The epoch to build Rust with. Newer epochs may include features\n+         that require breaking changes. The default epoch is 2015 (the first\n+         epoch). Crates compiled with different epochs can be linked together.\"),\n }\n \n pub fn default_lib_output() -> CrateType {\n@@ -2088,7 +2128,7 @@ mod dep_tracking {\n     use std::path::PathBuf;\n     use std::collections::hash_map::DefaultHasher;\n     use super::{Passes, CrateType, OptLevel, DebugInfoLevel, Lto,\n-                OutputTypes, Externs, ErrorOutputType, Sanitizer};\n+                OutputTypes, Externs, ErrorOutputType, Sanitizer, Epoch};\n     use syntax::feature_gate::UnstableFeatures;\n     use rustc_back::{PanicStrategy, RelroLevel};\n \n@@ -2150,6 +2190,7 @@ mod dep_tracking {\n     impl_dep_tracking_hash_via_hash!(cstore::NativeLibraryKind);\n     impl_dep_tracking_hash_via_hash!(Sanitizer);\n     impl_dep_tracking_hash_via_hash!(Option<Sanitizer>);\n+    impl_dep_tracking_hash_via_hash!(Epoch);\n \n     impl_dep_tracking_hash_for_sortable_vec_of!(String);\n     impl_dep_tracking_hash_for_sortable_vec_of!(PathBuf);"}, {"sha": "9d7a9acc3d533bdb97375b6cc3d569a4885ce694", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2cff123416cf62648ddbe7aab387aabe1a01314f/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2cff123416cf62648ddbe7aab387aabe1a01314f/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=2cff123416cf62648ddbe7aab387aabe1a01314f", "patch": "@@ -19,7 +19,7 @@ use lint;\n use middle::allocator::AllocatorKind;\n use middle::dependency_format;\n use session::search_paths::PathKind;\n-use session::config::{BorrowckMode, DebugInfoLevel, OutputType};\n+use session::config::{BorrowckMode, DebugInfoLevel, OutputType, Epoch};\n use ty::tls;\n use util::nodemap::{FxHashMap, FxHashSet};\n use util::common::{duration_to_secs_str, ErrorReported};\n@@ -864,6 +864,11 @@ impl Session {\n     pub fn teach(&self, code: &DiagnosticId) -> bool {\n         self.opts.debugging_opts.teach && !self.parse_sess.span_diagnostic.code_emitted(code)\n     }\n+\n+    /// Are we allowed to use features from the Rust 2018 epoch?\n+    pub fn rust_2018(&self) -> bool {\n+        self.opts.debugging_opts.epoch >= Epoch::Epoch2018\n+    }\n }\n \n pub fn build_session(sopts: config::Options,"}]}