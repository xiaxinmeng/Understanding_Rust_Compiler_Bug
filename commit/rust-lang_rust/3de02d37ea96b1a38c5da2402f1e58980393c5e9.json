{"sha": "3de02d37ea96b1a38c5da2402f1e58980393c5e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZTAyZDM3ZWE5NmIxYTM4YzVkYTI0MDJmMWU1ODk4MDM5M2M1ZTk=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2018-08-17T15:23:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-08-17T15:23:36Z"}, "message": "Rollup merge of #53347 - eddyb:no-crate-in-root, r=petrochenkov\n\nrustc_resolve: don't allow paths starting with `::crate`.\n\ncc @aturon @joshtriplett\nr? @petrochenkov", "tree": {"sha": "ca27495d12f29235e9f469e765ce092a7cb9358a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca27495d12f29235e9f469e765ce092a7cb9358a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3de02d37ea96b1a38c5da2402f1e58980393c5e9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbduh4CRBK7hj4Ov3rIwAAdHIIACjXoLuOMvygSrpGI7JESh8r\nrvhCzxqNouTF1mOmSPLrj1KOej0zmpScg1T12WP0ErAJOjyL1Z6i883o+uF8TYVa\n4oamne1+m7Rkf0+BYTCq8V20Qo4k2ia0WvaNkZUU2n3A+nvxedYq8fEYovHcg1AM\ntpONZ0Ij/W5C1d/8eadunGUUg3nwxXejj4E8nHmN038EyhYpzL8XAL0dZMLZfHUV\nxGKiCpchY+BFqWqh2sDQ54BT7zEYmo5OQf3b/M3DjGCVkpehzIAdmCWyJb35dIP0\nEHHLaHrrDA2qwrYU7o6DHa9VsBd7xdiYkaxN99m6za/AH/ZFlAboEfmWwl6eWPU=\n=CN5w\n-----END PGP SIGNATURE-----\n", "payload": "tree ca27495d12f29235e9f469e765ce092a7cb9358a\nparent 90188078628e0f1c8f5eec7583f0f0dcc2f8ce2b\nparent 9b1d3c70ac5e16fd43daf0b56c739c6bd5ded3fd\nauthor Corey Farwell <coreyf@rwell.org> 1534519416 -0700\ncommitter GitHub <noreply@github.com> 1534519416 -0700\n\nRollup merge of #53347 - eddyb:no-crate-in-root, r=petrochenkov\n\nrustc_resolve: don't allow paths starting with `::crate`.\n\ncc @aturon @joshtriplett\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3de02d37ea96b1a38c5da2402f1e58980393c5e9", "html_url": "https://github.com/rust-lang/rust/commit/3de02d37ea96b1a38c5da2402f1e58980393c5e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3de02d37ea96b1a38c5da2402f1e58980393c5e9/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90188078628e0f1c8f5eec7583f0f0dcc2f8ce2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/90188078628e0f1c8f5eec7583f0f0dcc2f8ce2b", "html_url": "https://github.com/rust-lang/rust/commit/90188078628e0f1c8f5eec7583f0f0dcc2f8ce2b"}, {"sha": "9b1d3c70ac5e16fd43daf0b56c739c6bd5ded3fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b1d3c70ac5e16fd43daf0b56c739c6bd5ded3fd", "html_url": "https://github.com/rust-lang/rust/commit/9b1d3c70ac5e16fd43daf0b56c739c6bd5ded3fd"}], "stats": {"total": 145, "additions": 71, "deletions": 74}, "files": [{"sha": "4e16e61aa0d398cb0f21cfd60a67a64af037403c", "filename": "src/Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=3de02d37ea96b1a38c5da2402f1e58980393c5e9", "patch": "@@ -308,7 +308,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"chalk-engine\"\n-version = \"0.6.0\"\n+version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"chalk-macros 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1897,7 +1897,7 @@ dependencies = [\n  \"backtrace 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"byteorder 1.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"chalk-engine 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chalk-engine 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n@@ -2408,7 +2408,7 @@ name = \"rustc_traits\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"chalk-engine 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"chalk-engine 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n  \"log 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc 0.0.0\",\n@@ -3135,7 +3135,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum cargo_metadata 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2d6809b327f87369e6f3651efd2c5a96c49847a3ed2559477ecba79014751ee1\"\n \"checksum cc 1.0.18 (registry+https://github.com/rust-lang/crates.io-index)\" = \"2119ea4867bd2b8ed3aecab467709720b2d55b1bcfe09f772fd68066eaf15275\"\n \"checksum cfg-if 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"efe5c877e17a9c717a0bf3613b2709f723202c4e4675cc8f12926ded29bcb17e\"\n-\"checksum chalk-engine 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a146c19172c7eea48ea55a7123ac95da786639bc665097f1e14034ee5f1d8699\"\n+\"checksum chalk-engine 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"25ce2f28f55ed544a2a3756b7acf41dd7d6f27acffb2086439950925506af7d0\"\n \"checksum chalk-macros 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"295635afd6853aa9f20baeb7f0204862440c0fe994c5a253d5f479dac41d047e\"\n \"checksum chrono 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6962c635d530328acc53ac6a955e83093fedc91c5809dfac1fa60fa470830a37\"\n \"checksum clap 2.32.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b957d88f4b6a63b9d70d5f454ac8011819c6efa7727858f458ab71c756ce2d3e\""}, {"sha": "9901dc1ebe307028eea40ffd140608c0a9b49cc1", "filename": "src/doc/unstable-book/src/language-features/crate-in-paths.md", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-in-paths.md", "raw_url": "https://github.com/rust-lang/rust/raw/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-in-paths.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcrate-in-paths.md?ref=3de02d37ea96b1a38c5da2402f1e58980393c5e9", "patch": "@@ -9,10 +9,6 @@ The tracking issue for this feature is: [#44660]\n The `crate_in_paths` feature allows to explicitly refer to the crate root in absolute paths\n using keyword `crate`.\n \n-`crate` can be used *only* in absolute paths, i.e. either in `::crate::a::b::c` form or in `use`\n-items where the starting `::` is added implicitly.  \n-Paths like `crate::a::b::c` are not accepted currently.\n-\n This feature is required in `feature(extern_absolute_paths)` mode to refer to any absolute path\n in the local crate (absolute paths refer to extern crates by default in that mode), but can be\n used without `feature(extern_absolute_paths)` as well.\n@@ -39,15 +35,14 @@ mod n\n     use crate as root;\n     pub fn check() {\n         assert_eq!(f(), 1);\n-        // `::` is required in non-import paths\n-        assert_eq!(::crate::m::g(), 2);\n+        assert_eq!(crate::m::g(), 2);\n         assert_eq!(root::m::h(), 3);\n     }\n }\n \n fn main() {\n     assert_eq!(f(), 1);\n-    assert_eq!(::crate::m::g(), 2);\n+    assert_eq!(crate::m::g(), 2);\n     assert_eq!(root::m::h(), 3);\n     n::check();\n }"}, {"sha": "6a22e7eba646b09185260f62d7f43e7114996d2a", "filename": "src/doc/unstable-book/src/language-features/extern-absolute-paths.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern-absolute-paths.md", "raw_url": "https://github.com/rust-lang/rust/raw/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern-absolute-paths.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fextern-absolute-paths.md?ref=3de02d37ea96b1a38c5da2402f1e58980393c5e9", "patch": "@@ -12,7 +12,7 @@ The `extern_absolute_paths` feature enables mode allowing to refer to names from\n `::my_crate::a::b` will resolve to path `a::b` in crate `my_crate`.\n \n `feature(crate_in_paths)` can be used in `feature(extern_absolute_paths)` mode for referring\n-to absolute paths in the local crate (`::crate::a::b`).\n+to absolute paths in the local crate (`crate::a::b`).\n \n `feature(extern_in_paths)` provides the same effect by using keyword `extern` to refer to\n paths from other crates (`extern::my_crate::a::b`)."}, {"sha": "59b5b58e61eac533f1c3245b28880c1028405c85", "filename": "src/librustc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Flibrustc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Flibrustc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2FCargo.toml?ref=3de02d37ea96b1a38c5da2402f1e58980393c5e9", "patch": "@@ -31,7 +31,7 @@ syntax_pos = { path = \"../libsyntax_pos\" }\n backtrace = \"0.3.3\"\n parking_lot = \"0.5.5\"\n byteorder = { version = \"1.1\", features = [\"i128\"]}\n-chalk-engine = { version = \"0.6.0\", default-features=false }\n+chalk-engine = { version = \"0.7.0\", default-features=false }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n \n # Note that these dependencies are a lie, they're just here to get linkage to"}, {"sha": "729689e35c9989b0cbe9b2dc00389d14d5a0808f", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 36, "deletions": 43, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=3de02d37ea96b1a38c5da2402f1e58980393c5e9", "patch": "@@ -3459,64 +3459,57 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n             let ns = if is_last { opt_ns.unwrap_or(TypeNS) } else { TypeNS };\n             let name = ident.name;\n \n-            if i == 0 && ns == TypeNS && name == keywords::SelfValue.name() {\n-                let mut ctxt = ident.span.ctxt().modern();\n-                module = Some(ModuleOrUniformRoot::Module(\n-                    self.resolve_self(&mut ctxt, self.current_module)));\n-                continue\n-            } else if allow_super && ns == TypeNS && name == keywords::Super.name() {\n-                let mut ctxt = ident.span.ctxt().modern();\n-                let self_module_parent = match i {\n-                    0 => self.resolve_self(&mut ctxt, self.current_module).parent,\n-                    _ => match module {\n-                        Some(ModuleOrUniformRoot::Module(module)) => module.parent,\n-                        _ => None,\n-                    },\n-                };\n-                if let Some(parent) = self_module_parent {\n-                    module = Some(ModuleOrUniformRoot::Module(\n-                        self.resolve_self(&mut ctxt, parent)));\n-                    continue\n-                } else {\n+            allow_super &= ns == TypeNS &&\n+                (name == keywords::SelfValue.name() ||\n+                 name == keywords::Super.name());\n+\n+            if ns == TypeNS {\n+                if allow_super && name == keywords::Super.name() {\n+                    let mut ctxt = ident.span.ctxt().modern();\n+                    let self_module = match i {\n+                        0 => Some(self.resolve_self(&mut ctxt, self.current_module)),\n+                        _ => match module {\n+                            Some(ModuleOrUniformRoot::Module(module)) => Some(module),\n+                            _ => None,\n+                        },\n+                    };\n+                    if let Some(self_module) = self_module {\n+                        if let Some(parent) = self_module.parent {\n+                            module = Some(ModuleOrUniformRoot::Module(\n+                                self.resolve_self(&mut ctxt, parent)));\n+                            continue;\n+                        }\n+                    }\n                     let msg = \"There are too many initial `super`s.\".to_string();\n                     return PathResult::Failed(ident.span, msg, false);\n                 }\n-            }\n-            allow_super = false;\n-\n-            if ns == TypeNS {\n                 if i == 0 {\n+                    if name == keywords::SelfValue.name() {\n+                        let mut ctxt = ident.span.ctxt().modern();\n+                        module = Some(ModuleOrUniformRoot::Module(\n+                            self.resolve_self(&mut ctxt, self.current_module)));\n+                        continue;\n+                    }\n                     if name == keywords::Extern.name() ||\n                        name == keywords::CrateRoot.name() &&\n                        self.session.features_untracked().extern_absolute_paths &&\n                        self.session.rust_2018() {\n                         module = Some(ModuleOrUniformRoot::UniformRoot(name));\n                         continue;\n                     }\n-                }\n-                if (i == 0 && name == keywords::CrateRoot.name()) ||\n-                   (i == 0 && name == keywords::Crate.name()) ||\n-                   (i == 0 && name == keywords::DollarCrate.name()) ||\n-                   (i == 1 && name == keywords::Crate.name() &&\n-                              path[0].name == keywords::CrateRoot.name()) {\n-                    // `::a::b`, `crate::a::b`, `::crate::a::b` or `$crate::a::b`\n-                    module = Some(ModuleOrUniformRoot::Module(\n-                        self.resolve_crate_root(ident)));\n-                    continue\n+                    if name == keywords::CrateRoot.name() ||\n+                       name == keywords::Crate.name() ||\n+                       name == keywords::DollarCrate.name() {\n+                        // `::a::b`, `crate::a::b` or `$crate::a::b`\n+                        module = Some(ModuleOrUniformRoot::Module(\n+                            self.resolve_crate_root(ident)));\n+                        continue;\n+                    }\n                 }\n             }\n \n             // Report special messages for path segment keywords in wrong positions.\n-            if name == keywords::CrateRoot.name() && i != 0 ||\n-               name == keywords::DollarCrate.name() && i != 0 ||\n-               name == keywords::SelfValue.name() && i != 0 ||\n-               name == keywords::SelfType.name() && i != 0 ||\n-               name == keywords::Super.name() && i != 0 ||\n-               name == keywords::Extern.name() && i != 0 ||\n-               // we allow crate::foo and ::crate::foo but nothing else\n-               name == keywords::Crate.name() && i > 1 &&\n-                    path[0].name != keywords::CrateRoot.name() ||\n-               name == keywords::Crate.name() && path.len() == 1 {\n+            if ident.is_path_segment_keyword() && i != 0 {\n                 let name_str = if name == keywords::CrateRoot.name() {\n                     \"crate root\".to_string()\n                 } else {"}, {"sha": "3e1a6ca9aff7c33f40db6c5540cc8ee71428749d", "filename": "src/librustc_traits/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Flibrustc_traits%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Flibrustc_traits%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2FCargo.toml?ref=3de02d37ea96b1a38c5da2402f1e58980393c5e9", "patch": "@@ -16,4 +16,4 @@ rustc = { path = \"../librustc\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n-chalk-engine = { version = \"0.6.0\", default-features=false }\n+chalk-engine = { version = \"0.7.0\", default-features=false }"}, {"sha": "31f683a17355066c8e825c30295570bfa9f5ed51", "filename": "src/test/run-pass/rfc-2126-crate-paths/crate-path-absolute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Frun-pass%2Frfc-2126-crate-paths%2Fcrate-path-absolute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Frun-pass%2Frfc-2126-crate-paths%2Fcrate-path-absolute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2126-crate-paths%2Fcrate-path-absolute.rs?ref=3de02d37ea96b1a38c5da2402f1e58980393c5e9", "patch": "@@ -28,14 +28,14 @@ mod n\n     use crate as root;\n     pub fn check() {\n         assert_eq!(f(), 1);\n-        assert_eq!(::crate::m::g(), 2);\n+        assert_eq!(crate::m::g(), 2);\n         assert_eq!(root::m::h(), 3);\n     }\n }\n \n fn main() {\n     assert_eq!(f(), 1);\n-    assert_eq!(::crate::m::g(), 2);\n+    assert_eq!(crate::m::g(), 2);\n     assert_eq!(root::m::h(), 3);\n     n::check();\n }"}, {"sha": "4646d81cf518f8b79715ba0a9d99ee40ada5d9d0", "filename": "src/test/run-pass/rfc-2126-crate-paths/crate-path-visibility-ambiguity.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Frun-pass%2Frfc-2126-crate-paths%2Fcrate-path-visibility-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Frun-pass%2Frfc-2126-crate-paths%2Fcrate-path-visibility-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frfc-2126-crate-paths%2Fcrate-path-visibility-ambiguity.rs?ref=3de02d37ea96b1a38c5da2402f1e58980393c5e9", "patch": "@@ -14,8 +14,9 @@\n mod m {\n     pub struct Z;\n     pub struct S1(crate (::m::Z)); // OK\n-    pub struct S2(::crate ::m::Z); // OK\n+    pub struct S2((crate ::m::Z)); // OK\n     pub struct S3(crate ::m::Z); // OK\n+    pub struct S4(crate crate::m::Z); // OK\n }\n \n fn main() {"}, {"sha": "e667dab621bda6e1026e0a2c912ba2988bd7c43b", "filename": "src/test/ui/feature-gates/feature-gate-crate_in_paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_in_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_in_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_in_paths.rs?ref=3de02d37ea96b1a38c5da2402f1e58980393c5e9", "patch": "@@ -11,5 +11,5 @@\n struct S;\n \n fn main() {\n-    let _ = ::crate::S; //~ ERROR `crate` in paths is experimental\n+    let _ = crate::S; //~ ERROR `crate` in paths is experimental\n }"}, {"sha": "32115ba2111b57368efb15ca6315ac3e91cfa011", "filename": "src/test/ui/feature-gates/feature-gate-crate_in_paths.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_in_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_in_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-crate_in_paths.stderr?ref=3de02d37ea96b1a38c5da2402f1e58980393c5e9", "patch": "@@ -1,8 +1,8 @@\n error[E0658]: `crate` in paths is experimental (see issue #45477)\n-  --> $DIR/feature-gate-crate_in_paths.rs:14:15\n+  --> $DIR/feature-gate-crate_in_paths.rs:14:13\n    |\n-LL |     let _ = ::crate::S; //~ ERROR `crate` in paths is experimental\n-   |               ^^^^^\n+LL |     let _ = crate::S; //~ ERROR `crate` in paths is experimental\n+   |             ^^^^^\n    |\n    = help: add #![feature(crate_in_paths)] to the crate attributes to enable\n "}, {"sha": "a44ca9d2d25c986a7acba0e44199878406e6bc38", "filename": "src/test/ui/rfc-2126-crate-paths/crate-path-non-absolute.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fcrate-path-non-absolute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fcrate-path-non-absolute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fcrate-path-non-absolute.rs?ref=3de02d37ea96b1a38c5da2402f1e58980393c5e9", "patch": "@@ -15,6 +15,7 @@ struct S;\n pub mod m {\n     fn f() {\n         let s = ::m::crate::S; //~ ERROR failed to resolve\n+        let s1 = ::crate::S; //~ ERROR failed to resolve\n         let s2 = crate::S; // no error\n     }\n }"}, {"sha": "f16c84960776663322ea5620e8aa699358a0ca4e", "filename": "src/test/ui/rfc-2126-crate-paths/crate-path-non-absolute.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fcrate-path-non-absolute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fcrate-path-non-absolute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fcrate-path-non-absolute.stderr?ref=3de02d37ea96b1a38c5da2402f1e58980393c5e9", "patch": "@@ -1,9 +1,15 @@\n-error[E0433]: failed to resolve. Could not find `crate` in `m`\n+error[E0433]: failed to resolve. `crate` in paths can only be used in start position\n   --> $DIR/crate-path-non-absolute.rs:17:22\n    |\n LL |         let s = ::m::crate::S; //~ ERROR failed to resolve\n-   |                      ^^^^^ Could not find `crate` in `m`\n+   |                      ^^^^^ `crate` in paths can only be used in start position\n \n-error: aborting due to previous error\n+error[E0433]: failed to resolve. global paths cannot start with `crate`\n+  --> $DIR/crate-path-non-absolute.rs:18:20\n+   |\n+LL |         let s1 = ::crate::S; //~ ERROR failed to resolve\n+   |                    ^^^^^ global paths cannot start with `crate`\n+\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0433`."}, {"sha": "3ebb3a25d8d3551c46d6591f17157a660e15f7a0", "filename": "src/test/ui/rfc-2126-crate-paths/keyword-crate-as-identifier.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.rs?ref=3de02d37ea96b1a38c5da2402f1e58980393c5e9", "patch": "@@ -11,5 +11,6 @@\n #![feature(crate_in_paths)]\n \n fn main() {\n-    let crate = 0; //~ ERROR failed to resolve. `crate` in paths can only be used in start position\n+    let crate = 0;\n+    //~^ ERROR expected unit struct/variant or constant, found module `crate`\n }"}, {"sha": "ec44fb4db0090e99c5e99e5fc36d234b29fcc3f0", "filename": "src/test/ui/rfc-2126-crate-paths/keyword-crate-as-identifier.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-2126-crate-paths%2Fkeyword-crate-as-identifier.stderr?ref=3de02d37ea96b1a38c5da2402f1e58980393c5e9", "patch": "@@ -1,9 +1,9 @@\n-error[E0433]: failed to resolve. `crate` in paths can only be used in start position\n+error[E0532]: expected unit struct/variant or constant, found module `crate`\n   --> $DIR/keyword-crate-as-identifier.rs:14:9\n    |\n-LL |     let crate = 0; //~ ERROR failed to resolve. `crate` in paths can only be used in start position\n-   |         ^^^^^ `crate` in paths can only be used in start position\n+LL |     let crate = 0;\n+   |         ^^^^^ not a unit struct/variant or constant\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0433`.\n+For more information about this error, try `rustc --explain E0532`."}, {"sha": "8a2b9c1f27213c19df0980019af787546c7be6bf", "filename": "src/test/ui/rust-2018/edition-lint-paths.fixed", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.fixed?ref=3de02d37ea96b1a38c5da2402f1e58980393c5e9", "patch": "@@ -68,7 +68,7 @@ fn main() {\n     //~^ ERROR absolute\n     //~| WARN this was previously accepted\n     let x = bar::Bar;\n-    let x = ::crate::bar::Bar;\n+    let x = crate::bar::Bar;\n     let x = self::bar::Bar;\n     foo::test();\n "}, {"sha": "b6e5d5a8afbf1cddc5e3e5f7e41c1db5730583e5", "filename": "src/test/ui/rust-2018/edition-lint-paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de02d37ea96b1a38c5da2402f1e58980393c5e9/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2018%2Fedition-lint-paths.rs?ref=3de02d37ea96b1a38c5da2402f1e58980393c5e9", "patch": "@@ -68,7 +68,7 @@ fn main() {\n     //~^ ERROR absolute\n     //~| WARN this was previously accepted\n     let x = bar::Bar;\n-    let x = ::crate::bar::Bar;\n+    let x = crate::bar::Bar;\n     let x = self::bar::Bar;\n     foo::test();\n "}]}