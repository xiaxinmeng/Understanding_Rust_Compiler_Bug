{"sha": "edf1d0c245e7ba4eed4be89101073d8515a0f129", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZjFkMGMyNDVlN2JhNGVlZDRiZTg5MTAxMDczZDg1MTVhMGYxMjk=", "commit": {"author": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-08-08T23:06:43Z"}, "committer": {"name": "Lindsey Kuper", "email": "lindsey@rockstargirl.org", "date": "2012-08-08T23:07:52Z"}, "message": "Minor cleanups/comments/whitespace changes", "tree": {"sha": "4f74cef98c79ef60ad991c15eeb82e949f71a802", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f74cef98c79ef60ad991c15eeb82e949f71a802"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edf1d0c245e7ba4eed4be89101073d8515a0f129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edf1d0c245e7ba4eed4be89101073d8515a0f129", "html_url": "https://github.com/rust-lang/rust/commit/edf1d0c245e7ba4eed4be89101073d8515a0f129", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edf1d0c245e7ba4eed4be89101073d8515a0f129/comments", "author": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lkuper", "id": 535218, "node_id": "MDQ6VXNlcjUzNTIxOA==", "avatar_url": "https://avatars.githubusercontent.com/u/535218?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lkuper", "html_url": "https://github.com/lkuper", "followers_url": "https://api.github.com/users/lkuper/followers", "following_url": "https://api.github.com/users/lkuper/following{/other_user}", "gists_url": "https://api.github.com/users/lkuper/gists{/gist_id}", "starred_url": "https://api.github.com/users/lkuper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lkuper/subscriptions", "organizations_url": "https://api.github.com/users/lkuper/orgs", "repos_url": "https://api.github.com/users/lkuper/repos", "events_url": "https://api.github.com/users/lkuper/events{/privacy}", "received_events_url": "https://api.github.com/users/lkuper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "293f371477dc2cd63c3ba12235f4d294e89dca5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/293f371477dc2cd63c3ba12235f4d294e89dca5a", "html_url": "https://github.com/rust-lang/rust/commit/293f371477dc2cd63c3ba12235f4d294e89dca5a"}], "stats": {"total": 16, "additions": 8, "deletions": 8}, "files": [{"sha": "aa9942ee1084db177b9562e361b2406b1469c66a", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edf1d0c245e7ba4eed4be89101073d8515a0f129/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf1d0c245e7ba4eed4be89101073d8515a0f129/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=edf1d0c245e7ba4eed4be89101073d8515a0f129", "patch": "@@ -152,16 +152,18 @@ enum vtable_origin {\n \n type vtable_map = hashmap<ast::node_id, vtable_res>;\n \n-type ty_param_substs_and_ty = {substs: ty::substs, ty: ty::t};\n // Stores information about provided methods, aka \"default methods\" in traits.\n // Maps from a trait's def_id to a MethodInfo about\n // that method in that trait.\n type provided_methods_map = hashmap<ast::node_id,\n                                     ~[@resolve3::MethodInfo]>;\n \n-type ty_table = hashmap<ast::def_id, ty::t>;\n+type ty_param_substs_and_ty = {substs: ty::substs, ty: ty::t};\n \n type crate_ctxt_ = {impl_map: resolve3::ImplMap,\n+\n+                    // A mapping from method call sites to traits that have\n+                    // that method.\n                     trait_map: resolve3::TraitMap,\n                     method_map: method_map,\n                     vtable_map: vtable_map,"}, {"sha": "c732f16dc8005668bf6a904c5ab6010210e09d8c", "filename": "src/rustc/middle/typeck/coherence.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/edf1d0c245e7ba4eed4be89101073d8515a0f129/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edf1d0c245e7ba4eed4be89101073d8515a0f129/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fcoherence.rs?ref=edf1d0c245e7ba4eed4be89101073d8515a0f129", "patch": "@@ -257,7 +257,6 @@ class CoherenceChecker {\n         // Bring in external crates. It's fine for this to happen after the\n         // coherence checks, because we ensure by construction that no errors\n         // can happen at link time.\n-\n         self.add_external_crates();\n     }\n \n@@ -273,8 +272,8 @@ class CoherenceChecker {\n                    *item.ident};\n \n             match get_base_type_def_id(self.inference_context,\n-                                     item.span,\n-                                     self_type.ty) {\n+                                       item.span,\n+                                       self_type.ty) {\n                 none => {\n                     let session = self.crate_context.tcx.sess;\n                     session.span_err(item.span,\n@@ -421,7 +420,6 @@ class CoherenceChecker {\n     }\n \n     // Privileged scope checking\n-\n     fn check_privileged_scopes(crate: @crate) {\n         // Gather up all privileged types.\n         let privileged_types =\n@@ -717,8 +715,8 @@ class CoherenceChecker {\n \n             if associated_traits.len() == 0 {\n                 match get_base_type_def_id(self.inference_context,\n-                                         dummy_sp(),\n-                                         self_type.ty) {\n+                                           dummy_sp(),\n+                                           self_type.ty) {\n                     none => {\n                         let session = self.crate_context.tcx.sess;\n                         session.bug(fmt!{\"no base type for external impl \\"}]}