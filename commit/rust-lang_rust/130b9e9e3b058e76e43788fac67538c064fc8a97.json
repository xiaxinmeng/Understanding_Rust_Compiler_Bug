{"sha": "130b9e9e3b058e76e43788fac67538c064fc8a97", "node_id": "C_kwDOAAsO6NoAKDEzMGI5ZTllM2IwNThlNzZlNDM3ODhmYWM2NzUzOGMwNjRmYzhhOTc", "commit": {"author": {"name": "Lucas Kent", "email": "rubickent@gmail.com", "date": "2021-11-13T05:43:43Z"}, "committer": {"name": "Lucas Kent", "email": "rubickent@gmail.com", "date": "2021-11-14T01:04:39Z"}, "message": "Improve diagnostics when a static lifetime is expected", "tree": {"sha": "b9fb53d1ecdbe1b18d8bdb1ec81e6870baa0d3e4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9fb53d1ecdbe1b18d8bdb1ec81e6870baa0d3e4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/130b9e9e3b058e76e43788fac67538c064fc8a97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/130b9e9e3b058e76e43788fac67538c064fc8a97", "html_url": "https://github.com/rust-lang/rust/commit/130b9e9e3b058e76e43788fac67538c064fc8a97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/130b9e9e3b058e76e43788fac67538c064fc8a97/comments", "author": {"login": "rukai", "id": 5120858, "node_id": "MDQ6VXNlcjUxMjA4NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5120858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rukai", "html_url": "https://github.com/rukai", "followers_url": "https://api.github.com/users/rukai/followers", "following_url": "https://api.github.com/users/rukai/following{/other_user}", "gists_url": "https://api.github.com/users/rukai/gists{/gist_id}", "starred_url": "https://api.github.com/users/rukai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rukai/subscriptions", "organizations_url": "https://api.github.com/users/rukai/orgs", "repos_url": "https://api.github.com/users/rukai/repos", "events_url": "https://api.github.com/users/rukai/events{/privacy}", "received_events_url": "https://api.github.com/users/rukai/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rukai", "id": 5120858, "node_id": "MDQ6VXNlcjUxMjA4NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5120858?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rukai", "html_url": "https://github.com/rukai", "followers_url": "https://api.github.com/users/rukai/followers", "following_url": "https://api.github.com/users/rukai/following{/other_user}", "gists_url": "https://api.github.com/users/rukai/gists{/gist_id}", "starred_url": "https://api.github.com/users/rukai/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rukai/subscriptions", "organizations_url": "https://api.github.com/users/rukai/orgs", "repos_url": "https://api.github.com/users/rukai/repos", "events_url": "https://api.github.com/users/rukai/events{/privacy}", "received_events_url": "https://api.github.com/users/rukai/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e018ce194ab16125747220676dd8a20aecd5196", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e018ce194ab16125747220676dd8a20aecd5196", "html_url": "https://github.com/rust-lang/rust/commit/3e018ce194ab16125747220676dd8a20aecd5196"}], "stats": {"total": 445, "additions": 269, "deletions": 176}, "files": [{"sha": "eb1c80ecb018c1454ae38c876ff50557ec532b8d", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/named_anon_conflict.rs", "status": "modified", "additions": 24, "deletions": 41, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fnamed_anon_conflict.rs?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -3,8 +3,6 @@\n use crate::infer::error_reporting::nice_region_error::find_anon_type::find_anon_type;\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n-use rustc_hir::intravisit::Visitor;\n-use rustc_hir::FnRetTy;\n use rustc_middle::ty;\n \n impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n@@ -48,19 +46,24 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             return None; // inapplicable\n         };\n \n+        // Suggesting to add a `'static` lifetime to a parameter is nearly always incorrect,\n+        // and can steer users down the wrong path.\n+        if *named == ty::ReStatic {\n+            return None;\n+        }\n+\n         debug!(\"try_report_named_anon_conflict: named = {:?}\", named);\n         debug!(\"try_report_named_anon_conflict: anon_param_info = {:?}\", anon_param_info);\n         debug!(\"try_report_named_anon_conflict: region_info = {:?}\", region_info);\n \n-        let (param, new_ty, new_ty_span, br, is_first, scope_def_id, is_impl_item) = (\n-            anon_param_info.param,\n-            anon_param_info.param_ty,\n-            anon_param_info.param_ty_span,\n-            anon_param_info.bound_region,\n-            anon_param_info.is_first,\n-            region_info.def_id,\n-            region_info.is_impl_item,\n-        );\n+        let param = anon_param_info.param;\n+        let new_ty = anon_param_info.param_ty;\n+        let new_ty_span = anon_param_info.param_ty_span;\n+        let br = anon_param_info.bound_region;\n+        let is_first = anon_param_info.is_first;\n+        let scope_def_id = region_info.def_id;\n+        let is_impl_item = region_info.is_impl_item;\n+\n         match br {\n             ty::BrAnon(_) => {}\n             _ => {\n@@ -75,26 +78,10 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             return None;\n         }\n \n-        if let Some((_, fndecl)) = find_anon_type(self.tcx(), anon, &br) {\n-            if self.is_self_anon(is_first, scope_def_id) {\n-                return None;\n-            }\n-\n-            if let FnRetTy::Return(ty) = &fndecl.output {\n-                let mut v = ty::TraitObjectVisitor(vec![], self.tcx().hir());\n-                v.visit_ty(ty);\n-\n-                debug!(\"try_report_named_anon_conflict: ret ty {:?}\", ty);\n-                if sub == &ty::ReStatic\n-                    && v.0.into_iter().any(|t| t.span.desugaring_kind().is_none())\n-                {\n-                    // If the failure is due to a `'static` requirement coming from a `dyn` or\n-                    // `impl` Trait that *isn't* caused by `async fn` desugaring, handle this case\n-                    // better in `static_impl_trait`.\n-                    debug!(\"try_report_named_anon_conflict: impl Trait + 'static\");\n-                    return None;\n-                }\n-            }\n+        if find_anon_type(self.tcx(), anon, &br).is_some()\n+            && self.is_self_anon(is_first, scope_def_id)\n+        {\n+            return None;\n         }\n \n         let (error_var, span_label_var) = match param.pat.simple_ident() {\n@@ -114,16 +101,12 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         );\n \n         diag.span_label(span, format!(\"lifetime `{}` required\", named));\n-        // Suggesting `'static` is nearly always incorrect, and can steer users\n-        // down the wrong path.\n-        if *named != ty::ReStatic {\n-            diag.span_suggestion(\n-                new_ty_span,\n-                &format!(\"add explicit lifetime `{}` to {}\", named, span_label_var),\n-                new_ty.to_string(),\n-                Applicability::Unspecified,\n-            );\n-        }\n+        diag.span_suggestion(\n+            new_ty_span,\n+            &format!(\"add explicit lifetime `{}` to {}\", named, span_label_var),\n+            new_ty.to_string(),\n+            Applicability::Unspecified,\n+        );\n \n         Some(diag)\n     }"}, {"sha": "af3810e91aeb05ccf0227d783d0f43d761a82ee9", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.nll.stderr", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.nll.stderr?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -1,11 +1,18 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n+error[E0521]: borrowed data escapes outside of function\n   --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:5\n    |\n+LL |   fn foo(x: &()) {\n+   |          -  - let's call the lifetime of this reference `'1`\n+   |          |\n+   |          `x` is a reference that is only valid in the function body\n LL | /     bar(|| {\n LL | |\n LL | |         let _ = x;\n LL | |     })\n-   | |______^ lifetime `'static` required\n+   | |      ^\n+   | |      |\n+   | |______`x` escapes the function body here\n+   |        argument requires that `'1` must outlive `'static`\n \n error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n   --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:9\n@@ -31,5 +38,5 @@ LL |     bar(move || {\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0373, E0621.\n+Some errors have detailed explanations: E0373, E0521.\n For more information about an error, try `rustc --explain E0373`."}, {"sha": "cbdc8b7deef382ab109390cc126ed6e0836a61d5", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.rs?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -3,7 +3,7 @@ fn bar<F>(blk: F) where F: FnOnce() + 'static {\n \n fn foo(x: &()) {\n     bar(|| {\n-        //~^ ERROR explicit lifetime required in the type of `x` [E0621]\n+        //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n         let _ = x;\n     })\n }"}, {"sha": "d761abdfc6a3416fc38a9cd2dbecbac793c4ed38", "filename": "src/test/ui/closures/closure-bounds-static-cant-capture-borrowed.stderr", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-bounds-static-cant-capture-borrowed.stderr?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -1,9 +1,21 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n+error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:9\n+   |\n+LL |   fn foo(x: &()) {\n+   |             --- this data with an anonymous lifetime `'_`...\n+LL |       bar(|| {\n+   |  _________^\n+LL | |\n+LL | |         let _ = x;\n+LL | |     })\n+   | |_____^ ...is captured here...\n+   |\n+note: ...and is required to live as long as `'static` here\n   --> $DIR/closure-bounds-static-cant-capture-borrowed.rs:5:5\n    |\n LL |     bar(|| {\n-   |     ^^^ lifetime `'static` required\n+   |     ^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0621`.\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "b4530cfda2b54f7f21da2791d014d8dcae681d7d", "filename": "src/test/ui/generator/generator-region-requirements.nll.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.nll.stderr?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -0,0 +1,11 @@\n+error: lifetime may not live long enough\n+  --> $DIR/generator-region-requirements.rs:13:51\n+   |\n+LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n+   |              - let's call the lifetime of this reference `'1`\n+...\n+LL |             GeneratorState::Complete(c) => return c,\n+   |                                                   ^ returning this value requires that `'1` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "cec68509a66e6e1ac91a907ef7d4a0be68dbc05a", "filename": "src/test/ui/generator/generator-region-requirements.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.rs?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -6,11 +6,11 @@ fn dangle(x: &mut i32) -> &'static mut i32 {\n     let mut g = || {\n         yield;\n         x\n+        //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n     };\n     loop {\n         match Pin::new(&mut g).resume(()) {\n             GeneratorState::Complete(c) => return c,\n-            //~^ ERROR explicit lifetime required\n             GeneratorState::Yielded(_) => (),\n         }\n     }"}, {"sha": "b6b9db22426eb40cf799c95eb8c6c3928e22006a", "filename": "src/test/ui/generator/generator-region-requirements.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fgenerator-region-requirements.stderr?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -1,9 +1,15 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/generator-region-requirements.rs:12:51\n+error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/generator-region-requirements.rs:8:9\n    |\n+LL | fn dangle(x: &mut i32) -> &'static mut i32 {\n+   |              -------- this data with an anonymous lifetime `'_`...\n+...\n+LL |         x\n+   |         ^ ...is captured here...\n+...\n LL |             GeneratorState::Complete(c) => return c,\n-   |                                                   ^ lifetime `'static` required\n+   |                                                   - ...and is required to live as long as `'static` here\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0621`.\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "4620aa34e84d926054c60d0f638ab12ebfec5c01", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.nll.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.nll.stderr?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -0,0 +1,26 @@\n+error: lifetime may not live long enough\n+  --> $DIR/projection-type-lifetime-mismatch.rs:17:5\n+   |\n+LL | fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n+   |         - let's call the lifetime of this reference `'1`\n+LL |     x.m()\n+   |     ^^^^^ returning this value requires that `'1` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/projection-type-lifetime-mismatch.rs:22:5\n+   |\n+LL | fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n+   |                                       - let's call the lifetime of this reference `'1`\n+LL |     x.m()\n+   |     ^^^^^ returning this value requires that `'1` must outlive `'static`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/projection-type-lifetime-mismatch.rs:27:5\n+   |\n+LL | fn h(x: &()) -> &'static () {\n+   |         - let's call the lifetime of this reference `'1`\n+LL |     x.m()\n+   |     ^^^^^ returning this value requires that `'1` must outlive `'static`\n+\n+error: aborting due to 3 previous errors\n+"}, {"sha": "9b04fe233208ecae8458949dc9a5f7ee6c4686d5", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.rs?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -15,17 +15,17 @@ impl X for () {\n \n fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n     x.m()\n-    //~^ ERROR explicit lifetime required\n+    //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n }\n \n fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n     x.m()\n-    //~^ ERROR explicit lifetime required\n+    //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n }\n \n fn h(x: &()) -> &'static () {\n     x.m()\n-    //~^ ERROR explicit lifetime required\n+    //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n }\n \n fn main() {"}, {"sha": "1ffd205652f666a70425ea5dd1ede0933fb7e629", "filename": "src/test/ui/generic-associated-types/projection-type-lifetime-mismatch.stderr", "status": "modified", "additions": 16, "deletions": 10, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fprojection-type-lifetime-mismatch.stderr?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -1,21 +1,27 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/projection-type-lifetime-mismatch.rs:17:5\n+error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/projection-type-lifetime-mismatch.rs:17:7\n    |\n+LL | fn f(x: &impl for<'a> X<Y<'a> = &'a ()>) -> &'static () {\n+   |         ------------------------------- this data with an anonymous lifetime `'_`...\n LL |     x.m()\n-   |     ^^^^^ lifetime `'static` required\n+   |     --^-- ...is captured and required to live as long as `'static` here\n \n-error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/projection-type-lifetime-mismatch.rs:22:5\n+error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/projection-type-lifetime-mismatch.rs:22:7\n    |\n+LL | fn g<T: for<'a> X<Y<'a> = &'a ()>>(x: &T) -> &'static () {\n+   |                                       -- this data with an anonymous lifetime `'_`...\n LL |     x.m()\n-   |     ^^^^^ lifetime `'static` required\n+   |     --^-- ...is captured and required to live as long as `'static` here\n \n-error[E0621]: explicit lifetime required in the type of `x`\n-  --> $DIR/projection-type-lifetime-mismatch.rs:27:5\n+error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/projection-type-lifetime-mismatch.rs:27:7\n    |\n+LL | fn h(x: &()) -> &'static () {\n+   |         --- this data with an anonymous lifetime `'_`...\n LL |     x.m()\n-   |     ^^^^^ lifetime `'static` required\n+   |     --^-- ...is captured and required to live as long as `'static` here\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0621`.\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "38a219bbd7b5257e4a1b775053a03f57ce13ac5b", "filename": "src/test/ui/issues/issue-46983.nll.stderr", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fissues%2Fissue-46983.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fissues%2Fissue-46983.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46983.nll.stderr?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -0,0 +1,10 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-46983.rs:2:5\n+   |\n+LL | fn foo(x: &u32) -> &'static u32 {\n+   |           - let's call the lifetime of this reference `'1`\n+LL |     &*x\n+   |     ^^^ returning this value requires that `'1` must outlive `'static`\n+\n+error: aborting due to previous error\n+"}, {"sha": "87ed89289447915cdef52f533d23ade0a403379f", "filename": "src/test/ui/issues/issue-46983.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fissues%2Fissue-46983.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fissues%2Fissue-46983.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46983.rs?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -1,6 +1,6 @@\n fn foo(x: &u32) -> &'static u32 {\n     &*x\n-    //~^ ERROR explicit lifetime required in the type of `x` [E0621]\n+    //~^ ERROR `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n }\n \n fn main() {}"}, {"sha": "77fb130f5192e34d1a7c69abaa9e9853e42e70f4", "filename": "src/test/ui/issues/issue-46983.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-46983.stderr?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -1,9 +1,11 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n+error[E0759]: `x` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n   --> $DIR/issue-46983.rs:2:5\n    |\n+LL | fn foo(x: &u32) -> &'static u32 {\n+   |           ---- this data with an anonymous lifetime `'_`...\n LL |     &*x\n-   |     ^^^ lifetime `'static` required\n+   |     ^^^ ...is captured and required to live as long as `'static` here\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0621`.\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "99e1e7217b45ce2318f07df0f0c37689a9858450", "filename": "src/test/ui/lifetimes/issue-90600-expected-return-static-indirect.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.nll.stderr?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -0,0 +1,24 @@\n+error[E0597]: `foo` does not live long enough\n+  --> $DIR/issue-90600-expected-return-static-indirect.rs:7:32\n+   |\n+LL |     let refcell = RefCell::new(&mut foo);\n+   |                                ^^^^^^^^ borrowed value does not live long enough\n+LL |\n+LL |     let read = &refcell as &RefCell<dyn Read>;\n+   |                -------- cast requires that `foo` is borrowed for `'static`\n+...\n+LL | }\n+   | - `foo` dropped here while still borrowed\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-90600-expected-return-static-indirect.rs:9:16\n+   |\n+LL | fn inner(mut foo: &[u8]) {\n+   |                   - let's call the lifetime of this reference `'1`\n+...\n+LL |     let read = &refcell as &RefCell<dyn Read>;\n+   |                ^^^^^^^^ cast requires that `'1` must outlive `'static`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "39996bbf43b3c5de940c2e999b4d5819714d49c2", "filename": "src/test/ui/lifetimes/issue-90600-expected-return-static-indirect.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.rs?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -0,0 +1,14 @@\n+use std::cell::RefCell;\n+use std::io::Read;\n+\n+fn main() {}\n+\n+fn inner(mut foo: &[u8]) {\n+    let refcell = RefCell::new(&mut foo);\n+    //~^ ERROR `foo` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    let read = &refcell as &RefCell<dyn Read>;\n+\n+    read_thing(read);\n+}\n+\n+fn read_thing(refcell: &RefCell<dyn Read>) {}"}, {"sha": "3f65d3af725cf8d9b26adf0f015f55004587741f", "filename": "src/test/ui/lifetimes/issue-90600-expected-return-static-indirect.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flifetimes%2Fissue-90600-expected-return-static-indirect.stderr?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -0,0 +1,14 @@\n+error[E0759]: `foo` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/issue-90600-expected-return-static-indirect.rs:7:32\n+   |\n+LL | fn inner(mut foo: &[u8]) {\n+   |                   ----- this data with an anonymous lifetime `'_`...\n+LL |     let refcell = RefCell::new(&mut foo);\n+   |                                ^^^^^^^^ ...is captured here...\n+...\n+LL |     read_thing(read);\n+   |                ---- ...and is required to live as long as `'static` here\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0759`."}, {"sha": "c8f226f5238e98df3145a8475f12202a28c046ca", "filename": "src/test/ui/nll/closure-requirements/region-lbr-anon-does-not-outlive-static.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.rs?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -7,7 +7,7 @@\n \n fn foo(x: &u32) -> &'static u32 {\n     &*x\n-        //~^ ERROR explicit lifetime required in the type of `x`\n+    //~^ ERROR lifetime may not live long enough\n }\n \n fn main() { }"}, {"sha": "7034492cee09d153703a46990756c72e43a19eae", "filename": "src/test/ui/nll/closure-requirements/region-lbr-anon-does-not-outlive-static.stderr", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fregion-lbr-anon-does-not-outlive-static.stderr?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -1,9 +1,10 @@\n-error[E0621]: explicit lifetime required in the type of `x`\n+error: lifetime may not live long enough\n   --> $DIR/region-lbr-anon-does-not-outlive-static.rs:9:5\n    |\n+LL | fn foo(x: &u32) -> &'static u32 {\n+   |           - let's call the lifetime of this reference `'1`\n LL |     &*x\n-   |     ^^^ lifetime `ReStatic` required\n+   |     ^^^ returning this value requires that `'1` must outlive `'static`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "87ed0e642e998c0c2ccbf4dab80e3a21ddb304de", "filename": "src/test/ui/nll/guarantor-issue-46974.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.rs?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -12,7 +12,7 @@ fn foo(s: &mut (i32,)) -> i32 {\n \n fn bar(s: &Box<(i32,)>) -> &'static i32 {\n     // FIXME(#46983): error message should be better\n-    &s.0 //~ ERROR explicit lifetime required in the type of `s` [E0621]\n+    &s.0 //~ ERROR lifetime may not live long enough\n }\n \n fn main() {"}, {"sha": "8245aadf82684e173267a7360df75668ad62b33d", "filename": "src/test/ui/nll/guarantor-issue-46974.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fguarantor-issue-46974.stderr?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -9,13 +9,15 @@ LL |     *s = (2,);\n LL |     *x\n    |     -- borrow later used here\n \n-error[E0621]: explicit lifetime required in the type of `s`\n+error: lifetime may not live long enough\n   --> $DIR/guarantor-issue-46974.rs:15:5\n    |\n+LL | fn bar(s: &Box<(i32,)>) -> &'static i32 {\n+   |           - let's call the lifetime of this reference `'1`\n+LL |     // FIXME(#46983): error message should be better\n LL |     &s.0\n-   |     ^^^^ lifetime `'static` required\n+   |     ^^^^ returning this value requires that `'1` must outlive `'static`\n \n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0506, E0621.\n-For more information about an error, try `rustc --explain E0506`.\n+For more information about this error, try `rustc --explain E0506`."}, {"sha": "d6cec03e0ff2ecf89b186fff09a8844903dd34d5", "filename": "src/test/ui/regions/regions-static-bound.ll.nll.stderr", "status": "removed", "additions": 0, "deletions": 28, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3e018ce194ab16125747220676dd8a20aecd5196/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e018ce194ab16125747220676dd8a20aecd5196/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.ll.nll.stderr?ref=3e018ce194ab16125747220676dd8a20aecd5196", "patch": "@@ -1,28 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/regions-static-bound.rs:9:5\n-   |\n-LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n-   |                        -- lifetime `'a` defined here\n-LL |     t //[ll]~ ERROR E0312\n-   |     ^ returning this value requires that `'a` must outlive `'static`\n-\n-error[E0621]: explicit lifetime required in the type of `u`\n-  --> $DIR/regions-static-bound.rs:14:5\n-   |\n-LL | fn error(u: &(), v: &()) {\n-   |             --- help: add explicit lifetime `'static` to the type of `u`: `&'static ()`\n-LL |     static_id(&u); //[ll]~ ERROR explicit lifetime required in the type of `u` [E0621]\n-   |     ^^^^^^^^^^^^^ lifetime `'static` required\n-\n-error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/regions-static-bound.rs:16:5\n-   |\n-LL | fn error(u: &(), v: &()) {\n-   |                     --- help: add explicit lifetime `'static` to the type of `v`: `&'static ()`\n-...\n-LL |     static_id_indirect(&v); //[ll]~ ERROR explicit lifetime required in the type of `v` [E0621]\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "a280c6f0a02d28ce7f40889ea450e4eb9dc60414", "filename": "src/test/ui/regions/regions-static-bound.migrate.nll.stderr", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3e018ce194ab16125747220676dd8a20aecd5196/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e018ce194ab16125747220676dd8a20aecd5196/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.nll.stderr?ref=3e018ce194ab16125747220676dd8a20aecd5196", "patch": "@@ -1,23 +0,0 @@\n-error: lifetime may not live long enough\n-  --> $DIR/regions-static-bound.rs:9:5\n-   |\n-LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n-   |                        -- lifetime `'a` defined here\n-LL |     t\n-   |     ^ returning this value requires that `'a` must outlive `'static`\n-\n-error[E0621]: explicit lifetime required in the type of `u`\n-  --> $DIR/regions-static-bound.rs:14:5\n-   |\n-LL |     static_id(&u);\n-   |     ^^^^^^^^^^^^^ lifetime `'static` required\n-\n-error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/regions-static-bound.rs:16:5\n-   |\n-LL |     static_id_indirect(&v);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n-\n-error: aborting due to 3 previous errors\n-\n-For more information about this error, try `rustc --explain E0621`."}, {"sha": "8f11e148220d6b9d1801cb195a4d32efc9653d58", "filename": "src/test/ui/regions/regions-static-bound.migrate.stderr", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3e018ce194ab16125747220676dd8a20aecd5196/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e018ce194ab16125747220676dd8a20aecd5196/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.migrate.stderr?ref=3e018ce194ab16125747220676dd8a20aecd5196", "patch": "@@ -1,29 +0,0 @@\n-error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n-  --> $DIR/regions-static-bound.rs:9:5\n-   |\n-LL |     t\n-   |     ^\n-   |\n-   = note: ...the reference is valid for the static lifetime...\n-note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n-  --> $DIR/regions-static-bound.rs:8:24\n-   |\n-LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n-   |                        ^^\n-\n-error[E0621]: explicit lifetime required in the type of `u`\n-  --> $DIR/regions-static-bound.rs:14:5\n-   |\n-LL |     static_id(&u);\n-   |     ^^^^^^^^^ lifetime `'static` required\n-\n-error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/regions-static-bound.rs:16:5\n-   |\n-LL |     static_id_indirect(&v);\n-   |     ^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n-\n-error: aborting due to 3 previous errors\n-\n-Some errors have detailed explanations: E0312, E0621.\n-For more information about an error, try `rustc --explain E0312`."}, {"sha": "699638c7ef9b23142eb303efdc02d3a00d14cf58", "filename": "src/test/ui/regions/regions-static-bound.nll.stderr", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.nll.stderr?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -1,23 +1,38 @@\n error: lifetime may not live long enough\n-  --> $DIR/regions-static-bound.rs:9:5\n+  --> $DIR/regions-static-bound.rs:6:5\n    |\n LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n    |                        -- lifetime `'a` defined here\n LL |     t\n    |     ^ returning this value requires that `'a` must outlive `'static`\n \n-error[E0621]: explicit lifetime required in the type of `u`\n-  --> $DIR/regions-static-bound.rs:14:5\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/regions-static-bound.rs:10:5\n    |\n+LL | fn error(u: &(), v: &()) {\n+   |          -  - let's call the lifetime of this reference `'1`\n+   |          |\n+   |          `u` is a reference that is only valid in the function body\n LL |     static_id(&u);\n-   |     ^^^^^^^^^^^^^ lifetime `'static` required\n+   |     ^^^^^^^^^^^^^\n+   |     |\n+   |     `u` escapes the function body here\n+   |     argument requires that `'1` must outlive `'static`\n \n-error[E0621]: explicit lifetime required in the type of `v`\n-  --> $DIR/regions-static-bound.rs:16:5\n+error[E0521]: borrowed data escapes outside of function\n+  --> $DIR/regions-static-bound.rs:11:5\n    |\n+LL | fn error(u: &(), v: &()) {\n+   |                  -  - let's call the lifetime of this reference `'2`\n+   |                  |\n+   |                  `v` is a reference that is only valid in the function body\n+LL |     static_id(&u);\n LL |     static_id_indirect(&v);\n-   |     ^^^^^^^^^^^^^^^^^^^^^^ lifetime `'static` required\n+   |     ^^^^^^^^^^^^^^^^^^^^^^\n+   |     |\n+   |     `v` escapes the function body here\n+   |     argument requires that `'2` must outlive `'static`\n \n error: aborting due to 3 previous errors\n \n-For more information about this error, try `rustc --explain E0621`.\n+For more information about this error, try `rustc --explain E0521`."}, {"sha": "a977a8b36d0563babb348b4eb1b7af78a5cd0f29", "filename": "src/test/ui/regions/regions-static-bound.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.rs?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -1,20 +1,14 @@\n-// revisions: migrate nll\n-//[nll] compile-flags:-Zborrowck=mir\n-\n fn static_id<'a,'b>(t: &'a ()) -> &'static ()\n     where 'a: 'static { t }\n fn static_id_indirect<'a,'b>(t: &'a ()) -> &'static ()\n     where 'a: 'b, 'b: 'static { t }\n fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n-    t //[migrate]~ ERROR E0312\n-        //[nll]~^ ERROR lifetime may not live long enough\n+    t //~ ERROR E0312\n }\n \n fn error(u: &(), v: &()) {\n-    static_id(&u); //[migrate]~ ERROR explicit lifetime required in the type of `u` [E0621]\n-    //[nll]~^ ERROR explicit lifetime required in the type of `u` [E0621]\n-    static_id_indirect(&v); //[migrate]~ ERROR explicit lifetime required in the type of `v` [E0621]\n-    //[nll]~^ ERROR explicit lifetime required in the type of `v` [E0621]\n+    static_id(&u); //~ ERROR `u` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n+    static_id_indirect(&v); //~ ERROR `v` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement [E0759]\n }\n \n fn main() {}"}, {"sha": "51fe16ca9da03515dff6f71a480bba44923033d0", "filename": "src/test/ui/regions/regions-static-bound.stderr", "status": "added", "additions": 46, "deletions": 0, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/130b9e9e3b058e76e43788fac67538c064fc8a97/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-static-bound.stderr?ref=130b9e9e3b058e76e43788fac67538c064fc8a97", "patch": "@@ -0,0 +1,46 @@\n+error[E0312]: lifetime of reference outlives lifetime of borrowed content...\n+  --> $DIR/regions-static-bound.rs:6:5\n+   |\n+LL |     t\n+   |     ^\n+   |\n+   = note: ...the reference is valid for the static lifetime...\n+note: ...but the borrowed content is only valid for the lifetime `'a` as defined here\n+  --> $DIR/regions-static-bound.rs:5:24\n+   |\n+LL | fn static_id_wrong_way<'a>(t: &'a ()) -> &'static () where 'static: 'a {\n+   |                        ^^\n+\n+error[E0759]: `u` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/regions-static-bound.rs:10:5\n+   |\n+LL | fn error(u: &(), v: &()) {\n+   |             --- this data with an anonymous lifetime `'_`...\n+LL |     static_id(&u);\n+   |     ^^^^^^^^^ -- ...is captured here...\n+   |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/regions-static-bound.rs:10:5\n+   |\n+LL |     static_id(&u);\n+   |     ^^^^^^^^^\n+\n+error[E0759]: `v` has an anonymous lifetime `'_` but it needs to satisfy a `'static` lifetime requirement\n+  --> $DIR/regions-static-bound.rs:11:5\n+   |\n+LL | fn error(u: &(), v: &()) {\n+   |                     --- this data with an anonymous lifetime `'_`...\n+LL |     static_id(&u);\n+LL |     static_id_indirect(&v);\n+   |     ^^^^^^^^^^^^^^^^^^ -- ...is captured here...\n+   |\n+note: ...and is required to live as long as `'static` here\n+  --> $DIR/regions-static-bound.rs:11:5\n+   |\n+LL |     static_id_indirect(&v);\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0312, E0759.\n+For more information about an error, try `rustc --explain E0312`."}]}