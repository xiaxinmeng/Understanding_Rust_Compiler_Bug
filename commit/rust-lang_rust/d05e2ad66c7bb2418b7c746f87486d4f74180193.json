{"sha": "d05e2ad66c7bb2418b7c746f87486d4f74180193", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwNWUyYWQ2NmM3YmIyNDE4YjdjNzQ2Zjg3NDg2ZDRmNzQxODAxOTM=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-25T23:23:04Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-26T00:48:22Z"}, "message": "Demode core::result", "tree": {"sha": "1ecb6f12685ddbf53cdf671daffcc6fbeb0d291e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ecb6f12685ddbf53cdf671daffcc6fbeb0d291e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d05e2ad66c7bb2418b7c746f87486d4f74180193", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d05e2ad66c7bb2418b7c746f87486d4f74180193", "html_url": "https://github.com/rust-lang/rust/commit/d05e2ad66c7bb2418b7c746f87486d4f74180193", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d05e2ad66c7bb2418b7c746f87486d4f74180193/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62649f0412630f8bfe284996c82b6a723d2ffea9", "url": "https://api.github.com/repos/rust-lang/rust/commits/62649f0412630f8bfe284996c82b6a723d2ffea9", "html_url": "https://github.com/rust-lang/rust/commit/62649f0412630f8bfe284996c82b6a723d2ffea9"}], "stats": {"total": 298, "additions": 153, "deletions": 145}, "files": [{"sha": "6f356a6e943a4f5c14f6e1e0323a4cfdb4593a2a", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -460,7 +460,7 @@ fn parse_source(name: ~str, j: json::Json) -> source {\n fn try_parse_sources(filename: &Path, sources: map::HashMap<~str, source>) {\n     if !os::path_exists(filename)  { return; }\n     let c = io::read_whole_file_str(filename);\n-    match json::from_str(result::get(c)) {\n+    match json::from_str(c.get()) {\n         Ok(json::Dict(j)) => {\n           for j.each |k, v| {\n                 sources.insert(k, parse_source(k, v));\n@@ -579,7 +579,7 @@ fn load_source_info(c: &cargo, src: source) {\n     let srcfile = dir.push(\"source.json\");\n     if !os::path_exists(&srcfile) { return; }\n     let srcstr = io::read_whole_file_str(&srcfile);\n-    match json::from_str(result::get(srcstr)) {\n+    match json::from_str(srcstr.get()) {\n         Ok(json::Dict(s)) => {\n             let o = parse_source(src.name, json::Dict(s));\n \n@@ -601,7 +601,7 @@ fn load_source_packages(c: &cargo, src: source) {\n     let pkgfile = dir.push(\"packages.json\");\n     if !os::path_exists(&pkgfile) { return; }\n     let pkgstr = io::read_whole_file_str(&pkgfile);\n-    match json::from_str(result::get(pkgstr)) {\n+    match json::from_str(pkgstr.get()) {\n         Ok(json::List(js)) => {\n           for (*js).each |j| {\n                 match *j {\n@@ -659,7 +659,7 @@ fn build_cargo_options(argv: ~[~str]) -> options {\n fn configure(opts: options) -> cargo {\n     let home = match get_cargo_root() {\n         Ok(home) => home,\n-        Err(_err) => result::get(get_cargo_sysroot())\n+        Err(_err) => get_cargo_sysroot().get()\n     };\n \n     let get_cargo_dir = match opts.mode {\n@@ -668,7 +668,7 @@ fn configure(opts: options) -> cargo {\n         local_mode => get_cargo_root_nearest\n     };\n \n-    let p = result::get(get_cargo_dir());\n+    let p = get_cargo_dir().get();\n \n     let sources = map::HashMap();\n     try_parse_sources(&home.push(\"sources.json\"), sources);"}, {"sha": "a8b69201a2250031de7e31eb79af685012234b98", "filename": "src/compiletest/errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Fcompiletest%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Fcompiletest%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Ferrors.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -9,7 +9,7 @@ type expected_error = { line: uint, kind: ~str, msg: ~str };\n // Load any test directives embedded in the file\n fn load_errors(testfile: &Path) -> ~[expected_error] {\n     let mut error_patterns = ~[];\n-    let rdr = result::get(io::file_reader(testfile));\n+    let rdr = io::file_reader(testfile).get();\n     let mut line_num = 1u;\n     while !rdr.eof() {\n         let ln = rdr.read_line();"}, {"sha": "5cd54a115ff19b53e39e09dc43d4e278acaecd3a", "filename": "src/compiletest/header.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Fcompiletest%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Fcompiletest%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fheader.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -73,7 +73,7 @@ fn is_test_ignored(config: config, testfile: &Path) -> bool {\n }\n \n fn iter_header(testfile: &Path, it: fn(~str) -> bool) -> bool {\n-    let rdr = result::get(io::file_reader(testfile));\n+    let rdr = io::file_reader(testfile).get();\n     while !rdr.eof() {\n         let ln = rdr.read_line();\n "}, {"sha": "fcb007eca8b9205780aeb7b75992078cb5f31fff", "filename": "src/compiletest/runtest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Fcompiletest%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Fcompiletest%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fruntest.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -109,7 +109,7 @@ fn run_pretty_test(config: config, props: test_props, testfile: &Path) {\n     let rounds =\n         match props.pp_exact { option::Some(_) => 1, option::None => 2 };\n \n-    let mut srcs = ~[result::get(io::read_whole_file_str(testfile))];\n+    let mut srcs = ~[io::read_whole_file_str(testfile).get()];\n \n     let mut round = 0;\n     while round < rounds {\n@@ -129,7 +129,7 @@ fn run_pretty_test(config: config, props: test_props, testfile: &Path) {\n         match props.pp_exact {\n           option::Some(file) => {\n             let filepath = testfile.dir_path().push_rel(&file);\n-            result::get(io::read_whole_file_str(&filepath))\n+            io::read_whole_file_str(&filepath).get()\n           }\n           option::None => { srcs[vec::len(srcs) - 2u] }\n         };\n@@ -561,8 +561,8 @@ fn dump_output(config: config, testfile: &Path, out: ~str, err: ~str) {\n fn dump_output_file(config: config, testfile: &Path,\n                     out: ~str, extension: ~str) {\n     let outfile = make_out_name(config, testfile, extension);\n-    let writer = result::get(\n-        io::file_writer(&outfile, ~[io::Create, io::Truncate]));\n+    let writer =\n+        io::file_writer(&outfile, ~[io::Create, io::Truncate]).get();\n     writer.write_str(out);\n }\n "}, {"sha": "65adbb9e09e6a819a19c4a6aa9a22df59d015952", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -19,7 +19,7 @@ impl test_mode : cmp::Eq {\n \n fn write_file(filename: &Path, content: ~str) {\n     result::get(\n-        io::file_writer(filename, ~[io::Create, io::Truncate]))\n+        &io::file_writer(filename, ~[io::Create, io::Truncate]))\n         .write_str(content);\n }\n \n@@ -543,7 +543,7 @@ fn check_convergence(files: &[Path]) {\n     error!(\"pp convergence tests: %u files\", vec::len(files));\n     for files.each |file| {\n         if !file_might_not_converge(file) {\n-            let s = @result::get(io::read_whole_file_str(file));\n+            let s = @result::get(&io::read_whole_file_str(file));\n             if !content_might_not_converge(*s) {\n                 error!(\"pp converge: %s\", file.to_str());\n                 // Change from 7u to 2u once\n@@ -563,7 +563,7 @@ fn check_variants(files: &[Path], cx: context) {\n             loop;\n         }\n \n-        let s = @result::get(io::read_whole_file_str(file));\n+        let s = @result::get(&io::read_whole_file_str(file));\n         if contains(*s, ~\"#\") {\n             loop; // Macros are confusing\n         }"}, {"sha": "a32d7af2ac68a3843a37364a49025bf85a662899", "filename": "src/libcore/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Flibcore%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Flibcore%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcomm.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -459,7 +459,7 @@ fn test_recv_chan_wrong_task() {\n     let po = Port();\n     let ch = Chan(po);\n     send(ch, ~\"flower\");\n-    assert result::is_err(task::try(||\n+    assert result::is_err(&task::try(||\n         recv_chan(ch)\n     ))\n }"}, {"sha": "9a2a177c196274e2b6d49c3c522b3af8368034b0", "filename": "src/libcore/io.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -645,7 +645,7 @@ impl<T: Writer> T : WriterUtil {\n \n #[allow(non_implicitly_copyable_typarams)]\n fn file_writer(path: &Path, flags: ~[FileFlag]) -> Result<Writer, ~str> {\n-    result::chain(mk_file_writer(path, flags), |w| result::Ok(w))\n+    mk_file_writer(path, flags).chain(|w| result::Ok(w))\n }\n \n \n@@ -864,10 +864,10 @@ mod tests {\n         {\n             let out: io::Writer =\n                 result::get(\n-                    io::file_writer(tmpfile, ~[io::Create, io::Truncate]));\n+                    &io::file_writer(tmpfile, ~[io::Create, io::Truncate]));\n             out.write_str(frood);\n         }\n-        let inp: io::Reader = result::get(io::file_reader(tmpfile));\n+        let inp: io::Reader = result::get(&io::file_reader(tmpfile));\n         let frood2: ~str = inp.read_c_str();\n         log(debug, frood2);\n         assert frood == frood2;"}, {"sha": "9fe05723d35fb6bd88833eddc89c26d60b05923a", "filename": "src/libcore/private.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Flibcore%2Fprivate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Flibcore%2Fprivate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprivate.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -283,7 +283,7 @@ fn test_weaken_task_fail() {\n             }\n         }\n     };\n-    assert result::is_err(res);\n+    assert result::is_err(&res);\n }\n \n /****************************************************************************"}, {"sha": "3735d555e2d04d3371bf2e1b469e5786f400e7b2", "filename": "src/libcore/result.rs", "status": "modified", "additions": 62, "deletions": 54, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Flibcore%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Flibcore%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fresult.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -1,5 +1,9 @@\n //! A type representing either success or failure\n \n+// NB: transitionary, de-mode-ing.\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n use cmp::Eq;\n use either::Either;\n \n@@ -18,8 +22,8 @@ enum Result<T, U> {\n  *\n  * If the result is an error\n  */\n-pure fn get<T: Copy, U>(res: Result<T, U>) -> T {\n-    match res {\n+pure fn get<T: Copy, U>(res: &Result<T, U>) -> T {\n+    match *res {\n       Ok(t) => t,\n       Err(the_err) => unsafe {\n         fail fmt!(\"get called on error result: %?\", the_err)\n@@ -50,23 +54,23 @@ pure fn get_ref<T, U>(res: &a/Result<T, U>) -> &a/T {\n  *\n  * If the result is not an error\n  */\n-pure fn get_err<T, U: Copy>(res: Result<T, U>) -> U {\n-    match res {\n+pure fn get_err<T, U: Copy>(res: &Result<T, U>) -> U {\n+    match *res {\n       Err(u) => u,\n       Ok(_) => fail ~\"get_err called on ok result\"\n     }\n }\n \n /// Returns true if the result is `ok`\n-pure fn is_ok<T, U>(res: Result<T, U>) -> bool {\n-    match res {\n+pure fn is_ok<T, U>(res: &Result<T, U>) -> bool {\n+    match *res {\n       Ok(_) => true,\n       Err(_) => false\n     }\n }\n \n /// Returns true if the result is `err`\n-pure fn is_err<T, U>(res: Result<T, U>) -> bool {\n+pure fn is_err<T, U>(res: &Result<T, U>) -> bool {\n     !is_ok(res)\n }\n \n@@ -76,8 +80,8 @@ pure fn is_err<T, U>(res: Result<T, U>) -> bool {\n  * `ok` result variants are converted to `either::right` variants, `err`\n  * result variants are converted to `either::left`.\n  */\n-pure fn to_either<T: Copy, U: Copy>(res: Result<U, T>) -> Either<T, U> {\n-    match res {\n+pure fn to_either<T: Copy, U: Copy>(res: &Result<U, T>) -> Either<T, U> {\n+    match *res {\n       Ok(res) => either::Right(res),\n       Err(fail_) => either::Left(fail_)\n     }\n@@ -97,11 +101,13 @@ pure fn to_either<T: Copy, U: Copy>(res: Result<U, T>) -> Either<T, U> {\n  *         ok(parse_bytes(buf))\n  *     }\n  */\n-fn chain<T, U: Copy, V: Copy>(res: Result<T, V>, op: fn(T) -> Result<U, V>)\n+fn chain<T, U: Copy, V: Copy>(+res: Result<T, V>, op: fn(+t: T) -> Result<U, V>)\n     -> Result<U, V> {\n-    match res {\n-      Ok(t) => op(t),\n-      Err(e) => Err(e)\n+    // XXX: Should be writable with move + match\n+    if res.is_ok() {\n+        op(unwrap(res))\n+    } else {\n+        Err(unwrap_err(res))\n     }\n }\n \n@@ -114,10 +120,10 @@ fn chain<T, U: Copy, V: Copy>(res: Result<T, V>, op: fn(T) -> Result<U, V>)\n  * successful result while handling an error.\n  */\n fn chain_err<T: Copy, U: Copy, V: Copy>(\n-    res: Result<T, V>,\n-    op: fn(V) -> Result<T, U>)\n+    +res: Result<T, V>,\n+    op: fn(+t: V) -> Result<T, U>)\n     -> Result<T, U> {\n-    match res {\n+    move match res {\n       Ok(t) => Ok(t),\n       Err(v) => op(v)\n     }\n@@ -137,9 +143,9 @@ fn chain_err<T: Copy, U: Copy, V: Copy>(\n  *         print_buf(buf)\n  *     }\n  */\n-fn iter<T, E>(res: Result<T, E>, f: fn(T)) {\n-    match res {\n-      Ok(t) => f(t),\n+fn iter<T, E>(res: &Result<T, E>, f: fn((&T))) {\n+    match *res {\n+      Ok(t) => f(&t),\n       Err(_) => ()\n     }\n }\n@@ -152,10 +158,10 @@ fn iter<T, E>(res: Result<T, E>, f: fn(T)) {\n  * This function can be used to pass through a successful result while\n  * handling an error.\n  */\n-fn iter_err<T, E>(res: Result<T, E>, f: fn(E)) {\n-    match res {\n+fn iter_err<T, E>(res: &Result<T, E>, f: fn((&E))) {\n+    match *res {\n       Ok(_) => (),\n-      Err(e) => f(e)\n+      Err(e) => f(&e)\n     }\n }\n \n@@ -173,10 +179,10 @@ fn iter_err<T, E>(res: Result<T, E>, f: fn(E)) {\n  *         parse_bytes(buf)\n  *     }\n  */\n-fn map<T, E: Copy, U: Copy>(res: Result<T, E>, op: fn(T) -> U)\n+fn map<T, E: Copy, U: Copy>(res: &Result<T, E>, op: fn((&T)) -> U)\n   -> Result<U, E> {\n-    match res {\n-      Ok(t) => Ok(op(t)),\n+    match *res {\n+      Ok(t) => Ok(op(&t)),\n       Err(e) => Err(e)\n     }\n }\n@@ -189,63 +195,65 @@ fn map<T, E: Copy, U: Copy>(res: Result<T, E>, op: fn(T) -> U)\n  * is immediately returned.  This function can be used to pass through a\n  * successful result while handling an error.\n  */\n-fn map_err<T: Copy, E, F: Copy>(res: Result<T, E>, op: fn(E) -> F)\n+fn map_err<T: Copy, E, F: Copy>(res: &Result<T, E>, op: fn((&E)) -> F)\n   -> Result<T, F> {\n-    match res {\n+    match *res {\n       Ok(t) => Ok(t),\n-      Err(e) => Err(op(e))\n+      Err(e) => Err(op(&e))\n     }\n }\n \n impl<T, E> Result<T, E> {\n-    fn is_ok() -> bool { is_ok(self) }\n+    fn is_ok() -> bool { is_ok(&self) }\n \n-    fn is_err() -> bool { is_err(self) }\n+    fn is_err() -> bool { is_err(&self) }\n \n-    fn iter(f: fn(T)) {\n+    fn iter(f: fn((&T))) {\n         match self {\n-          Ok(t) => f(t),\n+          Ok(t) => f(&t),\n           Err(_) => ()\n         }\n     }\n \n-    fn iter_err(f: fn(E)) {\n+    fn iter_err(f: fn((&E))) {\n         match self {\n           Ok(_) => (),\n-          Err(e) => f(e)\n+          Err(e) => f(&e)\n         }\n     }\n }\n \n impl<T: Copy, E> Result<T, E> {\n-    fn get() -> T { get(self) }\n+    fn get() -> T { get(&self) }\n \n-    fn map_err<F:Copy>(op: fn(E) -> F) -> Result<T,F> {\n+    fn map_err<F:Copy>(op: fn((&E)) -> F) -> Result<T,F> {\n         match self {\n           Ok(t) => Ok(t),\n-          Err(e) => Err(op(e))\n+          Err(e) => Err(op(&e))\n         }\n     }\n }\n \n impl<T, E: Copy> Result<T, E> {\n-    fn get_err() -> E { get_err(self) }\n+    fn get_err() -> E { get_err(&self) }\n \n-    fn map<U:Copy>(op: fn(T) -> U) -> Result<U,E> {\n+    fn map<U:Copy>(op: fn((&T)) -> U) -> Result<U,E> {\n         match self {\n-          Ok(t) => Ok(op(t)),\n+          Ok(t) => Ok(op(&t)),\n           Err(e) => Err(e)\n         }\n     }\n }\n \n impl<T: Copy, E: Copy> Result<T, E> {\n-    fn chain<U:Copy>(op: fn(T) -> Result<U,E>) -> Result<U,E> {\n-        chain(self, op)\n+    fn chain<U:Copy>(op: fn(+t: T) -> Result<U,E>) -> Result<U,E> {\n+        // XXX: Bad copy\n+        chain(copy self, op)\n     }\n \n-    fn chain_err<F:Copy>(op: fn(E) -> Result<T,F>) -> Result<T,F> {\n-        chain_err(self, op)\n+    fn chain_err<F:Copy>(op: fn(+t: E) -> Result<T,F>) -> Result<T,F> {\n+        // XXX: Bad copy\n+        chain_err(copy self, op)\n     }\n }\n \n@@ -280,11 +288,11 @@ fn map_vec<T,U:Copy,V:Copy>(\n }\n \n fn map_opt<T,U:Copy,V:Copy>(\n-    o_t: Option<T>, op: fn(T) -> Result<V,U>) -> Result<Option<V>,U> {\n+    o_t: &Option<T>, op: fn((&T)) -> Result<V,U>) -> Result<Option<V>,U> {\n \n-    match o_t {\n+    match *o_t {\n       None => Ok(None),\n-      Some(t) => match op(t) {\n+      Some(t) => match op(&t) {\n         Ok(v) => Ok(Some(v)),\n         Err(e) => Err(e)\n       }\n@@ -301,14 +309,14 @@ fn map_opt<T,U:Copy,V:Copy>(\n  * to accommodate an error like the vectors being of different lengths.\n  */\n fn map_vec2<S,T,U:Copy,V:Copy>(ss: &[S], ts: &[T],\n-                               op: fn(S,T) -> Result<V,U>) -> Result<~[V],U> {\n+                               op: fn((&S),(&T)) -> Result<V,U>) -> Result<~[V],U> {\n \n     assert vec::same_length(ss, ts);\n     let n = vec::len(ts);\n     let mut vs = vec::with_capacity(n);\n     let mut i = 0u;\n     while i < n {\n-        match op(ss[i],ts[i]) {\n+        match op(&ss[i],&ts[i]) {\n           Ok(v) => vec::push(vs, v),\n           Err(u) => return Err(u)\n         }\n@@ -323,13 +331,13 @@ fn map_vec2<S,T,U:Copy,V:Copy>(ss: &[S], ts: &[T],\n  * on its own as no result vector is built.\n  */\n fn iter_vec2<S,T,U:Copy>(ss: &[S], ts: &[T],\n-                         op: fn(S,T) -> Result<(),U>) -> Result<(),U> {\n+                         op: fn((&S),(&T)) -> Result<(),U>) -> Result<(),U> {\n \n     assert vec::same_length(ss, ts);\n     let n = vec::len(ts);\n     let mut i = 0u;\n     while i < n {\n-        match op(ss[i],ts[i]) {\n+        match op(&ss[i],&ts[i]) {\n           Ok(()) => (),\n           Err(u) => return Err(u)\n         }\n@@ -380,20 +388,20 @@ mod tests {\n     #[legacy_exports];\n     fn op1() -> result::Result<int, ~str> { result::Ok(666) }\n \n-    fn op2(&&i: int) -> result::Result<uint, ~str> {\n+    fn op2(+i: int) -> result::Result<uint, ~str> {\n         result::Ok(i as uint + 1u)\n     }\n \n     fn op3() -> result::Result<int, ~str> { result::Err(~\"sadface\") }\n \n     #[test]\n     fn chain_success() {\n-        assert get(chain(op1(), op2)) == 667u;\n+        assert get(&chain(op1(), op2)) == 667u;\n     }\n \n     #[test]\n     fn chain_failure() {\n-        assert get_err(chain(op3(), op2)) == ~\"sadface\";\n+        assert get_err(&chain(op3(), op2)) == ~\"sadface\";\n     }\n \n     #[test]"}, {"sha": "2002e143ffa4077ba78b6954339675a17ae9efb7", "filename": "src/libstd/json.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -892,7 +892,7 @@ mod tests {\n             ]))\n         ]);\n         let astr = to_str(a);\n-        let b = result::get(from_str(astr));\n+        let b = result::get(&from_str(astr));\n         let bstr = to_str(b);\n         assert astr == bstr;\n         assert a == b;\n@@ -1040,24 +1040,24 @@ mod tests {\n         assert from_str(~\"{\\\"a\\\":1,\") ==\n             Err({line: 1u, col: 8u, msg: @~\"EOF while parsing object\"});\n \n-        assert eq(result::get(from_str(~\"{}\")), mk_dict(~[]));\n-        assert eq(result::get(from_str(~\"{\\\"a\\\": 3}\")),\n+        assert eq(result::get(&from_str(~\"{}\")), mk_dict(~[]));\n+        assert eq(result::get(&from_str(~\"{\\\"a\\\": 3}\")),\n                   mk_dict(~[(~\"a\", Num(3.0f))]));\n \n-        assert eq(result::get(from_str(~\"{ \\\"a\\\": null, \\\"b\\\" : true }\")),\n+        assert eq(result::get(&from_str(~\"{ \\\"a\\\": null, \\\"b\\\" : true }\")),\n                   mk_dict(~[\n                       (~\"a\", Null),\n                       (~\"b\", Boolean(true))]));\n-        assert eq(result::get(from_str(~\"\\n{ \\\"a\\\": null, \\\"b\\\" : true }\\n\")),\n+        assert eq(result::get(&from_str(~\"\\n{ \\\"a\\\": null, \\\"b\\\" : true }\\n\")),\n                   mk_dict(~[\n                       (~\"a\", Null),\n                       (~\"b\", Boolean(true))]));\n-        assert eq(result::get(from_str(~\"{\\\"a\\\" : 1.0 ,\\\"b\\\": [ true ]}\")),\n+        assert eq(result::get(&from_str(~\"{\\\"a\\\" : 1.0 ,\\\"b\\\": [ true ]}\")),\n                   mk_dict(~[\n                       (~\"a\", Num(1.0)),\n                       (~\"b\", List(@~[Boolean(true)]))\n                   ]));\n-        assert eq(result::get(from_str(\n+        assert eq(result::get(&from_str(\n                       ~\"{\" +\n                           ~\"\\\"a\\\": 1.0, \" +\n                           ~\"\\\"b\\\": [\" +"}, {"sha": "445bc62e4c9a60439c601630a528834f71435932", "filename": "src/libstd/net_ip.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Flibstd%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Flibstd%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_ip.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -176,24 +176,24 @@ mod v4 {\n         unsafe {\n             let INADDR_NONE = ll::get_INADDR_NONE();\n             let ip_rep_result = parse_to_ipv4_rep(ip);\n-            if result::is_err(ip_rep_result) {\n-                let err_str = result::get_err(ip_rep_result);\n+            if result::is_err(&ip_rep_result) {\n+                let err_str = result::get_err(&ip_rep_result);\n                 return result::Err({err_msg: err_str})\n             }\n             // ipv4_rep.as_u32 is unsafe :/\n             let input_is_inaddr_none =\n-                result::get(ip_rep_result).as_u32() == INADDR_NONE;\n+                result::get(&ip_rep_result).as_u32() == INADDR_NONE;\n \n             let new_addr = uv_ip4_addr(str::from_slice(ip), 22);\n             let reformatted_name = uv_ip4_name(&new_addr);\n             log(debug, fmt!(\"try_parse_addr: input ip: %s reparsed ip: %s\",\n                             ip, reformatted_name));\n             let ref_ip_rep_result = parse_to_ipv4_rep(reformatted_name);\n-            if result::is_err(ref_ip_rep_result) {\n-                let err_str = result::get_err(ref_ip_rep_result);\n+            if result::is_err(&ref_ip_rep_result) {\n+                let err_str = result::get_err(&ref_ip_rep_result);\n                 return result::Err({err_msg: err_str})\n             }\n-            if result::get(ref_ip_rep_result).as_u32() == INADDR_NONE &&\n+            if result::get(&ref_ip_rep_result).as_u32() == INADDR_NONE &&\n                  !input_is_inaddr_none {\n                 return result::Err(\n                     {err_msg: ~\"uv_ip4_name produced invalid result.\"})\n@@ -358,7 +358,7 @@ mod test {\n         let localhost_name = ~\"localhost\";\n         let iotask = uv::global_loop::get();\n         let ga_result = get_addr(localhost_name, iotask);\n-        if result::is_err(ga_result) {\n+        if result::is_err(&ga_result) {\n             fail ~\"got err result from net::ip::get_addr();\"\n         }\n         // note really sure how to realiably test/assert\n@@ -384,6 +384,6 @@ mod test {\n         let localhost_name = ~\"sjkl234m,./sdf\";\n         let iotask = uv::global_loop::get();\n         let ga_result = get_addr(localhost_name, iotask);\n-        assert result::is_err(ga_result);\n+        assert result::is_err(&ga_result);\n     }\n }"}, {"sha": "a1c7637dee69f9fe44b6aff18828a1864a3cfb82", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -871,17 +871,17 @@ fn read_common_impl(socket_data: *TcpSocketData, timeout_msecs: uint)\n     log(debug, ~\"starting tcp::read\");\n     let iotask = (*socket_data).iotask;\n     let rs_result = read_start_common_impl(socket_data);\n-    if result::is_err(rs_result) {\n-        let err_data = result::get_err(rs_result);\n+    if result::is_err(&rs_result) {\n+        let err_data = result::get_err(&rs_result);\n         result::Err(err_data)\n     }\n     else {\n         log(debug, ~\"tcp::read before recv_timeout\");\n         let read_result = if timeout_msecs > 0u {\n             timer::recv_timeout(\n-               iotask, timeout_msecs, result::get(rs_result))\n+               iotask, timeout_msecs, result::get(&rs_result))\n         } else {\n-            Some(core::comm::recv(result::get(rs_result)))\n+            Some(core::comm::recv(result::get(&rs_result)))\n         };\n         log(debug, ~\"tcp::read after recv_timeout\");\n         match read_result {\n@@ -1514,9 +1514,9 @@ mod test {\n \n                     let accept_result = accept(new_conn);\n                     log(debug, ~\"SERVER: after accept()\");\n-                    if result::is_err(accept_result) {\n+                    if result::is_err(&accept_result) {\n                         log(debug, ~\"SERVER: error accept connection\");\n-                        let err_data = result::get_err(accept_result);\n+                        let err_data = result::get_err(&accept_result);\n                         core::comm::send(kill_ch, Some(err_data));\n                         log(debug,\n                             ~\"SERVER/WORKER: send on err cont ch\");\n@@ -1558,8 +1558,8 @@ mod test {\n             log(debug, ~\"SERVER: recv'd on cont_ch..leaving listen cb\");\n         });\n         // err check on listen_result\n-        if result::is_err(listen_result) {\n-            match result::get_err(listen_result) {\n+        if result::is_err(&listen_result) {\n+            match result::get_err(&listen_result) {\n               GenericListenErr(name, msg) => {\n                 fail fmt!(\"SERVER: exited abnormally name %s msg %s\",\n                                 name, msg);\n@@ -1592,8 +1592,8 @@ mod test {\n                            new_conn, kill_ch);\n         });\n         // err check on listen_result\n-        if result::is_err(listen_result) {\n-            result::get_err(listen_result)\n+        if result::is_err(&listen_result) {\n+            result::get_err(&listen_result)\n         }\n         else {\n             fail ~\"SERVER: did not fail as expected\"\n@@ -1609,9 +1609,9 @@ mod test {\n         log(debug, ~\"CLIENT: starting..\");\n         let connect_result = connect(move server_ip_addr, server_port,\n                                      iotask);\n-        if result::is_err(connect_result) {\n+        if result::is_err(&connect_result) {\n             log(debug, ~\"CLIENT: failed to connect\");\n-            let err_data = result::get_err(connect_result);\n+            let err_data = result::get_err(&connect_result);\n             Err(err_data)\n         }\n         else {\n@@ -1636,9 +1636,9 @@ mod test {\n     fn tcp_write_single(sock: &TcpSocket, val: ~[u8]) {\n         let write_result_future = sock.write_future(val);\n         let write_result = write_result_future.get();\n-        if result::is_err(write_result) {\n+        if result::is_err(&write_result) {\n             log(debug, ~\"tcp_write_single: write failed!\");\n-            let err_data = result::get_err(write_result);\n+            let err_data = result::get_err(&write_result);\n             log(debug, fmt!(\"tcp_write_single err name: %s msg: %s\",\n                 err_data.err_name, err_data.err_msg));\n             // meh. torn on what to do here."}, {"sha": "2a27aed773d0fd96da6e88121402c4899e7f8ff4", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -627,30 +627,30 @@ fn get_query_fragment(rawurl: &str) ->\n fn from_str(rawurl: &str) -> result::Result<Url, ~str> {\n     // scheme\n     let mut schm = get_scheme(rawurl);\n-    if result::is_err(schm) {\n-        return result::Err(copy *result::get_err(schm));\n+    if result::is_err(&schm) {\n+        return result::Err(copy *result::get_err(&schm));\n     }\n     let (scheme, rest) = result::unwrap(schm);\n \n     // authority\n     let mut auth = get_authority(rest);\n-    if result::is_err(auth) {\n-        return result::Err(copy *result::get_err(auth));\n+    if result::is_err(&auth) {\n+        return result::Err(copy *result::get_err(&auth));\n     }\n     let (userinfo, host, port, rest) = result::unwrap(auth);\n \n     // path\n     let has_authority = if host == ~\"\" { false } else { true };\n     let mut pth = get_path(rest, has_authority);\n-    if result::is_err(pth) {\n-        return result::Err(copy *result::get_err(pth));\n+    if result::is_err(&pth) {\n+        return result::Err(copy *result::get_err(&pth));\n     }\n     let (path, rest) = result::unwrap(pth);\n \n     // query and fragment\n     let mut qry = get_query_fragment(rest);\n-    if result::is_err(qry) {\n-        return result::Err(copy *result::get_err(qry));\n+    if result::is_err(&qry) {\n+        return result::Err(copy *result::get_err(&qry));\n     }\n     let (query, fragment) = result::unwrap(qry);\n \n@@ -796,13 +796,13 @@ mod tests {\n         assert p == option::Some(~\"8000\");\n \n         // invalid authorities;\n-        assert result::is_err(get_authority(\n+        assert result::is_err(&get_authority(\n             ~\"//user:pass@rust-lang:something\"));\n-        assert result::is_err(get_authority(\n+        assert result::is_err(&get_authority(\n             ~\"//user@rust-lang:something:/path\"));\n-        assert result::is_err(get_authority(\n+        assert result::is_err(&get_authority(\n             ~\"//2001:0db8:85a3:0042:0000:8a2e:0370:7334:800a\"));\n-        assert result::is_err(get_authority(\n+        assert result::is_err(&get_authority(\n             ~\"//2001:0db8:85a3:0042:0000:8a2e:0370:7334:8000:00\"));\n \n         // these parse as empty, because they don't start with '//'\n@@ -830,7 +830,7 @@ mod tests {\n         assert r == ~\"?q=v\";\n \n         //failure cases\n-        assert result::is_err(get_path(~\"something?q\", true));\n+        assert result::is_err(&get_path(~\"something?q\", true));\n \n     }\n \n@@ -877,13 +877,13 @@ mod tests {\n \n     #[test]\n     fn test_no_scheme() {\n-        assert result::is_err(get_scheme(~\"noschemehere.html\"));\n+        assert result::is_err(&get_scheme(~\"noschemehere.html\"));\n     }\n \n     #[test]\n     fn test_invalid_scheme_errors() {\n-        assert result::is_err(from_str(~\"99://something\"));\n-        assert result::is_err(from_str(~\"://something\"));\n+        assert result::is_err(&from_str(~\"99://something\"));\n+        assert result::is_err(&from_str(~\"://something\"));\n     }\n \n     #[test]"}, {"sha": "5434677b6fcb6e2682f42a132ff1c1b41d3424fe", "filename": "src/rustc/middle/typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Fastconv.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -415,7 +415,7 @@ fn ty_of_arg<AC: ast_conv, RS: region_scope Copy Owned>(\n     let mode = {\n         match a.mode {\n           ast::infer(_) if expected_ty.is_some() => {\n-            result::get(ty::unify_mode(\n+            result::get(&ty::unify_mode(\n                 self.tcx(),\n                 ty::expected_found {expected: expected_ty.get().mode,\n                                     found: a.mode}))\n@@ -434,7 +434,7 @@ fn ty_of_arg<AC: ast_conv, RS: region_scope Copy Owned>(\n               _ => {\n                 let m1 = ast::expl(ty::default_arg_mode_for_ty(self.tcx(),\n                                                                ty));\n-                result::get(ty::unify_mode(\n+                result::get(&ty::unify_mode(\n                     self.tcx(),\n                     ty::expected_found {expected: m1,\n                                         found: a.mode}))"}, {"sha": "db65bff9bfec22586ea5f2e9529e4a1fa79c4aef", "filename": "src/rustc/middle/typeck/infer/combine.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck%2Finfer%2Fcombine.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -221,7 +221,7 @@ fn super_tps<C:combine>(\n \n     if vec::same_length(as_, bs) {\n         iter_vec2(as_, bs, |a, b| {\n-            eq_tys(self, a, b)\n+            eq_tys(self, *a, *b)\n         }).then(|| Ok(as_.to_vec()) )\n     } else {\n         Err(ty::terr_ty_param_size(\n@@ -327,7 +327,7 @@ fn super_fn_sigs<C:combine>(\n                           b_args: ~[ty::arg]) -> cres<~[ty::arg]> {\n \n         if vec::same_length(a_args, b_args) {\n-            map_vec2(a_args, b_args, |a, b| self.args(a, b))\n+            map_vec2(a_args, b_args, |a, b| self.args(*a, *b))\n         } else {\n             Err(ty::terr_arg_count)\n         }\n@@ -474,7 +474,7 @@ fn super_tys<C:combine>(\n       (ty::ty_rec(as_), ty::ty_rec(bs)) => {\n         if vec::same_length(as_, bs) {\n             map_vec2(as_, bs, |a,b| {\n-                self.flds(a, b)\n+                self.flds(*a, *b)\n             }).chain(|flds| Ok(ty::mk_rec(tcx, flds)) )\n         } else {\n             Err(ty::terr_record_size(expected_found(self, as_.len(),\n@@ -484,7 +484,7 @@ fn super_tys<C:combine>(\n \n       (ty::ty_tup(as_), ty::ty_tup(bs)) => {\n         if vec::same_length(as_, bs) {\n-            map_vec2(as_, bs, |a, b| self.tys(a, b) )\n+            map_vec2(as_, bs, |a, b| self.tys(*a, *b) )\n                 .chain(|ts| Ok(ty::mk_tup(tcx, ts)) )\n         } else {\n             Err(ty::terr_tuple_size("}, {"sha": "d8e79182506c7870a1599fa43008b8d14754911d", "filename": "src/rustdoc/config.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Frustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Frustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fconfig.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -285,100 +285,100 @@ mod test {\n #[test]\n fn should_error_with_no_crates() {\n     let config = test::parse_config(~[~\"rustdoc\"]);\n-    assert result::get_err(config) == ~\"no crates specified\";\n+    assert config.get_err() == ~\"no crates specified\";\n }\n \n #[test]\n fn should_error_with_multiple_crates() {\n     let config =\n         test::parse_config(~[~\"rustdoc\", ~\"crate1.rc\", ~\"crate2.rc\"]);\n-    assert result::get_err(config) == ~\"multiple crates specified\";\n+    assert config.get_err() == ~\"multiple crates specified\";\n }\n \n #[test]\n fn should_set_output_dir_to_cwd_if_not_provided() {\n     let config = test::parse_config(~[~\"rustdoc\", ~\"crate.rc\"]);\n-    assert result::get(config).output_dir == Path(\".\");\n+    assert config.get().output_dir == Path(\".\");\n }\n \n #[test]\n fn should_set_output_dir_if_provided() {\n     let config = test::parse_config(~[\n         ~\"rustdoc\", ~\"crate.rc\", ~\"--output-dir\", ~\"snuggles\"\n     ]);\n-    assert result::get(config).output_dir == Path(\"snuggles\");\n+    assert config.get().output_dir == Path(\"snuggles\");\n }\n \n #[test]\n fn should_set_output_format_to_pandoc_html_if_not_provided() {\n     let config = test::parse_config(~[~\"rustdoc\", ~\"crate.rc\"]);\n-    assert result::get(config).output_format == PandocHtml;\n+    assert config.get().output_format == PandocHtml;\n }\n \n #[test]\n fn should_set_output_format_to_markdown_if_requested() {\n     let config = test::parse_config(~[\n         ~\"rustdoc\", ~\"crate.rc\", ~\"--output-format\", ~\"markdown\"\n     ]);\n-    assert result::get(config).output_format == Markdown;\n+    assert config.get().output_format == Markdown;\n }\n \n #[test]\n fn should_set_output_format_to_pandoc_html_if_requested() {\n     let config = test::parse_config(~[\n         ~\"rustdoc\", ~\"crate.rc\", ~\"--output-format\", ~\"html\"\n     ]);\n-    assert result::get(config).output_format == PandocHtml;\n+    assert config.get().output_format == PandocHtml;\n }\n \n #[test]\n fn should_error_on_bogus_format() {\n     let config = test::parse_config(~[\n         ~\"rustdoc\", ~\"crate.rc\", ~\"--output-format\", ~\"bogus\"\n     ]);\n-    assert result::get_err(config) == ~\"unknown output format 'bogus'\";\n+    assert config.get_err() == ~\"unknown output format 'bogus'\";\n }\n \n #[test]\n fn should_set_output_style_to_doc_per_mod_by_default() {\n     let config = test::parse_config(~[~\"rustdoc\", ~\"crate.rc\"]);\n-    assert result::get(config).output_style == DocPerMod;\n+    assert config.get().output_style == DocPerMod;\n }\n \n #[test]\n fn should_set_output_style_to_one_doc_if_requested() {\n     let config = test::parse_config(~[\n         ~\"rustdoc\", ~\"crate.rc\", ~\"--output-style\", ~\"doc-per-crate\"\n     ]);\n-    assert result::get(config).output_style == DocPerCrate;\n+    assert config.get().output_style == DocPerCrate;\n }\n \n #[test]\n fn should_set_output_style_to_doc_per_mod_if_requested() {\n     let config = test::parse_config(~[\n         ~\"rustdoc\", ~\"crate.rc\", ~\"--output-style\", ~\"doc-per-mod\"\n     ]);\n-    assert result::get(config).output_style == DocPerMod;\n+    assert config.get().output_style == DocPerMod;\n }\n \n #[test]\n fn should_error_on_bogus_output_style() {\n     let config = test::parse_config(~[\n         ~\"rustdoc\", ~\"crate.rc\", ~\"--output-style\", ~\"bogus\"\n     ]);\n-    assert result::get_err(config) == ~\"unknown output style 'bogus'\";\n+    assert config.get_err() == ~\"unknown output style 'bogus'\";\n }\n \n #[test]\n fn should_set_pandoc_command_if_requested() {\n     let config = test::parse_config(~[\n         ~\"rustdoc\", ~\"crate.rc\", ~\"--pandoc-cmd\", ~\"panda-bear-doc\"\n     ]);\n-    assert result::get(config).pandoc_cmd == Some(~\"panda-bear-doc\");\n+    assert config.get().pandoc_cmd == Some(~\"panda-bear-doc\");\n }\n \n #[test]\n fn should_set_pandoc_command_when_using_pandoc() {\n     let config = test::parse_config(~[~\"rustdoc\", ~\"crate.rc\"]);\n-    assert result::get(config).pandoc_cmd == Some(~\"pandoc\");\n+    assert config.get().pandoc_cmd == Some(~\"pandoc\");\n }"}, {"sha": "535b76bc94bfc77a9af367c8e84ab402bf25aa24", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -56,7 +56,7 @@ fn read_line() {\n         .push_rel(&Path(\"src/test/bench/shootout-k-nucleotide.data\"));\n \n     for int::range(0, 3) |_i| {\n-        let reader = result::get(io::file_reader(&path));\n+        let reader = result::get(&io::file_reader(&path));\n         while !reader.eof() {\n             reader.read_line();\n         }"}, {"sha": "0c742e16bfa574df8ace7e3c8209b87d4d1b995a", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -81,7 +81,7 @@ fn main(++args: ~[~str]) {\n     };\n \n     let writer = if os::getenv(~\"RUST_BENCH\").is_some() {\n-        result::get(io::file_writer(&Path(\"./shootout-fasta.data\"),\n+        result::get(&io::file_writer(&Path(\"./shootout-fasta.data\"),\n                                     ~[io::Truncate, io::Create]))\n     } else {\n         io::stdout()"}, {"sha": "b5dcacd76d3b4b68c98a379e6245cf424a651dfc", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -134,7 +134,7 @@ fn main(++args: ~[~str]) {\n        // get to this massive data set, but #include_bin chokes on it (#2598)\n        let path = Path(env!(\"CFG_SRC_DIR\"))\n            .push_rel(&Path(\"src/test/bench/shootout-k-nucleotide.data\"));\n-       result::get(io::file_reader(&path))\n+       result::get(&io::file_reader(&path))\n    } else {\n       io::stdin()\n    };"}, {"sha": "5f7036ed82a52e542382ce83815cc730bc44b04c", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -131,7 +131,7 @@ fn main(++args: ~[~str]) {\n        // get to this massive data set, but #include_bin chokes on it (#2598)\n        let path = Path(env!(\"CFG_SRC_DIR\"))\n            .push_rel(&Path(\"src/test/bench/shootout-k-nucleotide.data\"));\n-       result::get(io::file_reader(&path))\n+       result::get(&io::file_reader(&path))\n    } else {\n       io::stdin()\n    };"}, {"sha": "0cf0f0da5e5aea32195430969092c2aacc72b36b", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -114,7 +114,7 @@ fn writer(path: ~str, writech: comm::Chan<comm::Chan<line>>, size: uint)\n         }\n         _ => {\n             result::get(\n-                io::file_writer(&Path(path),\n+                &io::file_writer(&Path(path),\n                 ~[io::Create, io::Truncate]))\n         }\n     };"}, {"sha": "2b8712f3d593a8036086bee8d4f838f3116c4d45", "filename": "src/test/run-fail/result-get-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fresult-get-fail.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -1,4 +1,4 @@\n // error-pattern:get called on error result: ~\"kitty\"\n fn main() {\n-  log(error, result::get(result::Err::<int,~str>(~\"kitty\")));\n+  log(error, result::get(&result::Err::<int,~str>(~\"kitty\")));\n }"}, {"sha": "e4bfa54c410413af47b230d46bcdb65dbbd87304", "filename": "src/test/run-pass/cleanup-copy-mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d05e2ad66c7bb2418b7c746f87486d4f74180193/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs?ref=d05e2ad66c7bb2418b7c746f87486d4f74180193", "patch": "@@ -2,7 +2,7 @@\n fn adder(+x: @int, +y: @int) -> int { return *x + *y; }\n fn failer() -> @int { fail; }\n fn main() {\n-    assert(result::is_err(task::try(|| {\n+    assert(result::is_err(&task::try(|| {\n         adder(@2, failer()); ()\n     })));\n }"}]}