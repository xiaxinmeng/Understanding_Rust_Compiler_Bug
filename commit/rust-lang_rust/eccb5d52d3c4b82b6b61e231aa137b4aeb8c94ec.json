{"sha": "eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjY2I1ZDUyZDNjNGI4MmI2YjYxZTIzMWFhMTM3YjRhZWI4Yzk0ZWM=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-31T12:13:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-31T12:13:31Z"}, "message": "Merge #5619\n\n5619: Reame PlaceholderType -> InferType r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "a40a875cf0c364144d656f77b30b464f372f3667", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a40a875cf0c364144d656f77b30b464f372f3667"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfJArrCRBK7hj4Ov3rIwAAdHIIACVuIFR4j8I74vsypQ4AYSTI\nehgWRdprv4cElrF78xfrYnR3jsw9fXdCO5i7OASZwRlgeHAfcREfCy8N7LWOR1cR\njrBFzyQI7rT/tMXOodoYwXLdDZpVnVyHK6YekJqIjlmh76gkRgiUyA9gxLC+B6ry\npin5VxlwebMllDxPv2v+mYgv5aQNVM73l7jberQjZzdFWSOXsrv0JexXEszHdZpf\nJbdsiDfmFN+O1ivv6bRQ9R4iNblHOsLMFiNKqPdblr1oXJqOflQAalBFRBAZPY+G\n9tPcFIqYQImK7xFTDEwBXlSmom8hDRmFokffmSwHJhAwimCk+/M3gwvz6dg1RmI=\n=3eJD\n-----END PGP SIGNATURE-----\n", "payload": "tree a40a875cf0c364144d656f77b30b464f372f3667\nparent 8c802a3dbb5ea1dea8de17f59d0620e3a710474a\nparent a6e45c6c69bf258118940941c12d057deb79e60c\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596197611 +0000\ncommitter GitHub <noreply@github.com> 1596197611 +0000\n\nMerge #5619\n\n5619: Reame PlaceholderType -> InferType r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec", "html_url": "https://github.com/rust-lang/rust/commit/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c802a3dbb5ea1dea8de17f59d0620e3a710474a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c802a3dbb5ea1dea8de17f59d0620e3a710474a", "html_url": "https://github.com/rust-lang/rust/commit/8c802a3dbb5ea1dea8de17f59d0620e3a710474a"}, {"sha": "a6e45c6c69bf258118940941c12d057deb79e60c", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6e45c6c69bf258118940941c12d057deb79e60c", "html_url": "https://github.com/rust-lang/rust/commit/a6e45c6c69bf258118940941c12d057deb79e60c"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "d8b0af0f5f87fe6c23e8124b4de746e6cfded144", "filename": "crates/ra_assists/src/handlers/add_explicit_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_explicit_type.rs?ref=eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec", "patch": "@@ -46,7 +46,7 @@ pub(crate) fn add_explicit_type(acc: &mut Assists, ctx: &AssistContext) -> Optio\n     // and it has no placeholders\n     let ascribed_ty = let_stmt.ty();\n     if let Some(ty) = &ascribed_ty {\n-        if ty.syntax().descendants().find_map(ast::PlaceholderType::cast).is_none() {\n+        if ty.syntax().descendants().find_map(ast::InferType::cast).is_none() {\n             return None;\n         }\n     }"}, {"sha": "524c033b8e00c53bc891a3c3595a54f236eec2a9", "filename": "crates/ra_hir_def/src/type_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs?ref=eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec", "patch": "@@ -111,7 +111,7 @@ impl TypeRef {\n                 let mutability = Mutability::from_mutable(inner.mut_token().is_some());\n                 TypeRef::Reference(Box::new(inner_ty), mutability)\n             }\n-            ast::Type::PlaceholderType(_inner) => TypeRef::Placeholder,\n+            ast::Type::InferType(_inner) => TypeRef::Placeholder,\n             ast::Type::FnPointerType(inner) => {\n                 let ret_ty = inner\n                     .ret_type()"}, {"sha": "e9a20fbf1e42e4620a4612cb289eaf659fd41891", "filename": "crates/ra_parser/src/grammar/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Ftypes.rs?ref=eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec", "patch": "@@ -172,7 +172,7 @@ fn placeholder_type(p: &mut Parser) {\n     assert!(p.at(T![_]));\n     let m = p.start();\n     p.bump(T![_]);\n-    m.complete(p, PLACEHOLDER_TYPE);\n+    m.complete(p, INFER_TYPE);\n }\n \n // test fn_pointer_type"}, {"sha": "64ab1821755454d910d18eaa5527edb4efde4626", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec", "patch": "@@ -147,7 +147,7 @@ pub enum SyntaxKind {\n     ARRAY_TYPE,\n     SLICE_TYPE,\n     REFERENCE_TYPE,\n-    PLACEHOLDER_TYPE,\n+    INFER_TYPE,\n     FN_POINTER_TYPE,\n     FOR_TYPE,\n     IMPL_TRAIT_TYPE,"}, {"sha": "465cb320253fd942763f5c2021ee52406cbed1c0", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec", "patch": "@@ -594,10 +594,10 @@ impl ReferenceType {\n     pub fn ty(&self) -> Option<Type> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct PlaceholderType {\n+pub struct InferType {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl PlaceholderType {\n+impl InferType {\n     pub fn underscore_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![_]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1291,7 +1291,7 @@ pub enum Type {\n     ArrayType(ArrayType),\n     SliceType(SliceType),\n     ReferenceType(ReferenceType),\n-    PlaceholderType(PlaceholderType),\n+    InferType(InferType),\n     FnPointerType(FnPointerType),\n     ForType(ForType),\n     ImplTraitType(ImplTraitType),\n@@ -1988,8 +1988,8 @@ impl AstNode for ReferenceType {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for PlaceholderType {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == PLACEHOLDER_TYPE }\n+impl AstNode for InferType {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == INFER_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -2871,8 +2871,8 @@ impl From<SliceType> for Type {\n impl From<ReferenceType> for Type {\n     fn from(node: ReferenceType) -> Type { Type::ReferenceType(node) }\n }\n-impl From<PlaceholderType> for Type {\n-    fn from(node: PlaceholderType) -> Type { Type::PlaceholderType(node) }\n+impl From<InferType> for Type {\n+    fn from(node: InferType) -> Type { Type::InferType(node) }\n }\n impl From<FnPointerType> for Type {\n     fn from(node: FnPointerType) -> Type { Type::FnPointerType(node) }\n@@ -2890,7 +2890,7 @@ impl AstNode for Type {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n             PAREN_TYPE | TUPLE_TYPE | NEVER_TYPE | PATH_TYPE | POINTER_TYPE | ARRAY_TYPE\n-            | SLICE_TYPE | REFERENCE_TYPE | PLACEHOLDER_TYPE | FN_POINTER_TYPE | FOR_TYPE\n+            | SLICE_TYPE | REFERENCE_TYPE | INFER_TYPE | FN_POINTER_TYPE | FOR_TYPE\n             | IMPL_TRAIT_TYPE | DYN_TRAIT_TYPE => true,\n             _ => false,\n         }\n@@ -2905,7 +2905,7 @@ impl AstNode for Type {\n             ARRAY_TYPE => Type::ArrayType(ArrayType { syntax }),\n             SLICE_TYPE => Type::SliceType(SliceType { syntax }),\n             REFERENCE_TYPE => Type::ReferenceType(ReferenceType { syntax }),\n-            PLACEHOLDER_TYPE => Type::PlaceholderType(PlaceholderType { syntax }),\n+            INFER_TYPE => Type::InferType(InferType { syntax }),\n             FN_POINTER_TYPE => Type::FnPointerType(FnPointerType { syntax }),\n             FOR_TYPE => Type::ForType(ForType { syntax }),\n             IMPL_TRAIT_TYPE => Type::ImplTraitType(ImplTraitType { syntax }),\n@@ -2924,7 +2924,7 @@ impl AstNode for Type {\n             Type::ArrayType(it) => &it.syntax,\n             Type::SliceType(it) => &it.syntax,\n             Type::ReferenceType(it) => &it.syntax,\n-            Type::PlaceholderType(it) => &it.syntax,\n+            Type::InferType(it) => &it.syntax,\n             Type::FnPointerType(it) => &it.syntax,\n             Type::ForType(it) => &it.syntax,\n             Type::ImplTraitType(it) => &it.syntax,\n@@ -3719,7 +3719,7 @@ impl std::fmt::Display for ReferenceType {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for PlaceholderType {\n+impl std::fmt::Display for InferType {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }"}, {"sha": "e4fe2b948b0b5a34bdd28dbe2efde62721b9e649", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0023_placeholder_type.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0023_placeholder_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0023_placeholder_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0023_placeholder_type.rast?ref=eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec", "patch": "@@ -7,7 +7,7 @@ SOURCE_FILE@0..22\n     WHITESPACE@16..17 \" \"\n     EQ@17..18 \"=\"\n     WHITESPACE@18..19 \" \"\n-    PLACEHOLDER_TYPE@19..20\n+    INFER_TYPE@19..20\n       UNDERSCORE@19..20 \"_\"\n     SEMICOLON@20..21 \";\"\n   WHITESPACE@21..22 \"\\n\""}, {"sha": "f8910677b46b3209c98d8029d5f2f4e12bad29a1", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0164_type_path_in_pattern.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0164_type_path_in_pattern.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0164_type_path_in_pattern.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0164_type_path_in_pattern.rast?ref=eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec", "patch": "@@ -19,7 +19,7 @@ SOURCE_FILE@0..33\n             PATH@16..19\n               PATH_SEGMENT@16..19\n                 L_ANGLE@16..17 \"<\"\n-                PLACEHOLDER_TYPE@17..18\n+                INFER_TYPE@17..18\n                   UNDERSCORE@17..18 \"_\"\n                 R_ANGLE@18..19 \">\"\n             COLON2@19..21 \"::\""}, {"sha": "66cd5727a42769b049344f68375da0979f9c1837", "filename": "crates/ra_syntax/test_data/parser/ok/0035_weird_exprs.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast?ref=eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec", "patch": "@@ -1640,10 +1640,10 @@ SOURCE_FILE@0..3813\n                         COLON@2956..2957 \":\"\n                         TUPLE_TYPE@2957..2962\n                           L_PAREN@2957..2958 \"(\"\n-                          PLACEHOLDER_TYPE@2958..2959\n+                          INFER_TYPE@2958..2959\n                             UNDERSCORE@2958..2959 \"_\"\n                           COMMA@2959..2960 \",\"\n-                          PLACEHOLDER_TYPE@2960..2961\n+                          INFER_TYPE@2960..2961\n                             UNDERSCORE@2960..2961 \"_\"\n                           R_PAREN@2961..2962 \")\"\n                       COMMA@2962..2963 \",\""}, {"sha": "38b60b2a5e3a56ba9d079fc3a1ceb634b258fdf1", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec", "patch": "@@ -117,7 +117,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"ARRAY_TYPE\",\n         \"SLICE_TYPE\",\n         \"REFERENCE_TYPE\",\n-        \"PLACEHOLDER_TYPE\",\n+        \"INFER_TYPE\",\n         \"FN_POINTER_TYPE\",\n         \"FOR_TYPE\",\n         \"IMPL_TRAIT_TYPE\","}, {"sha": "5dee85c2d7ae635c269c788b003484f639f4de4a", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=eccb5d52d3c4b82b6b61e231aa137b4aeb8c94ec", "patch": "@@ -197,7 +197,7 @@ Type =\n | ArrayType\n | SliceType\n | ReferenceType\n-| PlaceholderType\n+| InferType\n | FnPointerType\n | ForType\n | ImplTraitType\n@@ -206,28 +206,28 @@ Type =\n ParenType =\n   '(' Type ')'\n \n-TupleType =\n-  '(' fields:Type* ')'\n-\n NeverType =\n   '!'\n \n PathType =\n   Path\n \n+TupleType =\n+  '(' fields:(Type (',' Type)* ','?)? ')'\n+\n PointerType =\n   '*' ('const' | 'mut') Type\n \n+ReferenceType =\n+  '&' 'lifetime'? 'mut'? Type\n+\n ArrayType =\n   '[' Type ';' Expr ']'\n \n SliceType =\n   '[' Type ']'\n \n-ReferenceType =\n-  '&' 'lifetime'? 'mut'? Type\n-\n-PlaceholderType =\n+InferType =\n    '_'\n \n FnPointerType ="}]}