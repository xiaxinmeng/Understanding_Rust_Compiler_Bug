{"sha": "d17d6e7f1f05fbdd4d9d246400ffebf768878c7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQxN2Q2ZTdmMWYwNWZiZGQ0ZDlkMjQ2NDAwZmZlYmY3Njg4NzhjN2E=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-02T22:56:28Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-04-02T22:56:28Z"}, "message": "Auto merge of #23967 - semarie:libc-clone, r=alexcrichton\n\naffected struct:\r\n - sockaddr_storage\r\n - sockaddr_un\r\n\r\napply the same method used for linux for:\r\n - bitrig/openbsd\r\n - freebsd\r\n - dragonfly\r\n\r\nthis commit unbreak build for openbsd (and bitrig, freebsd and dragonfly too I think)\r\n\r\nr? @alexcrichton", "tree": {"sha": "b439cc88c444e84ea379b52ac5685274336abb21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b439cc88c444e84ea379b52ac5685274336abb21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d17d6e7f1f05fbdd4d9d246400ffebf768878c7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d17d6e7f1f05fbdd4d9d246400ffebf768878c7a", "html_url": "https://github.com/rust-lang/rust/commit/d17d6e7f1f05fbdd4d9d246400ffebf768878c7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d17d6e7f1f05fbdd4d9d246400ffebf768878c7a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d1835ae7cc175b9aff383432e934e7ad13825ebc", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1835ae7cc175b9aff383432e934e7ad13825ebc", "html_url": "https://github.com/rust-lang/rust/commit/d1835ae7cc175b9aff383432e934e7ad13825ebc"}, {"sha": "26453bb60dab2e5b41151e7a9010d504f2167bd3", "url": "https://api.github.com/repos/rust-lang/rust/commits/26453bb60dab2e5b41151e7a9010d504f2167bd3", "html_url": "https://github.com/rust-lang/rust/commit/26453bb60dab2e5b41151e7a9010d504f2167bd3"}], "stats": {"total": 36, "additions": 27, "deletions": 9}, "files": [{"sha": "040c9b011f32757d748afc48715db55f38e420eb", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 27, "deletions": 9, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d17d6e7f1f05fbdd4d9d246400ffebf768878c7a/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d17d6e7f1f05fbdd4d9d246400ffebf768878c7a/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=d17d6e7f1f05fbdd4d9d246400ffebf768878c7a", "patch": "@@ -863,13 +863,16 @@ pub mod types {\n                     pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct sockaddr_storage {\n+                #[derive(Copy)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8; 112],\n                 }\n+                impl ::core::clone::Clone for sockaddr_storage {\n+                    fn clone(&self) -> sockaddr_storage { *self }\n+                }\n                 #[repr(C)]\n                 #[derive(Copy, Clone)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n@@ -917,11 +920,14 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct sockaddr_un {\n+                #[derive(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 104]\n                 }\n+                impl ::core::clone::Clone for sockaddr_un {\n+                    fn clone(&self) -> sockaddr_un { *self }\n+                }\n                 #[repr(C)]\n                 #[derive(Copy, Clone)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n@@ -1125,13 +1131,16 @@ pub mod types {\n                     pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct sockaddr_storage {\n+                #[derive(Copy)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n                     pub __ss_align: i64,\n                     pub __ss_pad2: [u8; 112],\n                 }\n+                impl ::core::clone::Clone for sockaddr_storage {\n+                    fn clone(&self) -> sockaddr_storage { *self }\n+                }\n                 #[repr(C)]\n                 #[derive(Copy, Clone)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n@@ -1179,11 +1188,14 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct sockaddr_un {\n+                #[derive(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 104]\n                 }\n+                impl ::core::clone::Clone for sockaddr_un {\n+                    fn clone(&self) -> sockaddr_un { *self }\n+                }\n                 #[repr(C)]\n                 #[derive(Copy, Clone)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n@@ -1405,13 +1417,16 @@ pub mod types {\n                     pub sa_data: [u8; 14],\n                 }\n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct sockaddr_storage {\n+                #[derive(Copy)] pub struct sockaddr_storage {\n                     pub ss_len: u8,\n                     pub ss_family: sa_family_t,\n                     pub __ss_pad1: [u8; 6],\n                     pub __ss_pad2: i64,\n                     pub __ss_pad3: [u8; 240],\n                 }\n+                impl ::core::clone::Clone for sockaddr_storage {\n+                    fn clone(&self) -> sockaddr_storage { *self }\n+                }\n                 #[repr(C)]\n                 #[derive(Copy, Clone)] pub struct sockaddr_in {\n                     pub sin_len: u8,\n@@ -1459,11 +1474,14 @@ pub mod types {\n                     pub ai_next: *mut addrinfo,\n                 }\n                 #[repr(C)]\n-                #[derive(Copy, Clone)] pub struct sockaddr_un {\n+                #[derive(Copy)] pub struct sockaddr_un {\n                     pub sun_len: u8,\n                     pub sun_family: sa_family_t,\n                     pub sun_path: [c_char; 104]\n                 }\n+                impl ::core::clone::Clone for sockaddr_un {\n+                    fn clone(&self) -> sockaddr_un { *self }\n+                }\n                 #[repr(C)]\n                 #[derive(Copy, Clone)] pub struct ifaddrs {\n                     pub ifa_next: *mut ifaddrs,\n@@ -3116,7 +3134,7 @@ pub mod consts {\n             pub const MAP_FIXED : c_int = 0x0010;\n             pub const MAP_ANON : c_int = 0x0800;\n \n-            pub const MAP_FAILED : *mut c_void = -1 as *mut c_void;\n+            pub const MAP_FAILED : *mut c_void = !0 as *mut c_void;\n \n             pub const MCL_CURRENT : c_int = 0x0001;\n             pub const MCL_FUTURE : c_int = 0x0002;\n@@ -3852,7 +3870,7 @@ pub mod consts {\n             pub const MAP_FIXED : c_int = 0x0010;\n             pub const MAP_ANON : c_int = 0x1000;\n \n-            pub const MAP_FAILED : *mut c_void = -1 as *mut c_void;\n+            pub const MAP_FAILED : *mut c_void = !0 as *mut c_void;\n \n             pub const MCL_CURRENT : c_int = 0x0001;\n             pub const MCL_FUTURE : c_int = 0x0002;\n@@ -4306,7 +4324,7 @@ pub mod consts {\n             pub const MAP_FIXED : c_int = 0x0010;\n             pub const MAP_ANON : c_int = 0x1000;\n \n-            pub const MAP_FAILED : *mut c_void = -1 as *mut c_void;\n+            pub const MAP_FAILED : *mut c_void = !0 as *mut c_void;\n \n             pub const MCL_CURRENT : c_int = 0x0001;\n             pub const MCL_FUTURE : c_int = 0x0002;"}]}