{"sha": "c3d0d5a4bb905fbefaaa8034ce5bef690923a8fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzZDBkNWE0YmI5MDVmYmVmYWFhODAzNGNlNWJlZjY5MDkyM2E4ZmI=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2017-12-22T19:12:54Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2018-01-22T09:51:28Z"}, "message": "resolve paths when cleaning docs", "tree": {"sha": "4da8ac55513604f01813327ab44a7917a0637ad5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4da8ac55513604f01813327ab44a7917a0637ad5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c3d0d5a4bb905fbefaaa8034ce5bef690923a8fb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c3d0d5a4bb905fbefaaa8034ce5bef690923a8fb", "html_url": "https://github.com/rust-lang/rust/commit/c3d0d5a4bb905fbefaaa8034ce5bef690923a8fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c3d0d5a4bb905fbefaaa8034ce5bef690923a8fb/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76f831647ade4a5e82244bd4d19da308478cc83d", "url": "https://api.github.com/repos/rust-lang/rust/commits/76f831647ade4a5e82244bd4d19da308478cc83d", "html_url": "https://github.com/rust-lang/rust/commit/76f831647ade4a5e82244bd4d19da308478cc83d"}], "stats": {"total": 50, "additions": 45, "deletions": 5}, "files": [{"sha": "3f7750cacc2cf03b04acabba0f063a86406ae25b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 40, "deletions": 3, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c3d0d5a4bb905fbefaaa8034ce5bef690923a8fb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3d0d5a4bb905fbefaaa8034ce5bef690923a8fb/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=c3d0d5a4bb905fbefaaa8034ce5bef690923a8fb", "patch": "@@ -23,8 +23,9 @@ use syntax::abi::Abi;\n use syntax::ast;\n use syntax::attr;\n use syntax::codemap::Spanned;\n+use syntax::feature_gate::UnstableFeatures;\n use syntax::ptr::P;\n-use syntax::symbol::keywords;\n+use syntax::symbol::{keywords, Symbol};\n use syntax_pos::{self, DUMMY_SP, Pos, FileName};\n \n use rustc::middle::const_val::ConstVal;\n@@ -33,6 +34,7 @@ use rustc::middle::resolve_lifetime as rl;\n use rustc::middle::lang_items;\n use rustc::hir::def::{Def, CtorKind};\n use rustc::hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc::hir::lowering::Resolver;\n use rustc::ty::subst::Substs;\n use rustc::ty::{self, Ty, AdtKind};\n use rustc::middle::stability;\n@@ -43,7 +45,7 @@ use rustc::hir;\n \n use rustc_const_math::ConstInt;\n use std::default::Default;\n-use std::{mem, slice, vec};\n+use std::{mem, slice, vec, iter};\n use std::iter::FromIterator;\n use std::rc::Rc;\n use std::sync::Arc;\n@@ -53,6 +55,7 @@ use core::DocContext;\n use doctree;\n use visit_ast;\n use html::item_type::ItemType;\n+use html::markdown::markdown_links;\n \n pub mod inline;\n pub mod cfg;\n@@ -633,6 +636,7 @@ pub struct Attributes {\n     pub other_attrs: Vec<ast::Attribute>,\n     pub cfg: Option<Rc<Cfg>>,\n     pub span: Option<syntax_pos::Span>,\n+    pub links: Vec<(String, DefId)>,\n }\n \n impl Attributes {\n@@ -762,11 +766,13 @@ impl Attributes {\n                 Some(attr.clone())\n             })\n         }).collect();\n+\n         Attributes {\n             doc_strings,\n             other_attrs,\n             cfg: if cfg == Cfg::True { None } else { Some(Rc::new(cfg)) },\n             span: sp,\n+            links: vec![],\n         }\n     }\n \n@@ -795,7 +801,38 @@ impl AttributesExt for Attributes {\n \n impl Clean<Attributes> for [ast::Attribute] {\n     fn clean(&self, cx: &DocContext) -> Attributes {\n-        Attributes::from_ast(cx.sess().diagnostic(), self)\n+        let mut attrs = Attributes::from_ast(cx.sess().diagnostic(), self);\n+\n+        if UnstableFeatures::from_environment().is_nightly_build() {\n+            let dox = attrs.collapsed_doc_value().unwrap_or_else(String::new);\n+            for link in markdown_links(&dox, cx.render_type) {\n+                if !link.starts_with(\"::\") {\n+                    // FIXME (misdreavus): can only support absolute paths because of limitations\n+                    // in Resolver. this may, with a lot of effort, figure out how to resolve paths\n+                    // within scopes, but the one use of `resolve_hir_path` i found in the HIR\n+                    // lowering code itself used an absolute path. we're brushing up against some\n+                    // structural limitations in the compiler already, but this may be a design one\n+                    // as well >_>\n+                    continue;\n+                }\n+\n+                let mut path = hir::Path {\n+                    span: DUMMY_SP,\n+                    def: Def::Err,\n+                    segments: iter::once(keywords::CrateRoot.name()).chain({\n+                        link.split(\"::\").skip(1).map(Symbol::intern)\n+                    }).map(hir::PathSegment::from_name).collect(),\n+                };\n+\n+                cx.resolver.borrow_mut().resolve_hir_path(&mut path, false);\n+\n+                if path.def != Def::Err {\n+                    attrs.links.push((link, path.def.def_id()));\n+                }\n+            }\n+        }\n+\n+        attrs\n     }\n }\n "}, {"sha": "008285e96533670a4410cdb29a4edb13f981914c", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c3d0d5a4bb905fbefaaa8034ce5bef690923a8fb/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3d0d5a4bb905fbefaaa8034ce5bef690923a8fb/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c3d0d5a4bb905fbefaaa8034ce5bef690923a8fb", "patch": "@@ -46,7 +46,7 @@ pub type ExternalPaths = FxHashMap<DefId, (Vec<String>, clean::TypeKind)>;\n \n pub struct DocContext<'a, 'tcx: 'a, 'rcx> {\n     pub tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    pub resolver: resolve::Resolver<'rcx>,\n+    pub resolver: RefCell<resolve::Resolver<'rcx>>,\n     pub populated_all_crate_impls: Cell<bool>,\n     // Note that external items for which `doc(hidden)` applies to are shown as\n     // non-reachable while local items aren't. This is because we're reusing\n@@ -227,7 +227,7 @@ pub fn run_core(search_paths: SearchPaths,\n \n         let ctxt = DocContext {\n             tcx,\n-            resolver,\n+            resolver: RefCell::new(resolver),\n             populated_all_crate_impls: Cell::new(false),\n             access_levels: RefCell::new(access_levels),\n             external_traits: Default::default(),"}, {"sha": "9bb35da246c8991c6f7236492e4bc710aa1e5072", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c3d0d5a4bb905fbefaaa8034ce5bef690923a8fb/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c3d0d5a4bb905fbefaaa8034ce5bef690923a8fb/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=c3d0d5a4bb905fbefaaa8034ce5bef690923a8fb", "patch": "@@ -1169,6 +1169,8 @@ pub fn markdown_links(md: &str, render_type: RenderType) -> Vec<String> {\n                     let s = unsafe { (*link).as_bytes() };\n                     let s = str::from_utf8(&s).unwrap().to_owned();\n \n+                    debug!(\"found link: {}\", s);\n+\n                     links.push(s);\n                 }\n \n@@ -1214,6 +1216,7 @@ pub fn markdown_links(md: &str, render_type: RenderType) -> Vec<String> {\n \n             for ev in iter {\n                 if let Event::Start(Tag::Link(dest, _)) = ev {\n+                    debug!(\"found link: {}\", dest);\n                     links.push(dest.into_owned());\n                 }\n             }"}]}