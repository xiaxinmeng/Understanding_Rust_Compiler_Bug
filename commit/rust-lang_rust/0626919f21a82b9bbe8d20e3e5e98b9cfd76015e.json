{"sha": "0626919f21a82b9bbe8d20e3e5e98b9cfd76015e", "node_id": "C_kwDOAAsO6NoAKDA2MjY5MTlmMjFhODJiOWJiZThkMjBlM2U1ZTk4YjljZmQ3NjAxNWU", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-22T00:25:59Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-02-22T00:45:35Z"}, "message": "Do not suggest wrapping an item if it has ambiguous un-imported methods", "tree": {"sha": "c5d7e612a50400a2c4c99c3dbb2f6941e73a3001", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c5d7e612a50400a2c4c99c3dbb2f6941e73a3001"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0626919f21a82b9bbe8d20e3e5e98b9cfd76015e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0626919f21a82b9bbe8d20e3e5e98b9cfd76015e", "html_url": "https://github.com/rust-lang/rust/commit/0626919f21a82b9bbe8d20e3e5e98b9cfd76015e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0626919f21a82b9bbe8d20e3e5e98b9cfd76015e/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03a8cc7df1d65554a4d40825b0490c93ac0f0236", "url": "https://api.github.com/repos/rust-lang/rust/commits/03a8cc7df1d65554a4d40825b0490c93ac0f0236", "html_url": "https://github.com/rust-lang/rust/commit/03a8cc7df1d65554a4d40825b0490c93ac0f0236"}], "stats": {"total": 104, "additions": 65, "deletions": 39}, "files": [{"sha": "3213148f6a3dcd72f6308c8674f24ea295a62f09", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 24, "deletions": 13, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/0626919f21a82b9bbe8d20e3e5e98b9cfd76015e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0626919f21a82b9bbe8d20e3e5e98b9cfd76015e/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=0626919f21a82b9bbe8d20e3e5e98b9cfd76015e", "patch": "@@ -1485,27 +1485,38 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 (self.tcx.mk_mut_ref(self.tcx.lifetimes.re_erased, rcvr_ty), \"&mut \"),\n                 (self.tcx.mk_imm_ref(self.tcx.lifetimes.re_erased, rcvr_ty), \"&\"),\n             ] {\n-                if let Ok(pick) = self.lookup_probe(\n+                match self.lookup_probe(\n                     span,\n                     item_name,\n                     *rcvr_ty,\n                     rcvr,\n                     crate::check::method::probe::ProbeScope::AllTraits,\n                 ) {\n-                    // If the method is defined for the receiver we have, it likely wasn't `use`d.\n-                    // We point at the method, but we just skip the rest of the check for arbitrary\n-                    // self types and rely on the suggestion to `use` the trait from\n-                    // `suggest_valid_traits`.\n-                    let did = Some(pick.item.container.id());\n-                    let skip = skippable.contains(&did);\n-                    if pick.autoderefs == 0 && !skip {\n-                        err.span_label(\n-                            pick.item.ident(self.tcx).span,\n-                            &format!(\"the method is available for `{}` here\", rcvr_ty),\n-                        );\n+                    Ok(pick) => {\n+                        // If the method is defined for the receiver we have, it likely wasn't `use`d.\n+                        // We point at the method, but we just skip the rest of the check for arbitrary\n+                        // self types and rely on the suggestion to `use` the trait from\n+                        // `suggest_valid_traits`.\n+                        let did = Some(pick.item.container.id());\n+                        let skip = skippable.contains(&did);\n+                        if pick.autoderefs == 0 && !skip {\n+                            err.span_label(\n+                                pick.item.ident(self.tcx).span,\n+                                &format!(\"the method is available for `{}` here\", rcvr_ty),\n+                            );\n+                        }\n+                        break;\n                     }\n-                    break;\n+                    Err(MethodError::Ambiguity(_)) => {\n+                        // If the method is defined (but ambiguous) for the receiver we have, it is also\n+                        // likely we haven't `use`d it. It may be possible that if we `Box`/`Pin`/etc.\n+                        // the receiver, then it might disambiguate this method, but I think these\n+                        // suggestions are generally misleading (see #94218).\n+                        break;\n+                    }\n+                    _ => {}\n                 }\n+\n                 for (rcvr_ty, pre) in &[\n                     (self.tcx.mk_lang_item(*rcvr_ty, LangItem::OwnedBox), \"Box::new\"),\n                     (self.tcx.mk_lang_item(*rcvr_ty, LangItem::Pin), \"Pin::new\"),"}, {"sha": "3d21b735aea0a175ac2983370cc844705cbce133", "filename": "src/test/ui/rust-2021/future-prelude-collision-shadow.stderr", "status": "modified", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/0626919f21a82b9bbe8d20e3e5e98b9cfd76015e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0626919f21a82b9bbe8d20e3e5e98b9cfd76015e/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frust-2021%2Ffuture-prelude-collision-shadow.stderr?ref=0626919f21a82b9bbe8d20e3e5e98b9cfd76015e", "patch": "@@ -4,34 +4,8 @@ error[E0599]: no method named `try_into` found for type `u8` in the current scop\n LL |         let _: u32 = 3u8.try_into().unwrap();\n    |                          ^^^^^^^^ method not found in `u8`\n    |\n-  ::: $SRC_DIR/core/src/convert/mod.rs:LL:COL\n-   |\n-LL |     fn try_into(self) -> Result<T, Self::Error>;\n-   |        --------\n-   |        |\n-   |        the method is available for `Box<u8>` here\n-   |        the method is available for `Pin<u8>` here\n-   |        the method is available for `Arc<u8>` here\n-   |        the method is available for `Rc<u8>` here\n-   |\n    = help: items from traits can only be used if the trait is in scope\n    = note: 'std::convert::TryInto' is included in the prelude starting in Edition 2021\n-help: consider wrapping the receiver expression with the appropriate type\n-   |\n-LL |         let _: u32 = Box::new(3u8).try_into().unwrap();\n-   |                      +++++++++   +\n-help: consider wrapping the receiver expression with the appropriate type\n-   |\n-LL |         let _: u32 = Pin::new(3u8).try_into().unwrap();\n-   |                      +++++++++   +\n-help: consider wrapping the receiver expression with the appropriate type\n-   |\n-LL |         let _: u32 = Arc::new(3u8).try_into().unwrap();\n-   |                      +++++++++   +\n-help: consider wrapping the receiver expression with the appropriate type\n-   |\n-LL |         let _: u32 = Rc::new(3u8).try_into().unwrap();\n-   |                      ++++++++   +\n help: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\n    |\n LL |     use crate::m::TryIntoU32;"}, {"sha": "baa2128eb8e36730954872d63dbeb59af1ef63fa", "filename": "src/test/ui/suggestions/dont-wrap-ambiguous-receivers.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0626919f21a82b9bbe8d20e3e5e98b9cfd76015e/src%2Ftest%2Fui%2Fsuggestions%2Fdont-wrap-ambiguous-receivers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0626919f21a82b9bbe8d20e3e5e98b9cfd76015e/src%2Ftest%2Fui%2Fsuggestions%2Fdont-wrap-ambiguous-receivers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-wrap-ambiguous-receivers.rs?ref=0626919f21a82b9bbe8d20e3e5e98b9cfd76015e", "patch": "@@ -0,0 +1,21 @@\n+mod banana {\n+    //~^ HELP the following traits are implemented but not in scope\n+    pub struct Chaenomeles;\n+\n+    pub trait Apple {\n+        fn pick(&self) {}\n+    }\n+    impl Apple for Chaenomeles {}\n+\n+    pub trait Peach {\n+        fn pick(&self, a: &mut ()) {}\n+    }\n+    impl<Mango: Peach> Peach for Box<Mango> {}\n+    impl Peach for Chaenomeles {}\n+}\n+\n+fn main() {\n+    banana::Chaenomeles.pick()\n+    //~^ ERROR no method named\n+    //~| HELP items from traits can only be used if the trait is in scope\n+}"}, {"sha": "8fcadbf4c75f4455fc7d0bf3cac001a5fac61477", "filename": "src/test/ui/suggestions/dont-wrap-ambiguous-receivers.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/0626919f21a82b9bbe8d20e3e5e98b9cfd76015e/src%2Ftest%2Fui%2Fsuggestions%2Fdont-wrap-ambiguous-receivers.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0626919f21a82b9bbe8d20e3e5e98b9cfd76015e/src%2Ftest%2Fui%2Fsuggestions%2Fdont-wrap-ambiguous-receivers.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fdont-wrap-ambiguous-receivers.stderr?ref=0626919f21a82b9bbe8d20e3e5e98b9cfd76015e", "patch": "@@ -0,0 +1,20 @@\n+error[E0599]: no method named `pick` found for struct `Chaenomeles` in the current scope\n+  --> $DIR/dont-wrap-ambiguous-receivers.rs:18:25\n+   |\n+LL |     pub struct Chaenomeles;\n+   |     ----------------------- method `pick` not found for this\n+...\n+LL |     banana::Chaenomeles.pick()\n+   |                         ^^^^ method not found in `Chaenomeles`\n+   |\n+   = help: items from traits can only be used if the trait is in scope\n+help: the following traits are implemented but not in scope; perhaps add a `use` for one of them:\n+   |\n+LL | use banana::Apple;\n+   |\n+LL | use banana::Peach;\n+   |\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}