{"sha": "f3662275e45271b6f0f1d30d572a21e19f3261a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNjYyMjc1ZTQ1MjcxYjZmMGYxZDMwZDU3MmEyMWUxOWYzMjYxYTE=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-12-03T23:02:17Z"}, "committer": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-12-05T03:49:48Z"}, "message": "Document behavior of `ptr::swap` with overlapping regions of memory.\n\nFixes https://github.com/rust-lang/rust/issues/44479.", "tree": {"sha": "b73680871f94d8daa5fa46e178a7246b700f478b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b73680871f94d8daa5fa46e178a7246b700f478b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3662275e45271b6f0f1d30d572a21e19f3261a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3662275e45271b6f0f1d30d572a21e19f3261a1", "html_url": "https://github.com/rust-lang/rust/commit/f3662275e45271b6f0f1d30d572a21e19f3261a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3662275e45271b6f0f1d30d572a21e19f3261a1/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a", "html_url": "https://github.com/rust-lang/rust/commit/f2b11f30b2946119c23594bc2b3bec3c38d3ae9a"}], "stats": {"total": 42, "additions": 40, "deletions": 2}, "files": [{"sha": "20f054f5a77f291ea547713764f8d95bcc58406f", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 40, "deletions": 2, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f3662275e45271b6f0f1d30d572a21e19f3261a1/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3662275e45271b6f0f1d30d572a21e19f3261a1/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=f3662275e45271b6f0f1d30d572a21e19f3261a1", "patch": "@@ -91,15 +91,53 @@ pub const fn null<T>() -> *const T { 0 as *const T }\n pub const fn null_mut<T>() -> *mut T { 0 as *mut T }\n \n /// Swaps the values at two mutable locations of the same type, without\n-/// deinitializing either. They may overlap, unlike `mem::swap` which is\n-/// otherwise equivalent.\n+/// deinitializing either.\n+///\n+/// The values pointed at by `x` and `y` may overlap, unlike `mem::swap` which\n+/// is otherwise equivalent. If the values do overlap, then the overlapping\n+/// region of memory from `x` will be used. This is demonstrated in the\n+/// examples section below.\n ///\n /// # Safety\n ///\n /// This function copies the memory through the raw pointers passed to it\n /// as arguments.\n ///\n /// Ensure that these pointers are valid before calling `swap`.\n+///\n+/// # Examples\n+///\n+/// Swapping two non-overlapping regions:\n+///\n+/// ```\n+/// use std::ptr;\n+///\n+/// let mut array = [0, 1, 2, 3];\n+///\n+/// let x = array[0..].as_mut_ptr() as *mut [u32; 2];\n+/// let y = array[2..].as_mut_ptr() as *mut [u32; 2];\n+///\n+/// unsafe {\n+///     ptr::swap(x, y);\n+///     assert_eq!([2, 3, 0, 1], array);\n+/// }\n+/// ```\n+///\n+/// Swapping two overlapping regions:\n+///\n+/// ```\n+/// use std::ptr;\n+///\n+/// let mut array = [0, 1, 2, 3];\n+///\n+/// let x = array[0..].as_mut_ptr() as *mut [u32; 3];\n+/// let y = array[1..].as_mut_ptr() as *mut [u32; 3];\n+///\n+/// unsafe {\n+///     ptr::swap(x, y);\n+///     assert_eq!([1, 0, 1, 2], array);\n+/// }\n+/// ```\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub unsafe fn swap<T>(x: *mut T, y: *mut T) {"}]}