{"sha": "53ffcd96b7588669029467e5f23b699ff3283173", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzZmZjZDk2Yjc1ODg2NjkwMjk0NjdlNWYyM2I2OTlmZjMyODMxNzM=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-04-19T20:32:26Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-04-21T12:05:55Z"}, "message": "Remove mutability from `Def::Static`", "tree": {"sha": "c7700d4f5e637affd38a2c7a2f96a2546755077b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7700d4f5e637affd38a2c7a2f96a2546755077b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/53ffcd96b7588669029467e5f23b699ff3283173", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/53ffcd96b7588669029467e5f23b699ff3283173", "html_url": "https://github.com/rust-lang/rust/commit/53ffcd96b7588669029467e5f23b699ff3283173", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/53ffcd96b7588669029467e5f23b699ff3283173/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c187cc0c631f139c8ee43b1a6618664203b63aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c187cc0c631f139c8ee43b1a6618664203b63aa", "html_url": "https://github.com/rust-lang/rust/commit/6c187cc0c631f139c8ee43b1a6618664203b63aa"}], "stats": {"total": 61, "additions": 26, "deletions": 35}, "files": [{"sha": "4af79764a601ab404b899af2b48fbe720cd5df42", "filename": "src/librustc/hir/def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc%2Fhir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc%2Fhir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fdef.rs?ref=53ffcd96b7588669029467e5f23b699ff3283173", "patch": "@@ -73,7 +73,7 @@ pub enum Def<Id = hir::HirId> {\n     Fn(DefId),\n     Const(DefId),\n     ConstParam(DefId),\n-    Static(DefId, bool /* is_mutbl */),\n+    Static(DefId),\n     /// `DefId` refers to the struct or enum variant's constructor.\n     Ctor(DefId, CtorOf, CtorKind),\n     SelfCtor(DefId /* impl */),  // `DefId` refers to the impl\n@@ -291,7 +291,7 @@ impl<Id> Def<Id> {\n     /// Return `Some(..)` with the `DefId` of this `Def` if it has a id, else `None`.\n     pub fn opt_def_id(&self) -> Option<DefId> {\n         match *self {\n-            Def::Fn(id) | Def::Mod(id) | Def::Static(id, _) |\n+            Def::Fn(id) | Def::Mod(id) | Def::Static(id) |\n             Def::Variant(id) | Def::Ctor(id, ..) | Def::Enum(id) |\n             Def::TyAlias(id) | Def::TraitAlias(id) |\n             Def::AssociatedTy(id) | Def::TyParam(id) | Def::ConstParam(id) | Def::Struct(id) |\n@@ -379,7 +379,7 @@ impl<Id> Def<Id> {\n         match self {\n             Def::Fn(id) => Def::Fn(id),\n             Def::Mod(id) => Def::Mod(id),\n-            Def::Static(id, is_mutbl) => Def::Static(id, is_mutbl),\n+            Def::Static(id) => Def::Static(id),\n             Def::Enum(id) => Def::Enum(id),\n             Def::Variant(id) => Def::Variant(id),\n             Def::Ctor(a, b, c) => Def::Ctor(a, b, c),"}, {"sha": "10a5bd11b2fe22f5193e6d2147a8203e18f9e6da", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=53ffcd96b7588669029467e5f23b699ff3283173", "patch": "@@ -322,7 +322,7 @@ impl<'hir> Map<'hir> {\n                 let def_id = || self.local_def_id_from_hir_id(item.hir_id);\n \n                 match item.node {\n-                    ItemKind::Static(_, m, _) => Some(Def::Static(def_id(), m == MutMutable)),\n+                    ItemKind::Static(..) => Some(Def::Static(def_id())),\n                     ItemKind::Const(..) => Some(Def::Const(def_id())),\n                     ItemKind::Fn(..) => Some(Def::Fn(def_id())),\n                     ItemKind::Mod(..) => Some(Def::Mod(def_id())),\n@@ -344,7 +344,7 @@ impl<'hir> Map<'hir> {\n                 let def_id = self.local_def_id_from_hir_id(item.hir_id);\n                 match item.node {\n                     ForeignItemKind::Fn(..) => Some(Def::Fn(def_id)),\n-                    ForeignItemKind::Static(_, m) => Some(Def::Static(def_id, m)),\n+                    ForeignItemKind::Static(..) => Some(Def::Static(def_id)),\n                     ForeignItemKind::Type => Some(Def::ForeignTy(def_id)),\n                 }\n             }"}, {"sha": "a4a54ba18371a843bbcaaba5543a4795b1360041", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=53ffcd96b7588669029467e5f23b699ff3283173", "patch": "@@ -705,7 +705,7 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                 Ok(self.cat_rvalue_node(hir_id, span, expr_ty))\n             }\n \n-            Def::Static(def_id, mutbl) => {\n+            Def::Static(def_id) => {\n                 // `#[thread_local]` statics may not outlive the current function, but\n                 // they also cannot be moved out of.\n                 let is_thread_local = self.tcx.get_attrs(def_id)[..]\n@@ -723,7 +723,10 @@ impl<'a, 'gcx, 'tcx> MemCategorizationContext<'a, 'gcx, 'tcx> {\n                     hir_id,\n                     span,\n                     cat,\n-                    mutbl: if mutbl { McDeclared } else { McImmutable},\n+                    mutbl: match self.tcx.static_mutability(def_id).unwrap() {\n+                        hir::MutImmutable => McImmutable,\n+                        hir::MutMutable => McDeclared,\n+                    },\n                     ty:expr_ty,\n                     note: NoteNone\n                 })"}, {"sha": "60d75480e61a65365dc5129f5e6f58b4534406fd", "filename": "src/librustc_codegen_ssa/mono_item.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmono_item.rs?ref=53ffcd96b7588669029467e5f23b699ff3283173", "patch": "@@ -1,5 +1,4 @@\n use rustc::hir;\n-use rustc::hir::def::Def;\n use rustc::mir::mono::{Linkage, Visibility};\n use rustc::ty::layout::HasTyCtxt;\n use std::fmt;\n@@ -19,17 +18,7 @@ pub trait MonoItemExt<'a, 'tcx: 'a>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n \n         match *self.as_mono_item() {\n             MonoItem::Static(def_id) => {\n-                let tcx = cx.tcx();\n-                let is_mutable = match tcx.describe_def(def_id) {\n-                    Some(Def::Static(_, is_mutable)) => is_mutable,\n-                    Some(other) => {\n-                        bug!(\"Expected Def::Static, found {:?}\", other)\n-                    }\n-                    None => {\n-                        bug!(\"Expected Def::Static for {:?}, found nothing\", def_id)\n-                    }\n-                };\n-                cx.codegen_static(def_id, is_mutable);\n+                cx.codegen_static(def_id, cx.tcx().is_mutable_static(def_id));\n             }\n             MonoItem::GlobalAsm(hir_id) => {\n                 let item = cx.tcx().hir().expect_item_by_hir_id(hir_id);"}, {"sha": "0e3d05d29a3da9a5e65678cd74c02deca3479bbf", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=53ffcd96b7588669029467e5f23b699ff3283173", "patch": "@@ -404,9 +404,9 @@ impl<'tcx> EntryKind<'tcx> {\n             EntryKind::Const(..) => Def::Const(did),\n             EntryKind::AssociatedConst(..) => Def::AssociatedConst(did),\n             EntryKind::ImmStatic |\n-            EntryKind::ForeignImmStatic => Def::Static(did, false),\n             EntryKind::MutStatic |\n-            EntryKind::ForeignMutStatic => Def::Static(did, true),\n+            EntryKind::ForeignImmStatic |\n+            EntryKind::ForeignMutStatic => Def::Static(did),\n             EntryKind::Struct(_, _) => Def::Struct(did),\n             EntryKind::Union(_, _) => Def::Union(did),\n             EntryKind::Fn(_) |"}, {"sha": "7ab3341127546d59dd5bf8d93d78352d5829523d", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=53ffcd96b7588669029467e5f23b699ff3283173", "patch": "@@ -960,7 +960,7 @@ fn convert_path_expr<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             }\n         }\n \n-        Def::Static(node_id, _) => ExprKind::StaticRef { id: node_id },\n+        Def::Static(id) => ExprKind::StaticRef { id },\n \n         Def::Local(..) | Def::Upvar(..) => convert_var(cx, expr, def),\n "}, {"sha": "efae1e56f4dc68c9b1bc4d52313c2d15bb18c7f2", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=53ffcd96b7588669029467e5f23b699ff3283173", "patch": "@@ -592,8 +592,8 @@ fn write_mir_sig(\n     match (descr, src.promoted) {\n         (_, Some(i)) => write!(w, \"{:?} in \", i)?,\n         (Some(Def::Const(_)), _) | (Some(Def::AssociatedConst(_)), _) => write!(w, \"const \")?,\n-        (Some(Def::Static(_, /*is_mutbl*/false)), _) => write!(w, \"static \")?,\n-        (Some(Def::Static(_, /*is_mutbl*/true)), _) => write!(w, \"static mut \")?,\n+        (Some(Def::Static(def_id)), _) =>\n+            write!(w, \"static {}\", if tcx.is_mutable_static(def_id) { \"mut \" } else { \"\" })?,\n         (_, _) if is_function => write!(w, \"fn \")?,\n         (None, _) => {}, // things like anon const, not an item\n         _ => bug!(\"Unexpected def description {:?}\", descr),"}, {"sha": "e2c5c4ee3746d71534a671c81c147716c71cc167", "filename": "src/librustc_passes/rvalue_promotion.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc_passes%2Frvalue_promotion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc_passes%2Frvalue_promotion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalue_promotion.rs?ref=53ffcd96b7588669029467e5f23b699ff3283173", "patch": "@@ -329,7 +329,7 @@ fn check_expr_kind<'a, 'tcx>(\n                 // are inherently promotable with the exception\n                 //  of \"#[thread_local]\" statics, which may not\n                 // outlive the current function\n-                Def::Static(did, _) => {\n+                Def::Static(did) => {\n \n                     if v.in_static {\n                         for attr in &v.tcx.get_attrs(did)[..] {"}, {"sha": "6870e97b53b293be99c957a1591000213b5e8f7b", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=53ffcd96b7588669029467e5f23b699ff3283173", "patch": "@@ -28,7 +28,7 @@ use syntax::ast::{Name, Ident};\n use syntax::attr;\n \n use syntax::ast::{self, Block, ForeignItem, ForeignItemKind, Item, ItemKind, NodeId};\n-use syntax::ast::{MetaItemKind, Mutability, StmtKind, TraitItem, TraitItemKind, Variant};\n+use syntax::ast::{MetaItemKind, StmtKind, TraitItem, TraitItemKind, Variant};\n use syntax::ext::base::{MacroKind, SyntaxExtension};\n use syntax::ext::base::Determinacy::Undetermined;\n use syntax::ext::hygiene::Mark;\n@@ -442,9 +442,8 @@ impl<'a> Resolver<'a> {\n             ItemKind::ForeignMod(..) => {}\n \n             // These items live in the value namespace.\n-            ItemKind::Static(_, m, _) => {\n-                let mutbl = m == Mutability::Mutable;\n-                let def = Def::Static(self.definitions.local_def_id(item.id), mutbl);\n+            ItemKind::Static(..) => {\n+                let def = Def::Static(self.definitions.local_def_id(item.id));\n                 self.define(parent, ident, ValueNS, (def, vis, sp, expansion));\n             }\n             ItemKind::Const(..) => {\n@@ -616,8 +615,8 @@ impl<'a> Resolver<'a> {\n             ForeignItemKind::Fn(..) => {\n                 (Def::Fn(self.definitions.local_def_id(item.id)), ValueNS)\n             }\n-            ForeignItemKind::Static(_, m) => {\n-                (Def::Static(self.definitions.local_def_id(item.id), m), ValueNS)\n+            ForeignItemKind::Static(..) => {\n+                (Def::Static(self.definitions.local_def_id(item.id)), ValueNS)\n             }\n             ForeignItemKind::Ty => {\n                 (Def::ForeignTy(self.definitions.local_def_id(item.id)), TypeNS)"}, {"sha": "f5111954f8dfa5897e2ea5218e5d13a2d369c529", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=53ffcd96b7588669029467e5f23b699ff3283173", "patch": "@@ -1665,7 +1665,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n             Def::Fn(def_id) |\n             Def::Const(def_id) |\n             Def::ConstParam(def_id) |\n-            Def::Static(def_id, _) => {\n+            Def::Static(def_id) => {\n                 path_segs.push(PathSeg(def_id, last));\n             }\n "}, {"sha": "5da74a588c96eb665112c56f2d40c07d28426d12", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=53ffcd96b7588669029467e5f23b699ff3283173", "patch": "@@ -93,9 +93,9 @@ pub fn try_inline(\n             record_extern_fqn(cx, did, clean::TypeKind::Module);\n             clean::ModuleItem(build_module(cx, did, visited))\n         }\n-        Def::Static(did, mtbl) => {\n+        Def::Static(did) => {\n             record_extern_fqn(cx, did, clean::TypeKind::Static);\n-            clean::StaticItem(build_static(cx, did, mtbl))\n+            clean::StaticItem(build_static(cx, did, cx.tcx.is_mutable_static(did)))\n         }\n         Def::Const(did) => {\n             record_extern_fqn(cx, did, clean::TypeKind::Const);"}, {"sha": "66fe7f177e624b5ec5c67174f4006cde73ce76a5", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/53ffcd96b7588669029467e5f23b699ff3283173/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=53ffcd96b7588669029467e5f23b699ff3283173", "patch": "@@ -4204,7 +4204,7 @@ pub fn register_def(cx: &DocContext<'_>, def: Def) -> DefId {\n         Def::Mod(i) => (i, TypeKind::Module),\n         Def::ForeignTy(i) => (i, TypeKind::Foreign),\n         Def::Const(i) => (i, TypeKind::Const),\n-        Def::Static(i, _) => (i, TypeKind::Static),\n+        Def::Static(i) => (i, TypeKind::Static),\n         Def::Variant(i) => (cx.tcx.parent(i).expect(\"cannot get parent def id\"),\n                             TypeKind::Enum),\n         Def::Macro(i, mac_kind) => match mac_kind {"}]}