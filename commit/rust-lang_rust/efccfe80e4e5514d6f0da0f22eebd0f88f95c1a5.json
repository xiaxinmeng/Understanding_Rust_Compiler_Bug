{"sha": "efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmY2NmZTgwZTRlNTUxNGQ2ZjBkYTBmMjJlZWJkMGY4OGY5NWMxYTU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-06T08:22:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-06T08:22:47Z"}, "message": "Auto merge of #6553 - phansch:field-reassign-with-default-macros, r=flip1995\n\nFix derive and macro related false positives in `field_reassign_with_default`\n\nCloses #6545\n\nchangelog: Fix derive and macro related false positives in [`field_reassign_with_default`]", "tree": {"sha": "1a1f607eb5c703b0fc284b475a469bebf69b7d6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a1f607eb5c703b0fc284b475a469bebf69b7d6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5", "html_url": "https://github.com/rust-lang/rust/commit/efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "42b9e92af7241d8ca1ec5207ffd8bfda32558730", "url": "https://api.github.com/repos/rust-lang/rust/commits/42b9e92af7241d8ca1ec5207ffd8bfda32558730", "html_url": "https://github.com/rust-lang/rust/commit/42b9e92af7241d8ca1ec5207ffd8bfda32558730"}, {"sha": "92f2bbbe06b92ad9fc984804307958d8566cd4ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/92f2bbbe06b92ad9fc984804307958d8566cd4ed", "html_url": "https://github.com/rust-lang/rust/commit/92f2bbbe06b92ad9fc984804307958d8566cd4ed"}], "stats": {"total": 98, "additions": 75, "deletions": 23}, "files": [{"sha": "f7224811e6e79816a82376a564be2cc205d9d870", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5", "patch": "@@ -8,6 +8,7 @@ use rustc_errors::Applicability;\n use rustc_hir::def::Res;\n use rustc_hir::{Block, Expr, ExprKind, PatKind, QPath, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n+use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::{Ident, Symbol};\n@@ -120,6 +121,8 @@ impl LateLintPass<'_> for Default {\n                 // only take `let ...` statements\n                 if let StmtKind::Local(local) = stmt.kind;\n                 if let Some(expr) = local.init;\n+                if !any_parent_is_automatically_derived(cx.tcx, expr.hir_id);\n+                if !in_external_macro(cx.tcx.sess, expr.span);\n                 // only take bindings to identifiers\n                 if let PatKind::Binding(_, binding_id, ident, _) = local.pat.kind;\n                 // only when assigning `... = Default::default()`"}, {"sha": "f1c06692e30d9efcff0840b66e40283a13dbc9ae", "filename": "clippy_lints/src/needless_borrow.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5/clippy_lints%2Fsrc%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_borrow.rs?ref=efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5", "patch": "@@ -2,15 +2,14 @@\n //!\n //! This lint is **warn** by default\n \n-use crate::utils::{snippet_opt, span_lint_and_then};\n+use crate::utils::{is_automatically_derived, snippet_opt, span_lint_and_then};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{BindingAnnotation, BorrowKind, Expr, ExprKind, HirId, Item, Mutability, Pat, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n use rustc_middle::ty::adjustment::{Adjust, Adjustment};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n-use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for address of operations (`&`) that are going to\n@@ -116,7 +115,7 @@ impl<'tcx> LateLintPass<'tcx> for NeedlessBorrow {\n     }\n \n     fn check_item(&mut self, _: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n-        if item.attrs.iter().any(|a| a.has_name(sym::automatically_derived)) {\n+        if is_automatically_derived(item.attrs) {\n             debug_assert!(self.derived_item.is_none());\n             self.derived_item = Some(item.hir_id);\n         }"}, {"sha": "d6ecd8568ce78966249f5d2872b274e469ff80ce", "filename": "tests/ui/auxiliary/macro_rules.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fmacro_rules.rs?ref=efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5", "patch": "@@ -94,3 +94,19 @@ macro_rules! large_enum_variant {\n         }\n     };\n }\n+\n+#[macro_export]\n+macro_rules! field_reassign_with_default {\n+    () => {\n+        #[derive(Default)]\n+        struct A {\n+            pub i: i32,\n+            pub j: i64,\n+        }\n+        fn lint() {\n+            let mut a: A = Default::default();\n+            a.i = 42;\n+            a;\n+        }\n+    };\n+}"}, {"sha": "24891682d368d0bfa2f167f88512040928442dab", "filename": "tests/ui/auxiliary/proc_macro_derive.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauxiliary%2Fproc_macro_derive.rs?ref=efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5", "patch": "@@ -4,6 +4,7 @@\n #![crate_type = \"proc-macro\"]\n #![feature(repr128, proc_macro_quote)]\n #![allow(incomplete_features)]\n+#![allow(clippy::field_reassign_with_default)]\n #![allow(clippy::eq_op)]\n \n extern crate proc_macro;\n@@ -23,3 +24,20 @@ pub fn derive(_: TokenStream) -> TokenStream {\n     };\n     output\n }\n+\n+#[proc_macro_derive(FieldReassignWithDefault)]\n+pub fn derive_foo(_input: TokenStream) -> TokenStream {\n+    quote! {\n+        #[derive(Default)]\n+        struct A {\n+            pub i: i32,\n+            pub j: i64,\n+        }\n+        #[automatically_derived]\n+        fn lint() {\n+            let mut a: A = Default::default();\n+            a.i = 42;\n+            a;\n+        }\n+    }\n+}"}, {"sha": "9fc208f5332a5ccbb9e9567425bac44d2ffb1dd7", "filename": "tests/ui/field_reassign_with_default.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5/tests%2Fui%2Ffield_reassign_with_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5/tests%2Fui%2Ffield_reassign_with_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffield_reassign_with_default.rs?ref=efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5", "patch": "@@ -1,5 +1,18 @@\n+// aux-build:proc_macro_derive.rs\n+// aux-build:macro_rules.rs\n+\n #![warn(clippy::field_reassign_with_default)]\n \n+#[macro_use]\n+extern crate proc_macro_derive;\n+#[macro_use]\n+extern crate macro_rules;\n+\n+// Don't lint on derives that derive `Default`\n+// See https://github.com/rust-lang/rust-clippy/issues/6545\n+#[derive(FieldReassignWithDefault)]\n+struct DerivedStruct;\n+\n #[derive(Default)]\n struct A {\n     i: i32,\n@@ -120,6 +133,9 @@ fn main() {\n     // don't expand macros in the suggestion (#6522)\n     let mut a: C = C::default();\n     a.i = vec![1];\n+\n+    // Don't lint in external macros\n+    field_reassign_with_default!();\n }\n \n mod m {"}, {"sha": "2f0f28f7bb724f92422ce0e618423342880d8f1f", "filename": "tests/ui/field_reassign_with_default.stderr", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5/tests%2Fui%2Ffield_reassign_with_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5/tests%2Fui%2Ffield_reassign_with_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffield_reassign_with_default.stderr?ref=efccfe80e4e5514d6f0da0f22eebd0f88f95c1a5", "patch": "@@ -1,84 +1,84 @@\n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:35:5\n+  --> $DIR/field_reassign_with_default.rs:48:5\n    |\n LL |     a.i = 42;\n    |     ^^^^^^^^^\n    |\n    = note: `-D clippy::field-reassign-with-default` implied by `-D warnings`\n-note: consider initializing the variable with `A { i: 42, ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:34:5\n+note: consider initializing the variable with `main::A { i: 42, ..Default::default() }` and removing relevant reassignments\n+  --> $DIR/field_reassign_with_default.rs:47:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:75:5\n+  --> $DIR/field_reassign_with_default.rs:88:5\n    |\n LL |     a.j = 43;\n    |     ^^^^^^^^^\n    |\n-note: consider initializing the variable with `A { j: 43, i: 42 }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:74:5\n+note: consider initializing the variable with `main::A { j: 43, i: 42 }` and removing relevant reassignments\n+  --> $DIR/field_reassign_with_default.rs:87:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:80:5\n+  --> $DIR/field_reassign_with_default.rs:93:5\n    |\n LL |     a.i = 42;\n    |     ^^^^^^^^^\n    |\n-note: consider initializing the variable with `A { i: 42, j: 44 }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:79:5\n+note: consider initializing the variable with `main::A { i: 42, j: 44 }` and removing relevant reassignments\n+  --> $DIR/field_reassign_with_default.rs:92:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:86:5\n+  --> $DIR/field_reassign_with_default.rs:99:5\n    |\n LL |     a.i = 42;\n    |     ^^^^^^^^^\n    |\n-note: consider initializing the variable with `A { i: 42, ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:85:5\n+note: consider initializing the variable with `main::A { i: 42, ..Default::default() }` and removing relevant reassignments\n+  --> $DIR/field_reassign_with_default.rs:98:5\n    |\n LL |     let mut a = A::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:96:5\n+  --> $DIR/field_reassign_with_default.rs:109:5\n    |\n LL |     a.i = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: consider initializing the variable with `A { i: Default::default(), ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:95:5\n+note: consider initializing the variable with `main::A { i: Default::default(), ..Default::default() }` and removing relevant reassignments\n+  --> $DIR/field_reassign_with_default.rs:108:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:100:5\n+  --> $DIR/field_reassign_with_default.rs:113:5\n    |\n LL |     a.i = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-note: consider initializing the variable with `A { i: Default::default(), j: 45 }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:99:5\n+note: consider initializing the variable with `main::A { i: Default::default(), j: 45 }` and removing relevant reassignments\n+  --> $DIR/field_reassign_with_default.rs:112:5\n    |\n LL |     let mut a: A = Default::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: field assignment outside of initializer for an instance created with Default::default()\n-  --> $DIR/field_reassign_with_default.rs:122:5\n+  --> $DIR/field_reassign_with_default.rs:135:5\n    |\n LL |     a.i = vec![1];\n    |     ^^^^^^^^^^^^^^\n    |\n note: consider initializing the variable with `C { i: vec![1], ..Default::default() }` and removing relevant reassignments\n-  --> $DIR/field_reassign_with_default.rs:121:5\n+  --> $DIR/field_reassign_with_default.rs:134:5\n    |\n LL |     let mut a: C = C::default();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}