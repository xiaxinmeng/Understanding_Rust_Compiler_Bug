{"sha": "5c8b3c38f1a5a0270b29fa01f14c9db0b255ea43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjOGIzYzM4ZjFhNWEwMjcwYjI5ZmEwMWYxNGM5ZGIwYjI1NWVhNDM=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-05T22:31:06Z"}, "committer": {"name": "varkor", "email": "github@varkor.com", "date": "2019-03-05T22:31:06Z"}, "message": "Fix rebase fallout", "tree": {"sha": "c932a1f9c1e3bdbe0f097af034c104b40ce1e03e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c932a1f9c1e3bdbe0f097af034c104b40ce1e03e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5c8b3c38f1a5a0270b29fa01f14c9db0b255ea43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5c8b3c38f1a5a0270b29fa01f14c9db0b255ea43", "html_url": "https://github.com/rust-lang/rust/commit/5c8b3c38f1a5a0270b29fa01f14c9db0b255ea43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5c8b3c38f1a5a0270b29fa01f14c9db0b255ea43/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0da0457593c5c1cb09f6197782ca73617860e897", "url": "https://api.github.com/repos/rust-lang/rust/commits/0da0457593c5c1cb09f6197782ca73617860e897", "html_url": "https://github.com/rust-lang/rust/commit/0da0457593c5c1cb09f6197782ca73617860e897"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "11b4aa17ec43fe3c231f7d03f12136b01e8070ee", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5c8b3c38f1a5a0270b29fa01f14c9db0b255ea43/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8b3c38f1a5a0270b29fa01f14c9db0b255ea43/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=5c8b3c38f1a5a0270b29fa01f14c9db0b255ea43", "patch": "@@ -594,7 +594,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M>\n             self.layout_of(ty)\n         })?;\n         let op = match val.val {\n-            ConstValue::Param(_) => Err(EvalErrorKind::TooGeneric.into()),\n+            ConstValue::Param(_) => return Err(EvalErrorKind::TooGeneric.into()),\n             ConstValue::Infer(_) => bug!(),\n             ConstValue::ByRef(ptr, alloc) => {\n                 // We rely on mutability being set correctly in that allocation to prevent writes"}, {"sha": "be708c78a0dd138b95e5cfd660eb9b6f2a41ebfc", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5c8b3c38f1a5a0270b29fa01f14c9db0b255ea43/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8b3c38f1a5a0270b29fa01f14c9db0b255ea43/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=5c8b3c38f1a5a0270b29fa01f14c9db0b255ea43", "patch": "@@ -1869,14 +1869,14 @@ impl<'o, 'gcx: 'tcx, 'tcx> dyn AstConv<'gcx, 'tcx> + 'o {\n         ast_const: &hir::AnonConst,\n         ty: Ty<'tcx>\n     ) -> &'tcx ty::LazyConst<'tcx> {\n-        debug!(\"ast_const_to_const(id={:?}, ast_const={:?})\", ast_const.id, ast_const);\n+        debug!(\"ast_const_to_const(id={:?}, ast_const={:?})\", ast_const.hir_id, ast_const);\n \n         let tcx = self.tcx();\n-        let def_id = tcx.hir().local_def_id(ast_const.id);\n+        let def_id = tcx.hir().local_def_id_from_hir_id(ast_const.hir_id);\n \n         let mut lazy_const = ty::LazyConst::Unevaluated(\n             def_id,\n-            Substs::identity_for_item(tcx, def_id)\n+            InternalSubsts::identity_for_item(tcx, def_id),\n         );\n \n         let expr = &tcx.hir().body(ast_const.body).value;"}, {"sha": "eb4bbe880693b77b50cfc5912f6656f0de2772de", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5c8b3c38f1a5a0270b29fa01f14c9db0b255ea43/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5c8b3c38f1a5a0270b29fa01f14c9db0b255ea43/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=5c8b3c38f1a5a0270b29fa01f14c9db0b255ea43", "patch": "@@ -1020,7 +1020,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> &'tcx ty\n \n                         if !allow_defaults && default.is_some() {\n                             if !tcx.features().default_type_parameter_fallback {\n-                                tcx.lint_node(\n+                                tcx.lint_hir(\n                                     lint::builtin::INVALID_TYPE_PARAM_DEFAULT,\n                                     param.hir_id,\n                                     param.span,\n@@ -1339,7 +1339,7 @@ fn type_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Ty<'tcx> {\n                                     let args = &generic_args.args;\n                                     for arg in args {\n                                         if let GenericArg::Const(ct) = arg {\n-                                            if ct.value.id == node_id {\n+                                            if ct.value.hir_id == hir_id {\n                                                 found_const = true;\n                                                 break;\n                                             }"}]}