{"sha": "cb5362334134f1d0d8b2c5557c49ee6534526474", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNTM2MjMzNDEzNGYxZDBkOGIyYzU1NTdjNDllZTY1MzQ1MjY0NzQ=", "commit": {"author": {"name": "Elliott Slaughter", "email": "eslaughter@mozilla.com", "date": "2012-09-07T04:22:50Z"}, "committer": {"name": "Elliott Slaughter", "email": "eslaughter@mozilla.com", "date": "2012-09-07T16:21:22Z"}, "message": "gc: Add early abort when GC is disabled.", "tree": {"sha": "3ec161e922820a13222f5bae9408d1b5f2a316fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ec161e922820a13222f5bae9408d1b5f2a316fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb5362334134f1d0d8b2c5557c49ee6534526474", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb5362334134f1d0d8b2c5557c49ee6534526474", "html_url": "https://github.com/rust-lang/rust/commit/cb5362334134f1d0d8b2c5557c49ee6534526474", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb5362334134f1d0d8b2c5557c49ee6534526474/comments", "author": null, "committer": null, "parents": [{"sha": "244b95490b9f0ca5c7ab38455153b421b0b51818", "url": "https://api.github.com/repos/rust-lang/rust/commits/244b95490b9f0ca5c7ab38455153b421b0b51818", "html_url": "https://github.com/rust-lang/rust/commit/244b95490b9f0ca5c7ab38455153b421b0b51818"}], "stats": {"total": 15, "additions": 15, "deletions": 0}, "files": [{"sha": "d99fc631bef60a2fe6e6bc5fb258931c7413c5f6", "filename": "src/libcore/gc.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cb5362334134f1d0d8b2c5557c49ee6534526474/src%2Flibcore%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb5362334134f1d0d8b2c5557c49ee6534526474/src%2Flibcore%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fgc.rs?ref=cb5362334134f1d0d8b2c5557c49ee6534526474", "patch": "@@ -65,6 +65,11 @@ unsafe fn align_to_pointer<T>(ptr: *T) -> *T {\n     return unsafe::reinterpret_cast(&ptr);\n }\n \n+unsafe fn get_safe_point_count() -> uint {\n+    let module_meta = rustrt::rust_gc_metadata();\n+    return *module_meta;\n+}\n+\n type SafePoint = { sp_meta: *Word, fn_meta: *Word };\n \n // Returns the safe point metadata for the given program counter, if\n@@ -260,6 +265,11 @@ unsafe fn walk_gc_roots(mem: Memory, sentinel: **Word, visitor: Visitor) {\n \n fn gc() {\n     unsafe {\n+        // Abort when GC is disabled.\n+        if get_safe_point_count() == 0 {\n+            return;\n+        }\n+\n         for walk_gc_roots(task_local_heap, ptr::null()) |_root, _tydesc| {\n             // FIXME(#2997): Walk roots and mark them.\n             io::stdout().write([46]); // .\n@@ -288,6 +298,11 @@ fn expect_sentinel() -> bool { false }\n // dead.\n fn cleanup_stack_for_failure() {\n     unsafe {\n+        // Abort when GC is disabled.\n+        if get_safe_point_count() == 0 {\n+            return;\n+        }\n+\n         // Leave a sentinel on the stack to mark the current frame. The\n         // stack walker will ignore any frames above the sentinel, thus\n         // avoiding collecting any memory being used by the stack walker"}]}