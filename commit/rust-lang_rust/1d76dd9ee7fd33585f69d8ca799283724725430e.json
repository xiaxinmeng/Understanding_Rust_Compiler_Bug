{"sha": "1d76dd9ee7fd33585f69d8ca799283724725430e", "node_id": "C_kwDOAAsO6NoAKDFkNzZkZDllZTdmZDMzNTg1ZjY5ZDhjYTc5OTI4MzcyNDcyNTQzMGU", "commit": {"author": {"name": "fee1-dead", "email": "ent3rm4n@gmail.com", "date": "2022-04-12T12:44:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-12T12:44:45Z"}, "message": "Rollup merge of #95947 - cuviper:default-box, r=dtolnay\n\n`impl const Default for Box<[T]>` and `Box<str>`\n\nThe unstable `const_default_impls` (#87864) already include empty `Vec<T>` and `String`. Now we extend that concept to `Box<[T]>` and `Box<str>` as well.\n\nThis obviates a hack in `rustc_ast`'s `P::<[T]>::new`.", "tree": {"sha": "d75bd12072cbf66ffeb705cb673b1bea69a8d4b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d75bd12072cbf66ffeb705cb673b1bea69a8d4b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1d76dd9ee7fd33585f69d8ca799283724725430e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiVXQ9CRBK7hj4Ov3rIwAAajgIAJ1h3sAnjz4o2sqbV+HVqpcC\nZ/qRLaMnvo40BRv7s+bgCocChPCC9LdvQWXEwTZr9uihJKKurkoy5vaNWnDJCd5h\n/BAP5rBULIrrfsqB9ae4K2mfo0PGILdZ210arMvrR9e6uG/Ua42na9MtmZf6E3CE\nf6GdH5ItZqPvP6UlTOYAeBJ+yiLrI0HX9bytl9H2XrDtgMZqO2j7bOUVy39kl6DW\nvAxNtuMW/SCjLPJeKfiyWfpaQTLPfXDvOvTjBKfE1Wky0G2Vi02YFsX84lA4Sfjt\nXKuu0zIZhzlGxPeIgykPGzkdL3eXEQ3wuqSySRGeWUTFGHMO4F8/dR/PxI3lQ0o=\n=mAtp\n-----END PGP SIGNATURE-----\n", "payload": "tree d75bd12072cbf66ffeb705cb673b1bea69a8d4b2\nparent cdbdf1ef2e4cca6dabc43a2d5101f283e18e2ce7\nparent 2d5eda8fb0392f469e599a6ac3fb23461161dff6\nauthor fee1-dead <ent3rm4n@gmail.com> 1649767485 +1000\ncommitter GitHub <noreply@github.com> 1649767485 +1000\n\nRollup merge of #95947 - cuviper:default-box, r=dtolnay\n\n`impl const Default for Box<[T]>` and `Box<str>`\n\nThe unstable `const_default_impls` (#87864) already include empty `Vec<T>` and `String`. Now we extend that concept to `Box<[T]>` and `Box<str>` as well.\n\nThis obviates a hack in `rustc_ast`'s `P::<[T]>::new`.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1d76dd9ee7fd33585f69d8ca799283724725430e", "html_url": "https://github.com/rust-lang/rust/commit/1d76dd9ee7fd33585f69d8ca799283724725430e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1d76dd9ee7fd33585f69d8ca799283724725430e/comments", "author": {"login": "fee1-dead", "id": 43851243, "node_id": "MDQ6VXNlcjQzODUxMjQz", "avatar_url": "https://avatars.githubusercontent.com/u/43851243?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fee1-dead", "html_url": "https://github.com/fee1-dead", "followers_url": "https://api.github.com/users/fee1-dead/followers", "following_url": "https://api.github.com/users/fee1-dead/following{/other_user}", "gists_url": "https://api.github.com/users/fee1-dead/gists{/gist_id}", "starred_url": "https://api.github.com/users/fee1-dead/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fee1-dead/subscriptions", "organizations_url": "https://api.github.com/users/fee1-dead/orgs", "repos_url": "https://api.github.com/users/fee1-dead/repos", "events_url": "https://api.github.com/users/fee1-dead/events{/privacy}", "received_events_url": "https://api.github.com/users/fee1-dead/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cdbdf1ef2e4cca6dabc43a2d5101f283e18e2ce7", "url": "https://api.github.com/repos/rust-lang/rust/commits/cdbdf1ef2e4cca6dabc43a2d5101f283e18e2ce7", "html_url": "https://github.com/rust-lang/rust/commit/cdbdf1ef2e4cca6dabc43a2d5101f283e18e2ce7"}, {"sha": "2d5eda8fb0392f469e599a6ac3fb23461161dff6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d5eda8fb0392f469e599a6ac3fb23461161dff6", "html_url": "https://github.com/rust-lang/rust/commit/2d5eda8fb0392f469e599a6ac3fb23461161dff6"}], "stats": {"total": 33, "additions": 21, "deletions": 12}, "files": [{"sha": "a7c23dbb79ca5c2b5e60ab2c6ef5b5949fc3c579", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1d76dd9ee7fd33585f69d8ca799283724725430e/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d76dd9ee7fd33585f69d8ca799283724725430e/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=1d76dd9ee7fd33585f69d8ca799283724725430e", "patch": "@@ -9,6 +9,8 @@\n     test(attr(deny(warnings)))\n )]\n #![feature(box_patterns)]\n+#![feature(const_default_impls)]\n+#![feature(const_trait_impl)]\n #![feature(crate_visibility_modifier)]\n #![feature(if_let_guard)]\n #![feature(label_break_value)]"}, {"sha": "89a0857992e491b97b70a53dbedfb4b7a26120fe", "filename": "compiler/rustc_ast/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1d76dd9ee7fd33585f69d8ca799283724725430e/compiler%2Frustc_ast%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d76dd9ee7fd33585f69d8ca799283724725430e/compiler%2Frustc_ast%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fptr.rs?ref=1d76dd9ee7fd33585f69d8ca799283724725430e", "patch": "@@ -128,14 +128,7 @@ impl<S: Encoder, T: Encodable<S>> Encodable<S> for P<T> {\n \n impl<T> P<[T]> {\n     pub const fn new() -> P<[T]> {\n-        // HACK(eddyb) bypass the lack of a `const fn` to create an empty `Box<[T]>`\n-        // (as trait methods, `default` in this case, can't be `const fn` yet).\n-        P {\n-            ptr: unsafe {\n-                use std::ptr::NonNull;\n-                std::mem::transmute(NonNull::<[T; 0]>::dangling() as NonNull<[T]>)\n-            },\n-        }\n+        P { ptr: Box::default() }\n     }\n \n     #[inline(never)]"}, {"sha": "639e7f213eaae253ccd4d88d1cb3816aec3cc7a5", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/1d76dd9ee7fd33585f69d8ca799283724725430e/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d76dd9ee7fd33585f69d8ca799283724725430e/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=1d76dd9ee7fd33585f69d8ca799283724725430e", "patch": "@@ -1192,17 +1192,25 @@ impl<T: Default> Default for Box<T> {\n \n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-impl<T> Default for Box<[T]> {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl<T> const Default for Box<[T]> {\n     fn default() -> Self {\n-        Box::<[T; 0]>::new([])\n+        let ptr: Unique<[T]> = Unique::<[T; 0]>::dangling();\n+        Box(ptr, Global)\n     }\n }\n \n #[cfg(not(no_global_oom_handling))]\n #[stable(feature = \"default_box_extra\", since = \"1.17.0\")]\n-impl Default for Box<str> {\n+#[rustc_const_unstable(feature = \"const_default_impls\", issue = \"87864\")]\n+impl const Default for Box<str> {\n     fn default() -> Self {\n-        unsafe { from_boxed_utf8_unchecked(Default::default()) }\n+        // SAFETY: This is the same as `Unique::cast<U>` but with an unsized `U = str`.\n+        let ptr: Unique<str> = unsafe {\n+            let bytes: Unique<[u8]> = Unique::<[u8; 0]>::dangling();\n+            Unique::new_unchecked(bytes.as_ptr() as *mut str)\n+        };\n+        Box(ptr, Global)\n     }\n }\n "}, {"sha": "49b837becbcd89fd74a8c8bebddf7d7580bf5277", "filename": "library/alloc/tests/const_fns.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1d76dd9ee7fd33585f69d8ca799283724725430e/library%2Falloc%2Ftests%2Fconst_fns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1d76dd9ee7fd33585f69d8ca799283724725430e/library%2Falloc%2Ftests%2Fconst_fns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fconst_fns.rs?ref=1d76dd9ee7fd33585f69d8ca799283724725430e", "patch": "@@ -6,6 +6,9 @@ pub const MY_VEC2: Vec<usize> = Default::default();\n pub const MY_STRING: String = String::new();\n pub const MY_STRING2: String = Default::default();\n \n+pub const MY_BOXED_SLICE: Box<[usize]> = Default::default();\n+pub const MY_BOXED_STR: Box<str> = Default::default();\n+\n use std::collections::{BTreeMap, BTreeSet};\n \n pub const MY_BTREEMAP: BTreeMap<usize, usize> = BTreeMap::new();\n@@ -23,6 +26,9 @@ fn test_const() {\n     assert_eq!(MY_VEC, MY_VEC2);\n     assert_eq!(MY_STRING, MY_STRING2);\n \n+    assert_eq!(MY_VEC, *MY_BOXED_SLICE);\n+    assert_eq!(MY_STRING, *MY_BOXED_STR);\n+\n     assert_eq!(MAP_LEN, 0);\n     assert_eq!(SET_LEN, 0);\n     assert!(MAP_IS_EMPTY && SET_IS_EMPTY);"}]}