{"sha": "05540bf08b067a6894937b3601cc2c66804615a6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1NTQwYmYwOGIwNjdhNjg5NDkzN2IzNjAxY2MyYzY2ODA0NjE1YTY=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2017-06-19T19:36:56Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2017-06-19T19:36:56Z"}, "message": "Show type name for unused_must_use lint", "tree": {"sha": "38bcab8dd9f4161667644ac3ceac18a50640e963", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38bcab8dd9f4161667644ac3ceac18a50640e963"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05540bf08b067a6894937b3601cc2c66804615a6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05540bf08b067a6894937b3601cc2c66804615a6", "html_url": "https://github.com/rust-lang/rust/commit/05540bf08b067a6894937b3601cc2c66804615a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05540bf08b067a6894937b3601cc2c66804615a6/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb", "html_url": "https://github.com/rust-lang/rust/commit/04145943a25c3b8c7e7d7fe8c2efb04f259c25fb"}], "stats": {"total": 21, "additions": 10, "deletions": 11}, "files": [{"sha": "473c0f3ffda86dabafb38632ef43d75b798d0eec", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/05540bf08b067a6894937b3601cc2c66804615a6/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05540bf08b067a6894937b3601cc2c66804615a6/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=05540bf08b067a6894937b3601cc2c66804615a6", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use rustc::hir::def_id::DefId;\n use rustc::ty;\n use rustc::ty::adjustment;\n use util::nodemap::FxHashMap;\n@@ -144,20 +145,18 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n             ty::TyTuple(ref tys, _) if tys.is_empty() => return,\n             ty::TyNever => return,\n             ty::TyBool => return,\n-            ty::TyAdt(def, _) => {\n-                let attrs = cx.tcx.get_attrs(def.did);\n-                check_must_use(cx, &attrs, s.span)\n-            }\n+            ty::TyAdt(def, _) => check_must_use(cx, def.did, s.span),\n             _ => false,\n         };\n         if !warned {\n             cx.span_lint(UNUSED_RESULTS, s.span, \"unused result\");\n         }\n \n-        fn check_must_use(cx: &LateContext, attrs: &[ast::Attribute], sp: Span) -> bool {\n-            for attr in attrs {\n+        fn check_must_use(cx: &LateContext, def_id: DefId, sp: Span) -> bool {\n+            for attr in cx.tcx.get_attrs(def_id).iter() {\n                 if attr.check_name(\"must_use\") {\n-                    let mut msg = \"unused result which must be used\".to_string();\n+                    let mut msg = format!(\"unused `{}` which must be used\",\n+                                          cx.tcx.item_path_str(def_id));\n                     // check for #[must_use=\"...\"]\n                     if let Some(s) = attr.value_str() {\n                         msg.push_str(\": \");"}, {"sha": "0c6c7fc5a0d75bacafd543201c0deaeddbc23694", "filename": "src/test/compile-fail/unused-result.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05540bf08b067a6894937b3601cc2c66804615a6/src%2Ftest%2Fcompile-fail%2Funused-result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05540bf08b067a6894937b3601cc2c66804615a6/src%2Ftest%2Fcompile-fail%2Funused-result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-result.rs?ref=05540bf08b067a6894937b3601cc2c66804615a6", "patch": "@@ -26,8 +26,8 @@ fn qux() -> MustUseMsg { return foo::<MustUseMsg>(); }\n #[allow(unused_results)]\n fn test() {\n     foo::<isize>();\n-    foo::<MustUse>(); //~ ERROR: unused result which must be used\n-    foo::<MustUseMsg>(); //~ ERROR: unused result which must be used: some message\n+    foo::<MustUse>(); //~ ERROR: unused `MustUse` which must be used\n+    foo::<MustUseMsg>(); //~ ERROR: unused `MustUseMsg` which must be used: some message\n }\n \n #[allow(unused_results, unused_must_use)]\n@@ -39,8 +39,8 @@ fn test2() {\n \n fn main() {\n     foo::<isize>(); //~ ERROR: unused result\n-    foo::<MustUse>(); //~ ERROR: unused result which must be used\n-    foo::<MustUseMsg>(); //~ ERROR: unused result which must be used: some message\n+    foo::<MustUse>(); //~ ERROR: unused `MustUse` which must be used\n+    foo::<MustUseMsg>(); //~ ERROR: unused `MustUseMsg` which must be used: some message\n \n     let _ = foo::<isize>();\n     let _ = foo::<MustUse>();"}]}