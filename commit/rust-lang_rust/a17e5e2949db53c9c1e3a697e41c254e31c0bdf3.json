{"sha": "a17e5e2949db53c9c1e3a697e41c254e31c0bdf3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExN2U1ZTI5NDlkYjUzYzljMWUzYTY5N2U0MWMyNTRlMzFjMGJkZjM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-20T21:31:17Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-02-20T21:31:17Z"}, "message": "Auto merge of #39717 - pnkfelix:check-timestamps-in-compiletest-miropt, r=alexcrichton\n\nWhen compiletest'ing src/test/mir-opt, check timestamps.\n\nThe tests in src/test/mir-opt embed references to generated files. The names of the generated files embed node id's, which will change depending on the content of the original source.\n\nTo guard against comparisons against stale output, check the timestamps of the supposed output against the timestamp of the original source (i.e. any output should be at least as new as the source that was recompiled).\n\nFix #39690.", "tree": {"sha": "db701a6dae067392f911c65316287016f7eb9f8a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db701a6dae067392f911c65316287016f7eb9f8a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a17e5e2949db53c9c1e3a697e41c254e31c0bdf3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a17e5e2949db53c9c1e3a697e41c254e31c0bdf3", "html_url": "https://github.com/rust-lang/rust/commit/a17e5e2949db53c9c1e3a697e41c254e31c0bdf3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a17e5e2949db53c9c1e3a697e41c254e31c0bdf3/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1368fc4f497b6387b00850dc5a95df5d6974b43", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1368fc4f497b6387b00850dc5a95df5d6974b43", "html_url": "https://github.com/rust-lang/rust/commit/c1368fc4f497b6387b00850dc5a95df5d6974b43"}, {"sha": "6a78282607023058b7161e847054640001bf7357", "url": "https://api.github.com/repos/rust-lang/rust/commits/6a78282607023058b7161e847054640001bf7357", "html_url": "https://github.com/rust-lang/rust/commit/6a78282607023058b7161e847054640001bf7357"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "c9bdcd408ead755ecd571806d107c6010e7d66d2", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a17e5e2949db53c9c1e3a697e41c254e31c0bdf3/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a17e5e2949db53c9c1e3a697e41c254e31c0bdf3/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=a17e5e2949db53c9c1e3a697e41c254e31c0bdf3", "patch": "@@ -13,6 +13,7 @@ use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n use common::{Codegen, DebugInfoLldb, DebugInfoGdb, Rustdoc, CodegenUnits};\n use common::{Incremental, RunMake, Ui, MirOpt};\n use errors::{self, ErrorKind, Error};\n+use filetime::FileTime;\n use json;\n use header::TestProps;\n use header;\n@@ -2457,12 +2458,25 @@ actual:\\n\\\n         }\n     }\n \n+    fn check_mir_test_timestamp(&self, test_name: &str, output_file: &Path) {\n+        let t = |file| FileTime::from_last_modification_time(&fs::metadata(file).unwrap());\n+        let source_file = &self.testpaths.file;\n+        let output_time = t(output_file);\n+        let source_time = t(source_file);\n+        if source_time > output_time {\n+            debug!(\"source file time: {:?} output file time: {:?}\", source_time, output_time);\n+            panic!(\"test source file `{}` is newer than potentially stale output file `{}`.\",\n+                   source_file.display(), test_name);\n+        }\n+    }\n+\n     fn compare_mir_test_output(&self, test_name: &str, expected_content: &Vec<&str>) {\n         let mut output_file = PathBuf::new();\n         output_file.push(self.get_mir_dump_dir());\n         output_file.push(test_name);\n         debug!(\"comparing the contests of: {:?}\", output_file);\n         debug!(\"with: {:?}\", expected_content);\n+        self.check_mir_test_timestamp(test_name, &output_file);\n \n         let mut dumped_file = fs::File::open(output_file.clone()).unwrap();\n         let mut dumped_string = String::new();"}]}