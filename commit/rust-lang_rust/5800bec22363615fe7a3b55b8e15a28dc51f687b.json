{"sha": "5800bec22363615fe7a3b55b8e15a28dc51f687b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4MDBiZWMyMjM2MzYxNWZlN2EzYjU1YjhlMTVhMjhkYzUxZjY4N2I=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-28T10:10:29Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-28T10:10:29Z"}, "message": "discourage use of ref_to_mplace", "tree": {"sha": "1aa64b664dbdc77febe8a5e0627a337e94299b0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1aa64b664dbdc77febe8a5e0627a337e94299b0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5800bec22363615fe7a3b55b8e15a28dc51f687b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5800bec22363615fe7a3b55b8e15a28dc51f687b", "html_url": "https://github.com/rust-lang/rust/commit/5800bec22363615fe7a3b55b8e15a28dc51f687b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5800bec22363615fe7a3b55b8e15a28dc51f687b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b229f144160067409dd9d321748ab7ae77bd99c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b229f144160067409dd9d321748ab7ae77bd99c", "html_url": "https://github.com/rust-lang/rust/commit/3b229f144160067409dd9d321748ab7ae77bd99c"}], "stats": {"total": 4, "additions": 4, "deletions": 0}, "files": [{"sha": "d0670f64ed8da4faabc815e4bb66680c07284670", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5800bec22363615fe7a3b55b8e15a28dc51f687b/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5800bec22363615fe7a3b55b8e15a28dc51f687b/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=5800bec22363615fe7a3b55b8e15a28dc51f687b", "patch": "@@ -277,6 +277,10 @@ where\n {\n     /// Take a value, which represents a (thin or fat) reference, and make it a place.\n     /// Alignment is just based on the type.  This is the inverse of `MemPlace::to_ref()`.\n+    ///\n+    /// Only call this if you are sure the place is \"valid\" (aligned and inbounds), or do not\n+    /// want to ever use the place for memory access!\n+    /// Generally prefer `deref_operand`.\n     pub fn ref_to_mplace(\n         &self,\n         val: ImmTy<'tcx, M::PointerTag>,"}]}