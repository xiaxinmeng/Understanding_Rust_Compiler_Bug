{"sha": "fb8b354dcc837d5eb9b81fc205e4282a203df177", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZiOGIzNTRkY2M4MzdkNWViOWI4MWZjMjA1ZTQyODJhMjAzZGYxNzc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-26T14:25:14Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-26T14:25:14Z"}, "message": "add typed ids", "tree": {"sha": "d44edc8c6bf90ff29d1b4422b69ccc3ada06ad38", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d44edc8c6bf90ff29d1b4422b69ccc3ada06ad38"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fb8b354dcc837d5eb9b81fc205e4282a203df177", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fb8b354dcc837d5eb9b81fc205e4282a203df177", "html_url": "https://github.com/rust-lang/rust/commit/fb8b354dcc837d5eb9b81fc205e4282a203df177", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fb8b354dcc837d5eb9b81fc205e4282a203df177/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "619a4c05ba098220ab0fb65d42b7f415dfcc1b6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/619a4c05ba098220ab0fb65d42b7f415dfcc1b6a", "html_url": "https://github.com/rust-lang/rust/commit/619a4c05ba098220ab0fb65d42b7f415dfcc1b6a"}], "stats": {"total": 133, "additions": 88, "deletions": 45}, "files": [{"sha": "0edb8ade5b39a1209c35c02ed7f4b32da78f4902", "filename": "crates/ra_hir/src/code_model_impl/module.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/fb8b354dcc837d5eb9b81fc205e4282a203df177/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8b354dcc837d5eb9b81fc205e4282a203df177/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_impl%2Fmodule.rs?ref=fb8b354dcc837d5eb9b81fc205e4282a203df177", "patch": "@@ -1,27 +1,26 @@\n use ra_db::FileId;\n-use ra_syntax::{ast, TreeArc, AstNode};\n+use ra_syntax::{ast, TreeArc};\n \n use crate::{\n-    Module, ModuleSource, Name,\n+    Module, ModuleSource, Name, AstId,\n     nameres::{CrateModuleId, ImportId},\n     HirDatabase, DefDatabase,\n-    HirFileId, SourceItemId,\n+    HirFileId,\n };\n \n impl ModuleSource {\n     pub(crate) fn new(\n         db: &impl DefDatabase,\n         file_id: Option<FileId>,\n-        decl_id: Option<SourceItemId>,\n+        decl_id: Option<AstId<ast::Module>>,\n     ) -> ModuleSource {\n         match (file_id, decl_id) {\n             (Some(file_id), _) => {\n                 let source_file = db.parse(file_id);\n                 ModuleSource::SourceFile(source_file)\n             }\n             (None, Some(item_id)) => {\n-                let module = db.file_item(item_id);\n-                let module = ast::Module::cast(&*module).unwrap();\n+                let module = item_id.to_node(db);\n                 assert!(module.item_list().is_some(), \"expected inline module\");\n                 ModuleSource::Module(module.to_owned())\n             }\n@@ -55,7 +54,7 @@ impl Module {\n         let decl_id = def_map[self.module_id].declaration;\n         let file_id = def_map[self.module_id].definition;\n         let module_source = ModuleSource::new(db, file_id, decl_id);\n-        let file_id = file_id.map(HirFileId::from).unwrap_or_else(|| decl_id.unwrap().file_id);\n+        let file_id = file_id.map(HirFileId::from).unwrap_or_else(|| decl_id.unwrap().file_id());\n         (file_id, module_source)\n     }\n \n@@ -65,9 +64,8 @@ impl Module {\n     ) -> Option<(HirFileId, TreeArc<ast::Module>)> {\n         let def_map = db.crate_def_map(self.krate);\n         let decl = def_map[self.module_id].declaration?;\n-        let syntax_node = db.file_item(decl);\n-        let ast = ast::Module::cast(&syntax_node).unwrap().to_owned();\n-        Some((decl.file_id, ast))\n+        let ast = decl.to_node(db);\n+        Some((decl.file_id(), ast))\n     }\n \n     pub(crate) fn import_source_impl("}, {"sha": "3fc08c55caf28d0c873940c68349eb3e2ecd350d", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fb8b354dcc837d5eb9b81fc205e4282a203df177/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8b354dcc837d5eb9b81fc205e4282a203df177/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=fb8b354dcc837d5eb9b81fc205e4282a203df177", "patch": "@@ -48,7 +48,7 @@ mod marks;\n use crate::{\n     db::{HirDatabase, DefDatabase},\n     name::{AsName, KnownName},\n-    source_id::SourceFileItemId,\n+    source_id::{SourceFileItemId, FileAstId, AstId},\n };\n \n pub use self::{"}, {"sha": "67b9d698605e581a54b3f8465f06f5d793b417d3", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/fb8b354dcc837d5eb9b81fc205e4282a203df177/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8b354dcc837d5eb9b81fc205e4282a203df177/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=fb8b354dcc837d5eb9b81fc205e4282a203df177", "patch": "@@ -59,13 +59,15 @@ use rustc_hash::FxHashMap;\n use ra_arena::{Arena, RawId, impl_arena_id};\n use ra_db::{FileId, Edition};\n use test_utils::tested_by;\n+use ra_syntax::ast;\n \n use crate::{\n-    ModuleDef, Name, Crate, Module, SourceItemId,\n+    ModuleDef, Name, Crate, Module,\n     DefDatabase, Path, PathKind, HirFileId, Trait,\n     ids::MacroDefId,\n     diagnostics::DiagnosticSink,\n     nameres::diagnostics::DefDiagnostic,\n+    AstId,\n };\n \n pub(crate) use self::raw::{RawItems, ImportId, ImportSourceMap};\n@@ -106,7 +108,7 @@ pub(crate) struct ModuleData {\n     pub(crate) children: FxHashMap<Name, CrateModuleId>,\n     pub(crate) scope: ModuleScope,\n     /// None for root\n-    pub(crate) declaration: Option<SourceItemId>,\n+    pub(crate) declaration: Option<AstId<ast::Module>>,\n     /// None for inline modules.\n     ///\n     /// Note that non-inline modules, by definition, live inside non-macro file.\n@@ -225,7 +227,7 @@ impl CrateDefMap {\n     pub(crate) fn find_module_by_source(\n         &self,\n         file_id: HirFileId,\n-        decl_id: Option<SourceItemId>,\n+        decl_id: Option<AstId<ast::Module>>,\n     ) -> Option<CrateModuleId> {\n         let (module_id, _module_data) = self.modules.iter().find(|(_module_id, module_data)| {\n             if decl_id.is_some() {\n@@ -429,10 +431,10 @@ impl CrateDefMap {\n \n mod diagnostics {\n     use relative_path::RelativePathBuf;\n-    use ra_syntax::{AstPtr, AstNode, ast};\n+    use ra_syntax::{AstPtr, ast};\n \n     use crate::{\n-        SourceItemId, DefDatabase,\n+        AstId, DefDatabase,\n         nameres::CrateModuleId,\n         diagnostics::{DiagnosticSink, UnresolvedModule},\n };\n@@ -441,7 +443,7 @@ mod diagnostics {\n     pub(super) enum DefDiagnostic {\n         UnresolvedModule {\n             module: CrateModuleId,\n-            declaration: SourceItemId,\n+            declaration: AstId<ast::Module>,\n             candidate: RelativePathBuf,\n         },\n     }\n@@ -458,16 +460,14 @@ mod diagnostics {\n                     if *module != target_module {\n                         return;\n                     }\n-                    let syntax = db.file_item(*declaration);\n-                    let decl = ast::Module::cast(&syntax).unwrap();\n+                    let decl = declaration.to_node(db);\n                     sink.push(UnresolvedModule {\n-                        file: declaration.file_id,\n+                        file: declaration.file_id(),\n                         decl: AstPtr::new(&decl),\n                         candidate: candidate.clone(),\n                     })\n                 }\n             }\n         }\n     }\n-\n }"}, {"sha": "e6fd8632ae6c319e5ceb3d79b39fce8510befe16", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fb8b354dcc837d5eb9b81fc205e4282a203df177/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8b354dcc837d5eb9b81fc205e4282a203df177/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=fb8b354dcc837d5eb9b81fc205e4282a203df177", "patch": "@@ -3,6 +3,7 @@ use rustc_hash::FxHashMap;\n use relative_path::RelativePathBuf;\n use test_utils::tested_by;\n use ra_db::FileId;\n+use ra_syntax::ast;\n \n use crate::{\n     Function, Module, Struct, Enum, Const, Static, Trait, TypeAlias,\n@@ -15,6 +16,7 @@ use crate::{\n         raw,\n     },\n     ids::{AstItemDef, LocationCtx, MacroCallLoc, MacroCallId, MacroDefId},\n+    AstId,\n };\n \n pub(super) fn collect_defs(db: &impl DefDatabase, mut def_map: CrateDefMap) -> CrateDefMap {\n@@ -364,12 +366,9 @@ where\n     fn collect_module(&mut self, module: &raw::ModuleData) {\n         match module {\n             // inline module, just recurse\n-            raw::ModuleData::Definition { name, items, source_item_id } => {\n-                let module_id = self.push_child_module(\n-                    name.clone(),\n-                    source_item_id.with_file_id(self.file_id),\n-                    None,\n-                );\n+            raw::ModuleData::Definition { name, items, ast_id } => {\n+                let module_id =\n+                    self.push_child_module(name.clone(), ast_id.with_file_id(self.file_id), None);\n                 ModCollector {\n                     def_collector: &mut *self.def_collector,\n                     module_id,\n@@ -379,13 +378,12 @@ where\n                 .collect(&*items);\n             }\n             // out of line module, resovle, parse and recurse\n-            raw::ModuleData::Declaration { name, source_item_id } => {\n-                let source_item_id = source_item_id.with_file_id(self.file_id);\n+            raw::ModuleData::Declaration { name, ast_id } => {\n+                let ast_id = ast_id.with_file_id(self.file_id);\n                 let is_root = self.def_collector.def_map.modules[self.module_id].parent.is_none();\n                 match resolve_submodule(self.def_collector.db, self.file_id, name, is_root) {\n                     Ok(file_id) => {\n-                        let module_id =\n-                            self.push_child_module(name.clone(), source_item_id, Some(file_id));\n+                        let module_id = self.push_child_module(name.clone(), ast_id, Some(file_id));\n                         let raw_items = self.def_collector.db.raw_items(file_id.into());\n                         ModCollector {\n                             def_collector: &mut *self.def_collector,\n@@ -398,7 +396,7 @@ where\n                     Err(candidate) => self.def_collector.def_map.diagnostics.push(\n                         DefDiagnostic::UnresolvedModule {\n                             module: self.module_id,\n-                            declaration: source_item_id,\n+                            declaration: ast_id,\n                             candidate,\n                         },\n                     ),\n@@ -410,7 +408,7 @@ where\n     fn push_child_module(\n         &mut self,\n         name: Name,\n-        declaration: SourceItemId,\n+        declaration: AstId<ast::Module>,\n         definition: Option<FileId>,\n     ) -> CrateModuleId {\n         let modules = &mut self.def_collector.def_map.modules;"}, {"sha": "09acd5a98eb93431cba83236b513b81dc4716fff", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/fb8b354dcc837d5eb9b81fc205e4282a203df177/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8b354dcc837d5eb9b81fc205e4282a203df177/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=fb8b354dcc837d5eb9b81fc205e4282a203df177", "patch": "@@ -12,7 +12,7 @@ use ra_syntax::{\n \n use crate::{\n     DefDatabase, Name, AsName, Path, HirFileId, ModuleSource,\n-    SourceFileItemId, SourceFileItems,\n+    SourceFileItemId, SourceFileItems, FileAstId,\n };\n \n /// `RawItems` is a set of top-level items in a file (except for impls).\n@@ -115,8 +115,8 @@ impl_arena_id!(Module);\n \n #[derive(Debug, PartialEq, Eq)]\n pub(super) enum ModuleData {\n-    Declaration { name: Name, source_item_id: SourceFileItemId },\n-    Definition { name: Name, source_item_id: SourceFileItemId, items: Vec<RawItem> },\n+    Declaration { name: Name, ast_id: FileAstId<ast::Module> },\n+    Definition { name: Name, ast_id: FileAstId<ast::Module>, items: Vec<RawItem> },\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -221,18 +221,17 @@ impl RawItemsCollector {\n             Some(it) => it.as_name(),\n             None => return,\n         };\n-        let source_item_id = self.source_file_items.id_of_unchecked(module.syntax());\n+        let ast_id = self.source_file_items.ast_id(module);\n         if module.has_semi() {\n-            let item =\n-                self.raw_items.modules.alloc(ModuleData::Declaration { name, source_item_id });\n+            let item = self.raw_items.modules.alloc(ModuleData::Declaration { name, ast_id });\n             self.push_item(current_module, RawItem::Module(item));\n             return;\n         }\n \n         if let Some(item_list) = module.item_list() {\n             let item = self.raw_items.modules.alloc(ModuleData::Definition {\n                 name,\n-                source_item_id,\n+                ast_id,\n                 items: Vec::new(),\n             });\n             self.process_module(Some(item), item_list);"}, {"sha": "f9d2d0247ab90ed5ffceeb1f32f206ba907e6c9d", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fb8b354dcc837d5eb9b81fc205e4282a203df177/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8b354dcc837d5eb9b81fc205e4282a203df177/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=fb8b354dcc837d5eb9b81fc205e4282a203df177", "patch": "@@ -13,10 +13,10 @@ use ra_syntax::{\n };\n \n use crate::{\n-    HirDatabase, Function, Struct, Enum, SourceItemId,\n+    HirDatabase, Function, Struct, Enum,\n     AsName, Module, HirFileId, Crate, Trait, Resolver,\n     ids::LocationCtx,\n-    expr\n+    expr, AstId\n };\n \n /// Locates the module by `FileId`. Picks topmost module in the file.\n@@ -55,7 +55,7 @@ fn module_from_inline(\n     assert!(!module.has_semi());\n     let file_id = file_id.into();\n     let file_items = db.file_items(file_id);\n-    let item_id = file_items.id_of(file_id, module.syntax()).with_file_id(file_id);\n+    let item_id = file_items.ast_id(module).with_file_id(file_id);\n     module_from_source(db, file_id, Some(item_id))\n }\n \n@@ -75,7 +75,7 @@ pub fn module_from_child_node(\n fn module_from_source(\n     db: &impl HirDatabase,\n     file_id: HirFileId,\n-    decl_id: Option<SourceItemId>,\n+    decl_id: Option<AstId<ast::Module>>,\n ) -> Option<Module> {\n     let source_root_id = db.file_source_root(file_id.as_original_file());\n     db.source_root_crates(source_root_id).iter().map(|&crate_id| Crate { crate_id }).find_map("}, {"sha": "881cc590eae096e3ea7b2a2d81b1a708ee718744", "filename": "crates/ra_hir/src/source_id.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/fb8b354dcc837d5eb9b81fc205e4282a203df177/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fb8b354dcc837d5eb9b81fc205e4282a203df177/crates%2Fra_hir%2Fsrc%2Fsource_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_id.rs?ref=fb8b354dcc837d5eb9b81fc205e4282a203df177", "patch": "@@ -1,10 +1,55 @@\n-use std::sync::Arc;\n+use std::{marker::PhantomData, sync::Arc};\n \n use ra_arena::{Arena, RawId, impl_arena_id};\n use ra_syntax::{SyntaxNodePtr, TreeArc, SyntaxNode, SourceFile, AstNode, ast};\n \n use crate::{HirFileId, DefDatabase};\n \n+#[derive(Debug, PartialEq, Eq)]\n+pub(crate) struct AstId<N: AstNode> {\n+    file_id: HirFileId,\n+    file_ast_id: FileAstId<N>,\n+}\n+\n+impl<N: AstNode> Clone for AstId<N> {\n+    fn clone(&self) -> AstId<N> {\n+        *self\n+    }\n+}\n+\n+impl<N: AstNode> Copy for AstId<N> {}\n+\n+impl<N: AstNode> AstId<N> {\n+    pub(crate) fn file_id(&self) -> HirFileId {\n+        self.file_id\n+    }\n+\n+    pub(crate) fn to_node(&self, db: &impl DefDatabase) -> TreeArc<N> {\n+        let syntax_node = db.file_item(self.file_ast_id.raw.with_file_id(self.file_id));\n+        N::cast(&syntax_node).unwrap().to_owned()\n+    }\n+}\n+\n+#[derive(Debug, PartialEq, Eq)]\n+pub(crate) struct FileAstId<N: AstNode> {\n+    raw: SourceFileItemId,\n+    _ty: PhantomData<N>,\n+}\n+\n+impl<N: AstNode> Clone for FileAstId<N> {\n+    fn clone(&self) -> FileAstId<N> {\n+        *self\n+    }\n+}\n+\n+impl<N: AstNode> Copy for FileAstId<N> {}\n+\n+impl<N: AstNode> FileAstId<N> {\n+    pub(crate) fn with_file_id(self, file_id: HirFileId) -> AstId<N> {\n+        AstId { file_id, file_ast_id: self }\n+    }\n+}\n+\n /// Identifier of item within a specific file. This is stable over reparses, so\n /// it's OK to use it as a salsa key/value.\n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n@@ -90,6 +135,9 @@ impl SourceFileItems {\n             self.arena.iter().map(|(_id, i)| i).collect::<Vec<_>>(),\n         );\n     }\n+    pub(crate) fn ast_id<N: AstNode>(&self, item: &N) -> FileAstId<N> {\n+        FileAstId { raw: self.id_of_unchecked(item.syntax()), _ty: PhantomData }\n+    }\n }\n \n impl std::ops::Index<SourceFileItemId> for SourceFileItems {"}]}