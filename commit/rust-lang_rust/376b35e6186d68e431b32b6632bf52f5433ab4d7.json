{"sha": "376b35e6186d68e431b32b6632bf52f5433ab4d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3NmIzNWU2MTg2ZDY4ZTQzMWIzMmI2NjMyYmY1MmY1NDMzYWI0ZDc=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-02T19:00:10Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2010-12-02T19:00:10Z"}, "message": "rustc: Remove the overly complex variant_indices and n_ary_variant_indices tables", "tree": {"sha": "d7599ceadd0defba5f31bb2108534498f13ef2c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7599ceadd0defba5f31bb2108534498f13ef2c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/376b35e6186d68e431b32b6632bf52f5433ab4d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/376b35e6186d68e431b32b6632bf52f5433ab4d7", "html_url": "https://github.com/rust-lang/rust/commit/376b35e6186d68e431b32b6632bf52f5433ab4d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/376b35e6186d68e431b32b6632bf52f5433ab4d7/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eeecc8d0617b547520083b9db94ec05f84fbca64", "url": "https://api.github.com/repos/rust-lang/rust/commits/eeecc8d0617b547520083b9db94ec05f84fbca64", "html_url": "https://github.com/rust-lang/rust/commit/eeecc8d0617b547520083b9db94ec05f84fbca64"}], "stats": {"total": 58, "additions": 33, "deletions": 25}, "files": [{"sha": "3c06274f1e4b71f7365526121fca667dcd7adf97", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 33, "deletions": 25, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/376b35e6186d68e431b32b6632bf52f5433ab4d7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/376b35e6186d68e431b32b6632bf52f5433ab4d7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=376b35e6186d68e431b32b6632bf52f5433ab4d7", "patch": "@@ -44,9 +44,9 @@ type glue_fns = rec(ValueRef activate_glue,\n                     ValueRef exit_task_glue,\n                     vec[ValueRef] upcall_glues);\n \n+tag arity { nullary; n_ary(uint); }\n type tag_info = rec(type_handle th,\n-                    hashmap[ast.def_id, uint] variant_indices,\n-                    hashmap[ast.def_id, uint] n_ary_variant_indices);\n+                    mutable vec[tup(ast.def_id,arity)] variants);\n \n state type crate_ctxt = rec(session.session sess,\n                             ModuleRef llmod,\n@@ -55,7 +55,7 @@ state type crate_ctxt = rec(session.session sess,\n                             hashmap[str, ValueRef] fn_names,\n                             hashmap[ast.def_id, ValueRef] fn_ids,\n                             hashmap[ast.def_id, @ast.item] items,\n-                            hashmap[ast.def_id, tag_info] tags,\n+                            hashmap[ast.def_id, @tag_info] tags,\n                             @glue_fns glues,\n                             namegen names,\n                             str path);\n@@ -1133,14 +1133,22 @@ fn trans_name(@block_ctxt cx, &ast.name n, &option.t[ast.def] dopt)\n                 case (ast.def_variant(?tid, ?vid)) {\n                     check (cx.fcx.ccx.tags.contains_key(tid));\n                     auto info = cx.fcx.ccx.tags.get(tid);\n-                    if (info.n_ary_variant_indices.contains_key(vid)) {\n-                        cx.fcx.ccx.sess.unimpl(\"n-ary tag constructors in \" +\n-                                               \"trans\");\n-                    } else {\n-                        // Nullary tag variant case.\n-                        auto idx = info.variant_indices.get(vid);\n-                        auto elems = vec(C_int(idx as int));\n-                        ret tup(res(cx, C_struct(elems)), false);\n+                    auto i = 0;\n+                    for (tup(ast.def_id,arity) v in info.variants) {\n+                        if (vid == v._0) {\n+                            alt (v._1) {\n+                                case (nullary) {\n+                                    auto elems = vec(C_int(i));\n+                                    ret tup(res(cx, C_struct(elems)), false);\n+                                }\n+                                case (n_ary(_)) {\n+                                    cx.fcx.ccx.sess.unimpl(\"n-ary tag \" +\n+                                                           \"constructor in \" +\n+                                                           \"trans\");\n+                                }\n+                            }\n+                        }\n+                        i += 1;\n                     }\n                 }\n                 case (_) {\n@@ -1716,17 +1724,15 @@ fn resolve_tag_types_for_item(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n             let vec[TypeRef] variant_tys = vec();\n \n             auto info = cx.tags.get(tag_id);\n-            auto variant_indices = info.variant_indices;\n-            auto n_ary_variant_indices = info.n_ary_variant_indices;\n+            let vec[tup(ast.def_id,arity)] variant_info = vec();\n \n             auto tag_ty;\n             if (_vec.len[ast.variant](variants) == 0u) {\n                 tag_ty = T_struct(vec(T_int()));\n             } else {\n-                auto variant_idx = 0u;\n-                auto n_ary_variant_idx = 0u;\n-\n+                auto n_ary_idx = 0u;\n                 for (ast.variant variant in variants) {\n+                    auto arity_info;\n                     if (_vec.len[@ast.ty](variant.args) > 0u) {\n                         let vec[TypeRef] lltys = vec();\n \n@@ -1741,18 +1747,20 @@ fn resolve_tag_types_for_item(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n \n                         variant_tys += vec(T_struct(lltys));\n \n-                        n_ary_variant_indices.insert(variant.id,\n-                                                     n_ary_variant_idx);\n-                        n_ary_variant_idx += 1u;\n+                        arity_info = n_ary(n_ary_idx);\n+                        n_ary_idx += 1u;\n+                    } else {\n+                        arity_info = nullary;\n                     }\n \n-                    variant_indices.insert(variant.id, variant_idx);\n-                    variant_idx += 1u;\n+                    variant_info += vec(tup(variant.id, arity_info));\n                 }\n \n                 tag_ty = T_struct(vec(T_int(), T_union(variant_tys)));\n             }\n \n+            info.variants = variant_info;\n+\n             auto th = cx.tags.get(tag_id).th.llth;\n             llvm.LLVMRefineType(llvm.LLVMResolveTypeHandle(th), tag_ty);\n         }\n@@ -1782,9 +1790,9 @@ fn collect_item(&@crate_ctxt cx, @ast.item i) -> @crate_ctxt {\n         case (ast.item_tag(_, ?variants, _, ?tag_id)) {\n             auto vi = new_def_hash[uint]();\n             auto navi = new_def_hash[uint]();\n-            cx.tags.insert(tag_id, rec(th=mk_type_handle(),\n-                                       variant_indices=vi,\n-                                       n_ary_variant_indices=navi));\n+            let vec[tup(ast.def_id,arity)] variant_info = vec();\n+            cx.tags.insert(tag_id, @rec(th=mk_type_handle(),\n+                                        mutable variants=variant_info));\n         }\n \n         case (_) { /* fall through */ }\n@@ -1973,7 +1981,7 @@ fn trans_crate(session.session sess, @ast.crate crate, str output) {\n                    fn_names = new_str_hash[ValueRef](),\n                    fn_ids = new_def_hash[ValueRef](),\n                    items = new_def_hash[@ast.item](),\n-                   tags = new_def_hash[tag_info](),\n+                   tags = new_def_hash[@tag_info](),\n                    glues = glues,\n                    names = namegen(0),\n                    path = \"_rust\");"}]}