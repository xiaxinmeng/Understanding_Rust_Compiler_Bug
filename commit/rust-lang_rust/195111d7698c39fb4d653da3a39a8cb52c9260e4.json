{"sha": "195111d7698c39fb4d653da3a39a8cb52c9260e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NTExMWQ3Njk4YzM5ZmI0ZDY1M2RhM2EzOWE4Y2I1MmM5MjYwZTQ=", "commit": {"author": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2020-08-06T01:35:35Z"}, "committer": {"name": "Jeremy Kolb", "email": "kjeremy@gmail.com", "date": "2020-08-06T01:35:35Z"}, "message": "Address PR comments", "tree": {"sha": "dbe980330605183c3f9df132665a65a3370cab6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbe980330605183c3f9df132665a65a3370cab6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/195111d7698c39fb4d653da3a39a8cb52c9260e4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/195111d7698c39fb4d653da3a39a8cb52c9260e4", "html_url": "https://github.com/rust-lang/rust/commit/195111d7698c39fb4d653da3a39a8cb52c9260e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/195111d7698c39fb4d653da3a39a8cb52c9260e4/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcfd7cb1e38bc20240e466dbda64386e0cc89247", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcfd7cb1e38bc20240e466dbda64386e0cc89247", "html_url": "https://github.com/rust-lang/rust/commit/fcfd7cb1e38bc20240e466dbda64386e0cc89247"}], "stats": {"total": 30, "additions": 12, "deletions": 18}, "files": [{"sha": "0e592ac1bea4eb679909f59075986e459647e723", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/195111d7698c39fb4d653da3a39a8cb52c9260e4/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195111d7698c39fb4d653da3a39a8cb52c9260e4/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=195111d7698c39fb4d653da3a39a8cb52c9260e4", "patch": "@@ -3,15 +3,12 @@\n //!\n //! Each tick provides an immutable snapshot of the state as `WorldSnapshot`.\n \n-use std::{\n-    sync::{Arc, Mutex},\n-    time::Instant,\n-};\n+use std::{sync::Arc, time::Instant};\n \n use crossbeam_channel::{unbounded, Receiver, Sender};\n use flycheck::FlycheckHandle;\n use lsp_types::{SemanticTokens, Url};\n-use parking_lot::RwLock;\n+use parking_lot::{Mutex, RwLock};\n use ra_db::{CrateId, VfsPath};\n use ra_ide::{Analysis, AnalysisChange, AnalysisHost, FileId};\n use ra_project_model::{CargoWorkspace, ProcMacroClient, ProjectWorkspace, Target};"}, {"sha": "52dc72aad15c06dde6c59c45bc68de9df7562713", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/195111d7698c39fb4d653da3a39a8cb52c9260e4/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195111d7698c39fb4d653da3a39a8cb52c9260e4/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=195111d7698c39fb4d653da3a39a8cb52c9260e4", "patch": "@@ -1187,10 +1187,7 @@ pub(crate) fn handle_semantic_tokens(\n     let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n \n     // Unconditionally cache the tokens\n-    snap.semantic_tokens_cache\n-        .lock()\n-        .unwrap()\n-        .insert(params.text_document.uri, semantic_tokens.clone());\n+    snap.semantic_tokens_cache.lock().insert(params.text_document.uri, semantic_tokens.clone());\n \n     Ok(Some(semantic_tokens.into()))\n }\n@@ -1209,7 +1206,7 @@ pub(crate) fn handle_semantic_tokens_edits(\n \n     let semantic_tokens = to_proto::semantic_tokens(&text, &line_index, highlights);\n \n-    let mut cache = snap.semantic_tokens_cache.lock().unwrap();\n+    let mut cache = snap.semantic_tokens_cache.lock();\n     let cached_tokens = cache.entry(params.text_document.uri).or_default();\n \n     if let Some(prev_id) = &cached_tokens.result_id {"}, {"sha": "075abf45cca032e42d685ea76446412927a2dc5e", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/195111d7698c39fb4d653da3a39a8cb52c9260e4/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195111d7698c39fb4d653da3a39a8cb52c9260e4/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=195111d7698c39fb4d653da3a39a8cb52c9260e4", "patch": "@@ -452,7 +452,7 @@ impl GlobalState {\n                         None => log::error!(\"orphan DidCloseTextDocument: {}\", path),\n                     }\n \n-                    this.semantic_tokens_cache.lock().unwrap().remove(&params.text_document.uri);\n+                    this.semantic_tokens_cache.lock().remove(&params.text_document.uri);\n \n                     if let Some(path) = path.as_path() {\n                         this.loader.handle.invalidate(path.to_path_buf());"}, {"sha": "5eba1f15553450ef2570fd3fc9e42287f8577f40", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/195111d7698c39fb4d653da3a39a8cb52c9260e4/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/195111d7698c39fb4d653da3a39a8cb52c9260e4/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=195111d7698c39fb4d653da3a39a8cb52c9260e4", "patch": "@@ -1,6 +1,8 @@\n //! Conversion of rust-analyzer specific types to lsp_types equivalents.\n-use std::path::{self, Path};\n-use std::time::SystemTime;\n+use std::{\n+    path::{self, Path},\n+    sync::atomic::{AtomicU32, Ordering},\n+};\n \n use itertools::Itertools;\n use ra_db::{FileId, FileRange};\n@@ -304,16 +306,14 @@ pub(crate) fn inlay_int(line_index: &LineIndex, inlay_hint: InlayHint) -> lsp_ex\n     }\n }\n \n+static TOKEN_RESULT_COUNTER: AtomicU32 = AtomicU32::new(1);\n+\n pub(crate) fn semantic_tokens(\n     text: &str,\n     line_index: &LineIndex,\n     highlights: Vec<HighlightedRange>,\n ) -> lsp_types::SemanticTokens {\n-    let id = match SystemTime::now().duration_since(SystemTime::UNIX_EPOCH) {\n-        Ok(d) => d.as_millis().to_string(),\n-        Err(_) => String::new(),\n-    };\n-\n+    let id = TOKEN_RESULT_COUNTER.fetch_add(1, Ordering::SeqCst).to_string();\n     let mut builder = semantic_tokens::SemanticTokensBuilder::new(id);\n \n     for highlight_range in highlights {"}]}