{"sha": "b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyMjRmYzg0ZTM0MzgxMTdiMjE4ZWM2YjU3ZmRjM2VhOGEzZDFjMmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-06T07:02:25Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-06T07:02:25Z"}, "message": "Auto merge of #48017 - kennytm:rollup, r=kennytm\n\nRollup of 10 pull requests\n\n- Successful merges: #46030, #47496, #47543, #47704, #47753, #47807, #47948, #47959, #48003, #48007\n- Failed merges:", "tree": {"sha": "fdea43c93e46ce70ebc3a9f102a0bfa37cd6e69b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fdea43c93e46ce70ebc3a9f102a0bfa37cd6e69b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "html_url": "https://github.com/rust-lang/rust/commit/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c04c41034c46730fba97bfe9cfa2dd0687c2a5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c04c41034c46730fba97bfe9cfa2dd0687c2a5f", "html_url": "https://github.com/rust-lang/rust/commit/6c04c41034c46730fba97bfe9cfa2dd0687c2a5f"}, {"sha": "0553dc81d38cf7bd81334477b0338ef46da50e18", "url": "https://api.github.com/repos/rust-lang/rust/commits/0553dc81d38cf7bd81334477b0338ef46da50e18", "html_url": "https://github.com/rust-lang/rust/commit/0553dc81d38cf7bd81334477b0338ef46da50e18"}], "stats": {"total": 397, "additions": 188, "deletions": 209}, "files": [{"sha": "1393dd46d6bd6c0e2867533a49d2da75f2474569", "filename": "src/Cargo.lock", "status": "modified", "additions": 45, "deletions": 6, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -928,6 +928,11 @@ dependencies = [\n  \"xz2 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"is-match\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"itertools\"\n version = \"0.6.5\"\n@@ -936,6 +941,14 @@ dependencies = [\n  \"either 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"itertools\"\n+version = \"0.7.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"either 1.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"itoa\"\n version = \"0.3.4\"\n@@ -1129,23 +1142,28 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"mdbook\"\n-version = \"0.0.28\"\n+version = \"0.1.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n+ \"chrono 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"clap 2.29.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.5.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"handlebars 0.29.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"itertools 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"open 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_derive 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"shlex 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml-query 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1695,7 +1713,7 @@ name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n  \"clap 2.29.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"mdbook 0.0.28 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"mdbook 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2379,6 +2397,11 @@ name = \"shell-escape\"\n version = \"0.1.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"shlex\"\n+version = \"0.1.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"siphasher\"\n version = \"0.2.2\"\n@@ -2702,6 +2725,18 @@ dependencies = [\n  \"serde 1.0.27 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"toml-query\"\n+version = \"0.6.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"is-match 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.2.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"unicode-bidi\"\n version = \"0.3.4\"\n@@ -2992,7 +3027,9 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum idna 0.1.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"014b298351066f1512874135335d62a789ffe78a9974f94b43ed5621951eaf7d\"\n \"checksum if_chain 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"61bb90bdd39e3af69b0172dfc6130f6cd6332bf040fbb9bdd4401d37adbd48b8\"\n \"checksum ignore 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bb2f0238094bd1b41800fb6eb9b16fdd5e9832ed6053ed91409f0cd5bf28dcfd\"\n+\"checksum is-match 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7e5b386aef33a1c677be65237cb9d32c3f3ef56bd035949710c4bb13083eb053\"\n \"checksum itertools 0.6.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3f2be4da1690a039e9ae5fd575f706a63ad5a2120f161b1d653c9da3930dd21\"\n+\"checksum itertools 0.7.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b07332223953b5051bceb67e8c4700aa65291535568e1f12408c43c4a42c0394\"\n \"checksum itoa 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8324a32baf01e2ae060e9de58ed0bc2320c9a2833491ee36cd3b4c414de4db8c\"\n \"checksum jobserver 0.1.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"565f6106bd87b394398f813bea4e5ecad6d6b0f6aa077592d088f882a506481d\"\n \"checksum json 0.11.12 (registry+https://github.com/rust-lang/crates.io-index)\" = \"39ebf0fac977ee3a4a3242b6446004ff64514889e3e2730bbd4f764a67a2e483\"\n@@ -3014,7 +3051,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum mac 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c41e0c4fef86961ac6d6f8a82609f55f31b05e4fce149ac5710e439df7619ba4\"\n \"checksum markup5ever 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"047150a0e03b57e638fc45af33a0b63a0362305d5b9f92ecef81df472a4cceb0\"\n \"checksum matches 0.1.6 (registry+https://github.com/rust-lang/crates.io-index)\" = \"100aabe6b8ff4e4a7e32c1c13523379802df0772b82466207ac25b013f193376\"\n-\"checksum mdbook 0.0.28 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1ee8ba20c002000546681dc78d7f7e91fd35832058b1e2fdd492ca842bb6e9be\"\n+\"checksum mdbook 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fef236caad7ba3b5b3944df946f19ab3e190bca53c111dd00fe05fa8d879f2fd\"\n \"checksum memchr 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d8b629fb514376c675b98c1421e80b151d3817ac42d7c667717d282761418d20\"\n \"checksum memchr 2.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"796fba70e76612589ed2ce7f45282f5af869e0fdd7cc6199fa1aa1f1d591ba9d\"\n \"checksum miniz-sys 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"609ce024854aeb19a0ef7567d348aaa5a746b32fb72e336df7fcc16869d7e2b4\"\n@@ -3094,6 +3131,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum serde_json 1.0.9 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c9db7266c7d63a4c4b7fe8719656ccdd51acf1bed6124b174f933b009fb10bcb\"\n \"checksum shared_child 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"099b38928dbe4a0a01fcd8c233183072f14a7d126a34bed05880869be66e14cc\"\n \"checksum shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dd5cc96481d54583947bfe88bf30c23d53f883c6cd0145368b69989d97b84ef8\"\n+\"checksum shlex 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7fdf1b9db47230893d76faad238fd6097fd6d6a9245cd7a4d90dbd639536bbd2\"\n \"checksum siphasher 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0df90a788073e8d0235a67e50441d47db7c8ad9debd91cbf43736a2a92d36537\"\n \"checksum smallvec 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4f8266519bc1d17d0b5b16f6c21295625d562841c708f6376f49028a43e9c11e\"\n \"checksum smallvec 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"44db0ecb22921ef790d17ae13a3f6d15784183ff5f2a01aa32098c7498d2b4b9\"\n@@ -3122,6 +3160,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum time 0.1.39 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a15375f1df02096fb3317256ce2cee6a1f42fc84ea5ad5fc8c421cfe40c73098\"\n \"checksum toml 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"736b60249cb25337bc196faa43ee12c705e426f3d55c214d73a4e7be06f92cb4\"\n \"checksum toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a7540f4ffc193e0d3c94121edb19b055670d369f77d5804db11ae053a45b6e7e\"\n+\"checksum toml-query 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6854664bfc6df0360c695480836ee90e2d0c965f06db291d10be9344792d43e8\"\n \"checksum unicode-bidi 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"49f2bd0c6468a8230e1db229cff8029217cf623c767ea5d60bfbd42729ea54d5\"\n \"checksum unicode-normalization 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"51ccda9ef9efa3f7ef5d91e8f9b83bbe6955f9bf86aec89d5cce2c874625920f\"\n \"checksum unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a8083c594e02b8ae1654ae26f0ade5158b119bd88ad0e8227a5d8fcd72407946\""}, {"sha": "a645960fe48946153936dd5628df4a90bd837981", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -1 +1 @@\n-Subproject commit 194eb8d5f1753fb5f4501011cebdc1b585712474\n+Subproject commit a645960fe48946153936dd5628df4a90bd837981"}, {"sha": "e6a5d5d10aa2fde0baed7b29bf672bd9f3af8962", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -1 +1 @@\n-Subproject commit 1d791b55b23ec5389fbd5b3cee80db3f8bbdd162\n+Subproject commit e6a5d5d10aa2fde0baed7b29bf672bd9f3af8962"}, {"sha": "47b635bad736ff80af85b7ce71f0cef7b748c7e6", "filename": "src/doc/unstable-book/src/language-features/use-nested-groups.md", "status": "removed", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/6c04c41034c46730fba97bfe9cfa2dd0687c2a5f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fuse-nested-groups.md", "raw_url": "https://github.com/rust-lang/rust/raw/6c04c41034c46730fba97bfe9cfa2dd0687c2a5f/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fuse-nested-groups.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fuse-nested-groups.md?ref=6c04c41034c46730fba97bfe9cfa2dd0687c2a5f", "patch": "@@ -1,90 +0,0 @@\n-# `use_nested_groups`\n-\n-The tracking issue for this feature is: [#44494]\n-\n-[#44494]: https://github.com/rust-lang/rust/issues/44494\n-\n-------------------------\n-\n-The `use_nested_groups` feature allows you to import multiple items from a\n-complex module tree easily, by nesting different imports in the same\n-declaration. For example:\n-\n-```rust\n-#![feature(use_nested_groups)]\n-# #![allow(unused_imports, dead_code)]\n-#\n-# mod foo {\n-#     pub mod bar {\n-#         pub type Foo = ();\n-#     }\n-#     pub mod baz {\n-#         pub mod quux {\n-#             pub type Bar = ();\n-#         }\n-#     }\n-# }\n-\n-use foo::{\n-    bar::{self, Foo},\n-    baz::{*, quux::Bar},\n-};\n-#\n-# fn main() {}\n-```\n-\n-## Snippet for the book's new features appendix\n-\n-When stabilizing, add this to\n-`src/doc/book/second-edition/src/appendix-07-newest-features.md`:\n-\n-### Nested groups in `use` declarations\n-\n-If you have a complex module tree with many different submodules and you need\n-to import a few items from each one, it might be useful to group all the\n-imports in the same declaration to keep your code clean and avoid repeating the\n-base modules' name.\n-\n-The `use` declaration supports nesting to help you in those cases, both with\n-simple imports and glob ones. For example this snippets imports `bar`, `Foo`,\n-all the items in `baz` and `Bar`:\n-\n-```rust\n-# #![feature(use_nested_groups)]\n-# #![allow(unused_imports, dead_code)]\n-#\n-# mod foo {\n-#     pub mod bar {\n-#         pub type Foo = ();\n-#     }\n-#     pub mod baz {\n-#         pub mod quux {\n-#             pub type Bar = ();\n-#         }\n-#     }\n-# }\n-#\n-use foo::{\n-    bar::{self, Foo},\n-    baz::{*, quux::Bar},\n-};\n-#\n-# fn main() {}\n-```\n-\n-## Updated reference\n-\n-When stabilizing, replace the shortcut list in\n-`src/doc/reference/src/items/use-declarations.md` with this updated one:\n-\n-* Simultaneously binding a list of paths with a common prefix, using the\n-  glob-like brace syntax `use a::b::{c, d, e::f, g::h::i};`\n-* Simultaneously binding a list of paths with a common prefix and their common\n-  parent module, using the `self` keyword, such as `use a::b::{self, c, d::e};`\n-* Rebinding the target name as a new local name, using the syntax `use p::q::r\n-  as x;`. This can also be used with the last two features:\n-  `use a::b::{self as ab, c as abc}`.\n-* Binding all paths matching a given prefix, using the asterisk wildcard syntax\n-  `use a::b::*;`.\n-* Nesting groups of the previous features multiple times, such as\n-  `use a::b::{self as ab, c d::{*, e::f}};`"}, {"sha": "d3a83dc795c8577040b83b1c0e0440b826bf2880", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -141,9 +141,9 @@ pub trait AsRef<T: ?Sized> {\n ///\n /// # Generic Implementations\n ///\n-/// - `AsMut` auto-dereferences if the inner type is a reference or a mutable\n-///   reference (e.g.: `foo.as_ref()` will work the same if `foo` has type\n-///   `&mut Foo` or `&&mut Foo`)\n+/// - `AsMut` auto-dereferences if the inner type is a mutable reference\n+///   (e.g.: `foo.as_mut()` will work the same if `foo` has type `&mut Foo`\n+///   or `&mut &mut Foo`)\n ///\n /// # Examples\n ///"}, {"sha": "ed937046e5ed747b6ece8e486bcfbc250e79140e", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -1042,11 +1042,20 @@ pub fn check_ast_crate(sess: &Session, krate: &ast::Crate) {\n     // Put the lint store levels and passes back in the session.\n     cx.lint_sess.restore(&sess.lint_store);\n \n-    // Emit all buffered lints from early on in the session now that we've\n-    // calculated the lint levels for all AST nodes.\n-    for (_id, lints) in cx.buffered.map {\n-        for early_lint in lints {\n-            span_bug!(early_lint.span, \"failed to process buffered lint here\");\n+    // All of the buffered lints should have been emitted at this point.\n+    // If not, that means that we somehow buffered a lint for a node id\n+    // that was not lint-checked (perhaps it doesn't exist?). This is a bug.\n+    //\n+    // Rustdoc runs everybody-loops before the early lints and removes\n+    // function bodies, so it's totally possible for linted\n+    // node ids to not exist (e.g. macros defined within functions for the\n+    // unused_macro lint) anymore. So we only run this check\n+    // when we're not in rustdoc mode. (see issue #47639)\n+    if !sess.opts.actually_rustdoc {\n+        for (_id, lints) in cx.buffered.map {\n+            for early_lint in lints {\n+                span_bug!(early_lint.span, \"failed to process buffered lint here\");\n+            }\n         }\n     }\n }"}, {"sha": "738c0d82ee1b5d0a7a1522ec07614053e7bea29e", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -1068,22 +1068,12 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         };\n \n         match cause {\n-            mc::AliasableStatic => {\n-                // This happens when we have an `&mut` or assignment to a\n-                // static. We should have already reported a mutability\n-                // violation first, but may have continued compiling.\n-                self.tcx.sess.delay_span_bug(\n-                    span,\n-                    &format!(\"aliasability violation for static `{}`\", prefix)\n-                );\n-                return;\n-            }\n             mc::AliasableStaticMut => {\n                 // This path cannot occur. `static mut X` is not checked\n                 // for aliasability violations.\n                 span_bug!(span, \"aliasability violation for static mut `{}`\", prefix)\n             }\n-            mc::AliasableBorrowed => {}\n+            mc::AliasableStatic | mc::AliasableBorrowed => {}\n         };\n         let blame = cmt.immutability_blame();\n         let mut err = match blame {"}, {"sha": "841350bdb68e117d1e2c5ec7d9ea58a9bfb85ff4", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -791,7 +791,7 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n         field_ref: &ast::Field,\n         variant: &ty::VariantDef,\n     ) -> Option<Ref> {\n-        let f = variant.field_named(field_ref.ident.node.name);\n+        let f = variant.find_field_named(field_ref.ident.node.name)?;\n         // We don't really need a sub-span here, but no harm done\n         let sub_span = self.span_utils.span_for_last_ident(field_ref.ident.span);\n         filter!(self.span_utils, sub_span, field_ref.ident.span, None);\n@@ -870,6 +870,17 @@ impl<'l, 'tcx: 'l> SaveContext<'l, 'tcx> {\n                         result.push_str(&val.as_str());\n                     }\n                     result.push('\\n');\n+                } else if let Some(meta_list) = attr.meta_item_list() {\n+                    meta_list.into_iter()\n+                             .filter(|it| it.check_name(\"include\"))\n+                             .filter_map(|it| it.meta_item_list().map(|l| l.to_owned()))\n+                             .flat_map(|it| it)\n+                             .filter(|meta| meta.check_name(\"contents\"))\n+                             .filter_map(|meta| meta.value_str())\n+                             .for_each(|val| {\n+                                 result.push_str(&val.as_str());\n+                                 result.push('\\n');\n+                             });\n                 }\n             }\n         }"}, {"sha": "e91d3a32a50cd80f232c580c934189901e22bf16", "filename": "src/libstd/ffi/c_str.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Flibstd%2Fffi%2Fc_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Flibstd%2Fffi%2Fc_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fc_str.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -1026,9 +1026,9 @@ impl CStr {\n     /// The returned slice will **not** contain the trailing nul terminator that this C\n     /// string has.\n     ///\n-    /// > **Note**: This method is currently implemented as a 0-cost cast, but\n-    /// > it is planned to alter its definition in the future to perform the\n-    /// > length calculation whenever this method is called.\n+    /// > **Note**: This method is currently implemented as a constant-time\n+    /// > cast, but it is planned to alter its definition in the future to\n+    /// > perform the length calculation whenever this method is called.\n     ///\n     /// # Examples\n     ///\n@@ -1077,9 +1077,9 @@ impl CStr {\n     /// it will return an error with details of where UTF-8 validation failed.\n     ///\n     /// > **Note**: This method is currently implemented to check for validity\n-    /// > after a 0-cost cast, but it is planned to alter its definition in the\n-    /// > future to perform the length calculation in addition to the UTF-8\n-    /// > check whenever this method is called.\n+    /// > after a constant-time cast, but it is planned to alter its definition\n+    /// > in the future to perform the length calculation in addition to the\n+    /// > UTF-8 check whenever this method is called.\n     ///\n     /// [`&str`]: ../primitive.str.html\n     ///\n@@ -1110,9 +1110,9 @@ impl CStr {\n     /// with the result.\n     ///\n     /// > **Note**: This method is currently implemented to check for validity\n-    /// > after a 0-cost cast, but it is planned to alter its definition in the\n-    /// > future to perform the length calculation in addition to the UTF-8\n-    /// > check whenever this method is called.\n+    /// > after a constant-time cast, but it is planned to alter its definition\n+    /// > in the future to perform the length calculation in addition to the\n+    /// > UTF-8 check whenever this method is called.\n     ///\n     /// [`Cow`]: ../borrow/enum.Cow.html\n     /// [`Borrowed`]: ../borrow/enum.Cow.html#variant.Borrowed"}, {"sha": "9c6520cd874a8ec87bdc2a3af0bd44b160adef4e", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 26, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -423,9 +423,6 @@ declare_features! (\n     // In-band lifetime bindings (e.g. `fn foo(x: &'a u8) -> &'a u8`)\n     (active, in_band_lifetimes, \"1.23.0\", Some(44524)),\n \n-    // Nested groups in `use` (RFC 2128)\n-    (active, use_nested_groups, \"1.23.0\", Some(44494)),\n-\n     // generic associated types (RFC 1598)\n     (active, generic_associated_types, \"1.23.0\", Some(44265)),\n \n@@ -544,6 +541,8 @@ declare_features! (\n     (accepted, repr_align, \"1.24.0\", Some(33626)),\n     // allow '|' at beginning of match arms (RFC 1925)\n     (accepted, match_beginning_vert, \"1.25.0\", Some(44101)),\n+    // Nested groups in `use` (RFC 2128)\n+    (accepted, use_nested_groups, \"1.25.0\", Some(44494)),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must\n@@ -1805,29 +1804,6 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n         visit::walk_path(self, path);\n     }\n \n-    fn visit_use_tree(&mut self, use_tree: &'a ast::UseTree, id: NodeId, nested: bool) {\n-        if nested {\n-            match use_tree.kind {\n-                ast::UseTreeKind::Simple(_) => {\n-                    if use_tree.prefix.segments.len() != 1 {\n-                        gate_feature_post!(&self, use_nested_groups, use_tree.span,\n-                                           \"paths in `use` groups are experimental\");\n-                    }\n-                }\n-                ast::UseTreeKind::Glob => {\n-                    gate_feature_post!(&self, use_nested_groups, use_tree.span,\n-                                       \"glob imports in `use` groups are experimental\");\n-                }\n-                ast::UseTreeKind::Nested(_) => {\n-                    gate_feature_post!(&self, use_nested_groups, use_tree.span,\n-                                       \"nested groups in `use` are experimental\");\n-                }\n-            }\n-        }\n-\n-        visit::walk_use_tree(self, use_tree, id);\n-    }\n-\n     fn visit_vis(&mut self, vis: &'a ast::Visibility) {\n         if let ast::Visibility::Crate(span, ast::CrateSugar::JustCrate) = *vis {\n             gate_feature_post!(&self, crate_visibility_modifier, span,"}, {"sha": "d1de4dccd00430b4d3885c3635d7d556b1c1eb00", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -239,6 +239,12 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt,\n         }\n     }\n \n+    // If there are no outputs, the inline assembly is executed just for its side effects,\n+    // so ensure that it is volatile\n+    if outputs.is_empty() {\n+        volatile = true;\n+    }\n+\n     MacEager::expr(P(ast::Expr {\n         id: ast::DUMMY_NODE_ID,\n         node: ast::ExprKind::InlineAsm(P(ast::InlineAsm {"}, {"sha": "457d706a8ffef21f6c6cbf9834cffa47596e7964", "filename": "src/test/codegen/no-output-asm-is-volatile.rs", "status": "renamed", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Fno-output-asm-is-volatile.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -8,24 +8,19 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![allow(unused_imports, dead_code)]\n+// compile-flags: -O\n \n-mod a {\n-    pub enum B {}\n-    pub enum C {}\n+// ignore-asmjs\n \n-    pub mod d {\n-        pub enum E {}\n-        pub enum F {}\n+#![feature(asm)]\n+#![crate_type = \"lib\"]\n \n-        pub mod g {\n-            pub enum H {}\n-        }\n-    }\n-}\n-\n-use a::{B, d::{*, g::H}};  //~ ERROR glob imports in `use` groups are experimental\n-                           //~^ ERROR nested groups in `use` are experimental\n-                           //~^^ ERROR paths in `use` groups are experimental\n+// Check that inline assembly expressions without any outputs\n+// are marked as having side effects / being volatile\n \n-fn main() {}\n+// CHECK-LABEL: @assembly\n+#[no_mangle]\n+pub fn assembly() {\n+    unsafe { asm!(\"\") }\n+// CHECK: tail call void asm sideeffect \"\", {{.*}}\n+}", "previous_filename": "src/test/ui/feature-gate-use_nested_groups.rs"}, {"sha": "fe052f2f47ffda103b01b199ac3f6a1b3e044bac", "filename": "src/test/compile-fail/absolute-paths-in-nested-use-groups.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Fcompile-fail%2Fabsolute-paths-in-nested-use-groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Fcompile-fail%2Fabsolute-paths-in-nested-use-groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fabsolute-paths-in-nested-use-groups.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(use_nested_groups)]\n #![allow(unused_imports)]\n \n mod foo {}"}, {"sha": "2f11ff402beed7ad225c6b29cc15a938c10d319c", "filename": "src/test/compile-fail/issue-42344.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Fcompile-fail%2Fissue-42344.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Fcompile-fail%2Fissue-42344.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-42344.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static TAB: [&mut [u8]; 0] = [];\n+\n+pub unsafe fn test() {\n+    TAB[0].iter_mut(); //~ ERROR cannot borrow data mutably in a `&` reference [E0389]\n+}\n+\n+pub fn main() {}"}, {"sha": "3b7089f497526aaac1ed0d24587a73c49e39fd9a", "filename": "src/test/compile-fail/issue-44415.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Fcompile-fail%2Fissue-44415.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Fcompile-fail%2Fissue-44415.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-44415.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(const_fn)]\n+#![feature(core_intrinsics)]\n+\n+use std::intrinsics;\n+\n+struct Foo {\n+    bytes: [u8; unsafe { intrinsics::size_of::<Foo>() }],\n+    //~^ ERROR unsupported cyclic reference between types/traits detected\n+    x: usize,\n+}\n+\n+fn main() {}"}, {"sha": "dc14eca1e673438122fc447a2cb48c00c46388e6", "filename": "src/test/compile-fail/issue-46604.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Fcompile-fail%2Fissue-46604.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Fcompile-fail%2Fissue-46604.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-46604.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -17,5 +17,6 @@ fn write<T: AsRef<[u8]>>(buffer: T) { }\n \n fn main() {\n     write(&buf);\n-    buf[0]=2;                                   //[mir]~ ERROR E0594\n+    buf[0]=2;                                   //[ast]~ ERROR E0389\n+                                                //[mir]~^ ERROR E0594\n }"}, {"sha": "07322d8bbc3253cb9c03556e479bb50c898c52f1", "filename": "src/test/run-make/save-analysis-fail/foo.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Frun-make%2Fsave-analysis-fail%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Frun-make%2Fsave-analysis-fail%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis-fail%2Ffoo.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -451,3 +451,11 @@ extern {\n     static EXTERN_FOO: u8;\n     fn extern_foo(a: u8, b: i32) -> String;\n }\n+\n+struct Rls699 {\n+  f: u32,\n+}\n+\n+fn new(f: u32) -> Rls699 {\n+    Rls699 { fs }\n+}"}, {"sha": "0605ca517ff3bdfaf4f613ef0a988ed61187a4d9", "filename": "src/test/run-make/save-analysis/extra-docs.md", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Frun-make%2Fsave-analysis%2Fextra-docs.md", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Frun-make%2Fsave-analysis%2Fextra-docs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Fextra-docs.md?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -0,0 +1 @@\n+Extra docs for this struct."}, {"sha": "5b4e4802957af8e037c62f96500fe008e1818a55", "filename": "src/test/run-make/save-analysis/foo.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsave-analysis%2Ffoo.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -12,6 +12,7 @@\n #![feature(box_syntax)]\n #![feature(rustc_private)]\n #![feature(associated_type_defaults)]\n+#![feature(external_doc)]\n \n extern crate graphviz;\n // A simple rust project\n@@ -461,3 +462,6 @@ impl Iterator for SilenceGenerator {\n trait Foo {\n     type Bar = FrameBuffer;\n }\n+\n+#[doc(include=\"extra-docs.md\")]\n+struct StructWithDocs;"}, {"sha": "22f7f169e298840e9ef7ffb0bdc6e3bd75a9e72d", "filename": "src/test/run-pass/issue-47673.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Frun-pass%2Fissue-47673.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Frun-pass%2Fissue-47673.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-47673.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(use_nested_groups)]\n #![allow(unused_import)]\n \n use {{}, {}};"}, {"sha": "be06e463e3b37fac7c475e3840c3e9d12bcf481f", "filename": "src/test/run-pass/use-nested-groups.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Frun-pass%2Fuse-nested-groups.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Frun-pass%2Fuse-nested-groups.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fuse-nested-groups.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(use_nested_groups)]\n-\n mod a {\n     pub enum B {}\n "}, {"sha": "167c3aaec4ab6141795e361ba7f58da91a1b1a7f", "filename": "src/test/rustdoc/issue-47639.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Frustdoc%2Fissue-47639.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Frustdoc%2Fissue-47639.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-47639.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// This should not ICE\n+pub fn test() {\n+    macro_rules! foo {\n+        () => ()\n+    }\n+}"}, {"sha": "6ae691c384be8a4a945f6d3535a337554968594a", "filename": "src/test/ui/feature-gate-use_nested_groups.stderr", "status": "removed", "additions": 0, "deletions": 26, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6c04c41034c46730fba97bfe9cfa2dd0687c2a5f/src%2Ftest%2Fui%2Ffeature-gate-use_nested_groups.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6c04c41034c46730fba97bfe9cfa2dd0687c2a5f/src%2Ftest%2Fui%2Ffeature-gate-use_nested_groups.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate-use_nested_groups.stderr?ref=6c04c41034c46730fba97bfe9cfa2dd0687c2a5f", "patch": "@@ -1,26 +0,0 @@\n-error[E0658]: nested groups in `use` are experimental (see issue #44494)\n-  --> $DIR/feature-gate-use_nested_groups.rs:27:12\n-   |\n-27 | use a::{B, d::{*, g::H}};  //~ ERROR glob imports in `use` groups are experimental\n-   |            ^^^^^^^^^^^^\n-   |\n-   = help: add #![feature(use_nested_groups)] to the crate attributes to enable\n-\n-error[E0658]: glob imports in `use` groups are experimental (see issue #44494)\n-  --> $DIR/feature-gate-use_nested_groups.rs:27:16\n-   |\n-27 | use a::{B, d::{*, g::H}};  //~ ERROR glob imports in `use` groups are experimental\n-   |                ^\n-   |\n-   = help: add #![feature(use_nested_groups)] to the crate attributes to enable\n-\n-error[E0658]: paths in `use` groups are experimental (see issue #44494)\n-  --> $DIR/feature-gate-use_nested_groups.rs:27:19\n-   |\n-27 | use a::{B, d::{*, g::H}};  //~ ERROR glob imports in `use` groups are experimental\n-   |                   ^^^^\n-   |\n-   = help: add #![feature(use_nested_groups)] to the crate attributes to enable\n-\n-error: aborting due to 3 previous errors\n-"}, {"sha": "0a68d34ade9faf2d1e85d5bf27226c46c15ef707", "filename": "src/test/ui/use-nested-groups-error.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Fui%2Fuse-nested-groups-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Fui%2Fuse-nested-groups-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-nested-groups-error.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(use_nested_groups)]\n-\n mod a {\n     pub mod b1 {\n         pub enum C2 {}"}, {"sha": "c4edb626be0bb488c08b2144998de9598b60a144", "filename": "src/test/ui/use-nested-groups-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Fui%2Fuse-nested-groups-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftest%2Fui%2Fuse-nested-groups-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse-nested-groups-error.stderr?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -1,7 +1,7 @@\n error[E0432]: unresolved import `a::b1::C1`\n-  --> $DIR/use-nested-groups-error.rs:21:14\n+  --> $DIR/use-nested-groups-error.rs:19:14\n    |\n-21 | use a::{b1::{C1, C2}, B2};\n+19 | use a::{b1::{C1, C2}, B2};\n    |              ^^ no `C1` in `a::b1`. Did you mean to use `C2`?\n \n error: aborting due to previous error"}, {"sha": "539b434e9eca554c9dc9d52a130e4d3dfbde28ef", "filename": "src/tools/rustbook/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftools%2Frustbook%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftools%2Frustbook%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2FCargo.toml?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -8,5 +8,5 @@ license = \"MIT/Apache-2.0\"\n clap = \"2.25.0\"\n \n [dependencies.mdbook]\n-version = \"0.0.28\"\n+version = \"0.1.2\"\n default-features = false"}, {"sha": "87a63a34cb642ef5c978cdb563fb3738a99be6a3", "filename": "src/tools/rustbook/src/main.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Frustbook%2Fsrc%2Fmain.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -13,7 +13,6 @@ extern crate mdbook;\n extern crate clap;\n \n use std::env;\n-use std::io::{self, Write};\n use std::path::{Path, PathBuf};\n \n use clap::{App, ArgMatches, SubCommand, AppSettings};\n@@ -45,14 +44,19 @@ fn main() {\n     };\n \n     if let Err(e) = res {\n-        writeln!(&mut io::stderr(), \"An error occured:\\n{}\", e).ok();\n+        eprintln!(\"Error: {}\", e);\n+\n+        for cause in e.iter().skip(1) {\n+            eprintln!(\"\\tCaused By: {}\", cause);\n+        }\n+\n         ::std::process::exit(101);\n     }\n }\n // Build command implementation\n pub fn build(args: &ArgMatches) -> Result<()> {\n     let book_dir = get_book_dir(args);\n-    let mut book = MDBook::new(&book_dir).read_config()?;\n+    let mut book = MDBook::load(&book_dir)?;\n \n     // Set this to allow us to catch bugs in advance.\n     book.config.build.create_missing = false;"}, {"sha": "159c9e035b7a28ab3e24d6bfb3536d580a54b97e", "filename": "src/tools/tidy/src/deps.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fdeps.rs?ref=b224fc84e3438117b218ec6b57fdc3ea8a3d1c2e", "patch": "@@ -33,6 +33,8 @@ static EXCEPTIONS: &'static [&'static str] = &[\n     \"openssl\", // BSD+advertising clause, cargo, mdbook\n     \"pest\", // MPL2, mdbook via handlebars\n     \"thread-id\", // Apache-2.0, mdbook\n+    \"toml-query\", // MPL-2.0, mdbook\n+    \"is-match\", // MPL-2.0, mdbook\n     \"cssparser\", // MPL-2.0, rustdoc\n     \"smallvec\", // MPL-2.0, rustdoc\n     \"fuchsia-zircon-sys\", // BSD-3-Clause, rustdoc, rustc, cargo"}]}