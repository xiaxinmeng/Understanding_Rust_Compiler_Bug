{"sha": "d0f404d77a4efefa132346c507738d9a5c6e69b4", "node_id": "C_kwDOAAsO6NoAKGQwZjQwNGQ3N2E0ZWZlZmExMzIzNDZjNTA3NzM4ZDlhNWM2ZTY5YjQ", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-23T14:08:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-12-23T14:18:18Z"}, "message": "fix IntoIter::drop on high-alignment ZST", "tree": {"sha": "c35ad5d2dcde9722b3ab749adf720f97d6717ace", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c35ad5d2dcde9722b3ab749adf720f97d6717ace"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0f404d77a4efefa132346c507738d9a5c6e69b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0f404d77a4efefa132346c507738d9a5c6e69b4", "html_url": "https://github.com/rust-lang/rust/commit/d0f404d77a4efefa132346c507738d9a5c6e69b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0f404d77a4efefa132346c507738d9a5c6e69b4/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14e2fe4039f0b42c1ac519671e27943560530458", "url": "https://api.github.com/repos/rust-lang/rust/commits/14e2fe4039f0b42c1ac519671e27943560530458", "html_url": "https://github.com/rust-lang/rust/commit/14e2fe4039f0b42c1ac519671e27943560530458"}], "stats": {"total": 40, "additions": 23, "deletions": 17}, "files": [{"sha": "cd4ea829e378237fcf2f3a7df55ec6f826775e43", "filename": "library/alloc/src/vec/into_iter.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d0f404d77a4efefa132346c507738d9a5c6e69b4/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0f404d77a4efefa132346c507738d9a5c6e69b4/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Finto_iter.rs?ref=d0f404d77a4efefa132346c507738d9a5c6e69b4", "patch": "@@ -40,7 +40,9 @@ pub struct IntoIter<\n     // to avoid dropping the allocator twice we need to wrap it into ManuallyDrop\n     pub(super) alloc: ManuallyDrop<A>,\n     pub(super) ptr: *const T,\n-    pub(super) end: *const T,\n+    pub(super) end: *const T, // If T is a ZST, this is actually ptr+len.  This encoding is picked so that\n+                              // ptr == end is a quick test for the Iterator being empty, that works\n+                              // for both ZST and non-ZST.\n }\n \n #[stable(feature = \"vec_intoiter_debug\", since = \"1.13.0\")]\n@@ -132,7 +134,9 @@ impl<T, A: Allocator> IntoIter<T, A> {\n \n     /// Forgets to Drop the remaining elements while still allowing the backing allocation to be freed.\n     pub(crate) fn forget_remaining_elements(&mut self) {\n-        self.ptr = self.end;\n+        // For th ZST case, it is crucial that we mutate `end` here, not `ptr`.\n+        // `ptr` must stay aligned, while `end` may be unaligned.\n+        self.end = self.ptr;\n     }\n \n     #[cfg(not(no_global_oom_handling))]\n@@ -184,10 +188,9 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n         if self.ptr == self.end {\n             None\n         } else if T::IS_ZST {\n-            // purposefully don't use 'ptr.offset' because for\n-            // vectors with 0-size elements this would return the\n-            // same pointer.\n-            self.ptr = self.ptr.wrapping_byte_add(1);\n+            // `ptr` has to stay where it is to remain aligned, so we reduce the length by 1 by\n+            // reducing the `end`.\n+            self.end = self.end.wrapping_byte_sub(1);\n \n             // Make up a value of this ZST.\n             Some(unsafe { mem::zeroed() })\n@@ -214,10 +217,8 @@ impl<T, A: Allocator> Iterator for IntoIter<T, A> {\n         let step_size = self.len().min(n);\n         let to_drop = ptr::slice_from_raw_parts_mut(self.ptr as *mut T, step_size);\n         if T::IS_ZST {\n-            // SAFETY: due to unchecked casts of unsigned amounts to signed offsets the wraparound\n-            // effectively results in unsigned pointers representing positions 0..usize::MAX,\n-            // which is valid for ZSTs.\n-            self.ptr = self.ptr.wrapping_byte_add(step_size);\n+            // See `next` for why we sub `end` here.\n+            self.end = self.end.wrapping_byte_sub(step_size);\n         } else {\n             // SAFETY: the min() above ensures that step_size is in bounds\n             self.ptr = unsafe { self.ptr.add(step_size) };"}, {"sha": "989a196b700c34a6e125b0e0249dcf8d297eb5c3", "filename": "src/tools/miri/README.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d0f404d77a4efefa132346c507738d9a5c6e69b4/src%2Ftools%2Fmiri%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/d0f404d77a4efefa132346c507738d9a5c6e69b4/src%2Ftools%2Fmiri%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FREADME.md?ref=d0f404d77a4efefa132346c507738d9a5c6e69b4", "patch": "@@ -639,6 +639,7 @@ Definite bugs found:\n * [Data race in `thread::scope`](https://github.com/rust-lang/rust/issues/98498)\n * [`regex` incorrectly handling unaligned `Vec<u8>` buffers](https://www.reddit.com/r/rust/comments/vq3mmu/comment/ienc7t0?context=3)\n * [Incorrect use of `compare_exchange_weak` in `once_cell`](https://github.com/matklad/once_cell/issues/186)\n+* [Dropping with unaligned pointers in `vec::IntoIter`](https://github.com/rust-lang/rust/pull/106084)\n \n Violations of [Stacked Borrows] found that are likely bugs (but Stacked Borrows is currently just an experiment):\n "}, {"sha": "a165c7c2fe79b091c959e7f9076e3267a091da6f", "filename": "src/tools/miri/tests/pass/vec.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d0f404d77a4efefa132346c507738d9a5c6e69b4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0f404d77a4efefa132346c507738d9a5c6e69b4/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fvec.rs?ref=d0f404d77a4efefa132346c507738d9a5c6e69b4", "patch": "@@ -37,15 +37,19 @@ fn vec_into_iter() -> u8 {\n }\n \n fn vec_into_iter_rev() -> u8 {\n-    vec![1, 2, 3, 4].into_iter().map(|x| x * x).fold(0, |x, y| x + y)\n+    vec![1, 2, 3, 4].into_iter().rev().map(|x| x * x).fold(0, |x, y| x + y)\n }\n \n-fn vec_into_iter_zst() -> usize {\n-    vec![[0u64; 0], [0u64; 0]].into_iter().rev().map(|x| x.len()).sum()\n+fn vec_into_iter_zst() {\n+    for _ in vec![[0u64; 0]].into_iter() {}\n+    let v = vec![[0u64; 0], [0u64; 0]].into_iter().map(|x| x.len()).sum::<usize>();\n+    assert_eq!(v, 0);\n }\n \n-fn vec_into_iter_rev_zst() -> usize {\n-    vec![[0u64; 0], [0u64; 0]].into_iter().rev().map(|x| x.len()).sum()\n+fn vec_into_iter_rev_zst() {\n+    for _ in vec![[0u64; 0]; 5].into_iter().rev() {}\n+    let v = vec![[0u64; 0], [0u64; 0]].into_iter().rev().map(|x| x.len()).sum::<usize>();\n+    assert_eq!(v, 0);\n }\n \n fn vec_iter_and_mut() {\n@@ -150,8 +154,8 @@ fn main() {\n     assert_eq!(vec_into_iter(), 30);\n     assert_eq!(vec_into_iter_rev(), 30);\n     vec_iter_and_mut();\n-    assert_eq!(vec_into_iter_zst(), 0);\n-    assert_eq!(vec_into_iter_rev_zst(), 0);\n+    vec_into_iter_zst();\n+    vec_into_iter_rev_zst();\n     vec_iter_and_mut_rev();\n \n     assert_eq!(make_vec().capacity(), 4);"}]}