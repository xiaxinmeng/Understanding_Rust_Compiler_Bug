{"sha": "978ca03cb2f46e13f9f8d512e17867aa26e8432f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3OGNhMDNjYjJmNDZlMTNmOWY4ZDUxMmUxNzg2N2FhMjZlODQzMmY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-19T14:53:55Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-07-19T14:53:55Z"}, "message": "Revert \"accept naked exprs with commas in pattern arms\" due to pretty-printing failures\n\nThis reverts commit f712b2d76b1077a2241916cc3269aa1d83ce3088.\n\nIn alt arms, the parser needs to do a little lookahead to determine\nwhether it's looking at a record literal or a block.\n\nAlso there are some indentation issues in the expected source.", "tree": {"sha": "bfff59f98c3d1f55a1182fa2734d80d2231af8dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bfff59f98c3d1f55a1182fa2734d80d2231af8dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/978ca03cb2f46e13f9f8d512e17867aa26e8432f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/978ca03cb2f46e13f9f8d512e17867aa26e8432f", "html_url": "https://github.com/rust-lang/rust/commit/978ca03cb2f46e13f9f8d512e17867aa26e8432f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/978ca03cb2f46e13f9f8d512e17867aa26e8432f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00aa5f163f154585814991cb6d1b0c9eef6ecc56", "url": "https://api.github.com/repos/rust-lang/rust/commits/00aa5f163f154585814991cb6d1b0c9eef6ecc56", "html_url": "https://github.com/rust-lang/rust/commit/00aa5f163f154585814991cb6d1b0c9eef6ecc56"}], "stats": {"total": 82, "additions": 6, "deletions": 76}, "files": [{"sha": "37e8671facd329a05fae061221850614aad5ffde", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/978ca03cb2f46e13f9f8d512e17867aa26e8432f/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978ca03cb2f46e13f9f8d512e17867aa26e8432f/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=978ca03cb2f46e13f9f8d512e17867aa26e8432f", "patch": "@@ -568,13 +568,6 @@ fn view_path_id(p: @view_path) -> node_id {\n     }\n }\n \n-fn lone_block_expr(blk: blk) -> option<@ast::expr> {\n-    if blk.node.view_items.len() != 0 { ret none; }\n-    if blk.node.stmts.len() != 0 { ret none; }\n-    if blk.node.rules != default_blk { ret none; }\n-    ret blk.node.expr;\n-}\n-\n // Local Variables:\n // mode: rust\n // fill-column: 78;"}, {"sha": "9d2fb9474512800b1325af3803a77b1e2be84f3e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/978ca03cb2f46e13f9f8d512e17867aa26e8432f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978ca03cb2f46e13f9f8d512e17867aa26e8432f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=978ca03cb2f46e13f9f8d512e17867aa26e8432f", "patch": "@@ -1509,25 +1509,8 @@ class parser {\n             let pats = self.parse_pats();\n             let mut guard = none;\n             if self.eat_keyword(~\"if\") { guard = some(self.parse_expr()); }\n-            let blk = if self.token != token::FAT_ARROW {\n-                self.parse_block()\n-            } else {\n-                self.bump();\n-                if self.token == token::LBRACE {\n-                    self.parse_block()\n-                } else {\n-                    let expr = self.parse_expr();\n-                    if self.token != token::RBRACE {\n-                        self.expect(token::COMMA);\n-                    }\n-                    {node: {view_items: ~[],\n-                            stmts: ~[],\n-                            expr: some(expr),\n-                            id: self.get_id(),\n-                            rules: default_blk},\n-                     span: expr.span}\n-                }\n-            };\n+            if self.token == token::FAT_ARROW { self.bump(); }\n+            let blk = self.parse_block();\n             vec::push(arms, {pats: pats, guard: guard, body: blk});\n         }\n         let mut hi = self.span.hi;"}, {"sha": "b1730bfc587637c87bb9794fc20ee32e8c913628", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/978ca03cb2f46e13f9f8d512e17867aa26e8432f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/978ca03cb2f46e13f9f8d512e17867aa26e8432f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=978ca03cb2f46e13f9f8d512e17867aa26e8432f", "patch": "@@ -6,7 +6,7 @@ import pp::{break_offset, word, printer,\n             inconsistent, eof};\n import diagnostic;\n import ast::{required, provided};\n-import ast_util::{operator_prec, lone_block_expr};\n+import ast_util::operator_prec;\n import dvec::{dvec, extensions};\n import parse::classify::*;\n \n@@ -998,8 +998,7 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n         print_maybe_parens_discrim(s, expr);\n         space(s.s);\n         bopen(s);\n-        let len = arms.len();\n-        for arms.eachi |i, arm| {\n+        for arms.each |arm| {\n             space(s.s);\n             cbox(s, alt_indent_unit);\n             ibox(s, 0u);\n@@ -1015,19 +1014,8 @@ fn print_expr(s: ps, &&expr: @ast::expr) {\n               some(e) { word_space(s, ~\"if\"); print_expr(s, e); space(s.s); }\n               none { }\n             }\n-            word_space(s, ~\"=>\");\n-            alt lone_block_expr(arm.body) {\n-              some(expr) => {\n-                end(s); // close the ibox for the pattern\n-                print_expr(s, expr);\n-                if i < len - 1 { word_space(s, ~\",\"); }\n-                end(s); // close enclosing cbox\n-              }\n-              none => {\n-                print_possibly_embedded_block(s, arm.body, block_normal,\n-                                              alt_indent_unit);\n-              }\n-            }\n+            print_possibly_embedded_block(s, arm.body, block_normal,\n+                                          alt_indent_unit);\n         }\n         bclose_(s, expr.span, alt_indent_unit);\n       }"}, {"sha": "8504a50d5a14dd2a32a319ba6bd167eeabbf08aa", "filename": "src/test/pretty/alt-naked-expr-long.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/00aa5f163f154585814991cb6d1b0c9eef6ecc56/src%2Ftest%2Fpretty%2Falt-naked-expr-long.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00aa5f163f154585814991cb6d1b0c9eef6ecc56/src%2Ftest%2Fpretty%2Falt-naked-expr-long.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Falt-naked-expr-long.rs?ref=00aa5f163f154585814991cb6d1b0c9eef6ecc56", "patch": "@@ -1,17 +0,0 @@\n-// pretty-exact\n-\n-// actually this doesn't quite look how I want it to, but I can't\n-// get the prettyprinter to indent the long expr\n-\n-fn main() {\n-    let x = some(3);\n-    let y =\n-        alt x {\n-          some(_) =>\n-          \"some\" + \"very\" + \"very\" + \"very\" + \"very\" + \"very\" + \"very\" +\n-              \"very\" + \"very\" + \"long\" + \"string\",\n-\n-          none => \"none\"\n-        };\n-    assert y == \"some(_)\";\n-}"}, {"sha": "70099e46806e92b3f10d92308cf2ffdc3ec5fdb4", "filename": "src/test/pretty/alt-naked-expr-medium.rs", "status": "removed", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/00aa5f163f154585814991cb6d1b0c9eef6ecc56/src%2Ftest%2Fpretty%2Falt-naked-expr-medium.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00aa5f163f154585814991cb6d1b0c9eef6ecc56/src%2Ftest%2Fpretty%2Falt-naked-expr-medium.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Falt-naked-expr-medium.rs?ref=00aa5f163f154585814991cb6d1b0c9eef6ecc56", "patch": "@@ -1,10 +0,0 @@\n-// pretty-exact\n-\n-fn main() {\n-    let x = some(3);\n-    let _y =\n-        alt x {\n-          some(_) => ~[~\"some(_)\", ~\"not\", ~\"SO\", ~\"long\", ~\"string\"],\n-          none => ~[~\"none\"]\n-        };\n-}"}, {"sha": "54ed76054e46ca03edb236858b5ff69fe0de25d9", "filename": "src/test/pretty/alt-naked-expr.rs", "status": "removed", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/00aa5f163f154585814991cb6d1b0c9eef6ecc56/src%2Ftest%2Fpretty%2Falt-naked-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/00aa5f163f154585814991cb6d1b0c9eef6ecc56/src%2Ftest%2Fpretty%2Falt-naked-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Falt-naked-expr.rs?ref=00aa5f163f154585814991cb6d1b0c9eef6ecc56", "patch": "@@ -1,7 +0,0 @@\n-// pretty-exact\n-\n-fn main() {\n-    let x = some(3);\n-    let y = alt x { some(_) => \"some(_)\",  none => \"none\" };\n-    assert y == \"some(_)\";\n-}"}]}