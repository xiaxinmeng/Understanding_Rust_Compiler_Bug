{"sha": "48ec29d38e031a2b15c7768e94fa8185f3e08847", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZWMyOWQzOGUwMzFhMmIxNWM3NzY4ZTk0ZmE4MTg1ZjNlMDg4NDc=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-01-30T20:33:50Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-02-01T14:43:57Z"}, "message": "Replace --extern-public with --extern-private", "tree": {"sha": "8a56487852fc5ac7010d823d1d3f6d11cc20a52f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a56487852fc5ac7010d823d1d3f6d11cc20a52f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48ec29d38e031a2b15c7768e94fa8185f3e08847", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAlxUWy0ACgkQtAh+UQ6Y\nsWT0qw/+Lh1+A4E+2Dxe0qjlGeCELvEW6TZv4jAW/y8BolRTSl4uS1ATG/ESQ0Ke\n7zIQACMWMy+9YvhEORgGPUKEBljb+0vxYJVtAWegUlMgpzjE86tYnxhPcyfpZ8mG\neduln1NDCbrnzDkORESySdbBCXliah5JwY9YbIE6JUGZHES7/pqU4khvgmGPxKrh\nxhW1YJ6dccSWlWz0O2X5ujgJCQH4KUmPUUgJRyfgt0VCx5VxE3EuC7OTveB5YZyk\n6T7Kgx3dYWIWC9Q2QDIPPiAGb7SaD7Idq4CIa5ow+bl4E/0KIXiCKbJuLqE46Qrd\nWa88rDGi70CSjWLIm4vaozeDaU1GOwm3WxVd2m2E4mBKKRqcQWL3M7avlenFT+Lk\nHG3Ep7MrPmnakvsJ6gjZUJsPJvc8+Nk3CSTPNzAIsxFYpt2JFolrZH2C232h/y2n\nwK/1cqTIvMPCOroHhi2YFxjjeM21kGhmg7Vl0xlrn2QJ2BiGrsEXfjjvvScsTl5g\nyJRIs/+cEqGXN7HxkAUw1MkN2hQMgAq+d4h6Xm9u1dK3dDWXcUah+9Yww9JH2ovn\n7FFSUwJyqhKXqDXDw19gjo7BM0n68onXXbBPpVfOVjFg9i2TaDlnO9jzdC3w2hHA\nluaFPXz9A60+cOy7PFdO2AmyWNPlYqSdZHY1kxZpbhSxSJMmulE=\n=2MnG\n-----END PGP SIGNATURE-----", "payload": "tree 8a56487852fc5ac7010d823d1d3f6d11cc20a52f\nparent b29a21fbae8e2c2efb121d998d804a4195065be0\nauthor Aaron Hill <aa1ronham@gmail.com> 1548880430 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1549032237 -0500\n\nReplace --extern-public with --extern-private\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48ec29d38e031a2b15c7768e94fa8185f3e08847", "html_url": "https://github.com/rust-lang/rust/commit/48ec29d38e031a2b15c7768e94fa8185f3e08847", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48ec29d38e031a2b15c7768e94fa8185f3e08847/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b29a21fbae8e2c2efb121d998d804a4195065be0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b29a21fbae8e2c2efb121d998d804a4195065be0", "html_url": "https://github.com/rust-lang/rust/commit/b29a21fbae8e2c2efb121d998d804a4195065be0"}], "stats": {"total": 72, "additions": 36, "deletions": 36}, "files": [{"sha": "6b12e549c3388c5a2ec2d5f6e7064372340de8e9", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/48ec29d38e031a2b15c7768e94fa8185f3e08847/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ec29d38e031a2b15c7768e94fa8185f3e08847/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=48ec29d38e031a2b15c7768e94fa8185f3e08847", "patch": "@@ -412,9 +412,9 @@ top_level_options!(\n \n         edition: Edition [TRACKED],\n \n-        // The list of crates to consider public for\n+        // The list of crates to consider private when\n         // checking leaked private dependency types in public interfaces\n-        extern_public: Option<Vec<String>> [TRACKED],\n+        extern_private: Vec<String> [TRACKED],\n     }\n );\n \n@@ -610,7 +610,7 @@ impl Default for Options {\n             cli_forced_thinlto_off: false,\n             remap_path_prefix: Vec::new(),\n             edition: DEFAULT_EDITION,\n-            extern_public: None\n+            extern_private: Vec::new()\n         }\n     }\n }\n@@ -1736,6 +1736,12 @@ pub fn rustc_optgroups() -> Vec<RustcOptGroup> {\n             \"Specify where an external rust library is located\",\n             \"NAME=PATH\",\n         ),\n+        opt::multi_s(\n+            \"\",\n+            \"extern-private\",\n+            \"Specify where an extern rust library is located, marking it as a private dependency\",\n+            \"NAME=PATH\",\n+        ),\n         opt::opt_s(\"\", \"sysroot\", \"Override the system root\", \"PATH\"),\n         opt::multi(\"Z\", \"\", \"Set internal debugging options\", \"FLAG\"),\n         opt::opt_s(\n@@ -1936,22 +1942,7 @@ pub fn build_session_options_and_crate_config(\n         );\n     }\n \n-    if matches.opt_present(\"extern-public\") && !debugging_opts.unstable_options {\n-        early_error(\n-            ErrorOutputType::default(),\n-            \"'--extern-public' is unstable and only \\\n-            available for nightly builds of rustc.\"\n-        )\n-    }\n-\n-    let mut extern_public: Option<Vec<String>> = matches.opt_str(\"extern-public\").\n-        map(|s| s.split(',').map(|c| (*c).to_string()).collect());\n \n-    // FIXME - come up with a better way of handling this\n-    if let Some(p) = extern_public.as_mut() {\n-        p.push(\"core\".to_string());\n-        p.push(\"std\".to_string());\n-    }\n \n \n     let mut output_types = BTreeMap::new();\n@@ -2249,8 +2240,18 @@ pub fn build_session_options_and_crate_config(\n         );\n     }\n \n+    if matches.opt_present(\"extern-private\") && !debugging_opts.unstable_options {\n+        early_error(\n+            ErrorOutputType::default(),\n+            \"'--extern-private' is unstable and only \\\n+            available for nightly builds of rustc.\"\n+        )\n+    }\n+\n+    let extern_private = matches.opt_strs(\"extern-private\");\n+\n     let mut externs: BTreeMap<_, BTreeSet<_>> = BTreeMap::new();\n-    for arg in &matches.opt_strs(\"extern\") {\n+    for arg in matches.opt_strs(\"extern\").into_iter().chain(matches.opt_strs(\"extern-private\")) {\n         let mut parts = arg.splitn(2, '=');\n         let name = parts.next().unwrap_or_else(||\n             early_error(error_format, \"--extern value must not be empty\"));\n@@ -2318,7 +2319,7 @@ pub fn build_session_options_and_crate_config(\n             cli_forced_thinlto_off: disable_thinlto,\n             remap_path_prefix,\n             edition,\n-            extern_public\n+            extern_private\n         },\n         cfg,\n     )"}, {"sha": "0f3c5863833639e4999b2031917099cab90e0bf7", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/48ec29d38e031a2b15c7768e94fa8185f3e08847/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ec29d38e031a2b15c7768e94fa8185f3e08847/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=48ec29d38e031a2b15c7768e94fa8185f3e08847", "patch": "@@ -1460,7 +1460,7 @@ struct SearchInterfaceForPrivateItemsVisitor<'a, 'tcx: 'a> {\n     has_pub_restricted: bool,\n     has_old_errors: bool,\n     in_assoc_ty: bool,\n-    public_crates: Option<FxHashSet<CrateNum>>\n+    private_crates: FxHashSet<CrateNum>\n }\n \n impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n@@ -1538,13 +1538,13 @@ impl<'a, 'tcx: 'a> SearchInterfaceForPrivateItemsVisitor<'a, 'tcx> {\n     /// 1. It's contained within a public type\n     /// 2. It does not come from a crate marked as public\n     fn leaks_private_dep(&self, item_id: DefId) -> bool {\n-        // Don't do any leak checking if no public crates were specified\n-        if self.public_crates.is_none() {\n+        // Don't do any leak checking if no private crates were specified\n+        if self.private_crates.is_empty() {\n             return false\n         }\n         let ret = self.required_visibility == ty::Visibility::Public &&\n             !item_id.is_local() &&\n-            !self.public_crates.as_ref().unwrap().contains(&item_id.krate);\n+            self.private_crates.contains(&item_id.krate);\n \n \n         debug!(\"leaks_private_dep(item_id={:?})={}\", item_id, ret);\n@@ -1563,7 +1563,7 @@ struct PrivateItemsInPublicInterfacesVisitor<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     has_pub_restricted: bool,\n     old_error_set: &'a NodeSet,\n-    public_crates: Option<FxHashSet<CrateNum>>\n+    private_crates: FxHashSet<CrateNum>\n }\n \n impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n@@ -1601,7 +1601,7 @@ impl<'a, 'tcx> PrivateItemsInPublicInterfacesVisitor<'a, 'tcx> {\n             has_pub_restricted: self.has_pub_restricted,\n             has_old_errors,\n             in_assoc_ty: false,\n-            public_crates: self.public_crates.clone()\n+            private_crates: self.private_crates.clone()\n         }\n     }\n \n@@ -1762,10 +1762,10 @@ fn privacy_access_levels<'tcx>(\n         queries::check_mod_privacy::ensure(tcx, tcx.hir().local_def_id(module));\n     }\n \n-    let public_crates: Option<FxHashSet<CrateNum>> = tcx.sess.opts.extern_public.as_ref()\n-        .map(|s| s.iter().flat_map(|c| {\n+    let private_crates: FxHashSet<CrateNum> = tcx.sess.opts.extern_private.iter()\n+        .flat_map(|c| {\n             tcx.crates().iter().find(|&&krate| &tcx.crate_name(krate) == c).cloned()\n-        }).collect());\n+        }).collect();\n \n \n     // Build up a set of all exported items in the AST. This is a set of all\n@@ -1810,7 +1810,7 @@ fn privacy_access_levels<'tcx>(\n             tcx,\n             has_pub_restricted,\n             old_error_set: &visitor.old_error_set,\n-            public_crates\n+            private_crates\n         };\n         krate.visit_all_item_likes(&mut DeepVisitor::new(&mut visitor));\n     }"}, {"sha": "9c60284f66c48a3cd82e2b76fc5bfca9803c5f1f", "filename": "src/test/ui/privacy/pub-priv-dep/pub-priv1.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/48ec29d38e031a2b15c7768e94fa8185f3e08847/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ec29d38e031a2b15c7768e94fa8185f3e08847/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.rs?ref=48ec29d38e031a2b15c7768e94fa8185f3e08847", "patch": "@@ -1,7 +1,6 @@\n  // aux-build:priv_dep.rs\n  // aux-build:pub_dep.rs\n- // compile-flags: --extern-public=pub_dep\n-#![feature(public_private_dependencies)]\n+ // compile-flags: --extern-private priv_dep\n #![deny(exported_private_dependencies)]\n \n // This crate is a private dependency"}, {"sha": "7c701035d287798ab9576d5331d9781c9b5df7a6", "filename": "src/test/ui/privacy/pub-priv-dep/pub-priv1.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/48ec29d38e031a2b15c7768e94fa8185f3e08847/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48ec29d38e031a2b15c7768e94fa8185f3e08847/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fpub-priv-dep%2Fpub-priv1.stderr?ref=48ec29d38e031a2b15c7768e94fa8185f3e08847", "patch": "@@ -1,19 +1,19 @@\n error: type `priv_dep::OtherType` from private dependency 'priv_dep' in public interface\n-  --> $DIR/pub-priv1.rs:22:5\n+  --> $DIR/pub-priv1.rs:21:5\n    |\n LL |     pub field: OtherType,\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/pub-priv1.rs:5:9\n+  --> $DIR/pub-priv1.rs:4:9\n    |\n LL | #![deny(exported_private_dependencies)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!\n    = note: for more information, see issue #44663 <https://github.com/rust-lang/rust/issues/44663>\n \n error: type `priv_dep::OtherType` from private dependency 'priv_dep' in public interface\n-  --> $DIR/pub-priv1.rs:30:5\n+  --> $DIR/pub-priv1.rs:29:5\n    |\n LL |     pub fn pub_fn(param: OtherType) {}\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -22,7 +22,7 @@ LL |     pub fn pub_fn(param: OtherType) {}\n    = note: for more information, see issue #44663 <https://github.com/rust-lang/rust/issues/44663>\n \n error: trait `priv_dep::OtherTrait` from private dependency 'priv_dep' in public interface\n-  --> $DIR/pub-priv1.rs:37:1\n+  --> $DIR/pub-priv1.rs:36:1\n    |\n LL | / pub trait MyPubTrait {\n LL | |     type Foo: OtherTrait;"}]}