{"sha": "bb946f78f66f2338228d36a852a7dd96f2f5a290", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiOTQ2Zjc4ZjY2ZjIzMzgyMjhkMzZhODUyYTdkZDk2ZjJmNWEyOTA=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-13T23:20:43Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-13T23:20:43Z"}, "message": "fix: fix expansion order for fn-like macros and attributes in token descending", "tree": {"sha": "2f96a04c516f1a3a8d8b04249b79c252c7ce68a8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f96a04c516f1a3a8d8b04249b79c252c7ce68a8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb946f78f66f2338228d36a852a7dd96f2f5a290", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb946f78f66f2338228d36a852a7dd96f2f5a290", "html_url": "https://github.com/rust-lang/rust/commit/bb946f78f66f2338228d36a852a7dd96f2f5a290", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb946f78f66f2338228d36a852a7dd96f2f5a290/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eecd84771d4aa5f7d9ec841b6cfd6092882e8c1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eecd84771d4aa5f7d9ec841b6cfd6092882e8c1", "html_url": "https://github.com/rust-lang/rust/commit/6eecd84771d4aa5f7d9ec841b6cfd6092882e8c1"}], "stats": {"total": 132, "additions": 77, "deletions": 55}, "files": [{"sha": "aaa9e308f14714dc498e6502d0ea53185f9c9c0a", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 52, "deletions": 55, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/bb946f78f66f2338228d36a852a7dd96f2f5a290/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb946f78f66f2338228d36a852a7dd96f2f5a290/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=bb946f78f66f2338228d36a852a7dd96f2f5a290", "patch": "@@ -498,68 +498,65 @@ impl<'db> SemanticsImpl<'db> {\n         // otherwise push the remapped tokens back into the queue as they can potentially be remapped again.\n         while let Some(token) = queue.pop() {\n             self.db.unwind_if_cancelled();\n-\n             let was_not_remapped = (|| {\n-                for node in token.value.ancestors() {\n-                    if let Some(macro_call) = ast::MacroCall::cast(node.clone()) {\n-                        let tt = match macro_call.token_tree() {\n-                            Some(tt) => tt,\n-                            None => continue,\n-                        };\n-                        let l_delim = match tt.left_delimiter_token() {\n-                            Some(it) => it.text_range().end(),\n-                            None => tt.syntax().text_range().start(),\n-                        };\n-                        let r_delim = match tt.right_delimiter_token() {\n-                            Some(it) => it.text_range().start(),\n-                            None => tt.syntax().text_range().end(),\n-                        };\n-                        if !TextRange::new(l_delim, r_delim)\n-                            .contains_range(token.value.text_range())\n-                        {\n-                            continue;\n-                        }\n-                        let file_id = match sa.expand(self.db, token.with_value(&macro_call)) {\n-                            Some(file_id) => file_id,\n-                            None => continue,\n-                        };\n-                        let tokens = cache\n-                            .entry(file_id)\n-                            .or_insert_with(|| file_id.expansion_info(self.db.upcast()))\n-                            .as_ref()?\n-                            .map_token_down(self.db.upcast(), None, token.as_ref())?;\n-\n-                        let len = queue.len();\n-                        queue.extend(tokens.inspect(|token| {\n-                            if let Some(parent) = token.value.parent() {\n-                                self.cache(find_root(&parent), token.file_id);\n-                            }\n-                        }));\n-                        return (queue.len() != len).then(|| ());\n-                    } else if let Some(item) = ast::Item::cast(node.clone()) {\n-                        if let Some(call_id) = self\n-                            .with_ctx(|ctx| ctx.item_to_macro_call(token.with_value(item.clone())))\n-                        {\n-                            let file_id = call_id.as_file();\n-                            let tokens = cache\n-                                .entry(file_id)\n-                                .or_insert_with(|| file_id.expansion_info(self.db.upcast()))\n-                                .as_ref()?\n-                                .map_token_down(self.db.upcast(), Some(item), token.as_ref())?;\n-\n-                            let len = queue.len();\n-                            queue.extend(tokens.inspect(|token| {\n-                                if let Some(parent) = token.value.parent() {\n-                                    self.cache(find_root(&parent), token.file_id);\n-                                }\n-                            }));\n-                            return (queue.len() != len).then(|| ());\n+                if let Some((call_id, item)) = token\n+                    .value\n+                    .ancestors()\n+                    .filter_map(ast::Item::cast)\n+                    .filter_map(|item| {\n+                        self.with_ctx(|ctx| ctx.item_to_macro_call(token.with_value(item.clone())))\n+                            .zip(Some(item))\n+                    })\n+                    .last()\n+                {\n+                    let file_id = call_id.as_file();\n+                    let tokens = cache\n+                        .entry(file_id)\n+                        .or_insert_with(|| file_id.expansion_info(self.db.upcast()))\n+                        .as_ref()?\n+                        .map_token_down(self.db.upcast(), Some(item), token.as_ref())?;\n+\n+                    let len = queue.len();\n+                    queue.extend(tokens.inspect(|token| {\n+                        if let Some(parent) = token.value.parent() {\n+                            self.cache(find_root(&parent), token.file_id);\n                         }\n+                    }));\n+                    return (queue.len() != len).then(|| ());\n+                }\n+\n+                if let Some(macro_call) = token.value.ancestors().find_map(ast::MacroCall::cast) {\n+                    let tt = macro_call.token_tree()?;\n+                    let l_delim = match tt.left_delimiter_token() {\n+                        Some(it) => it.text_range().end(),\n+                        None => tt.syntax().text_range().start(),\n+                    };\n+                    let r_delim = match tt.right_delimiter_token() {\n+                        Some(it) => it.text_range().start(),\n+                        None => tt.syntax().text_range().end(),\n+                    };\n+                    if !TextRange::new(l_delim, r_delim).contains_range(token.value.text_range()) {\n+                        return None;\n                     }\n+                    let file_id = sa.expand(self.db, token.with_value(&macro_call))?;\n+                    let tokens = cache\n+                        .entry(file_id)\n+                        .or_insert_with(|| file_id.expansion_info(self.db.upcast()))\n+                        .as_ref()?\n+                        .map_token_down(self.db.upcast(), None, token.as_ref())?;\n+\n+                    let len = queue.len();\n+                    queue.extend(tokens.inspect(|token| {\n+                        if let Some(parent) = token.value.parent() {\n+                            self.cache(find_root(&parent), token.file_id);\n+                        }\n+                    }));\n+                    return (queue.len() != len).then(|| ());\n                 }\n                 None\n             })()\n             .is_none();\n+\n             if was_not_remapped {\n                 res.push(token.value)\n             }"}, {"sha": "b7f7e35e2fdb7814fd39dd0413c5e5f0595d2174", "filename": "crates/ide/src/fixture.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb946f78f66f2338228d36a852a7dd96f2f5a290/crates%2Fide%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb946f78f66f2338228d36a852a7dd96f2f5a290/crates%2Fide%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ffixture.rs?ref=bb946f78f66f2338228d36a852a7dd96f2f5a290", "patch": "@@ -1,4 +1,5 @@\n //! Utilities for creating `Analysis` instances for tests.\n+use hir::db::DefDatabase;\n use ide_db::base_db::fixture::ChangeFixture;\n use test_utils::{extract_annotations, RangeOrOffset};\n \n@@ -44,6 +45,7 @@ pub(crate) fn range_or_position(ra_fixture: &str) -> (Analysis, FileId, RangeOrO\n /// Creates analysis from a multi-file fixture, returns positions marked with $0.\n pub(crate) fn annotations(ra_fixture: &str) -> (Analysis, FilePosition, Vec<(FileRange, String)>) {\n     let mut host = AnalysisHost::default();\n+    host.db.set_enable_proc_attr_macros(true);\n     let change_fixture = ChangeFixture::parse(ra_fixture);\n     host.db.apply_change(change_fixture.change);\n     let (file_id, range_or_offset) = change_fixture.file_position.expect(\"expected a marker ($0)\");"}, {"sha": "645b405e5e851836a59540064ebca93054bf6a48", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/bb946f78f66f2338228d36a852a7dd96f2f5a290/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb946f78f66f2338228d36a852a7dd96f2f5a290/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=bb946f78f66f2338228d36a852a7dd96f2f5a290", "patch": "@@ -220,6 +220,29 @@ mod tests {\n         assert!(navs.is_empty(), \"didn't expect this to resolve anywhere: {:?}\", navs)\n     }\n \n+    #[test]\n+    fn goto_def_in_mac_call_in_attr_invoc() {\n+        check(\n+            r#\"\n+//- proc_macros: identity\n+pub struct Struct {\n+        // ^^^^^^\n+    field: i32,\n+}\n+\n+macro_rules! identity {\n+    ($($tt:tt)*) => {$($tt)*};\n+}\n+\n+#[proc_macros::identity]\n+fn function() {\n+    identity!(Struct$0 { field: 0 });\n+}\n+\n+\"#,\n+        )\n+    }\n+\n     #[test]\n     fn goto_def_for_extern_crate() {\n         check("}]}