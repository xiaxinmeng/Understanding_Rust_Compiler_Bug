{"sha": "3f6077ffe75a31dd53e77719d3369605b6f8b7a5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmNjA3N2ZmZTc1YTMxZGQ1M2U3NzcxOWQzMzY5NjA1YjZmOGI3YTU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-12-17T13:30:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-12-17T13:30:09Z"}, "message": "Merge #6915\n\n6915: Add `AttrDefId::krate` r=jonas-schievink a=jonas-schievink\n\nAccess to the containing crate will be needed to handle `cfg_attr`.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "bad018709227372d66c7caec82f6bef5f5b1c893", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bad018709227372d66c7caec82f6bef5f5b1c893"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f6077ffe75a31dd53e77719d3369605b6f8b7a5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf211hCRBK7hj4Ov3rIwAAdHIIAEXrVChb4cAQDcFvwShVQCfF\nO2+r3axC0h9x16GfYBBFzjExvuQVAJM9pTrVRkizzSPR06bSJvgDkMi52+78YaAW\no0CGmfFjIete3J4DO1nzlKRjczLqY0shhE7gvr62MDNzXNRIbI0ErV5gdB+e3vFd\nuhDpKLN31d3Wfircmvfyl/Yn9E8hSJ3HHNszX6ftY5sDISsSsPg0xiw7ce+rRb6W\nxK7qnp2rzOltnGgR/aQIQH8RIpl5I5mFctYF2MUy/OJX/c3W3jyw6ksrdEdjQn7/\nPhx/a2yWstdxtv0wEvAuhdzHnQy0VFOlyN6oTg5icT/QLwef729ZyEM//42vNKE=\n=NXPh\n-----END PGP SIGNATURE-----\n", "payload": "tree bad018709227372d66c7caec82f6bef5f5b1c893\nparent ce8ec2863887618dc40c47c075a83d7704452b0b\nparent eaeabbb815b30b9169f06eaf30d8225055662196\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1608211809 +0000\ncommitter GitHub <noreply@github.com> 1608211809 +0000\n\nMerge #6915\n\n6915: Add `AttrDefId::krate` r=jonas-schievink a=jonas-schievink\n\nAccess to the containing crate will be needed to handle `cfg_attr`.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f6077ffe75a31dd53e77719d3369605b6f8b7a5", "html_url": "https://github.com/rust-lang/rust/commit/3f6077ffe75a31dd53e77719d3369605b6f8b7a5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f6077ffe75a31dd53e77719d3369605b6f8b7a5/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ce8ec2863887618dc40c47c075a83d7704452b0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ce8ec2863887618dc40c47c075a83d7704452b0b", "html_url": "https://github.com/rust-lang/rust/commit/ce8ec2863887618dc40c47c075a83d7704452b0b"}, {"sha": "eaeabbb815b30b9169f06eaf30d8225055662196", "url": "https://api.github.com/repos/rust-lang/rust/commits/eaeabbb815b30b9169f06eaf30d8225055662196", "html_url": "https://github.com/rust-lang/rust/commit/eaeabbb815b30b9169f06eaf30d8225055662196"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "ba09a9126bffb461b29ec443ddd7bd1a8161d9aa", "filename": "crates/hir_def/src/lib.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3f6077ffe75a31dd53e77719d3369605b6f8b7a5/crates%2Fhir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f6077ffe75a31dd53e77719d3369605b6f8b7a5/crates%2Fhir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Flib.rs?ref=3f6077ffe75a31dd53e77719d3369605b6f8b7a5", "patch": "@@ -425,6 +425,16 @@ impl HasModule for AdtId {\n     }\n }\n \n+impl HasModule for VariantId {\n+    fn module(&self, db: &dyn db::DefDatabase) -> ModuleId {\n+        match self {\n+            VariantId::EnumVariantId(it) => it.parent.lookup(db).container.module(db),\n+            VariantId::StructId(it) => it.lookup(db).container.module(db),\n+            VariantId::UnionId(it) => it.lookup(db).container.module(db),\n+        }\n+    }\n+}\n+\n impl HasModule for DefWithBodyId {\n     fn module(&self, db: &dyn db::DefDatabase) -> ModuleId {\n         match self {\n@@ -465,6 +475,26 @@ impl HasModule for StaticLoc {\n     }\n }\n \n+impl AttrDefId {\n+    pub fn krate(&self, db: &dyn db::DefDatabase) -> CrateId {\n+        match self {\n+            AttrDefId::ModuleId(it) => it.krate,\n+            AttrDefId::FieldId(it) => it.parent.module(db).krate,\n+            AttrDefId::AdtId(it) => it.module(db).krate,\n+            AttrDefId::FunctionId(it) => it.lookup(db).module(db).krate,\n+            AttrDefId::EnumVariantId(it) => it.parent.lookup(db).container.module(db).krate,\n+            AttrDefId::StaticId(it) => it.lookup(db).module(db).krate,\n+            AttrDefId::ConstId(it) => it.lookup(db).module(db).krate,\n+            AttrDefId::TraitId(it) => it.lookup(db).container.module(db).krate,\n+            AttrDefId::TypeAliasId(it) => it.lookup(db).module(db).krate,\n+            AttrDefId::ImplId(it) => it.lookup(db).container.module(db).krate,\n+            // FIXME: `MacroDefId` should store the defining module, then this can implement\n+            // `HasModule`\n+            AttrDefId::MacroDefId(it) => it.krate,\n+        }\n+    }\n+}\n+\n /// A helper trait for converting to MacroCallId\n pub trait AsMacroCall {\n     fn as_call_id("}]}