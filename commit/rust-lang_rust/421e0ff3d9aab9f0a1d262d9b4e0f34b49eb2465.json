{"sha": "421e0ff3d9aab9f0a1d262d9b4e0f34b49eb2465", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyMWUwZmYzZDlhYWI5ZjBhMWQyNjJkOWI0ZTBmMzRiNDllYjI0NjU=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-08-14T12:50:30Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-08-14T12:50:30Z"}, "message": "BTreeMap: refactor splitpoint and move testing over to unit test", "tree": {"sha": "69c3757116ce428f24d2d34fc488f51477e981f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69c3757116ce428f24d2d34fc488f51477e981f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/421e0ff3d9aab9f0a1d262d9b4e0f34b49eb2465", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/421e0ff3d9aab9f0a1d262d9b4e0f34b49eb2465", "html_url": "https://github.com/rust-lang/rust/commit/421e0ff3d9aab9f0a1d262d9b4e0f34b49eb2465", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/421e0ff3d9aab9f0a1d262d9b4e0f34b49eb2465/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43bec40138bab10c08ac916bff2f2f81b2b70669", "url": "https://api.github.com/repos/rust-lang/rust/commits/43bec40138bab10c08ac916bff2f2f81b2b70669", "html_url": "https://github.com/rust-lang/rust/commit/43bec40138bab10c08ac916bff2f2f81b2b70669"}], "stats": {"total": 68, "additions": 37, "deletions": 31}, "files": [{"sha": "5a6a71c5fb687a0725fad418f737f499eb2a0c90", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 11, "deletions": 31, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/421e0ff3d9aab9f0a1d262d9b4e0f34b49eb2465/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421e0ff3d9aab9f0a1d262d9b4e0f34b49eb2465/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=421e0ff3d9aab9f0a1d262d9b4e0f34b49eb2465", "patch": "@@ -43,6 +43,9 @@ use crate::boxed::Box;\n const B: usize = 6;\n pub const MIN_LEN: usize = B - 1;\n pub const CAPACITY: usize = 2 * B - 1;\n+const KV_IDX_CENTER: usize = B - 1;\n+const EDGE_IDX_LEFT_OF_CENTER: usize = B - 1;\n+const EDGE_IDX_RIGHT_OF_CENTER: usize = B;\n \n /// The underlying representation of leaf nodes.\n #[repr(C)]\n@@ -834,38 +837,12 @@ enum InsertionPlace {\n fn splitpoint(edge_idx: usize) -> (usize, InsertionPlace) {\n     debug_assert!(edge_idx <= CAPACITY);\n     // Rust issue #74834 tries to explain these symmetric rules.\n-    let middle_kv_idx;\n-    let insertion;\n-    if edge_idx <= B - 2 {\n-        middle_kv_idx = B - 2;\n-        insertion = InsertionPlace::Left(edge_idx);\n-    } else if edge_idx == B - 1 {\n-        middle_kv_idx = B - 1;\n-        insertion = InsertionPlace::Left(edge_idx);\n-    } else if edge_idx == B {\n-        middle_kv_idx = B - 1;\n-        insertion = InsertionPlace::Right(0);\n-    } else {\n-        middle_kv_idx = B;\n-        let new_edge_idx = edge_idx - (B + 1);\n-        insertion = InsertionPlace::Right(new_edge_idx);\n-    }\n-    let mut left_len = middle_kv_idx;\n-    let mut right_len = CAPACITY - middle_kv_idx - 1;\n-    match insertion {\n-        InsertionPlace::Left(edge_idx) => {\n-            debug_assert!(edge_idx <= left_len);\n-            left_len += 1;\n-        }\n-        InsertionPlace::Right(edge_idx) => {\n-            debug_assert!(edge_idx <= right_len);\n-            right_len += 1;\n-        }\n+    match edge_idx {\n+        0..EDGE_IDX_LEFT_OF_CENTER => (KV_IDX_CENTER - 1, InsertionPlace::Left(edge_idx)),\n+        EDGE_IDX_LEFT_OF_CENTER => (KV_IDX_CENTER, InsertionPlace::Left(edge_idx)),\n+        EDGE_IDX_RIGHT_OF_CENTER => (KV_IDX_CENTER, InsertionPlace::Right(0)),\n+        _ => (KV_IDX_CENTER + 1, InsertionPlace::Right(edge_idx - (KV_IDX_CENTER + 1 + 1))),\n     }\n-    debug_assert!(left_len >= MIN_LEN);\n-    debug_assert!(right_len >= MIN_LEN);\n-    debug_assert!(left_len + right_len == CAPACITY);\n-    (middle_kv_idx, insertion)\n }\n \n impl<'a, K, V, NodeType> Handle<NodeRef<marker::Mut<'a>, K, V, NodeType>, marker::Edge> {\n@@ -1594,3 +1571,6 @@ unsafe fn slice_remove<T>(slice: &mut [T], idx: usize) -> T {\n         ret\n     }\n }\n+\n+#[cfg(test)]\n+mod tests;"}, {"sha": "e2416974ddca39c1e9410bec7f1d398930a7f51a", "filename": "library/alloc/src/collections/btree/node/tests.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/421e0ff3d9aab9f0a1d262d9b4e0f34b49eb2465/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421e0ff3d9aab9f0a1d262d9b4e0f34b49eb2465/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs?ref=421e0ff3d9aab9f0a1d262d9b4e0f34b49eb2465", "patch": "@@ -0,0 +1,25 @@\n+use super::*;\n+\n+#[test]\n+fn test_splitpoint() {\n+    for idx in 0..=CAPACITY {\n+        let (middle_kv_idx, insertion) = splitpoint(idx);\n+\n+        // Simulate performing the split:\n+        let mut left_len = middle_kv_idx;\n+        let mut right_len = CAPACITY - middle_kv_idx - 1;\n+        match insertion {\n+            InsertionPlace::Left(edge_idx) => {\n+                assert!(edge_idx <= left_len);\n+                left_len += 1;\n+            }\n+            InsertionPlace::Right(edge_idx) => {\n+                assert!(edge_idx <= right_len);\n+                right_len += 1;\n+            }\n+        }\n+        assert!(left_len >= MIN_LEN);\n+        assert!(right_len >= MIN_LEN);\n+        assert!(left_len + right_len == CAPACITY);\n+    }\n+}"}, {"sha": "75a2c6be41c56484189bb3f0a93a967481b0eef4", "filename": "library/alloc/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/421e0ff3d9aab9f0a1d262d9b4e0f34b49eb2465/library%2Falloc%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/421e0ff3d9aab9f0a1d262d9b4e0f34b49eb2465/library%2Falloc%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Flib.rs?ref=421e0ff3d9aab9f0a1d262d9b4e0f34b49eb2465", "patch": "@@ -93,6 +93,7 @@\n #![feature(container_error_extra)]\n #![feature(dropck_eyepatch)]\n #![feature(exact_size_is_empty)]\n+#![feature(exclusive_range_pattern)]\n #![feature(extend_one)]\n #![feature(fmt_internals)]\n #![feature(fn_traits)]"}]}