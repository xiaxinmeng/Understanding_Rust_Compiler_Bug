{"sha": "da76b4d4e112bb9b81072a027d84ca57b5173129", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhNzZiNGQ0ZTExMmJiOWI4MTA3MmEwMjdkODRjYTU3YjUxNzMxMjk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-09-26T17:55:54Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-10-15T15:42:07Z"}, "message": "convert `UniverseIndex` into a `newtype_index!`", "tree": {"sha": "292e4b0c92f41eb086d996365b3a2547a591ffcf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/292e4b0c92f41eb086d996365b3a2547a591ffcf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da76b4d4e112bb9b81072a027d84ca57b5173129", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da76b4d4e112bb9b81072a027d84ca57b5173129", "html_url": "https://github.com/rust-lang/rust/commit/da76b4d4e112bb9b81072a027d84ca57b5173129", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da76b4d4e112bb9b81072a027d84ca57b5173129/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "460915be73a95c0cc3c1bcf74059bee9a7e0199a", "url": "https://api.github.com/repos/rust-lang/rust/commits/460915be73a95c0cc3c1bcf74059bee9a7e0199a", "html_url": "https://github.com/rust-lang/rust/commit/460915be73a95c0cc3c1bcf74059bee9a7e0199a"}], "stats": {"total": 45, "additions": 7, "deletions": 38}, "files": [{"sha": "853b49098b9c8d922a9b2eff7cd0492fa18417a3", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 38, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/da76b4d4e112bb9b81072a027d84ca57b5173129/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da76b4d4e112bb9b81072a027d84ca57b5173129/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=da76b4d4e112bb9b81072a027d84ca57b5173129", "patch": "@@ -57,6 +57,7 @@ use syntax::symbol::{keywords, Symbol, LocalInternedString, InternedString};\n use syntax_pos::{DUMMY_SP, Span};\n \n use smallvec;\n+use rustc_data_structures::indexed_vec::Idx;\n use rustc_data_structures::stable_hasher::{StableHasher, StableHasherResult,\n                                            HashStable};\n \n@@ -1488,28 +1489,16 @@ impl<'tcx> InstantiatedPredicates<'tcx> {\n /// declared, but a type name in a non-zero universe is a placeholder\n /// type -- an idealized representative of \"types in general\" that we\n /// use for checking generic functions.\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, RustcEncodable, RustcDecodable)]\n-pub struct UniverseIndex { private: u32 }\n+newtype_index! {\n+    pub struct UniverseIndex {\n+        DEBUG_FORMAT = \"U{}\",\n+    }\n+}\n \n impl_stable_hash_for!(struct UniverseIndex { private });\n \n impl UniverseIndex {\n-    /// The root universe, where things that the user defined are\n-    /// visible.\n-    pub const ROOT: Self = UniverseIndex { private: 0 };\n-\n-    /// The \"max universe\" -- this isn't really a valid universe, but\n-    /// it's useful sometimes as a \"starting value\" when you are\n-    /// taking the minimum of a (non-empty!) set of universes.\n-    pub const MAX: Self = UniverseIndex { private: ::std::u32::MAX };\n-\n-    /// Creates a universe index from the given integer.  Not to be\n-    /// used lightly lest you pick a bad value. But sometimes we\n-    /// convert universe indices into integers and back for various\n-    /// reasons.\n-    pub fn from_u32(index: u32) -> Self {\n-        UniverseIndex { private: index }\n-    }\n+    pub const ROOT: UniverseIndex = UniverseIndex::from_u32_const(0);\n \n     /// A \"superuniverse\" corresponds to being inside a `forall` quantifier.\n     /// So, for example, suppose we have this type in universe `U`:\n@@ -1530,26 +1519,6 @@ impl UniverseIndex {\n     pub fn is_subset_of(self, other: UniverseIndex) -> bool {\n         self.private <= other.private\n     }\n-\n-    pub fn as_u32(&self) -> u32 {\n-        self.private\n-    }\n-\n-    pub fn as_usize(&self) -> usize {\n-        self.private as usize\n-    }\n-}\n-\n-impl fmt::Debug for UniverseIndex {\n-    fn fmt(&self, fmt: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(fmt, \"U{}\", self.as_u32())\n-    }\n-}\n-\n-impl From<u32> for UniverseIndex {\n-    fn from(index: u32) -> Self {\n-        UniverseIndex::from_u32(index)\n-    }\n }\n \n /// The \"placeholder index\" fully defines a placeholder region."}]}