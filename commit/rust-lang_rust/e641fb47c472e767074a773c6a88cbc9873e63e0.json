{"sha": "e641fb47c472e767074a773c6a88cbc9873e63e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NDFmYjQ3YzQ3MmU3NjcwNzRhNzczYzZhODhjYmM5ODczZTYzZTA=", "commit": {"author": {"name": "Brent Kerby", "email": "blkerby@gmail.com", "date": "2019-05-22T03:52:21Z"}, "committer": {"name": "Brent Kerby", "email": "blkerby@gmail.com", "date": "2019-05-22T03:52:21Z"}, "message": "Simplify RefCell minimum_spanning_tree example", "tree": {"sha": "c2b79292e469f987f622a491f8322902acf14a8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c2b79292e469f987f622a491f8322902acf14a8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e641fb47c472e767074a773c6a88cbc9873e63e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e641fb47c472e767074a773c6a88cbc9873e63e0", "html_url": "https://github.com/rust-lang/rust/commit/e641fb47c472e767074a773c6a88cbc9873e63e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e641fb47c472e767074a773c6a88cbc9873e63e0/comments", "author": {"login": "blkerby", "id": 17501370, "node_id": "MDQ6VXNlcjE3NTAxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/17501370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blkerby", "html_url": "https://github.com/blkerby", "followers_url": "https://api.github.com/users/blkerby/followers", "following_url": "https://api.github.com/users/blkerby/following{/other_user}", "gists_url": "https://api.github.com/users/blkerby/gists{/gist_id}", "starred_url": "https://api.github.com/users/blkerby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blkerby/subscriptions", "organizations_url": "https://api.github.com/users/blkerby/orgs", "repos_url": "https://api.github.com/users/blkerby/repos", "events_url": "https://api.github.com/users/blkerby/events{/privacy}", "received_events_url": "https://api.github.com/users/blkerby/received_events", "type": "User", "site_admin": false}, "committer": {"login": "blkerby", "id": 17501370, "node_id": "MDQ6VXNlcjE3NTAxMzcw", "avatar_url": "https://avatars.githubusercontent.com/u/17501370?v=4", "gravatar_id": "", "url": "https://api.github.com/users/blkerby", "html_url": "https://github.com/blkerby", "followers_url": "https://api.github.com/users/blkerby/followers", "following_url": "https://api.github.com/users/blkerby/following{/other_user}", "gists_url": "https://api.github.com/users/blkerby/gists{/gist_id}", "starred_url": "https://api.github.com/users/blkerby/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/blkerby/subscriptions", "organizations_url": "https://api.github.com/users/blkerby/orgs", "repos_url": "https://api.github.com/users/blkerby/repos", "events_url": "https://api.github.com/users/blkerby/events{/privacy}", "received_events_url": "https://api.github.com/users/blkerby/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "119bbc2056a60e8557d1e5f2e0a7ab46d479bcaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/119bbc2056a60e8557d1e5f2e0a7ab46d479bcaf", "html_url": "https://github.com/rust-lang/rust/commit/119bbc2056a60e8557d1e5f2e0a7ab46d479bcaf"}], "stats": {"total": 46, "additions": 22, "deletions": 24}, "files": [{"sha": "9672cf4ffed36860db66de3fac8a5c2d5768ceeb", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 22, "deletions": 24, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e641fb47c472e767074a773c6a88cbc9873e63e0/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e641fb47c472e767074a773c6a88cbc9873e63e0/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=e641fb47c472e767074a773c6a88cbc9873e63e0", "patch": "@@ -67,16 +67,26 @@\n //! mutability:\n //!\n //! ```\n+//! use std::cell::{RefCell, RefMut};\n //! use std::collections::HashMap;\n-//! use std::cell::RefCell;\n //! use std::rc::Rc;\n //!\n //! fn main() {\n //!     let shared_map: Rc<RefCell<_>> = Rc::new(RefCell::new(HashMap::new()));\n-//!     shared_map.borrow_mut().insert(\"africa\", 92388);\n-//!     shared_map.borrow_mut().insert(\"kyoto\", 11837);\n-//!     shared_map.borrow_mut().insert(\"piccadilly\", 11826);\n-//!     shared_map.borrow_mut().insert(\"marbles\", 38);\n+//!     // Create a new block to limit the scope of the dynamic borrow\n+//!     {\n+//!         let mut map: RefMut<_> = shared_map.borrow_mut();\n+//!         map.insert(\"africa\", 92388);\n+//!         map.insert(\"kyoto\", 11837);\n+//!         map.insert(\"piccadilly\", 11826);\n+//!         map.insert(\"marbles\", 38);\n+//!     }\n+//!\n+//!     // Note that if we had not let the previous borrow of the cache fall out\n+//!     // of scope then the subsequent borrow would cause a dynamic thread panic.\n+//!     // This is the major hazard of using `RefCell`.\n+//!     let total: i32 = shared_map.borrow().values().sum();\n+//!     println!(\"{}\", total);\n //! }\n //! ```\n //!\n@@ -102,27 +112,15 @@\n //!\n //! impl Graph {\n //!     fn minimum_spanning_tree(&self) -> Vec<(i32, i32)> {\n-//!         // Create a new scope to contain the lifetime of the\n-//!         // dynamic borrow\n-//!         {\n-//!             // Take a reference to the inside of cache cell\n-//!             let mut cache = self.span_tree_cache.borrow_mut();\n-//!             if cache.is_some() {\n-//!                 return cache.as_ref().unwrap().clone();\n-//!             }\n-//!\n-//!             let span_tree = self.calc_span_tree();\n-//!             *cache = Some(span_tree);\n-//!         }\n+//!         self.span_tree_cache.borrow_mut()\n+//!             .get_or_insert_with(|| self.calc_span_tree())\n+//!             .clone()\n+//!     }\n //!\n-//!         // Recursive call to return the just-cached value.\n-//!         // Note that if we had not let the previous borrow\n-//!         // of the cache fall out of scope then the subsequent\n-//!         // recursive borrow would cause a dynamic thread panic.\n-//!         // This is the major hazard of using `RefCell`.\n-//!         self.minimum_spanning_tree()\n+//!     fn calc_span_tree(&self) -> Vec<(i32, i32)> {\n+//!         // Expensive computation goes here\n+//!         vec![]\n //!     }\n-//! #   fn calc_span_tree(&self) -> Vec<(i32, i32)> { vec![] }\n //! }\n //! ```\n //!"}]}