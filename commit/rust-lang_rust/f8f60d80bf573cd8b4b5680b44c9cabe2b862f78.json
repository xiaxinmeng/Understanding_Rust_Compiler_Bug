{"sha": "f8f60d80bf573cd8b4b5680b44c9cabe2b862f78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4ZjYwZDgwYmY1NzNjZDhiNGI1NjgwYjQ0YzljYWJlMmI4NjJmNzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-24T14:11:59Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-24T14:11:59Z"}, "message": "auto merge of #12998 : huonw/rust/log_syntax, r=alexcrichton\n\nsyntax: allow `trace_macros!` and `log_syntax!` in item position.\r\n\r\nPreviously\r\n\r\n    trace_macros!(true)\r\n    fn main() {}\r\n\r\nwould complain about `trace_macros` being an expression macro in item\r\nposition. This is a pointless limitation, because the macro is purely\r\ncompile-time, with no runtime effect. (And similarly for log_syntax.)\r\n\r\nThis also changes the behaviour of `trace_macros!` very slightly, it\r\nused to be equivalent to\r\n\r\n    macro_rules! trace_macros {\r\n        (true $($_x: tt)*) => { true };\r\n        (false $($_x: tt)*) => { false }\r\n    }\r\n\r\nI.e. you could invoke it with arbitrary trailing arguments, which were\r\nignored. It is changed to accept only exactly `true` or `false` (with no\r\ntrailing arguments) and expands to `()`.", "tree": {"sha": "6273a9a825d6622409c5766c5d70e452c2dd5c58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6273a9a825d6622409c5766c5d70e452c2dd5c58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8f60d80bf573cd8b4b5680b44c9cabe2b862f78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8f60d80bf573cd8b4b5680b44c9cabe2b862f78", "html_url": "https://github.com/rust-lang/rust/commit/f8f60d80bf573cd8b4b5680b44c9cabe2b862f78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8f60d80bf573cd8b4b5680b44c9cabe2b862f78/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11d9483d5881e5ab6963e5ddab2f2e9b91f045c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/11d9483d5881e5ab6963e5ddab2f2e9b91f045c8", "html_url": "https://github.com/rust-lang/rust/commit/11d9483d5881e5ab6963e5ddab2f2e9b91f045c8"}, {"sha": "cda33346d0e9e4d1ff26163583831f96d42a4bc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/cda33346d0e9e4d1ff26163583831f96d42a4bc0", "html_url": "https://github.com/rust-lang/rust/commit/cda33346d0e9e4d1ff26163583831f96d42a4bc0"}], "stats": {"total": 128, "additions": 92, "deletions": 36}, "files": [{"sha": "2f502c1b55f7a57450102d4583775cf4a49a617e", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f8f60d80bf573cd8b4b5680b44c9cabe2b862f78/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f60d80bf573cd8b4b5680b44c9cabe2b862f78/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=f8f60d80bf573cd8b4b5680b44c9cabe2b862f78", "patch": "@@ -119,13 +119,31 @@ impl MacResult {\n     pub fn raw_dummy_expr(sp: codemap::Span) -> @ast::Expr {\n         @ast::Expr {\n             id: ast::DUMMY_NODE_ID,\n-            node: ast::ExprTup(Vec::new()),\n-            span: sp\n+            node: ast::ExprLit(@codemap::respan(sp, ast::LitNil)),\n+            span: sp,\n         }\n     }\n     pub fn dummy_expr(sp: codemap::Span) -> MacResult {\n         MRExpr(MacResult::raw_dummy_expr(sp))\n     }\n+    pub fn dummy_any(sp: codemap::Span) -> MacResult {\n+        MRAny(~DummyMacResult { sp: sp })\n+    }\n+}\n+struct DummyMacResult {\n+    sp: codemap::Span\n+}\n+impl AnyMacro for DummyMacResult {\n+    fn make_expr(&self) -> @ast::Expr {\n+        MacResult::raw_dummy_expr(self.sp)\n+    }\n+    fn make_items(&self) -> SmallVector<@ast::Item> {\n+        SmallVector::zero()\n+    }\n+    fn make_stmt(&self) -> @ast::Stmt {\n+        @codemap::respan(self.sp,\n+                         ast::StmtExpr(MacResult::raw_dummy_expr(self.sp), ast::DUMMY_NODE_ID))\n+    }\n }\n \n /// An enum representing the different kinds of syntax extensions."}, {"sha": "1ce08b8303ec978c73cb30f934f79c027d32d8f1", "filename": "src/libsyntax/ext/log_syntax.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f8f60d80bf573cd8b4b5680b44c9cabe2b862f78/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f60d80bf573cd8b4b5680b44c9cabe2b862f78/src%2Flibsyntax%2Fext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Flog_syntax.rs?ref=f8f60d80bf573cd8b4b5680b44c9cabe2b862f78", "patch": "@@ -10,11 +10,10 @@\n \n use ast;\n use codemap;\n-use ext::base::*;\n use ext::base;\n use print;\n \n-pub fn expand_syntax_ext(cx: &mut ExtCtxt,\n+pub fn expand_syntax_ext(cx: &mut base::ExtCtxt,\n                          sp: codemap::Span,\n                          tt: &[ast::TokenTree])\n                       -> base::MacResult {\n@@ -23,13 +22,6 @@ pub fn expand_syntax_ext(cx: &mut ExtCtxt,\n     println!(\"{}\", print::pprust::tt_to_str(&ast::TTDelim(\n                 @tt.iter().map(|x| (*x).clone()).collect())));\n \n-    //trivial expression\n-    MRExpr(@ast::Expr {\n-        id: ast::DUMMY_NODE_ID,\n-        node: ast::ExprLit(@codemap::Spanned {\n-            node: ast::LitNil,\n-            span: sp\n-        }),\n-        span: sp,\n-    })\n+    // any so that `log_syntax` can be invoked as an expression and item.\n+    base::MacResult::dummy_any(sp)\n }"}, {"sha": "173cf4c9ad92a5a80de85094b85d6409095b531c", "filename": "src/libsyntax/ext/trace_macros.rs", "status": "modified", "additions": 10, "deletions": 22, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/f8f60d80bf573cd8b4b5680b44c9cabe2b862f78/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f60d80bf573cd8b4b5680b44c9cabe2b862f78/src%2Flibsyntax%2Fext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftrace_macros.rs?ref=f8f60d80bf573cd8b4b5680b44c9cabe2b862f78", "patch": "@@ -12,33 +12,21 @@ use ast;\n use codemap::Span;\n use ext::base::ExtCtxt;\n use ext::base;\n-use parse::lexer::{new_tt_reader, Reader};\n-use parse::parser::Parser;\n-use parse::token::keywords;\n+use parse::token::{keywords, is_keyword};\n \n pub fn expand_trace_macros(cx: &mut ExtCtxt,\n                            sp: Span,\n                            tt: &[ast::TokenTree])\n                         -> base::MacResult {\n-    let sess = cx.parse_sess();\n-    let cfg = cx.cfg();\n-    let tt_rdr = new_tt_reader(&cx.parse_sess().span_diagnostic,\n-                               None,\n-                               tt.iter().map(|x| (*x).clone()).collect());\n-    let mut rust_parser = Parser(sess, cfg.clone(), tt_rdr.dup());\n-\n-    if rust_parser.is_keyword(keywords::True) {\n-        cx.set_trace_macros(true);\n-    } else if rust_parser.is_keyword(keywords::False) {\n-        cx.set_trace_macros(false);\n-    } else {\n-        cx.span_err(sp, \"trace_macros! only accepts `true` or `false`\");\n-        return base::MacResult::dummy_expr(sp);\n+    match tt {\n+        [ast::TTTok(_, ref tok)] if is_keyword(keywords::True, tok) => {\n+            cx.set_trace_macros(true);\n+        }\n+        [ast::TTTok(_, ref tok)] if is_keyword(keywords::False, tok) => {\n+            cx.set_trace_macros(false);\n+        }\n+        _ => cx.span_err(sp, \"trace_macros! accepts only `true` or `false`\"),\n     }\n \n-    rust_parser.bump();\n-\n-    let mut rust_parser = Parser(sess, cfg, tt_rdr.dup());\n-    let result = rust_parser.parse_expr();\n-    base::MRExpr(result)\n+    base::MacResult::dummy_any(sp)\n }"}, {"sha": "848deac4d55c04822b94ba8d10d6b77e8dab8ed6", "filename": "src/test/compile-fail/issue-11692.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f8f60d80bf573cd8b4b5680b44c9cabe2b862f78/src%2Ftest%2Fcompile-fail%2Fissue-11692.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f60d80bf573cd8b4b5680b44c9cabe2b862f78/src%2Ftest%2Fcompile-fail%2Fissue-11692.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11692.rs?ref=f8f60d80bf573cd8b4b5680b44c9cabe2b862f78", "patch": "@@ -15,5 +15,4 @@ fn main() {\n \n     concat!(test!());\n     //~^ ERROR: macro undefined: 'test'\n-    //~^^ ERROR: expected a literal\n }"}, {"sha": "557dcdc73c8e102a275ecfb593990aabab226866", "filename": "src/test/compile-fail/trace_macros-format.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f8f60d80bf573cd8b4b5680b44c9cabe2b862f78/src%2Ftest%2Fcompile-fail%2Ftrace_macros-format.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f60d80bf573cd8b4b5680b44c9cabe2b862f78/src%2Ftest%2Fcompile-fail%2Ftrace_macros-format.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrace_macros-format.rs?ref=f8f60d80bf573cd8b4b5680b44c9cabe2b862f78", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-fast feature doesn't work\n+#[feature(macro_rules, trace_macros)];\n+\n+fn main() {\n+    trace_macros!(); //~ ERROR trace_macros! accepts only `true` or `false`\n+    trace_macros!(1); //~ ERROR trace_macros! accepts only `true` or `false`\n+    trace_macros!(ident); //~ ERROR trace_macros! accepts only `true` or `false`\n+    trace_macros!(for); //~ ERROR trace_macros! accepts only `true` or `false`\n+    trace_macros!(true,); //~ ERROR trace_macros! accepts only `true` or `false`\n+    trace_macros!(false 1); //~ ERROR trace_macros! accepts only `true` or `false`\n+\n+\n+    // should be fine:\n+    macro_rules! expando {\n+        ($x: ident) => { trace_macros!($x) }\n+    }\n+\n+    expando!(true);\n+}"}, {"sha": "a00ba6067dc7e062939e55b51a5c5a1dd03c575e", "filename": "src/test/run-pass/log_syntax-trace_macros-macro-locations.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/f8f60d80bf573cd8b4b5680b44c9cabe2b862f78/src%2Ftest%2Frun-pass%2Flog_syntax-trace_macros-macro-locations.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8f60d80bf573cd8b4b5680b44c9cabe2b862f78/src%2Ftest%2Frun-pass%2Flog_syntax-trace_macros-macro-locations.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Flog_syntax-trace_macros-macro-locations.rs?ref=f8f60d80bf573cd8b4b5680b44c9cabe2b862f78", "patch": "@@ -0,0 +1,30 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-fast feature doesn't work\n+#[feature(trace_macros, log_syntax)];\n+\n+// make sure these macros can be used as in the various places that\n+// macros can occur.\n+\n+// items\n+trace_macros!(false)\n+log_syntax!()\n+\n+fn main() {\n+\n+    // statements\n+    trace_macros!(false);\n+    log_syntax!();\n+\n+    // expressions\n+    (trace_macros!(false),\n+     log_syntax!());\n+}"}]}