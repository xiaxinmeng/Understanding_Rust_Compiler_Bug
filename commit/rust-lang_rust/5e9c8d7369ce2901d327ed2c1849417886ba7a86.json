{"sha": "5e9c8d7369ce2901d327ed2c1849417886ba7a86", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlOWM4ZDczNjljZTI5MDFkMzI3ZWQyYzE4NDk0MTc4ODZiYTdhODY=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-01-03T00:43:08Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-01-24T18:36:50Z"}, "message": "When using value after move, point at span of local\n\nWhen trying to use a value after move, instead of using a note, point\nat the local declaration that has a type that doesn't implement `Copy`\ntrait.", "tree": {"sha": "349bb01cff5cce57d9f4a0422c269a7a43826f90", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/349bb01cff5cce57d9f4a0422c269a7a43826f90"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e9c8d7369ce2901d327ed2c1849417886ba7a86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e9c8d7369ce2901d327ed2c1849417886ba7a86", "html_url": "https://github.com/rust-lang/rust/commit/5e9c8d7369ce2901d327ed2c1849417886ba7a86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e9c8d7369ce2901d327ed2c1849417886ba7a86/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01f8e25b15f4ab157c8e7c9c56054df7595ec0e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/01f8e25b15f4ab157c8e7c9c56054df7595ec0e1", "html_url": "https://github.com/rust-lang/rust/commit/01f8e25b15f4ab157c8e7c9c56054df7595ec0e1"}], "stats": {"total": 204, "additions": 116, "deletions": 88}, "files": [{"sha": "cbcf8c90fee415390017ae99b152b160b295fe24", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 23, "deletions": 11, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -198,19 +198,31 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 let place = &self.move_data.move_paths[mpi].place;\n \n                 let ty = place.ty(self.mir, self.infcx.tcx).to_ty(self.infcx.tcx);\n-                let note_msg = match self.describe_place_with_options(\n-                    place,\n-                    IncludingDowncast(true),\n-                ) {\n-                    Some(name) => format!(\"`{}`\", name),\n+                let opt_name = self.describe_place_with_options(place, IncludingDowncast(true));\n+                let note_msg = match opt_name {\n+                    Some(ref name) => format!(\"`{}`\", name),\n                     None => \"value\".to_owned(),\n                 };\n-\n-                err.note(&format!(\n-                    \"move occurs because {} has type `{}`, \\\n-                     which does not implement the `Copy` trait\",\n-                    note_msg, ty\n-                ));\n+                let mut note = true;\n+                for decl in &self.mir.local_decls {\n+                    if decl.ty == ty && decl.name.map(|x| x.to_string()) == opt_name {\n+                        err.span_label(\n+                            decl.source_info.span,\n+                            format!(\n+                                \"move occurs because {} has type `{}`, \\\n+                                 which does not implement the `Copy` trait\",\n+                                note_msg, ty,\n+                        ));\n+                        note = false;\n+                    }\n+                }\n+                if note {\n+                    err.note(&format!(\n+                        \"move occurs because {} has type `{}`, \\\n+                         which does not implement the `Copy` trait\",\n+                        note_msg, ty\n+                    ));\n+                }\n             }\n \n             if let Some((_, mut old_err)) = self.move_error_reported"}, {"sha": "86e4832b3873ce49ae1bc09a2247e1b3e5af6fde", "filename": "src/test/ui/borrowck/borrowck-asm.mir.stderr", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-asm.mir.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -1,13 +1,14 @@\n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-asm.rs:27:17\n    |\n+LL |         let x = &mut 0isize;\n+   |             - move occurs because `x` has type `&mut isize`, which does not implement the `Copy` trait\n+LL |         unsafe {\n LL |             asm!(\"nop\" : : \"r\"(x));\n    |                                - value moved here\n LL |         }\n LL |         let z = x;  //[ast]~ ERROR use of moved value: `x`\n    |                 ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `&mut isize`, which does not implement the `Copy` trait\n \n error[E0503]: cannot use `x` because it was mutably borrowed\n   --> $DIR/borrowck-asm.rs:35:32\n@@ -66,12 +67,13 @@ LL |         let z = y;\n error[E0382]: use of moved value: `x`\n   --> $DIR/borrowck-asm.rs:86:40\n    |\n+LL |         let x = &mut 2;\n+   |             - move occurs because `x` has type `&mut i32`, which does not implement the `Copy` trait\n+LL |         unsafe {\n LL |             asm!(\"nop\" : : \"r\"(x), \"r\"(x) );    //[ast]~ ERROR use of moved value\n    |                                -       ^ value used here after move\n    |                                |\n    |                                value moved here\n-   |\n-   = note: move occurs because `x` has type `&mut i32`, which does not implement the `Copy` trait\n \n error: aborting due to 7 previous errors\n "}, {"sha": "07b597f480feba33d7c40c018b55c80a6b18de8f", "filename": "src/test/ui/borrowck/borrowck-drop-from-guard.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-drop-from-guard.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -1,13 +1,14 @@\n error[E0382]: use of moved value: `my_str`\n   --> $DIR/borrowck-drop-from-guard.rs:11:23\n    |\n+LL |     let my_str = \"hello\".to_owned();\n+   |         ------ move occurs because `my_str` has type `std::string::String`, which does not implement the `Copy` trait\n+LL |     match Some(42) {\n LL |         Some(_) if { drop(my_str); false } => {}\n    |                           ------ value moved here\n LL |         Some(_) => {}\n LL |         None => { foo(my_str); } //~ ERROR [E0382]\n    |                       ^^^^^^ value used here after move\n-   |\n-   = note: move occurs because `my_str` has type `std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "de4894d5b526b8e5baf7c6400836cbe765e3e502", "filename": "src/test/ui/borrowck/borrowck-issue-48962.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-issue-48962.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -1,22 +1,22 @@\n error[E0382]: use of moved value: `src`\n   --> $DIR/borrowck-issue-48962.rs:16:5\n    |\n+LL |     let mut src = &mut node;\n+   |         ------- move occurs because `src` has type `&mut Node`, which does not implement the `Copy` trait\n LL |     {src};\n    |      --- value moved here\n LL |     src.next = None; //~ ERROR use of moved value: `src` [E0382]\n    |     ^^^^^^^^ value used here after move\n-   |\n-   = note: move occurs because `src` has type `&mut Node`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `src`\n   --> $DIR/borrowck-issue-48962.rs:22:5\n    |\n+LL |     let mut src = &mut (22, 44);\n+   |         ------- move occurs because `src` has type `&mut (i32, i32)`, which does not implement the `Copy` trait\n LL |     {src};\n    |      --- value moved here\n LL |     src.0 = 66; //~ ERROR use of moved value: `src` [E0382]\n    |     ^^^^^^^^^^ value used here after move\n-   |\n-   = note: move occurs because `src` has type `&mut (i32, i32)`, which does not implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0789926563ce7fe6fdfcd07de377a7d2435cc185", "filename": "src/test/ui/borrowck/borrowck-move-moved-value-into-closure.mir.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.mir.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.mir.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-moved-value-into-closure.mir.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -1,6 +1,9 @@\n error[E0382]: use of moved value: `t`\n   --> $DIR/borrowck-move-moved-value-into-closure.rs:14:12\n    |\n+LL |     let t: Box<_> = box 3;\n+   |         - move occurs because `t` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n+LL | \n LL |     call_f(move|| { *t + 1 });\n    |            ------    - variable moved due to use in closure\n    |            |\n@@ -9,8 +12,6 @@ LL |     call_f(move|| { *t + 1 }); //[ast]~ ERROR capture of moved value\n    |            ^^^^^^    - use occurs due to use in closure\n    |            |\n    |            value used here after move\n-   |\n-   = note: move occurs because `t` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "96f3981ac2fe6b0c8eed50b25ebfa8b647df1a84", "filename": "src/test/ui/borrowck/borrowck-reinit.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-reinit.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -11,12 +11,13 @@ LL |     let _ = (1,x); //~ ERROR use of moved value: `x` (Ast)\n error[E0382]: use of moved value: `x` (Mir)\n   --> $DIR/borrowck-reinit.rs:8:16\n    |\n+LL |     let mut x = Box::new(0);\n+   |         ----- move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+...\n LL |     drop(x);\n    |          - value moved here\n LL |     let _ = (1,x); //~ ERROR use of moved value: `x` (Ast)\n    |                ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3c0071f6b37453165564433cdc3474c3ceaec89a", "filename": "src/test/ui/borrowck/issue-41962.stderr", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-41962.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -19,10 +19,13 @@ LL |         if let Some(thing) = maybe {\n error[E0382]: use of moved value (Mir)\n   --> $DIR/issue-41962.rs:7:21\n    |\n+LL |     let maybe = Some(vec![true, true]);\n+   |                      ---------------- move occurs because value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+...\n LL |         if let Some(thing) = maybe {\n    |                     ^^^^^ value moved here, in previous iteration of loop\n    |\n-   = note: move occurs because value has type `std::vec::Vec<bool>`, which does not implement the `Copy` trait\n+   = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)\n \n error: aborting due to 3 previous errors\n "}, {"sha": "42aa03817023813b752a67cc69ba2a93ed5a21a5", "filename": "src/test/ui/borrowck/issue-54499-field-mutation-of-moved-out-with-mut.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out-with-mut.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out-with-mut.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out-with-mut.nll.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -1,32 +1,32 @@\n error[E0382]: assign to part of moved value: `t`\n   --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:23:9\n    |\n+LL |         let mut t: Tuple = (S(0), 0);\n+   |             ----- move occurs because `t` has type `(S, i32)`, which does not implement the `Copy` trait\n LL |         drop(t);\n    |              - value moved here\n LL |         t.0 = S(1);\n    |         ^^^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `t` has type `(S, i32)`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `u`\n   --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:34:9\n    |\n+LL |         let mut u: Tpair = Tpair(S(0), 0);\n+   |             ----- move occurs because `u` has type `Tpair`, which does not implement the `Copy` trait\n LL |         drop(u);\n    |              - value moved here\n LL |         u.0 = S(1);\n    |         ^^^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `u` has type `Tpair`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `v`\n   --> $DIR/issue-54499-field-mutation-of-moved-out-with-mut.rs:45:9\n    |\n+LL |         let mut v: Spair = Spair { x: S(0), y: 0 };\n+   |             ----- move occurs because `v` has type `Spair`, which does not implement the `Copy` trait\n LL |         drop(v);\n    |              - value moved here\n LL |         v.x = S(1);\n    |         ^^^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `v` has type `Spair`, which does not implement the `Copy` trait\n \n error: aborting due to 3 previous errors\n "}, {"sha": "1184907f307cb8e541568f794858646e61c2aee8", "filename": "src/test/ui/borrowck/issue-54499-field-mutation-of-moved-out.nll.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fissue-54499-field-mutation-of-moved-out.nll.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -10,12 +10,12 @@ LL |         t.0 = S(1);\n error[E0382]: assign to part of moved value: `t`\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:23:9\n    |\n+LL |         let t: Tuple = (S(0), 0);\n+   |             - move occurs because `t` has type `(S, i32)`, which does not implement the `Copy` trait\n LL |         drop(t);\n    |              - value moved here\n LL |         t.0 = S(1);\n    |         ^^^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `t` has type `(S, i32)`, which does not implement the `Copy` trait\n \n error[E0594]: cannot assign to `t.1`, as `t` is not declared as mutable\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:27:9\n@@ -38,12 +38,12 @@ LL |         u.0 = S(1);\n error[E0382]: assign to part of moved value: `u`\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:38:9\n    |\n+LL |         let u: Tpair = Tpair(S(0), 0);\n+   |             - move occurs because `u` has type `Tpair`, which does not implement the `Copy` trait\n LL |         drop(u);\n    |              - value moved here\n LL |         u.0 = S(1);\n    |         ^^^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `u` has type `Tpair`, which does not implement the `Copy` trait\n \n error[E0594]: cannot assign to `u.1`, as `u` is not declared as mutable\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:42:9\n@@ -66,12 +66,12 @@ LL |         v.x = S(1);\n error[E0382]: assign to part of moved value: `v`\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:53:9\n    |\n+LL |         let v: Spair = Spair { x: S(0), y: 0 };\n+   |             - move occurs because `v` has type `Spair`, which does not implement the `Copy` trait\n LL |         drop(v);\n    |              - value moved here\n LL |         v.x = S(1);\n    |         ^^^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `v` has type `Spair`, which does not implement the `Copy` trait\n \n error[E0594]: cannot assign to `v.y`, as `v` is not declared as mutable\n   --> $DIR/issue-54499-field-mutation-of-moved-out.rs:57:9"}, {"sha": "6993419326c8e259323af3375cad48dba34e786c", "filename": "src/test/ui/issues/issue-27282-move-match-input-into-guard.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-27282-move-match-input-into-guard.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -1,15 +1,16 @@\n error[E0382]: use of moved value: `b`\n   --> $DIR/issue-27282-move-match-input-into-guard.rs:18:14\n    |\n+LL |     let b = &mut true;\n+   |         - move occurs because `b` has type `&mut bool`, which does not implement the `Copy` trait\n+...\n LL |         _ if { (|| { let bar = b; *bar = false; })();\n    |                 --             - variable moved due to use in closure\n    |                 |\n    |                 value moved into closure here\n LL |                      false } => { },\n LL |         &mut true => { println!(\"You might think we should get here\"); },\n    |              ^^^^ value used here after move\n-   |\n-   = note: move occurs because `b` has type `&mut bool`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "7928af5d5a5cd654df408173042b7b43be444fb4", "filename": "src/test/ui/issues/issue-29723.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-29723.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -1,13 +1,14 @@\n error[E0382]: use of moved value: `s`\n   --> $DIR/issue-29723.rs:12:13\n    |\n+LL |     let s = String::new();\n+   |         - move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n+LL |     let _s = match 0 {\n LL |         0 if { drop(s); false } => String::from(\"oops\"),\n    |                     - value moved here\n ...\n LL |             s\n    |             ^ value used here after move\n-   |\n-   = note: move occurs because `s` has type `std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "c49dbdab402108d534b89a9f62d4be3bc522ebf8", "filename": "src/test/ui/moves/moves-based-on-type-tuple.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmoves%2Fmoves-based-on-type-tuple.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -11,12 +11,12 @@ LL |     box (x, x)\n error[E0382]: use of moved value: `x` (Mir)\n   --> $DIR/moves-based-on-type-tuple.rs:6:13\n    |\n+LL | fn dup(x: Box<isize>) -> Box<(Box<isize>,Box<isize>)> {\n+   |        - move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n LL |     box (x, x)\n    |          -  ^ value used here after move\n    |          |\n    |          value moved here\n-   |\n-   = note: move occurs because `x` has type `std::boxed::Box<isize>`, which does not implement the `Copy` trait\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3ca0aefb592e0898ce1409b5a4924757d35ec897", "filename": "src/test/ui/nll/closure-access-spans.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-access-spans.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -59,50 +59,50 @@ LL |     r.use_ref();\n error[E0382]: borrow of moved value: `x`\n   --> $DIR/closure-access-spans.rs:37:5\n    |\n+LL | fn closure_imm_capture_moved(mut x: String) {\n+   |                              ----- move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     let r = x;\n    |             - value moved here\n LL |     || x.len(); //~ ERROR\n    |     ^^ - borrow occurs due to use in closure\n    |     |\n    |     value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/closure-access-spans.rs:42:5\n    |\n+LL | fn closure_mut_capture_moved(mut x: String) {\n+   |                              ----- move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     let r = x;\n    |             - value moved here\n LL |     || x = String::new(); //~ ERROR\n    |     ^^ - borrow occurs due to use in closure\n    |     |\n    |     value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/closure-access-spans.rs:47:5\n    |\n+LL | fn closure_unique_capture_moved(x: &mut String) {\n+   |                                 - move occurs because `x` has type `&mut std::string::String`, which does not implement the `Copy` trait\n LL |     let r = x;\n    |             - value moved here\n LL |     || *x = String::new(); //~ ERROR\n    |     ^^  - borrow occurs due to use in closure\n    |     |\n    |     value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `&mut std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `x`\n   --> $DIR/closure-access-spans.rs:52:5\n    |\n+LL | fn closure_move_capture_moved(x: &mut String) {\n+   |                               - move occurs because `x` has type `&mut std::string::String`, which does not implement the `Copy` trait\n LL |     let r = x;\n    |             - value moved here\n LL |     || x; //~ ERROR\n    |     ^^ - use occurs due to use in closure\n    |     |\n    |     value used here after move\n-   |\n-   = note: move occurs because `x` has type `&mut std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to 9 previous errors\n "}, {"sha": "6750c4047601a4b4627c10e760db135cca52ee44", "filename": "src/test/ui/nll/closure-move-spans.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-move-spans.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -1,38 +1,38 @@\n error[E0382]: use of moved value: `x`\n   --> $DIR/closure-move-spans.rs:7:13\n    |\n+LL | fn move_after_move(x: String) {\n+   |                    - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     || x;\n    |     -- - variable moved due to use in closure\n    |     |\n    |     value moved into closure here\n LL |     let y = x; //~ ERROR\n    |             ^ value used here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/closure-move-spans.rs:12:13\n    |\n+LL | fn borrow_after_move(x: String) {\n+   |                      - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     || x;\n    |     -- - variable moved due to use in closure\n    |     |\n    |     value moved into closure here\n LL |     let y = &x; //~ ERROR\n    |             ^^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0382]: borrow of moved value: `x`\n   --> $DIR/closure-move-spans.rs:17:13\n    |\n+LL | fn borrow_mut_after_move(mut x: String) {\n+   |                          ----- move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n LL |     || x;\n    |     -- - variable moved due to use in closure\n    |     |\n    |     value moved into closure here\n LL |     let y = &mut x; //~ ERROR\n    |             ^^^^^^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error: aborting due to 3 previous errors\n "}, {"sha": "6c9e1639f88dd7f6c8066a9ee841dd8178a4bff3", "filename": "src/test/ui/nll/closures-in-loops.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosures-in-loops.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -1,12 +1,13 @@\n error[E0382]: use of moved value: `x`\n   --> $DIR/closures-in-loops.rs:8:9\n    |\n+LL | fn repreated_move(x: String) {\n+   |                   - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n+LL |     for i in 0..10 {\n LL |         || x; //~ ERROR\n    |         ^^ - use occurs due to use in closure\n    |         |\n    |         value moved into closure here, in previous iteration of loop\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0499]: cannot borrow `x` as mutable more than once at a time\n   --> $DIR/closures-in-loops.rs:15:16"}, {"sha": "54c728e3d2783fdb1e6c53bdb672cf1f8353a58d", "filename": "src/test/ui/nll/issue-21232-partial-init-and-erroneous-use.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-erroneous-use.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -13,12 +13,12 @@ LL |     d.x = 10;\n error[E0382]: assign of moved value: `d`\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:43:5\n    |\n+LL |     let mut d = D { x: 0, s: S{ y: 0, z: 0 } };\n+   |         ----- move occurs because `d` has type `D`, which does not implement the `Copy` trait\n LL |     drop(d);\n    |          - value moved here\n LL |     d.x = 10;\n    |     ^^^^^^^^ value assigned here after move\n-   |\n-   = note: move occurs because `d` has type `D`, which does not implement the `Copy` trait\n \n error[E0381]: assign to part of possibly uninitialized variable: `d`\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:49:5\n@@ -35,12 +35,12 @@ LL |     d.s.y = 20;\n error[E0382]: assign to part of moved value: `d`\n   --> $DIR/issue-21232-partial-init-and-erroneous-use.rs:62:5\n    |\n+LL |     let mut d = D { x: 0, s: S{ y: 0, z: 0} };\n+   |         ----- move occurs because `d` has type `D`, which does not implement the `Copy` trait\n LL |     drop(d);\n    |          - value moved here\n LL |     d.s.y = 20;\n    |     ^^^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `d` has type `D`, which does not implement the `Copy` trait\n \n error: aborting due to 6 previous errors\n "}, {"sha": "23da533252cb9c6e64a4a7416410162c6f5c6f99", "filename": "src/test/ui/nll/issue-21232-partial-init-and-use.stderr", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-21232-partial-init-and-use.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -14,21 +14,21 @@ error[E0382]: assign to part of moved value: `s`\n   --> $DIR/issue-21232-partial-init-and-use.rs:113:5\n    |\n LL |     let mut s: S<B> = S::new(); drop(s);\n-   |                                      - value moved here\n+   |         -----                        - value moved here\n+   |         |\n+   |         move occurs because `s` has type `S<std::boxed::Box<u32>>`, which does not implement the `Copy` trait\n LL |     s.x = 10; s.y = Box::new(20);\n    |     ^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `s` has type `S<std::boxed::Box<u32>>`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `t`\n   --> $DIR/issue-21232-partial-init-and-use.rs:120:5\n    |\n LL |     let mut t: T = (0, Box::new(0)); drop(t);\n-   |                                           - value moved here\n+   |         -----                             - value moved here\n+   |         |\n+   |         move occurs because `t` has type `(u32, std::boxed::Box<u32>)`, which does not implement the `Copy` trait\n LL |     t.0 = 10; t.1 = Box::new(20);\n    |     ^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `t` has type `(u32, std::boxed::Box<u32>)`, which does not implement the `Copy` trait\n \n error[E0381]: assign to part of possibly uninitialized variable: `s`\n   --> $DIR/issue-21232-partial-init-and-use.rs:127:5\n@@ -46,21 +46,21 @@ error[E0382]: assign to part of moved value: `s`\n   --> $DIR/issue-21232-partial-init-and-use.rs:141:5\n    |\n LL |     let mut s: S<B> = S::new(); drop(s);\n-   |                                      - value moved here\n+   |         -----                        - value moved here\n+   |         |\n+   |         move occurs because `s` has type `S<std::boxed::Box<u32>>`, which does not implement the `Copy` trait\n LL |     s.x = 10;\n    |     ^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `s` has type `S<std::boxed::Box<u32>>`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `t`\n   --> $DIR/issue-21232-partial-init-and-use.rs:148:5\n    |\n LL |     let mut t: T = (0, Box::new(0)); drop(t);\n-   |                                           - value moved here\n+   |         -----                             - value moved here\n+   |         |\n+   |         move occurs because `t` has type `(u32, std::boxed::Box<u32>)`, which does not implement the `Copy` trait\n LL |     t.0 = 10;\n    |     ^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `t` has type `(u32, std::boxed::Box<u32>)`, which does not implement the `Copy` trait\n \n error[E0381]: assign to part of possibly uninitialized variable: `s`\n   --> $DIR/issue-21232-partial-init-and-use.rs:155:5\n@@ -153,22 +153,24 @@ LL |     q.r.f.0 = 10;\n error[E0382]: assign to part of moved value: `c`\n   --> $DIR/issue-21232-partial-init-and-use.rs:259:13\n    |\n+LL |     let mut c = (1, \"\".to_owned());\n+   |         ----- move occurs because `c` has type `(i32, std::string::String)`, which does not implement the `Copy` trait\n+LL |     match c {\n LL |         c2 => {\n    |         -- value moved here\n LL |             c.0 = 2; //~ ERROR assign to part of moved value\n    |             ^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `c` has type `(i32, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `c`\n   --> $DIR/issue-21232-partial-init-and-use.rs:269:13\n    |\n+LL |     let mut c = (1, (1, \"\".to_owned()));\n+   |         ----- move occurs because `c` has type `(i32, (i32, std::string::String))`, which does not implement the `Copy` trait\n+LL |     match c {\n LL |         c2 => {\n    |         -- value moved here\n LL |             (c.1).0 = 2; //~ ERROR assign to part of moved value\n    |             ^^^^^^^^^^^ value partially assigned here after move\n-   |\n-   = note: move occurs because `c` has type `(i32, (i32, std::string::String))`, which does not implement the `Copy` trait\n \n error[E0382]: assign to part of moved value: `c.1`\n   --> $DIR/issue-21232-partial-init-and-use.rs:277:13"}, {"sha": "a84a236ca77722995b7c5760985dc6f51d0d1236", "filename": "src/test/ui/nll/issue-51512.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-51512.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -1,12 +1,12 @@\n error[E0382]: use of moved value: `range`\n   --> $DIR/issue-51512.rs:7:13\n    |\n+LL |     let range = 0..1;\n+   |         ----- move occurs because `range` has type `std::ops::Range<i32>`, which does not implement the `Copy` trait\n LL |     let r = range;\n    |             ----- value moved here\n LL |     let x = range.start;\n    |             ^^^^^^^^^^^ value used here after move\n-   |\n-   = note: move occurs because `range` has type `std::ops::Range<i32>`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "f51768c3859e4f3244ed795bdb74e56f9153d309", "filename": "src/test/ui/nll/issue-52669.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fnll%2Fissue-52669.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Fnll%2Fissue-52669.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-52669.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -1,12 +1,13 @@\n error[E0382]: borrow of moved value: `a.b`\n   --> $DIR/issue-52669.rs:15:5\n    |\n+LL | fn bar(mut a: A) -> B {\n+   |        ----- move occurs because `a` has type `A`, which does not implement the `Copy` trait\n+LL |     a.b = B;\n LL |     foo(a);\n    |         - value moved here\n LL |     a.b.clone()\n    |     ^^^ value borrowed here after move\n-   |\n-   = note: move occurs because `a` has type `A`, which does not implement the `Copy` trait\n \n error: aborting due to previous error\n "}, {"sha": "b1b925d694ff9ba8e1acc6115425978cb989543f", "filename": "src/test/ui/try-block/try-block-bad-lifetime.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-bad-lifetime.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -25,13 +25,14 @@ LL |         ::std::mem::drop(k); //~ ERROR use of moved value: `k`\n error[E0382]: use of moved value: `k`\n   --> $DIR/try-block-bad-lifetime.rs:31:26\n    |\n+LL |         let k = &mut i;\n+   |             - move occurs because `k` has type `&mut i32`, which does not implement the `Copy` trait\n+LL |         let mut j: Result<(), &mut i32> = try {\n LL |             Err(k) ?;\n    |                 - value moved here\n ...\n LL |         ::std::mem::drop(k); //~ ERROR use of moved value: `k`\n    |                          ^ value used here after move\n-   |\n-   = note: move occurs because `k` has type `&mut i32`, which does not implement the `Copy` trait\n \n error[E0506]: cannot assign to `i` because it is borrowed\n   --> $DIR/try-block-bad-lifetime.rs:32:9"}, {"sha": "dafbde6a5150bb461bcd861f1356e8acb958a802", "filename": "src/test/ui/try-block/try-block-maybe-bad-lifetime.stderr", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5e9c8d7369ce2901d327ed2c1849417886ba7a86/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftry-block%2Ftry-block-maybe-bad-lifetime.stderr?ref=5e9c8d7369ce2901d327ed2c1849417886ba7a86", "patch": "@@ -13,13 +13,14 @@ LL |         do_something_with(x);\n error[E0382]: borrow of moved value: `x`\n   --> $DIR/try-block-maybe-bad-lifetime.rs:28:24\n    |\n+LL |         let x = String::new();\n+   |             - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n+...\n LL |             ::std::mem::drop(x);\n    |                              - value moved here\n LL |         };\n LL |         println!(\"{}\", x); //~ ERROR borrow of moved value: `x`\n    |                        ^ value borrowed here after move\n-   |\n-   = note: move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n \n error[E0506]: cannot assign to `i` because it is borrowed\n   --> $DIR/try-block-maybe-bad-lifetime.rs:40:9"}]}