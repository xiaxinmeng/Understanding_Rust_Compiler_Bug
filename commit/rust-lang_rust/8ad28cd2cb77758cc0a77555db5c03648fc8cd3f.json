{"sha": "8ad28cd2cb77758cc0a77555db5c03648fc8cd3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZDI4Y2QyY2I3Nzc1OGNjMGE3NzU1NWRiNWMwMzY0OGZjOGNkM2Y=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-02T10:19:58Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-07-04T08:10:08Z"}, "message": "Machine: make self-like parameters come first", "tree": {"sha": "bb167a894700bfbbda0d235414d08366bad7b40c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb167a894700bfbbda0d235414d08366bad7b40c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ad28cd2cb77758cc0a77555db5c03648fc8cd3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad28cd2cb77758cc0a77555db5c03648fc8cd3f", "html_url": "https://github.com/rust-lang/rust/commit/8ad28cd2cb77758cc0a77555db5c03648fc8cd3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ad28cd2cb77758cc0a77555db5c03648fc8cd3f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b43eb4235ac43c822d903ad26ed806f34cc1a14a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b43eb4235ac43c822d903ad26ed806f34cc1a14a", "html_url": "https://github.com/rust-lang/rust/commit/b43eb4235ac43c822d903ad26ed806f34cc1a14a"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "4a4bc7e04c1b93c0bbcf6e1209267d8e79fc01b8", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8ad28cd2cb77758cc0a77555db5c03648fc8cd3f/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad28cd2cb77758cc0a77555db5c03648fc8cd3f/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=8ad28cd2cb77758cc0a77555db5c03648fc8cd3f", "patch": "@@ -11,7 +11,7 @@ use rustc::hir::def::DefKind;\n use rustc::hir::def_id::DefId;\n use rustc::mir::interpret::{ConstEvalErr, ErrorHandled, ScalarMaybeUndef};\n use rustc::mir;\n-use rustc::ty::{self, TyCtxt, query::TyCtxtAt};\n+use rustc::ty::{self, TyCtxt};\n use rustc::ty::layout::{self, LayoutOf, VariantIdx};\n use rustc::ty::subst::Subst;\n use rustc::traits::Reveal;\n@@ -398,27 +398,27 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n     }\n \n     fn find_foreign_static(\n+        _tcx: TyCtxt<'tcx>,\n         _def_id: DefId,\n-        _tcx: TyCtxtAt<'tcx>,\n     ) -> InterpResult<'tcx, Cow<'tcx, Allocation<Self::PointerTag>>> {\n         err!(ReadForeignStatic)\n     }\n \n     #[inline(always)]\n     fn tag_allocation<'b>(\n+        _memory: &Memory<'mir, 'tcx, Self>,\n         _id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         _kind: Option<MemoryKind<!>>,\n-        _memory: &Memory<'mir, 'tcx, Self>,\n     ) -> (Cow<'b, Allocation<Self::PointerTag>>, Self::PointerTag) {\n         // We do not use a tag so we can just cheaply forward the allocation\n         (alloc, ())\n     }\n \n     #[inline(always)]\n     fn tag_static_base_pointer(\n-        _id: AllocId,\n         _memory: &Memory<'mir, 'tcx, Self>,\n+        _id: AllocId,\n     ) -> Self::PointerTag {\n         ()\n     }"}, {"sha": "42163d0c0889ad8555dbb8bf03f7fd9faefb78ba", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ad28cd2cb77758cc0a77555db5c03648fc8cd3f/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad28cd2cb77758cc0a77555db5c03648fc8cd3f/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=8ad28cd2cb77758cc0a77555db5c03648fc8cd3f", "patch": "@@ -7,7 +7,7 @@ use std::hash::Hash;\n \n use rustc::hir::def_id::DefId;\n use rustc::mir;\n-use rustc::ty::{self, query::TyCtxtAt};\n+use rustc::ty::{self, TyCtxt};\n \n use super::{\n     Allocation, AllocId, InterpResult, Scalar, AllocationExtra,\n@@ -136,8 +136,8 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     ///\n     /// This allocation will then be fed to `tag_allocation` to initialize the \"extra\" state.\n     fn find_foreign_static(\n+        tcx: TyCtxt<'tcx>,\n         def_id: DefId,\n-        tcx: TyCtxtAt<'tcx>,\n     ) -> InterpResult<'tcx, Cow<'tcx, Allocation>>;\n \n     /// Called for all binary operations on integer(-like) types when one operand is a pointer\n@@ -174,10 +174,10 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// For static allocations, the tag returned must be the same as the one returned by\n     /// `tag_static_base_pointer`.\n     fn tag_allocation<'b>(\n+        memory: &Memory<'mir, 'tcx, Self>,\n         id: AllocId,\n         alloc: Cow<'b, Allocation>,\n         kind: Option<MemoryKind<Self::MemoryKinds>>,\n-        memory: &Memory<'mir, 'tcx, Self>,\n     ) -> (Cow<'b, Allocation<Self::PointerTag, Self::AllocExtra>>, Self::PointerTag);\n \n     /// Return the \"base\" tag for the given static allocation: the one that is used for direct\n@@ -186,8 +186,8 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     /// Be aware that requesting the `Allocation` for that `id` will lead to cycles\n     /// for cyclic statics!\n     fn tag_static_base_pointer(\n-        id: AllocId,\n         memory: &Memory<'mir, 'tcx, Self>,\n+        id: AllocId,\n     ) -> Self::PointerTag;\n \n     /// Executes a retagging operation\n@@ -210,8 +210,8 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     ) -> InterpResult<'tcx>;\n \n     fn int_to_ptr(\n-        int: u64,\n         _mem: &Memory<'mir, 'tcx, Self>,\n+        int: u64,\n     ) -> InterpResult<'tcx, Pointer<Self::PointerTag>> {\n         if int == 0 {\n             err!(InvalidNullPointerUsage)\n@@ -221,8 +221,8 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     }\n \n     fn ptr_to_int(\n-        _ptr: Pointer<Self::PointerTag>,\n         _mem: &Memory<'mir, 'tcx, Self>,\n+        _ptr: Pointer<Self::PointerTag>,\n     ) -> InterpResult<'tcx, u64> {\n         err!(ReadPointerAsBytes)\n     }"}, {"sha": "30fe6d0df17fbe5e67465094b3dde2c3eb542a4d", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/8ad28cd2cb77758cc0a77555db5c03648fc8cd3f/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ad28cd2cb77758cc0a77555db5c03648fc8cd3f/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=8ad28cd2cb77758cc0a77555db5c03648fc8cd3f", "patch": "@@ -117,7 +117,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n \n     #[inline]\n     pub fn tag_static_base_pointer(&self, ptr: Pointer) -> Pointer<M::PointerTag> {\n-        ptr.with_tag(M::tag_static_base_pointer(ptr.alloc_id, &self))\n+        ptr.with_tag(M::tag_static_base_pointer(&self, ptr.alloc_id))\n     }\n \n     pub fn create_fn_alloc(&mut self, instance: Instance<'tcx>) -> Pointer<M::PointerTag> {\n@@ -150,7 +150,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         kind: MemoryKind<M::MemoryKinds>,\n     ) -> Pointer<M::PointerTag> {\n         let id = self.tcx.alloc_map.lock().reserve();\n-        let (alloc, tag) = M::tag_allocation(id, Cow::Owned(alloc), Some(kind), &self);\n+        let (alloc, tag) = M::tag_allocation(&self, id, Cow::Owned(alloc), Some(kind));\n         self.alloc_map.insert(id, (kind, alloc.into_owned()));\n         Pointer::from(id).with_tag(tag)\n     }\n@@ -384,7 +384,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 // We got a \"lazy\" static that has not been computed yet.\n                 if tcx.is_foreign_item(def_id) {\n                     trace!(\"static_alloc: foreign item {:?}\", def_id);\n-                    M::find_foreign_static(def_id, tcx)?\n+                    M::find_foreign_static(tcx.tcx, def_id)?\n                 } else {\n                     trace!(\"static_alloc: Need to compute {:?}\", def_id);\n                     let instance = Instance::mono(tcx.tcx, def_id);\n@@ -414,10 +414,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         // We got tcx memory. Let the machine figure out whether and how to\n         // turn that into memory with the right pointer tag.\n         Ok(M::tag_allocation(\n+            memory,\n             id, // always use the ID we got as input, not the \"hidden\" one.\n             alloc,\n             M::STATIC_KIND.map(MemoryKind::Machine),\n-            memory\n         ).0)\n     }\n \n@@ -890,7 +890,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, Pointer<M::PointerTag>> {\n         match scalar {\n             Scalar::Ptr(ptr) => Ok(ptr),\n-            _ => M::int_to_ptr(scalar.to_usize(self)?, self)\n+            _ => M::int_to_ptr(&self, scalar.to_usize(self)?)\n         }\n     }\n \n@@ -901,7 +901,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, u128> {\n         match scalar.to_bits_or_ptr(size, self) {\n             Ok(bits) => Ok(bits),\n-            Err(ptr) => Ok(M::ptr_to_int(ptr, self)? as u128)\n+            Err(ptr) => Ok(M::ptr_to_int(&self, ptr)? as u128)\n         }\n     }\n }"}]}