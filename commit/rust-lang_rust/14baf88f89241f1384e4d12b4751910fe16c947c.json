{"sha": "14baf88f89241f1384e4d12b4751910fe16c947c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE0YmFmODhmODkyNDFmMTM4NGU0ZDEyYjQ3NTE5MTBmZTE2Yzk0N2M=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-11T11:04:12Z"}, "committer": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-12T00:39:39Z"}, "message": "core::str: added index (char)", "tree": {"sha": "e9f6b8f0e29264d577ebd3c98c810d6c006040b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9f6b8f0e29264d577ebd3c98c810d6c006040b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/14baf88f89241f1384e4d12b4751910fe16c947c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/14baf88f89241f1384e4d12b4751910fe16c947c", "html_url": "https://github.com/rust-lang/rust/commit/14baf88f89241f1384e4d12b4751910fe16c947c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/14baf88f89241f1384e4d12b4751910fe16c947c/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a131b430a0e2e227c8771212dc5f469cd08e5dce", "url": "https://api.github.com/repos/rust-lang/rust/commits/a131b430a0e2e227c8771212dc5f469cd08e5dce", "html_url": "https://github.com/rust-lang/rust/commit/a131b430a0e2e227c8771212dc5f469cd08e5dce"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "06a49b8d33992c495f56a30b42210b862161aa95", "filename": "src/libcore/str.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/14baf88f89241f1384e4d12b4751910fe16c947c/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/14baf88f89241f1384e4d12b4751910fe16c947c/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=14baf88f89241f1384e4d12b4751910fe16c947c", "patch": "@@ -870,6 +870,30 @@ fn lines_iter(ss: str, ff: fn(&&str)) {\n Section: Searching\n */\n \n+// Function: index\n+//\n+// Returns the index of the first matching char\n+// (as option some/none)\n+fn index(ss: str, cc: char) -> option<uint> {\n+    let bii = 0u;\n+    let cii = 0u;\n+    let len = byte_len(ss);\n+    while bii < len {\n+        let {ch, next} = char_range_at(ss, bii);\n+\n+        // found here?\n+        if ch == cc {\n+            ret option::some(cii);\n+        }\n+\n+        cii += 1u;\n+        bii = next;\n+    }\n+\n+    // wasn't found\n+    ret option::none;\n+}\n+\n /*\n Function: index\n \n@@ -1448,6 +1472,9 @@ mod tests {\n         assert (index_byte(\"hello\", 'e' as u8) == 1);\n         assert (index_byte(\"hello\", 'o' as u8) == 4);\n         assert (index_byte(\"hello\", 'z' as u8) == -1);\n+        assert (index(\"hello\", 'e') == option::some(1u));\n+        assert (index(\"hello\", 'o') == option::some(4u));\n+        assert (index(\"hello\", 'z') == option::none);\n         assert (rindex_byte(\"hello\", 'l' as u8) == 3);\n         assert (rindex_byte(\"hello\", 'h' as u8) == 0);\n         assert (rindex_byte(\"hello\", 'z' as u8) == -1);"}]}