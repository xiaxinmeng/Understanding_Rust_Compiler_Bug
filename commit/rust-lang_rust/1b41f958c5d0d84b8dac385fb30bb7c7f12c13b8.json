{"sha": "1b41f958c5d0d84b8dac385fb30bb7c7f12c13b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNDFmOTU4YzVkMGQ4NGI4ZGFjMzg1ZmIzMGJiN2M3ZjEyYzEzYjg=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-09-30T04:42:11Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-10-08T05:05:51Z"}, "message": "Remove `InferCtxt::in_snapshot()`.\n\nIt's the same as `InferCtxt::commit_unconditionally()` except that it\nis passed a snapshot and has a worse name.\n\nThe commit also changes `commit_unconditionally()` to receive a\nsnapshot, for consistency with `commit_if_ok()` and `probe()`.", "tree": {"sha": "8089a71d6f407407ec5cbff0a5f6f01061968a7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8089a71d6f407407ec5cbff0a5f6f01061968a7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b41f958c5d0d84b8dac385fb30bb7c7f12c13b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b41f958c5d0d84b8dac385fb30bb7c7f12c13b8", "html_url": "https://github.com/rust-lang/rust/commit/1b41f958c5d0d84b8dac385fb30bb7c7f12c13b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b41f958c5d0d84b8dac385fb30bb7c7f12c13b8/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f9aea199ceefef9855850ab7843ef6935055eca", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f9aea199ceefef9855850ab7843ef6935055eca", "html_url": "https://github.com/rust-lang/rust/commit/3f9aea199ceefef9855850ab7843ef6935055eca"}], "stats": {"total": 57, "additions": 23, "deletions": 34}, "files": [{"sha": "af74d13572431a147c3235666ce7ab470b9337e7", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 5, "deletions": 17, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1b41f958c5d0d84b8dac385fb30bb7c7f12c13b8/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b41f958c5d0d84b8dac385fb30bb7c7f12c13b8/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=1b41f958c5d0d84b8dac385fb30bb7c7f12c13b8", "patch": "@@ -814,16 +814,16 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// Executes `f` and commit the bindings.\n     pub fn commit_unconditionally<R, F>(&self, f: F) -> R\n     where\n-        F: FnOnce() -> R,\n+        F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,\n     {\n-        debug!(\"commit()\");\n+        debug!(\"commit_unconditionally()\");\n         let snapshot = self.start_snapshot();\n-        let r = f();\n+        let r = f(&snapshot);\n         self.commit_from(snapshot);\n         r\n     }\n \n-    /// Executes `f` and commit the bindings if closure `f` returns `Ok(_)`.\n+    /// Execute `f` and commit the bindings if closure `f` returns `Ok(_)`.\n     pub fn commit_if_ok<T, E, F>(&self, f: F) -> Result<T, E>\n     where\n         F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> Result<T, E>,\n@@ -843,19 +843,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         r\n     }\n \n-    /// Execute `f` in a snapshot, and commit the bindings it creates.\n-    pub fn in_snapshot<T, F>(&self, f: F) -> T\n-    where\n-        F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> T,\n-    {\n-        debug!(\"in_snapshot()\");\n-        let snapshot = self.start_snapshot();\n-        let r = f(&snapshot);\n-        self.commit_from(snapshot);\n-        r\n-    }\n-\n-    /// Executes `f` then unroll any bindings it creates.\n+    /// Execute `f` then unroll any bindings it creates.\n     pub fn probe<R, F>(&self, f: F) -> R\n     where\n         F: FnOnce(&CombinedSnapshot<'a, 'tcx>) -> R,"}, {"sha": "44d611ace77d017abf94ebce568eb950cac09fa3", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1b41f958c5d0d84b8dac385fb30bb7c7f12c13b8/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b41f958c5d0d84b8dac385fb30bb7c7f12c13b8/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=1b41f958c5d0d84b8dac385fb30bb7c7f12c13b8", "patch": "@@ -2819,7 +2819,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 // binder moved -\\\n                 let ty: ty::Binder<Ty<'tcx>> = ty::Binder::bind(ty); // <----/\n \n-                self.infcx.in_snapshot(|_| {\n+                self.infcx.commit_unconditionally(|_| {\n                     let (skol_ty, _) = self.infcx\n                         .replace_bound_vars_with_placeholders(&ty);\n                     let Normalized {\n@@ -2932,7 +2932,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     fn confirm_projection_candidate(&mut self, obligation: &TraitObligation<'tcx>) {\n-        self.infcx.in_snapshot(|snapshot| {\n+        self.infcx.commit_unconditionally(|snapshot| {\n             let result =\n                 self.match_projection_obligation_against_definition_bounds(\n                     obligation,\n@@ -3054,19 +3054,20 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             nested,\n         );\n \n-        let trait_obligations: Vec<PredicateObligation<'_>> = self.infcx.in_snapshot(|_| {\n-            let poly_trait_ref = obligation.predicate.to_poly_trait_ref();\n-            let (trait_ref, _) = self.infcx\n-                .replace_bound_vars_with_placeholders(&poly_trait_ref);\n-            let cause = obligation.derived_cause(ImplDerivedObligation);\n-            self.impl_or_trait_obligations(\n-                cause,\n-                obligation.recursion_depth + 1,\n-                obligation.param_env,\n-                trait_def_id,\n-                &trait_ref.substs,\n-            )\n-        });\n+        let trait_obligations: Vec<PredicateObligation<'_>> =\n+            self.infcx.commit_unconditionally(|_| {\n+                let poly_trait_ref = obligation.predicate.to_poly_trait_ref();\n+                let (trait_ref, _) = self.infcx\n+                    .replace_bound_vars_with_placeholders(&poly_trait_ref);\n+                let cause = obligation.derived_cause(ImplDerivedObligation);\n+                self.impl_or_trait_obligations(\n+                    cause,\n+                    obligation.recursion_depth + 1,\n+                    obligation.param_env,\n+                    trait_def_id,\n+                    &trait_ref.substs,\n+                )\n+            });\n \n         // Adds the predicates from the trait.  Note that this contains a `Self: Trait`\n         // predicate as usual.  It won't have any effect since auto traits are coinductive.\n@@ -3089,7 +3090,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n \n         // First, create the substitutions by matching the impl again,\n         // this time not in a probe.\n-        self.infcx.in_snapshot(|snapshot| {\n+        self.infcx.commit_unconditionally(|snapshot| {\n             let substs = self.rematch_impl(impl_def_id, obligation, snapshot);\n             debug!(\"confirm_impl_candidate: substs={:?}\", substs);\n             let cause = obligation.derived_cause(ImplDerivedObligation);\n@@ -3253,7 +3254,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             obligation, alias_def_id\n         );\n \n-        self.infcx.in_snapshot(|_| {\n+        self.infcx.commit_unconditionally(|_| {\n             let (predicate, _) = self.infcx()\n                 .replace_bound_vars_with_placeholders(&obligation.predicate);\n             let trait_ref = predicate.trait_ref;"}]}