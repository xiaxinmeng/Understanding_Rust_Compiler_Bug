{"sha": "dca3acb6c234f717570429614164c3cf152a2801", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRjYTNhY2I2YzIzNGY3MTc1NzA0Mjk2MTQxNjRjM2NmMTUyYTI4MDE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-05-08T16:27:01Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2021-06-06T14:29:13Z"}, "message": "linker: Inline `fn link_local_crate_native_libs_and_dependent_crate_libs`", "tree": {"sha": "2c748fa463de4fd5dc6e2afad45df495e73037ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c748fa463de4fd5dc6e2afad45df495e73037ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dca3acb6c234f717570429614164c3cf152a2801", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dca3acb6c234f717570429614164c3cf152a2801", "html_url": "https://github.com/rust-lang/rust/commit/dca3acb6c234f717570429614164c3cf152a2801", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dca3acb6c234f717570429614164c3cf152a2801/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1", "html_url": "https://github.com/rust-lang/rust/commit/f57d5ba3c9ffef4cd2402e3e7d8934bd1a6e9cc1"}], "stats": {"total": 95, "additions": 38, "deletions": 57}, "files": [{"sha": "6116013aa84ab71203f93ff63e00060c85a056f2", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 38, "deletions": 57, "changes": 95, "blob_url": "https://github.com/rust-lang/rust/blob/dca3acb6c234f717570429614164c3cf152a2801/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dca3acb6c234f717570429614164c3cf152a2801/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=dca3acb6c234f717570429614164c3cf152a2801", "patch": "@@ -1680,55 +1680,6 @@ fn add_local_crate_metadata_objects(\n     }\n }\n \n-/// Link native libraries corresponding to the current crate and all libraries corresponding to\n-/// all its dependency crates.\n-/// FIXME: Consider combining this with the functions above adding object files for the local crate.\n-fn link_local_crate_native_libs_and_dependent_crate_libs<'a, B: ArchiveBuilder<'a>>(\n-    cmd: &mut dyn Linker,\n-    sess: &'a Session,\n-    crate_type: CrateType,\n-    codegen_results: &CodegenResults,\n-    tmpdir: &Path,\n-) {\n-    // Take careful note of the ordering of the arguments we pass to the linker\n-    // here. Linkers will assume that things on the left depend on things to the\n-    // right. Things on the right cannot depend on things on the left. This is\n-    // all formally implemented in terms of resolving symbols (libs on the right\n-    // resolve unknown symbols of libs on the left, but not vice versa).\n-    //\n-    // For this reason, we have organized the arguments we pass to the linker as\n-    // such:\n-    //\n-    // 1. The local object that LLVM just generated\n-    // 2. Local native libraries\n-    // 3. Upstream rust libraries\n-    // 4. Upstream native libraries\n-    //\n-    // The rationale behind this ordering is that those items lower down in the\n-    // list can't depend on items higher up in the list. For example nothing can\n-    // depend on what we just generated (e.g., that'd be a circular dependency).\n-    // Upstream rust libraries are not allowed to depend on our local native\n-    // libraries as that would violate the structure of the DAG, in that\n-    // scenario they are required to link to them as well in a shared fashion.\n-    //\n-    // Note that upstream rust libraries may contain native dependencies as\n-    // well, but they also can't depend on what we just started to add to the\n-    // link line. And finally upstream native libraries can't depend on anything\n-    // in this DAG so far because they're only dylibs and dylibs can only depend\n-    // on other dylibs (e.g., other native deps).\n-    //\n-    // If -Zlink-native-libraries=false is set, then the assumption is that an\n-    // external build system already has the native dependencies defined, and it\n-    // will provide them to the linker itself.\n-    if sess.opts.debugging_opts.link_native_libraries {\n-        add_local_native_libraries(cmd, sess, codegen_results);\n-    }\n-    add_upstream_rust_crates::<B>(cmd, sess, codegen_results, crate_type, tmpdir);\n-    if sess.opts.debugging_opts.link_native_libraries {\n-        add_upstream_native_libraries(cmd, sess, codegen_results, crate_type);\n-    }\n-}\n-\n /// Add sysroot and other globally set directories to the directory search list.\n fn add_library_search_dirs(cmd: &mut dyn Linker, sess: &Session, self_contained: bool) {\n     // The default library location, we need this to find the runtime.\n@@ -1932,14 +1883,44 @@ fn linker_with_args<'a, B: ArchiveBuilder<'a>>(\n         cmd.no_default_libraries();\n     }\n \n-    // OBJECT-FILES-YES\n-    link_local_crate_native_libs_and_dependent_crate_libs::<B>(\n-        cmd,\n-        sess,\n-        crate_type,\n-        codegen_results,\n-        tmpdir,\n-    );\n+    // OBJECT-FILES-NO, AUDIT-ORDER\n+    // Take careful note of the ordering of the arguments we pass to the linker\n+    // here. Linkers will assume that things on the left depend on things to the\n+    // right. Things on the right cannot depend on things on the left. This is\n+    // all formally implemented in terms of resolving symbols (libs on the right\n+    // resolve unknown symbols of libs on the left, but not vice versa).\n+    //\n+    // For this reason, we have organized the arguments we pass to the linker as\n+    // such:\n+    //\n+    // 1. The local object that LLVM just generated\n+    // 2. Local native libraries\n+    // 3. Upstream rust libraries\n+    // 4. Upstream native libraries\n+    //\n+    // The rationale behind this ordering is that those items lower down in the\n+    // list can't depend on items higher up in the list. For example nothing can\n+    // depend on what we just generated (e.g., that'd be a circular dependency).\n+    // Upstream rust libraries are not allowed to depend on our local native\n+    // libraries as that would violate the structure of the DAG, in that\n+    // scenario they are required to link to them as well in a shared fashion.\n+    //\n+    // Note that upstream rust libraries may contain native dependencies as\n+    // well, but they also can't depend on what we just started to add to the\n+    // link line. And finally upstream native libraries can't depend on anything\n+    // in this DAG so far because they're only dylibs and dylibs can only depend\n+    // on other dylibs (e.g., other native deps).\n+    //\n+    // If -Zlink-native-libraries=false is set, then the assumption is that an\n+    // external build system already has the native dependencies defined, and it\n+    // will provide them to the linker itself.\n+    if sess.opts.debugging_opts.link_native_libraries {\n+        add_local_native_libraries(cmd, sess, codegen_results);\n+    }\n+    add_upstream_rust_crates::<B>(cmd, sess, codegen_results, crate_type, tmpdir);\n+    if sess.opts.debugging_opts.link_native_libraries {\n+        add_upstream_native_libraries(cmd, sess, codegen_results, crate_type);\n+    }\n \n     // OBJECT-FILES-NO, AUDIT-ORDER\n     if sess.opts.cg.profile_generate.enabled() || sess.instrument_coverage() {"}]}