{"sha": "c60a370dac4821d0a1a4d55943e28c2da2220dc7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2MGEzNzBkYWM0ODIxZDBhMWE0ZDU1OTQzZTI4YzJkYTIyMjBkYzc=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-08-21T20:14:56Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2021-08-26T16:58:25Z"}, "message": "Fix the bugs and add a regression test\n\n- All attributes for an item need to be considered at once, they can't\n  be considered a line at a time.\n- The top-level crate was not being visited. This bug was caught by\n  `extern-crate-used-only-in-link`, which I'm very glad I added.\n- Make the loader private to the module, so that only one function is\n  exposed.", "tree": {"sha": "731fc787691e47ed5ceb20c889afc17a33240bca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/731fc787691e47ed5ceb20c889afc17a33240bca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c60a370dac4821d0a1a4d55943e28c2da2220dc7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c60a370dac4821d0a1a4d55943e28c2da2220dc7", "html_url": "https://github.com/rust-lang/rust/commit/c60a370dac4821d0a1a4d55943e28c2da2220dc7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c60a370dac4821d0a1a4d55943e28c2da2220dc7/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d933edd5c6ee149d53bff4558c3fef8dc68b8766", "url": "https://api.github.com/repos/rust-lang/rust/commits/d933edd5c6ee149d53bff4558c3fef8dc68b8766", "html_url": "https://github.com/rust-lang/rust/commit/d933edd5c6ee149d53bff4558c3fef8dc68b8766"}], "stats": {"total": 60, "additions": 38, "deletions": 22}, "files": [{"sha": "4d498e6dbdb5774fbd245aced77b9b281bef2b6b", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c60a370dac4821d0a1a4d55943e28c2da2220dc7/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60a370dac4821d0a1a4d55943e28c2da2220dc7/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=c60a370dac4821d0a1a4d55943e28c2da2220dc7", "patch": "@@ -1,4 +1,3 @@\n-use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{self, Lrc};\n use rustc_driver::abort_on_err;\n@@ -307,10 +306,7 @@ crate fn create_resolver<'a>(\n     let (krate, resolver, _) = &*abort_on_err(queries.expansion(), sess).peek();\n     let resolver = resolver.clone();\n \n-    let mut loader = crate::passes::collect_intra_doc_links::IntraLinkCrateLoader::new(resolver);\n-    ast::visit::walk_crate(&mut loader, krate);\n-\n-    loader.resolver\n+    crate::passes::collect_intra_doc_links::load_intra_link_crates(resolver, krate)\n }\n \n crate fn run_global_ctxt("}, {"sha": "178c8c15a158861ca6483398e43650bf6c08f113", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c60a370dac4821d0a1a4d55943e28c2da2220dc7/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60a370dac4821d0a1a4d55943e28c2da2220dc7/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=c60a370dac4821d0a1a4d55943e28c2da2220dc7", "patch": "@@ -38,7 +38,7 @@ use crate::lint::{BROKEN_INTRA_DOC_LINKS, PRIVATE_INTRA_DOC_LINKS};\n use crate::passes::Pass;\n \n mod early;\n-crate use early::IntraLinkCrateLoader;\n+crate use early::load_intra_link_crates;\n \n crate const COLLECT_INTRA_DOC_LINKS: Pass = Pass {\n     name: \"collect-intra-doc-links\","}, {"sha": "cd90528ab9c8a9b6dd18040052680cb08ba4eef2", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 28, "deletions": 16, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c60a370dac4821d0a1a4d55943e28c2da2220dc7/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60a370dac4821d0a1a4d55943e28c2da2220dc7/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=c60a370dac4821d0a1a4d55943e28c2da2220dc7", "patch": "@@ -1,62 +1,74 @@\n use rustc_ast as ast;\n use rustc_hir::def::Namespace::TypeNS;\n-use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_INDEX};\n+use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_interface::interface;\n+use rustc_span::Span;\n \n use std::cell::RefCell;\n use std::mem;\n use std::rc::Rc;\n \n+type Resolver = Rc<RefCell<interface::BoxedResolver>>;\n // Letting the resolver escape at the end of the function leads to inconsistencies between the\n // crates the TyCtxt sees and the resolver sees (because the resolver could load more crates\n // after escaping). Hopefully `IntraLinkCrateLoader` gets all the crates we need ...\n-crate struct IntraLinkCrateLoader {\n-    current_mod: DefId,\n-    crate resolver: Rc<RefCell<interface::BoxedResolver>>,\n+crate fn load_intra_link_crates(resolver: Resolver, krate: &ast::Crate) -> Resolver {\n+    let mut loader = IntraLinkCrateLoader { current_mod: CRATE_DEF_ID, resolver };\n+    // `walk_crate` doesn't visit the crate itself for some reason.\n+    loader.load_links_in_attrs(&krate.attrs, krate.span);\n+    ast::visit::walk_crate(&mut loader, krate);\n+    loader.resolver\n }\n \n-impl IntraLinkCrateLoader {\n-    crate fn new(resolver: Rc<RefCell<interface::BoxedResolver>>) -> Self {\n-        let crate_id = LocalDefId { local_def_index: CRATE_DEF_INDEX }.to_def_id();\n-        Self { current_mod: crate_id, resolver }\n-    }\n+struct IntraLinkCrateLoader {\n+    current_mod: LocalDefId,\n+    resolver: Rc<RefCell<interface::BoxedResolver>>,\n }\n \n-impl ast::visit::Visitor<'_> for IntraLinkCrateLoader {\n-    fn visit_attribute(&mut self, attr: &ast::Attribute) {\n+impl IntraLinkCrateLoader {\n+    fn load_links_in_attrs(&mut self, attrs: &[ast::Attribute], span: Span) {\n         use crate::html::markdown::markdown_links;\n         use crate::passes::collect_intra_doc_links::preprocess_link;\n \n-        if let Some(doc) = attr.doc_str() {\n+        // FIXME: this probably needs to consider inlining\n+        let attrs = crate::clean::Attributes::from_ast(attrs, None);\n+        for (parent_module, doc) in attrs.collapsed_doc_value_by_module_level() {\n+            debug!(?doc);\n             for link in markdown_links(&doc.as_str()) {\n+                debug!(?link.link);\n                 let path_str = if let Some(Ok(x)) = preprocess_link(&link) {\n                     x.path_str\n                 } else {\n                     continue;\n                 };\n                 self.resolver.borrow_mut().access(|resolver| {\n                     let _ = resolver.resolve_str_path_error(\n-                        attr.span,\n+                        span,\n                         &path_str,\n                         TypeNS,\n-                        self.current_mod,\n+                        parent_module.unwrap_or(self.current_mod.to_def_id()),\n                     );\n                 });\n             }\n         }\n-        ast::visit::walk_attribute(self, attr);\n     }\n+}\n \n+impl ast::visit::Visitor<'_> for IntraLinkCrateLoader {\n     fn visit_item(&mut self, item: &ast::Item) {\n         use rustc_ast_lowering::ResolverAstLowering;\n \n         if let ast::ItemKind::Mod(..) = item.kind {\n             let new_mod =\n                 self.resolver.borrow_mut().access(|resolver| resolver.local_def_id(item.id));\n-            let old_mod = mem::replace(&mut self.current_mod, new_mod.to_def_id());\n+            let old_mod = mem::replace(&mut self.current_mod, new_mod);\n+\n+            self.load_links_in_attrs(&item.attrs, item.span);\n             ast::visit::walk_item(self, item);\n+\n             self.current_mod = old_mod;\n         } else {\n+            self.load_links_in_attrs(&item.attrs, item.span);\n             ast::visit::walk_item(self, item);\n         }\n     }"}, {"sha": "75d4289321cae043a338e921b736a0e0f18c8e07", "filename": "src/test/rustdoc/intra-doc/auxiliary/pub-struct.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c60a370dac4821d0a1a4d55943e28c2da2220dc7/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fpub-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60a370dac4821d0a1a4d55943e28c2da2220dc7/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fpub-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fauxiliary%2Fpub-struct.rs?ref=c60a370dac4821d0a1a4d55943e28c2da2220dc7", "patch": "@@ -0,0 +1 @@\n+pub struct SomeStruct;"}, {"sha": "bad6ec7557989087c379f2d8719dc2bc20fc0d78", "filename": "src/test/rustdoc/intra-doc/extern-reference-link.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c60a370dac4821d0a1a4d55943e28c2da2220dc7/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-reference-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c60a370dac4821d0a1a4d55943e28c2da2220dc7/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-reference-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-doc%2Fextern-reference-link.rs?ref=c60a370dac4821d0a1a4d55943e28c2da2220dc7", "patch": "@@ -0,0 +1,7 @@\n+// compile-flags: --extern pub_struct\n+// aux-build:pub-struct.rs\n+\n+/// [SomeStruct]\n+///\n+/// [SomeStruct]: pub_struct::SomeStruct\n+pub fn foo() {}"}]}