{"sha": "7d5bbf55f22c91f966a0feb130b5ff476da4f017", "node_id": "C_kwDOAAsO6NoAKDdkNWJiZjU1ZjIyYzkxZjk2NmEwZmViMTMwYjVmZjQ3NmRhNGYwMTc", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2021-07-22T18:21:48Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-11T15:11:27Z"}, "message": "prevent opaque types from appearing in impl headers", "tree": {"sha": "d3e59f29d74fb292deb61535e89111fc1bdb80f0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3e59f29d74fb292deb61535e89111fc1bdb80f0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d5bbf55f22c91f966a0feb130b5ff476da4f017", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d5bbf55f22c91f966a0feb130b5ff476da4f017", "html_url": "https://github.com/rust-lang/rust/commit/7d5bbf55f22c91f966a0feb130b5ff476da4f017", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d5bbf55f22c91f966a0feb130b5ff476da4f017/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d00e77078c0bd003323af67b4deb27627226d2e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d00e77078c0bd003323af67b4deb27627226d2e6", "html_url": "https://github.com/rust-lang/rust/commit/d00e77078c0bd003323af67b4deb27627226d2e6"}], "stats": {"total": 113, "additions": 71, "deletions": 42}, "files": [{"sha": "564c3d31368b6f9de0ba2e405c16186f6bc472b7", "filename": "compiler/rustc_typeck/src/coherence/orphan.rs", "status": "modified", "additions": 16, "deletions": 7, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/7d5bbf55f22c91f966a0feb130b5ff476da4f017/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5bbf55f22c91f966a0feb130b5ff476da4f017/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcoherence%2Forphan.rs?ref=7d5bbf55f22c91f966a0feb130b5ff476da4f017", "patch": "@@ -141,13 +141,22 @@ fn orphan_check_impl(tcx: TyCtxt<'_>, def_id: LocalDefId) -> Result<(), ErrorGua\n         }\n     }\n \n-    if let ty::Opaque(def_id, _) = *trait_ref.self_ty().kind() {\n-        let reported = tcx\n-            .sess\n-            .struct_span_err(sp, \"cannot implement trait on type alias impl trait\")\n-            .span_note(tcx.def_span(def_id), \"type alias impl trait defined here\")\n-            .emit();\n-        return Err(reported);\n+    // Ensure no opaque types are present in this impl header. See issues #76202 and #86411 for examples,\n+    // and #84660 where it would otherwise allow unsoundness.\n+    if trait_ref.has_opaque_types() {\n+        for ty in trait_ref.substs {\n+            for ty in ty.walk() {\n+                let ty::subst::GenericArgKind::Type(ty) = ty.unpack() else { continue };\n+                let ty::Opaque(def_id, _) = ty.kind() else { continue };\n+                let reported = tcx\n+                    .sess\n+                    .struct_span_err(sp, \"cannot implement trait on type alias impl trait\")\n+                    .span_note(tcx.def_span(def_id), \"type alias impl trait defined here\")\n+                    .emit();\n+                return Err(reported);\n+            }\n+        }\n+        span_bug!(sp, \"opque type not found, but `has_opaque_types` is set\")\n     }\n \n     Ok(())"}, {"sha": "afa95645a27869ba85a4948bac49ac89d2d7c584", "filename": "src/test/ui/impl-trait/auto-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.rs?ref=7d5bbf55f22c91f966a0feb130b5ff476da4f017", "patch": "@@ -20,6 +20,7 @@ impl<T: Send> AnotherTrait for T {}\n // in the future.)\n impl AnotherTrait for D<OpaqueType> {\n     //~^ ERROR conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n+    //~| ERROR cannot implement trait on type alias impl trait\n }\n \n fn main() {}"}, {"sha": "9171cfca5b14635658ff740f820a1ed7e3421e28", "filename": "src/test/ui/impl-trait/auto-trait.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait.stderr?ref=7d5bbf55f22c91f966a0feb130b5ff476da4f017", "patch": "@@ -1,3 +1,15 @@\n+error: cannot implement trait on type alias impl trait\n+  --> $DIR/auto-trait.rs:21:1\n+   |\n+LL | impl AnotherTrait for D<OpaqueType> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: type alias impl trait defined here\n+  --> $DIR/auto-trait.rs:7:19\n+   |\n+LL | type OpaqueType = impl OpaqueTrait;\n+   |                   ^^^^^^^^^^^^^^^^\n+\n error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n   --> $DIR/auto-trait.rs:21:1\n    |\n@@ -7,6 +19,6 @@ LL | impl<T: Send> AnotherTrait for T {}\n LL | impl AnotherTrait for D<OpaqueType> {\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ conflicting implementation for `D<OpaqueType>`\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "da69bb349ae24ac586d98b727b36e32c47a3f328", "filename": "src/test/ui/impl-trait/negative-reasoning.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.rs?ref=7d5bbf55f22c91f966a0feb130b5ff476da4f017", "patch": "@@ -18,6 +18,7 @@ impl<T: std::fmt::Debug> AnotherTrait for T {}\n // This is in error, because we cannot assume that `OpaqueType: !Debug`\n impl AnotherTrait for D<OpaqueType> {\n     //~^ ERROR conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n+    //~| ERROR cannot implement trait on type alias impl trait\n }\n \n fn main() {}"}, {"sha": "1a7233bca5cafa9472baf2bacf8bcc2aa882add2", "filename": "src/test/ui/impl-trait/negative-reasoning.stderr", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fnegative-reasoning.stderr?ref=7d5bbf55f22c91f966a0feb130b5ff476da4f017", "patch": "@@ -1,3 +1,15 @@\n+error: cannot implement trait on type alias impl trait\n+  --> $DIR/negative-reasoning.rs:19:1\n+   |\n+LL | impl AnotherTrait for D<OpaqueType> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: type alias impl trait defined here\n+  --> $DIR/negative-reasoning.rs:7:19\n+   |\n+LL | type OpaqueType = impl OpaqueTrait;\n+   |                   ^^^^^^^^^^^^^^^^\n+\n error[E0119]: conflicting implementations of trait `AnotherTrait` for type `D<OpaqueType>`\n   --> $DIR/negative-reasoning.rs:19:1\n    |\n@@ -9,6 +21,6 @@ LL | impl AnotherTrait for D<OpaqueType> {\n    |\n    = note: upstream crates may add a new impl of trait `std::fmt::Debug` for type `OpaqueType` in future versions\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n For more information about this error, try `rustc --explain E0119`."}, {"sha": "621c4ea6e0d4822010620f79302bf3a13e3c6d7b", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.rs?ref=7d5bbf55f22c91f966a0feb130b5ff476da4f017", "patch": "@@ -5,13 +5,14 @@ type Foo = impl PartialEq<(Foo, i32)>;\n struct Bar;\n \n impl PartialEq<(Foo, i32)> for Bar {\n+//~^ ERROR cannot implement trait on type alias impl trait\n     fn eq(&self, _other: &(Foo, i32)) -> bool {\n         true\n     }\n }\n \n fn foo() -> Foo {\n-    Bar //~ ERROR can't compare `Bar` with `(Bar, i32)`\n+    Bar\n }\n \n fn main() {}"}, {"sha": "4e8d4cce0a17f7d69cfddbc264bb98a4179b780f", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle-2.stderr?ref=7d5bbf55f22c91f966a0feb130b5ff476da4f017", "patch": "@@ -1,12 +1,14 @@\n-error[E0277]: can't compare `Bar` with `(Bar, i32)`\n-  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs:14:5\n+error: cannot implement trait on type alias impl trait\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs:7:1\n    |\n-LL |     Bar\n-   |     ^^^ no implementation for `Bar == (Bar, i32)`\n+LL | impl PartialEq<(Foo, i32)> for Bar {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = help: the trait `PartialEq<(Bar, i32)>` is not implemented for `Bar`\n-   = help: the trait `PartialEq<(Foo, i32)>` is implemented for `Bar`\n+note: type alias impl trait defined here\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle-2.rs:3:12\n+   |\n+LL | type Foo = impl PartialEq<(Foo, i32)>;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0277`."}, {"sha": "df7966f00e17238570ef51fec97ac42bf99b071d", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.rs?ref=7d5bbf55f22c91f966a0feb130b5ff476da4f017", "patch": "@@ -2,7 +2,6 @@\n \n mod a {\n     type Foo = impl PartialEq<(Foo, i32)>;\n-    //~^ ERROR unconstrained opaque type\n \n     struct Bar;\n \n@@ -15,13 +14,12 @@ mod a {\n \n mod b {\n     type Foo = impl PartialEq<(Foo, i32)>;\n-    //~^ ERROR unconstrained opaque type\n \n     struct Bar;\n \n     impl PartialEq<(Foo, i32)> for Bar {\n+        //~^ ERROR cannot implement trait on type alias impl trait\n         fn eq(&self, _other: &(Bar, i32)) -> bool {\n-            //~^ ERROR impl has stricter requirements than trait\n             true\n         }\n     }"}, {"sha": "ccb0bc0a366df78e7b1e3c107872e78a705ce18a", "filename": "src/test/ui/impl-trait/recursive-type-alias-impl-trait-declaration-too-subtle.stderr", "status": "modified", "additions": 7, "deletions": 18, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Frecursive-type-alias-impl-trait-declaration-too-subtle.stderr?ref=7d5bbf55f22c91f966a0feb130b5ff476da4f017", "patch": "@@ -1,25 +1,14 @@\n-error: unconstrained opaque type\n-  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:4:16\n+error: cannot implement trait on type alias impl trait\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:20:5\n    |\n-LL |     type Foo = impl PartialEq<(Foo, i32)>;\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL |     impl PartialEq<(Foo, i32)> for Bar {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: `Foo` must be used in combination with a concrete type within the same module\n-\n-error: unconstrained opaque type\n-  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:17:16\n+note: type alias impl trait defined here\n+  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:16:16\n    |\n LL |     type Foo = impl PartialEq<(Foo, i32)>;\n    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: `Foo` must be used in combination with a concrete type within the same module\n-\n-error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/recursive-type-alias-impl-trait-declaration-too-subtle.rs:23:9\n-   |\n-LL |         fn eq(&self, _other: &(Bar, i32)) -> bool {\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `b::Bar: PartialEq<(b::Bar, i32)>`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0276`."}, {"sha": "ebf3a99bbf9f09ae56bee7390c12aee4d6f0a487", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.rs?ref=7d5bbf55f22c91f966a0feb130b5ff476da4f017", "patch": "@@ -4,11 +4,11 @@\n use std::fmt::Debug;\n \n type FooX = impl Debug;\n-//~^ unconstrained opaque type\n \n trait Foo<A> { }\n \n impl Foo<FooX> for () { }\n+//~^ cannot implement trait on type alias impl trait\n \n fn foo() -> impl Foo<FooX> {\n     ()"}, {"sha": "bf1582639a2ca407ffce7e4ee252cfb08c7a9315", "filename": "src/test/ui/type-alias-impl-trait/nested-tait-inference3.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7d5bbf55f22c91f966a0feb130b5ff476da4f017/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fnested-tait-inference3.stderr?ref=7d5bbf55f22c91f966a0feb130b5ff476da4f017", "patch": "@@ -1,10 +1,14 @@\n-error: unconstrained opaque type\n+error: cannot implement trait on type alias impl trait\n+  --> $DIR/nested-tait-inference3.rs:10:1\n+   |\n+LL | impl Foo<FooX> for () { }\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: type alias impl trait defined here\n   --> $DIR/nested-tait-inference3.rs:6:13\n    |\n LL | type FooX = impl Debug;\n    |             ^^^^^^^^^^\n-   |\n-   = note: `FooX` must be used in combination with a concrete type within the same module\n \n error: aborting due to previous error\n "}]}