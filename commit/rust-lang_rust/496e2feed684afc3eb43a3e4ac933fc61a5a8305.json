{"sha": "496e2feed684afc3eb43a3e4ac933fc61a5a8305", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NmUyZmVlZDY4NGFmYzNlYjQzYTNlNGFjOTMzZmM2MWE1YTgzMDU=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-10-17T01:27:12Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-17T01:27:12Z"}, "message": "Rollup merge of #76199 - Mark-Simulacrum:void-zero, r=nikomatsakis\n\nPermit uninhabited enums to cast into ints\n\nThis essentially reverts part of #6204; it is unclear why that [commit](https://github.com/rust-lang/rust/pull/6204/commits/c0f587de34f30b060df8a88c4068740e587b9340) was introduced, and I suspect no one remembers.\n\nThe changed code was only called from casting checks and appears to not affect any callers of that code (other than permitting this one case).\n\nFixes #75647.", "tree": {"sha": "d0ba4cb48e0ab2b17ec2e35adf5efa86eef03ada", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d0ba4cb48e0ab2b17ec2e35adf5efa86eef03ada"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/496e2feed684afc3eb43a3e4ac933fc61a5a8305", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfikhxCRBK7hj4Ov3rIwAAdHIIAChDLNp0PegPXz1fKPxdd2Vl\nEZuKozFB2iIF2vtdm/WhGO6a/MTtJXBigroP+N3UAX8cGHqD6UL0C5AlhyGuXgFR\n7oiouYZ3KKKKKYts4tjG0OqvF12J41EGdKbawjxlw+lnthXzBrajFN5Ef9BRvUHA\nNGiIUIW5QMxSa6THnPpNvELSjuYCQrCQF8Hl6zW96LwRImfIOpDkIwXxPDwvpQRQ\n2XCct7qC3Weu53Z7s+W01FeE9yojHZepR58Cta2VfMcwggCFZfYTeK4VKVznXqz5\ntvm/0lsTflbohD5ED3Wh9GY0wfdPrpD1OPClxf7AZn5lKv0nfQqf0JaHaBDOfxE=\n=KGJT\n-----END PGP SIGNATURE-----\n", "payload": "tree d0ba4cb48e0ab2b17ec2e35adf5efa86eef03ada\nparent f1b97ee7f8ffb1a814944b85c7e05a1555a7eda5\nparent 990a39596cf3b33e550f2045f78a62970f8d78f8\nauthor Dylan DPC <dylan.dpc@gmail.com> 1602898032 +0200\ncommitter GitHub <noreply@github.com> 1602898032 +0200\n\nRollup merge of #76199 - Mark-Simulacrum:void-zero, r=nikomatsakis\n\nPermit uninhabited enums to cast into ints\n\nThis essentially reverts part of #6204; it is unclear why that [commit](https://github.com/rust-lang/rust/pull/6204/commits/c0f587de34f30b060df8a88c4068740e587b9340) was introduced, and I suspect no one remembers.\n\nThe changed code was only called from casting checks and appears to not affect any callers of that code (other than permitting this one case).\n\nFixes #75647.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/496e2feed684afc3eb43a3e4ac933fc61a5a8305", "html_url": "https://github.com/rust-lang/rust/commit/496e2feed684afc3eb43a3e4ac933fc61a5a8305", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/496e2feed684afc3eb43a3e4ac933fc61a5a8305/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1b97ee7f8ffb1a814944b85c7e05a1555a7eda5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1b97ee7f8ffb1a814944b85c7e05a1555a7eda5", "html_url": "https://github.com/rust-lang/rust/commit/f1b97ee7f8ffb1a814944b85c7e05a1555a7eda5"}, {"sha": "990a39596cf3b33e550f2045f78a62970f8d78f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/990a39596cf3b33e550f2045f78a62970f8d78f8", "html_url": "https://github.com/rust-lang/rust/commit/990a39596cf3b33e550f2045f78a62970f8d78f8"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "bc84eccfcf56c9b0de99ec811804e5b7df886618", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/496e2feed684afc3eb43a3e4ac933fc61a5a8305/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/496e2feed684afc3eb43a3e4ac933fc61a5a8305/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=496e2feed684afc3eb43a3e4ac933fc61a5a8305", "patch": "@@ -2436,8 +2436,10 @@ impl<'tcx> AdtDef {\n         self.variants.iter().flat_map(|v| v.fields.iter())\n     }\n \n+    /// Whether the ADT lacks fields. Note that this includes uninhabited enums,\n+    /// e.g., `enum Void {}` is considered payload free as well.\n     pub fn is_payloadfree(&self) -> bool {\n-        !self.variants.is_empty() && self.variants.iter().all(|v| v.fields.is_empty())\n+        self.variants.iter().all(|v| v.fields.is_empty())\n     }\n \n     /// Return a `VariantDef` given a variant id."}, {"sha": "affeae546b2aafce2fe45d4d558194f428a2d32b", "filename": "compiler/rustc_mir/src/interpret/cast.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/496e2feed684afc3eb43a3e4ac933fc61a5a8305/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/496e2feed684afc3eb43a3e4ac933fc61a5a8305/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fcast.rs?ref=496e2feed684afc3eb43a3e4ac933fc61a5a8305", "patch": "@@ -139,9 +139,14 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n         // # First handle non-scalar source values.\n \n-        // Handle cast from a univariant (ZST) enum.\n+        // Handle cast from a ZST enum (0 or 1 variants).\n         match src.layout.variants {\n             Variants::Single { index } => {\n+                if src.layout.abi.is_uninhabited() {\n+                    // This is dead code, because an uninhabited enum is UB to\n+                    // instantiate.\n+                    throw_ub!(Unreachable);\n+                }\n                 if let Some(discr) = src.layout.ty.discriminant_for_variant(*self.tcx, index) {\n                     assert!(src.layout.is_zst());\n                     let discr_layout = self.layout_of(discr.ty)?;"}, {"sha": "5a75c94c42f0bdd7244825d61d477012836e883a", "filename": "src/test/ui/uninhabited/uninhabited-enum-cast.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/496e2feed684afc3eb43a3e4ac933fc61a5a8305/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-enum-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/496e2feed684afc3eb43a3e4ac933fc61a5a8305/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-enum-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-enum-cast.rs?ref=496e2feed684afc3eb43a3e4ac933fc61a5a8305", "patch": "@@ -1,7 +1,9 @@\n+// check-pass\n+\n enum E {}\n \n fn f(e: E) {\n-    println!(\"{}\", (e as isize).to_string());   //~ ERROR non-primitive cast\n+    println!(\"{}\", (e as isize).to_string());\n }\n \n fn main() {}"}, {"sha": "a9f10dfec994a9e4c7a71ca776e2fca44abb058f", "filename": "src/test/ui/uninhabited/uninhabited-enum-cast.stderr", "status": "removed", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f1b97ee7f8ffb1a814944b85c7e05a1555a7eda5/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-enum-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f1b97ee7f8ffb1a814944b85c7e05a1555a7eda5/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-enum-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-enum-cast.stderr?ref=f1b97ee7f8ffb1a814944b85c7e05a1555a7eda5", "patch": "@@ -1,9 +0,0 @@\n-error[E0605]: non-primitive cast: `E` as `isize`\n-  --> $DIR/uninhabited-enum-cast.rs:4:20\n-   |\n-LL |     println!(\"{}\", (e as isize).to_string());\n-   |                    ^^^^^^^^^^^^ an `as` expression can only be used to convert between primitive types or to coerce to a specific trait object\n-\n-error: aborting due to previous error\n-\n-For more information about this error, try `rustc --explain E0605`."}]}