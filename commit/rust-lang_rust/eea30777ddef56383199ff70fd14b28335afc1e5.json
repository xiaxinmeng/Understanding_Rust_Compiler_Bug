{"sha": "eea30777ddef56383199ff70fd14b28335afc1e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlYTMwNzc3ZGRlZjU2MzgzMTk5ZmY3MGZkMTRiMjgzMzVhZmMxZTU=", "commit": {"author": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-10-17T12:39:24Z"}, "committer": {"name": "sinkuu", "email": "sinkuu@sinkuu.xyz", "date": "2017-10-17T12:40:46Z"}, "message": "Type parameter change and type change are now in a multispan suggestion", "tree": {"sha": "680a04328bc3cb88b15482b0c99204a312f61371", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/680a04328bc3cb88b15482b0c99204a312f61371"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eea30777ddef56383199ff70fd14b28335afc1e5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eea30777ddef56383199ff70fd14b28335afc1e5", "html_url": "https://github.com/rust-lang/rust/commit/eea30777ddef56383199ff70fd14b28335afc1e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eea30777ddef56383199ff70fd14b28335afc1e5/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4f45e85b1adb87de2f1e46a5aeaef7b78dba288", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4f45e85b1adb87de2f1e46a5aeaef7b78dba288", "html_url": "https://github.com/rust-lang/rust/commit/a4f45e85b1adb87de2f1e46a5aeaef7b78dba288"}], "stats": {"total": 107, "additions": 35, "deletions": 72}, "files": [{"sha": "a284392bfa0bd773634b5944e520210a093996fa", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 25, "deletions": 22, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/eea30777ddef56383199ff70fd14b28335afc1e5/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eea30777ddef56383199ff70fd14b28335afc1e5/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=eea30777ddef56383199ff70fd14b28335afc1e5", "patch": "@@ -1453,8 +1453,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InvalidUpcastComparisons {\n     }\n }\n \n-/// **What it does:** Checks for public `impl` or `fn` missing generalization over\n-/// different hashers and implicitly defaulting to the default hashing\n+/// **What it does:** Checks for public `impl` or `fn` missing generalization\n+/// over different hashers and implicitly defaulting to the default hashing\n /// algorithm (SipHash).\n ///\n /// **Why is this bad?** `HashMap` or `HashSet` with custom hashers cannot be\n@@ -1505,26 +1505,29 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n                 &generics_snip[1..generics_snip.len() - 1]\n             };\n \n-            db.span_suggestion(\n-                generics_suggestion_span,\n-                \"consider adding a type parameter\",\n-                format!(\n-                    \"<{}{}S: ::std::hash::BuildHasher{}>\",\n-                    generics_snip,\n-                    if generics_snip.is_empty() { \"\" } else { \", \" },\n-                    if vis.suggestions.is_empty() {\n-                        \"\"\n-                    } else {\n-                        // request users to add `Default` bound so that generic constructors can be used\n-                        \" + Default\"\n-                    },\n-                ),\n-            );\n-\n-            db.span_suggestion(\n-                target.span(),\n-                \"...and change the type to\",\n-                format!(\"{}<{}, S>\", target.type_name(), target.type_arguments(),),\n+            multispan_sugg(\n+                db,\n+                \"consider adding a type parameter\".to_string(),\n+                vec![\n+                    (\n+                        generics_suggestion_span,\n+                        format!(\n+                            \"<{}{}S: ::std::hash::BuildHasher{}>\",\n+                            generics_snip,\n+                            if generics_snip.is_empty() { \"\" } else { \", \" },\n+                            if vis.suggestions.is_empty() {\n+                                \"\"\n+                            } else {\n+                                // request users to add `Default` bound so that generic constructors can be used\n+                                \" + Default\"\n+                            },\n+                        ),\n+                    ),\n+                    (\n+                        target.span(),\n+                        format!(\"{}<{}, S>\", target.type_name(), target.type_arguments(),),\n+                    ),\n+                ],\n             );\n \n             if !vis.suggestions.is_empty() {"}, {"sha": "cc0bdc327b4afa3ac8234e285f63de47526c65cf", "filename": "tests/ui/implicit_hasher.stderr", "status": "modified", "additions": 10, "deletions": 50, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/eea30777ddef56383199ff70fd14b28335afc1e5/tests%2Fui%2Fimplicit_hasher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/eea30777ddef56383199ff70fd14b28335afc1e5/tests%2Fui%2Fimplicit_hasher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.stderr?ref=eea30777ddef56383199ff70fd14b28335afc1e5", "patch": "@@ -7,12 +7,8 @@ error: impl for `HashMap` should be generarized over different hashers\n    = note: `-D implicit-hasher` implied by `-D warnings`\n help: consider adding a type parameter\n    |\n-11 | impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<i8> for HashMap<K, V> {\n+11 | impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<i8> for HashMap<K, V, S> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: ...and change the type to\n-   |\n-11 | impl<K: Hash + Eq, V> Foo<i8> for HashMap<K, V, S> {\n-   |                                   ^^^^^^^^^^^^^^^^\n help: ...and use generic constructor\n    |\n 17 |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n@@ -26,12 +22,8 @@ error: impl for `HashMap` should be generarized over different hashers\n    |\n help: consider adding a type parameter\n    |\n-20 | impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<i8> for (HashMap<K, V>,) {\n+20 | impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<i8> for (HashMap<K, V, S>,) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: ...and change the type to\n-   |\n-20 | impl<K: Hash + Eq, V> Foo<i8> for (HashMap<K, V, S>,) {\n-   |                                    ^^^^^^^^^^^^^^^^\n help: ...and use generic constructor\n    |\n 22 |         ((HashMap::default(),), (HashMap::with_capacity_and_hasher(10, Default::default()),))\n@@ -45,12 +37,8 @@ error: impl for `HashMap` should be generarized over different hashers\n    |\n help: consider adding a type parameter\n    |\n-25 | impl<S: ::std::hash::BuildHasher + Default> Foo<i16> for HashMap<String, String> {\n+25 | impl<S: ::std::hash::BuildHasher + Default> Foo<i16> for HashMap<String, String, S> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: ...and change the type to\n-   |\n-25 | impl Foo<i16> for HashMap<String, String, S> {\n-   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n help: ...and use generic constructor\n    |\n 27 |         (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n@@ -64,12 +52,8 @@ error: impl for `HashSet` should be generarized over different hashers\n    |\n help: consider adding a type parameter\n    |\n-43 | impl<T: Hash + Eq, S: ::std::hash::BuildHasher + Default> Foo<i8> for HashSet<T> {\n+43 | impl<T: Hash + Eq, S: ::std::hash::BuildHasher + Default> Foo<i8> for HashSet<T, S> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: ...and change the type to\n-   |\n-43 | impl<T: Hash + Eq> Foo<i8> for HashSet<T, S> {\n-   |                                ^^^^^^^^^^^^^\n help: ...and use generic constructor\n    |\n 45 |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default::default()))\n@@ -83,12 +67,8 @@ error: impl for `HashSet` should be generarized over different hashers\n    |\n help: consider adding a type parameter\n    |\n-48 | impl<S: ::std::hash::BuildHasher + Default> Foo<i16> for HashSet<String> {\n+48 | impl<S: ::std::hash::BuildHasher + Default> Foo<i16> for HashSet<String, S> {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: ...and change the type to\n-   |\n-48 | impl Foo<i16> for HashSet<String, S> {\n-   |                   ^^^^^^^^^^^^^^^^^^\n help: ...and use generic constructor\n    |\n 50 |         (HashSet::default(), HashSet::with_capacity_and_hasher(10, Default::default()))\n@@ -102,12 +82,8 @@ error: parameter of type `HashMap` should be generarized over different hashers\n    |\n help: consider adding a type parameter\n    |\n-65 | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {\n+65 | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: ...and change the type to\n-   |\n-65 | pub fn foo(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {\n-   |                       ^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashSet` should be generarized over different hashers\n   --> $DIR/implicit_hasher.rs:65:53\n@@ -117,12 +93,8 @@ error: parameter of type `HashSet` should be generarized over different hashers\n    |\n help: consider adding a type parameter\n    |\n-65 | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {\n+65 | pub fn foo<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {\n    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: ...and change the type to\n-   |\n-65 | pub fn foo(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {\n-   |                                                     ^^^^^^^^^^^^^^^\n \n error: impl for `HashMap` should be generarized over different hashers\n   --> $DIR/implicit_hasher.rs:70:43\n@@ -135,12 +107,8 @@ error: impl for `HashMap` should be generarized over different hashers\n    |\n help: consider adding a type parameter\n    |\n-70 |         impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<u8> for HashMap<K, V> {\n+70 |         impl<K: Hash + Eq, V, S: ::std::hash::BuildHasher + Default> Foo<u8> for HashMap<K, V, S> {\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: ...and change the type to\n-   |\n-70 |         impl<K: Hash + Eq, V> Foo<u8> for HashMap<K, V, S> {\n-   |                                           ^^^^^^^^^^^^^^^^\n help: ...and use generic constructor\n    |\n 72 |                 (HashMap::default(), HashMap::with_capacity_and_hasher(10, Default::default()))\n@@ -157,12 +125,8 @@ error: parameter of type `HashMap` should be generarized over different hashers\n    |\n help: consider adding a type parameter\n    |\n-78 |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {\n+78 |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: ...and change the type to\n-   |\n-78 |         pub fn $name(_map: &mut HashMap<i32, i32, S>, _set: &mut HashSet<i32>) {\n-   |                                 ^^^^^^^^^^^^^^^^^^^^\n \n error: parameter of type `HashSet` should be generarized over different hashers\n   --> $DIR/implicit_hasher.rs:78:63\n@@ -175,10 +139,6 @@ error: parameter of type `HashSet` should be generarized over different hashers\n    |\n help: consider adding a type parameter\n    |\n-78 |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32>) {\n+78 |         pub fn $name<S: ::std::hash::BuildHasher>(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: ...and change the type to\n-   |\n-78 |         pub fn $name(_map: &mut HashMap<i32, i32>, _set: &mut HashSet<i32, S>) {\n-   |                                                               ^^^^^^^^^^^^^^^\n "}]}