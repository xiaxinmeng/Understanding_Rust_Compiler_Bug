{"sha": "f653d9f9bf9b69211226dabd13db188afd6b1fdb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2NTNkOWY5YmY5YjY5MjExMjI2ZGFiZDEzZGIxODhhZmQ2YjFmZGI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-29T04:26:42Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-07-29T04:26:42Z"}, "message": "auto merge of #16033 : nham/rust/hash_tuple_impl, r=alexcrichton\n\nPreviously the implementation of Hash was limited to tuples of up to arity 8. This increases it to tuples of up to arity 12. \r\n\r\nAlso, the implementation macro for `Hash` used to expand to something like this:\r\n\r\n    impl Hash for (a7,)\r\n    impl Hash for (a6, a7)\r\n    impl Hash for (a5, a6, a7)\r\n    ...\r\n\r\nThis style is inconsistent with the implementations in core::tuple, which look like this:\r\n\r\n    impl Trait for (A,)\r\n    impl Trait for (A, B)\r\n    impl Trait for (A, B, C)\r\n    ...\r\n\r\nThis is perhaps a minor point, but it does mean the documentation pages are inconsistent. Compare the tuple implementations in the documentation for [Hash](http://static.rust-lang.org/doc/master/std/hash/trait.Hash.html) and [PartialOrd](http://static.rust-lang.org/doc/master/core/cmp/trait.PartialOrd.html)\r\n\r\nThis changes the Hash implementation to be consistent with `core::tuple`.", "tree": {"sha": "54ba292ec5b734b90a59fd5823a9df29eae7836f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54ba292ec5b734b90a59fd5823a9df29eae7836f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f653d9f9bf9b69211226dabd13db188afd6b1fdb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f653d9f9bf9b69211226dabd13db188afd6b1fdb", "html_url": "https://github.com/rust-lang/rust/commit/f653d9f9bf9b69211226dabd13db188afd6b1fdb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f653d9f9bf9b69211226dabd13db188afd6b1fdb/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e250109f9d40deefbca1a42f602d3f0b59ca1e6", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e250109f9d40deefbca1a42f602d3f0b59ca1e6", "html_url": "https://github.com/rust-lang/rust/commit/9e250109f9d40deefbca1a42f602d3f0b59ca1e6"}, {"sha": "e7b41caba8b968450717b487087b5a2cdc10461a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b41caba8b968450717b487087b5a2cdc10461a", "html_url": "https://github.com/rust-lang/rust/commit/e7b41caba8b968450717b487087b5a2cdc10461a"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "6f8b63953e2b495d4f8a60ca6bbd95f05cc96448", "filename": "src/libcollections/hash/mod.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/f653d9f9bf9b69211226dabd13db188afd6b1fdb/src%2Flibcollections%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f653d9f9bf9b69211226dabd13db188afd6b1fdb/src%2Flibcollections%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fhash%2Fmod.rs?ref=f653d9f9bf9b69211226dabd13db188afd6b1fdb", "patch": "@@ -155,29 +155,36 @@ macro_rules! impl_hash_tuple(\n         }\n     );\n \n-    ($A:ident $($B:ident)*) => (\n-        impl<\n-            S: Writer,\n-            $A: Hash<S> $(, $B: Hash<S>)*\n-        > Hash<S> for ($A, $($B),*) {\n+    ( $($name:ident)+) => (\n+        impl<S: Writer, $($name: Hash<S>),*> Hash<S> for ($($name,)*) {\n+            #[allow(uppercase_variables)]\n             #[inline]\n             fn hash(&self, state: &mut S) {\n                 match *self {\n-                    (ref $A, $(ref $B),*) => {\n-                        $A.hash(state);\n+                    ($(ref $name,)*) => {\n                         $(\n-                            $B.hash(state);\n+                            $name.hash(state);\n                         )*\n                     }\n                 }\n             }\n         }\n-\n-        impl_hash_tuple!($($B)*)\n     );\n )\n \n-impl_hash_tuple!(a0 a1 a2 a3 a4 a5 a6 a7)\n+impl_hash_tuple!()\n+impl_hash_tuple!(A)\n+impl_hash_tuple!(A B)\n+impl_hash_tuple!(A B C)\n+impl_hash_tuple!(A B C D)\n+impl_hash_tuple!(A B C D E)\n+impl_hash_tuple!(A B C D E F)\n+impl_hash_tuple!(A B C D E F G)\n+impl_hash_tuple!(A B C D E F G H)\n+impl_hash_tuple!(A B C D E F G H I)\n+impl_hash_tuple!(A B C D E F G H I J)\n+impl_hash_tuple!(A B C D E F G H I J K)\n+impl_hash_tuple!(A B C D E F G H I J K L)\n \n impl<'a, S: Writer, T: Hash<S>> Hash<S> for &'a [T] {\n     #[inline]"}]}