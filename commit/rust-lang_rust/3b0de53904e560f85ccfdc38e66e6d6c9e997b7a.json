{"sha": "3b0de53904e560f85ccfdc38e66e6d6c9e997b7a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiMGRlNTM5MDRlNTYwZjg1Y2NmZGMzOGU2NmU2ZDZjOWU5OTdiN2E=", "commit": {"author": {"name": "Marcus Klaas de Vries", "email": "mail@marcusklaas.nl", "date": "2019-01-16T15:34:33Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-01-19T12:37:25Z"}, "message": "Work on type inference for ADT patterns", "tree": {"sha": "2459272caf6aea31d38b414bc15f38f61c2b64ef", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2459272caf6aea31d38b414bc15f38f61c2b64ef"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b0de53904e560f85ccfdc38e66e6d6c9e997b7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b0de53904e560f85ccfdc38e66e6d6c9e997b7a", "html_url": "https://github.com/rust-lang/rust/commit/3b0de53904e560f85ccfdc38e66e6d6c9e997b7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b0de53904e560f85ccfdc38e66e6d6c9e997b7a/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5648dcd36e65dde9c8f41884eed64a7e1a1d2073", "url": "https://api.github.com/repos/rust-lang/rust/commits/5648dcd36e65dde9c8f41884eed64a7e1a1d2073", "html_url": "https://github.com/rust-lang/rust/commit/5648dcd36e65dde9c8f41884eed64a7e1a1d2073"}], "stats": {"total": 35, "additions": 32, "deletions": 3}, "files": [{"sha": "a1335671471b3fe986f1d41205f18e9a635e8083", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 28, "deletions": 2, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3b0de53904e560f85ccfdc38e66e6d6c9e997b7a/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0de53904e560f85ccfdc38e66e6d6c9e997b7a/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=3b0de53904e560f85ccfdc38e66e6d6c9e997b7a", "patch": "@@ -876,6 +876,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     // a Ty itself\n     fn infer_pat(&mut self, pat: PatId, expected: &Expectation) -> Ty {\n         let body = Arc::clone(&self.body); // avoid borrow checker problem\n+\n         match (&body[pat], &expected.ty) {\n             (Pat::Tuple(ref args), &Ty::Tuple(ref tuple_args))\n                 if args.len() == tuple_args.len() =>\n@@ -890,6 +891,31 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             {\n                 self.infer_pat(pat, &Expectation::has_type((&**sub_ty).clone()));\n             }\n+            (pattern, &Ty::Adt { def_id, .. }) => {\n+                let adt_def = def_id.resolve(self.db);\n+                match (pattern, adt_def) {\n+                    (&Pat::Struct, Def::Struct(s)) => {}\n+                    (\n+                        &Pat::TupleStruct {\n+                            path: ref p,\n+                            args: ref sub_pats,\n+                        },\n+                        Def::Enum(ref e),\n+                    ) => {\n+                        // TODO: resolve enum\n+                    }\n+                    (\n+                        &Pat::TupleStruct {\n+                            path: ref p,\n+                            args: ref sub_pats,\n+                        },\n+                        Def::EnumVariant(ref e),\n+                    ) => {\n+                        let variant_data = self.db.enum_variant_data(e.def_id);\n+                    }\n+                    _ => {}\n+                }\n+            }\n             // TODO: implement more\n             (_, ref _expected_ty) => {}\n         };\n@@ -1197,7 +1223,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                         decl_ty\n                     };\n \n-                    self.infer_pat(*pat, &Expectation::has_type(ty))?;\n+                    self.infer_pat(*pat, &Expectation::has_type(ty));\n                 }\n                 Statement::Expr(expr) => {\n                     self.infer_expr(*expr, &Expectation::none());\n@@ -1218,7 +1244,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             let ty = self.make_ty(type_ref);\n             let ty = self.insert_type_vars(ty);\n \n-            self.infer_pat(*pat, &Expectation::has_type(ty))?;\n+            self.infer_pat(*pat, &Expectation::has_type(ty));\n         }\n         self.return_ty = {\n             let ty = self.make_ty(signature.ret_type());"}, {"sha": "ff2c8b0d4da329a46f594baafba4f1da024bc5c4", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3b0de53904e560f85ccfdc38e66e6d6c9e997b7a/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b0de53904e560f85ccfdc38e66e6d6c9e997b7a/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=3b0de53904e560f85ccfdc38e66e6d6c9e997b7a", "patch": "@@ -362,7 +362,10 @@ fn test(x: &str, y: isize) {\n fn infer_pattern() {\n     check_inference(\n         r#\"\n-enum E { A { x: usize }, B }\n+enum E {\n+    A { x: usize },\n+    B\n+}\n \n fn test(x: &i32) {\n     let y = x;"}]}