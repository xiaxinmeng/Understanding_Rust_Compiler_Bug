{"sha": "a257fd06b36d2e7310e5e38823f6636343a37331", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEyNTdmZDA2YjM2ZDJlNzMxMGU1ZTM4ODIzZjY2MzYzNDNhMzczMzE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-30T14:49:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-30T14:49:39Z"}, "message": "Merge #5597\n\n5597: Rename FieldDef -> Field r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "e360ad1f518319883677364f49d75d5c508aafcd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e360ad1f518319883677364f49d75d5c508aafcd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a257fd06b36d2e7310e5e38823f6636343a37331", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfIt4DCRBK7hj4Ov3rIwAAdHIIACsru6Lodql3W25SFpC9kz+2\nGSLm5Ks7i6XTXP//0S2PMA34qwcsshY151XYAebx1my0Xe583dHLU2M86T/LaHr6\nzkX9xvHh/5cjb59g3Rbv5jeKTkTWPxrKOgarZyaS9Jw2UjGi8P8JM5sKb3z7q+2L\npd3Ef7YVXWZIkzHOHFLC9GsWF4I9Hm68I8I2n/3BqbydK0pzFlOP37eJz72IV3sN\nyouA15cnD6s7Ehq0x+OvFpPFdXTFs6bBRjwIwApHwgahWdQOfOl9n3tAuq9y7lvh\n5wOXhsIlBpTMpy4JlWLY0FVdO6QkLCdp3EPTu+Id/BVvfAWvojvRC9OhABAp63E=\n=EHNQ\n-----END PGP SIGNATURE-----\n", "payload": "tree e360ad1f518319883677364f49d75d5c508aafcd\nparent 282702c2877e3f9002308b1b63fc472b5e799c56\nparent 0a9e3ccc262fbcbd4cdaab30384f8cb71584544b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1596120579 +0000\ncommitter GitHub <noreply@github.com> 1596120579 +0000\n\nMerge #5597\n\n5597: Rename FieldDef -> Field r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a257fd06b36d2e7310e5e38823f6636343a37331", "html_url": "https://github.com/rust-lang/rust/commit/a257fd06b36d2e7310e5e38823f6636343a37331", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a257fd06b36d2e7310e5e38823f6636343a37331/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "282702c2877e3f9002308b1b63fc472b5e799c56", "url": "https://api.github.com/repos/rust-lang/rust/commits/282702c2877e3f9002308b1b63fc472b5e799c56", "html_url": "https://github.com/rust-lang/rust/commit/282702c2877e3f9002308b1b63fc472b5e799c56"}, {"sha": "0a9e3ccc262fbcbd4cdaab30384f8cb71584544b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a9e3ccc262fbcbd4cdaab30384f8cb71584544b", "html_url": "https://github.com/rust-lang/rust/commit/0a9e3ccc262fbcbd4cdaab30384f8cb71584544b"}], "stats": {"total": 447, "additions": 219, "deletions": 228}, "files": [{"sha": "72d06d55b733c771bb0f03f96f7ff2e3d3dfec10", "filename": "crates/ra_assists/src/handlers/change_visibility.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fchange_visibility.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -47,7 +47,7 @@ fn add_vis(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n         }\n         (vis_offset(&parent), keyword.text_range())\n     } else if let Some(field_name) = ctx.find_node_at_offset::<ast::Name>() {\n-        let field = field_name.syntax().ancestors().find_map(ast::RecordFieldDef::cast)?;\n+        let field = field_name.syntax().ancestors().find_map(ast::RecordField::cast)?;\n         if field.name()? != field_name {\n             mark::hit!(change_visibility_field_false_positive);\n             return None;\n@@ -56,7 +56,7 @@ fn add_vis(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n             return None;\n         }\n         (vis_offset(field.syntax()), field_name.syntax().text_range())\n-    } else if let Some(field) = ctx.find_node_at_offset::<ast::TupleFieldDef>() {\n+    } else if let Some(field) = ctx.find_node_at_offset::<ast::TupleField>() {\n         if field.visibility().is_some() {\n             return None;\n         }"}, {"sha": "15327facb4b72d2c83073c01819c7e7bd6cb9ab5", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -43,7 +43,7 @@ pub(crate) fn move_bounds_to_where_clause(acc: &mut Assists, ctx: &AssistContext\n             ast::EnumDef(it) => it.variant_list()?.syntax().clone().into(),\n             ast::StructDef(it) => {\n                 it.syntax().children_with_tokens()\n-                    .find(|it| it.kind() == RECORD_FIELD_DEF_LIST || it.kind() == T![;])?\n+                    .find(|it| it.kind() == RECORD_FIELD_LIST || it.kind() == T![;])?\n             },\n             _ => return None\n         }"}, {"sha": "36c0bdc9e558372f3a799f226a4d452546c1eafb", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -361,8 +361,8 @@ pub struct Field {\n \n #[derive(Debug, PartialEq, Eq)]\n pub enum FieldSource {\n-    Named(ast::RecordFieldDef),\n-    Pos(ast::TupleFieldDef),\n+    Named(ast::RecordField),\n+    Pos(ast::TupleField),\n }\n \n impl Field {"}, {"sha": "3e9c54a397c37204bbaae6ca3dfed5a02993bf4b", "filename": "crates/ra_hir/src/semantics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_hir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -589,8 +589,8 @@ to_def_impls![\n     (crate::Const, ast::ConstDef, const_to_def),\n     (crate::Static, ast::StaticDef, static_to_def),\n     (crate::Function, ast::Fn, fn_to_def),\n-    (crate::Field, ast::RecordFieldDef, record_field_to_def),\n-    (crate::Field, ast::TupleFieldDef, tuple_field_to_def),\n+    (crate::Field, ast::RecordField, record_field_to_def),\n+    (crate::Field, ast::TupleField, tuple_field_to_def),\n     (crate::EnumVariant, ast::EnumVariant, enum_variant_to_def),\n     (crate::TypeParam, ast::TypeParam, type_param_to_def),\n     (crate::MacroDef, ast::MacroCall, macro_call_to_def), // this one is dubious, not all calls are macros"}, {"sha": "4f90f588e0014f919a0f929769467915aafd3942", "filename": "crates/ra_hir/src/semantics/source_to_def.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsemantics%2Fsource_to_def.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -92,16 +92,10 @@ impl SourceToDefCtx<'_, '_> {\n     pub(super) fn type_alias_to_def(&mut self, src: InFile<ast::TypeAlias>) -> Option<TypeAliasId> {\n         self.to_def(src, keys::TYPE_ALIAS)\n     }\n-    pub(super) fn record_field_to_def(\n-        &mut self,\n-        src: InFile<ast::RecordFieldDef>,\n-    ) -> Option<FieldId> {\n+    pub(super) fn record_field_to_def(&mut self, src: InFile<ast::RecordField>) -> Option<FieldId> {\n         self.to_def(src, keys::RECORD_FIELD)\n     }\n-    pub(super) fn tuple_field_to_def(\n-        &mut self,\n-        src: InFile<ast::TupleFieldDef>,\n-    ) -> Option<FieldId> {\n+    pub(super) fn tuple_field_to_def(&mut self, src: InFile<ast::TupleField>) -> Option<FieldId> {\n         self.to_def(src, keys::TUPLE_FIELD)\n     }\n     pub(super) fn enum_variant_to_def("}, {"sha": "2be23c45d365fdffe5e2affad4c65001bfc32dcd", "filename": "crates/ra_hir_def/src/adt.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_hir_def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fadt.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -179,7 +179,7 @@ impl VariantData {\n \n impl HasChildSource for VariantId {\n     type ChildId = LocalFieldId;\n-    type Value = Either<ast::TupleFieldDef, ast::RecordFieldDef>;\n+    type Value = Either<ast::TupleField, ast::RecordField>;\n \n     fn child_source(&self, db: &dyn DefDatabase) -> InFile<ArenaMap<Self::ChildId, Self::Value>> {\n         let (src, module_id) = match self {\n@@ -194,7 +194,7 @@ impl HasChildSource for VariantId {\n             }\n             VariantId::UnionId(it) => (\n                 it.lookup(db).source(db).map(|it| {\n-                    it.record_field_def_list()\n+                    it.record_field_list()\n                         .map(ast::StructKind::Record)\n                         .unwrap_or(ast::StructKind::Unit)\n                 }),\n@@ -218,7 +218,7 @@ pub enum StructKind {\n fn lower_struct(\n     db: &dyn DefDatabase,\n     expander: &mut CfgExpander,\n-    trace: &mut Trace<FieldData, Either<ast::TupleFieldDef, ast::RecordFieldDef>>,\n+    trace: &mut Trace<FieldData, Either<ast::TupleField, ast::RecordField>>,\n     ast: &InFile<ast::StructKind>,\n ) -> StructKind {\n     let ctx = LowerCtx::new(db, ast.file_id);"}, {"sha": "df909ee9e449e4e78fc8abec18144b31898bf032", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 15, "deletions": 14, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -1,18 +1,21 @@\n //! AST -> `ItemTree` lowering code.\n \n-use super::*;\n-use crate::{\n-    attr::Attrs,\n-    generics::{GenericParams, TypeParamData, TypeParamProvenance},\n-};\n+use std::{collections::hash_map::Entry, mem, sync::Arc};\n+\n use hir_expand::{ast_id_map::AstIdMap, hygiene::Hygiene, HirFileId};\n use ra_arena::map::ArenaMap;\n use ra_syntax::{\n     ast::{self, ModuleItemOwner},\n     SyntaxNode,\n };\n use smallvec::SmallVec;\n-use std::{collections::hash_map::Entry, mem, sync::Arc};\n+\n+use crate::{\n+    attr::Attrs,\n+    generics::{GenericParams, TypeParamData, TypeParamProvenance},\n+};\n+\n+use super::*;\n \n fn id<N: ItemTreeNode>(index: Idx<N>) -> FileItemTreeId<N> {\n     FileItemTreeId { index, _p: PhantomData }\n@@ -191,7 +194,7 @@ impl Ctx {\n         }\n     }\n \n-    fn lower_record_fields(&mut self, fields: &ast::RecordFieldDefList) -> IdRange<Field> {\n+    fn lower_record_fields(&mut self, fields: &ast::RecordFieldList) -> IdRange<Field> {\n         let start = self.next_field_idx();\n         for field in fields.fields() {\n             if let Some(data) = self.lower_record_field(&field) {\n@@ -203,15 +206,15 @@ impl Ctx {\n         IdRange::new(start..end)\n     }\n \n-    fn lower_record_field(&mut self, field: &ast::RecordFieldDef) -> Option<Field> {\n+    fn lower_record_field(&mut self, field: &ast::RecordField) -> Option<Field> {\n         let name = field.name()?.as_name();\n         let visibility = self.lower_visibility(field);\n         let type_ref = self.lower_type_ref_opt(field.ascribed_type());\n         let res = Field { name, type_ref, visibility };\n         Some(res)\n     }\n \n-    fn lower_tuple_fields(&mut self, fields: &ast::TupleFieldDefList) -> IdRange<Field> {\n+    fn lower_tuple_fields(&mut self, fields: &ast::TupleFieldList) -> IdRange<Field> {\n         let start = self.next_field_idx();\n         for (i, field) in fields.fields().enumerate() {\n             let data = self.lower_tuple_field(i, &field);\n@@ -222,7 +225,7 @@ impl Ctx {\n         IdRange::new(start..end)\n     }\n \n-    fn lower_tuple_field(&mut self, idx: usize, field: &ast::TupleFieldDef) -> Field {\n+    fn lower_tuple_field(&mut self, idx: usize, field: &ast::TupleField) -> Field {\n         let name = Name::new_tuple_field(idx);\n         let visibility = self.lower_visibility(field);\n         let type_ref = self.lower_type_ref_opt(field.type_ref());\n@@ -234,10 +237,8 @@ impl Ctx {\n         let visibility = self.lower_visibility(union);\n         let name = union.name()?.as_name();\n         let generic_params = self.lower_generic_params(GenericsOwner::Union, union);\n-        let fields = match union.record_field_def_list() {\n-            Some(record_field_def_list) => {\n-                self.lower_fields(&StructKind::Record(record_field_def_list))\n-            }\n+        let fields = match union.record_field_list() {\n+            Some(record_field_list) => self.lower_fields(&StructKind::Record(record_field_list)),\n             None => Fields::Record(IdRange::new(self.next_field_idx()..self.next_field_idx())),\n         };\n         let ast_id = self.source_ast_id_map.ast_id(union);"}, {"sha": "9ca2762352d556b4f05340eb61d673991efdfd88", "filename": "crates/ra_hir_def/src/keys.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fkeys.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -25,8 +25,8 @@ pub const UNION: Key<ast::UnionDef, UnionId> = Key::new();\n pub const ENUM: Key<ast::EnumDef, EnumId> = Key::new();\n \n pub const ENUM_VARIANT: Key<ast::EnumVariant, EnumVariantId> = Key::new();\n-pub const TUPLE_FIELD: Key<ast::TupleFieldDef, FieldId> = Key::new();\n-pub const RECORD_FIELD: Key<ast::RecordFieldDef, FieldId> = Key::new();\n+pub const TUPLE_FIELD: Key<ast::TupleField, FieldId> = Key::new();\n+pub const RECORD_FIELD: Key<ast::RecordField, FieldId> = Key::new();\n pub const TYPE_PARAM: Key<ast::TypeParam, TypeParamId> = Key::new();\n \n pub const MACRO: Key<ast::MacroCall, MacroDefId> = Key::new();"}, {"sha": "dd8a7ffd9b6b4a42001aedb6a16c5ca34454d70b", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -155,21 +155,21 @@ fn missing_struct_field_fix(\n             module = s.module(sema.db);\n             let source = s.source(sema.db);\n             def_file_id = source.file_id;\n-            let fields = source.value.field_def_list()?;\n-            record_field_def_list(fields)?\n+            let fields = source.value.field_list()?;\n+            record_field_list(fields)?\n         }\n         VariantDef::Union(u) => {\n             module = u.module(sema.db);\n             let source = u.source(sema.db);\n             def_file_id = source.file_id;\n-            source.value.record_field_def_list()?\n+            source.value.record_field_list()?\n         }\n         VariantDef::EnumVariant(e) => {\n             module = e.module(sema.db);\n             let source = e.source(sema.db);\n             def_file_id = source.file_id;\n-            let fields = source.value.field_def_list()?;\n-            record_field_def_list(fields)?\n+            let fields = source.value.field_list()?;\n+            record_field_list(fields)?\n         }\n     };\n     let def_file_id = def_file_id.original_file(sema.db);\n@@ -205,10 +205,10 @@ fn missing_struct_field_fix(\n     let fix = Fix::new(\"Create field\", source_change.into());\n     return Some(fix);\n \n-    fn record_field_def_list(field_def_list: ast::FieldDefList) -> Option<ast::RecordFieldDefList> {\n+    fn record_field_list(field_def_list: ast::FieldList) -> Option<ast::RecordFieldList> {\n         match field_def_list {\n-            ast::FieldDefList::RecordFieldDefList(it) => Some(it),\n-            ast::FieldDefList::TupleFieldDefList(_) => None,\n+            ast::FieldList::RecordFieldList(it) => Some(it),\n+            ast::FieldList::TupleFieldList(_) => None,\n         }\n     }\n }"}, {"sha": "797d2d8e3d95f875effc187463e8a6cab54d1a92", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -387,7 +387,7 @@ pub(crate) fn docs_from_symbol(db: &RootDatabase, symbol: &FileSymbol) -> Option\n             ast::TypeAlias(it) => it.doc_comment_text(),\n             ast::ConstDef(it) => it.doc_comment_text(),\n             ast::StaticDef(it) => it.doc_comment_text(),\n-            ast::RecordFieldDef(it) => it.doc_comment_text(),\n+            ast::RecordField(it) => it.doc_comment_text(),\n             ast::EnumVariant(it) => it.doc_comment_text(),\n             ast::MacroCall(it) => it.doc_comment_text(),\n             _ => None,\n@@ -412,7 +412,7 @@ pub(crate) fn description_from_symbol(db: &RootDatabase, symbol: &FileSymbol) ->\n             ast::TypeAlias(it) => it.short_label(),\n             ast::ConstDef(it) => it.short_label(),\n             ast::StaticDef(it) => it.short_label(),\n-            ast::RecordFieldDef(it) => it.short_label(),\n+            ast::RecordField(it) => it.short_label(),\n             ast::EnumVariant(it) => it.short_label(),\n             _ => None,\n         }"}, {"sha": "78a2598d6e53fa28ccecc510a6aecec547170be7", "filename": "crates/ra_ide/src/display/short_label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -65,7 +65,7 @@ impl ShortLabel for ast::StaticDef {\n     }\n }\n \n-impl ShortLabel for ast::RecordFieldDef {\n+impl ShortLabel for ast::RecordField {\n     fn short_label(&self) -> Option<String> {\n         short_label_from_ascribed_node(self, \"\")\n     }"}, {"sha": "04a7f0ac4bde50ecf5c75c16c3e73d54dff8f68b", "filename": "crates/ra_ide/src/extend_selection.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fextend_selection.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -39,8 +39,8 @@ fn try_extend_selection(\n     let list_kinds = [\n         RECORD_FIELD_PAT_LIST,\n         MATCH_ARM_LIST,\n-        RECORD_FIELD_DEF_LIST,\n-        TUPLE_FIELD_DEF_LIST,\n+        RECORD_FIELD_LIST,\n+        TUPLE_FIELD_LIST,\n         RECORD_EXPR_FIELD_LIST,\n         ENUM_VARIANT_LIST,\n         USE_TREE_LIST,"}, {"sha": "a8fd1a2fd02dea8801e066231fac1eeeea5fd576", "filename": "crates/ra_ide/src/file_structure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffile_structure.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -136,7 +136,7 @@ fn structure_node(node: &SyntaxNode) -> Option<StructureNode> {\n                 let ty = it.type_ref();\n                 decl_with_type_ref(it, ty)\n             },\n-            ast::RecordFieldDef(it) => decl_with_ascription(it),\n+            ast::RecordField(it) => decl_with_ascription(it),\n             ast::ConstDef(it) => decl_with_ascription(it),\n             ast::StaticDef(it) => decl_with_ascription(it),\n             ast::ImplDef(it) => {\n@@ -249,7 +249,7 @@ fn very_obsolete() {}\n                         label: \"x\",\n                         navigation_range: 18..19,\n                         node_range: 18..24,\n-                        kind: RECORD_FIELD_DEF,\n+                        kind: RECORD_FIELD,\n                         detail: Some(\n                             \"i32\",\n                         ),"}, {"sha": "8dcce9f56f9d39d941340efc22384cb5612906c3", "filename": "crates/ra_ide/src/folding_ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ffolding_ranges.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -85,7 +85,7 @@ fn fold_kind(kind: SyntaxKind) -> Option<FoldKind> {\n         COMMENT => Some(FoldKind::Comment),\n         USE => Some(FoldKind::Imports),\n         ARG_LIST | PARAM_LIST => Some(FoldKind::ArgList),\n-        RECORD_FIELD_DEF_LIST\n+        RECORD_FIELD_LIST\n         | RECORD_FIELD_PAT_LIST\n         | RECORD_EXPR_FIELD_LIST\n         | ITEM_LIST"}, {"sha": "d61ac271ee45c67235e074b25cac2ad8ac7dcdbc", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -361,7 +361,7 @@ fn main(s: Foo) {\n         );\n         check_result(\n             refs,\n-            \"spam RECORD_FIELD_DEF FileId(1) 17..30 21..25 Other\",\n+            \"spam RECORD_FIELD FileId(1) 17..30 21..25 Other\",\n             &[\"FileId(1) 67..71 Other Read\"],\n         );\n     }\n@@ -580,7 +580,7 @@ fn foo() {\n         );\n         check_result(\n             refs,\n-            \"f RECORD_FIELD_DEF FileId(1) 15..21 15..16 Other\",\n+            \"f RECORD_FIELD FileId(1) 15..21 15..16 Other\",\n             &[\"FileId(1) 55..56 Other Read\", \"FileId(1) 68..69 Other Write\"],\n         );\n     }"}, {"sha": "a04b9d893ba5074fdcee24a7006267148fb2e1f7", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -711,7 +711,7 @@ fn highlight_name_by_syntax(name: ast::Name) -> Highlight {\n         TRAIT_DEF => HighlightTag::Trait,\n         TYPE_ALIAS => HighlightTag::TypeAlias,\n         TYPE_PARAM => HighlightTag::TypeParam,\n-        RECORD_FIELD_DEF => HighlightTag::Field,\n+        RECORD_FIELD => HighlightTag::Field,\n         MODULE => HighlightTag::Module,\n         FN => HighlightTag::Function,\n         CONST_DEF => HighlightTag::Constant,"}, {"sha": "30f18b9cfab6e5f8752c8783460d7ddcae5bff3b", "filename": "crates/ra_ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fdefs.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -142,7 +142,7 @@ pub fn classify_name(sema: &Semantics<RootDatabase>, name: &ast::Name) -> Option\n \n                 Some(NameClass::Definition(Definition::Local(local)))\n             },\n-            ast::RecordFieldDef(it) => {\n+            ast::RecordField(it) => {\n                 let field: hir::Field = sema.to_def(&it)?;\n                 Some(NameClass::Definition(Definition::Field(field)))\n             },"}, {"sha": "d7b198458cd498534aff6c27aeddb6e0eba6cf5a", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -494,9 +494,9 @@ MACRO_ITEMS@0..40\n     STRUCT_KW@0..6 \"struct\"\n     NAME@6..9\n       IDENT@6..9 \"Foo\"\n-    RECORD_FIELD_DEF_LIST@9..20\n+    RECORD_FIELD_LIST@9..20\n       L_CURLY@9..10 \"{\"\n-      RECORD_FIELD_DEF@10..19\n+      RECORD_FIELD@10..19\n         NAME@10..15\n           IDENT@10..15 \"field\"\n         COLON@15..16 \":\"\n@@ -510,9 +510,9 @@ MACRO_ITEMS@0..40\n     STRUCT_KW@20..26 \"struct\"\n     NAME@26..29\n       IDENT@26..29 \"Bar\"\n-    RECORD_FIELD_DEF_LIST@29..40\n+    RECORD_FIELD_LIST@29..40\n       L_CURLY@29..30 \"{\"\n-      RECORD_FIELD_DEF@30..39\n+      RECORD_FIELD@30..39\n         NAME@30..35\n           IDENT@30..35 \"field\"\n         COLON@35..36 \":\""}, {"sha": "03041d1108e0ad69001ae17adebadb372fc0d000", "filename": "crates/ra_parser/src/grammar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_parser%2Fsrc%2Fgrammar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -142,7 +142,7 @@ pub(crate) fn reparser(\n ) -> Option<fn(&mut Parser)> {\n     let res = match node {\n         BLOCK_EXPR => expressions::block_expr,\n-        RECORD_FIELD_DEF_LIST => items::record_field_def_list,\n+        RECORD_FIELD_LIST => items::record_field_def_list,\n         RECORD_EXPR_FIELD_LIST => items::record_field_list,\n         ENUM_VARIANT_LIST => items::enum_variant_list,\n         MATCH_ARM_LIST => items::match_arm_list,"}, {"sha": "0e96bf77e2a374ac3c5c9556d929d663cc9d73b3", "filename": "crates/ra_parser/src/grammar/items/adt.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Fadt.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -119,7 +119,7 @@ pub(crate) fn record_field_def_list(p: &mut Parser) {\n         }\n     }\n     p.expect(T!['}']);\n-    m.complete(p, RECORD_FIELD_DEF_LIST);\n+    m.complete(p, RECORD_FIELD_LIST);\n \n     fn record_field_def(p: &mut Parser) {\n         let m = p.start();\n@@ -134,7 +134,7 @@ pub(crate) fn record_field_def_list(p: &mut Parser) {\n             name(p);\n             p.expect(T![:]);\n             types::type_(p);\n-            m.complete(p, RECORD_FIELD_DEF);\n+            m.complete(p, RECORD_FIELD);\n         } else {\n             m.abandon(p);\n             p.err_and_bump(\"expected field declaration\");\n@@ -167,12 +167,12 @@ fn tuple_field_def_list(p: &mut Parser) {\n             break;\n         }\n         types::type_(p);\n-        m.complete(p, TUPLE_FIELD_DEF);\n+        m.complete(p, TUPLE_FIELD);\n \n         if !p.at(T![')']) {\n             p.expect(T![,]);\n         }\n     }\n     p.expect(T![')']);\n-    m.complete(p, TUPLE_FIELD_DEF_LIST);\n+    m.complete(p, TUPLE_FIELD_LIST);\n }"}, {"sha": "8586758b40b4a5eff8c018d0d9a535b725d93a5f", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -207,10 +207,10 @@ pub enum SyntaxKind {\n     EXTERN_BLOCK,\n     EXTERN_ITEM_LIST,\n     ENUM_VARIANT,\n-    RECORD_FIELD_DEF_LIST,\n-    RECORD_FIELD_DEF,\n-    TUPLE_FIELD_DEF_LIST,\n-    TUPLE_FIELD_DEF,\n+    RECORD_FIELD_LIST,\n+    RECORD_FIELD,\n+    TUPLE_FIELD_LIST,\n+    TUPLE_FIELD,\n     ENUM_VARIANT_LIST,\n     ITEM_LIST,\n     ASSOC_ITEM_LIST,"}, {"sha": "46d73215c6b65910e8931542b489b9193f25eeca", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 46, "deletions": 50, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -165,7 +165,7 @@ impl ast::GenericParamsOwner for StructDef {}\n impl StructDef {\n     pub fn struct_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![struct]) }\n     pub fn semicolon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![;]) }\n-    pub fn field_def_list(&self) -> Option<FieldDefList> { support::child(&self.syntax) }\n+    pub fn field_list(&self) -> Option<FieldList> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TraitDef {\n@@ -208,9 +208,7 @@ impl ast::VisibilityOwner for UnionDef {}\n impl ast::GenericParamsOwner for UnionDef {}\n impl UnionDef {\n     pub fn union_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![union]) }\n-    pub fn record_field_def_list(&self) -> Option<RecordFieldDefList> {\n-        support::child(&self.syntax)\n-    }\n+    pub fn record_field_list(&self) -> Option<RecordFieldList> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Use {\n@@ -391,42 +389,42 @@ impl TypeBoundList {\n     pub fn bounds(&self) -> AstChildren<TypeBound> { support::children(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RecordFieldDefList {\n+pub struct RecordFieldList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl RecordFieldDefList {\n+impl RecordFieldList {\n     pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n-    pub fn fields(&self) -> AstChildren<RecordFieldDef> { support::children(&self.syntax) }\n+    pub fn fields(&self) -> AstChildren<RecordField> { support::children(&self.syntax) }\n     pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TupleFieldDefList {\n+pub struct TupleFieldList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl TupleFieldDefList {\n+impl TupleFieldList {\n     pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n-    pub fn fields(&self) -> AstChildren<TupleFieldDef> { support::children(&self.syntax) }\n+    pub fn fields(&self) -> AstChildren<TupleField> { support::children(&self.syntax) }\n     pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct RecordFieldDef {\n+pub struct RecordField {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for RecordFieldDef {}\n-impl ast::NameOwner for RecordFieldDef {}\n-impl ast::VisibilityOwner for RecordFieldDef {}\n-impl ast::TypeAscriptionOwner for RecordFieldDef {}\n-impl RecordFieldDef {\n+impl ast::AttrsOwner for RecordField {}\n+impl ast::NameOwner for RecordField {}\n+impl ast::VisibilityOwner for RecordField {}\n+impl ast::TypeAscriptionOwner for RecordField {}\n+impl RecordField {\n     pub fn colon_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![:]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TupleFieldDef {\n+pub struct TupleField {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::AttrsOwner for TupleFieldDef {}\n-impl ast::NameOwner for TupleFieldDef {}\n-impl ast::VisibilityOwner for TupleFieldDef {}\n-impl TupleFieldDef {\n+impl ast::AttrsOwner for TupleField {}\n+impl ast::NameOwner for TupleField {}\n+impl ast::VisibilityOwner for TupleField {}\n+impl TupleField {\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -446,7 +444,7 @@ impl ast::AttrsOwner for EnumVariant {}\n impl ast::NameOwner for EnumVariant {}\n impl ast::VisibilityOwner for EnumVariant {}\n impl EnumVariant {\n-    pub fn field_def_list(&self) -> Option<FieldDefList> { support::child(&self.syntax) }\n+    pub fn field_list(&self) -> Option<FieldList> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n@@ -1326,9 +1324,9 @@ pub enum Pat {\n     MacroPat(MacroPat),\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum FieldDefList {\n-    RecordFieldDefList(RecordFieldDefList),\n-    TupleFieldDefList(TupleFieldDefList),\n+pub enum FieldList {\n+    RecordFieldList(RecordFieldList),\n+    TupleFieldList(TupleFieldList),\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Expr {\n@@ -1765,8 +1763,8 @@ impl AstNode for TypeBoundList {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for RecordFieldDefList {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD_DEF_LIST }\n+impl AstNode for RecordFieldList {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1776,8 +1774,8 @@ impl AstNode for RecordFieldDefList {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for TupleFieldDefList {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TUPLE_FIELD_DEF_LIST }\n+impl AstNode for TupleFieldList {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TUPLE_FIELD_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1787,8 +1785,8 @@ impl AstNode for TupleFieldDefList {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for RecordFieldDef {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD_DEF }\n+impl AstNode for RecordField {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RECORD_FIELD }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1798,8 +1796,8 @@ impl AstNode for RecordFieldDef {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for TupleFieldDef {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TUPLE_FIELD_DEF }\n+impl AstNode for TupleField {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TUPLE_FIELD }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3046,33 +3044,31 @@ impl AstNode for Pat {\n         }\n     }\n }\n-impl From<RecordFieldDefList> for FieldDefList {\n-    fn from(node: RecordFieldDefList) -> FieldDefList { FieldDefList::RecordFieldDefList(node) }\n+impl From<RecordFieldList> for FieldList {\n+    fn from(node: RecordFieldList) -> FieldList { FieldList::RecordFieldList(node) }\n }\n-impl From<TupleFieldDefList> for FieldDefList {\n-    fn from(node: TupleFieldDefList) -> FieldDefList { FieldDefList::TupleFieldDefList(node) }\n+impl From<TupleFieldList> for FieldList {\n+    fn from(node: TupleFieldList) -> FieldList { FieldList::TupleFieldList(node) }\n }\n-impl AstNode for FieldDefList {\n+impl AstNode for FieldList {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            RECORD_FIELD_DEF_LIST | TUPLE_FIELD_DEF_LIST => true,\n+            RECORD_FIELD_LIST | TUPLE_FIELD_LIST => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n-            RECORD_FIELD_DEF_LIST => {\n-                FieldDefList::RecordFieldDefList(RecordFieldDefList { syntax })\n-            }\n-            TUPLE_FIELD_DEF_LIST => FieldDefList::TupleFieldDefList(TupleFieldDefList { syntax }),\n+            RECORD_FIELD_LIST => FieldList::RecordFieldList(RecordFieldList { syntax }),\n+            TUPLE_FIELD_LIST => FieldList::TupleFieldList(TupleFieldList { syntax }),\n             _ => return None,\n         };\n         Some(res)\n     }\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n-            FieldDefList::RecordFieldDefList(it) => &it.syntax,\n-            FieldDefList::TupleFieldDefList(it) => &it.syntax,\n+            FieldList::RecordFieldList(it) => &it.syntax,\n+            FieldList::TupleFieldList(it) => &it.syntax,\n         }\n     }\n }\n@@ -3425,7 +3421,7 @@ impl std::fmt::Display for Pat {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for FieldDefList {\n+impl std::fmt::Display for FieldList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n@@ -3625,22 +3621,22 @@ impl std::fmt::Display for TypeBoundList {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for RecordFieldDefList {\n+impl std::fmt::Display for RecordFieldList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for TupleFieldDefList {\n+impl std::fmt::Display for TupleFieldList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for RecordFieldDef {\n+impl std::fmt::Display for RecordField {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for TupleFieldDef {\n+impl std::fmt::Display for TupleField {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }"}, {"sha": "509e8ae7a09823b7f2e69e412a3c00b673ebeace", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -75,7 +75,7 @@ pub fn record_field(name: ast::NameRef, expr: Option<ast::Expr>) -> ast::RecordE\n     }\n }\n \n-pub fn record_field_def(name: ast::NameRef, ty: ast::TypeRef) -> ast::RecordFieldDef {\n+pub fn record_field_def(name: ast::NameRef, ty: ast::TypeRef) -> ast::RecordField {\n     ast_from_text(&format!(\"struct S {{ {}: {}, }}\", name, ty))\n }\n "}, {"sha": "ffe6746d3849a50ab2718a9c1eaf333f2e8d52f4", "filename": "crates/ra_syntax/src/ast/node_ext.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fnode_ext.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -166,16 +166,16 @@ impl ast::ImplDef {\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum StructKind {\n-    Record(ast::RecordFieldDefList),\n-    Tuple(ast::TupleFieldDefList),\n+    Record(ast::RecordFieldList),\n+    Tuple(ast::TupleFieldList),\n     Unit,\n }\n \n impl StructKind {\n     fn from_node<N: AstNode>(node: &N) -> StructKind {\n-        if let Some(nfdl) = support::child::<ast::RecordFieldDefList>(node.syntax()) {\n+        if let Some(nfdl) = support::child::<ast::RecordFieldList>(node.syntax()) {\n             StructKind::Record(nfdl)\n-        } else if let Some(pfl) = support::child::<ast::TupleFieldDefList>(node.syntax()) {\n+        } else if let Some(pfl) = support::child::<ast::TupleFieldList>(node.syntax()) {\n             StructKind::Tuple(pfl)\n         } else {\n             StructKind::Unit\n@@ -477,8 +477,8 @@ impl ast::DocCommentsOwner for ast::SourceFile {}\n impl ast::DocCommentsOwner for ast::Fn {}\n impl ast::DocCommentsOwner for ast::StructDef {}\n impl ast::DocCommentsOwner for ast::UnionDef {}\n-impl ast::DocCommentsOwner for ast::RecordFieldDef {}\n-impl ast::DocCommentsOwner for ast::TupleFieldDef {}\n+impl ast::DocCommentsOwner for ast::RecordField {}\n+impl ast::DocCommentsOwner for ast::TupleField {}\n impl ast::DocCommentsOwner for ast::EnumDef {}\n impl ast::DocCommentsOwner for ast::EnumVariant {}\n impl ast::DocCommentsOwner for ast::TraitDef {}"}, {"sha": "0a1246c593d89b9892dac37d167fd0f98bc68b3a", "filename": "crates/ra_syntax/src/parsing/text_tree_sink.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_tree_sink.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -147,7 +147,7 @@ fn n_attached_trivias<'a>(\n ) -> usize {\n     match kind {\n         MACRO_CALL | CONST_DEF | TYPE_ALIAS | STRUCT_DEF | ENUM_DEF | ENUM_VARIANT | FN\n-        | TRAIT_DEF | MODULE | RECORD_FIELD_DEF | STATIC_DEF => {\n+        | TRAIT_DEF | MODULE | RECORD_FIELD | STATIC_DEF => {\n             let mut res = 0;\n             let mut trivias = trivias.enumerate().peekable();\n "}, {"sha": "ca79577471321414ba7da95bfdde01e8f0cb7177", "filename": "crates/ra_syntax/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fptr.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -98,7 +98,7 @@ fn test_local_syntax_ptr() {\n     use crate::{ast, AstNode, SourceFile};\n \n     let file = SourceFile::parse(\"struct Foo { f: u32, }\").ok().unwrap();\n-    let field = file.syntax().descendants().find_map(ast::RecordFieldDef::cast).unwrap();\n+    let field = file.syntax().descendants().find_map(ast::RecordField::cast).unwrap();\n     let ptr = SyntaxNodePtr::new(field.syntax());\n     let field_syntax = ptr.to_node(file.syntax());\n     assert_eq!(field.syntax(), &field_syntax);"}, {"sha": "93f6060ed182f079f6abf2928b14149ee84a27b2", "filename": "crates/ra_syntax/test_data/parser/err/0000_struct_field_missing_comma.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0000_struct_field_missing_comma.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0000_struct_field_missing_comma.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0000_struct_field_missing_comma.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -5,10 +5,10 @@ SOURCE_FILE@0..34\n     NAME@7..8\n       IDENT@7..8 \"S\"\n     WHITESPACE@8..9 \" \"\n-    RECORD_FIELD_DEF_LIST@9..34\n+    RECORD_FIELD_LIST@9..34\n       L_CURLY@9..10 \"{\"\n       WHITESPACE@10..15 \"\\n    \"\n-      RECORD_FIELD_DEF@15..21\n+      RECORD_FIELD@15..21\n         NAME@15..16\n           IDENT@15..16 \"a\"\n         COLON@16..17 \":\"\n@@ -19,7 +19,7 @@ SOURCE_FILE@0..34\n               NAME_REF@18..21\n                 IDENT@18..21 \"u32\"\n       WHITESPACE@21..26 \"\\n    \"\n-      RECORD_FIELD_DEF@26..32\n+      RECORD_FIELD@26..32\n         NAME@26..27\n           IDENT@26..27 \"b\"\n         COLON@27..28 \":\""}, {"sha": "7e2f429e1eb36c31a0099c3f2fb69ed1396ab8b4", "filename": "crates/ra_syntax/test_data/parser/err/0001_item_recovery_in_file.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0001_item_recovery_in_file.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0001_item_recovery_in_file.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0001_item_recovery_in_file.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -11,7 +11,7 @@ SOURCE_FILE@0..21\n     NAME@17..18\n       IDENT@17..18 \"S\"\n     WHITESPACE@18..19 \" \"\n-    RECORD_FIELD_DEF_LIST@19..21\n+    RECORD_FIELD_LIST@19..21\n       L_CURLY@19..20 \"{\"\n       R_CURLY@20..21 \"}\"\n error 0..0: expected an item"}, {"sha": "e0f3916b37cd4339002aaa998c1245e5b627c880", "filename": "crates/ra_syntax/test_data/parser/err/0003_C++_semicolon.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0003_C%2B%2B_semicolon.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -5,10 +5,10 @@ SOURCE_FILE@0..40\n     NAME@7..8\n       IDENT@7..8 \"S\"\n     WHITESPACE@8..9 \" \"\n-    RECORD_FIELD_DEF_LIST@9..39\n+    RECORD_FIELD_LIST@9..39\n       L_CURLY@9..10 \"{\"\n       WHITESPACE@10..15 \"\\n    \"\n-      RECORD_FIELD_DEF@15..21\n+      RECORD_FIELD@15..21\n         NAME@15..16\n           IDENT@15..16 \"a\"\n         COLON@16..17 \":\"\n@@ -20,7 +20,7 @@ SOURCE_FILE@0..40\n                 IDENT@18..21 \"i32\"\n       COMMA@21..22 \",\"\n       WHITESPACE@22..27 \"\\n    \"\n-      RECORD_FIELD_DEF@27..36\n+      RECORD_FIELD@27..36\n         NAME@27..28\n           IDENT@27..28 \"b\"\n         COLON@28..29 \":\""}, {"sha": "ad9447761f8b2ddce33a6eda07b8466819c5e31f", "filename": "crates/ra_syntax/test_data/parser/err/0006_named_field_recovery.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0006_named_field_recovery.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0006_named_field_recovery.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0006_named_field_recovery.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -5,10 +5,10 @@ SOURCE_FILE@0..74\n     NAME@7..8\n       IDENT@7..8 \"S\"\n     WHITESPACE@8..9 \" \"\n-    RECORD_FIELD_DEF_LIST@9..73\n+    RECORD_FIELD_LIST@9..73\n       L_CURLY@9..10 \"{\"\n       WHITESPACE@10..15 \"\\n    \"\n-      RECORD_FIELD_DEF@15..21\n+      RECORD_FIELD@15..21\n         NAME@15..16\n           IDENT@15..16 \"f\"\n         COLON@16..17 \":\"\n@@ -35,7 +35,7 @@ SOURCE_FILE@0..74\n       ERROR@42..43\n         STAR@42..43 \"*\"\n       WHITESPACE@43..48 \"\\n    \"\n-      RECORD_FIELD_DEF@48..58\n+      RECORD_FIELD@48..58\n         VISIBILITY@48..51\n           PUB_KW@48..51 \"pub\"\n         WHITESPACE@51..52 \" \"\n@@ -50,7 +50,7 @@ SOURCE_FILE@0..74\n                 IDENT@55..58 \"u32\"\n       COMMA@58..59 \",\"\n       WHITESPACE@59..64 \"\\n    \"\n-      RECORD_FIELD_DEF@64..70\n+      RECORD_FIELD@64..70\n         NAME@64..65\n           IDENT@64..65 \"z\"\n         COLON@65..66 \":\""}, {"sha": "c3591d25c207aa6bc8cf8bac21f6b6a9eefb93d5", "filename": "crates/ra_syntax/test_data/parser/err/0013_invalid_type.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0013_invalid_type.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -7,10 +7,10 @@ SOURCE_FILE@0..86\n     WHITESPACE@10..11 \" \"\n     NAME@11..16\n       IDENT@11..16 \"Cache\"\n-    TUPLE_FIELD_DEF_LIST@16..72\n+    TUPLE_FIELD_LIST@16..72\n       L_PAREN@16..17 \"(\"\n       WHITESPACE@17..22 \"\\n    \"\n-      TUPLE_FIELD_DEF@22..68\n+      TUPLE_FIELD@22..68\n         PATH_TYPE@22..68\n           PATH@22..68\n             PATH_SEGMENT@22..68\n@@ -47,7 +47,7 @@ SOURCE_FILE@0..86\n                                       ERROR@67..68\n                                         AT@67..68 \"@\"\n       WHITESPACE@68..69 \" \"\n-      TUPLE_FIELD_DEF@69..72\n+      TUPLE_FIELD@69..72\n         PATH_TYPE@69..72\n           PATH@69..72\n             PATH_SEGMENT@69..72"}, {"sha": "a1258028dbda6424b53d74d0e90f1cab6f1b7f5d", "filename": "crates/ra_syntax/test_data/parser/err/0025_nope.rast", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ferr%2F0025_nope.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -28,9 +28,9 @@ SOURCE_FILE@0..575\n           ENUM_VARIANT@50..62\n             NAME@50..54\n               IDENT@50..54 \"Var2\"\n-            TUPLE_FIELD_DEF_LIST@54..62\n+            TUPLE_FIELD_LIST@54..62\n               L_PAREN@54..55 \"(\"\n-              TUPLE_FIELD_DEF@55..61\n+              TUPLE_FIELD@55..61\n                 PATH_TYPE@55..61\n                   PATH@55..61\n                     PATH_SEGMENT@55..61\n@@ -43,10 +43,10 @@ SOURCE_FILE@0..575\n             NAME@72..76\n               IDENT@72..76 \"Var3\"\n             WHITESPACE@76..77 \" \"\n-            RECORD_FIELD_DEF_LIST@77..145\n+            RECORD_FIELD_LIST@77..145\n               L_CURLY@77..78 \"{\"\n               WHITESPACE@78..91 \"\\n            \"\n-              RECORD_FIELD_DEF@91..95\n+              RECORD_FIELD@91..95\n                 NAME@91..94\n                   IDENT@91..94 \"abc\"\n                 COLON@94..95 \":\"\n@@ -108,10 +108,10 @@ SOURCE_FILE@0..575\n             NAME@250..259\n               IDENT@250..259 \"StillFine\"\n             WHITESPACE@259..260 \" \"\n-            RECORD_FIELD_DEF_LIST@260..293\n+            RECORD_FIELD_LIST@260..293\n               L_CURLY@260..261 \"{\"\n               WHITESPACE@261..274 \"\\n            \"\n-              RECORD_FIELD_DEF@274..282\n+              RECORD_FIELD@274..282\n                 NAME@274..277\n                   IDENT@274..277 \"def\"\n                 COLON@277..278 \":\"\n@@ -146,9 +146,9 @@ SOURCE_FILE@0..575\n               ENUM_VARIANT@363..372\n                 NAME@363..367\n                   IDENT@363..367 \"Nope\"\n-                TUPLE_FIELD_DEF_LIST@367..372\n+                TUPLE_FIELD_LIST@367..372\n                   L_PAREN@367..368 \"(\"\n-                  TUPLE_FIELD_DEF@368..371\n+                  TUPLE_FIELD@368..371\n                     PATH_TYPE@368..371\n                       PATH@368..371\n                         PATH_SEGMENT@368..371"}, {"sha": "f1d0dc343829fd547c77be871eb824a7ed1cce35", "filename": "crates/ra_syntax/test_data/parser/fuzz-failures/0000.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffuzz-failures%2F0000.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffuzz-failures%2F0000.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Ffuzz-failures%2F0000.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -86,7 +86,7 @@ fn find_reparsable_node(node: SyntaxNodeRef, range: TextRange) -> Option<(Syntax\n     fn reparser(node: SyntaxNodeRef) -> Option<fn(&mut Parser)> {\n         let res = match node.kind() {\n             BLOCK => grammar::block,\n-            RECORD_FIELD_DEF_LIST => grammar::record_field_def_list,\n+            RECORD_FIELD_LIST => grammar::record_field_list,\n             _ => return None,\n         };\n         Some(res)\n@@ -138,7 +138,7 @@ fn find_reparsable_node(node: SyntaxNodeRef, range: TextRange) -> Option<(Syntax\n         let res = match node.kind() {\n      ;\n     let end = u32::from(range.end()) as usize;\n-    text.replaT => grammar::record_field_def_list,\n+    text.replaT => grammar::record_field_list,\n             _ => return None,\n         };\n         Some(res)"}, {"sha": "a0ad078074c43083e08b90508587e256da6b0d5f", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0040_crate_keyword_vis.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0040_crate_keyword_vis.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -22,10 +22,10 @@ SOURCE_FILE@0..71\n     NAME@27..28\n       IDENT@27..28 \"S\"\n     WHITESPACE@28..29 \" \"\n-    RECORD_FIELD_DEF_LIST@29..49\n+    RECORD_FIELD_LIST@29..49\n       L_CURLY@29..30 \"{\"\n       WHITESPACE@30..31 \" \"\n-      RECORD_FIELD_DEF@31..47\n+      RECORD_FIELD@31..47\n         VISIBILITY@31..36\n           CRATE_KW@31..36 \"crate\"\n         WHITESPACE@36..37 \" \"\n@@ -46,9 +46,9 @@ SOURCE_FILE@0..71\n     WHITESPACE@56..57 \" \"\n     NAME@57..58\n       IDENT@57..58 \"T\"\n-    TUPLE_FIELD_DEF_LIST@58..69\n+    TUPLE_FIELD_LIST@58..69\n       L_PAREN@58..59 \"(\"\n-      TUPLE_FIELD_DEF@59..68\n+      TUPLE_FIELD@59..68\n         VISIBILITY@59..64\n           CRATE_KW@59..64 \"crate\"\n         WHITESPACE@64..65 \" \""}, {"sha": "775bc286908838bd6625d90ea3488281760111a7", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0054_record_field_attrs.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0054_record_field_attrs.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -5,10 +5,10 @@ SOURCE_FILE@0..64\n     NAME@7..8\n       IDENT@7..8 \"S\"\n     WHITESPACE@8..9 \" \"\n-    RECORD_FIELD_DEF_LIST@9..63\n+    RECORD_FIELD_LIST@9..63\n       L_CURLY@9..10 \"{\"\n       WHITESPACE@10..15 \"\\n    \"\n-      RECORD_FIELD_DEF@15..60\n+      RECORD_FIELD@15..60\n         ATTR@15..43\n           POUND@15..16 \"#\"\n           L_BRACK@16..17 \"[\""}, {"sha": "2726516b8e75b016d43587d2e9778c85f8c2a96e", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0068_union_items.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0068_union_items.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -5,7 +5,7 @@ SOURCE_FILE@0..51\n     NAME@6..9\n       IDENT@6..9 \"Foo\"\n     WHITESPACE@9..10 \" \"\n-    RECORD_FIELD_DEF_LIST@10..12\n+    RECORD_FIELD_LIST@10..12\n       L_CURLY@10..11 \"{\"\n       R_CURLY@11..12 \"}\"\n   WHITESPACE@12..13 \"\\n\"\n@@ -15,10 +15,10 @@ SOURCE_FILE@0..51\n     NAME@19..22\n       IDENT@19..22 \"Foo\"\n     WHITESPACE@22..23 \" \"\n-    RECORD_FIELD_DEF_LIST@23..50\n+    RECORD_FIELD_LIST@23..50\n       L_CURLY@23..24 \"{\"\n       WHITESPACE@24..29 \"\\n    \"\n-      RECORD_FIELD_DEF@29..35\n+      RECORD_FIELD@29..35\n         NAME@29..30\n           IDENT@29..30 \"a\"\n         COLON@30..31 \":\"\n@@ -30,7 +30,7 @@ SOURCE_FILE@0..51\n                 IDENT@32..35 \"i32\"\n       COMMA@35..36 \",\"\n       WHITESPACE@36..41 \"\\n    \"\n-      RECORD_FIELD_DEF@41..47\n+      RECORD_FIELD@41..47\n         NAME@41..42\n           IDENT@41..42 \"b\"\n         COLON@42..43 \":\""}, {"sha": "0d9a366185a754ef0717a5f6c2f62eaaba8829c5", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0083_struct_items.rast", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0083_struct_items.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0083_struct_items.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0083_struct_items.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -12,7 +12,7 @@ SOURCE_FILE@0..106\n     NAME@19..22\n       IDENT@19..22 \"Foo\"\n     WHITESPACE@22..23 \" \"\n-    RECORD_FIELD_DEF_LIST@23..25\n+    RECORD_FIELD_LIST@23..25\n       L_CURLY@23..24 \"{\"\n       R_CURLY@24..25 \"}\"\n   WHITESPACE@25..26 \"\\n\"\n@@ -21,7 +21,7 @@ SOURCE_FILE@0..106\n     WHITESPACE@32..33 \" \"\n     NAME@33..36\n       IDENT@33..36 \"Foo\"\n-    TUPLE_FIELD_DEF_LIST@36..38\n+    TUPLE_FIELD_LIST@36..38\n       L_PAREN@36..37 \"(\"\n       R_PAREN@37..38 \")\"\n     SEMICOLON@38..39 \";\"\n@@ -31,17 +31,17 @@ SOURCE_FILE@0..106\n     WHITESPACE@46..47 \" \"\n     NAME@47..50\n       IDENT@47..50 \"Foo\"\n-    TUPLE_FIELD_DEF_LIST@50..65\n+    TUPLE_FIELD_LIST@50..65\n       L_PAREN@50..51 \"(\"\n-      TUPLE_FIELD_DEF@51..57\n+      TUPLE_FIELD@51..57\n         PATH_TYPE@51..57\n           PATH@51..57\n             PATH_SEGMENT@51..57\n               NAME_REF@51..57\n                 IDENT@51..57 \"String\"\n       COMMA@57..58 \",\"\n       WHITESPACE@58..59 \" \"\n-      TUPLE_FIELD_DEF@59..64\n+      TUPLE_FIELD@59..64\n         PATH_TYPE@59..64\n           PATH@59..64\n             PATH_SEGMENT@59..64\n@@ -56,10 +56,10 @@ SOURCE_FILE@0..106\n     NAME@74..77\n       IDENT@74..77 \"Foo\"\n     WHITESPACE@77..78 \" \"\n-    RECORD_FIELD_DEF_LIST@78..105\n+    RECORD_FIELD_LIST@78..105\n       L_CURLY@78..79 \"{\"\n       WHITESPACE@79..84 \"\\n    \"\n-      RECORD_FIELD_DEF@84..90\n+      RECORD_FIELD@84..90\n         NAME@84..85\n           IDENT@84..85 \"a\"\n         COLON@85..86 \":\"\n@@ -71,7 +71,7 @@ SOURCE_FILE@0..106\n                 IDENT@87..90 \"i32\"\n       COMMA@90..91 \",\"\n       WHITESPACE@91..96 \"\\n    \"\n-      RECORD_FIELD_DEF@96..102\n+      RECORD_FIELD@96..102\n         NAME@96..97\n           IDENT@96..97 \"b\"\n         COLON@97..98 \":\""}, {"sha": "3c9af3d1fe6e75b469f5ded6af63d02745a2cdb4", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0114_tuple_struct_where.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0114_tuple_struct_where.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -10,9 +10,9 @@ SOURCE_FILE@0..53\n         NAME@12..13\n           IDENT@12..13 \"T\"\n       R_ANGLE@13..14 \">\"\n-    TUPLE_FIELD_DEF_LIST@14..17\n+    TUPLE_FIELD_LIST@14..17\n       L_PAREN@14..15 \"(\"\n-      TUPLE_FIELD_DEF@15..16\n+      TUPLE_FIELD@15..16\n         PATH_TYPE@15..16\n           PATH@15..16\n             PATH_SEGMENT@15..16\n@@ -51,9 +51,9 @@ SOURCE_FILE@0..53\n         NAME@46..47\n           IDENT@46..47 \"T\"\n       R_ANGLE@47..48 \">\"\n-    TUPLE_FIELD_DEF_LIST@48..51\n+    TUPLE_FIELD_LIST@48..51\n       L_PAREN@48..49 \"(\"\n-      TUPLE_FIELD_DEF@49..50\n+      TUPLE_FIELD@49..50\n         PATH_TYPE@49..50\n           PATH@49..50\n             PATH_SEGMENT@49..50"}, {"sha": "51812a4f2d6e33eba58432e93a6cf6a0efc25d14", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0115_tuple_field_attrs.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0115_tuple_field_attrs.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -5,10 +5,10 @@ SOURCE_FILE@0..60\n     NAME@7..8\n       IDENT@7..8 \"S\"\n     WHITESPACE@8..9 \" \"\n-    TUPLE_FIELD_DEF_LIST@9..58\n+    TUPLE_FIELD_LIST@9..58\n       L_PAREN@9..10 \"(\"\n       WHITESPACE@10..15 \"\\n    \"\n-      TUPLE_FIELD_DEF@15..55\n+      TUPLE_FIELD@15..55\n         ATTR@15..43\n           POUND@15..16 \"#\"\n           L_BRACK@16..17 \"[\""}, {"sha": "d92bf84f42197d287f336a62855e681c3b5c7eb4", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0134_nocontentexpr_after_item.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0134_nocontentexpr_after_item.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -53,7 +53,7 @@ SOURCE_FILE@0..111\n         NAME@103..104\n           IDENT@103..104 \"S\"\n         WHITESPACE@104..105 \" \"\n-        RECORD_FIELD_DEF_LIST@105..107\n+        RECORD_FIELD_LIST@105..107\n           L_CURLY@105..106 \"{\"\n           R_CURLY@106..107 \"}\"\n       SEMICOLON@107..108 \";\""}, {"sha": "289fdfd6db60c266a2e092085bc673074a89bbe0", "filename": "crates/ra_syntax/test_data/parser/inline/ok/0157_variant_discriminant.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_variant_discriminant.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_variant_discriminant.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Finline%2Fok%2F0157_variant_discriminant.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -11,9 +11,9 @@ SOURCE_FILE@0..23\n       ENUM_VARIANT@9..20\n         NAME@9..10\n           IDENT@9..10 \"X\"\n-        TUPLE_FIELD_DEF_LIST@10..15\n+        TUPLE_FIELD_LIST@10..15\n           L_PAREN@10..11 \"(\"\n-          TUPLE_FIELD_DEF@11..14\n+          TUPLE_FIELD@11..14\n             PATH_TYPE@11..14\n               PATH@11..14\n                 PATH_SEGMENT@11..14"}, {"sha": "c9d1af92f2eb78db74b1d44d0c966734adc8cf57", "filename": "crates/ra_syntax/test_data/parser/ok/0001_struct_item.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0001_struct_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0001_struct_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0001_struct_item.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -20,10 +20,10 @@ SOURCE_FILE@0..32\n                     IDENT@12..16 \"Copy\"\n       R_ANGLE@16..17 \">\"\n     WHITESPACE@17..18 \" \"\n-    RECORD_FIELD_DEF_LIST@18..31\n+    RECORD_FIELD_LIST@18..31\n       L_CURLY@18..19 \"{\"\n       WHITESPACE@19..24 \"\\n    \"\n-      RECORD_FIELD_DEF@24..28\n+      RECORD_FIELD@24..28\n         NAME@24..25\n           IDENT@24..25 \"f\"\n         COLON@25..26 \":\""}, {"sha": "57fb7a329e5c49c4486119abd8269ae3ca0b1679", "filename": "crates/ra_syntax/test_data/parser/ok/0002_struct_item_field.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0002_struct_item_field.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0002_struct_item_field.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0002_struct_item_field.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -5,10 +5,10 @@ SOURCE_FILE@0..25\n     NAME@7..8\n       IDENT@7..8 \"S\"\n     WHITESPACE@8..9 \" \"\n-    RECORD_FIELD_DEF_LIST@9..25\n+    RECORD_FIELD_LIST@9..25\n       L_CURLY@9..10 \"{\"\n       WHITESPACE@10..15 \"\\n    \"\n-      RECORD_FIELD_DEF@15..23\n+      RECORD_FIELD@15..23\n         NAME@15..18\n           IDENT@15..18 \"foo\"\n         COLON@18..19 \":\""}, {"sha": "60ded78d5c78b92b9131ca26aed2077d62b7d71a", "filename": "crates/ra_syntax/test_data/parser/ok/0008_mod_item.rast", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0008_mod_item.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -46,7 +46,7 @@ SOURCE_FILE@0..118\n         NAME@59..60\n           IDENT@59..60 \"S\"\n         WHITESPACE@60..61 \" \"\n-        RECORD_FIELD_DEF_LIST@61..63\n+        RECORD_FIELD_LIST@61..63\n           L_CURLY@61..62 \"{\"\n           R_CURLY@62..63 \"}\"\n       WHITESPACE@63..64 \"\\n\""}, {"sha": "00b1b65be6eef862401a94771b910add27b1a6da", "filename": "crates/ra_syntax/test_data/parser/ok/0016_struct_flavors.rast", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0016_struct_flavors.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0016_struct_flavors.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0016_struct_flavors.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -12,7 +12,7 @@ SOURCE_FILE@0..97\n     NAME@17..18\n       IDENT@17..18 \"B\"\n     WHITESPACE@18..19 \" \"\n-    RECORD_FIELD_DEF_LIST@19..21\n+    RECORD_FIELD_LIST@19..21\n       L_CURLY@19..20 \"{\"\n       R_CURLY@20..21 \"}\"\n   WHITESPACE@21..22 \"\\n\"\n@@ -21,7 +21,7 @@ SOURCE_FILE@0..97\n     WHITESPACE@28..29 \" \"\n     NAME@29..30\n       IDENT@29..30 \"C\"\n-    TUPLE_FIELD_DEF_LIST@30..32\n+    TUPLE_FIELD_LIST@30..32\n       L_PAREN@30..31 \"(\"\n       R_PAREN@31..32 \")\"\n     SEMICOLON@32..33 \";\"\n@@ -32,10 +32,10 @@ SOURCE_FILE@0..97\n     NAME@42..43\n       IDENT@42..43 \"D\"\n     WHITESPACE@43..44 \" \"\n-    RECORD_FIELD_DEF_LIST@44..74\n+    RECORD_FIELD_LIST@44..74\n       L_CURLY@44..45 \"{\"\n       WHITESPACE@45..50 \"\\n    \"\n-      RECORD_FIELD_DEF@50..56\n+      RECORD_FIELD@50..56\n         NAME@50..51\n           IDENT@50..51 \"a\"\n         COLON@51..52 \":\"\n@@ -47,7 +47,7 @@ SOURCE_FILE@0..97\n                 IDENT@53..56 \"u32\"\n       COMMA@56..57 \",\"\n       WHITESPACE@57..62 \"\\n    \"\n-      RECORD_FIELD_DEF@62..72\n+      RECORD_FIELD@62..72\n         VISIBILITY@62..65\n           PUB_KW@62..65 \"pub\"\n         WHITESPACE@65..66 \" \"\n@@ -68,9 +68,9 @@ SOURCE_FILE@0..97\n     WHITESPACE@82..83 \" \"\n     NAME@83..84\n       IDENT@83..84 \"E\"\n-    TUPLE_FIELD_DEF_LIST@84..95\n+    TUPLE_FIELD_LIST@84..95\n       L_PAREN@84..85 \"(\"\n-      TUPLE_FIELD_DEF@85..90\n+      TUPLE_FIELD@85..90\n         VISIBILITY@85..88\n           PUB_KW@85..88 \"pub\"\n         WHITESPACE@88..89 \" \"\n@@ -81,7 +81,7 @@ SOURCE_FILE@0..97\n                 IDENT@89..90 \"x\"\n       COMMA@90..91 \",\"\n       WHITESPACE@91..92 \" \"\n-      TUPLE_FIELD_DEF@92..93\n+      TUPLE_FIELD@92..93\n         PATH_TYPE@92..93\n           PATH@92..93\n             PATH_SEGMENT@92..93"}, {"sha": "b757bd16dcc5495d0dcd537d030c584908ac4232", "filename": "crates/ra_syntax/test_data/parser/ok/0018_struct_type_params.rast", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0018_struct_type_params.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0018_struct_type_params.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0018_struct_type_params.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -23,9 +23,9 @@ SOURCE_FILE@0..290\n         NAME@24..25\n           IDENT@24..25 \"T\"\n       R_ANGLE@25..26 \">\"\n-    TUPLE_FIELD_DEF_LIST@26..31\n+    TUPLE_FIELD_LIST@26..31\n       L_PAREN@26..27 \"(\"\n-      TUPLE_FIELD_DEF@27..30\n+      TUPLE_FIELD@27..30\n         PATH_TYPE@27..30\n           PATH@27..30\n             PATH_SEGMENT@27..30\n@@ -46,10 +46,10 @@ SOURCE_FILE@0..290\n           IDENT@43..44 \"T\"\n       R_ANGLE@44..45 \">\"\n     WHITESPACE@45..46 \" \"\n-    RECORD_FIELD_DEF_LIST@46..56\n+    RECORD_FIELD_LIST@46..56\n       L_CURLY@46..47 \"{\"\n       WHITESPACE@47..48 \" \"\n-      RECORD_FIELD_DEF@48..54\n+      RECORD_FIELD@48..54\n         NAME@48..49\n           IDENT@48..49 \"u\"\n         COLON@49..50 \":\""}, {"sha": "1a32d88fdc44b47782edb32d535a2e5e3ac4785a", "filename": "crates/ra_syntax/test_data/parser/ok/0019_enums.rast", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0019_enums.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0019_enums.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0019_enums.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -86,10 +86,10 @@ SOURCE_FILE@0..182\n         NAME@101..102\n           IDENT@101..102 \"C\"\n         WHITESPACE@102..103 \" \"\n-        RECORD_FIELD_DEF_LIST@103..146\n+        RECORD_FIELD_LIST@103..146\n           L_CURLY@103..104 \"{\"\n           WHITESPACE@104..113 \"\\n        \"\n-          RECORD_FIELD_DEF@113..119\n+          RECORD_FIELD@113..119\n             NAME@113..114\n               IDENT@113..114 \"a\"\n             COLON@114..115 \":\"\n@@ -101,7 +101,7 @@ SOURCE_FILE@0..182\n                     IDENT@116..119 \"u32\"\n           COMMA@119..120 \",\"\n           WHITESPACE@120..129 \"\\n        \"\n-          RECORD_FIELD_DEF@129..139\n+          RECORD_FIELD@129..139\n             VISIBILITY@129..132\n               PUB_KW@129..132 \"pub\"\n             WHITESPACE@132..133 \" \"\n@@ -123,17 +123,17 @@ SOURCE_FILE@0..182\n         NAME@152..153\n           IDENT@152..153 \"F\"\n         WHITESPACE@153..154 \" \"\n-        RECORD_FIELD_DEF_LIST@154..156\n+        RECORD_FIELD_LIST@154..156\n           L_CURLY@154..155 \"{\"\n           R_CURLY@155..156 \"}\"\n       COMMA@156..157 \",\"\n       WHITESPACE@157..162 \"\\n    \"\n       ENUM_VARIANT@162..169\n         NAME@162..163\n           IDENT@162..163 \"D\"\n-        TUPLE_FIELD_DEF_LIST@163..169\n+        TUPLE_FIELD_LIST@163..169\n           L_PAREN@163..164 \"(\"\n-          TUPLE_FIELD_DEF@164..167\n+          TUPLE_FIELD@164..167\n             PATH_TYPE@164..167\n               PATH@164..167\n                 PATH_SEGMENT@164..167\n@@ -146,7 +146,7 @@ SOURCE_FILE@0..182\n       ENUM_VARIANT@175..178\n         NAME@175..176\n           IDENT@175..176 \"E\"\n-        TUPLE_FIELD_DEF_LIST@176..178\n+        TUPLE_FIELD_LIST@176..178\n           L_PAREN@176..177 \"(\"\n           R_PAREN@177..178 \")\"\n       COMMA@178..179 \",\""}, {"sha": "2aa075993fc5cf198c10cdbc243e6733b7d34e57", "filename": "crates/ra_syntax/test_data/parser/ok/0035_weird_exprs.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0035_weird_exprs.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -1571,10 +1571,10 @@ SOURCE_FILE@0..3813\n             LIFETIME@2863..2869 \"\\'union\"\n           R_ANGLE@2869..2870 \">\"\n         WHITESPACE@2870..2871 \" \"\n-        RECORD_FIELD_DEF_LIST@2871..2904\n+        RECORD_FIELD_LIST@2871..2904\n           L_CURLY@2871..2872 \"{\"\n           WHITESPACE@2872..2873 \" \"\n-          RECORD_FIELD_DEF@2873..2901\n+          RECORD_FIELD@2873..2901\n             NAME@2873..2878\n               IDENT@2873..2878 \"union\"\n             COLON@2878..2879 \":\""}, {"sha": "0f0138c861de5d67e4b27fe501c119535db1143f", "filename": "crates/ra_syntax/test_data/parser/ok/0040_raw_struct_item_field.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0040_raw_struct_item_field.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0040_raw_struct_item_field.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0040_raw_struct_item_field.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -5,10 +5,10 @@ SOURCE_FILE@0..27\n     NAME@7..8\n       IDENT@7..8 \"S\"\n     WHITESPACE@8..9 \" \"\n-    RECORD_FIELD_DEF_LIST@9..27\n+    RECORD_FIELD_LIST@9..27\n       L_CURLY@9..10 \"{\"\n       WHITESPACE@10..15 \"\\n    \"\n-      RECORD_FIELD_DEF@15..25\n+      RECORD_FIELD@15..25\n         NAME@15..20\n           IDENT@15..20 \"r#foo\"\n         COLON@20..21 \":\""}, {"sha": "9c2ea37549fb52b53b598ceeb55c278269ca2045", "filename": "crates/ra_syntax/test_data/parser/ok/0043_complex_assignment.rast", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0043_complex_assignment.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -7,10 +7,10 @@ SOURCE_FILE@0..160\n     NAME@69..73\n       IDENT@69..73 \"Repr\"\n     WHITESPACE@73..74 \" \"\n-    RECORD_FIELD_DEF_LIST@74..90\n+    RECORD_FIELD_LIST@74..90\n       L_CURLY@74..75 \"{\"\n       WHITESPACE@75..76 \" \"\n-      RECORD_FIELD_DEF@76..88\n+      RECORD_FIELD@76..88\n         NAME@76..79\n           IDENT@76..79 \"raw\"\n         COLON@79..80 \":\""}, {"sha": "fcf605ec825ed8da542bb728b0a361e5e67e8b61", "filename": "crates/ra_syntax/test_data/parser/ok/0047_minus_in_inner_pattern.rast", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rast", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Ftest_data%2Fparser%2Fok%2F0047_minus_in_inner_pattern.rast?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -268,17 +268,17 @@ SOURCE_FILE@0..395\n       ENUM_VARIANT@356..365\n         NAME@356..357\n           IDENT@356..357 \"B\"\n-        TUPLE_FIELD_DEF_LIST@357..365\n+        TUPLE_FIELD_LIST@357..365\n           L_PAREN@357..358 \"(\"\n-          TUPLE_FIELD_DEF@358..360\n+          TUPLE_FIELD@358..360\n             PATH_TYPE@358..360\n               PATH@358..360\n                 PATH_SEGMENT@358..360\n                   NAME_REF@358..360\n                     IDENT@358..360 \"i8\"\n           COMMA@360..361 \",\"\n           WHITESPACE@361..362 \" \"\n-          TUPLE_FIELD_DEF@362..364\n+          TUPLE_FIELD@362..364\n             PATH_TYPE@362..364\n               PATH@362..364\n                 PATH_SEGMENT@362..364"}, {"sha": "f1373fd614dda33513a43641e6b8019e56372403", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -39,7 +39,7 @@ pub(crate) fn symbol_kind(syntax_kind: SyntaxKind) -> lsp_types::SymbolKind {\n         SyntaxKind::MACRO_CALL => lsp_types::SymbolKind::Function,\n         SyntaxKind::MODULE => lsp_types::SymbolKind::Module,\n         SyntaxKind::TYPE_ALIAS => lsp_types::SymbolKind::TypeParameter,\n-        SyntaxKind::RECORD_FIELD_DEF => lsp_types::SymbolKind::Field,\n+        SyntaxKind::RECORD_FIELD => lsp_types::SymbolKind::Field,\n         SyntaxKind::STATIC_DEF => lsp_types::SymbolKind::Constant,\n         SyntaxKind::CONST_DEF => lsp_types::SymbolKind::Constant,\n         SyntaxKind::IMPL_DEF => lsp_types::SymbolKind::Object,"}, {"sha": "ad661218f2b5bad6ca41bf82ce032e629b3a7901", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -180,10 +180,10 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"EXTERN_BLOCK\",\n         \"EXTERN_ITEM_LIST\",\n         \"ENUM_VARIANT\",\n-        \"RECORD_FIELD_DEF_LIST\",\n-        \"RECORD_FIELD_DEF\",\n-        \"TUPLE_FIELD_DEF_LIST\",\n-        \"TUPLE_FIELD_DEF\",\n+        \"RECORD_FIELD_LIST\",\n+        \"RECORD_FIELD\",\n+        \"TUPLE_FIELD_LIST\",\n+        \"TUPLE_FIELD\",\n         \"ENUM_VARIANT_LIST\",\n         \"ITEM_LIST\",\n         \"ASSOC_ITEM_LIST\","}, {"sha": "ba922af0d4d0591d3c19255b14e617d8256d38e7", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a257fd06b36d2e7310e5e38823f6636343a37331/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/a257fd06b36d2e7310e5e38823f6636343a37331/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=a257fd06b36d2e7310e5e38823f6636343a37331", "patch": "@@ -78,30 +78,30 @@ TypeAlias =\n \n StructDef =\n   Attr* Visibility? 'struct' Name GenericParamList? (\n-    WhereClause?  (RecordFieldDefList | ';')\n-  | TupleFieldDefList WhereClause? ';'\n+    WhereClause?  (RecordFieldList | ';')\n+  | TupleFieldList WhereClause? ';'\n   )\n \n-RecordFieldDefList =\n- '{' fields:RecordFieldDef* '}'\n+RecordFieldList =\n+ '{' fields:RecordField* '}'\n \n-RecordFieldDef =\n+RecordField =\n   Attr* Visibility? Name ':' ascribed_type:TypeRef\n \n-TupleFieldDefList =\n-  '(' fields:TupleFieldDef* ')'\n+TupleFieldList =\n+  '(' fields:TupleField* ')'\n \n-TupleFieldDef =\n+TupleField =\n   Attr* Visibility? Name TypeRef\n \n-FieldDefList =\n-  RecordFieldDefList\n-| TupleFieldDefList\n+FieldList =\n+  RecordFieldList\n+| TupleFieldList\n \n \n UnionDef =\n   Attr* Visibility? 'union' Name GenericParamList? WhereClause?\n-  RecordFieldDefList\n+  RecordFieldList\n \n EnumDef =\n   Attr* Visibility? 'enum' Name GenericParamList? WhereClause?\n@@ -111,7 +111,7 @@ EnumVariantList =\n  '{' variants:EnumVariant* '}'\n \n EnumVariant =\n-  Attr* Visibility? Name FieldDefList ('=' Expr)?\n+  Attr* Visibility? Name FieldList ('=' Expr)?\n \n TraitDef =\n   Attr* Visibility? 'unsafe'? 'auto'? 'trait' Name GenericParamList"}]}