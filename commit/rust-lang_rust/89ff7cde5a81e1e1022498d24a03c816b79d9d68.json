{"sha": "89ff7cde5a81e1e1022498d24a03c816b79d9d68", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5ZmY3Y2RlNWE4MWUxZTEwMjI0OThkMjRhMDNjODE2Yjc5ZDlkNjg=", "commit": {"author": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2019-04-27T16:19:34Z"}, "committer": {"name": "Steven Fackler", "email": "sfackler@gmail.com", "date": "2019-04-27T16:19:34Z"}, "message": "tidy", "tree": {"sha": "72abde6a5f2e8053ec6707a7d4b5a3d4ed57aabe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72abde6a5f2e8053ec6707a7d4b5a3d4ed57aabe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89ff7cde5a81e1e1022498d24a03c816b79d9d68", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89ff7cde5a81e1e1022498d24a03c816b79d9d68", "html_url": "https://github.com/rust-lang/rust/commit/89ff7cde5a81e1e1022498d24a03c816b79d9d68", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89ff7cde5a81e1e1022498d24a03c816b79d9d68/comments", "author": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sfackler", "id": 1455697, "node_id": "MDQ6VXNlcjE0NTU2OTc=", "avatar_url": "https://avatars.githubusercontent.com/u/1455697?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sfackler", "html_url": "https://github.com/sfackler", "followers_url": "https://api.github.com/users/sfackler/followers", "following_url": "https://api.github.com/users/sfackler/following{/other_user}", "gists_url": "https://api.github.com/users/sfackler/gists{/gist_id}", "starred_url": "https://api.github.com/users/sfackler/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sfackler/subscriptions", "organizations_url": "https://api.github.com/users/sfackler/orgs", "repos_url": "https://api.github.com/users/sfackler/repos", "events_url": "https://api.github.com/users/sfackler/events{/privacy}", "received_events_url": "https://api.github.com/users/sfackler/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd177f3ea31e47b94dd400239a9badfe2bd47355", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd177f3ea31e47b94dd400239a9badfe2bd47355", "html_url": "https://github.com/rust-lang/rust/commit/bd177f3ea31e47b94dd400239a9badfe2bd47355"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "6eba1033a417dd883a5a0903829fb4f25f78071b", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/89ff7cde5a81e1e1022498d24a03c816b79d9d68/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89ff7cde5a81e1e1022498d24a03c816b79d9d68/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=89ff7cde5a81e1e1022498d24a03c816b79d9d68", "patch": "@@ -5,7 +5,8 @@ use crate::io::prelude::*;\n use crate::cmp;\n use crate::error;\n use crate::fmt;\n-use crate::io::{self, Initializer, DEFAULT_BUF_SIZE, Error, ErrorKind, SeekFrom, IoSlice, IoSliceMut};\n+use crate::io::{self, Initializer, DEFAULT_BUF_SIZE, Error, ErrorKind, SeekFrom, IoSlice,\n+        IoSliceMut};\n use crate::memchr;\n \n /// The `BufReader` struct adds buffering to any reader."}, {"sha": "64f8659b8f8fe35ae27ccb86f55cf9b792aab5c4", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 20, "deletions": 7, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/89ff7cde5a81e1e1022498d24a03c816b79d9d68/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89ff7cde5a81e1e1022498d24a03c816b79d9d68/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=89ff7cde5a81e1e1022498d24a03c816b79d9d68", "patch": "@@ -455,7 +455,10 @@ mod tests {\n         assert_eq!(writer.write_vectored(&[IoSlice::new(&[0])]).unwrap(), 1);\n         assert_eq!(writer.position(), 1);\n         assert_eq!(\n-            writer.write_vectored(&[IoSlice::new(&[1, 2, 3]), IoSlice::new(&[4, 5, 6, 7])]).unwrap(),\n+            writer.write_vectored(&[\n+                IoSlice::new(&[1, 2, 3]),\n+                IoSlice::new(&[4, 5, 6, 7]),\n+            ]).unwrap(),\n             7,\n         );\n         assert_eq!(writer.position(), 8);\n@@ -582,7 +585,10 @@ mod tests {\n         assert_eq!(reader.position(), 0);\n         let mut buf = [0];\n         assert_eq!(\n-            reader.read_vectored(&mut [IoSliceMut::new(&mut []), IoSliceMut::new(&mut buf)]).unwrap(),\n+            reader.read_vectored(&mut [\n+                IoSliceMut::new(&mut []),\n+                IoSliceMut::new(&mut buf),\n+            ]).unwrap(),\n             1,\n         );\n         assert_eq!(reader.position(), 1);\n@@ -591,9 +597,10 @@ mod tests {\n         let mut buf1 = [0; 4];\n         let mut buf2 = [0; 4];\n         assert_eq!(\n-            reader.read_vectored(\n-                &mut [IoSliceMut::new(&mut buf1), IoSliceMut::new(&mut buf2)],\n-            ).unwrap(),\n+            reader.read_vectored(&mut [\n+                IoSliceMut::new(&mut buf1),\n+                IoSliceMut::new(&mut buf2),\n+            ]).unwrap(),\n             7,\n         );\n         let b1: &[_] = &[1, 2, 3, 4];\n@@ -633,7 +640,10 @@ mod tests {\n         assert_eq!(reader.position(), 0);\n         let mut buf = [0];\n         assert_eq!(\n-            reader.read_vectored(&mut [IoSliceMut::new(&mut []), IoSliceMut::new(&mut buf)]).unwrap(),\n+            reader.read_vectored(&mut [\n+                IoSliceMut::new(&mut []),\n+                IoSliceMut::new(&mut buf),\n+            ]).unwrap(),\n             1,\n         );\n         assert_eq!(reader.position(), 1);\n@@ -692,7 +702,10 @@ mod tests {\n         assert_eq!(reader.read_vectored(&mut [IoSliceMut::new(&mut buf)]).unwrap(), 0);\n         let mut buf = [0];\n         assert_eq!(\n-            reader.read_vectored(&mut [IoSliceMut::new(&mut []), IoSliceMut::new(&mut buf)]).unwrap(),\n+            reader.read_vectored(&mut [\n+                IoSliceMut::new(&mut []),\n+                IoSliceMut::new(&mut buf),\n+            ]).unwrap(),\n             1,\n         );\n         assert_eq!(reader.len(), 7);"}, {"sha": "c959f2d389b116aefcc970a816564569c421e50a", "filename": "src/libstd/io/impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89ff7cde5a81e1e1022498d24a03c816b79d9d68/src%2Flibstd%2Fio%2Fimpls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89ff7cde5a81e1e1022498d24a03c816b79d9d68/src%2Flibstd%2Fio%2Fimpls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fimpls.rs?ref=89ff7cde5a81e1e1022498d24a03c816b79d9d68", "patch": "@@ -1,6 +1,6 @@\n use crate::cmp;\n-use crate::io::{self, SeekFrom, Read, Initializer, Write, Seek, BufRead, Error, ErrorKind, IoSliceMut,\n-         IoSlice};\n+use crate::io::{self, SeekFrom, Read, Initializer, Write, Seek, BufRead, Error, ErrorKind,\n+        IoSliceMut, IoSlice};\n use crate::fmt;\n use crate::mem;\n "}]}