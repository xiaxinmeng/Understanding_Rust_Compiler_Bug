{"sha": "44f22e694cf62f6a1106d961136e3d77d7c33a11", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0ZjIyZTY5NGNmNjJmNmExMTA2ZDk2MTEzNmUzZDc3ZDdjMzNhMTE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-07-03T23:38:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-07-03T23:38:53Z"}, "message": "Rollup merge of #62295 - RalfJung:miri-realloc, r=cramertj\n\nmiri realloc: do not require giving old size+align", "tree": {"sha": "602a0bab814f7e48a9c68bf4934a5dc58ebb939f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/602a0bab814f7e48a9c68bf4934a5dc58ebb939f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44f22e694cf62f6a1106d961136e3d77d7c33a11", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdHTyNCRBK7hj4Ov3rIwAAdHIIACoYdc5LvNkGc9O6fAQmfUPI\nX8Do/wmeJ9yOjZttHQ5VRSlqDB1kF15JmyyjvcsxEjkpLqFil0R/0jNAavWqJwxq\n2q2lcL+Fiww7NcxguZQdDdcCVsd9bBgD0A1dGtb228HHajlrwFCzVxdQgqPNhgFl\nr4B6HTazMWpENUkuUsWanT4tdEzDugyUiNpLOiLpjrLLYG12yA504p0nK4VtRjGB\nkBu08csdg2eR6G3zBWODSXEZRx50IxhRNRn1yd1VL6Wp2lq3FzKebUm2H36JsvfE\n+HlRmndEYyLYOqseyxVCysE/ctuESQmF1q7BsdD4Ui1Xe6wg2lje0BCgELUnQw4=\n=1ylm\n-----END PGP SIGNATURE-----\n", "payload": "tree 602a0bab814f7e48a9c68bf4934a5dc58ebb939f\nparent d93b52fd18b1b664db1748d38e13a27852c0349a\nparent b49fb76dba02daaac3c6a1133c9bedd0f20f43dc\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1562197133 +0200\ncommitter GitHub <noreply@github.com> 1562197133 +0200\n\nRollup merge of #62295 - RalfJung:miri-realloc, r=cramertj\n\nmiri realloc: do not require giving old size+align\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44f22e694cf62f6a1106d961136e3d77d7c33a11", "html_url": "https://github.com/rust-lang/rust/commit/44f22e694cf62f6a1106d961136e3d77d7c33a11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44f22e694cf62f6a1106d961136e3d77d7c33a11/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d93b52fd18b1b664db1748d38e13a27852c0349a", "url": "https://api.github.com/repos/rust-lang/rust/commits/d93b52fd18b1b664db1748d38e13a27852c0349a", "html_url": "https://github.com/rust-lang/rust/commit/d93b52fd18b1b664db1748d38e13a27852c0349a"}, {"sha": "b49fb76dba02daaac3c6a1133c9bedd0f20f43dc", "url": "https://api.github.com/repos/rust-lang/rust/commits/b49fb76dba02daaac3c6a1133c9bedd0f20f43dc", "html_url": "https://github.com/rust-lang/rust/commit/b49fb76dba02daaac3c6a1133c9bedd0f20f43dc"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "5b177d05bb862f6a7b215e3d76a02a5cbb3323ba", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/44f22e694cf62f6a1106d961136e3d77d7c33a11/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44f22e694cf62f6a1106d961136e3d77d7c33a11/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=44f22e694cf62f6a1106d961136e3d77d7c33a11", "patch": "@@ -158,8 +158,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     pub fn reallocate(\n         &mut self,\n         ptr: Pointer<M::PointerTag>,\n-        old_size: Size,\n-        old_align: Align,\n+        old_size_and_align: Option<(Size, Align)>,\n         new_size: Size,\n         new_align: Align,\n         kind: MemoryKind<M::MemoryKinds>,\n@@ -171,15 +170,19 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         // For simplicities' sake, we implement reallocate as \"alloc, copy, dealloc\".\n         // This happens so rarely, the perf advantage is outweighed by the maintenance cost.\n         let new_ptr = self.allocate(new_size, new_align, kind);\n+        let old_size = match old_size_and_align {\n+            Some((size, _align)) => size,\n+            None => Size::from_bytes(self.get(ptr.alloc_id)?.bytes.len() as u64),\n+        };\n         self.copy(\n             ptr.into(),\n-            old_align,\n+            Align::from_bytes(1).unwrap(), // old_align anyway gets checked below by `deallocate`\n             new_ptr.into(),\n             new_align,\n             old_size.min(new_size),\n             /*nonoverlapping*/ true,\n         )?;\n-        self.deallocate(ptr, Some((old_size, old_align)), kind)?;\n+        self.deallocate(ptr, old_size_and_align, kind)?;\n \n         Ok(new_ptr)\n     }\n@@ -198,7 +201,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n     pub fn deallocate(\n         &mut self,\n         ptr: Pointer<M::PointerTag>,\n-        size_and_align: Option<(Size, Align)>,\n+        old_size_and_align: Option<(Size, Align)>,\n         kind: MemoryKind<M::MemoryKinds>,\n     ) -> InterpResult<'tcx> {\n         trace!(\"deallocating: {}\", ptr.alloc_id);\n@@ -232,7 +235,7 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 format!(\"{:?}\", kind),\n             ));\n         }\n-        if let Some((size, align)) = size_and_align {\n+        if let Some((size, align)) = old_size_and_align {\n             if size.bytes() != alloc.bytes.len() as u64 || align != alloc.align {\n                 let bytes = Size::from_bytes(alloc.bytes.len() as u64);\n                 return err!(IncorrectAllocationInformation(size,"}]}