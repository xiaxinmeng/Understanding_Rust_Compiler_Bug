{"sha": "1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MTNhYzRiZjVjOTkyZjQwZDY2N2M5MjljMWUxY2U5YzNhNTEyMDQ=", "commit": {"author": {"name": "varkor", "email": "github@varkor.com", "date": "2018-10-19T14:40:07Z"}, "committer": {"name": "Dan Robertson", "email": "dan@dlrobertson.com", "date": "2019-08-17T15:05:36Z"}, "message": "Initial implementation of or patterns", "tree": {"sha": "098d9b4e320c88f985b2459ae9ded38081f46cb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/098d9b4e320c88f985b2459ae9ded38081f46cb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF5dO2RaKc5C+SCJ9RcSmUsR+QqUFAl1YF8AACgkQRcSmUsR+\nQqVjeQ//TnyMeYe43GezpC6xr6Z/4uCLipXkw/CU8o9vnkb0S/R2EHbW9O1s61R+\nFZiylLfdVMxFNTMvWoMzfWQiweVQLpkPPdeb7A94b5UOp0BoE4AD1wXFySV/2aPQ\nUN61llo2TYFO+DttBf5mZ+QkyAnol14A+iF9z4F5d8PPlNEpO3bdSIQmb2wox+T+\nkU5PaMV3c1G5yMPfNS0fMkFXQlvgQdNOSep73/lUtxiy1xSvvp+2x9KsKatRAaAA\n/6FsawK/mrAZUTLP0Iyh3+ybcy/hnJZM5cWH97xHovZHsNDsBYfqXkGjanq/knhC\nXmx9vIQ/fZ/wMdy9CV5UnErBg+rkY86H0RVqbdfaMf8NBPOst2so3yw4K/t67zJ4\nnSL/KfXDd8By092gXisCOQTKz0iB6LR/k08DSTBjYGt0gSadtvziu6JiO4NirycO\nuaeV+HartyJFbbK34si1iErcOwrjDncZZ1RktOQH3j6tN533Q5L+5DqKtklm97Bf\nlbhCGOGlOyTZfJtpo14PSc7JOo4XWjchUq/517oY3243XfhWY9a7kxA9awIN0pBf\nRifZ+flqL7SpaxNn/bqEY7I63CSM7Q7FmopiJY2fZEAhKUSKruziQL8MTHZdL+6z\n1aHQgy7rSSpczb6AmCtGvy7qzMgsYL3QuFwXGlqXcrs/rZKwlPA=\n=UKjc\n-----END PGP SIGNATURE-----", "payload": "tree 098d9b4e320c88f985b2459ae9ded38081f46cb7\nparent ac60ca0643feb3452688a9ca97c839c155742915\nauthor varkor <github@varkor.com> 1539960007 +0100\ncommitter Dan Robertson <dan@dlrobertson.com> 1566054336 +0000\n\nInitial implementation of or patterns\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "html_url": "https://github.com/rust-lang/rust/commit/1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/comments", "author": {"login": "varkor", "id": 3943692, "node_id": "MDQ6VXNlcjM5NDM2OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3943692?v=4", "gravatar_id": "", "url": "https://api.github.com/users/varkor", "html_url": "https://github.com/varkor", "followers_url": "https://api.github.com/users/varkor/followers", "following_url": "https://api.github.com/users/varkor/following{/other_user}", "gists_url": "https://api.github.com/users/varkor/gists{/gist_id}", "starred_url": "https://api.github.com/users/varkor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/varkor/subscriptions", "organizations_url": "https://api.github.com/users/varkor/orgs", "repos_url": "https://api.github.com/users/varkor/repos", "events_url": "https://api.github.com/users/varkor/events{/privacy}", "received_events_url": "https://api.github.com/users/varkor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dlrobertson", "id": 7504153, "node_id": "MDQ6VXNlcjc1MDQxNTM=", "avatar_url": "https://avatars.githubusercontent.com/u/7504153?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dlrobertson", "html_url": "https://github.com/dlrobertson", "followers_url": "https://api.github.com/users/dlrobertson/followers", "following_url": "https://api.github.com/users/dlrobertson/following{/other_user}", "gists_url": "https://api.github.com/users/dlrobertson/gists{/gist_id}", "starred_url": "https://api.github.com/users/dlrobertson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dlrobertson/subscriptions", "organizations_url": "https://api.github.com/users/dlrobertson/orgs", "repos_url": "https://api.github.com/users/dlrobertson/repos", "events_url": "https://api.github.com/users/dlrobertson/events{/privacy}", "received_events_url": "https://api.github.com/users/dlrobertson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac60ca0643feb3452688a9ca97c839c155742915", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac60ca0643feb3452688a9ca97c839c155742915", "html_url": "https://github.com/rust-lang/rust/commit/ac60ca0643feb3452688a9ca97c839c155742915"}], "stats": {"total": 160, "additions": 134, "deletions": 26}, "files": [{"sha": "0dad2dda837b53f236a86499a3fa97db7af725cb", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "patch": "@@ -140,6 +140,11 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                 self.add_ast_node(pat.hir_id.local_id, &[pats_exit])\n             }\n \n+            PatKind::Or(ref pats) => {\n+                let branches: Vec<_> = pats.iter().map(|p| self.pat(p, pred)).collect();\n+                self.add_ast_node(pat.hir_id.local_id, &branches)\n+            }\n+\n             PatKind::Slice(ref pre, ref vec, ref post) => {\n                 let pre_exit = self.pats_all(pre.iter(), pred);\n                 let vec_exit = self.pats_all(vec.iter(), pre_exit);"}, {"sha": "2c6373bdfa40d35732b1a2817f8e3e8e00a8d208", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "patch": "@@ -709,6 +709,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n                 visitor.visit_pat(&field.pat)\n             }\n         }\n+        PatKind::Or(ref pats) => walk_list!(visitor, visit_pat, pats),\n         PatKind::Tuple(ref tuple_elements, _) => {\n             walk_list!(visitor, visit_pat, tuple_elements);\n         }"}, {"sha": "d2ea485b5db8246d37a43d0ff0b54cc185dd1b2c", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "patch": "@@ -2669,6 +2669,9 @@ impl<'a> LoweringContext<'a> {\n                 let (pats, ddpos) = self.lower_pat_tuple(pats, \"tuple struct\");\n                 hir::PatKind::TupleStruct(qpath, pats, ddpos)\n             }\n+            PatKind::Or(ref pats) => {\n+                hir::PatKind::Or(pats.iter().map(|x| self.lower_pat(x)).collect())\n+            }\n             PatKind::Path(ref qself, ref path) => {\n                 let qpath = self.lower_qpath(\n                     p.id,"}, {"sha": "2ae08568b7f7dddbd0ec8dea1a5e981a16a2b458", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "patch": "@@ -882,6 +882,7 @@ impl Pat {\n             PatKind::TupleStruct(_, ref s, _) | PatKind::Tuple(ref s, _) => {\n                 s.iter().all(|p| p.walk_(it))\n             }\n+            PatKind::Or(ref pats) => pats.iter().all(|p| p.walk_(it)),\n             PatKind::Box(ref s) | PatKind::Ref(ref s, _) => {\n                 s.walk_(it)\n             }\n@@ -976,6 +977,9 @@ pub enum PatKind {\n     /// `0 <= position <= subpats.len()`\n     TupleStruct(QPath, HirVec<P<Pat>>, Option<usize>),\n \n+    /// An or-pattern `A | B | C`.\n+    Or(Vec<P<Pat>>),\n+\n     /// A path pattern for an unit struct/variant or a (maybe-associated) constant.\n     Path(QPath),\n "}, {"sha": "157b7c07a9b385ac1af4bc1be20da711357e82bd", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "patch": "@@ -4,7 +4,7 @@ use syntax::source_map::{SourceMap, Spanned};\n use syntax::parse::ParseSess;\n use syntax::print::pp::{self, Breaks};\n use syntax::print::pp::Breaks::{Consistent, Inconsistent};\n-use syntax::print::pprust::{self, Comments, PrintState};\n+use syntax::print::pprust::{self, Comments, PrintState, SeparatorSpacing};\n use syntax::symbol::kw;\n use syntax::util::parser::{self, AssocOp, Fixity};\n use syntax_pos::{self, BytePos, FileName};\n@@ -1687,6 +1687,10 @@ impl<'a> State<'a> {\n                 self.s.space();\n                 self.s.word(\"}\");\n             }\n+            PatKind::Or(ref pats) => {\n+                let spacing = SeparatorSpacing::Both;\n+                self.strsep(\"|\", spacing, Inconsistent, &pats[..], |s, p| s.print_pat(&p))?;\n+            }\n             PatKind::Tuple(ref elts, ddpos) => {\n                 self.popen();\n                 if let Some(ddpos) = ddpos {"}, {"sha": "73ca981bbe868513cebb0039080d23097c323509", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "patch": "@@ -1290,6 +1290,12 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n                 }\n             }\n \n+            PatKind::Or(ref pats) => {\n+                for pat in pats {\n+                    self.cat_pattern_(cmt.clone(), &pat, op)?;\n+                }\n+            }\n+\n             PatKind::Binding(.., Some(ref subpat)) => {\n                 self.cat_pattern_(cmt, &subpat, op)?;\n             }"}, {"sha": "0dec7ef4f00615fc0316686c9351f975baeab2d8", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "patch": "@@ -657,6 +657,12 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                     self.visit_bindings(&subpattern.pattern, subpattern_user_ty, f);\n                 }\n             }\n+            PatternKind::Or { ref pats } => {\n+                // FIXME(#47184): extract or handle `pattern_user_ty` somehow\n+                for pat in pats {\n+                    self.visit_bindings(&pat, &pattern_user_ty.clone(), f);\n+                }\n+            }\n         }\n     }\n }"}, {"sha": "8d049b53988a9197f78c2e4aedd4f839f7a079e9", "filename": "src/librustc_mir/build/matches/simplify.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fsimplify.rs?ref=1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "patch": "@@ -195,6 +195,10 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n                 candidate.match_pairs.push(MatchPair::new(place, subpattern));\n                 Ok(())\n             }\n+\n+            PatternKind::Or { .. } => {\n+                Err(match_pair)\n+            }\n         }\n     }\n }"}, {"sha": "ec85daccd476eb49efa6a7c729dcea23c0a5ad17", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "patch": "@@ -87,6 +87,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             PatternKind::AscribeUserType { .. } |\n             PatternKind::Array { .. } |\n             PatternKind::Wild |\n+            PatternKind::Or { .. } |\n             PatternKind::Binding { .. } |\n             PatternKind::Leaf { .. } |\n             PatternKind::Deref { .. } => {\n@@ -130,6 +131,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n             PatternKind::Slice { .. } |\n             PatternKind::Array { .. } |\n             PatternKind::Wild |\n+            PatternKind::Or { .. } |\n             PatternKind::Binding { .. } |\n             PatternKind::AscribeUserType { .. } |\n             PatternKind::Leaf { .. } |"}, {"sha": "ae59244d37f5128f2bb674ca014f1a718c378864", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "patch": "@@ -75,9 +75,6 @@\n ///                     D((r_1, p_(i,2), .., p_(i,n)))\n ///                     D((r_2, p_(i,2), .., p_(i,n)))\n ///\n-///     Note that the OR-patterns are not always used directly in Rust, but are used to derive\n-///     the exhaustive integer matching rules, so they're written here for posterity.\n-///\n /// The algorithm for computing `U`\n /// -------------------------------\n /// The algorithm is inductive (on the number of columns: i.e., components of tuple patterns).\n@@ -1359,6 +1356,9 @@ fn pat_constructors<'tcx>(cx: &mut MatchCheckCtxt<'_, 'tcx>,\n                 Some(vec![Slice(pat_len)])\n             }\n         }\n+        PatternKind::Or { .. } => {\n+            bug!(\"support for or-patterns has not been fully implemented yet.\");\n+        }\n     }\n }\n \n@@ -1884,6 +1884,10 @@ fn specialize<'p, 'a: 'p, 'tcx>(\n                     \"unexpected ctor {:?} for slice pat\", constructor)\n             }\n         }\n+\n+        PatternKind::Or { .. } => {\n+            bug!(\"support for or-patterns has not been fully implemented yet.\");\n+        }\n     };\n     debug!(\"specialize({:#?}, {:#?}) = {:#?}\", r[0], wild_patterns, head);\n "}, {"sha": "d2a5793e703632e115a7b72fa06aeccc42386bcc", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 36, "deletions": 11, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "patch": "@@ -175,6 +175,11 @@ pub enum PatternKind<'tcx> {\n         slice: Option<Pattern<'tcx>>,\n         suffix: Vec<Pattern<'tcx>>,\n     },\n+\n+    /// or-pattern\n+    Or {\n+        pats: Vec<Pattern<'tcx>>,\n+    },\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n@@ -186,6 +191,18 @@ pub struct PatternRange<'tcx> {\n \n impl<'tcx> fmt::Display for Pattern<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        // Printing lists is a chore.\n+        let mut first = true;\n+        let mut start_or_continue = |s| {\n+            if first {\n+                first = false;\n+                \"\"\n+            } else {\n+                s\n+            }\n+        };\n+        let mut start_or_comma = || start_or_continue(\", \");\n+\n         match *self.kind {\n             PatternKind::Wild => write!(f, \"_\"),\n             PatternKind::AscribeUserType { ref subpattern, .. } =>\n@@ -224,9 +241,6 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n                     }\n                 };\n \n-                let mut first = true;\n-                let mut start_or_continue = || if first { first = false; \"\" } else { \", \" };\n-\n                 if let Some(variant) = variant {\n                     write!(f, \"{}\", variant.ident)?;\n \n@@ -241,12 +255,12 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n                                 continue;\n                             }\n                             let name = variant.fields[p.field.index()].ident;\n-                            write!(f, \"{}{}: {}\", start_or_continue(), name, p.pattern)?;\n+                            write!(f, \"{}{}: {}\", start_or_comma(), name, p.pattern)?;\n                             printed += 1;\n                         }\n \n                         if printed < variant.fields.len() {\n-                            write!(f, \"{}..\", start_or_continue())?;\n+                            write!(f, \"{}..\", start_or_comma())?;\n                         }\n \n                         return write!(f, \" }}\");\n@@ -257,7 +271,7 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n                 if num_fields != 0 || variant.is_none() {\n                     write!(f, \"(\")?;\n                     for i in 0..num_fields {\n-                        write!(f, \"{}\", start_or_continue())?;\n+                        write!(f, \"{}\", start_or_comma())?;\n \n                         // Common case: the field is where we expect it.\n                         if let Some(p) = subpatterns.get(i) {\n@@ -305,25 +319,29 @@ impl<'tcx> fmt::Display for Pattern<'tcx> {\n             }\n             PatternKind::Slice { ref prefix, ref slice, ref suffix } |\n             PatternKind::Array { ref prefix, ref slice, ref suffix } => {\n-                let mut first = true;\n-                let mut start_or_continue = || if first { first = false; \"\" } else { \", \" };\n                 write!(f, \"[\")?;\n                 for p in prefix {\n-                    write!(f, \"{}{}\", start_or_continue(), p)?;\n+                    write!(f, \"{}{}\", start_or_comma(), p)?;\n                 }\n                 if let Some(ref slice) = *slice {\n-                    write!(f, \"{}\", start_or_continue())?;\n+                    write!(f, \"{}\", start_or_comma())?;\n                     match *slice.kind {\n                         PatternKind::Wild => {}\n                         _ => write!(f, \"{}\", slice)?\n                     }\n                     write!(f, \"..\")?;\n                 }\n                 for p in suffix {\n-                    write!(f, \"{}{}\", start_or_continue(), p)?;\n+                    write!(f, \"{}{}\", start_or_comma(), p)?;\n                 }\n                 write!(f, \"]\")\n             }\n+            PatternKind::Or { ref pats } => {\n+                for pat in pats {\n+                    write!(f, \"{}{}\", start_or_continue(\" | \"), pat)?;\n+                }\n+                Ok(())\n+            }\n         }\n     }\n }\n@@ -655,6 +673,12 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n \n                 self.lower_variant_or_leaf(res, pat.hir_id, pat.span, ty, subpatterns)\n             }\n+\n+            PatKind::Or(ref pats) => {\n+                PatternKind::Or {\n+                    pats: pats.iter().map(|p| self.lower_pattern(p)).collect(),\n+                }\n+            }\n         };\n \n         Pattern {\n@@ -1436,6 +1460,7 @@ impl<'tcx> PatternFoldable<'tcx> for PatternKind<'tcx> {\n                 slice: slice.fold_with(folder),\n                 suffix: suffix.fold_with(folder)\n             },\n+            PatternKind::Or { ref pats } => PatternKind::Or { pats: pats.fold_with(folder) },\n         }\n     }\n }"}, {"sha": "2e22fb766751ad2ea12c59f58382cacb5bf57a67", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "patch": "@@ -53,6 +53,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let is_non_ref_pat = match pat.node {\n             PatKind::Struct(..) |\n             PatKind::TupleStruct(..) |\n+            PatKind::Or(_) |\n             PatKind::Tuple(..) |\n             PatKind::Box(_) |\n             PatKind::Range(..) |\n@@ -309,6 +310,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             PatKind::Struct(ref qpath, ref fields, etc) => {\n                 self.check_pat_struct(pat, qpath, fields, etc, expected, def_bm, discrim_span)\n             }\n+            PatKind::Or(ref pats) => {\n+                let expected_ty = self.structurally_resolved_type(pat.span, expected);\n+                for pat in pats {\n+                    self.check_pat_walk(pat, expected, def_bm, false);\n+                }\n+                expected_ty\n+            }\n             PatKind::Tuple(ref elements, ddpos) => {\n                 let mut expected_len = elements.len();\n                 if ddpos.is_some() {"}, {"sha": "023d22861defaee1322c4407dd57bcd9cf6fbc8f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "patch": "@@ -4107,6 +4107,9 @@ fn name_from_pat(p: &hir::Pat) -> String {\n                 if etc { \", ..\" } else { \"\" }\n             )\n         }\n+        PatKind::Or(ref pats) => {\n+            pats.iter().map(|p| name_from_pat(&**p)).collect::<Vec<String>>().join(\" | \")\n+        }\n         PatKind::Tuple(ref elts, _) => format!(\"({})\", elts.iter().map(|p| name_from_pat(&**p))\n                                             .collect::<Vec<String>>().join(\", \")),\n         PatKind::Box(ref p) => name_from_pat(&**p),"}, {"sha": "0136c4ff5f936e0a5ed2f32955c03bb4f444c434", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "patch": "@@ -572,9 +572,10 @@ impl Pat {\n         match &self.node {\n             PatKind::Ident(_, _, Some(p)) => p.walk(it),\n             PatKind::Struct(_, fields, _) => fields.iter().all(|field| field.pat.walk(it)),\n-            PatKind::TupleStruct(_, s) | PatKind::Tuple(s) | PatKind::Slice(s) => {\n-                s.iter().all(|p| p.walk(it))\n-            }\n+            PatKind::TupleStruct(_, s)\n+            | PatKind::Tuple(s)\n+            | PatKind::Slice(s)\n+            | PatKind::Or(s) => s.iter().all(|p| p.walk(it)),\n             PatKind::Box(s) | PatKind::Ref(s, _) | PatKind::Paren(s) => s.walk(it),\n             PatKind::Wild\n             | PatKind::Rest\n@@ -648,6 +649,9 @@ pub enum PatKind {\n     /// A tuple struct/variant pattern (`Variant(x, y, .., z)`).\n     TupleStruct(Path, Vec<P<Pat>>),\n \n+    /// An or-pattern `A | B | C`.\n+    Or(Vec<P<Pat>>),\n+\n     /// A possibly qualified path pattern.\n     /// Unqualified path patterns `A::B::C` can legally refer to variants, structs, constants\n     /// or associated constants. Qualified path patterns `<A>::B::C`/`<A as Trait>::B::C` can"}, {"sha": "b67b4619d7f21e2cca249865fe50c6a10476e72a", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "patch": "@@ -1050,15 +1050,16 @@ pub fn noop_visit_pat<T: MutVisitor>(pat: &mut P<Pat>, vis: &mut T) {\n                 vis.visit_span(span);\n             };\n         }\n-        PatKind::Tuple(elems) => visit_vec(elems, |elem| vis.visit_pat(elem)),\n         PatKind::Box(inner) => vis.visit_pat(inner),\n         PatKind::Ref(inner, _mutbl) => vis.visit_pat(inner),\n         PatKind::Range(e1, e2, Spanned { span: _, node: _ }) => {\n             vis.visit_expr(e1);\n             vis.visit_expr(e2);\n             vis.visit_span(span);\n         }\n-        PatKind::Slice(elems) => visit_vec(elems, |elem| vis.visit_pat(elem)),\n+        PatKind::Tuple(elems)\n+        | PatKind::Slice(elems)\n+        | PatKind::Or(elems) => visit_vec(elems, |elem| vis.visit_pat(elem)),\n         PatKind::Paren(inner) => vis.visit_pat(inner),\n         PatKind::Mac(mac) => vis.visit_mac(mac),\n     }"}, {"sha": "8dcb7ecf881d0000d9b3e94500f6b90f9b74e6a3", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "patch": "@@ -431,23 +431,48 @@ impl std::ops::DerefMut for State<'_> {\n     }\n }\n \n+pub enum SeparatorSpacing {\n+    After,\n+    Both,\n+}\n+\n pub trait PrintState<'a>: std::ops::Deref<Target=pp::Printer> + std::ops::DerefMut {\n     fn comments(&mut self) -> &mut Option<Comments<'a>>;\n     fn print_ident(&mut self, ident: ast::Ident);\n     fn print_generic_args(&mut self, args: &ast::GenericArgs, colons_before_params: bool);\n \n-    fn commasep<T, F>(&mut self, b: Breaks, elts: &[T], mut op: F)\n+    fn strsep<T, F>(\n+        &mut self,\n+        sep: &'static str,\n+        spacing: SeparatorSpacing,\n+        b: Breaks,\n+        elts: &[T],\n+        mut op: F\n+    ) -> io::Result<()>\n         where F: FnMut(&mut Self, &T),\n     {\n         self.rbox(0, b);\n         let mut first = true;\n         for elt in elts {\n-            if first { first = false; } else { self.word_space(\",\"); }\n+            if first {\n+                first = false;\n+            } else {\n+                if let SeparatorSpacing::Both = spacing {\n+                    self.writer().space();\n+                }\n+                self.word_space(sep);\n+            }\n             op(self, elt);\n         }\n         self.end();\n     }\n \n+    fn commasep<T, F>(&mut self, b: Breaks, elts: &[T], mut op: F)\n+        where F: FnMut(&mut Self, &T),\n+    {\n+        self.strsep(\",\", SeparatorSpacing::After, b, elts, op)\n+    }\n+\n     fn maybe_print_comment(&mut self, pos: BytePos) {\n         while let Some(ref cmnt) = self.next_comment() {\n             if cmnt.pos < pos {\n@@ -2353,6 +2378,10 @@ impl<'a> State<'a> {\n                 self.commasep(Inconsistent, &elts[..], |s, p| s.print_pat(p));\n                 self.pclose();\n             }\n+            PatKind::Or(ref pats) => {\n+                let spacing = SeparatorSpacing::Both;\n+                self.strsep(\"|\", spacing, Inconsistent, &pats[..], |s, p| s.print_pat(p))?;\n+            }\n             PatKind::Path(None, ref path) => {\n                 self.print_path(path, true, 0);\n             }"}, {"sha": "ce679a5db63ff7b459e4e52177ed140a486b850a", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1713ac4bf5c992f40d667c929c1e1ce9c3a51204/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=1713ac4bf5c992f40d667c929c1e1ce9c3a51204", "patch": "@@ -447,9 +447,6 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n                 visitor.visit_pat(&field.pat)\n             }\n         }\n-        PatKind::Tuple(ref elems) => {\n-            walk_list!(visitor, visit_pat, elems);\n-        }\n         PatKind::Box(ref subpattern) |\n         PatKind::Ref(ref subpattern, _) |\n         PatKind::Paren(ref subpattern) => {\n@@ -465,7 +462,9 @@ pub fn walk_pat<'a, V: Visitor<'a>>(visitor: &mut V, pattern: &'a Pat) {\n             visitor.visit_expr(upper_bound);\n         }\n         PatKind::Wild | PatKind::Rest => {},\n-        PatKind::Slice(ref elems) => {\n+        PatKind::Tuple(ref elems) => {\n+        | PatKind::Slice(ref elems)\n+        | PatKind::Or(ref elems) => {\n             walk_list!(visitor, visit_pat, elems);\n         }\n         PatKind::Mac(ref mac) => visitor.visit_mac(mac),"}]}