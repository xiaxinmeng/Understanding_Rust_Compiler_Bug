{"sha": "57950faeb68754451f94062c11e3fcf830392025", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3OTUwZmFlYjY4NzU0NDUxZjk0MDYyYzExZTNmY2Y4MzAzOTIwMjU=", "commit": {"author": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2016-12-30T17:38:53Z"}, "committer": {"name": "Jeremy Soller", "email": "jackpot51@gmail.com", "date": "2016-12-30T17:38:53Z"}, "message": "Add socket timeout and ttl support", "tree": {"sha": "b9cade68c99583e515d9a3307859714ca8a168a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9cade68c99583e515d9a3307859714ca8a168a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57950faeb68754451f94062c11e3fcf830392025", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57950faeb68754451f94062c11e3fcf830392025", "html_url": "https://github.com/rust-lang/rust/commit/57950faeb68754451f94062c11e3fcf830392025", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57950faeb68754451f94062c11e3fcf830392025/comments", "author": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackpot51", "id": 7741236, "node_id": "MDQ6VXNlcjc3NDEyMzY=", "avatar_url": "https://avatars.githubusercontent.com/u/7741236?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackpot51", "html_url": "https://github.com/jackpot51", "followers_url": "https://api.github.com/users/jackpot51/followers", "following_url": "https://api.github.com/users/jackpot51/following{/other_user}", "gists_url": "https://api.github.com/users/jackpot51/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackpot51/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackpot51/subscriptions", "organizations_url": "https://api.github.com/users/jackpot51/orgs", "repos_url": "https://api.github.com/users/jackpot51/repos", "events_url": "https://api.github.com/users/jackpot51/events{/privacy}", "received_events_url": "https://api.github.com/users/jackpot51/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e7c788af75c92c3e0f8e547f28d734757136527f", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7c788af75c92c3e0f8e547f28d734757136527f", "html_url": "https://github.com/rust-lang/rust/commit/e7c788af75c92c3e0f8e547f28d734757136527f"}], "stats": {"total": 154, "additions": 128, "deletions": 26}, "files": [{"sha": "0291d7f0e927a7d3fc03c85b7f24b95dcafaa865", "filename": "src/libstd/sys/redox/net/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57950faeb68754451f94062c11e3fcf830392025/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57950faeb68754451f94062c11e3fcf830392025/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fmod.rs?ref=57950faeb68754451f94062c11e3fcf830392025", "patch": "@@ -15,7 +15,7 @@ use net::{Ipv4Addr, SocketAddr, SocketAddrV4};\n use str::FromStr;\n use string::{String, ToString};\n use sys::syscall::EINVAL;\n-use time;\n+use time::{self, Duration};\n use vec::{IntoIter, Vec};\n \n use self::dns::{Dns, DnsQuery};\n@@ -69,6 +69,8 @@ pub fn lookup_host(host: &str) -> Result<LookupHost> {\n         let my_ip = Ipv4Addr::new(ip[0], ip[1], ip[2], ip[3]);\n         let dns_ip = Ipv4Addr::new(dns[0], dns[1], dns[2], dns[3]);\n         let socket = UdpSocket::bind(&SocketAddr::V4(SocketAddrV4::new(my_ip, 0)))?;\n+        socket.set_read_timeout(Some(Duration::new(5, 0)))?;\n+        socket.set_write_timeout(Some(Duration::new(5, 0)))?;\n         socket.connect(&SocketAddr::V4(SocketAddrV4::new(dns_ip, 53)))?;\n         socket.send(&packet_data)?;\n "}, {"sha": "a3f202ccd97cbc492c2692c0692bb8e8448f7197", "filename": "src/libstd/sys/redox/net/tcp.rs", "status": "modified", "additions": 59, "deletions": 16, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/57950faeb68754451f94062c11e3fcf830392025/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57950faeb68754451f94062c11e3fcf830392025/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Ftcp.rs?ref=57950faeb68754451f94062c11e3fcf830392025", "patch": "@@ -8,10 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use cmp;\n use io::{Error, ErrorKind, Result};\n+use mem;\n use net::{SocketAddr, Shutdown};\n use path::Path;\n use sys::fs::{File, OpenOptions};\n+use sys::syscall::TimeSpec;\n use sys_common::{AsInner, FromInner, IntoInner};\n use time::Duration;\n use vec::Vec;\n@@ -77,15 +80,30 @@ impl TcpStream {\n     }\n \n     pub fn ttl(&self) -> Result<u32> {\n-        Err(Error::new(ErrorKind::Other, \"TcpStream::ttl not implemented\"))\n+        let mut ttl = [0];\n+        let file = self.0.dup(b\"ttl\")?;\n+        file.read(&mut ttl)?;\n+        Ok(ttl[0] as u32)\n     }\n \n     pub fn read_timeout(&self) -> Result<Option<Duration>> {\n-        Err(Error::new(ErrorKind::Other, \"TcpStream::read_timeout not implemented\"))\n+        let mut time = TimeSpec::default();\n+        let file = self.0.dup(b\"read_timeout\")?;\n+        if file.read(&mut time)? >= mem::size_of::<TimeSpec>() {\n+            Ok(Some(Duration::new(time.tv_sec as u64, time.tv_nsec as u32)))\n+        } else {\n+            Ok(None)\n+        }\n     }\n \n     pub fn write_timeout(&self) -> Result<Option<Duration>> {\n-        Err(Error::new(ErrorKind::Other, \"TcpStream::write_timeout not implemented\"))\n+        let mut time = TimeSpec::default();\n+        let file = self.0.dup(b\"write_timeout\")?;\n+        if file.read(&mut time)? >= mem::size_of::<TimeSpec>() {\n+            Ok(Some(Duration::new(time.tv_sec as u64, time.tv_nsec as u32)))\n+        } else {\n+            Ok(None)\n+        }\n     }\n \n     pub fn set_nodelay(&self, _nodelay: bool) -> Result<()> {\n@@ -100,16 +118,36 @@ impl TcpStream {\n         Err(Error::new(ErrorKind::Other, \"TcpStream::set_only_v6 not implemented\"))\n     }\n \n-    pub fn set_ttl(&self, _ttl: u32) -> Result<()> {\n-        Err(Error::new(ErrorKind::Other, \"TcpStream::set_ttl not implemented\"))\n-    }\n-\n-    pub fn set_read_timeout(&self, _dur: Option<Duration>) -> Result<()> {\n-        Err(Error::new(ErrorKind::Other, \"TcpStream::set_read_timeout not implemented\"))\n-    }\n-\n-    pub fn set_write_timeout(&self, _dur: Option<Duration>) -> Result<()> {\n-        Err(Error::new(ErrorKind::Other, \"TcpStream::set_write_timeout not implemented\"))\n+    pub fn set_ttl(&self, ttl: u32) -> Result<()> {\n+        let file = self.0.dup(b\"ttl\")?;\n+        file.write(&[cmp::min(ttl, 255) as u8])?;\n+        Ok(())\n+    }\n+\n+    pub fn set_read_timeout(&self, duration_option: Option<Duration>) -> Result<()> {\n+        let file = self.0.dup(b\"read_timeout\")?;\n+        if let Some(duration) = duration_option {\n+            file.write(&TimeSpec {\n+                tv_sec: duration.as_secs() as i64,\n+                tv_nsec: duration.subsec_nanos() as i32\n+            })?;\n+        } else {\n+            file.write(&[])?;\n+        }\n+        Ok(())\n+    }\n+\n+    pub fn set_write_timeout(&self, duration_option: Option<Duration>) -> Result<()> {\n+        let file = self.0.dup(b\"write_timeout\")?;\n+        if let Some(duration) = duration_option {\n+            file.write(&TimeSpec {\n+                tv_sec: duration.as_secs() as i64,\n+                tv_nsec: duration.subsec_nanos() as i32\n+            })?;\n+        } else {\n+            file.write(&[])?;\n+        }\n+        Ok(())\n     }\n }\n \n@@ -168,7 +206,10 @@ impl TcpListener {\n     }\n \n     pub fn ttl(&self) -> Result<u32> {\n-        Err(Error::new(ErrorKind::Other, \"TcpListener::ttl not implemented\"))\n+        let mut ttl = [0];\n+        let file = self.0.dup(b\"ttl\")?;\n+        file.read(&mut ttl)?;\n+        Ok(ttl[0] as u32)\n     }\n \n     pub fn set_nonblocking(&self, _nonblocking: bool) -> Result<()> {\n@@ -179,8 +220,10 @@ impl TcpListener {\n         Err(Error::new(ErrorKind::Other, \"TcpListener::set_only_v6 not implemented\"))\n     }\n \n-    pub fn set_ttl(&self, _ttl: u32) -> Result<()> {\n-        Err(Error::new(ErrorKind::Other, \"TcpListener::set_ttl not implemented\"))\n+    pub fn set_ttl(&self, ttl: u32) -> Result<()> {\n+        let file = self.0.dup(b\"ttl\")?;\n+        file.write(&[cmp::min(ttl, 255) as u8])?;\n+        Ok(())\n     }\n }\n "}, {"sha": "36f0819d308849cb8c087919fe0f4b8ee4fa46d4", "filename": "src/libstd/sys/redox/net/udp.rs", "status": "modified", "additions": 47, "deletions": 9, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/57950faeb68754451f94062c11e3fcf830392025/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57950faeb68754451f94062c11e3fcf830392025/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fnet%2Fudp.rs?ref=57950faeb68754451f94062c11e3fcf830392025", "patch": "@@ -9,10 +9,13 @@\n // except according to those terms.\n \n use cell::UnsafeCell;\n+use cmp;\n use io::{Error, ErrorKind, Result};\n+use mem;\n use net::{SocketAddr, Ipv4Addr, Ipv6Addr};\n use path::Path;\n use sys::fs::{File, OpenOptions};\n+use sys::syscall::TimeSpec;\n use sys_common::{AsInner, FromInner, IntoInner};\n use time::Duration;\n \n@@ -109,15 +112,30 @@ impl UdpSocket {\n     }\n \n     pub fn ttl(&self) -> Result<u32> {\n-        Err(Error::new(ErrorKind::Other, \"UdpSocket::ttl not implemented\"))\n+        let mut ttl = [0];\n+        let file = self.0.dup(b\"ttl\")?;\n+        file.read(&mut ttl)?;\n+        Ok(ttl[0] as u32)\n     }\n \n     pub fn read_timeout(&self) -> Result<Option<Duration>> {\n-        Err(Error::new(ErrorKind::Other, \"UdpSocket::read_timeout not implemented\"))\n+        let mut time = TimeSpec::default();\n+        let file = self.0.dup(b\"read_timeout\")?;\n+        if file.read(&mut time)? >= mem::size_of::<TimeSpec>() {\n+            Ok(Some(Duration::new(time.tv_sec as u64, time.tv_nsec as u32)))\n+        } else {\n+            Ok(None)\n+        }\n     }\n \n     pub fn write_timeout(&self) -> Result<Option<Duration>> {\n-        Err(Error::new(ErrorKind::Other, \"UdpSocket::write_timeout not implemented\"))\n+        let mut time = TimeSpec::default();\n+        let file = self.0.dup(b\"write_timeout\")?;\n+        if file.read(&mut time)? >= mem::size_of::<TimeSpec>() {\n+            Ok(Some(Duration::new(time.tv_sec as u64, time.tv_nsec as u32)))\n+        } else {\n+            Ok(None)\n+        }\n     }\n \n     pub fn set_broadcast(&self, _broadcast: bool) -> Result<()> {\n@@ -144,16 +162,36 @@ impl UdpSocket {\n         Err(Error::new(ErrorKind::Other, \"UdpSocket::set_only_v6 not implemented\"))\n     }\n \n-    pub fn set_ttl(&self, _ttl: u32) -> Result<()> {\n-        Err(Error::new(ErrorKind::Other, \"UdpSocket::set_ttl not implemented\"))\n+    pub fn set_ttl(&self, ttl: u32) -> Result<()> {\n+        let file = self.0.dup(b\"ttl\")?;\n+        file.write(&[cmp::min(ttl, 255) as u8])?;\n+        Ok(())\n     }\n \n-    pub fn set_read_timeout(&self, _dur: Option<Duration>) -> Result<()> {\n-        Err(Error::new(ErrorKind::Other, \"UdpSocket::set_read_timeout not implemented\"))\n+    pub fn set_read_timeout(&self, duration_option: Option<Duration>) -> Result<()> {\n+        let file = self.0.dup(b\"read_timeout\")?;\n+        if let Some(duration) = duration_option {\n+            file.write(&TimeSpec {\n+                tv_sec: duration.as_secs() as i64,\n+                tv_nsec: duration.subsec_nanos() as i32\n+            })?;\n+        } else {\n+            file.write(&[])?;\n+        }\n+        Ok(())\n     }\n \n-    pub fn set_write_timeout(&self, _dur: Option<Duration>) -> Result<()> {\n-        Err(Error::new(ErrorKind::Other, \"UdpSocket::set_write_timeout not implemented\"))\n+    pub fn set_write_timeout(&self, duration_option: Option<Duration>) -> Result<()> {\n+        let file = self.0.dup(b\"write_timeout\")?;\n+        if let Some(duration) = duration_option {\n+            file.write(&TimeSpec {\n+                tv_sec: duration.as_secs() as i64,\n+                tv_nsec: duration.subsec_nanos() as i32\n+            })?;\n+        } else {\n+            file.write(&[])?;\n+        }\n+        Ok(())\n     }\n \n     pub fn join_multicast_v4(&self, _multiaddr: &Ipv4Addr, _interface: &Ipv4Addr) -> Result<()> {"}, {"sha": "a6b0ada72b8fb7ef17172df0e645e3964d858d79", "filename": "src/libstd/sys/redox/syscall/data.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/57950faeb68754451f94062c11e3fcf830392025/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57950faeb68754451f94062c11e3fcf830392025/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Fdata.rs?ref=57950faeb68754451f94062c11e3fcf830392025", "patch": "@@ -84,3 +84,22 @@ pub struct TimeSpec {\n     pub tv_sec: i64,\n     pub tv_nsec: i32,\n }\n+\n+impl Deref for TimeSpec {\n+    type Target = [u8];\n+    fn deref(&self) -> &[u8] {\n+        unsafe {\n+            slice::from_raw_parts(self as *const TimeSpec as *const u8,\n+                                  mem::size_of::<TimeSpec>()) as &[u8]\n+        }\n+    }\n+}\n+\n+impl DerefMut for TimeSpec {\n+    fn deref_mut(&mut self) -> &mut [u8] {\n+        unsafe {\n+            slice::from_raw_parts_mut(self as *mut TimeSpec as *mut u8,\n+                                      mem::size_of::<TimeSpec>()) as &mut [u8]\n+        }\n+    }\n+}"}]}