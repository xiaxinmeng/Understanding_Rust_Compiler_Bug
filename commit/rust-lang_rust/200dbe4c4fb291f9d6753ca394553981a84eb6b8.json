{"sha": "200dbe4c4fb291f9d6753ca394553981a84eb6b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwMGRiZTRjNGZiMjkxZjlkNjc1M2NhMzk0NTUzOTgxYTg0ZWI2Yjg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-20T03:31:53Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-06-20T03:48:20Z"}, "message": "Remove various rustboot workarounds", "tree": {"sha": "68b7a40999f6309b352f0376d3c2dd7145439bd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68b7a40999f6309b352f0376d3c2dd7145439bd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/200dbe4c4fb291f9d6753ca394553981a84eb6b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/200dbe4c4fb291f9d6753ca394553981a84eb6b8", "html_url": "https://github.com/rust-lang/rust/commit/200dbe4c4fb291f9d6753ca394553981a84eb6b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/200dbe4c4fb291f9d6753ca394553981a84eb6b8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b6ae59b22ae7bae077b1e0606fed2ad239a65e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b6ae59b22ae7bae077b1e0606fed2ad239a65e8", "html_url": "https://github.com/rust-lang/rust/commit/9b6ae59b22ae7bae077b1e0606fed2ad239a65e8"}], "stats": {"total": 66, "additions": 15, "deletions": 51}, "files": [{"sha": "9b4a230c0a65a4e127a4c5743b613980b1a5cfc4", "filename": "src/comp/front/parser.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/200dbe4c4fb291f9d6753ca394553981a84eb6b8/src%2Fcomp%2Ffront%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200dbe4c4fb291f9d6753ca394553981a84eb6b8/src%2Fcomp%2Ffront%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Ffront%2Fparser.rs?ref=200dbe4c4fb291f9d6753ca394553981a84eb6b8", "patch": "@@ -1656,13 +1656,9 @@ fn parse_block(&parser p) -> ast::block {\n \n                         stmts += [stmt];\n \n-                        // FIXME: crazy differentiation between conditions\n-                        // used in branches and binary expressions in rustboot\n-                        // means we cannot use && here. I know, right?\n-                        if (p.get_file_type() == SOURCE_FILE) {\n-                            if (stmt_ends_with_semi(*stmt)) {\n-                                expect(p, token::SEMI);\n-                            }\n+                        if (p.get_file_type() == SOURCE_FILE\n+                            && stmt_ends_with_semi(*stmt)) {\n+                            expect(p, token::SEMI);\n                         }\n                     }\n                 }"}, {"sha": "bd055c1bc4e5e69b3e3b566f8a25a352e7cccc0c", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 8, "deletions": 15, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/200dbe4c4fb291f9d6753ca394553981a84eb6b8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200dbe4c4fb291f9d6753ca394553981a84eb6b8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=200dbe4c4fb291f9d6753ca394553981a84eb6b8", "patch": "@@ -5249,24 +5249,17 @@ fn trans_arg_expr(&@block_ctxt cx, &ty::arg arg, TypeRef lldestty0,\n         val = llvm::LLVMGetUndef(lldestty0);\n     } else if (ty::type_contains_params(cx.fcx.lcx.ccx.tcx, arg.ty)) {\n         auto lldestty = lldestty0;\n-        if (arg.mode == ty::mo_val) {\n-\n-            // FIXME: we'd prefer to use &&, but rustboot doesn't like it\n-            if (ty::type_is_structural(cx.fcx.lcx.ccx.tcx, e_ty)) {\n-                lldestty = T_ptr(lldestty);\n-            }\n+        if (arg.mode == ty::mo_val\n+            && ty::type_is_structural(cx.fcx.lcx.ccx.tcx, e_ty)) {\n+            lldestty = T_ptr(lldestty);\n         }\n         val = bcx.build.PointerCast(val, lldestty);\n     }\n-    if (arg.mode == ty::mo_val) {\n-\n-        // FIXME: we'd prefer to use &&, but rustboot doesn't like it\n-        if (ty::type_is_structural(cx.fcx.lcx.ccx.tcx, e_ty)) {\n-            // Until here we've been treating structures by pointer;\n-            // we are now passing it as an arg, so need to load it.\n-\n-            val = bcx.build.Load(val);\n-        }\n+    if (arg.mode == ty::mo_val\n+        && ty::type_is_structural(cx.fcx.lcx.ccx.tcx, e_ty)) {\n+        // Until here we've been treating structures by pointer;\n+        // we are now passing it as an arg, so need to load it.\n+        val = bcx.build.Load(val);\n     }\n     ret res(bcx, val);\n }"}, {"sha": "f64756411b2174c3835e7adcdde3b678699c562b", "filename": "src/lib/extfmt.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/200dbe4c4fb291f9d6753ca394553981a84eb6b8/src%2Flib%2Fextfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200dbe4c4fb291f9d6753ca394553981a84eb6b8/src%2Flib%2Fextfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fextfmt.rs?ref=200dbe4c4fb291f9d6753ca394553981a84eb6b8", "patch": "@@ -347,10 +347,8 @@ mod rt {\n     // FIXME: This might be useful in str: but needs to be utf8 safe first\n     fn str_init_elt(char c, uint n_elts) -> str {\n         auto svec = vec::init_elt[u8](c as u8, n_elts);\n-        // FIXME: Using unsafe_from_bytes because rustboot\n-        // can't figure out the is_utf8 predicate on from_bytes?\n \n-        ret str::unsafe_from_bytes(svec);\n+        ret str::from_bytes(svec);\n     }\n     tag pad_mode { pad_signed; pad_unsigned; pad_nozero; }\n     fn pad(&conv cv, str s, pad_mode mode) -> str {"}, {"sha": "e34e13253d432d22db66dcb6cd08649c37022e95", "filename": "src/lib/getopts.rs", "status": "modified", "additions": 1, "deletions": 15, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/200dbe4c4fb291f9d6753ca394553981a84eb6b8/src%2Flib%2Fgetopts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200dbe4c4fb291f9d6753ca394553981a84eb6b8/src%2Flib%2Fgetopts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fgetopts.rs?ref=200dbe4c4fb291f9d6753ca394553981a84eb6b8", "patch": "@@ -78,25 +78,11 @@ fn name_str(name nm) -> str {\n         };\n }\n \n-\n-// FIXME rustboot workaround\n-fn name_eq(name a, name b) -> bool {\n-    ret alt (a) {\n-            case (long(?a)) {\n-                alt (b) {\n-                    case (long(?b)) { str::eq(a, b) }\n-                    case (_) { false }\n-                }\n-            }\n-            case (_) { if (a == b) { true } else { false } }\n-        };\n-}\n-\n fn find_opt(vec[opt] opts, name nm) -> option::t[uint] {\n     auto i = 0u;\n     auto l = vec::len[opt](opts);\n     while (i < l) {\n-        if (name_eq(opts.(i).name, nm)) { ret some[uint](i); }\n+        if (opts.(i).name == nm) { ret some[uint](i); }\n         i += 1u;\n     }\n     ret none[uint];"}, {"sha": "cccfcc3de6cb353a7a7bdb0a9395041291231e5f", "filename": "src/lib/sha1.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/200dbe4c4fb291f9d6753ca394553981a84eb6b8/src%2Flib%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200dbe4c4fb291f9d6753ca394553981a84eb6b8/src%2Flib%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fsha1.rs?ref=200dbe4c4fb291f9d6753ca394553981a84eb6b8", "patch": "@@ -158,11 +158,7 @@ fn mk_sha1() -> sha1 {\n         st.msg_block_idx = 0u;\n     }\n     fn circular_shift(u32 bits, u32 word) -> u32 {\n-        // FIXME: This is a workaround for a rustboot\n-        // \"unrecognized quads\" codegen bug\n-\n-        auto bits_hack = bits;\n-        ret word << bits_hack | word >> 32u32 - bits;\n+        ret word << bits | word >> 32u32 - bits;\n     }\n     fn mk_result(&sha1state st) -> vec[u8] {\n         if (!st.computed) { pad_msg(st); st.computed = true; }"}, {"sha": "51b876e3253e1107b05f62cc7ea660ceee7da00e", "filename": "src/lib/str.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/200dbe4c4fb291f9d6753ca394553981a84eb6b8/src%2Flib%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/200dbe4c4fb291f9d6753ca394553981a84eb6b8/src%2Flib%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fstr.rs?ref=200dbe4c4fb291f9d6753ca394553981a84eb6b8", "patch": "@@ -302,12 +302,7 @@ fn shift_char(&mutable str s) -> char {\n }\n \n fn unshift_char(&mutable str s, char ch) {\n-    // Workaround for rustboot order-of-evaluation issue -- if I put s\n-    // directly after the +, the string ends up containing (only) the\n-    // character, twice.\n-\n-    auto x = s;\n-    s = from_char(ch) + x;\n+    s = from_char(ch) + s;\n }\n \n fn refcount(str s) -> uint {"}]}