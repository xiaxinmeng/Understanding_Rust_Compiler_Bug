{"sha": "d212c382c3d00b8a2bb701313c7bdd605ea7e128", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyMTJjMzgyYzNkMDBiOGEyYmI3MDEzMTNjN2JkZDYwNWVhN2UxMjg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-09T05:25:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-11-09T05:25:04Z"}, "message": "Auto merge of #6278 - ThibsG:DerefAddrOf, r=llogiq\n\nFix bad suggestions for `deref_addrof` and `try_err` lints\n\nFix bad suggestions when in macro expansion for `deref_addrof` and `try_err` lints.\n\nFixes: #6234\nFixes: #6242\nFixes: #6237\n\nchangelog: none\n\nr? `@llogiq`", "tree": {"sha": "3b3d63e7bdd5014c3603afc19452e4c6ab0a5e0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b3d63e7bdd5014c3603afc19452e4c6ab0a5e0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d212c382c3d00b8a2bb701313c7bdd605ea7e128", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d212c382c3d00b8a2bb701313c7bdd605ea7e128", "html_url": "https://github.com/rust-lang/rust/commit/d212c382c3d00b8a2bb701313c7bdd605ea7e128", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d212c382c3d00b8a2bb701313c7bdd605ea7e128/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2067a01ff14b9cbf2548457403a3722cc36775f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/2067a01ff14b9cbf2548457403a3722cc36775f6", "html_url": "https://github.com/rust-lang/rust/commit/2067a01ff14b9cbf2548457403a3722cc36775f6"}, {"sha": "83e75f92079909aa07306633f26f42eccfb608e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/83e75f92079909aa07306633f26f42eccfb608e1", "html_url": "https://github.com/rust-lang/rust/commit/83e75f92079909aa07306633f26f42eccfb608e1"}], "stats": {"total": 222, "additions": 207, "deletions": 15}, "files": [{"sha": "35a1310d68b849b6cb2dc062480d1be17295963f", "filename": "clippy_lints/src/reference.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/d212c382c3d00b8a2bb701313c7bdd605ea7e128/clippy_lints%2Fsrc%2Freference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d212c382c3d00b8a2bb701313c7bdd605ea7e128/clippy_lints%2Fsrc%2Freference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freference.rs?ref=d212c382c3d00b8a2bb701313c7bdd605ea7e128", "patch": "@@ -1,9 +1,10 @@\n-use crate::utils::{in_macro, snippet_with_applicability, span_lint_and_sugg};\n+use crate::utils::{in_macro, snippet_opt, snippet_with_applicability, span_lint_and_sugg};\n use if_chain::if_chain;\n-use rustc_ast::ast::{Expr, ExprKind, UnOp};\n+use rustc_ast::ast::{Expr, ExprKind, Mutability, UnOp};\n use rustc_errors::Applicability;\n use rustc_lint::{EarlyContext, EarlyLintPass};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_span::BytePos;\n \n declare_clippy_lint! {\n     /// **What it does:** Checks for usage of `*&` and `*&mut` in expressions.\n@@ -42,17 +43,45 @@ impl EarlyLintPass for DerefAddrOf {\n     fn check_expr(&mut self, cx: &EarlyContext<'_>, e: &Expr) {\n         if_chain! {\n             if let ExprKind::Unary(UnOp::Deref, ref deref_target) = e.kind;\n-            if let ExprKind::AddrOf(_, _, ref addrof_target) = without_parens(deref_target).kind;\n+            if let ExprKind::AddrOf(_, ref mutability, ref addrof_target) = without_parens(deref_target).kind;\n             if !in_macro(addrof_target.span);\n             then {\n                 let mut applicability = Applicability::MachineApplicable;\n+                let sugg = if e.span.from_expansion() {\n+                    if let Ok(macro_source) = cx.sess.source_map().span_to_snippet(e.span) {\n+                        // Remove leading whitespace from the given span\n+                        // e.g: ` $visitor` turns into `$visitor`\n+                        let trim_leading_whitespaces = |span| {\n+                            snippet_opt(cx, span).and_then(|snip| {\n+                                #[allow(clippy::cast_possible_truncation)]\n+                                snip.find(|c: char| !c.is_whitespace()).map(|pos| {\n+                                    span.lo() + BytePos(pos as u32)\n+                                })\n+                            }).map_or(span, |start_no_whitespace| e.span.with_lo(start_no_whitespace))\n+                        };\n+\n+                        let rpos = if *mutability == Mutability::Mut {\n+                            macro_source.rfind(\"mut\").expect(\"already checked this is a mutable reference\") + \"mut\".len()\n+                        } else {\n+                            macro_source.rfind('&').expect(\"already checked this is a reference\") + \"&\".len()\n+                        };\n+                        #[allow(clippy::cast_possible_truncation)]\n+                        let span_after_ref = e.span.with_lo(BytePos(e.span.lo().0 + rpos as u32));\n+                        let span = trim_leading_whitespaces(span_after_ref);\n+                        snippet_with_applicability(cx, span, \"_\", &mut applicability)\n+                    } else {\n+                        snippet_with_applicability(cx, e.span, \"_\", &mut applicability)\n+                    }\n+                } else {\n+                    snippet_with_applicability(cx, addrof_target.span, \"_\", &mut applicability)\n+                }.to_string();\n                 span_lint_and_sugg(\n                     cx,\n                     DEREF_ADDROF,\n                     e.span,\n                     \"immediately dereferencing a reference\",\n                     \"try this\",\n-                    format!(\"{}\", snippet_with_applicability(cx, addrof_target.span, \"_\", &mut applicability)),\n+                    sugg,\n                     applicability,\n                 );\n             }"}, {"sha": "73e3a04aec98798f93600e88ae791e3d7e6cc47c", "filename": "clippy_lints/src/try_err.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d212c382c3d00b8a2bb701313c7bdd605ea7e128/clippy_lints%2Fsrc%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d212c382c3d00b8a2bb701313c7bdd605ea7e128/clippy_lints%2Fsrc%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftry_err.rs?ref=d212c382c3d00b8a2bb701313c7bdd605ea7e128", "patch": "@@ -1,6 +1,6 @@\n use crate::utils::{\n-    is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet, snippet_with_macro_callsite,\n-    span_lint_and_sugg,\n+    differing_macro_contexts, in_macro, is_type_diagnostic_item, match_def_path, match_qpath, paths, snippet,\n+    snippet_with_macro_callsite, span_lint_and_sugg,\n };\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n@@ -92,8 +92,11 @@ impl<'tcx> LateLintPass<'tcx> for TryErr {\n                 };\n \n                 let expr_err_ty = cx.typeck_results().expr_ty(err_arg);\n+                let differing_contexts = differing_macro_contexts(expr.span, err_arg.span);\n \n-                let origin_snippet = if err_arg.span.from_expansion() {\n+                let origin_snippet = if in_macro(expr.span) && in_macro(err_arg.span) && differing_contexts {\n+                    snippet(cx, err_arg.span.ctxt().outer_expn_data().call_site, \"_\")\n+                } else if err_arg.span.from_expansion() && !in_macro(expr.span) {\n                     snippet_with_macro_callsite(cx, err_arg.span, \"_\")\n                 } else {\n                     snippet(cx, err_arg.span, \"_\")"}, {"sha": "0795900558b695824bdead9959b7201313b13034", "filename": "tests/ui/deref_addrof.fixed", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d212c382c3d00b8a2bb701313c7bdd605ea7e128/tests%2Fui%2Fderef_addrof.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d212c382c3d00b8a2bb701313c7bdd605ea7e128/tests%2Fui%2Fderef_addrof.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.fixed?ref=d212c382c3d00b8a2bb701313c7bdd605ea7e128", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+#![warn(clippy::deref_addrof)]\n \n fn get_number() -> usize {\n     10\n@@ -10,7 +11,6 @@ fn get_reference(n: &usize) -> &usize {\n \n #[allow(clippy::many_single_char_names, clippy::double_parens)]\n #[allow(unused_variables, unused_parens)]\n-#[warn(clippy::deref_addrof)]\n fn main() {\n     let a = 10;\n     let aref = &a;\n@@ -37,3 +37,27 @@ fn main() {\n \n     let b = *aref;\n }\n+\n+#[rustfmt::skip]\n+macro_rules! m {\n+    ($visitor: expr) => {\n+        $visitor\n+    };\n+}\n+\n+#[rustfmt::skip]\n+macro_rules! m_mut {\n+    ($visitor: expr) => {\n+        $visitor\n+    };\n+}\n+\n+pub struct S;\n+impl S {\n+    pub fn f(&self) -> &Self {\n+        m!(self)\n+    }\n+    pub fn f_mut(&self) -> &Self {\n+        m_mut!(self)\n+    }\n+}"}, {"sha": "60c4318601bc881799a07d7e6e7ffdcbd3886957", "filename": "tests/ui/deref_addrof.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d212c382c3d00b8a2bb701313c7bdd605ea7e128/tests%2Fui%2Fderef_addrof.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d212c382c3d00b8a2bb701313c7bdd605ea7e128/tests%2Fui%2Fderef_addrof.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.rs?ref=d212c382c3d00b8a2bb701313c7bdd605ea7e128", "patch": "@@ -1,4 +1,5 @@\n // run-rustfix\n+#![warn(clippy::deref_addrof)]\n \n fn get_number() -> usize {\n     10\n@@ -10,7 +11,6 @@ fn get_reference(n: &usize) -> &usize {\n \n #[allow(clippy::many_single_char_names, clippy::double_parens)]\n #[allow(unused_variables, unused_parens)]\n-#[warn(clippy::deref_addrof)]\n fn main() {\n     let a = 10;\n     let aref = &a;\n@@ -37,3 +37,27 @@ fn main() {\n \n     let b = **&aref;\n }\n+\n+#[rustfmt::skip]\n+macro_rules! m {\n+    ($visitor: expr) => {\n+        *& $visitor\n+    };\n+}\n+\n+#[rustfmt::skip]\n+macro_rules! m_mut {\n+    ($visitor: expr) => {\n+        *& mut $visitor\n+    };\n+}\n+\n+pub struct S;\n+impl S {\n+    pub fn f(&self) -> &Self {\n+        m!(self)\n+    }\n+    pub fn f_mut(&self) -> &Self {\n+        m_mut!(self)\n+    }\n+}"}, {"sha": "e85b30fa56eb884ff719241f62e659a57b3cc7fd", "filename": "tests/ui/deref_addrof.stderr", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d212c382c3d00b8a2bb701313c7bdd605ea7e128/tests%2Fui%2Fderef_addrof.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d212c382c3d00b8a2bb701313c7bdd605ea7e128/tests%2Fui%2Fderef_addrof.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fderef_addrof.stderr?ref=d212c382c3d00b8a2bb701313c7bdd605ea7e128", "patch": "@@ -48,5 +48,27 @@ error: immediately dereferencing a reference\n LL |     let b = **&aref;\n    |              ^^^^^^ help: try this: `aref`\n \n-error: aborting due to 8 previous errors\n+error: immediately dereferencing a reference\n+  --> $DIR/deref_addrof.rs:44:9\n+   |\n+LL |         *& $visitor\n+   |         ^^^^^^^^^^^ help: try this: `$visitor`\n+...\n+LL |         m!(self)\n+   |         -------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: immediately dereferencing a reference\n+  --> $DIR/deref_addrof.rs:51:9\n+   |\n+LL |         *& mut $visitor\n+   |         ^^^^^^^^^^^^^^^ help: try this: `$visitor`\n+...\n+LL |         m_mut!(self)\n+   |         ------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 10 previous errors\n "}, {"sha": "aa43e69f79e8b0bd40a36c5c299c820f361dc6f7", "filename": "tests/ui/try_err.fixed", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d212c382c3d00b8a2bb701313c7bdd605ea7e128/tests%2Fui%2Ftry_err.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d212c382c3d00b8a2bb701313c7bdd605ea7e128/tests%2Fui%2Ftry_err.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.fixed?ref=d212c382c3d00b8a2bb701313c7bdd605ea7e128", "patch": "@@ -78,12 +78,46 @@ fn nested_error() -> Result<i32, i32> {\n     Ok(1)\n }\n \n+// Bad suggestion when in macro (see #6242)\n+macro_rules! try_validation {\n+    ($e: expr) => {{\n+        match $e {\n+            Ok(_) => 0,\n+            Err(_) => return Err(1),\n+        }\n+    }};\n+}\n+\n+macro_rules! ret_one {\n+    () => {\n+        1\n+    };\n+}\n+\n+macro_rules! try_validation_in_macro {\n+    ($e: expr) => {{\n+        match $e {\n+            Ok(_) => 0,\n+            Err(_) => return Err(ret_one!()),\n+        }\n+    }};\n+}\n+\n+fn calling_macro() -> Result<i32, i32> {\n+    // macro\n+    try_validation!(Ok::<_, i32>(5));\n+    // `Err` arg is another macro\n+    try_validation_in_macro!(Ok::<_, i32>(5));\n+    Ok(5)\n+}\n+\n fn main() {\n     basic_test().unwrap();\n     into_test().unwrap();\n     negative_test().unwrap();\n     closure_matches_test().unwrap();\n     closure_into_test().unwrap();\n+    calling_macro().unwrap();\n \n     // We don't want to lint in external macros\n     try_err!();"}, {"sha": "df3a9dc5367f3861a266f44e77da87818c514481", "filename": "tests/ui/try_err.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/d212c382c3d00b8a2bb701313c7bdd605ea7e128/tests%2Fui%2Ftry_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d212c382c3d00b8a2bb701313c7bdd605ea7e128/tests%2Fui%2Ftry_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.rs?ref=d212c382c3d00b8a2bb701313c7bdd605ea7e128", "patch": "@@ -78,12 +78,46 @@ fn nested_error() -> Result<i32, i32> {\n     Ok(1)\n }\n \n+// Bad suggestion when in macro (see #6242)\n+macro_rules! try_validation {\n+    ($e: expr) => {{\n+        match $e {\n+            Ok(_) => 0,\n+            Err(_) => Err(1)?,\n+        }\n+    }};\n+}\n+\n+macro_rules! ret_one {\n+    () => {\n+        1\n+    };\n+}\n+\n+macro_rules! try_validation_in_macro {\n+    ($e: expr) => {{\n+        match $e {\n+            Ok(_) => 0,\n+            Err(_) => Err(ret_one!())?,\n+        }\n+    }};\n+}\n+\n+fn calling_macro() -> Result<i32, i32> {\n+    // macro\n+    try_validation!(Ok::<_, i32>(5));\n+    // `Err` arg is another macro\n+    try_validation_in_macro!(Ok::<_, i32>(5));\n+    Ok(5)\n+}\n+\n fn main() {\n     basic_test().unwrap();\n     into_test().unwrap();\n     negative_test().unwrap();\n     closure_matches_test().unwrap();\n     closure_into_test().unwrap();\n+    calling_macro().unwrap();\n \n     // We don't want to lint in external macros\n     try_err!();"}, {"sha": "3905ed2476b0852883cae0a23393d7780afa27c0", "filename": "tests/ui/try_err.stderr", "status": "modified", "additions": 27, "deletions": 5, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d212c382c3d00b8a2bb701313c7bdd605ea7e128/tests%2Fui%2Ftry_err.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d212c382c3d00b8a2bb701313c7bdd605ea7e128/tests%2Fui%2Ftry_err.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftry_err.stderr?ref=d212c382c3d00b8a2bb701313c7bdd605ea7e128", "patch": "@@ -29,28 +29,50 @@ LL |                 Err(err)?;\n    |                 ^^^^^^^^^ help: try this: `return Err(err.into())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:106:9\n+  --> $DIR/try_err.rs:86:23\n+   |\n+LL |             Err(_) => Err(1)?,\n+   |                       ^^^^^^^ help: try this: `return Err(1)`\n+...\n+LL |     try_validation!(Ok::<_, i32>(5));\n+   |     --------------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: returning an `Err(_)` with the `?` operator\n+  --> $DIR/try_err.rs:101:23\n+   |\n+LL |             Err(_) => Err(ret_one!())?,\n+   |                       ^^^^^^^^^^^^^^^^ help: try this: `return Err(ret_one!())`\n+...\n+LL |     try_validation_in_macro!(Ok::<_, i32>(5));\n+   |     ------------------------------------------ in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: returning an `Err(_)` with the `?` operator\n+  --> $DIR/try_err.rs:140:9\n    |\n LL |         Err(foo!())?;\n    |         ^^^^^^^^^^^^ help: try this: `return Err(foo!())`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:113:9\n+  --> $DIR/try_err.rs:147:9\n    |\n LL |         Err(io::ErrorKind::WriteZero)?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Err(io::ErrorKind::WriteZero.into()))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:115:9\n+  --> $DIR/try_err.rs:149:9\n    |\n LL |         Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\"))?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Err(io::Error::new(io::ErrorKind::InvalidInput, \"error\")))`\n \n error: returning an `Err(_)` with the `?` operator\n-  --> $DIR/try_err.rs:123:9\n+  --> $DIR/try_err.rs:157:9\n    |\n LL |         Err(io::ErrorKind::NotFound)?\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `return Poll::Ready(Some(Err(io::ErrorKind::NotFound.into())))`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n "}]}