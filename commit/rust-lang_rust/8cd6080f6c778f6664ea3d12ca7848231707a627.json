{"sha": "8cd6080f6c778f6664ea3d12ca7848231707a627", "node_id": "C_kwDOAAsO6NoAKDhjZDYwODBmNmM3NzhmNjY2NGVhM2QxMmNhNzg0ODIzMTcwN2E2Mjc", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-07T05:12:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-04-07T05:12:08Z"}, "message": "Auto merge of #95748 - Dylan-DPC:rollup-t208j51, r=Dylan-DPC\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #95352 ([bootstrap] Print the full relative path to failed tests)\n - #95646 (Mention `std::env::var` in `env!`)\n - #95708 (Update documentation for `trim*` and `is_whitespace` to include newlines)\n - #95714 (Add test for issue #83474)\n - #95725 (Message: Chunks cannot have a size of zero.)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "477e303a44d3cb21547f3f1062943cb9a121bb13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/477e303a44d3cb21547f3f1062943cb9a121bb13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8cd6080f6c778f6664ea3d12ca7848231707a627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8cd6080f6c778f6664ea3d12ca7848231707a627", "html_url": "https://github.com/rust-lang/rust/commit/8cd6080f6c778f6664ea3d12ca7848231707a627", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8cd6080f6c778f6664ea3d12ca7848231707a627/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "846993ec43c615c64a0496d3eb3c8615830842e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/846993ec43c615c64a0496d3eb3c8615830842e4", "html_url": "https://github.com/rust-lang/rust/commit/846993ec43c615c64a0496d3eb3c8615830842e4"}, {"sha": "939f84ab002b5eac22e1e98ada7344294926e652", "url": "https://api.github.com/repos/rust-lang/rust/commits/939f84ab002b5eac22e1e98ada7344294926e652", "html_url": "https://github.com/rust-lang/rust/commit/939f84ab002b5eac22e1e98ada7344294926e652"}], "stats": {"total": 67, "additions": 45, "deletions": 22}, "files": [{"sha": "6a8df7318cd499cabb8ee49436301db39f825918", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8cd6080f6c778f6664ea3d12ca7848231707a627/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd6080f6c778f6664ea3d12ca7848231707a627/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=8cd6080f6c778f6664ea3d12ca7848231707a627", "patch": "@@ -804,6 +804,9 @@ impl char {\n     /// ```\n     /// assert!(' '.is_whitespace());\n     ///\n+    /// // line break\n+    /// assert!('\\n'.is_whitespace());\n+    ///\n     /// // a non-breaking space\n     /// assert!('\\u{A0}'.is_whitespace());\n     ///"}, {"sha": "83f33ca007af1eb74a57e6bb5a58a78a86c3df0a", "filename": "library/core/src/macros/mod.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8cd6080f6c778f6664ea3d12ca7848231707a627/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd6080f6c778f6664ea3d12ca7848231707a627/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmacros%2Fmod.rs?ref=8cd6080f6c778f6664ea3d12ca7848231707a627", "patch": "@@ -909,7 +909,10 @@ pub(crate) mod builtin {\n     /// Inspects an environment variable at compile time.\n     ///\n     /// This macro will expand to the value of the named environment variable at\n-    /// compile time, yielding an expression of type `&'static str`.\n+    /// compile time, yielding an expression of type `&'static str`. Use\n+    /// [`std::env::var`] instead if you want to read the value at runtime.\n+    ///\n+    /// [`std::env::var`]: ../std/env/fn.var.html\n     ///\n     /// If the environment variable is not defined, then a compilation error\n     /// will be emitted. To not emit a compile error, use the [`option_env!`]\n@@ -950,7 +953,10 @@ pub(crate) mod builtin {\n     /// expand into an expression of type `Option<&'static str>` whose value is\n     /// `Some` of the value of the environment variable. If the environment\n     /// variable is not present, then this will expand to `None`. See\n-    /// [`Option<T>`][Option] for more information on this type.\n+    /// [`Option<T>`][Option] for more information on this type.  Use\n+    /// [`std::env::var`] instead if you want to read the value at runtime.\n+    ///\n+    /// [`std::env::var`]: ../std/env/fn.var.html\n     ///\n     /// A compile time error is never emitted when using this macro regardless\n     /// of whether the environment variable is present or not."}, {"sha": "78fad46e7937ec56ad9af4c1521bb2c9eda0c1a6", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8cd6080f6c778f6664ea3d12ca7848231707a627/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd6080f6c778f6664ea3d12ca7848231707a627/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=8cd6080f6c778f6664ea3d12ca7848231707a627", "patch": "@@ -814,7 +814,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn chunks(&self, chunk_size: usize) -> Chunks<'_, T> {\n-        assert_ne!(chunk_size, 0);\n+        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n         Chunks::new(self, chunk_size)\n     }\n \n@@ -852,7 +852,7 @@ impl<T> [T] {\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn chunks_mut(&mut self, chunk_size: usize) -> ChunksMut<'_, T> {\n-        assert_ne!(chunk_size, 0);\n+        assert_ne!(chunk_size, 0, \"chunks cannot have a size of zero\");\n         ChunksMut::new(self, chunk_size)\n     }\n "}, {"sha": "a1779b786230b545fd9f74242d6ce47dca411132", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/8cd6080f6c778f6664ea3d12ca7848231707a627/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd6080f6c778f6664ea3d12ca7848231707a627/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=8cd6080f6c778f6664ea3d12ca7848231707a627", "patch": "@@ -1832,14 +1832,14 @@ impl str {\n     /// Returns a string slice with leading and trailing whitespace removed.\n     ///\n     /// 'Whitespace' is defined according to the terms of the Unicode Derived\n-    /// Core Property `White_Space`.\n+    /// Core Property `White_Space`, which includes newlines.\n     ///\n     /// # Examples\n     ///\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let s = \" Hello\\tworld\\t\";\n+    /// let s = \"\\n Hello\\tworld\\t\\n\";\n     ///\n     /// assert_eq!(\"Hello\\tworld\", s.trim());\n     /// ```\n@@ -1855,7 +1855,7 @@ impl str {\n     /// Returns a string slice with leading whitespace removed.\n     ///\n     /// 'Whitespace' is defined according to the terms of the Unicode Derived\n-    /// Core Property `White_Space`.\n+    /// Core Property `White_Space`, which includes newlines.\n     ///\n     /// # Text directionality\n     ///\n@@ -1869,8 +1869,8 @@ impl str {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let s = \" Hello\\tworld\\t\";\n-    /// assert_eq!(\"Hello\\tworld\\t\", s.trim_start());\n+    /// let s = \"\\n Hello\\tworld\\t\\n\";\n+    /// assert_eq!(\"Hello\\tworld\\t\\n\", s.trim_start());\n     /// ```\n     ///\n     /// Directionality:\n@@ -1894,7 +1894,7 @@ impl str {\n     /// Returns a string slice with trailing whitespace removed.\n     ///\n     /// 'Whitespace' is defined according to the terms of the Unicode Derived\n-    /// Core Property `White_Space`.\n+    /// Core Property `White_Space`, which includes newlines.\n     ///\n     /// # Text directionality\n     ///\n@@ -1908,8 +1908,8 @@ impl str {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// let s = \" Hello\\tworld\\t\";\n-    /// assert_eq!(\" Hello\\tworld\", s.trim_end());\n+    /// let s = \"\\n Hello\\tworld\\t\\n\";\n+    /// assert_eq!(\"\\n Hello\\tworld\", s.trim_end());\n     /// ```\n     ///\n     /// Directionality:"}, {"sha": "fbb56e528c0a62a43d8a4cda532e336dd1458b42", "filename": "src/test/ui/lang-items/lang-item-generic-requirements.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8cd6080f6c778f6664ea3d12ca7848231707a627/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd6080f6c778f6664ea3d12ca7848231707a627/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.rs?ref=8cd6080f6c778f6664ea3d12ca7848231707a627", "patch": "@@ -1,5 +1,5 @@\n-// Checks that declaring a lang item with the wrong number\n-// of generic arguments errors rather than crashing (issue #83893, #87573, part of #9307, #79559).\n+// Checks that declaring a lang item with the wrong number of generic arguments errors rather than\n+// crashing (issue #83474, #83893, #87573, part of #9307, #79559).\n \n #![feature(lang_items, no_core)]\n #![no_core]\n@@ -25,6 +25,10 @@ struct MyPhantomData<T, U>;\n //~^ ERROR parameter `T` is never used\n //~| ERROR parameter `U` is never used\n \n+#[lang = \"owned_box\"]\n+//~^ ERROR `owned_box` language item must be applied to a struct with at least 1 generic argument\n+struct Foo;\n+\n // When the `start` lang item is missing generics very odd things can happen, especially when\n // it comes to cross-crate monomorphization\n #[lang = \"start\"]\n@@ -48,6 +52,9 @@ fn ice() {\n \n     // Use phantomdata\n     let _ = MyPhantomData::<(), i32>;\n+\n+    // Use Foo\n+    let _: () = Foo;\n }\n \n // use `start`"}, {"sha": "326f5b0d59507317f8c06d3b7076a900c5492e57", "filename": "src/test/ui/lang-items/lang-item-generic-requirements.stderr", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8cd6080f6c778f6664ea3d12ca7848231707a627/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8cd6080f6c778f6664ea3d12ca7848231707a627/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flang-items%2Flang-item-generic-requirements.stderr?ref=8cd6080f6c778f6664ea3d12ca7848231707a627", "patch": "@@ -32,8 +32,17 @@ LL |\n LL | struct MyPhantomData<T, U>;\n    |                     ------ this struct has 2 generic arguments\n \n+error[E0718]: `owned_box` language item must be applied to a struct with at least 1 generic argument\n+  --> $DIR/lang-item-generic-requirements.rs:28:1\n+   |\n+LL | #[lang = \"owned_box\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+LL |\n+LL | struct Foo;\n+   |           - this struct has 0 generic arguments\n+\n error[E0718]: `start` language item must be applied to a function with 1 generic argument\n-  --> $DIR/lang-item-generic-requirements.rs:30:1\n+  --> $DIR/lang-item-generic-requirements.rs:34:1\n    |\n LL | #[lang = \"start\"]\n    | ^^^^^^^^^^^^^^^^^\n@@ -59,7 +68,7 @@ LL | struct MyPhantomData<T, U>;\n    = help: consider removing `U` or referring to it in a field\n    = help: if you intended `U` to be a const parameter, use `const U: usize` instead\n \n-error: aborting due to 7 previous errors\n+error: aborting due to 8 previous errors\n \n Some errors have detailed explanations: E0392, E0718.\n For more information about an error, try `rustc --explain E0392`."}, {"sha": "8c1f28f14076887dcb110c0064beca87a8350c2b", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/8cd6080f6c778f6664ea3d12ca7848231707a627/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8cd6080f6c778f6664ea3d12ca7848231707a627/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=8cd6080f6c778f6664ea3d12ca7848231707a627", "patch": "@@ -744,12 +744,10 @@ fn make_test_name(\n     testpaths: &TestPaths,\n     revision: Option<&String>,\n ) -> test::TestName {\n-    // Convert a complete path to something like\n-    //\n-    //    ui/foo/bar/baz.rs\n-    let path = PathBuf::from(config.src_base.file_name().unwrap())\n-        .join(&testpaths.relative_dir)\n-        .join(&testpaths.file.file_name().unwrap());\n+    // Print the name of the file, relative to the repository root.\n+    // `src_base` looks like `/path/to/rust/src/test/ui`\n+    let root_directory = config.src_base.parent().unwrap().parent().unwrap().parent().unwrap();\n+    let path = testpaths.file.strip_prefix(root_directory).unwrap();\n     let debugger = match config.debugger {\n         Some(d) => format!(\"-{}\", d),\n         None => String::new(),"}]}