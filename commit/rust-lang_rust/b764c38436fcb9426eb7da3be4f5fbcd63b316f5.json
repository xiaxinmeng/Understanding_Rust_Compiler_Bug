{"sha": "b764c38436fcb9426eb7da3be4f5fbcd63b316f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3NjRjMzg0MzZmY2I5NDI2ZWI3ZGEzYmU0ZjVmYmNkNjNiMzE2ZjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-28T10:01:25Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-03-28T10:01:25Z"}, "message": "Start stdx\n\nThis crate will hold everything to small to be worth publishing", "tree": {"sha": "a599f1ffff953040a0c2bb635b33b0f6a57e5e59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a599f1ffff953040a0c2bb635b33b0f6a57e5e59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b764c38436fcb9426eb7da3be4f5fbcd63b316f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b764c38436fcb9426eb7da3be4f5fbcd63b316f5", "html_url": "https://github.com/rust-lang/rust/commit/b764c38436fcb9426eb7da3be4f5fbcd63b316f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1fea0d34ee8f3436aefd87d4c133a7ff50ffbb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1fea0d34ee8f3436aefd87d4c133a7ff50ffbb0", "html_url": "https://github.com/rust-lang/rust/commit/a1fea0d34ee8f3436aefd87d4c133a7ff50ffbb0"}], "stats": {"total": 267, "additions": 163, "deletions": 104}, "files": [{"sha": "6735d6b5d80fb2695e636192be172595524cf4f2", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 16, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b764c38436fcb9426eb7da3be4f5fbcd63b316f5", "patch": "@@ -353,12 +353,6 @@ version = \"1.0.6\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"2fad85553e09a6f881f739c29f0b00b0f01357c743266d478b68951ce23285f3\"\n \n-[[package]]\n-name = \"format-buf\"\n-version = \"1.0.0\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f7aea5a5909a74969507051a3b17adc84737e31a5f910559892aedce026f4d53\"\n-\n [[package]]\n name = \"fs_extra\"\n version = \"1.1.0\"\n@@ -573,12 +567,6 @@ version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"2f52a11f73b88fab829a0e4d9e13ea5982c7ac457c72eb3541d82a4afdfce4ff\"\n \n-[[package]]\n-name = \"join_to_string\"\n-version = \"0.1.3\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"4dc7a5290e8c2606ce2be49f456d50f69173cb96d1541e4f66e34ac8b331a98f\"\n-\n [[package]]\n name = \"kernel32-sys\"\n version = \"0.2.2\"\n@@ -885,9 +873,7 @@ name = \"ra_assists\"\n version = \"0.1.0\"\n dependencies = [\n  \"either\",\n- \"format-buf\",\n  \"itertools 0.9.0\",\n- \"join_to_string\",\n  \"ra_db\",\n  \"ra_fmt\",\n  \"ra_hir\",\n@@ -896,6 +882,7 @@ dependencies = [\n  \"ra_syntax\",\n  \"ra_text_edit\",\n  \"rustc-hash\",\n+ \"stdx\",\n  \"test_utils\",\n ]\n \n@@ -1023,11 +1010,9 @@ name = \"ra_ide\"\n version = \"0.1.0\"\n dependencies = [\n  \"either\",\n- \"format-buf\",\n  \"indexmap\",\n  \"insta\",\n  \"itertools 0.9.0\",\n- \"join_to_string\",\n  \"log\",\n  \"ra_assists\",\n  \"ra_cfg\",\n@@ -1040,6 +1025,7 @@ dependencies = [\n  \"ra_text_edit\",\n  \"rand\",\n  \"rustc-hash\",\n+ \"stdx\",\n  \"test_utils\",\n ]\n \n@@ -1488,6 +1474,10 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"stdx\"\n+version = \"0.1.0\"\n+\n [[package]]\n name = \"superslice\"\n version = \"1.0.0\""}, {"sha": "3bcf58ba4b0962a2219d22b3d5d04168a9666bf2", "filename": "crates/ra_assists/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2FCargo.toml?ref=b764c38436fcb9426eb7da3be4f5fbcd63b316f5", "patch": "@@ -8,12 +8,12 @@ authors = [\"rust-analyzer developers\"]\n doctest = false\n \n [dependencies]\n-format-buf = \"1.0.0\"\n-join_to_string = \"0.1.3\"\n rustc-hash = \"1.1.0\"\n itertools = \"0.9.0\"\n either = \"1.5.3\"\n \n+stdx = { path = \"../stdx\" }\n+\n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_fmt = { path = \"../ra_fmt\" }"}, {"sha": "15f9b216b647f02bb084be113c2a11849acb75f3", "filename": "crates/ra_assists/src/handlers/add_custom_impl.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs?ref=b764c38436fcb9426eb7da3be4f5fbcd63b316f5", "patch": "@@ -1,17 +1,13 @@\n-//! FIXME: write short doc here\n-\n-use join_to_string::join;\n use ra_syntax::{\n     ast::{self, AstNode},\n     Direction, SmolStr,\n     SyntaxKind::{IDENT, WHITESPACE},\n     TextRange, TextUnit,\n };\n+use stdx::SepBy;\n \n use crate::{Assist, AssistCtx, AssistId};\n \n-const DERIVE_TRAIT: &str = \"derive\";\n-\n // Assist: add_custom_impl\n //\n // Adds impl block for derived trait.\n@@ -38,7 +34,7 @@ pub(crate) fn add_custom_impl(ctx: AssistCtx) -> Option<Assist> {\n         .descendants_with_tokens()\n         .filter(|t| t.kind() == IDENT)\n         .find_map(|i| i.into_token())\n-        .filter(|t| *t.text() == DERIVE_TRAIT)?\n+        .filter(|t| *t.text() == \"derive\")?\n         .text()\n         .clone();\n \n@@ -63,8 +59,7 @@ pub(crate) fn add_custom_impl(ctx: AssistCtx) -> Option<Assist> {\n             .filter(|t| t != trait_token.text())\n             .collect::<Vec<SmolStr>>();\n         let has_more_derives = !new_attr_input.is_empty();\n-        let new_attr_input =\n-            join(new_attr_input.iter()).separator(\", \").surround_with(\"(\", \")\").to_string();\n+        let new_attr_input = new_attr_input.iter().sep_by(\", \").surround_with(\"(\", \")\").to_string();\n         let new_attr_input_len = new_attr_input.len();\n \n         let mut buf = String::new();\n@@ -100,9 +95,10 @@ pub(crate) fn add_custom_impl(ctx: AssistCtx) -> Option<Assist> {\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n     use crate::helpers::{check_assist, check_assist_not_applicable};\n \n+    use super::*;\n+\n     #[test]\n     fn add_custom_impl_for_unique_input() {\n         check_assist("}, {"sha": "6622eadb2da1fd9bf2275a57634306306cfbc35c", "filename": "crates/ra_assists/src/handlers/add_impl.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_impl.rs?ref=b764c38436fcb9426eb7da3be4f5fbcd63b316f5", "patch": "@@ -1,9 +1,8 @@\n-use format_buf::format;\n-use join_to_string::join;\n use ra_syntax::{\n     ast::{self, AstNode, NameOwner, TypeParamsOwner},\n     TextUnit,\n };\n+use stdx::{format_to, SepBy};\n \n use crate::{Assist, AssistCtx, AssistId};\n \n@@ -36,7 +35,7 @@ pub(crate) fn add_impl(ctx: AssistCtx) -> Option<Assist> {\n         let mut buf = String::new();\n         buf.push_str(\"\\n\\nimpl\");\n         if let Some(type_params) = &type_params {\n-            format!(buf, \"{}\", type_params.syntax());\n+            format_to!(buf, \"{}\", type_params.syntax());\n         }\n         buf.push_str(\" \");\n         buf.push_str(name.text().as_str());\n@@ -47,7 +46,9 @@ pub(crate) fn add_impl(ctx: AssistCtx) -> Option<Assist> {\n                 .map(|it| it.text().clone());\n             let type_params =\n                 type_params.type_params().filter_map(|it| it.name()).map(|it| it.text().clone());\n-            join(lifetime_params.chain(type_params)).surround_with(\"<\", \">\").to_buf(&mut buf);\n+\n+            let generic_params = lifetime_params.chain(type_params).sep_by(\", \");\n+            format_to!(buf, \"<{}>\", generic_params)\n         }\n         buf.push_str(\" {\\n\");\n         edit.set_cursor(start_offset + TextUnit::of_str(&buf));"}, {"sha": "240b19fa378c5432c4d2023ddf5e083072f1a863", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "modified", "additions": 17, "deletions": 22, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=b764c38436fcb9426eb7da3be4f5fbcd63b316f5", "patch": "@@ -1,14 +1,11 @@\n-use std::fmt::Write;\n-\n-use format_buf::format;\n use hir::Adt;\n-use join_to_string::join;\n use ra_syntax::{\n     ast::{\n         self, AstNode, NameOwner, StructKind, TypeAscriptionOwner, TypeParamsOwner, VisibilityOwner,\n     },\n     TextUnit, T,\n };\n+use stdx::{format_to, SepBy};\n \n use crate::{Assist, AssistCtx, AssistId};\n \n@@ -53,24 +50,22 @@ pub(crate) fn add_new(ctx: AssistCtx) -> Option<Assist> {\n             buf.push('\\n');\n         }\n \n-        let vis = strukt.visibility().map(|v| format!(\"{} \", v.syntax()));\n+        let vis = strukt.visibility().map(|v| format!(\"{} \", v));\n         let vis = vis.as_deref().unwrap_or(\"\");\n-        write!(&mut buf, \"    {}fn new(\", vis).unwrap();\n-\n-        join(field_list.fields().filter_map(|f| {\n-            Some(format!(\"{}: {}\", f.name()?.syntax().text(), f.ascribed_type()?.syntax().text()))\n-        }))\n-        .separator(\", \")\n-        .to_buf(&mut buf);\n \n-        buf.push_str(\") -> Self { Self {\");\n-\n-        join(field_list.fields().filter_map(|f| Some(f.name()?.syntax().text())))\n-            .separator(\", \")\n-            .surround_with(\" \", \" \")\n-            .to_buf(&mut buf);\n+        let params = field_list\n+            .fields()\n+            .filter_map(|f| {\n+                Some(format!(\n+                    \"{}: {}\",\n+                    f.name()?.syntax().text(),\n+                    f.ascribed_type()?.syntax().text()\n+                ))\n+            })\n+            .sep_by(\", \");\n+        let fields = field_list.fields().filter_map(|f| f.name()).sep_by(\", \");\n \n-        buf.push_str(\"} }\");\n+        format_to!(buf, \"    {}fn new({}) -> Self {{ Self {{ {} }} }}\", vis, params, fields);\n \n         let (start_offset, end_offset) = impl_def\n             .and_then(|impl_def| {\n@@ -103,7 +98,7 @@ fn generate_impl_text(strukt: &ast::StructDef, code: &str) -> String {\n     let mut buf = String::with_capacity(code.len());\n     buf.push_str(\"\\n\\nimpl\");\n     if let Some(type_params) = &type_params {\n-        format!(buf, \"{}\", type_params.syntax());\n+        format_to!(buf, \"{}\", type_params.syntax());\n     }\n     buf.push_str(\" \");\n     buf.push_str(strukt.name().unwrap().text().as_str());\n@@ -114,10 +109,10 @@ fn generate_impl_text(strukt: &ast::StructDef, code: &str) -> String {\n             .map(|it| it.text().clone());\n         let type_params =\n             type_params.type_params().filter_map(|it| it.name()).map(|it| it.text().clone());\n-        join(lifetime_params.chain(type_params)).surround_with(\"<\", \">\").to_buf(&mut buf);\n+        format_to!(buf, \"<{}>\", lifetime_params.chain(type_params).sep_by(\", \"))\n     }\n \n-    format!(&mut buf, \" {{\\n{}\\n}}\\n\", code);\n+    format_to!(buf, \" {{\\n{}\\n}}\\n\", code);\n \n     buf\n }"}, {"sha": "1edbdc14c74dea5d4a7323876deba3dcd36c90a7", "filename": "crates/ra_assists/src/handlers/introduce_variable.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs?ref=b764c38436fcb9426eb7da3be4f5fbcd63b316f5", "patch": "@@ -1,4 +1,3 @@\n-use format_buf::format;\n use ra_syntax::{\n     ast::{self, AstNode},\n     SyntaxKind::{\n@@ -7,6 +6,7 @@ use ra_syntax::{\n     },\n     SyntaxNode, TextUnit,\n };\n+use stdx::format_to;\n use test_utils::tested_by;\n \n use crate::{Assist, AssistCtx, AssistId};\n@@ -52,7 +52,7 @@ pub(crate) fn introduce_variable(ctx: AssistCtx) -> Option<Assist> {\n             buf.push_str(\"let var_name = \");\n             TextUnit::of_str(\"let \")\n         };\n-        format!(buf, \"{}\", expr.syntax());\n+        format_to!(buf, \"{}\", expr.syntax());\n         let full_stmt = ast::ExprStmt::cast(anchor_stmt.clone());\n         let is_full_stmt = if let Some(expr_stmt) = &full_stmt {\n             Some(expr.syntax().clone()) == expr_stmt.expr().map(|e| e.syntax().clone())"}, {"sha": "b4a29b81b320d554b584ca29452264a50ffb0b65", "filename": "crates/ra_ide/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_ide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_ide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2FCargo.toml?ref=b764c38436fcb9426eb7da3be4f5fbcd63b316f5", "patch": "@@ -12,14 +12,14 @@ wasm = []\n \n [dependencies]\n either = \"1.5.3\"\n-format-buf = \"1.0.0\"\n indexmap = \"1.3.2\"\n itertools = \"0.9.0\"\n-join_to_string = \"0.1.3\"\n log = \"0.4.8\"\n rustc-hash = \"1.1.0\"\n rand = { version = \"0.7.3\", features = [\"small_rng\"] }\n \n+stdx = { path = \"../stdx\" }\n+\n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_db = { path = \"../ra_db\" }"}, {"sha": "60f1b83f33e69713da48b23f756c3afbea6dbe0d", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 21, "deletions": 24, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=b764c38436fcb9426eb7da3be4f5fbcd63b316f5", "patch": "@@ -1,15 +1,14 @@\n //! This modules takes care of rendering various definitions as completion items.\n \n use hir::{Docs, HasAttrs, HasSource, HirDisplay, ScopeDef, StructKind, Type};\n-use join_to_string::join;\n use ra_syntax::ast::NameOwner;\n+use stdx::SepBy;\n use test_utils::tested_by;\n \n-use crate::completion::{\n-    CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n-};\n-\n use crate::{\n+    completion::{\n+        CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n+    },\n     display::{const_label, macro_label, type_label, FunctionSignature},\n     RootDatabase,\n };\n@@ -221,13 +220,13 @@ impl Completions {\n                 builder = builder.trigger_call_info();\n                 let snippet = if ctx.options.add_call_argument_snippets {\n                     let to_skip = if has_self_param { 1 } else { 0 };\n-                    let function_params_snippet = join(\n-                        function_signature.parameter_names.iter().skip(to_skip).enumerate().map(\n-                            |(index, param_name)| format!(\"${{{}:{}}}\", index + 1, param_name),\n-                        ),\n-                    )\n-                    .separator(\", \")\n-                    .to_string();\n+                    let function_params_snippet = function_signature\n+                        .parameter_names\n+                        .iter()\n+                        .skip(to_skip)\n+                        .enumerate()\n+                        .map(|(index, param_name)| format!(\"${{{}:{}}}\", index + 1, param_name))\n+                        .sep_by(\", \");\n                     format!(\"{}({})$0\", name, function_params_snippet)\n                 } else {\n                     format!(\"{}($0)\", name)\n@@ -281,18 +280,16 @@ impl Completions {\n             .into_iter()\n             .map(|field| (field.name(ctx.db), field.signature_ty(ctx.db)));\n         let detail = match variant.kind(ctx.db) {\n-            StructKind::Tuple | StructKind::Unit => {\n-                join(detail_types.map(|(_, t)| t.display(ctx.db).to_string()))\n-                    .separator(\", \")\n-                    .surround_with(\"(\", \")\")\n-                    .to_string()\n-            }\n-            StructKind::Record => {\n-                join(detail_types.map(|(n, t)| format!(\"{}: {}\", n, t.display(ctx.db).to_string())))\n-                    .separator(\", \")\n-                    .surround_with(\"{ \", \" }\")\n-                    .to_string()\n-            }\n+            StructKind::Tuple | StructKind::Unit => detail_types\n+                .map(|(_, t)| t.display(ctx.db).to_string())\n+                .sep_by(\", \")\n+                .surround_with(\"(\", \")\")\n+                .to_string(),\n+            StructKind::Record => detail_types\n+                .map(|(n, t)| format!(\"{}: {}\", n, t.display(ctx.db).to_string()))\n+                .sep_by(\", \")\n+                .surround_with(\"{ \", \" }\")\n+                .to_string(),\n         };\n         CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.to_string())\n             .kind(CompletionItemKind::EnumVariant)"}, {"sha": "c1d7ddaf2343c4da1ca4def1df7d3b3f87814a29", "filename": "crates/ra_ide/src/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdiagnostics.rs?ref=b764c38436fcb9426eb7da3be4f5fbcd63b316f5", "patch": "@@ -200,8 +200,8 @@ fn check_struct_shorthand_initialization(\n #[cfg(test)]\n mod tests {\n     use insta::assert_debug_snapshot;\n-    use join_to_string::join;\n     use ra_syntax::SourceFile;\n+    use stdx::SepBy;\n     use test_utils::assert_eq_text;\n \n     use crate::mock_analysis::{analysis_and_position, single_file};\n@@ -254,16 +254,12 @@ mod tests {\n             .map(|it| it.len() - it.trim_start().len())\n             .next()\n             .expect(\"empty fixture\");\n-        let after = join(after.lines().filter_map(|line| {\n-            if line.len() > margin {\n-                Some(&line[margin..])\n-            } else {\n-                None\n-            }\n-        }))\n-        .separator(\"\\n\")\n-        .suffix(\"\\n\")\n-        .to_string();\n+        let after = after\n+            .lines()\n+            .filter_map(|line| if line.len() > margin { Some(&line[margin..]) } else { None })\n+            .sep_by(\"\\n\")\n+            .suffix(\"\\n\")\n+            .to_string();\n \n         assert_eq_text!(&after, &actual);\n         assert!("}, {"sha": "b967a6816804101037d8b45e98075156f8bf5bc4", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=b764c38436fcb9426eb7da3be4f5fbcd63b316f5", "patch": "@@ -1,12 +1,14 @@\n //! FIXME: write short doc here\n \n-use std::fmt::{self, Display};\n+use std::{\n+    convert::From,\n+    fmt::{self, Display},\n+};\n \n use hir::{Docs, Documentation, HasSource, HirDisplay};\n-use join_to_string::join;\n use ra_ide_db::RootDatabase;\n use ra_syntax::ast::{self, AstNode, NameOwner, VisibilityOwner};\n-use std::convert::From;\n+use stdx::SepBy;\n \n use crate::display::{generic_parameters, where_predicates};\n \n@@ -227,21 +229,17 @@ impl Display for FunctionSignature {\n         }\n \n         if !self.generic_parameters.is_empty() {\n-            join(self.generic_parameters.iter())\n-                .separator(\", \")\n-                .surround_with(\"<\", \">\")\n-                .to_fmt(f)?;\n+            write!(f, \"{}\", self.generic_parameters.iter().sep_by(\", \").surround_with(\"<\", \">\"))?;\n         }\n \n-        join(self.parameters.iter()).separator(\", \").surround_with(\"(\", \")\").to_fmt(f)?;\n+        write!(f, \"{}\", self.parameters.iter().sep_by(\", \").surround_with(\"(\", \")\"))?;\n \n         if let Some(t) = &self.ret_type {\n             write!(f, \" -> {}\", t)?;\n         }\n \n         if !self.where_predicates.is_empty() {\n-            write!(f, \"\\nwhere \")?;\n-            join(self.where_predicates.iter()).separator(\",\\n      \").to_fmt(f)?;\n+            write!(f, \"\\nwhere {}\", self.where_predicates.iter().sep_by(\",\\n      \"))?;\n         }\n \n         Ok(())"}, {"sha": "4b081bf6c60634cde74f46ddf01060471ae6eb08", "filename": "crates/ra_ide/src/display/short_label.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fshort_label.rs?ref=b764c38436fcb9426eb7da3be4f5fbcd63b316f5", "patch": "@@ -1,7 +1,7 @@\n //! FIXME: write short doc here\n \n-use format_buf::format;\n use ra_syntax::ast::{self, AstNode, NameOwner, TypeAscriptionOwner, VisibilityOwner};\n+use stdx::format_to;\n \n pub(crate) trait ShortLabel {\n     fn short_label(&self) -> Option<String>;\n@@ -80,7 +80,7 @@ where\n     let mut buf = short_label_from_node(node, prefix)?;\n \n     if let Some(type_ref) = node.ascribed_type() {\n-        format!(buf, \": {}\", type_ref.syntax());\n+        format_to!(buf, \": {}\", type_ref.syntax());\n     }\n \n     Some(buf)"}, {"sha": "f9e380c105dccf13b42282721c75a2b8c98b49fa", "filename": "crates/stdx/Cargo.toml", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fstdx%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fstdx%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2FCargo.toml?ref=b764c38436fcb9426eb7da3be4f5fbcd63b316f5", "patch": "@@ -0,0 +1,11 @@\n+[package]\n+name = \"stdx\"\n+version = \"0.1.0\"\n+authors = [\"rust-analyzer developers\"]\n+edition = \"2018\"\n+\n+[lib]\n+doctest = false\n+\n+[dependencies]\n+# Think twice before adding anything here"}, {"sha": "a01ca6d4d9507c0ab03864105ae53a99e9320f80", "filename": "crates/stdx/src/lib.rs", "status": "added", "additions": 75, "deletions": 0, "changes": 75, "blob_url": "https://github.com/rust-lang/rust/blob/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fstdx%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b764c38436fcb9426eb7da3be4f5fbcd63b316f5/crates%2Fstdx%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fstdx%2Fsrc%2Flib.rs?ref=b764c38436fcb9426eb7da3be4f5fbcd63b316f5", "patch": "@@ -0,0 +1,75 @@\n+//! Missing batteries for standard libraries.\n+\n+use std::{cell::Cell, fmt};\n+\n+/// Appends formatted string to a `String`.\n+#[macro_export]\n+macro_rules! format_to {\n+    (&buf:expr) => ();\n+    ($buf:expr, $lit:literal $($arg:tt)*) => {\n+        { use ::std::fmt::Write as _; let _ = ::std::write!($buf, $lit $($arg)*); }\n+    };\n+}\n+\n+pub trait SepBy: Sized {\n+    /// Returns an `impl fmt::Display`, which joins elements via a separator.\n+    fn sep_by<'a>(self, sep: &'a str) -> SepByBuilder<'a, Self>;\n+}\n+\n+impl<I> SepBy for I\n+where\n+    I: Iterator,\n+    I::Item: fmt::Display,\n+{\n+    fn sep_by<'a>(self, sep: &'a std::primitive::str) -> SepByBuilder<'a, Self> {\n+        SepByBuilder::new(sep, self)\n+    }\n+}\n+\n+pub struct SepByBuilder<'a, I> {\n+    sep: &'a str,\n+    prefix: &'a str,\n+    suffix: &'a str,\n+    iter: Cell<Option<I>>,\n+}\n+\n+impl<'a, I> SepByBuilder<'a, I> {\n+    fn new(sep: &'a str, iter: I) -> SepByBuilder<'a, I> {\n+        SepByBuilder { sep, prefix: \"\", suffix: \"\", iter: Cell::new(Some(iter)) }\n+    }\n+\n+    pub fn prefix(mut self, prefix: &'a str) -> Self {\n+        self.prefix = prefix;\n+        self\n+    }\n+\n+    pub fn suffix(mut self, suffix: &'a str) -> Self {\n+        self.suffix = suffix;\n+        self\n+    }\n+\n+    /// Set both suffix and prefix.\n+    pub fn surround_with(self, prefix: &'a str, suffix: &'a str) -> Self {\n+        self.prefix(prefix).suffix(suffix)\n+    }\n+}\n+\n+impl<I> fmt::Display for SepByBuilder<'_, I>\n+where\n+    I: Iterator,\n+    I::Item: fmt::Display,\n+{\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        f.write_str(self.prefix)?;\n+        let mut first = true;\n+        for item in self.iter.take().unwrap() {\n+            if !first {\n+                f.write_str(self.sep)?;\n+            }\n+            first = false;\n+            fmt::Display::fmt(&item, f)?;\n+        }\n+        f.write_str(self.suffix)?;\n+        Ok(())\n+    }\n+}"}]}