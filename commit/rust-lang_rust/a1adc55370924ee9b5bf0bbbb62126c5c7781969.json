{"sha": "a1adc55370924ee9b5bf0bbbb62126c5c7781969", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYWRjNTUzNzA5MjRlZTliNWJmMGJiYmI2MjEyNmM1Yzc3ODE5Njk=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-07T10:44:03Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-07T10:44:03Z"}, "message": "Add basic bool support.", "tree": {"sha": "a8e0e1047ba0c734c8cfc7d87c3a8387a4c24f55", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a8e0e1047ba0c734c8cfc7d87c3a8387a4c24f55"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1adc55370924ee9b5bf0bbbb62126c5c7781969", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1adc55370924ee9b5bf0bbbb62126c5c7781969", "html_url": "https://github.com/rust-lang/rust/commit/a1adc55370924ee9b5bf0bbbb62126c5c7781969", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1adc55370924ee9b5bf0bbbb62126c5c7781969/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d330bd6a32c1386def539c851d9fc1f76354eb22", "url": "https://api.github.com/repos/rust-lang/rust/commits/d330bd6a32c1386def539c851d9fc1f76354eb22", "html_url": "https://github.com/rust-lang/rust/commit/d330bd6a32c1386def539c851d9fc1f76354eb22"}], "stats": {"total": 47, "additions": 39, "deletions": 8}, "files": [{"sha": "3abc4231edd75602dc7fa3b2d37d63b3dd2a271a", "filename": "src/interpreter.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a1adc55370924ee9b5bf0bbbb62126c5c7781969/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1adc55370924ee9b5bf0bbbb62126c5c7781969/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=a1adc55370924ee9b5bf0bbbb62126c5c7781969", "patch": "@@ -22,6 +22,7 @@ const TRACE_EXECUTION: bool = true;\n #[derive(Clone, Debug)]\n pub enum EvalError {\n     DanglingPointerDeref,\n+    InvalidBool,\n     PointerOutOfBounds,\n }\n \n@@ -31,6 +32,7 @@ impl Error for EvalError {\n     fn description(&self) -> &str {\n         match *self {\n             EvalError::DanglingPointerDeref => \"dangling pointer was dereferenced\",\n+            EvalError::InvalidBool => \"invalid boolean value read\",\n             EvalError::PointerOutOfBounds => \"pointer offset outside bounds of allocation\",\n         }\n     }\n@@ -405,7 +407,7 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n     fn const_to_ptr(&mut self, const_val: &const_eval::ConstVal) -> EvalResult<Pointer> {\n         use rustc::middle::const_eval::ConstVal::*;\n         match *const_val {\n-            Float(_f)         => unimplemented!(),\n+            Float(_f) => unimplemented!(),\n             Int(n) => {\n                 let ptr = self.memory.allocate(Repr::Int);\n                 try!(self.memory.write_int(&ptr, n));\n@@ -414,7 +416,11 @@ impl<'a, 'tcx> Interpreter<'a, 'tcx> {\n             Uint(_u)          => unimplemented!(),\n             Str(ref _s)       => unimplemented!(),\n             ByteStr(ref _bs)  => unimplemented!(),\n-            Bool(b)           => unimplemented!(),\n+            Bool(b) => {\n+                let ptr = self.memory.allocate(Repr::Bool);\n+                try!(self.memory.write_bool(&ptr, b));\n+                Ok(ptr)\n+            },\n             Struct(_node_id)  => unimplemented!(),\n             Tuple(_node_id)   => unimplemented!(),\n             Function(_def_id) => unimplemented!(),"}, {"sha": "9cc3c63622c1bbc3d9e7cf39bf0518e207fdecc6", "filename": "src/memory.rs", "status": "modified", "additions": 26, "deletions": 6, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a1adc55370924ee9b5bf0bbbb62126c5c7781969/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1adc55370924ee9b5bf0bbbb62126c5c7781969/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=a1adc55370924ee9b5bf0bbbb62126c5c7781969", "patch": "@@ -36,6 +36,7 @@ pub struct FieldRepr {\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n pub enum Repr {\n+    Bool,\n     Int,\n     Aggregate {\n         size: usize,\n@@ -103,22 +104,38 @@ impl Memory {\n     }\n \n     pub fn read_int(&self, ptr: &Pointer) -> EvalResult<i64> {\n-        let bytes = try!(self.get_bytes(ptr, Repr::Int.size()));\n-        Ok(byteorder::NativeEndian::read_i64(bytes))\n+        self.get_bytes(ptr, Repr::Int.size()).map(byteorder::NativeEndian::read_i64)\n     }\n \n     pub fn write_int(&mut self, ptr: &Pointer, n: i64) -> EvalResult<()> {\n         let bytes = try!(self.get_bytes_mut(ptr, Repr::Int.size()));\n-        Ok(byteorder::NativeEndian::write_i64(bytes, n))\n+        byteorder::NativeEndian::write_i64(bytes, n);\n+        Ok(())\n+    }\n+\n+    pub fn read_bool(&self, ptr: &Pointer) -> EvalResult<bool> {\n+        let bytes = try!(self.get_bytes(ptr, 1));\n+        match bytes[0] {\n+            0 => Ok(false),\n+            1 => Ok(true),\n+            _ => Err(EvalError::InvalidBool),\n+        }\n+    }\n+\n+    pub fn write_bool(&mut self, ptr: &Pointer, b: bool) -> EvalResult<()> {\n+        let bytes = try!(self.get_bytes_mut(ptr, 1));\n+        bytes[0] = b as u8;\n+        Ok(())\n     }\n }\n \n impl Allocation {\n     fn check_bytes(&self, start: usize, end: usize) -> EvalResult<()> {\n-        if start >= self.bytes.len() || end > self.bytes.len() {\n-            return Err(EvalError::PointerOutOfBounds);\n+        if start < self.bytes.len() && end <= self.bytes.len() {\n+            Ok(())\n+        } else {\n+            Err(EvalError::PointerOutOfBounds)\n         }\n-        Ok(())\n     }\n }\n \n@@ -132,6 +149,8 @@ impl Repr {\n     // TODO(tsion): Cache these outputs.\n     pub fn from_ty(ty: ty::Ty) -> Self {\n         match ty.sty {\n+            ty::TyBool => Repr::Bool,\n+\n             ty::TyInt(_) => Repr::Int,\n \n             ty::TyTuple(ref fields) => {\n@@ -151,6 +170,7 @@ impl Repr {\n \n     pub fn size(&self) -> usize {\n         match *self {\n+            Repr::Bool => 1,\n             Repr::Int => mem::size_of::<i64>(),\n             Repr::Aggregate { size, .. } => size,\n         }"}, {"sha": "b4a506a9fb4697d24453f6770b0d2ee2147b3144", "filename": "test/new_values.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a1adc55370924ee9b5bf0bbbb62126c5c7781969/test%2Fnew_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1adc55370924ee9b5bf0bbbb62126c5c7781969/test%2Fnew_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Fnew_values.rs?ref=a1adc55370924ee9b5bf0bbbb62126c5c7781969", "patch": "@@ -46,6 +46,11 @@ fn arith() -> i32 {\n     3*3 + 4*4\n }\n \n+#[miri_run]\n+fn boolean() -> bool {\n+    true\n+}\n+\n // #[miri_run(expected = \"Int(0)\")]\n // fn if_false() -> i32 {\n //     if false { 1 } else { 0 }"}]}