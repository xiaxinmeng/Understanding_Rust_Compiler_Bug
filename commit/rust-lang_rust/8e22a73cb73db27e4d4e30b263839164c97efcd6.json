{"sha": "8e22a73cb73db27e4d4e30b263839164c97efcd6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMjJhNzNjYjczZGIyN2U0ZDRlMzBiMjYzODM5MTY0Yzk3ZWZjZDY=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-08-19T19:41:19Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-08-19T19:51:03Z"}, "message": "Add option to override single configuration lines for tests", "tree": {"sha": "2083708c88a4efb64ac462f03b29fc687a704c6d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2083708c88a4efb64ac462f03b29fc687a704c6d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e22a73cb73db27e4d4e30b263839164c97efcd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e22a73cb73db27e4d4e30b263839164c97efcd6", "html_url": "https://github.com/rust-lang/rust/commit/8e22a73cb73db27e4d4e30b263839164c97efcd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e22a73cb73db27e4d4e30b263839164c97efcd6/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ef0b179558f85a0a0288d8fa1500732cd2512d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ef0b179558f85a0a0288d8fa1500732cd2512d5", "html_url": "https://github.com/rust-lang/rust/commit/2ef0b179558f85a0a0288d8fa1500732cd2512d5"}], "stats": {"total": 226, "additions": 110, "deletions": 116}, "files": [{"sha": "357f99a60978d257d1235c4ebbfec53179c5b03e", "filename": "src/config.rs", "status": "modified", "additions": 49, "deletions": 30, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/8e22a73cb73db27e4d4e30b263839164c97efcd6/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e22a73cb73db27e4d4e30b263839164c97efcd6/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=8e22a73cb73db27e4d4e30b263839164c97efcd6", "patch": "@@ -26,37 +26,56 @@ pub enum BlockIndentStyle {\n \n impl_enum_decodable!(BlockIndentStyle, Inherit, Tabbed, Visual);\n \n-#[derive(RustcDecodable, Clone)]\n-pub struct Config {\n-    pub max_width: usize,\n-    pub ideal_width: usize,\n-    pub leeway: usize,\n-    pub tab_spaces: usize,\n-    pub newline_style: NewlineStyle,\n-    pub fn_brace_style: BraceStyle,\n-    pub fn_return_indent: ReturnIndent,\n-    pub fn_args_paren_newline: bool,\n-    pub struct_trailing_comma: SeparatorTactic,\n-    pub struct_lit_trailing_comma: SeparatorTactic,\n-    pub struct_lit_style: StructLitStyle,\n-    pub enum_trailing_comma: bool,\n-    pub report_todo: ReportTactic,\n-    pub report_fixme: ReportTactic,\n-    pub reorder_imports: bool, // Alphabetically, case sensitive.\n-    pub expr_indent_style: BlockIndentStyle,\n-}\n+macro_rules! create_config {\n+    ($($i:ident: $ty:ty),+ $(,)*) => (\n+        #[derive(RustcDecodable, Clone)]\n+        pub struct Config {\n+            $(pub $i: $ty),+\n+        }\n+\n+        impl Config {\n+            pub fn from_toml(toml: &str) -> Config {\n+                let parsed = toml.parse().unwrap();\n+                match toml::decode(parsed) {\n+                    Some(decoded) => decoded,\n+                    None => {\n+                        println!(\"Decoding config file failed. Config:\\n{}\", toml);\n+                        let parsed: toml::Value = toml.parse().unwrap();\n+                        println!(\"\\n\\nParsed:\\n{:?}\", parsed);\n+                        panic!();\n+                    }\n+                }\n+            }\n \n-impl Config {\n-    pub fn from_toml(toml: &str) -> Config {\n-        let parsed = toml.parse().unwrap();\n-        match toml::decode(parsed) {\n-            Some(decoded) => decoded,\n-            None => {\n-                println!(\"Decoding config file failed. Config:\\n{}\", toml);\n-                let parsed: toml::Value = toml.parse().unwrap();\n-                println!(\"\\n\\nParsed:\\n{:?}\", parsed);\n-                panic!();\n+            pub fn override_value(&mut self, key: &str, val: &str) {\n+                match key {\n+                    $(\n+                        stringify!($i) => {\n+                            self.$i = val.parse::<$ty>().unwrap();\n+                        }\n+                    )+\n+                    _ => panic!(\"Bad config key!\")\n+                }\n             }\n         }\n-    }\n+    )\n+}\n+\n+create_config! {\n+    max_width: usize,\n+    ideal_width: usize,\n+    leeway: usize,\n+    tab_spaces: usize,\n+    newline_style: NewlineStyle,\n+    fn_brace_style: BraceStyle,\n+    fn_return_indent: ReturnIndent,\n+    fn_args_paren_newline: bool,\n+    struct_trailing_comma: SeparatorTactic,\n+    struct_lit_trailing_comma: SeparatorTactic,\n+    struct_lit_style: StructLitStyle,\n+    enum_trailing_comma: bool,\n+    report_todo: ReportTactic,\n+    report_fixme: ReportTactic,\n+    reorder_imports: bool, // Alphabetically, case sensitive.\n+    expr_indent_style: BlockIndentStyle,\n }"}, {"sha": "2fbdcb7d6c93df627cad84e9f152e8780ead913c", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8e22a73cb73db27e4d4e30b263839164c97efcd6/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e22a73cb73db27e4d4e30b263839164c97efcd6/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=8e22a73cb73db27e4d4e30b263839164c97efcd6", "patch": "@@ -617,10 +617,8 @@ fn rewrite_binary_op(context: &RewriteContext,\n     let operator_str = context.codemap.span_to_snippet(op.span).unwrap();\n \n     // 1 = space between lhs expr and operator\n-    let mut result =\n-        try_opt!(lhs.rewrite(context,\n-                             context.config.max_width - offset - 1 - operator_str.len(),\n-                             offset));\n+    let max_width = try_opt!(context.config.max_width.checked_sub(operator_str.len() + offset + 1));\n+    let mut result = try_opt!(lhs.rewrite(context, max_width, offset));\n \n     result.push(' ');\n     result.push_str(&operator_str);"}, {"sha": "cd43be56a99f4a23be8651d742e4188761d1bdb4", "filename": "src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e22a73cb73db27e4d4e30b263839164c97efcd6/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e22a73cb73db27e4d4e30b263839164c97efcd6/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=8e22a73cb73db27e4d4e30b263839164c97efcd6", "patch": "@@ -80,7 +80,7 @@ pub enum WriteMode {\n     NewFile(&'static str),\n     // Write the output to stdout.\n     Display,\n-    // Return the result as a mapping from filenames to StringBuffers.\n+    // Return the result as a mapping from filenames to Strings.\n     Return(&'static Fn(HashMap<String, String>)),\n }\n "}, {"sha": "a57ffb008ea1a277af34a6184a681db838c669b1", "filename": "src/utils.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8e22a73cb73db27e4d4e30b263839164c97efcd6/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e22a73cb73db27e4d4e30b263839164c97efcd6/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=8e22a73cb73db27e4d4e30b263839164c97efcd6", "patch": "@@ -144,6 +144,19 @@ macro_rules! impl_enum_decodable {\n                 }\n             }\n         }\n+\n+        impl ::std::str::FromStr for $e {\n+            type Err = &'static str;\n+\n+            fn from_str(s: &str) -> Result<Self, Self::Err> {\n+                match &*s {\n+                    $(\n+                        stringify!($x) => Ok($e::$x),\n+                    )*\n+                    _ => Err(\"Bad variant\"),\n+                }\n+            }\n+        }\n     };\n }\n "}, {"sha": "38a099e3bedcaf503d6544cc3264af38fa0b35eb", "filename": "tests/config/expr_visual_indent.toml", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2ef0b179558f85a0a0288d8fa1500732cd2512d5/tests%2Fconfig%2Fexpr_visual_indent.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2ef0b179558f85a0a0288d8fa1500732cd2512d5/tests%2Fconfig%2Fexpr_visual_indent.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fexpr_visual_indent.toml?ref=2ef0b179558f85a0a0288d8fa1500732cd2512d5", "patch": "@@ -1,16 +0,0 @@\n-max_width = 100\n-ideal_width = 80\n-leeway = 5\n-tab_spaces = 4\n-newline_style = \"Unix\"\n-fn_brace_style = \"SameLineWhere\"\n-fn_return_indent = \"WithArgs\"\n-fn_args_paren_newline = true\n-struct_trailing_comma = \"Vertical\"\n-struct_lit_style = \"BlockIndent\"\n-struct_lit_trailing_comma = \"Vertical\"\n-enum_trailing_comma = true\n-report_todo = \"Always\"\n-report_fixme = \"Never\"\n-reorder_imports = false\n-expr_indent_style = \"Visual\""}, {"sha": "5b1ce49a2f23a053593bd65dd93b8d8c615f8843", "filename": "tests/config/reorder_imports.toml", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2ef0b179558f85a0a0288d8fa1500732cd2512d5/tests%2Fconfig%2Freorder_imports.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2ef0b179558f85a0a0288d8fa1500732cd2512d5/tests%2Fconfig%2Freorder_imports.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Freorder_imports.toml?ref=2ef0b179558f85a0a0288d8fa1500732cd2512d5", "patch": "@@ -1,16 +0,0 @@\n-max_width = 100\n-ideal_width = 80\n-leeway = 5\n-tab_spaces = 4\n-newline_style = \"Unix\"\n-fn_brace_style = \"SameLineWhere\"\n-fn_return_indent = \"WithArgs\"\n-fn_args_paren_newline = true\n-struct_trailing_comma = \"Vertical\"\n-struct_lit_trailing_comma = \"Vertical\"\n-struct_lit_style = \"BlockIndent\"\n-enum_trailing_comma = true\n-report_todo = \"Always\"\n-report_fixme = \"Never\"\n-reorder_imports = true\n-expr_indent_style = \"Tabbed\""}, {"sha": "61bf4b0aee56f5f3e930c87191f101d811b69a94", "filename": "tests/config/visual_struct_lits.toml", "status": "removed", "additions": 0, "deletions": 16, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2ef0b179558f85a0a0288d8fa1500732cd2512d5/tests%2Fconfig%2Fvisual_struct_lits.toml", "raw_url": "https://github.com/rust-lang/rust/raw/2ef0b179558f85a0a0288d8fa1500732cd2512d5/tests%2Fconfig%2Fvisual_struct_lits.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fconfig%2Fvisual_struct_lits.toml?ref=2ef0b179558f85a0a0288d8fa1500732cd2512d5", "patch": "@@ -1,16 +0,0 @@\n-max_width = 100\n-ideal_width = 80\n-leeway = 5\n-tab_spaces = 4\n-newline_style = \"Unix\"\n-fn_brace_style = \"SameLineWhere\"\n-fn_return_indent = \"WithArgs\"\n-fn_args_paren_newline = true\n-struct_trailing_comma = \"Vertical\"\n-struct_lit_style = \"VisualIndent\"\n-struct_lit_trailing_comma = \"Vertical\"\n-enum_trailing_comma = true\n-report_todo = \"Always\"\n-report_fixme = \"Never\"\n-reorder_imports = false\n-expr_indent_style = \"Tabbed\""}, {"sha": "3d7c1b92be8030a4be6f0293dd9ed4aa033eacd3", "filename": "tests/source/expr-visual-indent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e22a73cb73db27e4d4e30b263839164c97efcd6/tests%2Fsource%2Fexpr-visual-indent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e22a73cb73db27e4d4e30b263839164c97efcd6/tests%2Fsource%2Fexpr-visual-indent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr-visual-indent.rs?ref=8e22a73cb73db27e4d4e30b263839164c97efcd6", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-config: expr_visual_indent.toml\n+// rustfmt-expr_indent_style: Visual\n \n // Visual level block indentation.\n "}, {"sha": "4feb8e90561494e3fdd0cd789a910eddb96030c8", "filename": "tests/source/imports-reorder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e22a73cb73db27e4d4e30b263839164c97efcd6/tests%2Fsource%2Fimports-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e22a73cb73db27e4d4e30b263839164c97efcd6/tests%2Fsource%2Fimports-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimports-reorder.rs?ref=8e22a73cb73db27e4d4e30b263839164c97efcd6", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-config: reorder_imports.toml\n+// rustfmt-reorder_imports: true\n \n use path::{C,/*A*/ A, B /* B */, self /* self */};\n "}, {"sha": "ea76a088a32811bfbb49fcf57d8d39161db7db6d", "filename": "tests/source/struct_lits_visual.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e22a73cb73db27e4d4e30b263839164c97efcd6/tests%2Fsource%2Fstruct_lits_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e22a73cb73db27e4d4e30b263839164c97efcd6/tests%2Fsource%2Fstruct_lits_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fstruct_lits_visual.rs?ref=8e22a73cb73db27e4d4e30b263839164c97efcd6", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-config: visual_struct_lits.toml\n+// rustfmt-struct_lit_style: VisualIndent\n \n // Struct literal expressions.\n "}, {"sha": "3f63d22457693c5db08681b64889010909cab8e4", "filename": "tests/system.rs", "status": "modified", "additions": 39, "deletions": 27, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/8e22a73cb73db27e4d4e30b263839164c97efcd6/tests%2Fsystem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e22a73cb73db27e4d4e30b263839164c97efcd6/tests%2Fsystem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsystem.rs?ref=8e22a73cb73db27e4d4e30b263839164c97efcd6", "patch": "@@ -97,8 +97,16 @@ fn print_mismatches(result: HashMap<String, String>) {\n static HANDLE_RESULT: &'static Fn(HashMap<String, String>) = &handle_result;\n \n pub fn idempotent_check(filename: String) -> Result<(), HashMap<String, String>> {\n-    let config = get_config(&filename);\n+    let sig_comments = read_significant_comments(&filename);\n+    let mut config = get_config(sig_comments.get(\"config\").map(|x| &(*x)[..]));\n     let args = vec![\"rustfmt\".to_owned(), filename];\n+\n+    for (key, val) in sig_comments {\n+        if key != \"target\" && key != \"config\" {\n+            config.override_value(&key, &val);\n+        }\n+    }\n+\n     // this thread is not used for concurrency, but rather to workaround the issue that the passed\n     // function handle needs to have static lifetime. Instead of using a global RefCell, we use\n     // panic to return a result in case of failure. This has the advantage of smoothing the road to\n@@ -110,15 +118,15 @@ pub fn idempotent_check(filename: String) -> Result<(), HashMap<String, String>>\n     )\n }\n \n-// Reads test config file from comments and loads it\n-fn get_config(file_name: &str) -> Box<Config> {\n-    let config_file_name = read_significant_comment(file_name, \"config\")\n-        .map(|file_name| {\n-            let mut full_path = \"tests/config/\".to_owned();\n-            full_path.push_str(&file_name);\n-            full_path\n-        })\n-        .unwrap_or(\"default.toml\".to_owned());\n+\n+// Reads test config file from comments and reads its contents.\n+fn get_config(config_file: Option<&str>) -> Box<Config> {\n+    let config_file_name = config_file.map(|file_name| {\n+                                           let mut full_path = \"tests/config/\".to_owned();\n+                                           full_path.push_str(&file_name);\n+                                           full_path\n+                                       })\n+                                       .unwrap_or(\"default.toml\".to_owned());\n \n     let mut def_config_file = fs::File::open(config_file_name).ok().expect(\"Couldn't open config.\");\n     let mut def_config = String::new();\n@@ -127,35 +135,43 @@ fn get_config(file_name: &str) -> Box<Config> {\n     Box::new(Config::from_toml(&def_config))\n }\n \n-fn read_significant_comment(file_name: &str, option: &str) -> Option<String> {\n-    let file = fs::File::open(file_name).ok().expect(\"Couldn't read file for comment.\");\n+// Reads significant comments of the form: // rustfmt-key: value\n+// into a hash map.\n+fn read_significant_comments(file_name: &str) -> HashMap<String, String> {\n+    let file = fs::File::open(file_name).ok().expect(&format!(\"Couldn't read file {}.\", file_name));\n     let reader = BufReader::new(file);\n-    let pattern = format!(\"^\\\\s*//\\\\s*rustfmt-{}:\\\\s*(\\\\S+)\", option);\n+    let pattern = r\"^\\s*//\\s*rustfmt-([^:]+):\\s*(\\S+)\";\n     let regex = regex::Regex::new(&pattern).ok().expect(\"Failed creating pattern 1.\");\n \n-    // matches exactly the lines containing significant comments or whitespace\n-    let line_regex = regex::Regex::new(r\"(^\\s*$)|(^\\s*//\\s*rustfmt-[:alpha:]+:\\s*\\S+)\")\n+    // Matches lines containing significant comments or whitespace.\n+    let line_regex = regex::Regex::new(r\"(^\\s*$)|(^\\s*//\\s*rustfmt-[^:]+:\\s*\\S+)\")\n         .ok().expect(\"Failed creating pattern 2.\");\n \n     reader.lines()\n           .map(|line| line.ok().expect(\"Failed getting line.\"))\n           .take_while(|line| line_regex.is_match(&line))\n           .filter_map(|line| {\n               regex.captures_iter(&line).next().map(|capture| {\n-                  capture.at(1).expect(\"Couldn't unwrap capture.\").to_owned()\n+                  (capture.at(1).expect(\"Couldn't unwrap capture.\").to_owned(),\n+                   capture.at(2).expect(\"Couldn't unwrap capture.\").to_owned())\n               })\n           })\n-          .next()\n+          .collect()\n }\n \n // Compare output to input.\n+// TODO: needs a better name, more explanation.\n fn handle_result(result: HashMap<String, String>) {\n     let mut failures = HashMap::new();\n \n     for (file_name, fmt_text) in result {\n-        // If file is in tests/source, compare to file with same name in tests/target\n-        let target_file_name = get_target(&file_name);\n-        let mut f = fs::File::open(&target_file_name).ok().expect(\"Couldn't open target.\");\n+        // FIXME: reading significant comments again. Is there a way we can just\n+        // pass the target to this function?\n+        let sig_comments = read_significant_comments(&file_name);\n+\n+        // If file is in tests/source, compare to file with same name in tests/target.\n+        let target = get_target(&file_name, sig_comments.get(\"target\").map(|x| &(*x)[..]));\n+        let mut f = fs::File::open(&target).ok().expect(\"Couldn't open target.\");\n \n         let mut text = String::new();\n         // TODO: speedup by running through bytes iterator\n@@ -171,15 +187,11 @@ fn handle_result(result: HashMap<String, String>) {\n }\n \n // Map source file paths to their target paths.\n-fn get_target(file_name: &str) -> String {\n+fn get_target(file_name: &str, target: Option<&str>) -> String {\n     if file_name.starts_with(\"tests/source/\") {\n-        let target = read_significant_comment(file_name, \"target\");\n-        let base = target.unwrap_or(file_name.trim_left_matches(\"tests/source/\").to_owned());\n-\n-        let mut target_file = \"tests/target/\".to_owned();\n-        target_file.push_str(&base);\n+        let base = target.unwrap_or(file_name.trim_left_matches(\"tests/source/\"));\n \n-        target_file\n+        format!(\"tests/target/{}\", base)\n     } else {\n         file_name.to_owned()\n     }"}, {"sha": "d74b5aae93c13183c59b75f0904f1c8fe1f7dd4e", "filename": "tests/target/expr-visual-indent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e22a73cb73db27e4d4e30b263839164c97efcd6/tests%2Ftarget%2Fexpr-visual-indent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e22a73cb73db27e4d4e30b263839164c97efcd6/tests%2Ftarget%2Fexpr-visual-indent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr-visual-indent.rs?ref=8e22a73cb73db27e4d4e30b263839164c97efcd6", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-config: expr_visual_indent.toml\n+// rustfmt-expr_indent_style: Visual\n \n // Visual level block indentation.\n "}, {"sha": "63ebbf1ec7b86c3fb7ed0435ad1c9ab03d0868a3", "filename": "tests/target/imports-reorder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e22a73cb73db27e4d4e30b263839164c97efcd6/tests%2Ftarget%2Fimports-reorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e22a73cb73db27e4d4e30b263839164c97efcd6/tests%2Ftarget%2Fimports-reorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports-reorder.rs?ref=8e22a73cb73db27e4d4e30b263839164c97efcd6", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-config: reorder_imports.toml\n+// rustfmt-reorder_imports: true\n \n use path::{self /* self */, /* A */ A, B /* B */, C};\n "}, {"sha": "bf73db5a8157e32a2963a90ae9e1552b956419ff", "filename": "tests/target/struct_lits_visual.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8e22a73cb73db27e4d4e30b263839164c97efcd6/tests%2Ftarget%2Fstruct_lits_visual.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e22a73cb73db27e4d4e30b263839164c97efcd6/tests%2Ftarget%2Fstruct_lits_visual.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fstruct_lits_visual.rs?ref=8e22a73cb73db27e4d4e30b263839164c97efcd6", "patch": "@@ -1,4 +1,4 @@\n-// rustfmt-config: visual_struct_lits.toml\n+// rustfmt-struct_lit_style: VisualIndent\n \n // Struct literal expressions.\n "}]}