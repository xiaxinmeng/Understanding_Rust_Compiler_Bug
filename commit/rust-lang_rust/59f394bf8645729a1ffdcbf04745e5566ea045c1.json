{"sha": "59f394bf8645729a1ffdcbf04745e5566ea045c1", "node_id": "C_kwDOAAsO6NoAKDU5ZjM5NGJmODY0NTcyOWExZmZkY2JmMDQ3NDVlNTU2NmVhMDQ1YzE", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-04-02T08:08:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-04-02T08:08:35Z"}, "message": "Rollup merge of #109846 - matthiaskrgr:clippy2023_04_III, r=Nilstrieb\n\nmore clippy::complexity fixes (iter_kv_map, map_flatten, nonminimal_bool)", "tree": {"sha": "5571ebcf2e98536af4f444f8d5882fc674877489", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5571ebcf2e98536af4f444f8d5882fc674877489"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/59f394bf8645729a1ffdcbf04745e5566ea045c1", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkKTgDCRBK7hj4Ov3rIwAAdIEIAAf9+gPNL5MpH5JN9aJ3HJgN\nidWYKKkj7GRR+3Jk54H5htXSm87Rmljz1OKIoPkNADD/VKmNd08RFGU01DDs5jTM\n2dq9576U13bgXPWVVdxtopMtHVfGgNSoYA5Q0LYGFaKOs//9HURtLVgNyou+76C5\nMQBRXEqWFwl+Zj3/lHiYR2gklFLesGoX2rFSGoNPTEd5FKvwkPWbSUM0OkyPTZa/\nwDTtBONRUxry0PpzIwi8qcXfFBjiOp/pFUmzy/V9tL6YFsWHUDBCdtaPtmI+7mbX\nOT5/raCfuu42WADvY64mY4xb4jB8ICUR1E3YxC1vOCYATLPyR/3XrsYbmyDmxVs=\n=vwu8\n-----END PGP SIGNATURE-----\n", "payload": "tree 5571ebcf2e98536af4f444f8d5882fc674877489\nparent e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414\nparent 73bd953dea25e0aa225eaf8844f2d06807691e3e\nauthor Nilstrieb <48135649+Nilstrieb@users.noreply.github.com> 1680422915 +0200\ncommitter GitHub <noreply@github.com> 1680422915 +0200\n\nRollup merge of #109846 - matthiaskrgr:clippy2023_04_III, r=Nilstrieb\n\nmore clippy::complexity fixes (iter_kv_map, map_flatten, nonminimal_bool)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/59f394bf8645729a1ffdcbf04745e5566ea045c1", "html_url": "https://github.com/rust-lang/rust/commit/59f394bf8645729a1ffdcbf04745e5566ea045c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/59f394bf8645729a1ffdcbf04745e5566ea045c1/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414", "html_url": "https://github.com/rust-lang/rust/commit/e2ffe151a3f7e58d8623e67ba7ce97c25c3ae414"}, {"sha": "73bd953dea25e0aa225eaf8844f2d06807691e3e", "url": "https://api.github.com/repos/rust-lang/rust/commits/73bd953dea25e0aa225eaf8844f2d06807691e3e", "html_url": "https://github.com/rust-lang/rust/commit/73bd953dea25e0aa225eaf8844f2d06807691e3e"}], "stats": {"total": 51, "additions": 21, "deletions": 30}, "files": [{"sha": "4f8b5abd9010c424077d3d73077128afb5a984b3", "filename": "compiler/rustc_codegen_llvm/src/common.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fcommon.rs?ref=59f394bf8645729a1ffdcbf04745e5566ea045c1", "patch": "@@ -378,8 +378,7 @@ pub(crate) fn get_dllimport<'tcx>(\n     name: &str,\n ) -> Option<&'tcx DllImport> {\n     tcx.native_library(id)\n-        .map(|lib| lib.dll_imports.iter().find(|di| di.name.as_str() == name))\n-        .flatten()\n+        .and_then(|lib| lib.dll_imports.iter().find(|di| di.name.as_str() == name))\n }\n \n pub(crate) fn is_mingw_gnu_toolchain(target: &Target) -> bool {"}, {"sha": "558253f727bcc7ff3d67dc3af01cca876f2ac6fc", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=59f394bf8645729a1ffdcbf04745e5566ea045c1", "patch": "@@ -677,8 +677,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     );\n                 }\n                 if let Rvalue::CopyForDeref(place) = rvalue {\n-                    if !place.ty(&self.body.local_decls, self.tcx).ty.builtin_deref(true).is_some()\n-                    {\n+                    if place.ty(&self.body.local_decls, self.tcx).ty.builtin_deref(true).is_none() {\n                         self.fail(\n                             location,\n                             \"`CopyForDeref` should only be used for dereferenceable types\","}, {"sha": "113c3f08ab9ae986c3dfc8155157976522c40b9f", "filename": "compiler/rustc_hir_analysis/src/astconv/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fastconv%2Ferrors.rs?ref=59f394bf8645729a1ffdcbf04745e5566ea045c1", "patch": "@@ -483,8 +483,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 [segment] if segment.args.is_none() => {\n                     trait_bound_spans = vec![segment.ident.span];\n                     associated_types = associated_types\n-                        .into_iter()\n-                        .map(|(_, items)| (segment.ident.span, items))\n+                        .into_values()\n+                        .map(|items| (segment.ident.span, items))\n                         .collect();\n                 }\n                 _ => {}"}, {"sha": "ee1c6fbfd650fdee648f196a5b38c51fd8083894", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=59f394bf8645729a1ffdcbf04745e5566ea045c1", "patch": "@@ -559,7 +559,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                 // struct; however, when EUV is run during typeck, it\n                 // may not. This will generate an error earlier in typeck,\n                 // so we can just ignore it.\n-                if !self.tcx().sess.has_errors().is_some() {\n+                if self.tcx().sess.has_errors().is_none() {\n                     span_bug!(with_expr.span, \"with expression doesn't evaluate to a struct\");\n                 }\n             }"}, {"sha": "d53e64830ff38d0219da32fd26ae92744961ee72", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=59f394bf8645729a1ffdcbf04745e5566ea045c1", "patch": "@@ -978,7 +978,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n             let (_, sig, reg) = ty::print::FmtPrinter::new(self.tcx, Namespace::TypeNS)\n                 .name_all_regions(sig)\n                 .unwrap();\n-            let lts: Vec<String> = reg.into_iter().map(|(_, kind)| kind.to_string()).collect();\n+            let lts: Vec<String> = reg.into_values().map(|kind| kind.to_string()).collect();\n             (if lts.is_empty() { String::new() } else { format!(\"for<{}> \", lts.join(\", \")) }, sig)\n         };\n "}, {"sha": "9c25f3009ba81670ebccd273f6ecbc559700146b", "filename": "compiler/rustc_middle/src/middle/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fmod.rs?ref=59f394bf8645729a1ffdcbf04745e5566ea045c1", "patch": "@@ -19,7 +19,7 @@ pub mod lib_features {\n                 .stable\n                 .iter()\n                 .map(|(f, (s, _))| (*f, Some(*s)))\n-                .chain(self.unstable.iter().map(|(f, _)| (*f, None)))\n+                .chain(self.unstable.keys().map(|f| (*f, None)))\n                 .collect();\n             all_features.sort_unstable_by(|a, b| a.0.as_str().partial_cmp(b.0.as_str()).unwrap());\n             all_features"}, {"sha": "8b96864ddd7c93b87007613a9b551f2f6e6e5445", "filename": "compiler/rustc_middle/src/ty/consts/valtree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fconsts%2Fvaltree.rs?ref=59f394bf8645729a1ffdcbf04745e5566ea045c1", "patch": "@@ -79,7 +79,7 @@ impl<'tcx> ValTree<'tcx> {\n     }\n \n     pub fn try_to_target_usize(self, tcx: TyCtxt<'tcx>) -> Option<u64> {\n-        self.try_to_scalar_int().map(|s| s.try_to_target_usize(tcx).ok()).flatten()\n+        self.try_to_scalar_int().and_then(|s| s.try_to_target_usize(tcx).ok())\n     }\n \n     /// Get the values inside the ValTree as a slice of bytes. This only works for"}, {"sha": "99291740ac82f39b6129320a08684bf759cbb64a", "filename": "compiler/rustc_mir_build/src/build/expr/as_constant.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_constant.rs?ref=59f394bf8645729a1ffdcbf04745e5566ea045c1", "patch": "@@ -62,21 +62,21 @@ pub fn as_constant_inner<'tcx>(\n             Constant { span, user_ty: None, literal }\n         }\n         ExprKind::NonHirLiteral { lit, ref user_ty } => {\n-            let user_ty = user_ty.as_ref().map(push_cuta).flatten();\n+            let user_ty = user_ty.as_ref().and_then(push_cuta);\n \n             let literal = ConstantKind::Val(ConstValue::Scalar(Scalar::Int(lit)), ty);\n \n             Constant { span, user_ty, literal }\n         }\n         ExprKind::ZstLiteral { ref user_ty } => {\n-            let user_ty = user_ty.as_ref().map(push_cuta).flatten();\n+            let user_ty = user_ty.as_ref().and_then(push_cuta);\n \n             let literal = ConstantKind::Val(ConstValue::ZeroSized, ty);\n \n             Constant { span, user_ty, literal }\n         }\n         ExprKind::NamedConst { def_id, substs, ref user_ty } => {\n-            let user_ty = user_ty.as_ref().map(push_cuta).flatten();\n+            let user_ty = user_ty.as_ref().and_then(push_cuta);\n \n             let uneval = mir::UnevaluatedConst::new(ty::WithOptConstParam::unknown(def_id), substs);\n             let literal = ConstantKind::Unevaluated(uneval, ty);"}, {"sha": "482b78d42e37715e6123abd43ea5ecc28c6a4e7f", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=59f394bf8645729a1ffdcbf04745e5566ea045c1", "patch": "@@ -89,10 +89,7 @@ impl<'tcx> Partitioner<'tcx> for DefaultPartitioning {\n         }\n \n         PreInliningPartitioning {\n-            codegen_units: codegen_units\n-                .into_iter()\n-                .map(|(_, codegen_unit)| codegen_unit)\n-                .collect(),\n+            codegen_units: codegen_units.into_values().map(|codegen_unit| codegen_unit).collect(),\n             roots,\n             internalization_candidates,\n         }"}, {"sha": "8c3dff23b272d1890edb5c72424be78ba368d9fa", "filename": "compiler/rustc_passes/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_passes%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fentry.rs?ref=59f394bf8645729a1ffdcbf04745e5566ea045c1", "patch": "@@ -206,7 +206,7 @@ fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_>) {\n     // The file may be empty, which leads to the diagnostic machinery not emitting this\n     // note. This is a relatively simple way to detect that case and emit a span-less\n     // note instead.\n-    let file_empty = !tcx.sess.source_map().lookup_line(sp.hi()).is_ok();\n+    let file_empty = tcx.sess.source_map().lookup_line(sp.hi()).is_err();\n \n     tcx.sess.emit_err(NoMainErr {\n         sp,"}, {"sha": "e69a9d0aecaf4a96d8fbeee26d5102587ae038b7", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=59f394bf8645729a1ffdcbf04745e5566ea045c1", "patch": "@@ -1669,8 +1669,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     ) -> Option<Symbol> {\n         let mut candidates = self\n             .extern_prelude\n-            .iter()\n-            .map(|(ident, _)| ident.name)\n+            .keys()\n+            .map(|ident| ident.name)\n             .chain(\n                 self.module_map\n                     .iter()\n@@ -2007,7 +2007,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         // 1) some consistent ordering for emitted diagnostics, and\n         // 2) `std` suggestions before `core` suggestions.\n         let mut extern_crate_names =\n-            self.extern_prelude.iter().map(|(ident, _)| ident.name).collect::<Vec<_>>();\n+            self.extern_prelude.keys().map(|ident| ident.name).collect::<Vec<_>>();\n         extern_crate_names.sort_by(|a, b| b.as_str().partial_cmp(a.as_str()).unwrap());\n \n         for name in extern_crate_names.into_iter() {"}, {"sha": "06206efb9abd52cdf5ed245959011fd581754454", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=59f394bf8645729a1ffdcbf04745e5566ea045c1", "patch": "@@ -389,7 +389,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             }\n         }\n \n-        assert!(force || !finalize.is_some()); // `finalize` implies `force`\n+        assert!(force || finalize.is_none()); // `finalize` implies `force`\n \n         // Make sure `self`, `super` etc produce an error when passed to here.\n         if orig_ident.is_path_segment_keyword() {"}, {"sha": "b82b07bcf0cc898e55158789825bf01fb22e6fb4", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=59f394bf8645729a1ffdcbf04745e5566ea045c1", "patch": "@@ -2421,8 +2421,7 @@ impl<'a: 'ast, 'b, 'ast, 'tcx> LateResolutionVisitor<'a, 'b, 'ast, 'tcx> {\n                     .iter()\n                     .rfind(|r| matches!(r.kind, ItemRibKind(_)))\n                     .expect(\"associated item outside of an item\");\n-                seen_bindings\n-                    .extend(parent_rib.bindings.iter().map(|(ident, _)| (*ident, ident.span)));\n+                seen_bindings.extend(parent_rib.bindings.keys().map(|ident| (*ident, ident.span)));\n             };\n             add_bindings_for_ns(ValueNS);\n             add_bindings_for_ns(TypeNS);"}, {"sha": "be5d4fca7a0093b53345b301b4357a205db28a31", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=59f394bf8645729a1ffdcbf04745e5566ea045c1", "patch": "@@ -911,7 +911,7 @@ mod parse {\n         let mut seen_instruction_threshold = false;\n         let mut seen_skip_entry = false;\n         let mut seen_skip_exit = false;\n-        for option in v.into_iter().map(|v| v.split(',')).flatten() {\n+        for option in v.into_iter().flat_map(|v| v.split(',')) {\n             match option {\n                 \"always\" if !seen_always && !seen_never => {\n                     options.always = true;"}, {"sha": "cff3d277a78fb83ae69360f00dc0ce6f2267a7a7", "filename": "compiler/rustc_trait_selection/src/traits/outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Foutlives_bounds.rs?ref=59f394bf8645729a1ffdcbf04745e5566ea045c1", "patch": "@@ -110,8 +110,6 @@ impl<'a, 'tcx: 'a> InferCtxtExt<'a, 'tcx> for InferCtxt<'tcx> {\n         body_id: LocalDefId,\n         tys: FxIndexSet<Ty<'tcx>>,\n     ) -> Bounds<'a, 'tcx> {\n-        tys.into_iter()\n-            .map(move |ty| self.implied_outlives_bounds(param_env, body_id, ty))\n-            .flatten()\n+        tys.into_iter().flat_map(move |ty| self.implied_outlives_bounds(param_env, body_id, ty))\n     }\n }"}, {"sha": "527f6013a151639b956b234b8a5ecb7112e2835d", "filename": "compiler/rustc_traits/src/chalk/lowering.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/59f394bf8645729a1ffdcbf04745e5566ea045c1/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_traits%2Fsrc%2Fchalk%2Flowering.rs?ref=59f394bf8645729a1ffdcbf04745e5566ea045c1", "patch": "@@ -909,8 +909,7 @@ pub(crate) fn collect_bound_vars<'tcx, T: TypeFoldable<TyCtxt<'tcx>>>(\n             .or_else(|| bug!(\"Skipped bound var index: parameters={:?}\", parameters));\n     });\n \n-    let binders =\n-        chalk_ir::VariableKinds::from_iter(interner, parameters.into_iter().map(|(_, v)| v));\n+    let binders = chalk_ir::VariableKinds::from_iter(interner, parameters.into_values());\n \n     (new_ty, binders, named_parameters)\n }"}]}