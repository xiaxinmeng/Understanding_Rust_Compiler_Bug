{"sha": "1524b59444109cf71916653d7906e4d41bd4ba6e", "node_id": "C_kwDOAAsO6NoAKDE1MjRiNTk0NDQxMDljZjcxOTE2NjUzZDc5MDZlNGQ0MWJkNGJhNmU", "commit": {"author": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-09-05T15:42:48Z"}, "committer": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-09-05T15:42:48Z"}, "message": "UPDATE - avoid exposing source_map methods from Handler", "tree": {"sha": "b216454158572d2ddac203d1153169b4f80f8428", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b216454158572d2ddac203d1153169b4f80f8428"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1524b59444109cf71916653d7906e4d41bd4ba6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1524b59444109cf71916653d7906e4d41bd4ba6e", "html_url": "https://github.com/rust-lang/rust/commit/1524b59444109cf71916653d7906e4d41bd4ba6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1524b59444109cf71916653d7906e4d41bd4ba6e/comments", "author": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "url": "https://api.github.com/repos/rust-lang/rust/commits/321e60bf3429d32c5ab1d03f22e3e4654bc0c388", "html_url": "https://github.com/rust-lang/rust/commit/321e60bf3429d32c5ab1d03f22e3e4654bc0c388"}], "stats": {"total": 47, "additions": 13, "deletions": 34}, "files": [{"sha": "faba9856f02a59ca1b5ba5240b65a1d51548a85c", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1524b59444109cf71916653d7906e4d41bd4ba6e/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1524b59444109cf71916653d7906e4d41bd4ba6e/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=1524b59444109cf71916653d7906e4d41bd4ba6e", "patch": "@@ -63,7 +63,7 @@ fn handle_errors(sess: &ParseSess, span: Span, error: AttrError) {\n             sess.emit_err(session_diagnostics::MultipleStabilityLevels { span });\n         }\n         AttrError::UnsupportedLiteral(reason, is_bytestr) => {\n-            sess.emit_err(session_diagnostics::UnsupportedLiteral { span, reason, is_bytestr });\n+            sess.emit_err(session_diagnostics::UnsupportedLiteral { span, reason, is_bytestr, source_map: sess.source_map() });\n         }\n     }\n }"}, {"sha": "3f5a51fbd838eb07a6927753e81f2a89ca936e37", "filename": "compiler/rustc_attr/src/session_diagnostics.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1524b59444109cf71916653d7906e4d41bd4ba6e/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1524b59444109cf71916653d7906e4d41bd4ba6e/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fsession_diagnostics.rs?ref=1524b59444109cf71916653d7906e4d41bd4ba6e", "patch": "@@ -6,7 +6,7 @@ use rustc_errors::{\n };\n use rustc_macros::SessionDiagnostic;\n use rustc_session::SessionDiagnostic;\n-use rustc_span::{Span, Symbol};\n+use rustc_span::{Span, Symbol, source_map::SourceMap};\n \n use crate::UnsupportedLiteralReason;\n \n@@ -202,13 +202,14 @@ pub(crate) struct InvalidReprHintNoValue {\n }\n \n // Error code: E0565\n-pub(crate) struct UnsupportedLiteral {\n+pub(crate) struct UnsupportedLiteral<'a> {\n     pub span: Span,\n     pub reason: UnsupportedLiteralReason,\n     pub is_bytestr: bool,\n+    pub source_map: &'a SourceMap,\n }\n \n-impl<'a> SessionDiagnostic<'a> for UnsupportedLiteral {\n+impl<'a> SessionDiagnostic<'a> for UnsupportedLiteral<'a> {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut diag = handler.struct_span_err_with_code(\n             self.span,\n@@ -225,10 +226,8 @@ impl<'a> SessionDiagnostic<'a> for UnsupportedLiteral {\n             error_code!(E0565),\n         );\n         if self.is_bytestr {\n-            let start_point = handler.span_start_point_from_emitter(self.span).unwrap_or(self.span);\n-\n             diag.span_suggestion(\n-                start_point,\n+                self.source_map.start_point(self.span),\n                 fluent::attr::unsupported_literal_suggestion,\n                 \"\",\n                 Applicability::MaybeIncorrect,"}, {"sha": "68abdd0bad1ff06165317a28d1f20392b33ba96e", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/1524b59444109cf71916653d7906e4d41bd4ba6e/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1524b59444109cf71916653d7906e4d41bd4ba6e/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=1524b59444109cf71916653d7906e4d41bd4ba6e", "patch": "@@ -1098,28 +1098,6 @@ impl Handler {\n         );\n         std::mem::take(&mut self.inner.borrow_mut().fulfilled_expectations)\n     }\n-\n-    pub fn span_to_snippet_from_emitter(\n-        &self,\n-        span: rustc_span::Span,\n-    ) -> Option<Result<String, rustc_span::SpanSnippetError>> {\n-        self.inner\n-            .borrow()\n-            .emitter\n-            .source_map()\n-            .map_or_else(|| Option::None, |sm| Some(sm.span_to_snippet(span)))\n-    }\n-\n-    pub fn span_start_point_from_emitter(\n-        &self,\n-        span: rustc_span::Span,\n-    ) -> Option<rustc_span::Span> {\n-        self.inner\n-            .borrow()\n-            .emitter\n-            .source_map()\n-            .map_or_else(|| Option::None, |sm| Some(sm.start_point(span)))\n-    }\n }\n \n impl HandlerInner {"}, {"sha": "1262dd7dcc7fd78961b5faad1ac4117abc62f5e3", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1524b59444109cf71916653d7906e4d41bd4ba6e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1524b59444109cf71916653d7906e4d41bd4ba6e/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=1524b59444109cf71916653d7906e4d41bd4ba6e", "patch": "@@ -29,6 +29,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         self.tcx().sess.emit_err(MissingTypeParams {\n             span,\n             def_span: self.tcx().def_span(def_id),\n+            source_map: self.tcx().sess.source_map(),\n             missing_type_params,\n             empty_generic_args,\n         });"}, {"sha": "7b553a46e3b6c103135a8099b31769a5d19968c7", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1524b59444109cf71916653d7906e4d41bd4ba6e/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1524b59444109cf71916653d7906e4d41bd4ba6e/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=1524b59444109cf71916653d7906e4d41bd4ba6e", "patch": "@@ -3,7 +3,7 @@ use rustc_errors::{error_code, Applicability, DiagnosticBuilder, ErrorGuaranteed\n use rustc_macros::{LintDiagnostic, SessionDiagnostic, SessionSubdiagnostic};\n use rustc_middle::ty::Ty;\n use rustc_session::SessionDiagnostic;\n-use rustc_span::{symbol::Ident, Span, Symbol};\n+use rustc_span::{symbol::Ident, Span, Symbol, source_map::SourceMap};\n \n #[derive(SessionDiagnostic)]\n #[diag(typeck::field_multiply_specified_in_initializer, code = \"E0062\")]\n@@ -241,15 +241,16 @@ pub struct UnconstrainedOpaqueType {\n     pub name: Symbol,\n }\n \n-pub struct MissingTypeParams {\n+pub struct MissingTypeParams<'a> {\n     pub span: Span,\n     pub def_span: Span,\n     pub missing_type_params: Vec<Symbol>,\n     pub empty_generic_args: bool,\n+    pub source_map: &'a SourceMap,\n }\n \n // Manual implementation of `SessionDiagnostic` to be able to call `span_to_snippet`.\n-impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n+impl<'a> SessionDiagnostic<'a> for MissingTypeParams<'a> {\n     fn into_diagnostic(self, handler: &'a Handler) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n         let mut err = handler.struct_span_err_with_code(\n             self.span,\n@@ -269,8 +270,8 @@ impl<'a> SessionDiagnostic<'a> for MissingTypeParams {\n         err.span_label(self.def_span, rustc_errors::fluent::typeck::label);\n \n         let mut suggested = false;\n-        if let (Some(Ok(snippet)), true) = (\n-            handler.span_to_snippet_from_emitter(self.span),\n+        if let (Ok(snippet), true) = (\n+            self.source_map.span_to_snippet(self.span),\n             // Don't suggest setting the type params if there are some already: the order is\n             // tricky to get right and the user will already know what the syntax is.\n             self.empty_generic_args,"}]}