{"sha": "aff9c833e5a82307b79302c48ce2d245d56c3031", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZjljODMzZTVhODIzMDdiNzkzMDJjNDhjZTJkMjQ1ZDU2YzMwMzE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-06T09:54:50Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-26T04:44:57Z"}, "message": "rustc_mir: remove dead code for downgrading errors.", "tree": {"sha": "979050ca9cbc680c0a7b690df2fb1ea588547f0b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/979050ca9cbc680c0a7b690df2fb1ea588547f0b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aff9c833e5a82307b79302c48ce2d245d56c3031", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aff9c833e5a82307b79302c48ce2d245d56c3031", "html_url": "https://github.com/rust-lang/rust/commit/aff9c833e5a82307b79302c48ce2d245d56c3031", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aff9c833e5a82307b79302c48ce2d245d56c3031/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ece6f833dfe99db87d17c02efeaa8aac88ad302b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ece6f833dfe99db87d17c02efeaa8aac88ad302b", "html_url": "https://github.com/rust-lang/rust/commit/ece6f833dfe99db87d17c02efeaa8aac88ad302b"}], "stats": {"total": 59, "additions": 1, "deletions": 58}, "files": [{"sha": "b828317c57ba89f13489852ac6f621afa18b88c6", "filename": "src/librustc_mir/borrow_check/conflict_errors.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fconflict_errors.rs?ref=aff9c833e5a82307b79302c48ce2d245d56c3031", "patch": "@@ -105,9 +105,6 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 format!(\"{} occurs due to use{}\", desired_action.as_noun(), use_spans.describe()),\n             );\n \n-            // This error should not be downgraded to a warning,\n-            // even in migrate mode.\n-            self.disable_error_downgrading();\n             err.buffer(&mut self.errors_buffer);\n         } else {\n             if let Some((reported_place, _)) = self.move_error_reported.get(&move_out_indices) {"}, {"sha": "1c842eac474f968abb2c7490416fa59c4c948ab1", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 1, "deletions": 55, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff9c833e5a82307b79302c48ce2d245d56c3031/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=aff9c833e5a82307b79302c48ce2d245d56c3031", "patch": "@@ -7,7 +7,6 @@ use rustc::hir::def_id::DefId;\n use rustc::infer::InferCtxt;\n use rustc::lint::builtin::UNUSED_MUT;\n use rustc::lint::builtin::{MUTABLE_BORROW_RESERVATION_CONFLICT};\n-use rustc::middle::borrowck::SignalledError;\n use rustc::mir::{AggregateKind, BasicBlock, BorrowCheckResult, BorrowKind};\n use rustc::mir::{\n     ClearCrossCrate, Local, Location, Body, Mutability, Operand, Place, PlaceBase, PlaceElem,\n@@ -18,7 +17,7 @@ use rustc::mir::{Terminator, TerminatorKind};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, TyCtxt};\n \n-use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder, Level};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticBuilder};\n use rustc_data_structures::bit_set::BitSet;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::graph::dominators::Dominators;\n@@ -259,8 +258,6 @@ fn do_mir_borrowck<'a, 'tcx>(\n         move_error_reported: BTreeMap::new(),\n         uninitialized_error_reported: Default::default(),\n         errors_buffer,\n-        // FIXME(Centril): throw out the migration infrastructure.\n-        disable_error_downgrading: true,\n         nonlexical_regioncx: regioncx,\n         used_mut: Default::default(),\n         used_mut_upvars: SmallVec::new(),\n@@ -372,33 +369,6 @@ fn do_mir_borrowck<'a, 'tcx>(\n     if !mbcx.errors_buffer.is_empty() {\n         mbcx.errors_buffer.sort_by_key(|diag| diag.span.primary_span());\n \n-        if !mbcx.disable_error_downgrading && tcx.migrate_borrowck() {\n-            // When borrowck=migrate, check if AST-borrowck would\n-            // error on the given code.\n-\n-            // rust-lang/rust#55492, rust-lang/rust#58776 check the base def id\n-            // for errors. AST borrowck is responsible for aggregating\n-            // `signalled_any_error` from all of the nested closures here.\n-            let base_def_id = tcx.closure_base_def_id(def_id);\n-\n-            match tcx.borrowck(base_def_id).signalled_any_error {\n-                SignalledError::NoErrorsSeen => {\n-                    // if AST-borrowck signalled no errors, then\n-                    // downgrade all the buffered MIR-borrowck errors\n-                    // to warnings.\n-\n-                    for err in mbcx.errors_buffer.iter_mut() {\n-                        downgrade_if_error(err);\n-                    }\n-                }\n-                SignalledError::SawSomeError => {\n-                    // if AST-borrowck signalled a (cancelled) error,\n-                    // then we will just emit the buffered\n-                    // MIR-borrowck errors as normal.\n-                }\n-            }\n-        }\n-\n         for diag in mbcx.errors_buffer.drain(..) {\n             mbcx.infcx.tcx.sess.diagnostic().emit_diagnostic(&diag);\n         }\n@@ -414,21 +384,6 @@ fn do_mir_borrowck<'a, 'tcx>(\n     result\n }\n \n-fn downgrade_if_error(diag: &mut Diagnostic) {\n-    if diag.is_error() {\n-        diag.level = Level::Warning;\n-        diag.warn(\n-            \"this error has been downgraded to a warning for backwards \\\n-            compatibility with previous releases\",\n-        ).warn(\n-            \"this represents potential undefined behavior in your code and \\\n-            this warning will become a hard error in the future\",\n-        ).note(\n-            \"for more information, try `rustc --explain E0729`\"\n-        );\n-    }\n-}\n-\n crate struct MirBorrowckCtxt<'cx, 'tcx> {\n     crate infcx: &'cx InferCtxt<'cx, 'tcx>,\n     body: &'cx Body<'tcx>,\n@@ -489,9 +444,6 @@ crate struct MirBorrowckCtxt<'cx, 'tcx> {\n     uninitialized_error_reported: FxHashSet<PlaceRef<'cx, 'tcx>>,\n     /// Errors to be reported buffer\n     errors_buffer: Vec<Diagnostic>,\n-    /// If there are no errors reported by the HIR borrow checker, we downgrade\n-    /// all NLL errors to warnings. Setting this flag disables downgrading.\n-    disable_error_downgrading: bool,\n     /// This field keeps track of all the local variables that are declared mut and are mutated.\n     /// Used for the warning issued by an unused mutable local variable.\n     used_mut: FxHashSet<Local>,\n@@ -932,12 +884,6 @@ impl InitializationRequiringAction {\n }\n \n impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n-    /// If there are no errors reported by the HIR borrow checker, we downgrade\n-    /// all NLL errors to warnings. Calling this disables downgrading.\n-    crate fn disable_error_downgrading(&mut self)  {\n-        self.disable_error_downgrading = true;\n-    }\n-\n     /// Checks an access to the given place to see if it is allowed. Examines the set of borrows\n     /// that are in scope, as well as which paths have been initialized, to ensure that (a) the\n     /// place is initialized and (b) it is not borrowed in some way that would prevent this"}]}