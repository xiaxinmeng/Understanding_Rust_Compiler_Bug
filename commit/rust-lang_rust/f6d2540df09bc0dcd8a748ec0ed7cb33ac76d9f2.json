{"sha": "f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZDI1NDBkZjA5YmMwZGNkOGE3NDhlYzBlZDdjYjMzYWM3NmQ5ZjI=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-03T09:13:28Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-07T21:41:08Z"}, "message": "Simplify import edit calculation", "tree": {"sha": "a206df6f66f41a9f4840d3e19204d67a46831513", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a206df6f66f41a9f4840d3e19204d67a46831513"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2", "html_url": "https://github.com/rust-lang/rust/commit/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68a747efe048e8e92eedafaa27b0c0d2f317f04d", "url": "https://api.github.com/repos/rust-lang/rust/commits/68a747efe048e8e92eedafaa27b0c0d2f317f04d", "html_url": "https://github.com/rust-lang/rust/commit/68a747efe048e8e92eedafaa27b0c0d2f317f04d"}], "stats": {"total": 225, "additions": 114, "deletions": 111}, "files": [{"sha": "487c1d0f1427644b7a50f2c4ee9c2a02f20017eb", "filename": "crates/completion/src/config.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Fcompletion%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fconfig.rs?ref=f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2", "patch": "@@ -36,12 +36,10 @@ impl CompletionConfig {\n         self.snippet_cap = if yes { Some(SnippetCap { _private: () }) } else { None }\n     }\n \n-    /// Whether the completions' additional edits are calculated later, during a resolve request or not.\n-    /// See `CompletionResolveCapability` for the details.\n-    pub fn resolve_edits_immediately(&self) -> bool {\n-        !self\n-            .active_resolve_capabilities\n-            .contains(&CompletionResolveCapability::AdditionalTextEdits)\n+    /// Whether the completions' additional edits are calculated when sending an initional completions list\n+    /// or later, in a separate resolve request.\n+    pub fn resolve_additional_edits_lazily(&self) -> bool {\n+        self.active_resolve_capabilities.contains(&CompletionResolveCapability::AdditionalTextEdits)\n     }\n }\n "}, {"sha": "4e56f28f3cc4accf0d38378cd49e1c901ca6df91", "filename": "crates/completion/src/item.rs", "status": "modified", "additions": 37, "deletions": 26, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Fcompletion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Fcompletion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fitem.rs?ref=f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2", "patch": "@@ -68,7 +68,7 @@ pub struct CompletionItem {\n     ref_match: Option<(Mutability, CompletionScore)>,\n \n     /// The import data to add to completion's edits.\n-    import_to_add: Option<ImportToAdd>,\n+    import_to_add: Option<ImportEdit>,\n }\n \n // We use custom debug for CompletionItem to make snapshot tests more readable.\n@@ -209,7 +209,7 @@ impl CompletionItem {\n             score: None,\n             ref_match: None,\n             import_to_add: None,\n-            resolve_import_immediately: true,\n+            resolve_import_lazily: false,\n         }\n     }\n \n@@ -262,27 +262,46 @@ impl CompletionItem {\n         self.ref_match\n     }\n \n-    pub fn import_to_add(&self) -> Option<&ImportToAdd> {\n+    pub fn import_to_add(&self) -> Option<&ImportEdit> {\n         self.import_to_add.as_ref()\n     }\n }\n \n /// An extra import to add after the completion is applied.\n #[derive(Debug, Clone)]\n-pub struct ImportToAdd {\n+pub struct ImportEdit {\n     pub import_path: ModPath,\n     pub import_scope: ImportScope,\n     pub merge_behaviour: Option<MergeBehaviour>,\n }\n \n+impl ImportEdit {\n+    /// Attempts to insert the import to the given scope, producing a text edit.\n+    /// May return no edit in edge cases, such as scope already containing the import.\n+    pub fn to_text_edit(&self) -> Option<TextEdit> {\n+        let _p = profile::span(\"ImportEdit::to_edit\");\n+\n+        let rewriter = insert_use::insert_use(\n+            &self.import_scope,\n+            mod_path_to_ast(&self.import_path),\n+            self.merge_behaviour,\n+        );\n+        let old_ast = rewriter.rewrite_root()?;\n+        let mut import_insert = TextEdit::builder();\n+        algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut import_insert);\n+\n+        Some(import_insert.finish())\n+    }\n+}\n+\n /// A helper to make `CompletionItem`s.\n #[must_use]\n #[derive(Clone)]\n pub(crate) struct Builder {\n     source_range: TextRange,\n     completion_kind: CompletionKind,\n-    import_to_add: Option<ImportToAdd>,\n-    resolve_import_immediately: bool,\n+    import_to_add: Option<ImportEdit>,\n+    resolve_import_lazily: bool,\n     label: String,\n     insert_text: Option<String>,\n     insert_text_format: InsertTextFormat,\n@@ -304,7 +323,6 @@ impl Builder {\n         let mut label = self.label;\n         let mut lookup = self.lookup;\n         let mut insert_text = self.insert_text;\n-        let mut text_edits = TextEdit::builder();\n \n         if let Some(import_to_add) = self.import_to_add.as_ref() {\n             let mut import_path_without_last_segment = import_to_add.import_path.to_owned();\n@@ -319,35 +337,28 @@ impl Builder {\n                 }\n                 label = format!(\"{}::{}\", import_path_without_last_segment, label);\n             }\n-\n-            if self.resolve_import_immediately {\n-                let rewriter = insert_use::insert_use(\n-                    &import_to_add.import_scope,\n-                    mod_path_to_ast(&import_to_add.import_path),\n-                    import_to_add.merge_behaviour,\n-                );\n-                if let Some(old_ast) = rewriter.rewrite_root() {\n-                    algo::diff(&old_ast, &rewriter.rewrite(&old_ast))\n-                        .into_text_edit(&mut text_edits);\n-                }\n-            }\n         }\n \n-        let original_edit = match self.text_edit {\n+        let mut text_edit = match self.text_edit {\n             Some(it) => it,\n             None => {\n                 TextEdit::replace(self.source_range, insert_text.unwrap_or_else(|| label.clone()))\n             }\n         };\n \n-        let mut resulting_edit = text_edits.finish();\n-        resulting_edit.union(original_edit).expect(\"Failed to unite text edits\");\n+        if !self.resolve_import_lazily {\n+            if let Some(import_edit) =\n+                self.import_to_add.as_ref().and_then(|import_edit| import_edit.to_text_edit())\n+            {\n+                text_edit.union(import_edit).expect(\"Failed to unite import and completion edits\");\n+            }\n+        }\n \n         CompletionItem {\n             source_range: self.source_range,\n             label,\n             insert_text_format: self.insert_text_format,\n-            text_edit: resulting_edit,\n+            text_edit,\n             detail: self.detail,\n             documentation: self.documentation,\n             lookup,\n@@ -422,11 +433,11 @@ impl Builder {\n     }\n     pub(crate) fn add_import(\n         mut self,\n-        import_to_add: Option<ImportToAdd>,\n-        resolve_import_immediately: bool,\n+        import_to_add: Option<ImportEdit>,\n+        resolve_import_lazily: bool,\n     ) -> Builder {\n         self.import_to_add = import_to_add;\n-        self.resolve_import_immediately = resolve_import_immediately;\n+        self.resolve_import_lazily = resolve_import_lazily;\n         self\n     }\n     pub(crate) fn set_ref_match("}, {"sha": "c57203c808bbb75fcd5708047967e93368461e1c", "filename": "crates/completion/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Fcompletion%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Fcompletion%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Flib.rs?ref=f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2", "patch": "@@ -18,7 +18,7 @@ use crate::{completions::Completions, context::CompletionContext, item::Completi\n \n pub use crate::{\n     config::{CompletionConfig, CompletionResolveCapability},\n-    item::{CompletionItem, CompletionItemKind, CompletionScore, ImportToAdd, InsertTextFormat},\n+    item::{CompletionItem, CompletionItemKind, CompletionScore, ImportEdit, InsertTextFormat},\n };\n \n //FIXME: split the following feature into fine-grained features."}, {"sha": "a6faedb182bdccdc6835461010e59be51f0a48a6", "filename": "crates/completion/src/render.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Fcompletion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Fcompletion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender.rs?ref=f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2", "patch": "@@ -16,7 +16,7 @@ use syntax::TextRange;\n use test_utils::mark;\n \n use crate::{\n-    config::SnippetCap, item::ImportToAdd, CompletionContext, CompletionItem, CompletionItemKind,\n+    config::SnippetCap, item::ImportEdit, CompletionContext, CompletionItem, CompletionItemKind,\n     CompletionKind, CompletionScore,\n };\n \n@@ -56,7 +56,7 @@ pub(crate) fn render_resolution_with_import<'a>(\n     let local_name = import_path.segments.last()?.to_string();\n     Render::new(ctx).render_resolution(\n         local_name,\n-        Some(ImportToAdd { import_path, import_scope, merge_behaviour }),\n+        Some(ImportEdit { import_path, import_scope, merge_behaviour }),\n         resolution,\n     )\n }\n@@ -147,7 +147,7 @@ impl<'a> Render<'a> {\n     fn render_resolution(\n         self,\n         local_name: String,\n-        import_to_add: Option<ImportToAdd>,\n+        import_to_add: Option<ImportEdit>,\n         resolution: &ScopeDef,\n     ) -> Option<CompletionItem> {\n         let _p = profile::span(\"render_resolution\");\n@@ -194,7 +194,10 @@ impl<'a> Render<'a> {\n                     local_name,\n                 )\n                 .kind(CompletionItemKind::UnresolvedReference)\n-                .add_import(import_to_add, self.ctx.completion.config.resolve_edits_immediately())\n+                .add_import(\n+                    import_to_add,\n+                    self.ctx.completion.config.resolve_additional_edits_lazily(),\n+                )\n                 .build();\n                 return Some(item);\n             }\n@@ -249,7 +252,7 @@ impl<'a> Render<'a> {\n \n         let item = item\n             .kind(kind)\n-            .add_import(import_to_add, self.ctx.completion.config.resolve_edits_immediately())\n+            .add_import(import_to_add, self.ctx.completion.config.resolve_additional_edits_lazily())\n             .set_documentation(docs)\n             .set_ref_match(ref_match)\n             .build();"}, {"sha": "e979a090b565164cfd2fa9f04992c622761581a8", "filename": "crates/completion/src/render/enum_variant.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fenum_variant.rs?ref=f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2", "patch": "@@ -5,13 +5,13 @@ use itertools::Itertools;\n use test_utils::mark;\n \n use crate::{\n-    item::{CompletionItem, CompletionItemKind, CompletionKind, ImportToAdd},\n+    item::{CompletionItem, CompletionItemKind, CompletionKind, ImportEdit},\n     render::{builder_ext::Params, RenderContext},\n };\n \n pub(crate) fn render_enum_variant<'a>(\n     ctx: RenderContext<'a>,\n-    import_to_add: Option<ImportToAdd>,\n+    import_to_add: Option<ImportEdit>,\n     local_name: Option<String>,\n     variant: hir::EnumVariant,\n     path: Option<ModPath>,\n@@ -62,7 +62,7 @@ impl<'a> EnumVariantRender<'a> {\n         }\n     }\n \n-    fn render(self, import_to_add: Option<ImportToAdd>) -> CompletionItem {\n+    fn render(self, import_to_add: Option<ImportEdit>) -> CompletionItem {\n         let mut builder = CompletionItem::new(\n             CompletionKind::Reference,\n             self.ctx.source_range(),\n@@ -71,7 +71,7 @@ impl<'a> EnumVariantRender<'a> {\n         .kind(CompletionItemKind::EnumVariant)\n         .set_documentation(self.variant.docs(self.ctx.db()))\n         .set_deprecated(self.ctx.is_deprecated(self.variant))\n-        .add_import(import_to_add, self.ctx.completion.config.resolve_edits_immediately())\n+        .add_import(import_to_add, self.ctx.completion.config.resolve_additional_edits_lazily())\n         .detail(self.detail());\n \n         if self.variant_kind == StructKind::Tuple {"}, {"sha": "dd2c999efbc804274398717d8c3c5185cbfdb29d", "filename": "crates/completion/src/render/function.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Ffunction.rs?ref=f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2", "patch": "@@ -5,13 +5,13 @@ use syntax::{ast::Fn, display::function_declaration};\n use test_utils::mark;\n \n use crate::{\n-    item::{CompletionItem, CompletionItemKind, CompletionKind, ImportToAdd},\n+    item::{CompletionItem, CompletionItemKind, CompletionKind, ImportEdit},\n     render::{builder_ext::Params, RenderContext},\n };\n \n pub(crate) fn render_fn<'a>(\n     ctx: RenderContext<'a>,\n-    import_to_add: Option<ImportToAdd>,\n+    import_to_add: Option<ImportEdit>,\n     local_name: Option<String>,\n     fn_: hir::Function,\n ) -> CompletionItem {\n@@ -39,15 +39,15 @@ impl<'a> FunctionRender<'a> {\n         FunctionRender { ctx, name, func: fn_, ast_node }\n     }\n \n-    fn render(self, import_to_add: Option<ImportToAdd>) -> CompletionItem {\n+    fn render(self, import_to_add: Option<ImportEdit>) -> CompletionItem {\n         let params = self.params();\n         CompletionItem::new(CompletionKind::Reference, self.ctx.source_range(), self.name.clone())\n             .kind(self.kind())\n             .set_documentation(self.ctx.docs(self.func))\n             .set_deprecated(self.ctx.is_deprecated(self.func))\n             .detail(self.detail())\n             .add_call_parens(self.ctx.completion, self.name, params)\n-            .add_import(import_to_add, self.ctx.completion.config.resolve_edits_immediately())\n+            .add_import(import_to_add, self.ctx.completion.config.resolve_additional_edits_lazily())\n             .build()\n     }\n "}, {"sha": "bdbc642ca0240eff52b038ecdbe17e9d2eacb12a", "filename": "crates/completion/src/render/macro_.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Frender%2Fmacro_.rs?ref=f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2", "patch": "@@ -5,13 +5,13 @@ use syntax::display::macro_label;\n use test_utils::mark;\n \n use crate::{\n-    item::{CompletionItem, CompletionItemKind, CompletionKind, ImportToAdd},\n+    item::{CompletionItem, CompletionItemKind, CompletionKind, ImportEdit},\n     render::RenderContext,\n };\n \n pub(crate) fn render_macro<'a>(\n     ctx: RenderContext<'a>,\n-    import_to_add: Option<ImportToAdd>,\n+    import_to_add: Option<ImportEdit>,\n     name: String,\n     macro_: hir::MacroDef,\n ) -> Option<CompletionItem> {\n@@ -38,7 +38,7 @@ impl<'a> MacroRender<'a> {\n         MacroRender { ctx, name, macro_, docs, bra, ket }\n     }\n \n-    fn render(&self, import_to_add: Option<ImportToAdd>) -> Option<CompletionItem> {\n+    fn render(&self, import_to_add: Option<ImportEdit>) -> Option<CompletionItem> {\n         // FIXME: Currently proc-macro do not have ast-node,\n         // such that it does not have source\n         if self.macro_.is_proc_macro() {\n@@ -50,7 +50,10 @@ impl<'a> MacroRender<'a> {\n                 .kind(CompletionItemKind::Macro)\n                 .set_documentation(self.docs.clone())\n                 .set_deprecated(self.ctx.is_deprecated(self.macro_))\n-                .add_import(import_to_add, self.ctx.completion.config.resolve_edits_immediately())\n+                .add_import(\n+                    import_to_add,\n+                    self.ctx.completion.config.resolve_additional_edits_lazily(),\n+                )\n                 .detail(self.detail());\n \n         let needs_bang = self.needs_bang();"}, {"sha": "9e38d650634e44f8e47f95aa5f0417c95dd59b68", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2", "patch": "@@ -81,7 +81,7 @@ pub use crate::{\n };\n pub use completion::{\n     CompletionConfig, CompletionItem, CompletionItemKind, CompletionResolveCapability,\n-    CompletionScore, ImportToAdd, InsertTextFormat,\n+    CompletionScore, ImportEdit, InsertTextFormat,\n };\n pub use ide_db::{\n     call_info::CallInfo,"}, {"sha": "1e0ee10e409fd17ddfdde4a1964e19902dc29ead", "filename": "crates/rust-analyzer/src/caps.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcaps.rs?ref=f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2", "patch": "@@ -104,7 +104,7 @@ fn completions_resolve_provider(client_caps: &ClientCapabilities) -> Option<bool\n }\n \n /// Parses client capabilities and returns all completion resolve capabilities rust-analyzer supports.\n-pub fn enabled_completions_resolve_capabilities(\n+pub(crate) fn enabled_completions_resolve_capabilities(\n     caps: &ClientCapabilities,\n ) -> Option<FxHashSet<CompletionResolveCapability>> {\n     Some(\n@@ -118,13 +118,11 @@ pub fn enabled_completions_resolve_capabilities(\n             .as_ref()?\n             .properties\n             .iter()\n-            .filter_map(|cap_string| {\n-                Some(match cap_string.as_str() {\n-                    \"additionalTextEdits\" => CompletionResolveCapability::AdditionalTextEdits,\n-                    \"detail\" => CompletionResolveCapability::Detail,\n-                    \"documentation\" => CompletionResolveCapability::Documentation,\n-                    _unsupported => return None,\n-                })\n+            .filter_map(|cap_string| match cap_string.as_str() {\n+                \"additionalTextEdits\" => Some(CompletionResolveCapability::AdditionalTextEdits),\n+                \"detail\" => Some(CompletionResolveCapability::Detail),\n+                \"documentation\" => Some(CompletionResolveCapability::Documentation),\n+                _unsupported => None,\n             })\n             .collect(),\n     )"}, {"sha": "a35abe86d9d99140a5d0dfe5d1f170c9735d84e6", "filename": "crates/rust-analyzer/src/global_state.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fglobal_state.rs?ref=f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2", "patch": "@@ -7,7 +7,7 @@ use std::{sync::Arc, time::Instant};\n \n use crossbeam_channel::{unbounded, Receiver, Sender};\n use flycheck::FlycheckHandle;\n-use ide::{Analysis, AnalysisHost, Change, CompletionItem, FileId};\n+use ide::{Analysis, AnalysisHost, Change, FileId, ImportEdit};\n use ide_db::base_db::{CrateId, VfsPath};\n use lsp_types::{SemanticTokens, Url};\n use parking_lot::{Mutex, RwLock};\n@@ -53,7 +53,7 @@ pub(crate) type ReqQueue = lsp_server::ReqQueue<(String, Instant), ReqHandler>;\n \n pub(crate) struct CompletionResolveData {\n     pub(crate) file_id: FileId,\n-    pub(crate) item: CompletionItem,\n+    pub(crate) import_edit: ImportEdit,\n }\n \n /// `GlobalState` is the primary mutable state of the language server"}, {"sha": "3eb5f26bc0914d33f7a3380b5e3d1ad487911b0b", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 39, "deletions": 49, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2", "patch": "@@ -8,10 +8,9 @@ use std::{\n };\n \n use ide::{\n-    FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, ImportToAdd, LineIndex,\n+    FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, ImportEdit, LineIndex,\n     NavigationTarget, Query, RangeInfo, Runnable, RunnableKind, SearchScope, TextEdit,\n };\n-use ide_db::helpers::{insert_use, mod_path_to_ast};\n use itertools::Itertools;\n use lsp_server::ErrorCode;\n use lsp_types::{\n@@ -581,13 +580,21 @@ pub(crate) fn handle_completion(\n             let mut new_completion_items =\n                 to_proto::completion_item(&line_index, line_endings, item.clone());\n \n-            if !snap.config.completion.active_resolve_capabilities.is_empty() {\n-                let item_id = serde_json::to_value(&item_index)\n-                    .expect(&format!(\"Should be able to serialize usize value {}\", item_index));\n-                completion_resolve_data\n-                    .insert(item_index, CompletionResolveData { file_id: position.file_id, item });\n-                for new_item in &mut new_completion_items {\n-                    new_item.data = Some(item_id.clone());\n+            if snap.config.completion.resolve_additional_edits_lazily() {\n+                if let Some(import_edit) = item.import_to_add() {\n+                    completion_resolve_data.insert(\n+                        item_index,\n+                        CompletionResolveData {\n+                            file_id: position.file_id,\n+                            import_edit: import_edit.clone(),\n+                        },\n+                    );\n+\n+                    let item_id = serde_json::to_value(&item_index)\n+                        .expect(&format!(\"Should be able to serialize usize value {}\", item_index));\n+                    for new_item in &mut new_completion_items {\n+                        new_item.data = Some(item_id.clone());\n+                    }\n                 }\n             }\n \n@@ -601,12 +608,17 @@ pub(crate) fn handle_completion(\n     Ok(Some(completion_list.into()))\n }\n \n-pub(crate) fn handle_resolve_completion(\n+pub(crate) fn handle_completion_resolve(\n     global_state: &mut GlobalState,\n     mut original_completion: lsp_types::CompletionItem,\n ) -> Result<lsp_types::CompletionItem> {\n     let _p = profile::span(\"handle_resolve_completion\");\n \n+    let active_resolve_caps = &global_state.config.completion.active_resolve_capabilities;\n+    if active_resolve_caps.is_empty() {\n+        return Ok(original_completion);\n+    }\n+\n     let server_completion_data = match original_completion\n         .data\n         .as_ref()\n@@ -620,18 +632,16 @@ pub(crate) fn handle_resolve_completion(\n     };\n \n     let snap = &global_state.snapshot();\n-    for supported_completion_resolve_cap in &snap.config.completion.active_resolve_capabilities {\n+    for supported_completion_resolve_cap in active_resolve_caps {\n         match supported_completion_resolve_cap {\n+            // FIXME actually add all additional edits here? see `to_proto::completion_item` for more\n             ide::CompletionResolveCapability::AdditionalTextEdits => {\n-                // FIXME actually add all additional edits here?\n-                if let Some(import_to_add) = server_completion_data.item.import_to_add() {\n-                    append_import_edits(\n-                        &mut original_completion,\n-                        import_to_add,\n-                        snap.analysis.file_line_index(server_completion_data.file_id)?.as_ref(),\n-                        snap.file_line_endings(server_completion_data.file_id),\n-                    );\n-                }\n+                append_import_edits(\n+                    &mut original_completion,\n+                    &server_completion_data.import_edit,\n+                    snap.analysis.file_line_index(server_completion_data.file_id)?.as_ref(),\n+                    snap.file_line_endings(server_completion_data.file_id),\n+                );\n             }\n             // FIXME resolve the other capabilities also?\n             _ => {}\n@@ -1601,41 +1611,21 @@ fn should_skip_target(runnable: &Runnable, cargo_spec: Option<&CargoTargetSpec>)\n \n fn append_import_edits(\n     completion: &mut lsp_types::CompletionItem,\n-    import_to_add: &ImportToAdd,\n+    import_to_add: &ImportEdit,\n     line_index: &LineIndex,\n     line_endings: LineEndings,\n ) {\n-    let new_edits = import_into_edits(import_to_add, line_index, line_endings);\n+    let import_edits = import_to_add.to_text_edit().map(|import_edit| {\n+        import_edit\n+            .into_iter()\n+            .map(|indel| to_proto::text_edit(line_index, line_endings, indel))\n+            .collect_vec()\n+    });\n     if let Some(original_additional_edits) = completion.additional_text_edits.as_mut() {\n-        if let Some(mut new_edits) = new_edits {\n+        if let Some(mut new_edits) = import_edits {\n             original_additional_edits.extend(new_edits.drain(..))\n         }\n     } else {\n-        completion.additional_text_edits = new_edits;\n+        completion.additional_text_edits = import_edits;\n     }\n }\n-\n-fn import_into_edits(\n-    import_to_add: &ImportToAdd,\n-    line_index: &LineIndex,\n-    line_endings: LineEndings,\n-) -> Option<Vec<lsp_types::TextEdit>> {\n-    let _p = profile::span(\"add_import_edits\");\n-\n-    let rewriter = insert_use::insert_use(\n-        &import_to_add.import_scope,\n-        mod_path_to_ast(&import_to_add.import_path),\n-        import_to_add.merge_behaviour,\n-    );\n-    let old_ast = rewriter.rewrite_root()?;\n-    let mut import_insert = TextEdit::builder();\n-    algo::diff(&old_ast, &rewriter.rewrite(&old_ast)).into_text_edit(&mut import_insert);\n-    let import_edit = import_insert.finish();\n-\n-    Some(\n-        import_edit\n-            .into_iter()\n-            .map(|indel| to_proto::text_edit(line_index, line_endings, indel))\n-            .collect_vec(),\n-    )\n-}"}, {"sha": "db30b3dce8cd2fc6b0577cf60a06171c4e694fa3", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=f6d2540df09bc0dcd8a748ec0ed7cb33ac76d9f2", "patch": "@@ -438,7 +438,7 @@ impl GlobalState {\n             .on_sync::<lsp_ext::MemoryUsage>(|s, p| handlers::handle_memory_usage(s, p))?\n             .on_sync::<lsp_types::request::Completion>(handlers::handle_completion)?\n             .on_sync::<lsp_types::request::ResolveCompletionItem>(\n-                handlers::handle_resolve_completion,\n+                handlers::handle_completion_resolve,\n             )?\n             .on::<lsp_ext::AnalyzerStatus>(handlers::handle_analyzer_status)\n             .on::<lsp_ext::SyntaxTree>(handlers::handle_syntax_tree)"}]}