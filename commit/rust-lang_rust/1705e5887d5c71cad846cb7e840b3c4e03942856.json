{"sha": "1705e5887d5c71cad846cb7e840b3c4e03942856", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3MDVlNTg4N2Q1YzcxY2FkODQ2Y2I3ZTg0MGIzYzRlMDM5NDI4NTY=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-22T15:09:22Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-22T15:09:22Z"}, "message": "Merge #1195\n\n1195: Add cached for SubtreeSource r=matklad a=edwin0cheng\n\nI just did some simple profiling, the most slowest part of the mbe related code is the tree traversal, so i add a very simple cache in here is the result:\r\n\r\n``` target\\release\\ra_cli analysis-stats```\r\n\r\n*Before\r\n```\r\nDatabase loaded, 21 roots, 1.2731481s\r\nCrates in this dir: 26\r\nTotal modules found: 282\r\nTotal declarations: 4783\r\nTotal functions: 3126\r\nTotal expressions: 59452\r\nExpressions of unknown type: 8999 (15%)\r\nExpressions of partially unknown type: 2672 (4%)\r\nAnalysis: 17.9596334s\r\n```\r\n\r\n```\r\n*After\r\nDatabase loaded, 21 roots, 1.7425901s\r\nCrates in this dir: 26\r\nTotal modules found: 282\r\nTotal declarations: 4783\r\nTotal functions: 3126\r\nTotal expressions: 59452\r\nExpressions of unknown type: 8999 (15%)\r\nExpressions of partially unknown type: 2672 (4%)\r\nAnalysis: 13.4007118s\r\n```\r\n\r\nSave 4 seconds :)\r\n\n\nCo-authored-by: Edwin Cheng <edwin0cheng@gmail.com>", "tree": {"sha": "d1082112c172b8a7d20e72d02e9de8f60cfa5bc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1082112c172b8a7d20e72d02e9de8f60cfa5bc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1705e5887d5c71cad846cb7e840b3c4e03942856", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1705e5887d5c71cad846cb7e840b3c4e03942856", "html_url": "https://github.com/rust-lang/rust/commit/1705e5887d5c71cad846cb7e840b3c4e03942856", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1705e5887d5c71cad846cb7e840b3c4e03942856/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "c416caeda2a09e84dc9cd201eff0bf04b701ae34", "url": "https://api.github.com/repos/rust-lang/rust/commits/c416caeda2a09e84dc9cd201eff0bf04b701ae34", "html_url": "https://github.com/rust-lang/rust/commit/c416caeda2a09e84dc9cd201eff0bf04b701ae34"}, {"sha": "fccd0452299c8261e0298688d29e934b0fef1605", "url": "https://api.github.com/repos/rust-lang/rust/commits/fccd0452299c8261e0298688d29e934b0fef1605", "html_url": "https://github.com/rust-lang/rust/commit/fccd0452299c8261e0298688d29e934b0fef1605"}], "stats": {"total": 24, "additions": 20, "deletions": 4}, "files": [{"sha": "3229cfa8fa090fa4c7d4088ad277c24b58db8dcb", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 20, "deletions": 4, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/1705e5887d5c71cad846cb7e840b3c4e03942856/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1705e5887d5c71cad846cb7e840b3c4e03942856/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=1705e5887d5c71cad846cb7e840b3c4e03942856", "patch": "@@ -219,17 +219,33 @@ pub(crate) trait Querier {\n #[derive(Debug)]\n pub(crate) struct WalkerOwner<'a> {\n     walker: RefCell<SubTreeWalker<'a>>,\n+    cached: RefCell<Vec<Option<TtToken>>>,\n }\n \n impl<'a> WalkerOwner<'a> {\n     fn new<I: Into<TokenSeq<'a>>>(ts: I) -> Self {\n-        WalkerOwner { walker: RefCell::new(SubTreeWalker::new(ts.into())) }\n+        WalkerOwner {\n+            walker: RefCell::new(SubTreeWalker::new(ts.into())),\n+            cached: RefCell::new(Vec::with_capacity(10)),\n+        }\n     }\n \n     fn get<'b>(&self, pos: usize) -> Option<TtToken> {\n-        self.set_pos(pos);\n-        let walker = self.walker.borrow();\n-        walker.current().cloned()\n+        let mut cached = self.cached.borrow_mut();\n+        if pos < cached.len() {\n+            return cached[pos].clone();\n+        }\n+\n+        while pos >= cached.len() {\n+            let len = cached.len();\n+            cached.push({\n+                self.set_pos(len);\n+                let walker = self.walker.borrow();\n+                walker.current().cloned()\n+            });\n+        }\n+\n+        return cached[pos].clone();\n     }\n \n     fn set_pos(&self, pos: usize) {"}]}