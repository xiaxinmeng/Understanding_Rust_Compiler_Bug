{"sha": "6d99dd91895f9dafbaa08d1ada7782d884089503", "node_id": "C_kwDOAAsO6NoAKDZkOTlkZDkxODk1ZjlkYWZiYWEwOGQxYWRhNzc4MmQ4ODQwODk1MDM", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-03-26T10:24:44Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2023-04-06T06:25:53Z"}, "message": "Address comments", "tree": {"sha": "83c9e369b3589a4b45da6bafb64390b524536db8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/83c9e369b3589a4b45da6bafb64390b524536db8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d99dd91895f9dafbaa08d1ada7782d884089503", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d99dd91895f9dafbaa08d1ada7782d884089503", "html_url": "https://github.com/rust-lang/rust/commit/6d99dd91895f9dafbaa08d1ada7782d884089503", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d99dd91895f9dafbaa08d1ada7782d884089503/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "453e919c3748c2e057d4e2c3fc3b881ac84668c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/453e919c3748c2e057d4e2c3fc3b881ac84668c9", "html_url": "https://github.com/rust-lang/rust/commit/453e919c3748c2e057d4e2c3fc3b881ac84668c9"}], "stats": {"total": 44, "additions": 19, "deletions": 25}, "files": [{"sha": "86532f4f264f92edb07708f5fc27f8d3a54d60f7", "filename": "compiler/rustc_middle/src/query/erase.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d99dd91895f9dafbaa08d1ada7782d884089503/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d99dd91895f9dafbaa08d1ada7782d884089503/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Ferase.rs?ref=6d99dd91895f9dafbaa08d1ada7782d884089503", "patch": "@@ -3,6 +3,8 @@ use std::mem::{size_of, transmute_copy, MaybeUninit};\n \n #[derive(Copy, Clone)]\n pub struct Erased<T: Copy> {\n+    // We use `MaybeUninit` here so we can store any value\n+    // in `data` since we aren't actually storing a `T`.\n     data: MaybeUninit<T>,\n }\n \n@@ -12,7 +14,7 @@ pub trait EraseType: Copy {\n \n // Allow `type_alias_bounds` since compilation will fail without `EraseType`.\n #[allow(type_alias_bounds)]\n-pub type Erase<T: Copy + EraseType> = Erased<impl Copy>;\n+pub type Erase<T: EraseType> = Erased<impl Copy>;\n \n #[inline(always)]\n pub fn erase<T: EraseType>(src: T) -> Erase<T> {"}, {"sha": "7001a1eed57e711fdb3ceb7032d661391dbd1fda", "filename": "compiler/rustc_query_impl/src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6d99dd91895f9dafbaa08d1ada7782d884089503/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d99dd91895f9dafbaa08d1ada7782d884089503/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Flib.rs?ref=6d99dd91895f9dafbaa08d1ada7782d884089503", "patch": "@@ -45,12 +45,11 @@ pub use on_disk_cache::OnDiskCache;\n mod profiling_support;\n pub use self::profiling_support::alloc_self_profile_query_strings;\n \n-trait QueryToConfig<'tcx>: 'tcx {\n-    type Value;\n-    type Config: QueryConfig<QueryCtxt<'tcx>>;\n+/// This is implemented per query and restoring query values from their erased state.\n+trait QueryConfigRestored<'tcx>: QueryConfig<QueryCtxt<'tcx>> + Default {\n+    type RestoredValue;\n \n-    fn config(qcx: QueryCtxt<'tcx>) -> Self::Config;\n-    fn restore(value: <Self::Config as QueryConfig<QueryCtxt<'tcx>>>::Value) -> Self::Value;\n+    fn restore(value: <Self as QueryConfig<QueryCtxt<'tcx>>>::Value) -> Self::RestoredValue;\n }\n \n rustc_query_append! { define_queries! }"}, {"sha": "eec9dac7b9b0c6ee73119bac785f1d09b843651e", "filename": "compiler/rustc_query_impl/src/on_disk_cache.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6d99dd91895f9dafbaa08d1ada7782d884089503/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d99dd91895f9dafbaa08d1ada7782d884089503/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fon_disk_cache.rs?ref=6d99dd91895f9dafbaa08d1ada7782d884089503", "patch": "@@ -13,7 +13,6 @@ use rustc_middle::mir::{self, interpret};\n use rustc_middle::ty::codec::{RefDecodable, TyDecoder, TyEncoder};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_query_system::dep_graph::DepContext;\n-use rustc_query_system::query::QueryConfig;\n use rustc_query_system::query::{QueryCache, QuerySideEffects};\n use rustc_serialize::{\n     opaque::{FileEncodeResult, FileEncoder, IntEncodedWithFixedSize, MemDecoder},\n@@ -1066,13 +1065,13 @@ impl<'a, 'tcx> Encodable<CacheEncoder<'a, 'tcx>> for [u8] {\n }\n \n pub(crate) fn encode_query_results<'a, 'tcx, Q>(\n-    query: Q::Config,\n+    query: Q,\n     qcx: QueryCtxt<'tcx>,\n     encoder: &mut CacheEncoder<'a, 'tcx>,\n     query_result_index: &mut EncodedDepNodeIndex,\n ) where\n-    Q: super::QueryToConfig<'tcx>,\n-    Q::Value: Encodable<CacheEncoder<'a, 'tcx>>,\n+    Q: super::QueryConfigRestored<'tcx>,\n+    Q::RestoredValue: Encodable<CacheEncoder<'a, 'tcx>>,\n {\n     let _timer = qcx\n         .tcx"}, {"sha": "afbead7d1ae97cb486f3611fbdf4df7b47e43080", "filename": "compiler/rustc_query_impl/src/plumbing.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6d99dd91895f9dafbaa08d1ada7782d884089503/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d99dd91895f9dafbaa08d1ada7782d884089503/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_impl%2Fsrc%2Fplumbing.rs?ref=6d99dd91895f9dafbaa08d1ada7782d884089503", "patch": "@@ -564,7 +564,7 @@ macro_rules! define_queries {\n             }\n \n             #[inline]\n-            fn from_cycle_error(\n+            fn value_from_cycle_error(\n                 self,\n                 tcx: TyCtxt<'tcx>,\n                 cycle: &[QueryInfo<DepKind>],\n@@ -609,17 +609,11 @@ macro_rules! define_queries {\n             }\n         })*\n \n-        $(impl<'tcx> QueryToConfig<'tcx> for queries::$name<'tcx> {\n-            type Value = query_values::$name<'tcx>;\n-            type Config = Self;\n+        $(impl<'tcx> QueryConfigRestored<'tcx> for queries::$name<'tcx> {\n+            type RestoredValue = query_values::$name<'tcx>;\n \n             #[inline(always)]\n-            fn config(_qcx: QueryCtxt<'tcx>) -> Self::Config {\n-                Self::default()\n-            }\n-\n-            #[inline(always)]\n-            fn restore(value: <Self::Config as QueryConfig<QueryCtxt<'tcx>>>::Value) -> Self::Value {\n+            fn restore(value: <Self as QueryConfig<QueryCtxt<'tcx>>>::Value) -> Self::RestoredValue {\n                 restore::<query_values::$name<'tcx>>(value)\n             }\n         })*\n@@ -695,7 +689,6 @@ macro_rules! define_queries {\n             use $crate::profiling_support::QueryKeyStringCache;\n             use rustc_query_system::query::QueryMap;\n             use rustc_middle::dep_graph::DepKind;\n-            use crate::QueryToConfig;\n \n             pub(super) const fn dummy_query_struct<'tcx>() -> QueryStruct<'tcx> {\n                 fn noop_try_collect_active_jobs(_: QueryCtxt<'_>, _: &mut QueryMap<DepKind>) -> Option<()> {\n@@ -740,7 +733,7 @@ macro_rules! define_queries {\n                 },\n                 encode_query_results: expand_if_cached!([$($modifiers)*], |qcx, encoder, query_result_index|\n                     $crate::on_disk_cache::encode_query_results::<super::queries::$name<'tcx>>(\n-                        super::queries::$name::config(qcx),\n+                        super::queries::$name::default(),\n                         qcx,\n                         encoder,\n                         query_result_index,"}, {"sha": "c8d779385108f04dad64cf91e2fe5713f590fc5d", "filename": "compiler/rustc_query_system/src/query/config.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6d99dd91895f9dafbaa08d1ada7782d884089503/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d99dd91895f9dafbaa08d1ada7782d884089503/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fconfig.rs?ref=6d99dd91895f9dafbaa08d1ada7782d884089503", "patch": "@@ -47,7 +47,8 @@ pub trait QueryConfig<Qcx: QueryContext>: Copy {\n \n     fn loadable_from_disk(self, qcx: Qcx, key: &Self::Key, idx: SerializedDepNodeIndex) -> bool;\n \n-    fn from_cycle_error(\n+    /// Synthesize an error value to let compilation continue after a cycle.\n+    fn value_from_cycle_error(\n         self,\n         tcx: Qcx::DepContext,\n         cycle: &[QueryInfo<Qcx::DepKind>],"}, {"sha": "20310483d7e86b2fb2262b2d9b39cabda9aa1471", "filename": "compiler/rustc_query_system/src/query/plumbing.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6d99dd91895f9dafbaa08d1ada7782d884089503/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d99dd91895f9dafbaa08d1ada7782d884089503/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fquery%2Fplumbing.rs?ref=6d99dd91895f9dafbaa08d1ada7782d884089503", "patch": "@@ -148,7 +148,7 @@ where\n     match handler {\n         Error => {\n             error.emit();\n-            query.from_cycle_error(*qcx.dep_context(), &cycle_error.cycle)\n+            query.value_from_cycle_error(*qcx.dep_context(), &cycle_error.cycle)\n         }\n         Fatal => {\n             error.emit();\n@@ -157,7 +157,7 @@ where\n         }\n         DelayBug => {\n             error.delay_as_bug();\n-            query.from_cycle_error(*qcx.dep_context(), &cycle_error.cycle)\n+            query.value_from_cycle_error(*qcx.dep_context(), &cycle_error.cycle)\n         }\n     }\n }"}]}