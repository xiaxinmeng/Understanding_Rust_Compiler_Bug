{"sha": "7826651335b81f4630aa4d0d43a5de95b96d2311", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4MjY2NTEzMzViODFmNDYzMGFhNGQwZDQzYTVkZTk1Yjk2ZDIzMTE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-09T00:22:51Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-07-09T00:22:51Z"}, "message": "Tidy", "tree": {"sha": "d8af9d3922d0b1504de1dc828be1f1b458bd1a99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d8af9d3922d0b1504de1dc828be1f1b458bd1a99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7826651335b81f4630aa4d0d43a5de95b96d2311", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7826651335b81f4630aa4d0d43a5de95b96d2311", "html_url": "https://github.com/rust-lang/rust/commit/7826651335b81f4630aa4d0d43a5de95b96d2311", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7826651335b81f4630aa4d0d43a5de95b96d2311/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fae33367692c634356d861dc4badb967dc72a573", "url": "https://api.github.com/repos/rust-lang/rust/commits/fae33367692c634356d861dc4badb967dc72a573", "html_url": "https://github.com/rust-lang/rust/commit/fae33367692c634356d861dc4badb967dc72a573"}], "stats": {"total": 30, "additions": 16, "deletions": 14}, "files": [{"sha": "60df2d5c11ba2420014ea55a1443449da2a8dbcc", "filename": "src/libstd/rt/borrowck.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7826651335b81f4630aa4d0d43a5de95b96d2311/src%2Flibstd%2Frt%2Fborrowck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7826651335b81f4630aa4d0d43a5de95b96d2311/src%2Flibstd%2Frt%2Fborrowck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fborrowck.rs?ref=7826651335b81f4630aa4d0d43a5de95b96d2311", "patch": "@@ -147,15 +147,15 @@ impl DebugPrints for io::fd_t {\n     fn write_hex(&self, mut i: uint) {\n         let letters = ['0', '1', '2', '3', '4', '5', '6', '7', '8',\n                        '9', 'a', 'b', 'c', 'd', 'e', 'f'];\n-        static uint_nibbles: uint = ::uint::bytes << 1;\n-        let mut buffer = [0_u8, ..uint_nibbles+1];\n-        let mut c = uint_nibbles;\n+        static UINT_NIBBLES: uint = ::uint::bytes << 1;\n+        let mut buffer = [0_u8, ..UINT_NIBBLES+1];\n+        let mut c = UINT_NIBBLES;\n         while c > 0 {\n             c -= 1;\n             buffer[c] = letters[i & 0xF] as u8;\n             i >>= 4;\n         }\n-        self.write(buffer.slice(0, uint_nibbles));\n+        self.write(buffer.slice(0, UINT_NIBBLES));\n     }\n \n     unsafe fn write_cstr(&self, p: *c_char) {"}, {"sha": "53634f0cf86e4252bbb717c26f0841d42d0516f3", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7826651335b81f4630aa4d0d43a5de95b96d2311/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7826651335b81f4630aa4d0d43a5de95b96d2311/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=7826651335b81f4630aa4d0d43a5de95b96d2311", "patch": "@@ -80,7 +80,7 @@ pub unsafe fn exchange_malloc(td: *c_char, size: uintptr_t) -> *c_char {\n #[cfg(not(stage0), not(test))]\n #[lang=\"exchange_malloc\"]\n #[inline]\n-pub unsafe fn exchange_malloc(align: u32, size: uintptr_t) -> *c_char {\n+pub unsafe fn exchange_malloc(_align: u32, size: uintptr_t) -> *c_char {\n     malloc_raw(size as uint) as *c_char\n }\n "}, {"sha": "a736d54d62a5f622806039ed0906910fe941d737", "filename": "src/libstd/rt/uv/net.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7826651335b81f4630aa4d0d43a5de95b96d2311/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7826651335b81f4630aa4d0d43a5de95b96d2311/src%2Flibstd%2Frt%2Fuv%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fnet.rs?ref=7826651335b81f4630aa4d0d43a5de95b96d2311", "patch": "@@ -97,7 +97,7 @@ fn uv_ip_as_ip<T>(addr: UvIpAddr, f: &fn(IpAddr) -> T) -> T {\n     let ip_str = str::from_bytes_slice(ip_name).trim_right_chars(&'\\x00');\n     let ip = match addr {\n         UvIpv4(*) => {\n-            let ip: ~[u8] = \n+            let ip: ~[u8] =\n                 ip_str.split_iter('.')\n                       .transform(|s: &str| -> u8 { FromStr::from_str(s).unwrap() })\n                       .collect();\n@@ -288,8 +288,10 @@ impl TcpWatcher {\n             rtdebug!(\"connect_t: %x\", connect_handle as uint);\n             do ip_as_uv_ip(address) |addr| {\n                 let result = match addr {\n-                    UvIpv4(addr) => uvll::tcp_connect(connect_handle, self.native_handle(), addr, connect_cb),\n-                    UvIpv6(addr) => uvll::tcp_connect6(connect_handle, self.native_handle(), addr, connect_cb),\n+                    UvIpv4(addr) => uvll::tcp_connect(connect_handle,\n+                                                      self.native_handle(), addr, connect_cb),\n+                    UvIpv6(addr) => uvll::tcp_connect6(connect_handle,\n+                                                       self.native_handle(), addr, connect_cb),\n                 };\n                 assert_eq!(0, result);\n             }\n@@ -416,8 +418,10 @@ impl UdpWatcher {\n         do ip_as_uv_ip(address) |addr| {\n             let result = unsafe {\n                 match addr {\n-                    UvIpv4(addr) => uvll::udp_send(req.native_handle(), self.native_handle(), [buf], addr, send_cb),\n-                    UvIpv6(addr) => uvll::udp_send6(req.native_handle(), self.native_handle(), [buf], addr, send_cb),\n+                    UvIpv4(addr) => uvll::udp_send(req.native_handle(),\n+                                                   self.native_handle(), [buf], addr, send_cb),\n+                    UvIpv6(addr) => uvll::udp_send6(req.native_handle(),\n+                                                    self.native_handle(), [buf], addr, send_cb),\n                 }\n             };\n             assert_eq!(0, result);"}, {"sha": "1188cfbe595078ad713dbac70d88b4770fb7c033", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7826651335b81f4630aa4d0d43a5de95b96d2311/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7826651335b81f4630aa4d0d43a5de95b96d2311/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=7826651335b81f4630aa4d0d43a5de95b96d2311", "patch": "@@ -32,14 +32,12 @@ use sys::size_of;\n use uint;\n use unstable::intrinsics;\n #[cfg(stage0)]\n-use intrinsic::{get_tydesc, TyDesc};\n+use intrinsic::{get_tydesc};\n #[cfg(not(stage0))]\n-use unstable::intrinsics::{get_tydesc, contains_managed, TyDesc};\n+use unstable::intrinsics::{get_tydesc, contains_managed};\n use vec;\n use util;\n \n-#[cfg(not(test))] use cmp::Equiv;\n-\n /// Returns true if two vectors have the same length\n pub fn same_length<T, U>(xs: &[T], ys: &[U]) -> bool {\n     xs.len() == ys.len()"}]}