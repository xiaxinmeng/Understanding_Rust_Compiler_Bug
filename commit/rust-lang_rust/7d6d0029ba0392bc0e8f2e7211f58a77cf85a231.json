{"sha": "7d6d0029ba0392bc0e8f2e7211f58a77cf85a231", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkNmQwMDI5YmEwMzkyYmMwZThmMmU3MjExZjU4YTc3Y2Y4NWEyMzE=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-01T04:00:30Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-05-01T14:49:41Z"}, "message": "syntax: remove parsing destructors", "tree": {"sha": "ced1ef811ce32b038bc606a49b91f3520e65ba3a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ced1ef811ce32b038bc606a49b91f3520e65ba3a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7d6d0029ba0392bc0e8f2e7211f58a77cf85a231", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7d6d0029ba0392bc0e8f2e7211f58a77cf85a231", "html_url": "https://github.com/rust-lang/rust/commit/7d6d0029ba0392bc0e8f2e7211f58a77cf85a231", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7d6d0029ba0392bc0e8f2e7211f58a77cf85a231/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d79f94a2f74a0502f665c5eb432aa7231666392", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d79f94a2f74a0502f665c5eb432aa7231666392", "html_url": "https://github.com/rust-lang/rust/commit/5d79f94a2f74a0502f665c5eb432aa7231666392"}], "stats": {"total": 92, "additions": 14, "deletions": 78}, "files": [{"sha": "1a4a15b3bf522f702f1d482ae01f23725866520d", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 14, "deletions": 78, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/7d6d0029ba0392bc0e8f2e7211f58a77cf85a231/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7d6d0029ba0392bc0e8f2e7211f58a77cf85a231/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7d6d0029ba0392bc0e8f2e7211f58a77cf85a231", "patch": "@@ -102,11 +102,6 @@ enum restriction {\n     RESTRICT_NO_BAR_OR_DOUBLEBAR_OP,\n }\n \n-//  So that we can distinguish a class dtor from other class members\n-\n-enum class_contents { dtor_decl(blk, ~[attribute], codemap::span),\n-                      members(~[@struct_field]) }\n-\n type arg_or_capture_item = Either<arg, ()>;\n type item_info = (ident, item_, Option<~[attribute]>);\n \n@@ -3299,34 +3294,15 @@ pub impl Parser {\n         }\n \n         let mut fields: ~[@struct_field];\n-        let mut the_dtor: Option<(blk, ~[attribute], codemap::span)> = None;\n         let is_tuple_like;\n \n         if self.eat(&token::LBRACE) {\n             // It's a record-like struct.\n             is_tuple_like = false;\n             fields = ~[];\n             while *self.token != token::RBRACE {\n-                match self.parse_struct_decl_field() {\n-                  dtor_decl(ref blk, ref attrs, s) => {\n-                      match the_dtor {\n-                        Some((_, _, s_first)) => {\n-                          self.span_note(s, fmt!(\"Duplicate destructor \\\n-                                     declaration for class %s\",\n-                                     *self.interner.get(class_name)));\n-                          self.span_fatal(copy s_first, ~\"First destructor \\\n-                                                          declared here\");\n-                        }\n-                        None => {\n-                          the_dtor = Some((copy *blk, copy *attrs, s));\n-                        }\n-                      }\n-                  }\n-                  members(mms) => {\n-                    for mms.each |struct_field| {\n-                        fields.push(*struct_field)\n-                    }\n-                  }\n+                for self.parse_struct_decl_field().each |struct_field| {\n+                    fields.push(*struct_field)\n                 }\n             }\n             if fields.len() == 0 {\n@@ -3365,19 +3341,12 @@ pub impl Parser {\n             );\n         }\n \n-        let actual_dtor = do the_dtor.map |dtor| {\n-            let (d_body, d_attrs, d_s) = copy *dtor;\n-            codemap::spanned { node: ast::struct_dtor_ { id: self.get_id(),\n-                                                     attrs: d_attrs,\n-                                                     self_id: self.get_id(),\n-                                                     body: d_body},\n-                       span: d_s}};\n         let _ = self.get_id();  // XXX: Workaround for crazy bug.\n         let new_id = self.get_id();\n         (class_name,\n          item_struct(@ast::struct_def {\n              fields: fields,\n-             dtor: actual_dtor,\n+             dtor: None,\n              ctor_id: if is_tuple_like { Some(new_id) } else { None }\n          }, generics),\n          None)\n@@ -3420,34 +3389,28 @@ pub impl Parser {\n     }\n \n     // parse an element of a struct definition\n-    fn parse_struct_decl_field(&self) -> class_contents {\n+    fn parse_struct_decl_field(&self) -> ~[@struct_field] {\n \n         if self.try_parse_obsolete_priv_section() {\n-            return members(~[]);\n+            return ~[];\n         }\n \n-        let attrs = self.parse_outer_attributes();\n+        // Need this to parse comments on fields.\n+        let _attrs = self.parse_outer_attributes();\n \n         if self.eat_keyword(&~\"priv\") {\n-            return members(~[self.parse_single_struct_field(private)])\n+            return ~[self.parse_single_struct_field(private)]\n         }\n \n         if self.eat_keyword(&~\"pub\") {\n-           return members(~[self.parse_single_struct_field(public)]);\n+           return ~[self.parse_single_struct_field(public)];\n         }\n \n         if self.try_parse_obsolete_struct_ctor() {\n-            return members(~[]);\n+            return ~[];\n         }\n \n-        if self.eat_keyword(&~\"drop\") {\n-            let lo = self.last_span.lo;\n-            let body = self.parse_block();\n-            return dtor_decl(body, attrs, mk_sp(lo, self.last_span.hi))\n-        }\n-        else {\n-           return members(~[self.parse_single_struct_field(inherited)]);\n-        }\n+        return ~[self.parse_single_struct_field(inherited)];\n     }\n \n     // parse visiility: PUB, PRIV, or nothing\n@@ -3830,44 +3793,17 @@ pub impl Parser {\n     // parse a structure-like enum variant definition\n     // this should probably be renamed or refactored...\n     fn parse_struct_def(&self) -> @struct_def {\n-        let mut the_dtor: Option<(blk, ~[attribute], codemap::span)> = None;\n         let mut fields: ~[@struct_field] = ~[];\n         while *self.token != token::RBRACE {\n-            match self.parse_struct_decl_field() {\n-                dtor_decl(ref blk, ref attrs, s) => {\n-                    match the_dtor {\n-                        Some((_, _, s_first)) => {\n-                            self.span_note(s, ~\"duplicate destructor \\\n-                                                declaration\");\n-                            self.span_fatal(copy s_first,\n-                                            ~\"first destructor \\\n-                                              declared here\");\n-                        }\n-                        None => {\n-                            the_dtor = Some((copy *blk, copy *attrs, s));\n-                        }\n-                    }\n-                }\n-                members(mms) => {\n-                    for mms.each |struct_field| {\n-                        fields.push(*struct_field);\n-                    }\n-                }\n+            for self.parse_struct_decl_field().each |struct_field| {\n+                fields.push(*struct_field);\n             }\n         }\n         self.bump();\n-        let actual_dtor = do the_dtor.map |dtor| {\n-            let (d_body, d_attrs, d_s) = copy *dtor;\n-            codemap::spanned { node: ast::struct_dtor_ { id: self.get_id(),\n-                                                     attrs: d_attrs,\n-                                                     self_id: self.get_id(),\n-                                                     body: d_body },\n-                      span: d_s }\n-        };\n \n         return @ast::struct_def {\n             fields: fields,\n-            dtor: actual_dtor,\n+            dtor: None,\n             ctor_id: None\n         };\n     }"}]}