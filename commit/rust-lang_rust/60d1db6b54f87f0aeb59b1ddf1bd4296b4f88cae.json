{"sha": "60d1db6b54f87f0aeb59b1ddf1bd4296b4f88cae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYwZDFkYjZiNTRmODdmMGFlYjU5YjFkZGYxYmQ0Mjk2YjRmODhjYWU=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-01-09T01:34:23Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2019-01-09T20:11:23Z"}, "message": "Clean up and fix a bug in query plumbing", "tree": {"sha": "f21c69878e6dba1f54d4300186c06f5859eab948", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f21c69878e6dba1f54d4300186c06f5859eab948"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60d1db6b54f87f0aeb59b1ddf1bd4296b4f88cae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60d1db6b54f87f0aeb59b1ddf1bd4296b4f88cae", "html_url": "https://github.com/rust-lang/rust/commit/60d1db6b54f87f0aeb59b1ddf1bd4296b4f88cae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60d1db6b54f87f0aeb59b1ddf1bd4296b4f88cae/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d22fa2d87d03d19fdb1359faab9ec5e74eff26b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d22fa2d87d03d19fdb1359faab9ec5e74eff26b3", "html_url": "https://github.com/rust-lang/rust/commit/d22fa2d87d03d19fdb1359faab9ec5e74eff26b3"}], "stats": {"total": 41, "additions": 21, "deletions": 20}, "files": [{"sha": "61aab5a74380879d0ce351233c841c957256cfd7", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/60d1db6b54f87f0aeb59b1ddf1bd4296b4f88cae/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60d1db6b54f87f0aeb59b1ddf1bd4296b4f88cae/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=60d1db6b54f87f0aeb59b1ddf1bd4296b4f88cae", "patch": "@@ -393,7 +393,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // expensive for some DepKinds.\n         if !self.dep_graph.is_fully_enabled() {\n             let null_dep_node = DepNode::new_no_params(::dep_graph::DepKind::Null);\n-            return self.force_query_with_job::<Q>(key, job, null_dep_node).map(|(v, _)| v);\n+            return Ok(self.force_query_with_job::<Q>(key, job, null_dep_node).0);\n         }\n \n         let dep_node = Q::to_dep_node(self, &key);\n@@ -424,20 +424,18 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         if !dep_node.kind.is_input() {\n             if let Some(dep_node_index) = self.try_mark_green_and_read(&dep_node) {\n-                return self.load_from_disk_and_cache_in_memory::<Q>(key,\n-                                                                    job,\n-                                                                    dep_node_index,\n-                                                                    &dep_node)\n+                return Ok(self.load_from_disk_and_cache_in_memory::<Q>(\n+                    key,\n+                    job,\n+                    dep_node_index,\n+                    &dep_node\n+                ))\n             }\n         }\n \n-        match self.force_query_with_job::<Q>(key, job, dep_node) {\n-            Ok((result, dep_node_index)) => {\n-                self.dep_graph.read_index(dep_node_index);\n-                Ok(result)\n-            }\n-            Err(e) => Err(e)\n-        }\n+        let (result, dep_node_index) = self.force_query_with_job::<Q>(key, job, dep_node);\n+        self.dep_graph.read_index(dep_node_index);\n+        Ok(result)\n     }\n \n     fn load_from_disk_and_cache_in_memory<Q: QueryDescription<'gcx>>(\n@@ -446,7 +444,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         job: JobOwner<'a, 'gcx, Q>,\n         dep_node_index: DepNodeIndex,\n         dep_node: &DepNode\n-    ) -> Result<Q::Value, Box<CycleError<'gcx>>>\n+    ) -> Q::Value\n     {\n         // Note this function can be called concurrently from the same query\n         // We must ensure that this is handled correctly\n@@ -511,7 +509,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         job.complete(&result, dep_node_index);\n \n-        Ok(result)\n+        result\n     }\n \n     #[inline(never)]\n@@ -551,7 +549,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         key: Q::Key,\n         job: JobOwner<'_, 'gcx, Q>,\n         dep_node: DepNode)\n-    -> Result<(Q::Value, DepNodeIndex), Box<CycleError<'gcx>>> {\n+    -> (Q::Value, DepNodeIndex) {\n         // If the following assertion triggers, it can have two reasons:\n         // 1. Something is wrong with DepNode creation, either here or\n         //    in DepGraph::try_mark_green()\n@@ -596,7 +594,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         job.complete(&result, dep_node_index);\n \n-        Ok((result, dep_node_index))\n+        (result, dep_node_index)\n     }\n \n     /// Ensure that either this query has all green inputs or been executed.\n@@ -643,11 +641,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // Ensure that only one of them runs the query\n         let job = match JobOwner::try_get(self, span, &key) {\n             TryGetJob::NotYetStarted(job) => job,\n-            TryGetJob::JobCompleted(_) => return,\n+            TryGetJob::JobCompleted(result) => {\n+                if let Err(e) = result {\n+                    self.report_cycle(e).emit();\n+                }\n+                return\n+            }\n         };\n-        if let Err(e) = self.force_query_with_job::<Q>(key, job, dep_node) {\n-            self.report_cycle(e).emit();\n-        }\n+        self.force_query_with_job::<Q>(key, job, dep_node);\n     }\n \n     pub(super) fn try_get_query<Q: QueryDescription<'gcx>>("}]}