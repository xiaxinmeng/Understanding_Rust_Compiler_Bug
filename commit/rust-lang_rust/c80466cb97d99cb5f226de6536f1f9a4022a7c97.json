{"sha": "c80466cb97d99cb5f226de6536f1f9a4022a7c97", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM4MDQ2NmNiOTdkOTljYjVmMjI2ZGU2NTM2ZjFmOWE0MDIyYTdjOTc=", "commit": {"author": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-02-11T05:27:56Z"}, "committer": {"name": "Nicholas Nethercote", "email": "nnethercote@mozilla.com", "date": "2019-02-11T05:27:56Z"}, "message": "Remove two dead functions.", "tree": {"sha": "48198529de115604be8aae5b716ac35d7de5a367", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48198529de115604be8aae5b716ac35d7de5a367"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c80466cb97d99cb5f226de6536f1f9a4022a7c97", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c80466cb97d99cb5f226de6536f1f9a4022a7c97", "html_url": "https://github.com/rust-lang/rust/commit/c80466cb97d99cb5f226de6536f1f9a4022a7c97", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c80466cb97d99cb5f226de6536f1f9a4022a7c97/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d725287e3ac05e5f7aa1c8f9f41011bd593c73a", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d725287e3ac05e5f7aa1c8f9f41011bd593c73a", "html_url": "https://github.com/rust-lang/rust/commit/2d725287e3ac05e5f7aa1c8f9f41011bd593c73a"}], "stats": {"total": 33, "additions": 0, "deletions": 33}, "files": [{"sha": "dabe1755b0bb63f42d5f524389b5624c68eba1fa", "filename": "src/librustc/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c80466cb97d99cb5f226de6536f1f9a4022a7c97/src%2Flibrustc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80466cb97d99cb5f226de6536f1f9a4022a7c97/src%2Flibrustc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fmod.rs?ref=c80466cb97d99cb5f226de6536f1f9a4022a7c97", "patch": "@@ -1291,14 +1291,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         value.visit_with(&mut r)\n     }\n \n-    pub fn resolve_type_and_region_vars_if_possible<T>(&self, value: &T) -> T\n-    where\n-        T: TypeFoldable<'tcx>,\n-    {\n-        let mut r = resolve::OpportunisticTypeAndRegionResolver::new(self);\n-        value.fold_with(&mut r)\n-    }\n-\n     pub fn fully_resolve<T: TypeFoldable<'tcx>>(&self, value: &T) -> FixupResult<T> {\n         /*!\n          * Attempts to resolve all type/region variables in"}, {"sha": "551554b7e7f1259a391cc7286e13c6910efe6127", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 0, "deletions": 25, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/c80466cb97d99cb5f226de6536f1f9a4022a7c97/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c80466cb97d99cb5f226de6536f1f9a4022a7c97/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=c80466cb97d99cb5f226de6536f1f9a4022a7c97", "patch": "@@ -586,31 +586,6 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }).0\n     }\n \n-    /// Flattens multiple binding levels into one. So `for<'a> for<'b> Foo`\n-    /// becomes `for<'a,'b> Foo`.\n-    pub fn flatten_late_bound_regions<T>(self, bound2_value: &Binder<Binder<T>>)\n-                                         -> Binder<T>\n-        where T: TypeFoldable<'tcx>\n-    {\n-        let bound0_value = bound2_value.skip_binder().skip_binder();\n-        let value = self.fold_regions(bound0_value, &mut false, |region, current_depth| {\n-            match *region {\n-                ty::ReLateBound(debruijn, br) => {\n-                    // We assume no regions bound *outside* of the\n-                    // binders in `bound2_value` (nmatsakis added in\n-                    // the course of this PR; seems like a reasonable\n-                    // sanity check though).\n-                    assert!(debruijn == current_depth);\n-                    self.mk_region(ty::ReLateBound(current_depth, br))\n-                }\n-                _ => {\n-                    region\n-                }\n-            }\n-        });\n-        Binder::bind(value)\n-    }\n-\n     /// Returns a set of all late-bound regions that are constrained\n     /// by `value`, meaning that if we instantiate those LBR with\n     /// variables and equate `value` with something else, those"}]}