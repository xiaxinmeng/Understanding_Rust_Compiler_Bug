{"sha": "b5e049de0850edd90b60753cf8c0df62b9e159a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI1ZTA0OWRlMDg1MGVkZDkwYjYwNzUzY2Y4YzBkZjYyYjllMTU5YTE=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-03-28T16:36:53Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2021-05-02T15:59:48Z"}, "message": "Remove dummy_config", "tree": {"sha": "64081fba79144625bf513e9fd939154f9bcef841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64081fba79144625bf513e9fd939154f9bcef841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5e049de0850edd90b60753cf8c0df62b9e159a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5e049de0850edd90b60753cf8c0df62b9e159a1", "html_url": "https://github.com/rust-lang/rust/commit/b5e049de0850edd90b60753cf8c0df62b9e159a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5e049de0850edd90b60753cf8c0df62b9e159a1/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cab940e848d0645619a31ae068b5ccbbf47f9cb8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cab940e848d0645619a31ae068b5ccbbf47f9cb8", "html_url": "https://github.com/rust-lang/rust/commit/cab940e848d0645619a31ae068b5ccbbf47f9cb8"}], "stats": {"total": 108, "additions": 43, "deletions": 65}, "files": [{"sha": "6dd29e79593253da3999cade106108c3e1686a81", "filename": "compiler/rustc_driver/src/lib.rs", "status": "modified", "additions": 38, "deletions": 64, "changes": 102, "blob_url": "https://github.com/rust-lang/rust/blob/b5e049de0850edd90b60753cf8c0df62b9e159a1/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5e049de0850edd90b60753cf8c0df62b9e159a1/compiler%2Frustc_driver%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_driver%2Fsrc%2Flib.rs?ref=b5e049de0850edd90b60753cf8c0df62b9e159a1", "patch": "@@ -35,7 +35,7 @@ use rustc_session::config::{ErrorOutputType, Input, OutputType, PrintRequest, Tr\n use rustc_session::getopts;\n use rustc_session::lint::{Lint, LintId};\n use rustc_session::{config, DiagnosticOutput, Session};\n-use rustc_session::{early_error, early_warn};\n+use rustc_session::{early_error, early_error_no_abort, early_warn};\n use rustc_span::source_map::{FileLoader, FileName};\n use rustc_span::symbol::sym;\n \n@@ -199,46 +199,49 @@ fn run_compiler(\n     };\n \n     let sopts = config::build_session_options(&matches);\n-    let cfg = interface::parse_cfgspecs(matches.opt_strs(\"cfg\"));\n-\n-    // We wrap `make_codegen_backend` in another `Option` such that `dummy_config` can take\n-    // ownership of it when necessary, while also allowing the non-dummy config to take ownership\n-    // when `dummy_config` is not used.\n-    let mut make_codegen_backend = Some(make_codegen_backend);\n-\n-    let mut dummy_config = |sopts, cfg, diagnostic_output| {\n-        let mut config = interface::Config {\n-            opts: sopts,\n-            crate_cfg: cfg,\n-            input: Input::File(PathBuf::new()),\n-            input_path: None,\n-            output_file: None,\n-            output_dir: None,\n-            file_loader: None,\n-            diagnostic_output,\n-            stderr: None,\n-            lint_caps: Default::default(),\n-            parse_sess_created: None,\n-            register_lints: None,\n-            override_queries: None,\n-            make_codegen_backend: make_codegen_backend.take().unwrap(),\n-            registry: diagnostics_registry(),\n-        };\n-        callbacks.config(&mut config);\n-        config\n-    };\n \n     if let Some(ref code) = matches.opt_str(\"explain\") {\n         handle_explain(diagnostics_registry(), code, sopts.error_format);\n         return Ok(());\n     }\n \n+    let cfg = interface::parse_cfgspecs(matches.opt_strs(\"cfg\"));\n     let (odir, ofile) = make_output(&matches);\n-    let (input, input_file_path, input_err) = match make_input(&matches.free) {\n-        Some(v) => v,\n+    let mut config = interface::Config {\n+        opts: sopts,\n+        crate_cfg: cfg,\n+        input: Input::File(PathBuf::new()),\n+        input_path: None,\n+        output_file: ofile,\n+        output_dir: odir,\n+        file_loader,\n+        diagnostic_output,\n+        stderr: None,\n+        lint_caps: Default::default(),\n+        parse_sess_created: None,\n+        register_lints: None,\n+        override_queries: None,\n+        make_codegen_backend,\n+        registry: diagnostics_registry(),\n+    };\n+\n+    match make_input(&matches.free) {\n+        Some((input, input_file_path, input_err)) => {\n+            if let Some(err) = input_err {\n+                // Immediately stop compilation if there was an issue reading\n+                // the input (for example if the input stream is not UTF-8).\n+                early_error_no_abort(config.opts.error_format, &err.to_string());\n+                return Err(ErrorReported);\n+            }\n+\n+            config.input = input;\n+            config.input_path = input_file_path;\n+\n+            callbacks.config(&mut config);\n+        }\n         None => match matches.free.len() {\n             0 => {\n-                let config = dummy_config(sopts, cfg, diagnostic_output);\n+                callbacks.config(&mut config);\n                 interface::run_compiler(config, |compiler| {\n                     let sopts = &compiler.session().opts;\n                     if sopts.describe_lints {\n@@ -260,8 +263,8 @@ fn run_compiler(\n                         &***compiler.codegen_backend(),\n                         compiler.session(),\n                         None,\n-                        &odir,\n-                        &ofile,\n+                        &compiler.output_dir(),\n+                        &compiler.output_file(),\n                     );\n \n                     if should_stop == Compilation::Stop {\n@@ -273,7 +276,7 @@ fn run_compiler(\n             }\n             1 => panic!(\"make_input should have provided valid inputs\"),\n             _ => early_error(\n-                sopts.error_format,\n+                config.opts.error_format,\n                 &format!(\n                     \"multiple input filenames provided (first two filenames are `{}` and `{}`)\",\n                     matches.free[0], matches.free[1],\n@@ -282,35 +285,6 @@ fn run_compiler(\n         },\n     };\n \n-    if let Some(err) = input_err {\n-        // Immediately stop compilation if there was an issue reading\n-        // the input (for example if the input stream is not UTF-8).\n-        interface::run_compiler(dummy_config(sopts, cfg, diagnostic_output), |compiler| {\n-            compiler.session().err(&err.to_string());\n-        });\n-        return Err(ErrorReported);\n-    }\n-\n-    let mut config = interface::Config {\n-        opts: sopts,\n-        crate_cfg: cfg,\n-        input,\n-        input_path: input_file_path,\n-        output_file: ofile,\n-        output_dir: odir,\n-        file_loader,\n-        diagnostic_output,\n-        stderr: None,\n-        lint_caps: Default::default(),\n-        parse_sess_created: None,\n-        register_lints: None,\n-        override_queries: None,\n-        make_codegen_backend: make_codegen_backend.unwrap(),\n-        registry: diagnostics_registry(),\n-    };\n-\n-    callbacks.config(&mut config);\n-\n     interface::run_compiler(config, |compiler| {\n         let sess = compiler.session();\n         let should_stop = RustcDefaultCalls::print_crate_info("}, {"sha": "43e0ac875bc34e2a81dd6fec3b0e0644c2669de6", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b5e049de0850edd90b60753cf8c0df62b9e159a1/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5e049de0850edd90b60753cf8c0df62b9e159a1/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=b5e049de0850edd90b60753cf8c0df62b9e159a1", "patch": "@@ -1591,7 +1591,7 @@ pub enum IncrCompSession {\n     InvalidBecauseOfErrors { session_directory: PathBuf },\n }\n \n-pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n+pub fn early_error_no_abort(output: config::ErrorOutputType, msg: &str) {\n     let emitter: Box<dyn Emitter + sync::Send> = match output {\n         config::ErrorOutputType::HumanReadable(kind) => {\n             let (short, color_config) = kind.unzip();\n@@ -1603,6 +1603,10 @@ pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n     };\n     let handler = rustc_errors::Handler::with_emitter(true, None, emitter);\n     handler.struct_fatal(msg).emit();\n+}\n+\n+pub fn early_error(output: config::ErrorOutputType, msg: &str) -> ! {\n+    early_error_no_abort(output, msg);\n     rustc_errors::FatalError.raise();\n }\n "}]}