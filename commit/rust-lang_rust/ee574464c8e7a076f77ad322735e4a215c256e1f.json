{"sha": "ee574464c8e7a076f77ad322735e4a215c256e1f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlNTc0NDY0YzhlN2EwNzZmNzdhZDMyMjczNWU0YTIxNWMyNTZlMWY=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-05-01T19:28:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-01T19:28:48Z"}, "message": "Merge pull request #2711 from phansch/fix_2707\n\nPrevent crash when macro was in different file", "tree": {"sha": "2c784786c64cec2af1b6e54f14fa6ba946b95a99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c784786c64cec2af1b6e54f14fa6ba946b95a99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee574464c8e7a076f77ad322735e4a215c256e1f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa6L/wCRBK7hj4Ov3rIwAAdHIIAGJJDCmkBoHa8hfW9Fp8hzNZ\n5Se3UqxaQv7HcdXg9/dFmCSQDKqruYNRDLHDmJj0Nb+whK4SnKOEU2HJnM/YHnWb\nfNmZ9ImkII5L25lD8zSRa2akry2sXn6QvDF1o3z5hmX8+UhItbuN6SN5hw22lQdm\ny51ddaFazffRFSp/YlyXb4KAy/OSPCKnosZR4SZ8sUSSqWn55A9+A3dk3cpwttMW\ngk2tqQ+WGUC/CcivaznGo6sxPk8euMDBt8rwDawmGkIdlU6AhPvFONQLYQjIRBez\nr5aU/AI7pZHIOkWHlK+rwiiOU6kikZi1BDbUUsQ89K3XZY/OpSdkebpiHYB0h/Y=\n=kksA\n-----END PGP SIGNATURE-----\n", "payload": "tree 2c784786c64cec2af1b6e54f14fa6ba946b95a99\nparent f69dd6ad2cfb883489738115c44931e0fa6ab986\nparent 5d36edc90d26f2021a3a9d579066c0190aa8facf\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1525202928 +0200\ncommitter GitHub <noreply@github.com> 1525202928 +0200\n\nMerge pull request #2711 from phansch/fix_2707\n\nPrevent crash when macro was in different file"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee574464c8e7a076f77ad322735e4a215c256e1f", "html_url": "https://github.com/rust-lang/rust/commit/ee574464c8e7a076f77ad322735e4a215c256e1f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee574464c8e7a076f77ad322735e4a215c256e1f/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f69dd6ad2cfb883489738115c44931e0fa6ab986", "url": "https://api.github.com/repos/rust-lang/rust/commits/f69dd6ad2cfb883489738115c44931e0fa6ab986", "html_url": "https://github.com/rust-lang/rust/commit/f69dd6ad2cfb883489738115c44931e0fa6ab986"}, {"sha": "5d36edc90d26f2021a3a9d579066c0190aa8facf", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d36edc90d26f2021a3a9d579066c0190aa8facf", "html_url": "https://github.com/rust-lang/rust/commit/5d36edc90d26f2021a3a9d579066c0190aa8facf"}], "stats": {"total": 24, "additions": 23, "deletions": 1}, "files": [{"sha": "ffc49722aadc2921e9841f6bfe99da1048c96d8c", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ee574464c8e7a076f77ad322735e4a215c256e1f/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee574464c8e7a076f77ad322735e4a215c256e1f/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=ee574464c8e7a076f77ad322735e4a215c256e1f", "patch": "@@ -12,7 +12,7 @@ use std::borrow::Cow;\n use syntax::ast::{FloatTy, IntTy, UintTy};\n use syntax::codemap::Span;\n use syntax::errors::DiagnosticBuilder;\n-use utils::{comparisons, higher, in_constant, in_external_macro, in_macro, last_path_segment, match_def_path, match_path,\n+use utils::{comparisons, differing_macro_contexts, higher, in_constant, in_external_macro, in_macro, last_path_segment, match_def_path, match_path,\n             match_type, multispan_sugg, opt_def_id, same_tys, snippet, snippet_opt, span_help_and_lint, span_lint,\n             span_lint_and_sugg, span_lint_and_then, clip, unsext, sext, int_bits};\n use utils::paths;\n@@ -1714,6 +1714,10 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ImplicitHasher {\n                 vis.visit_ty(ty);\n \n                 for target in &vis.found {\n+                    if differing_macro_contexts(item.span, target.span()) {\n+                        return;\n+                    }\n+\n                     let generics_suggestion_span = generics.span.substitute_dummy({\n                         let pos = snippet_opt(cx, item.span.until(target.span()))\n                             .and_then(|snip| Some(item.span.lo() + BytePos(snip.find(\"impl\")? as u32 + 4)))"}, {"sha": "624ca892add310fa3acd8197a9cd33c034781106", "filename": "tests/auxiliary/test_macro.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ee574464c8e7a076f77ad322735e4a215c256e1f/tests%2Fauxiliary%2Ftest_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee574464c8e7a076f77ad322735e4a215c256e1f/tests%2Fauxiliary%2Ftest_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fauxiliary%2Ftest_macro.rs?ref=ee574464c8e7a076f77ad322735e4a215c256e1f", "patch": "@@ -0,0 +1,11 @@\n+pub trait A {}\n+\n+macro_rules! __implicit_hasher_test_macro {\n+    (impl< $($impl_arg:tt),* > for $kind:ty where $($bounds:tt)*) => {\n+        __implicit_hasher_test_macro!( ($($impl_arg),*) ($kind) ($($bounds)*) );\n+    };\n+\n+    (($($impl_arg:tt)*) ($($kind_arg:tt)*) ($($bounds:tt)*)) => {\n+        impl< $($impl_arg)* > test_macro::A for $($kind_arg)* where $($bounds)* { }\n+    };\n+}"}, {"sha": "c8b9f74bb32ddf1c95314dbf93f50e2cda7ce589", "filename": "tests/ui/implicit_hasher.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ee574464c8e7a076f77ad322735e4a215c256e1f/tests%2Fui%2Fimplicit_hasher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee574464c8e7a076f77ad322735e4a215c256e1f/tests%2Fui%2Fimplicit_hasher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fimplicit_hasher.rs?ref=ee574464c8e7a076f77ad322735e4a215c256e1f", "patch": "@@ -83,4 +83,11 @@ macro_rules! gen {\n gen!(impl);\n gen!(fn bar);\n \n+// When the macro is in a different file, the suggestion spans can't be combined properly\n+// and should not cause an ICE\n+// See #2707\n+#[macro_use]\n+#[path = \"../auxiliary/test_macro.rs\"] pub mod test_macro;\n+__implicit_hasher_test_macro!(impl<K, V> for HashMap<K, V> where V: test_macro::A);\n+\n fn main() {}"}]}