{"sha": "a7c7c8a4d7439e69f22386af1bb44f7686252f12", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE3YzdjOGE0ZDc0MzllNjlmMjIzODZhZjFiYjQ0Zjc2ODYyNTJmMTI=", "commit": {"author": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-02-14T22:55:37Z"}, "committer": {"name": "leonardo.yvens", "email": "leoyvens@gmail.com", "date": "2018-02-28T15:33:16Z"}, "message": "Check only concrete defaults for well formedness", "tree": {"sha": "e0f80d38be9e43fa46d0845770521c84668aadb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0f80d38be9e43fa46d0845770521c84668aadb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7c7c8a4d7439e69f22386af1bb44f7686252f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7c7c8a4d7439e69f22386af1bb44f7686252f12", "html_url": "https://github.com/rust-lang/rust/commit/a7c7c8a4d7439e69f22386af1bb44f7686252f12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7c7c8a4d7439e69f22386af1bb44f7686252f12/comments", "author": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "leoyvens", "id": 9885558, "node_id": "MDQ6VXNlcjk4ODU1NTg=", "avatar_url": "https://avatars.githubusercontent.com/u/9885558?v=4", "gravatar_id": "", "url": "https://api.github.com/users/leoyvens", "html_url": "https://github.com/leoyvens", "followers_url": "https://api.github.com/users/leoyvens/followers", "following_url": "https://api.github.com/users/leoyvens/following{/other_user}", "gists_url": "https://api.github.com/users/leoyvens/gists{/gist_id}", "starred_url": "https://api.github.com/users/leoyvens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/leoyvens/subscriptions", "organizations_url": "https://api.github.com/users/leoyvens/orgs", "repos_url": "https://api.github.com/users/leoyvens/repos", "events_url": "https://api.github.com/users/leoyvens/events{/privacy}", "received_events_url": "https://api.github.com/users/leoyvens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c74f85f935189021345cbc0efdfcccb98047c29e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c74f85f935189021345cbc0efdfcccb98047c29e", "html_url": "https://github.com/rust-lang/rust/commit/c74f85f935189021345cbc0efdfcccb98047c29e"}], "stats": {"total": 52, "additions": 22, "deletions": 30}, "files": [{"sha": "4eb3e29ec6946de2b7cc51099c309e29ab133c91", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a7c7c8a4d7439e69f22386af1bb44f7686252f12/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c7c8a4d7439e69f22386af1bb44f7686252f12/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=a7c7c8a4d7439e69f22386af1bb44f7686252f12", "patch": "@@ -363,13 +363,16 @@ impl<'a, 'gcx> CheckTypeWellFormedVisitor<'a, 'gcx> {\n         let generics = self.tcx.generics_of(def_id);\n         let is_our_default = |def: &ty::TypeParameterDef|\n                                 def.has_default && def.index >= generics.parent_count() as u32;\n-        let defaulted_params = generics.types.iter().cloned().filter(&is_our_default);\n-        // Check that defaults are well-formed. See test `type-check-defaults.rs`.\n+\n+        // Check that concrete defaults are well-formed. See test `type-check-defaults.rs`.\n         // For example this forbids the declaration:\n         // struct Foo<T = Vec<[u32]>> { .. }\n         // Here the default `Vec<[u32]>` is not WF because `[u32]: Sized` does not hold.\n-        for d in defaulted_params.map(|p| p.def_id) {\n-            fcx.register_wf_obligation(fcx.tcx.type_of(d), fcx.tcx.def_span(d), self.code.clone());\n+        for d in generics.types.iter().cloned().filter(is_our_default).map(|p| p.def_id) {\n+            let ty = fcx.tcx.type_of(d);\n+            if !ty.needs_subst() {\n+                fcx.register_wf_obligation(ty, fcx.tcx.def_span(d), self.code.clone());\n+            }\n         }\n \n         // Check that trait predicates are WF when params are substituted by their defaults."}, {"sha": "f35946790955360be57bf8f2e09c009ef82c6670", "filename": "src/test/run-pass/defaults-well-formedness.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a7c7c8a4d7439e69f22386af1bb44f7686252f12/src%2Ftest%2Frun-pass%2Fdefaults-well-formedness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c7c8a4d7439e69f22386af1bb44f7686252f12/src%2Ftest%2Frun-pass%2Fdefaults-well-formedness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefaults-well-formedness.rs?ref=a7c7c8a4d7439e69f22386af1bb44f7686252f12", "patch": "@@ -24,5 +24,7 @@ struct DefaultedLhs<U, V=i32>(U, V) where V: Trait<U>;\n // Dependent defaults are not checked.\n struct Dependent<T, U = T>(T, U) where U: Copy;\n trait SelfBound<T: Copy=Self> {}\n+// Not even for well-formedness.\n+struct WellFormedProjection<A, T=<A as Iterator>::Item>(A, T);\n \n fn main() {}"}, {"sha": "f916df5d32d0462826035a9e87aca7351c6ee88e", "filename": "src/test/ui/type-check-defaults.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a7c7c8a4d7439e69f22386af1bb44f7686252f12/src%2Ftest%2Fui%2Ftype-check-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7c7c8a4d7439e69f22386af1bb44f7686252f12/src%2Ftest%2Fui%2Ftype-check-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check-defaults.rs?ref=a7c7c8a4d7439e69f22386af1bb44f7686252f12", "patch": "@@ -18,9 +18,6 @@ struct WellFormed<Z = Foo<i32, i32>>(Z);\n struct WellFormedNoBounds<Z:?Sized = Foo<i32, i32>>(Z);\n //~^ error: the trait bound `i32: std::iter::FromIterator<i32>` is not satisfied [E0277]\n \n-struct WellFormedProjection<A, T=<A as Iterator>::Item>(A, T);\n-//~^ error: the trait bound `A: std::iter::Iterator` is not satisfied [E0277]\n-\n struct Bounds<T:Copy=String>(T);\n //~^ error: the trait bound `std::string::String: std::marker::Copy` is not satisfied [E0277]\n "}, {"sha": "4af8f5da0dd05de1f7a671c867502a96b06d1538", "filename": "src/test/ui/type-check-defaults.stderr", "status": "modified", "additions": 13, "deletions": 23, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a7c7c8a4d7439e69f22386af1bb44f7686252f12/src%2Ftest%2Fui%2Ftype-check-defaults.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a7c7c8a4d7439e69f22386af1bb44f7686252f12/src%2Ftest%2Fui%2Ftype-check-defaults.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-check-defaults.stderr?ref=a7c7c8a4d7439e69f22386af1bb44f7686252f12", "patch": "@@ -24,61 +24,51 @@ note: required by `Foo`\n 15 | struct Foo<T, U: FromIterator<T>>(T, U);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error[E0277]: the trait bound `A: std::iter::Iterator` is not satisfied\n-  --> $DIR/type-check-defaults.rs:21:32\n-   |\n-21 | struct WellFormedProjection<A, T=<A as Iterator>::Item>(A, T);\n-   |                                ^ `A` is not an iterator; maybe try calling `.iter()` or a similar method\n-   |\n-   = help: the trait `std::iter::Iterator` is not implemented for `A`\n-   = help: consider adding a `where A: std::iter::Iterator` bound\n-   = note: required by `std::iter::Iterator`\n-\n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:24:1\n+  --> $DIR/type-check-defaults.rs:21:1\n    |\n-24 | struct Bounds<T:Copy=String>(T);\n+21 | struct Bounds<T:Copy=String>(T);\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n    |\n    = note: required by `std::marker::Copy`\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:27:1\n+  --> $DIR/type-check-defaults.rs:24:1\n    |\n-27 | struct WhereClause<T=String>(T) where T: Copy;\n+24 | struct WhereClause<T=String>(T) where T: Copy;\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n    |\n    = note: required by `std::marker::Copy`\n \n error[E0277]: the trait bound `std::string::String: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:30:1\n+  --> $DIR/type-check-defaults.rs:27:1\n    |\n-30 | trait TraitBound<T:Copy=String> {}\n+27 | trait TraitBound<T:Copy=String> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `std::string::String`\n    |\n    = note: required by `std::marker::Copy`\n \n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/type-check-defaults.rs:34:1\n+  --> $DIR/type-check-defaults.rs:31:1\n    |\n-34 | trait Base<T = String>: Super<T> { }\n+31 | trait Base<T = String>: Super<T> { }\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n    |\n    = help: consider adding a `where T: std::marker::Copy` bound\n note: required by `Super`\n-  --> $DIR/type-check-defaults.rs:33:1\n+  --> $DIR/type-check-defaults.rs:30:1\n    |\n-33 | trait Super<T: Copy> { }\n+30 | trait Super<T: Copy> { }\n    | ^^^^^^^^^^^^^^^^^^^^\n \n error[E0277]: cannot add `u8` to `i32`\n-  --> $DIR/type-check-defaults.rs:37:1\n+  --> $DIR/type-check-defaults.rs:34:1\n    |\n-37 | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n+34 | trait ProjectionPred<T:Iterator = IntoIter<i32>> where T::Item : Add<u8> {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ no implementation for `i32 + u8`\n    |\n    = help: the trait `std::ops::Add<u8>` is not implemented for `i32`\n    = note: required by `std::ops::Add`\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 7 previous errors\n "}]}