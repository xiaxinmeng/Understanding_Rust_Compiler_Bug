{"sha": "f547978392872684085c96a3d5c1d00bad24b724", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1NDc5NzgzOTI4NzI2ODQwODVjOTZhM2Q1YzFkMDBiYWQyNGI3MjQ=", "commit": {"author": {"name": "Charles Gleason", "email": "charles_gleason@alumni.brown.edu", "date": "2019-11-22T19:22:06Z"}, "committer": {"name": "Charles Gleason", "email": "charles_gleason@alumni.brown.edu", "date": "2019-12-23T16:03:30Z"}, "message": "Implement clone_from for BTree collections", "tree": {"sha": "2b505f34afa213173edcd2979d9eae2ffcbdd9e3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b505f34afa213173edcd2979d9eae2ffcbdd9e3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f547978392872684085c96a3d5c1d00bad24b724", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f547978392872684085c96a3d5c1d00bad24b724", "html_url": "https://github.com/rust-lang/rust/commit/f547978392872684085c96a3d5c1d00bad24b724", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f547978392872684085c96a3d5c1d00bad24b724/comments", "author": {"login": "crgl", "id": 36055314, "node_id": "MDQ6VXNlcjM2MDU1MzE0", "avatar_url": "https://avatars.githubusercontent.com/u/36055314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crgl", "html_url": "https://github.com/crgl", "followers_url": "https://api.github.com/users/crgl/followers", "following_url": "https://api.github.com/users/crgl/following{/other_user}", "gists_url": "https://api.github.com/users/crgl/gists{/gist_id}", "starred_url": "https://api.github.com/users/crgl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crgl/subscriptions", "organizations_url": "https://api.github.com/users/crgl/orgs", "repos_url": "https://api.github.com/users/crgl/repos", "events_url": "https://api.github.com/users/crgl/events{/privacy}", "received_events_url": "https://api.github.com/users/crgl/received_events", "type": "User", "site_admin": false}, "committer": {"login": "crgl", "id": 36055314, "node_id": "MDQ6VXNlcjM2MDU1MzE0", "avatar_url": "https://avatars.githubusercontent.com/u/36055314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/crgl", "html_url": "https://github.com/crgl", "followers_url": "https://api.github.com/users/crgl/followers", "following_url": "https://api.github.com/users/crgl/following{/other_user}", "gists_url": "https://api.github.com/users/crgl/gists{/gist_id}", "starred_url": "https://api.github.com/users/crgl/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/crgl/subscriptions", "organizations_url": "https://api.github.com/users/crgl/orgs", "repos_url": "https://api.github.com/users/crgl/repos", "events_url": "https://api.github.com/users/crgl/events{/privacy}", "received_events_url": "https://api.github.com/users/crgl/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "293cdf7ac5d14811debdec3408afde104935caef", "url": "https://api.github.com/repos/rust-lang/rust/commits/293cdf7ac5d14811debdec3408afde104935caef", "html_url": "https://github.com/rust-lang/rust/commit/293cdf7ac5d14811debdec3408afde104935caef"}], "stats": {"total": 67, "additions": 66, "deletions": 1}, "files": [{"sha": "12174ffcbfa427d30acac33538f0eb26c66f7aa8", "filename": "src/liballoc/collections/btree/map.rs", "status": "modified", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/f547978392872684085c96a3d5c1d00bad24b724/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f547978392872684085c96a3d5c1d00bad24b724/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fmap.rs?ref=f547978392872684085c96a3d5c1d00bad24b724", "patch": "@@ -207,6 +207,60 @@ impl<K: Clone, V: Clone> Clone for BTreeMap<K, V> {\n             clone_subtree(self.root.as_ref())\n         }\n     }\n+\n+    fn clone_from(&mut self, other: &Self) {\n+        BTreeClone::clone_from(self, other);\n+    }\n+}\n+\n+trait BTreeClone {\n+    fn clone_from(&mut self, other: &Self);\n+}\n+\n+impl<K: Clone, V: Clone> BTreeClone for BTreeMap<K, V> {\n+    default fn clone_from(&mut self, other: &Self) {\n+        *self = other.clone();\n+    }\n+}\n+\n+impl<K: Clone + Ord, V: Clone> BTreeClone for BTreeMap<K, V> {\n+    fn clone_from(&mut self, other: &Self) {\n+        // This truncates `self` to `other.len()` by calling `split_off` on\n+        // the first key after `other.len()` elements if it exists\n+        if let Some(key) = {\n+            if self.len() > other.len() {\n+                let diff = self.len() - other.len();\n+                if diff <= other.len() {\n+                    self.iter().nth_back(diff - 1).map(|pair| (*pair.0).clone())\n+                } else {\n+                    self.iter().nth(other.len()).map(|pair| (*pair.0).clone())\n+                }\n+            } else {\n+                None\n+            }\n+        } {\n+            self.split_off(&key);\n+        }\n+        let mut siter = self.range_mut(..);\n+        let mut oiter = other.iter();\n+        // After truncation, `self` is at most as long as `other` so this loop\n+        // replaces every key-value pair in `self`. Since `oiter` is in sorted\n+        // order and the structure of the `BTreeMap` stays the same,\n+        // the BTree invariants are maintained at the end of the loop\n+        while siter.front != siter.back {\n+            if let Some((ok, ov)) = oiter.next() {\n+                // This is safe because the `siter.front != siter.back` check\n+                // ensures that `siter` is nonempty\n+                let (sk, sv) = unsafe { siter.next_unchecked() };\n+                sk.clone_from(ok);\n+                sv.clone_from(ov);\n+            } else {\n+                break;\n+            }\n+        }\n+        // If `other` is longer than `self`, the remaining elements are inserted\n+        self.extend(oiter.map(|(k, v)| ((*k).clone(), (*v).clone())));\n+    }\n }\n \n impl<K, Q: ?Sized> super::Recover<Q> for BTreeMap<K, ()>"}, {"sha": "5bdefe5cecf1b4f05f09e28178d6b7ff35b13c80", "filename": "src/liballoc/collections/btree/set.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f547978392872684085c96a3d5c1d00bad24b724/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f547978392872684085c96a3d5c1d00bad24b724/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fbtree%2Fset.rs?ref=f547978392872684085c96a3d5c1d00bad24b724", "patch": "@@ -56,12 +56,23 @@ use crate::collections::btree_map::{self, BTreeMap, Keys};\n ///     println!(\"{}\", book);\n /// }\n /// ```\n-#[derive(Clone, Hash, PartialEq, Eq, Ord, PartialOrd)]\n+#[derive(Hash, PartialEq, Eq, Ord, PartialOrd)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub struct BTreeSet<T> {\n     map: BTreeMap<T, ()>,\n }\n \n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+impl<T: Clone> Clone for BTreeSet<T> {\n+    fn clone(&self) -> Self {\n+        BTreeSet { map: self.map.clone() }\n+    }\n+\n+    fn clone_from(&mut self, other: &Self) {\n+        self.map.clone_from(&other.map);\n+    }\n+}\n+\n /// An iterator over the items of a `BTreeSet`.\n ///\n /// This `struct` is created by the [`iter`] method on [`BTreeSet`]."}]}