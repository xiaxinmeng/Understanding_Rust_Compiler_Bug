{"sha": "e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU5NjIyZjA5YWEwZDhjNzAwMjJmNGJmM2VhNTE2ZDczNDljMjk5MGM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-23T21:44:58Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-23T22:12:02Z"}, "message": "Remove match check from test cases", "tree": {"sha": "aa97104d17deb0b5243b649d0defe9ad309f5eb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aa97104d17deb0b5243b649d0defe9ad309f5eb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "html_url": "https://github.com/rust-lang/rust/commit/e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01a5845db56621d0dca7a30f2bda914d5deb8a4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/01a5845db56621d0dca7a30f2bda914d5deb8a4f", "html_url": "https://github.com/rust-lang/rust/commit/01a5845db56621d0dca7a30f2bda914d5deb8a4f"}], "stats": {"total": 96, "additions": 57, "deletions": 39}, "files": [{"sha": "a9604c7c533b7c4d2ea634a14034017a6637a7f2", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -19,26 +19,29 @@ fn calc(children: uint, parent_ch: comm::Chan<msg>) {\n     }\n \n     for iter::repeat (children) {\n-        match check comm::recv(port) {\n+        match comm::recv(port) {\n           ready(child_ch) => {\n             vec::push(child_chs, child_ch);\n           }\n+          _ => fail ~\"task-perf-one-million failed (port not ready)\"\n         }\n     }\n \n     comm::send(parent_ch, ready(chan));\n \n-    match check comm::recv(port) {\n+    match comm::recv(port) {\n         start => {\n           do vec::iter (child_chs) |child_ch| {\n               comm::send(child_ch, start);\n           }\n         }\n+        _ => fail ~\"task-perf-one-million failed (port not in start state)\"\n     }\n \n     for iter::repeat (children) {\n-        match check comm::recv(port) {\n+        match comm::recv(port) {\n           done(child_sum) => { sum += child_sum; }\n+          _ => fail ~\"task-perf-one-million failed (port not done)\"\n         }\n     }\n \n@@ -60,13 +63,15 @@ fn main(args: ~[~str]) {\n     do task::spawn {\n         calc(children, chan);\n     };\n-    match check comm::recv(port) {\n+    match comm::recv(port) {\n       ready(chan) => {\n         comm::send(chan, start);\n       }\n+      _ => fail ~\"task-perf-one-million failed (port not ready)\"\n     }\n-    let sum = match check comm::recv(port) {\n+    let sum = match comm::recv(port) {\n       done(sum) => { sum }\n+      _ => fail ~\"task-perf-one-million failed (port not done)\"\n     };\n     error!(\"How many tasks? %d tasks.\", sum);\n }"}, {"sha": "eff18df2a0ee87e30f85f0a9fd63541a7e4ee47a", "filename": "src/test/compile-fail/alt-range-fail-dominate.rs", "status": "modified", "additions": 10, "deletions": 5, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Fcompile-fail%2Falt-range-fail-dominate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Fcompile-fail%2Falt-range-fail-dominate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Falt-range-fail-dominate.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -5,28 +5,33 @@\n //error-pattern: unreachable\n \n fn main() {\n-    match check 5u {\n+    match 5u {\n       1u to 10u => { }\n       5u to 6u => { }\n+      _ => {}\n     };\n \n-    match check 5u {\n+    match 5u {\n       3u to 6u => { }\n       4u to 6u => { }\n+      _ => {}\n     };\n \n-    match check 5u {\n+    match 5u {\n       4u to 6u => { }\n       4u to 6u => { }\n+      _ => {}\n     };\n \n-    match check 'c' {\n+    match 'c' {\n       'A' to 'z' => {}\n       'a' to 'z' => {}\n+      _ => {}\n     };\n \n-    match check 1.0 {\n+    match 1.0 {\n       0.01 to 6.5 => {}\n       0.02 => {}\n+      _ => {}\n     };\n }\n\\ No newline at end of file"}, {"sha": "beab4d3409e1af93446098f48d742f45bca2e0b0", "filename": "src/test/compile-fail/borrowck-no-cycle-in-exchange-heap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-no-cycle-in-exchange-heap.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -5,9 +5,10 @@ enum cycle {\n fn main() {\n     let x = ~node({mut a: ~empty});\n     // Create a cycle!\n-    match check *x { //~ NOTE loan of immutable local variable granted here\n+    match *x { //~ NOTE loan of immutable local variable granted here\n       node(ref y) => {\n         y.a <- x; //~ ERROR moving out of immutable local variable prohibited due to outstanding loan\n       }\n+      empty => {}\n     };\n }"}, {"sha": "932372c2c0bcb4de37e35823bb0df19813b764ca", "filename": "src/test/compile-fail/liveness-missing-ret2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Fcompile-fail%2Fliveness-missing-ret2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Fcompile-fail%2Fliveness-missing-ret2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-missing-ret2.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -3,7 +3,7 @@\n fn f() -> int {\n     // Make sure typestate doesn't interpreturn this match expression\n     // as the function result\n-    match check true { true => { } };\n+   match true { true => { } _ => {} };\n }\n \n fn main() { }"}, {"sha": "2453ebf55c467531b5d5da4ca5d9bcffb23e5ecb", "filename": "src/test/pretty/block-disambig.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Fpretty%2Fblock-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fblock-disambig.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -8,7 +8,7 @@ fn test2() -> int { let val = @0; { } *val }\n \n fn test3() {\n     let regs = @{mut eax: 0};\n-    match check true { true => { } }\n+    match true { true => { } _ => { } }\n     (*regs).eax = 1;\n }\n \n@@ -20,14 +20,15 @@ fn test6() -> bool { { } (true || false) && true }\n \n fn test7() -> uint {\n     let regs = @0;\n-    match check true { true => { } }\n+    match true { true => { } _ => { } }\n     (*regs < 2) as uint\n }\n \n fn test8() -> int {\n     let val = @0;\n-    match check true {\n+    match true {\n         true => { }\n+        _    => { }\n     }\n     if *val < 1 {\n         0\n@@ -36,11 +37,11 @@ fn test8() -> int {\n     }\n }\n \n-fn test9() { let regs = @mut 0; match check true { true => { } } *regs += 1; }\n+fn test9() { let regs = @mut 0; match true { true => { } _ => { } } *regs += 1; }\n \n fn test10() -> int {\n     let regs = @mut ~[0];\n-    match check true { true => { } }\n+    match true { true => { } _ => { } }\n     (*regs)[0]\n }\n "}, {"sha": "ec79341576c50c892f2b4fe2389ace30fb14b067", "filename": "src/test/pretty/unary-op-disambig.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Fpretty%2Funary-op-disambig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Fpretty%2Funary-op-disambig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Funary-op-disambig.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -10,8 +10,8 @@ fn if_semi() -> int { if true { f() } else { f() }; -1 }\n \n fn if_nosemi() -> int { (if true { 0 } else { 0 }) - 1 }\n \n-fn alt_semi() -> int { match check true { true => { f() } }; -1 }\n+fn alt_semi() -> int { match true { true => { f() } _ => { } }; -1 }\n \n-fn alt_no_semi() -> int { (match check true { true => { 0 } }) - 1 }\n+fn alt_no_semi() -> int { (match true { true => { 0 } _ => { 1 } }) - 1 }\n \n fn stmt() { { f() }; -1; }"}, {"sha": "b8696bec083f58597d2d84a14e2f3e28cc66e2d8", "filename": "src/test/run-fail/alt-wildcards.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-fail%2Falt-wildcards.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-fail%2Falt-wildcards.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Falt-wildcards.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -1,8 +1,9 @@\n // error-pattern:squirrelcupcake\n fn cmp() -> int {\n-    match check (option::some('a'), option::none::<char>) {\n+    match (option::some('a'), option::none::<char>) {\n         (option::some(_), _) => { fail ~\"squirrelcupcake\"; }\n         (_, option::some(_)) => { fail; }\n+        _                    => { fail ~\"wat\"; }\n     }\n }\n "}, {"sha": "3c09b01495f7c5e189f0f0309e1d7f8e6f2b78fc", "filename": "src/test/run-fail/unwind-alt.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-fail%2Funwind-alt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-fail%2Funwind-alt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-alt.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -4,8 +4,9 @@ fn test_box() {\n     @0;\n }\n fn test_str() {\n-    let res = match check false { true => { ~\"happy\" } };\n-    assert res == ~\"happy\";\n+  let res = match false { true => { ~\"happy\" },\n+     _ => fail ~\"non-exhaustive match failure\" };\n+  assert res == ~\"happy\";\n }\n fn main() {\n     test_box();"}, {"sha": "4e7493ce1067662ba64e2f66459b6e04bd48ea6d", "filename": "src/test/run-pass/alt-bot-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Falt-bot-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Falt-bot-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-bot-2.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -1,3 +1,3 @@\n // n.b. This was only ever failing with optimization disabled.\n-fn a() -> int { match check return 1 { 2 => 3 } }\n+fn a() -> int { match return 1 { 2 => 3, _ => fail } }\n fn main() { a(); }"}, {"sha": "62ca1adb81773dd0a59259e093e77c5cd0f99d01", "filename": "src/test/run-pass/alt-pattern-lit.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Falt-pattern-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Falt-pattern-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-lit.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -1,9 +1,10 @@\n \n \n fn altlit(f: int) -> int {\n-    match check f {\n+    match f {\n       10 => { debug!(\"case 10\"); return 20; }\n       11 => { debug!(\"case 11\"); return 22; }\n+      _  => fail ~\"the impossible happened\"\n     }\n }\n "}, {"sha": "b80a6832583c03d5563c85ae6afafe99d04d1cf1", "filename": "src/test/run-pass/alt-range.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Falt-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Falt-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-range.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -7,9 +7,10 @@ fn main() {\n       6u..7u => fail ~\"shouldn't match range\",\n       _ => {}\n     }\n-    match check 5u {\n+    match 5u {\n       1u => fail ~\"should match non-first range\",\n       2u..6u => {}\n+      _ => fail ~\"math is broken\"\n     }\n     match 'c' {\n       'a'..'z' => {}"}, {"sha": "03f49b8675a8ee259030f5b33febb91b33513544", "filename": "src/test/run-pass/alt-str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Falt-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Falt-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-str.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -1,7 +1,7 @@\n // Issue #53\n \n fn main() {\n-    match check ~\"test\" { ~\"not-test\" => fail, ~\"test\" => (), _ => fail }\n+    match ~\"test\" { ~\"not-test\" => fail, ~\"test\" => (), _ => fail }\n \n     enum t { tag1(~str), tag2, }\n \n@@ -13,9 +13,9 @@ fn main() {\n       _ => fail\n     }\n \n-    let x = match check ~\"a\" { ~\"a\" => 1, ~\"b\" => 2 };\n+    let x = match ~\"a\" { ~\"a\" => 1, ~\"b\" => 2, _ => fail };\n     assert (x == 1);\n \n-    match check ~\"a\" { ~\"a\" => { } ~\"b\" => { } }\n+    match ~\"a\" { ~\"a\" => { } ~\"b\" => { }, _ => fail }\n \n }"}, {"sha": "d77b276acc73a24e438f2e27b511bd197ad34429", "filename": "src/test/run-pass/binary-minus-without-space.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -1,6 +1,6 @@\n // Check that issue #954 stays fixed\n \n fn main() {\n-    match check -1 { -1 => {} }\n+    match -1 { -1 => {}, _ => fail ~\"wat\" }\n     assert 1-1 == 0;\n }"}, {"sha": "8fe7a4e4bc1d7f4b603bd54615e168da58508afa", "filename": "src/test/run-pass/expr-alt-box.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fexpr-alt-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fexpr-alt-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-box.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -5,12 +5,13 @@\n \n // Tests for match as expressions resulting in boxed types\n fn test_box() {\n-    let res = match check true { true => { @100 } };\n+    let res = match true { true => { @100 } _ => fail ~\"wat\" };\n     assert (*res == 100);\n }\n \n fn test_str() {\n-    let res = match check true { true => { ~\"happy\" } };\n+    let res = match true { true => { ~\"happy\" },\n+                         _ => fail ~\"not happy at all\" };\n     assert (res == ~\"happy\");\n }\n "}, {"sha": "de6a66754b5352b29a634e77b3ab2ad151531928", "filename": "src/test/run-pass/expr-alt-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -5,7 +5,7 @@\n type compare<T> = fn@(@T, @T) -> bool;\n \n fn test_generic<T>(expected: @T, eq: compare<T>) {\n-    let actual: @T = match check true { true => { expected } };\n+    let actual: @T = match true { true => { expected }, _ => fail };\n     assert (eq(expected, actual));\n }\n "}, {"sha": "ad3436c2b8f4f1866dae41c9bc9046257bb37a6c", "filename": "src/test/run-pass/expr-alt-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -5,7 +5,7 @@\n type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<T: copy>(expected: T, eq: compare<T>) {\n-    let actual: T = match check true { true => { expected } };\n+    let actual: T = match true { true => { expected }, _ => fail ~\"wat\" };\n     assert (eq(expected, actual));\n }\n "}, {"sha": "a227931180f297deab82ad7bca83fa7774dd0a75", "filename": "src/test/run-pass/expr-alt-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -4,7 +4,7 @@\n type compare<T> = fn@(~T, ~T) -> bool;\n \n fn test_generic<T: copy>(expected: ~T, eq: compare<T>) {\n-    let actual: ~T = match check true { true => { expected } };\n+    let actual: ~T = match true { true => { expected }, _ => fail ~\"wat\" };\n     assert (eq(expected, actual));\n }\n "}, {"sha": "d92cde5d82a54251ed5f2c6d36fe49ff1f23eca7", "filename": "src/test/run-pass/expr-alt-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -5,7 +5,7 @@\n type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<T: copy>(expected: T, eq: compare<T>) {\n-    let actual: T = match check true { true => { expected } };\n+    let actual: T = match true { true => expected, _ => fail ~\"wat\" };\n     assert (eq(expected, actual));\n }\n "}, {"sha": "8591e97e0acea8e608e33a1847e54ad1020d9d6e", "filename": "src/test/run-pass/expr-alt-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -5,7 +5,7 @@\n type compare<T> = fn@(T, T) -> bool;\n \n fn test_generic<T: copy>(expected: T, eq: compare<T>) {\n-    let actual: T = match check true { true => { expected } };\n+  let actual: T = match true { true => { expected }, _ => fail ~\"wat\" };\n     assert (eq(expected, actual));\n }\n "}, {"sha": "13f33255f4cf7ccf671a63e2df3cc892865bcbf4", "filename": "src/test/run-pass/expr-alt-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -5,7 +5,7 @@\n \n // Tests for match as expressions resulting in structural types\n fn test_rec() {\n-    let rs = match check true { true => { {i: 100} } };\n+    let rs = match true { true => {i: 100}, _ => fail };\n     assert (rs == {i: 100});\n }\n "}, {"sha": "e20afdcc45d0969d6fb0a3f5f39598663138a61a", "filename": "src/test/run-pass/expr-alt-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fexpr-alt-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fexpr-alt-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-unique.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -5,7 +5,7 @@\n \n // Tests for match as expressions resulting in boxed types\n fn test_box() {\n-    let res = match check true { true => { ~100 } };\n+    let res = match true { true => { ~100 }, _ => fail };\n     assert (*res == 100);\n }\n "}, {"sha": "cd5d4594a4131589804f2faf0822d8beb5f2551f", "filename": "src/test/run-pass/weird-exprs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e9622f09aa0d8c70022f4bf3ea516d7349c2990c/src%2Ftest%2Frun-pass%2Fweird-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fweird-exprs.rs?ref=e9622f09aa0d8c70022f4bf3ea516d7349c2990c", "patch": "@@ -59,7 +59,8 @@ fn canttouchthis() -> uint {\n fn angrydome() {\n     loop { if break { } }\n     let mut i = 0;\n-    loop { i += 1; if i == 1 { match check again { 1 => { } } } break; }\n+    loop { i += 1; if i == 1 { match again { 1 => { }, _ => fail ~\"wat\" } }\n+      break; }\n }\n \n fn evil_lincoln() { let evil <- debug!(\"lincoln\"); }"}]}