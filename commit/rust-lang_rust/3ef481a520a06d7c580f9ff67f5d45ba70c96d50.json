{"sha": "3ef481a520a06d7c580f9ff67f5d45ba70c96d50", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlZjQ4MWE1MjBhMDZkN2M1ODBmOWZmNjdmNWQ0NWJhNzBjOTZkNTA=", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2018-05-11T13:00:09Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2018-05-15T13:47:31Z"}, "message": "Remove hir::ScopeTarget\n\nWhen we want to implement label-break-value,\nwe can't really decide whether to emit ScopeTarget::Loop or\nScopeTarget::Block in the code that is supposed to create it.\nSo we get rid of it and reconstruct the information when\nneeded.", "tree": {"sha": "c28bb5475b940d5f70645fc2e7729a368908c57c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c28bb5475b940d5f70645fc2e7729a368908c57c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ef481a520a06d7c580f9ff67f5d45ba70c96d50", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ef481a520a06d7c580f9ff67f5d45ba70c96d50", "html_url": "https://github.com/rust-lang/rust/commit/3ef481a520a06d7c580f9ff67f5d45ba70c96d50", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ef481a520a06d7c580f9ff67f5d45ba70c96d50/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eca0da59850d4a9eef17c0e6c3795397102d88a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/eca0da59850d4a9eef17c0e6c3795397102d88a3", "html_url": "https://github.com/rust-lang/rust/commit/eca0da59850d4a9eef17c0e6c3795397102d88a3"}], "stats": {"total": 136, "additions": 51, "deletions": 85}, "files": [{"sha": "96be361ee8a1592247b6993939ff97cbd3a9669c", "filename": "src/librustc/cfg/construct.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3ef481a520a06d7c580f9ff67f5d45ba70c96d50/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef481a520a06d7c580f9ff67f5d45ba70c96d50/src%2Flibrustc%2Fcfg%2Fconstruct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fcfg%2Fconstruct.rs?ref=3ef481a520a06d7c580f9ff67f5d45ba70c96d50", "patch": "@@ -582,19 +582,16 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                   scope_cf_kind: ScopeCfKind) -> (region::Scope, CFGIndex) {\n \n         match destination.target_id {\n-            hir::ScopeTarget::Block(block_expr_id) => {\n+            hir::LoopIdResult::Ok(loop_id) => {\n                 for b in &self.breakable_block_scopes {\n-                    if b.block_expr_id == self.tcx.hir.node_to_hir_id(block_expr_id).local_id {\n-                        let scope_id = self.tcx.hir.node_to_hir_id(block_expr_id).local_id;\n+                    if b.block_expr_id == self.tcx.hir.node_to_hir_id(loop_id).local_id {\n+                        let scope_id = self.tcx.hir.node_to_hir_id(loop_id).local_id;\n                         return (region::Scope::Node(scope_id), match scope_cf_kind {\n                             ScopeCfKind::Break => b.break_index,\n                             ScopeCfKind::Continue => bug!(\"can't continue to block\"),\n                         });\n                     }\n                 }\n-                span_bug!(expr.span, \"no block expr for id {}\", block_expr_id);\n-            }\n-            hir::ScopeTarget::Loop(hir::LoopIdResult::Ok(loop_id)) => {\n                 for l in &self.loop_scopes {\n                     if l.loop_id == self.tcx.hir.node_to_hir_id(loop_id).local_id {\n                         let scope_id = self.tcx.hir.node_to_hir_id(loop_id).local_id;\n@@ -604,10 +601,9 @@ impl<'a, 'tcx> CFGBuilder<'a, 'tcx> {\n                         });\n                     }\n                 }\n-                span_bug!(expr.span, \"no loop scope for id {}\", loop_id);\n+                span_bug!(expr.span, \"no scope for id {}\", loop_id);\n             }\n-            hir::ScopeTarget::Loop(hir::LoopIdResult::Err(err)) =>\n-                span_bug!(expr.span, \"loop scope error: {}\",  err),\n+            hir::LoopIdResult::Err(err) => span_bug!(expr.span, \"scope error: {}\",  err),\n         }\n     }\n }"}, {"sha": "fb10e33ef33b75b4e98eaca23300424cd035d7bf", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ef481a520a06d7c580f9ff67f5d45ba70c96d50/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef481a520a06d7c580f9ff67f5d45ba70c96d50/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=3ef481a520a06d7c580f9ff67f5d45ba70c96d50", "patch": "@@ -1039,10 +1039,9 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             if let Some(ref label) = destination.label {\n                 visitor.visit_label(label);\n                 match destination.target_id {\n-                    ScopeTarget::Block(node_id) |\n-                    ScopeTarget::Loop(LoopIdResult::Ok(node_id)) =>\n+                    LoopIdResult::Ok(node_id) =>\n                         visitor.visit_def_mention(Def::Label(node_id)),\n-                    ScopeTarget::Loop(LoopIdResult::Err(_)) => {},\n+                    LoopIdResult::Err(_) => {},\n                 };\n             }\n             walk_list!(visitor, visit_expr, opt_expr);\n@@ -1051,10 +1050,9 @@ pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n             if let Some(ref label) = destination.label {\n                 visitor.visit_label(label);\n                 match destination.target_id {\n-                    ScopeTarget::Block(_) => bug!(\"can't `continue` to a non-loop block\"),\n-                    ScopeTarget::Loop(LoopIdResult::Ok(node_id)) =>\n+                    LoopIdResult::Ok(node_id) =>\n                         visitor.visit_def_mention(Def::Label(node_id)),\n-                    ScopeTarget::Loop(LoopIdResult::Err(_)) => {},\n+                    LoopIdResult::Err(_) => {},\n                 };\n             }\n         }"}, {"sha": "c5fbf9758624e7c2f73be8e206d535d3c8f3441a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/3ef481a520a06d7c580f9ff67f5d45ba70c96d50/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef481a520a06d7c580f9ff67f5d45ba70c96d50/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=3ef481a520a06d7c580f9ff67f5d45ba70c96d50", "patch": "@@ -928,29 +928,27 @@ impl<'a> LoweringContext<'a> {\n     fn lower_loop_destination(&mut self, destination: Option<(NodeId, Label)>) -> hir::Destination {\n         match destination {\n             Some((id, label)) => {\n-                let target = if let Def::Label(loop_id) = self.expect_full_def(id) {\n+                let target_id = if let Def::Label(loop_id) = self.expect_full_def(id) {\n                     hir::LoopIdResult::Ok(self.lower_node_id(loop_id).node_id)\n                 } else {\n                     hir::LoopIdResult::Err(hir::LoopIdError::UnresolvedLabel)\n                 };\n                 hir::Destination {\n                     label: self.lower_label(Some(label)),\n-                    target_id: hir::ScopeTarget::Loop(target),\n+                    target_id,\n                 }\n             }\n             None => {\n-                let loop_id = self.loop_scopes\n+                let target_id = self.loop_scopes\n                     .last()\n-                    .map(|innermost_loop_id| *innermost_loop_id);\n+                    .map(|innermost_loop_id| *innermost_loop_id)\n+                    .map(|id| Ok(self.lower_node_id(id).node_id))\n+                    .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope))\n+                    .into();\n \n                 hir::Destination {\n                     label: None,\n-                    target_id: hir::ScopeTarget::Loop(\n-                        loop_id\n-                            .map(|id| Ok(self.lower_node_id(id).node_id))\n-                            .unwrap_or(Err(hir::LoopIdError::OutsideLoopScope))\n-                            .into(),\n-                    ),\n+                    target_id,\n                 }\n             }\n         }\n@@ -3193,9 +3191,7 @@ impl<'a> LoweringContext<'a> {\n                 let destination = if self.is_in_loop_condition && opt_label.is_none() {\n                     hir::Destination {\n                         label: None,\n-                        target_id: hir::ScopeTarget::Loop(\n-                            Err(hir::LoopIdError::UnlabeledCfInWhileCondition).into(),\n-                        ),\n+                        target_id: Err(hir::LoopIdError::UnlabeledCfInWhileCondition).into(),\n                     }\n                 } else {\n                     self.lower_loop_destination(opt_label.map(|label| (e.id, label)))\n@@ -3209,9 +3205,7 @@ impl<'a> LoweringContext<'a> {\n                 hir::ExprAgain(if self.is_in_loop_condition && opt_label.is_none() {\n                     hir::Destination {\n                         label: None,\n-                        target_id: hir::ScopeTarget::Loop(\n-                            Err(hir::LoopIdError::UnlabeledCfInWhileCondition).into(),\n-                        ),\n+                        target_id: Err(hir::LoopIdError::UnlabeledCfInWhileCondition).into(),\n                     }\n                 } else {\n                     self.lower_loop_destination(opt_label.map(|label| (e.id, label)))\n@@ -3604,7 +3598,7 @@ impl<'a> LoweringContext<'a> {\n                             hir::ExprBreak(\n                                 hir::Destination {\n                                     label: None,\n-                                    target_id: hir::ScopeTarget::Block(catch_node),\n+                                    target_id: hir::LoopIdResult::Ok(catch_node),\n                                 },\n                                 Some(from_err_expr),\n                             ),"}, {"sha": "4ab9c4936571546feebb292b91d5f0e20f57dd5c", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3ef481a520a06d7c580f9ff67f5d45ba70c96d50/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef481a520a06d7c580f9ff67f5d45ba70c96d50/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=3ef481a520a06d7c580f9ff67f5d45ba70c96d50", "patch": "@@ -1526,18 +1526,11 @@ impl From<Result<NodeId, LoopIdError>> for LoopIdResult {\n     }\n }\n \n-#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]\n-pub enum ScopeTarget {\n-    Block(NodeId),\n-    Loop(LoopIdResult),\n-}\n-\n-impl ScopeTarget {\n-    pub fn opt_id(self) -> Option<NodeId> {\n+impl LoopIdResult {\n+    pub fn ok(self) -> Option<NodeId> {\n         match self {\n-            ScopeTarget::Block(node_id) |\n-            ScopeTarget::Loop(LoopIdResult::Ok(node_id)) => Some(node_id),\n-            ScopeTarget::Loop(LoopIdResult::Err(_)) => None,\n+            LoopIdResult::Ok(node_id) => Some(node_id),\n+            LoopIdResult::Err(_) => None,\n         }\n     }\n }\n@@ -1549,7 +1542,7 @@ pub struct Destination {\n \n     // These errors are caught and then reported during the diagnostics pass in\n     // librustc_passes/loops.rs\n-    pub target_id: ScopeTarget,\n+    pub target_id: LoopIdResult,\n }\n \n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug, Copy)]"}, {"sha": "daf59cafc164f90ee643c0049f28d40467116418", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ef481a520a06d7c580f9ff67f5d45ba70c96d50/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef481a520a06d7c580f9ff67f5d45ba70c96d50/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=3ef481a520a06d7c580f9ff67f5d45ba70c96d50", "patch": "@@ -667,11 +667,6 @@ impl_stable_hash_for!(enum hir::LoopIdError {\n     UnresolvedLabel\n });\n \n-impl_stable_hash_for!(enum hir::ScopeTarget {\n-    Block(node_id),\n-    Loop(loop_id_result)\n-});\n-\n impl<'a> HashStable<StableHashingContext<'a>> for ast::Ident {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,"}, {"sha": "a9436da5a3b7eb98a8385b2ecc3809377724d125", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 5, "deletions": 13, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3ef481a520a06d7c580f9ff67f5d45ba70c96d50/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef481a520a06d7c580f9ff67f5d45ba70c96d50/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=3ef481a520a06d7c580f9ff67f5d45ba70c96d50", "patch": "@@ -571,9 +571,6 @@ struct Liveness<'a, 'tcx: 'a> {\n     // it probably doesn't now)\n     break_ln: NodeMap<LiveNode>,\n     cont_ln: NodeMap<LiveNode>,\n-\n-    // mappings from node ID to LiveNode for \"breakable\" blocks-- currently only `catch {...}`\n-    breakable_block_ln: NodeMap<LiveNode>,\n }\n \n impl<'a, 'tcx> Liveness<'a, 'tcx> {\n@@ -601,7 +598,6 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n             users: vec![invalid_users(); num_live_nodes * num_vars],\n             break_ln: NodeMap(),\n             cont_ln: NodeMap(),\n-            breakable_block_ln: NodeMap(),\n         }\n     }\n \n@@ -870,7 +866,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n     fn propagate_through_block(&mut self, blk: &hir::Block, succ: LiveNode)\n                                -> LiveNode {\n         if blk.targeted_by_break {\n-            self.breakable_block_ln.insert(blk.id, succ);\n+            self.break_ln.insert(blk.id, succ);\n         }\n         let succ = self.propagate_through_opt_expr(blk.expr.as_ref().map(|e| &**e), succ);\n         blk.stmts.iter().rev().fold(succ, |succ, stmt| {\n@@ -1055,11 +1051,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n           hir::ExprBreak(label, ref opt_expr) => {\n               // Find which label this break jumps to\n               let target = match label.target_id {\n-                    hir::ScopeTarget::Block(node_id) =>\n-                        self.breakable_block_ln.get(&node_id),\n-                    hir::ScopeTarget::Loop(hir::LoopIdResult::Ok(node_id)) =>\n-                        self.break_ln.get(&node_id),\n-                    hir::ScopeTarget::Loop(hir::LoopIdResult::Err(err)) =>\n+                    hir::LoopIdResult::Ok(node_id) => self.break_ln.get(&node_id),\n+                    hir::LoopIdResult::Err(err) =>\n                         span_bug!(expr.span, \"loop scope error: {}\", err),\n               }.map(|x| *x);\n \n@@ -1075,9 +1068,8 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n           hir::ExprAgain(label) => {\n               // Find which label this expr continues to\n               let sc = match label.target_id {\n-                    hir::ScopeTarget::Block(_) => bug!(\"can't `continue` to a non-loop block\"),\n-                    hir::ScopeTarget::Loop(hir::LoopIdResult::Ok(node_id)) => node_id,\n-                    hir::ScopeTarget::Loop(hir::LoopIdResult::Err(err)) =>\n+                    hir::LoopIdResult::Ok(node_id) => node_id,\n+                    hir::LoopIdResult::Err(err) =>\n                         span_bug!(expr.span, \"loop scope error: {}\", err),\n               };\n "}, {"sha": "50096a7a79ec070ef05c2c9bd6817263d0be19c0", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3ef481a520a06d7c580f9ff67f5d45ba70c96d50/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef481a520a06d7c580f9ff67f5d45ba70c96d50/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=3ef481a520a06d7c580f9ff67f5d45ba70c96d50", "patch": "@@ -536,22 +536,20 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n         hir::ExprRet(ref v) => ExprKind::Return { value: v.to_ref() },\n         hir::ExprBreak(dest, ref value) => {\n             match dest.target_id {\n-                hir::ScopeTarget::Block(target_id) |\n-                hir::ScopeTarget::Loop(hir::LoopIdResult::Ok(target_id)) => ExprKind::Break {\n+                hir::LoopIdResult::Ok(target_id) => ExprKind::Break {\n                     label: region::Scope::Node(cx.tcx.hir.node_to_hir_id(target_id).local_id),\n                     value: value.to_ref(),\n                 },\n-                hir::ScopeTarget::Loop(hir::LoopIdResult::Err(err)) =>\n+                hir::LoopIdResult::Err(err) =>\n                     bug!(\"invalid loop id for break: {}\", err)\n             }\n         }\n         hir::ExprAgain(dest) => {\n             match dest.target_id {\n-                hir::ScopeTarget::Block(_) => bug!(\"cannot continue to blocks\"),\n-                hir::ScopeTarget::Loop(hir::LoopIdResult::Ok(loop_id)) => ExprKind::Continue {\n+                hir::LoopIdResult::Ok(loop_id) => ExprKind::Continue {\n                     label: region::Scope::Node(cx.tcx.hir.node_to_hir_id(loop_id).local_id),\n                 },\n-                hir::ScopeTarget::Loop(hir::LoopIdResult::Err(err)) =>\n+                hir::LoopIdResult::Err(err) =>\n                     bug!(\"invalid loop id for continue: {}\", err)\n             }\n         }"}, {"sha": "aebffbbb0b4593c93950610cc014cf4c67327499", "filename": "src/librustc_passes/loops.rs", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/3ef481a520a06d7c580f9ff67f5d45ba70c96d50/src%2Flibrustc_passes%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef481a520a06d7c580f9ff67f5d45ba70c96d50/src%2Flibrustc_passes%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Floops.rs?ref=3ef481a520a06d7c580f9ff67f5d45ba70c96d50", "patch": "@@ -85,20 +85,21 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                 self.with_context(Closure, |v| v.visit_nested_body(b));\n             }\n             hir::ExprBreak(label, ref opt_expr) => {\n-                let loop_id = match label.target_id {\n-                    hir::ScopeTarget::Block(_) => return,\n-                    hir::ScopeTarget::Loop(loop_res) => {\n-                        match loop_res.into() {\n-                            Ok(loop_id) => loop_id,\n-                            Err(hir::LoopIdError::OutsideLoopScope) => ast::DUMMY_NODE_ID,\n-                            Err(hir::LoopIdError::UnlabeledCfInWhileCondition) => {\n-                                self.emit_unlabled_cf_in_while_condition(e.span, \"break\");\n-                                ast::DUMMY_NODE_ID\n-                            },\n-                            Err(hir::LoopIdError::UnresolvedLabel) => ast::DUMMY_NODE_ID,\n-                        }\n-                    }\n+                let loop_id = match label.target_id.into() {\n+                    Ok(loop_id) => loop_id,\n+                    Err(hir::LoopIdError::OutsideLoopScope) => ast::DUMMY_NODE_ID,\n+                    Err(hir::LoopIdError::UnlabeledCfInWhileCondition) => {\n+                        self.emit_unlabled_cf_in_while_condition(e.span, \"break\");\n+                        ast::DUMMY_NODE_ID\n+                    },\n+                    Err(hir::LoopIdError::UnresolvedLabel) => ast::DUMMY_NODE_ID,\n                 };\n+                if loop_id != ast::DUMMY_NODE_ID {\n+                    match self.hir_map.find(loop_id).unwrap() {\n+                        hir::map::NodeBlock(_) => return,\n+                        _=> (),\n+                    }\n+                }\n \n                 if opt_expr.is_some() {\n                     let loop_kind = if loop_id == ast::DUMMY_NODE_ID {\n@@ -132,9 +133,8 @@ impl<'a, 'hir> Visitor<'hir> for CheckLoopVisitor<'a, 'hir> {\n                 self.require_loop(\"break\", e.span);\n             }\n             hir::ExprAgain(label) => {\n-                if let hir::ScopeTarget::Loop(\n-                    hir::LoopIdResult::Err(\n-                        hir::LoopIdError::UnlabeledCfInWhileCondition)) = label.target_id {\n+                if let hir::LoopIdResult::Err(\n+                        hir::LoopIdError::UnlabeledCfInWhileCondition) = label.target_id {\n                     self.emit_unlabled_cf_in_while_condition(e.span, \"continue\");\n                 }\n                 self.require_loop(\"continue\", e.span)"}, {"sha": "3c2e930fa65e8afe38be9aa2808c1d6994623147", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ef481a520a06d7c580f9ff67f5d45ba70c96d50/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ef481a520a06d7c580f9ff67f5d45ba70c96d50/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3ef481a520a06d7c580f9ff67f5d45ba70c96d50", "patch": "@@ -3723,7 +3723,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n               tcx.mk_nil()\n           }\n           hir::ExprBreak(destination, ref expr_opt) => {\n-              if let Some(target_id) = destination.target_id.opt_id() {\n+              if let Some(target_id) = destination.target_id.ok() {\n                   let (e_ty, cause);\n                   if let Some(ref e) = *expr_opt {\n                       // If this is a break with a value, we need to type-check"}]}