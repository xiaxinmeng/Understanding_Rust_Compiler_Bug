{"sha": "e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1NmM0MDA0MzI2Y2I4M2VjNDMzNzg4ZmE4ZjJmYzZjZDRkZDM5MWE=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-27T19:26:20Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-04-28T09:34:17Z"}, "message": "Use the query system to allocate.", "tree": {"sha": "8e2fc51716e08c8b7e00182d681da3f63bee4ce5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e2fc51716e08c8b7e00182d681da3f63bee4ce5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "html_url": "https://github.com/rust-lang/rust/commit/e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b", "html_url": "https://github.com/rust-lang/rust/commit/bd42ef6e4fb5c62c2c74bddb4dfb98603d12c20b"}], "stats": {"total": 341, "additions": 137, "deletions": 204}, "files": [{"sha": "93577d64157a0039d1ac96de791965059d5ff403", "filename": "src/librustc_codegen_llvm/attributes.rs", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_codegen_llvm%2Fattributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fattributes.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -347,15 +347,12 @@ pub fn provide(providers: &mut Providers<'_>) {\n         if tcx.sess.opts.actually_rustdoc {\n             // rustdoc needs to be able to document functions that use all the features, so\n             // whitelist them all\n-            tcx.arena\n-                .alloc(llvm_util::all_known_features().map(|(a, b)| (a.to_string(), b)).collect())\n+            llvm_util::all_known_features().map(|(a, b)| (a.to_string(), b)).collect()\n         } else {\n-            tcx.arena.alloc(\n-                llvm_util::target_feature_whitelist(tcx.sess)\n-                    .iter()\n-                    .map(|&(a, b)| (a.to_string(), b))\n-                    .collect(),\n-            )\n+            llvm_util::target_feature_whitelist(tcx.sess)\n+                .iter()\n+                .map(|&(a, b)| (a.to_string(), b))\n+                .collect()\n         }\n     };\n \n@@ -387,7 +384,7 @@ pub fn provide_extern(providers: &mut Providers<'_>) {\n             }));\n         }\n \n-        tcx.arena.alloc(ret)\n+        ret\n     };\n }\n "}, {"sha": "338211ca11f3cd0bc6188a706c9436c1b1150158", "filename": "src/librustc_codegen_ssa/back/symbol_export.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fback%2Fsymbol_export.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -42,14 +42,11 @@ pub fn crates_export_threshold(crate_types: &[config::CrateType]) -> SymbolExpor\n     }\n }\n \n-fn reachable_non_generics_provider(\n-    tcx: TyCtxt<'_>,\n-    cnum: CrateNum,\n-) -> &DefIdMap<SymbolExportLevel> {\n+fn reachable_non_generics_provider(tcx: TyCtxt<'_>, cnum: CrateNum) -> DefIdMap<SymbolExportLevel> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     if !tcx.sess.opts.output_types.should_codegen() {\n-        return tcx.arena.alloc(Default::default());\n+        return Default::default();\n     }\n \n     // Check to see if this crate is a \"special runtime crate\". These\n@@ -145,7 +142,7 @@ fn reachable_non_generics_provider(\n         reachable_non_generics.insert(id, SymbolExportLevel::C);\n     }\n \n-    tcx.arena.alloc(reachable_non_generics)\n+    reachable_non_generics\n }\n \n fn is_reachable_non_generic_provider_local(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n@@ -281,7 +278,7 @@ fn exported_symbols_provider_local(\n fn upstream_monomorphizations_provider(\n     tcx: TyCtxt<'_>,\n     cnum: CrateNum,\n-) -> &DefIdMap<FxHashMap<SubstsRef<'_>, CrateNum>> {\n+) -> DefIdMap<FxHashMap<SubstsRef<'_>, CrateNum>> {\n     debug_assert!(cnum == LOCAL_CRATE);\n \n     let cnums = tcx.all_crate_nums(LOCAL_CRATE);\n@@ -338,7 +335,7 @@ fn upstream_monomorphizations_provider(\n         }\n     }\n \n-    tcx.arena.alloc(instances)\n+    instances\n }\n \n fn upstream_monomorphizations_for_provider("}, {"sha": "fc6b547c5e70c79cd6bca2fcd68b439ce20a9ea7", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -908,7 +908,7 @@ pub fn provide_both(providers: &mut Providers<'_>) {\n             .map(|id| &module_map[&id])\n             .flat_map(|module| module.foreign_items.iter().cloned())\n             .collect();\n-        tcx.arena.alloc(dllimports)\n+        dllimports\n     };\n \n     providers.is_dllimport_foreign_item ="}, {"sha": "7e8e4f59707c1bef3bdbd00649bc7cad1302432a", "filename": "src/librustc_lint/levels.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_lint%2Flevels.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_lint%2Flevels.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flevels.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -22,7 +22,7 @@ use rustc_span::symbol::{sym, Symbol};\n \n use std::cmp;\n \n-fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> &LintLevelMap {\n+fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> LintLevelMap {\n     assert_eq!(cnum, LOCAL_CRATE);\n     let store = unerased_lint_store(tcx);\n     let levels = LintLevelsBuilder::new(tcx.sess, false, &store);\n@@ -37,7 +37,7 @@ fn lint_levels(tcx: TyCtxt<'_>, cnum: CrateNum) -> &LintLevelMap {\n     intravisit::walk_crate(&mut builder, krate);\n     builder.levels.pop(push);\n \n-    tcx.arena.alloc(builder.levels.build_map())\n+    builder.levels.build_map()\n }\n \n pub struct LintLevelsBuilder<'s> {"}, {"sha": "dbfa675e0117d7a206c93e57d05be14f5f0353d8", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -798,7 +798,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         )\n     }\n \n-    fn get_adt_def(&self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> &'tcx ty::AdtDef {\n+    fn get_adt_def(&self, item_id: DefIndex, tcx: TyCtxt<'tcx>) -> ty::AdtDef {\n         let kind = self.kind(item_id);\n         let did = self.local_def_id(item_id);\n \n@@ -939,8 +939,8 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n     }\n \n     /// Iterates over the diagnostic items in the given crate.\n-    fn get_diagnostic_items(&self, tcx: TyCtxt<'tcx>) -> &'tcx FxHashMap<Symbol, DefId> {\n-        tcx.arena.alloc(if self.root.is_proc_macro_crate() {\n+    fn get_diagnostic_items(&self) -> FxHashMap<Symbol, DefId> {\n+        if self.root.is_proc_macro_crate() {\n             // Proc macro crates do not export any diagnostic-items to the target.\n             Default::default()\n         } else {\n@@ -949,7 +949,7 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n                 .decode(self)\n                 .map(|(name, def_index)| (name, self.local_def_id(def_index)))\n                 .collect()\n-        })\n+        }\n     }\n \n     /// Iterates over each child of the given item."}, {"sha": "c6c06c98ee5c2f80f231a9721b45c8f89fe3feec", "filename": "src/librustc_metadata/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -88,15 +88,11 @@ impl IntoArgs for (CrateNum, DefId) {\n \n provide! { <'tcx> tcx, def_id, other, cdata,\n     type_of => { cdata.get_type(def_id.index, tcx) }\n-    generics_of => {\n-        tcx.arena.alloc(cdata.get_generics(def_id.index, tcx.sess))\n-    }\n+    generics_of => { cdata.get_generics(def_id.index, tcx.sess) }\n     explicit_predicates_of => { cdata.get_explicit_predicates(def_id.index, tcx) }\n     inferred_outlives_of => { cdata.get_inferred_outlives(def_id.index, tcx) }\n     super_predicates_of => { cdata.get_super_predicates(def_id.index, tcx) }\n-    trait_def => {\n-        tcx.arena.alloc(cdata.get_trait_def(def_id.index, tcx.sess))\n-    }\n+    trait_def => { cdata.get_trait_def(def_id.index, tcx.sess) }\n     adt_def => { cdata.get_adt_def(def_id.index, tcx) }\n     adt_destructor => {\n         let _ = cdata;\n@@ -117,8 +113,8 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n             bug!(\"coerce_unsized_info: `{:?}` is missing its info\", def_id);\n         })\n     }\n-    optimized_mir => { tcx.arena.alloc(cdata.get_optimized_mir(tcx, def_id.index)) }\n-    promoted_mir => { tcx.arena.alloc(cdata.get_promoted_mir(tcx, def_id.index)) }\n+    optimized_mir => { cdata.get_optimized_mir(tcx, def_id.index) }\n+    promoted_mir => { cdata.get_promoted_mir(tcx, def_id.index) }\n     mir_const_qualif => { cdata.mir_const_qualif(def_id.index) }\n     fn_sig => { cdata.fn_sig(def_id.index, tcx) }\n     inherent_impls => { cdata.get_inherent_implementations_for_type(tcx, def_id.index) }\n@@ -178,7 +174,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n             })\n             .collect();\n \n-        tcx.arena.alloc(reachable_non_generics)\n+        reachable_non_generics\n     }\n     native_libraries => { Lrc::new(cdata.get_native_libraries(tcx.sess)) }\n     foreign_modules => { cdata.get_foreign_modules(tcx) }\n@@ -220,7 +216,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     }\n     defined_lib_features => { cdata.get_lib_features(tcx) }\n     defined_lang_items => { cdata.get_lang_items(tcx) }\n-    diagnostic_items => { cdata.get_diagnostic_items(tcx) }\n+    diagnostic_items => { cdata.get_diagnostic_items() }\n     missing_lang_items => { cdata.get_missing_lang_items(tcx) }\n \n     missing_extern_crate_item => {\n@@ -363,7 +359,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n                 }\n             }\n \n-            tcx.arena.alloc(visible_parent_map)\n+            visible_parent_map\n         },\n \n         dependency_formats: |tcx, cnum| {"}, {"sha": "6692600a093aa9362cfe1081d61e2378b7aeb350", "filename": "src/librustc_middle/arena.rs", "status": "modified", "additions": 1, "deletions": 59, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_middle%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_middle%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Farena.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -12,36 +12,10 @@ macro_rules! arena_types {\n     ($macro:path, $args:tt, $tcx:lifetime) => (\n         $macro!($args, [\n             [] layouts: rustc_target::abi::Layout,\n-            [] generics: rustc_middle::ty::Generics,\n-            [] trait_def: rustc_middle::ty::TraitDef,\n-            [] adt_def: rustc_middle::ty::AdtDef,\n-            [] steal_mir: rustc_middle::ty::steal::Steal<rustc_middle::mir::Body<$tcx>>,\n-            [] mir: rustc_middle::mir::Body<$tcx>,\n-            [] steal_promoted: rustc_middle::ty::steal::Steal<\n-                rustc_index::vec::IndexVec<\n-                    rustc_middle::mir::Promoted,\n-                    rustc_middle::mir::Body<$tcx>\n-                >\n-            >,\n-            [] promoted: rustc_index::vec::IndexVec<\n-                rustc_middle::mir::Promoted,\n-                rustc_middle::mir::Body<$tcx>\n-            >,\n             [decode] tables: rustc_middle::ty::TypeckTables<$tcx>,\n-            [decode] borrowck_result: rustc_middle::mir::BorrowCheckResult<$tcx>,\n             [] const_allocs: rustc_middle::mir::interpret::Allocation,\n-            [] vtable_method: Option<(\n-                rustc_hir::def_id::DefId,\n-                rustc_middle::ty::subst::SubstsRef<$tcx>\n-            )>,\n-            [few, decode] collect_and_partition_mono_items: rustc_hir::def_id::DefIdSet,\n-            [few, decode] mir_keys: rustc_data_structures::fx::FxHashSet<rustc_hir::def_id::LocalDefId>,\n-            [decode] specialization_graph: rustc_middle::traits::specialization_graph::Graph,\n+            [few, decode] mir_keys: rustc_hir::def_id::DefIdSet,\n             [] region_scope_tree: rustc_middle::middle::region::ScopeTree,\n-            [] item_local_set: rustc_hir::ItemLocalSet,\n-            [decode] mir_const_qualif: rustc_index::bit_set::BitSet<rustc_middle::mir::Local>,\n-            [] trait_impls_of: rustc_middle::ty::trait_def::TraitImpls,\n-            [] associated_items: rustc_middle::ty::AssociatedItems,\n             [] dropck_outlives:\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx,\n@@ -80,42 +54,10 @@ macro_rules! arena_types {\n                 rustc_middle::infer::canonical::Canonical<'tcx,\n                     rustc_middle::infer::canonical::QueryResponse<'tcx, rustc_middle::ty::Ty<'tcx>>\n                 >,\n-            [few] crate_inherent_impls: rustc_middle::ty::CrateInherentImpls,\n-            [few] upstream_monomorphizations:\n-                rustc_hir::def_id::DefIdMap<\n-                    rustc_data_structures::fx::FxHashMap<\n-                        rustc_middle::ty::subst::SubstsRef<'tcx>,\n-                        rustc_hir::def_id::CrateNum\n-                    >\n-                >,\n-            [few] diagnostic_items: rustc_data_structures::fx::FxHashMap<\n-                rustc_span::symbol::Symbol,\n-                rustc_hir::def_id::DefId,\n-            >,\n-            [few] resolve_lifetimes: rustc_middle::middle::resolve_lifetime::ResolveLifetimes,\n-            [few] lint_levels: rustc_middle::lint::LintLevelMap,\n-            [few] stability_index: rustc_middle::middle::stability::Index<'tcx>,\n-            [few] features: rustc_feature::Features,\n             [few] all_traits: Vec<rustc_hir::def_id::DefId>,\n             [few] privacy_access_levels: rustc_middle::middle::privacy::AccessLevels,\n-            [few] target_features_whitelist: rustc_data_structures::fx::FxHashMap<\n-                String,\n-                Option<rustc_span::symbol::Symbol>\n-            >,\n-            [few] wasm_import_module_map: rustc_data_structures::fx::FxHashMap<\n-                rustc_hir::def_id::DefId,\n-                String\n-            >,\n-            [few] get_lib_features: rustc_middle::middle::lib_features::LibFeatures,\n-            [few] defined_lib_features: rustc_hir::lang_items::LanguageItems,\n-            [few] visible_parent_map: rustc_hir::def_id::DefIdMap<rustc_hir::def_id::DefId>,\n             [few] foreign_module: rustc_middle::middle::cstore::ForeignModule,\n             [few] foreign_modules: Vec<rustc_middle::middle::cstore::ForeignModule>,\n-            [few] reachable_non_generics: rustc_hir::def_id::DefIdMap<\n-                rustc_middle::middle::exported_symbols::SymbolExportLevel\n-            >,\n-            [few] crate_variances: rustc_middle::ty::CrateVariancesMap<'tcx>,\n-            [few] inferred_outlives_crate: rustc_middle::ty::CratePredicatesMap<'tcx>,\n             [] upvars: rustc_data_structures::fx::FxIndexMap<rustc_hir::HirId, rustc_hir::Upvar>,\n             [] object_safety_violations: rustc_middle::traits::ObjectSafetyViolation,\n             [] codegen_unit: rustc_middle::mir::mono::CodegenUnit<$tcx>,"}, {"sha": "44db95c406449532a97a9a2fcce1646355fb83a7", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 63, "deletions": 45, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -102,12 +102,13 @@ rustc_queries! {\n \n         /// Maps from the `DefId` of an item (trait/struct/enum/fn) to its\n         /// associated generics.\n-        query generics_of(key: DefId) -> &'tcx ty::Generics {\n+        query generics_of(key: DefId) -> ty::Generics {\n+            storage(ArenaCacheSelector<'tcx>)\n             cache_on_disk_if { key.is_local() }\n             load_cached(tcx, id) {\n                 let generics: Option<ty::Generics> = tcx.queries.on_disk_cache\n                                                         .try_load_query_result(tcx, id);\n-                generics.map(|x| &*tcx.arena.alloc(x))\n+                generics\n             }\n         }\n \n@@ -134,7 +135,8 @@ rustc_queries! {\n             desc { \"looking up the native libraries of a linked crate\" }\n         }\n \n-        query lint_levels(_: CrateNum) -> &'tcx LintLevelMap {\n+        query lint_levels(_: CrateNum) -> LintLevelMap {\n+            storage(ArenaCacheSelector<'tcx>)\n             eval_always\n             desc { \"computing the lint levels for items in this crate\" }\n         }\n@@ -171,48 +173,40 @@ rustc_queries! {\n \n         /// Fetch the MIR for a given `DefId` right after it's built - this includes\n         /// unreachable code.\n-        query mir_built(_: LocalDefId) -> &'tcx Steal<mir::Body<'tcx>> {\n+        query mir_built(_: LocalDefId) -> Steal<mir::Body<'tcx>> {\n+            storage(ArenaCacheSelector<'tcx>)\n             desc { \"building MIR for\" }\n         }\n \n         /// Fetch the MIR for a given `DefId` up till the point where it is\n         /// ready for const evaluation.\n         ///\n         /// See the README for the `mir` module for details.\n-        query mir_const(_: DefId) -> &'tcx Steal<mir::Body<'tcx>> {\n+        query mir_const(_: DefId) -> Steal<mir::Body<'tcx>> {\n+            storage(ArenaCacheSelector<'tcx>)\n             no_hash\n         }\n \n         query mir_validated(key: LocalDefId) ->\n             (\n-                &'tcx Steal<mir::Body<'tcx>>,\n-                &'tcx Steal<IndexVec<mir::Promoted, mir::Body<'tcx>>>\n+                Steal<mir::Body<'tcx>>,\n+                Steal<IndexVec<mir::Promoted, mir::Body<'tcx>>>\n             ) {\n+            storage(ArenaCacheSelector<'tcx>)\n             no_hash\n             desc { |tcx| \"processing `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }\n \n         /// MIR after our optimization passes have run. This is MIR that is ready\n         /// for codegen. This is also the only query that can fetch non-local MIR, at present.\n-        query optimized_mir(key: DefId) -> &'tcx mir::Body<'tcx> {\n+        query optimized_mir(key: DefId) -> mir::Body<'tcx> {\n+            storage(ArenaCacheSelector<'tcx>)\n             cache_on_disk_if { key.is_local() }\n-            load_cached(tcx, id) {\n-                let mir: Option<crate::mir::Body<'tcx>>\n-                    = tcx.queries.on_disk_cache.try_load_query_result(tcx, id);\n-                mir.map(|x| &*tcx.arena.alloc(x))\n-            }\n         }\n \n-        query promoted_mir(key: DefId) -> &'tcx IndexVec<mir::Promoted, mir::Body<'tcx>> {\n+        query promoted_mir(key: DefId) -> IndexVec<mir::Promoted, mir::Body<'tcx>> {\n+            storage(ArenaCacheSelector<'tcx>)\n             cache_on_disk_if { key.is_local() }\n-            load_cached(tcx, id) {\n-                let promoted: Option<\n-                    rustc_index::vec::IndexVec<\n-                        crate::mir::Promoted,\n-                        crate::mir::Body<'tcx>\n-                    >> = tcx.queries.on_disk_cache.try_load_query_result(tcx, id);\n-                promoted.map(|p| &*tcx.arena.alloc(p))\n-            }\n         }\n     }\n \n@@ -246,7 +240,8 @@ rustc_queries! {\n     }\n \n     Linking {\n-        query wasm_import_module_map(_: CrateNum) -> &'tcx FxHashMap<DefId, String> {\n+        query wasm_import_module_map(_: CrateNum) -> FxHashMap<DefId, String> {\n+            storage(ArenaCacheSelector<'tcx>)\n             desc { \"wasm import module map\" }\n         }\n     }\n@@ -284,8 +279,12 @@ rustc_queries! {\n             }}\n         }\n \n-        query trait_def(_: DefId) -> &'tcx ty::TraitDef {}\n-        query adt_def(_: DefId) -> &'tcx ty::AdtDef {}\n+        query trait_def(_: DefId) -> ty::TraitDef {\n+            storage(ArenaCacheSelector<'tcx>)\n+        }\n+        query adt_def(_: DefId) -> ty::AdtDef {\n+            storage(ArenaCacheSelector<'tcx>)\n+        }\n         query adt_destructor(_: DefId) -> Option<ty::Destructor> {}\n \n         // The cycle error here should be reported as an error by `check_representable`.\n@@ -346,7 +345,8 @@ rustc_queries! {\n         query generator_kind(_: DefId) -> Option<hir::GeneratorKind> {}\n \n         /// Gets a map with the variance of every item; use `item_variance` instead.\n-        query crate_variances(_: CrateNum) -> &'tcx ty::CrateVariancesMap<'tcx> {\n+        query crate_variances(_: CrateNum) -> ty::CrateVariancesMap<'tcx> {\n+            storage(ArenaCacheSelector<'tcx>)\n             desc { \"computing the variances for items in this crate\" }\n         }\n \n@@ -357,7 +357,8 @@ rustc_queries! {\n     TypeChecking {\n         /// Maps from thee `DefId` of a type to its (inferred) outlives.\n         query inferred_outlives_crate(_: CrateNum)\n-            -> &'tcx ty::CratePredicatesMap<'tcx> {\n+            -> ty::CratePredicatesMap<'tcx> {\n+            storage(ArenaCacheSelector<'tcx>)\n             desc { \"computing the inferred outlives predicates for items in this crate\" }\n         }\n     }\n@@ -370,7 +371,8 @@ rustc_queries! {\n         query associated_item(_: DefId) -> ty::AssocItem {}\n \n         /// Collects the associated items defined on a trait or impl.\n-        query associated_items(key: DefId) -> &'tcx ty::AssociatedItems {\n+        query associated_items(key: DefId) -> ty::AssociatedItems {\n+            storage(ArenaCacheSelector<'tcx>)\n             desc { |tcx| \"collecting associated items of {}\", tcx.def_path_str(key) }\n         }\n \n@@ -473,7 +475,7 @@ rustc_queries! {\n                     .queries.on_disk_cache\n                     .try_load_query_result(tcx, id);\n \n-                typeck_tables.map(|tables| &*tcx.arena.alloc(tables))\n+                typeck_tables.map(|x| &*tcx.arena.alloc(x))\n             }\n         }\n     }\n@@ -496,7 +498,8 @@ rustc_queries! {\n     BorrowChecking {\n         /// Borrow-checks the function body. If this is a closure, returns\n         /// additional requirements that the closure's creator must verify.\n-        query mir_borrowck(key: LocalDefId) -> &'tcx mir::BorrowCheckResult<'tcx> {\n+        query mir_borrowck(key: LocalDefId) -> mir::BorrowCheckResult<'tcx> {\n+            storage(ArenaCacheSelector<'tcx>)\n             desc { |tcx| \"borrow-checking `{}`\", tcx.def_path_str(key.to_def_id()) }\n             cache_on_disk_if(tcx, opt_result) {\n                 tcx.is_closure(key.to_def_id())\n@@ -510,7 +513,8 @@ rustc_queries! {\n         /// Not meant to be used directly outside of coherence.\n         /// (Defined only for `LOCAL_CRATE`.)\n         query crate_inherent_impls(k: CrateNum)\n-            -> &'tcx CrateInherentImpls {\n+            -> CrateInherentImpls {\n+            storage(ArenaCacheSelector<'tcx>)\n             eval_always\n             desc { \"all inherent impls defined in crate `{:?}`\", k }\n         }\n@@ -611,7 +615,8 @@ rustc_queries! {\n         /// in the case of closures, this will be redirected to the enclosing function.\n         query region_scope_tree(_: DefId) -> &'tcx region::ScopeTree {}\n \n-        query mir_shims(key: ty::InstanceDef<'tcx>) -> &'tcx mir::Body<'tcx> {\n+        query mir_shims(key: ty::InstanceDef<'tcx>) -> mir::Body<'tcx> {\n+            storage(ArenaCacheSelector<'tcx>)\n             desc { |tcx| \"generating MIR shim for `{}`\", tcx.def_path_str(key.def_id()) }\n         }\n \n@@ -685,10 +690,12 @@ rustc_queries! {\n         query all_local_trait_impls(key: CrateNum) -> &'tcx BTreeMap<DefId, Vec<hir::HirId>> {\n             desc { \"local trait impls\" }\n         }\n-        query trait_impls_of(key: DefId) -> &'tcx ty::trait_def::TraitImpls {\n+        query trait_impls_of(key: DefId) -> ty::trait_def::TraitImpls {\n+            storage(ArenaCacheSelector<'tcx>)\n             desc { |tcx| \"trait impls of `{}`\", tcx.def_path_str(key) }\n         }\n-        query specialization_graph_of(key: DefId) -> &'tcx specialization_graph::Graph {\n+        query specialization_graph_of(key: DefId) -> specialization_graph::Graph {\n+            storage(ArenaCacheSelector<'tcx>)\n             desc { |tcx| \"building specialization graph of trait `{}`\", tcx.def_path_str(key) }\n             cache_on_disk_if { true }\n         }\n@@ -830,7 +837,8 @@ rustc_queries! {\n         // Does not include external symbols that don't have a corresponding DefId,\n         // like the compiler-generated `main` function and so on.\n         query reachable_non_generics(_: CrateNum)\n-            -> &'tcx DefIdMap<SymbolExportLevel> {\n+            -> DefIdMap<SymbolExportLevel> {\n+            storage(ArenaCacheSelector<'tcx>)\n             desc { \"looking up the exported symbols of a crate\" }\n         }\n         query is_reachable_non_generic(_: DefId) -> bool {}\n@@ -846,7 +854,8 @@ rustc_queries! {\n         /// better, `Instance::upstream_monomorphization()`.\n         query upstream_monomorphizations(\n             k: CrateNum\n-        ) -> &'tcx DefIdMap<FxHashMap<SubstsRef<'tcx>, CrateNum>> {\n+        ) -> DefIdMap<FxHashMap<SubstsRef<'tcx>, CrateNum>> {\n+            storage(ArenaCacheSelector<'tcx>)\n             desc { \"collecting available upstream monomorphizations `{:?}`\", k }\n         }\n \n@@ -931,7 +940,8 @@ rustc_queries! {\n \n     Other {\n         query dllimport_foreign_items(_: CrateNum)\n-            -> &'tcx FxHashSet<DefId> {\n+            -> FxHashSet<DefId> {\n+            storage(ArenaCacheSelector<'tcx>)\n             desc { \"dllimport_foreign_items\" }\n         }\n         query is_dllimport_foreign_item(_: DefId) -> bool {}\n@@ -949,7 +959,8 @@ rustc_queries! {\n \n     BorrowChecking {\n         /// Lifetime resolution. See `middle::resolve_lifetimes`.\n-        query resolve_lifetimes(_: CrateNum) -> &'tcx ResolveLifetimes {\n+        query resolve_lifetimes(_: CrateNum) -> ResolveLifetimes {\n+            storage(ArenaCacheSelector<'tcx>)\n             desc { \"resolving lifetimes\" }\n         }\n         query named_region_map(_: LocalDefId) ->\n@@ -982,7 +993,8 @@ rustc_queries! {\n         query item_children(_: DefId) -> &'tcx [Export<hir::HirId>] {}\n         query extern_mod_stmt_cnum(_: DefId) -> Option<CrateNum> {}\n \n-        query get_lib_features(_: CrateNum) -> &'tcx LibFeatures {\n+        query get_lib_features(_: CrateNum) -> LibFeatures {\n+            storage(ArenaCacheSelector<'tcx>)\n             eval_always\n             desc { \"calculating the lib features map\" }\n         }\n@@ -993,13 +1005,15 @@ rustc_queries! {\n         /// Returns the lang items defined in another crate by loading it from metadata.\n         // FIXME: It is illegal to pass a `CrateNum` other than `LOCAL_CRATE` here, just get rid\n         // of that argument?\n-        query get_lang_items(_: CrateNum) -> &'tcx LanguageItems {\n+        query get_lang_items(_: CrateNum) -> LanguageItems {\n+            storage(ArenaCacheSelector<'tcx>)\n             eval_always\n             desc { \"calculating the lang items map\" }\n         }\n \n         /// Returns all diagnostic items defined in all crates.\n-        query all_diagnostic_items(_: CrateNum) -> &'tcx FxHashMap<Symbol, DefId> {\n+        query all_diagnostic_items(_: CrateNum) -> FxHashMap<Symbol, DefId> {\n+            storage(ArenaCacheSelector<'tcx>)\n             eval_always\n             desc { \"calculating the diagnostic items map\" }\n         }\n@@ -1010,15 +1024,17 @@ rustc_queries! {\n         }\n \n         /// Returns the diagnostic items defined in a crate.\n-        query diagnostic_items(_: CrateNum) -> &'tcx FxHashMap<Symbol, DefId> {\n+        query diagnostic_items(_: CrateNum) -> FxHashMap<Symbol, DefId> {\n+            storage(ArenaCacheSelector<'tcx>)\n             desc { \"calculating the diagnostic items map in a crate\" }\n         }\n \n         query missing_lang_items(_: CrateNum) -> &'tcx [LangItem] {\n             desc { \"calculating the missing lang items in a crate\" }\n         }\n         query visible_parent_map(_: CrateNum)\n-            -> &'tcx DefIdMap<DefId> {\n+            -> DefIdMap<DefId> {\n+            storage(ArenaCacheSelector<'tcx>)\n             desc { \"calculating the visible parent map\" }\n         }\n         query missing_extern_crate_item(_: CrateNum) -> bool {\n@@ -1052,7 +1068,8 @@ rustc_queries! {\n             desc { |tcx| \"names_imported_by_glob_use for `{}`\", tcx.def_path_str(def_id.to_def_id()) }\n         }\n \n-        query stability_index(_: CrateNum) -> &'tcx stability::Index<'tcx> {\n+        query stability_index(_: CrateNum) -> stability::Index<'tcx> {\n+            storage(ArenaCacheSelector<'tcx>)\n             eval_always\n             desc { \"calculating the stability index for the local crate\" }\n         }\n@@ -1243,7 +1260,8 @@ rustc_queries! {\n     }\n \n     Other {\n-        query target_features_whitelist(_: CrateNum) -> &'tcx FxHashMap<String, Option<Symbol>> {\n+        query target_features_whitelist(_: CrateNum) -> FxHashMap<String, Option<Symbol>> {\n+            storage(ArenaCacheSelector<'tcx>)\n             eval_always\n             desc { \"looking up the whitelist of target features\" }\n         }"}, {"sha": "118c692ca77061a449240ce810f18aa2d0a7d387", "filename": "src/librustc_middle/ty/context.rs", "status": "modified", "additions": 7, "deletions": 15, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_middle%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fcontext.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -991,22 +991,15 @@ pub struct GlobalCtxt<'tcx> {\n }\n \n impl<'tcx> TyCtxt<'tcx> {\n-    pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> &'tcx Steal<Body<'tcx>> {\n-        self.arena.alloc(Steal::new(mir))\n+    pub fn alloc_steal_mir(self, mir: Body<'tcx>) -> Steal<Body<'tcx>> {\n+        Steal::new(mir)\n     }\n \n     pub fn alloc_steal_promoted(\n         self,\n         promoted: IndexVec<Promoted, Body<'tcx>>,\n-    ) -> &'tcx Steal<IndexVec<Promoted, Body<'tcx>>> {\n-        self.arena.alloc(Steal::new(promoted))\n-    }\n-\n-    pub fn intern_promoted(\n-        self,\n-        promoted: IndexVec<Promoted, Body<'tcx>>,\n-    ) -> &'tcx IndexVec<Promoted, Body<'tcx>> {\n-        self.arena.alloc(promoted)\n+    ) -> Steal<IndexVec<Promoted, Body<'tcx>>> {\n+        Steal::new(promoted)\n     }\n \n     pub fn alloc_adt_def(\n@@ -1015,9 +1008,8 @@ impl<'tcx> TyCtxt<'tcx> {\n         kind: AdtKind,\n         variants: IndexVec<VariantIdx, ty::VariantDef>,\n         repr: ReprOptions,\n-    ) -> &'tcx ty::AdtDef {\n-        let def = ty::AdtDef::new(self, did, kind, variants, repr);\n-        self.arena.alloc(def)\n+    ) -> ty::AdtDef {\n+        ty::AdtDef::new(self, did, kind, variants, repr)\n     }\n \n     pub fn intern_const_alloc(self, alloc: Allocation) -> &'tcx Allocation {\n@@ -2745,7 +2737,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n     };\n     providers.features_query = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n-        tcx.arena.alloc(tcx.sess.features_untracked().clone())\n+        tcx.sess.features_untracked()\n     };\n     providers.is_panic_runtime = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);"}, {"sha": "89bcb240d901332915f1265184f657822fd4d940", "filename": "src/librustc_middle/ty/trait_def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_middle%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_middle%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Ftrait_def.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -187,7 +187,7 @@ pub(super) fn all_local_trait_impls<'tcx>(\n }\n \n // Query provider for `trait_impls_of`.\n-pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> &TraitImpls {\n+pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> TraitImpls {\n     let mut impls = TraitImpls::default();\n \n     {\n@@ -219,7 +219,7 @@ pub(super) fn trait_impls_of_provider(tcx: TyCtxt<'_>, trait_id: DefId) -> &Trai\n         }\n     }\n \n-    tcx.arena.alloc(impls)\n+    impls\n }\n \n impl<'a> HashStable<StableHashingContext<'a>> for TraitImpls {"}, {"sha": "b95a1043d92cb1e0ed05e62ba99df4f8525b2ecb", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -92,7 +92,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers { mir_borrowck, ..*providers };\n }\n \n-fn mir_borrowck(tcx: TyCtxt<'_>, def_id: LocalDefId) -> &BorrowCheckResult<'_> {\n+fn mir_borrowck(tcx: TyCtxt<'_>, def_id: LocalDefId) -> BorrowCheckResult<'_> {\n     let (input_body, promoted) = tcx.mir_validated(def_id);\n     debug!(\"run query mir_borrowck: {}\", tcx.def_path_str(def_id.to_def_id()));\n \n@@ -103,7 +103,7 @@ fn mir_borrowck(tcx: TyCtxt<'_>, def_id: LocalDefId) -> &BorrowCheckResult<'_> {\n     });\n     debug!(\"mir_borrowck done\");\n \n-    tcx.arena.alloc(opt_closure_req)\n+    opt_closure_req\n }\n \n fn do_mir_borrowck<'a, 'tcx>("}, {"sha": "dfa1bb764e47a8e4998adcd9fb7e1ffc022dd35f", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -26,7 +26,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     providers.mir_shims = make_shim;\n }\n \n-fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx Body<'tcx> {\n+fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> Body<'tcx> {\n     debug!(\"make_shim({:?})\", instance);\n \n     let mut result = match instance {\n@@ -128,7 +128,7 @@ fn make_shim<'tcx>(tcx: TyCtxt<'tcx>, instance: ty::InstanceDef<'tcx>) -> &'tcx\n \n     debug!(\"make_shim({:?}) = {:?}\", instance, result);\n \n-    tcx.arena.alloc(result)\n+    result\n }\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n@@ -828,7 +828,7 @@ fn build_call_shim<'tcx>(\n     body\n }\n \n-pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> &Body<'_> {\n+pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> Body<'_> {\n     debug_assert!(tcx.is_constructor(ctor_id));\n \n     let span =\n@@ -895,5 +895,5 @@ pub fn build_adt_ctor(tcx: TyCtxt<'_>, ctor_id: DefId) -> &Body<'_> {\n         |_, _| Ok(()),\n     );\n \n-    tcx.arena.alloc(body)\n+    body\n }"}, {"sha": "1d982d18eeb0d02de4e1450635936b905697ee65", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -211,7 +211,7 @@ fn mir_const_qualif(tcx: TyCtxt<'_>, def_id: DefId) -> ConstQualifs {\n     validator.qualifs_in_return_place()\n }\n \n-fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<Body<'_>> {\n+fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> Steal<Body<'_>> {\n     let def_id = def_id.expect_local();\n \n     // Unsafety check uses the raw mir, so make sure it is run\n@@ -241,7 +241,7 @@ fn mir_const(tcx: TyCtxt<'_>, def_id: DefId) -> &Steal<Body<'_>> {\n fn mir_validated(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,\n-) -> (&'tcx Steal<Body<'tcx>>, &'tcx Steal<IndexVec<Promoted, Body<'tcx>>>) {\n+) -> (Steal<Body<'tcx>>, Steal<IndexVec<Promoted, Body<'tcx>>>) {\n     // Ensure that we compute the `mir_const_qualif` for constants at\n     // this point, before we steal the mir-const result.\n     let _ = tcx.mir_const_qualif(def_id.to_def_id());\n@@ -360,7 +360,7 @@ fn run_optimization_passes<'tcx>(\n     );\n }\n \n-fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n+fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> Body<'_> {\n     if tcx.is_constructor(def_id) {\n         // There's no reason to run all of the MIR passes on constructors when\n         // we can just output the MIR we want directly. This also saves const\n@@ -381,12 +381,12 @@ fn optimized_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &Body<'_> {\n \n     debug_assert!(!body.has_free_regions(), \"Free regions in optimized MIR\");\n \n-    tcx.arena.alloc(body)\n+    body\n }\n \n-fn promoted_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &IndexVec<Promoted, Body<'_>> {\n+fn promoted_mir(tcx: TyCtxt<'_>, def_id: DefId) -> IndexVec<Promoted, Body<'_>> {\n     if tcx.is_constructor(def_id) {\n-        return tcx.intern_promoted(IndexVec::new());\n+        return IndexVec::new();\n     }\n \n     let def_id = def_id.expect_local();\n@@ -401,5 +401,5 @@ fn promoted_mir(tcx: TyCtxt<'_>, def_id: DefId) -> &IndexVec<Promoted, Body<'_>>\n \n     debug_assert!(!promoted.has_free_regions(), \"Free regions in promoted MIR\");\n \n-    tcx.intern_promoted(promoted)\n+    promoted\n }"}, {"sha": "021ee242ce8c6a872573ace0bedad1cb417ccbf7", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -21,7 +21,7 @@ use rustc_target::spec::PanicStrategy;\n \n use super::lints;\n \n-crate fn mir_built(tcx: TyCtxt<'_>, def_id: LocalDefId) -> &ty::steal::Steal<Body<'_>> {\n+crate fn mir_built(tcx: TyCtxt<'_>, def_id: LocalDefId) -> ty::steal::Steal<Body<'_>> {\n     tcx.alloc_steal_mir(mir_build(tcx, def_id))\n }\n "}, {"sha": "d91f49554ff485b2d135013c23b60db2ebabed1d", "filename": "src/librustc_passes/diagnostic_items.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_passes%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdiagnostic_items.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -93,18 +93,18 @@ fn extract(attrs: &[ast::Attribute]) -> Option<Symbol> {\n }\n \n /// Traverse and collect the diagnostic items in the current\n-fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx FxHashMap<Symbol, DefId> {\n+fn collect<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n     // Initialize the collector.\n     let mut collector = DiagnosticItemCollector::new(tcx);\n \n     // Collect diagnostic items in this crate.\n     tcx.hir().krate().visit_all_item_likes(&mut collector);\n \n-    tcx.arena.alloc(collector.items)\n+    collector.items\n }\n \n /// Traverse and collect all the diagnostic items in all crates.\n-fn collect_all<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx FxHashMap<Symbol, DefId> {\n+fn collect_all<'tcx>(tcx: TyCtxt<'tcx>) -> FxHashMap<Symbol, DefId> {\n     // Initialize the collector.\n     let mut collector = FxHashMap::default();\n \n@@ -115,7 +115,7 @@ fn collect_all<'tcx>(tcx: TyCtxt<'tcx>) -> &'tcx FxHashMap<Symbol, DefId> {\n         }\n     }\n \n-    tcx.arena.alloc(collector)\n+    collector\n }\n \n pub fn provide(providers: &mut Providers<'_>) {"}, {"sha": "779fb8039d15713b08bc38b06f285c29500c7f5a", "filename": "src/librustc_passes/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_passes%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_passes%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flang_items.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -169,6 +169,6 @@ fn collect(tcx: TyCtxt<'_>) -> LanguageItems {\n pub fn provide(providers: &mut Providers<'_>) {\n     providers.get_lang_items = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n-        tcx.arena.alloc(collect(tcx))\n+        collect(tcx)\n     };\n }"}, {"sha": "31c7ba2a4b205385afa8e9885d968f3a5fabdaf0", "filename": "src/librustc_passes/lib_features.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_passes%2Flib_features.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_passes%2Flib_features.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flib_features.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -138,6 +138,6 @@ fn collect(tcx: TyCtxt<'_>) -> LibFeatures {\n pub fn provide(providers: &mut Providers<'_>) {\n     providers.get_lib_features = |tcx, id| {\n         assert_eq!(id, LOCAL_CRATE);\n-        tcx.arena.alloc(collect(tcx))\n+        collect(tcx)\n     };\n }"}, {"sha": "054748c09fc44b4a90853932568f5aeef4d24dc1", "filename": "src/librustc_passes/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_passes%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_passes%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fstability.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -480,7 +480,7 @@ pub(crate) fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers { check_mod_unstable_api_usage, ..*providers };\n     providers.stability_index = |tcx, cnum| {\n         assert_eq!(cnum, LOCAL_CRATE);\n-        tcx.arena.alloc(new_index(tcx))\n+        new_index(tcx)\n     };\n }\n "}, {"sha": "a062330ba4be6a5156941f28c86f094ad0db98e6", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -294,7 +294,7 @@ pub fn provide(providers: &mut ty::query::Providers<'_>) {\n /// entire crate. You should not read the result of this query\n /// directly, but rather use `named_region_map`, `is_late_bound_map`,\n /// etc.\n-fn resolve_lifetimes(tcx: TyCtxt<'_>, for_krate: CrateNum) -> &ResolveLifetimes {\n+fn resolve_lifetimes(tcx: TyCtxt<'_>, for_krate: CrateNum) -> ResolveLifetimes {\n     assert_eq!(for_krate, LOCAL_CRATE);\n \n     let named_region_map = krate(tcx);\n@@ -314,7 +314,7 @@ fn resolve_lifetimes(tcx: TyCtxt<'_>, for_krate: CrateNum) -> &ResolveLifetimes\n         map.insert(hir_id.local_id, v);\n     }\n \n-    tcx.arena.alloc(rl)\n+    rl\n }\n \n fn krate(tcx: TyCtxt<'_>) -> NamedRegionMap {"}, {"sha": "f2b43754acaeaa9ad940ffef2d93fde09418db29", "filename": "src/librustc_trait_selection/traits/specialize/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fspecialize%2Fmod.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -254,7 +254,7 @@ fn fulfill_implication<'a, 'tcx>(\n pub(super) fn specialization_graph_provider(\n     tcx: TyCtxt<'_>,\n     trait_id: DefId,\n-) -> &specialization_graph::Graph {\n+) -> specialization_graph::Graph {\n     let mut sg = specialization_graph::Graph::new();\n \n     let mut trait_impls: Vec<_> = tcx.all_impls(trait_id).collect();\n@@ -286,7 +286,7 @@ pub(super) fn specialization_graph_provider(\n         }\n     }\n \n-    tcx.arena.alloc(sg)\n+    sg\n }\n \n fn report_overlap_conflict("}, {"sha": "5b1389bf5a33c4a520f076aa21872bbdc5449f2e", "filename": "src/librustc_ty/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_ty%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_ty%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ty%2Fty.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -220,9 +220,9 @@ fn associated_item_def_ids(tcx: TyCtxt<'_>, def_id: DefId) -> &[DefId] {\n     }\n }\n \n-fn associated_items(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::AssociatedItems {\n+fn associated_items(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssociatedItems {\n     let items = tcx.associated_item_def_ids(def_id).iter().map(|did| tcx.associated_item(*did));\n-    tcx.arena.alloc(ty::AssociatedItems::new(items))\n+    ty::AssociatedItems::new(items)\n }\n \n fn def_span(tcx: TyCtxt<'_>, def_id: DefId) -> Span {"}, {"sha": "653b7b8f2a5ba1a4c3c9044ae8cfe694a577cfaf", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -17,13 +17,13 @@ use rustc_ast::ast;\n use rustc_span::Span;\n \n /// On-demand query: yields a map containing all types mapped to their inherent impls.\n-pub fn crate_inherent_impls(tcx: TyCtxt<'_>, crate_num: CrateNum) -> &CrateInherentImpls {\n+pub fn crate_inherent_impls(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CrateInherentImpls {\n     assert_eq!(crate_num, LOCAL_CRATE);\n \n     let krate = tcx.hir().krate();\n     let mut collect = InherentCollect { tcx, impls_map: Default::default() };\n     krate.visit_all_item_likes(&mut collect);\n-    tcx.arena.alloc(collect.impls_map)\n+    collect.impls_map\n }\n \n /// On-demand query: yields a vector of the inherent impls for a specific type."}, {"sha": "b95b5fde4f0279519292cc284d63543cdf94ea82", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 6, "deletions": 15, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -861,7 +861,7 @@ fn convert_variant(\n     )\n }\n \n-fn adt_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::AdtDef {\n+fn adt_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AdtDef {\n     use rustc_hir::*;\n \n     let def_id = def_id.expect_local();\n@@ -1002,7 +1002,7 @@ fn super_predicates_of(tcx: TyCtxt<'_>, trait_def_id: DefId) -> ty::GenericPredi\n     ty::GenericPredicates { parent: None, predicates: superbounds }\n }\n \n-fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TraitDef {\n+fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> ty::TraitDef {\n     let hir_id = tcx.hir().as_local_hir_id(def_id.expect_local());\n     let item = tcx.hir().expect_item(hir_id);\n \n@@ -1033,16 +1033,7 @@ fn trait_def(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::TraitDef {\n         ty::trait_def::TraitSpecializationKind::None\n     };\n     let def_path_hash = tcx.def_path_hash(def_id);\n-    let def = ty::TraitDef::new(\n-        def_id,\n-        unsafety,\n-        paren_sugar,\n-        is_auto,\n-        is_marker,\n-        spec_kind,\n-        def_path_hash,\n-    );\n-    tcx.arena.alloc(def)\n+    ty::TraitDef::new(def_id, unsafety, paren_sugar, is_auto, is_marker, spec_kind, def_path_hash)\n }\n \n fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<Span> {\n@@ -1158,7 +1149,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     }\n }\n \n-fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n+fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n     use rustc_hir::*;\n \n     let hir_id = tcx.hir().as_local_hir_id(def_id.expect_local());\n@@ -1403,14 +1394,14 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> &ty::Generics {\n \n     let param_def_id_to_index = params.iter().map(|param| (param.def_id, param.index)).collect();\n \n-    tcx.arena.alloc(ty::Generics {\n+    ty::Generics {\n         parent: parent_def_id,\n         parent_count,\n         params,\n         param_def_id_to_index,\n         has_self: has_self || parent_has_self,\n         has_late_bound_regions: has_late_bound_regions(tcx, node),\n-    })\n+    }\n }\n \n fn are_suggestable_generic_args(generic_args: &[hir::GenericArg<'_>]) -> bool {"}, {"sha": "a49d8e5ed0f0a105ff9cd2cc99881d16777b0234", "filename": "src/librustc_typeck/outlives/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fmod.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -58,7 +58,7 @@ fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Predicate\n     }\n }\n \n-fn inferred_outlives_crate(tcx: TyCtxt<'_>, crate_num: CrateNum) -> &CratePredicatesMap<'_> {\n+fn inferred_outlives_crate(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CratePredicatesMap<'_> {\n     assert_eq!(crate_num, LOCAL_CRATE);\n \n     // Compute a map from each struct/enum/union S to the **explicit**\n@@ -105,5 +105,5 @@ fn inferred_outlives_crate(tcx: TyCtxt<'_>, crate_num: CrateNum) -> &CratePredic\n         })\n         .collect();\n \n-    tcx.arena.alloc(ty::CratePredicatesMap { predicates })\n+    ty::CratePredicatesMap { predicates }\n }"}, {"sha": "631f551ade4feceb1c6cd87423147ee080be965c", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e56c4004326cb83ec433788fa8f2fc6cd4dd391a/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=e56c4004326cb83ec433788fa8f2fc6cd4dd391a", "patch": "@@ -29,12 +29,12 @@ pub fn provide(providers: &mut Providers<'_>) {\n     *providers = Providers { variances_of, crate_variances, ..*providers };\n }\n \n-fn crate_variances(tcx: TyCtxt<'_>, crate_num: CrateNum) -> &CrateVariancesMap<'_> {\n+fn crate_variances(tcx: TyCtxt<'_>, crate_num: CrateNum) -> CrateVariancesMap<'_> {\n     assert_eq!(crate_num, LOCAL_CRATE);\n     let mut arena = arena::TypedArena::default();\n     let terms_cx = terms::determine_parameters_to_be_inferred(tcx, &mut arena);\n     let constraints_cx = constraints::add_constraints_from_crate(terms_cx);\n-    tcx.arena.alloc(solve::solve_constraints(constraints_cx))\n+    solve::solve_constraints(constraints_cx)\n }\n \n fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {"}]}