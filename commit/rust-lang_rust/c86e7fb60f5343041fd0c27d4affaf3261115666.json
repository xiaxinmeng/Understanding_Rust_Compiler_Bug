{"sha": "c86e7fb60f5343041fd0c27d4affaf3261115666", "node_id": "C_kwDOAAsO6NoAKGM4NmU3ZmI2MGY1MzQzMDQxZmQwYzI3ZDRhZmZhZjMyNjExMTU2NjY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-08T07:35:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-08T07:35:30Z"}, "message": "Auto merge of #111342 - Dylan-DPC:rollup-b5p6wzy, r=Dylan-DPC\n\nRollup of 7 pull requests\n\nSuccessful merges:\n\n - #110297 (Make `(try_)subst_and_normalize_erasing_regions` take `EarlyBinder`)\n - #110827 (Fix lifetime suggestion for type aliases with objects in them)\n - #111022 (Use smaller ints for bitflags)\n - #111056 (Fix some suggestions where a `Box<T>` is expected.)\n - #111262 (Further normalize msvc-non-utf8-ouput)\n - #111265 (Make generics_of has_self on RPITITs delegate to the opaque)\n - #111323 (Give a more helpful error when running the rustc shim directly)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "2cfdd22278891d6dc1b2ae35a4ff729a0c364648", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cfdd22278891d6dc1b2ae35a4ff729a0c364648"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c86e7fb60f5343041fd0c27d4affaf3261115666", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c86e7fb60f5343041fd0c27d4affaf3261115666", "html_url": "https://github.com/rust-lang/rust/commit/c86e7fb60f5343041fd0c27d4affaf3261115666", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c86e7fb60f5343041fd0c27d4affaf3261115666/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ea0c22ea4f58f181d6739fbe624329e576ce7994", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea0c22ea4f58f181d6739fbe624329e576ce7994", "html_url": "https://github.com/rust-lang/rust/commit/ea0c22ea4f58f181d6739fbe624329e576ce7994"}, {"sha": "172ddccc5086b1b7fe1f2374c9f116974af75f6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/172ddccc5086b1b7fe1f2374c9f116974af75f6a", "html_url": "https://github.com/rust-lang/rust/commit/172ddccc5086b1b7fe1f2374c9f116974af75f6a"}], "stats": {"total": 397, "additions": 312, "deletions": 85}, "files": [{"sha": "8ec872e205792b909a67e4bfec76711045c9ce2f", "filename": "compiler/rustc_borrowck/src/diagnostics/region_errors.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_errors.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -845,7 +845,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 return;\n             }\n \n-            let Some((alias_tys, alias_span)) = self\n+            let Some((alias_tys, alias_span, lt_addition_span)) = self\n                 .infcx\n                 .tcx\n                 .return_type_impl_or_dyn_traits_with_type_alias(suitable_region.def_id) else { return; };\n@@ -858,10 +858,20 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                     ()\n                 }\n                 if let TyKind::TraitObject(_, lt, _) = alias_ty.kind {\n-                    spans_suggs.push((lt.ident.span.shrink_to_hi(), \" + 'a\".to_string()));\n+                    if lt.ident.name == kw::Empty {\n+                        spans_suggs.push((lt.ident.span.shrink_to_hi(), \" + 'a\".to_string()));\n+                    } else {\n+                        spans_suggs.push((lt.ident.span, \"'a\".to_string()));\n+                    }\n                 }\n             }\n-            spans_suggs.push((alias_span.shrink_to_hi(), \"<'a>\".to_string()));\n+\n+            if let Some(lt_addition_span) = lt_addition_span {\n+                spans_suggs.push((lt_addition_span, \"'a, \".to_string()));\n+            } else {\n+                spans_suggs.push((alias_span.shrink_to_hi(), \"<'a>\".to_string()));\n+            }\n+\n             diag.multipart_suggestion_verbose(\n                 format!(\n                     \"to declare that the trait object {captures}, you can add a lifetime parameter `'a` in the type alias\""}, {"sha": "ccb3a0c4f27e4ef183f66396be5ad5c049add808", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -361,7 +361,7 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n         self.instance.subst_mir_and_normalize_erasing_regions(\n             self.tcx,\n             ty::ParamEnv::reveal_all(),\n-            value,\n+            ty::EarlyBinder(value),\n         )\n     }\n "}, {"sha": "3fff112a02056ac970bd23cbd42e93a7294e4e8d", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/create_scope_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fcreate_scope_map.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -93,7 +93,7 @@ fn make_mir_scope<'ll, 'tcx>(\n             let callee = cx.tcx.subst_and_normalize_erasing_regions(\n                 instance.substs,\n                 ty::ParamEnv::reveal_all(),\n-                callee,\n+                ty::EarlyBinder(callee),\n             );\n             let callee_fn_abi = cx.fn_abi_of_instance(callee, ty::List::empty());\n             cx.dbg_scope_fn(callee, callee_fn_abi, None)"}, {"sha": "c3f0a0033b0eadcfbbd5eca07efeddf0b6a78c49", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmod.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -529,7 +529,7 @@ impl<'ll, 'tcx> DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n                     let impl_self_ty = cx.tcx.subst_and_normalize_erasing_regions(\n                         instance.substs,\n                         ty::ParamEnv::reveal_all(),\n-                        cx.tcx.type_of(impl_def_id).skip_binder(),\n+                        cx.tcx.type_of(impl_def_id),\n                     );\n \n                     // Only \"class\" methods are generally understood by LLVM,"}, {"sha": "1204c99e533e277880039c5c40fbfb407e68ee69", "filename": "compiler/rustc_codegen_ssa/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fmod.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -111,7 +111,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         self.instance.subst_mir_and_normalize_erasing_regions(\n             self.cx.tcx(),\n             ty::ParamEnv::reveal_all(),\n-            value,\n+            ty::EarlyBinder(value),\n         )\n     }\n }"}, {"sha": "b2197a0aabbfe0d8dc4275e6fab1228195d59a65", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -495,7 +495,11 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> Result<T, InterpError<'tcx>> {\n         frame\n             .instance\n-            .try_subst_mir_and_normalize_erasing_regions(*self.tcx, self.param_env, value)\n+            .try_subst_mir_and_normalize_erasing_regions(\n+                *self.tcx,\n+                self.param_env,\n+                ty::EarlyBinder(value),\n+            )\n             .map_err(|_| err_inval!(TooGeneric))\n     }\n "}, {"sha": "5e13e7c8aafc8187a4876e65d44f0a069675175d", "filename": "compiler/rustc_data_structures/src/profiling.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fprofiling.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -101,7 +101,7 @@ use parking_lot::RwLock;\n use smallvec::SmallVec;\n \n bitflags::bitflags! {\n-    struct EventFilter: u32 {\n+    struct EventFilter: u16 {\n         const GENERIC_ACTIVITIES  = 1 << 0;\n         const QUERY_PROVIDERS     = 1 << 1;\n         const QUERY_CACHE_HITS    = 1 << 2;"}, {"sha": "aa664031a8742e0bc48f1a714cc5e524256be54d", "filename": "compiler/rustc_hir_typeck/messages.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_hir_typeck%2Fmessages.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_hir_typeck%2Fmessages.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fmessages.ftl?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -75,3 +75,7 @@ hir_typeck_union_pat_dotdot = `..` cannot be used in union patterns\n \n hir_typeck_arg_mismatch_indeterminate = argument type mismatch was detected, but rustc had trouble determining where\n     .note = we would appreciate a bug report: https://github.com/rust-lang/rust/issues/new\n+\n+hir_typeck_suggest_boxing_note = for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+\n+hir_typeck_suggest_boxing_when_appropriate = store this in the heap by calling `Box::new`"}, {"sha": "9d59cdcbc60fe73d745d6a8f693d255d54730cf9", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -51,7 +51,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             || self.suggest_non_zero_new_unwrap(err, expr, expected, expr_ty)\n             || self.suggest_calling_boxed_future_when_appropriate(err, expr, expected, expr_ty)\n             || self.suggest_no_capture_closure(err, expected, expr_ty)\n-            || self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty)\n+            || self.suggest_boxing_when_appropriate(err, expr.span, expr.hir_id, expected, expr_ty)\n             || self.suggest_block_to_brackets_peeling_refs(err, expr, expr_ty, expected)\n             || self.suggest_copied_or_cloned(err, expr, expr_ty, expected)\n             || self.suggest_clone_for_ref(err, expr, expr_ty, expected)"}, {"sha": "ce30bbeca0badea51978a293379c963b95624e2e", "filename": "compiler/rustc_hir_typeck/src/errors.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ferrors.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -267,3 +267,31 @@ pub struct ArgMismatchIndeterminate {\n     #[primary_span]\n     pub span: Span,\n }\n+\n+#[derive(Subdiagnostic)]\n+pub enum SuggestBoxing {\n+    #[note(hir_typeck_suggest_boxing_note)]\n+    #[multipart_suggestion(\n+        hir_typeck_suggest_boxing_when_appropriate,\n+        applicability = \"machine-applicable\"\n+    )]\n+    Unit {\n+        #[suggestion_part(code = \"Box::new(())\")]\n+        start: Span,\n+        #[suggestion_part(code = \"\")]\n+        end: Span,\n+    },\n+    #[note(hir_typeck_suggest_boxing_note)]\n+    AsyncBody,\n+    #[note(hir_typeck_suggest_boxing_note)]\n+    #[multipart_suggestion(\n+        hir_typeck_suggest_boxing_when_appropriate,\n+        applicability = \"machine-applicable\"\n+    )]\n+    Other {\n+        #[suggestion_part(code = \"Box::new(\")]\n+        start: Span,\n+        #[suggestion_part(code = \")\")]\n+        end: Span,\n+    },\n+}"}, {"sha": "c7011b23a7da7b5ac20a6ec5d2003938d083266a", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/checks.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fchecks.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -1519,7 +1519,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // case we can ignore the tail expression (e.g., `'a: {\n         // break 'a 22; }` would not force the type of the block\n         // to be `()`).\n-        let tail_expr = blk.expr.as_ref();\n         let coerce_to_ty = expected.coercion_target_type(self, blk.span);\n         let coerce = if blk.targeted_by_break {\n             CoerceMany::new(coerce_to_ty)\n@@ -1537,13 +1536,13 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n             // check the tail expression **without** holding the\n             // `enclosing_breakables` lock below.\n-            let tail_expr_ty = tail_expr.map(|t| self.check_expr_with_expectation(t, expected));\n+            let tail_expr_ty =\n+                blk.expr.map(|expr| (expr, self.check_expr_with_expectation(expr, expected)));\n \n             let mut enclosing_breakables = self.enclosing_breakables.borrow_mut();\n             let ctxt = enclosing_breakables.find_breakable(blk.hir_id);\n             let coerce = ctxt.coerce.as_mut().unwrap();\n-            if let Some(tail_expr_ty) = tail_expr_ty {\n-                let tail_expr = tail_expr.unwrap();\n+            if let Some((tail_expr, tail_expr_ty)) = tail_expr_ty {\n                 let span = self.get_expr_coercion_span(tail_expr);\n                 let cause = self.cause(span, ObligationCauseCode::BlockTailExpression(blk.hir_id));\n                 let ty_for_diagnostic = coerce.merged_ty();\n@@ -1596,6 +1595,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         &self.misc(sp),\n                         &mut |err| {\n                             if let Some(expected_ty) = expected.only_has_type(self) {\n+                                if blk.stmts.is_empty() && blk.expr.is_none() {\n+                                    self.suggest_boxing_when_appropriate(\n+                                        err,\n+                                        blk.span,\n+                                        blk.hir_id,\n+                                        expected_ty,\n+                                        self.tcx.mk_unit(),\n+                                    );\n+                                }\n                                 if !self.consider_removing_semicolon(blk, expected_ty, err) {\n                                     self.err_ctxt().consider_returning_binding(\n                                         blk,\n@@ -1608,7 +1616,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                     // silence this redundant error, as we already emit E0070.\n \n                                     // Our block must be a `assign desugar local; assignment`\n-                                    if let Some(hir::Node::Block(hir::Block {\n+                                    if let hir::Block {\n                                         stmts:\n                                             [\n                                                 hir::Stmt {\n@@ -1630,7 +1638,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                                                 },\n                                             ],\n                                         ..\n-                                    })) = self.tcx.hir().find(blk.hir_id)\n+                                    } = blk\n                                     {\n                                         self.comes_from_while_condition(blk.hir_id, |_| {\n                                             err.downgrade_to_delayed_bug();"}, {"sha": "2867fcc8ecdae5613640d26906cdb09ec7e3d987", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/suggestions.rs", "status": "modified", "additions": 24, "deletions": 24, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2Fsuggestions.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -1,6 +1,6 @@\n use super::FnCtxt;\n \n-use crate::errors::{AddReturnTypeSuggestion, ExpectedReturnTypeLabel};\n+use crate::errors::{AddReturnTypeSuggestion, ExpectedReturnTypeLabel, SuggestBoxing};\n use crate::fluent_generated as fluent;\n use crate::method::probe::{IsSuggestion, Mode, ProbeScope};\n use rustc_ast::util::parser::{ExprPrecedence, PREC_POSTFIX};\n@@ -9,7 +9,8 @@ use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, CtorOf, DefKind};\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::{\n-    Expr, ExprKind, GenericBound, Node, Path, QPath, Stmt, StmtKind, TyKind, WherePredicate,\n+    AsyncGeneratorKind, Expr, ExprKind, GeneratorKind, GenericBound, HirId, Node, Path, QPath,\n+    Stmt, StmtKind, TyKind, WherePredicate,\n };\n use rustc_hir_analysis::astconv::AstConv;\n use rustc_infer::traits::{self, StatementAsExpression};\n@@ -438,33 +439,32 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     pub(in super::super) fn suggest_boxing_when_appropriate(\n         &self,\n         err: &mut Diagnostic,\n-        expr: &hir::Expr<'_>,\n+        span: Span,\n+        hir_id: HirId,\n         expected: Ty<'tcx>,\n         found: Ty<'tcx>,\n     ) -> bool {\n-        if self.tcx.hir().is_inside_const_context(expr.hir_id) {\n-            // Do not suggest `Box::new` in const context.\n-            return false;\n-        }\n-        if !expected.is_box() || found.is_box() {\n+        // Do not suggest `Box::new` in const context.\n+        if self.tcx.hir().is_inside_const_context(hir_id) || !expected.is_box() || found.is_box() {\n             return false;\n         }\n-        let boxed_found = self.tcx.mk_box(found);\n-        if self.can_coerce(boxed_found, expected) {\n-            err.multipart_suggestion(\n-                \"store this in the heap by calling `Box::new`\",\n-                vec![\n-                    (expr.span.shrink_to_lo(), \"Box::new(\".to_string()),\n-                    (expr.span.shrink_to_hi(), \")\".to_string()),\n-                ],\n-                Applicability::MachineApplicable,\n-            );\n-            err.note(\n-                \"for more on the distinction between the stack and the heap, read \\\n-                 https://doc.rust-lang.org/book/ch15-01-box.html, \\\n-                 https://doc.rust-lang.org/rust-by-example/std/box.html, and \\\n-                 https://doc.rust-lang.org/std/boxed/index.html\",\n-            );\n+        if self.can_coerce(self.tcx.mk_box(found), expected) {\n+            let suggest_boxing = match found.kind() {\n+                ty::Tuple(tuple) if tuple.is_empty() => {\n+                    SuggestBoxing::Unit { start: span.shrink_to_lo(), end: span }\n+                }\n+                ty::Generator(def_id, ..)\n+                    if matches!(\n+                        self.tcx.generator_kind(def_id),\n+                        Some(GeneratorKind::Async(AsyncGeneratorKind::Closure))\n+                    ) =>\n+                {\n+                    SuggestBoxing::AsyncBody\n+                }\n+                _ => SuggestBoxing::Other { start: span.shrink_to_lo(), end: span.shrink_to_hi() },\n+            };\n+            err.subdiagnostic(suggest_boxing);\n+\n             true\n         } else {\n             false"}, {"sha": "ad9891a5dca687cc1b98716c519a15d3ddf8bdf3", "filename": "compiler/rustc_middle/src/ty/adt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadt.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -26,7 +26,7 @@ use super::{Destructor, FieldDef, GenericPredicates, Ty, TyCtxt, VariantDef, Var\n \n bitflags! {\n     #[derive(HashStable, TyEncodable, TyDecodable)]\n-    pub struct AdtFlags: u32 {\n+    pub struct AdtFlags: u16 {\n         const NO_ADT_FLAGS        = 0;\n         /// Indicates whether the ADT is an enum.\n         const IS_ENUM             = 1 << 0;"}, {"sha": "c255057287953056423cf2518b7f0ac019b888fe", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -1093,11 +1093,13 @@ impl<'tcx> TyCtxt<'tcx> {\n         v.0\n     }\n \n-    /// Given a `DefId` for an `fn`, return all the `dyn` and `impl` traits in its return type and associated alias span when type alias is used\n+    /// Given a `DefId` for an `fn`, return all the `dyn` and `impl` traits in\n+    /// its return type, and the associated alias span when type alias is used,\n+    /// along with a span for lifetime suggestion (if there are existing generics).\n     pub fn return_type_impl_or_dyn_traits_with_type_alias(\n         self,\n         scope_def_id: LocalDefId,\n-    ) -> Option<(Vec<&'tcx hir::Ty<'tcx>>, Span)> {\n+    ) -> Option<(Vec<&'tcx hir::Ty<'tcx>>, Span, Option<Span>)> {\n         let hir_id = self.hir().local_def_id_to_hir_id(scope_def_id);\n         let mut v = TraitObjectVisitor(vec![], self.hir());\n         // when the return type is a type alias\n@@ -1111,7 +1113,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         {\n             v.visit_ty(alias_ty);\n             if !v.0.is_empty() {\n-                return Some((v.0, alias_generics.span));\n+                return Some((v.0, alias_generics.span, alias_generics.span_for_lifetime_suggestion()));\n             }\n         }\n         return None;"}, {"sha": "8c69894f5ba7ead82ca4dd57231d4e54d7504800", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -115,7 +115,7 @@ impl<'tcx> Instance<'tcx> {\n     /// lifetimes erased, allowing a `ParamEnv` to be specified for use during normalization.\n     pub fn ty(&self, tcx: TyCtxt<'tcx>, param_env: ty::ParamEnv<'tcx>) -> Ty<'tcx> {\n         let ty = tcx.type_of(self.def.def_id());\n-        tcx.subst_and_normalize_erasing_regions(self.substs, param_env, ty.skip_binder())\n+        tcx.subst_and_normalize_erasing_regions(self.substs, param_env, ty)\n     }\n \n     /// Finds a crate that contains a monomorphization of this instance that\n@@ -578,14 +578,15 @@ impl<'tcx> Instance<'tcx> {\n         self.def.has_polymorphic_mir_body().then_some(self.substs)\n     }\n \n-    pub fn subst_mir<T>(&self, tcx: TyCtxt<'tcx>, v: &T) -> T\n+    pub fn subst_mir<T>(&self, tcx: TyCtxt<'tcx>, v: EarlyBinder<&T>) -> T\n     where\n         T: TypeFoldable<TyCtxt<'tcx>> + Copy,\n     {\n+        let v = v.map_bound(|v| *v);\n         if let Some(substs) = self.substs_for_mir_body() {\n-            EarlyBinder(*v).subst(tcx, substs)\n+            v.subst(tcx, substs)\n         } else {\n-            *v\n+            v.skip_binder()\n         }\n     }\n \n@@ -594,15 +595,15 @@ impl<'tcx> Instance<'tcx> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        v: T,\n+        v: EarlyBinder<T>,\n     ) -> T\n     where\n         T: TypeFoldable<TyCtxt<'tcx>> + Clone,\n     {\n         if let Some(substs) = self.substs_for_mir_body() {\n             tcx.subst_and_normalize_erasing_regions(substs, param_env, v)\n         } else {\n-            tcx.normalize_erasing_regions(param_env, v)\n+            tcx.normalize_erasing_regions(param_env, v.skip_binder())\n         }\n     }\n \n@@ -611,15 +612,15 @@ impl<'tcx> Instance<'tcx> {\n         &self,\n         tcx: TyCtxt<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        v: T,\n+        v: EarlyBinder<T>,\n     ) -> Result<T, NormalizationError<'tcx>>\n     where\n         T: TypeFoldable<TyCtxt<'tcx>> + Clone,\n     {\n         if let Some(substs) = self.substs_for_mir_body() {\n             tcx.try_subst_and_normalize_erasing_regions(substs, param_env, v)\n         } else {\n-            tcx.try_normalize_erasing_regions(param_env, v)\n+            tcx.try_normalize_erasing_regions(param_env, v.skip_binder())\n         }\n     }\n "}, {"sha": "88b084bbccbdcaf756fe2e53669b17af2a2ce039", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -1739,7 +1739,7 @@ pub struct Destructor {\n \n bitflags! {\n     #[derive(HashStable, TyEncodable, TyDecodable)]\n-    pub struct VariantFlags: u32 {\n+    pub struct VariantFlags: u8 {\n         const NO_VARIANT_FLAGS        = 0;\n         /// Indicates whether the field list of this variant is `#[non_exhaustive]`.\n         const IS_FIELD_LIST_NON_EXHAUSTIVE = 1 << 0;"}, {"sha": "9332b0430ffca294bcbbea218abb6ddef9b34365", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -139,7 +139,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         param_substs: SubstsRef<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        value: T,\n+        value: EarlyBinder<T>,\n     ) -> T\n     where\n         T: TypeFoldable<TyCtxt<'tcx>>,\n@@ -151,7 +151,7 @@ impl<'tcx> TyCtxt<'tcx> {\n              param_env={:?})\",\n             param_substs, value, param_env,\n         );\n-        let substituted = EarlyBinder(value).subst(self, param_substs);\n+        let substituted = value.subst(self, param_substs);\n         self.normalize_erasing_regions(param_env, substituted)\n     }\n \n@@ -163,7 +163,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         self,\n         param_substs: SubstsRef<'tcx>,\n         param_env: ty::ParamEnv<'tcx>,\n-        value: T,\n+        value: EarlyBinder<T>,\n     ) -> Result<T, NormalizationError<'tcx>>\n     where\n         T: TypeFoldable<TyCtxt<'tcx>>,\n@@ -175,7 +175,7 @@ impl<'tcx> TyCtxt<'tcx> {\n              param_env={:?})\",\n             param_substs, value, param_env,\n         );\n-        let substituted = EarlyBinder(value).subst(self, param_substs);\n+        let substituted = value.subst(self, param_substs);\n         self.try_normalize_erasing_regions(param_env, substituted)\n     }\n }"}, {"sha": "ece20d8d3e6ed9b6d48d2848caa0909c5c2613db", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -180,7 +180,7 @@ impl<'tcx> Inliner<'tcx> {\n         let Ok(callee_body) = callsite.callee.try_subst_mir_and_normalize_erasing_regions(\n             self.tcx,\n             self.param_env,\n-            callee_body.clone(),\n+            ty::EarlyBinder(callee_body.clone()),\n         ) else {\n             return Err(\"failed to normalize callee body\");\n         };\n@@ -444,7 +444,9 @@ impl<'tcx> Inliner<'tcx> {\n                 work_list.push(target);\n \n                 // If the place doesn't actually need dropping, treat it like a regular goto.\n-                let ty = callsite.callee.subst_mir(self.tcx, &place.ty(callee_body, tcx).ty);\n+                let ty = callsite\n+                    .callee\n+                    .subst_mir(self.tcx, ty::EarlyBinder(&place.ty(callee_body, tcx).ty));\n                 if ty.needs_drop(tcx, self.param_env) && let UnwindAction::Cleanup(unwind) = unwind {\n                         work_list.push(unwind);\n                     }\n@@ -788,7 +790,9 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n         match terminator.kind {\n             TerminatorKind::Drop { ref place, unwind, .. } => {\n                 // If the place doesn't actually need dropping, treat it like a regular goto.\n-                let ty = self.instance.subst_mir(tcx, &place.ty(self.callee_body, tcx).ty);\n+                let ty = self\n+                    .instance\n+                    .subst_mir(tcx, ty::EarlyBinder(&place.ty(self.callee_body, tcx).ty));\n                 if ty.needs_drop(tcx, self.param_env) {\n                     self.cost += CALL_PENALTY;\n                     if let UnwindAction::Cleanup(_) = unwind {\n@@ -799,7 +803,7 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n                 }\n             }\n             TerminatorKind::Call { func: Operand::Constant(ref f), unwind, .. } => {\n-                let fn_ty = self.instance.subst_mir(tcx, &f.literal.ty());\n+                let fn_ty = self.instance.subst_mir(tcx, ty::EarlyBinder(&f.literal.ty()));\n                 self.cost += if let ty::FnDef(def_id, _) = *fn_ty.kind() && tcx.is_intrinsic(def_id) {\n                     // Don't give intrinsics the extra penalty for calls\n                     INSTR_COST"}, {"sha": "1ccf06f6153fc369031864834d55c577dccd2f51", "filename": "compiler/rustc_mir_transform/src/inline/cycle.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline%2Fcycle.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -44,7 +44,11 @@ pub(crate) fn mir_callgraph_reachable<'tcx>(\n     ) -> bool {\n         trace!(%caller);\n         for &(callee, substs) in tcx.mir_inliner_callees(caller.def) {\n-            let Ok(substs) = caller.try_subst_mir_and_normalize_erasing_regions(tcx, param_env, substs) else {\n+            let Ok(substs) = caller.try_subst_mir_and_normalize_erasing_regions(\n+                tcx,\n+                param_env,\n+                ty::EarlyBinder(substs),\n+            ) else {\n                 trace!(?caller, ?param_env, ?substs, \"cannot normalize, skipping\");\n                 continue;\n             };"}, {"sha": "55c937b305a49d11e33b2dbbd044941ff2853623", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -677,7 +677,7 @@ impl<'a, 'tcx> MirNeighborCollector<'a, 'tcx> {\n         self.instance.subst_mir_and_normalize_erasing_regions(\n             self.tcx,\n             ty::ParamEnv::reveal_all(),\n-            value,\n+            ty::EarlyBinder(value),\n         )\n     }\n }"}, {"sha": "37b7f6bf8a8fcc61e11c556b577467075e45fb15", "filename": "compiler/rustc_monomorphize/src/partitioning/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning%2Fdefault.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -310,7 +310,7 @@ fn characteristic_def_id_of_mono_item<'tcx>(\n                     let impl_self_ty = tcx.subst_and_normalize_erasing_regions(\n                         instance.substs,\n                         ty::ParamEnv::reveal_all(),\n-                        tcx.type_of(impl_def_id).skip_binder(),\n+                        tcx.type_of(impl_def_id),\n                     );\n                     if let Some(def_id) = characteristic_def_id_of_type(impl_self_ty) {\n                         return Some(def_id);"}, {"sha": "d12bfc6f6bb1d6d6588b403ed7c2cff54a5b501e", "filename": "compiler/rustc_monomorphize/src/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Futil.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -29,12 +29,12 @@ pub(crate) fn dump_closure_profile<'tcx>(tcx: TyCtxt<'tcx>, closure_instance: In\n         let before_feature_tys = tcx.subst_and_normalize_erasing_regions(\n             closure_instance.substs,\n             param_env,\n-            before_feature_tys,\n+            ty::EarlyBinder(before_feature_tys),\n         );\n         let after_feature_tys = tcx.subst_and_normalize_erasing_regions(\n             closure_instance.substs,\n             param_env,\n-            after_feature_tys,\n+            ty::EarlyBinder(after_feature_tys),\n         );\n \n         let new_size = tcx"}, {"sha": "52159a7b06aa5178310ea0e4a2b3fc2aa4e58f33", "filename": "compiler/rustc_target/src/abi/call/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fcall%2Fmod.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -65,7 +65,7 @@ mod attr_impl {\n     // The subset of llvm::Attribute needed for arguments, packed into a bitfield.\n     bitflags::bitflags! {\n         #[derive(Default, HashStable_Generic)]\n-        pub struct ArgAttribute: u16 {\n+        pub struct ArgAttribute: u8 {\n             const NoAlias   = 1 << 1;\n             const NoCapture = 1 << 2;\n             const NonNull   = 1 << 3;"}, {"sha": "9029ba2a51aa1f1ff67239c5e28105065c02e6bf", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -334,7 +334,7 @@ fn associated_type_for_impl_trait_in_trait(\n             parent_count,\n             params,\n             param_def_id_to_index,\n-            has_self: false,\n+            has_self: opaque_ty_generics.has_self,\n             has_late_bound_regions: opaque_ty_generics.has_late_bound_regions,\n         }\n     });"}, {"sha": "ec577072e196f59f5572cf46a8b25f43d216e6a1", "filename": "compiler/rustc_ty_utils/src/instance.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Finstance.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -27,8 +27,7 @@ fn resolve_instance<'tcx>(\n         )\n     } else {\n         let ty = tcx.type_of(def);\n-        let item_type =\n-            tcx.subst_and_normalize_erasing_regions(substs, param_env, ty.skip_binder());\n+        let item_type = tcx.subst_and_normalize_erasing_regions(substs, param_env, ty);\n \n         let def = match *item_type.kind() {\n             ty::FnDef(def_id, ..) if tcx.is_intrinsic(def_id) => {"}, {"sha": "e87125a49a6a048a8d4270264472ec1b13f22ceb", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -19,7 +19,7 @@ include!(\"../dylib_util.rs\");\n \n use std::env;\n use std::path::PathBuf;\n-use std::process::{Child, Command};\n+use std::process::{exit, Child, Command};\n use std::str::FromStr;\n use std::time::Instant;\n \n@@ -47,7 +47,12 @@ fn main() {\n     } else {\n         (\"RUSTC_REAL\", \"RUSTC_LIBDIR\")\n     };\n-    let stage = env::var(\"RUSTC_STAGE\").expect(\"RUSTC_STAGE was not set\");\n+    let stage = env::var(\"RUSTC_STAGE\").unwrap_or_else(|_| {\n+        // Don't panic here; it's reasonable to try and run these shims directly. Give a helpful error instead.\n+        eprintln!(\"rustc shim: fatal: RUSTC_STAGE was not set\");\n+        eprintln!(\"rustc shim: note: use `x.py build -vvv` to see all environment variables set by bootstrap\");\n+        exit(101);\n+    });\n     let sysroot = env::var_os(\"RUSTC_SYSROOT\").expect(\"RUSTC_SYSROOT was not set\");\n     let on_fail = env::var_os(\"RUSTC_ON_FAIL\").map(Command::new);\n "}, {"sha": "d2b85f7a6297b90caeb1e0c498600b3152e9dfac", "filename": "src/bootstrap/bin/rustdoc.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/src%2Fbootstrap%2Fbin%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustdoc.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -5,13 +5,18 @@\n use std::env;\n use std::ffi::OsString;\n use std::path::PathBuf;\n-use std::process::Command;\n+use std::process::{exit, Command};\n \n include!(\"../dylib_util.rs\");\n \n fn main() {\n     let args = env::args_os().skip(1).collect::<Vec<_>>();\n-    let stage = env::var(\"RUSTC_STAGE\").expect(\"RUSTC_STAGE was not set\");\n+    let stage = env::var(\"RUSTC_STAGE\").unwrap_or_else(|_| {\n+        // Don't panic here; it's reasonable to try and run these shims directly. Give a helpful error instead.\n+        eprintln!(\"rustc shim: fatal: RUSTC_STAGE was not set\");\n+        eprintln!(\"rustc shim: note: use `x.py build -vvv` to see all environment variables set by bootstrap\");\n+        exit(101);\n+    });\n     let rustdoc = env::var_os(\"RUSTDOC_REAL\").expect(\"RUSTDOC_REAL was not set\");\n     let libdir = env::var_os(\"RUSTDOC_LIBDIR\").expect(\"RUSTDOC_LIBDIR was not set\");\n     let sysroot = env::var_os(\"RUSTC_SYSROOT\").expect(\"RUSTC_SYSROOT was not set\");"}, {"sha": "67b7d3691dc02df12ce70157704edc49d262cf1b", "filename": "src/tools/clippy/clippy_lints/src/methods/unnecessary_to_owned.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Funnecessary_to_owned.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -385,6 +385,9 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n             Node::Expr(parent_expr) => {\n                 if let Some((callee_def_id, call_substs, recv, call_args)) = get_callee_substs_and_args(cx, parent_expr)\n                 {\n+                    // FIXME: the `subst_identity()` below seems incorrect, since we eventually\n+                    // call `tcx.try_subst_and_normalize_erasing_regions` further down\n+                    // (i.e., we are explicitly not in the identity context).\n                     let fn_sig = cx.tcx.fn_sig(callee_def_id).subst_identity().skip_binder();\n                     if let Some(arg_index) = recv.into_iter().chain(call_args).position(|arg| arg.hir_id == expr.hir_id)\n                         && let Some(param_ty) = fn_sig.inputs().get(arg_index)\n@@ -435,7 +438,7 @@ fn can_change_type<'a>(cx: &LateContext<'a>, mut expr: &'a Expr<'a>, mut ty: Ty<\n                         let output_ty = fn_sig.output();\n                         if output_ty.contains(*param_ty) {\n                             if let Ok(new_ty)  = cx.tcx.try_subst_and_normalize_erasing_regions(\n-                                new_subst, cx.param_env, output_ty) {\n+                                new_subst, cx.param_env, EarlyBinder(output_ty)) {\n                                 expr = parent_expr;\n                                 ty = new_ty;\n                                 continue;"}, {"sha": "c9e043577ed6d90b652644371c59fb02a11b6b7b", "filename": "tests/ui/borrowck/suggest-lt-on-ty-alias-w-generics.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/tests%2Fui%2Fborrowck%2Fsuggest-lt-on-ty-alias-w-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/tests%2Fui%2Fborrowck%2Fsuggest-lt-on-ty-alias-w-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fsuggest-lt-on-ty-alias-w-generics.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -0,0 +1,11 @@\n+type Lazy<T> = Box<dyn Fn() -> T + 'static>;\n+\n+fn test(x: &i32) -> Lazy<i32> {\n+    Box::new(|| {\n+        //~^ ERROR lifetime may not live long enough\n+        //~| ERROR closure may outlive the current function\n+        *x\n+    })\n+}\n+\n+fn main() {}"}, {"sha": "28b4b4aa290d522efa9ed664aefa656ee872e382", "filename": "tests/ui/borrowck/suggest-lt-on-ty-alias-w-generics.stderr", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/tests%2Fui%2Fborrowck%2Fsuggest-lt-on-ty-alias-w-generics.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/tests%2Fui%2Fborrowck%2Fsuggest-lt-on-ty-alias-w-generics.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fsuggest-lt-on-ty-alias-w-generics.stderr?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -0,0 +1,43 @@\n+error: lifetime may not live long enough\n+  --> $DIR/suggest-lt-on-ty-alias-w-generics.rs:4:5\n+   |\n+LL |   fn test(x: &i32) -> Lazy<i32> {\n+   |              - let's call the lifetime of this reference `'1`\n+LL | /     Box::new(|| {\n+LL | |\n+LL | |\n+LL | |         *x\n+LL | |     })\n+   | |______^ returning this value requires that `'1` must outlive `'static`\n+   |\n+help: to declare that the trait object captures data from argument `x`, you can add a lifetime parameter `'a` in the type alias\n+   |\n+LL | type Lazy<'a, T> = Box<dyn Fn() -> T + 'a>;\n+   |           +++                          ~~\n+\n+error[E0373]: closure may outlive the current function, but it borrows `x`, which is owned by the current function\n+  --> $DIR/suggest-lt-on-ty-alias-w-generics.rs:4:14\n+   |\n+LL |     Box::new(|| {\n+   |              ^^ may outlive borrowed value `x`\n+...\n+LL |         *x\n+   |         -- `x` is borrowed here\n+   |\n+note: closure is returned here\n+  --> $DIR/suggest-lt-on-ty-alias-w-generics.rs:4:5\n+   |\n+LL | /     Box::new(|| {\n+LL | |\n+LL | |\n+LL | |         *x\n+LL | |     })\n+   | |______^\n+help: to force the closure to take ownership of `x` (and any other referenced variables), use the `move` keyword\n+   |\n+LL |     Box::new(move || {\n+   |              ++++\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0373`."}, {"sha": "927134a588c18f7d063fa144d439c52dafbee92a", "filename": "tests/ui/issues/auxiliary/issue-111011.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-111011.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-111011.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-111011.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -0,0 +1,12 @@\n+#![feature(async_closure)]\n+\n+// edition:2021\n+\n+fn foo<X>(x: impl FnOnce() -> Box<X>) {}\n+// just to make sure async closures can still be suggested for boxing.\n+fn bar<X>(x: Box<dyn FnOnce() -> X>) {}\n+\n+fn main() {\n+    foo(async move || {}); //~ ERROR mismatched types\n+    bar(async move || {}); //~ ERROR mismatched types\n+}"}, {"sha": "082f0f035ad46c2de96ef746dd2d7b5d8885ff0b", "filename": "tests/ui/issues/auxiliary/issue-111011.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-111011.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-111011.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fauxiliary%2Fissue-111011.stderr?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -0,0 +1,34 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-111011.rs:10:23\n+   |\n+LL |     foo(async move || {});\n+   |                       ^^ expected `Box<_>`, found `async` closure body\n+   |\n+   = note:            expected struct `Box<_>`\n+           found `async` closure body `[async closure body@$DIR/issue-111011.rs:10:23: 10:25]`\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-111011.rs:11:9\n+   |\n+LL |     bar(async move || {});\n+   |     --- ^^^^^^^^^^^^^^^^ expected `Box<dyn FnOnce() -> _>`, found closure\n+   |     |\n+   |     arguments to this function are incorrect\n+   |\n+   = note: expected struct `Box<(dyn FnOnce() -> _ + 'static)>`\n+             found closure `[closure@$DIR/issue-111011.rs:11:9: 11:22]`\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+note: function defined here\n+  --> $DIR/issue-111011.rs:7:4\n+   |\n+LL | fn bar<X>(x: Box<dyn FnOnce() -> X>) {}\n+   |    ^^^    -------------------------\n+help: store this in the heap by calling `Box::new`\n+   |\n+LL |     bar(Box::new(async move || {}));\n+   |         +++++++++                +\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "19b9a17705b9303389fe187e49053c51c3feef31", "filename": "tests/ui/native-library-link-flags/msvc-non-utf8-output.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/tests%2Fui%2Fnative-library-link-flags%2Fmsvc-non-utf8-output.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/tests%2Fui%2Fnative-library-link-flags%2Fmsvc-non-utf8-output.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnative-library-link-flags%2Fmsvc-non-utf8-output.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -1,6 +1,5 @@\n // build-fail\n-// compile-flags:-C link-arg=m\u00e4rchenhaft\n+// compile-flags:-C link-arg=\u29ba\u2148\u2f6f\u2b4f\u2f7d\u25c3\u287d\u269e\n // only-msvc\n-// error-pattern:= note: LINK : fatal error LNK1181:\n-// normalize-stderr-test \"(\\s*\\|\\n)\\s*= note: .*\\n\" -> \"$1\"\n+// normalize-stderr-test \"(?:.|\\n)*(\u29ba\u2148\u2f6f\u2b4f\u2f7d\u25c3\u287d\u269e)(?:.|\\n)*\" -> \"$1\"\n pub fn main() {}"}, {"sha": "7f3ef376447a694f334213b0ac827a1f2d8204ac", "filename": "tests/ui/native-library-link-flags/msvc-non-utf8-output.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/tests%2Fui%2Fnative-library-link-flags%2Fmsvc-non-utf8-output.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/tests%2Fui%2Fnative-library-link-flags%2Fmsvc-non-utf8-output.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fnative-library-link-flags%2Fmsvc-non-utf8-output.stderr?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -1,7 +1 @@\n-error: linking with `link.exe` failed: exit code: 1181\n-   |\n-   = note: LINK : fatal error LNK1181: cannot open input file 'm\u00e4rchenhaft.obj'\n-           \n-\n-error: aborting due to previous error\n-\n+\u29ba\u2148\u2f6f\u2b4f\u2f7d\u25c3\u287d\u269e\n\\ No newline at end of file"}, {"sha": "46683aa095355d1fb8ac99feef34185f6b26b749", "filename": "tests/ui/suggestions/suggest-boxed-empty-block.fixed", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/tests%2Fui%2Fsuggestions%2Fsuggest-boxed-empty-block.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/tests%2Fui%2Fsuggestions%2Fsuggest-boxed-empty-block.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-boxed-empty-block.fixed?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -0,0 +1,12 @@\n+#![feature(async_closure)]\n+\n+// edition:2021\n+// run-rustfix\n+\n+fn foo<T>(_: Box<T>) {}\n+fn bar<T>(_: impl Fn() -> Box<T>) {}\n+\n+fn main() {\n+    foo(Box::new(())); //~ ERROR mismatched types\n+    bar(|| Box::new(())); //~ ERROR mismatched types\n+}"}, {"sha": "e19670a50184130114ae274e91d30d372365bbe2", "filename": "tests/ui/suggestions/suggest-boxed-empty-block.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/tests%2Fui%2Fsuggestions%2Fsuggest-boxed-empty-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/tests%2Fui%2Fsuggestions%2Fsuggest-boxed-empty-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-boxed-empty-block.rs?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -0,0 +1,12 @@\n+#![feature(async_closure)]\n+\n+// edition:2021\n+// run-rustfix\n+\n+fn foo<T>(_: Box<T>) {}\n+fn bar<T>(_: impl Fn() -> Box<T>) {}\n+\n+fn main() {\n+    foo({}); //~ ERROR mismatched types\n+    bar(|| {}); //~ ERROR mismatched types\n+}"}, {"sha": "474a37b888f357fd873d450a6d17396f00b08e64", "filename": "tests/ui/suggestions/suggest-boxed-empty-block.stderr", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/c86e7fb60f5343041fd0c27d4affaf3261115666/tests%2Fui%2Fsuggestions%2Fsuggest-boxed-empty-block.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c86e7fb60f5343041fd0c27d4affaf3261115666/tests%2Fui%2Fsuggestions%2Fsuggest-boxed-empty-block.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuggestions%2Fsuggest-boxed-empty-block.stderr?ref=c86e7fb60f5343041fd0c27d4affaf3261115666", "patch": "@@ -0,0 +1,33 @@\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-boxed-empty-block.rs:10:9\n+   |\n+LL |     foo({});\n+   |         ^^ expected `Box<_>`, found `()`\n+   |\n+   = note: expected struct `Box<_>`\n+           found unit type `()`\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+help: store this in the heap by calling `Box::new`\n+   |\n+LL -     foo({});\n+LL +     foo(Box::new(()));\n+   |\n+\n+error[E0308]: mismatched types\n+  --> $DIR/suggest-boxed-empty-block.rs:11:12\n+   |\n+LL |     bar(|| {});\n+   |            ^^ expected `Box<_>`, found `()`\n+   |\n+   = note: expected struct `Box<_>`\n+           found unit type `()`\n+   = note: for more on the distinction between the stack and the heap, read https://doc.rust-lang.org/book/ch15-01-box.html, https://doc.rust-lang.org/rust-by-example/std/box.html, and https://doc.rust-lang.org/std/boxed/index.html\n+help: store this in the heap by calling `Box::new`\n+   |\n+LL -     bar(|| {});\n+LL +     bar(|| Box::new(()));\n+   |\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0308`."}]}