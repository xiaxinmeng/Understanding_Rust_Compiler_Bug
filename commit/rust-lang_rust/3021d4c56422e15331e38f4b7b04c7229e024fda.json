{"sha": "3021d4c56422e15331e38f4b7b04c7229e024fda", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMjFkNGM1NjQyMmUxNTMzMWUzOGY0YjdiMDRjNzIyOWUwMjRmZGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-24T23:55:35Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-03-25T01:37:16Z"}, "message": "Test fixes and rebase conflicts, round 2", "tree": {"sha": "b585f5625dde7ab0af35fb3dd41a67ba0507f525", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b585f5625dde7ab0af35fb3dd41a67ba0507f525"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3021d4c56422e15331e38f4b7b04c7229e024fda", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3021d4c56422e15331e38f4b7b04c7229e024fda", "html_url": "https://github.com/rust-lang/rust/commit/3021d4c56422e15331e38f4b7b04c7229e024fda", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3021d4c56422e15331e38f4b7b04c7229e024fda/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db2c3ba0cfc7f9d4ee16be38f885ef129a3a8f71", "url": "https://api.github.com/repos/rust-lang/rust/commits/db2c3ba0cfc7f9d4ee16be38f885ef129a3a8f71", "html_url": "https://github.com/rust-lang/rust/commit/db2c3ba0cfc7f9d4ee16be38f885ef129a3a8f71"}], "stats": {"total": 28, "additions": 17, "deletions": 11}, "files": [{"sha": "ea98f6f5f24616afd809055aba4ace834b2f5afc", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3021d4c56422e15331e38f4b7b04c7229e024fda/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3021d4c56422e15331e38f4b7b04c7229e024fda/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=3021d4c56422e15331e38f4b7b04c7229e024fda", "patch": "@@ -28,6 +28,7 @@ use iter::ExactSizeIterator;\n use iter::{Map, Iterator, IteratorExt, DoubleEndedIterator};\n use marker::Sized;\n use mem;\n+#[allow(deprecated)]\n use num::Int;\n use ops::{Fn, FnMut, FnOnce};\n use option::Option::{self, None, Some};"}, {"sha": "89843979cd01583346aef92808b3edafe843d9b0", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3021d4c56422e15331e38f4b7b04c7229e024fda/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3021d4c56422e15331e38f4b7b04c7229e024fda/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=3021d4c56422e15331e38f4b7b04c7229e024fda", "patch": "@@ -2439,6 +2439,7 @@ pub mod consts {\n         }\n         pub mod posix88 {\n             use types::os::arch::c95::c_int;\n+            use types::os::arch::posix88::mode_t;\n \n             pub const O_RDONLY : c_int = 0;\n             pub const O_WRONLY : c_int = 1;"}, {"sha": "1ffc6001af5721b3163bac4e575a7c3dc21df67f", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3021d4c56422e15331e38f4b7b04c7229e024fda/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3021d4c56422e15331e38f4b7b04c7229e024fda/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=3021d4c56422e15331e38f4b7b04c7229e024fda", "patch": "@@ -352,7 +352,7 @@ pub mod reader {\n             let i = (val >> 28) as uint;\n             let (shift, mask) = SHIFT_MASK_TABLE[i];\n             Ok(Res {\n-                val: ((val >> shift) & mask) as uint,\n+                val: ((val >> shift) & mask) as usize,\n                 next: start + ((32 - shift) >> 3),\n             })\n         }"}, {"sha": "df6beab0f5832ebc75bbfdf62fbd0b6a412bbeef", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3021d4c56422e15331e38f4b7b04c7229e024fda/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3021d4c56422e15331e38f4b7b04c7229e024fda/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=3021d4c56422e15331e38f4b7b04c7229e024fda", "patch": "@@ -290,7 +290,7 @@ fn resolved_path(w: &mut fmt::Formatter, did: ast::DefId, p: &clean::Path,\n             if ast_util::is_local(did) || cache.inlined.contains(&did) {\n                 Some(repeat(\"../\").take(loc.len()).collect::<String>())\n             } else {\n-                match cache.extern_locations[did.krate] {\n+                match cache.extern_locations[&did.krate] {\n                     render::Remote(ref s) => Some(s.to_string()),\n                     render::Local => {\n                         Some(repeat(\"../\").take(loc.len()).collect::<String>())\n@@ -404,11 +404,11 @@ fn primitive_link(f: &mut fmt::Formatter,\n             needs_termination = true;\n         }\n         Some(&cnum) => {\n-            let path = &m.paths[ast::DefId {\n+            let path = &m.paths[&ast::DefId {\n                 krate: cnum,\n                 node: ast::CRATE_NODE_ID,\n             }];\n-            let loc = match m.extern_locations[cnum] {\n+            let loc = match m.extern_locations[&cnum] {\n                 render::Remote(ref s) => Some(s.to_string()),\n                 render::Local => {\n                     let len = CURRENT_LOCATION_KEY.with(|s| s.borrow().len());"}, {"sha": "d57739c4002494165c4f48cf4fbc7abbce720425", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3021d4c56422e15331e38f4b7b04c7229e024fda/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3021d4c56422e15331e38f4b7b04c7229e024fda/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=3021d4c56422e15331e38f4b7b04c7229e024fda", "patch": "@@ -1409,8 +1409,8 @@ impl<'a> Item<'a> {\n         // located, then we return `None`.\n         } else {\n             let cache = cache();\n-            let path = &cache.external_paths[self.item.def_id];\n-            let root = match cache.extern_locations[self.item.def_id.krate] {\n+            let path = &cache.external_paths[&self.item.def_id];\n+            let root = match cache.extern_locations[&self.item.def_id.krate] {\n                 Remote(ref s) => s.to_string(),\n                 Local => self.cx.root_path.clone(),\n                 Unknown => return None,\n@@ -1868,7 +1868,7 @@ fn item_trait(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n                 path = if ast_util::is_local(it.def_id) {\n                     cx.current.connect(\"/\")\n                 } else {\n-                    let path = &cache.external_paths[it.def_id];\n+                    let path = &cache.external_paths[&it.def_id];\n                     path[..path.len() - 1].connect(\"/\")\n                 },\n                 ty = shortty(it).to_static_str(),"}, {"sha": "3f813b30ecc1d748aad6cf52d173a93adc861de7", "filename": "src/librustdoc/visit_ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3021d4c56422e15331e38f4b7b04c7229e024fda/src%2Flibrustdoc%2Fvisit_ast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3021d4c56422e15331e38f4b7b04c7229e024fda/src%2Flibrustdoc%2Fvisit_ast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fvisit_ast.rs?ref=3021d4c56422e15331e38f4b7b04c7229e024fda", "patch": "@@ -196,7 +196,7 @@ impl<'a, 'tcx> RustdocVisitor<'a, 'tcx> {\n             Some(tcx) => tcx,\n             None => return false\n         };\n-        let def = tcx.def_map.borrow()[id].def_id();\n+        let def = tcx.def_map.borrow()[&id].def_id();\n         if !ast_util::is_local(def) { return false }\n         let analysis = match self.analysis {\n             Some(analysis) => analysis, None => return false"}, {"sha": "734268c70ac9ccd1c0e906d77df44aee4708d370", "filename": "src/libstd/sys/windows/net.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3021d4c56422e15331e38f4b7b04c7229e024fda/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3021d4c56422e15331e38f4b7b04c7229e024fda/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fnet.rs?ref=3021d4c56422e15331e38f4b7b04c7229e024fda", "patch": "@@ -36,7 +36,7 @@ pub fn init() {\n                                 &mut data);\n         assert_eq!(ret, 0);\n \n-        rt::at_exit(|| { c::WSACleanup(); })\n+        let _ = rt::at_exit(|| { c::WSACleanup(); });\n     });\n }\n "}, {"sha": "c908c791247d1b3bc47b8379778b380926078fb7", "filename": "src/libstd/sys/windows/thread_local.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3021d4c56422e15331e38f4b7b04c7229e024fda/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3021d4c56422e15331e38f4b7b04c7229e024fda/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fthread_local.rs?ref=3021d4c56422e15331e38f4b7b04c7229e024fda", "patch": "@@ -133,16 +133,20 @@ unsafe fn init_dtors() {\n     if !DTORS.is_null() { return }\n \n     let dtors = box Vec::<(Key, Dtor)>::new();\n-    DTORS = boxed::into_raw(dtors);\n \n-    rt::at_exit(move|| {\n+    let res = rt::at_exit(move|| {\n         DTOR_LOCK.lock();\n         let dtors = DTORS;\n         DTORS = 1 as *mut _;\n         Box::from_raw(dtors);\n         assert!(DTORS as uint == 1); // can't re-init after destructing\n         DTOR_LOCK.unlock();\n     });\n+    if res.is_ok() {\n+        DTORS = boxed::into_raw(dtors);\n+    } else {\n+        DTORS = 1 as *mut _;\n+    }\n }\n \n unsafe fn register_dtor(key: Key, dtor: Dtor) {"}]}