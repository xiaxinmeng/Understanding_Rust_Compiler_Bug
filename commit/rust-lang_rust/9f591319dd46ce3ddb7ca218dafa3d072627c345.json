{"sha": "9f591319dd46ce3ddb7ca218dafa3d072627c345", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNTkxMzE5ZGQ0NmNlM2RkYjdjYTIxOGRhZmEzZDA3MjYyN2MzNDU=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-23T22:44:57Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-08-23T22:46:10Z"}, "message": "Rename str::bytes to str::to_bytes\n\nCloses #3245", "tree": {"sha": "2d54276d64555a3ac921fb3c146224e366d2f205", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d54276d64555a3ac921fb3c146224e366d2f205"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f591319dd46ce3ddb7ca218dafa3d072627c345", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f591319dd46ce3ddb7ca218dafa3d072627c345", "html_url": "https://github.com/rust-lang/rust/commit/9f591319dd46ce3ddb7ca218dafa3d072627c345", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f591319dd46ce3ddb7ca218dafa3d072627c345/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0698fc665033f905470a4b98ea82bdb4f8342352", "url": "https://api.github.com/repos/rust-lang/rust/commits/0698fc665033f905470a4b98ea82bdb4f8342352", "html_url": "https://github.com/rust-lang/rust/commit/0698fc665033f905470a4b98ea82bdb4f8342352"}], "stats": {"total": 179, "additions": 90, "deletions": 89}, "files": [{"sha": "91056d705b02cc99c7157cd01aefc1405ce8e276", "filename": "doc/tutorial.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -2713,7 +2713,7 @@ fn as_hex(data: ~[u8]) -> ~str {\n }\n \n fn sha1(data: ~str) -> ~str unsafe {\n-    let bytes = str::bytes(data);\n+    let bytes = str::to_bytes(data);\n     let hash = crypto::SHA1(vec::unsafe::to_ptr(bytes),\n                             vec::len(bytes) as c_uint, ptr::null());\n     return as_hex(vec::unsafe::from_buf(hash, 20u));\n@@ -2813,7 +2813,7 @@ The `sha1` function is the most obscure part of the program.\n # fn as_hex(data: ~[u8]) -> ~str { ~\"hi\" }\n fn sha1(data: ~str) -> ~str {\n     unsafe {\n-        let bytes = str::bytes(data);\n+        let bytes = str::to_bytes(data);\n         let hash = crypto::SHA1(vec::unsafe::to_ptr(bytes),\n                                 vec::len(bytes), ptr::null());\n         return as_hex(vec::unsafe::from_buf(hash, 20u));\n@@ -2856,16 +2856,16 @@ Let's look at our `sha1` function again.\n # fn as_hex(data: ~[u8]) -> ~str { ~\"hi\" }\n # fn x(data: ~str) -> ~str {\n # unsafe {\n-let bytes = str::bytes(data);\n+let bytes = str::to_bytes(data);\n let hash = crypto::SHA1(vec::unsafe::to_ptr(bytes),\n                         vec::len(bytes), ptr::null());\n return as_hex(vec::unsafe::from_buf(hash, 20u));\n # }\n # }\n ~~~~\n \n-The `str::bytes` function is perfectly safe, it converts a string to\n-an `[u8]`. This byte array is then fed to `vec::unsafe::to_ptr`, which\n+The `str::to_bytes` function is perfectly safe: it converts a string to\n+a `[u8]`. This byte array is then fed to `vec::unsafe::to_ptr`, which\n returns an unsafe pointer to its contents.\n \n This pointer will become invalid as soon as the vector it points into"}, {"sha": "4876022a94eefaf895c8d64e7f245ac360abbdf7", "filename": "src/libcore/int-template.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibcore%2Fint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibcore%2Fint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fint-template.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -156,7 +156,7 @@ fn parse_buf(buf: ~[u8], radix: uint) -> option<T> {\n }\n \n /// Parse a string to an int\n-fn from_str(s: ~str) -> option<T> { parse_buf(str::bytes(s), 10u) }\n+fn from_str(s: ~str) -> option<T> { parse_buf(str::to_bytes(s), 10u) }\n \n /// Convert to a string in a given base\n fn to_str(n: T, radix: uint) -> ~str {\n@@ -202,27 +202,27 @@ fn test_from_str() {\n #[test]\n #[ignore]\n fn test_parse_buf() {\n-    import str::bytes;\n-    assert parse_buf(bytes(~\"123\"), 10u) == some(123 as T);\n-    assert parse_buf(bytes(~\"1001\"), 2u) == some(9 as T);\n-    assert parse_buf(bytes(~\"123\"), 8u) == some(83 as T);\n-    assert parse_buf(bytes(~\"123\"), 16u) == some(291 as T);\n-    assert parse_buf(bytes(~\"ffff\"), 16u) == some(65535 as T);\n-    assert parse_buf(bytes(~\"FFFF\"), 16u) == some(65535 as T);\n-    assert parse_buf(bytes(~\"z\"), 36u) == some(35 as T);\n-    assert parse_buf(bytes(~\"Z\"), 36u) == some(35 as T);\n-\n-    assert parse_buf(bytes(~\"-123\"), 10u) == some(-123 as T);\n-    assert parse_buf(bytes(~\"-1001\"), 2u) == some(-9 as T);\n-    assert parse_buf(bytes(~\"-123\"), 8u) == some(-83 as T);\n-    assert parse_buf(bytes(~\"-123\"), 16u) == some(-291 as T);\n-    assert parse_buf(bytes(~\"-ffff\"), 16u) == some(-65535 as T);\n-    assert parse_buf(bytes(~\"-FFFF\"), 16u) == some(-65535 as T);\n-    assert parse_buf(bytes(~\"-z\"), 36u) == some(-35 as T);\n-    assert parse_buf(bytes(~\"-Z\"), 36u) == some(-35 as T);\n-\n-    assert parse_buf(str::bytes(~\"Z\"), 35u) == none;\n-    assert parse_buf(str::bytes(~\"-9\"), 2u) == none;\n+    import str::to_bytes;\n+    assert parse_buf(to_bytes(~\"123\"), 10u) == some(123 as T);\n+    assert parse_buf(to_bytes(~\"1001\"), 2u) == some(9 as T);\n+    assert parse_buf(to_bytes(~\"123\"), 8u) == some(83 as T);\n+    assert parse_buf(to_bytes(~\"123\"), 16u) == some(291 as T);\n+    assert parse_buf(to_bytes(~\"ffff\"), 16u) == some(65535 as T);\n+    assert parse_buf(to_bytes(~\"FFFF\"), 16u) == some(65535 as T);\n+    assert parse_buf(to_bytes(~\"z\"), 36u) == some(35 as T);\n+    assert parse_buf(to_bytes(~\"Z\"), 36u) == some(35 as T);\n+\n+    assert parse_buf(to_bytes(~\"-123\"), 10u) == some(-123 as T);\n+    assert parse_buf(to_bytes(~\"-1001\"), 2u) == some(-9 as T);\n+    assert parse_buf(to_bytes(~\"-123\"), 8u) == some(-83 as T);\n+    assert parse_buf(to_bytes(~\"-123\"), 16u) == some(-291 as T);\n+    assert parse_buf(to_bytes(~\"-ffff\"), 16u) == some(-65535 as T);\n+    assert parse_buf(to_bytes(~\"-FFFF\"), 16u) == some(-65535 as T);\n+    assert parse_buf(to_bytes(~\"-z\"), 36u) == some(-35 as T);\n+    assert parse_buf(to_bytes(~\"-Z\"), 36u) == some(-35 as T);\n+\n+    assert parse_buf(to_bytes(~\"Z\"), 35u) == none;\n+    assert parse_buf(to_bytes(~\"-9\"), 2u) == none;\n }\n \n #[test]"}, {"sha": "b636a99e323e8d8ce3a38596f22077ed19341bb2", "filename": "src/libcore/io.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibcore%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibcore%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fio.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -319,7 +319,7 @@ fn with_bytes_reader_between<t>(bytes: ~[u8], start: uint, end: uint,\n }\n \n fn str_reader(s: ~str) -> Reader {\n-    bytes_reader(str::bytes(s))\n+    bytes_reader(str::to_bytes(s))\n }\n \n fn with_str_reader<T>(s: ~str, f: fn(Reader) -> T) -> T {"}, {"sha": "749cb246af20f3f081af158fc717eea123a3a8ea", "filename": "src/libcore/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -1028,7 +1028,7 @@ mod tests {\n       };\n       assert (ostream as uint != 0u);\n       let s = ~\"hello\";\n-      let mut buf = vec::to_mut(str::bytes(s) + ~[0 as u8]);\n+      let mut buf = vec::to_mut(str::to_bytes(s) + ~[0 as u8]);\n       do vec::as_mut_buf(buf) |b, _len| {\n           assert (libc::fwrite(b as *c_void, 1u as size_t,\n                                (str::len(s) + 1u) as size_t, ostream)"}, {"sha": "5f1c100a15507f7bed64ac6562d655d3ce4ea2df", "filename": "src/libcore/str.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -38,7 +38,7 @@ export\n    trim,\n \n    // Transforming strings\n-   bytes,\n+   to_bytes,\n    byte_slice,\n    chars,\n    substr,\n@@ -372,7 +372,7 @@ Section: Transforming strings\n  *\n  * The result vector is not null-terminated.\n  */\n-pure fn bytes(s: &str) -> ~[u8] {\n+pure fn to_bytes(s: &str) -> ~[u8] {\n     unsafe {\n         let mut s_copy = from_slice(s);\n         let mut v: ~[u8] = ::unsafe::transmute(s_copy);\n@@ -2727,7 +2727,7 @@ mod tests {\n     fn vec_str_conversions() {\n         let s1: ~str = ~\"All mimsy were the borogoves\";\n \n-        let v: ~[u8] = bytes(s1);\n+        let v: ~[u8] = to_bytes(s1);\n         let s2: ~str = from_bytes(v);\n         let mut i: uint = 0u;\n         let n1: uint = len(s1);"}, {"sha": "6a5558e02365e83359233549c4265680867f3ebe", "filename": "src/libcore/to_bytes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibcore%2Fto_bytes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibcore%2Fto_bytes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fto_bytes.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -15,9 +15,9 @@ impl @~[u8]: ToBytes {\n }\n \n impl ~str: ToBytes {\n-    fn to_bytes() -> ~[u8] { str::bytes(self) }\n+    fn to_bytes() -> ~[u8] { str::to_bytes(self) }\n }\n \n impl @(~str): ToBytes {\n-    fn to_bytes() -> ~[u8] { str::bytes(*self) }\n+    fn to_bytes() -> ~[u8] { str::to_bytes(*self) }\n }"}, {"sha": "6bb485d68bebf3c720dce40bdaf8b3f66cf88cbf", "filename": "src/libcore/uint-template.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibcore%2Fuint-template.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibcore%2Fuint-template.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fuint-template.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -138,7 +138,7 @@ fn parse_buf(buf: &[const u8], radix: uint) -> option<T> {\n }\n \n /// Parse a string to an int\n-fn from_str(s: ~str) -> option<T> { parse_buf(str::bytes(s), 10u) }\n+fn from_str(s: ~str) -> option<T> { parse_buf(str::to_bytes(s), 10u) }\n \n /// Parse a string as an unsigned integer.\n fn from_str_radix(buf: ~str, radix: u64) -> option<u64> {\n@@ -267,16 +267,16 @@ fn test_from_str() {\n #[test]\n #[ignore]\n fn test_parse_buf() {\n-    import str::bytes;\n-    assert parse_buf(bytes(~\"123\"), 10u) == some(123u as T);\n-    assert parse_buf(bytes(~\"1001\"), 2u) == some(9u as T);\n-    assert parse_buf(bytes(~\"123\"), 8u) == some(83u as T);\n-    assert parse_buf(bytes(~\"123\"), 16u) == some(291u as T);\n-    assert parse_buf(bytes(~\"ffff\"), 16u) == some(65535u as T);\n-    assert parse_buf(bytes(~\"z\"), 36u) == some(35u as T);\n-\n-    assert parse_buf(str::bytes(~\"Z\"), 10u) == none;\n-    assert parse_buf(str::bytes(~\"_\"), 2u) == none;\n+    import str::to_bytes;\n+    assert parse_buf(to_bytes(~\"123\"), 10u) == some(123u as T);\n+    assert parse_buf(to_bytes(~\"1001\"), 2u) == some(9u as T);\n+    assert parse_buf(to_bytes(~\"123\"), 8u) == some(83u as T);\n+    assert parse_buf(to_bytes(~\"123\"), 16u) == some(291u as T);\n+    assert parse_buf(to_bytes(~\"ffff\"), 16u) == some(65535u as T);\n+    assert parse_buf(to_bytes(~\"z\"), 36u) == some(35u as T);\n+\n+    assert parse_buf(to_bytes(~\"Z\"), 10u) == none;\n+    assert parse_buf(to_bytes(~\"_\"), 2u) == none;\n }\n \n #[test]"}, {"sha": "e990b5f5e5010c4ca3289606dc43fcd9ada22afb", "filename": "src/libstd/base64.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibstd%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibstd%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbase64.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -57,7 +57,7 @@ impl ~[u8]: to_base64 {\n \n impl ~str: to_base64 {\n     fn to_base64() -> ~str {\n-        str::bytes(self).to_base64()\n+        str::to_bytes(self).to_base64()\n     }\n }\n \n@@ -129,7 +129,7 @@ impl ~[u8]: from_base64 {\n \n impl ~str: from_base64 {\n     fn from_base64() -> ~[u8] {\n-        str::bytes(self).from_base64()\n+        str::to_bytes(self).from_base64()\n     }\n }\n \n@@ -148,12 +148,12 @@ mod tests {\n \n     #[test]\n     fn test_from_base64() {\n-        assert (~\"\").from_base64() == str::bytes(~\"\");\n-        assert (~\"Zg==\").from_base64() == str::bytes(~\"f\");\n-        assert (~\"Zm8=\").from_base64() == str::bytes(~\"fo\");\n-        assert (~\"Zm9v\").from_base64() == str::bytes(~\"foo\");\n-        assert (~\"Zm9vYg==\").from_base64() == str::bytes(~\"foob\");\n-        assert (~\"Zm9vYmE=\").from_base64() == str::bytes(~\"fooba\");\n-        assert (~\"Zm9vYmFy\").from_base64() == str::bytes(~\"foobar\");\n+        assert (~\"\").from_base64() == str::to_bytes(~\"\");\n+        assert (~\"Zg==\").from_base64() == str::to_bytes(~\"f\");\n+        assert (~\"Zm8=\").from_base64() == str::to_bytes(~\"fo\");\n+        assert (~\"Zm9v\").from_base64() == str::to_bytes(~\"foo\");\n+        assert (~\"Zm9vYg==\").from_base64() == str::to_bytes(~\"foob\");\n+        assert (~\"Zm9vYmE=\").from_base64() == str::to_bytes(~\"fooba\");\n+        assert (~\"Zm9vYmFy\").from_base64() == str::to_bytes(~\"foobar\");\n     }\n }"}, {"sha": "04efe4aa74571f927889f2efd796da41fdf9bd10", "filename": "src/libstd/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibstd%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibstd%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Febml.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -295,7 +295,7 @@ impl writer {\n \n     fn wr_str(s: ~str) {\n         debug!(\"Write str: %?\", s);\n-        self.writer.write(str::bytes(s));\n+        self.writer.write(str::to_bytes(s));\n     }\n }\n "}, {"sha": "48601fc7585bf983cf1a831592ebfcdebc21e39c", "filename": "src/libstd/md4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibstd%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibstd%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmd4.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -100,7 +100,7 @@ fn md4_str(msg: ~[u8]) -> ~str {\n     result\n }\n \n-fn md4_text(msg: ~str) -> ~str { md4_str(str::bytes(msg)) }\n+fn md4_text(msg: ~str) -> ~str { md4_str(str::to_bytes(msg)) }\n \n #[test]\n fn test_md4() {"}, {"sha": "d1cbe221ed394cd036f0846fbf554487e4551d66", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -1523,7 +1523,7 @@ mod test {\n                             server_ch.send(\n                                 str::from_bytes(data));\n                             log(debug, ~\"SERVER: before write\");\n-                            tcp_write_single(sock, str::bytes(resp));\n+                            tcp_write_single(sock, str::to_bytes(resp));\n                             log(debug, ~\"SERVER: after write.. die\");\n                             core::comm::send(kill_ch, none);\n                           }\n@@ -1599,7 +1599,7 @@ mod test {\n         }\n         else {\n             let sock = result::unwrap(connect_result);\n-            let resp_bytes = str::bytes(resp);\n+            let resp_bytes = str::to_bytes(resp);\n             tcp_write_single(sock, resp_bytes);\n             let read_result = sock.read(0u);\n             if read_result.is_err() {"}, {"sha": "9bc6a0aab3ac1584d103aa0f80de0b5231cf2331", "filename": "src/libstd/net_url.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibstd%2Fnet_url.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibstd%2Fnet_url.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_url.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -1029,7 +1029,7 @@ mod tests {\n \n         assert decode_form_urlencoded(~[]) == str_hash();\n \n-        let s = str::bytes(~\"a=1&foo+bar=abc&foo+bar=12+%3D+34\");\n+        let s = str::to_bytes(~\"a=1&foo+bar=abc&foo+bar=12+%3D+34\");\n         assert decode_form_urlencoded(s) == hash_from_strs(~[\n             (~\"a\", @dvec::from_elem(@~\"1\")),\n             (~\"foo bar\", @dvec::from_vec(~[mut @~\"abc\", @~\"12 = 34\"]))"}, {"sha": "508bdaa86f0da5187ff1c55296fc487646625813", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -228,7 +228,7 @@ fn sha1() -> sha1 {\n             self.computed = false;\n         }\n         fn input(msg: ~[u8]) { add_input(self, msg); }\n-        fn input_str(msg: ~str) { add_input(self, str::bytes(msg)); }\n+        fn input_str(msg: ~str) { add_input(self, str::to_bytes(msg)); }\n         fn result() -> ~[u8] { return mk_result(self); }\n         fn result_str() -> ~str {\n             let r = mk_result(self);"}, {"sha": "2ca7202dff6983e772bc23129c8b5952f41a860c", "filename": "src/libstd/treemap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibstd%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibstd%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftreemap.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -132,8 +132,8 @@ mod tests {\n     fn u8_map() {\n         let m = treemap();\n \n-        let k1 = str::bytes(~\"foo\");\n-        let k2 = str::bytes(~\"bar\");\n+        let k1 = str::to_bytes(~\"foo\");\n+        let k2 = str::to_bytes(~\"bar\");\n \n         insert(m, k1, ~\"foo\");\n         insert(m, k2, ~\"bar\");"}, {"sha": "c45b49849bc9b99f1f18e5230c7d84f7ba55728a", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -1119,7 +1119,7 @@ mod test {\n         // In C, this would be a malloc'd or stack-allocated\n         // struct that we'd cast to a void* and store as the\n         // data field in our uv_connect_t struct\n-        let req_str_bytes = str::bytes(req_str);\n+        let req_str_bytes = str::to_bytes(req_str);\n         let req_msg_ptr: *u8 = vec::unsafe::to_ptr(req_str_bytes);\n         log(debug, fmt!(\"req_msg ptr: %u\", req_msg_ptr as uint));\n         let req_msg = ~[\n@@ -1367,7 +1367,7 @@ mod test {\n         let server_write_req = write_t();\n         let server_write_req_ptr = ptr::addr_of(server_write_req);\n \n-        let resp_str_bytes = str::bytes(server_resp_msg);\n+        let resp_str_bytes = str::to_bytes(server_resp_msg);\n         let resp_msg_ptr: *u8 = vec::unsafe::to_ptr(resp_str_bytes);\n         log(debug, fmt!(\"resp_msg ptr: %u\", resp_msg_ptr as uint));\n         let resp_msg = ~["}, {"sha": "4e584fb167f6341ccf7bd0d2b51304fdd354b418", "filename": "src/rustc/metadata/encoder.rs", "status": "modified", "additions": 16, "deletions": 15, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Frustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Frustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmetadata%2Fencoder.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -18,6 +18,7 @@ import syntax::ast_map;\n import syntax::attr;\n import std::serialization::serializer;\n import std::ebml::serializer;\n+import str::to_bytes;\n import syntax::ast;\n import syntax::diagnostic::span_handler;\n \n@@ -152,7 +153,7 @@ fn encode_type_param_bounds(ebml_w: ebml::writer, ecx: @encode_ctxt,\n \n fn encode_variant_id(ebml_w: ebml::writer, vid: def_id) {\n     ebml_w.start_tag(tag_items_data_item_variant);\n-    ebml_w.writer.write(str::bytes(def_to_str(vid)));\n+    ebml_w.writer.write(str::to_bytes(def_to_str(vid)));\n     ebml_w.end_tag();\n }\n \n@@ -181,25 +182,25 @@ fn encode_symbol(ecx: @encode_ctxt, ebml_w: ebml::writer, id: node_id) {\n             fmt!(\"encode_symbol: id not found %d\", id));\n       }\n     };\n-    ebml_w.writer.write(str::bytes(sym));\n+    ebml_w.writer.write(str::to_bytes(sym));\n     ebml_w.end_tag();\n }\n \n fn encode_discriminant(ecx: @encode_ctxt, ebml_w: ebml::writer, id: node_id) {\n     ebml_w.start_tag(tag_items_data_item_symbol);\n-    ebml_w.writer.write(str::bytes(ecx.discrim_symbols.get(id)));\n+    ebml_w.writer.write(str::to_bytes(ecx.discrim_symbols.get(id)));\n     ebml_w.end_tag();\n }\n \n fn encode_disr_val(_ecx: @encode_ctxt, ebml_w: ebml::writer, disr_val: int) {\n     ebml_w.start_tag(tag_disr_val);\n-    ebml_w.writer.write(str::bytes(int::to_str(disr_val,10u)));\n+    ebml_w.writer.write(str::to_bytes(int::to_str(disr_val,10u)));\n     ebml_w.end_tag();\n }\n \n fn encode_parent_item(ebml_w: ebml::writer, id: def_id) {\n     ebml_w.start_tag(tag_items_data_parent_item);\n-    ebml_w.writer.write(str::bytes(def_to_str(id)));\n+    ebml_w.writer.write(str::to_bytes(def_to_str(id)));\n     ebml_w.end_tag();\n }\n \n@@ -656,7 +657,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n                 /* Write the info that's needed when viewing this class\n                    as an impl (just the method def_id and self type) */\n                 ebml_w.start_tag(tag_item_impl_method);\n-                ebml_w.writer.write(str::bytes(def_to_str(local_def(m.id))));\n+                ebml_w.writer.write(to_bytes(def_to_str(local_def(m.id))));\n                 ebml_w.end_tag();\n               }\n            }\n@@ -693,7 +694,7 @@ fn encode_info_for_item(ecx: @encode_ctxt, ebml_w: ebml::writer, item: @item,\n         encode_attributes(ebml_w, item.attrs);\n         for methods.each |m| {\n             ebml_w.start_tag(tag_item_impl_method);\n-            ebml_w.writer.write(str::bytes(def_to_str(local_def(m.id))));\n+            ebml_w.writer.write(str::to_bytes(def_to_str(local_def(m.id))));\n             ebml_w.end_tag();\n         }\n         if traits.len() > 1 {\n@@ -900,7 +901,7 @@ fn encode_meta_item(ebml_w: ebml::writer, mi: meta_item) {\n       meta_word(name) => {\n         ebml_w.start_tag(tag_meta_item_word);\n         ebml_w.start_tag(tag_meta_item_name);\n-        ebml_w.writer.write(str::bytes(name));\n+        ebml_w.writer.write(str::to_bytes(name));\n         ebml_w.end_tag();\n         ebml_w.end_tag();\n       }\n@@ -909,10 +910,10 @@ fn encode_meta_item(ebml_w: ebml::writer, mi: meta_item) {\n           lit_str(value) => {\n             ebml_w.start_tag(tag_meta_item_name_value);\n             ebml_w.start_tag(tag_meta_item_name);\n-            ebml_w.writer.write(str::bytes(name));\n+            ebml_w.writer.write(str::to_bytes(name));\n             ebml_w.end_tag();\n             ebml_w.start_tag(tag_meta_item_value);\n-            ebml_w.writer.write(str::bytes(*value));\n+            ebml_w.writer.write(str::to_bytes(*value));\n             ebml_w.end_tag();\n             ebml_w.end_tag();\n           }\n@@ -922,7 +923,7 @@ fn encode_meta_item(ebml_w: ebml::writer, mi: meta_item) {\n       meta_list(name, items) => {\n         ebml_w.start_tag(tag_meta_item_list);\n         ebml_w.start_tag(tag_meta_item_name);\n-        ebml_w.writer.write(str::bytes(name));\n+        ebml_w.writer.write(str::to_bytes(name));\n         ebml_w.end_tag();\n         for items.each |inner_item| {\n             encode_meta_item(ebml_w, *inner_item);\n@@ -1044,20 +1045,20 @@ fn encode_crate_dep(ecx: @encode_ctxt, ebml_w: ebml::writer,\n                     dep: decoder::crate_dep) {\n     ebml_w.start_tag(tag_crate_dep);\n     ebml_w.start_tag(tag_crate_dep_name);\n-    ebml_w.writer.write(str::bytes(ecx.tcx.sess.str_of(dep.name)));\n+    ebml_w.writer.write(str::to_bytes(ecx.tcx.sess.str_of(dep.name)));\n     ebml_w.end_tag();\n     ebml_w.start_tag(tag_crate_dep_vers);\n-    ebml_w.writer.write(str::bytes(dep.vers));\n+    ebml_w.writer.write(str::to_bytes(dep.vers));\n     ebml_w.end_tag();\n     ebml_w.start_tag(tag_crate_dep_hash);\n-    ebml_w.writer.write(str::bytes(dep.hash));\n+    ebml_w.writer.write(str::to_bytes(dep.hash));\n     ebml_w.end_tag();\n     ebml_w.end_tag();\n }\n \n fn encode_hash(ebml_w: ebml::writer, hash: ~str) {\n     ebml_w.start_tag(tag_crate_hash);\n-    ebml_w.writer.write(str::bytes(hash));\n+    ebml_w.writer.write(str::to_bytes(hash));\n     ebml_w.end_tag();\n }\n "}, {"sha": "eb278c8336244545805803c0a22985a56441919b", "filename": "src/rustc/middle/trans/shape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fshape.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -391,7 +391,7 @@ fn gen_enum_shapes(ccx: @crate_ctxt) -> ValueRef {\n             let variant_shape = shape_of_variant(ccx, v);\n             add_substr(data, variant_shape);\n \n-            let zname = str::bytes(ccx.sess.str_of(v.name)) + ~[0u8];\n+            let zname = str::to_bytes(ccx.sess.str_of(v.name)) + ~[0u8];\n             add_substr(data, zname);\n         }\n         enum_variants += ~[variants];"}, {"sha": "75a4c4f7ea4d408c1e54ce035dbec128f5128bc2", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -57,7 +57,7 @@ fn sort_and_fmt(mm: hashmap<~[u8], uint>, total: uint) -> ~str {\n \n // given a map, search for the frequency of a pattern\n fn find(mm: hashmap<~[u8], uint>, key: ~str) -> uint {\n-   match mm.find(str::bytes(str::to_lower(key))) {\n+   match mm.find(str::to_bytes(str::to_lower(key))) {\n       option::none      => { return 0u; }\n       option::some(num) => { return num; }\n    }\n@@ -185,7 +185,7 @@ fn main(args: ~[~str]) {\n \n          // process the sequence for k-mers\n          (_, true) => {\n-            let line_bytes = str::bytes(line);\n+            let line_bytes = str::to_bytes(line);\n \n            for sizes.eachi |ii, _sz| {\n                let mut lb = line_bytes;"}, {"sha": "5e7b705714decc9c109757ba7de18f4293da782f", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -55,7 +55,7 @@ fn sort_and_fmt(mm: hashmap<~[u8], uint>, total: uint) -> ~str {\n \n // given a map, search for the frequency of a pattern\n fn find(mm: hashmap<~[u8], uint>, key: ~str) -> uint {\n-   match mm.find(str::bytes(str::to_lower(key))) {\n+   match mm.find(str::to_bytes(str::to_lower(key))) {\n       option::none      => { return 0u; }\n       option::some(num) => { return num; }\n    }\n@@ -172,7 +172,7 @@ fn main(args: ~[~str]) {\n \n          // process the sequence for k-mers\n          (_, true) => {\n-            let line_bytes = str::bytes(line);\n+            let line_bytes = str::to_bytes(line);\n \n            for sizes.eachi |ii, _sz| {\n                let mut lb = line_bytes;"}, {"sha": "8775fbb1cdc9f0f7503530606c923ddd8580b069", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -93,7 +93,7 @@ fn main(args: ~[~str]) {\n     if opts.stress {\n         stress(2);\n     } else {\n-        let max = option::get(uint::parse_buf(str::bytes(args[1]),\n+        let max = option::get(uint::parse_buf(str::to_bytes(args[1]),\n                                               10u)) as int;\n \n         let num_trials = 10;"}, {"sha": "72c4056757e11122fcea51310f4c26bbe55e9f2c", "filename": "src/test/run-pass/foreign-fn-linkname.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fforeign-fn-linkname.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -12,7 +12,7 @@ extern mod libc {\n \n fn strlen(str: ~str) -> uint unsafe {\n     // C string is terminated with a zero\n-    let bytes = str::bytes(str) + ~[0u8];\n+    let bytes = str::to_bytes(str) + ~[0u8];\n     return libc::my_strlen(vec::unsafe::to_ptr(bytes));\n }\n "}, {"sha": "a3ad1066b357666461409e408bcd3294bd9af209", "filename": "src/test/run-pass/hashmap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fhashmap-memory.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -51,7 +51,7 @@ mod map_reduce {\n               none => {\n                 let p = port();\n                 error!(\"sending find_reducer\");\n-                send(ctrl, find_reducer(str::bytes(key), chan(p)));\n+                send(ctrl, find_reducer(str::to_bytes(key), chan(p)));\n                 error!(\"receiving\");\n                 c = recv(p);\n                 log(error, c);"}, {"sha": "6aa6df94b91dea845990c229b15e9243d2dfc34c", "filename": "src/test/run-pass/issue-1696.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Ftest%2Frun-pass%2Fissue-1696.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-1696.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -4,6 +4,6 @@ import std::map::hashmap;\n \n fn main() {\n     let m = map::bytes_hash();\n-    m.insert(str::bytes(~\"foo\"), str::bytes(~\"bar\"));\n+    m.insert(str::to_bytes(~\"foo\"), str::to_bytes(~\"bar\"));\n     log(error, m);\n }"}, {"sha": "63be9a5e352b6db37d3d654f45feebe33446ff30", "filename": "src/test/run-pass/utf8_chars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f591319dd46ce3ddb7ca218dafa3d072627c345/src%2Ftest%2Frun-pass%2Futf8_chars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Futf8_chars.rs?ref=9f591319dd46ce3ddb7ca218dafa3d072627c345", "patch": "@@ -14,7 +14,7 @@ fn main() {\n     assert (str::char_at(s, 0u) == 'e');\n     assert (str::char_at(s, 1u) == '\u00e9');\n \n-    assert (str::is_utf8(str::bytes(s)));\n+    assert (str::is_utf8(str::to_bytes(s)));\n     assert (!str::is_utf8(~[0x80_u8]));\n     assert (!str::is_utf8(~[0xc0_u8]));\n     assert (!str::is_utf8(~[0xc0_u8, 0x10_u8]));"}]}