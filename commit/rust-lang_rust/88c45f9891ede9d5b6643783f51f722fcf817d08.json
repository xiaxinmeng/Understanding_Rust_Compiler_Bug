{"sha": "88c45f9891ede9d5b6643783f51f722fcf817d08", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4YzQ1Zjk4OTFlZGU5ZDViNjY0Mzc4M2Y1MWY3MjJmY2Y4MTdkMDg=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-02-18T08:32:02Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-03-02T12:51:08Z"}, "message": "adjust for rustc changes", "tree": {"sha": "93e238fabfc115523c915aec6921903f6acac40b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93e238fabfc115523c915aec6921903f6acac40b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/88c45f9891ede9d5b6643783f51f722fcf817d08", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/88c45f9891ede9d5b6643783f51f722fcf817d08", "html_url": "https://github.com/rust-lang/rust/commit/88c45f9891ede9d5b6643783f51f722fcf817d08", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/88c45f9891ede9d5b6643783f51f722fcf817d08/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "64bfe81cae96e7178f1b53f80e175167aed510fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/64bfe81cae96e7178f1b53f80e175167aed510fb", "html_url": "https://github.com/rust-lang/rust/commit/64bfe81cae96e7178f1b53f80e175167aed510fb"}], "stats": {"total": 21, "additions": 9, "deletions": 12}, "files": [{"sha": "0b22c04d3050fc0db904bdda83d216b540eb8343", "filename": "rust-version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c45f9891ede9d5b6643783f51f722fcf817d08/rust-version", "raw_url": "https://github.com/rust-lang/rust/raw/88c45f9891ede9d5b6643783f51f722fcf817d08/rust-version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-version?ref=88c45f9891ede9d5b6643783f51f722fcf817d08", "patch": "@@ -1 +1 @@\n-e86c9e6ef8be7ddec0360f20aae7d86c69c59a83\n+c839a7b4c26e58319b0c40448dd423facff34cd0"}, {"sha": "5ff0a5671cdb5adf5d751a26614f85d3ccaad553", "filename": "src/helpers.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/88c45f9891ede9d5b6643783f51f722fcf817d08/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c45f9891ede9d5b6643783f51f722fcf817d08/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=88c45f9891ede9d5b6643783f51f722fcf817d08", "patch": "@@ -300,18 +300,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             // We have to do *something* for unions.\n-            fn visit_union(&mut self, v: MPlaceTy<'tcx, Tag>) -> InterpResult<'tcx> {\n+            fn visit_union(&mut self, v: MPlaceTy<'tcx, Tag>, fields: usize) -> InterpResult<'tcx> {\n+                assert!(fields > 0); // we should never reach \"pseudo-unions\" with 0 fields, like primitives\n+\n                 // With unions, we fall back to whatever the type says, to hopefully be consistent\n                 // with LLVM IR.\n                 // FIXME: are we consistent, and is this really the behavior we want?\n                 let frozen = self.ecx.type_is_freeze(v.layout.ty);\n                 if frozen { Ok(()) } else { (self.unsafe_cell_action)(v) }\n             }\n-\n-            // We should never get to a primitive, but always short-circuit somewhere above.\n-            fn visit_primitive(&mut self, _v: MPlaceTy<'tcx, Tag>) -> InterpResult<'tcx> {\n-                bug!(\"we should always short-circuit before coming to a primitive\")\n-            }\n         }\n     }\n "}, {"sha": "eb94ba256beb18e921511c9025fcc01435a66163", "filename": "tests/compile-fail/validity/cast_fn_ptr1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c45f9891ede9d5b6643783f51f722fcf817d08/tests%2Fcompile-fail%2Fvalidity%2Fcast_fn_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c45f9891ede9d5b6643783f51f722fcf817d08/tests%2Fcompile-fail%2Fvalidity%2Fcast_fn_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fcast_fn_ptr1.rs?ref=88c45f9891ede9d5b6643783f51f722fcf817d08", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let g: fn(*const i32) = unsafe { std::mem::transmute(f as fn(&i32)) };\n \n     g(0usize as *const i32)\n-    //~^ ERROR encountered 0, but expected something greater or equal to 1\n+    //~^ ERROR encountered a NULL reference\n }"}, {"sha": "a3faa84f1de0c21eab1b764d041abaf8441db516", "filename": "tests/compile-fail/validity/cast_fn_ptr2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c45f9891ede9d5b6643783f51f722fcf817d08/tests%2Fcompile-fail%2Fvalidity%2Fcast_fn_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c45f9891ede9d5b6643783f51f722fcf817d08/tests%2Fcompile-fail%2Fvalidity%2Fcast_fn_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fcast_fn_ptr2.rs?ref=88c45f9891ede9d5b6643783f51f722fcf817d08", "patch": "@@ -7,5 +7,5 @@ fn main() {\n     let g: fn() -> &'static i32 = unsafe { std::mem::transmute(f as fn() -> *const i32) };\n \n     let _x = g();\n-    //~^ ERROR encountered 0, but expected something greater or equal to 1\n+    //~^ ERROR encountered a NULL reference\n }"}, {"sha": "5eec58b5e2347b92f8ed2ed26fc8e273b71c13c5", "filename": "tests/compile-fail/validity/fn_ptr_offset.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c45f9891ede9d5b6643783f51f722fcf817d08/tests%2Fcompile-fail%2Fvalidity%2Ffn_ptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c45f9891ede9d5b6643783f51f722fcf817d08/tests%2Fcompile-fail%2Fvalidity%2Ffn_ptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Ffn_ptr_offset.rs?ref=88c45f9891ede9d5b6643783f51f722fcf817d08", "patch": "@@ -6,5 +6,5 @@ fn main() {\n     let x : fn() = f;\n     let y : *mut u8 = unsafe { mem::transmute(x) };\n     let y = y.wrapping_offset(1);\n-    let _x : fn() = unsafe { mem::transmute(y) }; //~ ERROR encountered a potentially NULL pointer\n+    let _x : fn() = unsafe { mem::transmute(y) }; //~ ERROR encountered a pointer, but expected a function pointer\n }"}, {"sha": "35f4d4228e70c46149dc20292afa0bfd060c6edb", "filename": "tests/compile-fail/validity/invalid_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c45f9891ede9d5b6643783f51f722fcf817d08/tests%2Fcompile-fail%2Fvalidity%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c45f9891ede9d5b6643783f51f722fcf817d08/tests%2Fcompile-fail%2Fvalidity%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Finvalid_bool.rs?ref=88c45f9891ede9d5b6643783f51f722fcf817d08", "patch": "@@ -1,3 +1,3 @@\n fn main() {\n-    let _b = unsafe { std::mem::transmute::<u8, bool>(2) }; //~ ERROR encountered 2, but expected something less or equal to 1\n+    let _b = unsafe { std::mem::transmute::<u8, bool>(2) }; //~ ERROR encountered 2, but expected a boolean\n }"}, {"sha": "42922cdc917c8b5d7bfb054a0c92a08af07a0d87", "filename": "tests/compile-fail/validity/invalid_char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/88c45f9891ede9d5b6643783f51f722fcf817d08/tests%2Fcompile-fail%2Fvalidity%2Finvalid_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/88c45f9891ede9d5b6643783f51f722fcf817d08/tests%2Fcompile-fail%2Fvalidity%2Finvalid_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Finvalid_char.rs?ref=88c45f9891ede9d5b6643783f51f722fcf817d08", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     assert!(std::char::from_u32(-1_i32 as u32).is_none());\n-    let _val = match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ ERROR encountered 4294967295, but expected something less or equal to 1114111\n+    let _val = match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ ERROR encountered 4294967295, but expected a valid unicode codepoint\n         'a' => {true},\n         'b' => {false},\n         _ => {true},"}]}