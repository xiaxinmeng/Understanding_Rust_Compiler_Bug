{"sha": "3f1f6bf9e3fc7d07adedef225e33156425a0608f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMWY2YmY5ZTNmYzdkMDdhZGVkZWYyMjVlMzMxNTY0MjVhMDYwOGY=", "commit": {"author": {"name": "Daniel Patterson", "email": "dbp@riseup.net", "date": "2012-08-21T02:04:26Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-08-21T22:51:36Z"}, "message": "core: adding os::tmpdir() that returns a system temporary directory if it can find one, and none otherwise.", "tree": {"sha": "1fe7ce090a7fee38a93e33ec1afe38192ea096dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fe7ce090a7fee38a93e33ec1afe38192ea096dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f1f6bf9e3fc7d07adedef225e33156425a0608f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f1f6bf9e3fc7d07adedef225e33156425a0608f", "html_url": "https://github.com/rust-lang/rust/commit/3f1f6bf9e3fc7d07adedef225e33156425a0608f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f1f6bf9e3fc7d07adedef225e33156425a0608f/comments", "author": null, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "47cca22d5455d2d60226ead907fd627784701ef5", "url": "https://api.github.com/repos/rust-lang/rust/commits/47cca22d5455d2d60226ead907fd627784701ef5", "html_url": "https://github.com/rust-lang/rust/commit/47cca22d5455d2d60226ead907fd627784701ef5"}], "stats": {"total": 39, "additions": 38, "deletions": 1}, "files": [{"sha": "6993eb82d0120b0c1763e06683981f936d5eb73d", "filename": "src/libcore/os.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3f1f6bf9e3fc7d07adedef225e33156425a0608f/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f1f6bf9e3fc7d07adedef225e33156425a0608f/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=3f1f6bf9e3fc7d07adedef225e33156425a0608f", "patch": "@@ -30,7 +30,7 @@ export close, fclose, fsync_fd, waitpid;\n export env, getenv, setenv, fdopen, pipe;\n export getcwd, dll_filename, self_exe_path;\n export exe_suffix, dll_suffix, sysname, arch, family;\n-export homedir, list_dir, list_dir_path, path_is_dir, path_exists,\n+export homedir, tmpdir, list_dir, list_dir_path, path_is_dir, path_exists,\n        make_absolute, make_dir, remove_dir, change_dir, remove_file,\n        copy_file;\n export last_os_error;\n@@ -464,6 +464,43 @@ fn homedir() -> option<Path> {\n     }\n }\n \n+/**\n+ * Returns the path to a temporary directory, if known.\n+ *\n+ * On Unix, returns the value of the 'TMPDIR' environment variable if it is\n+ * set and non-empty and '/tmp' otherwise.\n+ *\n+ * On Windows, returns the value of, in order, the 'TMP', 'TEMP',\n+ * 'USERPROFILE' environment variable if any are set and not the empty\n+ * string. Otherwise, tmpdir returns option::none.\n+ */\n+fn tmpdir() -> option<Path> {\n+    return lookup();\n+\n+    fn getenv_nonempty(v: Path) -> option<Path> {\n+        match getenv(v) {\n+            some(x) =>\n+                if str::is_empty(x) {\n+                    none\n+                } else {\n+                    some(x)\n+                },\n+            _ => none\n+        }\n+    }\n+\n+    #[cfg(unix)]\n+    fn lookup() -> option<Path> {\n+        option::or(getenv_nonempty(~\"TMPDIR\"), some(~\"/tmp\"))\n+    }\n+\n+    #[cfg(windows)]\n+    fn lookup() -> option<Path> {\n+        option::or(getenv_nonempty(~\"TMP\"),\n+        option::or(getenv_nonempty(~\"TEMP\"),\n+                   getenv_nonempty(~\"USERPROFILE\")))\n+    }\n+}\n /// Recursively walk a directory structure\n fn walk_dir(p: Path, f: fn(Path) -> bool) {\n "}]}