{"sha": "89c8ef792f7e7641abfac421ba1e8f90384883ec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5YzhlZjc5MmY3ZTc2NDFhYmZhYzQyMWJhMWU4ZjkwMzg0ODgzZWM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-02-02T03:43:17Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-02-02T03:43:17Z"}, "message": "check-fast fallout from removing export, r=burningtree", "tree": {"sha": "676c75543864e5a81ba54449cc748981da00c497", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/676c75543864e5a81ba54449cc748981da00c497"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/89c8ef792f7e7641abfac421ba1e8f90384883ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/89c8ef792f7e7641abfac421ba1e8f90384883ec", "html_url": "https://github.com/rust-lang/rust/commit/89c8ef792f7e7641abfac421ba1e8f90384883ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/89c8ef792f7e7641abfac421ba1e8f90384883ec/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e5e52d2437e239e16bab231903d2e72d16b26648", "url": "https://api.github.com/repos/rust-lang/rust/commits/e5e52d2437e239e16bab231903d2e72d16b26648", "html_url": "https://github.com/rust-lang/rust/commit/e5e52d2437e239e16bab231903d2e72d16b26648"}], "stats": {"total": 2166, "additions": 1083, "deletions": 1083}, "files": [{"sha": "ab395466afcf73a6f6f8637edf00d7091db5f7fd", "filename": "src/test/run-pass/alias-uninit-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falias-uninit-value.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -20,4 +20,4 @@ fn mk_raw_ty(st: sty, cname: Option<~str>) -> RawT {\n     return RawT {struct_: st, cname: cname, hash: 0u};\n }\n \n-fn main() { mk_raw_ty(ty_nil, None::<~str>); }\n+pub fn main() { mk_raw_ty(ty_nil, None::<~str>); }"}, {"sha": "64cc58c2af5ef15fb9a44d9336e6b09e92bd9a80", "filename": "src/test/run-pass/alignment-gep-tup-like-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-1.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -16,7 +16,7 @@ fn f<A:Copy &static>(a: A, b: u16) -> fn@() -> (A, u16) {\n     fn@() -> (A, u16) { (a, b) }\n }\n \n-fn main() {\n+pub fn main() {\n     let (a, b) = f(22_u64, 44u16)();\n     debug!(\"a=%? b=%?\", a, b);\n     assert a == 22u64;"}, {"sha": "01dcd6a364740ddf3353a797771f3957cd6da8c9", "filename": "src/test/run-pass/alignment-gep-tup-like-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falignment-gep-tup-like-2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -27,7 +27,7 @@ fn f<A:Owned Copy, B:Owned Copy>(a: A, b: B) -> fn@() -> (A, B) {\n     fn@() -> (A, B) { (a, b) }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = 22_u8;\n     let y = 44_u64;\n     let z = f(~x, y);"}, {"sha": "37fdfca4468ce79c0feb92bfe8dcec39112dc39d", "filename": "src/test/run-pass/alloca-from-derived-tydesc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falloca-from-derived-tydesc.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,4 +14,4 @@ struct R<T> {mut v: ~[option<T>]}\n \n fn f<T>() -> ~[T] { return ~[]; }\n \n-fn main() { let r: R<int> = R {mut v: ~[]}; r.v = f(); }\n+pub fn main() { let r: R<int> = R {mut v: ~[]}; r.v = f(); }"}, {"sha": "1a58174a3fbcfd04d78b1fae128b2eb3dab45f8d", "filename": "src/test/run-pass/alt-borrowed_str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-borrowed_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-borrowed_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-borrowed_str.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -33,7 +33,7 @@ fn g2(ref_1: &str, ref_2: &str) {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     f1(@\"a\");\n     f1(~\"b\");\n     f1(&\"c\");"}, {"sha": "2ca1881417e9dcb8c10537e49b8ca8f72a6ef9c8", "filename": "src/test/run-pass/alt-bot-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-bot-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-bot-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-bot-2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,4 +10,4 @@\n \n // n.b. This was only ever failing with optimization disabled.\n fn a() -> int { match return 1 { 2 => 3, _ => die!() } }\n-fn main() { a(); }\n+pub fn main() { a(); }"}, {"sha": "cb30c5e96a09b204b08f1512f50120faadcaf7bd", "filename": "src/test/run-pass/alt-bot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-bot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-bot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-bot.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-fn main() {\n+pub fn main() {\n     let i: int =\n         match Some::<int>(3) { None::<int> => { die!() } Some::<int>(_) => { 5 } };\n     log(debug, i);"}, {"sha": "58076b59cebfbeb88589bcb451b57ced0cfa5839", "filename": "src/test/run-pass/alt-implicit-copy-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-implicit-copy-unique.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@\n \n struct Pair { mut a: ~int, mut b: ~int }\n \n-fn main() {\n+pub fn main() {\n     let x = ~Pair {mut a: ~10, b: ~20};\n     match x {\n       ~Pair {a: ref mut a, b: ref b} => {"}, {"sha": "b9f25396b32c8d21e2cc1d9f7245296cdddebc67", "filename": "src/test/run-pass/alt-join.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-join.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-join.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-join.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -28,4 +28,4 @@ fn foo<T>(y: Option<T>) {\n     return;\n }\n \n-fn main() { debug!(\"hello\"); foo::<int>(Some::<int>(5)); }\n+pub fn main() { debug!(\"hello\"); foo::<int>(Some::<int>(5)); }"}, {"sha": "649bdd202df10e997f5c49809795d6619ccac7cf", "filename": "src/test/run-pass/alt-naked-record-expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-naked-record-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-naked-record-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-naked-record-expr.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@\n \n struct X { x: int }\n \n-fn main() {\n+pub fn main() {\n     let x = match 0 {\n       _ => X {\n         x: 0"}, {"sha": "4d89fdc69104e3ea0859106f0822e27c6480dddb", "filename": "src/test/run-pass/alt-naked-record.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-naked-record.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-naked-record.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-naked-record.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@\n \n struct X { x: int }\n \n-fn main() {\n+pub fn main() {\n     let x = match 0 {\n       _ => X {\n         x: 0"}, {"sha": "3da6bb93486668ba85edc806857ac1abdaa420b4", "filename": "src/test/run-pass/alt-path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-path.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -16,4 +16,4 @@ mod m1 {\n \n fn bar(x: m1::foo) { match x { m1::foo1 => { } m1::foo2 => { } } }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "53ec6e0ed85eae65083230ddfc7324bf110d2543", "filename": "src/test/run-pass/alt-pattern-drop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-drop.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -29,7 +29,7 @@ fn foo(s: @int) {\n     let _ = ::core::sys::refcount(s); // don't get bitten by last-use.\n }\n \n-fn main() {\n+pub fn main() {\n     let s: @int = @0; // ref up\n \n     let count = ::core::sys::refcount(s);"}, {"sha": "91e2643dd75e92633710d9a63c59283001097cfd", "filename": "src/test/run-pass/alt-pattern-lit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-pattern-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-pattern-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-lit.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,4 +18,4 @@ fn altlit(f: int) -> int {\n     }\n }\n \n-fn main() { assert (altlit(10) == 20); assert (altlit(11) == 22); }\n+pub fn main() { assert (altlit(10) == 20); assert (altlit(11) == 22); }"}, {"sha": "feabf7a8f4d118e12d0eaf865fe37c986c23252c", "filename": "src/test/run-pass/alt-pattern-no-type-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-no-type-params.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,4 +14,4 @@ fn foo(x: maybe<int>) {\n     match x { nothing => { error!(\"A\"); } just(a) => { error!(\"B\"); } }\n }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "f40560081030f54e339999a1e5a401b96a63caa5", "filename": "src/test/run-pass/alt-pattern-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-pattern-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-pattern-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-pattern-simple.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,4 +12,4 @@\n \n fn altsimple(f: int) { match f { x => () } }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "3702db8327e0dc71c78a3d81ac6d7fdb1112372d", "filename": "src/test/run-pass/alt-phi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-phi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-phi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-phi.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,7 +14,7 @@ enum thing { a, b, c, }\n \n fn foo(it: fn(int)) { it(10); }\n \n-fn main() {\n+pub fn main() {\n     let mut x = true;\n     match a {\n       a => { x = true; foo(|_i| { } ) }"}, {"sha": "b4e40a7b7ab07711ff46765ab94d575ad01ec3db", "filename": "src/test/run-pass/alt-range.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-range.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-range.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-range.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     match 5u {\n       1u..5u => {}\n       _ => die!(~\"should match range\"),"}, {"sha": "407d496236fecac29567f50450440c7896a6d975", "filename": "src/test/run-pass/alt-ref-binding-in-guard-3256.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-ref-binding-in-guard-3256.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-ref-binding-in-guard-3256.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-ref-binding-in-guard-3256.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let x = Some(private::exclusive(true));\n     match move x {\n         Some(ref z) if z.with(|b| *b) => {"}, {"sha": "50bcd3644edf61e9215e90f2ee1e61aea7cd73ec", "filename": "src/test/run-pass/alt-ref-binding-mut-option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-ref-binding-mut-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-ref-binding-mut-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-ref-binding-mut-option.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let mut v = Some(22);\n     match v {\n       None => {}"}, {"sha": "9f062f7b0012f7cae7ea0949f0f459aa9ca163e9", "filename": "src/test/run-pass/alt-ref-binding-mut.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-ref-binding-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-ref-binding-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-ref-binding-mut.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,7 +18,7 @@ fn destructure(x: &mut Rec) {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let mut v = Rec {f: 22};\n     destructure(&mut v);\n     assert v.f == 23;"}, {"sha": "abb7aa30a01e4841649ee41268e1166d8f23cc59", "filename": "src/test/run-pass/alt-ref-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-ref-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-ref-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-ref-binding.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -15,6 +15,6 @@ fn destructure(x: Option<int>) -> int {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     assert destructure(Some(22)) == 22;\n }"}, {"sha": "57e47854ce87d347bdb65823e93c0cba808a0622", "filename": "src/test/run-pass/alt-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-str.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@\n \n // Issue #53\n \n-fn main() {\n+pub fn main() {\n     match ~\"test\" { ~\"not-test\" => die!(), ~\"test\" => (), _ => die!() }\n \n     enum t { tag1(~str), tag2, }"}, {"sha": "624c57a614e2ee0834ed2f7e05a653226be7ebaa", "filename": "src/test/run-pass/alt-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-tag.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -28,7 +28,7 @@ fn process(c: color) -> int {\n     return x;\n }\n \n-fn main() {\n+pub fn main() {\n     let gray: color = rgb(127, 127, 127);\n     let clear: color = rgba(50, 150, 250, 0);\n     let red: color = hsl(0, 255, 255);"}, {"sha": "dbe9ae7cba5f8aaeb5e30ec518622ac9203a9bf6", "filename": "src/test/run-pass/alt-type-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-type-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-type-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-type-simple.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@ fn altsimple(any x) {\n   }\n }\n \n-fn main() {\n+pub fn main() {\n   altsimple(5);\n   altsimple(\"asdfasdfsDF\");\n }"}, {"sha": "902f95e7ef14c9d49900e39bdc69fde3f94ea201", "filename": "src/test/run-pass/alt-unique-bind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-unique-bind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-unique-bind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-unique-bind.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     match ~100 {\n       ~x => {\n         debug!(\"%?\", x);"}, {"sha": "460e8873a17ea14a57f8a0ecd75525eb5630d8ba", "filename": "src/test/run-pass/alt-value-binding-in-guard-3291.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-value-binding-in-guard-3291.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-value-binding-in-guard-3291.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-value-binding-in-guard-3291.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -16,7 +16,7 @@ fn foo(x: Option<~int>, b: bool) -> int {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     foo(Some(~22), true);\n     foo(Some(~22), false);\n     foo(None, true);"}, {"sha": "29247e47fa50a4e194f66d864cfdbba0b6338f4e", "filename": "src/test/run-pass/alt-with-ret-arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-with-ret-arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Falt-with-ret-arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Falt-with-ret-arm.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     // sometimes we have had trouble finding\n     // the right type for f, as we unified\n     // bot and u32 here"}, {"sha": "939903b3b124a785eab4e35215e432e60222dce3", "filename": "src/test/run-pass/anon-extern-mod-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod-cross-crate-2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,6 +14,6 @@ extern mod anonexternmod;\n \n use anonexternmod::*;\n \n-fn main() {\n+pub fn main() {\n   last_os_error();\n }"}, {"sha": "525e6b9fbd6d9898df78cd9d97fdfdb7f64ab015", "filename": "src/test/run-pass/anon-extern-mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-extern-mod.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,7 +14,7 @@ extern {\n     fn last_os_error() -> ~str;\n }\n \n-fn main() {\n+pub fn main() {\n     unsafe {\n         let _ = last_os_error();\n     }"}, {"sha": "4143c12cf670eec9ccefc650db47631dc076f6fe", "filename": "src/test/run-pass/anon-trait-static-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fanon-trait-static-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fanon-trait-static-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon-trait-static-method.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,7 +18,7 @@ impl Foo {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = Foo::new();\n     io::println(x.x.to_str());\n }"}, {"sha": "5d8b79836883d17b44a35f65fe262425fb5573b9", "filename": "src/test/run-pass/anon_trait_static_method_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fanon_trait_static_method_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fanon_trait_static_method_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fanon_trait_static_method_exe.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,7 +14,7 @@\n extern mod anon_trait_static_method_lib;\n use anon_trait_static_method_lib::Foo;\n \n-fn main() {\n+pub fn main() {\n     let x = Foo::new();\n     io::println(x.x.to_str());\n }"}, {"sha": "e58dc29578d5fd89e51861ce8707fad4a619d9de", "filename": "src/test/run-pass/argument-passing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fargument-passing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargument-passing.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -22,7 +22,7 @@ fn f1(a: X, b: &mut int, -c: int) -> int {\n \n fn f2(a: int, f: fn(int)) -> int { f(1); return a; }\n \n-fn main() {\n+pub fn main() {\n     let mut a = X {mut x: 1}, b = 2, c = 3;\n     assert (f1(a, &mut b, move c) == 6);\n     assert (a.x == 0);"}, {"sha": "6f5ef7837c36ca9f18749d1291250a7df792099b", "filename": "src/test/run-pass/arith-0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Farith-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Farith-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-0.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-fn main() {\n+pub fn main() {\n     let a: int = 10;\n     log(debug, a);\n     assert (a * (a - 1) == 90);"}, {"sha": "652f433e33dc1c9d29a481afd3d1826da88170ef", "filename": "src/test/run-pass/arith-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Farith-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Farith-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-1.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-fn main() {\n+pub fn main() {\n     let i32_a: int = 10;\n     assert (i32_a == 10);\n     assert (i32_a - 10 == 0);"}, {"sha": "658f5d61bb84f19e55adcda25c5cda965b29b37e", "filename": "src/test/run-pass/arith-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Farith-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Farith-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-fn main() {\n+pub fn main() {\n     let i32_c: int = 0x10101010;\n     assert (i32_c + i32_c * 2 / 3 * 2 + (i32_c - 7 % 3) ==\n                 i32_c + i32_c * 2 / 3 * 2 + (i32_c - 7 % 3));"}, {"sha": "651bf865eabcdd07f8a39391542f6ccd1a27ce39", "filename": "src/test/run-pass/arith-unsigned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Farith-unsigned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Farith-unsigned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Farith-unsigned.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,7 +12,7 @@\n \n \n // Unsigned integer operations\n-fn main() {\n+pub fn main() {\n     assert (0u8 < 255u8);\n     assert (0u8 <= 255u8);\n     assert (255u8 > 0u8);"}, {"sha": "3911c2c76bec5897e8ccc01949017f8661de08dc", "filename": "src/test/run-pass/artificial-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fartificial-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fartificial-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fartificial-block.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,4 +10,4 @@\n \n fn f() -> int { { return 3; } }\n \n-fn main() { assert (f() == 3); }\n+pub fn main() { assert (f() == 3); }"}, {"sha": "3f73d61090a9335bf08da432340d84c46c985440", "filename": "src/test/run-pass/assign-assign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fassign-assign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fassign-assign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassign-assign.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -29,4 +29,4 @@ fn test_assign_op() {\n     assert (x == 33);\n }\n \n-fn main() { test_assign(); test_assign_op(); }\n+pub fn main() { test_assign(); test_assign_op(); }"}, {"sha": "d0dc2638ee593b4c3dba77f42870be5dcb2cdf25", "filename": "src/test/run-pass/assignability-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fassignability-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassignability-trait.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -38,7 +38,7 @@ fn length<A, T: iterable<A>>(x: T) -> uint {\n     return len;\n }\n \n-fn main() {\n+pub fn main() {\n     let x = ~[0,1,2,3];\n     // Call a method\n     for x.iterate() |y| { assert x[*y] == *y; }"}, {"sha": "aa5c3bb22a380613ea4fe66452d966b1fba2f55b", "filename": "src/test/run-pass/attr-before-view-item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -13,5 +13,5 @@\n #[foo = \"bar\"]\n extern mod std;\n \n-fn main() {\n+pub fn main() {\n }"}, {"sha": "e0d9a05b8aa2bbe93fdc198e68fe52624f09f1e1", "filename": "src/test/run-pass/attr-before-view-item2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-before-view-item2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -15,5 +15,5 @@ mod m {\n     extern mod std;\n }\n \n-fn main() {\n+pub fn main() {\n }"}, {"sha": "b343799e00a4e71605bff2cbcef38b655f0774a9", "filename": "src/test/run-pass/attr-main-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fattr-main-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fattr-main-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fattr-main-2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@\n \n // xfail-fast\n \n-fn main() {\n+pub fn main() {\n     die!()\n }\n "}, {"sha": "316f5ed195035ecc87ddeb803944efb79b88f5b7", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -158,7 +158,7 @@ enum Quark<T> {\n #[auto_decode]\n enum CLike { A, B, C }\n \n-fn main() {\n+pub fn main() {\n     let a = &Plus(@Minus(@Val(3u), @Val(10u)), @Plus(@Val(22u), @Val(5u)));\n     test_prettyprint(a, &~\"Plus(@Minus(@Val(3u), @Val(10u)), \\\n                            @Plus(@Val(22u), @Val(5u)))\");"}, {"sha": "8f7a88f19a73aa40012a2fe2f524f84fd4c276a1", "filename": "src/test/run-pass/auto-instantiate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-instantiate.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,7 +18,7 @@ struct Triple { x: int, y: int, z: int }\n \n fn f<T: Copy, U: Copy>(x: T, y: U) -> Pair<T, U> { return Pair {a: x, b: y}; }\n \n-fn main() {\n+pub fn main() {\n     log(debug, f(Triple {x: 3, y: 4, z: 5}, 4).a.x);\n     log(debug, f(5, 6).a);\n }"}, {"sha": "91dc9fde14374184d746c17c4bccd982fe2c530e", "filename": "src/test/run-pass/auto-loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fauto-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-loop.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let mut sum = 0;\n     for vec::each(~[1, 2, 3, 4, 5]) |x| {\n         sum += *x;"}, {"sha": "4b943e62fd20f7cc093bc526ac818f135c756caf", "filename": "src/test/run-pass/auto-ref-bounded-ty-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fauto-ref-bounded-ty-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fauto-ref-bounded-ty-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-bounded-ty-param.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -32,7 +32,7 @@ impl Bar : Baz {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let y = Bar { x: 42 };\n     y.f();\n }"}, {"sha": "80f20b13bddafa3c2ebf088d5f5a18fa523e4944", "filename": "src/test/run-pass/auto-ref-newtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fauto-ref-newtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fauto-ref-newtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-newtype.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -17,7 +17,7 @@ impl Foo {\n     fn len(&self) -> uint { **self }\n }\n \n-fn main() {\n+pub fn main() {\n     let m = Foo(3);\n     assert m.len() == 3;\n }"}, {"sha": "7c284bd820276ef04103ceee6951b7fd7bd239c9", "filename": "src/test/run-pass/auto-ref-slice-plus-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-slice-plus-ref.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -26,7 +26,7 @@ impl &str: MyIter {\n     pure fn test_const(&const self) { assert *self == \"test\" }\n }\n \n-fn main() {\n+pub fn main() {\n     // NB: Associativity of ~, etc. in this context is surprising. These must be parenthesized\n \n     ([1]).test_imm();"}, {"sha": "8423ea8c2d80d9021d69b1334c9482bd170646ea", "filename": "src/test/run-pass/auto-ref-sliceable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref-sliceable.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,7 +18,7 @@ impl<T> ~[T]: Pushable<T> {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let mut v = ~[1];\n     v.push_val(2);\n     v.push_val(3);"}, {"sha": "f3a1c824f80c58ec838df0e64f2425c3d67332d8", "filename": "src/test/run-pass/auto-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fauto-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fauto-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-ref.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -22,7 +22,7 @@ impl &Foo : Stuff {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = Foo { x: 3 };\n     x.printme();\n }"}, {"sha": "0b969540d74c0eb7c0ac44a61d3e636370a4ed76", "filename": "src/test/run-pass/autobind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautobind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautobind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautobind.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,7 +12,7 @@ fn f<T: Copy>(x: ~[T]) -> T { return x[0]; }\n \n fn g(act: fn(~[int]) -> int) -> int { return act(~[1, 2, 3]); }\n \n-fn main() {\n+pub fn main() {\n     assert (g(f) == 1);\n     let f1: fn(~[~str]) -> ~str = f;\n     assert (f1(~[~\"x\", ~\"y\", ~\"z\"]) == ~\"x\");"}, {"sha": "6e6d289e90fbd0482f02465defed7c9d294632be", "filename": "src/test/run-pass/autoderef-and-borrow-method-receiver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautoderef-and-borrow-method-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautoderef-and-borrow-method-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-and-borrow-method-receiver.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -20,6 +20,6 @@ fn g(x: &mut Foo) {\n     x.f();\n }\n \n-fn main() {\n+pub fn main() {\n }\n "}, {"sha": "cc45c75968cff6d0d94f8dcb8f29ff6cd999533e", "filename": "src/test/run-pass/autoderef-method-newtype.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautoderef-method-newtype.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautoderef-method-newtype.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-newtype.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,7 +18,7 @@ impl uint: double {\n \n enum foo = uint;\n \n-fn main() {\n+pub fn main() {\n     let x = foo(3u);\n     assert x.double() == 6u;\n }"}, {"sha": "d3377d196a4a80e6b821394af4eb755289b5f7a5", "filename": "src/test/run-pass/autoderef-method-on-trait-monomorphized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait-monomorphized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait-monomorphized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait-monomorphized.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -20,7 +20,7 @@ fn is_equal<D: double>(x: @D, exp: uint) {\n     assert x.double() == exp;\n }\n \n-fn main() {\n+pub fn main() {\n     let x = @(3u as double);\n     is_equal(x, 6);\n }"}, {"sha": "0071cc5923a1ce4ff718e8062ef4aef250494ac8", "filename": "src/test/run-pass/autoderef-method-on-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-on-trait.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -16,7 +16,7 @@ impl uint: double {\n     fn double() -> uint { self * 2u }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = @(3u as double);\n     assert x.double() == 6u;\n }"}, {"sha": "aa487a529660a2c2ccd967568daa5c6a02ed4517", "filename": "src/test/run-pass/autoderef-method-priority.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-priority.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -20,7 +20,7 @@ impl @uint: double {\n     fn double() -> uint { *self * 2u }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = @3u;\n     assert x.double() == 6u;\n }"}, {"sha": "cab69a243d4f286fd53303a65bcf18a5fce317be", "filename": "src/test/run-pass/autoderef-method-twice-but-not-thrice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice-but-not-thrice.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -16,7 +16,7 @@ impl @@uint: double {\n     fn double() -> uint { **self * 2u }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = @@@@@3u;\n     assert x.double() == 6u;\n }"}, {"sha": "5b307478887dbbce262a70edd384b335986445d5", "filename": "src/test/run-pass/autoderef-method-twice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method-twice.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -16,7 +16,7 @@ impl uint: double {\n     fn double() -> uint { self * 2u }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = @@3u;\n     assert x.double() == 6u;\n }"}, {"sha": "66372654701b79f7da230918a8c20b0a251fdfce", "filename": "src/test/run-pass/autoderef-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautoderef-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoderef-method.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -16,7 +16,7 @@ impl uint: double {\n     fn double() -> uint { self * 2u }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = @3u;\n     assert x.double() == 6u;\n }"}, {"sha": "1d7aa862a2a40da141bac4647c491450728db664", "filename": "src/test/run-pass/autoref-intermediate-types-issue-3585.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fautoref-intermediate-types-issue-3585.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -24,7 +24,7 @@ impl uint: Foo {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = @3u;\n     assert x.foo() == ~\"@3\";\n }\n\\ No newline at end of file"}, {"sha": "ceae1392d3b73fc3e1053ca6df40dfa18ada30b5", "filename": "src/test/run-pass/bare-static-string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbare-static-string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbare-static-string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbare-static-string.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let x: &static/str = \"foo\";\n     io::println(x);\n }"}, {"sha": "338c264b65b70947070f9be58fd823dde2167edc", "filename": "src/test/run-pass/big-literals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbig-literals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbig-literals.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     assert 0xffffffffu32 == (-1 as u32);\n     assert 4294967295u32 == (-1 as u32);\n     assert 0xffffffffffffffffu64 == (-1 as u64);"}, {"sha": "5a7ac1042d3bedf947acc40f32d45c56f7be1a54", "filename": "src/test/run-pass/binary-minus-without-space.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinary-minus-without-space.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@\n \n // Check that issue #954 stays fixed\n \n-fn main() {\n+pub fn main() {\n     match -1 { -1 => {}, _ => die!(~\"wat\") }\n     assert 1-1 == 0;\n }"}, {"sha": "4c30d1e00d9485420654c0b5ca1a4da3c0fa6568", "filename": "src/test/run-pass/bind-by-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbind-by-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbind-by-move.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,7 +14,7 @@ extern mod std;\n use std::arc;\n fn dispose(+_x: arc::ARC<bool>) unsafe { }\n \n-fn main() {\n+pub fn main() {\n     let p = arc::arc(true);\n     let x = Some(p);\n     match move x {"}, {"sha": "d27ca86c26ae285a4f6867a57c9c17c6a85f98ed", "filename": "src/test/run-pass/binops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbinops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbinops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbinops.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -121,7 +121,7 @@ fn test_class() {\n   assert(q != r);\n }\n \n-fn main() {\n+pub fn main() {\n     test_nil();\n     test_bool();\n     test_char();"}, {"sha": "097db4436fdb065b82123a5edc196e161eb50662", "filename": "src/test/run-pass/bitv-perf-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitv-perf-test.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -20,6 +20,6 @@ fn bitv_test() -> bool {\n     true\n }\n \n-fn main() {\n+pub fn main() {\n     do iter::repeat(10000) || {bitv_test()};\n }"}, {"sha": "680ffb73855daacb7815dc93f52bfb3d4b096a95", "filename": "src/test/run-pass/bitwise.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbitwise.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbitwise.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbitwise.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -38,7 +38,7 @@ fn general() {\n     assert (0b1010_1010 | 0b0101_0101 == 0xff);\n }\n \n-fn main() {\n+pub fn main() {\n     general();\n     target();\n }"}, {"sha": "fd5662bd46b470ea01b1602178bfe09f287d2608", "filename": "src/test/run-pass/block-arg-call-as.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-call-as.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -26,7 +26,7 @@ fn asAny( f : fn()->uint ) -> uint {\n    return f();\n }\n \n-fn main() {\n+pub fn main() {\n    let x = asSendfn(|| 22u);\n    assert(x == 22u);\n    let x = asLambda(|| 22u);"}, {"sha": "09bfe1720f7f17befac8c159dcb7fbdd56eb1331", "filename": "src/test/run-pass/block-arg-can-be-followed-by-binop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-binop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-binop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-binop.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let v = ~[-1f, 0f, 1f, 2f, 3f];\n \n     // Trailing expressions don't require parentheses:"}, {"sha": "f908bbf745accfff8695d8be18b1b2fc93404524", "filename": "src/test/run-pass/block-arg-can-be-followed-by-block-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-block-arg.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     fn f(i: fn() -> uint) -> uint { i() }\n     let v = ~[-1f, 0f, 1f, 2f, 3f];\n     let z = do do vec::foldl(f, v) |x, _y| { x } { 22u };"}, {"sha": "9fd3c76bd343e53da00ce2062d2d74f26bb7025c", "filename": "src/test/run-pass/block-arg-can-be-followed-by-call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-can-be-followed-by-call.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     fn f(i: uint) -> uint { i }\n     let v = ~[-1f, 0f, 1f, 2f, 3f];\n     let z = do vec::foldl(f, v) |x, _y| { x } (22u);"}, {"sha": "8eb0a8bef93381c81a8bb55b6f64012b7eb9ca9c", "filename": "src/test/run-pass/block-arg-in-parentheses.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-arg-in-parentheses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-arg-in-parentheses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-in-parentheses.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -27,7 +27,7 @@ fn w_ret(v: ~[int]) -> int {\n     return do vec::foldl(0, v) |x,y| { x+*y } - 10;\n }\n \n-fn main() {\n+pub fn main() {\n     assert w_semi(~[0, 1, 2, 3]) == -10;\n     assert w_paren1(~[0, 1, 2, 3]) == -4;\n     assert w_paren2(~[0, 1, 2, 3]) == -4;"}, {"sha": "af2e6815e07e9afab4b282d9808ab225eb9a63d3", "filename": "src/test/run-pass/block-arg-used-as-any.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-any.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,7 +12,7 @@ fn call_any(f: fn() -> uint) -> uint {\n     return f();\n }\n \n-fn main() {\n+pub fn main() {\n     let x_r = do call_any { 22u };\n     assert x_r == 22u;\n }"}, {"sha": "20a1123ecf4ca231f811449a4723b913d15877fc", "filename": "src/test/run-pass/block-arg-used-as-lambda.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-lambda.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-lambda.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg-used-as-lambda.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,7 +12,7 @@ fn to_lambda(f: fn@(uint) -> uint) -> fn@(uint) -> uint {\n     return f;\n }\n \n-fn main() {\n+pub fn main() {\n     let x: fn@(uint) -> uint = to_lambda(|x| x * 2u );\n     let y = to_lambda(x);\n "}, {"sha": "e9c2eec510a9b23fd90533cd58d966b231da1923", "filename": "src/test/run-pass/block-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-arg.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // Check usage and precedence of block arguments in expressions:\n-fn main() {\n+pub fn main() {\n     let v = ~[-1f, 0f, 1f, 2f, 3f];\n \n     // Statement form does not require parentheses:"}, {"sha": "f6bbb94690f79daec50b68bac0b4cc1bab8b1da0", "filename": "src/test/run-pass/block-explicit-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-explicit-types.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     fn as_buf<T>(s: ~str, f: fn(~str) -> T) -> T { f(s) }\n     as_buf(~\"foo\", |foo: ~str| -> () log(error, foo) );\n }"}, {"sha": "7d56a6a46ff93e934c8d02c6e825bed5a59473d8", "filename": "src/test/run-pass/block-expr-precedence.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-expr-precedence.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -54,7 +54,7 @@\n  *\n  */\n \n-fn main() {\n+pub fn main() {\n \n   let num = 12;\n "}, {"sha": "3cd5f36fcb62f7d89763fac652081643d2224315", "filename": "src/test/run-pass/block-fn-coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-fn-coerce.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn force(f: fn() -> int) -> int { return f(); }\n-fn main() {\n+pub fn main() {\n     fn f() -> int { return 7; }\n     assert (force(f) == 7);\n     let g = {||force(f)};"}, {"sha": "6faf4129ba774cbaf591c2d0ea80cbadab173a73", "filename": "src/test/run-pass/block-iter-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-1.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -13,7 +13,7 @@\n \n fn iter_vec<T>(v: ~[T], f: fn(T)) { for v.each |x| { f(*x); } }\n \n-fn main() {\n+pub fn main() {\n     let v = ~[1, 2, 3, 4, 5, 6, 7];\n     let mut odds = 0;\n     iter_vec(v, |i| {"}, {"sha": "d57346a3299584d506bdfd23a2c235dd6e13da15", "filename": "src/test/run-pass/block-iter-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-iter-2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -13,7 +13,7 @@\n \n fn iter_vec<T>(v: ~[T], f: fn(T)) { for v.each |x| { f(*x); } }\n \n-fn main() {\n+pub fn main() {\n     let v = ~[1, 2, 3, 4, 5];\n     let mut sum = 0;\n     iter_vec(copy v, |i| {"}, {"sha": "cfc18d29e783453011030e2802e92ec9679dbef7", "filename": "src/test/run-pass/block-vec-map2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-vec-map2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fblock-vec-map2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fblock-vec-map2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@\n \n extern mod std;\n \n-fn main() {\n+pub fn main() {\n     let v =\n         vec::map2(~[1, 2, 3, 4, 5],\n                   ~[true, false, false, true, true],"}, {"sha": "d79b6f73398f65538387a02e3e02b8f15675776d", "filename": "src/test/run-pass/bool-not.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbool-not.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbool-not.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbool-not.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,7 +12,7 @@\n \n \n // -*- rust -*-\n-fn main() {\n+pub fn main() {\n     if !false { assert (true); } else { assert (false); }\n     if !true { assert (false); } else { assert (true); }\n }"}, {"sha": "daed89033fca0bae23727d6f99aaf45cb55cc6c7", "filename": "src/test/run-pass/borrow-by-val-method-receiver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrow-by-val-method-receiver.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -16,7 +16,7 @@ impl &[int]: Foo {\n     fn foo(self) {}\n }\n \n-fn main() {\n+pub fn main() {\n     let items = ~[ 3, 5, 1, 2, 4 ];\n     items.foo();\n }"}, {"sha": "6e8b35f76788d2f049889a714b61bd5dbdff8187", "filename": "src/test/run-pass/borrowck-binding-mutbl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-binding-mutbl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-binding-mutbl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-binding-mutbl.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -13,7 +13,7 @@ struct F { mut f: ~[int] }\n fn impure(_v: &[int]) {\n }\n \n-fn main() {\n+pub fn main() {\n     let x = F {f: ~[3]};\n \n     match x {"}, {"sha": "88c06476243a2642c6c35bb7f0314506051b9b96", "filename": "src/test/run-pass/borrowck-borrow-from-at-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-at-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-at-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-at-vec.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,7 +14,7 @@ fn sum_slice(x: &[int]) -> int {\n     return sum;\n }\n \n-fn main() {\n+pub fn main() {\n     let x = @[1, 2, 3];\n     assert sum_slice(x) == 6;\n }\n\\ No newline at end of file"}, {"sha": "4196527728aa2443857fd3b67060f255c1b608d7", "filename": "src/test/run-pass/borrowck-borrow-from-expr-block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-borrow-from-expr-block.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -20,6 +20,6 @@ fn test1(x: @~int) {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     test1(@~22);\n }"}, {"sha": "647c0b646cf9401eaf441ce842a47b54f15ed8c5", "filename": "src/test/run-pass/borrowck-fixed-length-vecs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-fixed-length-vecs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-fixed-length-vecs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-fixed-length-vecs.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let x = [22];\n     let y = &x[0];\n     assert *y == 22;"}, {"sha": "44be8f2724a2ac287441e5e3f03e1537a119942c", "filename": "src/test/run-pass/borrowck-lend-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-lend-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-lend-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-lend-args.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -30,5 +30,5 @@ fn borrow_from_arg_val(++v: ~int) {\n     borrow(v);\n }\n \n-fn main() {\n+pub fn main() {\n }"}, {"sha": "8db3bdd5e64fd6c35f9ccc671dca4d9320599475", "filename": "src/test/run-pass/borrowck-move-from-unsafe-ptr-ok.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-move-from-unsafe-ptr-ok.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-move-from-unsafe-ptr-ok.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-move-from-unsafe-ptr-ok.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -17,5 +17,5 @@ fn bar(x: *~int) -> ~int {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n }\n\\ No newline at end of file"}, {"sha": "2cd445ee7af8bf06f6f579e75118c68438fbd287", "filename": "src/test/run-pass/borrowck-mut-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-uniq.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -23,7 +23,7 @@ fn iter_ints(x: &Ints, f: fn(x: &int) -> bool) {\n     uint::range(0, l, |i| f(&x.values[i]))\n }\n \n-fn main() {\n+pub fn main() {\n     let mut ints = ~Ints {sum: ~0, values: ~[]};\n     add_int(ints, 22);\n     add_int(ints, 44);"}, {"sha": "22f46b8ff1e11f10560c41f7ad3ce6e092e849ba", "filename": "src/test/run-pass/borrowck-mut-vec-as-imm-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-mut-vec-as-imm-slice.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,6 +18,6 @@ fn has_mut_vec(+v: ~[mut int]) -> int {\n     want_slice(v)\n }\n \n-fn main() {\n+pub fn main() {\n     assert has_mut_vec(~[mut 1, 2, 3]) == 6;\n }\n\\ No newline at end of file"}, {"sha": "88ddf4e081adca85390a1145dee4a383fecf11d6", "filename": "src/test/run-pass/borrowck-newtype-issue-2573.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-newtype-issue-2573.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-newtype-issue-2573.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-newtype-issue-2573.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -27,4 +27,4 @@ fn really_impure(++bar: baz) {\n     bar.baz = 3;\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "d7551f792f3b79ad88d2d3b62570ca20cbd7c9ec", "filename": "src/test/run-pass/borrowck-pat-reassign-no-binding.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-pat-reassign-no-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-pat-reassign-no-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-pat-reassign-no-binding.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let mut x = None;\n     match x {\n       None => {"}, {"sha": "47bc6344bc2715f8dab428872c9e0e5444405a6f", "filename": "src/test/run-pass/borrowck-preserve-box-in-arm-not-taken.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-arm-not-taken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-arm-not-taken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-arm-not-taken.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@\n \n // exec-env:RUST_POISON_ON_FREE=1\n \n-fn main() {\n+pub fn main() {\n     let x: @mut @Option<~int> = @mut @None;\n     match x {\n       @@Some(ref y) => {"}, {"sha": "c6fc92bd56d355b86b2422b22944ba732bda9c35", "filename": "src/test/run-pass/borrowck-preserve-box-in-discr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-discr.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,7 +12,7 @@\n \n struct F { f: ~int }\n \n-fn main() {\n+pub fn main() {\n     let mut x = @F {f: ~3};\n     match x {\n       @F {f: ref b_x} => {"}, {"sha": "482673f9184a62a6a8ead8d22db3c4d228aa8353", "filename": "src/test/run-pass/borrowck-preserve-box-in-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-field.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -19,7 +19,7 @@ fn borrow(x: &int, f: fn(x: &int)) {\n \n struct F { f: ~int }\n \n-fn main() {\n+pub fn main() {\n     let mut x = @F {f: ~3};\n     do borrow(x.f) |b_x| {\n         assert *b_x == 3;"}, {"sha": "29d94a0e8eaa332f6bb0011d77392126ddfde808", "filename": "src/test/run-pass/borrowck-preserve-box-in-pat.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-pat.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,7 +12,7 @@\n \n struct F { f: ~int }\n \n-fn main() {\n+pub fn main() {\n     let mut x = @mut @F {f: ~3};\n     match x {\n       @@F{f: ref b_x} => {"}, {"sha": "3f5708a8930335806d7d66efee713ad5a47d9d16", "filename": "src/test/run-pass/borrowck-preserve-box-in-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-in-uniq.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -19,7 +19,7 @@ fn borrow(x: &int, f: fn(x: &int)) {\n \n struct F { f: ~int }\n \n-fn main() {\n+pub fn main() {\n     let mut x = ~mut @F{f: ~3};\n     do borrow(x.f) |b_x| {\n         assert *b_x == 3;"}, {"sha": "b4b5a622408c275ef8fdd644616c1e3a0ad34dd2", "filename": "src/test/run-pass/borrowck-preserve-box-sometimes-needed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-sometimes-needed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-sometimes-needed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box-sometimes-needed.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,7 +18,7 @@ fn switcher(x: Option<@int>) {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     switcher(None);\n     switcher(Some(@3));\n }\n\\ No newline at end of file"}, {"sha": "37c598f01a710118307cb31d0b505d74086d8629", "filename": "src/test/run-pass/borrowck-preserve-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-box.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -17,7 +17,7 @@ fn borrow(x: &int, f: fn(x: &int)) {\n     assert before == after;\n }\n \n-fn main() {\n+pub fn main() {\n     let mut x = @3;\n     do borrow(x) |b_x| {\n         assert *b_x == 3;"}, {"sha": "490db9c47f728c69496bc63294441ec378ccf7e1", "filename": "src/test/run-pass/borrowck-preserve-cond-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-cond-box.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -34,7 +34,7 @@ fn testfn(cond: bool) {\n     assert *r == exp;\n }\n \n-fn main() {\n+pub fn main() {\n     testfn(true);\n     testfn(false);\n }\n\\ No newline at end of file"}, {"sha": "8e16565bf53d1f2393c26704b3738150af882957", "filename": "src/test/run-pass/borrowck-preserve-expl-deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-preserve-expl-deref.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -19,7 +19,7 @@ fn borrow(x: &int, f: fn(x: &int)) {\n \n struct F { f: ~int }\n \n-fn main() {\n+pub fn main() {\n     let mut x = @F {f: ~3};\n     do borrow((*x).f) |b_x| {\n         assert *b_x == 3;"}, {"sha": "5b2232daa4a1d554c761da70b60099b1be391e2d", "filename": "src/test/run-pass/borrowck-root-while-cond-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond-2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -11,7 +11,7 @@\n struct F { mut f: @G }\n struct G { g: ~[int] }\n \n-fn main() {\n+pub fn main() {\n     let rec = @F {mut f: @G {g: ~[1, 2, 3]}};\n     while rec.f.g.len() == 23 {}\n }"}, {"sha": "432847cc1983c725cfda64e3a0ce2bd3c2962643", "filename": "src/test/run-pass/borrowck-root-while-cond.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-root-while-cond.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,7 +12,7 @@ fn borrow<T>(x: &r/T) -> &r/T {x}\n \n struct Rec { mut f: @int }\n \n-fn main() {\n+pub fn main() {\n     let rec = @Rec {mut f: @22};\n     while *borrow(rec.f) == 23 {}\n }"}, {"sha": "531c49b82d76a994a46c5831ba72fc14eed2a11a", "filename": "src/test/run-pass/borrowck-univariant-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-univariant-enum.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,7 +12,7 @@ enum newtype {\n     newtype(int)\n }\n \n-fn main() {\n+pub fn main() {\n \n     // Test that borrowck treats enums with a single variant\n     // specially."}, {"sha": "d721704ba55185a45c71d0489460ef8fdf8c2661", "filename": "src/test/run-pass/borrowck-wg-borrow-mut-to-imm-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm-2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -7,7 +7,7 @@ fn foo(cat: &mut Cat) {\n     bar(&*cat);\n }\n \n-fn main() {\n+pub fn main() {\n     let mut mimi = ~Cat;\n     foo(mimi);\n }"}, {"sha": "748672ef050fb034b879993277c7305dbea5c11a", "filename": "src/test/run-pass/borrowck-wg-borrow-mut-to-imm-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm-3.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@ impl Wizard {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let mut harry = Wizard {\n         spells: ~[ \"expelliarmus\", \"expecto patronum\", \"incendio\" ]\n     };"}, {"sha": "dea4ec4959b0068bac2449e9284a66c9088090b4", "filename": "src/test/run-pass/borrowck-wg-borrow-mut-to-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-borrow-mut-to-imm.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -6,7 +6,7 @@ fn f(x: &mut Option<int>) {\n     g(&*x);\n }\n \n-fn main() {\n+pub fn main() {\n     let mut x = ~Some(3);\n     f(x);\n }"}, {"sha": "adf2403ec63d63730e62b5f630ee1a5876790502", "filename": "src/test/run-pass/borrowck-wg-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-wg-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowck-wg-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowck-wg-simple.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -2,7 +2,7 @@ fn f(x: &int) {\n     io::println(x.to_str());\n }\n \n-fn main() {\n+pub fn main() {\n     let x = @mut 3;\n     f(x);\n }"}, {"sha": "48af01c6f55ca0d0ef12d3a5f39012694ab9c386", "filename": "src/test/run-pass/borrowed-ptr-pattern-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -15,7 +15,7 @@ fn foo(s: &~str) -> bool {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     assert foo(&~\"kitty\");\n     assert !foo(&~\"gata\");\n }"}, {"sha": "138b224e3cb6656e23c3e03e57fbeebfcbece8e4", "filename": "src/test/run-pass/borrowed-ptr-pattern-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-3.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -15,7 +15,7 @@ fn foo(s: &r/uint) -> bool {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     assert foo(&3);\n     assert !foo(&4);\n }"}, {"sha": "e28b4e425ebd96ae1e435377bd471b2a3f109659", "filename": "src/test/run-pass/borrowed-ptr-pattern-infallible.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-infallible.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let (&x, &y, &z) = (&3, &'a', &@\"No pets!\");\n     assert x == 3;\n     assert y == 'a';"}, {"sha": "f709448d43149bda8296b275fd809cecabe1cc68", "filename": "src/test/run-pass/borrowed-ptr-pattern-option.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern-option.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -16,7 +16,7 @@ fn select(x: &r/Option<int>, y: &r/Option<int>) -> &r/Option<int> {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = None;\n     let y = Some(3);\n     assert select(&x, &y).get() == 3;"}, {"sha": "fdf4a16156064e3c539ee5cf7cb58fc9dfb3e888", "filename": "src/test/run-pass/borrowed-ptr-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fborrowed-ptr-pattern.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,7 +14,7 @@ fn foo<T: Copy>(x: &T) -> T{\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     assert foo(&3) == 3;\n     assert foo(&'a') == 'a';\n     assert foo(&@\"Dogs rule, cats drool\") == @\"Dogs rule, cats drool\";"}, {"sha": "5f4a88375a489053d14805a35ca0c64b2d2ddd7b", "filename": "src/test/run-pass/bounded-fn-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbounded-fn-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbounded-fn-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbounded-fn-type.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@\n \n fn ignore<T>(_x: T) {}\n \n-fn main() {\n+pub fn main() {\n     let f: fn@:Owned() = ||();\n     ignore(f);\n }"}, {"sha": "4893040ff3451cbd288688489d2ecebc1bbb5363", "filename": "src/test/run-pass/box-compare.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbox-compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbox-compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-compare.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-fn main() {\n+pub fn main() {\n     assert (@1 < @3);\n     assert (@@~\"hello \" > @@~\"hello\");\n     assert (@@@~\"hello\" != @@@~\"there\");"}, {"sha": "22857aaefec5a8d37267f8ef457cf66e11e16a1a", "filename": "src/test/run-pass/box-in-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-in-tup.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,4 +8,4 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() { let i: (@int, int) = (@10, 10); let (a, _) = i; }\n+pub fn main() { let i: (@int, int) = (@10, 10); let (a, _) = i; }"}, {"sha": "e9838ec17aeeb9bafda17b62251e9dc76947d18c", "filename": "src/test/run-pass/box-inside-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -22,4 +22,4 @@ fn foo(acc: int, n: int) {\n     if is_odd(n) && length_is_even(some_box(1)) { error!(\"bloop\"); }\n }\n \n-fn main() { foo(67, 5); }\n+pub fn main() { foo(67, 5); }"}, {"sha": "bcadc69bb0a2e94a4bc2bdbf2228eb424f26d86e", "filename": "src/test/run-pass/box-inside-if2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-inside-if2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -22,4 +22,4 @@ fn foo(acc: int, n: int) {\n     if is_odd(n) || length_is_even(some_box(1)) { error!(\"bloop\"); }\n }\n \n-fn main() { foo(67, 5); }\n+pub fn main() { foo(67, 5); }"}, {"sha": "ccdaeab32739c986ba5b8c13bcb18c6296ba3d72", "filename": "src/test/run-pass/box-pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbox-pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbox-pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-pattern.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -11,7 +11,7 @@\n struct Foo {a: int, b: uint}\n enum bar { u(@Foo), w(int), }\n \n-fn main() {\n+pub fn main() {\n     assert (match u(@Foo{a: 10, b: 40u}) {\n               u(@Foo{a: a, b: b}) => { a + (b as int) }\n               _ => { 66 }"}, {"sha": "6889d764cbbb04d1a55a6a690a09a53286d2d82f", "filename": "src/test/run-pass/box-unbox.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbox-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox-unbox.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,7 +14,7 @@ struct Box<T> {c: @T}\n \n fn unbox<T: Copy>(b: Box<T>) -> T { return *b.c; }\n \n-fn main() {\n+pub fn main() {\n     let foo: int = 17;\n     let bfoo: Box<int> = Box {c: @foo};\n     debug!(\"see what's in our box\");"}, {"sha": "05b32150e2da56bf71b8bb535c5818e4d584120c", "filename": "src/test/run-pass/box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbox.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,4 +10,4 @@\n \n \n \n-fn main() { let x: @int = @10; assert (*x == 10); }\n+pub fn main() { let x: @int = @10; assert (*x == 10); }"}, {"sha": "9e6af13dca22fe148576e7866d22908a8bd7bd41", "filename": "src/test/run-pass/boxed-class-type-substitution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fboxed-class-type-substitution.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -31,4 +31,4 @@ enum layout_data = {\n     mut box: Option<@Box>\n };\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "1347430e4a07953d6c19e222bcdd31441600f2c4", "filename": "src/test/run-pass/boxed-trait-with-vstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fboxed-trait-with-vstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fboxed-trait-with-vstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fboxed-trait-with-vstore.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,7 +18,7 @@ impl int : Foo {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = 3 as @Foo;\n     x.foo();\n }"}, {"sha": "efc3ab32a1a813841420ecd0895371040b715922", "filename": "src/test/run-pass/break-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbreak-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbreak-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak-value.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,4 +10,4 @@\n \n fn int_id(x: int) -> int { return x; }\n \n-fn main() { loop { int_id(break); } }\n+pub fn main() { loop { int_id(break); } }"}, {"sha": "9d4b0dffdbaee9918445a642d489492cf55da38c", "filename": "src/test/run-pass/break.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbreak.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fbreak.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbreak.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-fn main() {\n+pub fn main() {\n     let mut i = 0;\n     while i < 20 { i += 1; if i == 10 { break; } }\n     assert (i == 10);"}, {"sha": "d361b20e8333ca662bdd13a51a8b5cad188292a2", "filename": "src/test/run-pass/by-val-and-by-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fby-val-and-by-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fby-val-and-by-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fby-val-and-by-move.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -20,7 +20,7 @@ fn it_takes_two(x: @int, -y: @int) -> int {\n fn free<T>(-_t: T) {\n }\n \n-fn main() {\n+pub fn main() {\n     let z = @3;\n     assert 3 == it_takes_two(z, z);\n }"}, {"sha": "9b1d6af08914ea022a178927b197cf37eb899d4e", "filename": "src/test/run-pass/c-stack-as-value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-as-value.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -13,7 +13,7 @@ extern mod rustrt {\n     pub fn get_task_id() -> libc::intptr_t;\n }\n \n-fn main() {\n+pub fn main() {\n     unsafe {\n         let _foo = rustrt::get_task_id;\n     }"}, {"sha": "02c2ab92725de18e5c501efe29e23a1a007e75e4", "filename": "src/test/run-pass/c-stack-returning-int64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fc-stack-returning-int64.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -25,7 +25,7 @@ fn atoll(s: ~str) -> i64 {\n     return str::as_buf(s, { |x, _len| unsafe { libc::atoll(x) } });\n }\n \n-fn main() {\n+pub fn main() {\n     unsafe {\n         assert atol(~\"1024\") * 10 == atol(~\"10240\");\n         assert (atoll(~\"11111111111111111\") * 10i64)"}, {"sha": "5abf499937aa4e18630a9f2ed5202a703d996665", "filename": "src/test/run-pass/call-closure-from-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcall-closure-from-overloaded-op.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@\n \n fn foo() -> int { 22 }\n \n-fn main() {\n+pub fn main() {\n     let x = dvec::DVec::<@fn() -> int>();\n     x.push(foo);\n     assert (x[0])() == 22;"}, {"sha": "dd4c7ba6a85cb923604dc33fee7ea087773ac513", "filename": "src/test/run-pass/cap-clause-move.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcap-clause-move.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let x = ~1;\n     let y = ptr::addr_of(&(*x)) as uint;\n     let lam_move = fn@(move x) -> uint { ptr::addr_of(&(*x)) as uint };"}, {"sha": "e26a8ae11fdb22f73474390bea60bb0562d75223", "filename": "src/test/run-pass/cap-clause-not-used.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcap-clause-not-used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcap-clause-not-used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcap-clause-not-used.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // error-pattern: warning: Captured variable 'y' not used in closure\n-fn main() {\n+pub fn main() {\n     let x = 5;\n     let _y = fn~(copy x) { };\n }"}, {"sha": "6c052b95a2bc5ce1e515891bdff63f9b11d7391c", "filename": "src/test/run-pass/capture_nil.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcapture_nil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcapture_nil.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -34,6 +34,6 @@ fn foo(&&x: ()) -> Port<()> {\n     p\n }\n \n-fn main() {\n+pub fn main() {\n     foo(()).recv()\n }"}, {"sha": "bd099f45e49bb6c2e843ff9ef7a3ec0951c370c3", "filename": "src/test/run-pass/cast-region-to-uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast-region-to-uint.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let x = 3;\n     debug!(\"&x=%x\", ptr::to_uint(&x));\n }\n\\ No newline at end of file"}, {"sha": "b7d23c5176ead4767011a85a56a51faa4f01779b", "filename": "src/test/run-pass/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,7 +12,7 @@\n \n \n // -*- rust -*-\n-fn main() {\n+pub fn main() {\n     let i: int = 'Q' as int;\n     assert (i == 0x51);\n     let u: u32 = i as u32;"}, {"sha": "2897ad24fd48b68555f92ba552b088f67173157e", "filename": "src/test/run-pass/cci_impl_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_impl_exe.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,7 +14,7 @@\n extern mod cci_impl_lib;\n use cci_impl_lib::uint_helpers;\n \n-fn main() {\n+pub fn main() {\n     //let bt0 = sys::frame_address();\n     //debug!(\"%?\", bt0);\n "}, {"sha": "01054ba44cffcb8b50bd79e591920d760756d43a", "filename": "src/test/run-pass/cci_iter_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcci_iter_exe.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -15,7 +15,7 @@\n \n extern mod cci_iter_lib;\n \n-fn main() {\n+pub fn main() {\n     //let bt0 = sys::rusti::frame_address(1u32);\n     //debug!(\"%?\", bt0);\n     do cci_iter_lib::iter(~[1, 2, 3]) |i| {"}, {"sha": "d3a8dd53014fce6b85cdcdaf0dc5e7920408fd58", "filename": "src/test/run-pass/cfg-family.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcfg-family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcfg-family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-family.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n #[cfg(windows)]\n-fn main() {\n+pub fn main() {\n }\n \n #[cfg(unix)]\n-fn main() {\n+pub fn main() {\n }\n\\ No newline at end of file"}, {"sha": "ddf58d310cfe9a9ff148e7af7f7ab61e565dd0ca", "filename": "src/test/run-pass/cfg-target-family.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcfg-target-family.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcfg-target-family.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcfg-target-family.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n #[cfg(target_family = \"windows\")]\n-fn main() {\n+pub fn main() {\n }\n \n #[cfg(target_family = \"unix\")]\n-fn main() {\n+pub fn main() {\n }\n\\ No newline at end of file"}, {"sha": "7900b2ffa7cabf70e202faf2d21177663a8020c0", "filename": "src/test/run-pass/char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchar.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-fn main() {\n+pub fn main() {\n     let c: char = 'x';\n     let d: char = 'x';\n     assert (c == 'x');"}, {"sha": "50c6b82114326a618843b6ec760c8ab627d54889", "filename": "src/test/run-pass/child-outlives-parent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fchild-outlives-parent.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,4 +14,4 @@ extern mod std;\n \n fn child2(&&s: ~str) { }\n \n-fn main() { let x = task::spawn(|| child2(~\"hi\") ); }\n+pub fn main() { let x = task::spawn(|| child2(~\"hi\") ); }"}, {"sha": "9382cc8ac3401dac73a5d47f91a6f60b38056cdd", "filename": "src/test/run-pass/class-attributes-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-1.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -23,4 +23,4 @@ impl cat: Drop {\n #[cat_maker]\n fn cat(name: ~str) -> cat { cat{name: name,} }\n \n-fn main() { let _kitty = cat(~\"Spotty\"); }\n+pub fn main() { let _kitty = cat(~\"Spotty\"); }"}, {"sha": "471f830c3e217724dba394e327942f5686067583", "filename": "src/test/run-pass/class-attributes-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-attributes-2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -32,6 +32,6 @@ fn cat(name: ~str) -> cat {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n   let _kitty = cat(~\"Spotty\");\n }"}, {"sha": "1d1b07ae32461bf8ced75a413620dddaa7831757", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate-2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -20,7 +20,7 @@ fn print_out<T: ToStr>(thing: T, expected: ~str) {\n   assert(actual == expected);\n }\n \n-fn main() {\n+pub fn main() {\n   let nyan : ToStr  = cat(0u, 2, ~\"nyan\") as ToStr;\n   print_out(nyan, ~\"nyan\");\n }"}, {"sha": "36e6c6b487d5a40fc80b36ea9cbb223e18f83e68", "filename": "src/test/run-pass/class-cast-to-trait-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-cross-crate.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -54,7 +54,7 @@ fn print_out<T: to_str>(thing: T, expected: str) {\n   assert(actual == expected);\n }\n \n-fn main() {\n+pub fn main() {\n   let nyan : to_str  = cat(0u, 2, \"nyan\") as to_str;\n   print_out(nyan, \"nyan\");\n }"}, {"sha": "2f7ede7e59e5a608efeefa018a78baf9f30819c0", "filename": "src/test/run-pass/class-cast-to-trait-multiple-types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait-multiple-types.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -83,7 +83,7 @@ fn annoy_neighbors<T: noisy>(critter: T) {\n   for uint::range(0u, 10u) |i| { critter.speak(); }\n }\n \n-fn main() {\n+pub fn main() {\n   let nyan : cat  = cat(0u, 2, ~\"nyan\");\n   let whitefang : dog = dog();\n   annoy_neighbors((copy nyan) as noisy);"}, {"sha": "014b5441cc2ce5cd219e979ffdd6fd74f9354b81", "filename": "src/test/run-pass/class-cast-to-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-cast-to-trait.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -55,7 +55,7 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n }\n \n \n-fn main() {\n+pub fn main() {\n   let nyan : noisy  = cat(0u, 2, ~\"nyan\") as noisy;\n   nyan.speak();\n }\n\\ No newline at end of file"}, {"sha": "07193400c6a9e048e98fc66f17d7b8dcedaa398a", "filename": "src/test/run-pass/class-dtor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-dtor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-dtor.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -26,4 +26,4 @@ fn cat(done: extern fn(uint)) -> cat {\n     }\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "f0044f8d17c7ec1114cfcd8f25fc3416938b534b", "filename": "src/test/run-pass/class-exports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-exports.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -33,6 +33,6 @@ mod kitty {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n   assert(cat(~\"Spreckles\").get_name() == ~\"Spreckles\");\n }"}, {"sha": "57ebb594af2e9235279aaf797c34fcede5cbbd8e", "filename": "src/test/run-pass/class-impl-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-parameterized-trait.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -73,7 +73,7 @@ class cat : map<int, bool> {\n   fn clear() { }\n }\n \n-fn main() {\n+pub fn main() {\n   let nyan : cat = cat(0, 2, \"nyan\");\n   for uint::range(1u, 5u) |_i| { nyan.speak(); }\n   // cat returns true if uint input is greater than"}, {"sha": "344f6230203ac623cd9a108181b237c7581d75ca", "filename": "src/test/run-pass/class-impl-very-parameterized-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-impl-very-parameterized-trait.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -135,7 +135,7 @@ fn cat<T: Copy>(in_x : int, in_y : int, in_name: T) -> cat<T> {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n   let nyan : cat<~str> = cat(0, 2, ~\"nyan\");\n   for uint::range(1u, 5u) |_i| { nyan.speak(); }\n   assert(nyan.find(1) == Some(~\"nyan\"));"}, {"sha": "ff052259a76771d376e7438556dd1ea0769a0dcd", "filename": "src/test/run-pass/class-implement-trait-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-trait-cross-crate.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -59,7 +59,7 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n }\n \n \n-fn main() {\n+pub fn main() {\n   let nyan = cat(0u, 2, ~\"nyan\");\n   nyan.eat();\n   assert(!nyan.eat());"}, {"sha": "4679abe21d7a08cc5df59a577568b3853f7df57a", "filename": "src/test/run-pass/class-implement-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implement-traits.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -63,7 +63,7 @@ fn make_speak<C: noisy>(c: C) {\n     c.speak();\n }\n \n-fn main() {\n+pub fn main() {\n   let nyan = cat(0u, 2, ~\"nyan\");\n   nyan.eat();\n   assert(!nyan.eat());"}, {"sha": "9b2e349e66caf375c19a3bde0edc32a8e7553d96", "filename": "src/test/run-pass/class-implements-multiple-traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-implements-multiple-traits.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -122,7 +122,7 @@ fn scratched_something<T: scratchy>(critter: T) -> bool {\n   option::is_some(critter.scratch())\n }\n \n-fn main() {\n+pub fn main() {\n   let nyan : cat  = cat(0u, 2, \"nyan\");\n   annoy_neighbors(nyan as noisy);\n   assert(nyan.meow_count() == 10u);"}, {"sha": "bfa61c2f264bc52a99799ab96dd4fbfb41216152", "filename": "src/test/run-pass/class-method-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-method-cross-crate.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -13,7 +13,7 @@\n extern mod cci_class_2;\n use cci_class_2::kitties::*;\n \n-fn main() {\n+pub fn main() {\n   let nyan : cat = cat(52u, 99);\n   let kitty = cat(1000u, 2);\n   assert(nyan.how_hungry == 99);"}, {"sha": "b555abb6ec5c1c53521cae31621fca76b7c2c2cd", "filename": "src/test/run-pass/class-methods-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods-cross-crate.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -13,7 +13,7 @@\n extern mod cci_class_3;\n use cci_class_3::kitties::*;\n \n-fn main() {\n+pub fn main() {\n   let nyan : cat = cat(52u, 99);\n   let kitty = cat(1000u, 2);\n   assert(nyan.how_hungry == 99);"}, {"sha": "fa43968da0a62e94c649cda59c08a8d2a8bc1ebf", "filename": "src/test/run-pass/class-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-methods.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -27,7 +27,7 @@ fn cat(in_x : uint, in_y : int) -> cat {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n   let nyan : cat = cat(52u, 99);\n   let kitty = cat(1000u, 2);\n   assert(nyan.how_hungry == 99);"}, {"sha": "b0f5b916dd4e8fb63027f520906a83a8a9cd936c", "filename": "src/test/run-pass/class-poly-methods-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods-cross-crate.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -13,7 +13,7 @@\n extern mod cci_class_6;\n use cci_class_6::kitties::*;\n \n-fn main() {\n+pub fn main() {\n   let nyan : cat<char> = cat::<char>(52u, 99, ~['p']);\n   let kitty = cat(1000u, 2, ~[~\"tabby\"]);\n   assert(nyan.how_hungry == 99);"}, {"sha": "b7e638f40e8c01aa472ea6e336584453959badfe", "filename": "src/test/run-pass/class-poly-methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-poly-methods.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -30,7 +30,7 @@ fn cat<U>(in_x : uint, in_y : int, -in_info: ~[U]) -> cat<U> {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n   let nyan : cat<int> = cat::<int>(52u, 99, ~[9]);\n   let kitty = cat(1000u, 2, ~[~\"tabby\"]);\n   assert(nyan.how_hungry == 99);"}, {"sha": "56430678b05cde147e16d22281a3006f74f2a43b", "filename": "src/test/run-pass/class-separate-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-separate-impl.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -63,7 +63,7 @@ fn print_out<T: ToStr>(thing: T, expected: ~str) {\n   assert(actual == expected);\n }\n \n-fn main() {\n+pub fn main() {\n   let nyan : ToStr = cat(0u, 2, ~\"nyan\") as ToStr;\n   print_out(nyan, ~\"nyan\");\n }"}, {"sha": "060ad2b4beba94679d77608a9dd6a25886f31255", "filename": "src/test/run-pass/class-str-field.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-str-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-str-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-str-field.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -20,6 +20,6 @@ fn cat(in_name: ~str) -> cat {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n   let nyan = cat(~\"nyan\");\n }\n\\ No newline at end of file"}, {"sha": "6e09ac22b3df5c4d3bdbd455a6db303f1d8a57d2", "filename": "src/test/run-pass/class-trait-bounded-param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-trait-bounded-param.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -27,7 +27,7 @@ class keys<K: Copy, V: Copy, M: Copy map<K,V>>\n     fn eachi(blk: fn(uint, K) -> bool) { iter::eachi(self, blk) }\n }\n \n-fn main() {\n+pub fn main() {\n     let m = int_hash();\n     m.insert(1, 2);\n     m.insert(3, 4);"}, {"sha": "b8d0e59328623c2a392f81a375030d34d9881616", "filename": "src/test/run-pass/class-typarams.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclass-typarams.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclass-typarams.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -29,7 +29,7 @@ fn cat<U>(in_x : uint, in_y : int) -> cat<U> {\n }\n \n \n-fn main() {\n+pub fn main() {\n   let _nyan : cat<int> = cat::<int>(52u, 99);\n   //  let kitty = cat(1000u, 2);\n }"}, {"sha": "1b68e6c519aa5bd5bbf30c031d3d41e6e510bb3b", "filename": "src/test/run-pass/classes-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-cross-crate.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -13,7 +13,7 @@\n extern mod cci_class_4;\n use cci_class_4::kitties::*;\n \n-fn main() {\n+pub fn main() {\n   let nyan = cat(0u, 2, ~\"nyan\");\n   nyan.eat();\n   assert(!nyan.eat());"}, {"sha": "4f2499eced446a7db39db047a8e87e0d66c5a288", "filename": "src/test/run-pass/classes-self-referential.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-self-referential.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -20,4 +20,4 @@ fn kitten(cat: Option<cat>) -> kitten {\n \n type cat = @kitten;\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "74f4b0aac69170bc78f67ce64c7d0784e1ffbc49", "filename": "src/test/run-pass/classes-simple-cross-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-cross-crate.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -13,7 +13,7 @@\n extern mod cci_class;\n use cci_class::kitties::*;\n \n-fn main() {\n+pub fn main() {\n   let nyan : cat = cat(52u, 99);\n   let kitty = cat(1000u, 2);\n   assert(nyan.how_hungry == 99);"}, {"sha": "f44ee4bd502a6d9d630e9fa2646f2ea342599ca7", "filename": "src/test/run-pass/classes-simple-method.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple-method.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -25,7 +25,7 @@ fn cat(in_x : uint, in_y : int) -> cat {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n   let nyan : cat = cat(52u, 99);\n   let kitty = cat(1000u, 2);\n   assert(nyan.how_hungry == 99);"}, {"sha": "3520719d4996c473678f2060e86f4071f2d84322", "filename": "src/test/run-pass/classes-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclasses-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses-simple.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -22,7 +22,7 @@ fn cat(in_x : uint, in_y : int) -> cat {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n   let nyan : cat = cat(52u, 99);\n   let kitty = cat(1000u, 2);\n   assert(nyan.how_hungry == 99);"}, {"sha": "c3bc2f096ba784b5467fbffbab8bc714c0f2cb02", "filename": "src/test/run-pass/classes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclasses.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -50,7 +50,7 @@ fn cat(in_x : uint, in_y : int, in_name: ~str) -> cat {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n   let nyan = cat(0u, 2, ~\"nyan\");\n   nyan.eat();\n   assert(!nyan.eat());"}, {"sha": "c7c42c7fcac081dd59678d9943c6c14550d9d537", "filename": "src/test/run-pass/cleanup-copy-mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcleanup-copy-mode.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -11,7 +11,7 @@\n // xfail-win32\n fn adder(+x: @int, +y: @int) -> int { return *x + *y; }\n fn failer() -> @int { die!(); }\n-fn main() {\n+pub fn main() {\n     assert(result::is_err(&task::try(|| {\n         adder(@2, failer()); ()\n     })));"}, {"sha": "09b57ebd6177c75173eab16c504d01e7318aaefa", "filename": "src/test/run-pass/clone-with-exterior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclone-with-exterior.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -17,7 +17,7 @@ fn f(x : @{a:int, b:int}) {\n     assert (x.b == 12);\n }\n \n-fn main() {\n+pub fn main() {\n     let z : @{a:int, b:int} = @{ a : 10, b : 12};\n     let p = task::_spawn(bind f(z));\n     task::join_id(p);"}, {"sha": "d218519a4f3e55544a0316fce0dafcf44939ad2e", "filename": "src/test/run-pass/close-over-big-then-small-data.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclose-over-big-then-small-data.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -20,7 +20,7 @@ fn f<A:Copy &static>(a: A, b: u16) -> fn@() -> (A, u16) {\n     fn@() -> (A, u16) { (a, b) }\n }\n \n-fn main() {\n+pub fn main() {\n     let (a, b) = f(22_u64, 44u16)();\n     debug!(\"a=%? b=%?\", a, b);\n     assert a == 22u64;"}, {"sha": "99c8fd6e2d3011a5ca7a6ef5adef49bb61ebf0dd", "filename": "src/test/run-pass/closure-inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclosure-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-inference.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -15,7 +15,7 @@ fn foo(i: int) -> int { i + 1 }\n \n fn apply<A>(f: fn(A) -> A, v: A) -> A { f(v) }\n \n-fn main() {\n+pub fn main() {\n     let f = {|i| foo(i)};\n     assert apply(f, 2) == 3;\n }"}, {"sha": "ed86326cb3865120cca3e389d2d9eb374d7be1ea", "filename": "src/test/run-pass/closure-inference2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fclosure-inference2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@\n \n // Test a rather underspecified example:\n \n-fn main() {\n+pub fn main() {\n     let f = {|i| i};\n     assert f(2) == 2;\n     assert f(5) == 5;"}, {"sha": "37770f4d59ba5009863599986d32348ebf22c345", "filename": "src/test/run-pass/coerce-reborrow-imm-ptr-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-arg.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,4 +14,4 @@ fn negate_const(y: &const int) -> int {\n     negate(y)\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "268e540c10e33a176e2625b7adf4b6eb430f4c92", "filename": "src/test/run-pass/coerce-reborrow-imm-ptr-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-ptr-rcvr.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@ fn foo(speaker: &const SpeechMaker) -> uint {\n     speaker.how_many() + 33\n }\n \n-fn main() {\n+pub fn main() {\n     let mut lincoln = SpeechMaker {speeches: 22};\n     assert foo(&const lincoln) == 55;\n }"}, {"sha": "cc93aba46f447fdf2dd5f206f511f42ca2766f44", "filename": "src/test/run-pass/coerce-reborrow-imm-vec-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-arg.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -16,4 +16,4 @@ fn sum_const(y: &[const int]) -> int {\n     sum(y)\n }\n \n-fn main() {}\n\\ No newline at end of file\n+pub fn main() {}\n\\ No newline at end of file"}, {"sha": "5e93c34d197d5a6c52026bfef54600cde3e0b4d0", "filename": "src/test/run-pass/coerce-reborrow-imm-vec-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-imm-vec-rcvr.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@ fn bip(v: &[uint]) -> ~[uint] {\n     v.to_vec()\n }\n \n-fn main() {\n+pub fn main() {\n     let mut the_vec = ~[1, 2, 3, 100];\n     assert the_vec == foo(the_vec);\n     assert the_vec == bar(the_vec);"}, {"sha": "f8650c856c69dc56cad5a2de580b7f639bca0ef0", "filename": "src/test/run-pass/coerce-reborrow-mut-ptr-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-ptr-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-ptr-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-ptr-arg.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -16,7 +16,7 @@ fn give_a_few_speeches(speaker: &mut SpeechMaker) {\n     talk(speaker);\n }\n \n-fn main() {\n+pub fn main() {\n     let mut lincoln = SpeechMaker {speeches: 22};\n     give_a_few_speeches(&mut lincoln);\n }"}, {"sha": "a2ba4ddb827ba7ed3a664dae73e9f4856b04531a", "filename": "src/test/run-pass/coerce-reborrow-mut-ptr-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-ptr-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-ptr-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-ptr-rcvr.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,7 +18,7 @@ fn give_a_few_speeches(speaker: &mut SpeechMaker) {\n     speaker.talk();\n }\n \n-fn main() {\n+pub fn main() {\n     let mut lincoln = SpeechMaker {speeches: 22};\n     give_a_few_speeches(&mut lincoln);\n }"}, {"sha": "6346c6588f952468ddc1529ca8ae2c2ab9a3e5f6", "filename": "src/test/run-pass/coerce-reborrow-mut-vec-arg.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-arg.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@ fn bar(v: &[mut uint]) {\n     vec::reverse(v);\n }\n \n-fn main() {\n+pub fn main() {\n     let mut the_vec = ~[1, 2, 3, 100];\n     bar(the_vec);\n     assert the_vec == ~[100, 3, 2, 1];"}, {"sha": "c944444b56e0b5c9d52a363786c9e8bee7ba61a6", "filename": "src/test/run-pass/coerce-reborrow-mut-vec-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoerce-reborrow-mut-vec-rcvr.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,7 +14,7 @@ fn bar(v: &[mut uint]) {\n     v.reverse();\n }\n \n-fn main() {\n+pub fn main() {\n     let mut the_vec = ~[1, 2, 3, 100];\n     bar(the_vec);\n     assert the_vec == ~[100, 3, 2, 1];"}, {"sha": "7435096c27535320eb5341742ecfca59631132c6", "filename": "src/test/run-pass/coherence-copy-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoherence-copy-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoherence-copy-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-copy-bound.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -9,5 +9,5 @@ struct S {\n \n impl S : X {}\n \n-fn main(){}\n+pub fn main(){}\n "}, {"sha": "561187d1934f6146e665fd8c120b8ec83e367e6b", "filename": "src/test/run-pass/coherence-impl-in-fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcoherence-impl-in-fn.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     enum x { foo }\n     impl x : ::core::cmp::Eq {\n         pure fn eq(&self, other: &x) -> bool {"}, {"sha": "1af0bb003f2bbcf83f6fe51b30f867a1cd51f09b", "filename": "src/test/run-pass/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomm.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -11,7 +11,7 @@\n \n use core::pipes::*;\n \n-fn main() {\n+pub fn main() {\n     let (p, ch) = stream();\n     let t = task::spawn(|| child(&ch) );\n     let y = p.recv();"}, {"sha": "fd5079b8f5458f7e5f51fbcd24b8fd2fb41bc31b", "filename": "src/test/run-pass/common-fields-trivial.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcommon-fields-trivial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcommon-fields-trivial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommon-fields-trivial.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,7 +18,7 @@ enum Foo {\n     Baz(int)\n }\n \n-fn main() {\n+pub fn main() {\n     let x = Bar(3);\n }\n "}, {"sha": "e73e1e9755517491e71ded6b9880e2e9b19cf878", "filename": "src/test/run-pass/compare-generic-enums.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcompare-generic-enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcompare-generic-enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcompare-generic-enums.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,7 +14,7 @@ fn cmp(x: Option<an_int>, y: Option<int>) -> bool {\n     x == y\n }\n \n-fn main() {\n+pub fn main() {\n     assert !cmp(Some(3), None);\n     assert !cmp(Some(3), Some(4));\n     assert cmp(Some(3), Some(3));"}, {"sha": "de60a56ba4aee2373a04ea115f5002a29d4d362f", "filename": "src/test/run-pass/complex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcomplex.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -35,7 +35,7 @@ fn foo(x: int) -> int {\n     return 0;\n }\n \n-fn main() {\n+pub fn main() {\n     let x: int = 2 + 2;\n     log(debug, x);\n     debug!(\"hello, world\");"}, {"sha": "a47e9d9ea8117db434974f7a7f7447461bb0fd57", "filename": "src/test/run-pass/conditional-compile-arch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile-arch.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n #[cfg(target_arch = \"x86\")]\n-fn main() { }\n+pub fn main() { }\n \n #[cfg(target_arch = \"x86_64\")]\n-fn main() { }\n+pub fn main() { }"}, {"sha": "33b5d275a45d69ef511f6a6f68ace5e711bd7757", "filename": "src/test/run-pass/conditional-compile.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconditional-compile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconditional-compile.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -81,9 +81,9 @@ mod m {\n // Since the bogus configuration isn't defined main will just be\n // parsed, but nothing further will be done with it\n #[cfg(bogus)]\n-fn main() { die!() }\n+pub fn main() { die!() }\n \n-fn main() {\n+pub fn main() {\n     // Exercise some of the configured items in ways that wouldn't be possible\n     // if they had the bogus definition\n     assert (b);"}, {"sha": "1a41efd41d1f3e2bfc3c083b828a5b390eba76bd", "filename": "src/test/run-pass/const-big-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-big-enum.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -16,7 +16,7 @@ enum Foo {\n \n const X: Foo = Baz;\n \n-fn main() {\n+pub fn main() {\n     match X {\n         Baz => {}\n         _ => die!()"}, {"sha": "2320a5b1aa389eb89377bf53c10a49cabbf69a6e", "filename": "src/test/run-pass/const-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-bound.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -16,7 +16,7 @@ fn foo<T: Copy Const>(x: T) -> T { x }\n \n struct F { field: int }\n \n-fn main() {\n+pub fn main() {\n     foo(1);\n     foo(~\"hi\");\n     foo(~[1, 2, 3]);"}, {"sha": "b3498b4dc58b3380e7da6e4e1cd1686949a2ba41", "filename": "src/test/run-pass/const-const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-const.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -11,6 +11,6 @@\n const a: int = 1;\n const b: int = a + 2;\n \n-fn main() {\n+pub fn main() {\n     assert b == 3;\n }\n\\ No newline at end of file"}, {"sha": "512ecc6d351b253357b8e1ef6c38f4ef0bae1813", "filename": "src/test/run-pass/const-contents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-contents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-contents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-contents.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -17,7 +17,7 @@ const not : int = !0;\n const notb : bool = !true;\n const neg : int = -(1);\n \n-fn main() {\n+pub fn main() {\n     assert(lsl == 4);\n     assert(add == 3);\n     assert(addf == 3.0f);"}, {"sha": "6751a0787e4adbd3123ccef35f4c22699aca5004", "filename": "src/test/run-pass/const-enum-byref-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref-self.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -20,6 +20,6 @@ impl E {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     C.method()\n }"}, {"sha": "f3ea9e08343ef2f8aef57870663ef3b2821866f6", "filename": "src/test/run-pass/const-enum-byref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-enum-byref.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,6 +18,6 @@ fn f(a: &E) {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     f(&C)\n }"}, {"sha": "4d7dc6bac9dbd326bc0086fc19ad6305231ac7a5", "filename": "src/test/run-pass/const-extern-function.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-extern-function.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -17,7 +17,7 @@ struct S {\n     f: *u8\n }\n \n-fn main() {\n+pub fn main() {\n     assert foopy == f;\n     assert f == s.f;\n }\n\\ No newline at end of file"}, {"sha": "a417ad3ca6e238aa633395f0181c463d72474dad", "filename": "src/test/run-pass/const-fields-and-indexing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fields-and-indexing.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -25,7 +25,7 @@ const k : K = K {a: 10, b: 20, c: D {d: 30,\n                                      e: 40}};\n const m : int = k.c.e;\n \n-fn main() {\n+pub fn main() {\n     io::println(fmt!(\"%?\", p));\n     io::println(fmt!(\"%?\", q));\n     io::println(fmt!(\"%?\", t));"}, {"sha": "17c66b354a1bc38dad32038e70a2fcbb7dc72a4d", "filename": "src/test/run-pass/const-fn-val.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-fn-val.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -16,6 +16,6 @@ struct Bar { f: &fn() -> int }\n \n const b : Bar = Bar { f: foo };\n \n-fn main() {\n+pub fn main() {\n     assert (b.f)() == 0xca7f000d;\n }\n\\ No newline at end of file"}, {"sha": "44917e23293b8d2e214ab02787b7fdf391da8d2b", "filename": "src/test/run-pass/const-negative.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-negative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-negative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-negative.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,6 +12,6 @@\n \n const toplevel_mod: int = -1;\n \n-fn main() {\n+pub fn main() {\n     assert toplevel_mod == -1;\n }\n\\ No newline at end of file"}, {"sha": "5e1bc7561d9ca6556274b2fbed63350cc7524d8c", "filename": "src/test/run-pass/const-newtype-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-newtype-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-newtype-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-newtype-enum.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,7 +12,7 @@ enum Foo = u32;\n \n const X: Foo = Foo(17);\n \n-fn main() {\n+pub fn main() {\n     assert(*X == 17);\n     assert(*Y == 23);\n }"}, {"sha": "5a266e4c15aadb096096c0c5dccbdce68a567501", "filename": "src/test/run-pass/const-nullary-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-enum.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -16,7 +16,7 @@ enum Foo {\n \n const X: Foo = Bar;\n \n-fn main() {\n+pub fn main() {\n     match X {\n         Bar => {}\n         Baz | Boo => die!()"}, {"sha": "2709d0d8a5690fc94a487e7e7cb3466adda6c862", "filename": "src/test/run-pass/const-nullary-univariant-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-nullary-univariant-enum.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,7 +14,7 @@ enum Foo {\n \n const X: Foo = Bar;\n \n-fn main() {\n+pub fn main() {\n     assert((X as uint) == 0xDEADBEE);\n     assert((Y as uint) == 0xDEADBEE);\n }"}, {"sha": "04d1aa114788fde198ac22c321959941c541a159", "filename": "src/test/run-pass/const-rec-and-tup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-rec-and-tup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-rec-and-tup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-rec-and-tup.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,7 +18,7 @@ const y : AnotherPair = AnotherPair{ x: (0xf0f0f0f0_f0f0f0f0,\n                            y: Pair { a: 3.14159265358979323846,\n                                      b: 2.7182818284590452354 }};\n \n-fn main() {\n+pub fn main() {\n     let (p, _) = y.x;\n     assert p == 0xf0f0f0f0_f0f0f0f0;\n     io::println(fmt!(\"0x%x\", p as uint));"}, {"sha": "ce626cf612f940bfc465b96e0d6483b8277016d0", "filename": "src/test/run-pass/const-region-ptrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-region-ptrs.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -15,7 +15,7 @@ const x: &int = &10;\n \n const y: &Pair = &Pair {a: 15, b: x};\n \n-fn main() {\n+pub fn main() {\n     io::println(fmt!(\"x = %?\", *x));\n     io::println(fmt!(\"y = {a: %?, b: %?}\", y.a, *(y.b)));\n     assert *x == 10;"}, {"sha": "58c09ccce923d3e45159a903e5a5b5f5767f1340", "filename": "src/test/run-pass/const-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-struct.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -24,7 +24,7 @@ const x : foo = foo { a:1, b:2, c: 3 };\n const y : foo = foo { b:2, c:3, a: 1 };\n const z : &foo = &foo { a: 10, b: 22, c: 12 };\n \n-fn main() {\n+pub fn main() {\n     assert x.b == 2;\n     assert x == y;\n     assert z.b == 22;"}, {"sha": "9f8618d82ca3ae820e1d47d8f7a91b0f763f4a5e", "filename": "src/test/run-pass/const-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-tuple-struct.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,7 +12,7 @@ struct Bar(int, int);\n \n const X: Bar = Bar(1, 2);\n \n-fn main() {\n+pub fn main() {\n     match X {\n         Bar(x, y) => {\n             assert x == 1;"}, {"sha": "bc996314e03353f13b07b1d20d890e03edff4c2d", "filename": "src/test/run-pass/const-unit-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-unit-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-unit-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-unit-struct.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,7 +12,7 @@ struct Foo;\n \n const X: Foo = Foo;\n \n-fn main() {\n+pub fn main() {\n     match X {\n         Foo => {}\n     }"}, {"sha": "a0ac67288cfc8077a4c44f1c34f043532380dc79", "filename": "src/test/run-pass/const-vecs-and-slices.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst-vecs-and-slices.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -11,7 +11,7 @@\n const x : [int * 4] = [1,2,3,4];\n const y : &[int] = &[1,2,3,4];\n \n-fn main() {\n+pub fn main() {\n     io::println(fmt!(\"%?\", x[1]));\n     io::println(fmt!(\"%?\", y[1]));\n     assert x[1] == 2;"}, {"sha": "28cca2f413b7ba32ffb5957d00e8bd0a33ac5600", "filename": "src/test/run-pass/const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconst.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,4 +12,4 @@\n \n const i: int = 10;\n \n-fn main() { log(debug, i); }\n+pub fn main() { log(debug, i); }"}, {"sha": "1356ff0a04372c7b8799953608bb28ff620be127", "filename": "src/test/run-pass/consts-in-patterns.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fconsts-in-patterns.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -11,7 +11,7 @@\n const FOO: int = 10;\n const BAR: int = 3;\n \n-fn main() {\n+pub fn main() {\n     let x: int = 3;\n     let y = match x {\n         FOO => 1,"}, {"sha": "37f605d93200238235e41f001825cf10b206ce63", "filename": "src/test/run-pass/core-export-f64-sqrt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcore-export-f64-sqrt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcore-export-f64-sqrt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-export-f64-sqrt.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@\n \n // Regression test that f64 exports things properly\n \n-fn main() {\n+pub fn main() {\n \n     let digits: uint = 10 as uint;\n "}, {"sha": "ac79a2256fd9902275ac81eb9b163cc70b08cde9", "filename": "src/test/run-pass/crate-method-reexport-grrrrrrr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrate-method-reexport-grrrrrrr.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -17,7 +17,7 @@\n \n extern mod crate_method_reexport_grrrrrrr2;\n \n-fn main() {\n+pub fn main() {\n     use crate_method_reexport_grrrrrrr2::rust::add;\n     use crate_method_reexport_grrrrrrr2::rust::cx;\n     let x = @();"}, {"sha": "4b037919154fb26fb5896ed6776955fe638238f9", "filename": "src/test/run-pass/crateresolve1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcrateresolve1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcrateresolve1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve1.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -15,6 +15,6 @@\n \n extern mod crateresolve1(vers = \"0.2\");\n \n-fn main() {\n+pub fn main() {\n     assert crateresolve1::f() == 20;\n }"}, {"sha": "dd9f60687b33acd47aaa6a77ed74d1b89735b3ec", "filename": "src/test/run-pass/crateresolve2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcrateresolve2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcrateresolve2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -28,7 +28,7 @@ mod c {\n     pub fn f() { assert crateresolve2::f() == 30; }\n }\n \n-fn main() {\n+pub fn main() {\n     a::f();\n     b::f();\n     c::f();"}, {"sha": "71f0fa8adfa94e7b267ea9d2821167a6c8c0fee6", "filename": "src/test/run-pass/crateresolve3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcrateresolve3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcrateresolve3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve3.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -25,7 +25,7 @@ mod b {\n     pub fn f() { assert crateresolve3::g() == 20; }\n }\n \n-fn main() {\n+pub fn main() {\n     a::f();\n     b::f();\n }"}, {"sha": "d6a4ab210edd7a621546ba7075db6f86791704eb", "filename": "src/test/run-pass/crateresolve5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcrateresolve5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcrateresolve5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve5.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -15,7 +15,7 @@\n extern mod cr5_1 (name = \"crateresolve5\", vers = \"0.1\");\n extern mod cr5_2 (name = \"crateresolve5\", vers = \"0.2\");\n \n-fn main() {\n+pub fn main() {\n     // Structural types can be used between two versions of the same crate\n     assert cr5_1::struct_nameval().name == cr5_2::struct_nameval().name;\n     assert cr5_1::struct_nameval().val == cr5_2::struct_nameval().val;"}, {"sha": "cabc60a00eee3fa962d9152bf967405a1b6e1de0", "filename": "src/test/run-pass/crateresolve6.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcrateresolve6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcrateresolve6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve6.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -17,7 +17,7 @@\n extern mod cr6_1 (name = \"crateresolve_calories\", vers = \"0.1\", calories=\"100\");\n extern mod cr6_2 (name = \"crateresolve_calories\", vers = \"0.1\", calories=\"200\");\n \n-fn main() {\n+pub fn main() {\n     assert cr6_1::f() == 100;\n     assert cr6_2::f() == 200;\n }"}, {"sha": "f6dccdbfd7005949bf7a6f2bde049171a793f00c", "filename": "src/test/run-pass/crateresolve7.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcrateresolve7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcrateresolve7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcrateresolve7.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -15,7 +15,7 @@\n \n extern mod crateresolve7x;\n \n-fn main() {\n+pub fn main() {\n     assert crateresolve7x::a::f() == 100;\n     assert crateresolve7x::b::f() == 200;\n }"}, {"sha": "0512b8a1267cfb99c678031178ec3cf04530c21a", "filename": "src/test/run-pass/cycle-collection.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcycle-collection.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcycle-collection.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,7 +18,7 @@ fn f() {\n     *box = cons(box);\n }\n \n-fn main() {\n+pub fn main() {\n     f();\n }\n "}, {"sha": "8eaad5c08b2a2b19b31c97b6a9ddb421cd4e9ccc", "filename": "src/test/run-pass/cycle-collection2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -13,7 +13,7 @@ struct foo { mut z : fn@() }\n fn nop() { }\n fn nop_foo(_x : @foo) { }\n \n-fn main() {\n+pub fn main() {\n     let w = @foo{ mut z: || nop() };\n     let x : fn@() = || nop_foo(w);\n     w.z = x;"}, {"sha": "b34ff10b5314387d594dad9b77dd58e551af738a", "filename": "src/test/run-pass/cycle-collection4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection4.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -13,7 +13,7 @@ struct foo { mut z : fn@() }\n fn nop() { }\n fn nop_foo(_y: ~[int], _x : @foo) { }\n \n-fn main() {\n+pub fn main() {\n     let w = @foo{ z: || nop() };\n     let x : fn@() = || nop_foo(~[], w);\n     w.z = x;"}, {"sha": "9a5d776baccd2a94133f369ed164f514669d6b9a", "filename": "src/test/run-pass/cycle-collection5.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcycle-collection5.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -15,7 +15,7 @@ fn nop_foo(_y: @int, _x : @foo) { }\n \n fn o() -> @int { @10 }\n \n-fn main() {\n+pub fn main() {\n     let w = @foo { mut z: || nop() };\n     let x : fn@() = || nop_foo(o(), w);\n     w.z = x;"}, {"sha": "eb30b36e48a3d535cd11fba6cd62f72a2cd177e3", "filename": "src/test/run-pass/dead-code-one-arm-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdead-code-one-arm-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdead-code-one-arm-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdead-code-one-arm-if.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,4 +12,4 @@\n \n \n // -*- rust -*-\n-fn main() { if 1 == 1 { return; } debug!(\"Paul is dead\"); }\n+pub fn main() { if 1 == 1 { return; } debug!(\"Paul is dead\"); }"}, {"sha": "d2d8181e114ace0e87be7be649ae5731e6cf76d5", "filename": "src/test/run-pass/deep-vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdeep-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdeep-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdeep-vector.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let _x = ~[\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"}, {"sha": "e66cf1bbea64dc3d709311d6033d05eed6ac7d68", "filename": "src/test/run-pass/deep-vector2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdeep-vector2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdeep-vector2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdeep-vector2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let x = ~[\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n         0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,"}, {"sha": "2f51ec4a7dc6f6b7f8487c3fc707cd0ab49439c1", "filename": "src/test/run-pass/deep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdeep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdeep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdeep.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -16,4 +16,4 @@ fn f(x: int) -> int {\n     if x == 1 { return 1; } else { let y: int = 1 + f(x - 1); return y; }\n }\n \n-fn main() { assert (f(5000) == 5000); }\n+pub fn main() { assert (f(5000) == 5000); }"}, {"sha": "41ab5b1d3c860651dc8ff7835737823fd3b70a24", "filename": "src/test/run-pass/default-method-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdefault-method-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdefault-method-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdefault-method-simple.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -28,7 +28,7 @@ impl A : Foo {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let a = A { x: 1 };\n     a.f();\n }"}, {"sha": "ec5cc6293e43ed7d37f6775840f61b848fae0506", "filename": "src/test/run-pass/deref-lval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,4 +10,4 @@\n \n \n \n-fn main() { let x = @mut 5; *x = 1000; log(debug, *x); }\n+pub fn main() { let x = @mut 5; *x = 1000; log(debug, *x); }"}, {"sha": "01a7792ce8847eaeba85b5bbe4301a426b6e145e", "filename": "src/test/run-pass/deref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,4 +10,4 @@\n \n \n \n-fn main() { let x: @int = @10; let y: int = *x; }\n+pub fn main() { let x: @int = @10; let y: int = *x; }"}, {"sha": "7b86a6299f6f7788783a4f7f238f563268d55933", "filename": "src/test/run-pass/deriving-enum-single-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderiving-enum-single-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderiving-enum-single-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-enum-single-variant.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -5,4 +5,4 @@ pub enum Task {\n     TaskHandle(task_id)\n }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "22c12e7f795bca0a9bbb8be6f3f4e075d1a77e67", "filename": "src/test/run-pass/deriving-via-extension-c-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderiving-via-extension-c-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderiving-via-extension-c-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-c-enum.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -15,7 +15,7 @@ enum Foo {\n     Boo\n }\n \n-fn main() {\n+pub fn main() {\n     let a = Bar;\n     let b = Bar;\n     assert a == b;"}, {"sha": "22cee722bb37ac15241cf374a29d5676bea08745", "filename": "src/test/run-pass/deriving-via-extension-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderiving-via-extension-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderiving-via-extension-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-enum.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,7 +14,7 @@ enum Foo {\n     Baz(float, float)\n }\n \n-fn main() {\n+pub fn main() {\n     let a = Bar(1, 2);\n     let b = Bar(1, 2);\n     assert a == b;"}, {"sha": "b41d41192fedb8819d9d9858b12f04738e9872fc", "filename": "src/test/run-pass/deriving-via-extension-iter-bytes-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderiving-via-extension-iter-bytes-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderiving-via-extension-iter-bytes-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-iter-bytes-enum.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -24,5 +24,5 @@ enum A {\n     E\n }\n \n-fn main(){}\n+pub fn main(){}\n "}, {"sha": "18336d74c7e1992f6680bfa2a49455299b055cf7", "filename": "src/test/run-pass/deriving-via-extension-iter-bytes-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderiving-via-extension-iter-bytes-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderiving-via-extension-iter-bytes-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-iter-bytes-struct.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -17,6 +17,6 @@ struct Foo {\n     z: int\n }\n \n-fn main() {}\n+pub fn main() {}\n \n "}, {"sha": "e2bb4c446e3f8ff83a713502076a06c14f3844f1", "filename": "src/test/run-pass/deriving-via-extension-struct-like-enum-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct-like-enum-variant.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -4,7 +4,7 @@ enum S {\n     Y\n }\n \n-fn main() {\n+pub fn main() {\n     let x = X { x: 1, y: 2 };\n     assert x == x;\n     assert !(x != x);"}, {"sha": "cdd0f5446260ed0c637b0373a2f6fb63badff8cf", "filename": "src/test/run-pass/deriving-via-extension-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-struct.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -15,7 +15,7 @@ struct Foo {\n     z: int,\n }\n \n-fn main() {\n+pub fn main() {\n     let a = Foo { x: 1, y: 2, z: 3 };\n     let b = Foo { x: 1, y: 2, z: 3 };\n     assert a == b;"}, {"sha": "5040b08d00319031573a9ff887fb0c30d3747dd4", "filename": "src/test/run-pass/deriving-via-extension-type-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderiving-via-extension-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fderiving-via-extension-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderiving-via-extension-type-params.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,7 +18,7 @@ struct Foo<T> {\n     z: int\n }\n \n-fn main() {\n+pub fn main() {\n     let a = Foo { x: 1, y: 2.0, z: 3 };\n     let b = Foo { x: 1, y: 2.0, z: 3 };\n     assert a == b;"}, {"sha": "1174cb5df9265dc33dcad4f1829af9e32c90ff74", "filename": "src/test/run-pass/die-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdie-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdie-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdie-macro.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -6,6 +6,6 @@ fn f() {\n     let x: int = die!();\n }\n \n-fn main() {\n+pub fn main() {\n \n }"}, {"sha": "dfe8c3f9730080a6475060f3b8bfd217200c922f", "filename": "src/test/run-pass/div-mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdiv-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdiv-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdiv-mod.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,7 +12,7 @@\n \n \n // -*- rust -*-\n-fn main() {\n+pub fn main() {\n     let x: int = 15;\n     let y: int = 5;\n     assert (x / 5 == 3);"}, {"sha": "2a7091cb16305e3be0ecddcfe23b4c8a61f47db4", "filename": "src/test/run-pass/do-for-empty-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdo-for-empty-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdo-for-empty-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-for-empty-args.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,7 +14,7 @@\n fn f(f: fn() -> bool) {\n }\n \n-fn main() {\n+pub fn main() {\n     do f() || { true }\n     do f() { true }\n     do f || { true }"}, {"sha": "5c5cec1fac1d8b9d1915b7ecb2ecc322663f9baa", "filename": "src/test/run-pass/do-for-no-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdo-for-no-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdo-for-no-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-for-no-args.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,7 +14,7 @@ fn f(f: fn@() -> bool) { }\n \n fn d(f: fn@()) { }\n \n-fn main() {\n+pub fn main() {\n     for f { }\n     do d { }\n }\n\\ No newline at end of file"}, {"sha": "5cad9235af843173edc7a9e351617ab004c724cd", "filename": "src/test/run-pass/do-pure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdo-pure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdo-pure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-pure.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -16,5 +16,5 @@ pure fn g() {\n     do f { }\n }\n \n-fn main() {\n+pub fn main() {\n }\n\\ No newline at end of file"}, {"sha": "c42a0dc5739261aad8bf078d4a39c9a21bf4e3ee", "filename": "src/test/run-pass/do-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdo-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdo-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo-stack.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,6 +10,6 @@\n \n fn f(f: fn&(int)) { f(10) }\n \n-fn main() {\n+pub fn main() {\n     do f() |i| { assert i == 10 }\n }"}, {"sha": "f6b00ce78813ad8d9a5477293c09bbae6a62ed68", "filename": "src/test/run-pass/do1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdo1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdo1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo1.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,6 +10,6 @@\n \n fn f(f: fn@(int)) { f(10) }\n \n-fn main() {\n+pub fn main() {\n     do f() |i| { assert i == 10 }\n }"}, {"sha": "1f0d82ec7b5f2371d529643775cb1088ea4abafc", "filename": "src/test/run-pass/do2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdo2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdo2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,6 +10,6 @@\n \n fn f(f: fn@(int) -> int) -> int { f(10) }\n \n-fn main() {\n+pub fn main() {\n     assert do f() |i| { i } == 10;\n }"}, {"sha": "f7660e35f598bd843156882371aa903144c47ff0", "filename": "src/test/run-pass/do3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdo3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdo3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdo3.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,6 +10,6 @@\n \n fn f(f: fn@(int) -> int) -> int { f(10) }\n \n-fn main() {\n+pub fn main() {\n     assert do f |i| { i } == 10;\n }"}, {"sha": "2dc246d6c33f82cf8142a88edc74f34e464b15a3", "filename": "src/test/run-pass/double-unbox.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdouble-unbox.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -13,4 +13,4 @@ type quux = {bar: int};\n fn g(i: int) { }\n fn f(foo: @@quux) { g(foo.bar); }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "246306e4c47a14af83151ed436a76b5803c63b20", "filename": "src/test/run-pass/drop-on-empty-block-exit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-on-empty-block-exit.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,4 +12,4 @@\n \n enum t { foo(@int), }\n \n-fn main() { let tt = foo(@10); match tt { foo(z) => { } } }\n+pub fn main() { let tt = foo(@10); match tt { foo(z) => { } } }"}, {"sha": "932da027b70249141688d1cadbb4fb86820f1ae8", "filename": "src/test/run-pass/drop-on-ret.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdrop-on-ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdrop-on-ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-on-ret.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,4 +14,4 @@\n // -*- rust -*-\n fn f() -> int { if true { let s: ~str = ~\"should not leak\"; return 1; } return 0; }\n \n-fn main() { f(); }\n+pub fn main() { f(); }"}, {"sha": "256461b61bd050e2672b6b8a5772875bd9997295", "filename": "src/test/run-pass/drop-trait-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait-generic.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,7 +18,7 @@ impl<T> S<T> : ::core::ops::Drop {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = S { x: 1 };\n }\n "}, {"sha": "084bff6374380c980126fc04748b4f69b6c96b02", "filename": "src/test/run-pass/drop-trait.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdrop-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdrop-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdrop-trait.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,7 +18,7 @@ impl Foo : Drop {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let x: Foo = Foo { x: 3 };\n }\n "}, {"sha": "3bfd4a7dc46bbd98dd399b7d5970279888ba14ae", "filename": "src/test/run-pass/duplicate-use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fduplicate-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fduplicate-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fduplicate-use.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,6 +14,6 @@ extern mod std;\n use list = std::map::chained;\n use std::list;\n \n-fn main() {\n+pub fn main() {\n     let _x: list::T<int, int> = list::mk();\n }"}, {"sha": "e061464c7b2b68f7efe9cde0c1c2f696ad5f9422", "filename": "src/test/run-pass/dvec-index-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdvec-index-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdvec-index-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdvec-index-op.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let x = dvec::DVec();\n     x.push(1);\n     io::println(fmt!(\"%d\", x[0]));"}, {"sha": "a0c6b666554a39139f1adfd8e5eb3b3cdea07ece", "filename": "src/test/run-pass/dvec-test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdvec-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fdvec-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdvec-test.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let d = dvec::DVec();\n     d.push(3);\n     d.push(4);"}, {"sha": "97e873e9aff953cb41b110a3ba9cafd236317c42", "filename": "src/test/run-pass/early-ret-binop-add.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fearly-ret-binop-add.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -9,4 +9,4 @@\n // except according to those terms.\n \n fn wsucc(n: int) -> int { 0 + { return n + 1 } }\n-fn main() { }\n+pub fn main() { }"}, {"sha": "d71edb660985fc73a15642d219a3f836135833ba", "filename": "src/test/run-pass/early-vtbl-resolution.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fearly-vtbl-resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fearly-vtbl-resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fearly-vtbl-resolution.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -19,7 +19,7 @@ fn foo_func<A, B: thing<A>>(x: B) -> Option<A> { x.foo() }\n \n struct A { a: int }\n \n-fn main() {\n+pub fn main() {\n \n     for iter::eachi(&(Some(A {a: 0}))) |i, a| { \n         debug!(\"%u %d\", i, a.a);"}, {"sha": "6fc2b7d2a1be8065bacaf3fcb4d59b23388949bb", "filename": "src/test/run-pass/else-if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Felse-if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Felse-if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Felse-if.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,7 +10,7 @@\n \n \n \n-fn main() {\n+pub fn main() {\n     if 1 == 2 {\n         assert (false);\n     } else if 2 == 3 {"}, {"sha": "58db60dd723d78d821416ac13db18bd1200da6d2", "filename": "src/test/run-pass/empty-mutable-vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-mutable-vec.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -10,4 +10,4 @@\n \n \n \n-fn main() { let v: ~[mut int] = ~[mut]; }\n+pub fn main() { let v: ~[mut int] = ~[mut]; }"}, {"sha": "0dd6c2773ce9686dfdbb67255c1190266fd4a2ce", "filename": "src/test/run-pass/empty-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fempty-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fempty-tag.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -21,7 +21,7 @@ fn wrapper3(i: chan) {\n     assert i == chan_t;\n }\n \n-fn main() {\n+pub fn main() {\n     let wrapped = {||wrapper3(chan_t)};\n     wrapped();\n }"}, {"sha": "19045500cf279c3528af2b0299baaab547c8585c", "filename": "src/test/run-pass/enum-disr-val-pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-disr-val-pretty.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,7 +12,7 @@\n \n enum color { red = 1, green, blue, imaginary = -1, }\n \n-fn main() {\n+pub fn main() {\n     test_color(red, 1, ~\"red\");\n     test_color(green, 2, ~\"green\");\n     test_color(blue, 3, ~\"blue\");"}, {"sha": "c3beebdb8ae858afc68ba31efe44dac991f75865", "filename": "src/test/run-pass/enum-export-inheritance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fenum-export-inheritance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fenum-export-inheritance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-export-inheritance.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -16,7 +16,7 @@ mod a {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = a::Bar;\n }\n "}, {"sha": "a8a0a72dd3cbd185b355f86a7eeb20ebd09b6a00", "filename": "src/test/run-pass/enum-variants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fenum-variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fenum-variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenum-variants.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -3,7 +3,7 @@ enum Animal {\n     Cat { name: ~str, weight: float }\n }\n \n-fn main() {\n+pub fn main() {\n     let mut a: Animal = Dog(~\"Cocoa\", 37.2);\n     a = Cat{ name: ~\"Spotty\", weight: 2.7 };\n     // permuting the fields should work too"}, {"sha": "5668c18e95b82fc5de49592157828ef6069d8ed4", "filename": "src/test/run-pass/estr-shared.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Festr-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Festr-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-shared.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -9,6 +9,6 @@\n // except according to those terms.\n \n // xfail-test\n-fn main() {\n+pub fn main() {\n     let x : @str = @\"hello\";\n }"}, {"sha": "ca6928556fa8be2ccb39541c42042474f75b2917", "filename": "src/test/run-pass/estr-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Festr-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Festr-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-slice.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-fn main() {\n+pub fn main() {\n     let x = &\"hello\";\n     let v = &\"hello\";\n     let mut y : &str = &\"there\";"}, {"sha": "c6b8cc9fab9c20bfe1023daa05cbfc9026cc351f", "filename": "src/test/run-pass/estr-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Festr-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Festr-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Festr-uniq.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let x : ~str = ~\"hello\";\n     let _y : ~str = ~\"there\";\n     let mut z = ~\"thing\";"}, {"sha": "5357bcc6ab0b35be8cc0f2e38a25abedd5ca8690", "filename": "src/test/run-pass/evec-internal-boxes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-internal-boxes.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let x : [@int * 5] = [@1,@2,@3,@4,@5];\n     let _y : [@int * 5] = [@1,@2,@3,@4,@5];\n     let mut z = [@1,@2,@3,@4,@5];"}, {"sha": "a97eacfee8815d7473d6e05be6c7e94fbd235514", "filename": "src/test/run-pass/evec-internal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fevec-internal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fevec-internal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-internal.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -13,7 +13,7 @@\n \n // Doesn't work; needs a design decision.\n \n-fn main() {\n+pub fn main() {\n     let x : [int * 5] = [1,2,3,4,5];\n     let _y : [int * 5] = [1,2,3,4,5];\n     let mut z = [1,2,3,4,5];"}, {"sha": "e8e4f64a9cd66a00c17aeff1fa0e5f1aee19d5a7", "filename": "src/test/run-pass/evec-slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fevec-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fevec-slice.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let x : &[int] = &[1,2,3,4,5];\n     let mut z = &[1,2,3,4,5];\n     z = x;"}, {"sha": "67cc820ac5d6721003ec527880bdd202fcae6be0", "filename": "src/test/run-pass/exec-env.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexec-env.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexec-env.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexec-env.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -11,6 +11,6 @@\n // xfail-fast (exec-env not supported in fast mode)\n // exec-env:TEST_EXEC_ENV=22\n \n-fn main() {\n+pub fn main() {\n     assert os::getenv(~\"TEST_EXEC_ENV\") == Some(~\"22\");\n }"}, {"sha": "45cfee76fb82eedea0711b0426dd9910331650e6", "filename": "src/test/run-pass/explicit-i-suffix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-i-suffix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-i-suffix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-i-suffix.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn main() {\n+pub fn main() {\n     let x: int = 8i;\n     let y = 9i;\n     x + y;"}, {"sha": "4c12b6ad47c2f1902d16e1d2e44a0b75fac9c766", "filename": "src/test/run-pass/explicit-self-closures.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-closures.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -26,4 +26,4 @@ impl Box {\n     }\n }\n \n-fn main() {}\n+pub fn main() {}"}, {"sha": "d03893367b4c5cc15b8de135de33ee894d77303a", "filename": "src/test/run-pass/explicit-self-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-generic.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -36,7 +36,7 @@ impl<K,V> LinearMap<K,V> {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let mut m = ~linear_map::<(),()>();\n     assert m.len() == 0;\n }"}, {"sha": "8d081c16830e49cdb8d931a982de3956e0f4889a", "filename": "src/test/run-pass/explicit-self-objects-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-box.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -22,7 +22,7 @@ impl S : Foo {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = @S { x: 3 };\n     let y = x as @Foo;\n     y.f();"}, {"sha": "e625833862817ceba7aee72309750543d97e90cf", "filename": "src/test/run-pass/explicit-self-objects-ext-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-1.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -32,7 +32,7 @@ impl S: Reader {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = S { x: 1, y: 2 };\n     let x = x as @Reader;\n     x.read_bytes(0);"}, {"sha": "e625833862817ceba7aee72309750543d97e90cf", "filename": "src/test/run-pass/explicit-self-objects-ext-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -32,7 +32,7 @@ impl S: Reader {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = S { x: 1, y: 2 };\n     let x = x as @Reader;\n     x.read_bytes(0);"}, {"sha": "a517bbd9d061448593804aea77a42d4cb3498db7", "filename": "src/test/run-pass/explicit-self-objects-ext-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-3.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -32,7 +32,7 @@ impl S: Reader {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = S { x: 1, y: 2 };\n     let x = x as @Reader;\n     x.read_bytes(0);"}, {"sha": "a5c4536c1e2030163de79d407fd9461ab1e7edc4", "filename": "src/test/run-pass/explicit-self-objects-ext-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-ext-4.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -32,7 +32,7 @@ impl S: Reader {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = S { x: 1, y: 2 };\n     let x = x as @Reader;\n     x.read_bytes(0);"}, {"sha": "79d5d7791f420009fa118ba91f636ccc7fa08fce", "filename": "src/test/run-pass/explicit-self-objects-simple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-simple.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -22,7 +22,7 @@ impl S : Foo {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = @S { x: 3 };\n     let y = x as @Foo;\n     y.f();"}, {"sha": "bf1776e598e131b983a0f613f03116e49839a1de", "filename": "src/test/run-pass/explicit-self-objects-uniq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self-objects-uniq.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -22,7 +22,7 @@ impl S : Foo {\n     }\n }\n \n-fn main() {\n+pub fn main() {\n     let x = ~S { x: 3 };\n     let y = x as ~Foo;\n     y.f();"}, {"sha": "ebffa131fb6aeed4868cb033f4082965f6c2a86f", "filename": "src/test/run-pass/explicit-self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit-self.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -65,7 +65,7 @@ impl thing {\n trait Nus { fn f(&self); }\n impl thing: Nus { fn f(&self) {} }\n \n-fn main() {\n+pub fn main() {\n \n     let x = @thing(A {mut a: @10});\n     assert x.foo() == 10;"}, {"sha": "e217e6ebd411df4b8783c83a91b31ff0a392f667", "filename": "src/test/run-pass/explicit_self_xcrate_exe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit_self_xcrate_exe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexplicit_self_xcrate_exe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexplicit_self_xcrate_exe.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -14,7 +14,7 @@\n extern mod explicit_self_xcrate;\n use explicit_self_xcrate::{Foo, Bar};\n \n-fn main() {\n+pub fn main() {\n     let x = Bar { x: ~\"hello\" };\n     x.f();\n }"}, {"sha": "209dbb3741a0601627698db8fa485515dde05449", "filename": "src/test/run-pass/export-abstract-tag.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-abstract-tag.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -17,4 +17,4 @@ mod foo {\n     pub fn f() -> t { return t1; }\n }\n \n-fn main() { let v: foo::t = foo::f(); }\n+pub fn main() { let v: foo::t = foo::f(); }"}, {"sha": "ae17d6ca8b3d54ef0b845e8d6456da96bf0a8b1a", "filename": "src/test/run-pass/export-glob-imports-target.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -25,4 +25,4 @@ mod foo {\n     }\n }\n \n-fn main() { }\n+pub fn main() { }"}, {"sha": "396e4e6b250632dc0044be5d077ab60e52784f4f", "filename": "src/test/run-pass/export-multi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexport-multi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexport-multi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-multi.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,4 +18,4 @@ mod m {\n     pub fn g() { }\n }\n \n-fn main() { f(); g(); m::f(); m::g(); }\n+pub fn main() { f(); g(); m::f(); m::g(); }"}, {"sha": "9889b559bcab41ecc55fcbee2b651f97aaba036b", "filename": "src/test/run-pass/export-non-interference2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -16,4 +16,4 @@ mod foo {\n     pub fn x() { debug!(\"x\"); }\n }\n \n-fn main() { self::foo::bar::y(); }\n+pub fn main() { self::foo::bar::y(); }"}, {"sha": "36c9fe6cf42aae5bae64071245d49a99d8ec4e2f", "filename": "src/test/run-pass/export-non-interference3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-non-interference3.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,4 +18,4 @@ pub mod bar {\n     pub fn x() { debug!(\"x\"); }\n }\n \n-fn main() { foo::x(); }\n+pub fn main() { foo::x(); }"}, {"sha": "47ac4bd4a9aceedc9860407078e311fef07fdee9", "filename": "src/test/run-pass/export-tag-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-tag-variant.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -12,4 +12,4 @@ mod foo {\n     pub enum t { t1, }\n }\n \n-fn main() { let v = foo::t1; }\n+pub fn main() { let v = foo::t1; }"}, {"sha": "16f2467422683e23b2ac187104106e909817df2d", "filename": "src/test/run-pass/export-unexported-dep.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-unexported-dep.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -27,4 +27,4 @@ mod foo {\n     pub fn g(v: t) { assert (v == t1); }\n }\n \n-fn main() { foo::g(foo::f()); }\n+pub fn main() { foo::g(foo::f()); }"}, {"sha": "fd1a5ad496928c61c1c8a49e031ac2e4456bf5a7", "filename": "src/test/run-pass/expr-alt-box.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-box.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -25,4 +25,4 @@ fn test_str() {\n     assert (res == ~\"happy\");\n }\n \n-fn main() { test_box(); test_str(); }\n+pub fn main() { test_box(); test_str(); }"}, {"sha": "e806907129f1af3032dc0c62981e64b088355501", "filename": "src/test/run-pass/expr-alt-fail-all.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-fail-all.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-fail-all.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-fail-all.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -13,7 +13,7 @@\n \n // When all branches of an match expression result in fail, the entire\n // match expression results in fail.\n-fn main() {\n+pub fn main() {\n     let x =\n         match true {\n           true => { 10 }"}, {"sha": "f26f1f1e6f75370376e218229cca329b2e0601f7", "filename": "src/test/run-pass/expr-alt-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-fail.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -18,4 +18,4 @@ fn test_box() {\n     assert (r[0] == 10);\n }\n \n-fn main() { test_simple(); test_box(); }\n+pub fn main() { test_simple(); test_box(); }"}, {"sha": "ecb2bf91702e413a8309665f8b9fdccfc76a36fa", "filename": "src/test/run-pass/expr-alt-generic-box1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box1.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -24,4 +24,4 @@ fn test_box() {\n     test_generic::<bool>(@true, compare_box);\n }\n \n-fn main() { test_box(); }\n+pub fn main() { test_box(); }"}, {"sha": "6962f4b5e0f0dd235c9540cc3d718bb0e2b3d5d1", "filename": "src/test/run-pass/expr-alt-generic-box2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-box2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -25,4 +25,4 @@ fn test_vec() {\n     test_generic::<@int>(@1, compare_box);\n }\n \n-fn main() { test_vec(); }\n+pub fn main() { test_vec(); }"}, {"sha": "b0a5af1cd538b6fe9b223e083e34a69efd90d1f6", "filename": "src/test/run-pass/expr-alt-generic-unique1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique1.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -26,4 +26,4 @@ fn test_box() {\n     test_generic::<bool>(~true, compare_box);\n }\n \n-fn main() { test_box(); }\n+pub fn main() { test_box(); }"}, {"sha": "02bc248fc4fff73db7117d13686caa633bdb0514", "filename": "src/test/run-pass/expr-alt-generic-unique2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic-unique2.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -28,4 +28,4 @@ fn test_vec() {\n     test_generic::<~int>(~1, compare_box);\n }\n \n-fn main() { test_vec(); }\n+pub fn main() { test_vec(); }"}, {"sha": "a3281ba57f1c2012b4a10af60a69f82898812bdc", "filename": "src/test/run-pass/expr-alt-generic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-generic.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -33,4 +33,4 @@ fn test_rec() {\n     test_generic::<Pair>(Pair {a: 1, b: 2}, compare_rec);\n }\n \n-fn main() { test_bool(); test_rec(); }\n+pub fn main() { test_bool(); test_rec(); }"}, {"sha": "bcf07586f244a0f39420666303781de23e4ea9f2", "filename": "src/test/run-pass/expr-alt-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-struct.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -35,4 +35,4 @@ fn test_tag() {\n     assert (rs == happy);\n }\n \n-fn main() { test_rec(); test_tag(); }\n+pub fn main() { test_rec(); test_tag(); }"}, {"sha": "1ce8e2d7624b6e5371b5d9f72e5d9f2d89aaae6c", "filename": "src/test/run-pass/expr-alt-unique.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-unique.rs", "raw_url": "https://github.com/rust-lang/rust/raw/89c8ef792f7e7641abfac421ba1e8f90384883ec/src%2Ftest%2Frun-pass%2Fexpr-alt-unique.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexpr-alt-unique.rs?ref=89c8ef792f7e7641abfac421ba1e8f90384883ec", "patch": "@@ -19,4 +19,4 @@ fn test_box() {\n     assert (*res == 100);\n }\n \n-fn main() { test_box(); }\n+pub fn main() { test_box(); }"}]}