{"sha": "6d1b4ffa2e18838a6d025b9e38f95dfd4864afa7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMWI0ZmZhMmUxODgzOGE2ZDAyNWI5ZTM4Zjk1ZGZkNDg2NGFmYTc=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-10-28T18:08:56Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-10-28T18:08:56Z"}, "message": "Fix autoimport not choosing the deepest use tree in some situations", "tree": {"sha": "8e28aaae343b6c8c8586434c8b0a373d9b933312", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e28aaae343b6c8c8586434c8b0a373d9b933312"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d1b4ffa2e18838a6d025b9e38f95dfd4864afa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d1b4ffa2e18838a6d025b9e38f95dfd4864afa7", "html_url": "https://github.com/rust-lang/rust/commit/6d1b4ffa2e18838a6d025b9e38f95dfd4864afa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d1b4ffa2e18838a6d025b9e38f95dfd4864afa7/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ca41f2118fca17ee5ad0f586218489fa5d883af", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ca41f2118fca17ee5ad0f586218489fa5d883af", "html_url": "https://github.com/rust-lang/rust/commit/1ca41f2118fca17ee5ad0f586218489fa5d883af"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "c8b9809f4c856a9ffaeb736510cdfd02da4fa0ab", "filename": "crates/ra_assists/src/assists/add_import.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/6d1b4ffa2e18838a6d025b9e38f95dfd4864afa7/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d1b4ffa2e18838a6d025b9e38f95dfd4864afa7/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_import.rs?ref=6d1b4ffa2e18838a6d025b9e38f95dfd4864afa7", "patch": "@@ -124,9 +124,9 @@ fn fmt_segments_raw(segments: &[SmolStr], buf: &mut String) {\n     }\n }\n \n-// Returns the numeber of common segments.\n+/// Returns the number of common segments.\n fn compare_path_segments(left: &[SmolStr], right: &[ast::PathSegment]) -> usize {\n-    left.iter().zip(right).filter(|(l, r)| compare_path_segment(l, r)).count()\n+    left.iter().zip(right).take_while(|(l, r)| compare_path_segment(l, r)).count()\n }\n \n fn compare_path_segment(a: &SmolStr, b: &ast::PathSegment) -> bool {\n@@ -147,7 +147,7 @@ fn compare_path_segment_with_name(a: &SmolStr, b: &ast::Name) -> bool {\n     a == b.text()\n }\n \n-#[derive(Clone)]\n+#[derive(Clone, Debug)]\n enum ImportAction {\n     Nothing,\n     // Add a brand new use statement.\n@@ -217,10 +217,18 @@ impl ImportAction {\n             (\n                 ImportAction::AddNestedImport { common_segments: n, .. },\n                 ImportAction::AddInTreeList { common_segments: m, .. },\n-            ) => n > m,\n-            (\n+            )\n+            | (\n                 ImportAction::AddInTreeList { common_segments: n, .. },\n                 ImportAction::AddNestedImport { common_segments: m, .. },\n+            )\n+            | (\n+                ImportAction::AddInTreeList { common_segments: n, .. },\n+                ImportAction::AddInTreeList { common_segments: m, .. },\n+            )\n+            | (\n+                ImportAction::AddNestedImport { common_segments: n, .. },\n+                ImportAction::AddNestedImport { common_segments: m, .. },\n             ) => n > m,\n             (ImportAction::AddInTreeList { .. }, _) => true,\n             (ImportAction::AddNestedImport { .. }, ImportAction::Nothing) => false,\n@@ -289,7 +297,7 @@ fn walk_use_tree_for_best_action(\n         common if common == left.len() && left.len() == right.len() => {\n             // e.g: target is std::fmt and we can have\n             // 1- use std::fmt;\n-            // 2- use std::fmt:{ ... }\n+            // 2- use std::fmt::{ ... }\n             if let Some(list) = tree_list {\n                 // In case 2 we need to add self to the nested list\n                 // unless it's already there\n@@ -867,6 +875,29 @@ impl Display<|> for Foo {\n         );\n     }\n \n+    #[test]\n+    fn test_auto_import_use_nested_import() {\n+        check_assist(\n+            add_import,\n+            \"\n+use crate::{\n+    ty::{Substs, Ty},\n+    AssocItem,\n+};\n+\n+fn foo() { crate::ty::lower<|>::trait_env() }\n+\",\n+            \"\n+use crate::{\n+    ty::{Substs, Ty, lower},\n+    AssocItem,\n+};\n+\n+fn foo() { lower<|>::trait_env() }\n+\",\n+        );\n+    }\n+\n     #[test]\n     fn test_auto_import_alias() {\n         check_assist("}]}