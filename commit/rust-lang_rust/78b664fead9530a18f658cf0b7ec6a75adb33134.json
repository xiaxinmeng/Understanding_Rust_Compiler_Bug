{"sha": "78b664fead9530a18f658cf0b7ec6a75adb33134", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4YjY2NGZlYWQ5NTMwYTE4ZjY1OGNmMGI3ZWM2YTc1YWRiMzMxMzQ=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-25T08:06:45Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-05-25T18:03:31Z"}, "message": "std: More iotask cleanup", "tree": {"sha": "a840b915dd55e93b047a83d1d0e3dbd3f87b4862", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a840b915dd55e93b047a83d1d0e3dbd3f87b4862"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78b664fead9530a18f658cf0b7ec6a75adb33134", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78b664fead9530a18f658cf0b7ec6a75adb33134", "html_url": "https://github.com/rust-lang/rust/commit/78b664fead9530a18f658cf0b7ec6a75adb33134", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78b664fead9530a18f658cf0b7ec6a75adb33134/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "937ef188e3539b4e83af1a0e52b41a2371e8bfd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/937ef188e3539b4e83af1a0e52b41a2371e8bfd8", "html_url": "https://github.com/rust-lang/rust/commit/937ef188e3539b4e83af1a0e52b41a2371e8bfd8"}], "stats": {"total": 45, "additions": 22, "deletions": 23}, "files": [{"sha": "a052449cf4c4cae7e20e4a286d4bc0c75e08c470", "filename": "src/libstd/uv_iotask.rs", "status": "modified", "additions": 22, "deletions": 23, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/78b664fead9530a18f658cf0b7ec6a75adb33134/src%2Flibstd%2Fuv_iotask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78b664fead9530a18f658cf0b7ec6a75adb33134/src%2Flibstd%2Fuv_iotask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_iotask.rs?ref=78b664fead9530a18f658cf0b7ec6a75adb33134", "patch": "@@ -14,7 +14,7 @@ export exit;\n \n import libc::c_void;\n import ptr::addr_of;\n-import comm::{port, chan, methods};\n+import comm::{port, chan, methods, listen};\n import ll = uv_ll;\n \n #[doc = \"\n@@ -31,9 +31,6 @@ fn spawn_iotask(-builder: task::builder) -> iotask {\n \n     import task::{set_opts, get_opts, single_threaded, run};\n \n-    let iotask_po = port::<iotask>();\n-    let iotask_ch = iotask_po.chan();\n-\n     set_opts(builder, {\n         sched: some({\n             mode: single_threaded,\n@@ -42,13 +39,16 @@ fn spawn_iotask(-builder: task::builder) -> iotask {\n         with get_opts(builder)\n     });\n \n-    run(builder) {||\n-        #debug(\"entering libuv task\");\n-        run_loop(iotask_ch);\n-        #debug(\"libuv task exiting\");\n-    };\n+    listen {|iotask_ch|\n+\n+        run(copy(builder)) {||\n+            #debug(\"entering libuv task\");\n+            run_loop(iotask_ch);\n+            #debug(\"libuv task exiting\");\n+        };\n \n-    iotask_po.recv()\n+        iotask_ch.recv()\n+    }\n }\n \n \n@@ -102,27 +102,29 @@ enum iotask_msg {\n Run the loop and begin handling messages\n \"]\n fn run_loop(iotask_ch: chan<iotask>) unsafe {\n-    let msg_po = port::<iotask_msg>();\n+\n     let loop_ptr = ll::loop_new();\n+\n     // set up the special async handle we'll use to allow multi-task\n     // communication with this loop\n     let async = ll::async_t();\n     let async_handle = addr_of(async);\n+\n     // associate the async handle with the loop\n     ll::async_init(loop_ptr, async_handle, wake_up_cb);\n \n     // initialize our loop data and store it in the loop\n     let data: iotask_loop_data = {\n         async_handle: async_handle,\n-        msg_po_ptr: addr_of(msg_po)\n+        msg_po: port()\n     };\n     ll::set_data_for_uv_handle(async_handle, addr_of(data));\n \n     // Send out a handle through which folks can talk to us\n     // while we dwell in the I/O loop\n     let iotask = iotask_({\n         async_handle: async_handle,\n-        op_chan: msg_po.chan()\n+        op_chan: data.msg_po.chan()\n     });\n     iotask_ch.send(iotask);\n \n@@ -136,7 +138,7 @@ fn run_loop(iotask_ch: chan<iotask>) unsafe {\n // data that lives for the lifetime of the high-evel oo\n type iotask_loop_data = {\n     async_handle: *ll::uv_async_t,\n-    msg_po_ptr: *port<iotask_msg>\n+    msg_po: port<iotask_msg>\n };\n \n fn send_msg(iotask: iotask,\n@@ -145,21 +147,19 @@ fn send_msg(iotask: iotask,\n     ll::async_send(iotask.async_handle);\n }\n \n-// this will be invoked by a call to uv::hl::interact() with\n-// the high_level_loop corresponding to this async_handle. We\n-// simply check if the loop is active and, if so, invoke the\n-// user-supplied on_wake callback that is stored in the loop's\n-// data member\n+#[doc =\"Dispatch all pending messages\"]\n crust fn wake_up_cb(async_handle: *ll::uv_async_t,\n                     status: int) unsafe {\n+\n     log(debug, #fmt(\"wake_up_cb crust.. handle: %? status: %?\",\n                      async_handle, status));\n+\n     let loop_ptr = ll::get_loop_for_uv_handle(async_handle);\n     let data = ll::get_data_for_uv_handle(async_handle) as *iotask_loop_data;\n-    let msg_po = *((*data).msg_po_ptr);\n+    let msg_po = (*data).msg_po;\n+\n     while msg_po.peek() {\n-        let msg = msg_po.recv();\n-        alt msg {\n+        alt msg_po.recv() {\n           interaction(cb) {\n             cb(loop_ptr);\n           }\n@@ -172,7 +172,6 @@ crust fn wake_up_cb(async_handle: *ll::uv_async_t,\n \n fn begin_teardown(data: *iotask_loop_data) unsafe {\n     log(debug, \"iotask begin_teardown() called, close async_handle\");\n-    // call user-suppled before_tear_down cb\n     let async_handle = (*data).async_handle;\n     ll::close(async_handle as *c_void, tear_down_close_cb);\n }"}]}