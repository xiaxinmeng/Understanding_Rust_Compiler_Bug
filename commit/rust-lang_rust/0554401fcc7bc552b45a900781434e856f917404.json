{"sha": "0554401fcc7bc552b45a900781434e856f917404", "node_id": "C_kwDOAAsO6NoAKDA1NTQ0MDFmY2M3YmM1NTJiNDVhOTAwNzgxNDM0ZTg1NmY5MTc0MDQ", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-01-13T18:01:59Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2023-03-16T10:21:48Z"}, "message": "Remove unreachable branch in format_args ast lowering.", "tree": {"sha": "fda74ad26d3ad0fd8f06ca35738eb85d0e3afb92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fda74ad26d3ad0fd8f06ca35738eb85d0e3afb92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0554401fcc7bc552b45a900781434e856f917404", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0554401fcc7bc552b45a900781434e856f917404", "html_url": "https://github.com/rust-lang/rust/commit/0554401fcc7bc552b45a900781434e856f917404", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0554401fcc7bc552b45a900781434e856f917404/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6c988b041194136ee20407a920903d49808fb06", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6c988b041194136ee20407a920903d49808fb06", "html_url": "https://github.com/rust-lang/rust/commit/b6c988b041194136ee20407a920903d49808fb06"}], "stats": {"total": 27, "additions": 8, "deletions": 19}, "files": [{"sha": "2c434ceb09beec573d8028c0ceec8d008b443a6b", "filename": "compiler/rustc_ast_lowering/src/format.rs", "status": "modified", "additions": 8, "deletions": 19, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/0554401fcc7bc552b45a900781434e856f917404/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0554401fcc7bc552b45a900781434e856f917404/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fformat.rs?ref=0554401fcc7bc552b45a900781434e856f917404", "patch": "@@ -442,25 +442,14 @@ fn expand_format_args<'hir>(\n         let args_ident = Ident::new(sym::args, macsp);\n         let (args_pat, args_hir_id) = ctx.pat_ident(macsp, args_ident);\n         let args = ctx.arena.alloc_from_iter(argmap.iter().map(|&(arg_index, ty)| {\n-            if let Some(arg) = arguments.get(arg_index) {\n-                let sp = arg.expr.span.with_ctxt(macsp.ctxt());\n-                let args_ident_expr = ctx.expr_ident(macsp, args_ident, args_hir_id);\n-                let arg = ctx.arena.alloc(ctx.expr(\n-                    sp,\n-                    hir::ExprKind::Field(\n-                        args_ident_expr,\n-                        Ident::new(sym::integer(arg_index), macsp),\n-                    ),\n-                ));\n-                make_argument(ctx, sp, arg, ty)\n-            } else {\n-                ctx.expr(\n-                    macsp,\n-                    hir::ExprKind::Err(\n-                        ctx.tcx.sess.delay_span_bug(macsp, format!(\"no arg at {arg_index}\")),\n-                    ),\n-                )\n-            }\n+            let arg = &arguments[arg_index];\n+            let sp = arg.expr.span.with_ctxt(macsp.ctxt());\n+            let args_ident_expr = ctx.expr_ident(macsp, args_ident, args_hir_id);\n+            let arg = ctx.arena.alloc(ctx.expr(\n+                sp,\n+                hir::ExprKind::Field(args_ident_expr, Ident::new(sym::integer(arg_index), macsp)),\n+            ));\n+            make_argument(ctx, sp, arg, ty)\n         }));\n         let elements: Vec<_> = arguments\n             .iter()"}]}