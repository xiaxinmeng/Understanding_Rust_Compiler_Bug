{"sha": "b205a5a67c3ababf7e7d6f47fe667f4dd5f12e58", "node_id": "C_kwDOAAsO6NoAKGIyMDVhNWE2N2MzYWJhYmY3ZTdkNmY0N2ZlNjY3ZjRkZDVmMTJlNTg", "commit": {"author": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-10-25T21:46:14Z"}, "committer": {"name": "Michael Howell", "email": "michael@notriddle.com", "date": "2022-10-25T21:47:13Z"}, "message": "diagnostics: do not suggest static candidates as traits to import\n\nIf it's a static candidate, then it's already implemented. Do not suggest\nit a second time for implementing.", "tree": {"sha": "0b91f700051a11ee1b6f96b248600df9ea5d308e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0b91f700051a11ee1b6f96b248600df9ea5d308e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b205a5a67c3ababf7e7d6f47fe667f4dd5f12e58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b205a5a67c3ababf7e7d6f47fe667f4dd5f12e58", "html_url": "https://github.com/rust-lang/rust/commit/b205a5a67c3ababf7e7d6f47fe667f4dd5f12e58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b205a5a67c3ababf7e7d6f47fe667f4dd5f12e58/comments", "author": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "committer": {"login": "notriddle", "id": 1593513, "node_id": "MDQ6VXNlcjE1OTM1MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1593513?v=4", "gravatar_id": "", "url": "https://api.github.com/users/notriddle", "html_url": "https://github.com/notriddle", "followers_url": "https://api.github.com/users/notriddle/followers", "following_url": "https://api.github.com/users/notriddle/following{/other_user}", "gists_url": "https://api.github.com/users/notriddle/gists{/gist_id}", "starred_url": "https://api.github.com/users/notriddle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/notriddle/subscriptions", "organizations_url": "https://api.github.com/users/notriddle/orgs", "repos_url": "https://api.github.com/users/notriddle/repos", "events_url": "https://api.github.com/users/notriddle/events{/privacy}", "received_events_url": "https://api.github.com/users/notriddle/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bed4ad65bf7a1cef39e3d66b3670189581b3b073", "url": "https://api.github.com/repos/rust-lang/rust/commits/bed4ad65bf7a1cef39e3d66b3670189581b3b073", "html_url": "https://github.com/rust-lang/rust/commit/bed4ad65bf7a1cef39e3d66b3670189581b3b073"}], "stats": {"total": 24, "additions": 18, "deletions": 6}, "files": [{"sha": "6c21ed902d007112c7b256412fafeb6f86ae8f85", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b205a5a67c3ababf7e7d6f47fe667f4dd5f12e58/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b205a5a67c3ababf7e7d6f47fe667f4dd5f12e58/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=b205a5a67c3ababf7e7d6f47fe667f4dd5f12e58", "patch": "@@ -106,7 +106,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let report_candidates = |span: Span,\n                                  err: &mut Diagnostic,\n-                                 mut sources: Vec<CandidateSource>,\n+                                 sources: &mut Vec<CandidateSource>,\n                                  sugg_span: Span| {\n             sources.sort();\n             sources.dedup();\n@@ -248,7 +248,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         match error {\n             MethodError::NoMatch(NoMatchData {\n-                static_candidates: static_sources,\n+                static_candidates: mut static_sources,\n                 unsatisfied_predicates,\n                 out_of_scope_traits,\n                 lev_candidate,\n@@ -422,9 +422,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         err.help(&format!(\"try with `{}::{}`\", ty_str, item_name,));\n                     }\n \n-                    report_candidates(span, &mut err, static_sources, sugg_span);\n+                    report_candidates(span, &mut err, &mut static_sources, sugg_span);\n                 } else if static_sources.len() > 1 {\n-                    report_candidates(span, &mut err, static_sources, sugg_span);\n+                    report_candidates(span, &mut err, &mut static_sources, sugg_span);\n                 }\n \n                 let mut bound_spans = vec![];\n@@ -1007,6 +1007,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         source,\n                         out_of_scope_traits,\n                         &unsatisfied_predicates,\n+                        &static_sources,\n                         unsatisfied_bounds,\n                     );\n                 }\n@@ -1079,7 +1080,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 return Some(err);\n             }\n \n-            MethodError::Ambiguity(sources) => {\n+            MethodError::Ambiguity(mut sources) => {\n                 let mut err = struct_span_err!(\n                     self.sess(),\n                     item_name.span,\n@@ -1088,7 +1089,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 );\n                 err.span_label(item_name.span, format!(\"multiple `{}` found\", item_name));\n \n-                report_candidates(span, &mut err, sources, sugg_span);\n+                report_candidates(span, &mut err, &mut sources, sugg_span);\n                 err.emit();\n             }\n \n@@ -2015,6 +2016,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             Option<ty::Predicate<'tcx>>,\n             Option<ObligationCause<'tcx>>,\n         )],\n+        static_candidates: &[CandidateSource],\n         unsatisfied_bounds: bool,\n     ) {\n         let mut alt_rcvr_sugg = false;\n@@ -2128,6 +2130,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 Some(attr) => attr.level.is_stable(),\n                 None => true,\n             })\n+            .filter(|info| {\n+                // Static candidates are already implemented, and known not to work\n+                // Do not suggest them again\n+                static_candidates.iter().all(|sc| match *sc {\n+                    CandidateSource::Trait(def_id) => def_id != info.def_id,\n+                    CandidateSource::Impl(def_id) => {\n+                        self.tcx.trait_id_of_impl(def_id) != Some(info.def_id)\n+                    }\n+                })\n+            })\n             .filter(|info| {\n                 // We approximate the coherence rules to only suggest\n                 // traits that are legal to implement by requiring that"}]}