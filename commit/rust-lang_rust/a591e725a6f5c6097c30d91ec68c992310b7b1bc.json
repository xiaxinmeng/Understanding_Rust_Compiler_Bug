{"sha": "a591e725a6f5c6097c30d91ec68c992310b7b1bc", "node_id": "C_kwDOAAsO6NoAKGE1OTFlNzI1YTZmNWM2MDk3YzMwZDkxZWM2OGM5OTIzMTBiN2IxYmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-01T01:27:03Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-08-01T01:27:03Z"}, "message": "Auto merge of #9223 - sgued:unwrap-expect-used, r=giraffate\n\nunwrap_used: Don't recommend using `expect` when the `expect_used` lint is not allowed\n\nFixes #9222\n\n```\nchangelog: [`unwrap_used`]: Don't recommend using `expect` when the `expect_used` lint is not allowed\n```", "tree": {"sha": "ad5fdf695d6af9d458d45630e651fd27b4192cb9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad5fdf695d6af9d458d45630e651fd27b4192cb9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a591e725a6f5c6097c30d91ec68c992310b7b1bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a591e725a6f5c6097c30d91ec68c992310b7b1bc", "html_url": "https://github.com/rust-lang/rust/commit/a591e725a6f5c6097c30d91ec68c992310b7b1bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a591e725a6f5c6097c30d91ec68c992310b7b1bc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0ed68776e2f8177198982587bce6685410548d1", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0ed68776e2f8177198982587bce6685410548d1", "html_url": "https://github.com/rust-lang/rust/commit/a0ed68776e2f8177198982587bce6685410548d1"}, {"sha": "23b4fe6da55291a5937535d09af2bdfed8a9a50d", "url": "https://api.github.com/repos/rust-lang/rust/commits/23b4fe6da55291a5937535d09af2bdfed8a9a50d", "html_url": "https://github.com/rust-lang/rust/commit/23b4fe6da55291a5937535d09af2bdfed8a9a50d"}], "stats": {"total": 98, "additions": 80, "deletions": 18}, "files": [{"sha": "5ef08ca6290bae6adbc15a6887edbd755c040711", "filename": "clippy_lints/src/methods/expect_used.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a591e725a6f5c6097c30d91ec68c992310b7b1bc/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a591e725a6f5c6097c30d91ec68c992310b7b1bc/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fexpect_used.rs?ref=a591e725a6f5c6097c30d91ec68c992310b7b1bc", "patch": "@@ -12,9 +12,9 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n     let obj_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n \n     let mess = if is_type_diagnostic_item(cx, obj_ty, sym::Option) {\n-        Some((EXPECT_USED, \"an Option\", \"None\"))\n+        Some((EXPECT_USED, \"an Option\", \"None\", \"\"))\n     } else if is_type_diagnostic_item(cx, obj_ty, sym::Result) {\n-        Some((EXPECT_USED, \"a Result\", \"Err\"))\n+        Some((EXPECT_USED, \"a Result\", \"Err\", \"an \"))\n     } else {\n         None\n     };\n@@ -23,14 +23,14 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n         return;\n     }\n \n-    if let Some((lint, kind, none_value)) = mess {\n+    if let Some((lint, kind, none_value, none_prefix)) = mess {\n         span_lint_and_help(\n             cx,\n             lint,\n             expr.span,\n-            &format!(\"used `expect()` on `{}` value\", kind,),\n+            &format!(\"used `expect()` on `{kind}` value\"),\n             None,\n-            &format!(\"if this value is an `{}`, it will panic\", none_value,),\n+            &format!(\"if this value is {none_prefix}`{none_value}`, it will panic\"),\n         );\n     }\n }"}, {"sha": "5ac6b09f0aa27bff22fa87c05292791f0a13f1b0", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a591e725a6f5c6097c30d91ec68c992310b7b1bc/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a591e725a6f5c6097c30d91ec68c992310b7b1bc/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=a591e725a6f5c6097c30d91ec68c992310b7b1bc", "patch": "@@ -204,6 +204,17 @@ declare_clippy_lint! {\n     /// option.expect(\"more helpful message\");\n     /// result.expect(\"more helpful message\");\n     /// ```\n+    ///\n+    /// If [expect_used](#expect_used) is enabled, instead:\n+    /// ```rust,ignore\n+    /// # let option = Some(1);\n+    /// # let result: Result<usize, ()> = Ok(1);\n+    /// option?;\n+    ///\n+    /// // or\n+    ///\n+    /// result?;\n+    /// ```\n     #[clippy::version = \"1.45.0\"]\n     pub UNWRAP_USED,\n     restriction,"}, {"sha": "ce1a52e5480afb81226859153023754301935f84", "filename": "clippy_lints/src/methods/unwrap_used.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a591e725a6f5c6097c30d91ec68c992310b7b1bc/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a591e725a6f5c6097c30d91ec68c992310b7b1bc/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Funwrap_used.rs?ref=a591e725a6f5c6097c30d91ec68c992310b7b1bc", "patch": "@@ -1,20 +1,20 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n-use clippy_utils::is_in_test_function;\n use clippy_utils::ty::is_type_diagnostic_item;\n+use clippy_utils::{is_in_test_function, is_lint_allowed};\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n use rustc_span::sym;\n \n-use super::UNWRAP_USED;\n+use super::{EXPECT_USED, UNWRAP_USED};\n \n /// lint use of `unwrap()` for `Option`s and `Result`s\n pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>, allow_unwrap_in_tests: bool) {\n     let obj_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n \n     let mess = if is_type_diagnostic_item(cx, obj_ty, sym::Option) {\n-        Some((UNWRAP_USED, \"an Option\", \"None\"))\n+        Some((UNWRAP_USED, \"an Option\", \"None\", \"\"))\n     } else if is_type_diagnostic_item(cx, obj_ty, sym::Result) {\n-        Some((UNWRAP_USED, \"a Result\", \"Err\"))\n+        Some((UNWRAP_USED, \"a Result\", \"Err\", \"an \"))\n     } else {\n         None\n     };\n@@ -23,18 +23,23 @@ pub(super) fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr\n         return;\n     }\n \n-    if let Some((lint, kind, none_value)) = mess {\n+    if let Some((lint, kind, none_value, none_prefix)) = mess {\n+        let help = if is_lint_allowed(cx, EXPECT_USED, expr.hir_id) {\n+            format!(\n+                \"if you don't want to handle the `{none_value}` case gracefully, consider \\\n+                using `expect()` to provide a better panic message\"\n+            )\n+        } else {\n+            format!(\"if this value is {none_prefix}`{none_value}`, it will panic\")\n+        };\n+\n         span_lint_and_help(\n             cx,\n             lint,\n             expr.span,\n-            &format!(\"used `unwrap()` on `{}` value\", kind,),\n+            &format!(\"used `unwrap()` on `{kind}` value\"),\n             None,\n-            &format!(\n-                \"if you don't want to handle the `{}` case gracefully, consider \\\n-                using `expect()` to provide a better panic message\",\n-                none_value,\n-            ),\n+            &help,\n         );\n     }\n }"}, {"sha": "c5d95cb8a147f71fbc8c5e335ea4e77f78b94a8b", "filename": "tests/ui-toml/expect_used/expect_used.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a591e725a6f5c6097c30d91ec68c992310b7b1bc/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a591e725a6f5c6097c30d91ec68c992310b7b1bc/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui-toml%2Fexpect_used%2Fexpect_used.stderr?ref=a591e725a6f5c6097c30d91ec68c992310b7b1bc", "patch": "@@ -5,7 +5,7 @@ LL |     let _ = opt.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::expect-used` implied by `-D warnings`\n-   = help: if this value is an `None`, it will panic\n+   = help: if this value is `None`, it will panic\n \n error: used `expect()` on `a Result` value\n   --> $DIR/expect_used.rs:11:13"}, {"sha": "ab28aac45563b1cd7bfd3192ad5b192f86638451", "filename": "tests/ui/expect.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a591e725a6f5c6097c30d91ec68c992310b7b1bc/tests%2Fui%2Fexpect.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a591e725a6f5c6097c30d91ec68c992310b7b1bc/tests%2Fui%2Fexpect.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect.stderr?ref=a591e725a6f5c6097c30d91ec68c992310b7b1bc", "patch": "@@ -5,7 +5,7 @@ LL |     let _ = opt.expect(\"\");\n    |             ^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::expect-used` implied by `-D warnings`\n-   = help: if this value is an `None`, it will panic\n+   = help: if this value is `None`, it will panic\n \n error: used `expect()` on `a Result` value\n   --> $DIR/expect.rs:10:13"}, {"sha": "0d4a0504a6e04142ea69b6940c01833b7d9f7bbb", "filename": "tests/ui/unwrap_expect_used.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a591e725a6f5c6097c30d91ec68c992310b7b1bc/tests%2Fui%2Funwrap_expect_used.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a591e725a6f5c6097c30d91ec68c992310b7b1bc/tests%2Fui%2Funwrap_expect_used.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_expect_used.rs?ref=a591e725a6f5c6097c30d91ec68c992310b7b1bc", "patch": "@@ -0,0 +1,10 @@\n+#![warn(clippy::unwrap_used, clippy::expect_used)]\n+\n+fn main() {\n+    Some(3).unwrap();\n+    Some(3).expect(\"Hello world!\");\n+\n+    let a: Result<i32, i32> = Ok(3);\n+    a.unwrap();\n+    a.expect(\"Hello world!\");\n+}"}, {"sha": "f54bfd617c4ee5589b1c906e4ab066c99fb7981e", "filename": "tests/ui/unwrap_expect_used.stderr", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a591e725a6f5c6097c30d91ec68c992310b7b1bc/tests%2Fui%2Funwrap_expect_used.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/a591e725a6f5c6097c30d91ec68c992310b7b1bc/tests%2Fui%2Funwrap_expect_used.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funwrap_expect_used.stderr?ref=a591e725a6f5c6097c30d91ec68c992310b7b1bc", "patch": "@@ -0,0 +1,36 @@\n+error: used `unwrap()` on `an Option` value\n+  --> $DIR/unwrap_expect_used.rs:4:5\n+   |\n+LL |     Some(3).unwrap();\n+   |     ^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::unwrap-used` implied by `-D warnings`\n+   = help: if this value is `None`, it will panic\n+\n+error: used `expect()` on `an Option` value\n+  --> $DIR/unwrap_expect_used.rs:5:5\n+   |\n+LL |     Some(3).expect(\"Hello world!\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `-D clippy::expect-used` implied by `-D warnings`\n+   = help: if this value is `None`, it will panic\n+\n+error: used `unwrap()` on `a Result` value\n+  --> $DIR/unwrap_expect_used.rs:8:5\n+   |\n+LL |     a.unwrap();\n+   |     ^^^^^^^^^^\n+   |\n+   = help: if this value is an `Err`, it will panic\n+\n+error: used `expect()` on `a Result` value\n+  --> $DIR/unwrap_expect_used.rs:9:5\n+   |\n+LL |     a.expect(\"Hello world!\");\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: if this value is an `Err`, it will panic\n+\n+error: aborting due to 4 previous errors\n+"}]}