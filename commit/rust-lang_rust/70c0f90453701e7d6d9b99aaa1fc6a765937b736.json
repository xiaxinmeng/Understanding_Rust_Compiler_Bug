{"sha": "70c0f90453701e7d6d9b99aaa1fc6a765937b736", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwYzBmOTA0NTM3MDFlN2Q2ZDliOTlhYWExZmM2YTc2NTkzN2I3MzY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-11T13:38:47Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-02-11T13:38:47Z"}, "message": "Auto merge of #6718 - flip1995:rustup, r=flip1995\n\nRustup\n\nr? `@ghost`\n\nchangelog: none", "tree": {"sha": "1ec41008b3cf23e91cafd8b8e486cf601fb2206a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ec41008b3cf23e91cafd8b8e486cf601fb2206a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70c0f90453701e7d6d9b99aaa1fc6a765937b736", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70c0f90453701e7d6d9b99aaa1fc6a765937b736", "html_url": "https://github.com/rust-lang/rust/commit/70c0f90453701e7d6d9b99aaa1fc6a765937b736", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70c0f90453701e7d6d9b99aaa1fc6a765937b736/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8dbcffed4469f1e92f18d23304e4865b39ec69ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/8dbcffed4469f1e92f18d23304e4865b39ec69ec", "html_url": "https://github.com/rust-lang/rust/commit/8dbcffed4469f1e92f18d23304e4865b39ec69ec"}, {"sha": "4efc4541d2c7247fa5f9c34653f7fa70eb73846c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4efc4541d2c7247fa5f9c34653f7fa70eb73846c", "html_url": "https://github.com/rust-lang/rust/commit/4efc4541d2c7247fa5f9c34653f7fa70eb73846c"}], "stats": {"total": 179, "additions": 84, "deletions": 95}, "files": [{"sha": "e7755c46eb80dffbe895f141c40b98a495cc9595", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -1,6 +1,6 @@\n [package]\n name = \"clippy\"\n-version = \"0.1.51\"\n+version = \"0.1.52\"\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\",\n \t\"Andre Bogus <bogusandre@gmail.com>\","}, {"sha": "840341fefc6a2b2053f4b48dd593a4059ae3b795", "filename": "clippy_lints/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2FCargo.toml?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -1,7 +1,7 @@\n [package]\n name = \"clippy_lints\"\n # begin automatic update\n-version = \"0.1.51\"\n+version = \"0.1.52\"\n # end automatic update\n authors = [\n \t\"Manish Goregaokar <manishsmail@gmail.com>\","}, {"sha": "61fdf9495b918c6b44f8ca72a8b2833a9a27e482", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -91,7 +91,7 @@ impl<'tcx> LateLintPass<'tcx> for Arithmetic {\n                     match op.node {\n                         hir::BinOpKind::Div | hir::BinOpKind::Rem => match &r.kind {\n                             hir::ExprKind::Lit(_lit) => (),\n-                            hir::ExprKind::Unary(hir::UnOp::UnNeg, expr) => {\n+                            hir::ExprKind::Unary(hir::UnOp::Neg, expr) => {\n                                 if let hir::ExprKind::Lit(lit) = &expr.kind {\n                                     if let rustc_ast::ast::LitKind::Int(1, _) = lit.node {\n                                         span_lint(cx, INTEGER_ARITHMETIC, expr.span, \"integer arithmetic detected\");\n@@ -114,7 +114,7 @@ impl<'tcx> LateLintPass<'tcx> for Arithmetic {\n                     self.expr_span = Some(expr.span);\n                 }\n             },\n-            hir::ExprKind::Unary(hir::UnOp::UnNeg, arg) => {\n+            hir::ExprKind::Unary(hir::UnOp::Neg, arg) => {\n                 let ty = cx.typeck_results().expr_ty(arg);\n                 if constant_simple(cx, cx.typeck_results(), expr).is_none() {\n                     if ty.is_integral() {"}, {"sha": "77b26faaa586a35ce74bf5c7757f61453a26feb2", "filename": "clippy_lints/src/assertions_on_constants.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassertions_on_constants.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -112,7 +112,7 @@ enum AssertKind {\n fn match_assert_with_message<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> Option<AssertKind> {\n     if_chain! {\n         if let ExprKind::If(ref cond, ref then, _) = expr.kind;\n-        if let ExprKind::Unary(UnOp::UnNot, ref expr) = cond.kind;\n+        if let ExprKind::Unary(UnOp::Not, ref expr) = cond.kind;\n         // bind the first argument of the `assert!` macro\n         if let Some((Constant::Bool(is_true), _)) = constant(cx, cx.typeck_results(), expr);\n         // block"}, {"sha": "0713303ec4b672c0190d8a8f2031060b0dceefb5", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -110,7 +110,7 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n         // prevent folding of `cfg!` macros and the like\n         if !e.span.from_expansion() {\n             match &e.kind {\n-                ExprKind::Unary(UnOp::UnNot, inner) => return Ok(Bool::Not(box self.run(inner)?)),\n+                ExprKind::Unary(UnOp::Not, inner) => return Ok(Bool::Not(box self.run(inner)?)),\n                 ExprKind::Binary(binop, lhs, rhs) => match &binop.node {\n                     BinOpKind::Or => {\n                         return Ok(Bool::Or(self.extract(BinOpKind::Or, &[lhs, rhs], Vec::new())?));\n@@ -454,7 +454,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n             ExprKind::Binary(binop, _, _) if binop.node == BinOpKind::Or || binop.node == BinOpKind::And => {\n                 self.bool_expr(e)\n             },\n-            ExprKind::Unary(UnOp::UnNot, inner) => {\n+            ExprKind::Unary(UnOp::Not, inner) => {\n                 if self.cx.typeck_results().node_types()[inner.hir_id].is_bool() {\n                     self.bool_expr(e);\n                 } else {\n@@ -482,7 +482,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NotSimplificationVisitor<'a, 'tcx> {\n     type Map = Map<'tcx>;\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {\n-        if let ExprKind::Unary(UnOp::UnNot, inner) = &expr.kind {\n+        if let ExprKind::Unary(UnOp::Not, inner) = &expr.kind {\n             if let Some(suggestion) = simplify_not(self.cx, inner) {\n                 span_lint_and_sugg(\n                     self.cx,"}, {"sha": "b8828719f627c8ecb45d15aa3a3cbcbae9c5cdaf", "filename": "clippy_lints/src/bytecount.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fbytecount.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fbytecount.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbytecount.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -101,7 +101,7 @@ fn check_arg(name: Symbol, arg: Symbol, needle: &Expr<'_>) -> bool {\n \n fn get_path_name(expr: &Expr<'_>) -> Option<Symbol> {\n     match expr.kind {\n-        ExprKind::Box(ref e) | ExprKind::AddrOf(BorrowKind::Ref, _, ref e) | ExprKind::Unary(UnOp::UnDeref, ref e) => {\n+        ExprKind::Box(ref e) | ExprKind::AddrOf(BorrowKind::Ref, _, ref e) | ExprKind::Unary(UnOp::Deref, ref e) => {\n             get_path_name(e)\n         },\n         ExprKind::Block(ref b, _) => {"}, {"sha": "67282cb7900579bd399986ab5f1aef029ac1b4c8", "filename": "clippy_lints/src/collapsible_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fcollapsible_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_match.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -180,7 +180,7 @@ fn strip_ref_operators<'hir>(mut expr: &'hir Expr<'hir>, typeck_results: &Typeck\n     loop {\n         match expr.kind {\n             ExprKind::AddrOf(_, _, e) => expr = e,\n-            ExprKind::Unary(UnOp::UnDeref, e) if typeck_results.expr_ty(e).is_ref() => expr = e,\n+            ExprKind::Unary(UnOp::Deref, e) if typeck_results.expr_ty(e).is_ref() => expr = e,\n             _ => break,\n         }\n     }"}, {"sha": "1b89d0bbe3862cebfee0e5a7c071f35fcef8997e", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -242,9 +242,9 @@ impl<'a, 'tcx> ConstEvalLateContext<'a, 'tcx> {\n                 self.expr(value).map(|v| Constant::Repeat(Box::new(v), n))\n             },\n             ExprKind::Unary(op, ref operand) => self.expr(operand).and_then(|o| match op {\n-                UnOp::UnNot => self.constant_not(&o, self.typeck_results.expr_ty(e)),\n-                UnOp::UnNeg => self.constant_negate(&o, self.typeck_results.expr_ty(e)),\n-                UnOp::UnDeref => Some(if let Constant::Ref(r) = o { *r } else { o }),\n+                UnOp::Not => self.constant_not(&o, self.typeck_results.expr_ty(e)),\n+                UnOp::Neg => self.constant_negate(&o, self.typeck_results.expr_ty(e)),\n+                UnOp::Deref => Some(if let Constant::Ref(r) = o { *r } else { o }),\n             }),\n             ExprKind::If(ref cond, ref then, ref otherwise) => self.ifthenelse(cond, then, *otherwise),\n             ExprKind::Binary(op, ref left, ref right) => self.binop(op, left, right),"}, {"sha": "6b9f9a56754814a46575b754b3d7ae6bba8cfbd1", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -55,7 +55,7 @@ declare_lint_pass!(HashMapPass => [MAP_ENTRY]);\n impl<'tcx> LateLintPass<'tcx> for HashMapPass {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if let ExprKind::If(ref check, ref then_block, ref else_block) = expr.kind {\n-            if let ExprKind::Unary(UnOp::UnNot, ref check) = check.kind {\n+            if let ExprKind::Unary(UnOp::Not, ref check) = check.kind {\n                 if let Some((ty, map, key)) = check_cond(cx, check) {\n                     // in case of `if !m.contains_key(&k) { m.insert(k, v); }`\n                     // we can give a better error message"}, {"sha": "086a791520fa8ec351ba4152d9089ab253f9c7c9", "filename": "clippy_lints/src/floating_point_arithmetic.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffloating_point_arithmetic.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -129,7 +129,7 @@ fn get_specialized_log_method(cx: &LateContext<'_>, base: &Expr<'_>) -> Option<&\n fn prepare_receiver_sugg<'a>(cx: &LateContext<'_>, mut expr: &'a Expr<'a>) -> Sugg<'a> {\n     let mut suggestion = Sugg::hir(cx, expr, \"..\");\n \n-    if let ExprKind::Unary(UnOp::UnNeg, inner_expr) = &expr.kind {\n+    if let ExprKind::Unary(UnOp::Neg, inner_expr) = &expr.kind {\n         expr = &inner_expr;\n     }\n \n@@ -541,12 +541,12 @@ fn is_zero(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n /// If the two expressions are not negations of each other, then it\n /// returns None.\n fn are_negated<'a>(cx: &LateContext<'_>, expr1: &'a Expr<'a>, expr2: &'a Expr<'a>) -> Option<(bool, &'a Expr<'a>)> {\n-    if let ExprKind::Unary(UnOp::UnNeg, expr1_negated) = &expr1.kind {\n+    if let ExprKind::Unary(UnOp::Neg, expr1_negated) = &expr1.kind {\n         if eq_expr_value(cx, expr1_negated, expr2) {\n             return Some((false, expr2));\n         }\n     }\n-    if let ExprKind::Unary(UnOp::UnNeg, expr2_negated) = &expr2.kind {\n+    if let ExprKind::Unary(UnOp::Neg, expr2_negated) = &expr2.kind {\n         if eq_expr_value(cx, expr1, expr2_negated) {\n             return Some((true, expr1));\n         }"}, {"sha": "94200a1542084ae4fa29fb83f035e266d84d24de", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -644,7 +644,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n                     }\n                 }\n             },\n-            hir::ExprKind::Unary(hir::UnOp::UnDeref, ref ptr) => self.check_arg(ptr),\n+            hir::ExprKind::Unary(hir::UnOp::Deref, ref ptr) => self.check_arg(ptr),\n             _ => (),\n         }\n "}, {"sha": "bd0be88028904a6d1bbad626b78a3ba5e8451b52", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -70,7 +70,7 @@ impl<'tcx> LateLintPass<'tcx> for MapClone {\n                     },\n                     hir::PatKind::Binding(hir::BindingAnnotation::Unannotated, .., name, None) => {\n                         match closure_expr.kind {\n-                            hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner) => {\n+                            hir::ExprKind::Unary(hir::UnOp::Deref, ref inner) => {\n                                 if ident_eq(name, inner) {\n                                     if let ty::Ref(.., Mutability::Not) = cx.typeck_results().expr_ty(inner).kind() {\n                                         lint(cx, e.span, args[0].span, true);"}, {"sha": "eaa604c2ae63eef88b25330b9bbc2942376df10b", "filename": "clippy_lints/src/methods/manual_saturating_arithmetic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmanual_saturating_arithmetic.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -148,7 +148,7 @@ fn is_min_or_max<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>) -> Option<M\n     }\n \n     if ty.is_signed() {\n-        if let hir::ExprKind::Unary(hir::UnOp::UnNeg, val) = &expr.kind {\n+        if let hir::ExprKind::Unary(hir::UnOp::Neg, val) = &expr.kind {\n             return check_lit(val, true);\n         }\n     }\n@@ -163,7 +163,7 @@ enum Sign {\n }\n \n fn lit_sign(expr: &hir::Expr<'_>) -> Option<Sign> {\n-    if let hir::ExprKind::Unary(hir::UnOp::UnNeg, inner) = &expr.kind {\n+    if let hir::ExprKind::Unary(hir::UnOp::Neg, inner) = &expr.kind {\n         if let hir::ExprKind::Lit(..) = &inner.kind {\n             return Some(Sign::Neg);\n         }"}, {"sha": "433f513b1a8bf27d21b405e60cb726d6b7085a3e", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -2235,7 +2235,10 @@ fn lint_expect_fun_call(\n         span_replace_word,\n         &format!(\"use of `{}` followed by a function call\", name),\n         \"try this\",\n-        format!(\"unwrap_or_else({} {{ panic!({}) }})\", closure_args, arg_root_snippet),\n+        format!(\n+            \"unwrap_or_else({} {{ panic!(\\\"{{}}\\\", {}) }})\",\n+            closure_args, arg_root_snippet\n+        ),\n         applicability,\n     );\n }\n@@ -2672,7 +2675,7 @@ fn lint_get_unwrap<'tcx>(cx: &LateContext<'tcx>, expr: &hir::Expr<'_>, get_args:\n     if_chain! {\n         if needs_ref;\n         if let Some(parent) = get_parent_expr(cx, expr);\n-        if let hir::ExprKind::Unary(hir::UnOp::UnDeref, _) = parent.kind;\n+        if let hir::ExprKind::Unary(hir::UnOp::Deref, _) = parent.kind;\n         then {\n             needs_ref = false;\n             span = parent.span;\n@@ -3116,7 +3119,7 @@ fn lint_filter_map<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, is_f\n             // in `filter(|x| ..)`, replace `*x` with `x`\n             let a_path = if_chain! {\n                 if !is_filter_param_ref;\n-                if let ExprKind::Unary(UnOp::UnDeref, expr_path) = a.kind;\n+                if let ExprKind::Unary(UnOp::Deref, expr_path) = a.kind;\n                 then { expr_path } else { a }\n             };\n             // let the filter closure arg and the map closure arg be equal\n@@ -3758,8 +3761,8 @@ fn lint_option_as_ref_deref<'tcx>(\n                 },\n                 hir::ExprKind::AddrOf(hir::BorrowKind::Ref, m, ref inner) if same_mutability(m) => {\n                     if_chain! {\n-                        if let hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner1) = inner.kind;\n-                        if let hir::ExprKind::Unary(hir::UnOp::UnDeref, ref inner2) = inner1.kind;\n+                        if let hir::ExprKind::Unary(hir::UnOp::Deref, ref inner1) = inner.kind;\n+                        if let hir::ExprKind::Unary(hir::UnOp::Deref, ref inner2) = inner1.kind;\n                         then {\n                             path_to_local_id(inner2, closure_body.params[0].pat.hir_id)\n                         } else {\n@@ -4113,7 +4116,7 @@ fn lint_filetype_is_file(cx: &LateContext<'_>, expr: &hir::Expr<'_>, args: &[hir\n     if_chain! {\n         if let Some(parent) = get_parent_expr(cx, expr);\n         if let hir::ExprKind::Unary(op, _) = parent.kind;\n-        if op == hir::UnOp::UnNot;\n+        if op == hir::UnOp::Not;\n         then {\n             lint_unary = \"!\";\n             verb = \"denies\";"}, {"sha": "2ef5c6aa2a4e2a8b39c2d8e38a622a7c2f5c4ec4", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -502,7 +502,7 @@ fn is_allowed<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) -> bool {\n // Return true if `expr` is the result of `signum()` invoked on a float value.\n fn is_signum(cx: &LateContext<'_>, expr: &Expr<'_>) -> bool {\n     // The negation of a signum is still a signum\n-    if let ExprKind::Unary(UnOp::UnNeg, ref child_expr) = expr.kind {\n+    if let ExprKind::Unary(UnOp::Neg, ref child_expr) = expr.kind {\n         return is_signum(cx, &child_expr);\n     }\n \n@@ -586,7 +586,7 @@ fn check_to_owned(cx: &LateContext<'_>, expr: &Expr<'_>, other: &Expr<'_>, left:\n         return;\n     }\n \n-    let other_gets_derefed = matches!(other.kind, ExprKind::Unary(UnOp::UnDeref, _));\n+    let other_gets_derefed = matches!(other.kind, ExprKind::Unary(UnOp::Deref, _));\n \n     let lint_span = if other_gets_derefed {\n         expr.span.to(other.span)"}, {"sha": "84a0df92f5b43ae45620a9ef0ca3de550ccb2d5a", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -1,11 +1,12 @@\n-use crate::utils::{constants, snippet_opt, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n+use crate::utils::{snippet_opt, span_lint, span_lint_and_help, span_lint_and_sugg, span_lint_and_then};\n use rustc_ast::ast::{\n     BindingMode, Expr, ExprKind, GenericParamKind, Generics, Lit, LitFloatType, LitIntType, LitKind, Mutability,\n     NodeId, Pat, PatKind, UnOp,\n };\n use rustc_ast::visit::FnKind;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::Applicability;\n+use rustc_hir::PrimTy;\n use rustc_lint::{EarlyContext, EarlyLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n@@ -264,13 +265,12 @@ impl EarlyLintPass for MiscEarlyLints {\n     fn check_generics(&mut self, cx: &EarlyContext<'_>, gen: &Generics) {\n         for param in &gen.params {\n             if let GenericParamKind::Type { .. } = param.kind {\n-                let name = param.ident.as_str();\n-                if constants::BUILTIN_TYPES.contains(&&*name) {\n+                if let Some(prim_ty) = PrimTy::from_name(param.ident.name) {\n                     span_lint(\n                         cx,\n                         BUILTIN_TYPE_SHADOW,\n                         param.ident.span,\n-                        &format!(\"this generic shadows the built-in type `{}`\", name),\n+                        &format!(\"this generic shadows the built-in type `{}`\", prim_ty.name()),\n                     );\n                 }\n             }"}, {"sha": "f283ff1715fb667df833c98cebc41039603d04ee", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -195,7 +195,7 @@ struct ExpressionInfoWithSpan {\n }\n \n fn is_unary_not(e: &Expr<'_>) -> (bool, Span) {\n-    if let ExprKind::Unary(UnOp::UnNot, operand) = e.kind {\n+    if let ExprKind::Unary(UnOp::Not, operand) = e.kind {\n         return (true, operand.span);\n     }\n     (false, e.span)"}, {"sha": "ec0ad58ca9c3e9558a726b2ce9bad59b00b5e46f", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -50,7 +50,7 @@ impl<'tcx> LateLintPass<'tcx> for NoNegCompOpForPartialOrd {\n         if_chain! {\n \n             if !in_external_macro(cx.sess(), expr.span);\n-            if let ExprKind::Unary(UnOp::UnNot, ref inner) = expr.kind;\n+            if let ExprKind::Unary(UnOp::Not, ref inner) = expr.kind;\n             if let ExprKind::Binary(ref op, ref left, _) = inner.kind;\n             if let BinOpKind::Le | BinOpKind::Ge | BinOpKind::Lt | BinOpKind::Gt = op.node;\n "}, {"sha": "ef7cc65cfcf0a36fe3416a70fd35e5aa07bd9b7d", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -32,8 +32,8 @@ impl<'tcx> LateLintPass<'tcx> for NegMultiply {\n             if BinOpKind::Mul == op.node {\n                 match (&left.kind, &right.kind) {\n                     (&ExprKind::Unary(..), &ExprKind::Unary(..)) => {},\n-                    (&ExprKind::Unary(UnOp::UnNeg, ref lit), _) => check_mul(cx, e.span, lit, right),\n-                    (_, &ExprKind::Unary(UnOp::UnNeg, ref lit)) => check_mul(cx, e.span, lit, left),\n+                    (&ExprKind::Unary(UnOp::Neg, ref lit), _) => check_mul(cx, e.span, lit, right),\n+                    (_, &ExprKind::Unary(UnOp::Neg, ref lit)) => check_mul(cx, e.span, lit, left),\n                     _ => {},\n                 }\n             }"}, {"sha": "0b2262d849076857ed43d883e3398904e837ff40", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -383,7 +383,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n                             needs_check_adjustment = false;\n                             break;\n                         },\n-                        ExprKind::Unary(UnOp::UnDeref, _) => {\n+                        ExprKind::Unary(UnOp::Deref, _) => {\n                             // `*e` => desugared to `*Deref::deref(&e)`,\n                             // meaning `e` must be referenced.\n                             // no need to go further up since a method call is involved now."}, {"sha": "9ef0d267b0b20b49b691ae5bfdf49c637fb357c8", "filename": "clippy_lints/src/option_if_let_else.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Foption_if_let_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foption_if_let_else.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -181,7 +181,7 @@ fn detect_option_if_let_else<'tcx>(\n             };\n             let cond_expr = match &cond_expr.kind {\n                 // Pointer dereferencing happens automatically, so we can omit it in the suggestion\n-                ExprKind::Unary(UnOp::UnDeref, expr) | ExprKind::AddrOf(_, _, expr) => expr,\n+                ExprKind::Unary(UnOp::Deref, expr) | ExprKind::AddrOf(_, _, expr) => expr,\n                 _ => cond_expr,\n             };\n             Some(OptionIfLetElseOccurence {"}, {"sha": "32f6bc74642ca8c17e12ecd805184eceb1a21670", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -389,7 +389,7 @@ fn is_self_shadow(name: Symbol, expr: &Expr<'_>) -> bool {\n         ExprKind::Block(ref block, _) => {\n             block.stmts.is_empty() && block.expr.as_ref().map_or(false, |e| is_self_shadow(name, e))\n         },\n-        ExprKind::Unary(op, ref inner) => (UnOp::UnDeref == op) && is_self_shadow(name, inner),\n+        ExprKind::Unary(op, ref inner) => (UnOp::Deref == op) && is_self_shadow(name, inner),\n         ExprKind::Path(QPath::Resolved(_, ref path)) => path_eq_name(name, path),\n         _ => false,\n     }"}, {"sha": "0b7d08cb1645a11f74609a22009d6f87dc482ec4", "filename": "clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -194,7 +194,7 @@ impl<'tcx> Visitor<'tcx> for BinaryExprVisitor {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr<'_>) {\n         match expr.kind {\n             hir::ExprKind::Binary(..)\n-            | hir::ExprKind::Unary(hir::UnOp::UnNot | hir::UnOp::UnNeg, _)\n+            | hir::ExprKind::Unary(hir::UnOp::Not | hir::UnOp::Neg, _)\n             | hir::ExprKind::AssignOp(..) => self.nb_binops += 1,\n             _ => {},\n         }"}, {"sha": "dc938ed02383dc0513ddbd2ab87a2171723c5cdc", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -586,7 +586,7 @@ impl<'tcx> LateLintPass<'tcx> for Transmute {\n                             let mut expr = &args[0];\n                             let mut arg = sugg::Sugg::hir(cx, expr, \"..\");\n \n-                            if let ExprKind::Unary(UnOp::UnNeg, inner_expr) = &expr.kind {\n+                            if let ExprKind::Unary(UnOp::Neg, inner_expr) = &expr.kind {\n                                 expr = &inner_expr;\n                             }\n "}, {"sha": "e647812a0fe8fc3094eb1ac7697fff805dd3d811", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -1708,13 +1708,13 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n }\n \n fn is_unary_neg(expr: &Expr<'_>) -> bool {\n-    matches!(expr.kind, ExprKind::Unary(UnOp::UnNeg, _))\n+    matches!(expr.kind, ExprKind::Unary(UnOp::Neg, _))\n }\n \n fn get_numeric_literal<'e>(expr: &'e Expr<'e>) -> Option<&'e Lit> {\n     match expr.kind {\n         ExprKind::Lit(ref lit) => Some(lit),\n-        ExprKind::Unary(UnOp::UnNeg, e) => {\n+        ExprKind::Unary(UnOp::Neg, e) => {\n             if let ExprKind::Lit(ref lit) = e.kind {\n                 Some(lit)\n             } else {\n@@ -2870,7 +2870,7 @@ declare_lint_pass!(RefToMut => [CAST_REF_TO_MUT]);\n impl<'tcx> LateLintPass<'tcx> for RefToMut {\n     fn check_expr(&mut self, cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>) {\n         if_chain! {\n-            if let ExprKind::Unary(UnOp::UnDeref, e) = &expr.kind;\n+            if let ExprKind::Unary(UnOp::Deref, e) = &expr.kind;\n             if let ExprKind::Cast(e, t) = &e.kind;\n             if let TyKind::Ptr(MutTy { mutbl: Mutability::Mut, .. }) = t.kind;\n             if let ExprKind::Cast(e, t) = &e.kind;"}, {"sha": "2fb0463c5a6c250c646ceb5cdcd2e795f5c39df4", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -108,7 +108,7 @@ fn collect_unwrap_info<'tcx>(\n             },\n             _ => (),\n         }\n-    } else if let ExprKind::Unary(UnOp::UnNot, expr) = &expr.kind {\n+    } else if let ExprKind::Unary(UnOp::Not, expr) = &expr.kind {\n         return collect_unwrap_info(cx, expr, branch, !invert);\n     } else {\n         if_chain! {"}, {"sha": "522932f054d894eef06d81b7a53203fc255f9d89", "filename": "clippy_lints/src/utils/constants.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/8dbcffed4469f1e92f18d23304e4865b39ec69ec/clippy_lints%2Fsrc%2Futils%2Fconstants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8dbcffed4469f1e92f18d23304e4865b39ec69ec/clippy_lints%2Fsrc%2Futils%2Fconstants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconstants.rs?ref=8dbcffed4469f1e92f18d23304e4865b39ec69ec", "patch": "@@ -1,13 +0,0 @@\n-//! This module contains some useful constants.\n-\n-#![deny(clippy::missing_docs_in_private_items)]\n-\n-/// List of the built-in types names.\n-///\n-/// See also [the reference][reference-types] for a list of such types.\n-///\n-/// [reference-types]: https://doc.rust-lang.org/reference/types.html\n-pub const BUILTIN_TYPES: &[&str] = &[\n-    \"i8\", \"u8\", \"i16\", \"u16\", \"i32\", \"u32\", \"i64\", \"u64\", \"i128\", \"u128\", \"isize\", \"usize\", \"f32\", \"f64\", \"bool\",\n-    \"str\", \"char\",\n-];"}, {"sha": "1cf1aa363d5dd7cbc3399ad80996484d1a4d4510", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -244,7 +244,7 @@ pub fn extract_assert_macro_args<'tcx>(e: &'tcx Expr<'tcx>) -> Option<Vec<&'tcx\n                 // macros with unique arg: `{debug_}assert!` (e.g., `debug_assert!(some_condition)`)\n                 if_chain! {\n                     if let ExprKind::If(ref clause, _, _)  = matchexpr.kind;\n-                    if let ExprKind::Unary(UnOp::UnNot, condition) = clause.kind;\n+                    if let ExprKind::Unary(UnOp::Not, condition) = clause.kind;\n                     then {\n                         return Some(vec![condition]);\n                     }"}, {"sha": "d8c602fab22c2d095f94adeba358fe7c903e5bbc", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -999,7 +999,7 @@ impl InterningDefinedSymbol {\n         // SymbolStr might be de-referenced: `&*symbol.as_str()`\n         let call = if_chain! {\n             if let ExprKind::AddrOf(_, _, e) = expr.kind;\n-            if let ExprKind::Unary(UnOp::UnDeref, e) = e.kind;\n+            if let ExprKind::Unary(UnOp::Deref, e) = e.kind;\n             then { e } else { expr }\n         };\n         if_chain! {"}, {"sha": "fafa1400156a4f62db65495a56acd6a1db5ae65b", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -8,7 +8,6 @@ pub mod author;\n pub mod camel_case;\n pub mod comparisons;\n pub mod conf;\n-pub mod constants;\n mod diagnostics;\n pub mod eager_or_lazy;\n pub mod higher;"}, {"sha": "e73da595e19df9cb1397be1a06e140e016038ffc", "filename": "rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/rust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/rust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/rust-toolchain?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2021-02-03\"\n+channel = \"nightly-2021-02-11\"\n components = [\"llvm-tools-preview\", \"rustc-dev\", \"rust-src\"]"}, {"sha": "9cef7438d225cbc51cdedd1b471ece46bbb89e78", "filename": "tests/missing-test-files.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/tests%2Fmissing-test-files.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/tests%2Fmissing-test-files.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmissing-test-files.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -9,14 +9,12 @@ fn test_missing_tests() {\n     if !missing_files.is_empty() {\n         assert!(\n             false,\n-            format!(\n-                \"Didn't see a test file for the following files:\\n\\n{}\\n\",\n-                missing_files\n-                    .iter()\n-                    .map(|s| format!(\"\\t{}\", s))\n-                    .collect::<Vec<_>>()\n-                    .join(\"\\n\")\n-            )\n+            \"Didn't see a test file for the following files:\\n\\n{}\\n\",\n+            missing_files\n+                .iter()\n+                .map(|s| format!(\"\\t{}\", s))\n+                .collect::<Vec<_>>()\n+                .join(\"\\n\")\n         );\n     }\n }"}, {"sha": "e989de654045632a1a496859c9cff7640742492a", "filename": "tests/ui/assertions_on_constants.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/tests%2Fui%2Fassertions_on_constants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/tests%2Fui%2Fassertions_on_constants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -1,3 +1,5 @@\n+#![allow(non_fmt_panic)]\n+\n macro_rules! assert_const {\n     ($len:expr) => {\n         assert!($len > 0);"}, {"sha": "c66fdf093f5148a9a6aa660bea88dd23c6d9f61d", "filename": "tests/ui/assertions_on_constants.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/tests%2Fui%2Fassertions_on_constants.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/tests%2Fui%2Fassertions_on_constants.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fassertions_on_constants.stderr?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -1,5 +1,5 @@\n error: `assert!(true)` will be optimized out by the compiler\n-  --> $DIR/assertions_on_constants.rs:9:5\n+  --> $DIR/assertions_on_constants.rs:11:5\n    |\n LL |     assert!(true);\n    |     ^^^^^^^^^^^^^^\n@@ -9,7 +9,7 @@ LL |     assert!(true);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false)` should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:10:5\n+  --> $DIR/assertions_on_constants.rs:12:5\n    |\n LL |     assert!(false);\n    |     ^^^^^^^^^^^^^^^\n@@ -18,7 +18,7 @@ LL |     assert!(false);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(true)` will be optimized out by the compiler\n-  --> $DIR/assertions_on_constants.rs:11:5\n+  --> $DIR/assertions_on_constants.rs:13:5\n    |\n LL |     assert!(true, \"true message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -27,7 +27,7 @@ LL |     assert!(true, \"true message\");\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false, \"false message\")` should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:12:5\n+  --> $DIR/assertions_on_constants.rs:14:5\n    |\n LL |     assert!(false, \"false message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -36,7 +36,7 @@ LL |     assert!(false, \"false message\");\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false, msg.to_uppercase())` should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:15:5\n+  --> $DIR/assertions_on_constants.rs:17:5\n    |\n LL |     assert!(false, msg.to_uppercase());\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -45,7 +45,7 @@ LL |     assert!(false, msg.to_uppercase());\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(true)` will be optimized out by the compiler\n-  --> $DIR/assertions_on_constants.rs:18:5\n+  --> $DIR/assertions_on_constants.rs:20:5\n    |\n LL |     assert!(B);\n    |     ^^^^^^^^^^^\n@@ -54,7 +54,7 @@ LL |     assert!(B);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false)` should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:21:5\n+  --> $DIR/assertions_on_constants.rs:23:5\n    |\n LL |     assert!(C);\n    |     ^^^^^^^^^^^\n@@ -63,7 +63,7 @@ LL |     assert!(C);\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `assert!(false, \"C message\")` should probably be replaced\n-  --> $DIR/assertions_on_constants.rs:22:5\n+  --> $DIR/assertions_on_constants.rs:24:5\n    |\n LL |     assert!(C, \"C message\");\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -72,7 +72,7 @@ LL |     assert!(C, \"C message\");\n    = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n \n error: `debug_assert!(true)` will be optimized out by the compiler\n-  --> $DIR/assertions_on_constants.rs:24:5\n+  --> $DIR/assertions_on_constants.rs:26:5\n    |\n LL |     debug_assert!(true);\n    |     ^^^^^^^^^^^^^^^^^^^^"}, {"sha": "a756d1cf50659473e1c43bbaca97ed675b9c4755", "filename": "tests/ui/expect_fun_call.fixed", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/tests%2Fui%2Fexpect_fun_call.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/tests%2Fui%2Fexpect_fun_call.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.fixed?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -74,12 +74,12 @@ fn main() {\n             \"foo\"\n         }\n \n-        Some(\"foo\").unwrap_or_else(|| { panic!(get_string()) });\n-        Some(\"foo\").unwrap_or_else(|| { panic!(get_string()) });\n-        Some(\"foo\").unwrap_or_else(|| { panic!(get_string()) });\n+        Some(\"foo\").unwrap_or_else(|| { panic!(\"{}\", get_string()) });\n+        Some(\"foo\").unwrap_or_else(|| { panic!(\"{}\", get_string()) });\n+        Some(\"foo\").unwrap_or_else(|| { panic!(\"{}\", get_string()) });\n \n-        Some(\"foo\").unwrap_or_else(|| { panic!(get_static_str()) });\n-        Some(\"foo\").unwrap_or_else(|| { panic!(get_non_static_str(&0).to_string()) });\n+        Some(\"foo\").unwrap_or_else(|| { panic!(\"{}\", get_static_str()) });\n+        Some(\"foo\").unwrap_or_else(|| { panic!(\"{}\", get_non_static_str(&0).to_string()) });\n     }\n \n     //Issue #3839"}, {"sha": "6dc796f5cee37d7e4effecde55e3775344710dc8", "filename": "tests/ui/expect_fun_call.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/tests%2Fui%2Fexpect_fun_call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/tests%2Fui%2Fexpect_fun_call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fexpect_fun_call.stderr?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -34,31 +34,31 @@ error: use of `expect` followed by a function call\n   --> $DIR/expect_fun_call.rs:77:21\n    |\n LL |         Some(\"foo\").expect(&get_string());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_string()) })`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_string()) })`\n \n error: use of `expect` followed by a function call\n   --> $DIR/expect_fun_call.rs:78:21\n    |\n LL |         Some(\"foo\").expect(get_string().as_ref());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_string()) })`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_string()) })`\n \n error: use of `expect` followed by a function call\n   --> $DIR/expect_fun_call.rs:79:21\n    |\n LL |         Some(\"foo\").expect(get_string().as_str());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_string()) })`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_string()) })`\n \n error: use of `expect` followed by a function call\n   --> $DIR/expect_fun_call.rs:81:21\n    |\n LL |         Some(\"foo\").expect(get_static_str());\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_static_str()) })`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_static_str()) })`\n \n error: use of `expect` followed by a function call\n   --> $DIR/expect_fun_call.rs:82:21\n    |\n LL |         Some(\"foo\").expect(get_non_static_str(&0));\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(get_non_static_str(&0).to_string()) })`\n+   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `unwrap_or_else(|| { panic!(\"{}\", get_non_static_str(&0).to_string()) })`\n \n error: use of `expect` followed by a function call\n   --> $DIR/expect_fun_call.rs:86:16"}, {"sha": "5d5af4e4632970afe821f9b42b82eae5bd445e08", "filename": "tests/ui/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/tests%2Fui%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/tests%2Fui%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -36,7 +36,7 @@ impl From<Option<String>> for Invalid {\n     fn from(s: Option<String>) -> Invalid {\n         let s = s.unwrap();\n         if !s.is_empty() {\n-            panic!(42);\n+            panic!(\"42\");\n         } else if s.parse::<u32>().unwrap() != 42 {\n             panic!(\"{:?}\", s);\n         }"}, {"sha": "f787b30bdabc557641a968518485a53abcb72b7a", "filename": "tests/ui/fallible_impl_from.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/tests%2Fui%2Ffallible_impl_from.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/tests%2Fui%2Ffallible_impl_from.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffallible_impl_from.stderr?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -59,8 +59,8 @@ note: potential failure(s)\n LL |         let s = s.unwrap();\n    |                 ^^^^^^^^^^\n LL |         if !s.is_empty() {\n-LL |             panic!(42);\n-   |             ^^^^^^^^^^^\n+LL |             panic!(\"42\");\n+   |             ^^^^^^^^^^^^^\n LL |         } else if s.parse::<u32>().unwrap() != 42 {\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^\n LL |             panic!(\"{:?}\", s);"}, {"sha": "ae253a0487cb40083457f728c6255163168bc333", "filename": "tests/ui/suspicious_arithmetic_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/70c0f90453701e7d6d9b99aaa1fc6a765937b736/tests%2Fui%2Fsuspicious_arithmetic_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70c0f90453701e7d6d9b99aaa1fc6a765937b736/tests%2Fui%2Fsuspicious_arithmetic_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fsuspicious_arithmetic_impl.rs?ref=70c0f90453701e7d6d9b99aaa1fc6a765937b736", "patch": "@@ -117,7 +117,7 @@ impl Add for Bar {\n     type Output = Bar;\n \n     fn add(self, other: Self) -> Self {\n-        Bar(self.0 & !other.0) // OK: UnNot part of BiExpr as child node\n+        Bar(self.0 & !other.0) // OK: Not part of BiExpr as child node\n     }\n }\n \n@@ -126,7 +126,7 @@ impl Sub for Bar {\n \n     fn sub(self, other: Self) -> Self {\n         if self.0 <= other.0 {\n-            Bar(-(self.0 & other.0)) // OK: UnNeg part of BiExpr as parent node\n+            Bar(-(self.0 & other.0)) // OK: Neg part of BiExpr as parent node\n         } else {\n             Bar(0)\n         }"}]}