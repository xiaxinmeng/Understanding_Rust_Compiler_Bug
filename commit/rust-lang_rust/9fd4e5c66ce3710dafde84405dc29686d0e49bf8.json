{"sha": "9fd4e5c66ce3710dafde84405dc29686d0e49bf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmZDRlNWM2NmNlMzcxMGRhZmRlODQ0MDVkYzI5Njg2ZDBlNDliZjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-11T19:17:30Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-01-11T19:17:30Z"}, "message": "Improve analysis stats legibility", "tree": {"sha": "644de14d957ca7a0f7cd265734723c11c978f20f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/644de14d957ca7a0f7cd265734723c11c978f20f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9fd4e5c66ce3710dafde84405dc29686d0e49bf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9fd4e5c66ce3710dafde84405dc29686d0e49bf8", "html_url": "https://github.com/rust-lang/rust/commit/9fd4e5c66ce3710dafde84405dc29686d0e49bf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9fd4e5c66ce3710dafde84405dc29686d0e49bf8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3aa153b46c2519ddb584454e71d672c810edec48", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aa153b46c2519ddb584454e71d672c810edec48", "html_url": "https://github.com/rust-lang/rust/commit/3aa153b46c2519ddb584454e71d672c810edec48"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "fd1407e6071af41a304b804884ba82c8be49b43a", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9fd4e5c66ce3710dafde84405dc29686d0e49bf8/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9fd4e5c66ce3710dafde84405dc29686d0e49bf8/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=9fd4e5c66ce3710dafde84405dc29686d0e49bf8", "patch": "@@ -58,7 +58,7 @@ impl AnalysisStatsCmd {\n         let mut db_load_sw = self.stop_watch();\n         let (host, vfs) = load_cargo(&self.path, self.load_output_dirs, self.with_proc_macro)?;\n         let db = host.raw_database();\n-        eprintln!(\"Database loaded {}\", db_load_sw.elapsed());\n+        eprintln!(\"{:<20} {}\", \"Database loaded:\", db_load_sw.elapsed());\n \n         let mut analysis_sw = self.stop_watch();\n         let mut num_crates = 0;\n@@ -85,7 +85,7 @@ impl AnalysisStatsCmd {\n             shuffle(&mut rng, &mut visit_queue);\n         }\n \n-        eprintln!(\"Crates in this dir: {}\", num_crates);\n+        eprint!(\"  crates: {}\", num_crates);\n         let mut num_decls = 0;\n         let mut funcs = Vec::new();\n         while let Some(module) = visit_queue.pop() {\n@@ -109,10 +109,8 @@ impl AnalysisStatsCmd {\n                 }\n             }\n         }\n-        eprintln!(\"Total modules found: {}\", visited_modules.len());\n-        eprintln!(\"Total declarations: {}\", num_decls);\n-        eprintln!(\"Total functions: {}\", funcs.len());\n-        eprintln!(\"Item Collection: {}\", analysis_sw.elapsed());\n+        eprintln!(\", mods: {}, decls: {}, fns: {}\", visited_modules.len(), num_decls, funcs.len());\n+        eprintln!(\"{:<20} {}\", \"Item Collection:\", analysis_sw.elapsed());\n \n         if self.randomize {\n             shuffle(&mut rng, &mut funcs);\n@@ -135,7 +133,7 @@ impl AnalysisStatsCmd {\n                     snap.0.infer(f_id.into());\n                 })\n                 .count();\n-            eprintln!(\"Parallel Inference: {}\", inference_sw.elapsed());\n+            eprintln!(\"{:<20} {}\", \"Parallel Inference:\", inference_sw.elapsed());\n         }\n \n         let mut inference_sw = self.stop_watch();\n@@ -273,27 +271,22 @@ impl AnalysisStatsCmd {\n             bar.inc(1);\n         }\n         bar.finish_and_clear();\n-        eprintln!(\"Total expressions: {}\", num_exprs);\n         eprintln!(\n-            \"Expressions of unknown type: {} ({}%)\",\n+            \"  exprs: {}, ??ty: {} ({}%), ?ty: {} ({}%), !ty: {}\",\n+            num_exprs,\n             num_exprs_unknown,\n-            if num_exprs > 0 { num_exprs_unknown * 100 / num_exprs } else { 100 }\n-        );\n-        report_metric(\"unknown type\", num_exprs_unknown, \"#\");\n-\n-        eprintln!(\n-            \"Expressions of partially unknown type: {} ({}%)\",\n+            percentage(num_exprs_unknown, num_exprs),\n             num_exprs_partially_unknown,\n-            if num_exprs > 0 { num_exprs_partially_unknown * 100 / num_exprs } else { 100 }\n+            percentage(num_exprs_partially_unknown, num_exprs),\n+            num_type_mismatches\n         );\n-\n-        eprintln!(\"Type mismatches: {}\", num_type_mismatches);\n+        report_metric(\"unknown type\", num_exprs_unknown, \"#\");\n         report_metric(\"type mismatches\", num_type_mismatches, \"#\");\n \n-        eprintln!(\"Inference: {}\", inference_sw.elapsed());\n+        eprintln!(\"{:<20} {}\", \"Inference:\", inference_sw.elapsed());\n \n         let total_span = analysis_sw.elapsed();\n-        eprintln!(\"Total: {}\", total_span);\n+        eprintln!(\"{:<20} {}\", \"Total:\", total_span);\n         report_metric(\"total time\", total_span.time.as_millis() as u64, \"ms\");\n         if let Some(instructions) = total_span.instructions {\n             report_metric(\"total instructions\", instructions, \"#instr\");\n@@ -325,3 +318,7 @@ fn shuffle<T>(rng: &mut Rand32, slice: &mut [T]) {\n         slice.swap(0, idx);\n     }\n }\n+\n+fn percentage(n: u64, total: u64) -> u64 {\n+    (n * 100).checked_div(total).unwrap_or(100)\n+}"}]}