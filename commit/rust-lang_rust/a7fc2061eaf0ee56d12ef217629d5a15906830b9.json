{"sha": "a7fc2061eaf0ee56d12ef217629d5a15906830b9", "node_id": "C_kwDOAAsO6NoAKGE3ZmMyMDYxZWFmMGVlNTZkMTJlZjIxNzYyOWQ1YTE1OTA2ODMwYjk", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-10T17:25:54Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-10T17:25:54Z"}, "message": "Show enum completions for single variant enums in irrefutable patterns", "tree": {"sha": "05d7c8b231266ef84388c9e9782383a8c8b297e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05d7c8b231266ef84388c9e9782383a8c8b297e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a7fc2061eaf0ee56d12ef217629d5a15906830b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a7fc2061eaf0ee56d12ef217629d5a15906830b9", "html_url": "https://github.com/rust-lang/rust/commit/a7fc2061eaf0ee56d12ef217629d5a15906830b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a7fc2061eaf0ee56d12ef217629d5a15906830b9/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc8efca0c8226cb250825eb40ccc68787649a83c", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc8efca0c8226cb250825eb40ccc68787649a83c", "html_url": "https://github.com/rust-lang/rust/commit/bc8efca0c8226cb250825eb40ccc68787649a83c"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "b3b27f251f6f3d520de016e30b24771345a75ee1", "filename": "crates/ide_completion/src/completions/pattern.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a7fc2061eaf0ee56d12ef217629d5a15906830b9/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fc2061eaf0ee56d12ef217629d5a15906830b9/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=a7fc2061eaf0ee56d12ef217629d5a15906830b9", "patch": "@@ -1,5 +1,7 @@\n //! Completes constants and paths in unqualified patterns.\n \n+use hir::db::DefDatabase;\n+\n use crate::{\n     context::{PatternContext, PatternRefutability},\n     CompletionContext, Completions,\n@@ -13,11 +15,12 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n         }\n         _ => return,\n     };\n+    let single_variant_enum = |enum_: hir::Enum| ctx.db.enum_data(enum_.into()).variants.len() == 1;\n \n-    if refutable {\n-        if let Some(hir::Adt::Enum(e)) =\n-            ctx.expected_type.as_ref().and_then(|ty| ty.strip_references().as_adt())\n-        {\n+    if let Some(hir::Adt::Enum(e)) =\n+        ctx.expected_type.as_ref().and_then(|ty| ty.strip_references().as_adt())\n+    {\n+        if refutable || single_variant_enum(e) {\n             super::enum_variants_with_paths(acc, ctx, e, |acc, ctx, variant, path| {\n                 acc.add_qualified_variant_pat(ctx, variant, path.clone());\n                 acc.add_qualified_enum_variant(ctx, variant, path);\n@@ -28,20 +31,20 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n     // FIXME: ideally, we should look at the type we are matching against and\n     // suggest variants + auto-imports\n     ctx.process_all_names(&mut |name, res| {\n-        let add_resolution = match &res {\n+        let add_resolution = match res {\n             hir::ScopeDef::ModuleDef(def) => match def {\n                 hir::ModuleDef::Adt(hir::Adt::Struct(strukt)) => {\n-                    acc.add_struct_pat(ctx, *strukt, Some(name.clone()));\n+                    acc.add_struct_pat(ctx, strukt, Some(name.clone()));\n                     true\n                 }\n-                hir::ModuleDef::Variant(variant) if refutable => {\n-                    acc.add_variant_pat(ctx, *variant, Some(name.clone()));\n+                hir::ModuleDef::Variant(variant)\n+                    if refutable || single_variant_enum(variant.parent_enum(ctx.db)) =>\n+                {\n+                    acc.add_variant_pat(ctx, variant, Some(name.clone()));\n                     true\n                 }\n-                hir::ModuleDef::Adt(hir::Adt::Enum(..))\n-                | hir::ModuleDef::Variant(..)\n-                | hir::ModuleDef::Const(..)\n-                | hir::ModuleDef::Module(..) => refutable,\n+                hir::ModuleDef::Adt(hir::Adt::Enum(e)) => refutable || single_variant_enum(e),\n+                hir::ModuleDef::Const(..) | hir::ModuleDef::Module(..) => refutable,\n                 _ => false,\n             },\n             hir::ScopeDef::MacroDef(mac) => mac.is_fn_like(),"}, {"sha": "99e20b6ed092c35dc59e6209e75fc1d24cbd003f", "filename": "crates/ide_completion/src/tests/pattern.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a7fc2061eaf0ee56d12ef217629d5a15906830b9/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a7fc2061eaf0ee56d12ef217629d5a15906830b9/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs?ref=a7fc2061eaf0ee56d12ef217629d5a15906830b9", "patch": "@@ -130,18 +130,24 @@ fn foo() {\n fn irrefutable() {\n     check(\n         r#\"\n+enum SingleVariantEnum {\n+    Variant\n+}\n+use SingleVariantEnum::Variant;\n fn foo() {\n    let a$0\n }\n \"#,\n         expect![[r##\"\n             kw mut\n-            bn Record    Record { field$1 }$0\n+            bn Record            Record { field$1 }$0\n             st Record\n-            bn Tuple     Tuple($1)$0\n+            bn Tuple             Tuple($1)$0\n             st Tuple\n+            ev Variant\n+            en SingleVariantEnum\n             st Unit\n-            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026)         #[macro_export] macro_rules! makro\n         \"##]],\n     );\n }"}]}