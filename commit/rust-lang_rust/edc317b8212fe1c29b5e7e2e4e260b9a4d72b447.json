{"sha": "edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYzMxN2I4MjEyZmUxYzI5YjVlN2UyZTRlMjYwYjlhNGQ3MmI0NDc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-04T02:16:27Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-10-04T22:07:49Z"}, "message": "Remove arg vectors from main functions. Stop supporting them.", "tree": {"sha": "3bdc8d5103affca408a0ff2bc2325f4869ecb375", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3bdc8d5103affca408a0ff2bc2325f4869ecb375"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "html_url": "https://github.com/rust-lang/rust/commit/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e3f458e6390d66b9634e7dce4aa7e91c091aebc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/e3f458e6390d66b9634e7dce4aa7e91c091aebc6", "html_url": "https://github.com/rust-lang/rust/commit/e3f458e6390d66b9634e7dce4aa7e91c091aebc6"}], "stats": {"total": 196, "additions": 95, "deletions": 101}, "files": [{"sha": "e5ca758ebf4e83e959434ee61c36a1c3d24f812b", "filename": "src/cargo/cargo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Fcargo%2Fcargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Fcargo%2Fcargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcargo%2Fcargo.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -1889,7 +1889,8 @@ Commands:\n     set-method      Change the method for a source.\");\n }\n \n-fn main(argv: ~[~str]) {\n+fn main() {\n+    let argv = os::args();\n     let o = build_cargo_options(argv);\n \n     if vec::len(o.free) < 2u {"}, {"sha": "55fa6740268740901c5ef2207a64db50743b4d8d", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -12,7 +12,8 @@ use common::mode_pretty;\n use common::mode;\n use util::logv;\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let config = parse_config(args);\n     log_config(config);\n     run_tests(config);"}, {"sha": "1e3c0bcfbfc3ea98e5540a8ec6914e43be83462b", "filename": "src/etc/combine-tests.py", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Fetc%2Fcombine-tests.py", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Fetc%2Fcombine-tests.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fcombine-tests.py?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -19,7 +19,6 @@ def scrub(b):\n run_pass = os.path.join(src_dir, \"src\", \"test\", \"run-pass\")\n run_pass = os.path.abspath(run_pass)\n stage2_tests = []\n-take_args = {}\n \n for t in os.listdir(run_pass):\n     if t.endswith(\".rs\") and not (\n@@ -30,8 +29,6 @@ def scrub(b):\n                 \"xfail-fast\" in s or\n                 \"xfail-win32\" in s):\n             stage2_tests.append(t)\n-            if \"fn main(args:\" in s or \"fn main(++args:\" in s:\n-                take_args[t] = True\n         f.close()\n \n stage2_tests.sort()\n@@ -64,9 +61,6 @@ def scrub(b):\n     p = os.path.join(\"test\", \"run-pass\", t)\n     p = p.replace(\"\\\\\", \"\\\\\\\\\")\n     d.write(\"    out.write_str(~\\\"run-pass [stage2]: %s\\\\n\\\");\\n\" % p)\n-    if t in take_args:\n-        d.write(\"    t_%d::main(~[~\\\"arg0\\\"]);\\n\" % i)\n-    else:\n-        d.write(\"    t_%d::main();\\n\" % i)\n+    d.write(\"    t_%d::main();\\n\" % i)\n     i += 1\n d.write(\"}\\n\")"}, {"sha": "3e31287e3cd19b49f7ef0d691819f0115b3efe08", "filename": "src/fuzzer/fuzzer.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ffuzzer%2Ffuzzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ffuzzer%2Ffuzzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffuzzer%2Ffuzzer.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -599,7 +599,8 @@ fn check_variants(files: &[Path], cx: context) {\n     }\n }\n \n-fn main(args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     if vec::len(args) != 2u {\n         error!(\"usage: %s <testdir>\", args[0]);\n         return;"}, {"sha": "5fc48e2b6a2cdf71a7efed1f66f1474b74e2f361", "filename": "src/rustc/driver/rustc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Frustc%2Fdriver%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Frustc%2Fdriver%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fdriver%2Frustc.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -277,7 +277,8 @@ fn monitor(+f: fn~(diagnostic::emitter)) {\n     }\n }\n \n-fn main(args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     do monitor |demitter| {\n         run_compiler(args, demitter);\n     }"}, {"sha": "1a6cc6dd895e03f71f37d51a2143cf34d901e6ac", "filename": "src/rustc/front/test.rs", "status": "modified", "additions": 13, "deletions": 27, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Frustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Frustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Ffront%2Ftest.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -415,34 +415,12 @@ fn mk_test_wrapper(cx: test_ctxt,\n }\n \n fn mk_main(cx: test_ctxt) -> @ast::item {\n-    let str_pt = path_node(~[cx.sess.ident_of(~\"str\")]);\n-    let str_ty_inner = @{id: cx.sess.next_node_id(),\n-                         node: ast::ty_path(str_pt, cx.sess.next_node_id()),\n-                         span: dummy_sp()};\n-    let str_ty = @{id: cx.sess.next_node_id(),\n-                   node: ast::ty_uniq({ty: str_ty_inner, mutbl: ast::m_imm}),\n-                   span: dummy_sp()};\n-    let args_mt = {ty: str_ty, mutbl: ast::m_imm};\n-    let args_ty_inner = @{id: cx.sess.next_node_id(),\n-                          node: ast::ty_vec(args_mt),\n-                          span: dummy_sp()};\n-    let args_ty = {id: cx.sess.next_node_id(),\n-                   node: ast::ty_uniq({ty: args_ty_inner, mutbl: ast::m_imm}),\n-                   span: dummy_sp()};\n-\n-\n-    let args_arg: ast::arg =\n-        {mode: ast::expl(ast::by_val),\n-         ty: @args_ty,\n-         ident: cx.sess.ident_of(~\"args\"),\n-         id: cx.sess.next_node_id()};\n-\n     let ret_ty = {id: cx.sess.next_node_id(),\n                   node: ast::ty_nil,\n                   span: dummy_sp()};\n \n     let decl: ast::fn_decl =\n-        {inputs: ~[args_arg],\n+        {inputs: ~[],\n          output: @ret_ty,\n          cf: ast::return_val};\n \n@@ -465,16 +443,24 @@ fn mk_main(cx: test_ctxt) -> @ast::item {\n }\n \n fn mk_test_main_call(cx: test_ctxt) -> @ast::expr {\n-\n-    // Get the args passed to main so we can pass the to test_main\n-    let args_path = path_node(~[cx.sess.ident_of(~\"args\")]);\n+    // Call os::args to generate the vector of test_descs\n+    let args_path = path_node(~[\n+        cx.sess.ident_of(~\"os\"),\n+        cx.sess.ident_of(~\"args\")\n+    ]);\n \n     let args_path_expr_: ast::expr_ = ast::expr_path(args_path);\n \n     let args_path_expr: ast::expr =\n         {id: cx.sess.next_node_id(), callee_id: cx.sess.next_node_id(),\n          node: args_path_expr_, span: dummy_sp()};\n \n+    let args_call_expr_ = ast::expr_call(@args_path_expr, ~[], false);\n+\n+    let args_call_expr: ast::expr =\n+        {id: cx.sess.next_node_id(), callee_id: cx.sess.next_node_id(),\n+         node: args_call_expr_, span: dummy_sp()};\n+\n     // Call __test::test to generate the vector of test_descs\n     let test_path = path_node(~[cx.sess.ident_of(~\"tests\")]);\n \n@@ -503,7 +489,7 @@ fn mk_test_main_call(cx: test_ctxt) -> @ast::expr {\n \n     let test_main_call_expr_: ast::expr_ =\n         ast::expr_call(@test_main_path_expr,\n-                       ~[@args_path_expr, @test_call_expr], false);\n+                       ~[@args_call_expr, @test_call_expr], false);\n \n     let test_main_call_expr: ast::expr =\n         {id: cx.sess.next_node_id(), callee_id: cx.sess.next_node_id(),"}, {"sha": "ce596586ddc4975fce65b8a924d83c7f47b13cd3", "filename": "src/rustc/middle/trans/base.rs", "status": "modified", "additions": 4, "deletions": 16, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -1953,32 +1953,23 @@ fn register_fn_fuller(ccx: @crate_ctxt, sp: span, path: path,\n            ast_map::path_to_str(path, ccx.sess.parse_sess.interner));\n \n     let is_main = is_main_name(path) && !ccx.sess.building_library;\n-    if is_main { create_main_wrapper(ccx, sp, llfn, node_type); }\n+    if is_main { create_main_wrapper(ccx, sp, llfn); }\n     llfn\n }\n \n // Create a _rust_main(args: ~[str]) function which will be called from the\n // runtime rust_start function\n-fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n-                       main_node_type: ty::t) {\n+fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef) {\n \n     if ccx.main_fn != None::<ValueRef> {\n         ccx.sess.span_fatal(sp, ~\"multiple 'main' functions\");\n     }\n \n-    let main_takes_argv =\n-        // invariant!\n-        match ty::get(main_node_type).sty {\n-          ty::ty_fn(ref fn_ty) => fn_ty.sig.inputs.len() != 0u,\n-          _ => ccx.sess.span_fatal(sp, ~\"main has a non-function type\")\n-        };\n-\n-    let llfn = create_main(ccx, main_llfn, main_takes_argv);\n+    let llfn = create_main(ccx, main_llfn);\n     ccx.main_fn = Some(llfn);\n     create_entry_fn(ccx, llfn);\n \n-    fn create_main(ccx: @crate_ctxt, main_llfn: ValueRef,\n-                   takes_argv: bool) -> ValueRef {\n+    fn create_main(ccx: @crate_ctxt, main_llfn: ValueRef) -> ValueRef {\n         let unit_ty = ty::mk_estr(ccx.tcx, ty::vstore_uniq);\n         let vecarg_ty: ty::arg =\n             {mode: ast::expl(ast::by_val),\n@@ -1998,9 +1989,6 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef,\n         let lloutputarg = llvm::LLVMGetParam(llfdecl, 0 as c_uint);\n         let llenvarg = llvm::LLVMGetParam(llfdecl, 1 as c_uint);\n         let mut args = ~[lloutputarg, llenvarg];\n-        if takes_argv {\n-            args.push(llvm::LLVMGetParam(llfdecl, 2 as c_uint));\n-        }\n         Call(bcx, main_llfn, args);\n \n         build_return(bcx);"}, {"sha": "3a9471139f9645e8010d466e28d1de8ec89af1db", "filename": "src/rustc/middle/typeck.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Frustc%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Frustc%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustc%2Fmiddle%2Ftypeck.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -301,14 +301,12 @@ fn check_main_fn_ty(ccx: @crate_ctxt,\n             }\n             let mut ok = ty::type_is_nil(fn_ty.sig.output);\n             let num_args = vec::len(fn_ty.sig.inputs);\n-            ok &= num_args == 0u || num_args == 1u &&\n-                arg_is_argv_ty(tcx, fn_ty.sig.inputs[0]);\n+            ok &= num_args == 0u;\n             if !ok {\n                 tcx.sess.span_err(\n                     main_span,\n                     fmt!(\"Wrong type in main function: found `%s`, \\\n-                          expected `extern fn(++v: ~[~str]) -> ()` \\\n-                          or `extern fn() -> ()`\",\n+                          expected `fn() -> ()`\",\n                          ty_to_str(tcx, main_t)));\n             }\n         }"}, {"sha": "b79b6ba218994cdf317e5bf5f54861473b9c0bb7", "filename": "src/rustdoc/rustdoc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Frustdoc%2Frustdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Frustdoc%2Frustdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Frustdoc.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -3,7 +3,8 @@ use doc::Item;\n use pass::Pass;\n use config::Config;\n \n-fn main(args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n \n     if args.contains(&~\"-h\") || args.contains(&~\"--help\") {\n         config::usage();"}, {"sha": "09a5415823ce621a92581f6aa25429963673265d", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -142,7 +142,8 @@ fn empty_results() -> Results {\n     }\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let num_keys = {\n         if args.len() == 2 {\n             uint::from_str(args[1]).get()"}, {"sha": "6f90a2c99e810660cbb924bc3ab89a0bdeb76a95", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -8,7 +8,8 @@ use std::map::{Map, HashMap};\n \n use io::{Reader, ReaderUtil};\n \n-fn main(++argv: ~[~str]) {\n+fn main() {\n+    let argv = os::args();\n     #macro[\n         [#bench[id],\n          maybe_run_test(argv, #stringify(id), id)"}, {"sha": "4b1e9519715ee4ec75d039afd199019823412695", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -1,4 +1,5 @@\n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"10000000\"]\n     } else if args.len() <= 1u {"}, {"sha": "1adbd20f4cdec03036c396ce904db9dc566e6604", "filename": "src/test/bench/core-vec-append.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fcore-vec-append.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-vec-append.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -20,7 +20,8 @@ fn collect_dvec(num: uint) -> ~[uint] {\n     return dvec::unwrap(move result);\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"50000000\"]\n     } else if args.len() <= 1u {"}, {"sha": "5acde71c6fd6d35143fe8d2e0476999abdb010ce", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -384,7 +384,8 @@ fn validate(edges: ~[(node_id, node_id)],\n     true\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"15\", ~\"48\"]\n     } else if args.len() <= 1u {"}, {"sha": "d60937af13c8b45ccc14085d3909b4001c275017", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -90,7 +90,8 @@ fn run(args: &[~str]) {\n     assert result == num_bytes * size;\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"1000000\", ~\"10000\"]\n     } else if args.len() <= 1u {"}, {"sha": "e2d115600eff91588a6b58eb3e39d884c8fbf647", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -87,7 +87,8 @@ fn run(args: &[~str]) {\n     assert result == num_bytes * size;\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"1000000\", ~\"8\"]\n     } else if args.len() <= 1u {"}, {"sha": "f657884eeef816829bdff0bb0b92c80cdcc24bee", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -56,7 +56,8 @@ fn thread_ring(i: uint,\n     };\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100\", ~\"10000\"]\n     } else if args.len() <= 1u {"}, {"sha": "73942d4ddf8f0e6ecafc44577b342d3c78a88208", "filename": "src/test/bench/msgsend-ring-pipes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-pipes.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -52,7 +52,8 @@ fn thread_ring(i: uint,\n     };\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100\", ~\"10000\"]\n     } else if args.len() <= 1u {"}, {"sha": "386496f459d8eed001df23dcab1b6e708f73e983", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -56,7 +56,8 @@ fn thread_ring(i: uint,\n     };\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100\", ~\"10000\"]\n     } else if args.len() <= 1u {"}, {"sha": "2be21d946af236fd8b5e62d95296277292395b67", "filename": "src/test/bench/msgsend-ring.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fmsgsend-ring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -21,7 +21,8 @@ fn thread_ring(i: uint,\n     };\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100\", ~\"10000\"]\n     } else if args.len() <= 1u {"}, {"sha": "8564adaab72909cf15e786d9aa4211ee1473c9b4", "filename": "src/test/bench/msgsend.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fmsgsend.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fmsgsend.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -57,7 +57,8 @@ fn run(args: ~[~str]) {\n     io::stdout().write_str(fmt!(\"Throughput=%f per sec\\n\", thruput));\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"1000000\", ~\"10000\"]\n     } else if args.len() <= 1u {"}, {"sha": "edccf15a44015dfe40e5168e056e9f44a4c0a67f", "filename": "src/test/bench/shootout-ackermann.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-ackermann.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-ackermann.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -12,7 +12,8 @@ fn ack(m: int, n: int) -> int {\n     }\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"12\"]\n     } else if args.len() <= 1u {"}, {"sha": "be58bc0595e94efe2b401f4a873b459849a7058f", "filename": "src/test/bench/shootout-binarytrees.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-binarytrees.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -25,7 +25,8 @@ fn bottom_up_tree(arena: &r/arena::Arena,\n     return arena.alloc(|| nil);\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"17\"]\n     } else if args.len() <= 1u {"}, {"sha": "11c06d45bc8807116a908261a673905c7f719865", "filename": "src/test/bench/shootout-chameneos-redux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-chameneos-redux.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -178,7 +178,8 @@ fn rendezvous(nn: uint, set: ~[color]) {\n     io::println(show_number(creatures_met));\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"200000\"]\n     } else if args.len() <= 1u {"}, {"sha": "1fbdaddaead8af2c1c2455be5ca4482d0e45ec1c", "filename": "src/test/bench/shootout-fannkuchredux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fannkuchredux.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -56,7 +56,8 @@ fn fannkuch(n: int) -> int {\n     return flips;\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"10\"]\n     } else if args.len() <= 1u {"}, {"sha": "f230664495f16be0a48cb0516e6e85313ed3f4d8", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -70,7 +70,8 @@ fn make_repeat_fasta(wr: io::Writer, id: ~str, desc: ~str, s: ~str, n: int) unsa\n \n fn acid(ch: char, prob: u32) -> aminoacids { return {ch: ch, prob: prob}; }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         // alioth tests k-nucleotide with this data at 25,000,000\n         ~[~\"\", ~\"5000000\"]"}, {"sha": "548dd1e7d79dfebb2772a2df6c32d32711e74337", "filename": "src/test/bench/shootout-fibo.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-fibo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fibo.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -8,7 +8,8 @@ fn fib(n: int) -> int {\n     }\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"40\"]\n     } else if args.len() <= 1u {"}, {"sha": "2e9f8e98dd37459f5c933c702436307cb2c55a84", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -128,7 +128,8 @@ fn make_sequence_processor(sz: uint, from_parent: pipes::Port<~[u8]>,\n }\n \n // given a FASTA file on stdin, process sequence THREE\n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n    let rdr = if os::getenv(~\"RUST_BENCH\").is_some() {\n        // FIXME: Using this compile-time env variable is a crummy way to\n        // get to this massive data set, but #include_bin chokes on it (#2598)"}, {"sha": "ae162221503e4e0b66df45bb4b68a297cf805ac4", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -125,7 +125,8 @@ fn make_sequence_processor(sz: uint, from_parent: comm::Port<~[u8]>,\n }\n \n // given a FASTA file on stdin, process sequence THREE\n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n    let rdr = if os::getenv(~\"RUST_BENCH\").is_some() {\n        // FIXME: Using this compile-time env variable is a crummy way to\n        // get to this massive data set, but #include_bin chokes on it (#2598)"}, {"sha": "8ab58207fd1444706ed1c12b60829f1e5f28c587", "filename": "src/test/bench/shootout-mandelbrot.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-mandelbrot.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -151,7 +151,8 @@ fn writer(path: ~str, writech: comm::Chan<comm::Chan<line>>, size: uint)\n     }\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"4000\", ~\"10\"]\n     } else {"}, {"sha": "a1199511907c760e0d85b1e0149c3f181676c4b3", "filename": "src/test/bench/shootout-nbody.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-nbody.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-nbody.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -14,7 +14,8 @@ extern mod libc {\n     fn sqrt(n: float) -> float;\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"4000000\"]\n     } else if args.len() <= 1u {"}, {"sha": "fa97e796bd1c832d2f0ca29a864bbd47b4de93f0", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -81,7 +81,8 @@ fn stress(num_tasks: int) {\n     for results.each |r| { future::get(r); }\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"20\"]\n     } else if args.len() <= 1u {"}, {"sha": "781ecce7ff72d80a1a48788d64a407558ebec88c", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -40,7 +40,8 @@ fn eval_AtA_times_u(u: ~[const float], AtAu: ~[mut float]) {\n     eval_At_times_u(v, AtAu);\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"2000\"]\n     } else if args.len() <= 1u {"}, {"sha": "8bee12b224375e3fb7250a2ac082203f963c0361", "filename": "src/test/bench/shootout-threadring.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fshootout-threadring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-threadring.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -37,7 +37,8 @@ fn roundtrip(id: int, p: comm::Port<int>, ch: comm::Chan<int>) {\n     }\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"2000000\"]\n     } else if args.len() <= 1u {"}, {"sha": "2ac651862213b4bf991739a868d9cc4656c38b3a", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -17,7 +17,8 @@ fn check_sequential(min: uint, max: uint, map: SmallIntMap<uint>) {\n     }\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100000\", ~\"100\"]\n     } else if args.len() <= 1u {"}, {"sha": "2e8ef0bac5827748e2f99b90c768b7c7681fc54c", "filename": "src/test/bench/sudoku.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fsudoku.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Fsudoku.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fsudoku.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -126,7 +126,8 @@ fn write_grid(f: io::Writer, g: grid_t) {\n      }\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let grid = if vec::len(args) == 1u {\n         // FIXME create sudoku inline since nested vec consts dont work yet\n         // (#571)"}, {"sha": "2055993d441e20c684ae54d3e8b3f5e52831f2de", "filename": "src/test/bench/task-perf-jargon-metal-smoke.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-jargon-metal-smoke.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -23,7 +23,8 @@ fn child_generation(gens_left: uint, -c: pipes::Chan<()>) {\n     }\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100000\"]\n     } else if args.len() <= 1u {"}, {"sha": "a59b932f7e12b9b35cf03433b017fe2e221d93a7", "filename": "src/test/bench/task-perf-linked-failure.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-linked-failure.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -37,7 +37,8 @@ fn spawn_supervised_blocking(myname: &str, +f: fn~()) {\n     assert x == task::Success;\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100000\"]\n     } else if args.len() <= 1u {"}, {"sha": "39fe02eac7996ae979cf6b8aac593892bc264021", "filename": "src/test/bench/task-perf-one-million.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -48,7 +48,8 @@ fn calc(children: uint, parent_ch: comm::Chan<msg>) {\n     comm::send(parent_ch, done(sum + 1));\n }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"100000\"]\n     } else if args.len() <= 1u {"}, {"sha": "dfa53c3328b5e98133f977ffa7821617adf58f4a", "filename": "src/test/bench/task-perf-spawnalot.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-spawnalot.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -8,7 +8,8 @@ fn f(&&n: uint) {\n \n fn g() { }\n \n-fn main(++args: ~[~str]) {\n+fn main() {\n+    let args = os::args();\n     let args = if os::getenv(~\"RUST_BENCH\").is_some() {\n         ~[~\"\", ~\"400\"]\n     } else if args.len() <= 1u {"}, {"sha": "1002e97497d08403d609b866169213b9383e0035", "filename": "src/test/bench/task-perf-word-count-generic.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-word-count-generic.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -288,7 +288,8 @@ mod map_reduce {\n     }\n }\n \n-fn main(++argv: ~[~str]) {\n+fn main() {\n+    let argv = os::args();\n     if vec::len(argv) < 2u && !os::getenv(~\"RUST_BENCH\").is_some() {\n         let out = io::stdout();\n "}, {"sha": "3bd1f47307b7e276ece113da6fe696e44d86d805", "filename": "src/test/compile-fail/bad-main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fcompile-fail%2Fbad-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc317b8212fe1c29b5e7e2e4e260b9a4d72b447/src%2Ftest%2Fcompile-fail%2Fbad-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-main.rs?ref=edc317b8212fe1c29b5e7e2e4e260b9a4d72b447", "patch": "@@ -1,3 +1,3 @@\n-// error-pattern:expected `extern fn(++v: ~[~str])\n+// error-pattern:expected `fn()\n \n fn main(x: int) { }"}, {"sha": "a697e0f73dcb470dfde028ceb80b195a56064e8d", "filename": "src/test/run-pass/argv.rs", "status": "removed", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e3f458e6390d66b9634e7dce4aa7e91c091aebc6/src%2Ftest%2Frun-pass%2Fargv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f458e6390d66b9634e7dce4aa7e91c091aebc6/src%2Ftest%2Frun-pass%2Fargv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fargv.rs?ref=e3f458e6390d66b9634e7dce4aa7e91c091aebc6", "patch": "@@ -1,5 +0,0 @@\n-fn main(++args: ~[~str]) {\n-    let vs: ~[~str] = ~[~\"hi\", ~\"there\", ~\"this\", ~\"is\", ~\"a\", ~\"vec\"];\n-    let vvs: ~[~[~str]] = ~[args, vs];\n-    for vvs.each |vs| { for vs.each |s| { log(debug, *s); } }\n-}"}, {"sha": "242392ccbe1726bf45dda3b0439835f96178588f", "filename": "src/test/run-pass/command-line-args.rs", "status": "removed", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e3f458e6390d66b9634e7dce4aa7e91c091aebc6/src%2Ftest%2Frun-pass%2Fcommand-line-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f458e6390d66b9634e7dce4aa7e91c091aebc6/src%2Ftest%2Frun-pass%2Fcommand-line-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcommand-line-args.rs?ref=e3f458e6390d66b9634e7dce4aa7e91c091aebc6", "patch": "@@ -1,3 +0,0 @@\n-\n-\n-fn main(++args: ~[~str]) { log(debug, args[0]); }"}, {"sha": "39bbd07c66b12ce0aa4de9fbf59494af3cd6b849", "filename": "src/test/run-pass/main-ivec.rs", "status": "removed", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e3f458e6390d66b9634e7dce4aa7e91c091aebc6/src%2Ftest%2Frun-pass%2Fmain-ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3f458e6390d66b9634e7dce4aa7e91c091aebc6/src%2Ftest%2Frun-pass%2Fmain-ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmain-ivec.rs?ref=e3f458e6390d66b9634e7dce4aa7e91c091aebc6", "patch": "@@ -1 +0,0 @@\n-fn main(++args: ~[~str]) { for args.each |s| { log(debug, *s); } }"}]}