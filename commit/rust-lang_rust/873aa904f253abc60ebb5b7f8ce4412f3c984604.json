{"sha": "873aa904f253abc60ebb5b7f8ce4412f3c984604", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3M2FhOTA0ZjI1M2FiYzYwZWJiNWI3ZjhjZTQ0MTJmM2M5ODQ2MDQ=", "commit": {"author": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2021-06-21T13:47:39Z"}, "committer": {"name": "Daiki Ihara", "email": "sasurau4@gmail.com", "date": "2021-06-21T13:47:39Z"}, "message": "Fix var name", "tree": {"sha": "a109040c73f6cdf3a830323f47a3ae067cb19b92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a109040c73f6cdf3a830323f47a3ae067cb19b92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/873aa904f253abc60ebb5b7f8ce4412f3c984604", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/873aa904f253abc60ebb5b7f8ce4412f3c984604", "html_url": "https://github.com/rust-lang/rust/commit/873aa904f253abc60ebb5b7f8ce4412f3c984604", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/873aa904f253abc60ebb5b7f8ce4412f3c984604/comments", "author": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sasurau4", "id": 13580199, "node_id": "MDQ6VXNlcjEzNTgwMTk5", "avatar_url": "https://avatars.githubusercontent.com/u/13580199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sasurau4", "html_url": "https://github.com/sasurau4", "followers_url": "https://api.github.com/users/sasurau4/followers", "following_url": "https://api.github.com/users/sasurau4/following{/other_user}", "gists_url": "https://api.github.com/users/sasurau4/gists{/gist_id}", "starred_url": "https://api.github.com/users/sasurau4/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sasurau4/subscriptions", "organizations_url": "https://api.github.com/users/sasurau4/orgs", "repos_url": "https://api.github.com/users/sasurau4/repos", "events_url": "https://api.github.com/users/sasurau4/events{/privacy}", "received_events_url": "https://api.github.com/users/sasurau4/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7a04f72220736025820adb7ac5c9b2ce41e4a4c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a04f72220736025820adb7ac5c9b2ce41e4a4c2", "html_url": "https://github.com/rust-lang/rust/commit/7a04f72220736025820adb7ac5c9b2ce41e4a4c2"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "870d4f66563ee87c5c583fe6144157694b7e0caf", "filename": "crates/ide_assists/src/handlers/extract_function.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/873aa904f253abc60ebb5b7f8ce4412f3c984604/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/873aa904f253abc60ebb5b7f8ce4412f3c984604/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=873aa904f253abc60ebb5b7f8ce4412f3c984604", "patch": "@@ -109,15 +109,15 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option\n \n             let new_indent = IndentLevel::from_node(&insert_after);\n             let old_indent = fun.body.indent_level();\n-            let is_body_contains_await = body_contains_await(&fun.body);\n+            let body_contains_await = body_contains_await(&fun.body);\n \n             builder.replace(\n                 target_range,\n-                format_replacement(ctx, &fun, old_indent, is_body_contains_await),\n+                format_replacement(ctx, &fun, old_indent, body_contains_await),\n             );\n \n             let fn_def =\n-                format_function(ctx, module, &fun, old_indent, new_indent, is_body_contains_await);\n+                format_function(ctx, module, &fun, old_indent, new_indent, body_contains_await);\n             let insert_offset = insert_after.text_range().end();\n             match ctx.config.snippet_cap {\n                 Some(cap) => builder.insert_snippet(cap, insert_offset, fn_def),\n@@ -963,7 +963,7 @@ fn format_replacement(\n     ctx: &AssistContext,\n     fun: &Function,\n     indent: IndentLevel,\n-    is_body_contains_await: bool,\n+    body_contains_await: bool,\n ) -> String {\n     let ret_ty = fun.return_type(ctx);\n \n@@ -1004,7 +1004,7 @@ fn format_replacement(\n         }\n     }\n     format_to!(buf, \"{}\", expr);\n-    if is_body_contains_await {\n+    if body_contains_await {\n         buf.push_str(\".await\");\n     }\n     if fun.ret_ty.is_unit()\n@@ -1135,13 +1135,13 @@ fn format_function(\n     fun: &Function,\n     old_indent: IndentLevel,\n     new_indent: IndentLevel,\n-    is_body_contains_await: bool,\n+    body_contains_await: bool,\n ) -> String {\n     let mut fn_def = String::new();\n     let params = make_param_list(ctx, module, fun);\n     let ret_ty = make_ret_ty(ctx, module, fun);\n     let body = make_body(ctx, old_indent, new_indent, fun);\n-    let async_kw = if is_body_contains_await { \"async \" } else { \"\" };\n+    let async_kw = if body_contains_await { \"async \" } else { \"\" };\n     match ctx.config.snippet_cap {\n         Some(_) => format_to!(fn_def, \"\\n\\n{}{}fn $0{}{}\", new_indent, async_kw, fun.name, params),\n         None => format_to!(fn_def, \"\\n\\n{}{}fn {}{}\", new_indent, async_kw, fun.name, params),"}]}