{"sha": "d8843d9d82950eeb27bdce496f6179b085549d29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4ODQzZDlkODI5NTBlZWIyN2JkY2U0OTZmNjE3OWIwODU1NDlkMjk=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-01-16T17:29:51Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-16T17:29:51Z"}, "message": "Rollup merge of #80670 - the8472:fix-zip-trusted-random-access-composition, r=m-ou-se\n\nTrustedRandomAaccess specialization composes incorrectly for nested iter::Zips\n\nI found this while working on improvements for TRA.\n\nAfter partially consuming a Zip adapter and then wrapping it into another Zip where the adapters use their `TrustedRandomAccess` specializations leads to the outer adapter returning elements which should have already been consumed.\n\nIf the optimizer gets tripped up by the addition this might affect performance for chained `zip()` iterators even when the inner one is not partially advanced but it would require more extensive fixes to `TrustedRandomAccess` to communicate those offsets earlier.\n\nIncluded test fails on nightly, [playground link](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=24fa1edf8a104ff31f5a24830593b01f)", "tree": {"sha": "5d207c7bb5b66b95b81040b8b02f683fdf1f4ce9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d207c7bb5b66b95b81040b8b02f683fdf1f4ce9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8843d9d82950eeb27bdce496f6179b085549d29", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgAyKQCRBK7hj4Ov3rIwAAdHIIAIOvaY7h0eS+DVwBQVaghucf\n8EHdqEVoOzVVixf3LdhhlzDgIFiHS2/MJzbArP/B8h94zn3Gh69O06oHtt82ufS/\nNT9XKMC/E5yI3dtF2hU+23xfICQC4WDuhesPs2tT6pfWZIHAow+0LMR/ge6+rtXj\n3hV5BvV/8u6e1s/Vu8NCrSDJkaD4UjpY0oNy8y0dFnVWnE+74ADwj0a+1LeXEFKU\ngIwSx1XyZXo2MNnEqxoRHPYCQERQE1YANx5STbUJ+GSSD1SZseYetGpRipxg7JnZ\nP9SIDLa3V578bPlcz3Xyxd0+RcG2fdEB5eWi/U6DqSc1OFODz7xqMhI2iBfmbYI=\n=T1SF\n-----END PGP SIGNATURE-----\n", "payload": "tree 5d207c7bb5b66b95b81040b8b02f683fdf1f4ce9\nparent af5b0d9883b7e6b8f27b431e5471bf658f3e0db0\nparent af2983a9122138cb9055b79fda54e72f71599a6f\nauthor Mara Bos <m-ou.se@m-ou.se> 1610818191 +0000\ncommitter GitHub <noreply@github.com> 1610818191 +0000\n\nRollup merge of #80670 - the8472:fix-zip-trusted-random-access-composition, r=m-ou-se\n\nTrustedRandomAaccess specialization composes incorrectly for nested iter::Zips\n\nI found this while working on improvements for TRA.\n\nAfter partially consuming a Zip adapter and then wrapping it into another Zip where the adapters use their `TrustedRandomAccess` specializations leads to the outer adapter returning elements which should have already been consumed.\n\nIf the optimizer gets tripped up by the addition this might affect performance for chained `zip()` iterators even when the inner one is not partially advanced but it would require more extensive fixes to `TrustedRandomAccess` to communicate those offsets earlier.\n\nIncluded test fails on nightly, [playground link](https://play.rust-lang.org/?version=nightly&mode=debug&edition=2018&gist=24fa1edf8a104ff31f5a24830593b01f)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8843d9d82950eeb27bdce496f6179b085549d29", "html_url": "https://github.com/rust-lang/rust/commit/d8843d9d82950eeb27bdce496f6179b085549d29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8843d9d82950eeb27bdce496f6179b085549d29/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af5b0d9883b7e6b8f27b431e5471bf658f3e0db0", "url": "https://api.github.com/repos/rust-lang/rust/commits/af5b0d9883b7e6b8f27b431e5471bf658f3e0db0", "html_url": "https://github.com/rust-lang/rust/commit/af5b0d9883b7e6b8f27b431e5471bf658f3e0db0"}, {"sha": "af2983a9122138cb9055b79fda54e72f71599a6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/af2983a9122138cb9055b79fda54e72f71599a6f", "html_url": "https://github.com/rust-lang/rust/commit/af2983a9122138cb9055b79fda54e72f71599a6f"}], "stats": {"total": 23, "additions": 23, "deletions": 0}, "files": [{"sha": "98b8dca961407e9c3f0ab8d980e74155c91aa5bd", "filename": "library/core/src/iter/adapters/zip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8843d9d82950eeb27bdce496f6179b085549d29/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8843d9d82950eeb27bdce496f6179b085549d29/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fiter%2Fadapters%2Fzip.rs?ref=d8843d9d82950eeb27bdce496f6179b085549d29", "patch": "@@ -286,6 +286,7 @@ where\n \n     #[inline]\n     unsafe fn get_unchecked(&mut self, idx: usize) -> <Self as Iterator>::Item {\n+        let idx = self.index + idx;\n         // SAFETY: the caller must uphold the contract for\n         // `Iterator::__iterator_get_unchecked`.\n         unsafe { (self.a.__iterator_get_unchecked(idx), self.b.__iterator_get_unchecked(idx)) }"}, {"sha": "bc5421bfb5f8f5e9702b817e6a26871019738f02", "filename": "library/core/tests/iter.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/d8843d9d82950eeb27bdce496f6179b085549d29/library%2Fcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8843d9d82950eeb27bdce496f6179b085549d29/library%2Fcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fiter.rs?ref=d8843d9d82950eeb27bdce496f6179b085549d29", "patch": "@@ -2,6 +2,7 @@\n \n use core::cell::Cell;\n use core::convert::TryFrom;\n+use core::iter::TrustedRandomAccess;\n use core::iter::*;\n \n /// An iterator wrapper that panics whenever `next` or `next_back` is called\n@@ -601,6 +602,26 @@ fn test_zip_nth_back_side_effects_exhausted() {\n     assert_eq!(b, vec![200, 300, 400]);\n }\n \n+#[test]\n+fn test_zip_trusted_random_access_composition() {\n+    let a = [0, 1, 2, 3, 4];\n+    let b = a;\n+    let c = a;\n+\n+    let a = a.iter().copied();\n+    let b = b.iter().copied();\n+    let mut c = c.iter().copied();\n+    c.next();\n+\n+    let mut z1 = a.zip(b);\n+    assert_eq!(z1.next().unwrap(), (0, 0));\n+\n+    let mut z2 = z1.zip(c);\n+    fn assert_trusted_random_access<T: TrustedRandomAccess>(_a: &T) {}\n+    assert_trusted_random_access(&z2);\n+    assert_eq!(z2.next().unwrap(), ((1, 1), 1));\n+}\n+\n #[test]\n fn test_iterator_step_by() {\n     // Identity"}, {"sha": "98f5982fbb2c17de42cc68e5680d61822b7924c9", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d8843d9d82950eeb27bdce496f6179b085549d29/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8843d9d82950eeb27bdce496f6179b085549d29/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=d8843d9d82950eeb27bdce496f6179b085549d29", "patch": "@@ -75,6 +75,7 @@\n #![feature(const_option)]\n #![feature(integer_atomics)]\n #![feature(slice_group_by)]\n+#![feature(trusted_random_access)]\n #![deny(unsafe_op_in_unsafe_fn)]\n \n extern crate test;"}]}