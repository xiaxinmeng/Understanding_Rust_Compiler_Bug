{"sha": "e351595c61614c41be08f7508422d5f8a02d1a0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzNTE1OTVjNjE2MTRjNDFiZTA4Zjc1MDg0MjJkNWY4YTAyZDFhMGU=", "commit": {"author": {"name": "Alexis Beingessner", "email": "a.beingessner@gmail.com", "date": "2015-08-19T22:55:36Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2015-10-30T15:24:54Z"}, "message": "don't use drop_in_place as an intrinsic", "tree": {"sha": "b90032c9173100e3ae9bed96ad6f4aa1ee6fd251", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b90032c9173100e3ae9bed96ad6f4aa1ee6fd251"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e351595c61614c41be08f7508422d5f8a02d1a0e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e351595c61614c41be08f7508422d5f8a02d1a0e", "html_url": "https://github.com/rust-lang/rust/commit/e351595c61614c41be08f7508422d5f8a02d1a0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e351595c61614c41be08f7508422d5f8a02d1a0e/comments", "author": {"login": "Gankra", "id": 1136864, "node_id": "MDQ6VXNlcjExMzY4NjQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1136864?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Gankra", "html_url": "https://github.com/Gankra", "followers_url": "https://api.github.com/users/Gankra/followers", "following_url": "https://api.github.com/users/Gankra/following{/other_user}", "gists_url": "https://api.github.com/users/Gankra/gists{/gist_id}", "starred_url": "https://api.github.com/users/Gankra/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Gankra/subscriptions", "organizations_url": "https://api.github.com/users/Gankra/orgs", "repos_url": "https://api.github.com/users/Gankra/repos", "events_url": "https://api.github.com/users/Gankra/events{/privacy}", "received_events_url": "https://api.github.com/users/Gankra/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e72c226bed92bbbf9050044b9ebafa6b8deb0ea3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e72c226bed92bbbf9050044b9ebafa6b8deb0ea3", "html_url": "https://github.com/rust-lang/rust/commit/e72c226bed92bbbf9050044b9ebafa6b8deb0ea3"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "c6fa5b079db02343b4e3a13997dc030795f68cc4", "filename": "src/doc/nomicon/destructors.md", "status": "modified", "additions": 6, "deletions": 9, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e351595c61614c41be08f7508422d5f8a02d1a0e/src%2Fdoc%2Fnomicon%2Fdestructors.md", "raw_url": "https://github.com/rust-lang/rust/raw/e351595c61614c41be08f7508422d5f8a02d1a0e/src%2Fdoc%2Fnomicon%2Fdestructors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fnomicon%2Fdestructors.md?ref=e351595c61614c41be08f7508422d5f8a02d1a0e", "patch": "@@ -26,12 +26,11 @@ this is totally fine.\n For instance, a custom implementation of `Box` might write `Drop` like this:\n \n ```rust\n-#![feature(alloc, heap_api, core_intrinsics, unique)]\n+#![feature(alloc, heap_api, drop_in_place, unique)]\n \n extern crate alloc;\n \n-use std::ptr::Unique;\n-use std::intrinsics::drop_in_place;\n+use std::ptr::{drop_in_place, Unique};\n use std::mem;\n \n use alloc::heap;\n@@ -58,12 +57,11 @@ use-after-free the `ptr` because when drop exits, it becomes inaccessible.\n However this wouldn't work:\n \n ```rust\n-#![feature(alloc, heap_api, core_intrinsics, unique)]\n+#![feature(alloc, heap_api, drop_in_place, unique)]\n \n extern crate alloc;\n \n-use std::ptr::Unique;\n-use std::intrinsics::drop_in_place;\n+use std::ptr::{drop_in_place, Unique};\n use std::mem;\n \n use alloc::heap;\n@@ -137,12 +135,11 @@ The classic safe solution to overriding recursive drop and allowing moving out\n of Self during `drop` is to use an Option:\n \n ```rust\n-#![feature(alloc, heap_api, core_intrinsics, unique)]\n+#![feature(alloc, heap_api, drop_in_place, unique)]\n \n extern crate alloc;\n \n-use std::ptr::Unique;\n-use std::intrinsics::drop_in_place;\n+use std::ptr::{drop_in_place, Unique};\n use std::mem;\n \n use alloc::heap;"}, {"sha": "95dcdd22fd08490be7e59b20aa88fea8053fb9ce", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e351595c61614c41be08f7508422d5f8a02d1a0e/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e351595c61614c41be08f7508422d5f8a02d1a0e/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=e351595c61614c41be08f7508422d5f8a02d1a0e", "patch": "@@ -77,7 +77,7 @@ use core::borrow;\n use core::fmt;\n use core::cmp::Ordering;\n use core::mem::{align_of_val, size_of_val};\n-use core::intrinsics::{drop_in_place, abort};\n+use core::intrinsics::abort;\n use core::mem;\n use core::ops::{Deref, CoerceUnsized};\n use core::ptr::{self, Shared};\n@@ -304,7 +304,7 @@ impl<T: ?Sized> Arc<T> {\n \n         // Destroy the data at this time, even though we may not free the box\n         // allocation itself (there may still be weak pointers lying around).\n-        drop_in_place(&mut (*ptr).data);\n+        ptr::drop_in_place(&mut (*ptr).data);\n \n         if self.inner().weak.fetch_sub(1, Release) == 1 {\n             atomic::fence(Acquire);"}, {"sha": "463f66b58e92e03bbfae5f21867575164c14293e", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e351595c61614c41be08f7508422d5f8a02d1a0e/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e351595c61614c41be08f7508422d5f8a02d1a0e/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=e351595c61614c41be08f7508422d5f8a02d1a0e", "patch": "@@ -160,7 +160,7 @@ use core::cell::Cell;\n use core::cmp::Ordering;\n use core::fmt;\n use core::hash::{Hasher, Hash};\n-use core::intrinsics::{assume, drop_in_place, abort};\n+use core::intrinsics::{assume, abort};\n use core::marker::{self, Unsize};\n use core::mem::{self, align_of_val, size_of_val, forget};\n use core::ops::{CoerceUnsized, Deref};\n@@ -460,7 +460,7 @@ impl<T: ?Sized> Drop for Rc<T> {\n                 self.dec_strong();\n                 if self.strong() == 0 {\n                     // destroy the contained object\n-                    drop_in_place(&mut (*ptr).value);\n+                    ptr::drop_in_place(&mut (*ptr).value);\n \n                     // remove the implicit \"strong weak\" pointer now that we've\n                     // destroyed the contents."}, {"sha": "670c32776df7b8679693129dc90cc7735bb8ffed", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e351595c61614c41be08f7508422d5f8a02d1a0e/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e351595c61614c41be08f7508422d5f8a02d1a0e/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=e351595c61614c41be08f7508422d5f8a02d1a0e", "patch": "@@ -65,6 +65,7 @@\n #![feature(dropck_parametricity)]\n #![feature(unsafe_no_drop_flag, filling_drop)]\n #![feature(decode_utf16)]\n+#![feature(drop_in_place)]\n #![cfg_attr(test, feature(clone_from_slice, rand, test))]\n \n #![feature(no_std)]"}, {"sha": "a22e66583c4a9c4288277786f9ebbb22037a256b", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e351595c61614c41be08f7508422d5f8a02d1a0e/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e351595c61614c41be08f7508422d5f8a02d1a0e/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=e351595c61614c41be08f7508422d5f8a02d1a0e", "patch": "@@ -65,7 +65,7 @@ use alloc::heap::EMPTY;\n use core::cmp::Ordering;\n use core::fmt;\n use core::hash::{self, Hash};\n-use core::intrinsics::{arith_offset, assume, drop_in_place, needs_drop};\n+use core::intrinsics::{arith_offset, assume, needs_drop};\n use core::iter::FromIterator;\n use core::mem;\n use core::ops::{Index, IndexMut, Deref};\n@@ -1394,7 +1394,7 @@ impl<T> Drop for Vec<T> {\n                 // Without the branch, dropping Vec<u8> takes linear time.\n                 if needs_drop::<T>() {\n                     for x in self.iter_mut() {\n-                        drop_in_place(x);\n+                        ptr::drop_in_place(x);\n                     }\n                 }\n             }"}, {"sha": "429f4fbed28d0b669bc39f13b84a4ecc2f3e5e23", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e351595c61614c41be08f7508422d5f8a02d1a0e/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e351595c61614c41be08f7508422d5f8a02d1a0e/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=e351595c61614c41be08f7508422d5f8a02d1a0e", "patch": "@@ -198,7 +198,7 @@ extern \"rust-intrinsic\" {\n \n     /// Executes the destructor (if any) of the pointed-to value.\n     ///\n-    /// This has two usecases:\n+    /// This has two use cases:\n     ///\n     /// * It is *required* to use `drop_in_place` to drop unsized types like\n     ///   trait objects, because they can't be read out onto the stack and\n@@ -209,7 +209,7 @@ extern \"rust-intrinsic\" {\n     ///   as the compiler doesn't need to prove that it's sound to elide the\n     ///   copy.\n     ///\n-    /// # Undefined Behaviour\n+    /// # Undefined Behavior\n     ///\n     /// This has all the same safety problems as `ptr::read` with respect to\n     /// invalid pointers, types, and double drops."}, {"sha": "e78081f5bf49b2307dbe416461d5578eaf8172e8", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e351595c61614c41be08f7508422d5f8a02d1a0e/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e351595c61614c41be08f7508422d5f8a02d1a0e/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=e351595c61614c41be08f7508422d5f8a02d1a0e", "patch": "@@ -251,6 +251,8 @@\n #![feature(vec_push_all)]\n #![feature(wrapping)]\n #![feature(zero_one)]\n+#![feature(drop_in_place)]\n+\n #![cfg_attr(windows, feature(str_utf16))]\n #![cfg_attr(test, feature(float_from_str_radix, range_inclusive, float_extras))]\n #![cfg_attr(test, feature(test, rustc_private))]"}, {"sha": "119429cc584f762907d6586e60c524c6fe59eadf", "filename": "src/libstd/thread/local.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e351595c61614c41be08f7508422d5f8a02d1a0e/src%2Flibstd%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e351595c61614c41be08f7508422d5f8a02d1a0e/src%2Flibstd%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Flocal.rs?ref=e351595c61614c41be08f7508422d5f8a02d1a0e", "patch": "@@ -411,7 +411,7 @@ mod imp {\n         if cfg!(target_os = \"macos\") {\n             ptr::read((*ptr).inner.get());\n         } else {\n-            intrinsics::drop_in_place((*ptr).inner.get());\n+            ptr::drop_in_place((*ptr).inner.get());\n         }\n     }\n }"}, {"sha": "deb7e6bd53986048f873df8d26831015d5297bc6", "filename": "src/test/run-pass/extern_fat_drop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e351595c61614c41be08f7508422d5f8a02d1a0e/src%2Ftest%2Frun-pass%2Fextern_fat_drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e351595c61614c41be08f7508422d5f8a02d1a0e/src%2Ftest%2Frun-pass%2Fextern_fat_drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fextern_fat_drop.rs?ref=e351595c61614c41be08f7508422d5f8a02d1a0e", "patch": "@@ -10,14 +10,14 @@\n \n // aux-build:fat_drop.rs\n \n-#![feature(core_intrinsics)]\n+#![feature(drop_in_place)]\n \n extern crate fat_drop;\n \n fn main() {\n     unsafe {\n         let s: &mut fat_drop::S = std::mem::uninitialized();\n-        std::intrinsics::drop_in_place(s);\n+        std::ptr::drop_in_place(s);\n         assert!(fat_drop::DROPPED);\n     }\n }"}]}