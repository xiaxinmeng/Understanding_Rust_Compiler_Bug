{"sha": "6b1ed8e4af5df157f21e8525f9d547535ddee397", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMWVkOGU0YWY1ZGYxNTdmMjFlODUyNWY5ZDU0NzUzNWRkZWUzOTc=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-24T03:57:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-04-24T03:57:05Z"}, "message": "Rollup merge of #49970 - SimonSapin:deprecate, r=sfackler\n\nDeprecate Read::chars and char::decode_utf8\n\nPer FCP:\n\n* https://github.com/rust-lang/rust/issues/27802#issuecomment-377537778\n* https://github.com/rust-lang/rust/issues/33906#issuecomment-377534308", "tree": {"sha": "b6a349bf97413b79318c44c00f21ed17f80ae831", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b6a349bf97413b79318c44c00f21ed17f80ae831"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b1ed8e4af5df157f21e8525f9d547535ddee397", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa3qsSCRBK7hj4Ov3rIwAAdHIIACZX/bzScI3CtUoUfi19NsSF\n86/h3tXQQo5jPkn3TGhlrQE1W21wV13fMC8YluJlTD0DRc5vJ41v+QLOYNo5kH9u\n7Owb6dJRRFnknsCIFBrzYtOhqbGhcfx3kZFIbAKtFJvzA7X1mnTikIrHaItw/zLu\nmVpznVb1RuGMvoTmGxrONYKeBYZzRfLlp4ZmToCsv6XTP5P6KbFaSmbszi0Hs9Cg\nDnc+xUz933U2KIlSX6aV/Rd+5tcYK1vz43SiUgW+gGqWqt5TWTVl2hAzhBw9fkIl\nFdE1vk3taqo/0dmO6+LD1sXnwB4weCIxf2GNvQna/6/zNejokUzY3ZIViLX5Zq4=\n=eK4Y\n-----END PGP SIGNATURE-----\n", "payload": "tree b6a349bf97413b79318c44c00f21ed17f80ae831\nparent f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6\nparent 7cbeddb7b78cc54a52d63ed8556da7121d1d2e68\nauthor kennytm <kennytm@gmail.com> 1524542225 +0800\ncommitter GitHub <noreply@github.com> 1524542225 +0800\n\nRollup merge of #49970 - SimonSapin:deprecate, r=sfackler\n\nDeprecate Read::chars and char::decode_utf8\n\nPer FCP:\n\n* https://github.com/rust-lang/rust/issues/27802#issuecomment-377537778\n* https://github.com/rust-lang/rust/issues/33906#issuecomment-377534308\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b1ed8e4af5df157f21e8525f9d547535ddee397", "html_url": "https://github.com/rust-lang/rust/commit/6b1ed8e4af5df157f21e8525f9d547535ddee397", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b1ed8e4af5df157f21e8525f9d547535ddee397/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6", "html_url": "https://github.com/rust-lang/rust/commit/f28f5aa0b29d9aac5b38a3f7c93d0b91958e63d6"}, {"sha": "7cbeddb7b78cc54a52d63ed8556da7121d1d2e68", "url": "https://api.github.com/repos/rust-lang/rust/commits/7cbeddb7b78cc54a52d63ed8556da7121d1d2e68", "html_url": "https://github.com/rust-lang/rust/commit/7cbeddb7b78cc54a52d63ed8556da7121d1d2e68"}], "stats": {"total": 33, "additions": 32, "deletions": 1}, "files": [{"sha": "45a73191db2f2cfc0004644c2fdd2954c716d31f", "filename": "src/libcore/char/decode.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6b1ed8e4af5df157f21e8525f9d547535ddee397/src%2Flibcore%2Fchar%2Fdecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1ed8e4af5df157f21e8525f9d547535ddee397/src%2Flibcore%2Fchar%2Fdecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fdecode.rs?ref=6b1ed8e4af5df157f21e8525f9d547535ddee397", "patch": "@@ -17,22 +17,32 @@ use super::from_u32_unchecked;\n /// An iterator over an iterator of bytes of the characters the bytes represent\n /// as UTF-8\n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n+#[rustc_deprecated(since = \"1.27.0\", reason = \"Use str::from_utf8 instead:\n+    https://doc.rust-lang.org/nightly/std/str/struct.Utf8Error.html#examples\")]\n #[derive(Clone, Debug)]\n+#[allow(deprecated)]\n pub struct DecodeUtf8<I: Iterator<Item = u8>>(::iter::Peekable<I>);\n \n /// Decodes an `Iterator` of bytes as UTF-8.\n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n+#[rustc_deprecated(since = \"1.27.0\", reason = \"Use str::from_utf8 instead:\n+    https://doc.rust-lang.org/nightly/std/str/struct.Utf8Error.html#examples\")]\n+#[allow(deprecated)]\n #[inline]\n pub fn decode_utf8<I: IntoIterator<Item = u8>>(i: I) -> DecodeUtf8<I::IntoIter> {\n     DecodeUtf8(i.into_iter().peekable())\n }\n \n /// `<DecodeUtf8 as Iterator>::next` returns this for an invalid input sequence.\n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n+#[rustc_deprecated(since = \"1.27.0\", reason = \"Use str::from_utf8 instead:\n+    https://doc.rust-lang.org/nightly/std/str/struct.Utf8Error.html#examples\")]\n #[derive(PartialEq, Eq, Debug)]\n+#[allow(deprecated)]\n pub struct InvalidSequence(());\n \n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n+#[allow(deprecated)]\n impl<I: Iterator<Item = u8>> Iterator for DecodeUtf8<I> {\n     type Item = Result<char, InvalidSequence>;\n     #[inline]\n@@ -127,6 +137,7 @@ impl<I: Iterator<Item = u8>> Iterator for DecodeUtf8<I> {\n }\n \n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n+#[allow(deprecated)]\n impl<I: FusedIterator<Item = u8>> FusedIterator for DecodeUtf8<I> {}\n \n /// An iterator that decodes UTF-16 encoded code points from an iterator of `u16`s."}, {"sha": "4f6c302247dd2034864f3cbaf9c53bf4fa2e5b3f", "filename": "src/libcore/char/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/6b1ed8e4af5df157f21e8525f9d547535ddee397/src%2Flibcore%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1ed8e4af5df157f21e8525f9d547535ddee397/src%2Flibcore%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmod.rs?ref=6b1ed8e4af5df157f21e8525f9d547535ddee397", "patch": "@@ -51,6 +51,9 @@ pub use unicode::tables::UNICODE_VERSION;\n #[unstable(feature = \"unicode_version\", issue = \"49726\")]\n pub use unicode::version::UnicodeVersion;\n #[unstable(feature = \"decode_utf8\", issue = \"33906\")]\n+#[rustc_deprecated(since = \"1.27.0\", reason = \"Use str::from_utf8 instead:\n+    https://doc.rust-lang.org/nightly/std/str/struct.Utf8Error.html#examples\")]\n+#[allow(deprecated)]\n pub use self::decode::{decode_utf8, DecodeUtf8, InvalidSequence};\n \n use fmt::{self, Write};"}, {"sha": "ab90763abf8d5ef8ad335e7cf97058b23c406920", "filename": "src/libcore/tests/char.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6b1ed8e4af5df157f21e8525f9d547535ddee397/src%2Flibcore%2Ftests%2Fchar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1ed8e4af5df157f21e8525f9d547535ddee397/src%2Flibcore%2Ftests%2Fchar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fchar.rs?ref=6b1ed8e4af5df157f21e8525f9d547535ddee397", "patch": "@@ -364,6 +364,7 @@ fn eu_iterator_specializations() {\n }\n \n #[test]\n+#[allow(deprecated)]\n fn test_decode_utf8() {\n     macro_rules! assert_decode_utf8 {\n         ($input_bytes: expr, $expected_str: expr) => {"}, {"sha": "ee297d3783e522caf24a8ca4b8f79d313770895d", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b1ed8e4af5df157f21e8525f9d547535ddee397/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1ed8e4af5df157f21e8525f9d547535ddee397/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=6b1ed8e4af5df157f21e8525f9d547535ddee397", "patch": "@@ -1251,13 +1251,15 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn read_char_buffered() {\n         let buf = [195, 159];\n         let reader = BufReader::with_capacity(1, &buf[..]);\n         assert_eq!(reader.chars().next().unwrap().unwrap(), '\u00df');\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_chars() {\n         let buf = [195, 159, b'a'];\n         let reader = BufReader::with_capacity(1, &buf[..]);"}, {"sha": "8ac52572810c6c99e2ce8ccddaa0d1be66174a55", "filename": "src/libstd/io/cursor.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6b1ed8e4af5df157f21e8525f9d547535ddee397/src%2Flibstd%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1ed8e4af5df157f21e8525f9d547535ddee397/src%2Flibstd%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcursor.rs?ref=6b1ed8e4af5df157f21e8525f9d547535ddee397", "patch": "@@ -566,6 +566,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_read_char() {\n         let b = &b\"Vi\\xE1\\xBB\\x87t\"[..];\n         let mut c = Cursor::new(b).chars();\n@@ -577,6 +578,7 @@ mod tests {\n     }\n \n     #[test]\n+    #[allow(deprecated)]\n     fn test_read_bad_char() {\n         let b = &b\"\\x80\"[..];\n         let mut c = Cursor::new(b).chars();"}, {"sha": "eba4e9fe70368f6de4e853316ede9a6110e43ab1", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6b1ed8e4af5df157f21e8525f9d547535ddee397/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b1ed8e4af5df157f21e8525f9d547535ddee397/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=6b1ed8e4af5df157f21e8525f9d547535ddee397", "patch": "@@ -840,6 +840,9 @@ pub trait Read {\n                                          of where errors happen is currently \\\n                                          unclear and may change\",\n                issue = \"27802\")]\n+    #[rustc_deprecated(since = \"1.27.0\", reason = \"Use str::from_utf8 instead:\n+        https://doc.rust-lang.org/nightly/std/str/struct.Utf8Error.html#examples\")]\n+    #[allow(deprecated)]\n     fn chars(self) -> Chars<Self> where Self: Sized {\n         Chars { inner: self }\n     }\n@@ -2010,16 +2013,22 @@ impl<R: Read> Iterator for Bytes<R> {\n /// [chars]: trait.Read.html#method.chars\n #[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n            issue = \"27802\")]\n+#[rustc_deprecated(since = \"1.27.0\", reason = \"Use str::from_utf8 instead:\n+    https://doc.rust-lang.org/nightly/std/str/struct.Utf8Error.html#examples\")]\n #[derive(Debug)]\n+#[allow(deprecated)]\n pub struct Chars<R> {\n     inner: R,\n }\n \n /// An enumeration of possible errors that can be generated from the `Chars`\n /// adapter.\n-#[derive(Debug)]\n #[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n            issue = \"27802\")]\n+#[rustc_deprecated(since = \"1.27.0\", reason = \"Use str::from_utf8 instead:\n+    https://doc.rust-lang.org/nightly/std/str/struct.Utf8Error.html#examples\")]\n+#[derive(Debug)]\n+#[allow(deprecated)]\n pub enum CharsError {\n     /// Variant representing that the underlying stream was read successfully\n     /// but it did not contain valid utf8 data.\n@@ -2031,6 +2040,7 @@ pub enum CharsError {\n \n #[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n            issue = \"27802\")]\n+#[allow(deprecated)]\n impl<R: Read> Iterator for Chars<R> {\n     type Item = result::Result<char, CharsError>;\n \n@@ -2063,6 +2073,7 @@ impl<R: Read> Iterator for Chars<R> {\n \n #[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n            issue = \"27802\")]\n+#[allow(deprecated)]\n impl std_error::Error for CharsError {\n     fn description(&self) -> &str {\n         match *self {\n@@ -2080,6 +2091,7 @@ impl std_error::Error for CharsError {\n \n #[unstable(feature = \"io\", reason = \"awaiting stability of Read::chars\",\n            issue = \"27802\")]\n+#[allow(deprecated)]\n impl fmt::Display for CharsError {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         match *self {"}]}