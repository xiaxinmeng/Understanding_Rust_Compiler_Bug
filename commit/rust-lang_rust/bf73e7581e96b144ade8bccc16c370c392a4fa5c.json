{"sha": "bf73e7581e96b144ade8bccc16c370c392a4fa5c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmNzNlNzU4MWU5NmIxNDRhZGU4YmNjYzE2YzM3MGMzOTJhNGZhNWM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-03T11:31:04Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-11-03T11:31:04Z"}, "message": "don't always allocate during `init` intrinsic processing", "tree": {"sha": "b872e436c15395cbb310fcb492487392c89d7386", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b872e436c15395cbb310fcb492487392c89d7386"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf73e7581e96b144ade8bccc16c370c392a4fa5c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJYGx/4AAoJEFbW7qD8Z6xG02AP/jWyZ/A8qWdVPetT2Tgq9tXv\niJ2wQTp9SNcfdQzAsqaHV3ktO1+9vqhZQ9tnmJV3oNS2IZWOUqJx491VLbuRWtxK\n74JwW8ymbMjol0fAlXYwyZHfXcLqXPkLMXBqqtXK/3iyEMOzfPD11ateu++wIiuL\nOFtadlJxCr90Etme/m3gUHelSc+bdbwzz3xVIvgFrBRSqSNvnEhtcokxKMjYHbBa\n2r9GB/ptgRTle8aoySVaNfR/ibGmpsbvU0f0PYIg/LF9dLrZwOKuwwQ1dT4/6ifQ\nTy8oOPctKVUR2XNJxXU92elneu6UmA8pOuqT7SdMFJE2LR1BKY3Rj8ONEXUOocQ1\npK3aXh2/NB31FvooBscf8dFBGQDmplD3JEcfXPh99LahLKhUKr/z/5ZsIOvL58f5\nJH6qKjpfo2DK3IGAkE56wTaHm+rNYbZ6TPeMyqI/dUUjiaQZPlwg7oRERUK6Xe+K\nupbn7i14RjicJ5fFowpukHoLD4FXR+DpvAuo1Es7gPdW6n9ec8B3uErnNb/hdMFC\nYbYaftG8Hixaqn/pwQnEkYHQLIt6/Hm/1hMyMU9dQumAPqGhfDPQ+Ld6swo31Iqt\n6vFjMs2JNl+vzC+EUcNin4Zp/VewElkCAHFkcsGHCksADTpVrL6pFnmHGQsDekCx\nLUKblbAzPuYFTYAXyiir\n=zrNx\n-----END PGP SIGNATURE-----", "payload": "tree b872e436c15395cbb310fcb492487392c89d7386\nparent b3bf730513aaab6882d4d223f971ec0304c9e18a\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478172664 +0100\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1478172664 +0100\n\ndon't always allocate during `init` intrinsic processing"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf73e7581e96b144ade8bccc16c370c392a4fa5c", "html_url": "https://github.com/rust-lang/rust/commit/bf73e7581e96b144ade8bccc16c370c392a4fa5c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf73e7581e96b144ade8bccc16c370c392a4fa5c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b3bf730513aaab6882d4d223f971ec0304c9e18a", "url": "https://api.github.com/repos/rust-lang/rust/commits/b3bf730513aaab6882d4d223f971ec0304c9e18a", "html_url": "https://github.com/rust-lang/rust/commit/b3bf730513aaab6882d4d223f971ec0304c9e18a"}], "stats": {"total": 53, "additions": 48, "deletions": 5}, "files": [{"sha": "2b10f8250385256fff0f8420e781dbc5a94d4a0c", "filename": "src/interpreter/terminator/intrinsics.rs", "status": "modified", "additions": 48, "deletions": 5, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/bf73e7581e96b144ade8bccc16c370c392a4fa5c/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf73e7581e96b144ade8bccc16c370c392a4fa5c/src%2Finterpreter%2Fterminator%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter%2Fterminator%2Fintrinsics.rs?ref=bf73e7581e96b144ade8bccc16c370c392a4fa5c", "patch": "@@ -6,7 +6,7 @@ use rustc::ty::{self, Ty};\n \n use error::{EvalError, EvalResult};\n use interpreter::value::Value;\n-use interpreter::{EvalContext, Lvalue};\n+use interpreter::{EvalContext, Lvalue, LvalueExtra};\n use primval::{self, PrimVal, PrimValKind};\n \n impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n@@ -126,11 +126,54 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             \"forget\" => {}\n \n             \"init\" => {\n-                // FIXME(solson)\n-                let dest = self.force_allocation(dest)?.to_ptr();\n-\n                 let size = dest_layout.size(&self.tcx.data_layout).bytes() as usize;\n-                self.memory.write_repeat(dest, 0, size)?;\n+                match dest {\n+                    Lvalue::Local { frame, local } => {\n+                        match self.stack[frame].get_local(local) {\n+                            Some(Value::ByRef(ptr)) => self.memory.write_repeat(ptr, 0, size)?,\n+                            None => match self.ty_to_primval_kind(dest_ty) {\n+                                Ok(kind) => self.stack[frame].set_local(local, Value::ByVal(PrimVal::new(0, kind))),\n+                                Err(_) => {\n+                                    let ptr = self.alloc_ptr_with_substs(dest_ty, substs)?;\n+                                    self.memory.write_repeat(ptr, 0, size)?;\n+                                    self.stack[frame].set_local(local, Value::ByRef(ptr));\n+                                }\n+                            },\n+                            Some(Value::ByVal(val)) => self.stack[frame].set_local(local, Value::ByVal(PrimVal::new(0, val.kind))),\n+                            Some(Value::ByValPair(a, b)) => self.stack[frame].set_local(local, Value::ByValPair(\n+                                PrimVal::new(0, a.kind),\n+                                PrimVal::new(0, b.kind),\n+                            )),\n+                        }\n+                    }\n+                    Lvalue::Ptr { ptr, extra: LvalueExtra::None } => self.memory.write_repeat(ptr, 0, size)?,\n+                    Lvalue::Ptr { .. } => bug!(\"init intrinsic tried to write to fat ptr target\"),\n+                    Lvalue::Global(cid) => {\n+                        let global_val = *self.globals.get(&cid).expect(\"global not cached\");\n+                        if !global_val.mutable {\n+                            return Err(EvalError::ModifiedConstantMemory);\n+                        }\n+                        match global_val.data {\n+                            Some(Value::ByRef(ptr)) => self.memory.write_repeat(ptr, 0, size)?,\n+                            None => match self.ty_to_primval_kind(dest_ty) {\n+                                Ok(kind) => self.globals\n+                                                .get_mut(&cid)\n+                                                .expect(\"already checked\")\n+                                                .data = Some(Value::ByVal(PrimVal::new(0, kind))),\n+                                Err(_) => {\n+                                    let ptr = self.alloc_ptr_with_substs(dest_ty, substs)?;\n+                                    self.memory.write_repeat(ptr, 0, size)?;\n+                                    self.globals.get_mut(&cid).expect(\"already checked\").data = Some(Value::ByRef(ptr));\n+                                },\n+                            },\n+                            Some(Value::ByVal(val)) => self.globals.get_mut(&cid).expect(\"already checked\").data = Some(Value::ByVal(PrimVal::new(0, val.kind))),\n+                            Some(Value::ByValPair(a, b)) => self.globals.get_mut(&cid).expect(\"already checked\").data = Some(Value::ByValPair(\n+                                PrimVal::new(0, a.kind),\n+                                PrimVal::new(0, b.kind),\n+                            )),\n+                        }\n+                    }\n+                }\n             }\n \n             \"min_align_of\" => {"}]}