{"sha": "b3329f84f4aa52216f6334ce56608a78ace0a98f", "node_id": "C_kwDOAAsO6NoAKGIzMzI5Zjg0ZjRhYTUyMjE2ZjYzMzRjZTU2NjA4YTc4YWNlMGE5OGY", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-04-28T18:12:59Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-04-28T18:12:59Z"}, "message": "Rollup merge of #96405 - pvdrz:ambiguous-plus-diagnostic, r=davidtwco\n\nMigrate ambiguous plus diagnostic to the new derive macro\n\nr? ````@davidtwco```` ````@jyn514````", "tree": {"sha": "4fc3ececf5dd01af8d88141f7476cfc1d28b098d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fc3ececf5dd01af8d88141f7476cfc1d28b098d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b3329f84f4aa52216f6334ce56608a78ace0a98f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiatksCRBK7hj4Ov3rIwAAS3oIAAUf/EqqfRvdPUTzEBjehV2Z\nOhidzFkhuo5w2q2zN62GgK5CuWIW0R6GH0nrXScELYfx5uP5WoBoYvR04rYMfXMK\n5LXWB2vMTU5WWbFvKZYzmCtxNZeoU2so6b3rNpqOPkdu417AiwEU1c8449MxhH/R\nXJ9F9jVl2X9rex3FppcpsaqGzpi1lSyxxNXKWp+h/zXtCzfZE/5Piz248MaBGsL4\nMDbbfIQ5ofuNX6XX7jmUtFrzN+PN/dOq5AcL/2ggsQDnigfNEcR3mwrVaToT0l33\nEM/4mKR9r+GzSUx7+2K3cjkZ2f7d+E1u2n0B0pzNUr+TQnXylYx0ZCIfx0VfHqo=\n=r9/D\n-----END PGP SIGNATURE-----\n", "payload": "tree 4fc3ececf5dd01af8d88141f7476cfc1d28b098d\nparent d665a5ea4a68a6bc793c267c1a110f01aa946b4f\nparent e7ae9eb3f272a96c2c73363539ca31986e5d5e88\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1651169579 +0200\ncommitter GitHub <noreply@github.com> 1651169579 +0200\n\nRollup merge of #96405 - pvdrz:ambiguous-plus-diagnostic, r=davidtwco\n\nMigrate ambiguous plus diagnostic to the new derive macro\n\nr? ````@davidtwco```` ````@jyn514````\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b3329f84f4aa52216f6334ce56608a78ace0a98f", "html_url": "https://github.com/rust-lang/rust/commit/b3329f84f4aa52216f6334ce56608a78ace0a98f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b3329f84f4aa52216f6334ce56608a78ace0a98f/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d665a5ea4a68a6bc793c267c1a110f01aa946b4f", "url": "https://api.github.com/repos/rust-lang/rust/commits/d665a5ea4a68a6bc793c267c1a110f01aa946b4f", "html_url": "https://github.com/rust-lang/rust/commit/d665a5ea4a68a6bc793c267c1a110f01aa946b4f"}, {"sha": "e7ae9eb3f272a96c2c73363539ca31986e5d5e88", "url": "https://api.github.com/repos/rust-lang/rust/commits/e7ae9eb3f272a96c2c73363539ca31986e5d5e88", "html_url": "https://github.com/rust-lang/rust/commit/e7ae9eb3f272a96c2c73363539ca31986e5d5e88"}], "stats": {"total": 59, "additions": 44, "deletions": 15}, "files": [{"sha": "ef4800a22613682eba1362ac05a718e733424335", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3329f84f4aa52216f6334ce56608a78ace0a98f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/b3329f84f4aa52216f6334ce56608a78ace0a98f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=b3329f84f4aa52216f6334ce56608a78ace0a98f", "patch": "@@ -4158,6 +4158,7 @@ dependencies = [\n  \"rustc_errors\",\n  \"rustc_feature\",\n  \"rustc_lexer\",\n+ \"rustc_macros\",\n  \"rustc_session\",\n  \"rustc_span\",\n  \"tracing\","}, {"sha": "3143b81b6098f2b2aa580a716c77dc76748350cb", "filename": "compiler/rustc_error_messages/locales/en-US/parser.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b3329f84f4aa52216f6334ce56608a78ace0a98f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/b3329f84f4aa52216f6334ce56608a78ace0a98f/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fparser.ftl?ref=b3329f84f4aa52216f6334ce56608a78ace0a98f", "patch": "@@ -1,3 +1,7 @@\n parser-struct-literal-body-without-path =\n     struct literal body without path\n     .suggestion = you might have forgotten to add the struct literal inside the block\n+\n+parser-maybe-report-ambiguous-plus =\n+    ambiguous `+` in a type\n+    .suggestion = use parentheses to disambiguate"}, {"sha": "9466d0f34bc0750c360983d3a2efb0f909be0814", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b3329f84f4aa52216f6334ce56608a78ace0a98f/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3329f84f4aa52216f6334ce56608a78ace0a98f/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=b3329f84f4aa52216f6334ce56608a78ace0a98f", "patch": "@@ -308,7 +308,7 @@ impl<'a> SessionDiagnosticDerive<'a> {\n             {\n                 fn into_diagnostic(\n                     self,\n-                    #sess: &'__session_diagnostic_sess rustc_session::Session\n+                    #sess: &'__session_diagnostic_sess rustc_session::parse::ParseSess\n                 ) -> rustc_errors::DiagnosticBuilder<'__session_diagnostic_sess, #param_ty> {\n                     use rustc_errors::IntoDiagnosticArg;\n                     #implementation"}, {"sha": "c6ca260e9831e184b2b9d366ab019cfd0567b1d3", "filename": "compiler/rustc_parse/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b3329f84f4aa52216f6334ce56608a78ace0a98f/compiler%2Frustc_parse%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/b3329f84f4aa52216f6334ce56608a78ace0a98f/compiler%2Frustc_parse%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2FCargo.toml?ref=b3329f84f4aa52216f6334ce56608a78ace0a98f", "patch": "@@ -13,6 +13,7 @@ rustc_ast_pretty = { path = \"../rustc_ast_pretty\" }\n rustc_data_structures = { path = \"../rustc_data_structures\" }\n rustc_feature = { path = \"../rustc_feature\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n+rustc_macros = { path = \"../rustc_macros\" }\n rustc_errors = { path = \"../rustc_errors\" }\n rustc_session = { path = \"../rustc_session\" }\n rustc_span = { path = \"../rustc_span\" }"}, {"sha": "63772c098b53934320f75661ea2499fd5a650bc1", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 9, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b3329f84f4aa52216f6334ce56608a78ace0a98f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3329f84f4aa52216f6334ce56608a78ace0a98f/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=b3329f84f4aa52216f6334ce56608a78ace0a98f", "patch": "@@ -21,6 +21,7 @@ use rustc_errors::{pluralize, struct_span_err, Diagnostic, EmissionGuarantee, Er\n use rustc_errors::{\n     Applicability, DiagnosticBuilder, DiagnosticMessage, Handler, MultiSpan, PResult,\n };\n+use rustc_macros::SessionDiagnostic;\n use rustc_span::source_map::Spanned;\n use rustc_span::symbol::{kw, Ident};\n use rustc_span::{Span, SpanSnippetError, DUMMY_SP};\n@@ -241,6 +242,16 @@ impl MultiSugg {\n         err.multipart_suggestions(msg, suggestions.map(|s| s.patches), applicability);\n     }\n }\n+\n+#[derive(SessionDiagnostic)]\n+#[error(slug = \"parser-maybe-report-ambiguous-plus\")]\n+struct AmbiguousPlus {\n+    pub sum_ty: String,\n+    #[primary_span]\n+    #[suggestion(code = \"({sum_ty})\")]\n+    pub span: Span,\n+}\n+\n // SnapshotParser is used to create a snapshot of the parser\n // without causing duplicate errors being emitted when the `Parser`\n // is dropped.\n@@ -1196,15 +1207,7 @@ impl<'a> Parser<'a> {\n         ty: &Ty,\n     ) {\n         if matches!(allow_plus, AllowPlus::No) && impl_dyn_multi {\n-            let sum_with_parens = format!(\"({})\", pprust::ty_to_string(&ty));\n-            self.struct_span_err(ty.span, \"ambiguous `+` in a type\")\n-                .span_suggestion(\n-                    ty.span,\n-                    \"use parentheses to disambiguate\",\n-                    sum_with_parens,\n-                    Applicability::MachineApplicable,\n-                )\n-                .emit();\n+            self.sess.emit_err(AmbiguousPlus { sum_ty: pprust::ty_to_string(&ty), span: ty.span });\n         }\n     }\n "}, {"sha": "e933fe1cb2412c31fef8715cf6b03109248988d6", "filename": "compiler/rustc_session/src/parse.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/b3329f84f4aa52216f6334ce56608a78ace0a98f/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3329f84f4aa52216f6334ce56608a78ace0a98f/compiler%2Frustc_session%2Fsrc%2Fparse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fparse.rs?ref=b3329f84f4aa52216f6334ce56608a78ace0a98f", "patch": "@@ -3,13 +3,14 @@\n \n use crate::config::CheckCfg;\n use crate::lint::{BufferedEarlyLint, BuiltinLintDiagnostics, Lint, LintId};\n+use crate::SessionDiagnostic;\n use rustc_ast::node_id::NodeId;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::sync::{Lock, Lrc};\n use rustc_errors::{emitter::SilentEmitter, ColorConfig, Handler};\n use rustc_errors::{\n     error_code, fallback_fluent_bundle, Applicability, Diagnostic, DiagnosticBuilder,\n-    ErrorGuaranteed, MultiSpan,\n+    DiagnosticMessage, ErrorGuaranteed, MultiSpan,\n };\n use rustc_feature::{find_feature_issue, GateIssue, UnstableFeatures};\n use rustc_span::edition::Edition;\n@@ -287,4 +288,23 @@ impl ParseSess {\n     pub fn proc_macro_quoted_spans(&self) -> Vec<Span> {\n         self.proc_macro_quoted_spans.lock().clone()\n     }\n+\n+    pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n+        err.into_diagnostic(self).emit()\n+    }\n+\n+    pub fn emit_warning<'a>(&'a self, warning: impl SessionDiagnostic<'a, ()>) {\n+        warning.into_diagnostic(self).emit()\n+    }\n+\n+    pub fn struct_err(\n+        &self,\n+        msg: impl Into<DiagnosticMessage>,\n+    ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n+        self.span_diagnostic.struct_err(msg)\n+    }\n+\n+    pub fn struct_warn(&self, msg: impl Into<DiagnosticMessage>) -> DiagnosticBuilder<'_, ()> {\n+        self.span_diagnostic.struct_warn(msg)\n+    }\n }"}, {"sha": "e8279f6fed24f378369f12ef018ffbd6c8b7e131", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b3329f84f4aa52216f6334ce56608a78ace0a98f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b3329f84f4aa52216f6334ce56608a78ace0a98f/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=b3329f84f4aa52216f6334ce56608a78ace0a98f", "patch": "@@ -212,7 +212,7 @@ pub struct PerfStats {\n pub trait SessionDiagnostic<'a, T: EmissionGuarantee = ErrorGuaranteed> {\n     /// Write out as a diagnostic out of `sess`.\n     #[must_use]\n-    fn into_diagnostic(self, sess: &'a Session) -> DiagnosticBuilder<'a, T>;\n+    fn into_diagnostic(self, sess: &'a ParseSess) -> DiagnosticBuilder<'a, T>;\n }\n \n impl Session {\n@@ -334,7 +334,7 @@ impl Session {\n         &self,\n         msg: impl Into<DiagnosticMessage>,\n     ) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        self.diagnostic().struct_err(msg)\n+        self.parse_sess.struct_err(msg)\n     }\n     pub fn struct_err_with_code(\n         &self,\n@@ -414,10 +414,10 @@ impl Session {\n         self.diagnostic().err(msg)\n     }\n     pub fn emit_err<'a>(&'a self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n-        err.into_diagnostic(self).emit()\n+        self.parse_sess.emit_err(err)\n     }\n     pub fn emit_warning<'a>(&'a self, warning: impl SessionDiagnostic<'a, ()>) {\n-        warning.into_diagnostic(self).emit()\n+        self.parse_sess.emit_warning(warning)\n     }\n     #[inline]\n     pub fn err_count(&self) -> usize {"}]}