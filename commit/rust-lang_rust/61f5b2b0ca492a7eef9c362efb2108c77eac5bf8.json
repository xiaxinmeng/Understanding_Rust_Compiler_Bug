{"sha": "61f5b2b0ca492a7eef9c362efb2108c77eac5bf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxZjViMmIwY2E0OTJhN2VlZjljMzYyZWZiMjEwOGM3N2VhYzViZjg=", "commit": {"author": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-09-25T06:25:59Z"}, "committer": {"name": "Seo Sanghyeon", "email": "sanxiyn@gmail.com", "date": "2015-10-02T15:01:49Z"}, "message": "Check attribute usage", "tree": {"sha": "f2ec3bc19542ea79d9658b3cae9c146b5c00edf5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2ec3bc19542ea79d9658b3cae9c146b5c00edf5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61f5b2b0ca492a7eef9c362efb2108c77eac5bf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61f5b2b0ca492a7eef9c362efb2108c77eac5bf8", "html_url": "https://github.com/rust-lang/rust/commit/61f5b2b0ca492a7eef9c362efb2108c77eac5bf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61f5b2b0ca492a7eef9c362efb2108c77eac5bf8/comments", "author": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sanxiyn", "id": 45249, "node_id": "MDQ6VXNlcjQ1MjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/45249?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sanxiyn", "html_url": "https://github.com/sanxiyn", "followers_url": "https://api.github.com/users/sanxiyn/followers", "following_url": "https://api.github.com/users/sanxiyn/following{/other_user}", "gists_url": "https://api.github.com/users/sanxiyn/gists{/gist_id}", "starred_url": "https://api.github.com/users/sanxiyn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sanxiyn/subscriptions", "organizations_url": "https://api.github.com/users/sanxiyn/orgs", "repos_url": "https://api.github.com/users/sanxiyn/repos", "events_url": "https://api.github.com/users/sanxiyn/events{/privacy}", "received_events_url": "https://api.github.com/users/sanxiyn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "20cccfa67f0266fb6aa914c3fd3bd37d68c19d07", "url": "https://api.github.com/repos/rust-lang/rust/commits/20cccfa67f0266fb6aa914c3fd3bd37d68c19d07", "html_url": "https://github.com/rust-lang/rust/commit/20cccfa67f0266fb6aa914c3fd3bd37d68c19d07"}], "stats": {"total": 177, "additions": 175, "deletions": 2}, "files": [{"sha": "cca14f1fbf2a355b8654bf8916208daafd4ac72f", "filename": "src/librustc/front/check_attr.rs", "status": "added", "additions": 110, "deletions": 0, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/61f5b2b0ca492a7eef9c362efb2108c77eac5bf8/src%2Flibrustc%2Ffront%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f5b2b0ca492a7eef9c362efb2108c77eac5bf8/src%2Flibrustc%2Ffront%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fcheck_attr.rs?ref=61f5b2b0ca492a7eef9c362efb2108c77eac5bf8", "patch": "@@ -0,0 +1,110 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use session::Session;\n+\n+use syntax::ast;\n+use syntax::attr::AttrMetaMethods;\n+use syntax::visit;\n+use syntax::visit::Visitor;\n+\n+#[derive(Copy, Clone, PartialEq)]\n+enum Target {\n+    Fn,\n+    Struct,\n+    Enum,\n+    Other,\n+}\n+\n+impl Target {\n+    fn from_item(item: &ast::Item) -> Target {\n+        match item.node {\n+            ast::ItemFn(..) => Target::Fn,\n+            ast::ItemStruct(..) => Target::Struct,\n+            ast::ItemEnum(..) => Target::Enum,\n+            _ => Target::Other,\n+        }\n+    }\n+}\n+\n+struct CheckAttrVisitor<'a> {\n+    sess: &'a Session,\n+}\n+\n+impl<'a> CheckAttrVisitor<'a> {\n+    fn check_inline(&self, attr: &ast::Attribute, target: Target) {\n+        if target != Target::Fn {\n+            self.sess.span_err(\n+                attr.span,\n+                \"attribute should be applied to function\");\n+        }\n+    }\n+\n+    fn check_repr(&self, attr: &ast::Attribute, target: Target) {\n+        let words = match attr.meta_item_list() {\n+            Some(words) => words,\n+            None => {\n+                return;\n+            }\n+        };\n+        for word in words {\n+            let word: &str = &word.name();\n+            match word {\n+                \"C\" => {\n+                    if target != Target::Struct && target != Target::Enum {\n+                        self.sess.span_err(\n+                            attr.span,\n+                            \"attribute should be applied to struct or enum\");\n+                    }\n+                }\n+                \"packed\" |\n+                \"simd\" => {\n+                    if target != Target::Struct {\n+                        self.sess.span_err(\n+                            attr.span,\n+                            \"attribute should be applied to struct\");\n+                    }\n+                }\n+                \"i8\" | \"u8\" | \"i16\" | \"u16\" |\n+                \"i32\" | \"u32\" | \"i64\" | \"u64\" |\n+                \"isize\" | \"usize\" => {\n+                    if target != Target::Enum {\n+                        self.sess.span_err(\n+                            attr.span,\n+                            \"attribute should be applied to enum\");\n+                    }\n+                }\n+                _ => (),\n+            }\n+        }\n+    }\n+\n+    fn check_attribute(&self, attr: &ast::Attribute, target: Target) {\n+        let name: &str = &attr.name();\n+        match name {\n+            \"inline\" => self.check_inline(attr, target),\n+            \"repr\" => self.check_repr(attr, target),\n+            _ => (),\n+        }\n+    }\n+}\n+\n+impl<'a, 'v> Visitor<'v> for CheckAttrVisitor<'a> {\n+    fn visit_item(&mut self, item: &ast::Item) {\n+        let target = Target::from_item(item);\n+        for attr in &item.attrs {\n+            self.check_attribute(attr, target);\n+        }\n+    }\n+}\n+\n+pub fn check_crate(sess: &Session, krate: &ast::Crate) {\n+    visit::walk_crate(&mut CheckAttrVisitor { sess: sess }, krate);\n+}"}, {"sha": "e08dc2acbc0885e61712286ba2af9454cee3c18a", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61f5b2b0ca492a7eef9c362efb2108c77eac5bf8/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f5b2b0ca492a7eef9c362efb2108c77eac5bf8/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=61f5b2b0ca492a7eef9c362efb2108c77eac5bf8", "patch": "@@ -101,6 +101,7 @@ pub mod back {\n }\n \n pub mod front {\n+    pub mod check_attr;\n     pub mod map;\n }\n "}, {"sha": "fdc522e330f18ac716f74adfc66dbe74d5b9518f", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61f5b2b0ca492a7eef9c362efb2108c77eac5bf8/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f5b2b0ca492a7eef9c362efb2108c77eac5bf8/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=61f5b2b0ca492a7eef9c362efb2108c77eac5bf8", "patch": "@@ -129,6 +129,10 @@ pub fn compile_input(sess: Session,\n                                                                      &ast_map.krate(),\n                                                                      &id[..]));\n \n+        time(sess.time_passes(), \"attribute checking\", || {\n+            front::check_attr::check_crate(&sess, &expanded_crate);\n+        });\n+\n         time(sess.time_passes(), \"early lint checks\", || {\n             lint::check_ast_crate(&sess, &expanded_crate)\n         });"}, {"sha": "1a564eb28a3a039874bde3aacff131ac1d33dfed", "filename": "src/librustc_front/attr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61f5b2b0ca492a7eef9c362efb2108c77eac5bf8/src%2Flibrustc_front%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f5b2b0ca492a7eef9c362efb2108c77eac5bf8/src%2Flibrustc_front%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_front%2Fattr.rs?ref=61f5b2b0ca492a7eef9c362efb2108c77eac5bf8", "patch": "@@ -300,7 +300,6 @@ pub enum InlineAttr {\n \n /// Determine what `#[inline]` attribute is present in `attrs`, if any.\n pub fn find_inline_attr(diagnostic: Option<&SpanHandler>, attrs: &[Attribute]) -> InlineAttr {\n-    // FIXME (#2809)---validate the usage of #[inline] and #[inline]\n     attrs.iter().fold(InlineAttr::None, |ia,attr| {\n         match attr.node.value.node {\n             MetaWord(ref n) if *n == \"inline\" => {"}, {"sha": "bd99d33222db1ab4a25747e1cef1718b0f0d59bb", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/61f5b2b0ca492a7eef9c362efb2108c77eac5bf8/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f5b2b0ca492a7eef9c362efb2108c77eac5bf8/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=61f5b2b0ca492a7eef9c362efb2108c77eac5bf8", "patch": "@@ -323,7 +323,6 @@ pub enum InlineAttr {\n \n /// Determine what `#[inline]` attribute is present in `attrs`, if any.\n pub fn find_inline_attr(diagnostic: Option<&SpanHandler>, attrs: &[Attribute]) -> InlineAttr {\n-    // FIXME (#2809)---validate the usage of #[inline] and #[inline]\n     attrs.iter().fold(InlineAttr::None, |ia,attr| {\n         match attr.node.value.node {\n             MetaWord(ref n) if *n == \"inline\" => {"}, {"sha": "c6b9b016331aa61d0ed1b257b34161f247a0b504", "filename": "src/test/compile-fail/attr-usage-inline.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/61f5b2b0ca492a7eef9c362efb2108c77eac5bf8/src%2Ftest%2Fcompile-fail%2Fattr-usage-inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f5b2b0ca492a7eef9c362efb2108c77eac5bf8/src%2Ftest%2Fcompile-fail%2Fattr-usage-inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-usage-inline.rs?ref=61f5b2b0ca492a7eef9c362efb2108c77eac5bf8", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+\n+#[inline]\n+fn f() {}\n+\n+#[inline] //~ ERROR: attribute should be applied to function\n+struct S;\n+\n+fn main() {}"}, {"sha": "9bad6a8389a5d9fefb21b5837f49a02300092a96", "filename": "src/test/compile-fail/attr-usage-repr.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/61f5b2b0ca492a7eef9c362efb2108c77eac5bf8/src%2Ftest%2Fcompile-fail%2Fattr-usage-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61f5b2b0ca492a7eef9c362efb2108c77eac5bf8/src%2Ftest%2Fcompile-fail%2Fattr-usage-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-usage-repr.rs?ref=61f5b2b0ca492a7eef9c362efb2108c77eac5bf8", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(dead_code)]\n+#![feature(repr_simd)]\n+\n+#[repr(C)] //~ ERROR: attribute should be applied to struct or enum\n+fn f() {}\n+\n+#[repr(C)]\n+struct SExtern(f64, f64);\n+\n+#[repr(packed)]\n+struct SPacked(f64, f64);\n+\n+#[repr(simd)]\n+struct SSimd(f64, f64);\n+\n+#[repr(i8)] //~ ERROR: attribute should be applied to enum\n+struct SInt(f64, f64);\n+\n+#[repr(C)]\n+enum EExtern { A, B }\n+\n+#[repr(packed)] //~ ERROR: attribute should be applied to struct\n+enum EPacked { A, B }\n+\n+#[repr(simd)] //~ ERROR: attribute should be applied to struct\n+enum ESimd { A, B }\n+\n+#[repr(i8)]\n+enum EInt { A, B }\n+\n+fn main() {}"}]}