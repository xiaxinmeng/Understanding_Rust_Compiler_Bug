{"sha": "d381eca5dc000efbb90a439de860cc9a796d042d", "node_id": "C_kwDOAAsO6NoAKGQzODFlY2E1ZGMwMDBlZmJiOTBhNDM5ZGU4NjBjYzlhNzk2ZDA0MmQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-04T19:29:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-04T19:29:06Z"}, "message": "Rollup merge of #107646 - estebank:specific-span, r=compiler-errors\n\nProvide structured suggestion for binding needing type on E0594\n\nPartially address #45405.", "tree": {"sha": "6716e86c2912603afa694e01bf680631a4c9a540", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6716e86c2912603afa694e01bf680631a4c9a540"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d381eca5dc000efbb90a439de860cc9a796d042d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj3rICCRBK7hj4Ov3rIwAAVG8IAAabhHDe9zzC9kA1UGmmKXub\nsT1QsfluEosTzMgJ7KVojYCwz6F2lld55J0KoUf9LUSwqX0oz8nARuVvwlhci/LM\nDsjxmQVwrkJY6MKgEgn5wKsdt+1tOVgjKluJjZF734ONrF59hjpga4n264c8vKmb\n5OhW6IWSeDALhC46oEZQ01YmZ5Ju3TcW78oOens8t5Vk3cDrJ5aDjyfrMTLsgG2T\nD78Y410zO8V7Klx1r8PsgShCrtmpRVS8qlrQ3WX9ajIyJluEWq7/E73eLmxNvRwT\nFO7CU3VrtOfietVMA2z+jQH6UKX2TnIEgaDeMzRXvzaLJX8RLoTUpQEA6b/xczY=\n=n/sV\n-----END PGP SIGNATURE-----\n", "payload": "tree 6716e86c2912603afa694e01bf680631a4c9a540\nparent 3666fa080050594ab3ad26255c069e4d2000a3f4\nparent e6c56cda09633c0388ef4c6c9e97d064db829cc3\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675538946 +0100\ncommitter GitHub <noreply@github.com> 1675538946 +0100\n\nRollup merge of #107646 - estebank:specific-span, r=compiler-errors\n\nProvide structured suggestion for binding needing type on E0594\n\nPartially address #45405.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d381eca5dc000efbb90a439de860cc9a796d042d", "html_url": "https://github.com/rust-lang/rust/commit/d381eca5dc000efbb90a439de860cc9a796d042d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d381eca5dc000efbb90a439de860cc9a796d042d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3666fa080050594ab3ad26255c069e4d2000a3f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/3666fa080050594ab3ad26255c069e4d2000a3f4", "html_url": "https://github.com/rust-lang/rust/commit/3666fa080050594ab3ad26255c069e4d2000a3f4"}, {"sha": "e6c56cda09633c0388ef4c6c9e97d064db829cc3", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6c56cda09633c0388ef4c6c9e97d064db829cc3", "html_url": "https://github.com/rust-lang/rust/commit/e6c56cda09633c0388ef4c6c9e97d064db829cc3"}], "stats": {"total": 128, "additions": 98, "deletions": 30}, "files": [{"sha": "9f37b915b773a7e611f1aa6d0bc48bcd4a7a5d41", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 57, "deletions": 6, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/d381eca5dc000efbb90a439de860cc9a796d042d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d381eca5dc000efbb90a439de860cc9a796d042d/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=d381eca5dc000efbb90a439de860cc9a796d042d", "patch": "@@ -606,12 +606,63 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                                 }\n                             }\n                             Some((false, err_label_span, message)) => {\n-                                err.span_label(\n-                                    err_label_span,\n-                                    &format!(\n-                                        \"consider changing this binding's type to be: `{message}`\"\n-                                    ),\n-                                );\n+                                struct BindingFinder {\n+                                    span: Span,\n+                                    hir_id: Option<hir::HirId>,\n+                                }\n+\n+                                impl<'tcx> Visitor<'tcx> for BindingFinder {\n+                                    fn visit_stmt(&mut self, s: &'tcx hir::Stmt<'tcx>) {\n+                                        if let hir::StmtKind::Local(local) = s.kind {\n+                                            if local.pat.span == self.span {\n+                                                self.hir_id = Some(local.hir_id);\n+                                            }\n+                                        }\n+                                        hir::intravisit::walk_stmt(self, s);\n+                                    }\n+                                }\n+                                let hir_map = self.infcx.tcx.hir();\n+                                let def_id = self.body.source.def_id();\n+                                let hir_id = hir_map.local_def_id_to_hir_id(def_id.expect_local());\n+                                let node = hir_map.find(hir_id);\n+                                let hir_id = if let Some(hir::Node::Item(item)) = node\n+                                    && let hir::ItemKind::Fn(.., body_id) = item.kind\n+                                {\n+                                    let body = hir_map.body(body_id);\n+                                    let mut v = BindingFinder {\n+                                        span: err_label_span,\n+                                        hir_id: None,\n+                                    };\n+                                    v.visit_body(body);\n+                                    v.hir_id\n+                                } else {\n+                                    None\n+                                };\n+                                if let Some(hir_id) = hir_id\n+                                    && let Some(hir::Node::Local(local)) = hir_map.find(hir_id)\n+                                {\n+                                    let (changing, span, sugg) = match local.ty {\n+                                        Some(ty) => (\"changing\", ty.span, message),\n+                                        None => (\n+                                            \"specifying\",\n+                                            local.pat.span.shrink_to_hi(),\n+                                            format!(\": {message}\"),\n+                                        ),\n+                                    };\n+                                    err.span_suggestion_verbose(\n+                                        span,\n+                                        &format!(\"consider {changing} this binding's type\"),\n+                                        sugg,\n+                                        Applicability::HasPlaceholders,\n+                                    );\n+                                } else {\n+                                    err.span_label(\n+                                        err_label_span,\n+                                        &format!(\n+                                            \"consider changing this binding's type to be: `{message}`\"\n+                                        ),\n+                                    );\n+                                }\n                             }\n                             None => {}\n                         }"}, {"sha": "dd0817ff2331368ac12daa488cafed47f33477ad", "filename": "tests/ui/borrowck/borrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d381eca5dc000efbb90a439de860cc9a796d042d/tests%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d381eca5dc000efbb90a439de860cc9a796d042d/tests%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fborrowck-borrow-mut-base-ptr-in-aliasable-loc.stderr?ref=d381eca5dc000efbb90a439de860cc9a796d042d", "patch": "@@ -1,11 +1,13 @@\n error[E0594]: cannot assign to `**t1`, which is behind a `&` reference\n   --> $DIR/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs:9:5\n    |\n-LL |     let t1 = t0;\n-   |         -- consider changing this binding's type to be: `&mut &mut isize`\n-LL |     let p: &isize = &**t0;\n LL |     **t1 = 22;\n    |     ^^^^^^^^^ `t1` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider specifying this binding's type\n+   |\n+LL |     let t1: &mut &mut isize = t0;\n+   |           +++++++++++++++++\n \n error[E0502]: cannot borrow `**t0` as immutable because it is also borrowed as mutable\n   --> $DIR/borrowck-borrow-mut-base-ptr-in-aliasable-loc.rs:14:21"}, {"sha": "76e0b517354168c32ec4b4462bf417e948c9c6f9", "filename": "tests/ui/borrowck/issue-85765.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d381eca5dc000efbb90a439de860cc9a796d042d/tests%2Fui%2Fborrowck%2Fissue-85765.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d381eca5dc000efbb90a439de860cc9a796d042d/tests%2Fui%2Fborrowck%2Fissue-85765.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-85765.rs?ref=d381eca5dc000efbb90a439de860cc9a796d042d", "patch": "@@ -1,7 +1,7 @@\n fn main() {\n     let mut test = Vec::new();\n     let rofl: &Vec<Vec<i32>> = &mut test;\n-    //~^ NOTE consider changing this binding's type to be\n+    //~^ HELP consider changing this binding's type\n     rofl.push(Vec::new());\n     //~^ ERROR cannot borrow `*rofl` as mutable, as it is behind a `&` reference\n     //~| NOTE `rofl` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n@@ -15,14 +15,14 @@ fn main() {\n \n     #[rustfmt::skip]\n     let x: &usize = &mut{0};\n-    //~^ NOTE consider changing this binding's type to be\n+    //~^ HELP consider changing this binding's type\n     *x = 1;\n     //~^ ERROR cannot assign to `*x`, which is behind a `&` reference\n     //~| NOTE `x` is a `&` reference, so the data it refers to cannot be written\n \n     #[rustfmt::skip]\n     let y: &usize = &mut(0);\n-    //~^ NOTE consider changing this binding's type to be\n+    //~^ HELP consider changing this binding's type\n     *y = 1;\n     //~^ ERROR cannot assign to `*y`, which is behind a `&` reference\n     //~| NOTE `y` is a `&` reference, so the data it refers to cannot be written"}, {"sha": "b4bb128cbb420ffc881ecf1cec67f3ec5366f8b4", "filename": "tests/ui/borrowck/issue-85765.stderr", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d381eca5dc000efbb90a439de860cc9a796d042d/tests%2Fui%2Fborrowck%2Fissue-85765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d381eca5dc000efbb90a439de860cc9a796d042d/tests%2Fui%2Fborrowck%2Fissue-85765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-85765.stderr?ref=d381eca5dc000efbb90a439de860cc9a796d042d", "patch": "@@ -1,11 +1,13 @@\n error[E0596]: cannot borrow `*rofl` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-85765.rs:5:5\n    |\n-LL |     let rofl: &Vec<Vec<i32>> = &mut test;\n-   |         ---- consider changing this binding's type to be: `&mut Vec<Vec<i32>>`\n-LL |\n LL |     rofl.push(Vec::new());\n    |     ^^^^^^^^^^^^^^^^^^^^^ `rofl` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider changing this binding's type\n+   |\n+LL |     let rofl: &mut Vec<Vec<i32>> = &mut test;\n+   |               ~~~~~~~~~~~~~~~~~~\n \n error[E0594]: cannot assign to `*r`, which is behind a `&` reference\n   --> $DIR/issue-85765.rs:12:5\n@@ -21,20 +23,24 @@ LL |     let r = &mut mutvar;\n error[E0594]: cannot assign to `*x`, which is behind a `&` reference\n   --> $DIR/issue-85765.rs:19:5\n    |\n-LL |     let x: &usize = &mut{0};\n-   |         - consider changing this binding's type to be: `&mut usize`\n-LL |\n LL |     *x = 1;\n    |     ^^^^^^ `x` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this binding's type\n+   |\n+LL |     let x: &mut usize = &mut{0};\n+   |            ~~~~~~~~~~\n \n error[E0594]: cannot assign to `*y`, which is behind a `&` reference\n   --> $DIR/issue-85765.rs:26:5\n    |\n-LL |     let y: &usize = &mut(0);\n-   |         - consider changing this binding's type to be: `&mut usize`\n-LL |\n LL |     *y = 1;\n    |     ^^^^^^ `y` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider changing this binding's type\n+   |\n+LL |     let y: &mut usize = &mut(0);\n+   |            ~~~~~~~~~~\n \n error: aborting due to 4 previous errors\n "}, {"sha": "e062a253767ded6ab491ae70d47ed53eb8fd10e4", "filename": "tests/ui/borrowck/issue-91206.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d381eca5dc000efbb90a439de860cc9a796d042d/tests%2Fui%2Fborrowck%2Fissue-91206.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d381eca5dc000efbb90a439de860cc9a796d042d/tests%2Fui%2Fborrowck%2Fissue-91206.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-91206.rs?ref=d381eca5dc000efbb90a439de860cc9a796d042d", "patch": "@@ -9,7 +9,7 @@ impl TestClient {\n fn main() {\n     let client = TestClient;\n     let inner = client.get_inner_ref();\n-    //~^ NOTE consider changing this binding's type to be\n+    //~^ HELP consider specifying this binding's type\n     inner.clear();\n     //~^ ERROR cannot borrow `*inner` as mutable, as it is behind a `&` reference [E0596]\n     //~| NOTE `inner` is a `&` reference, so the data it refers to cannot be borrowed as mutable"}, {"sha": "6653d497873e79d058a20ac347d94d93d7520ea5", "filename": "tests/ui/borrowck/issue-91206.stderr", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d381eca5dc000efbb90a439de860cc9a796d042d/tests%2Fui%2Fborrowck%2Fissue-91206.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d381eca5dc000efbb90a439de860cc9a796d042d/tests%2Fui%2Fborrowck%2Fissue-91206.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-91206.stderr?ref=d381eca5dc000efbb90a439de860cc9a796d042d", "patch": "@@ -1,11 +1,13 @@\n error[E0596]: cannot borrow `*inner` as mutable, as it is behind a `&` reference\n   --> $DIR/issue-91206.rs:13:5\n    |\n-LL |     let inner = client.get_inner_ref();\n-   |         ----- consider changing this binding's type to be: `&mut Vec<usize>`\n-LL |\n LL |     inner.clear();\n    |     ^^^^^^^^^^^^^ `inner` is a `&` reference, so the data it refers to cannot be borrowed as mutable\n+   |\n+help: consider specifying this binding's type\n+   |\n+LL |     let inner: &mut Vec<usize> = client.get_inner_ref();\n+   |              +++++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "ea4f9abb87d9adeab8fafe633bc6a09591ee8197", "filename": "tests/ui/borrowck/issue-92015.stderr", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d381eca5dc000efbb90a439de860cc9a796d042d/tests%2Fui%2Fborrowck%2Fissue-92015.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d381eca5dc000efbb90a439de860cc9a796d042d/tests%2Fui%2Fborrowck%2Fissue-92015.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fborrowck%2Fissue-92015.stderr?ref=d381eca5dc000efbb90a439de860cc9a796d042d", "patch": "@@ -1,10 +1,13 @@\n error[E0594]: cannot assign to `*foo`, which is behind a `&` reference\n   --> $DIR/issue-92015.rs:6:5\n    |\n-LL |     let foo = Some(&0).unwrap();\n-   |         --- consider changing this binding's type to be: `&mut i32`\n LL |     *foo = 1;\n    |     ^^^^^^^^ `foo` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider specifying this binding's type\n+   |\n+LL |     let foo: &mut i32 = Some(&0).unwrap();\n+   |            ++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "84e09afac0a2dca67beff200753c983da299d3b7", "filename": "tests/ui/issues/issue-51515.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d381eca5dc000efbb90a439de860cc9a796d042d/tests%2Fui%2Fissues%2Fissue-51515.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d381eca5dc000efbb90a439de860cc9a796d042d/tests%2Fui%2Fissues%2Fissue-51515.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-51515.rs?ref=d381eca5dc000efbb90a439de860cc9a796d042d", "patch": "@@ -5,6 +5,7 @@ fn main() {\n     *foo = 32;\n     //~^ ERROR cannot assign to `*foo`, which is behind a `&` reference\n     let bar = foo;\n+    //~^ HELP consider specifying this binding's type\n     *bar = 64;\n     //~^ ERROR cannot assign to `*bar`, which is behind a `&` reference\n }"}, {"sha": "94e5c9f1b832a6e019e1c8273ba76f4c7c448c45", "filename": "tests/ui/issues/issue-51515.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d381eca5dc000efbb90a439de860cc9a796d042d/tests%2Fui%2Fissues%2Fissue-51515.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d381eca5dc000efbb90a439de860cc9a796d042d/tests%2Fui%2Fissues%2Fissue-51515.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-51515.stderr?ref=d381eca5dc000efbb90a439de860cc9a796d042d", "patch": "@@ -10,12 +10,15 @@ LL |     let foo = &mut 16;\n    |               ~~~~~~~\n \n error[E0594]: cannot assign to `*bar`, which is behind a `&` reference\n-  --> $DIR/issue-51515.rs:8:5\n+  --> $DIR/issue-51515.rs:9:5\n    |\n-LL |     let bar = foo;\n-   |         --- consider changing this binding's type to be: `&mut i32`\n LL |     *bar = 64;\n    |     ^^^^^^^^^ `bar` is a `&` reference, so the data it refers to cannot be written\n+   |\n+help: consider specifying this binding's type\n+   |\n+LL |     let bar: &mut i32 = foo;\n+   |            ++++++++++\n \n error: aborting due to 2 previous errors\n "}]}