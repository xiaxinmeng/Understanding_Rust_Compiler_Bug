{"sha": "ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjNGQwNWRlM2I3MWE2Mjg2YjI0ZjkyMjM3MzFiN2JkY2ZjMDk3Zjg=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-26T09:29:47Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-26T09:37:50Z"}, "message": "Remove ty_native_fn\n\nIt was being used as a clumsy synonym of ty_fn.", "tree": {"sha": "db647b317599f2553a3fac20eb9fc991d516d7a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/db647b317599f2553a3fac20eb9fc991d516d7a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "html_url": "https://github.com/rust-lang/rust/commit/ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "566a4be1f892eee66f88b832ff04421ad70cb1ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/566a4be1f892eee66f88b832ff04421ad70cb1ee", "html_url": "https://github.com/rust-lang/rust/commit/566a4be1f892eee66f88b832ff04421ad70cb1ee"}], "stats": {"total": 166, "additions": 38, "deletions": 128}, "files": [{"sha": "01466fbc52be26d62143763343608553a9c7dba6", "filename": "src/comp/metadata/decoder.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fdecoder.rs?ref=ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "patch": "@@ -197,9 +197,6 @@ fn lookup_def(cnum: ast::crate_num, data: @[u8], did_: ast::def_id) ->\n           'u' { ast::def_fn(did, ast::unsafe_fn) }\n           'f' { ast::def_fn(did, ast::impure_fn) }\n           'p' { ast::def_fn(did, ast::pure_fn) }\n-          'U' { ast::def_native_fn(did, ast::unsafe_fn) }\n-          'F' { ast::def_native_fn(did, ast::impure_fn) }\n-          'P' { ast::def_native_fn(did, ast::pure_fn) }\n           'y' { ast::def_ty(did) }\n           'T' { ast::def_native_ty(did) }\n           't' { ast::def_ty(did) }"}, {"sha": "31db8561dec4fad57005d2f67d19e215be34fec7", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "patch": "@@ -427,12 +427,11 @@ fn encode_info_for_native_item(ecx: @encode_ctxt, ebml_w: ebml::writer,\n                     ty::mk_native(ecx.ccx.tcx, local_def(nitem.id)));\n       }\n       native_item_fn(fn_decl, tps) {\n-        let letter =\n-            alt fn_decl.purity {\n-              unsafe_fn { 'U' }\n-              pure_fn { 'P' }   // this is currently impossible, but hey.\n-              impure_fn { 'F' }\n-            } as u8;\n+        let letter = alt fn_decl.purity {\n+          unsafe_fn { 'u' }\n+          pure_fn { 'p' }   // this is currently impossible, but hey.\n+          impure_fn { 'f' }\n+        } as u8;\n         encode_def_id(ebml_w, local_def(nitem.id));\n         encode_family(ebml_w, letter);\n         encode_type_param_bounds(ebml_w, ecx, tps);"}, {"sha": "d9087df05f80222d2bb0631161bbf0a06ddc7c7d", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "patch": "@@ -245,10 +245,6 @@ fn parse_ty(st: @pstate, conv: conv_did) -> ty::t {\n         let proto = parse_proto(next(st) as char);\n         parse_ty_rust_fn(st, conv, proto)\n       }\n-      'N' {\n-        let func = parse_ty_fn(st, conv);\n-        ret ty::mk_native_fn(st.tcx, func.inputs, func.output);\n-      }\n       'r' {\n         assert (next(st) as char == '[');\n         let def = parse_def(st, conv);"}, {"sha": "5f78f305d8d6f14a5c2e28f4a6b7acf5d692cb97", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "patch": "@@ -153,11 +153,6 @@ fn enc_sty(w: io::writer, cx: @ctxt, st: ty::sty) {\n         enc_proto(w, f.proto);\n         enc_ty_fn(w, cx, f);\n       }\n-      ty::ty_native_fn(args, out) {\n-        w.write_char('N');\n-        enc_ty_fn(w, cx, {proto: proto_bare, inputs: args, output: out,\n-                          ret_style: return_val, constraints: []});\n-      }\n       ty::ty_res(def, ty, tps) {\n         w.write_str(\"r[\");\n         w.write_str(cx.ds(def));"}, {"sha": "10a45349d4a9208126e6063b3bc520ffee849858", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "patch": "@@ -562,7 +562,7 @@ fn copy_is_expensive(tcx: ty::ctxt, ty: ty::t) -> bool {\n           ty::ty_ptr(_) { 1u }\n           ty::ty_box(_) | ty::ty_iface(_, _) { 3u }\n           ty::ty_constr(t, _) | ty::ty_res(_, t, _) { score_ty(tcx, t) }\n-          ty::ty_fn(_) | ty::ty_native_fn(_, _) { 4u }\n+          ty::ty_fn(_) { 4u }\n           ty::ty_str | ty::ty_vec(_) | ty::ty_param(_, _) { 50u }\n           ty::ty_uniq(mt) { 1u + score_ty(tcx, mt.ty) }\n           ty::ty_enum(_, ts) | ty::ty_tup(ts) {"}, {"sha": "ccdf2831fdb7c84af4a883188c1fe43f5c23655a", "filename": "src/comp/middle/fn_usage.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Ffn_usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Ffn_usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ffn_usage.rs?ref=ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "patch": "@@ -19,8 +19,7 @@ fn fn_usage_expr(expr: @ast::expr,\n       ast::expr_path(path) {\n         if !ctx.unsafe_fn_legal {\n             alt ctx.tcx.def_map.find(expr.id) {\n-              some(ast::def_fn(_, ast::unsafe_fn)) |\n-              some(ast::def_native_fn(_, ast::unsafe_fn)) {\n+              some(ast::def_fn(_, ast::unsafe_fn)) {\n                 log(error, (\"expr=\", expr_to_str(expr)));\n                 ctx.tcx.sess.span_fatal(\n                     expr.span,"}, {"sha": "0841218e5f37f66ba7e39fa544065b4058df1810", "filename": "src/comp/middle/gc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fgc.rs?ref=ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "patch": "@@ -131,8 +131,7 @@ fn type_is_gc_relevant(cx: ty::ctxt, ty: ty::t) -> bool {\n       }\n       ty::ty_constr(sub, _) { ret type_is_gc_relevant(cx, sub); }\n       ty::ty_box(_) | ty::ty_uniq(_) | ty::ty_fn(_) |\n-      ty::ty_native_fn(_, _) | ty::ty_param(_, _) |\n-      ty::ty_res(_, _, _) { ret true; }\n+      ty::ty_param(_, _) | ty::ty_res(_, _, _) { ret true; }\n       ty::ty_var(_) {\n         fail \"ty_var in type_is_gc_relevant\";\n       }"}, {"sha": "0781f2ef1a1650086798473acd647f861cbb4df6", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "patch": "@@ -1365,9 +1365,8 @@ fn lookup_in_mie(e: env, mie: mod_index_entry, ns: namespace) ->\n           }\n           ast::native_item_fn(decl, _) {\n             if ns == ns_val(ns_any_value) {\n-                ret some(ast::def_native_fn(\n-                    local_def(native_item.id),\n-                    decl.purity));\n+                ret some(ast::def_fn(local_def(native_item.id),\n+                                     decl.purity));\n             }\n           }\n         }\n@@ -1462,8 +1461,7 @@ fn ns_for_def(d: def) -> namespace {\n       ast::def_variant(_, _) { ns_val(ns_a_enum) }\n       ast::def_fn(_, _) | ast::def_self(_) |\n       ast::def_const(_) | ast::def_arg(_, _) | ast::def_local(_, _) |\n-      ast::def_upvar(_, _, _) |  ast::def_native_fn(_, _) | ast::def_self(_)\n-        { ns_val(ns_any_value) }\n+      ast::def_upvar(_, _, _) |  ast::def_self(_) { ns_val(ns_any_value) }\n       ast::def_mod(_) | ast::def_native_mod(_) { ns_module }\n       ast::def_ty(_) | ast::def_binding(_) | ast::def_use(_) |\n       ast::def_native_ty(_) { ns_type }"}, {"sha": "7edbcb4929f2cb6bdc41c22970581e8cd0d4916c", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "patch": "@@ -413,7 +413,6 @@ fn shape_of(ccx: @crate_ctxt, t: ty::t, ty_param_map: [uint]) -> [u8] {\n         }\n         add_substr(s, sub);\n       }\n-      ty::ty_native_fn(_, _) { s += [shape_u32]; }\n       ty::ty_iface(_, _) { s += [shape_iface]; }\n       ty::ty_res(did, raw_subt, tps) {\n         let subt = ty::substitute_type_params(ccx.tcx, tps, raw_subt);"}, {"sha": "d3a814124576303f482c2868307a83056fc338d8", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "patch": "@@ -169,10 +169,6 @@ fn type_of_inner(cx: @crate_ctxt, sp: span, t: ty::t)\n       ty::ty_fn(_) {\n         T_fn_pair(cx, type_of_fn_from_ty(cx, sp, t, []))\n       }\n-      ty::ty_native_fn(args, out) {\n-        let nft = native_fn_wrapper_type(cx, sp, [], t);\n-        T_fn_pair(cx, nft)\n-      }\n       ty::ty_iface(_, _) { T_opaque_iface_ptr(cx) }\n       ty::ty_res(_, sub, tps) {\n         let sub1 = ty::substitute_type_params(cx.tcx, tps, sub);\n@@ -233,7 +229,7 @@ fn type_of_ty_param_bounds_and_ty(lcx: @local_ctxt, sp: span,\n     let cx = lcx.ccx;\n     let t = tpt.ty;\n     alt ty::struct(cx.tcx, t) {\n-      ty::ty_fn(_) | ty::ty_native_fn(_, _) {\n+      ty::ty_fn(_) {\n         ret type_of_fn_from_ty(cx, sp, t, *tpt.bounds);\n       }\n       _ {\n@@ -1274,7 +1270,7 @@ fn make_take_glue(cx: @block_ctxt, v: ValueRef, t: ty::t) {\n         Store(bcx, s, v);\n         bcx\n       }\n-      ty::ty_native_fn(_, _) | ty::ty_fn(_) {\n+      ty::ty_fn(_) {\n         trans_closure::make_fn_glue(bcx, v, t, take_ty)\n       }\n       ty::ty_opaque_closure_ptr(ck) {\n@@ -1350,7 +1346,7 @@ fn make_free_glue(bcx: @block_ctxt, v: ValueRef, t: ty::t) {\n         Call(bcx, ccx.upcalls.free_shared_type_desc, [v]);\n         bcx\n       }\n-      ty::ty_native_fn(_, _) | ty::ty_fn(_) {\n+      ty::ty_fn(_) {\n         trans_closure::make_fn_glue(bcx, v, t, free_ty)\n       }\n       ty::ty_opaque_closure_ptr(ck) {\n@@ -1375,7 +1371,7 @@ fn make_drop_glue(bcx: @block_ctxt, v0: ValueRef, t: ty::t) {\n           ty::ty_res(did, inner, tps) {\n             trans_res_drop(bcx, v0, did, inner, tps)\n           }\n-          ty::ty_native_fn(_, _) | ty::ty_fn(_) {\n+          ty::ty_fn(_) {\n             trans_closure::make_fn_glue(bcx, v0, t, drop_ty)\n           }\n           ty::ty_opaque_closure_ptr(ck) {\n@@ -2637,7 +2633,7 @@ fn trans_var(cx: @block_ctxt, sp: span, def: ast::def, id: ast::node_id)\n     -> lval_maybe_callee {\n     let ccx = bcx_ccx(cx);\n     alt def {\n-      ast::def_fn(did, _) | ast::def_native_fn(did, _) {\n+      ast::def_fn(did, _) {\n         ret lval_static_fn(cx, did, id);\n       }\n       ast::def_variant(tid, vid) {\n@@ -4697,7 +4693,7 @@ fn c_stack_tys(ccx: @crate_ctxt,\n                sp: span,\n                id: ast::node_id) -> @c_stack_tys {\n     alt ty::struct(ccx.tcx, ty::node_id_to_type(ccx.tcx, id)) {\n-      ty::ty_native_fn(arg_tys, ret_ty) {\n+      ty::ty_fn({inputs: arg_tys, output: ret_ty, _}) {\n         let tcx = ccx.tcx;\n         let llargtys = type_of_explicit_args(ccx, sp, arg_tys);\n         check non_ty_var(ccx, ret_ty); // NDM does this truly hold?\n@@ -5102,7 +5098,7 @@ fn native_fn_wrapper_type(cx: @crate_ctxt, sp: span,\n                           param_bounds: [ty::param_bounds],\n                           x: ty::t) -> TypeRef {\n     alt ty::struct(cx.tcx, x) {\n-      ty::ty_native_fn(args, out) {\n+      ty::ty_fn({inputs: args, output: out, _}) {\n         ret type_of_fn(cx, sp, args, out, param_bounds);\n       }\n     }"}, {"sha": "0cc0035b0711e9ac98ef77e6a2b0166af2cafc22", "filename": "src/comp/middle/trans_closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_closure.rs?ref=ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "patch": "@@ -667,8 +667,8 @@ fn make_fn_glue(\n     };\n \n     ret alt ty::struct(tcx, t) {\n-      ty::ty_native_fn(_, _) | ty::ty_fn({proto: ast::proto_bare, _}) { bcx }\n-      ty::ty_fn({proto: ast::proto_block, _}) { bcx }\n+      ty::ty_fn({proto: ast::proto_bare, _}) |\n+      ty::ty_fn({proto: ast::proto_block, _}) |\n       ty::ty_fn({proto: ast::proto_any, _}) { bcx }\n       ty::ty_fn({proto: ast::proto_uniq, _}) { fn_env(ty::ck_uniq) }\n       ty::ty_fn({proto: ast::proto_box, _}) { fn_env(ty::ck_box) }"}, {"sha": "e1b0ccccad1b8658f1519d09a3a8c2a8ad0a9f49", "filename": "src/comp/middle/tstate/auxiliary.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftstate%2Fauxiliary.rs?ref=ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "patch": "@@ -1075,7 +1075,7 @@ fn callee_modes(fcx: fn_ctxt, callee: node_id) -> [ty::mode] {\n         ty::type_autoderef(fcx.ccx.tcx,\n                            ty::node_id_to_type(fcx.ccx.tcx, callee));\n     alt ty::struct(fcx.ccx.tcx, ty) {\n-      ty::ty_fn({inputs: args, _}) | ty::ty_native_fn(args, _) {\n+      ty::ty_fn({inputs: args, _}) {\n         let modes = [];\n         for arg: ty::arg in args { modes += [arg.mode]; }\n         ret modes;"}, {"sha": "dbd7a0c14cd739e83c54f4a2c6b649cfb09a54a6", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 4, "deletions": 58, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "patch": "@@ -70,7 +70,6 @@ export mk_mach_int;\n export mk_mach_uint;\n export mk_mach_float;\n export mk_native;\n-export mk_native_fn;\n export mk_nil;\n export mk_iface;\n export mk_res;\n@@ -106,7 +105,6 @@ export iface_methods, store_iface_methods, impl_iface;\n export enum_variant_with_id;\n export ty_param_substs_opt_and_ty;\n export ty_param_bounds_and_ty;\n-export ty_native_fn;\n export ty_bool;\n export ty_bot;\n export ty_box;\n@@ -265,7 +263,6 @@ enum sty {\n     ty_ptr(mt),\n     ty_rec([field]),\n     ty_fn(fn_ty),\n-    ty_native_fn([arg], t),\n     ty_iface(def_id, [t]),\n     ty_res(def_id, t, [t]),\n     ty_tup([t]),\n@@ -493,9 +490,6 @@ fn mk_raw_ty(cx: ctxt, st: sty) -> @raw_t {\n       ty_fn(f) {\n         derive_flags_sig(cx, has_params, has_vars, f.inputs, f.output);\n       }\n-      ty_native_fn(args, tt) {\n-        derive_flags_sig(cx, has_params, has_vars, args, tt);\n-      }\n       ty_res(_, tt, tps) {\n         derive_flags_t(cx, has_params, has_vars, tt);\n         for tt: t in tps { derive_flags_t(cx, has_params, has_vars, tt); }\n@@ -603,10 +597,6 @@ fn mk_fn(cx: ctxt, fty: fn_ty) -> t {\n     ret gen_ty(cx, ty_fn(fty));\n }\n \n-fn mk_native_fn(cx: ctxt, args: [arg], ty: t) -> t {\n-    ret gen_ty(cx, ty_native_fn(args, ty));\n-}\n-\n fn mk_iface(cx: ctxt, did: ast::def_id, tys: [t]) -> t {\n     ret gen_ty(cx, ty_iface(did, tys));\n }\n@@ -692,10 +682,6 @@ fn walk_ty(cx: ctxt, ty: t, walker: fn(t)) {\n         for a: arg in f.inputs { walk_ty(cx, a.ty, walker); }\n         walk_ty(cx, f.output, walker);\n       }\n-      ty_native_fn(args, ret_ty) {\n-        for a: arg in args { walk_ty(cx, a.ty, walker); }\n-        walk_ty(cx, ret_ty, walker);\n-      }\n       ty_res(_, sub, tps) {\n         walk_ty(cx, sub, walker);\n         for tp: t in tps { walk_ty(cx, tp, walker); }\n@@ -774,14 +760,6 @@ fn fold_ty(cx: ctxt, fld: fold_mode, ty_0: t) -> t {\n                         output: fold_ty(cx, fld, f.output)\n                         with f});\n       }\n-      ty_native_fn(args, ret_ty) {\n-        let new_args: [arg] = [];\n-        for a: arg in args {\n-            let new_ty = fold_ty(cx, fld, a.ty);\n-            new_args += [{mode: a.mode, ty: new_ty}];\n-        }\n-        ty = mk_native_fn(cx, new_args, fold_ty(cx, fld, ret_ty));\n-      }\n       ty_res(did, subty, tps) {\n         let new_tps = [];\n         for tp: t in tps { new_tps += [fold_ty(cx, fld, tp)]; }\n@@ -823,7 +801,7 @@ fn type_is_bool(cx: ctxt, ty: t) -> bool {\n fn type_is_structural(cx: ctxt, ty: t) -> bool {\n     alt struct(cx, ty) {\n       ty_rec(_) | ty_tup(_) | ty_enum(_, _) | ty_fn(_) |\n-      ty_native_fn(_, _) | ty_res(_, _, _) { true }\n+      ty_res(_, _, _) { true }\n       _ { false }\n     }\n }\n@@ -1025,7 +1003,7 @@ fn type_kind(cx: ctxt, ty: t) -> kind {\n       // Scalar and unique types are sendable\n       ty_nil | ty_bot | ty_bool | ty_int(_) | ty_uint(_) | ty_float(_) |\n       ty_native(_) | ty_ptr(_) |\n-      ty_send_type | ty_str | ty_native_fn(_, _) { kind_sendable }\n+      ty_send_type | ty_str { kind_sendable }\n       ty_type { kind_copyable }\n       ty_fn(f) { proto_kind(f.proto) }\n       ty_opaque_closure_ptr(ck_block) { kind_noncopyable }\n@@ -1201,7 +1179,7 @@ fn type_is_pod(cx: ctxt, ty: t) -> bool {\n       ty_send_type | ty_type | ty_native(_) | ty_ptr(_) { result = true; }\n       // Boxed types\n       ty_str | ty_box(_) | ty_uniq(_) | ty_vec(_) | ty_fn(_) |\n-      ty_native_fn(_, _) | ty_iface(_, _) { result = false; }\n+      ty_iface(_, _) { result = false; }\n       // Structural types\n       ty_enum(did, tps) {\n         let variants = enum_variants(cx, did);\n@@ -1384,7 +1362,6 @@ fn hash_type_structure(st: sty) -> uint {\n \n       // ???\n       ty_fn(f) { ret hash_fn(27u, f.inputs, f.output); }\n-      ty_native_fn(args, rty) { ret hash_fn(28u, args, rty); }\n       ty_var(v) { ret hash_uint(30u, v as uint); }\n       ty_param(pid, _) { ret hash_uint(31u, pid); }\n       ty_type { ret 32u; }\n@@ -1542,18 +1519,13 @@ fn type_contains_params(cx: ctxt, typ: t) -> bool {\n fn ty_fn_args(cx: ctxt, fty: t) -> [arg] {\n     alt struct(cx, fty) {\n       ty::ty_fn(f) { ret f.inputs; }\n-      ty::ty_native_fn(a, _) { ret a; }\n       _ { cx.sess.bug(\"ty_fn_args() called on non-fn type\"); }\n     }\n }\n \n fn ty_fn_proto(cx: ctxt, fty: t) -> ast::proto {\n     alt struct(cx, fty) {\n       ty::ty_fn(f) { ret f.proto; }\n-      ty::ty_native_fn(_, _) {\n-        // FIXME: This should probably be proto_bare\n-        ret ast::proto_box;\n-      }\n       _ { cx.sess.bug(\"ty_fn_proto() called on non-fn type\"); }\n     }\n }\n@@ -1562,7 +1534,6 @@ pure fn ty_fn_ret(cx: ctxt, fty: t) -> t {\n     let sty = struct(cx, fty);\n     alt sty {\n       ty::ty_fn(f) { ret f.output; }\n-      ty::ty_native_fn(_, r) { ret r; }\n       _ {\n         // Unchecked is ok since we diverge here\n         // (might want to change the typechecker to allow\n@@ -1577,15 +1548,13 @@ pure fn ty_fn_ret(cx: ctxt, fty: t) -> t {\n fn ty_fn_ret_style(cx: ctxt, fty: t) -> ast::ret_style {\n     alt struct(cx, fty) {\n       ty::ty_fn(f) { f.ret_style }\n-      ty::ty_native_fn(_, _) { ast::return_val }\n       _ { cx.sess.bug(\"ty_fn_ret_style() called on non-fn type\"); }\n     }\n }\n \n fn is_fn_ty(cx: ctxt, fty: t) -> bool {\n     alt struct(cx, fty) {\n       ty::ty_fn(_) { ret true; }\n-      ty::ty_native_fn(_, _) { ret true; }\n       _ { ret false; }\n     }\n }\n@@ -2005,19 +1974,6 @@ mod unify {\n           x { x }\n         }\n     }\n-    fn unify_native_fn(cx: @ctxt, expected_inputs: [arg], expected_output: t,\n-                       actual_inputs: [arg], actual_output: t,\n-                       variance: variance) -> result {\n-        let result_ins = alt unify_args(cx, expected_inputs,\n-                                        actual_inputs, variance) {\n-            either::left(err) { ret err; }\n-            either::right(ts) { ts }\n-        };\n-        alt unify_step(cx, expected_output, actual_output, variance) {\n-          ures_ok(out) { ures_ok(mk_native_fn(cx.tcx, result_ins, out)) }\n-          err { err }\n-        }\n-    }\n \n     // If the given type is a variable, returns the structure of that type.\n     fn resolve_type_structure(tcx: ty_ctxt, vb: @var_bindings, typ: t) ->\n@@ -2403,15 +2359,6 @@ mod unify {\n               _ { ret ures_err(terr_mismatch); }\n             }\n           }\n-          ty::ty_native_fn(expected_inputs, expected_output) {\n-            alt struct(cx.tcx, actual) {\n-              ty::ty_native_fn(actual_inputs, actual_output) {\n-                ret unify_native_fn(cx, expected_inputs, expected_output,\n-                                    actual_inputs, actual_output, variance);\n-              }\n-              _ { ret ures_err(terr_mismatch); }\n-            }\n-          }\n           ty::ty_constr(expected_t, expected_constrs) {\n \n             // unify the base types...\n@@ -2595,8 +2542,7 @@ fn def_has_ty_params(def: ast::def) -> bool {\n       ast::def_arg(_, _) | ast::def_local(_, _) | ast::def_upvar(_, _, _) |\n       ast::def_ty_param(_, _) | ast::def_binding(_) | ast::def_use(_) |\n       ast::def_native_ty(_) | ast::def_self(_) | ast::def_ty(_) { false }\n-      ast::def_fn(_, _) | ast::def_variant(_, _) |\n-      ast::def_native_fn(_, _) { true }\n+      ast::def_fn(_, _) | ast::def_variant(_, _) { true }\n     }\n }\n "}, {"sha": "2327d79008a3a2ad22b13317e3be640970f3fe1c", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 12, "deletions": 21, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "patch": "@@ -109,10 +109,8 @@ fn ty_param_bounds_and_ty_for_def(fcx: @fn_ctxt, sp: span, defn: ast::def) ->\n           }\n         }\n       }\n-      ast::def_fn(id, _) { ret ty::lookup_item_type(fcx.ccx.tcx, id); }\n-      ast::def_native_fn(id, _) { ret ty::lookup_item_type(fcx.ccx.tcx, id); }\n-      ast::def_const(id) { ret ty::lookup_item_type(fcx.ccx.tcx, id); }\n-      ast::def_variant(_, vid) { ret ty::lookup_item_type(fcx.ccx.tcx, vid); }\n+      ast::def_fn(id, _) | ast::def_const(id) |\n+      ast::def_variant(_, id) { ret ty::lookup_item_type(fcx.ccx.tcx, id); }\n       ast::def_binding(id) {\n         assert (fcx.locals.contains_key(id.node));\n         let typ = ty::mk_var(fcx.ccx.tcx, lookup_local(fcx, sp, id.node));\n@@ -479,7 +477,11 @@ fn ty_of_native_fn_decl(tcx: ty::ctxt, mode: mode, decl: ast::fn_decl,\n     for a: ast::arg in decl.inputs { input_tys += [ty_of_arg(tcx, mode, a)]; }\n     let output_ty = ast_ty_to_ty(tcx, mode, decl.output);\n \n-    let t_fn = ty::mk_native_fn(tcx, input_tys, output_ty);\n+    let t_fn = ty::mk_fn(tcx, {proto: ast::proto_bare,\n+                               inputs: input_tys,\n+                               output: output_ty,\n+                               ret_style: ast::return_val,\n+                               constraints: []});\n     let tpt = {bounds: bounds, ty: t_fn};\n     tcx.tcache.insert(def_id, tpt);\n     ret tpt;\n@@ -1443,8 +1445,7 @@ fn require_pure_call(ccx: @crate_ctxt, caller_purity: ast::purity,\n       ast::unsafe_fn { ret; }\n       ast::impure_fn {\n         alt ccx.tcx.def_map.find(callee.id) {\n-          some(ast::def_fn(_, ast::unsafe_fn)) |\n-          some(ast::def_native_fn(_, ast::unsafe_fn)) {\n+          some(ast::def_fn(_, ast::unsafe_fn)) {\n             ccx.tcx.sess.span_err(\n                 sp,\n                 \"safe function calls function marked unsafe\");\n@@ -1457,7 +1458,6 @@ fn require_pure_call(ccx: @crate_ctxt, caller_purity: ast::purity,\n       ast::pure_fn {\n         alt ccx.tcx.def_map.find(callee.id) {\n           some(ast::def_fn(_, ast::pure_fn)) |\n-          some(ast::def_native_fn(_, ast::pure_fn)) |\n           some(ast::def_variant(_, _)) { ret; }\n           _ {\n             ccx.tcx.sess.span_err\n@@ -1626,7 +1626,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         // Grab the argument types\n         let arg_tys =\n             alt sty {\n-              ty::ty_fn({inputs: arg_tys, _}) | ty::ty_native_fn(arg_tys, _) {\n+              ty::ty_fn({inputs: arg_tys, _}) {\n                 arg_tys\n               }\n               _ {\n@@ -1726,16 +1726,14 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n         let bot = check_call(fcx, sp, f, args);\n \n         // Pull the return type out of the type of the function.\n-        let rt_1;\n         let fty = ty::expr_ty(fcx.ccx.tcx, f);\n-        alt structure_of(fcx, sp, fty) {\n+        let rt_1 = alt structure_of(fcx, sp, fty) {\n           ty::ty_fn(f) {\n             bot |= f.ret_style == ast::noreturn;\n-            rt_1 = f.output;\n+            f.output\n           }\n-          ty::ty_native_fn(_, rt) { rt_1 = rt; }\n           _ { fcx.ccx.tcx.sess.span_fatal(sp, \"calling non-function\"); }\n-        }\n+        };\n         write::ty_only_fixup(fcx, id, rt_1);\n         ret bot;\n     }\n@@ -2086,13 +2084,6 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n             cf = f.ret_style;\n             constrs = f.constraints;\n           }\n-          ty::ty_native_fn(arg_tys_, rt_) {\n-            proto = ast::proto_bare;\n-            arg_tys = arg_tys_;\n-            rt = rt_;\n-            cf = ast::return_val;\n-            constrs = [];\n-          }\n           _ { fail \"LHS of bind expr didn't have a function type?!\"; }\n         }\n "}, {"sha": "4ff96c17daadd26b9780b0189a89ebffb55187f8", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "patch": "@@ -46,7 +46,6 @@ enum def {\n     def_binding(def_id),\n     def_use(def_id),\n     def_native_ty(def_id),\n-    def_native_fn(def_id, purity),\n     def_upvar(def_id, @def, node_id), // node_id == expr_fn or expr_fn_block\n }\n "}, {"sha": "cb0545c07b7f7390dcf484d3c7fbee8ac92370c6", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "patch": "@@ -29,7 +29,7 @@ fn def_id_of_def(d: def) -> def_id {\n       def_native_mod(id) | def_const(id) | def_arg(id, _) | def_local(id, _) |\n       def_variant(_, id) | def_ty(id) | def_ty_param(id, _) |\n       def_binding(id) | def_use(id) | def_native_ty(id) |\n-      def_native_fn(id, _) | def_upvar(id, _, _) { id }\n+      def_upvar(id, _, _) { id }\n     }\n }\n "}, {"sha": "f2c342a295631ae162ae6927d82979bcaf832192", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ec4d05de3b71a6286b24f9223731b7bdcfc097f8/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=ec4d05de3b71a6286b24f9223731b7bdcfc097f8", "patch": "@@ -116,10 +116,6 @@ fn ty_to_str(cx: ctxt, typ: t) -> str {\n         fn_to_str(cx, f.proto, none, f.inputs, f.output, f.ret_style,\n                   f.constraints)\n       }\n-      ty_native_fn(inputs, output) {\n-        fn_to_str(cx, ast::proto_bare, none, inputs, output,\n-                  ast::return_val, [])\n-      }\n       ty_var(v) { \"<T\" + int::str(v) + \">\" }\n       ty_param(id, _) {\n         \"'\" + str::unsafe_from_bytes([('a' as u8) + (id as u8)])"}]}