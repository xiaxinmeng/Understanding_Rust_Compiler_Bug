{"sha": "d4288717c48c61e13d9bed39717101a1782b8cdf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0Mjg4NzE3YzQ4YzYxZTEzZDliZWQzOTcxNzEwMWExNzgyYjhjZGY=", "commit": {"author": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-02-11T03:30:33Z"}, "committer": {"name": "Keegan McAllister", "email": "kmcallister@mozilla.com", "date": "2015-02-11T03:36:31Z"}, "message": "Forbid undefined names in macro use / macro reexport\n\nFixes #21062.", "tree": {"sha": "ed34ea63be5837f5db1699ee2f8fd64d85fdb252", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed34ea63be5837f5db1699ee2f8fd64d85fdb252"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4288717c48c61e13d9bed39717101a1782b8cdf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4288717c48c61e13d9bed39717101a1782b8cdf", "html_url": "https://github.com/rust-lang/rust/commit/d4288717c48c61e13d9bed39717101a1782b8cdf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4288717c48c61e13d9bed39717101a1782b8cdf/comments", "author": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kmcallister", "id": 444997, "node_id": "MDQ6VXNlcjQ0NDk5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/444997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kmcallister", "html_url": "https://github.com/kmcallister", "followers_url": "https://api.github.com/users/kmcallister/followers", "following_url": "https://api.github.com/users/kmcallister/following{/other_user}", "gists_url": "https://api.github.com/users/kmcallister/gists{/gist_id}", "starred_url": "https://api.github.com/users/kmcallister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kmcallister/subscriptions", "organizations_url": "https://api.github.com/users/kmcallister/orgs", "repos_url": "https://api.github.com/users/kmcallister/repos", "events_url": "https://api.github.com/users/kmcallister/events{/privacy}", "received_events_url": "https://api.github.com/users/kmcallister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a954663db66fc8efb1889beaf7bd1771ecbb9b21", "url": "https://api.github.com/repos/rust-lang/rust/commits/a954663db66fc8efb1889beaf7bd1771ecbb9b21", "html_url": "https://github.com/rust-lang/rust/commit/a954663db66fc8efb1889beaf7bd1771ecbb9b21"}], "stats": {"total": 106, "additions": 80, "deletions": 26}, "files": [{"sha": "b46454bfdd04ef409d79137e3d0a3fdcc7de5218", "filename": "src/librustc/plugin/load.rs", "status": "modified", "additions": 41, "deletions": 26, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/d4288717c48c61e13d9bed39717101a1782b8cdf/src%2Flibrustc%2Fplugin%2Fload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4288717c48c61e13d9bed39717101a1782b8cdf/src%2Flibrustc%2Fplugin%2Fload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fplugin%2Fload.rs?ref=d4288717c48c61e13d9bed39717101a1782b8cdf", "patch": "@@ -17,7 +17,7 @@ use plugin::registry::Registry;\n use std::mem;\n use std::env;\n use std::dynamic_lib::DynamicLibrary;\n-use std::collections::HashSet;\n+use std::collections::{HashSet, HashMap};\n use std::borrow::ToOwned;\n use syntax::ast;\n use syntax::attr;\n@@ -116,6 +116,8 @@ pub fn load_plugins(sess: &Session, krate: &ast::Crate,\n     return loader.plugins;\n }\n \n+pub type MacroSelection = HashMap<token::InternedString, Span>;\n+\n // note that macros aren't expanded yet, and therefore macros can't add plugins.\n impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n     fn visit_item(&mut self, item: &ast::Item) {\n@@ -128,9 +130,9 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n             }\n         }\n \n-        // Parse the attributes relating to macro / plugin loading.\n-        let mut macro_selection = Some(HashSet::new());  // None => load all\n-        let mut reexport = HashSet::new();\n+        // Parse the attributes relating to macro loading.\n+        let mut import = Some(HashMap::new());  // None => load all\n+        let mut reexport = HashMap::new();\n         for attr in &item.attrs {\n             let mut used = true;\n             match &attr.name()[] {\n@@ -147,14 +149,14 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n                     let names = attr.meta_item_list();\n                     if names.is_none() {\n                         // no names => load all\n-                        macro_selection = None;\n+                        import = None;\n                     }\n-                    if let (Some(sel), Some(names)) = (macro_selection.as_mut(), names) {\n-                        for name in names {\n-                            if let ast::MetaWord(ref name) = name.node {\n-                                sel.insert(name.clone());\n+                    if let (Some(sel), Some(names)) = (import.as_mut(), names) {\n+                        for attr in names {\n+                            if let ast::MetaWord(ref name) = attr.node {\n+                                sel.insert(name.clone(), attr.span);\n                             } else {\n-                                self.sess.span_err(name.span, \"bad macro import\");\n+                                self.sess.span_err(attr.span, \"bad macro import\");\n                             }\n                         }\n                     }\n@@ -168,11 +170,11 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n                         }\n                     };\n \n-                    for name in names {\n-                        if let ast::MetaWord(ref name) = name.node {\n-                            reexport.insert(name.clone());\n+                    for attr in names {\n+                        if let ast::MetaWord(ref name) = attr.node {\n+                            reexport.insert(name.clone(), attr.span);\n                         } else {\n-                            self.sess.span_err(name.span, \"bad macro reexport\");\n+                            self.sess.span_err(attr.span, \"bad macro reexport\");\n                         }\n                     }\n                 }\n@@ -183,7 +185,7 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n             }\n         }\n \n-        self.load_macros(item, macro_selection, Some(reexport))\n+        self.load_macros(item, import, reexport)\n     }\n \n     fn visit_mac(&mut self, _: &ast::Mac) {\n@@ -195,10 +197,10 @@ impl<'a, 'v> Visitor<'v> for PluginLoader<'a> {\n impl<'a> PluginLoader<'a> {\n     pub fn load_macros<'b>(&mut self,\n                            vi: &ast::Item,\n-                           macro_selection: Option<HashSet<token::InternedString>>,\n-                           reexport: Option<HashSet<token::InternedString>>) {\n-        if let (Some(sel), Some(re)) = (macro_selection.as_ref(), reexport.as_ref()) {\n-            if sel.is_empty() && re.is_empty() {\n+                           import: Option<MacroSelection>,\n+                           reexport: MacroSelection) {\n+        if let Some(sel) = import.as_ref() {\n+            if sel.is_empty() && reexport.is_empty() {\n                 return;\n             }\n         }\n@@ -211,19 +213,32 @@ impl<'a> PluginLoader<'a> {\n \n         let pmd = self.reader.read_plugin_metadata(CrateOrString::Krate(vi));\n \n+        let mut seen = HashSet::new();\n         for mut def in pmd.exported_macros() {\n             let name = token::get_ident(def.ident);\n-            def.use_locally = match macro_selection.as_ref() {\n+            seen.insert(name.clone());\n+\n+            def.use_locally = match import.as_ref() {\n                 None => true,\n-                Some(sel) => sel.contains(&name),\n-            };\n-            def.export = if let Some(ref re) = reexport {\n-                re.contains(&name)\n-            } else {\n-                false // Don't reexport macros from crates loaded from the command line\n+                Some(sel) => sel.contains_key(&name),\n             };\n+            def.export = reexport.contains_key(&name);\n             self.plugins.macros.push(def);\n         }\n+\n+        if let Some(sel) = import.as_ref() {\n+            for (name, span) in sel.iter() {\n+                if !seen.contains(name) {\n+                    self.sess.span_err(*span, \"imported macro not found\");\n+                }\n+            }\n+        }\n+\n+        for (name, span) in reexport.iter() {\n+            if !seen.contains(name) {\n+                self.sess.span_err(*span, \"reexported macro not found\");\n+            }\n+        }\n     }\n \n     pub fn load_plugin<'b>(&mut self,"}, {"sha": "e9b3ceff83de44814f138573876319998986093f", "filename": "src/test/compile-fail/macro-reexport-undef.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d4288717c48c61e13d9bed39717101a1782b8cdf/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4288717c48c61e13d9bed39717101a1782b8cdf/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-reexport-undef.rs?ref=d4288717c48c61e13d9bed39717101a1782b8cdf", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:two_macros.rs\n+// ignore-stage1\n+\n+#[macro_use(macro_two)]\n+#[macro_reexport(no_way)] //~ ERROR reexported macro not found\n+extern crate two_macros;\n+\n+pub fn main() {\n+    macro_two!();\n+}"}, {"sha": "a5a350bd30e1ad7b256e21036a973a1168ef1bd6", "filename": "src/test/compile-fail/macro-use-undef.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/d4288717c48c61e13d9bed39717101a1782b8cdf/src%2Ftest%2Fcompile-fail%2Fmacro-use-undef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4288717c48c61e13d9bed39717101a1782b8cdf/src%2Ftest%2Fcompile-fail%2Fmacro-use-undef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-use-undef.rs?ref=d4288717c48c61e13d9bed39717101a1782b8cdf", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:two_macros.rs\n+// ignore-stage1\n+\n+#[macro_use(macro_two, no_way)] //~ ERROR imported macro not found\n+extern crate two_macros;\n+\n+pub fn main() {\n+    macro_two!();\n+}"}]}