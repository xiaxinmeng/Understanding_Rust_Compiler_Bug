{"sha": "3a95e12c9bbe978fc2e89ec50bb8aa82694003e8", "node_id": "C_kwDOAAsO6NoAKDNhOTVlMTJjOWJiZTk3OGZjMmU4OWVjNTBiYjhhYTgyNjk0MDAzZTg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-22T10:28:35Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-22T10:49:02Z"}, "message": "disable strict-provenance-violating doctests in Miri", "tree": {"sha": "147ad7d0b476ec56ee3c3ddc4459867de03486c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/147ad7d0b476ec56ee3c3ddc4459867de03486c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a95e12c9bbe978fc2e89ec50bb8aa82694003e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a95e12c9bbe978fc2e89ec50bb8aa82694003e8", "html_url": "https://github.com/rust-lang/rust/commit/3a95e12c9bbe978fc2e89ec50bb8aa82694003e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a95e12c9bbe978fc2e89ec50bb8aa82694003e8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a78c9bee4d9d51a3891bd8ecae1f28a93b83653b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a78c9bee4d9d51a3891bd8ecae1f28a93b83653b", "html_url": "https://github.com/rust-lang/rust/commit/a78c9bee4d9d51a3891bd8ecae1f28a93b83653b"}], "stats": {"total": 12, "additions": 12, "deletions": 0}, "files": [{"sha": "d6e9da187e80a2f61bf2f3cbf16742610cfe580d", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a95e12c9bbe978fc2e89ec50bb8aa82694003e8/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a95e12c9bbe978fc2e89ec50bb8aa82694003e8/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=3a95e12c9bbe978fc2e89ec50bb8aa82694003e8", "patch": "@@ -1493,11 +1493,13 @@ mod prim_ref {}\n /// However, a direct cast back is not possible. You need to use `transmute`:\n ///\n /// ```rust\n+/// # #[cfg(not(miri))] { // FIXME: use strict provenance APIs once they are stable, then remove this `cfg`\n /// # let fnptr: fn(i32) -> i32 = |x| x+2;\n /// # let fnptr_addr = fnptr as usize;\n /// let fnptr = fnptr_addr as *const ();\n /// let fnptr: fn(i32) -> i32 = unsafe { std::mem::transmute(fnptr) };\n /// assert_eq!(fnptr(40), 42);\n+/// # }\n /// ```\n ///\n /// Crucially, we `as`-cast to a raw pointer before `transmute`ing to a function pointer."}, {"sha": "76603e1018d19409951e6603d8c8e12fff6ed591", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a95e12c9bbe978fc2e89ec50bb8aa82694003e8/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a95e12c9bbe978fc2e89ec50bb8aa82694003e8/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=3a95e12c9bbe978fc2e89ec50bb8aa82694003e8", "patch": "@@ -112,11 +112,13 @@ impl<T: ?Sized> *const T {\n     ///\n     /// ```\n     /// #![feature(ptr_to_from_bits)]\n+    /// # #[cfg(not(miri))] { // doctest does not work with strict provenance\n     /// let array = [13, 42];\n     /// let p0: *const i32 = &array[0];\n     /// assert_eq!(<*const _>::from_bits(p0.to_bits()), p0);\n     /// let p1: *const i32 = &array[1];\n     /// assert_eq!(p1.to_bits() - p0.to_bits(), 4);\n+    /// # }\n     /// ```\n     #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n     #[deprecated(\n@@ -140,9 +142,11 @@ impl<T: ?Sized> *const T {\n     ///\n     /// ```\n     /// #![feature(ptr_to_from_bits)]\n+    /// # #[cfg(not(miri))] { // doctest does not work with strict provenance\n     /// use std::ptr::NonNull;\n     /// let dangling: *const u8 = NonNull::dangling().as_ptr();\n     /// assert_eq!(<*const u8>::from_bits(1), dangling);\n+    /// # }\n     /// ```\n     #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n     #[deprecated("}, {"sha": "b03cad18e4aedf81e89d19f8edd1329d0f5b4097", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a95e12c9bbe978fc2e89ec50bb8aa82694003e8/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a95e12c9bbe978fc2e89ec50bb8aa82694003e8/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=3a95e12c9bbe978fc2e89ec50bb8aa82694003e8", "patch": "@@ -117,12 +117,14 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// ```\n     /// #![feature(ptr_to_from_bits)]\n+    /// # #[cfg(not(miri))] { // doctest does not work with strict provenance\n     /// let mut array = [13, 42];\n     /// let mut it = array.iter_mut();\n     /// let p0: *mut i32 = it.next().unwrap();\n     /// assert_eq!(<*mut _>::from_bits(p0.to_bits()), p0);\n     /// let p1: *mut i32 = it.next().unwrap();\n     /// assert_eq!(p1.to_bits() - p0.to_bits(), 4);\n+    /// }\n     /// ```\n     #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n     #[deprecated(\n@@ -146,9 +148,11 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// ```\n     /// #![feature(ptr_to_from_bits)]\n+    /// # #[cfg(not(miri))] { // doctest does not work with strict provenance\n     /// use std::ptr::NonNull;\n     /// let dangling: *mut u8 = NonNull::dangling().as_ptr();\n     /// assert_eq!(<*mut u8>::from_bits(1), dangling);\n+    /// }\n     /// ```\n     #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n     #[deprecated("}, {"sha": "d6e9da187e80a2f61bf2f3cbf16742610cfe580d", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3a95e12c9bbe978fc2e89ec50bb8aa82694003e8/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a95e12c9bbe978fc2e89ec50bb8aa82694003e8/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=3a95e12c9bbe978fc2e89ec50bb8aa82694003e8", "patch": "@@ -1493,11 +1493,13 @@ mod prim_ref {}\n /// However, a direct cast back is not possible. You need to use `transmute`:\n ///\n /// ```rust\n+/// # #[cfg(not(miri))] { // FIXME: use strict provenance APIs once they are stable, then remove this `cfg`\n /// # let fnptr: fn(i32) -> i32 = |x| x+2;\n /// # let fnptr_addr = fnptr as usize;\n /// let fnptr = fnptr_addr as *const ();\n /// let fnptr: fn(i32) -> i32 = unsafe { std::mem::transmute(fnptr) };\n /// assert_eq!(fnptr(40), 42);\n+/// # }\n /// ```\n ///\n /// Crucially, we `as`-cast to a raw pointer before `transmute`ing to a function pointer."}]}