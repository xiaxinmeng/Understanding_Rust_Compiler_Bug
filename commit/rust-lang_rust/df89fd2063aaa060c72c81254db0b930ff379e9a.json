{"sha": "df89fd2063aaa060c72c81254db0b930ff379e9a", "node_id": "C_kwDOAAsO6NoAKGRmODlmZDIwNjNhYWEwNjBjNzJjODEyNTRkYjBiOTMwZmYzNzllOWE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-15T06:34:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-15T06:34:00Z"}, "message": "Auto merge of #91752 - yaahc:track-caller-result, r=cuviper\n\nReadd track_caller to Result::from_residual\n\nThis is a followup on https://github.com/rust-lang/rust/issues/87401 in and an attempt to move the issue towards resolution.\n\nAs part of the overhaul of the Try trait we removed the ability for errors to grab location information during propagation via `?` with the builtin `std::result::Result`. The previously linked issue has a fair bit of discussion into the reasons for and against the usage of `#[track_caller]` on the `FromResidual` impl on `Result` that I will do my best to summarize.\n\n---\n### For\n\n- https://github.com/rust-lang/rust/issues/87401#issuecomment-915053533: Difficulties with using non `std::result::Result` like types\n- https://github.com/rust-lang/rust/issues/87401#issuecomment-978355102: Inconsistency with functionality provided for recoverable (Result) and non-recoverable errors (panic), where panic provides a location and Result does not, pushing some users towards using panic\n\n### Against\n\n- https://github.com/rust-lang/rust/issues/84277#issuecomment-885322833: concern that this will bloat callers that never use this data\n\n---\n\nPersonally, I want to quantify the performance / bloat impact of re-adding this attribute, and fully evaluate the pros and cons before deciding if I need to switch `eyre` to have a custom `Result` type, which would also mean I need `try_trait_v2` to be stabilized, cc `@scottmcm.` If the performance impact is minor enough in the general case I think I would prefer that the default `Result` type has the ability to track location information for consistency with `panic` error reporting, and leave it to applications that need particularly high performance to handle the micro optimizations of introducing their own efficient custom Result type or matching manually.\n\nAlternatively, I wonder if the performance penalty on code that doesn't use the location information on `FromResidual` could be mitigated via new optimizations.", "tree": {"sha": "563dd7c31e4eebb1c6ba85bffa2d8586f07209cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/563dd7c31e4eebb1c6ba85bffa2d8586f07209cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df89fd2063aaa060c72c81254db0b930ff379e9a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df89fd2063aaa060c72c81254db0b930ff379e9a", "html_url": "https://github.com/rust-lang/rust/commit/df89fd2063aaa060c72c81254db0b930ff379e9a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df89fd2063aaa060c72c81254db0b930ff379e9a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "195e931b02b69bbce1bcf4632f4e2d5603ef006b", "url": "https://api.github.com/repos/rust-lang/rust/commits/195e931b02b69bbce1bcf4632f4e2d5603ef006b", "html_url": "https://github.com/rust-lang/rust/commit/195e931b02b69bbce1bcf4632f4e2d5603ef006b"}, {"sha": "94307e271c3011f90bffa93fd30e0459748f7da3", "url": "https://api.github.com/repos/rust-lang/rust/commits/94307e271c3011f90bffa93fd30e0459748f7da3", "html_url": "https://github.com/rust-lang/rust/commit/94307e271c3011f90bffa93fd30e0459748f7da3"}], "stats": {"total": 7, "additions": 4, "deletions": 3}, "files": [{"sha": "3cde63493d32286e6a769debd172875b7fac482b", "filename": "library/core/src/result.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/df89fd2063aaa060c72c81254db0b930ff379e9a/library%2Fcore%2Fsrc%2Fresult.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df89fd2063aaa060c72c81254db0b930ff379e9a/library%2Fcore%2Fsrc%2Fresult.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fresult.rs?ref=df89fd2063aaa060c72c81254db0b930ff379e9a", "patch": "@@ -1970,6 +1970,7 @@ impl<T, E, F: ~const From<E>> const ops::FromResidual<Result<convert::Infallible\n     for Result<T, F>\n {\n     #[inline]\n+    #[track_caller]\n     fn from_residual(residual: Result<convert::Infallible, E>) -> Self {\n         match residual {\n             Err(e) => Err(From::from(e)),"}, {"sha": "0a220e6e72c793ba7e840c50fdc8d8593f7bb1e1", "filename": "src/test/mir-opt/separate_const_switch.identity.ConstProp.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df89fd2063aaa060c72c81254db0b930ff379e9a/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df89fd2063aaa060c72c81254db0b930ff379e9a/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.ConstProp.diff?ref=df89fd2063aaa060c72c81254db0b930ff379e9a", "patch": "@@ -15,7 +15,7 @@\n       scope 1 {\n           debug residual => _6;            // in scope 1 at $DIR/separate_const_switch.rs:29:9: 29:10\n           scope 2 {\n-              scope 8 (inlined <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n+              scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n                   debug residual => _8;    // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n                   let _16: i32;            // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n                   let mut _17: i32;        // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10"}, {"sha": "b09527e46af08d95d4710ae60a43f05b9feff17e", "filename": "src/test/mir-opt/separate_const_switch.identity.PreCodegen.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df89fd2063aaa060c72c81254db0b930ff379e9a/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/df89fd2063aaa060c72c81254db0b930ff379e9a/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.PreCodegen.after.mir?ref=df89fd2063aaa060c72c81254db0b930ff379e9a", "patch": "@@ -12,7 +12,7 @@ fn identity(_1: Result<i32, i32>) -> Result<i32, i32> {\n     scope 1 {\n         debug residual => _5;            // in scope 1 at $DIR/separate_const_switch.rs:29:9: 29:10\n         scope 2 {\n-            scope 8 (inlined <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n+            scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n                 debug residual => _6;    // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n                 let _14: i32;            // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n                 let mut _15: i32;        // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10"}, {"sha": "bfc74aff20796c7da701e4ace3fdb3eb3611f15d", "filename": "src/test/mir-opt/separate_const_switch.identity.SeparateConstSwitch.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/df89fd2063aaa060c72c81254db0b930ff379e9a/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "raw_url": "https://github.com/rust-lang/rust/raw/df89fd2063aaa060c72c81254db0b930ff379e9a/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fseparate_const_switch.identity.SeparateConstSwitch.diff?ref=df89fd2063aaa060c72c81254db0b930ff379e9a", "patch": "@@ -15,7 +15,7 @@\n       scope 1 {\n           debug residual => _6;            // in scope 1 at $DIR/separate_const_switch.rs:29:9: 29:10\n           scope 2 {\n-              scope 8 (inlined <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n+              scope 8 (inlined #[track_caller] <Result<i32, i32> as FromResidual<Result<Infallible, i32>>>::from_residual) { // at $DIR/separate_const_switch.rs:29:8: 29:10\n                   debug residual => _8;    // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n                   let _16: i32;            // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10\n                   let mut _17: i32;        // in scope 8 at $DIR/separate_const_switch.rs:29:8: 29:10"}]}