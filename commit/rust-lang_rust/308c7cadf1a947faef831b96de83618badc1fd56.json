{"sha": "308c7cadf1a947faef831b96de83618badc1fd56", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwOGM3Y2FkZjFhOTQ3ZmFlZjgzMWI5NmRlODM2MThiYWRjMWZkNTY=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2017-07-20T20:08:02Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-20T20:08:02Z"}, "message": "Merge pull request #265 from oli-obk/optimize_prime\n\nAlso test optimized MIR", "tree": {"sha": "e750c327e108b93d5ab507fc8c44a912725a25dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e750c327e108b93d5ab507fc8c44a912725a25dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/308c7cadf1a947faef831b96de83618badc1fd56", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/308c7cadf1a947faef831b96de83618badc1fd56", "html_url": "https://github.com/rust-lang/rust/commit/308c7cadf1a947faef831b96de83618badc1fd56", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/308c7cadf1a947faef831b96de83618badc1fd56/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9710ff481eb18f691072e59cba5996fd0f4cfd02", "url": "https://api.github.com/repos/rust-lang/rust/commits/9710ff481eb18f691072e59cba5996fd0f4cfd02", "html_url": "https://github.com/rust-lang/rust/commit/9710ff481eb18f691072e59cba5996fd0f4cfd02"}, {"sha": "f2d0101065c150026ea8f73410f2088ecddba9c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2d0101065c150026ea8f73410f2088ecddba9c6", "html_url": "https://github.com/rust-lang/rust/commit/f2d0101065c150026ea8f73410f2088ecddba9c6"}], "stats": {"total": 66, "additions": 46, "deletions": 20}, "files": [{"sha": "01a4a8656b40fd2c57d69e74d933a02796c6e498", "filename": "src/bin/miri.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/308c7cadf1a947faef831b96de83618badc1fd56/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308c7cadf1a947faef831b96de83618badc1fd56/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=308c7cadf1a947faef831b96de83618badc1fd56", "patch": "@@ -199,11 +199,7 @@ fn main() {\n         args.push(sysroot_flag);\n         args.push(find_sysroot());\n     }\n-    // we run the optimization passes inside miri\n-    // if we ran them twice we'd get funny failures due to borrowck ElaborateDrops only working on\n-    // unoptimized MIR\n-    // FIXME: add an after-mir-passes hook to rustc driver\n-    args.push(\"-Zmir-opt-level=0\".to_owned());\n+\n     // for auxilary builds in unit tests\n     args.push(\"-Zalways-encode-mir\".to_owned());\n "}, {"sha": "4804059d7996c92a2e204efa8897bd4dd0c715ad", "filename": "src/step.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/308c7cadf1a947faef831b96de83618badc1fd56/src%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308c7cadf1a947faef831b96de83618badc1fd56/src%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstep.rs?ref=308c7cadf1a947faef831b96de83618badc1fd56", "patch": "@@ -87,14 +87,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n \n                 match *dest_layout {\n                     Layout::General { discr, .. } => {\n-                        // FIXME: I (oli-obk) think we need to check the\n-                        // `dest_ty` for the variant's discriminant and write\n-                        // instead of the variant index\n-                        // We don't have any tests actually going through these lines\n-                        let discr_ty = discr.to_ty(&self.tcx, false);\n-                        let discr_lval = self.lvalue_field(dest, 0, dest_ty, discr_ty)?;\n-\n-                        self.write_value(Value::ByVal(PrimVal::Bytes(variant_index as u128)), discr_lval, discr_ty)?;\n+                        let discr_size = discr.size().bytes();\n+                        let dest_ptr = self.force_allocation(dest)?.to_ptr()?;\n+                        self.memory.write_uint(dest_ptr, variant_index as u128, discr_size)?\n                     }\n \n                     Layout::RawNullablePointer { nndiscr, .. } => {\n@@ -103,6 +98,17 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                         }\n                     }\n \n+                    Layout::StructWrappedNullablePointer { nndiscr, ref discrfield, .. } => {\n+                        if variant_index as u64 != nndiscr {\n+                            let (offset, ty) = self.nonnull_offset_and_ty(dest_ty, nndiscr, discrfield)?;\n+                            let nonnull = self.force_allocation(dest)?.to_ptr()?.offset(offset.bytes(), self.memory.layout)?;\n+                            trace!(\"struct wrapped nullable pointer type: {}\", ty);\n+                            // only the pointer part of a fat pointer is used for this space optimization\n+                            let discr_size = self.type_size(ty)?.expect(\"bad StructWrappedNullablePointer discrfield\");\n+                            self.memory.write_uint(nonnull, 0, discr_size)?;\n+                        }\n+                    },\n+\n                     _ => bug!(\"SetDiscriminant on {} represented as {:#?}\", dest_ty, dest_layout),\n                 }\n             }"}, {"sha": "2f8383ba504ec1e6c01264732228e07b1d651cf9", "filename": "tests/compiletest.rs", "status": "modified", "additions": 24, "deletions": 7, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/308c7cadf1a947faef831b96de83618badc1fd56/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308c7cadf1a947faef831b96de83618badc1fd56/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=308c7cadf1a947faef831b96de83618badc1fd56", "patch": "@@ -1,5 +1,8 @@\n+#![feature(slice_concat_ext)]\n+\n extern crate compiletest_rs as compiletest;\n \n+use std::slice::SliceConcatExt;\n use std::path::{PathBuf, Path};\n use std::io::Write;\n \n@@ -41,22 +44,34 @@ fn run_pass(path: &str) {\n     compiletest::run_tests(&config);\n }\n \n-fn miri_pass(path: &str, target: &str, host: &str, fullmir: bool) {\n-    eprintln!(\"## Running run-pass tests in {} against miri for target {}\", path, target);\n+fn miri_pass(path: &str, target: &str, host: &str, fullmir: bool, opt: bool) {\n+    let opt_str = if opt {\n+        \" with optimizations\"\n+    } else {\n+        \"\"\n+    };\n+    eprintln!(\"## Running run-pass tests in {} against miri for target {}{}\", path, target, opt_str);\n     let mut config = compiletest::default_config();\n     config.mode = \"mir-opt\".parse().expect(\"Invalid mode\");\n     config.src_base = PathBuf::from(path);\n     config.target = target.to_owned();\n     config.host = host.to_owned();\n     config.rustc_path = PathBuf::from(\"target/debug/miri\");\n+    let mut flags = Vec::new();\n     if fullmir {\n         if host != target {\n             // skip fullmir on nonhost\n             return;\n         }\n         let sysroot = Path::new(&std::env::var(\"HOME\").unwrap()).join(\".xargo\").join(\"HOST\");\n-        config.target_rustcflags = Some(format!(\"--sysroot {}\", sysroot.to_str().unwrap()));\n+        flags.push(format!(\"--sysroot {}\", sysroot.to_str().unwrap()));\n+    }\n+    if opt {\n+        flags.push(\"-Zmir-opt-level=3\".to_owned());\n+    } else {\n+        flags.push(\"-Zmir-opt-level=0\".to_owned());\n     }\n+    config.target_rustcflags = Some(flags.join(\" \"));\n     // don't actually execute the final binary, it might be for other targets and we only care\n     // about running miri, not the binary.\n     config.runtool = Some(\"echo \\\"\\\" || \".to_owned());\n@@ -113,10 +128,12 @@ fn run_pass_miri() {\n     let sysroot = get_sysroot();\n     let host = get_host();\n \n-    for_all_targets(&sysroot, |target| {\n-        miri_pass(\"tests/run-pass\", &target, &host, false);\n-    });\n-    miri_pass(\"tests/run-pass-fullmir\", &host, &host, true);\n+    for &opt in [false, true].iter() {\n+        for_all_targets(&sysroot, |target| {\n+            miri_pass(\"tests/run-pass\", &target, &host, false, opt);\n+        });\n+        miri_pass(\"tests/run-pass-fullmir\", &host, &host, true, opt);\n+    }\n }\n \n #[test]"}, {"sha": "7f66dbd521f90ac4adbe89009453db9aa2c563af", "filename": "tests/run-pass-fullmir/integer-ops.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/308c7cadf1a947faef831b96de83618badc1fd56/tests%2Frun-pass-fullmir%2Finteger-ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308c7cadf1a947faef831b96de83618badc1fd56/tests%2Frun-pass-fullmir%2Finteger-ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Finteger-ops.rs?ref=308c7cadf1a947faef831b96de83618badc1fd56", "patch": "@@ -8,6 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// FIXME: remove the next line once https://github.com/rust-lang/rust/issues/43359 is fixed\n+// compile-flags: -Zmir-opt-level=0\n+\n use std::i32;\n \n pub fn main() {"}, {"sha": "24c6e151a7e507345ffa28b6516b656037db2c21", "filename": "tests/run-pass/cast-rfc0401-vtable-kinds.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/308c7cadf1a947faef831b96de83618badc1fd56/tests%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/308c7cadf1a947faef831b96de83618badc1fd56/tests%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcast-rfc0401-vtable-kinds.rs?ref=308c7cadf1a947faef831b96de83618badc1fd56", "patch": "@@ -8,6 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+\n+// FIXME: remove the next line when https://github.com/rust-lang/rust/issues/43358 is resolved\n+// compile-flags: -Zmir-opt-level=0\n+\n // Check that you can cast between different pointers to trait objects\n // whose vtable have the same kind (both lengths, or both trait pointers).\n "}]}