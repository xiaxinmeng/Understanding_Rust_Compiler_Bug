{"sha": "21ac960334485bfad6818510bc12dc65129f2c39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxYWM5NjAzMzQ0ODViZmFkNjgxODUxMGJjMTJkYzY1MTI5ZjJjMzk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-05T14:03:08Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-06-12T10:38:27Z"}, "message": "rustc: remove some unnecessary lifetimes in -> TyCtxt methods.", "tree": {"sha": "b0d42f2291bc89bb05cc8401fa1f15ebdcd58f46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0d42f2291bc89bb05cc8401fa1f15ebdcd58f46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/21ac960334485bfad6818510bc12dc65129f2c39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/21ac960334485bfad6818510bc12dc65129f2c39", "html_url": "https://github.com/rust-lang/rust/commit/21ac960334485bfad6818510bc12dc65129f2c39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/21ac960334485bfad6818510bc12dc65129f2c39/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "17cdd356da598eb46515352277d3664f05c888ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/17cdd356da598eb46515352277d3664f05c888ee", "html_url": "https://github.com/rust-lang/rust/commit/17cdd356da598eb46515352277d3664f05c888ee"}], "stats": {"total": 69, "additions": 28, "deletions": 41}, "files": [{"sha": "a35ed7e862712492a28feeee929b1e98011236fd", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=21ac960334485bfad6818510bc12dc65129f2c39", "patch": "@@ -793,7 +793,7 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n             type DynExistential = ();\n             type Const = ();\n \n-            fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx> {\n+            fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n                 self.tcx\n             }\n "}, {"sha": "89b2403fa6a038227f05b1fdab9cee15b8e0adfd", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=21ac960334485bfad6818510bc12dc65129f2c39", "patch": "@@ -144,7 +144,7 @@ pub struct AllocDecodingSession<'s> {\n impl<'s> AllocDecodingSession<'s> {\n \n     // Decodes an AllocId in a thread-safe way.\n-    pub fn decode_alloc_id<'tcx, D>(&self,\n+    pub fn decode_alloc_id<D>(&self,\n                                         decoder: &mut D)\n                                         -> Result<AllocId, D::Error>\n         where D: TyDecoder<'tcx>,"}, {"sha": "8b820e22cac0ba44302dca4459b1eccfe89d209c", "filename": "src/librustc/traits/query/normalize_erasing_regions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize_erasing_regions.rs?ref=21ac960334485bfad6818510bc12dc65129f2c39", "patch": "@@ -68,7 +68,7 @@ struct NormalizeAfterErasingRegionsFolder<'tcx> {\n }\n \n impl TypeFolder<'tcx, 'tcx> for NormalizeAfterErasingRegionsFolder<'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n "}, {"sha": "7f89b2ccfdb5b8285500bcee76bc42de0d7be4c1", "filename": "src/librustc/ty/codec.rs", "status": "modified", "additions": 13, "deletions": 26, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcodec.rs?ref=21ac960334485bfad6818510bc12dc65129f2c39", "patch": "@@ -131,38 +131,34 @@ pub trait TyDecoder<'tcx>: Decoder {\n }\n \n #[inline]\n-pub fn decode_arena_allocable<'a, 'tcx, D, T: ArenaAllocatable + Decodable>(\n+pub fn decode_arena_allocable<D, T: ArenaAllocatable + Decodable>(\n     decoder: &mut D\n ) -> Result<&'tcx T, D::Error>\n     where D: TyDecoder<'tcx>,\n-          'tcx: 'a,\n {\n     Ok(decoder.tcx().arena.alloc(Decodable::decode(decoder)?))\n }\n \n #[inline]\n-pub fn decode_arena_allocable_slice<'a, 'tcx, D, T: ArenaAllocatable + Decodable>(\n+pub fn decode_arena_allocable_slice<D, T: ArenaAllocatable + Decodable>(\n     decoder: &mut D\n ) -> Result<&'tcx [T], D::Error>\n     where D: TyDecoder<'tcx>,\n-          'tcx: 'a,\n {\n     Ok(decoder.tcx().arena.alloc_from_iter(<Vec<T> as Decodable>::decode(decoder)?))\n }\n \n #[inline]\n-pub fn decode_cnum<'a, 'tcx, D>(decoder: &mut D) -> Result<CrateNum, D::Error>\n+pub fn decode_cnum<D>(decoder: &mut D) -> Result<CrateNum, D::Error>\n     where D: TyDecoder<'tcx>,\n-          'tcx: 'a,\n {\n     let cnum = CrateNum::from_u32(u32::decode(decoder)?);\n     Ok(decoder.map_encoded_cnum_to_current(cnum))\n }\n \n #[inline]\n-pub fn decode_ty<'a, 'tcx, D>(decoder: &mut D) -> Result<Ty<'tcx>, D::Error>\n+pub fn decode_ty<D>(decoder: &mut D) -> Result<Ty<'tcx>, D::Error>\n     where D: TyDecoder<'tcx>,\n-          'tcx: 'a,\n {\n     // Handle shorthands first, if we have an usize > 0x80.\n     if decoder.positioned_at_shorthand() {\n@@ -180,10 +176,9 @@ pub fn decode_ty<'a, 'tcx, D>(decoder: &mut D) -> Result<Ty<'tcx>, D::Error>\n }\n \n #[inline]\n-pub fn decode_predicates<'a, 'tcx, D>(decoder: &mut D)\n+pub fn decode_predicates<D>(decoder: &mut D)\n                                       -> Result<ty::GenericPredicates<'tcx>, D::Error>\n     where D: TyDecoder<'tcx>,\n-          'tcx: 'a,\n {\n     Ok(ty::GenericPredicates {\n         parent: Decodable::decode(decoder)?,\n@@ -205,59 +200,53 @@ pub fn decode_predicates<'a, 'tcx, D>(decoder: &mut D)\n }\n \n #[inline]\n-pub fn decode_substs<'a, 'tcx, D>(decoder: &mut D) -> Result<SubstsRef<'tcx>, D::Error>\n+pub fn decode_substs<D>(decoder: &mut D) -> Result<SubstsRef<'tcx>, D::Error>\n     where D: TyDecoder<'tcx>,\n-          'tcx: 'a,\n {\n     let len = decoder.read_usize()?;\n     let tcx = decoder.tcx();\n     Ok(tcx.mk_substs((0..len).map(|_| Decodable::decode(decoder)))?)\n }\n \n #[inline]\n-pub fn decode_region<'a, 'tcx, D>(decoder: &mut D) -> Result<ty::Region<'tcx>, D::Error>\n+pub fn decode_region<D>(decoder: &mut D) -> Result<ty::Region<'tcx>, D::Error>\n     where D: TyDecoder<'tcx>,\n-          'tcx: 'a,\n {\n     Ok(decoder.tcx().mk_region(Decodable::decode(decoder)?))\n }\n \n #[inline]\n-pub fn decode_ty_slice<'a, 'tcx, D>(decoder: &mut D)\n+pub fn decode_ty_slice<D>(decoder: &mut D)\n                                     -> Result<&'tcx ty::List<Ty<'tcx>>, D::Error>\n     where D: TyDecoder<'tcx>,\n-          'tcx: 'a,\n {\n     let len = decoder.read_usize()?;\n     Ok(decoder.tcx().mk_type_list((0..len).map(|_| Decodable::decode(decoder)))?)\n }\n \n #[inline]\n-pub fn decode_adt_def<'a, 'tcx, D>(decoder: &mut D)\n+pub fn decode_adt_def<D>(decoder: &mut D)\n                                    -> Result<&'tcx ty::AdtDef, D::Error>\n     where D: TyDecoder<'tcx>,\n-          'tcx: 'a,\n {\n     let def_id = DefId::decode(decoder)?;\n     Ok(decoder.tcx().adt_def(def_id))\n }\n \n #[inline]\n-pub fn decode_existential_predicate_slice<'a, 'tcx, D>(decoder: &mut D)\n+pub fn decode_existential_predicate_slice<D>(decoder: &mut D)\n     -> Result<&'tcx ty::List<ty::ExistentialPredicate<'tcx>>, D::Error>\n     where D: TyDecoder<'tcx>,\n-          'tcx: 'a,\n {\n     let len = decoder.read_usize()?;\n     Ok(decoder.tcx()\n               .mk_existential_predicates((0..len).map(|_| Decodable::decode(decoder)))?)\n }\n \n #[inline]\n-pub fn decode_canonical_var_infos<'a, 'tcx, D>(decoder: &mut D)\n+pub fn decode_canonical_var_infos<D>(decoder: &mut D)\n     -> Result<CanonicalVarInfos<'tcx>, D::Error>\n     where D: TyDecoder<'tcx>,\n-          'tcx: 'a,\n {\n     let len = decoder.read_usize()?;\n     let interned: Result<Vec<CanonicalVarInfo>, _> = (0..len).map(|_| Decodable::decode(decoder))\n@@ -267,19 +256,17 @@ pub fn decode_canonical_var_infos<'a, 'tcx, D>(decoder: &mut D)\n }\n \n #[inline]\n-pub fn decode_const<'a, 'tcx, D>(decoder: &mut D)\n+pub fn decode_const<D>(decoder: &mut D)\n                                  -> Result<&'tcx ty::Const<'tcx>, D::Error>\n     where D: TyDecoder<'tcx>,\n-          'tcx: 'a,\n {\n     Ok(decoder.tcx().mk_const(Decodable::decode(decoder)?))\n }\n \n #[inline]\n-pub fn decode_allocation<'a, 'tcx, D>(decoder: &mut D)\n+pub fn decode_allocation<D>(decoder: &mut D)\n     -> Result<&'tcx Allocation, D::Error>\n     where D: TyDecoder<'tcx>,\n-          'tcx: 'a,\n {\n     Ok(decoder.tcx().intern_const_alloc(Decodable::decode(decoder)?))\n }"}, {"sha": "65b6f93e251d6d9cdf120cdf3c3a723e7e4a8d4f", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=21ac960334485bfad6818510bc12dc65129f2c39", "patch": "@@ -1727,7 +1727,7 @@ impl<'tcx> SizeSkeleton<'tcx> {\n }\n \n pub trait HasTyCtxt<'tcx>: HasDataLayout {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx>;\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx>;\n }\n \n pub trait HasParamEnv<'tcx> {\n@@ -1741,7 +1741,7 @@ impl<'gcx, 'tcx> HasDataLayout for TyCtxt<'gcx, 'tcx> {\n }\n \n impl<'gcx, 'tcx> HasTyCtxt<'gcx> for TyCtxt<'gcx, 'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'gcx> {\n+    fn tcx(&self) -> TyCtxt<'gcx, 'gcx> {\n         self.global_tcx()\n     }\n }\n@@ -1759,7 +1759,7 @@ impl<'tcx, T: HasDataLayout> HasDataLayout for LayoutCx<'tcx, T> {\n }\n \n impl<'gcx, 'tcx, T: HasTyCtxt<'gcx>> HasTyCtxt<'gcx> for LayoutCx<'tcx, T> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'gcx, 'gcx> {\n+    fn tcx(&self) -> TyCtxt<'gcx, 'gcx> {\n         self.tcx.tcx()\n     }\n }"}, {"sha": "3d5f00a06921d9627f1c3164ddd87697b4e4e9a1", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=21ac960334485bfad6818510bc12dc65129f2c39", "patch": "@@ -66,7 +66,7 @@ impl ty::layout::HasDataLayout for Builder<'_, '_, '_> {\n }\n \n impl ty::layout::HasTyCtxt<'tcx> for Builder<'_, '_, 'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         self.cx.tcx\n     }\n }"}, {"sha": "d0b2b6846f78826ce8df800b32f56fa0cc2254b4", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=21ac960334485bfad6818510bc12dc65129f2c39", "patch": "@@ -838,7 +838,7 @@ impl HasTargetSpec for CodegenCx<'ll, 'tcx> {\n }\n \n impl ty::layout::HasTyCtxt<'tcx> for CodegenCx<'ll, 'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n }"}, {"sha": "9645af5309e7868677be4a61d5444211ad2ede17", "filename": "src/librustc_codegen_utils/symbol_names/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs?ref=21ac960334485bfad6818510bc12dc65129f2c39", "patch": "@@ -203,7 +203,7 @@ impl Printer<'tcx, 'tcx> for SymbolPrinter<'tcx> {\n     type DynExistential = Self;\n     type Const = Self;\n \n-    fn tcx(&'a self) -> TyCtxt<'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n "}, {"sha": "7e78b9ea88769ad811a0d451d80573d834563862", "filename": "src/librustc_codegen_utils/symbol_names/v0.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs?ref=21ac960334485bfad6818510bc12dc65129f2c39", "patch": "@@ -223,7 +223,7 @@ impl Printer<'tcx, 'tcx> for SymbolMangler<'tcx> {\n     type DynExistential = Self;\n     type Const = Self;\n \n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n "}, {"sha": "134c23e56e2234a30c3d3656596374b2bd550f74", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=21ac960334485bfad6818510bc12dc65129f2c39", "patch": "@@ -173,7 +173,7 @@ impl<'mir, 'tcx, M> layout::HasTyCtxt<'tcx> for InterpretCx<'mir, 'tcx, M>\n     where M: Machine<'mir, 'tcx>\n {\n     #[inline]\n-    fn tcx<'d>(&'d self) -> TyCtxt<'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         *self.tcx\n     }\n }"}, {"sha": "8ef9b75e4be3b768a9cda14ad4bc8fb98bf43af5", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=21ac960334485bfad6818510bc12dc65129f2c39", "patch": "@@ -23,7 +23,7 @@ impl<'tcx> Printer<'tcx, 'tcx> for AbsolutePathPrinter<'tcx> {\n     type DynExistential = Self;\n     type Const = Self;\n \n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n "}, {"sha": "4a363f465a74f2402f3051e317c5c652126ab5c3", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=21ac960334485bfad6818510bc12dc65129f2c39", "patch": "@@ -113,7 +113,7 @@ impl<'mir, 'tcx> HasDataLayout for ConstPropagator<'mir, 'tcx> {\n \n impl<'mir, 'tcx> HasTyCtxt<'tcx> for ConstPropagator<'mir, 'tcx> {\n     #[inline]\n-    fn tcx<'c>(&'c self) -> TyCtxt<'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n }"}, {"sha": "5ed731347bb139c4f4b0dc37e717e71ddeed2fd9", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=21ac960334485bfad6818510bc12dc65129f2c39", "patch": "@@ -119,7 +119,7 @@ impl LayoutOf for UnwrapLayoutCx<'tcx> {\n }\n \n impl HasTyCtxt<'tcx> for UnwrapLayoutCx<'tcx> {\n-    fn tcx<'a>(&'a self) -> TyCtxt<'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n }"}, {"sha": "a78af7875b9c4d320f2cebd7c903a7e5f8c93656", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/21ac960334485bfad6818510bc12dc65129f2c39/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=21ac960334485bfad6818510bc12dc65129f2c39", "patch": "@@ -171,7 +171,7 @@ impl ItemCtxt<'tcx> {\n }\n \n impl AstConv<'tcx, 'tcx> for ItemCtxt<'tcx> {\n-    fn tcx<'b>(&'b self) -> TyCtxt<'tcx, 'tcx> {\n+    fn tcx(&self) -> TyCtxt<'tcx, 'tcx> {\n         self.tcx\n     }\n "}]}