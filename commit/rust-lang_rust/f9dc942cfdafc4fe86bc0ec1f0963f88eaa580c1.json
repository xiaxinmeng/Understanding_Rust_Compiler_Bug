{"sha": "f9dc942cfdafc4fe86bc0ec1f0963f88eaa580c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5ZGM5NDJjZmRhZmM0ZmU4NmJjMGVjMWYwOTYzZjg4ZWFhNTgwYzE=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-04-05T18:53:03Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-04-05T18:53:03Z"}, "message": "Changes to error handling", "tree": {"sha": "5eb0cb67ccb497b6d9d19c63d3fde012cf1daf6e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eb0cb67ccb497b6d9d19c63d3fde012cf1daf6e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f9dc942cfdafc4fe86bc0ec1f0963f88eaa580c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f9dc942cfdafc4fe86bc0ec1f0963f88eaa580c1", "html_url": "https://github.com/rust-lang/rust/commit/f9dc942cfdafc4fe86bc0ec1f0963f88eaa580c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f9dc942cfdafc4fe86bc0ec1f0963f88eaa580c1/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5d5a569264d6ca18ff4d4648d62a81ce85114f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5d5a569264d6ca18ff4d4648d62a81ce85114f7", "html_url": "https://github.com/rust-lang/rust/commit/d5d5a569264d6ca18ff4d4648d62a81ce85114f7"}], "stats": {"total": 23, "additions": 10, "deletions": 13}, "files": [{"sha": "d7ae32daaa2baebeddf062eb11588933d4586667", "filename": "src/shims/sync.rs", "status": "modified", "additions": 10, "deletions": 13, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/f9dc942cfdafc4fe86bc0ec1f0963f88eaa580c1/src%2Fshims%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f9dc942cfdafc4fe86bc0ec1f0963f88eaa580c1/src%2Fshims%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fsync.rs?ref=f9dc942cfdafc4fe86bc0ec1f0963f88eaa580c1", "patch": "@@ -263,7 +263,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 None => this.eval_libc_i32(\"EAGAIN\"),\n             }\n         } else {\n-            this.eval_libc_i32(\"EINVAL\")\n+            throw_ub_format!(\"called pthread_mutex_lock on an unsupported type of mutex\");\n         }\n     }\n \n@@ -291,7 +291,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 None => this.eval_libc_i32(\"EAGAIN\"),\n             }\n         } else {\n-            this.eval_libc_i32(\"EINVAL\")\n+            throw_ub_format!(\"called pthread_mutex_trylock on an unsupported type of mutex\");\n         }\n     }\n \n@@ -306,9 +306,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 mutex_set_locked_count(this, mutex_op, Scalar::from_u32(0))?;\n                 Ok(0)\n             } else {\n-                throw_ub_format!(\n-                    \"Attempted to unlock a PTHREAD_MUTEX_NORMAL mutex that was not locked\"\n-                );\n+                throw_ub_format!(\"unlocked a PTHREAD_MUTEX_NORMAL mutex that was not locked\");\n             }\n         } else if kind == this.eval_libc(\"PTHREAD_MUTEX_ERRORCHECK\")? {\n             if locked_count != 0 {\n@@ -329,15 +327,15 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n         } else {\n-            this.eval_libc_i32(\"EINVAL\")\n+            throw_ub_format!(\"called pthread_mutex_unlock on an unsupported type of mutex\");\n         }\n     }\n \n     fn pthread_mutex_destroy(&mut self, mutex_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n         if mutex_get_locked_count(this, mutex_op)?.to_u32()? != 0 {\n-            return this.eval_libc_i32(\"EBUSY\");\n+            throw_ub_format!(\"destroyed a locked mutex\");\n         }\n \n         mutex_set_kind(this, mutex_op, ScalarMaybeUndef::Undef)?;\n@@ -422,18 +420,17 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             rwlock_set_writers(this, rwlock_op, Scalar::from_u32(0))?;\n             Ok(0)\n         } else {\n-            this.eval_libc_i32(\"EPERM\")\n+            throw_ub_format!(\"unlocked an rwlock that was not locked\");\n         }\n     }\n \n     fn pthread_rwlock_destroy(&mut self, rwlock_op: OpTy<'tcx, Tag>) -> InterpResult<'tcx, i32> {\n         let this = self.eval_context_mut();\n \n-        if rwlock_get_readers(this, rwlock_op)?.to_u32()? != 0 {\n-            return this.eval_libc_i32(\"EBUSY\");\n-        }\n-        if rwlock_get_writers(this, rwlock_op)?.to_u32()? != 0 {\n-            return this.eval_libc_i32(\"EBUSY\");\n+        if rwlock_get_readers(this, rwlock_op)?.to_u32()? != 0\n+            || rwlock_get_writers(this, rwlock_op)?.to_u32()? != 0\n+        {\n+            throw_ub_format!(\"destroyed a locked rwlock\");\n         }\n \n         rwlock_set_readers(this, rwlock_op, ScalarMaybeUndef::Undef)?;"}]}