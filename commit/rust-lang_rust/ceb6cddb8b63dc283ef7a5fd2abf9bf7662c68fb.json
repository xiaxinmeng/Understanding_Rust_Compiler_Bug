{"sha": "ceb6cddb8b63dc283ef7a5fd2abf9bf7662c68fb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYjZjZGRiOGI2M2RjMjgzZWY3YTVmZDJhYmY5YmY3NjYyYzY4ZmI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-10-10T15:05:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-10T15:05:42Z"}, "message": "Merge #1986\n\n1986: don't special case module attrs r=matklad a=matklad\n\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "de420fe8d180aaaa6fe0dac39d4ffdd848a1bb93", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de420fe8d180aaaa6fe0dac39d4ffdd848a1bb93"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ceb6cddb8b63dc283ef7a5fd2abf9bf7662c68fb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdn0jGCRBK7hj4Ov3rIwAAdHIIAI8sYl39E7/JCC49eJlcAoco\n0gxm5pb93rlIpVMpIe1+nLYW/dezwKLR8iemn0jAVx0xPYXjU5puFeAt0Ub9TTta\nVUID6atRFGwncveSr4ERuqqDM9PXxUjv+/nJT6qirsKxzoQ0GQk36m7oVlg1yU1S\nPyuw3K91XzSexOu4sYR11eXUB86FTsCB+FrjytXQoMIU+PfpaPGB0veCmq6Oe5I0\ndwXRGNaxaxvpJg1WGRdCufZLJyNq/Q2fW5OA7E2eOC8zTLChoHnXBN6krOYRbuBV\npUasWVKHe5QvDP3IObolPj/Z6HLBPT2UwuQQgLfCdBPpkBbQ5/OvxtvlEtax3ek=\n=4agc\n-----END PGP SIGNATURE-----\n", "payload": "tree de420fe8d180aaaa6fe0dac39d4ffdd848a1bb93\nparent 19cc85bf0af04167cd75dcb5fdc40bcdfe51f3e0\nparent 29e83988be5be6d2bc4d869f00f4bf931b1500fa\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1570719942 +0000\ncommitter GitHub <noreply@github.com> 1570719942 +0000\n\nMerge #1986\n\n1986: don't special case module attrs r=matklad a=matklad\n\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ceb6cddb8b63dc283ef7a5fd2abf9bf7662c68fb", "html_url": "https://github.com/rust-lang/rust/commit/ceb6cddb8b63dc283ef7a5fd2abf9bf7662c68fb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ceb6cddb8b63dc283ef7a5fd2abf9bf7662c68fb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19cc85bf0af04167cd75dcb5fdc40bcdfe51f3e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/19cc85bf0af04167cd75dcb5fdc40bcdfe51f3e0", "html_url": "https://github.com/rust-lang/rust/commit/19cc85bf0af04167cd75dcb5fdc40bcdfe51f3e0"}, {"sha": "29e83988be5be6d2bc4d869f00f4bf931b1500fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/29e83988be5be6d2bc4d869f00f4bf931b1500fa", "html_url": "https://github.com/rust-lang/rust/commit/29e83988be5be6d2bc4d869f00f4bf931b1500fa"}], "stats": {"total": 97, "additions": 42, "deletions": 55}, "files": [{"sha": "bd159a56650ca3ed9e2364d31b9511987c8874a4", "filename": "crates/ra_hir/src/attr.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ceb6cddb8b63dc283ef7a5fd2abf9bf7662c68fb/crates%2Fra_hir%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb6cddb8b63dc283ef7a5fd2abf9bf7662c68fb/crates%2Fra_hir%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fattr.rs?ref=ceb6cddb8b63dc283ef7a5fd2abf9bf7662c68fb", "patch": "@@ -63,14 +63,24 @@ impl Attr {\n         self.path.as_ident().map_or(false, |s| s.to_string() == name)\n     }\n \n+    // FIXME: handle cfg_attr :-)\n     pub(crate) fn as_cfg(&self) -> Option<&Subtree> {\n-        if self.is_simple_atom(\"cfg\") {\n-            match &self.input {\n-                Some(AttrInput::TokenTree(subtree)) => Some(subtree),\n-                _ => None,\n-            }\n-        } else {\n-            None\n+        if !self.is_simple_atom(\"cfg\") {\n+            return None;\n+        }\n+        match &self.input {\n+            Some(AttrInput::TokenTree(subtree)) => Some(subtree),\n+            _ => None,\n+        }\n+    }\n+\n+    pub(crate) fn as_path(&self) -> Option<&SmolStr> {\n+        if !self.is_simple_atom(\"path\") {\n+            return None;\n+        }\n+        match &self.input {\n+            Some(AttrInput::Literal(it)) => Some(it),\n+            _ => None,\n         }\n     }\n "}, {"sha": "aa5885f045bce011b547112322e7539ef5cd6556", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/ceb6cddb8b63dc283ef7a5fd2abf9bf7662c68fb/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb6cddb8b63dc283ef7a5fd2abf9bf7662c68fb/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=ceb6cddb8b63dc283ef7a5fd2abf9bf7662c68fb", "patch": "@@ -2,7 +2,7 @@\n \n use ra_cfg::CfgOptions;\n use ra_db::FileId;\n-use ra_syntax::ast;\n+use ra_syntax::{ast, SmolStr};\n use rustc_hash::FxHashMap;\n use test_utils::tested_by;\n \n@@ -546,7 +546,9 @@ where\n         for item in items {\n             if self.is_cfg_enabled(item.attrs()) {\n                 match item.kind {\n-                    raw::RawItemKind::Module(m) => self.collect_module(&self.raw_items[m]),\n+                    raw::RawItemKind::Module(m) => {\n+                        self.collect_module(&self.raw_items[m], item.attrs())\n+                    }\n                     raw::RawItemKind::Import(import_id) => self\n                         .def_collector\n                         .unresolved_imports\n@@ -558,10 +560,12 @@ where\n         }\n     }\n \n-    fn collect_module(&mut self, module: &raw::ModuleData) {\n+    fn collect_module(&mut self, module: &raw::ModuleData, attrs: &[Attr]) {\n+        let path_attr = self.path_attr(attrs);\n+        let is_macro_use = self.is_macro_use(attrs);\n         match module {\n             // inline module, just recurse\n-            raw::ModuleData::Definition { name, items, ast_id, attr_path, is_macro_use } => {\n+            raw::ModuleData::Definition { name, items, ast_id } => {\n                 let module_id =\n                     self.push_child_module(name.clone(), ast_id.with_file_id(self.file_id), None);\n \n@@ -570,21 +574,21 @@ where\n                     module_id,\n                     file_id: self.file_id,\n                     raw_items: self.raw_items,\n-                    mod_dir: self.mod_dir.descend_into_definition(name, attr_path.as_ref()),\n+                    mod_dir: self.mod_dir.descend_into_definition(name, path_attr),\n                 }\n                 .collect(&*items);\n-                if *is_macro_use {\n+                if is_macro_use {\n                     self.import_all_legacy_macros(module_id);\n                 }\n             }\n             // out of line module, resolve, parse and recurse\n-            raw::ModuleData::Declaration { name, ast_id, attr_path, is_macro_use } => {\n+            raw::ModuleData::Declaration { name, ast_id } => {\n                 let ast_id = ast_id.with_file_id(self.file_id);\n                 match self.mod_dir.resolve_submodule(\n                     self.def_collector.db,\n                     self.file_id,\n                     name,\n-                    attr_path.as_ref(),\n+                    path_attr,\n                 ) {\n                     Ok((file_id, mod_dir)) => {\n                         let module_id = self.push_child_module(name.clone(), ast_id, Some(file_id));\n@@ -597,7 +601,7 @@ where\n                             mod_dir,\n                         }\n                         .collect(raw_items.items());\n-                        if *is_macro_use {\n+                        if is_macro_use {\n                             self.import_all_legacy_macros(module_id);\n                         }\n                     }\n@@ -713,6 +717,14 @@ where\n     fn is_cfg_enabled(&self, attrs: &[Attr]) -> bool {\n         attrs.iter().all(|attr| attr.is_cfg_enabled(&self.def_collector.cfg_options) != Some(false))\n     }\n+\n+    fn path_attr<'a>(&self, attrs: &'a [Attr]) -> Option<&'a SmolStr> {\n+        attrs.iter().find_map(|attr| attr.as_path())\n+    }\n+\n+    fn is_macro_use<'a>(&self, attrs: &'a [Attr]) -> bool {\n+        attrs.iter().any(|attr| attr.is_simple_atom(\"macro_use\"))\n+    }\n }\n \n fn is_macro_rules(path: &Path) -> bool {"}, {"sha": "57f2929c38ed8bf0e79ae1031a06c1af9105fa03", "filename": "crates/ra_hir/src/nameres/raw.rs", "status": "modified", "additions": 4, "deletions": 39, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/ceb6cddb8b63dc283ef7a5fd2abf9bf7662c68fb/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ceb6cddb8b63dc283ef7a5fd2abf9bf7662c68fb/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fraw.rs?ref=ceb6cddb8b63dc283ef7a5fd2abf9bf7662c68fb", "patch": "@@ -5,7 +5,7 @@ use std::{ops::Index, sync::Arc};\n use ra_arena::{impl_arena_id, map::ArenaMap, Arena, RawId};\n use ra_syntax::{\n     ast::{self, AttrsOwner, NameOwner},\n-    AstNode, AstPtr, SmolStr, SourceFile,\n+    AstNode, AstPtr, SourceFile,\n };\n use test_utils::tested_by;\n \n@@ -149,19 +149,8 @@ impl_arena_id!(Module);\n \n #[derive(Debug, PartialEq, Eq)]\n pub(super) enum ModuleData {\n-    Declaration {\n-        name: Name,\n-        ast_id: FileAstId<ast::Module>,\n-        attr_path: Option<SmolStr>,\n-        is_macro_use: bool,\n-    },\n-    Definition {\n-        name: Name,\n-        ast_id: FileAstId<ast::Module>,\n-        items: Vec<RawItem>,\n-        attr_path: Option<SmolStr>,\n-        is_macro_use: bool,\n-    },\n+    Declaration { name: Name, ast_id: FileAstId<ast::Module> },\n+    Definition { name: Name, ast_id: FileAstId<ast::Module>, items: Vec<RawItem> },\n }\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n@@ -292,28 +281,17 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n         let attrs = self.parse_attrs(&module);\n \n         let ast_id = self.source_ast_id_map.ast_id(&module);\n-        // FIXME: cfg_attr\n-        let is_macro_use = module.has_atom_attr(\"macro_use\");\n         if module.has_semi() {\n-            let attr_path = extract_mod_path_attribute(&module);\n-            let item = self.raw_items.modules.alloc(ModuleData::Declaration {\n-                name,\n-                ast_id,\n-                attr_path,\n-                is_macro_use,\n-            });\n+            let item = self.raw_items.modules.alloc(ModuleData::Declaration { name, ast_id });\n             self.push_item(current_module, attrs, RawItemKind::Module(item));\n             return;\n         }\n \n         if let Some(item_list) = module.item_list() {\n-            let attr_path = extract_mod_path_attribute(&module);\n             let item = self.raw_items.modules.alloc(ModuleData::Definition {\n                 name,\n                 ast_id,\n                 items: Vec::new(),\n-                attr_path,\n-                is_macro_use,\n             });\n             self.process_module(Some(item), item_list);\n             self.push_item(current_module, attrs, RawItemKind::Module(item));\n@@ -423,16 +401,3 @@ impl<DB: AstDatabase> RawItemsCollector<&DB> {\n         Attr::from_attrs_owner(self.file_id, item, self.db)\n     }\n }\n-\n-fn extract_mod_path_attribute(module: &ast::Module) -> Option<SmolStr> {\n-    module.attrs().into_iter().find_map(|attr| {\n-        attr.as_simple_key_value().and_then(|(name, value)| {\n-            let is_path = name == \"path\";\n-            if is_path {\n-                Some(value)\n-            } else {\n-                None\n-            }\n-        })\n-    })\n-}"}]}