{"sha": "62fcebdf7a46db357a068cd4e1283e92c05e8137", "node_id": "C_kwDOAAsO6NoAKDYyZmNlYmRmN2E0NmRiMzU3YTA2OGNkNGUxMjgzZTkyYzA1ZTgxMzc", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-11T05:59:58Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-05-19T09:32:10Z"}, "message": "constify `slice_as_chunks` (unstable)\n\nTracking issue: 74985\n\nNothing complicated required; just adding `const` to the declarations.", "tree": {"sha": "565065b8a94fb7fcf6de8da947d6fc20db9573ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/565065b8a94fb7fcf6de8da947d6fc20db9573ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/62fcebdf7a46db357a068cd4e1283e92c05e8137", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/62fcebdf7a46db357a068cd4e1283e92c05e8137", "html_url": "https://github.com/rust-lang/rust/commit/62fcebdf7a46db357a068cd4e1283e92c05e8137", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/62fcebdf7a46db357a068cd4e1283e92c05e8137/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19ca5692f69d20643656bf501fd171f1907ef875", "url": "https://api.github.com/repos/rust-lang/rust/commits/19ca5692f69d20643656bf501fd171f1907ef875", "html_url": "https://github.com/rust-lang/rust/commit/19ca5692f69d20643656bf501fd171f1907ef875"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "5ece1b78c0346fa38cc0deaf0a5af1c113421e08", "filename": "library/core/src/slice/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/62fcebdf7a46db357a068cd4e1283e92c05e8137/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/62fcebdf7a46db357a068cd4e1283e92c05e8137/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fslice%2Fmod.rs?ref=62fcebdf7a46db357a068cd4e1283e92c05e8137", "patch": "@@ -995,7 +995,7 @@ impl<T> [T] {\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n     #[must_use]\n-    pub unsafe fn as_chunks_unchecked<const N: usize>(&self) -> &[[T; N]] {\n+    pub const unsafe fn as_chunks_unchecked<const N: usize>(&self) -> &[[T; N]] {\n         let this = self;\n         // SAFETY: Caller must guarantee that `N` is nonzero and exactly divides the slice length\n         let new_len = unsafe {\n@@ -1043,7 +1043,7 @@ impl<T> [T] {\n     #[inline]\n     #[track_caller]\n     #[must_use]\n-    pub fn as_chunks<const N: usize>(&self) -> (&[[T; N]], &[T]) {\n+    pub const fn as_chunks<const N: usize>(&self) -> (&[[T; N]], &[T]) {\n         assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (multiple_of_n, remainder) = self.split_at(len * N);\n@@ -1075,7 +1075,7 @@ impl<T> [T] {\n     #[inline]\n     #[track_caller]\n     #[must_use]\n-    pub fn as_rchunks<const N: usize>(&self) -> (&[T], &[[T; N]]) {\n+    pub const fn as_rchunks<const N: usize>(&self) -> (&[T], &[[T; N]]) {\n         assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (remainder, multiple_of_n) = self.split_at(self.len() - len * N);\n@@ -1152,7 +1152,7 @@ impl<T> [T] {\n     #[unstable(feature = \"slice_as_chunks\", issue = \"74985\")]\n     #[inline]\n     #[must_use]\n-    pub unsafe fn as_chunks_unchecked_mut<const N: usize>(&mut self) -> &mut [[T; N]] {\n+    pub const unsafe fn as_chunks_unchecked_mut<const N: usize>(&mut self) -> &mut [[T; N]] {\n         let this = &*self;\n         // SAFETY: Caller must guarantee that `N` is nonzero and exactly divides the slice length\n         let new_len = unsafe {\n@@ -1195,7 +1195,7 @@ impl<T> [T] {\n     #[inline]\n     #[track_caller]\n     #[must_use]\n-    pub fn as_chunks_mut<const N: usize>(&mut self) -> (&mut [[T; N]], &mut [T]) {\n+    pub const fn as_chunks_mut<const N: usize>(&mut self) -> (&mut [[T; N]], &mut [T]) {\n         assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (multiple_of_n, remainder) = self.split_at_mut(len * N);\n@@ -1233,7 +1233,7 @@ impl<T> [T] {\n     #[inline]\n     #[track_caller]\n     #[must_use]\n-    pub fn as_rchunks_mut<const N: usize>(&mut self) -> (&mut [T], &mut [[T; N]]) {\n+    pub const fn as_rchunks_mut<const N: usize>(&mut self) -> (&mut [T], &mut [[T; N]]) {\n         assert!(N != 0, \"chunk size must be non-zero\");\n         let len = self.len() / N;\n         let (remainder, multiple_of_n) = self.split_at_mut(self.len() - len * N);"}]}