{"sha": "66f93291ec62682b48ef2411295843a04cbfd8e5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2ZjkzMjkxZWM2MjY4MmI0OGVmMjQxMTI5NTg0M2EwNGNiZmQ4ZTU=", "commit": {"author": {"name": "Arcterus", "email": "Arcterus@mail.com", "date": "2014-02-20T03:08:12Z"}, "committer": {"name": "Arcterus", "email": "Arcterus@mail.com", "date": "2014-02-21T15:44:11Z"}, "message": "Move time out of extra (cc #8784)", "tree": {"sha": "a1cc53bec3b432d5662a4489489d0418d8fa5266", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1cc53bec3b432d5662a4489489d0418d8fa5266"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/66f93291ec62682b48ef2411295843a04cbfd8e5", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/66f93291ec62682b48ef2411295843a04cbfd8e5", "html_url": "https://github.com/rust-lang/rust/commit/66f93291ec62682b48ef2411295843a04cbfd8e5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/66f93291ec62682b48ef2411295843a04cbfd8e5/comments", "author": {"login": "Arcterus", "id": 829813, "node_id": "MDQ6VXNlcjgyOTgxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/829813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arcterus", "html_url": "https://github.com/Arcterus", "followers_url": "https://api.github.com/users/Arcterus/followers", "following_url": "https://api.github.com/users/Arcterus/following{/other_user}", "gists_url": "https://api.github.com/users/Arcterus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arcterus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arcterus/subscriptions", "organizations_url": "https://api.github.com/users/Arcterus/orgs", "repos_url": "https://api.github.com/users/Arcterus/repos", "events_url": "https://api.github.com/users/Arcterus/events{/privacy}", "received_events_url": "https://api.github.com/users/Arcterus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Arcterus", "id": 829813, "node_id": "MDQ6VXNlcjgyOTgxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/829813?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Arcterus", "html_url": "https://github.com/Arcterus", "followers_url": "https://api.github.com/users/Arcterus/followers", "following_url": "https://api.github.com/users/Arcterus/following{/other_user}", "gists_url": "https://api.github.com/users/Arcterus/gists{/gist_id}", "starred_url": "https://api.github.com/users/Arcterus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Arcterus/subscriptions", "organizations_url": "https://api.github.com/users/Arcterus/orgs", "repos_url": "https://api.github.com/users/Arcterus/repos", "events_url": "https://api.github.com/users/Arcterus/events{/privacy}", "received_events_url": "https://api.github.com/users/Arcterus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fa7d6b44fcc329e849f4dd43e11c6fdd43ebd76", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa7d6b44fcc329e849f4dd43e11c6fdd43ebd76", "html_url": "https://github.com/rust-lang/rust/commit/2fa7d6b44fcc329e849f4dd43e11c6fdd43ebd76"}], "stats": {"total": 97, "additions": 54, "deletions": 43}, "files": [{"sha": "dd9dedc0d810db337141d894f5f0b738fdc88544", "filename": "AUTHORS.txt", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/AUTHORS.txt", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/AUTHORS.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/AUTHORS.txt?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -7,6 +7,7 @@ Adrien T\u00e9tar <adri-from-59@hotmail.fr>\n Alan Andrade <alan.andradec@gmail.com>\n Aleksander Balicki <balicki.aleksander@gmail.com>\n Alex Crichton <alex@alexcrichton.com>\n+Alex Lyon <arcterus@mail.com>\n Alex R\u00f8nne Petersen <alex@lycus.org>\n Alexander Stavonin <a.stavonin@gmail.com>\n Alexandros Tasos <sdi1100085@di.uoa.gr>"}, {"sha": "af791c54edd82a2bbd372cae37a70d9bae232b1a", "filename": "mk/crates.mk", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/mk%2Fcrates.mk", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/mk%2Fcrates.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fcrates.mk?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -50,21 +50,21 @@\n ################################################################################\n \n TARGET_CRATES := std extra green rustuv native flate arena glob term semver \\\n-                 uuid serialize sync getopts collections num test\n+                 uuid serialize sync getopts collections num test time\n HOST_CRATES := syntax rustc rustdoc fourcc\n CRATES := $(TARGET_CRATES) $(HOST_CRATES)\n TOOLS := compiletest rustdoc rustc\n \n DEPS_std := native:rustrt native:compiler-rt\n-DEPS_extra := std term sync serialize getopts collections\n+DEPS_extra := std term sync serialize getopts collections time\n DEPS_green := std native:context_switch\n DEPS_rustuv := std native:uv native:uv_support\n DEPS_native := std\n DEPS_syntax := std term serialize collections\n DEPS_rustc := syntax native:rustllvm flate arena serialize sync getopts \\\n-              collections extra\n+              collections time extra\n DEPS_rustdoc := rustc native:sundown serialize sync getopts collections \\\n-                test\n+                test time\n DEPS_flate := std native:miniz\n DEPS_arena := std collections\n DEPS_glob := std\n@@ -78,6 +78,7 @@ DEPS_collections := std serialize\n DEPS_fourcc := syntax std\n DEPS_num := std extra\n DEPS_test := std extra collections getopts serialize term\n+DEPS_time := std serialize\n \n TOOL_DEPS_compiletest := test green rustuv getopts\n TOOL_DEPS_rustdoc := rustdoc green rustuv"}, {"sha": "9fbf3a678f77937272980a0ae81d3f3d5398fb6d", "filename": "src/doc/rust.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -875,14 +875,14 @@ An example of what will and will not work for `use` items:\n \n ~~~~\n # #[allow(unused_imports)];\n-use foo::extra;          // good: foo is at the root of the crate\n+use foo::extra::json;    // good: foo is at the root of the crate\n use foo::baz::foobaz;    // good: foo is at the root of the crate\n \n mod foo {\n     extern crate extra;\n \n-    use foo::extra::time;  // good: foo is at crate root\n-//  use extra::*;          // bad:  extra is not at the crate root\n+    use foo::extra::json;  // good: foo is at crate root\n+//  use extra::json::*;    // bad:  extra is not at the crate root\n     use self::baz::foobaz; // good: self refers to module 'foo'\n     use foo::bar::foobar;  // good: foo is at crate root\n "}, {"sha": "ac40b504f0c7ce592af6d69a3c681341058218f0", "filename": "src/libextra/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Flibextra%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Flibextra%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Flib.rs?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -37,13 +37,13 @@ Rust extras are part of the standard Rust distribution.\n extern crate sync;\n extern crate serialize;\n extern crate collections;\n+extern crate time;\n \n // Utility modules\n pub mod c_vec;\n pub mod url;\n pub mod json;\n pub mod tempfile;\n-pub mod time;\n pub mod workcache;\n pub mod stats;\n "}, {"sha": "0361b59eb2c35a5125ff5fddd0682a3b56880f9f", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -39,6 +39,7 @@ extern crate serialize;\n extern crate sync;\n extern crate getopts;\n extern crate collections;\n+extern crate time;\n \n use back::link;\n use driver::session;"}, {"sha": "3f35b5cf2a1ff0afc4a5d20a107897ce9aff863c", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -32,7 +32,9 @@ use std::io;\n use std::os::consts::{macos, freebsd, linux, android, win32};\n use std::str;\n use std::vec;\n+\n use flate;\n+use time;\n \n pub enum Os {\n     OsMacos,\n@@ -361,7 +363,6 @@ impl ArchiveMetadata {\n \n // Just a small wrapper to time how long reading metadata takes.\n fn get_metadata_section(os: Os, filename: &Path) -> Option<MetadataBlob> {\n-    use extra::time;\n     let start = time::precise_time_ns();\n     let ret = get_metadata_section_imp(os, filename);\n     info!(\"reading {} => {}ms\", filename.filename_display(),"}, {"sha": "0b9ecf0dd8a0043decbcab8d2ba53cc39afb0c95", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -72,7 +72,6 @@ use util::ppaux::{Repr, ty_to_str};\n use util::sha2::Sha256;\n \n use arena::TypedArena;\n-use extra::time;\n use std::c_str::ToCStr;\n use std::cell::{Cell, RefCell};\n use std::hashmap::HashMap;\n@@ -90,6 +89,8 @@ use syntax::visit::Visitor;\n use syntax::visit;\n use syntax::{ast, ast_util, ast_map};\n \n+use time;\n+\n pub use middle::trans::context::task_llcx;\n \n local_data_key!(task_local_insn_key: ~[&'static str])"}, {"sha": "c139e21c8649a8ee5f1b782810943de3a0801385", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -16,7 +16,8 @@ use syntax::visit;\n use syntax::visit::Visitor;\n \n use std::local_data;\n-use extra::time;\n+\n+use time;\n \n pub fn time<T, U>(do_it: bool, what: &str, u: U, f: |U| -> T) -> T {\n     local_data_key!(depth: uint);"}, {"sha": "c6732b5d9e9c02387852ca35f8a1eaafaef97eb7", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -24,14 +24,14 @@ extern crate sync;\n extern crate getopts;\n extern crate collections;\n extern crate testing = \"test\";\n+extern crate time;\n \n use std::local_data;\n use std::io;\n use std::io::{File, MemWriter};\n use std::str;\n use extra::json;\n use serialize::{Decodable, Encodable};\n-use extra::time;\n \n pub mod clean;\n pub mod core;"}, {"sha": "19c2f80cdbd56a75dbc66ec7cde1d25f98f2d326", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -26,13 +26,14 @@ extern crate extra;\n extern crate getopts;\n extern crate serialize;\n extern crate term;\n+extern crate time;\n \n use collections::TreeMap;\n use extra::json::ToJson;\n use extra::json;\n use extra::stats::Stats;\n use extra::stats;\n-use extra::time::precise_time_ns;\n+use time::precise_time_ns;\n use getopts::{OptGroup, optflag, optopt};\n use serialize::Decodable;\n use term::Terminal;"}, {"sha": "1f0a0686658f21db7f36db74306f546bf7200ca3", "filename": "src/libtime/lib.rs", "status": "renamed", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -8,8 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[crate_id = \"time#0.10-pre\"];\n+#[crate_type = \"rlib\"];\n+#[crate_type = \"dylib\"];\n+#[license = \"MIT/ASL2\"];\n+\n #[allow(missing_doc)];\n \n+extern crate serialize;\n+\n use std::io::BufReader;\n use std::libc;\n use std::num;\n@@ -1035,7 +1042,8 @@ pub fn strftime(format: &str, tm: &Tm) -> ~str {\n \n #[cfg(test)]\n mod tests {\n-    use super::*;\n+    use super::{Timespec, get_time, precise_time_ns, precise_time_s, tzset,\n+                at_utc, at, strptime};\n \n     use std::f64;\n     use std::result::{Err, Ok};", "previous_filename": "src/libextra/time.rs"}, {"sha": "f5f1ffea207b6b380127ff34f14015ae005d1413", "filename": "src/llvm", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fllvm?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -1 +1 @@\n-Subproject commit b015ecddd3129490fa26e5278a1acee79f2ee5ef\n+Subproject commit f5f1ffea207b6b380127ff34f14015ae005d1413"}, {"sha": "ac77e62f2c014f60f179f3e331a8131d69e932bf", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -8,10 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n extern crate collections;\n+extern crate time;\n \n-use extra::time;\n use collections::TreeMap;\n use std::hashmap::{HashMap, HashSet};\n use std::os;"}, {"sha": "25ced5f35da1c35cca3d8496bbe6add732ef13ca", "filename": "src/test/bench/core-set.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Fcore-set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Fcore-set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-set.rs?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -10,8 +10,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate extra;\n extern crate collections;\n+extern crate time;\n \n use collections::bitv::BitvSet;\n use collections::TreeSet;\n@@ -31,9 +31,9 @@ struct Results {\n }\n \n fn timed(result: &mut f64, op: ||) {\n-    let start = extra::time::precise_time_s();\n+    let start = time::precise_time_s();\n     op();\n-    let end = extra::time::precise_time_s();\n+    let end = time::precise_time_s();\n     *result = (end - start);\n }\n \n@@ -191,13 +191,13 @@ fn main() {\n             let s: TreeSet<~str> = TreeSet::new();\n             s\n         });\n-        write_results(\"extra::treemap::TreeSet\", &results);\n+        write_results(\"collections::TreeSet\", &results);\n     }\n \n     {\n         let mut rng: rand::IsaacRng = rand::SeedableRng::from_seed(seed);\n         let mut results = empty_results();\n         results.bench_int(&mut rng, num_keys, max, || BitvSet::new());\n-        write_results(\"extra::bitv::BitvSet\", &results);\n+        write_results(\"collections::bitv::BitvSet\", &results);\n     }\n }"}, {"sha": "7b23e27e82a3c37b45bc88ae63c78b3bdca664aa", "filename": "src/test/bench/core-std.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Fcore-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Fcore-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-std.rs?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -12,9 +12,9 @@\n \n #[feature(macro_rules)];\n \n-extern crate extra;\n+extern crate time;\n \n-use extra::time::precise_time_s;\n+use time::precise_time_s;\n use std::mem::swap;\n use std::os;\n use std::rand::Rng;"}, {"sha": "68f5bba159fc8e391661e7a5d4c7f4115f68991b", "filename": "src/test/bench/msgsend-pipes-shared.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes-shared.rs?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -18,7 +18,7 @@\n // different scalability characteristics compared to the select\n // version.\n \n-extern crate extra;\n+extern crate time;\n \n use std::comm;\n use std::os;\n@@ -58,7 +58,7 @@ fn run(args: &[~str]) {\n     let size = from_str::<uint>(args[1]).unwrap();\n     let workers = from_str::<uint>(args[2]).unwrap();\n     let num_bytes = 100;\n-    let start = extra::time::precise_time_s();\n+    let start = time::precise_time_s();\n     let mut worker_results = ~[];\n     for _ in range(0u, workers) {\n         let to_child = to_child.clone();\n@@ -84,7 +84,7 @@ fn run(args: &[~str]) {\n     to_child.send(stop);\n     move_out(to_child);\n     let result = from_child.recv();\n-    let end = extra::time::precise_time_s();\n+    let end = time::precise_time_s();\n     let elapsed = end - start;\n     print!(\"Count is {:?}\\n\", result);\n     print!(\"Test took {:?} seconds\\n\", elapsed);"}, {"sha": "9da4a70656249b421abec4e0beba949761ec5578", "filename": "src/test/bench/msgsend-pipes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-pipes.rs?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -14,7 +14,7 @@\n //\n // I *think* it's the same, more or less.\n \n-extern crate extra;\n+extern crate time;\n \n use std::os;\n use std::task;\n@@ -52,7 +52,7 @@ fn run(args: &[~str]) {\n     let size = from_str::<uint>(args[1]).unwrap();\n     let workers = from_str::<uint>(args[2]).unwrap();\n     let num_bytes = 100;\n-    let start = extra::time::precise_time_s();\n+    let start = time::precise_time_s();\n     let mut worker_results = ~[];\n     let from_parent = if workers == 1 {\n         let (from_parent, to_child) = Chan::new();\n@@ -94,7 +94,7 @@ fn run(args: &[~str]) {\n     //to_child.send(stop);\n     //move_out(to_child);\n     let result = from_child.recv();\n-    let end = extra::time::precise_time_s();\n+    let end = time::precise_time_s();\n     let elapsed = end - start;\n     print!(\"Count is {:?}\\n\", result);\n     print!(\"Test took {:?} seconds\\n\", elapsed);"}, {"sha": "6b91d1d534b624bee1cdc5e527c76a32c2d05cde", "filename": "src/test/bench/msgsend-ring-mutex-arcs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-mutex-arcs.rs?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -15,13 +15,12 @@\n \n // This also serves as a pipes test, because Arcs are implemented with pipes.\n \n-extern crate extra;\n extern crate sync;\n+extern crate time;\n \n use sync::Arc;\n use sync::MutexArc;\n use sync::Future;\n-use extra::time;\n use std::os;\n use std::uint;\n "}, {"sha": "2d52f125747e842be12951d4d36f46ae7cc9cf85", "filename": "src/test/bench/msgsend-ring-rw-arcs.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fmsgsend-ring-rw-arcs.rs?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -15,12 +15,11 @@\n \n // This also serves as a pipes test, because Arcs are implemented with pipes.\n \n-extern crate extra;\n extern crate sync;\n+extern crate time;\n \n use sync::RWArc;\n use sync::Future;\n-use extra::time;\n use std::os;\n use std::uint;\n "}, {"sha": "11a843d6cb573e13c442eee7d99ac226ddee281c", "filename": "src/test/bench/shootout-pfib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Fshootout-pfib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-pfib.rs?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -18,10 +18,9 @@\n \n */\n \n-extern crate extra;\n extern crate getopts;\n+extern crate time;\n \n-use extra::time;\n use std::os;\n use std::result::{Ok, Err};\n use std::task;"}, {"sha": "98deeec7e181892b4976a7bafa05068e842b3abf", "filename": "src/test/bench/std-smallintmap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Fstd-smallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fstd-smallintmap.rs?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -10,8 +10,8 @@\n \n // Microbenchmark for the smallintmap library\n \n-extern crate extra;\n extern crate collections;\n+extern crate time;\n \n use collections::SmallIntMap;\n use std::os;\n@@ -46,11 +46,11 @@ fn main() {\n \n     for _ in range(0u, rep) {\n         let mut map = SmallIntMap::new();\n-        let start = extra::time::precise_time_s();\n+        let start = time::precise_time_s();\n         append_sequential(0u, max, &mut map);\n-        let mid = extra::time::precise_time_s();\n+        let mid = time::precise_time_s();\n         check_sequential(0u, max, &map);\n-        let end = extra::time::precise_time_s();\n+        let end = time::precise_time_s();\n \n         checkf += (end - mid) as f64;\n         appendf += (mid - start) as f64;"}, {"sha": "d4f9d0572b0fe7bd71cb8771c39d8899aa6bbc81", "filename": "src/test/bench/task-perf-alloc-unwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-alloc-unwind.rs?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -10,11 +10,11 @@\n \n #[feature(managed_boxes)];\n \n-extern crate extra;\n extern crate collections;\n+extern crate time;\n \n use collections::list::{List, Cons, Nil};\n-use extra::time::precise_time_s;\n+use time::precise_time_s;\n use std::os;\n use std::task;\n "}, {"sha": "5383e9d5479b41e9df8bb2a509d8db57af6394f5", "filename": "src/test/run-pass/auto-encode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/66f93291ec62682b48ef2411295843a04cbfd8e5/src%2Ftest%2Frun-pass%2Fauto-encode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauto-encode.rs?ref=66f93291ec62682b48ef2411295843a04cbfd8e5", "patch": "@@ -14,6 +14,7 @@\n #[feature(managed_boxes)];\n \n extern crate extra;\n+extern crate time;\n \n // These tests used to be separate files, but I wanted to refactor all\n // the common code.\n@@ -26,7 +27,6 @@ use std::cmp::Eq;\n use std::cmp;\n use std::io;\n use serialize::{Decodable, Encodable};\n-use extra::time;\n \n fn test_ebml<'a, A:\n     Eq +"}]}