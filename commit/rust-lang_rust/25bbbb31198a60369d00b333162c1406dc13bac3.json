{"sha": "25bbbb31198a60369d00b333162c1406dc13bac3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI1YmJiYjMxMTk4YTYwMzY5ZDAwYjMzMzE2MmMxNDA2ZGMxM2JhYzM=", "commit": {"author": {"name": "Corey Farwell", "email": "coreyf@rwell.org", "date": "2017-06-03T05:00:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-03T05:00:53Z"}, "message": "Rollup merge of #42363 - cuviper:no-fail-fast, r=alexcrichton\n\nrustbuild: Add `./x.py test --no-fail-fast`\n\nThis option forwards to each `cargo test` invocation, and applies the\nsame logic across all test steps to keep going after failures.  At the\nend, a brief summary line reports how many commands failed, if any.\n\nNote that if a test program fails to even start at all, or if an\nauxiliary build command related to testing fails, these are still left\nto stop everything right away.\n\nFixes #40219.", "tree": {"sha": "f26c7a98a742818da8a087f0f4f690c3e22d8c29", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f26c7a98a742818da8a087f0f4f690c3e22d8c29"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25bbbb31198a60369d00b333162c1406dc13bac3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25bbbb31198a60369d00b333162c1406dc13bac3", "html_url": "https://github.com/rust-lang/rust/commit/25bbbb31198a60369d00b333162c1406dc13bac3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25bbbb31198a60369d00b333162c1406dc13bac3/comments", "author": {"login": "frewsxcv", "id": 416575, "node_id": "MDQ6VXNlcjQxNjU3NQ==", "avatar_url": "https://avatars.githubusercontent.com/u/416575?v=4", "gravatar_id": "", "url": "https://api.github.com/users/frewsxcv", "html_url": "https://github.com/frewsxcv", "followers_url": "https://api.github.com/users/frewsxcv/followers", "following_url": "https://api.github.com/users/frewsxcv/following{/other_user}", "gists_url": "https://api.github.com/users/frewsxcv/gists{/gist_id}", "starred_url": "https://api.github.com/users/frewsxcv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/frewsxcv/subscriptions", "organizations_url": "https://api.github.com/users/frewsxcv/orgs", "repos_url": "https://api.github.com/users/frewsxcv/repos", "events_url": "https://api.github.com/users/frewsxcv/events{/privacy}", "received_events_url": "https://api.github.com/users/frewsxcv/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57b87c2c4fe4e00a4952ffcc0e1be603c9caa904", "url": "https://api.github.com/repos/rust-lang/rust/commits/57b87c2c4fe4e00a4952ffcc0e1be603c9caa904", "html_url": "https://github.com/rust-lang/rust/commit/57b87c2c4fe4e00a4952ffcc0e1be603c9caa904"}, {"sha": "617aea4c9b370ead766b8322a3663b5cbc7f9a33", "url": "https://api.github.com/repos/rust-lang/rust/commits/617aea4c9b370ead766b8322a3663b5cbc7f9a33", "html_url": "https://github.com/rust-lang/rust/commit/617aea4c9b370ead766b8322a3663b5cbc7f9a33"}], "stats": {"total": 146, "additions": 115, "deletions": 31}, "files": [{"sha": "5483b6a914b29a3bdd9fde93c02f99e57a03e437", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 46, "deletions": 15, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/25bbbb31198a60369d00b333162c1406dc13bac3/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bbbb31198a60369d00b333162c1406dc13bac3/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=25bbbb31198a60369d00b333162c1406dc13bac3", "patch": "@@ -58,6 +58,28 @@ impl fmt::Display for TestKind {\n     }\n }\n \n+fn try_run(build: &Build, cmd: &mut Command) {\n+    if build.flags.cmd.no_fail_fast() {\n+        if !build.try_run(cmd) {\n+            let failures = build.delayed_failures.get();\n+            build.delayed_failures.set(failures + 1);\n+        }\n+    } else {\n+        build.run(cmd);\n+    }\n+}\n+\n+fn try_run_quiet(build: &Build, cmd: &mut Command) {\n+    if build.flags.cmd.no_fail_fast() {\n+        if !build.try_run_quiet(cmd) {\n+            let failures = build.delayed_failures.get();\n+            build.delayed_failures.set(failures + 1);\n+        }\n+    } else {\n+        build.run_quiet(cmd);\n+    }\n+}\n+\n /// Runs the `linkchecker` tool as compiled in `stage` by the `host` compiler.\n ///\n /// This tool in `src/tools` will verify the validity of all our links in the\n@@ -67,8 +89,8 @@ pub fn linkcheck(build: &Build, host: &str) {\n     let compiler = Compiler::new(0, host);\n \n     let _time = util::timeit();\n-    build.run(build.tool_cmd(&compiler, \"linkchecker\")\n-                   .arg(build.out.join(host).join(\"doc\")));\n+    try_run(build, build.tool_cmd(&compiler, \"linkchecker\")\n+                        .arg(build.out.join(host).join(\"doc\")));\n }\n \n /// Runs the `cargotest` tool as compiled in `stage` by the `host` compiler.\n@@ -87,10 +109,10 @@ pub fn cargotest(build: &Build, stage: u32, host: &str) {\n     let _time = util::timeit();\n     let mut cmd = Command::new(build.tool(&Compiler::new(0, host), \"cargotest\"));\n     build.prepare_tool_cmd(compiler, &mut cmd);\n-    build.run(cmd.arg(&build.cargo)\n-                 .arg(&out_dir)\n-                 .env(\"RUSTC\", build.compiler_path(compiler))\n-                 .env(\"RUSTDOC\", build.rustdoc(compiler)))\n+    try_run(build, cmd.arg(&build.cargo)\n+                      .arg(&out_dir)\n+                      .env(\"RUSTC\", build.compiler_path(compiler))\n+                      .env(\"RUSTDOC\", build.rustdoc(compiler)));\n }\n \n /// Runs `cargo test` for `cargo` packaged with Rust.\n@@ -107,6 +129,9 @@ pub fn cargo(build: &Build, stage: u32, host: &str) {\n \n     let mut cargo = build.cargo(compiler, Mode::Tool, host, \"test\");\n     cargo.arg(\"--manifest-path\").arg(build.src.join(\"src/tools/cargo/Cargo.toml\"));\n+    if build.flags.cmd.no_fail_fast() {\n+        cargo.arg(\"--no-fail-fast\");\n+    }\n \n     // Don't build tests dynamically, just a pain to work with\n     cargo.env(\"RUSTC_NO_PREFER_DYNAMIC\", \"1\");\n@@ -115,7 +140,7 @@ pub fn cargo(build: &Build, stage: u32, host: &str) {\n     // available.\n     cargo.env(\"CFG_DISABLE_CROSS_TESTS\", \"1\");\n \n-    build.run(cargo.env(\"PATH\", newpath));\n+    try_run(build, cargo.env(\"PATH\", newpath));\n }\n \n /// Runs the `tidy` tool as compiled in `stage` by the `host` compiler.\n@@ -135,7 +160,7 @@ pub fn tidy(build: &Build, host: &str) {\n     if build.config.quiet_tests {\n         cmd.arg(\"--quiet\");\n     }\n-    build.run(&mut cmd);\n+    try_run(build, &mut cmd);\n }\n \n fn testdir(build: &Build, host: &str) -> PathBuf {\n@@ -286,7 +311,7 @@ pub fn compiletest(build: &Build,\n     build.ci_env.force_coloring_in_ci(&mut cmd);\n \n     let _time = util::timeit();\n-    build.run(&mut cmd);\n+    try_run(build, &mut cmd);\n }\n \n /// Run `rustdoc --test` for all documentation in `src/doc`.\n@@ -362,9 +387,9 @@ fn markdown_test(build: &Build, compiler: &Compiler, markdown: &Path) {\n     cmd.arg(\"--test-args\").arg(test_args);\n \n     if build.config.quiet_tests {\n-        build.run_quiet(&mut cmd);\n+        try_run_quiet(build, &mut cmd);\n     } else {\n-        build.run(&mut cmd);\n+        try_run(build, &mut cmd);\n     }\n }\n \n@@ -419,6 +444,9 @@ pub fn krate(build: &Build,\n     cargo.arg(\"--manifest-path\")\n          .arg(build.src.join(path).join(\"Cargo.toml\"))\n          .arg(\"--features\").arg(features);\n+    if test_kind.subcommand() == \"test\" && build.flags.cmd.no_fail_fast() {\n+        cargo.arg(\"--no-fail-fast\");\n+    }\n \n     match krate {\n         Some(krate) => {\n@@ -478,7 +506,7 @@ pub fn krate(build: &Build,\n         krate_remote(build, &compiler, target, mode);\n     } else {\n         cargo.args(&build.flags.cmd.test_args());\n-        build.run(&mut cargo);\n+        try_run(build, &mut cargo);\n     }\n }\n \n@@ -499,7 +527,7 @@ fn krate_emscripten(build: &Build,\n         if build.config.quiet_tests {\n             cmd.arg(\"--quiet\");\n         }\n-        build.run(&mut cmd);\n+        try_run(build, &mut cmd);\n     }\n }\n \n@@ -521,7 +549,7 @@ fn krate_remote(build: &Build,\n             cmd.arg(\"--quiet\");\n         }\n         cmd.args(&build.flags.cmd.test_args());\n-        build.run(&mut cmd);\n+        try_run(build, &mut cmd);\n     }\n }\n \n@@ -637,6 +665,9 @@ pub fn bootstrap(build: &Build) {\n        .current_dir(build.src.join(\"src/bootstrap\"))\n        .env(\"CARGO_TARGET_DIR\", build.out.join(\"bootstrap\"))\n        .env(\"RUSTC\", &build.rustc);\n+    if build.flags.cmd.no_fail_fast() {\n+        cmd.arg(\"--no-fail-fast\");\n+    }\n     cmd.arg(\"--\").args(&build.flags.cmd.test_args());\n-    build.run(&mut cmd);\n+    try_run(build, &mut cmd);\n }"}, {"sha": "f100baa5d2ca7181be6fc4f93847ef5a8439b97b", "filename": "src/bootstrap/flags.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/25bbbb31198a60369d00b333162c1406dc13bac3/src%2Fbootstrap%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bbbb31198a60369d00b333162c1406dc13bac3/src%2Fbootstrap%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fflags.rs?ref=25bbbb31198a60369d00b333162c1406dc13bac3", "patch": "@@ -61,6 +61,7 @@ pub enum Subcommand {\n     Test {\n         paths: Vec<PathBuf>,\n         test_args: Vec<String>,\n+        no_fail_fast: bool,\n     },\n     Bench {\n         paths: Vec<PathBuf>,\n@@ -141,7 +142,10 @@ To learn more about a subcommand, run `./x.py <subcommand> -h`\");\n \n         // Some subcommands get extra options\n         match subcommand.as_str() {\n-            \"test\"  => { opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\"); },\n+            \"test\"  => {\n+                opts.optflag(\"\", \"no-fail-fast\", \"Run all tests regardless of failure\");\n+                opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\");\n+            },\n             \"bench\" => { opts.optmulti(\"\", \"test-args\", \"extra arguments\", \"ARGS\"); },\n             _ => { },\n         };\n@@ -263,6 +267,7 @@ Arguments:\n                 Subcommand::Test {\n                     paths: paths,\n                     test_args: matches.opt_strs(\"test-args\"),\n+                    no_fail_fast: matches.opt_present(\"no-fail-fast\"),\n                 }\n             }\n             \"bench\" => {\n@@ -342,6 +347,13 @@ impl Subcommand {\n             _ => Vec::new(),\n         }\n     }\n+\n+    pub fn no_fail_fast(&self) -> bool {\n+        match *self {\n+            Subcommand::Test { no_fail_fast, .. } => no_fail_fast,\n+            _ => false,\n+        }\n+    }\n }\n \n fn split(s: Vec<String>) -> Vec<String> {"}, {"sha": "2fe6a2a3ae89fdd34eb33923581a8c03344117fa", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/25bbbb31198a60369d00b333162c1406dc13bac3/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bbbb31198a60369d00b333162c1406dc13bac3/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=25bbbb31198a60369d00b333162c1406dc13bac3", "patch": "@@ -79,6 +79,7 @@ extern crate toml;\n #[cfg(unix)]\n extern crate libc;\n \n+use std::cell::Cell;\n use std::cmp;\n use std::collections::HashMap;\n use std::env;\n@@ -88,7 +89,7 @@ use std::io::Read;\n use std::path::{PathBuf, Path};\n use std::process::Command;\n \n-use build_helper::{run_silent, run_suppressed, output, mtime};\n+use build_helper::{run_silent, run_suppressed, try_run_silent, try_run_suppressed, output, mtime};\n \n use util::{exe, libdir, add_lib_path, OutputFolder, CiEnv};\n \n@@ -180,6 +181,7 @@ pub struct Build {\n     is_sudo: bool,\n     src_is_git: bool,\n     ci_env: CiEnv,\n+    delayed_failures: Cell<usize>,\n }\n \n #[derive(Debug)]\n@@ -274,6 +276,7 @@ impl Build {\n             is_sudo: is_sudo,\n             src_is_git: src_is_git,\n             ci_env: CiEnv::current(),\n+            delayed_failures: Cell::new(0),\n         }\n     }\n \n@@ -784,6 +787,22 @@ impl Build {\n         run_suppressed(cmd)\n     }\n \n+    /// Runs a command, printing out nice contextual information if it fails.\n+    /// Exits if the command failed to execute at all, otherwise returns its\n+    /// `status.success()`.\n+    fn try_run(&self, cmd: &mut Command) -> bool {\n+        self.verbose(&format!(\"running: {:?}\", cmd));\n+        try_run_silent(cmd)\n+    }\n+\n+    /// Runs a command, printing out nice contextual information if it fails.\n+    /// Exits if the command failed to execute at all, otherwise returns its\n+    /// `status.success()`.\n+    fn try_run_quiet(&self, cmd: &mut Command) -> bool {\n+        self.verbose(&format!(\"running: {:?}\", cmd));\n+        try_run_suppressed(cmd)\n+    }\n+\n     /// Prints a message if this build is configured in verbose mode.\n     fn verbose(&self, msg: &str) {\n         if self.flags.verbose() || self.config.verbose() {"}, {"sha": "9e8b08a23b7e96fb0991ffa28a396d880a985529", "filename": "src/bootstrap/step.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/25bbbb31198a60369d00b333162c1406dc13bac3/src%2Fbootstrap%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bbbb31198a60369d00b333162c1406dc13bac3/src%2Fbootstrap%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fstep.rs?ref=25bbbb31198a60369d00b333162c1406dc13bac3", "patch": "@@ -28,6 +28,7 @@\n \n use std::collections::{BTreeMap, HashSet, HashMap};\n use std::mem;\n+use std::process;\n \n use check::{self, TestKind};\n use compile;\n@@ -1174,8 +1175,8 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n         let (kind, paths) = match self.build.flags.cmd {\n             Subcommand::Build { ref paths } => (Kind::Build, &paths[..]),\n             Subcommand::Doc { ref paths } => (Kind::Doc, &paths[..]),\n-            Subcommand::Test { ref paths, test_args: _ } => (Kind::Test, &paths[..]),\n-            Subcommand::Bench { ref paths, test_args: _ } => (Kind::Bench, &paths[..]),\n+            Subcommand::Test { ref paths, .. } => (Kind::Test, &paths[..]),\n+            Subcommand::Bench { ref paths, .. } => (Kind::Bench, &paths[..]),\n             Subcommand::Dist { ref paths } => (Kind::Dist, &paths[..]),\n             Subcommand::Install { ref paths } => (Kind::Install, &paths[..]),\n             Subcommand::Clean => panic!(),\n@@ -1268,6 +1269,13 @@ invalid rule dependency graph detected, was a rule added and maybe typo'd?\n             self.build.verbose(&format!(\"executing step {:?}\", step));\n             (self.rules[step.name].run)(step);\n         }\n+\n+        // Check for postponed failures from `test --no-fail-fast`.\n+        let failures = self.build.delayed_failures.get();\n+        if failures > 0 {\n+            println!(\"\\n{} command(s) did not execute successfully.\\n\", failures);\n+            process::exit(1);\n+        }\n     }\n \n     /// From the top level targets `steps` generate a topological ordering of"}, {"sha": "ea6a822e360a49dde2ac0aedac04f7562e9a85d4", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 26, "deletions": 12, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/25bbbb31198a60369d00b333162c1406dc13bac3/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25bbbb31198a60369d00b333162c1406dc13bac3/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=25bbbb31198a60369d00b333162c1406dc13bac3", "patch": "@@ -42,35 +42,49 @@ pub fn run(cmd: &mut Command) {\n }\n \n pub fn run_silent(cmd: &mut Command) {\n+    if !try_run_silent(cmd) {\n+        std::process::exit(1);\n+    }\n+}\n+\n+pub fn try_run_silent(cmd: &mut Command) -> bool {\n     let status = match cmd.status() {\n         Ok(status) => status,\n         Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\",\n                                 cmd, e)),\n     };\n     if !status.success() {\n-        fail(&format!(\"command did not execute successfully: {:?}\\n\\\n-                       expected success, got: {}\",\n-                      cmd,\n-                      status));\n+        println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n+                  expected success, got: {}\\n\\n\",\n+                 cmd,\n+                 status);\n     }\n+    status.success()\n }\n \n pub fn run_suppressed(cmd: &mut Command) {\n+    if !try_run_suppressed(cmd) {\n+        std::process::exit(1);\n+    }\n+}\n+\n+pub fn try_run_suppressed(cmd: &mut Command) -> bool {\n     let output = match cmd.output() {\n         Ok(status) => status,\n         Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\",\n                                 cmd, e)),\n     };\n     if !output.status.success() {\n-        fail(&format!(\"command did not execute successfully: {:?}\\n\\\n-                       expected success, got: {}\\n\\n\\\n-                       stdout ----\\n{}\\n\\\n-                       stderr ----\\n{}\\n\",\n-                      cmd,\n-                      output.status,\n-                      String::from_utf8_lossy(&output.stdout),\n-                      String::from_utf8_lossy(&output.stderr)));\n+        println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n+                  expected success, got: {}\\n\\n\\\n+                  stdout ----\\n{}\\n\\\n+                  stderr ----\\n{}\\n\\n\",\n+                 cmd,\n+                 output.status,\n+                 String::from_utf8_lossy(&output.stdout),\n+                 String::from_utf8_lossy(&output.stderr));\n     }\n+    output.status.success()\n }\n \n pub fn gnu_target(target: &str) -> String {"}]}