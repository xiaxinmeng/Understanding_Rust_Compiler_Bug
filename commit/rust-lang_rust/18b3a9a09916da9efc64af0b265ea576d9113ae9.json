{"sha": "18b3a9a09916da9efc64af0b265ea576d9113ae9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4YjNhOWEwOTkxNmRhOWVmYzY0YWYwYjI2NWVhNTc2ZDkxMTNhZTk=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-12T16:00:18Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-11-12T16:20:15Z"}, "message": "rustc_driver: base extern query providers on local ones.", "tree": {"sha": "e7d1a58a777ce5bb6d3b7d0a26ec981a92a15e1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7d1a58a777ce5bb6d3b7d0a26ec981a92a15e1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18b3a9a09916da9efc64af0b265ea576d9113ae9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18b3a9a09916da9efc64af0b265ea576d9113ae9", "html_url": "https://github.com/rust-lang/rust/commit/18b3a9a09916da9efc64af0b265ea576d9113ae9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18b3a9a09916da9efc64af0b265ea576d9113ae9/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "19e63bd50eb756e35416d7a8f01e2d63f419b373", "url": "https://api.github.com/repos/rust-lang/rust/commits/19e63bd50eb756e35416d7a8f01e2d63f419b373", "html_url": "https://github.com/rust-lang/rust/commit/19e63bd50eb756e35416d7a8f01e2d63f419b373"}], "stats": {"total": 77, "additions": 18, "deletions": 59}, "files": [{"sha": "62d2fe79b21714183167a88bb05ad22d22248e54", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18b3a9a09916da9efc64af0b265ea576d9113ae9/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b3a9a09916da9efc64af0b265ea576d9113ae9/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=18b3a9a09916da9efc64af0b265ea576d9113ae9", "patch": "@@ -842,14 +842,3 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n         ..*providers\n     };\n }\n-\n-pub fn provide_extern(providers: &mut ty::maps::Providers) {\n-    *providers = ty::maps::Providers {\n-        is_object_safe: object_safety::is_object_safe_provider,\n-        specialization_graph_of: specialize::specialization_graph_provider,\n-        specializes: specialize::specializes,\n-        trans_fulfill_obligation: trans::trans_fulfill_obligation,\n-        vtable_methods,\n-        ..*providers\n-    };\n-}"}, {"sha": "bf1cc682a8aac2377b7375988302adf3d820bcb5", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/18b3a9a09916da9efc64af0b265ea576d9113ae9/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b3a9a09916da9efc64af0b265ea576d9113ae9/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=18b3a9a09916da9efc64af0b265ea576d9113ae9", "patch": "@@ -2605,17 +2605,6 @@ pub fn provide(providers: &mut ty::maps::Providers) {\n     };\n }\n \n-pub fn provide_extern(providers: &mut ty::maps::Providers) {\n-    *providers = ty::maps::Providers {\n-        adt_sized_constraint,\n-        adt_dtorck_constraint,\n-        trait_impls_of: trait_def::trait_impls_of_provider,\n-        param_env,\n-        ..*providers\n-    };\n-}\n-\n-\n /// A map for the local crate mapping each type to a vector of its\n /// inherent impls. This is not meant to be used outside of coherence;\n /// rather, you should request the vector for a specific type via"}, {"sha": "640e80c04b90f453496b84b196bc692860f285b5", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/18b3a9a09916da9efc64af0b265ea576d9113ae9/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b3a9a09916da9efc64af0b265ea576d9113ae9/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=18b3a9a09916da9efc64af0b265ea576d9113ae9", "patch": "@@ -970,24 +970,20 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     mir::provide(&mut local_providers);\n     reachable::provide(&mut local_providers);\n     rustc_privacy::provide(&mut local_providers);\n-    DefaultTransCrate::provide_local(&mut local_providers);\n+    DefaultTransCrate::provide(&mut local_providers);\n     typeck::provide(&mut local_providers);\n     ty::provide(&mut local_providers);\n     traits::provide(&mut local_providers);\n     reachable::provide(&mut local_providers);\n     rustc_const_eval::provide(&mut local_providers);\n     rustc_passes::provide(&mut local_providers);\n     middle::region::provide(&mut local_providers);\n-    cstore::provide_local(&mut local_providers);\n+    cstore::provide(&mut local_providers);\n     lint::provide(&mut local_providers);\n \n-    let mut extern_providers = ty::maps::Providers::default();\n-    cstore::provide(&mut extern_providers);\n+    let mut extern_providers = local_providers;\n+    cstore::provide_extern(&mut extern_providers);\n     DefaultTransCrate::provide_extern(&mut extern_providers);\n-    ty::provide_extern(&mut extern_providers);\n-    traits::provide_extern(&mut extern_providers);\n-    // FIXME(eddyb) get rid of this once we replace const_eval with miri.\n-    rustc_const_eval::provide(&mut extern_providers);\n \n     // Setup the MIR passes that we want to run.\n     let mut passes = Passes::new();"}, {"sha": "3a4ba6768a71652f935675cd73f1902ce2335c63", "filename": "src/librustc_metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18b3a9a09916da9efc64af0b265ea576d9113ae9/src%2Flibrustc_metadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b3a9a09916da9efc64af0b265ea576d9113ae9/src%2Flibrustc_metadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore.rs?ref=18b3a9a09916da9efc64af0b265ea576d9113ae9", "patch": "@@ -34,7 +34,7 @@ pub use rustc::middle::cstore::{NativeLibrary, NativeLibraryKind, LinkagePrefere\n pub use rustc::middle::cstore::NativeLibraryKind::*;\n pub use rustc::middle::cstore::{CrateSource, LibSource};\n \n-pub use cstore_impl::{provide, provide_local};\n+pub use cstore_impl::{provide, provide_extern};\n \n // A map from external crate numbers (as decoded from some crate file) to\n // local crate numbers (as generated during this session). Each external"}, {"sha": "b26ebfd6121b46c18b6336169f8577e6ef0d7016", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/18b3a9a09916da9efc64af0b265ea576d9113ae9/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b3a9a09916da9efc64af0b265ea576d9113ae9/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=18b3a9a09916da9efc64af0b265ea576d9113ae9", "patch": "@@ -45,7 +45,7 @@ use rustc::hir;\n macro_rules! provide {\n     (<$lt:tt> $tcx:ident, $def_id:ident, $other:ident, $cdata:ident,\n       $($name:ident => $compute:block)*) => {\n-        pub fn provide<$lt>(providers: &mut Providers<$lt>) {\n+        pub fn provide_extern<$lt>(providers: &mut Providers<$lt>) {\n             $(fn $name<'a, $lt:$lt, T>($tcx: TyCtxt<'a, $lt, $lt>, def_id_arg: T)\n                                     -> <ty::queries::$name<$lt> as\n                                         QueryConfig>::Value\n@@ -243,7 +243,7 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     has_clone_closures => { cdata.has_clone_closures(tcx.sess) }\n }\n \n-pub fn provide_local<'tcx>(providers: &mut Providers<'tcx>) {\n+pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n     fn is_const_fn<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> bool {\n         let node_id = tcx.hir.as_local_node_id(def_id)\n                              .expect(\"Non-local call to local provider is_const_fn\");"}, {"sha": "132b8fa7acfb07d0b47e1fd0fae6815e3e5f9f59", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18b3a9a09916da9efc64af0b265ea576d9113ae9/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b3a9a09916da9efc64af0b265ea576d9113ae9/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=18b3a9a09916da9efc64af0b265ea576d9113ae9", "patch": "@@ -60,7 +60,7 @@ pub fn crates_export_threshold(crate_types: &[config::CrateType])\n     }\n }\n \n-pub fn provide_local(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers) {\n     providers.exported_symbol_ids = |tcx, cnum| {\n         let export_threshold = threshold(tcx);\n         Rc::new(tcx.exported_symbols(cnum)"}, {"sha": "69bcd0aa50b99a3db724f71a4b3d8f586450164c", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18b3a9a09916da9efc64af0b265ea576d9113ae9/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b3a9a09916da9efc64af0b265ea576d9113ae9/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=18b3a9a09916da9efc64af0b265ea576d9113ae9", "patch": "@@ -1384,7 +1384,7 @@ fn compile_codegen_unit<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n-pub fn provide_local(providers: &mut Providers) {\n+pub fn provide(providers: &mut Providers) {\n     providers.collect_and_partition_translation_items =\n         collect_and_partition_translation_items;\n \n@@ -1400,10 +1400,6 @@ pub fn provide_local(providers: &mut Providers) {\n     providers.compile_codegen_unit = compile_codegen_unit;\n }\n \n-pub fn provide_extern(providers: &mut Providers) {\n-    providers.is_translated_function = is_translated_function;\n-}\n-\n pub fn linkage_to_llvm(linkage: Linkage) -> llvm::Linkage {\n     match linkage {\n         Linkage::External => llvm::Linkage::ExternalLinkage,"}, {"sha": "96e11d366423aea46d6160dfd953050f22f99a77", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 5, "deletions": 16, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/18b3a9a09916da9efc64af0b265ea576d9113ae9/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b3a9a09916da9efc64af0b265ea576d9113ae9/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=18b3a9a09916da9efc64af0b265ea576d9113ae9", "patch": "@@ -81,7 +81,6 @@ use rustc::middle::cstore::MetadataLoader;\n use rustc::middle::cstore::{NativeLibrary, CrateSource, LibSource};\n use rustc::session::Session;\n use rustc::session::config::{OutputFilenames, OutputType};\n-use rustc::ty::maps::Providers;\n use rustc::ty::{self, TyCtxt};\n use rustc::util::nodemap::{FxHashSet, FxHashMap};\n \n@@ -167,12 +166,14 @@ impl rustc_trans_utils::trans_crate::TransCrate for LlvmTransCrate {\n         box metadata::LlvmMetadataLoader\n     }\n \n-    fn provide_local(providers: &mut ty::maps::Providers) {\n-        provide_local(providers);\n+    fn provide(providers: &mut ty::maps::Providers) {\n+        back::symbol_names::provide(providers);\n+        back::symbol_export::provide(providers);\n+        base::provide(providers);\n     }\n \n     fn provide_extern(providers: &mut ty::maps::Providers) {\n-        provide_extern(providers);\n+        back::symbol_export::provide_extern(providers);\n     }\n \n     fn trans_crate<'a, 'tcx>(\n@@ -332,15 +333,3 @@ pub struct CrateInfo {\n }\n \n __build_diagnostic_array! { librustc_trans, DIAGNOSTICS }\n-\n-pub fn provide_local(providers: &mut Providers) {\n-    back::symbol_names::provide(providers);\n-    back::symbol_export::provide_local(providers);\n-    base::provide_local(providers);\n-}\n-\n-pub fn provide_extern(providers: &mut Providers) {\n-    back::symbol_names::provide(providers);\n-    back::symbol_export::provide_extern(providers);\n-    base::provide_extern(providers);\n-}"}, {"sha": "8dc81a3d687dc421a4431e0405cb7fc872e8816d", "filename": "src/librustc_trans_utils/trans_crate.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/18b3a9a09916da9efc64af0b265ea576d9113ae9/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18b3a9a09916da9efc64af0b265ea576d9113ae9/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Ftrans_crate.rs?ref=18b3a9a09916da9efc64af0b265ea576d9113ae9", "patch": "@@ -51,7 +51,7 @@ pub trait TransCrate {\n     type TranslatedCrate;\n \n     fn metadata_loader() -> Box<MetadataLoaderTrait>;\n-    fn provide_local(_providers: &mut Providers);\n+    fn provide(_providers: &mut Providers);\n     fn provide_extern(_providers: &mut Providers);\n     fn trans_crate<'a, 'tcx>(\n         tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -77,8 +77,8 @@ impl TransCrate for DummyTransCrate {\n         box DummyMetadataLoader(())\n     }\n \n-    fn provide_local(_providers: &mut Providers) {\n-        bug!(\"DummyTransCrate::provide_local\");\n+    fn provide(_providers: &mut Providers) {\n+        bug!(\"DummyTransCrate::provide\");\n     }\n \n     fn provide_extern(_providers: &mut Providers) {\n@@ -185,7 +185,7 @@ impl TransCrate for MetadataOnlyTransCrate {\n         box NoLlvmMetadataLoader\n     }\n \n-    fn provide_local(_providers: &mut Providers) {}\n+    fn provide(_providers: &mut Providers) {}\n     fn provide_extern(_providers: &mut Providers) {}\n \n     fn trans_crate<'a, 'tcx>("}]}