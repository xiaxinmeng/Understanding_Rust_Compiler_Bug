{"sha": "b80356a5abb127e1b58869978daf1928180f321c", "node_id": "C_kwDOAAsO6NoAKGI4MDM1NmE1YWJiMTI3ZTFiNTg4Njk5NzhkYWYxOTI4MTgwZjMyMWM", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-22T17:19:19Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-11-22T17:19:19Z"}, "message": "Use `tcx.require_lang_item` instead of unwrapping", "tree": {"sha": "f1639a7b13c2be998891fb19323b316590b865b9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1639a7b13c2be998891fb19323b316590b865b9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b80356a5abb127e1b58869978daf1928180f321c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b80356a5abb127e1b58869978daf1928180f321c", "html_url": "https://github.com/rust-lang/rust/commit/b80356a5abb127e1b58869978daf1928180f321c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b80356a5abb127e1b58869978daf1928180f321c/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0f7d81754db66d46ee9aa033735a1ee5c1daa44d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7d81754db66d46ee9aa033735a1ee5c1daa44d", "html_url": "https://github.com/rust-lang/rust/commit/0f7d81754db66d46ee9aa033735a1ee5c1daa44d"}], "stats": {"total": 26, "additions": 14, "deletions": 12}, "files": [{"sha": "5f99d86b4eaff2f61d77a0dfcb54b72f2cd0d0dc", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b80356a5abb127e1b58869978daf1928180f321c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80356a5abb127e1b58869978daf1928180f321c/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=b80356a5abb127e1b58869978daf1928180f321c", "patch": "@@ -7,7 +7,7 @@ use rustc_errors::{\n };\n use rustc_hir as hir;\n use rustc_hir::intravisit::{walk_block, walk_expr, Visitor};\n-use rustc_hir::{AsyncGeneratorKind, GeneratorKind};\n+use rustc_hir::{AsyncGeneratorKind, GeneratorKind, LangItem};\n use rustc_infer::infer::TyCtxtInferExt;\n use rustc_infer::traits::ObligationCause;\n use rustc_middle::mir::tcx::PlaceTy;\n@@ -601,7 +601,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n         else { return; };\n         // Try to find predicates on *generic params* that would allow copying `ty`\n         let infcx = tcx.infer_ctxt().build();\n-        let copy_did = infcx.tcx.lang_items().copy_trait().unwrap();\n+        let copy_did = infcx.tcx.require_lang_item(LangItem::Copy, Some(span));\n         let cause = ObligationCause::new(\n             span,\n             self.mir_hir_id(),"}, {"sha": "c62c6651587794c966daeed257976e875f46e1bd", "filename": "compiler/rustc_const_eval/src/transform/check_consts/ops.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b80356a5abb127e1b58869978daf1928180f321c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80356a5abb127e1b58869978daf1928180f321c/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=b80356a5abb127e1b58869978daf1928180f321c", "patch": "@@ -1,7 +1,7 @@\n //! Concrete error types for all operations which may be invalid in a certain const context.\n \n use hir::def_id::LocalDefId;\n-use hir::ConstContext;\n+use hir::{ConstContext, LangItem};\n use rustc_errors::{\n     error_code, struct_span_err, Applicability, DiagnosticBuilder, ErrorGuaranteed,\n };\n@@ -304,7 +304,7 @@ impl<'tcx> NonConstOp<'tcx> for FnCallNonConst<'tcx> {\n                     err.span_note(deref_target, \"deref defined here\");\n                 }\n \n-                diag_trait(&mut err, self_ty, tcx.lang_items().deref_trait().unwrap());\n+                diag_trait(&mut err, self_ty, tcx.require_lang_item(LangItem::Deref, Some(span)));\n                 err\n             }\n             _ if tcx.opt_parent(callee) == tcx.get_diagnostic_item(sym::ArgumentV1Methods) => {"}, {"sha": "b38a6c551388e473b7771d0e03f805f0db0b173b", "filename": "compiler/rustc_const_eval/src/util/call_kind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b80356a5abb127e1b58869978daf1928180f321c/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80356a5abb127e1b58869978daf1928180f321c/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Futil%2Fcall_kind.rs?ref=b80356a5abb127e1b58869978daf1928180f321c", "patch": "@@ -3,7 +3,7 @@\n //! context.\n \n use rustc_hir::def_id::DefId;\n-use rustc_hir::lang_items;\n+use rustc_hir::{lang_items, LangItem};\n use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{self, AssocItemContainer, DefIdTree, Instance, ParamEnv, Ty, TyCtxt};\n use rustc_span::symbol::Ident;\n@@ -26,7 +26,7 @@ impl CallDesugaringKind {\n         match self {\n             Self::ForLoopIntoIter => tcx.get_diagnostic_item(sym::IntoIterator).unwrap(),\n             Self::QuestionBranch | Self::TryBlockFromOutput => {\n-                tcx.lang_items().try_trait().unwrap()\n+                tcx.require_lang_item(LangItem::Try, None)\n             }\n             Self::QuestionFromResidual => tcx.get_diagnostic_item(sym::FromResidual).unwrap(),\n         }"}, {"sha": "11661215ae1cc383e241c7c25f0b11ddd373307e", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80356a5abb127e1b58869978daf1928180f321c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80356a5abb127e1b58869978daf1928180f321c/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=b80356a5abb127e1b58869978daf1928180f321c", "patch": "@@ -114,7 +114,7 @@ fn visit_implementation_of_copy(tcx: TyCtxt<'_>, impl_did: LocalDefId) {\n                     traits::ObligationCause::dummy_with_span(field_ty_span),\n                     param_env,\n                     ty,\n-                    tcx.lang_items().copy_trait().unwrap(),\n+                    tcx.require_lang_item(LangItem::Copy, Some(span)),\n                 ) {\n                     let error_predicate = error.obligation.predicate;\n                     // Only note if it's not the root obligation, otherwise it's trivial and"}, {"sha": "5b6fb619217a35d24992c07b8c4238541b7599eb", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80356a5abb127e1b58869978daf1928180f321c/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80356a5abb127e1b58869978daf1928180f321c/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=b80356a5abb127e1b58869978daf1928180f321c", "patch": "@@ -1118,7 +1118,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 let lhs_deref_ty_is_sized = self\n                     .infcx\n                     .type_implements_trait(\n-                        self.tcx.lang_items().sized_trait().unwrap(),\n+                        self.tcx.require_lang_item(LangItem::Sized, None),\n                         [lhs_deref_ty],\n                         self.param_env,\n                     )"}, {"sha": "26d30308ed371239fe1f4c529212cf313372f590", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80356a5abb127e1b58869978daf1928180f321c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80356a5abb127e1b58869978daf1928180f321c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=b80356a5abb127e1b58869978daf1928180f321c", "patch": "@@ -2293,7 +2293,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Given a `ty`, return whether it's an `impl Future<...>`.\n     pub fn ty_is_opaque_future(self, ty: Ty<'_>) -> bool {\n         let ty::Opaque(def_id, _) = ty.kind() else { return false };\n-        let future_trait = self.lang_items().future_trait().unwrap();\n+        let future_trait = self.require_lang_item(LangItem::Future, None);\n \n         self.explicit_item_bounds(def_id).iter().any(|(predicate, _)| {\n             let ty::PredicateKind::Trait(trait_predicate) = predicate.kind().skip_binder() else {"}, {"sha": "07012a686f808981df14eb3770dbb7464b35509a", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b80356a5abb127e1b58869978daf1928180f321c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80356a5abb127e1b58869978daf1928180f321c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=b80356a5abb127e1b58869978daf1928180f321c", "patch": "@@ -11,6 +11,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{self, CtorKind, DefKind, Namespace};\n use rustc_hir::def_id::{DefId, DefIdSet, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::definitions::{DefPathData, DefPathDataName, DisambiguatedDefPathData};\n+use rustc_hir::LangItem;\n use rustc_session::config::TrimmedDefPaths;\n use rustc_session::cstore::{ExternCrate, ExternCrateSource};\n use rustc_session::Limit;\n@@ -889,7 +890,7 @@ pub trait PrettyPrinter<'tcx>:\n                                 // Group the return ty with its def id, if we had one.\n                                 entry\n                                     .return_ty\n-                                    .map(|ty| (tcx.lang_items().fn_once_output().unwrap(), ty)),\n+                                    .map(|ty| (tcx.require_lang_item(LangItem::FnOnce, None), ty)),\n                             );\n                         }\n                         if let Some(trait_ref) = entry.fn_mut_trait_ref {"}, {"sha": "e7a751fa0afca004a5fc301477e48368897d58f0", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b80356a5abb127e1b58869978daf1928180f321c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80356a5abb127e1b58869978daf1928180f321c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=b80356a5abb127e1b58869978daf1928180f321c", "patch": "@@ -17,6 +17,7 @@ use rustc_data_structures::captures::Captures;\n use rustc_data_structures::intern::Interned;\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n+use rustc_hir::LangItem;\n use rustc_index::vec::Idx;\n use rustc_macros::HashStable;\n use rustc_span::symbol::{kw, sym, Symbol};\n@@ -2108,7 +2109,7 @@ impl<'tcx> Ty<'tcx> {\n \n             ty::Str | ty::Slice(_) => (tcx.types.usize, false),\n             ty::Dynamic(..) => {\n-                let dyn_metadata = tcx.lang_items().dyn_metadata().unwrap();\n+                let dyn_metadata = tcx.require_lang_item(LangItem::DynMetadata, None);\n                 (tcx.bound_type_of(dyn_metadata).subst(tcx, &[tail.into()]), false)\n             },\n "}, {"sha": "186109e7075f13e397bfea1e2c2cab13d499f09c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b80356a5abb127e1b58869978daf1928180f321c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b80356a5abb127e1b58869978daf1928180f321c/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=b80356a5abb127e1b58869978daf1928180f321c", "patch": "@@ -2625,7 +2625,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                     }\n                 };\n \n-                let from_generator = tcx.lang_items().from_generator_fn().unwrap();\n+                let from_generator = tcx.require_lang_item(LangItem::FromGenerator, None);\n \n                 // Don't print the tuple of capture types\n                 'print: {"}]}