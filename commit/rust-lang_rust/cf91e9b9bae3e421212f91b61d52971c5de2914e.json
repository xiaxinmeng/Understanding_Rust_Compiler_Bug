{"sha": "cf91e9b9bae3e421212f91b61d52971c5de2914e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmOTFlOWI5YmFlM2U0MjEyMTJmOTFiNjFkNTI5NzFjNWRlMjkxNGU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-08T23:22:33Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-06-08T23:22:33Z"}, "message": "Auto merge of #51448 - Mark-Simulacrum:rollup, r=Mark-Simulacrum\n\nRollup of 13 pull requests\n\nSuccessful merges:\n\n - #50143 (Add deprecation lint for duplicated `macro_export`s)\n - #51099 (Fix Issue 38777)\n - #51276 (Dedup auto traits in trait objects.)\n - #51298 (Stabilize unit tests with non-`()` return type)\n - #51360 (Suggest parentheses when a struct literal needs them)\n - #51391 (Use spans pointing at the inside of a rustdoc attribute)\n - #51394 (Use scope tree depths to speed up `nearest_common_ancestor`.)\n - #51396 (Make the size of Option<NonZero*> a documented guarantee.)\n - #51401 (Warn on `repr` without hints)\n - #51412 (Avoid useless Vec clones in pending_obligations().)\n - #51427 (compiletest: autoremove duplicate .nll.* files (#51204))\n - #51436 (Do not require stage 2 compiler for rustdoc)\n - #51437 (rustbuild: generate full list of dependencies for metadata)\n\nFailed merges:", "tree": {"sha": "18d54d2f010e57f0cb726935f774aca7c80bdd06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18d54d2f010e57f0cb726935f774aca7c80bdd06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf91e9b9bae3e421212f91b61d52971c5de2914e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf91e9b9bae3e421212f91b61d52971c5de2914e", "html_url": "https://github.com/rust-lang/rust/commit/cf91e9b9bae3e421212f91b61d52971c5de2914e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf91e9b9bae3e421212f91b61d52971c5de2914e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a", "html_url": "https://github.com/rust-lang/rust/commit/8afb89493179e52b61a4f8b9c45de1dd7e9d1f3a"}, {"sha": "8c5002d1e09edc22a5f791d6379d34e2520a4fc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c5002d1e09edc22a5f791d6379d34e2520a4fc4", "html_url": "https://github.com/rust-lang/rust/commit/8c5002d1e09edc22a5f791d6379d34e2520a4fc4"}], "stats": {"total": 1521, "additions": 1086, "deletions": 435}, "files": [{"sha": "be9c926bedf227b833063bb839be593a169a7ff4", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -800,10 +800,7 @@ impl<'a> Builder<'a> {\n             cargo.env(\"RUSTC_ERROR_FORMAT\", error_format);\n         }\n         if cmd != \"build\" && cmd != \"check\" && want_rustdoc {\n-            cargo.env(\n-                \"RUSTDOC_LIBDIR\",\n-                self.rustc_libdir(self.compiler(2, self.config.build)),\n-            );\n+            cargo.env(\"RUSTDOC_LIBDIR\", self.sysroot_libdir(compiler, self.config.build));\n         }\n \n         if mode.is_tool() {"}, {"sha": "6e77413f06188804b5fbb4503d1e0a157052df41", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -280,7 +280,8 @@ pub struct Build {\n struct Crate {\n     name: Interned<String>,\n     version: String,\n-    deps: Vec<Interned<String>>,\n+    deps: HashSet<Interned<String>>,\n+    id: String,\n     path: PathBuf,\n     doc_step: String,\n     build_step: String,"}, {"sha": "718a6da363724b0bef268d91fa6df1b7d13130c6", "filename": "src/bootstrap/metadata.rs", "status": "modified", "additions": 31, "deletions": 23, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Fbootstrap%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Fbootstrap%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fmetadata.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -11,6 +11,7 @@\n use std::collections::HashMap;\n use std::process::Command;\n use std::path::PathBuf;\n+use std::collections::HashSet;\n \n use build_helper::output;\n use serde_json;\n@@ -45,12 +46,34 @@ struct ResolveNode {\n }\n \n pub fn build(build: &mut Build) {\n-    build_krate(build, \"src/libstd\");\n-    build_krate(build, \"src/libtest\");\n-    build_krate(build, \"src/rustc\");\n+    let mut resolves = Vec::new();\n+    build_krate(&build.std_features(), build, &mut resolves, \"src/libstd\");\n+    build_krate(\"\", build, &mut resolves, \"src/libtest\");\n+    build_krate(&build.rustc_features(), build, &mut resolves, \"src/rustc\");\n+\n+    let mut id2name = HashMap::new();\n+    for (name, krate) in build.crates.iter() {\n+        id2name.insert(krate.id.clone(), name.clone());\n+    }\n+\n+    for node in resolves {\n+        let name = match id2name.get(&node.id) {\n+            Some(name) => name,\n+            None => continue,\n+        };\n+\n+        let krate = build.crates.get_mut(name).unwrap();\n+        for dep in node.dependencies.iter() {\n+            let dep = match id2name.get(dep) {\n+                Some(dep) => dep,\n+                None => continue,\n+            };\n+            krate.deps.insert(*dep);\n+        }\n+    }\n }\n \n-fn build_krate(build: &mut Build, krate: &str) {\n+fn build_krate(features: &str, build: &mut Build, resolves: &mut Vec<ResolveNode>, krate: &str) {\n     // Run `cargo metadata` to figure out what crates we're testing.\n     //\n     // Down below we're going to call `cargo test`, but to test the right set\n@@ -60,14 +83,13 @@ fn build_krate(build: &mut Build, krate: &str) {\n     let mut cargo = Command::new(&build.initial_cargo);\n     cargo.arg(\"metadata\")\n          .arg(\"--format-version\").arg(\"1\")\n+         .arg(\"--features\").arg(features)\n          .arg(\"--manifest-path\").arg(build.src.join(krate).join(\"Cargo.toml\"));\n     let output = output(&mut cargo);\n     let output: Output = serde_json::from_str(&output).unwrap();\n-    let mut id2name = HashMap::new();\n     for package in output.packages {\n         if package.source.is_none() {\n             let name = INTERNER.intern_string(package.name);\n-            id2name.insert(package.id, name);\n             let mut path = PathBuf::from(package.manifest_path);\n             path.pop();\n             build.crates.insert(name, Crate {\n@@ -77,25 +99,11 @@ fn build_krate(build: &mut Build, krate: &str) {\n                 bench_step: format!(\"bench-crate-{}\", name),\n                 name,\n                 version: package.version,\n-                deps: Vec::new(),\n+                id: package.id,\n+                deps: HashSet::new(),\n                 path,\n             });\n         }\n     }\n-\n-    for node in output.resolve.nodes {\n-        let name = match id2name.get(&node.id) {\n-            Some(name) => name,\n-            None => continue,\n-        };\n-\n-        let krate = build.crates.get_mut(name).unwrap();\n-        for dep in node.dependencies.iter() {\n-            let dep = match id2name.get(dep) {\n-                Some(dep) => dep,\n-                None => continue,\n-            };\n-            krate.deps.push(*dep);\n-        }\n-    }\n+    resolves.extend(output.resolve.nodes);\n }"}, {"sha": "c2da9006a8a92cfa739ceba239349f7b7ef34b43", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -39,10 +39,10 @@ macro_rules! nonzero_integers {\n         $(\n             /// An integer that is known not to equal zero.\n             ///\n-            /// This may enable some memory layout optimization such as:\n+            /// This enables some memory layout optimization.\n+            /// For example, `Option<NonZeroU32>` is the same size as `u32`:\n             ///\n             /// ```rust\n-            /// # #![feature(nonzero)]\n             /// use std::mem::size_of;\n             /// assert_eq!(size_of::<Option<std::num::NonZeroU32>>(), size_of::<u32>());\n             /// ```"}, {"sha": "02559e413fc6f160afe0c66d9d6f5321366b38cd", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -17,6 +17,7 @@\n use errors::{Applicability, DiagnosticBuilder};\n use lint::{LintPass, LateLintPass, LintArray};\n use session::Session;\n+use syntax::ast;\n use syntax::codemap::Span;\n \n declare_lint! {\n@@ -206,6 +207,12 @@ declare_lint! {\n     \"potentially-conflicting impls were erroneously allowed\"\n }\n \n+declare_lint! {\n+    pub BAD_REPR,\n+    Warn,\n+    \"detects incorrect use of `repr` attribute\"\n+}\n+\n declare_lint! {\n     pub DEPRECATED,\n     Warn,\n@@ -285,6 +292,12 @@ declare_lint! {\n     \"warns about duplicate associated type bindings in generics\"\n }\n \n+declare_lint! {\n+    pub DUPLICATE_MACRO_EXPORTS,\n+    Deny,\n+    \"detects duplicate macro exports\"\n+}\n+\n /// Does nothing as a lint pass, but registers some `Lint`s\n /// which are used by other parts of the compiler.\n #[derive(Copy, Clone)]\n@@ -337,6 +350,7 @@ impl LintPass for HardwiredLints {\n             ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE,\n             UNSTABLE_NAME_COLLISIONS,\n             DUPLICATE_ASSOCIATED_TYPE_BINDINGS,\n+            DUPLICATE_MACRO_EXPORTS,\n         )\n     }\n }\n@@ -348,6 +362,7 @@ pub enum BuiltinLintDiagnostics {\n     Normal,\n     BareTraitObject(Span, /* is_global */ bool),\n     AbsPathWithModule(Span),\n+    DuplicatedMacroExports(ast::Ident, Span, Span),\n }\n \n impl BuiltinLintDiagnostics {\n@@ -380,6 +395,10 @@ impl BuiltinLintDiagnostics {\n                 };\n                 db.span_suggestion_with_applicability(span, \"use `crate`\", sugg, app);\n             }\n+            BuiltinLintDiagnostics::DuplicatedMacroExports(ident, earlier_span, later_span) => {\n+                db.span_label(later_span, format!(\"`{}` already exported\", ident));\n+                db.span_note(earlier_span, \"previous macro export is now shadowed\");\n+            }\n         }\n     }\n }"}, {"sha": "0ba204dc20606aab5345ffe885af9e07c0131d70", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 70, "deletions": 60, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -22,7 +22,6 @@ use ty;\n \n use std::fmt;\n use std::mem;\n-use rustc_data_structures::small_vec::SmallVec;\n use rustc_data_structures::sync::Lrc;\n use syntax::codemap;\n use syntax::ast;\n@@ -280,6 +279,8 @@ impl Scope {\n     }\n }\n \n+pub type ScopeDepth = u32;\n+\n /// The region scope tree encodes information about region relationships.\n #[derive(Default, Debug)]\n pub struct ScopeTree {\n@@ -297,7 +298,7 @@ pub struct ScopeTree {\n     /// conditional expression or repeating block. (Note that the\n     /// enclosing scope id for the block associated with a closure is\n     /// the closure itself.)\n-    parent_map: FxHashMap<Scope, Scope>,\n+    parent_map: FxHashMap<Scope, (Scope, ScopeDepth)>,\n \n     /// `var_map` maps from a variable or binding id to the block in\n     /// which that variable is declared.\n@@ -415,11 +416,12 @@ pub struct Context {\n     /// details.\n     root_id: Option<hir::ItemLocalId>,\n \n-    /// the scope that contains any new variables declared\n-    var_parent: Option<Scope>,\n+    /// The scope that contains any new variables declared, plus its depth in\n+    /// the scope tree.\n+    var_parent: Option<(Scope, ScopeDepth)>,\n \n-    /// region parent of expressions etc\n-    parent: Option<Scope>,\n+    /// Region parent of expressions, etc., plus its depth in the scope tree.\n+    parent: Option<(Scope, ScopeDepth)>,\n }\n \n struct RegionResolutionVisitor<'a, 'tcx: 'a> {\n@@ -499,7 +501,7 @@ impl<'tcx> Visitor<'tcx> for ExprLocatorVisitor {\n }\n \n impl<'tcx> ScopeTree {\n-    pub fn record_scope_parent(&mut self, child: Scope, parent: Option<Scope>) {\n+    pub fn record_scope_parent(&mut self, child: Scope, parent: Option<(Scope, ScopeDepth)>) {\n         debug!(\"{:?}.parent = {:?}\", child, parent);\n \n         if let Some(p) = parent {\n@@ -515,7 +517,7 @@ impl<'tcx> ScopeTree {\n \n     pub fn each_encl_scope<E>(&self, mut e:E) where E: FnMut(Scope, Scope) {\n         for (&child, &parent) in &self.parent_map {\n-            e(child, parent)\n+            e(child, parent.0)\n         }\n     }\n \n@@ -558,7 +560,7 @@ impl<'tcx> ScopeTree {\n \n     pub fn opt_encl_scope(&self, id: Scope) -> Option<Scope> {\n         //! Returns the narrowest scope that encloses `id`, if any.\n-        self.parent_map.get(&id).cloned()\n+        self.parent_map.get(&id).cloned().map(|(p, _)| p)\n     }\n \n     #[allow(dead_code)] // used in cfg\n@@ -590,7 +592,7 @@ impl<'tcx> ScopeTree {\n         // returned.\n         let mut id = Scope::Node(expr_id);\n \n-        while let Some(&p) = self.parent_map.get(&id) {\n+        while let Some(&(p, _)) = self.parent_map.get(&id) {\n             match p.data() {\n                 ScopeData::Destruction(..) => {\n                     debug!(\"temporary_scope({:?}) = {:?} [enclosing]\",\n@@ -658,57 +660,61 @@ impl<'tcx> ScopeTree {\n         }\n     }\n \n-    /// Finds the nearest common ancestor (if any) of two scopes.  That is, finds the smallest\n-    /// scope which is greater than or equal to both `scope_a` and `scope_b`.\n-    pub fn nearest_common_ancestor(&self,\n-                                   scope_a: Scope,\n-                                   scope_b: Scope)\n-                                   -> Scope {\n+    /// Finds the nearest common ancestor of two scopes.  That is, finds the\n+    /// smallest scope which is greater than or equal to both `scope_a` and\n+    /// `scope_b`.\n+    pub fn nearest_common_ancestor(&self, scope_a: Scope, scope_b: Scope) -> Scope {\n         if scope_a == scope_b { return scope_a; }\n \n-        // Process the lists in tandem from the innermost scope, recording the\n-        // scopes seen so far. The first scope that comes up for a second time\n-        // is the nearest common ancestor.\n-        //\n-        // Note: another way to compute the nearest common ancestor is to get\n-        // the full scope chain for both scopes and then compare the chains to\n-        // find the first scope in a common tail. But getting a parent scope\n-        // requires a hash table lookup, and we often have very long scope\n-        // chains (10s or 100s of scopes) that only differ by a few elements at\n-        // the start. So this algorithm is faster.\n-\n-        let mut ma = Some(&scope_a);\n-        let mut mb = Some(&scope_b);\n-\n-        // A HashSet<Scope> is a more obvious choice for these, but SmallVec is\n-        // faster because the set size is normally small so linear search is\n-        // as good or better than a hash table lookup, plus the size is usually\n-        // small enough to avoid a heap allocation.\n-        let mut seen_a: SmallVec<[&Scope; 32]> = SmallVec::new();\n-        let mut seen_b: SmallVec<[&Scope; 32]> = SmallVec::new();\n+        let mut a = scope_a;\n+        let mut b = scope_b;\n \n-        loop {\n-            if let Some(a) = ma {\n-                if seen_b.iter().any(|s| *s == a) {\n-                    return *a;\n-                }\n-                seen_a.push(a);\n-                ma = self.parent_map.get(&a);\n-            }\n+        // Get the depth of each scope's parent. If either scope has no parent,\n+        // it must be the root, which means we can stop immediately because the\n+        // root must be the nearest common ancestor. (In practice, this is\n+        // moderately common.)\n+        let (parent_a, parent_a_depth) = match self.parent_map.get(&a) {\n+            Some(pd) => *pd,\n+            None => return a,\n+        };\n+        let (parent_b, parent_b_depth) = match self.parent_map.get(&b) {\n+            Some(pd) => *pd,\n+            None => return b,\n+        };\n \n-            if let Some(b) = mb {\n-                if seen_a.iter().any(|s| *s == b) {\n-                    return *b;\n-                }\n-                seen_b.push(b);\n-                mb = self.parent_map.get(&b);\n+        if parent_a_depth > parent_b_depth {\n+            // `a` is lower than `b`. Move `a` up until it's at the same depth\n+            // as `b`. The first move up is trivial because we already found\n+            // `parent_a` above; the loop does the remaining N-1 moves.\n+            a = parent_a;\n+            for _ in 0..(parent_a_depth - parent_b_depth - 1) {\n+                a = self.parent_map.get(&a).unwrap().0;\n             }\n-\n-            if ma.is_none() && mb.is_none() {\n-                // No nearest common ancestor found.\n-                bug!();\n+        } else if parent_b_depth > parent_a_depth {\n+            // `b` is lower than `a`.\n+            b = parent_b;\n+            for _ in 0..(parent_b_depth - parent_a_depth - 1) {\n+                b = self.parent_map.get(&b).unwrap().0;\n             }\n+        } else {\n+            // Both scopes are at the same depth, and we know they're not equal\n+            // because that case was tested for at the top of this function. So\n+            // we can trivially move them both up one level now.\n+            assert!(parent_a_depth != 0);\n+            a = parent_a;\n+            b = parent_b;\n         }\n+\n+        // Now both scopes are at the same level. We move upwards in lockstep\n+        // until they match. In practice, this loop is almost always executed\n+        // zero times because `a` is almost always a direct ancestor of `b` or\n+        // vice versa.\n+        while a != b {\n+            a = self.parent_map.get(&a).unwrap().0;\n+            b = self.parent_map.get(&b).unwrap().0;\n+        };\n+\n+        a\n     }\n \n     /// Assuming that the provided region was defined within this `ScopeTree`,\n@@ -807,7 +813,7 @@ fn record_var_lifetime(visitor: &mut RegionResolutionVisitor,\n             //\n             // extern fn isalnum(c: c_int) -> c_int\n         }\n-        Some(parent_scope) =>\n+        Some((parent_scope, _)) =>\n             visitor.scope_tree.record_var_scope(var_id, parent_scope),\n     }\n }\n@@ -1019,7 +1025,7 @@ fn resolve_expr<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>, expr:\n             // Keep traversing up while we can.\n             match visitor.scope_tree.parent_map.get(&scope) {\n                 // Don't cross from closure bodies to their parent.\n-                Some(&superscope) => match superscope.data() {\n+                Some(&(superscope, _)) => match superscope.data() {\n                     ScopeData::CallSite(_) => break,\n                     _ => scope = superscope\n                 },\n@@ -1036,7 +1042,7 @@ fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>,\n                            init: Option<&'tcx hir::Expr>) {\n     debug!(\"resolve_local(pat={:?}, init={:?})\", pat, init);\n \n-    let blk_scope = visitor.cx.var_parent;\n+    let blk_scope = visitor.cx.var_parent.map(|(p, _)| p);\n \n     // As an exception to the normal rules governing temporary\n     // lifetimes, initializers in a let have a temporary lifetime\n@@ -1261,16 +1267,20 @@ fn resolve_local<'a, 'tcx>(visitor: &mut RegionResolutionVisitor<'a, 'tcx>,\n \n impl<'a, 'tcx> RegionResolutionVisitor<'a, 'tcx> {\n     /// Records the current parent (if any) as the parent of `child_scope`.\n-    fn record_child_scope(&mut self, child_scope: Scope) {\n+    /// Returns the depth of `child_scope`.\n+    fn record_child_scope(&mut self, child_scope: Scope) -> ScopeDepth {\n         let parent = self.cx.parent;\n         self.scope_tree.record_scope_parent(child_scope, parent);\n+        // If `child_scope` has no parent, it must be the root node, and so has\n+        // a depth of 1. Otherwise, its depth is one more than its parent's.\n+        parent.map_or(1, |(_p, d)| d + 1)\n     }\n \n     /// Records the current parent (if any) as the parent of `child_scope`,\n     /// and sets `child_scope` as the new current parent.\n     fn enter_scope(&mut self, child_scope: Scope) {\n-        self.record_child_scope(child_scope);\n-        self.cx.parent = Some(child_scope);\n+        let child_depth = self.record_child_scope(child_scope);\n+        self.cx.parent = Some((child_scope, child_depth));\n     }\n \n     fn enter_node_scope_with_dtor(&mut self, id: hir::ItemLocalId) {"}, {"sha": "40d54885619fabe07477589a645eac60ec8aacf3", "filename": "src/librustc/traits/engine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc%2Ftraits%2Fengine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc%2Ftraits%2Fengine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fengine.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -13,7 +13,7 @@ use ty::{self, Ty, TyCtxt};\n use hir::def_id::DefId;\n \n use super::{FulfillmentContext, FulfillmentError};\n-use super::{ObligationCause, PendingPredicateObligation, PredicateObligation};\n+use super::{ObligationCause, PredicateObligation};\n \n pub trait TraitEngine<'tcx>: 'tcx {\n     fn normalize_projection_type<'a, 'gcx>(\n@@ -49,7 +49,7 @@ pub trait TraitEngine<'tcx>: 'tcx {\n         infcx: &InferCtxt<'a, 'gcx, 'tcx>,\n     ) -> Result<(), Vec<FulfillmentError<'tcx>>>;\n \n-    fn pending_obligations(&self) -> Vec<PendingPredicateObligation<'tcx>>;\n+    fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>>;\n }\n \n impl<'a, 'gcx, 'tcx> dyn TraitEngine<'tcx> {"}, {"sha": "3896b1a25a20c9c0ad46c2ed268ab599292d3052", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -241,8 +241,8 @@ impl<'tcx> TraitEngine<'tcx> for FulfillmentContext<'tcx> {\n         self.select(&mut selcx)\n     }\n \n-    fn pending_obligations(&self) -> Vec<PendingPredicateObligation<'tcx>> {\n-        self.predicates.pending_obligations()\n+    fn pending_obligations(&self) -> Vec<PredicateObligation<'tcx>> {\n+        self.predicates.map_pending_obligations(|o| o.obligation.clone())\n     }\n }\n "}, {"sha": "c3934c4e1b850aa495df207f8d924bb338f6ab15", "filename": "src/librustc_data_structures/obligation_forest/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fobligation_forest%2Fmod.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -229,13 +229,13 @@ impl<O: ForestObligation> ObligationForest<O> {\n     }\n \n     /// Returns the set of obligations that are in a pending state.\n-    pub fn pending_obligations(&self) -> Vec<O>\n-        where O: Clone\n+    pub fn map_pending_obligations<P, F>(&self, f: F) -> Vec<P>\n+        where F: Fn(&O) -> P\n     {\n         self.nodes\n             .iter()\n             .filter(|n| n.state.get() == NodeState::Pending)\n-            .map(|n| n.obligation.clone())\n+            .map(|n| f(&n.obligation))\n             .collect()\n     }\n "}, {"sha": "206e58b3e2e2764df976c384e81874b55bffa30f", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -191,11 +191,12 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n         self.infcx.tcx\n     }\n \n-    pub fn create_region_hierarchy(&mut self, rh: &RH, parent: region::Scope) {\n+    pub fn create_region_hierarchy(&mut self, rh: &RH,\n+                                   parent: (region::Scope, region::ScopeDepth)) {\n         let me = region::Scope::Node(rh.id);\n         self.region_scope_tree.record_scope_parent(me, Some(parent));\n         for child_rh in rh.sub {\n-            self.create_region_hierarchy(child_rh, me);\n+            self.create_region_hierarchy(child_rh, (me, parent.1 + 1));\n         }\n     }\n \n@@ -215,7 +216,7 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n                 id: hir::ItemLocalId(11),\n                 sub: &[],\n             }],\n-        }, dscope);\n+        }, (dscope, 1));\n     }\n \n     #[allow(dead_code)] // this seems like it could be useful, even if we don't use it now"}, {"sha": "0a6473655980ceb767e131fa586830f7fb29ae26", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 73, "deletions": 0, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -673,6 +673,79 @@ impl EarlyLintPass for AnonymousParameters {\n     }\n }\n \n+/// Checks for incorrect use use of `repr` attributes.\n+#[derive(Clone)]\n+pub struct BadRepr;\n+\n+impl LintPass for BadRepr {\n+    fn get_lints(&self) -> LintArray {\n+        lint_array!()\n+    }\n+}\n+\n+impl EarlyLintPass for BadRepr {\n+    fn check_attribute(&mut self, cx: &EarlyContext, attr: &ast::Attribute) {\n+        if attr.name() == \"repr\" {\n+            let list = attr.meta_item_list();\n+\n+            let repr_str = |lit: &str| { format!(\"#[repr({})]\", lit) };\n+\n+            // Emit warnings with `repr` either has a literal assignment (`#[repr = \"C\"]`) or\n+            // no hints (``#[repr]`)\n+            let has_hints = list.as_ref().map(|ref list| !list.is_empty()).unwrap_or(false);\n+            if !has_hints {\n+                let mut suggested = false;\n+                let mut warn = if let Some(ref lit) = attr.value_str() {\n+                    // avoid warning about empty `repr` on `#[repr = \"foo\"]`\n+                    let mut warn = cx.struct_span_lint(\n+                        BAD_REPR,\n+                        attr.span,\n+                        \"`repr` attribute isn't configurable with a literal\",\n+                    );\n+                    match format!(\"{}\", lit).as_ref() {\n+                        | \"C\" | \"packed\" | \"rust\" | \"transparent\"\n+                        | \"u8\" | \"u16\" | \"u32\" | \"u64\" | \"u128\" | \"usize\"\n+                        | \"i8\" | \"i16\" | \"i32\" | \"i64\" | \"i128\" | \"isize\" => {\n+                            // if the literal could have been a valid `repr` arg,\n+                            // suggest the correct syntax\n+                            warn.span_suggestion(\n+                                attr.span,\n+                                \"give `repr` a hint\",\n+                                repr_str(&lit.as_str()),\n+                            );\n+                            suggested = true;\n+                        }\n+                        _ => {  // the literal wasn't a valid `repr` arg\n+                            warn.span_label(attr.span, \"needs a hint\");\n+                        }\n+                    };\n+                    warn\n+                } else {\n+                    let mut warn = cx.struct_span_lint(\n+                        BAD_REPR,\n+                        attr.span,\n+                        \"`repr` attribute must have a hint\",\n+                    );\n+                    warn.span_label(attr.span, \"needs a hint\");\n+                    warn\n+                };\n+                if !suggested {\n+                    warn.help(&format!(\n+                        \"valid hints include `{}`, `{}`, `{}` and `{}`\",\n+                        repr_str(\"C\"),\n+                        repr_str(\"packed\"),\n+                        repr_str(\"rust\"),\n+                        repr_str(\"transparent\"),\n+                    ));\n+                    warn.note(\"for more information, visit \\\n+                               <https://doc.rust-lang.org/reference/type-layout.html>\");\n+                }\n+                warn.emit();\n+            }\n+        }\n+    }\n+}\n+\n /// Checks for use of attributes which have been deprecated.\n #[derive(Clone)]\n pub struct DeprecatedAttr {"}, {"sha": "47f17285f5f381551d0472b5e0fb74461f2f2eaf", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -107,6 +107,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n                        UnusedImportBraces,\n                        AnonymousParameters,\n                        UnusedDocComment,\n+                       BadRepr,\n                        );\n \n     add_early_builtin_with_new!(sess,\n@@ -211,6 +212,11 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n             reference: \"issue #35203 <https://github.com/rust-lang/rust/issues/35203>\",\n             edition: None,\n         },\n+        FutureIncompatibleInfo {\n+            id: LintId::of(DUPLICATE_MACRO_EXPORTS),\n+            reference: \"issue #35896 <https://github.com/rust-lang/rust/issues/35896>\",\n+            edition: Some(Edition::Edition2018),\n+        },\n         FutureIncompatibleInfo {\n             id: LintId::of(SAFE_EXTERN_STATICS),\n             reference: \"issue #36247 <https://github.com/rust-lang/rust/issues/36247>\","}, {"sha": "7bb7f2fffbc694e165c47364243619d7b5a2d038", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 32, "deletions": 2, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -2934,8 +2934,38 @@ impl<'a> Resolver<'a> {\n                                                               here due to private fields\"));\n                             }\n                         } else {\n-                            err.span_label(span, format!(\"did you mean `{} {{ /* fields */ }}`?\",\n-                                                         path_str));\n+                            // HACK(estebank): find a better way to figure out that this was a\n+                            // parser issue where a struct literal is being used on an expression\n+                            // where a brace being opened means a block is being started. Look\n+                            // ahead for the next text to see if `span` is followed by a `{`.\n+                            let cm = this.session.codemap();\n+                            let mut sp = span;\n+                            loop {\n+                                sp = cm.next_point(sp);\n+                                match cm.span_to_snippet(sp) {\n+                                    Ok(ref snippet) => {\n+                                        if snippet.chars().any(|c| { !c.is_whitespace() }) {\n+                                            break;\n+                                        }\n+                                    }\n+                                    _ => break,\n+                                }\n+                            }\n+                            let followed_by_brace = match cm.span_to_snippet(sp) {\n+                                Ok(ref snippet) if snippet == \"{\" => true,\n+                                _ => false,\n+                            };\n+                            if let (PathSource::Expr(None), true) = (source, followed_by_brace) {\n+                                err.span_label(\n+                                    span,\n+                                    format!(\"did you mean `({} {{ /* fields */ }})`?\", path_str),\n+                                );\n+                            } else {\n+                                err.span_label(\n+                                    span,\n+                                    format!(\"did you mean `{} {{ /* fields */ }}`?\", path_str),\n+                                );\n+                            }\n                         }\n                         return (err, candidates);\n                     }"}, {"sha": "3fdac8f6afdc4149400edcd960147fcaeb86ee18", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -18,13 +18,14 @@ use {names_to_string, module_to_string};\n use {resolve_error, ResolutionError};\n \n use rustc::ty;\n-use rustc::lint::builtin::PUB_USE_OF_PRIVATE_EXTERN_CRATE;\n+use rustc::lint::builtin::BuiltinLintDiagnostics;\n+use rustc::lint::builtin::{DUPLICATE_MACRO_EXPORTS, PUB_USE_OF_PRIVATE_EXTERN_CRATE};\n use rustc::hir::def_id::{CRATE_DEF_INDEX, DefId};\n use rustc::hir::def::*;\n use rustc::session::DiagnosticMessageId;\n use rustc::util::nodemap::{FxHashMap, FxHashSet};\n \n-use syntax::ast::{Ident, Name, NodeId};\n+use syntax::ast::{Ident, Name, NodeId, CRATE_NODE_ID};\n use syntax::ext::base::Determinacy::{self, Determined, Undetermined};\n use syntax::ext::hygiene::Mark;\n use syntax::symbol::keywords;\n@@ -974,7 +975,16 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n         if module as *const _ == self.graph_root as *const _ {\n             let macro_exports = mem::replace(&mut self.macro_exports, Vec::new());\n             for export in macro_exports.into_iter().rev() {\n-                if exported_macro_names.insert(export.ident.modern(), export.span).is_none() {\n+                if let Some(later_span) = exported_macro_names.insert(export.ident.modern(),\n+                                                                      export.span) {\n+                    self.session.buffer_lint_with_diagnostic(\n+                        DUPLICATE_MACRO_EXPORTS,\n+                        CRATE_NODE_ID,\n+                        later_span,\n+                        &format!(\"a macro named `{}` has already been exported\", export.ident),\n+                        BuiltinLintDiagnostics::DuplicatedMacroExports(\n+                            export.ident, export.span, later_span));\n+                } else {\n                     reexports.push(export);\n                 }\n             }"}, {"sha": "f29e29c1fb2bf849bf752f9f023da8dfde19bede", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -30,6 +30,7 @@ use util::common::ErrorReported;\n use util::nodemap::{FxHashSet, FxHashMap};\n use errors::FatalError;\n \n+// use std::cmp::Ordering;\n use std::iter;\n use syntax::ast;\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n@@ -646,7 +647,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                                             &mut vec![]);\n         }\n \n-        let (auto_traits, trait_bounds) = split_auto_traits(tcx, &trait_bounds[1..]);\n+        let (mut auto_traits, trait_bounds) = split_auto_traits(tcx, &trait_bounds[1..]);\n \n         if !trait_bounds.is_empty() {\n             let b = &trait_bounds[0];\n@@ -707,6 +708,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                         .emit();\n         }\n \n+        // Dedup auto traits so that `dyn Trait + Send + Send` is the same as `dyn Trait + Send`.\n+        auto_traits.sort();\n+        auto_traits.dedup();\n+\n         // skip_binder is okay, because the predicates are re-bound.\n         let mut v =\n             iter::once(ty::ExistentialPredicate::Trait(*existential_principal.skip_binder()))\n@@ -1319,7 +1324,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n     }\n }\n \n-/// Divides a list of general trait bounds into two groups: builtin bounds (Sync/Send) and the\n+/// Divides a list of general trait bounds into two groups: auto traits (e.g. Sync and Send) and the\n /// remaining general trait bounds.\n fn split_auto_traits<'a, 'b, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                                          trait_bounds: &'b [hir::PolyTraitRef])"}, {"sha": "439c1b34227940fdf6f8cde064734ea4dd9dcb6a", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -225,7 +225,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let expected_sig = fulfillment_cx\n             .pending_obligations()\n             .iter()\n-            .map(|obligation| &obligation.obligation)\n             .filter_map(|obligation| {\n                 debug!(\n                     \"deduce_expectations_from_obligations: obligation.predicate={:?}\",\n@@ -257,7 +256,6 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let expected_kind = fulfillment_cx\n             .pending_obligations()\n             .iter()\n-            .map(|obligation| &obligation.obligation)\n             .filter_map(|obligation| {\n                 let opt_trait_ref = match obligation.predicate {\n                     ty::Predicate::Projection(ref data) => Some(data.to_poly_trait_ref(self.tcx)),"}, {"sha": "3f883eab172db57aa737066a5408409a1ee4b2bc", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 46, "deletions": 16, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -1251,30 +1251,60 @@ fn resolution_failure(\n     link_range: Option<Range<usize>>,\n ) {\n     let sp = span_of_attrs(attrs);\n-    let mut diag = cx.sess()\n-        .struct_span_warn(sp, &format!(\"[{}] cannot be resolved, ignoring it...\", path_str));\n+    let msg = format!(\"`[{}]` cannot be resolved, ignoring it...\", path_str);\n \n-    if let Some(link_range) = link_range {\n+    let code_dox = sp.to_src(cx);\n+\n+    let doc_comment_padding = 3;\n+    let mut diag = if let Some(link_range) = link_range {\n         // blah blah blah\\nblah\\nblah [blah] blah blah\\nblah blah\n         //                       ^    ~~~~~~\n         //                       |    link_range\n         //                       last_new_line_offset\n \n-        let last_new_line_offset = dox[..link_range.start].rfind('\\n').map_or(0, |n| n + 1);\n-        let line = dox[last_new_line_offset..].lines().next().unwrap_or(\"\");\n-\n-        // Print the line containing the `link_range` and manually mark it with '^'s\n-        diag.note(&format!(\n-            \"the link appears in this line:\\n\\n{line}\\n{indicator: <before$}{indicator:^<found$}\",\n-            line=line,\n-            indicator=\"\",\n-            before=link_range.start - last_new_line_offset,\n-            found=link_range.len(),\n-        ));\n-    } else {\n+        let mut diag;\n+        if dox.lines().count() == code_dox.lines().count() {\n+            let line_offset = dox[..link_range.start].lines().count();\n+            // The span starts in the `///`, so we don't have to account for the leading whitespace\n+            let code_dox_len = if line_offset <= 1 {\n+                doc_comment_padding\n+            } else {\n+                // The first `///`\n+                doc_comment_padding +\n+                    // Each subsequent leading whitespace and `///`\n+                    code_dox.lines().skip(1).take(line_offset - 1).fold(0, |sum, line| {\n+                        sum + doc_comment_padding + line.len() - line.trim().len()\n+                    })\n+            };\n \n-    }\n+            // Extract the specific span\n+            let sp = sp.from_inner_byte_pos(\n+                link_range.start + code_dox_len,\n+                link_range.end + code_dox_len,\n+            );\n \n+            diag = cx.sess().struct_span_warn(sp, &msg);\n+            diag.span_label(sp, \"cannot be resolved, ignoring\");\n+        } else {\n+            diag = cx.sess().struct_span_warn(sp, &msg);\n+\n+            let last_new_line_offset = dox[..link_range.start].rfind('\\n').map_or(0, |n| n + 1);\n+            let line = dox[last_new_line_offset..].lines().next().unwrap_or(\"\");\n+\n+            // Print the line containing the `link_range` and manually mark it with '^'s\n+            diag.note(&format!(\n+                \"the link appears in this line:\\n\\n{line}\\n\\\n+                 {indicator: <before$}{indicator:^<found$}\",\n+                line=line,\n+                indicator=\"\",\n+                before=link_range.start - last_new_line_offset,\n+                found=link_range.len(),\n+            ));\n+        }\n+        diag\n+    } else {\n+        cx.sess().struct_span_warn(sp, &msg)\n+    };\n     diag.emit();\n }\n "}, {"sha": "5f0cf49cd96cf73acda7aa6204ea9935f7041e26", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -398,9 +398,6 @@ declare_features! (\n     // `foo.rs` as an alternative to `foo/mod.rs`\n     (active, non_modrs_mods, \"1.24.0\", Some(44660), Some(Edition::Edition2018)),\n \n-    // Termination trait in tests (RFC 1937)\n-    (active, termination_trait_test, \"1.24.0\", Some(48854), Some(Edition::Edition2018)),\n-\n     // `extern` in paths\n     (active, extern_in_paths, \"1.23.0\", Some(44660), None),\n \n@@ -616,6 +613,8 @@ declare_features! (\n     (accepted, fn_must_use, \"1.27.0\", Some(43302), None),\n     // Allows use of the :lifetime macro fragment specifier\n     (accepted, macro_lifetime_matcher, \"1.27.0\", Some(34303), None),\n+    // Termination trait in tests (RFC 1937)\n+    (accepted, termination_trait_test, \"1.27.0\", Some(48854), None),\n );\n \n // If you change this, please modify src/doc/unstable-book as well. You must"}, {"sha": "dd3559798ec0c6381196c5dd2fb2edd8e22babf0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -652,7 +652,7 @@ impl<'a> Parser<'a> {\n                 Err(err)\n             }\n         } else {\n-            self.expect_one_of(unsafe { slice::from_raw_parts(t, 1) }, &[])\n+            self.expect_one_of(slice::from_ref(t), &[])\n         }\n     }\n \n@@ -1108,7 +1108,12 @@ impl<'a> Parser<'a> {\n     {\n         let mut first: bool = true;\n         let mut v = vec![];\n-        while !kets.contains(&&self.token) {\n+        while !kets.iter().any(|k| {\n+                match expect {\n+                    TokenExpectType::Expect => self.check(k),\n+                    TokenExpectType::NoExpect => self.token == **k,\n+                }\n+            }) {\n             match self.token {\n                 token::CloseDelim(..) | token::Eof => break,\n                 _ => {}"}, {"sha": "0c7f70a578a2687477b4fe12e1ac3144f987bf11", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 9, "deletions": 34, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -335,7 +335,7 @@ enum BadTestSignature {\n fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n     let has_test_attr = attr::contains_name(&i.attrs, \"test\");\n \n-    fn has_test_signature(cx: &TestCtxt, i: &ast::Item) -> HasTestSignature {\n+    fn has_test_signature(_cx: &TestCtxt, i: &ast::Item) -> HasTestSignature {\n         let has_should_panic_attr = attr::contains_name(&i.attrs, \"should_panic\");\n         match i.node {\n             ast::ItemKind::Fn(ref decl, _, _, _, ref generics, _) => {\n@@ -351,15 +351,14 @@ fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n                     return No(BadTestSignature::NoArgumentsAllowed);\n                 }\n \n-                match (has_output, cx.features.termination_trait_test, has_should_panic_attr) {\n-                    (true, true, true) => No(BadTestSignature::ShouldPanicOnlyWithNoArgs),\n-                    (true, true, false) => if generics.is_parameterized() {\n+                match (has_output, has_should_panic_attr) {\n+                    (true, true) => No(BadTestSignature::ShouldPanicOnlyWithNoArgs),\n+                    (true, false) => if generics.is_parameterized() {\n                         No(BadTestSignature::WrongTypeSignature)\n                     } else {\n                         Yes\n                     },\n-                    (true, false, _) => No(BadTestSignature::WrongTypeSignature),\n-                    (false, _, _) => Yes\n+                    (false, _) => Yes\n                 }\n             }\n             _ => No(BadTestSignature::NotEvenAFunction),\n@@ -395,31 +394,12 @@ fn is_test_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n fn is_bench_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n     let has_bench_attr = attr::contains_name(&i.attrs, \"bench\");\n \n-    fn has_bench_signature(cx: &TestCtxt, i: &ast::Item) -> bool {\n+    fn has_bench_signature(_cx: &TestCtxt, i: &ast::Item) -> bool {\n         match i.node {\n-            ast::ItemKind::Fn(ref decl, _, _, _, ref generics, _) => {\n-                let input_cnt = decl.inputs.len();\n-\n-                // If the termination trait is active, the compiler will check that the output\n-                // type implements the `Termination` trait as `libtest` enforces that.\n-                let output_matches = if cx.features.termination_trait_test {\n-                    true\n-                } else {\n-                    let no_output = match decl.output {\n-                        ast::FunctionRetTy::Default(..) => true,\n-                        ast::FunctionRetTy::Ty(ref t) if t.node == ast::TyKind::Tup(vec![]) => true,\n-                        _ => false\n-                    };\n-                    let tparm_cnt = generics.params.iter()\n-                        .filter(|param| param.is_type_param())\n-                        .count();\n-\n-                    no_output && tparm_cnt == 0\n-                };\n-\n+            ast::ItemKind::Fn(ref decl, _, _, _, _, _) => {\n                 // NB: inadequate check, but we're running\n                 // well before resolve, can't get too deep.\n-                input_cnt == 1 && output_matches\n+                decl.inputs.len() == 1\n             }\n             _ => false\n         }\n@@ -430,13 +410,8 @@ fn is_bench_fn(cx: &TestCtxt, i: &ast::Item) -> bool {\n     if has_bench_attr && !has_bench_signature {\n         let diag = cx.span_diagnostic;\n \n-        if cx.features.termination_trait_test {\n-            diag.span_err(i.span, \"functions used as benches must have signature \\\n+        diag.span_err(i.span, \"functions used as benches must have signature \\\n                                    `fn(&mut Bencher) -> impl Termination`\");\n-        } else {\n-            diag.span_err(i.span, \"functions used as benches must have signature \\\n-                                   `fn(&mut Bencher) -> ()`\");\n-        }\n     }\n \n     has_bench_attr && has_bench_signature"}, {"sha": "13b4c0896e75c443d8fe5be74e26bc12296df0f9", "filename": "src/test/compile-fail/issue-39616.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fcompile-fail%2Fissue-39616.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fcompile-fail%2Fissue-39616.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-39616.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n fn foo(a: [0; 1]) {} //~ ERROR expected type, found `0`\n-//~| ERROR expected one of `->`, `where`, or `{`, found `]`\n+//~| ERROR expected one of `)`, `,`, `->`, `where`, or `{`, found `]`\n // FIXME(jseyfried): avoid emitting the second error (preexisting)\n \n fn main() {}"}, {"sha": "6361af7648258b5b8762640f6f74046294a816e0", "filename": "src/test/compile-fail/issue-43988.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fcompile-fail%2Fissue-43988.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fcompile-fail%2Fissue-43988.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-43988.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -34,6 +34,7 @@ fn main() {\n     #[repr]\n     let _y = \"123\";\n     //~^^ ERROR attribute should not be applied to a statement\n+    //~| WARN `repr` attribute must have a hint\n \n \n     fn foo() {}\n@@ -44,5 +45,5 @@ fn main() {\n \n     let _z = #[repr] 1;\n     //~^ ERROR attribute should not be applied to an expression\n-\n+    //~| WARN `repr` attribute must have a hint\n }"}, {"sha": "cf4fee0e515c9b522f47b791d8c78c6cdf8db8df", "filename": "src/test/run-pass/auxiliary/issue_38715.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Fissue_38715.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![allow(duplicate_macro_exports)]\n+\n #[macro_export]\n macro_rules! foo { ($i:ident) => {} }\n "}, {"sha": "b16cd3a421095424e3716a59e1e5f911a277aa99", "filename": "src/test/run-pass/auxiliary/two_macros_2.rs", "status": "renamed", "additions": 3, "deletions": 12, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftwo_macros_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftwo_macros_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fauxiliary%2Ftwo_macros_2.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -8,15 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: --test\n+macro_rules! macro_one { ($($t:tt)*) => ($($t)*) }\n \n-fn main() {}\n-\n-#[cfg(test)]\n-mod tests {\n-    #[test]\n-    fn it_works() -> Result<(), ()> {\n-    //~^ ERROR functions used as tests must have signature fn() -> ()\n-        Ok(())\n-    }\n-}\n+macro_rules! macro_two { ($($t:tt)*) => ($($t)*) }", "previous_filename": "src/test/compile-fail/feature-gate-termination_trait_test.rs"}, {"sha": "fc91ea870d51af8c2beb270d708f896f1fd829d9", "filename": "src/test/run-pass/mod_dir_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Frun-pass%2Fmod_dir_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Frun-pass%2Fmod_dir_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmod_dir_path.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -20,12 +20,12 @@ pub fn main() {\n \n     #[path = \"auxiliary\"]\n     mod foo {\n-        mod two_macros;\n+        mod two_macros_2;\n     }\n \n     #[path = \"auxiliary\"]\n     mod bar {\n-        macro_rules! m { () => { mod two_macros; } }\n+        macro_rules! m { () => { mod two_macros_2; } }\n         m!();\n     }\n }"}, {"sha": "9f5845f6d77b06091bc70b892325908af0bfb742", "filename": "src/test/run-pass/trait-object-auto-dedup.rs", "status": "added", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Frun-pass%2Ftrait-object-auto-dedup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Frun-pass%2Ftrait-object-auto-dedup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-object-auto-dedup.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -0,0 +1,53 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that duplicate auto trait bounds in trait objects don't create new types.\n+#[allow(unused_assignments)]\n+\n+use std::marker::Send as SendAlias;\n+\n+// A dummy trait for the non-auto trait.\n+trait Trait {}\n+\n+// A dummy struct to implement Trait, Send, and .\n+struct Struct;\n+\n+impl Trait for Struct {}\n+\n+// These three functions should be equivalent.\n+fn takes_dyn_trait_send(_: Box<dyn Trait + Send>) {}\n+fn takes_dyn_trait_send_send(_: Box<dyn Trait + Send + Send>) {}\n+fn takes_dyn_trait_send_sendalias(_: Box<dyn Trait + Send + SendAlias>) {}\n+\n+impl dyn Trait + Send + Send {\n+    fn do_nothing(&self) {}\n+}\n+\n+fn main() {\n+    // 1. Moving into a variable with more Sends and back.\n+    let mut dyn_trait_send = Box::new(Struct) as Box<dyn Trait + Send>;\n+    let dyn_trait_send_send: Box<dyn Trait + Send + Send> = dyn_trait_send;\n+    dyn_trait_send = dyn_trait_send_send;\n+\n+    // 2. Calling methods with different number of Sends.\n+    let dyn_trait_send = Box::new(Struct) as Box<dyn Trait + Send>;\n+    takes_dyn_trait_send_send(dyn_trait_send);\n+\n+    let dyn_trait_send_send = Box::new(Struct) as Box<dyn Trait + Send + Send>;\n+    takes_dyn_trait_send(dyn_trait_send_send);\n+\n+    // 3. Aliases to the trait are transparent.\n+    let dyn_trait_send = Box::new(Struct) as Box<dyn Trait + Send>;\n+    takes_dyn_trait_send_sendalias(dyn_trait_send);\n+\n+    // 4. Calling an impl that duplicates an auto trait.\n+    let dyn_trait_send = Box::new(Struct) as Box<dyn Trait + Send>;\n+    dyn_trait_send.do_nothing();\n+}"}, {"sha": "d6bc275b57a6a2e05420c996eea31b437362e0cf", "filename": "src/test/rustdoc-ui/intra-links-warning.rs", "status": "modified", "additions": 41, "deletions": 3, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -10,10 +10,48 @@\n \n // compile-pass\n \n-//! Test with [Foo::baz], [Bar::foo], ...\n-//!\n-//! and [Uniooon::X].\n+       //! Test with [Foo::baz], [Bar::foo], ...\n+     //! , [Uniooon::X] and [Qux::Z].\n+       //!\n+      //! , [Uniooon::X] and [Qux::Z].\n \n+       /// [Qux:Y]\n pub struct Foo {\n     pub bar: usize,\n }\n+\n+/// Foo\n+/// bar [BarA] bar\n+/// baz\n+pub fn a() {}\n+\n+/**\n+ * Foo\n+ * bar [BarB] bar\n+ * baz\n+ */\n+pub fn b() {}\n+\n+/** Foo\n+\n+bar [BarC] bar\n+baz\n+\n+    let bar_c_1 = 0;\n+    let bar_c_2 = 0;\n+    let g = [bar_c_1];\n+    let h = g[bar_c_2];\n+\n+*/\n+pub fn c() {}\n+\n+#[doc = \"Foo\\nbar [BarD] bar\\nbaz\"]\n+pub fn d() {}\n+\n+macro_rules! f {\n+    ($f:expr) => {\n+        #[doc = $f]\n+        pub fn f() {}\n+    }\n+}\n+f!(\"Foo\\nbar [BarF] bar\\nbaz\");"}, {"sha": "52adba5679fe0eb67a2996c57d958fc280694c05", "filename": "src/test/rustdoc-ui/intra-links-warning.stderr", "status": "modified", "additions": 90, "deletions": 24, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-ui%2Fintra-links-warning.stderr?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -1,39 +1,105 @@\n-warning: [Foo::baz] cannot be resolved, ignoring it...\n-  --> $DIR/intra-links-warning.rs:13:1\n+warning: `[Foo::baz]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:13:23\n    |\n-13 | / //! Test with [Foo::baz], [Bar::foo], ...\n-14 | | //!\n-15 | | //! and [Uniooon::X].\n-   | |_____________________^\n+13 |        //! Test with [Foo::baz], [Bar::foo], ...\n+   |                       ^^^^^^^^ cannot be resolved, ignoring\n+\n+warning: `[Bar::foo]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:13:35\n+   |\n+13 |        //! Test with [Foo::baz], [Bar::foo], ...\n+   |                                   ^^^^^^^^ cannot be resolved, ignoring\n+\n+warning: `[Uniooon::X]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:14:13\n+   |\n+14 |      //! , [Uniooon::X] and [Qux::Z].\n+   |             ^^^^^^^^^^ cannot be resolved, ignoring\n+\n+warning: `[Qux::Z]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:14:30\n+   |\n+14 |      //! , [Uniooon::X] and [Qux::Z].\n+   |                              ^^^^^^ cannot be resolved, ignoring\n+\n+warning: `[Uniooon::X]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:16:14\n+   |\n+16 |       //! , [Uniooon::X] and [Qux::Z].\n+   |              ^^^^^^^^^^ cannot be resolved, ignoring\n+\n+warning: `[Qux::Z]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:16:31\n+   |\n+16 |       //! , [Uniooon::X] and [Qux::Z].\n+   |                               ^^^^^^ cannot be resolved, ignoring\n+\n+warning: `[Qux:Y]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:18:13\n+   |\n+18 |        /// [Qux:Y]\n+   |             ^^^^^ cannot be resolved, ignoring\n+\n+warning: `[BarA]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:24:10\n+   |\n+24 | /// bar [BarA] bar\n+   |          ^^^^ cannot be resolved, ignoring\n+\n+warning: `[BarB]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:28:1\n+   |\n+28 | / /**\n+29 | |  * Foo\n+30 | |  * bar [BarB] bar\n+31 | |  * baz\n+32 | |  */\n+   | |___^\n+   |\n+   = note: the link appears in this line:\n+           \n+            bar [BarB] bar\n+                 ^^^^\n+\n+warning: `[BarC]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:35:1\n+   |\n+35 | / /** Foo\n+36 | |\n+37 | | bar [BarC] bar\n+38 | | baz\n+...  |\n+44 | |\n+45 | | */\n+   | |__^\n    |\n    = note: the link appears in this line:\n            \n-            Test with [Foo::baz], [Bar::foo], ...\n-                       ^^^^^^^^\n+           bar [BarC] bar\n+                ^^^^\n \n-warning: [Bar::foo] cannot be resolved, ignoring it...\n-  --> $DIR/intra-links-warning.rs:13:1\n+warning: `[BarD]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:48:1\n    |\n-13 | / //! Test with [Foo::baz], [Bar::foo], ...\n-14 | | //!\n-15 | | //! and [Uniooon::X].\n-   | |_____________________^\n+48 | #[doc = \"Foo/nbar [BarD] bar/nbaz\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: the link appears in this line:\n            \n-            Test with [Foo::baz], [Bar::foo], ...\n-                                   ^^^^^^^^\n+           bar [BarD] bar\n+                ^^^^\n \n-warning: [Uniooon::X] cannot be resolved, ignoring it...\n-  --> $DIR/intra-links-warning.rs:13:1\n+warning: `[BarF]` cannot be resolved, ignoring it...\n+  --> $DIR/intra-links-warning.rs:53:9\n    |\n-13 | / //! Test with [Foo::baz], [Bar::foo], ...\n-14 | | //!\n-15 | | //! and [Uniooon::X].\n-   | |_____________________^\n+53 |         #[doc = $f]\n+   |         ^^^^^^^^^^^\n+...\n+57 | f!(\"Foo/nbar [BarF] bar/nbaz\");\n+   | ------------------------------- in this macro invocation\n    |\n    = note: the link appears in this line:\n            \n-            and [Uniooon::X].\n-                 ^^^^^^^^^^\n+           bar [BarF] bar\n+                ^^^^\n "}, {"sha": "7d71499d3186b2839158eb63b3b01cf9971236e2", "filename": "src/test/ui/error-codes/E0423.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ferror-codes%2FE0423.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ferror-codes%2FE0423.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -13,3 +13,22 @@ fn main () {\n \n     let f = Foo(); //~ ERROR E0423\n }\n+\n+fn bar() {\n+    struct S { x: i32, y: i32 }\n+    #[derive(PartialEq)]\n+    struct T {}\n+\n+    if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n+    //~^ ERROR E0423\n+    //~|  expected type, found `1`\n+    if T {} == T {} { println!(\"Ok\"); }\n+    //~^ ERROR E0423\n+    //~| ERROR expected expression, found `==`\n+}\n+\n+fn foo() {\n+    for _ in std::ops::Range { start: 0, end: 10 } {}\n+    //~^ ERROR E0423\n+    //~| ERROR expected type, found `0`\n+}"}, {"sha": "477c698ac9af1be647489fab6eac8f67d8fae0ad", "filename": "src/test/ui/error-codes/E0423.stderr", "status": "modified", "additions": 41, "deletions": 2, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0423.stderr?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -1,9 +1,48 @@\n+error: expected type, found `1`\n+  --> $DIR/E0423.rs:22:39\n+   |\n+LL |     if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n+   |                                       ^ expecting a type here because of type ascription\n+\n+error: expected expression, found `==`\n+  --> $DIR/E0423.rs:25:13\n+   |\n+LL |     if T {} == T {} { println!(\"Ok\"); }\n+   |             ^^ expected expression\n+\n+error: expected type, found `0`\n+  --> $DIR/E0423.rs:31:39\n+   |\n+LL |     for _ in std::ops::Range { start: 0, end: 10 } {}\n+   |                                       ^ expecting a type here because of type ascription\n+\n error[E0423]: expected function, found struct `Foo`\n   --> $DIR/E0423.rs:14:13\n    |\n LL |     let f = Foo(); //~ ERROR E0423\n-   |             ^^^ did you mean `Foo { /* fields */ }`?\n+   |             ^^^\n+   |             |\n+   |             did you mean `foo`?\n+   |             did you mean `Foo { /* fields */ }`?\n+\n+error[E0423]: expected value, found struct `S`\n+  --> $DIR/E0423.rs:22:32\n+   |\n+LL |     if let S { x: _x, y: 2 } = S { x: 1, y: 2 } { println!(\"Ok\"); }\n+   |                                ^ did you mean `(S { /* fields */ })`?\n+\n+error[E0423]: expected value, found struct `T`\n+  --> $DIR/E0423.rs:25:8\n+   |\n+LL |     if T {} == T {} { println!(\"Ok\"); }\n+   |        ^ did you mean `(T { /* fields */ })`?\n+\n+error[E0423]: expected value, found struct `std::ops::Range`\n+  --> $DIR/E0423.rs:31:14\n+   |\n+LL |     for _ in std::ops::Range { start: 0, end: 10 } {}\n+   |              ^^^^^^^^^^^^^^^ did you mean `(std::ops::Range { /* fields */ })`?\n \n-error: aborting due to previous error\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0423`."}, {"sha": "db50b9514430c581908a99c5ef87b074bec89abe", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -59,7 +59,9 @@\n #![start                     = \"x4300\"] //~ WARN unused attribute\n // see issue-43106-gating-of-test.rs for crate-level; but non crate-level is below at \"4200\"\n // see issue-43106-gating-of-bench.rs for crate-level; but non crate-level is below at \"4100\"\n-#![repr                       = \"3900\"] //~ WARN unused attribute\n+#![repr                       = \"3900\"]\n+//~^ WARN unused attribute\n+//~| WARN `repr` attribute isn't configurable with a literal\n #![path                       = \"3800\"] //~ WARN unused attribute\n #![abi                        = \"3700\"] //~ WARN unused attribute\n #![automatically_derived      = \"3600\"] //~ WARN unused attribute\n@@ -309,20 +311,25 @@ mod bench {\n \n #[repr = \"3900\"]\n //~^ WARN unused attribute\n+//~| WARN `repr` attribute isn't configurable with a literal\n mod repr {\n     mod inner { #![repr=\"3900\"] }\n     //~^ WARN unused attribute\n+    //~| WARN `repr` attribute isn't configurable with a literal\n \n     #[repr = \"3900\"] fn f() { }\n     //~^ WARN unused attribute\n+    //~| WARN `repr` attribute isn't configurable with a literal\n \n     struct S;\n \n     #[repr = \"3900\"] type T = S;\n     //~^ WARN unused attribute\n+    //~| WARN `repr` attribute isn't configurable with a literal\n \n     #[repr = \"3900\"] impl S { }\n     //~^ WARN unused attribute\n+    //~| WARN `repr` attribute isn't configurable with a literal\n }\n \n #[path = \"3800\"]"}, {"sha": "f351a9e69d01135e018894a56a0a840c53e67a0a", "filename": "src/test/ui/feature-gate/issue-43106-gating-of-builtin-attrs.stderr", "status": "modified", "additions": 255, "deletions": 200, "changes": 455, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gate%2Fissue-43106-gating-of-builtin-attrs.stderr?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -1,11 +1,11 @@\n warning: macro_escape is a deprecated synonym for macro_use\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:493:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:500:1\n    |\n LL | #[macro_escape]\n    | ^^^^^^^^^^^^^^^\n \n warning: macro_escape is a deprecated synonym for macro_use\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:496:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:503:17\n    |\n LL |     mod inner { #![macro_escape] }\n    |                 ^^^^^^^^^^^^^^^^\n@@ -43,151 +43,206 @@ LL | #![deny                        (x5100)] //~ WARN unknown lint: `x5100`\n    |                                 ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:112:8\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:114:8\n    |\n LL | #[warn(x5400)]\n    |        ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:115:25\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:117:25\n    |\n LL |     mod inner { #![warn(x5400)] }\n    |                         ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:118:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:120:12\n    |\n LL |     #[warn(x5400)] fn f() { }\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:121:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:123:12\n    |\n LL |     #[warn(x5400)] struct S;\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:124:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:126:12\n    |\n LL |     #[warn(x5400)] type T = S;\n    |            ^^^^^\n \n warning: unknown lint: `x5400`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:127:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:129:12\n    |\n LL |     #[warn(x5400)] impl S { }\n    |            ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:131:9\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:133:9\n    |\n LL | #[allow(x5300)]\n    |         ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:134:26\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:136:26\n    |\n LL |     mod inner { #![allow(x5300)] }\n    |                          ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:137:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:139:13\n    |\n LL |     #[allow(x5300)] fn f() { }\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:140:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:142:13\n    |\n LL |     #[allow(x5300)] struct S;\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:143:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:145:13\n    |\n LL |     #[allow(x5300)] type T = S;\n    |             ^^^^^\n \n warning: unknown lint: `x5300`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:146:13\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:148:13\n    |\n LL |     #[allow(x5300)] impl S { }\n    |             ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:150:10\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:152:10\n    |\n LL | #[forbid(x5200)]\n    |          ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:153:27\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:155:27\n    |\n LL |     mod inner { #![forbid(x5200)] }\n    |                           ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:156:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:158:14\n    |\n LL |     #[forbid(x5200)] fn f() { }\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:159:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:161:14\n    |\n LL |     #[forbid(x5200)] struct S;\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:162:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:164:14\n    |\n LL |     #[forbid(x5200)] type T = S;\n    |              ^^^^^\n \n warning: unknown lint: `x5200`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:165:14\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:167:14\n    |\n LL |     #[forbid(x5200)] impl S { }\n    |              ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:169:8\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:171:8\n    |\n LL | #[deny(x5100)]\n    |        ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:172:25\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:174:25\n    |\n LL |     mod inner { #![deny(x5100)] }\n    |                         ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:175:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:177:12\n    |\n LL |     #[deny(x5100)] fn f() { }\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:178:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:180:12\n    |\n LL |     #[deny(x5100)] struct S;\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:181:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:183:12\n    |\n LL |     #[deny(x5100)] type T = S;\n    |            ^^^^^\n \n warning: unknown lint: `x5100`\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:184:12\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:186:12\n    |\n LL |     #[deny(x5100)] impl S { }\n    |            ^^^^^\n \n+warning: `repr` attribute isn't configurable with a literal\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:316:17\n+   |\n+LL |     mod inner { #![repr=\"3900\"] }\n+   |                 ^^^^^^^^^^^^^^^ needs a hint\n+   |\n+   = note: #[warn(bad_repr)] on by default\n+   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n+   = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n+\n+warning: `repr` attribute isn't configurable with a literal\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:320:5\n+   |\n+LL |     #[repr = \"3900\"] fn f() { }\n+   |     ^^^^^^^^^^^^^^^^ needs a hint\n+   |\n+   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n+   = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n+\n+warning: `repr` attribute isn't configurable with a literal\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:326:5\n+   |\n+LL |     #[repr = \"3900\"] type T = S;\n+   |     ^^^^^^^^^^^^^^^^ needs a hint\n+   |\n+   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n+   = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n+\n+warning: `repr` attribute isn't configurable with a literal\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:330:5\n+   |\n+LL |     #[repr = \"3900\"] impl S { }\n+   |     ^^^^^^^^^^^^^^^^ needs a hint\n+   |\n+   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n+   = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n+\n+warning: `repr` attribute isn't configurable with a literal\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:312:1\n+   |\n+LL | #[repr = \"3900\"]\n+   | ^^^^^^^^^^^^^^^^ needs a hint\n+   |\n+   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n+   = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n+\n+warning: `repr` attribute isn't configurable with a literal\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:62:1\n+   |\n+LL | #![repr                       = \"3900\"]\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ needs a hint\n+   |\n+   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n+   = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n+\n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:192:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:194:5\n    |\n LL |     #[macro_use] fn f() { }\n    |     ^^^^^^^^^^^^\n@@ -199,277 +254,277 @@ LL | #![warn(unused_attributes, unknown_lints)]\n    |         ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:195:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:197:5\n    |\n LL |     #[macro_use] struct S;\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:198:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:200:5\n    |\n LL |     #[macro_use] type T = S;\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:201:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:203:5\n    |\n LL |     #[macro_use] impl S { }\n    |     ^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:208:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:210:17\n    |\n LL |     mod inner { #![macro_export=\"4800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:211:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:213:5\n    |\n LL |     #[macro_export = \"4800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:214:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:216:5\n    |\n LL |     #[macro_export = \"4800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:217:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:219:5\n    |\n LL |     #[macro_export = \"4800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:220:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:222:5\n    |\n LL |     #[macro_export = \"4800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:205:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:207:1\n    |\n LL | #[macro_export = \"4800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:227:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:229:17\n    |\n LL |     mod inner { #![plugin_registrar=\"4700\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:232:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:234:5\n    |\n LL |     #[plugin_registrar = \"4700\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:235:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:237:5\n    |\n LL |     #[plugin_registrar = \"4700\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:238:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:240:5\n    |\n LL |     #[plugin_registrar = \"4700\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:224:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:226:1\n    |\n LL | #[plugin_registrar = \"4700\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:245:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:247:17\n    |\n LL |     mod inner { #![main=\"4300\"] }\n    |                 ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:250:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:252:5\n    |\n LL |     #[main = \"4400\"] struct S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:253:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:255:5\n    |\n LL |     #[main = \"4400\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:256:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:258:5\n    |\n LL |     #[main = \"4400\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:242:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:244:1\n    |\n LL | #[main = \"4400\"]\n    | ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:263:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:265:17\n    |\n LL |     mod inner { #![start=\"4300\"] }\n    |                 ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:268:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:270:5\n    |\n LL |     #[start = \"4300\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:271:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:273:5\n    |\n LL |     #[start = \"4300\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:274:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:276:5\n    |\n LL |     #[start = \"4300\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:260:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:262:1\n    |\n LL | #[start = \"4300\"]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:313:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:316:17\n    |\n LL |     mod inner { #![repr=\"3900\"] }\n    |                 ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:316:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:320:5\n    |\n LL |     #[repr = \"3900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:321:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:326:5\n    |\n LL |     #[repr = \"3900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:324:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:330:5\n    |\n LL |     #[repr = \"3900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:310:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:312:1\n    |\n LL | #[repr = \"3900\"]\n    | ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:332:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:339:5\n    |\n LL |     #[path = \"3800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:335:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:342:5\n    |\n LL |     #[path = \"3800\"]  struct S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:338:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:345:5\n    |\n LL |     #[path = \"3800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:341:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:348:5\n    |\n LL |     #[path = \"3800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:348:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:355:17\n    |\n LL |     mod inner { #![abi=\"3700\"] }\n    |                 ^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:351:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:358:5\n    |\n LL |     #[abi = \"3700\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:354:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:361:5\n    |\n LL |     #[abi = \"3700\"] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:357:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:364:5\n    |\n LL |     #[abi = \"3700\"] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:360:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:367:5\n    |\n LL |     #[abi = \"3700\"] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:345:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:352:1\n    |\n LL | #[abi = \"3700\"]\n    | ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:367:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:374:17\n    |\n LL |     mod inner { #![automatically_derived=\"3600\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:370:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:377:5\n    |\n LL |     #[automatically_derived = \"3600\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:373:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:380:5\n    |\n LL |     #[automatically_derived = \"3600\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:376:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:383:5\n    |\n LL |     #[automatically_derived = \"3600\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:379:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:386:5\n    |\n LL |     #[automatically_derived = \"3600\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:364:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:371:1\n    |\n LL | #[automatically_derived = \"3600\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: function is marked #[no_mangle], but not exported\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:387:27\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:394:27\n    |\n LL |     #[no_mangle = \"3500\"] fn f() { }\n    |                           -^^^^^^^^^\n@@ -479,709 +534,709 @@ LL |     #[no_mangle = \"3500\"] fn f() { }\n    = note: #[warn(private_no_mangle_fns)] on by default\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:400:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:407:17\n    |\n LL |     mod inner { #![no_link=\"3400\"] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:403:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:410:5\n    |\n LL |     #[no_link = \"3400\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:406:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:413:5\n    |\n LL |     #[no_link = \"3400\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:409:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:416:5\n    |\n LL |     #[no_link = \"3400\"]type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:412:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:419:5\n    |\n LL |     #[no_link = \"3400\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:397:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:404:1\n    |\n LL | #[no_link = \"3400\"]\n    | ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:419:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:426:17\n    |\n LL |     mod inner { #![should_panic=\"3200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:422:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:429:5\n    |\n LL |     #[should_panic = \"3200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:425:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:432:5\n    |\n LL |     #[should_panic = \"3200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:428:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:435:5\n    |\n LL |     #[should_panic = \"3200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:431:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:438:5\n    |\n LL |     #[should_panic = \"3200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:416:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:423:1\n    |\n LL | #[should_panic = \"3200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:438:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:445:17\n    |\n LL |     mod inner { #![ignore=\"3100\"] }\n    |                 ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:441:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:448:5\n    |\n LL |     #[ignore = \"3100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:444:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:451:5\n    |\n LL |     #[ignore = \"3100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:447:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:454:5\n    |\n LL |     #[ignore = \"3100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:450:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:457:5\n    |\n LL |     #[ignore = \"3100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:435:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:442:1\n    |\n LL | #[ignore = \"3100\"]\n    | ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:457:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:464:17\n    |\n LL |     mod inner { #![no_implicit_prelude=\"3000\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:460:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:467:5\n    |\n LL |     #[no_implicit_prelude = \"3000\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:463:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:470:5\n    |\n LL |     #[no_implicit_prelude = \"3000\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:466:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:473:5\n    |\n LL |     #[no_implicit_prelude = \"3000\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:469:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:476:5\n    |\n LL |     #[no_implicit_prelude = \"3000\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:454:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:461:1\n    |\n LL | #[no_implicit_prelude = \"3000\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:476:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:483:17\n    |\n LL |     mod inner { #![reexport_test_harness_main=\"2900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:479:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:486:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:482:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:489:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:485:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:492:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:488:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:495:5\n    |\n LL |     #[reexport_test_harness_main = \"2900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:473:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:480:1\n    |\n LL | #[reexport_test_harness_main = \"2900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:499:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:506:5\n    |\n LL |     #[macro_escape] fn f() { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:502:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:509:5\n    |\n LL |     #[macro_escape] struct S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:505:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:512:5\n    |\n LL |     #[macro_escape] type T = S;\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:508:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:515:5\n    |\n LL |     #[macro_escape] impl S { }\n    |     ^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:516:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:523:17\n    |\n LL |     mod inner { #![no_std=\"2600\"] }\n    |                 ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:516:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:523:17\n    |\n LL |     mod inner { #![no_std=\"2600\"] }\n    |                 ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:520:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:527:5\n    |\n LL |     #[no_std = \"2600\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:520:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:527:5\n    |\n LL |     #[no_std = \"2600\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:524:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:531:5\n    |\n LL |     #[no_std = \"2600\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:524:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:531:5\n    |\n LL |     #[no_std = \"2600\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:528:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:535:5\n    |\n LL |     #[no_std = \"2600\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:528:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:535:5\n    |\n LL |     #[no_std = \"2600\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:532:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:539:5\n    |\n LL |     #[no_std = \"2600\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:532:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:539:5\n    |\n LL |     #[no_std = \"2600\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:512:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:519:1\n    |\n LL | #[no_std = \"2600\"]\n    | ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:512:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:519:1\n    |\n LL | #[no_std = \"2600\"]\n    | ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:671:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:678:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:671:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:678:17\n    |\n LL |     mod inner { #![crate_name=\"0900\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:675:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:682:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:675:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:682:5\n    |\n LL |     #[crate_name = \"0900\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:679:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:686:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:679:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:686:5\n    |\n LL |     #[crate_name = \"0900\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:683:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:690:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:683:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:690:5\n    |\n LL |     #[crate_name = \"0900\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:687:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:694:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:687:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:694:5\n    |\n LL |     #[crate_name = \"0900\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:667:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:674:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:667:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:674:1\n    |\n LL | #[crate_name = \"0900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:696:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:703:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:696:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:703:17\n    |\n LL |     mod inner { #![crate_type=\"0800\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:700:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:707:5\n    |\n LL |     #[crate_type = \"0800\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:704:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:711:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:704:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:711:5\n    |\n LL |     #[crate_type = \"0800\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:708:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:715:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:708:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:715:5\n    |\n LL |     #[crate_type = \"0800\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:712:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:719:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:712:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:719:5\n    |\n LL |     #[crate_type = \"0800\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:692:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:699:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:692:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:699:1\n    |\n LL | #[crate_type = \"0800\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:721:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:728:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:721:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:728:17\n    |\n LL |     mod inner { #![feature(x0600)] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:725:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:732:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:725:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:732:5\n    |\n LL |     #[feature(x0600)] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:729:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:736:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:729:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:736:5\n    |\n LL |     #[feature(x0600)] struct S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:733:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:740:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:733:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:740:5\n    |\n LL |     #[feature(x0600)] type T = S;\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:737:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:744:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:737:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:744:5\n    |\n LL |     #[feature(x0600)] impl S { }\n    |     ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:717:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:724:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:717:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:724:1\n    |\n LL | #[feature(x0600)]\n    | ^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:747:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:754:17\n    |\n LL |     mod inner { #![no_main=\"0400\"] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:747:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:754:17\n    |\n LL |     mod inner { #![no_main=\"0400\"] }\n    |                 ^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:751:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:758:5\n    |\n LL |     #[no_main = \"0400\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:751:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:758:5\n    |\n LL |     #[no_main = \"0400\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:755:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:762:5\n    |\n LL |     #[no_main = \"0400\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:755:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:762:5\n    |\n LL |     #[no_main = \"0400\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:759:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:766:5\n    |\n LL |     #[no_main = \"0400\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:759:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:766:5\n    |\n LL |     #[no_main = \"0400\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:763:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:5\n    |\n LL |     #[no_main = \"0400\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:763:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:770:5\n    |\n LL |     #[no_main = \"0400\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:743:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:750:1\n    |\n LL | #[no_main = \"0400\"]\n    | ^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:743:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:750:1\n    |\n LL | #[no_main = \"0400\"]\n    | ^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:785:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:792:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:785:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:792:17\n    |\n LL |     mod inner { #![recursion_limit=\"0200\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:789:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:796:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:789:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:796:5\n    |\n LL |     #[recursion_limit=\"0200\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:793:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:800:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:793:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:800:5\n    |\n LL |     #[recursion_limit=\"0200\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:797:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:804:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:797:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:804:5\n    |\n LL |     #[recursion_limit=\"0200\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:801:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:808:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:801:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:808:5\n    |\n LL |     #[recursion_limit=\"0200\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:781:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:788:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:781:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:788:1\n    |\n LL | #[recursion_limit=\"0200\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:810:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:817:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be in the root module\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:810:17\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:817:17\n    |\n LL |     mod inner { #![type_length_limit=\"0100\"] }\n    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:814:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:821:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:814:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:821:5\n    |\n LL |     #[type_length_limit=\"0100\"] fn f() { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:818:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:825:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:818:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:825:5\n    |\n LL |     #[type_length_limit=\"0100\"] struct S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:822:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:829:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:822:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:829:5\n    |\n LL |     #[type_length_limit=\"0100\"] type T = S;\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:826:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:833:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:826:5\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:833:5\n    |\n LL |     #[type_length_limit=\"0100\"] impl S { }\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:806:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:813:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: crate-level attribute should be an inner attribute: add an exclamation mark: #![foo]\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:806:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:813:1\n    |\n LL | #[type_length_limit=\"0100\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -1213,53 +1268,53 @@ LL | #![start                     = \"x4300\"] //~ WARN unused attribute\n warning: unused attribute\n   --> $DIR/issue-43106-gating-of-builtin-attrs.rs:62:1\n    |\n-LL | #![repr                       = \"3900\"] //~ WARN unused attribute\n+LL | #![repr                       = \"3900\"]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:63:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:65:1\n    |\n LL | #![path                       = \"3800\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:64:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:66:1\n    |\n LL | #![abi                        = \"3700\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:65:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:67:1\n    |\n LL | #![automatically_derived      = \"3600\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:67:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:69:1\n    |\n LL | #![no_link                    = \"3400\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:69:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:71:1\n    |\n LL | #![should_panic               = \"3200\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:70:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:72:1\n    |\n LL | #![ignore                     = \"3100\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n warning: unused attribute\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:76:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:78:1\n    |\n LL | #![proc_macro_derive          = \"2500\"] //~ WARN unused attribute\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: compilation successful\n-  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:837:1\n+  --> $DIR/issue-43106-gating-of-builtin-attrs.rs:844:1\n    |\n LL | / fn main() { //~ ERROR compilation successful\n LL | |     println!(\"Hello World\");"}, {"sha": "552653c21bad61724113cd2e3d6d38cee8653183", "filename": "src/test/ui/issue-38715.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Fissue-38715.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Fissue-38715.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-38715.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[macro_export]\n+macro_rules! foo { ($i:ident) => {} }\n+\n+#[macro_export]\n+macro_rules! foo { () => {} } //~ ERROR a macro named `foo` has already been exported\n+                              //~| WARN this was previously accepted"}, {"sha": "a0dbcbd18c67336ab4e81fea35f0f3709554d6a7", "filename": "src/test/ui/issue-38715.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Fissue-38715.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Fissue-38715.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-38715.stderr?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -0,0 +1,22 @@\n+error: a macro named `foo` has already been exported\n+  --> $DIR/issue-38715.rs:15:1\n+   |\n+LL | macro_rules! foo { () => {} } //~ ERROR a macro named `foo` has already been exported\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `foo` already exported\n+   |\n+   = note: #[deny(duplicate_macro_exports)] on by default\n+   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in the 2018 edition!\n+   = note: for more information, see issue #35896 <https://github.com/rust-lang/rust/issues/35896>\n+note: previous macro export is now shadowed\n+  --> $DIR/issue-38715.rs:12:1\n+   |\n+LL | macro_rules! foo { ($i:ident) => {} }\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error[E0601]: `main` function not found in crate `issue_38715`\n+   |\n+   = note: consider adding a `main` function to `$DIR/issue-38715.rs`\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0601`."}, {"sha": "24186d94acce966c087ce5c3d65b41709d55a3de", "filename": "src/test/ui/resolve/token-error-correct-3.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftoken-error-correct-3.stderr?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -10,11 +10,11 @@ note: unclosed delimiter\n LL |             callback(path.as_ref(); //~ ERROR expected one of\n    |                     ^\n \n-error: expected one of `,`, `.`, `?`, or an operator, found `;`\n+error: expected one of `)`, `,`, `.`, `?`, or an operator, found `;`\n   --> $DIR/token-error-correct-3.rs:24:35\n    |\n LL |             callback(path.as_ref(); //~ ERROR expected one of\n-   |                                   ^ expected one of `,`, `.`, `?`, or an operator here\n+   |                                   ^ expected one of `)`, `,`, `.`, `?`, or an operator here\n \n error: expected one of `.`, `;`, `?`, `}`, or an operator, found `)`\n   --> $DIR/token-error-correct-3.rs:30:9"}, {"sha": "a0b2784214ae95e0fcbb12523f62fdd53eadf78d", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-in-test-should-panic.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test-should-panic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test-should-panic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test-should-panic.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -10,7 +10,6 @@\n \n // compile-flags: --test\n \n-#![feature(termination_trait_test)]\n #![feature(test)]\n \n extern crate test;"}, {"sha": "bfdcf01c325f709f0678be458f945313398df750", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-in-test-should-panic.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test-should-panic.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test-should-panic.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test-should-panic.stderr?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -1,5 +1,5 @@\n error: functions using `#[should_panic]` must return `()`\n-  --> $DIR/termination-trait-in-test-should-panic.rs:22:1\n+  --> $DIR/termination-trait-in-test-should-panic.rs:21:1\n    |\n LL | / fn not_a_num() -> Result<(), ParseIntError> {\n LL | |     //~^ ERROR functions using `#[should_panic]` must return `()`"}, {"sha": "0561b12221d1a535149f260261224948b99e64c9", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-in-test.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-in-test.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -11,7 +11,6 @@\n // compile-flags: --test\n // run-pass\n \n-#![feature(termination_trait_test)]\n #![feature(test)]\n \n extern crate test;"}, {"sha": "6153d840c8a7dc633c4125233cbb5a358c40a602", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -10,8 +10,6 @@\n \n // compile-flags: --test\n \n-#![feature(termination_trait_test)]\n-\n use std::num::ParseIntError;\n \n #[test]"}, {"sha": "0972a0994fc0d38261b8abf776066f5e0f47399f", "filename": "src/test/ui/rfc-1937-termination-trait/termination-trait-test-wrong-type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frfc-1937-termination-trait%2Ftermination-trait-test-wrong-type.stderr?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `main` has invalid return type `std::result::Result<f32, std::num::ParseIntError>`\n-  --> $DIR/termination-trait-test-wrong-type.rs:18:1\n+  --> $DIR/termination-trait-test-wrong-type.rs:16:1\n    |\n LL | / fn can_parse_zero_as_f32() -> Result<f32, ParseIntError> { //~ ERROR\n LL | |     \"0\".parse()"}, {"sha": "350a2262391b5da92dffaf36293e42e46078cde1", "filename": "src/test/ui/similar-tokens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Fsimilar-tokens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Fsimilar-tokens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimilar-tokens.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -14,6 +14,6 @@ mod x {\n }\n \n // `.` is similar to `,` so list parsing should continue to closing `}`\n-use x::{A. B}; //~ ERROR expected one of `,`, `::`, or `as`, found `.`\n+use x::{A. B}; //~ ERROR expected one of `,`, `::`, `as`, or `}`, found `.`\n \n fn main() {}"}, {"sha": "90acc56cbc99964504da56f29db676405d3c41a5", "filename": "src/test/ui/similar-tokens.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Fsimilar-tokens.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Fsimilar-tokens.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimilar-tokens.stderr?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -1,8 +1,8 @@\n-error: expected one of `,`, `::`, or `as`, found `.`\n+error: expected one of `,`, `::`, `as`, or `}`, found `.`\n   --> $DIR/similar-tokens.rs:17:10\n    |\n-LL | use x::{A. B}; //~ ERROR expected one of `,`, `::`, or `as`, found `.`\n-   |          ^ expected one of `,`, `::`, or `as` here\n+LL | use x::{A. B}; //~ ERROR expected one of `,`, `::`, `as`, or `}`, found `.`\n+   |          ^ expected one of `,`, `::`, `as`, or `}` here\n \n error: aborting due to previous error\n "}, {"sha": "312f60202c6c254dad35ac423e8fe56e6fb33e08", "filename": "src/test/ui/suggestions/repr.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Fsuggestions%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Fsuggestions%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frepr.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+#[repr]\n+//^ WARN `repr` attribute must have a hint\n+struct _A {}\n+\n+#[repr = \"B\"]\n+//^ WARN `repr` attribute isn't configurable with a literal\n+struct _B {}\n+\n+#[repr = \"C\"]\n+//^ WARN `repr` attribute isn't configurable with a literal\n+struct _C {}\n+\n+#[repr(C)]\n+struct _D {}\n+\n+fn main() {}"}, {"sha": "7a99d8c04488f2c38c8d3a79c1ea6dfdf00bf879", "filename": "src/test/ui/suggestions/repr.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Fsuggestions%2Frepr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Fsuggestions%2Frepr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Frepr.stderr?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -0,0 +1,25 @@\n+warning: `repr` attribute must have a hint\n+  --> $DIR/repr.rs:13:1\n+   |\n+LL | #[repr]\n+   | ^^^^^^^ needs a hint\n+   |\n+   = note: #[warn(bad_repr)] on by default\n+   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n+   = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n+\n+warning: `repr` attribute isn't configurable with a literal\n+  --> $DIR/repr.rs:17:1\n+   |\n+LL | #[repr = \"B\"]\n+   | ^^^^^^^^^^^^^ needs a hint\n+   |\n+   = help: valid hints include `#[repr(C)]`, `#[repr(packed)]`, `#[repr(rust)]` and `#[repr(transparent)]`\n+   = note: for more information, visit <https://doc.rust-lang.org/reference/type-layout.html>\n+\n+warning: `repr` attribute isn't configurable with a literal\n+  --> $DIR/repr.rs:21:1\n+   |\n+LL | #[repr = \"C\"]\n+   | ^^^^^^^^^^^^^ help: give `repr` a hint: `#[repr(C)]`\n+"}, {"sha": "6c0053f2f8597997489345fb210a66de136321be", "filename": "src/test/ui/token/issue-10636-2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftoken%2Fissue-10636-2.stderr?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -10,11 +10,11 @@ note: unclosed delimiter\n LL |     option.map(|some| 42;\n    |               ^\n \n-error: expected one of `,`, `.`, `?`, or an operator, found `;`\n+error: expected one of `)`, `,`, `.`, `?`, or an operator, found `;`\n   --> $DIR/issue-10636-2.rs:15:25\n    |\n LL |     option.map(|some| 42;\n-   |                         ^ expected one of `,`, `.`, `?`, or an operator here\n+   |                         ^ expected one of `)`, `,`, `.`, `?`, or an operator here\n \n error: expected expression, found `)`\n   --> $DIR/issue-10636-2.rs:18:1"}, {"sha": "d3e4627a4c9b8c56ef237e1ec7186f3373738c4e", "filename": "src/test/ui/trait-object-auto-dedup-in-impl.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ftrait-object-auto-dedup-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ftrait-object-auto-dedup-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-object-auto-dedup-in-impl.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Checks to make sure that `dyn Trait + Send` and `dyn Trait + Send + Send` are the same type.\n+// Issue: #47010\n+\n+struct Struct;\n+impl Trait for Struct {}\n+trait Trait {}\n+\n+type Send1 = Trait + Send;\n+type Send2 = Trait + Send + Send;\n+\n+fn main () {}\n+\n+impl Trait + Send {\n+    fn test(&self) { println!(\"one\"); } //~ ERROR duplicate definitions with name `test`\n+}\n+\n+impl Trait + Send + Send {\n+    fn test(&self) { println!(\"two\"); }\n+}"}, {"sha": "9abd81cdcfa2370acb44f282099db5ce32c2f8e2", "filename": "src/test/ui/trait-object-auto-dedup-in-impl.stderr", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ftrait-object-auto-dedup-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ftrait-object-auto-dedup-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrait-object-auto-dedup-in-impl.stderr?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -0,0 +1,12 @@\n+error[E0592]: duplicate definitions with name `test`\n+  --> $DIR/trait-object-auto-dedup-in-impl.rs:24:5\n+   |\n+LL |     fn test(&self) { println!(\"one\"); } //~ ERROR duplicate definitions with name `test`\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `test`\n+...\n+LL |     fn test(&self) { println!(\"two\"); }\n+   |     ----------------------------------- other definition for `test`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0592`."}, {"sha": "22d54a3834073d4f205701f49847732f13183c45", "filename": "src/test/ui/tuple-struct-fields/test.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ftuple-struct-fields%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ftuple-struct-fields%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple-struct-fields%2Ftest.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -12,6 +12,6 @@ mod foo {\n     type T = ();\n     struct S1(pub(in foo) (), pub(T), pub(crate) (), pub(((), T)));\n     struct S2(pub((foo)) ());\n-    //~^ ERROR expected `,`, found `(`\n+    //~^ ERROR expected one of `)` or `,`, found `(`\n     //~| ERROR cannot find type `foo` in this scope\n }", "previous_filename": "src/test/compile-fail/privacy/restricted/tuple-struct-fields/test.rs"}, {"sha": "59228ea8c14d2ca41e9bb8d5f5474d90b33ff92b", "filename": "src/test/ui/tuple-struct-fields/test.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ftuple-struct-fields%2Ftest.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ftuple-struct-fields%2Ftest.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple-struct-fields%2Ftest.stderr?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -0,0 +1,20 @@\n+error: expected one of `)` or `,`, found `(`\n+  --> $DIR/test.rs:14:26\n+   |\n+LL |     struct S2(pub((foo)) ());\n+   |                          ^ expected one of `)` or `,` here\n+\n+error[E0412]: cannot find type `foo` in this scope\n+  --> $DIR/test.rs:14:20\n+   |\n+LL |     struct S2(pub((foo)) ());\n+   |                    ^^^ not found in this scope\n+\n+error[E0601]: `main` function not found in crate `test`\n+   |\n+   = note: consider adding a `main` function to `$DIR/test.rs`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0412, E0601.\n+For more information about an error, try `rustc --explain E0412`."}, {"sha": "eead027cb13516d73dd57f125edf8666fa484e36", "filename": "src/test/ui/tuple-struct-fields/test2.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ftuple-struct-fields%2Ftest2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ftuple-struct-fields%2Ftest2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple-struct-fields%2Ftest2.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -13,7 +13,7 @@ macro_rules! define_struct {\n         struct S1(pub $t);\n         struct S2(pub (in foo) ());\n         struct S3(pub $t ());\n-        //~^ ERROR expected `,`, found `(`\n+        //~^ ERROR expected one of `)` or `,`, found `(`\n     }\n }\n ", "previous_filename": "src/test/compile-fail/privacy/restricted/tuple-struct-fields/test2.rs"}, {"sha": "983e74772ac690a0f0b8a33a01aef49e0dd5bed7", "filename": "src/test/ui/tuple-struct-fields/test2.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ftuple-struct-fields%2Ftest2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ftuple-struct-fields%2Ftest2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple-struct-fields%2Ftest2.stderr?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -0,0 +1,11 @@\n+error: expected one of `)` or `,`, found `(`\n+  --> $DIR/test2.rs:15:26\n+   |\n+LL |         struct S3(pub $t ());\n+   |                          ^ expected one of `)` or `,` here\n+...\n+LL |     define_struct! { (foo) }\n+   |     ------------------------ in this macro invocation\n+\n+error: aborting due to previous error\n+"}, {"sha": "d666c8abd3c957d1d763d9a9b590c9b9a2675de8", "filename": "src/test/ui/tuple-struct-fields/test3.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ftuple-struct-fields%2Ftest3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ftuple-struct-fields%2Ftest3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple-struct-fields%2Ftest3.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -13,7 +13,7 @@ macro_rules! define_struct {\n         struct S1(pub($t));\n         struct S2(pub (in foo) ());\n         struct S3(pub($t) ());\n-        //~^ ERROR expected `,`, found `(`\n+        //~^ ERROR expected one of `)` or `,`, found `(`\n     }\n }\n ", "previous_filename": "src/test/compile-fail/privacy/restricted/tuple-struct-fields/test3.rs"}, {"sha": "6738595b997987ac41d95bb1eef2ef61883a1f66", "filename": "src/test/ui/tuple-struct-fields/test3.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ftuple-struct-fields%2Ftest3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftest%2Fui%2Ftuple-struct-fields%2Ftest3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftuple-struct-fields%2Ftest3.stderr?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -0,0 +1,11 @@\n+error: expected one of `)` or `,`, found `(`\n+  --> $DIR/test3.rs:15:27\n+   |\n+LL |         struct S3(pub($t) ());\n+   |                           ^ expected one of `)` or `,` here\n+...\n+LL |     define_struct! { foo }\n+   |     ---------------------- in this macro invocation\n+\n+error: aborting due to previous error\n+"}, {"sha": "caf73f4f68b036d912a9933b5e651cb6c4d36764", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 51, "deletions": 8, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf91e9b9bae3e421212f91b61d52971c5de2914e/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=cf91e9b9bae3e421212f91b61d52971c5de2914e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use common::CompareMode;\n-use common::{expected_output_path, UI_FIXED, UI_STDERR, UI_STDOUT};\n+use common::{expected_output_path, UI_EXTENSIONS, UI_FIXED, UI_STDERR, UI_STDOUT};\n use common::{output_base_dir, output_base_name, output_testname_unique};\n use common::{Codegen, CodegenUnits, DebugInfoGdb, DebugInfoLldb, Rustdoc};\n use common::{CompileFail, ParseFail, Pretty, RunFail, RunPass, RunPassValgrind};\n@@ -2609,6 +2609,9 @@ impl<'test> TestCx<'test> {\n         errors += self.compare_output(\"stdout\", &normalized_stdout, &expected_stdout);\n         errors += self.compare_output(\"stderr\", &normalized_stderr, &expected_stderr);\n \n+        let modes_to_prune = vec![CompareMode::Nll];\n+        self.prune_duplicate_outputs(&modes_to_prune);\n+\n         if self.config.compare_mode.is_some() {\n             // don't test rustfix with nll right now\n         } else if self.props.run_rustfix {\n@@ -2971,6 +2974,16 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n+    fn delete_file(&self, file: &PathBuf) {\n+        if let Err(e) = ::std::fs::remove_file(file) {\n+            self.fatal(&format!(\n+                \"failed to delete `{}`: {}\",\n+                file.display(),\n+                e,\n+            ));\n+        }\n+    }\n+\n     fn compare_output(&self, kind: &str, actual: &str, expected: &str) -> usize {\n         if actual == expected {\n             return 0;\n@@ -3023,13 +3036,7 @@ impl<'test> TestCx<'test> {\n \n         for output_file in &files {\n             if actual.is_empty() {\n-                if let Err(e) = ::std::fs::remove_file(output_file) {\n-                    self.fatal(&format!(\n-                        \"failed to delete `{}`: {}\",\n-                        output_file.display(),\n-                        e,\n-                    ));\n-                }\n+                self.delete_file(output_file);\n             } else {\n                 match File::create(&output_file).and_then(|mut f| f.write_all(actual.as_bytes())) {\n                     Ok(()) => {}\n@@ -3054,6 +3061,42 @@ impl<'test> TestCx<'test> {\n         }\n     }\n \n+    fn prune_duplicate_output(&self, mode: CompareMode, kind: &str, canon_content: &str) {\n+        let examined_path = expected_output_path(\n+            &self.testpaths,\n+            self.revision,\n+            &Some(mode),\n+            kind,\n+        );\n+\n+        let examined_content = self\n+            .load_expected_output_from_path(&examined_path)\n+            .unwrap_or_else(|_| String::new());\n+\n+        if examined_path.exists() && canon_content == &examined_content {\n+            self.delete_file(&examined_path);\n+        }\n+    }\n+\n+    fn prune_duplicate_outputs(&self, modes: &[CompareMode]) {\n+        if self.config.bless {\n+            for kind in UI_EXTENSIONS {\n+                let canon_comparison_path = expected_output_path(\n+                    &self.testpaths,\n+                    self.revision,\n+                    &None,\n+                    kind,\n+                );\n+\n+                if let Ok(canon) = self.load_expected_output_from_path(&canon_comparison_path) {\n+                    for mode in modes {\n+                        self.prune_duplicate_output(mode.clone(), kind, &canon);\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     fn create_stamp(&self) {\n         let mut f = File::create(::stamp(&self.config, self.testpaths, self.revision)).unwrap();\n         f.write_all(compute_stamp_hash(&self.config).as_bytes())"}]}