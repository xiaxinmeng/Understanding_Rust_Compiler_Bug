{"sha": "111db7d3a87ff0bfc8753e4d03563de2539dd9da", "node_id": "C_kwDOAAsO6NoAKDExMWRiN2QzYTg3ZmYwYmZjODc1M2U0ZDAzNTYzZGUyNTM5ZGQ5ZGE", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-14T04:43:10Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-11-14T04:59:41Z"}, "message": "Remove TraitDef::generics.\n\nBecause it's always empty.", "tree": {"sha": "ad8cbeb7bf17e3a07a442aa2f54d100cc894ebc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad8cbeb7bf17e3a07a442aa2f54d100cc894ebc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/111db7d3a87ff0bfc8753e4d03563de2539dd9da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/111db7d3a87ff0bfc8753e4d03563de2539dd9da", "html_url": "https://github.com/rust-lang/rust/commit/111db7d3a87ff0bfc8753e4d03563de2539dd9da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/111db7d3a87ff0bfc8753e4d03563de2539dd9da/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96280b6a1d39af0d6305cfeb53a2468964e04155", "url": "https://api.github.com/repos/rust-lang/rust/commits/96280b6a1d39af0d6305cfeb53a2468964e04155", "html_url": "https://github.com/rust-lang/rust/commit/96280b6a1d39af0d6305cfeb53a2468964e04155"}], "stats": {"total": 80, "additions": 33, "deletions": 47}, "files": [{"sha": "9cd954e3199de35d5ecf4b4698b6b7801b5a5e16", "filename": "compiler/rustc_ast/src/ast.rs", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_ast%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Fast.rs?ref=111db7d3a87ff0bfc8753e4d03563de2539dd9da", "patch": "@@ -392,15 +392,7 @@ pub struct Generics {\n impl Default for Generics {\n     /// Creates an instance of `Generics`.\n     fn default() -> Generics {\n-        Generics {\n-            params: Vec::new(),\n-            where_clause: WhereClause {\n-                has_where_token: false,\n-                predicates: Vec::new(),\n-                span: DUMMY_SP,\n-            },\n-            span: DUMMY_SP,\n-        }\n+        Generics { params: Vec::new(), where_clause: Default::default(), span: DUMMY_SP }\n     }\n }\n \n@@ -415,6 +407,12 @@ pub struct WhereClause {\n     pub span: Span,\n }\n \n+impl Default for WhereClause {\n+    fn default() -> WhereClause {\n+        WhereClause { has_where_token: false, predicates: Vec::new(), span: DUMMY_SP }\n+    }\n+}\n+\n /// A single predicate in a where-clause.\n #[derive(Clone, Encodable, Decodable, Debug)]\n pub enum WherePredicate {"}, {"sha": "a5aa46aae77a7460b1270b6917c71b7c2ce4aec0", "filename": "compiler/rustc_builtin_macros/src/deriving/bounds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fbounds.rs?ref=111db7d3a87ff0bfc8753e4d03563de2539dd9da", "patch": "@@ -1,4 +1,3 @@\n-use crate::deriving::generic::ty::*;\n use crate::deriving::generic::*;\n use crate::deriving::path_std;\n \n@@ -18,7 +17,6 @@ pub fn expand_deriving_copy(\n         path: path_std!(marker::Copy),\n         skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n-        generics: Bounds::empty(),\n         supports_unions: true,\n         methods: Vec::new(),\n         associated_types: Vec::new(),"}, {"sha": "70e28d29dc1a893921b4f7b91f3b6f65ff3bfcf7", "filename": "compiler/rustc_builtin_macros/src/deriving/clone.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fclone.rs?ref=111db7d3a87ff0bfc8753e4d03563de2539dd9da", "patch": "@@ -74,7 +74,6 @@ pub fn expand_deriving_clone(\n         path: path_std!(clone::Clone),\n         skip_path_as_bound: false,\n         additional_bounds: bounds,\n-        generics: Bounds::empty(),\n         supports_unions: true,\n         methods: vec![MethodDef {\n             name: sym::clone,"}, {"sha": "4ed32c4274b6a2f06ebc25f5a09fa90155eb3190", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/eq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Feq.rs?ref=111db7d3a87ff0bfc8753e4d03563de2539dd9da", "patch": "@@ -27,7 +27,6 @@ pub fn expand_deriving_eq(\n         path: path_std!(cmp::Eq),\n         skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n-        generics: Bounds::empty(),\n         supports_unions: true,\n         methods: vec![MethodDef {\n             name: sym::assert_receiver_is_total_eq,"}, {"sha": "7e36389fd168d532505a8a19c80868ddbbf947f0", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/ord.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Ford.rs?ref=111db7d3a87ff0bfc8753e4d03563de2539dd9da", "patch": "@@ -21,7 +21,6 @@ pub fn expand_deriving_ord(\n         path: path_std!(cmp::Ord),\n         skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n-        generics: Bounds::empty(),\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::cmp,"}, {"sha": "53d7b05e59373685c1ac2d9384aff18c23a80e21", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_eq.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_eq.rs?ref=111db7d3a87ff0bfc8753e4d03563de2539dd9da", "patch": "@@ -85,7 +85,6 @@ pub fn expand_deriving_partial_eq(\n         path: path_std!(cmp::PartialEq),\n         skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n-        generics: Bounds::empty(),\n         supports_unions: false,\n         methods,\n         associated_types: Vec::new(),"}, {"sha": "b619719570c16fa4b8abde78bd2184e974c7dffd", "filename": "compiler/rustc_builtin_macros/src/deriving/cmp/partial_ord.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fcmp%2Fpartial_ord.rs?ref=111db7d3a87ff0bfc8753e4d03563de2539dd9da", "patch": "@@ -39,7 +39,6 @@ pub fn expand_deriving_partial_ord(\n         path: path_std!(cmp::PartialOrd),\n         skip_path_as_bound: false,\n         additional_bounds: vec![],\n-        generics: Bounds::empty(),\n         supports_unions: false,\n         methods: vec![partial_cmp_def],\n         associated_types: Vec::new(),"}, {"sha": "faffb9f8abc5b6cff6e30b6b08742193a6ee8e99", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=111db7d3a87ff0bfc8753e4d03563de2539dd9da", "patch": "@@ -22,7 +22,6 @@ pub fn expand_deriving_debug(\n         path: path_std!(fmt::Debug),\n         skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n-        generics: Bounds::empty(),\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::fmt,"}, {"sha": "71b523ac6aca9b2e0ab28bfac2748a9c418b3e97", "filename": "compiler/rustc_builtin_macros/src/deriving/decodable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdecodable.rs?ref=111db7d3a87ff0bfc8753e4d03563de2539dd9da", "patch": "@@ -25,7 +25,6 @@ pub fn expand_deriving_rustc_decodable(\n         path: Path::new_(vec![krate, sym::Decodable], vec![], PathKind::Global),\n         skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n-        generics: Bounds::empty(),\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::decode,"}, {"sha": "66007e040479e8df117ea37b7673ebbb190cb3f7", "filename": "compiler/rustc_builtin_macros/src/deriving/default.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdefault.rs?ref=111db7d3a87ff0bfc8753e4d03563de2539dd9da", "patch": "@@ -26,7 +26,6 @@ pub fn expand_deriving_default(\n         path: Path::new(vec![kw::Default, sym::Default]),\n         skip_path_as_bound: has_a_default_variant(item),\n         additional_bounds: Vec::new(),\n-        generics: Bounds::empty(),\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: kw::Default,"}, {"sha": "b5ed4bfb1c7a778cd42a6afe4f7864fd5072d9e9", "filename": "compiler/rustc_builtin_macros/src/deriving/encodable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fencodable.rs?ref=111db7d3a87ff0bfc8753e4d03563de2539dd9da", "patch": "@@ -109,7 +109,6 @@ pub fn expand_deriving_rustc_encodable(\n         path: Path::new_(vec![krate, sym::Encodable], vec![], PathKind::Global),\n         skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n-        generics: Bounds::empty(),\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::encode,"}, {"sha": "b873018660e754dc4be78b49045b42d47b747a37", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=111db7d3a87ff0bfc8753e4d03563de2539dd9da", "patch": "@@ -195,9 +195,6 @@ pub struct TraitDef<'a> {\n     /// other than the current trait\n     pub additional_bounds: Vec<Ty>,\n \n-    /// Any extra lifetimes and/or bounds, e.g., `D: serialize::Decoder`\n-    pub generics: Bounds,\n-\n     /// Can this trait be derived for unions?\n     pub supports_unions: bool,\n \n@@ -581,19 +578,21 @@ impl<'a> TraitDef<'a> {\n             })\n         });\n \n-        let Generics { mut params, mut where_clause, .. } =\n-            self.generics.to_generics(cx, self.span, type_ident, generics);\n+        let mut where_clause = ast::WhereClause::default();\n         where_clause.span = generics.where_clause.span;\n         let ctxt = self.span.ctxt();\n         let span = generics.span.with_ctxt(ctxt);\n \n         // Create the generic parameters\n-        params.extend(generics.params.iter().map(|param| match &param.kind {\n-            GenericParamKind::Lifetime { .. } => param.clone(),\n-            GenericParamKind::Type { .. } => {\n-                // I don't think this can be moved out of the loop, since\n-                // a GenericBound requires an ast id\n-                let bounds: Vec<_> =\n+        let params: Vec<_> = generics\n+            .params\n+            .iter()\n+            .map(|param| match &param.kind {\n+                GenericParamKind::Lifetime { .. } => param.clone(),\n+                GenericParamKind::Type { .. } => {\n+                    // I don't think this can be moved out of the loop, since\n+                    // a GenericBound requires an ast id\n+                    let bounds: Vec<_> =\n                     // extra restrictions on the generics parameters to the\n                     // type being derived upon\n                     self.additional_bounds.iter().map(|p| {\n@@ -606,21 +605,22 @@ impl<'a> TraitDef<'a> {\n                         param.bounds.iter().cloned()\n                     ).collect();\n \n-                cx.typaram(param.ident.span.with_ctxt(ctxt), param.ident, bounds, None)\n-            }\n-            GenericParamKind::Const { ty, kw_span, .. } => {\n-                let const_nodefault_kind = GenericParamKind::Const {\n-                    ty: ty.clone(),\n-                    kw_span: kw_span.with_ctxt(ctxt),\n-\n-                    // We can't have default values inside impl block\n-                    default: None,\n-                };\n-                let mut param_clone = param.clone();\n-                param_clone.kind = const_nodefault_kind;\n-                param_clone\n-            }\n-        }));\n+                    cx.typaram(param.ident.span.with_ctxt(ctxt), param.ident, bounds, None)\n+                }\n+                GenericParamKind::Const { ty, kw_span, .. } => {\n+                    let const_nodefault_kind = GenericParamKind::Const {\n+                        ty: ty.clone(),\n+                        kw_span: kw_span.with_ctxt(ctxt),\n+\n+                        // We can't have default values inside impl block\n+                        default: None,\n+                    };\n+                    let mut param_clone = param.clone();\n+                    param_clone.kind = const_nodefault_kind;\n+                    param_clone\n+                }\n+            })\n+            .collect();\n \n         // and similarly for where clauses\n         where_clause.predicates.extend(generics.where_clause.predicates.iter().map(|clause| {"}, {"sha": "53b6620efd6c0f9decb494f8a15e2f7aa1005cf1", "filename": "compiler/rustc_builtin_macros/src/deriving/hash.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/111db7d3a87ff0bfc8753e4d03563de2539dd9da/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fhash.rs?ref=111db7d3a87ff0bfc8753e4d03563de2539dd9da", "patch": "@@ -24,7 +24,6 @@ pub fn expand_deriving_hash(\n         path,\n         skip_path_as_bound: false,\n         additional_bounds: Vec::new(),\n-        generics: Bounds::empty(),\n         supports_unions: false,\n         methods: vec![MethodDef {\n             name: sym::hash,"}]}