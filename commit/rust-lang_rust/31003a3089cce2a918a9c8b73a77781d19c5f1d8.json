{"sha": "31003a3089cce2a918a9c8b73a77781d19c5f1d8", "node_id": "C_kwDOAAsO6NoAKDMxMDAzYTMwODljY2UyYTkxOGE5YzhiNzNhNzc3ODFkMTljNWYxZDg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2021-12-03T05:24:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-12-03T05:24:11Z"}, "message": "Rollup merge of #88906 - Kixunil:box-maybe-uninit-write, r=dtolnay\n\nImplement write() method for Box<MaybeUninit<T>>\n\nThis adds method similar to `MaybeUninit::write` main difference being\nit returns owned `Box`. This can be used to elide copy from stack\nsafely, however it's not currently tested that the optimization actually\noccurs.\n\nAnalogous methods are not provided for `Rc` and `Arc` as those need to\nhandle the possibility of sharing. Some version of them may be added in\nthe future.\n\nThis was discussed in #63291 which this change extends.", "tree": {"sha": "8e2318b63cfa60e6bf19534700afdb09bedd878e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e2318b63cfa60e6bf19534700afdb09bedd878e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/31003a3089cce2a918a9c8b73a77781d19c5f1d8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhqan7CRBK7hj4Ov3rIwAAYCgIAGPmj/m6hifr51mmzveROlqA\nAp2H/e5TKbAZicy3hiIjgc4qo2UR5SsI7R8YkU29qMBQEeJ0IJp4irxOdxtSs97f\nbRgHt1dyt2a4FFG+eCBSc0wbuDyG4MjQZ1FP5CvSXPKMG92Z0Jvqbaz7OZNFWTd8\ntoKHAssizdnJ3To8SiygC0d9L//cZg4KLlI+NN0tkpgtDdzIVZpKP7Uu6e05ZSTv\nRgFnWWwilZC3ZodlWhuRgPCWzFPfqGnwE4bUBBDxUEas3DwJIbe4jX12S1/TjqAV\n9jS098FKS8UU3Y5dj9prQZeRq2kXhC+zro3BH0PIWZAyPGb8keigvA2/UBgyEUU=\n=pMQw\n-----END PGP SIGNATURE-----\n", "payload": "tree 8e2318b63cfa60e6bf19534700afdb09bedd878e\nparent ff23ad3179014ba258f2b540fb39dd0f26852b7a\nparent 41e21aa1c27522c6b29c5b88e37b1f479f63e38c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1638509051 +0100\ncommitter GitHub <noreply@github.com> 1638509051 +0100\n\nRollup merge of #88906 - Kixunil:box-maybe-uninit-write, r=dtolnay\n\nImplement write() method for Box<MaybeUninit<T>>\n\nThis adds method similar to `MaybeUninit::write` main difference being\nit returns owned `Box`. This can be used to elide copy from stack\nsafely, however it's not currently tested that the optimization actually\noccurs.\n\nAnalogous methods are not provided for `Rc` and `Arc` as those need to\nhandle the possibility of sharing. Some version of them may be added in\nthe future.\n\nThis was discussed in #63291 which this change extends.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/31003a3089cce2a918a9c8b73a77781d19c5f1d8", "html_url": "https://github.com/rust-lang/rust/commit/31003a3089cce2a918a9c8b73a77781d19c5f1d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/31003a3089cce2a918a9c8b73a77781d19c5f1d8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff23ad3179014ba258f2b540fb39dd0f26852b7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff23ad3179014ba258f2b540fb39dd0f26852b7a", "html_url": "https://github.com/rust-lang/rust/commit/ff23ad3179014ba258f2b540fb39dd0f26852b7a"}, {"sha": "41e21aa1c27522c6b29c5b88e37b1f479f63e38c", "url": "https://api.github.com/repos/rust-lang/rust/commits/41e21aa1c27522c6b29c5b88e37b1f479f63e38c", "html_url": "https://github.com/rust-lang/rust/commit/41e21aa1c27522c6b29c5b88e37b1f479f63e38c"}], "stats": {"total": 42, "additions": 38, "deletions": 4}, "files": [{"sha": "71ff762c714bfab9095f00c3fcf60c4d32e69054", "filename": "compiler/rustc_data_structures/src/functor.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/31003a3089cce2a918a9c8b73a77781d19c5f1d8/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31003a3089cce2a918a9c8b73a77781d19c5f1d8/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffunctor.rs?ref=31003a3089cce2a918a9c8b73a77781d19c5f1d8", "patch": "@@ -23,11 +23,9 @@ impl<T> IdFunctor for Box<T> {\n             let value = raw.read();\n             // SAFETY: Converts `Box<T>` to `Box<MaybeUninit<T>>` which is the\n             // inverse of `Box::assume_init()` and should be safe.\n-            let mut raw: Box<mem::MaybeUninit<T>> = Box::from_raw(raw.cast());\n+            let raw: Box<mem::MaybeUninit<T>> = Box::from_raw(raw.cast());\n             // SAFETY: Write the mapped value back into the `Box`.\n-            raw.write(f(value)?);\n-            // SAFETY: We just initialized `raw`.\n-            raw.assume_init()\n+            Box::write(raw, f(value)?)\n         })\n     }\n }"}, {"sha": "0b72b3f0ee7b0ca2d3ecee28cc763658cbeeb3a6", "filename": "library/alloc/src/boxed.rs", "status": "modified", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/31003a3089cce2a918a9c8b73a77781d19c5f1d8/library%2Falloc%2Fsrc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/31003a3089cce2a918a9c8b73a77781d19c5f1d8/library%2Falloc%2Fsrc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fboxed.rs?ref=31003a3089cce2a918a9c8b73a77781d19c5f1d8", "patch": "@@ -763,6 +763,42 @@ impl<T, A: Allocator> Box<mem::MaybeUninit<T>, A> {\n         let (raw, alloc) = Box::into_raw_with_allocator(self);\n         unsafe { Box::from_raw_in(raw as *mut T, alloc) }\n     }\n+\n+    /// Writes the value and converts to `Box<T, A>`.\n+    ///\n+    /// This method converts the box similarly to [`Box::assume_init`] but\n+    /// writes `value` into it before conversion thus guaranteeing safety.\n+    /// In some scenarios use of this method may improve performance because\n+    /// the compiler may be able to optimize copying from stack.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(new_uninit)]\n+    ///\n+    /// let big_box = Box::<[usize; 1024]>::new_uninit();\n+    ///\n+    /// let mut array = [0; 1024];\n+    /// for (i, place) in array.iter_mut().enumerate() {\n+    ///     *place = i;\n+    /// }\n+    ///\n+    /// // The optimizer may be able to elide this copy, so previous code writes\n+    /// // to heap directly.\n+    /// let big_box = Box::write(big_box, array);\n+    ///\n+    /// for (i, x) in big_box.iter().enumerate() {\n+    ///     assert_eq!(*x, i);\n+    /// }\n+    /// ```\n+    #[unstable(feature = \"new_uninit\", issue = \"63291\")]\n+    #[inline]\n+    pub fn write(mut boxed: Self, value: T) -> Box<T, A> {\n+        unsafe {\n+            (*boxed).write(value);\n+            boxed.assume_init()\n+        }\n+    }\n }\n \n impl<T, A: Allocator> Box<[mem::MaybeUninit<T>], A> {"}]}