{"sha": "4575c38810c8874838d2a2b0ea1bbd789a774af6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NzVjMzg4MTBjODg3NDgzOGQyYTJiMGVhMWJiZDc4OWE3NzRhZjY=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-19T13:34:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-19T13:34:24Z"}, "message": "Merge #4839\n\n4839: `Go to Type Definition` hover action. r=matklad a=vsrs\n\n![hover_actions_goto](https://user-images.githubusercontent.com/62505555/83335671-0122e380-a2b7-11ea-9922-fbdcfb11a7f3.gif)\r\n\r\nThis implementation supports things like `dyn Trait<SomeType>`, `-> impl Trait`, etc.\n\nCo-authored-by: vsrs <vit@conrlab.com>", "tree": {"sha": "c1299b36e13b6a772a7faba3f6fb90e495f3ef7e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1299b36e13b6a772a7faba3f6fb90e495f3ef7e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4575c38810c8874838d2a2b0ea1bbd789a774af6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe7L7gCRBK7hj4Ov3rIwAAdHIIAD6WUH7nXI2hte/nB5PpWnZu\neRL8U/wIXe5g73ZTr6Fb4JehsFbBTsAqWjHCkt871d1wMHZGMv0esCD+ZK4OSTts\nxTtRG4gfIyBCX3TUE6socNve3ue/1uiKSUn61Hfq5JDk0CMdZhaov7An5MmFeqdy\nugdiTBw0I/T5tx9Cy6qKBeiswPYA1D2VSDk9KUunyQNMcCJQQnk6KqS8VUXdkirQ\ngu4706mTBswtW9+vPGhpczmSLU1xn4TE8YFKcU02jI/XFnHkFpgnQYtvNta3bBlP\nHOjVSzQbTDoizNprtcQBRKESn1NaKOgKOAuwP2Q0781qzjM4BJYQqFnFsM2w+sA=\n=V4av\n-----END PGP SIGNATURE-----\n", "payload": "tree c1299b36e13b6a772a7faba3f6fb90e495f3ef7e\nparent f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2\nparent 022fbefffad0d7c402ac5607457f2828decb2188\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1592573664 +0000\ncommitter GitHub <noreply@github.com> 1592573664 +0000\n\nMerge #4839\n\n4839: `Go to Type Definition` hover action. r=matklad a=vsrs\n\n![hover_actions_goto](https://user-images.githubusercontent.com/62505555/83335671-0122e380-a2b7-11ea-9922-fbdcfb11a7f3.gif)\r\n\r\nThis implementation supports things like `dyn Trait<SomeType>`, `-> impl Trait`, etc.\n\nCo-authored-by: vsrs <vit@conrlab.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4575c38810c8874838d2a2b0ea1bbd789a774af6", "html_url": "https://github.com/rust-lang/rust/commit/4575c38810c8874838d2a2b0ea1bbd789a774af6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4575c38810c8874838d2a2b0ea1bbd789a774af6/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2", "html_url": "https://github.com/rust-lang/rust/commit/f6e250bd1b077fce5cef8024fa90fbcb45b5b4f2"}, {"sha": "022fbefffad0d7c402ac5607457f2828decb2188", "url": "https://api.github.com/repos/rust-lang/rust/commits/022fbefffad0d7c402ac5607457f2828decb2188", "html_url": "https://github.com/rust-lang/rust/commit/022fbefffad0d7c402ac5607457f2828decb2188"}], "stats": {"total": 1398, "additions": 1360, "deletions": 38}, "files": [{"sha": "ffd5278ecb627c43f34d123554baea8480a7b7c0", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 113, "deletions": 2, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/4575c38810c8874838d2a2b0ea1bbd789a774af6/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4575c38810c8874838d2a2b0ea1bbd789a774af6/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=4575c38810c8874838d2a2b0ea1bbd789a774af6", "patch": "@@ -26,8 +26,8 @@ use hir_ty::{\n     autoderef,\n     display::{HirDisplayError, HirFormatter},\n     expr::ExprValidator,\n-    method_resolution, ApplicationTy, Canonical, InEnvironment, Substs, TraitEnvironment, Ty,\n-    TyDefId, TypeCtor,\n+    method_resolution, ApplicationTy, Canonical, GenericPredicate, InEnvironment, Substs,\n+    TraitEnvironment, Ty, TyDefId, TypeCtor,\n };\n use ra_db::{CrateId, CrateName, Edition, FileId};\n use ra_prof::profile;\n@@ -186,6 +186,22 @@ impl ModuleDef {\n \n         module.visibility_of(db, self)\n     }\n+\n+    pub fn name(self, db: &dyn HirDatabase) -> Option<Name> {\n+        match self {\n+            ModuleDef::Adt(it) => Some(it.name(db)),\n+            ModuleDef::Trait(it) => Some(it.name(db)),\n+            ModuleDef::Function(it) => Some(it.name(db)),\n+            ModuleDef::EnumVariant(it) => Some(it.name(db)),\n+            ModuleDef::TypeAlias(it) => Some(it.name(db)),\n+\n+            ModuleDef::Module(it) => it.name(db),\n+            ModuleDef::Const(it) => it.name(db),\n+            ModuleDef::Static(it) => it.name(db),\n+\n+            ModuleDef::BuiltinType(it) => Some(it.as_name()),\n+        }\n+    }\n }\n \n pub use hir_def::{\n@@ -1359,6 +1375,27 @@ impl Type {\n         Some(adt.into())\n     }\n \n+    pub fn as_dyn_trait(&self) -> Option<Trait> {\n+        self.ty.value.dyn_trait().map(Into::into)\n+    }\n+\n+    pub fn as_impl_traits(&self, db: &dyn HirDatabase) -> Option<Vec<Trait>> {\n+        self.ty.value.impl_trait_bounds(db).map(|it| {\n+            it.into_iter()\n+                .filter_map(|pred| match pred {\n+                    hir_ty::GenericPredicate::Implemented(trait_ref) => {\n+                        Some(Trait::from(trait_ref.trait_))\n+                    }\n+                    _ => None,\n+                })\n+                .collect()\n+        })\n+    }\n+\n+    pub fn as_associated_type_parent_trait(&self, db: &dyn HirDatabase) -> Option<Trait> {\n+        self.ty.value.associated_type_parent_trait(db).map(Into::into)\n+    }\n+\n     // FIXME: provide required accessors such that it becomes implementable from outside.\n     pub fn is_equal_for_find_impls(&self, other: &Type) -> bool {\n         match (&self.ty.value, &other.ty.value) {\n@@ -1380,6 +1417,80 @@ impl Type {\n             ty: InEnvironment { value: ty, environment: self.ty.environment.clone() },\n         }\n     }\n+\n+    pub fn walk(&self, db: &dyn HirDatabase, mut cb: impl FnMut(Type)) {\n+        // TypeWalk::walk for a Ty at first visits parameters and only after that the Ty itself.\n+        // We need a different order here.\n+\n+        fn walk_substs(\n+            db: &dyn HirDatabase,\n+            type_: &Type,\n+            substs: &Substs,\n+            cb: &mut impl FnMut(Type),\n+        ) {\n+            for ty in substs.iter() {\n+                walk_type(db, &type_.derived(ty.clone()), cb);\n+            }\n+        }\n+\n+        fn walk_bounds(\n+            db: &dyn HirDatabase,\n+            type_: &Type,\n+            bounds: &[GenericPredicate],\n+            cb: &mut impl FnMut(Type),\n+        ) {\n+            for pred in bounds {\n+                match pred {\n+                    GenericPredicate::Implemented(trait_ref) => {\n+                        cb(type_.clone());\n+                        walk_substs(db, type_, &trait_ref.substs, cb);\n+                    }\n+                    _ => (),\n+                }\n+            }\n+        }\n+\n+        fn walk_type(db: &dyn HirDatabase, type_: &Type, cb: &mut impl FnMut(Type)) {\n+            let ty = type_.ty.value.strip_references();\n+            match ty {\n+                Ty::Apply(ApplicationTy { ctor, parameters }) => {\n+                    match ctor {\n+                        TypeCtor::Adt(_) => {\n+                            cb(type_.derived(ty.clone()));\n+                        }\n+                        TypeCtor::AssociatedType(_) => {\n+                            if let Some(_) = ty.associated_type_parent_trait(db) {\n+                                cb(type_.derived(ty.clone()));\n+                            }\n+                        }\n+                        _ => (),\n+                    }\n+\n+                    // adt params, tuples, etc...\n+                    walk_substs(db, type_, parameters, cb);\n+                }\n+                Ty::Opaque(opaque_ty) => {\n+                    if let Some(bounds) = ty.impl_trait_bounds(db) {\n+                        walk_bounds(db, &type_.derived(ty.clone()), &bounds, cb);\n+                    }\n+\n+                    walk_substs(db, type_, &opaque_ty.parameters, cb);\n+                }\n+                Ty::Placeholder(_) => {\n+                    if let Some(bounds) = ty.impl_trait_bounds(db) {\n+                        walk_bounds(db, &type_.derived(ty.clone()), &bounds, cb);\n+                    }\n+                }\n+                Ty::Dyn(bounds) => {\n+                    walk_bounds(db, &type_.derived(ty.clone()), bounds.as_ref(), cb);\n+                }\n+\n+                _ => (),\n+            }\n+        }\n+\n+        walk_type(db, self, &mut cb);\n+    }\n }\n \n impl HirDisplay for Type {"}, {"sha": "f22232324928ebee62191ab2555b8a2b93518a30", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 56, "deletions": 7, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/4575c38810c8874838d2a2b0ea1bbd789a774af6/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4575c38810c8874838d2a2b0ea1bbd789a774af6/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=4575c38810c8874838d2a2b0ea1bbd789a774af6", "patch": "@@ -73,6 +73,7 @@ pub use lower::{\n pub use traits::{InEnvironment, Obligation, ProjectionPredicate, TraitEnvironment};\n \n pub use chalk_ir::{BoundVar, DebruijnIndex};\n+use itertools::Itertools;\n \n /// A type constructor or type name: this might be something like the primitive\n /// type `bool`, a struct like `Vec`, or things like function pointers or\n@@ -815,6 +816,11 @@ impl Ty {\n         }\n     }\n \n+    /// If this is a `dyn Trait`, returns that trait.\n+    pub fn dyn_trait(&self) -> Option<TraitId> {\n+        self.dyn_trait_ref().map(|it| it.trait_)\n+    }\n+\n     fn builtin_deref(&self) -> Option<Ty> {\n         match self {\n             Ty::Apply(a_ty) => match a_ty.ctor {\n@@ -867,13 +873,56 @@ impl Ty {\n         }\n     }\n \n-    /// If this is a `dyn Trait`, returns that trait.\n-    pub fn dyn_trait(&self) -> Option<TraitId> {\n+    pub fn impl_trait_bounds(&self, db: &dyn HirDatabase) -> Option<Vec<GenericPredicate>> {\n         match self {\n-            Ty::Dyn(predicates) => predicates.iter().find_map(|pred| match pred {\n-                GenericPredicate::Implemented(tr) => Some(tr.trait_),\n-                _ => None,\n-            }),\n+            Ty::Opaque(opaque_ty) => {\n+                let predicates = match opaque_ty.opaque_ty_id {\n+                    OpaqueTyId::ReturnTypeImplTrait(func, idx) => {\n+                        db.return_type_impl_traits(func).map(|it| {\n+                            let data = (*it)\n+                                .as_ref()\n+                                .map(|rpit| rpit.impl_traits[idx as usize].bounds.clone());\n+                            data.clone().subst(&opaque_ty.parameters)\n+                        })\n+                    }\n+                };\n+\n+                predicates.map(|it| it.value)\n+            }\n+            Ty::Placeholder(id) => {\n+                let generic_params = db.generic_params(id.parent);\n+                let param_data = &generic_params.types[id.local_id];\n+                match param_data.provenance {\n+                    hir_def::generics::TypeParamProvenance::ArgumentImplTrait => {\n+                        let predicates = db\n+                            .generic_predicates_for_param(*id)\n+                            .into_iter()\n+                            .map(|pred| pred.value.clone())\n+                            .collect_vec();\n+\n+                        Some(predicates)\n+                    }\n+                    _ => None,\n+                }\n+            }\n+            _ => None,\n+        }\n+    }\n+\n+    pub fn associated_type_parent_trait(&self, db: &dyn HirDatabase) -> Option<TraitId> {\n+        match self {\n+            Ty::Apply(ApplicationTy { ctor: TypeCtor::AssociatedType(type_alias_id), .. }) => {\n+                match type_alias_id.lookup(db.upcast()).container {\n+                    AssocContainerId::TraitId(trait_id) => Some(trait_id),\n+                    _ => None,\n+                }\n+            }\n+            Ty::Projection(projection_ty) => {\n+                match projection_ty.associated_ty.lookup(db.upcast()).container {\n+                    AssocContainerId::TraitId(trait_id) => Some(trait_id),\n+                    _ => None,\n+                }\n+            }\n             _ => None,\n         }\n     }\n@@ -1057,5 +1106,5 @@ pub struct ReturnTypeImplTraits {\n \n #[derive(Clone, PartialEq, Eq, Debug, Hash)]\n pub(crate) struct ReturnTypeImplTrait {\n-    pub(crate) bounds: Binders<Vec<GenericPredicate>>,\n+    pub bounds: Binders<Vec<GenericPredicate>>,\n }"}, {"sha": "d870e4cbce63587f16ea696ef1d2df93d11c04fb", "filename": "crates/ra_ide/src/hover.rs", "status": "modified", "additions": 1121, "deletions": 21, "changes": 1142, "blob_url": "https://github.com/rust-lang/rust/blob/4575c38810c8874838d2a2b0ea1bbd789a774af6/crates%2Fra_ide%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4575c38810c8874838d2a2b0ea1bbd789a774af6/crates%2Fra_ide%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fhover.rs?ref=4575c38810c8874838d2a2b0ea1bbd789a774af6", "patch": "@@ -2,7 +2,7 @@ use std::iter::once;\n \n use hir::{\n     Adt, AsAssocItem, AssocItemContainer, Documentation, FieldSource, HasSource, HirDisplay,\n-    ModuleDef, ModuleSource, Semantics,\n+    Module, ModuleDef, ModuleSource, Semantics,\n };\n use itertools::Itertools;\n use ra_db::SourceDatabase;\n@@ -13,7 +13,9 @@ use ra_ide_db::{\n use ra_syntax::{ast, match_ast, AstNode, SyntaxKind::*, SyntaxToken, TokenAtOffset};\n \n use crate::{\n-    display::{macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel, ToNav},\n+    display::{\n+        macro_label, rust_code_markup, rust_code_markup_with_doc, ShortLabel, ToNav, TryToNav,\n+    },\n     runnables::runnable,\n     FileId, FilePosition, NavigationTarget, RangeInfo, Runnable,\n };\n@@ -24,19 +26,21 @@ pub struct HoverConfig {\n     pub implementations: bool,\n     pub run: bool,\n     pub debug: bool,\n+    pub goto_type_def: bool,\n }\n \n impl Default for HoverConfig {\n     fn default() -> Self {\n-        Self { implementations: true, run: true, debug: true }\n+        Self { implementations: true, run: true, debug: true, goto_type_def: true }\n     }\n }\n \n impl HoverConfig {\n-    pub const NO_ACTIONS: Self = Self { implementations: false, run: false, debug: false };\n+    pub const NO_ACTIONS: Self =\n+        Self { implementations: false, run: false, debug: false, goto_type_def: false };\n \n     pub fn any(&self) -> bool {\n-        self.implementations || self.runnable()\n+        self.implementations || self.runnable() || self.goto_type_def\n     }\n \n     pub fn none(&self) -> bool {\n@@ -52,6 +56,13 @@ impl HoverConfig {\n pub enum HoverAction {\n     Runnable(Runnable),\n     Implementaion(FilePosition),\n+    GoToType(Vec<HoverGotoTypeData>),\n+}\n+\n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub struct HoverGotoTypeData {\n+    pub mod_path: String,\n+    pub nav: NavigationTarget,\n }\n \n /// Contains the results when hovering over an item\n@@ -138,6 +149,10 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                 res.push_action(action);\n             }\n \n+            if let Some(action) = goto_type_action(db, name_kind) {\n+                res.push_action(action);\n+            }\n+\n             return Some(RangeInfo::new(range, res));\n         }\n     }\n@@ -218,6 +233,44 @@ fn runnable_action(\n     }\n }\n \n+fn goto_type_action(db: &RootDatabase, def: Definition) -> Option<HoverAction> {\n+    match def {\n+        Definition::Local(it) => {\n+            let mut targets: Vec<ModuleDef> = Vec::new();\n+            let mut push_new_def = |item: ModuleDef| {\n+                if !targets.contains(&item) {\n+                    targets.push(item);\n+                }\n+            };\n+\n+            it.ty(db).walk(db, |t| {\n+                if let Some(adt) = t.as_adt() {\n+                    push_new_def(adt.into());\n+                } else if let Some(trait_) = t.as_dyn_trait() {\n+                    push_new_def(trait_.into());\n+                } else if let Some(traits) = t.as_impl_traits(db) {\n+                    traits.into_iter().for_each(|it| push_new_def(it.into()));\n+                } else if let Some(trait_) = t.as_associated_type_parent_trait(db) {\n+                    push_new_def(trait_.into());\n+                }\n+            });\n+\n+            let targets = targets\n+                .into_iter()\n+                .filter_map(|it| {\n+                    Some(HoverGotoTypeData {\n+                        mod_path: mod_path(db, &it)?,\n+                        nav: it.try_to_nav(db)?,\n+                    })\n+                })\n+                .collect();\n+\n+            Some(HoverAction::GoToType(targets))\n+        }\n+        _ => None,\n+    }\n+}\n+\n fn hover_text(\n     docs: Option<String>,\n     desc: Option<String>,\n@@ -248,25 +301,31 @@ fn definition_owner_name(db: &RootDatabase, def: &Definition) -> Option<String>\n     .map(|name| name.to_string())\n }\n \n-fn determine_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {\n-    let mod_path = def.module(db).map(|module| {\n-        once(db.crate_graph()[module.krate().into()].display_name.as_ref().map(ToString::to_string))\n-            .chain(\n-                module\n-                    .path_to_root(db)\n-                    .into_iter()\n-                    .rev()\n-                    .map(|it| it.name(db).map(|name| name.to_string())),\n-            )\n-            .chain(once(definition_owner_name(db, def)))\n-            .flatten()\n-            .join(\"::\")\n-    });\n-    mod_path\n+fn determine_mod_path(db: &RootDatabase, module: Module, name: Option<String>) -> String {\n+    once(db.crate_graph()[module.krate().into()].display_name.as_ref().map(ToString::to_string))\n+        .chain(\n+            module\n+                .path_to_root(db)\n+                .into_iter()\n+                .rev()\n+                .map(|it| it.name(db).map(|name| name.to_string())),\n+        )\n+        .chain(once(name))\n+        .flatten()\n+        .join(\"::\")\n+}\n+\n+// returns None only for ModuleDef::BuiltinType\n+fn mod_path(db: &RootDatabase, item: &ModuleDef) -> Option<String> {\n+    Some(determine_mod_path(db, item.module(db)?, item.name(db).map(|name| name.to_string())))\n+}\n+\n+fn definition_mod_path(db: &RootDatabase, def: &Definition) -> Option<String> {\n+    def.module(db).map(|module| determine_mod_path(db, module, definition_owner_name(db, def)))\n }\n \n fn hover_text_from_name_kind(db: &RootDatabase, def: Definition) -> Option<String> {\n-    let mod_path = determine_mod_path(db, &def);\n+    let mod_path = definition_mod_path(db, &def);\n     return match def {\n         Definition::Macro(it) => {\n             let src = it.source(db);\n@@ -1310,4 +1369,1045 @@ fn func(foo: i32) { if true { <|>foo; }; }\n             ]\n             \"###);\n     }\n+\n+    #[test]\n+    fn test_hover_struct_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /main.rs\n+            struct S{ f1: u32 }\n+\n+            fn main() {\n+                let s<|>t = S{ f1:0 };\n+            }\n+            \",\n+            &[\"S\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"S\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..19,\n+                                name: \"S\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    7..8,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct S\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_generic_struct_has_goto_type_actions() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /main.rs\n+            struct Arg(u32);\n+            struct S<T>{ f1: T }\n+\n+            fn main() {\n+                let s<|>t = S{ f1:Arg(0) };\n+            }\n+            \",\n+            &[\"S<Arg>\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"S\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 17..37,\n+                                name: \"S\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    24..25,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct S\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"Arg\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..16,\n+                                name: \"Arg\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    7..10,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct Arg\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_generic_struct_has_flattened_goto_type_actions() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /main.rs\n+            struct Arg(u32);\n+            struct S<T>{ f1: T }\n+\n+            fn main() {\n+                let s<|>t = S{ f1: S{ f1: Arg(0) } };\n+            }\n+            \",\n+            &[\"S<S<Arg>>\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"S\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 17..37,\n+                                name: \"S\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    24..25,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct S\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"Arg\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..16,\n+                                name: \"Arg\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    7..10,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct Arg\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_tuple_has_goto_type_actions() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /main.rs\n+            struct A(u32);\n+            struct B(u32);\n+            mod M {\n+                pub struct C(u32);\n+            }\n+\n+            fn main() {\n+                let s<|>t = (A(1), B(2), M::C(3) );\n+            }\n+            \",\n+            &[\"(A, B, C)\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"A\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..14,\n+                                name: \"A\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    7..8,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct A\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"B\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 15..29,\n+                                name: \"B\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    22..23,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct B\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"M::C\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 42..60,\n+                                name: \"C\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    53..54,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"pub struct C\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+               \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_return_impl_trait_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /main.rs\n+            trait Foo {}\n+\n+            fn foo() -> impl Foo {}\n+\n+            fn main() {\n+                let s<|>t = foo();\n+            }\n+            \",\n+            &[\"impl Foo\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"Foo\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..12,\n+                                name: \"Foo\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..9,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Foo\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_generic_return_impl_trait_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /main.rs\n+            trait Foo<T> {}\n+            struct S;\n+\n+            fn foo() -> impl Foo<S> {}\n+\n+            fn main() {\n+                let s<|>t = foo();\n+            }\n+            \",\n+            &[\"impl Foo<S>\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"Foo\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..15,\n+                                name: \"Foo\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..9,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Foo\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"S\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 16..25,\n+                                name: \"S\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    23..24,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct S\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_return_impl_traits_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /main.rs\n+            trait Foo {}\n+            trait Bar {}\n+\n+            fn foo() -> impl Foo + Bar {}\n+\n+            fn main() {\n+                let s<|>t = foo();\n+            }\n+            \",\n+            &[\"impl Foo + Bar\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"Foo\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..12,\n+                                name: \"Foo\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..9,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Foo\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"Bar\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 13..25,\n+                                name: \"Bar\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    19..22,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Bar\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_generic_return_impl_traits_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /main.rs\n+            trait Foo<T> {}\n+            trait Bar<T> {}\n+            struct S1 {}\n+            struct S2 {}\n+\n+            fn foo() -> impl Foo<S1> + Bar<S2> {}\n+\n+            fn main() {\n+                let s<|>t = foo();\n+            }\n+            \",\n+            &[\"impl Foo<S1> + Bar<S2>\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"Foo\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..15,\n+                                name: \"Foo\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..9,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Foo\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"Bar\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 16..31,\n+                                name: \"Bar\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    22..25,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Bar\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"S1\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 32..44,\n+                                name: \"S1\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    39..41,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct S1\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"S2\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 45..57,\n+                                name: \"S2\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    52..54,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct S2\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+               \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_arg_impl_trait_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /lib.rs\n+            trait Foo {}\n+            fn foo(ar<|>g: &impl Foo) {}\n+            \",\n+            &[\"&impl Foo\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"Foo\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..12,\n+                                name: \"Foo\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..9,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Foo\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_arg_impl_traits_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /lib.rs\n+            trait Foo {}\n+            trait Bar<T> {}\n+            struct S{}\n+\n+            fn foo(ar<|>g: &impl Foo + Bar<S>) {}\n+            \",\n+            &[\"&impl Foo + Bar<S>\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"Foo\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..12,\n+                                name: \"Foo\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..9,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Foo\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"Bar\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 13..28,\n+                                name: \"Bar\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    19..22,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Bar\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"S\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 29..39,\n+                                name: \"S\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    36..37,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct S\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_arg_generic_impl_trait_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /lib.rs\n+            trait Foo<T> {}\n+            struct S {}\n+            fn foo(ar<|>g: &impl Foo<S>) {}\n+            \",\n+            &[\"&impl Foo<S>\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"Foo\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..15,\n+                                name: \"Foo\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..9,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Foo\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"S\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 16..27,\n+                                name: \"S\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    23..24,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct S\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_dyn_return_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /main.rs\n+            trait Foo {}\n+            struct S;\n+            impl Foo for S {}\n+\n+            struct B<T>{}\n+\n+            fn foo() -> B<dyn Foo> {}\n+\n+            fn main() {\n+                let s<|>t = foo();\n+            }\n+            \",\n+            &[\"B<dyn Foo>\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"B\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 41..54,\n+                                name: \"B\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    48..49,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct B\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"Foo\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..12,\n+                                name: \"Foo\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..9,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Foo\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_dyn_arg_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /lib.rs\n+            trait Foo {}\n+            fn foo(ar<|>g: &dyn Foo) {}\n+            \",\n+            &[\"&dyn Foo\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"Foo\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..12,\n+                                name: \"Foo\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..9,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Foo\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_generic_dyn_arg_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /lib.rs\n+            trait Foo<T> {}\n+            struct S {}\n+            fn foo(ar<|>g: &dyn Foo<S>) {}\n+            \",\n+            &[\"&dyn Foo<S>\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"Foo\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..15,\n+                                name: \"Foo\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..9,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Foo\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"S\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 16..27,\n+                                name: \"S\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    23..24,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct S\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_goto_type_action_links_order() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /lib.rs\n+            trait ImplTrait<T> {}\n+            trait DynTrait<T> {}\n+            struct B<T> {}\n+            struct S {}\n+\n+            fn foo(a<|>rg: &impl ImplTrait<B<dyn DynTrait<B<S>>>>) {}\n+            \",\n+            &[\"&impl ImplTrait<B<dyn DynTrait<B<S>>>>\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"ImplTrait\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..21,\n+                                name: \"ImplTrait\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..15,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait ImplTrait\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"B\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 43..57,\n+                                name: \"B\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    50..51,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct B\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"DynTrait\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 22..42,\n+                                name: \"DynTrait\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    28..36,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait DynTrait\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                        HoverGotoTypeData {\n+                            mod_path: \"S\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 58..69,\n+                                name: \"S\",\n+                                kind: STRUCT_DEF,\n+                                focus_range: Some(\n+                                    65..66,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"struct S\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n+\n+    #[test]\n+    fn test_hover_associated_type_has_goto_type_action() {\n+        let (_, actions) = check_hover_result(\n+            \"\n+            //- /main.rs\n+            trait Foo {\n+                type Item;\n+                fn get(self) -> Self::Item {}\n+            }\n+\n+            struct Bar{}\n+            struct S{}\n+\n+            impl Foo for S{\n+                type Item = Bar;\n+            }\n+\n+            fn test() -> impl Foo {\n+                S{}\n+            }\n+\n+            fn main() {\n+                let s<|>t = test().get();\n+            }\n+            \",\n+            &[\"Foo::Item<impl Foo>\"],\n+        );\n+        assert_debug_snapshot!(actions,\n+            @r###\"\n+            [\n+                GoToType(\n+                    [\n+                        HoverGotoTypeData {\n+                            mod_path: \"Foo\",\n+                            nav: NavigationTarget {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                full_range: 0..62,\n+                                name: \"Foo\",\n+                                kind: TRAIT_DEF,\n+                                focus_range: Some(\n+                                    6..9,\n+                                ),\n+                                container_name: None,\n+                                description: Some(\n+                                    \"trait Foo\",\n+                                ),\n+                                docs: None,\n+                            },\n+                        },\n+                    ],\n+                ),\n+            ]\n+            \"###);\n+    }\n }"}, {"sha": "be9ab62c0bbb666183ed1573c3f37a11ab8b21fd", "filename": "crates/ra_ide/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4575c38810c8874838d2a2b0ea1bbd789a774af6/crates%2Fra_ide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4575c38810c8874838d2a2b0ea1bbd789a774af6/crates%2Fra_ide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Flib.rs?ref=4575c38810c8874838d2a2b0ea1bbd789a774af6", "patch": "@@ -66,7 +66,7 @@ pub use crate::{\n     display::{file_structure, FunctionSignature, NavigationTarget, StructureNode},\n     expand_macro::ExpandedMacro,\n     folding_ranges::{Fold, FoldKind},\n-    hover::{HoverAction, HoverConfig, HoverResult},\n+    hover::{HoverAction, HoverConfig, HoverGotoTypeData, HoverResult},\n     inlay_hints::{InlayHint, InlayHintsConfig, InlayKind},\n     references::{Declaration, Reference, ReferenceAccess, ReferenceKind, ReferenceSearchResult},\n     runnables::{Runnable, RunnableKind, TestId},"}, {"sha": "aa2c4ae15dc106fa18a9742689020212562c3ab3", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4575c38810c8874838d2a2b0ea1bbd789a774af6/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4575c38810c8874838d2a2b0ea1bbd789a774af6/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=4575c38810c8874838d2a2b0ea1bbd789a774af6", "patch": "@@ -296,6 +296,7 @@ impl Config {\n             set(value, \"/hoverActions/implementations\", &mut self.hover.implementations);\n             set(value, \"/hoverActions/run\", &mut self.hover.run);\n             set(value, \"/hoverActions/debug\", &mut self.hover.debug);\n+            set(value, \"/hoverActions/gotoTypeDef\", &mut self.hover.goto_type_def);\n         } else {\n             self.hover = HoverConfig::NO_ACTIONS;\n         }"}, {"sha": "2d7e649d2dc197ff5e5e08cd68b85d765cac08be", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 43, "deletions": 5, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/4575c38810c8874838d2a2b0ea1bbd789a774af6/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4575c38810c8874838d2a2b0ea1bbd789a774af6/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=4575c38810c8874838d2a2b0ea1bbd789a774af6", "patch": "@@ -18,8 +18,8 @@ use lsp_types::{\n     TextDocumentIdentifier, Url, WorkspaceEdit,\n };\n use ra_ide::{\n-    FileId, FilePosition, FileRange, HoverAction, Query, RangeInfo, Runnable, RunnableKind,\n-    SearchScope, TextEdit,\n+    FileId, FilePosition, FileRange, HoverAction, HoverGotoTypeData, NavigationTarget, Query,\n+    RangeInfo, Runnable, RunnableKind, SearchScope, TextEdit,\n };\n use ra_prof::profile;\n use ra_project_model::TargetKind;\n@@ -1150,6 +1150,23 @@ fn debug_single_command(runnable: &lsp_ext::Runnable) -> Command {\n     }\n }\n \n+fn goto_location_command(snap: &GlobalStateSnapshot, nav: &NavigationTarget) -> Option<Command> {\n+    let value = if snap.config.client_caps.location_link {\n+        let link = to_proto::location_link(snap, None, nav.clone()).ok()?;\n+        to_value(link).ok()?\n+    } else {\n+        let range = FileRange { file_id: nav.file_id(), range: nav.range() };\n+        let location = to_proto::location(snap, range).ok()?;\n+        to_value(location).ok()?\n+    };\n+\n+    Some(Command {\n+        title: nav.name().to_string(),\n+        command: \"rust-analyzer.gotoLocation\".into(),\n+        arguments: Some(vec![value]),\n+    })\n+}\n+\n fn to_command_link(command: Command, tooltip: String) -> lsp_ext::CommandLink {\n     lsp_ext::CommandLink { tooltip: Some(tooltip), command }\n }\n@@ -1180,13 +1197,13 @@ fn show_impl_command_link(\n     None\n }\n \n-fn to_runnable_action(\n+fn runnable_action_links(\n     snap: &GlobalStateSnapshot,\n     file_id: FileId,\n     runnable: Runnable,\n ) -> Option<lsp_ext::CommandLinkGroup> {\n     let cargo_spec = CargoTargetSpec::for_file(&snap, file_id).ok()?;\n-    if should_skip_target(&runnable, cargo_spec.as_ref()) {\n+    if !snap.config.hover.runnable() || should_skip_target(&runnable, cargo_spec.as_ref()) {\n         return None;\n     }\n \n@@ -1208,6 +1225,26 @@ fn to_runnable_action(\n     })\n }\n \n+fn goto_type_action_links(\n+    snap: &GlobalStateSnapshot,\n+    nav_targets: &[HoverGotoTypeData],\n+) -> Option<lsp_ext::CommandLinkGroup> {\n+    if !snap.config.hover.goto_type_def || nav_targets.is_empty() {\n+        return None;\n+    }\n+\n+    Some(lsp_ext::CommandLinkGroup {\n+        title: Some(\"Go to \".into()),\n+        commands: nav_targets\n+            .iter()\n+            .filter_map(|it| {\n+                goto_location_command(snap, &it.nav)\n+                    .map(|cmd| to_command_link(cmd, it.mod_path.clone()))\n+            })\n+            .collect(),\n+    })\n+}\n+\n fn prepare_hover_actions(\n     snap: &GlobalStateSnapshot,\n     file_id: FileId,\n@@ -1221,7 +1258,8 @@ fn prepare_hover_actions(\n         .iter()\n         .filter_map(|it| match it {\n             HoverAction::Implementaion(position) => show_impl_command_link(snap, position),\n-            HoverAction::Runnable(r) => to_runnable_action(snap, file_id, r.clone()),\n+            HoverAction::Runnable(r) => runnable_action_links(snap, file_id, r.clone()),\n+            HoverAction::GoToType(targets) => goto_type_action_links(snap, targets),\n         })\n         .collect()\n }"}, {"sha": "e6ceb235fcf350543afa9c3429c5ebedbe79de3b", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4575c38810c8874838d2a2b0ea1bbd789a774af6/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/4575c38810c8874838d2a2b0ea1bbd789a774af6/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=4575c38810c8874838d2a2b0ea1bbd789a774af6", "patch": "@@ -510,6 +510,11 @@\n                     \"type\": \"boolean\",\n                     \"default\": true\n                 },\n+                \"rust-analyzer.hoverActions.gotoTypeDef\": {\n+                    \"markdownDescription\": \"Whether to show `Go to Type Definition` action. Only applies when `#rust-analyzer.hoverActions.enable#` is set.\",\n+                    \"type\": \"boolean\",\n+                    \"default\": true\n+                },\n                 \"rust-analyzer.linkedProjects\": {\n                     \"markdownDescription\": \"Disable project auto-discovery in favor of explicitly specified set of projects.  \\nElements must be paths pointing to Cargo.toml, rust-project.json, or JSON objects in rust-project.json format\",\n                     \"type\": \"array\","}, {"sha": "48a25495fb96ef0c67830fe916658ee3d29d2ae2", "filename": "editors/code/src/commands.ts", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4575c38810c8874838d2a2b0ea1bbd789a774af6/editors%2Fcode%2Fsrc%2Fcommands.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4575c38810c8874838d2a2b0ea1bbd789a774af6/editors%2Fcode%2Fsrc%2Fcommands.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fcommands.ts?ref=4575c38810c8874838d2a2b0ea1bbd789a774af6", "patch": "@@ -353,6 +353,20 @@ export function applyActionGroup(_ctx: Ctx): Cmd {\n     };\n }\n \n+export function gotoLocation(ctx: Ctx): Cmd {\n+    return async (locationLink: lc.LocationLink) => {\n+        const client = ctx.client;\n+        if (client) {\n+            const uri = client.protocol2CodeConverter.asUri(locationLink.targetUri);\n+            let range = client.protocol2CodeConverter.asRange(locationLink.targetSelectionRange);\n+            // collapse the range to a cursor position\n+            range = range.with({ end: range.start });\n+\n+            await vscode.window.showTextDocument(uri, { selection: range });\n+        }\n+    };\n+}\n+\n export function resolveCodeAction(ctx: Ctx): Cmd {\n     const client = ctx.client;\n     return async (params: ra.ResolveCodeActionParams) => {"}, {"sha": "9591d4fe32cd68242275ddca7e3457fc80dbccee", "filename": "editors/code/src/config.ts", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4575c38810c8874838d2a2b0ea1bbd789a774af6/editors%2Fcode%2Fsrc%2Fconfig.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4575c38810c8874838d2a2b0ea1bbd789a774af6/editors%2Fcode%2Fsrc%2Fconfig.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fconfig.ts?ref=4575c38810c8874838d2a2b0ea1bbd789a774af6", "patch": "@@ -117,7 +117,7 @@ export class Config {\n         return {\n             engine: this.get<string>(\"debug.engine\"),\n             engineSettings: this.get<object>(\"debug.engineSettings\"),\n-            openUpDebugPane: this.get<boolean>(\"debug.openUpDebugPane\"),\n+            openDebugPane: this.get<boolean>(\"debug.openDebugPane\"),\n             sourceFileMap: sourceFileMap\n         };\n     }\n@@ -135,6 +135,9 @@ export class Config {\n         return {\n             enable: this.get<boolean>(\"hoverActions.enable\"),\n             implementations: this.get<boolean>(\"hoverActions.implementations\"),\n+            run: this.get<boolean>(\"hoverActions.run\"),\n+            debug: this.get<boolean>(\"hoverActions.debug\"),\n+            gotoTypeDef: this.get<boolean>(\"hoverActions.gotoTypeDef\"),\n         };\n     }\n }"}, {"sha": "61c12dbe07494559e8bd33d63c175b21523e0300", "filename": "editors/code/src/debug.ts", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4575c38810c8874838d2a2b0ea1bbd789a774af6/editors%2Fcode%2Fsrc%2Fdebug.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4575c38810c8874838d2a2b0ea1bbd789a774af6/editors%2Fcode%2Fsrc%2Fdebug.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fdebug.ts?ref=4575c38810c8874838d2a2b0ea1bbd789a774af6", "patch": "@@ -82,7 +82,7 @@ async function getDebugConfiguration(ctx: Ctx, runnable: ra.Runnable): Promise<v\n     }\n \n     debugOutput.clear();\n-    if (ctx.config.debug.openUpDebugPane) {\n+    if (ctx.config.debug.openDebugPane) {\n         debugOutput.show(true);\n     }\n "}, {"sha": "270fbcb6448e86991fcb59dd96f6b5e8c1a23211", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4575c38810c8874838d2a2b0ea1bbd789a774af6/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/4575c38810c8874838d2a2b0ea1bbd789a774af6/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=4575c38810c8874838d2a2b0ea1bbd789a774af6", "patch": "@@ -100,6 +100,7 @@ export async function activate(context: vscode.ExtensionContext) {\n     ctx.registerCommand('applySnippetWorkspaceEdit', commands.applySnippetWorkspaceEditCommand);\n     ctx.registerCommand('resolveCodeAction', commands.resolveCodeAction);\n     ctx.registerCommand('applyActionGroup', commands.applyActionGroup);\n+    ctx.registerCommand('gotoLocation', commands.gotoLocation);\n \n     ctx.pushCleanup(activateTaskProvider(workspaceFolder));\n "}]}