{"sha": "4abb45552992da2c30df9626c1b522b3d10f789b", "node_id": "C_kwDOAAsO6NoAKDRhYmI0NTU1Mjk5MmRhMmMzMGRmOTYyNmMxYjUyMmIzZDEwZjc4OWI", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-03-29T06:32:25Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2023-03-30T16:23:40Z"}, "message": "Update `ty::VariantDef` to use `IndexVec<FieldIdx, FieldDef>`\n\nAnd while doing the updates for that, also uses `FieldIdx` in `ProjectionKind::Field` and `TypeckResults::field_indices`.\n\nThere's more places that could use it (like `rustc_const_eval` and `LayoutS`), but I tried to keep this PR from exploding to *even more* places.\n\nPart 2/? of https://github.com/rust-lang/compiler-team/issues/606", "tree": {"sha": "efe03363d6478ade62621d10126662fd1a6cd821", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/efe03363d6478ade62621d10126662fd1a6cd821"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4abb45552992da2c30df9626c1b522b3d10f789b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4abb45552992da2c30df9626c1b522b3d10f789b", "html_url": "https://github.com/rust-lang/rust/commit/4abb45552992da2c30df9626c1b522b3d10f789b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4abb45552992da2c30df9626c1b522b3d10f789b/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "10338571cfa7c2be0aeed309141ced91454d41e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/10338571cfa7c2be0aeed309141ced91454d41e1", "html_url": "https://github.com/rust-lang/rust/commit/10338571cfa7c2be0aeed309141ced91454d41e1"}], "stats": {"total": 231, "additions": 127, "deletions": 104}, "files": [{"sha": "da0456856ac639df1cea322f32d4c291b0b1420e", "filename": "compiler/rustc_borrowck/src/diagnostics/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmod.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -350,7 +350,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                     if !including_tuple_field.0 && variant.ctor_kind() == Some(CtorKind::Fn) {\n                         return None;\n                     }\n-                    Some(variant.fields[field.index()].name.to_string())\n+                    Some(variant.fields[field].name.to_string())\n                 }\n                 ty::Tuple(_) => Some(field.index().to_string()),\n                 ty::Ref(_, ty, _) | ty::RawPtr(ty::TypeAndMut { ty, .. }) => {"}, {"sha": "10bbce3776069caa6f224ea6322aea416da27be5", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -854,7 +854,7 @@ impl<'a, 'b, 'tcx> TypeVerifier<'a, 'b, 'tcx> {\n             },\n         };\n \n-        if let Some(field) = variant.fields.get(field.index()) {\n+        if let Some(field) = variant.fields.get(field) {\n             Ok(self.cx.normalize(field.ty(tcx, substs), location))\n         } else {\n             Err(FieldAccessError::OutOfRange { field_count: variant.fields.len() })\n@@ -1725,7 +1725,8 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             AggregateKind::Adt(adt_did, variant_index, substs, _, active_field_index) => {\n                 let def = tcx.adt_def(adt_did);\n                 let variant = &def.variant(variant_index);\n-                let adj_field_index = active_field_index.unwrap_or(field_index);\n+                let adj_field_index =\n+                    FieldIdx::from_usize(active_field_index.unwrap_or(field_index));\n                 if let Some(field) = variant.fields.get(adj_field_index) {\n                     Ok(self.normalize(field.ty(tcx, substs), location))\n                 } else {"}, {"sha": "1b69862ce2ca1642c81eb71a7b04f6d64733ecf1", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -701,7 +701,8 @@ impl<'tcx> CPlace<'tcx> {\n                     };\n                 }\n                 ty::Adt(adt_def, substs) if layout.ty.is_simd() => {\n-                    let f0_ty = adt_def.non_enum_variant().fields[0].ty(fx.tcx, substs);\n+                    let f0 = &adt_def.non_enum_variant().fields[FieldIdx::from_u32(0)];\n+                    let f0_ty = f0.ty(fx.tcx, substs);\n \n                     match f0_ty.kind() {\n                         ty::Array(_, _) => {"}, {"sha": "c3439591b920a68d2daef463a7205bbfb0affcec", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/metadata/enums/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Fmetadata%2Fenums%2Fmod.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -274,7 +274,8 @@ fn build_enum_variant_struct_type_di_node<'ll, 'tcx>(\n                 .map(|field_index| {\n                     let field_name = if variant_def.ctor_kind() != Some(CtorKind::Fn) {\n                         // Fields have names\n-                        Cow::from(variant_def.fields[field_index].name.as_str())\n+                        let field = &variant_def.fields[FieldIdx::from_usize(field_index)];\n+                        Cow::from(field.name.as_str())\n                     } else {\n                         // Tuple-like\n                         super::tuple_field_name(field_index)"}, {"sha": "4d54c01830bc0f27d63263348b4a689b699aa6f9", "filename": "compiler/rustc_const_eval/src/const_eval/valtrees.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fvaltrees.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -8,7 +8,7 @@ use crate::interpret::{\n use crate::interpret::{MPlaceTy, Value};\n use rustc_middle::ty::{self, ScalarInt, Ty, TyCtxt};\n use rustc_span::source_map::DUMMY_SP;\n-use rustc_target::abi::{Align, VariantIdx, FIRST_VARIANT};\n+use rustc_target::abi::{Align, FieldIdx, VariantIdx, FIRST_VARIANT};\n \n #[instrument(skip(ecx), level = \"debug\")]\n fn branches<'tcx>(\n@@ -412,6 +412,7 @@ fn valtree_into_mplace<'tcx>(\n \n                         let inner_ty = match ty.kind() {\n                             ty::Adt(def, substs) => {\n+                                let i = FieldIdx::from_usize(i);\n                                 def.variant(FIRST_VARIANT).fields[i].ty(tcx, substs)\n                             }\n                             ty::Tuple(inner_tys) => inner_tys[i],"}, {"sha": "93b5273e1b1462bc528d715f1a5fc3c92f427b9f", "filename": "compiler/rustc_const_eval/src/interpret/validity.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fvalidity.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -16,7 +16,9 @@ use rustc_middle::mir::interpret::InterpError;\n use rustc_middle::ty;\n use rustc_middle::ty::layout::{LayoutOf, TyAndLayout};\n use rustc_span::symbol::{sym, Symbol};\n-use rustc_target::abi::{Abi, Scalar as ScalarAbi, Size, VariantIdx, Variants, WrappingRange};\n+use rustc_target::abi::{\n+    Abi, FieldIdx, Scalar as ScalarAbi, Size, VariantIdx, Variants, WrappingRange,\n+};\n \n use std::hash::Hash;\n \n@@ -269,14 +271,16 @@ impl<'rt, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, '\n                 match layout.variants {\n                     Variants::Single { index } => {\n                         // Inside a variant\n-                        PathElem::Field(def.variant(index).fields[field].name)\n+                        PathElem::Field(def.variant(index).fields[FieldIdx::from_usize(field)].name)\n                     }\n                     Variants::Multiple { .. } => bug!(\"we handled variants above\"),\n                 }\n             }\n \n             // other ADTs\n-            ty::Adt(def, _) => PathElem::Field(def.non_enum_variant().fields[field].name),\n+            ty::Adt(def, _) => {\n+                PathElem::Field(def.non_enum_variant().fields[FieldIdx::from_usize(field)].name)\n+            }\n \n             // arrays/slices\n             ty::Array(..) | ty::Slice(..) => PathElem::ArrayElem(field),"}, {"sha": "cd5c92f7342ded401d0653af8341d5484a9ce28b", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -360,7 +360,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n                     }\n                     ty::Adt(adt_def, substs) => {\n                         let var = parent_ty.variant_index.unwrap_or(FIRST_VARIANT);\n-                        let Some(field) = adt_def.variant(var).fields.get(f.as_usize()) else {\n+                        let Some(field) = adt_def.variant(var).fields.get(f) else {\n                             fail_out_of_bounds(self, location);\n                             return;\n                         };"}, {"sha": "8617bca082589ad76a3c98c2d02337d33ba4c7d7", "filename": "compiler/rustc_hir_analysis/src/check/check.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fcheck.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -27,6 +27,7 @@ use rustc_middle::ty::{\n use rustc_session::lint::builtin::{UNINHABITED_STATIC, UNSUPPORTED_CALLING_CONVENTIONS};\n use rustc_span::symbol::sym;\n use rustc_span::{self, Span};\n+use rustc_target::abi::FieldIdx;\n use rustc_target::spec::abi::Abi;\n use rustc_trait_selection::traits::error_reporting::on_unimplemented::OnUnimplementedDirective;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n@@ -474,7 +475,7 @@ fn is_enum_of_nonnullable_ptr<'tcx>(\n     let [var_one, var_two] = &adt_def.variants().raw[..] else {\n         return false;\n     };\n-    let (([], [field]) | ([field], [])) = (&var_one.fields[..], &var_two.fields[..]) else {\n+    let (([], [field]) | ([field], [])) = (&var_one.fields.raw[..], &var_two.fields.raw[..]) else {\n         return false;\n     };\n     matches!(field.ty(tcx, substs).kind(), ty::FnPtr(..) | ty::Ref(..))\n@@ -893,7 +894,7 @@ pub fn check_simd(tcx: TyCtxt<'_>, sp: Span, def_id: LocalDefId) {\n             struct_span_err!(tcx.sess, sp, E0075, \"SIMD vector cannot be empty\").emit();\n             return;\n         }\n-        let e = fields[0].ty(tcx, substs);\n+        let e = fields[FieldIdx::from_u32(0)].ty(tcx, substs);\n         if !fields.iter().all(|f| f.ty(tcx, substs) == e) {\n             struct_span_err!(tcx.sess, sp, E0076, \"SIMD vector should be homogeneous\")\n                 .span_label(sp, \"SIMD elements must have the same type\")"}, {"sha": "0d482b53afef8806d4b702ed2188326d0297f65c", "filename": "compiler/rustc_hir_analysis/src/check/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fintrinsicck.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -5,6 +5,7 @@ use rustc_middle::ty::{self, Article, FloatTy, IntTy, Ty, TyCtxt, TypeVisitableE\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n use rustc_span::{Symbol, DUMMY_SP};\n+use rustc_target::abi::FieldIdx;\n use rustc_target::asm::{InlineAsmReg, InlineAsmRegClass, InlineAsmRegOrRegClass, InlineAsmType};\n \n pub struct InlineAsmCtxt<'a, 'tcx> {\n@@ -82,7 +83,7 @@ impl<'a, 'tcx> InlineAsmCtxt<'a, 'tcx> {\n             }\n             ty::Adt(adt, substs) if adt.repr().simd() => {\n                 let fields = &adt.non_enum_variant().fields;\n-                let elem_ty = fields[0].ty(self.tcx, substs);\n+                let elem_ty = fields[FieldIdx::from_u32(0)].ty(self.tcx, substs);\n                 match elem_ty.kind() {\n                     ty::Never | ty::Error(_) => return None,\n                     ty::Int(IntTy::I8) | ty::Uint(UintTy::U8) => {"}, {"sha": "24cc58ee3449cab723ad5d74c859e234e5691843", "filename": "compiler/rustc_hir_analysis/src/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -1030,7 +1030,7 @@ fn check_type_defn<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item<'tcx>, all_sized: b\n             // intermediate types must be sized.\n             let needs_drop_copy = || {\n                 packed && {\n-                    let ty = tcx.type_of(variant.fields.last().unwrap().did).subst_identity();\n+                    let ty = tcx.type_of(variant.fields.raw.last().unwrap().did).subst_identity();\n                     let ty = tcx.erase_regions(ty);\n                     if ty.needs_infer() {\n                         tcx.sess\n@@ -1046,7 +1046,7 @@ fn check_type_defn<'tcx>(tcx: TyCtxt<'tcx>, item: &hir::Item<'tcx>, all_sized: b\n             let all_sized = all_sized || variant.fields.is_empty() || needs_drop_copy();\n             let unsized_len = if all_sized { 0 } else { 1 };\n             for (idx, field) in\n-                variant.fields[..variant.fields.len() - unsized_len].iter().enumerate()\n+                variant.fields.raw[..variant.fields.len() - unsized_len].iter().enumerate()\n             {\n                 let last = idx == variant.fields.len() - 1;\n                 let field_id = field.did.expect_local();"}, {"sha": "ac7c68d9c4b3034b17e71423b5e8b3083c551fe6", "filename": "compiler/rustc_hir_analysis/src/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_analysis%2Fsrc%2Fcoherence%2Fbuiltin.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -486,8 +486,7 @@ pub fn coerce_unsized_info<'tcx>(tcx: TyCtxt<'tcx>, impl_did: LocalDefId) -> Coe\n             // U` can be coerced to `*mut V` if `U: Unsize<V>`.\n             let fields = &def_a.non_enum_variant().fields;\n             let diff_fields = fields\n-                .iter()\n-                .enumerate()\n+                .iter_enumerated()\n                 .filter_map(|(i, f)| {\n                     let (a, b) = (f.ty(tcx, substs_a), f.ty(tcx, substs_b));\n "}, {"sha": "1481c038cfebb6a2713bef6f16e680b6c7e5c81d", "filename": "compiler/rustc_hir_typeck/src/cast.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fcast.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -103,13 +103,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         Ok(match *t.kind() {\n             ty::Slice(_) | ty::Str => Some(PointerKind::Length),\n             ty::Dynamic(ref tty, _, ty::Dyn) => Some(PointerKind::VTable(tty.principal_def_id())),\n-            ty::Adt(def, substs) if def.is_struct() => match def.non_enum_variant().fields.last() {\n-                None => Some(PointerKind::Thin),\n-                Some(f) => {\n-                    let field_ty = self.field_ty(span, f, substs);\n-                    self.pointer_kind(field_ty, span)?\n+            ty::Adt(def, substs) if def.is_struct() => {\n+                match def.non_enum_variant().fields.raw.last() {\n+                    None => Some(PointerKind::Thin),\n+                    Some(f) => {\n+                        let field_ty = self.field_ty(span, f, substs);\n+                        self.pointer_kind(field_ty, span)?\n+                    }\n                 }\n-            },\n+            }\n             ty::Tuple(fields) => match fields.last() {\n                 None => Some(PointerKind::Thin),\n                 Some(&f) => self.pointer_kind(f, span)?,"}, {"sha": "30d307948a6ca8c835798acc9aea52a0e42eda1b", "filename": "compiler/rustc_hir_typeck/src/demand.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fdemand.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -19,6 +19,7 @@ use rustc_middle::ty::relate::TypeRelation;\n use rustc_middle::ty::{self, Article, AssocItem, Ty, TypeAndMut, TypeVisitableExt};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{BytePos, Span};\n+use rustc_target::abi::FieldIdx;\n use rustc_trait_selection::infer::InferCtxtExt as _;\n use rustc_trait_selection::traits::error_reporting::method_chain::CollectAllMismatches;\n use rustc_trait_selection::traits::ObligationCause;\n@@ -850,7 +851,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     variant.fields.len() == 1\n                 })\n                 .filter_map(|variant| {\n-                    let sole_field = &variant.fields[0];\n+                    let sole_field = &variant.fields[FieldIdx::from_u32(0)];\n \n                     let field_is_local = sole_field.did.is_local();\n                     let field_is_accessible ="}, {"sha": "c17aae22ba54059859ae7833b9c449e4097cba88", "filename": "compiler/rustc_hir_typeck/src/expr.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -50,6 +50,7 @@ use rustc_span::edit_distance::find_best_match_for_name;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n+use rustc_target::abi::FieldIdx;\n use rustc_target::spec::abi::Abi::RustIntrinsic;\n use rustc_trait_selection::infer::InferCtxtExt;\n use rustc_trait_selection::traits::{self, ObligationCauseCode};\n@@ -1561,8 +1562,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let mut remaining_fields = variant\n             .fields\n-            .iter()\n-            .enumerate()\n+            .iter_enumerated()\n             .map(|(i, field)| (field.ident(tcx).normalize_to_macros_2_0(), (i, field)))\n             .collect::<FxHashMap<_, _>>();\n \n@@ -1815,7 +1815,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         &self,\n         adt_ty: Ty<'tcx>,\n         span: Span,\n-        remaining_fields: FxHashMap<Ident, (usize, &ty::FieldDef)>,\n+        remaining_fields: FxHashMap<Ident, (FieldIdx, &ty::FieldDef)>,\n         variant: &'tcx ty::VariantDef,\n         ast_fields: &'tcx [hir::ExprField<'tcx>],\n         substs: SubstsRef<'tcx>,\n@@ -2209,11 +2209,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     let (ident, def_scope) =\n                         self.tcx.adjust_ident_and_get_scope(field, base_def.did(), body_hir_id);\n                     let fields = &base_def.non_enum_variant().fields;\n-                    if let Some(index) = fields\n-                        .iter()\n-                        .position(|f| f.ident(self.tcx).normalize_to_macros_2_0() == ident)\n+                    if let Some((index, field)) = fields\n+                        .iter_enumerated()\n+                        .find(|(_, f)| f.ident(self.tcx).normalize_to_macros_2_0() == ident)\n                     {\n-                        let field = &fields[index];\n                         let field_ty = self.field_ty(expr.span, field, substs);\n                         // Save the index of all fields regardless of their visibility in case\n                         // of error recovery.\n@@ -2230,15 +2229,14 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 }\n                 ty::Tuple(tys) => {\n-                    let fstr = field.as_str();\n-                    if let Ok(index) = fstr.parse::<usize>() {\n-                        if fstr == index.to_string() {\n+                    if let Ok(index) = field.as_str().parse::<usize>() {\n+                        if field.name == sym::integer(index) {\n                             if let Some(&field_ty) = tys.get(index) {\n                                 let adjustments = self.adjust_steps(&autoderef);\n                                 self.apply_adjustments(base, adjustments);\n                                 self.register_predicates(autoderef.into_obligations());\n \n-                                self.write_field_index(expr.hir_id, index);\n+                                self.write_field_index(expr.hir_id, FieldIdx::from_usize(index));\n                                 return field_ty;\n                             }\n                         }"}, {"sha": "58902cd292c119224e7b16b8a77dc3b8a1cc93e9", "filename": "compiler/rustc_hir_typeck/src/expr_use_visitor.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fexpr_use_visitor.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -539,7 +539,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n         match with_place.place.ty().kind() {\n             ty::Adt(adt, substs) if adt.is_struct() => {\n                 // Consume those fields of the with expression that are needed.\n-                for (f_index, with_field) in adt.non_enum_variant().fields.iter().enumerate() {\n+                for (f_index, with_field) in adt.non_enum_variant().fields.iter_enumerated() {\n                     let is_mentioned = fields\n                         .iter()\n                         .any(|f| self.mc.typeck_results.opt_field_index(f.hir_id) == Some(f_index));\n@@ -548,7 +548,7 @@ impl<'a, 'tcx> ExprUseVisitor<'a, 'tcx> {\n                             &*with_expr,\n                             with_place.clone(),\n                             with_field.ty(self.tcx(), substs),\n-                            ProjectionKind::Field(f_index as u32, FIRST_VARIANT),\n+                            ProjectionKind::Field(f_index, FIRST_VARIANT),\n                         );\n                         self.delegate_consume(&field_place, field_place.hir_id);\n                     }"}, {"sha": "fdf178c3ea79ec69ea46a24f6fc567dcf48b8015", "filename": "compiler/rustc_hir_typeck/src/fn_ctxt/_impl.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Ffn_ctxt%2F_impl.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -33,6 +33,7 @@ use rustc_span::def_id::LocalDefId;\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Span;\n+use rustc_target::abi::FieldIdx;\n use rustc_trait_selection::traits::error_reporting::TypeErrCtxtExt as _;\n use rustc_trait_selection::traits::{self, NormalizeExt, ObligationCauseCode, ObligationCtxt};\n \n@@ -147,7 +148,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n-    pub fn write_field_index(&self, hir_id: hir::HirId, index: usize) {\n+    pub fn write_field_index(&self, hir_id: hir::HirId, index: FieldIdx) {\n         self.typeck_results.borrow_mut().field_indices_mut().insert(hir_id, index);\n     }\n "}, {"sha": "901acffe1c8c5b14b14aff970a346aa8e7403a72", "filename": "compiler/rustc_hir_typeck/src/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fintrinsicck.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -4,7 +4,7 @@ use rustc_hir as hir;\n use rustc_index::vec::Idx;\n use rustc_middle::ty::layout::{LayoutError, SizeSkeleton};\n use rustc_middle::ty::{self, Ty, TyCtxt, TypeVisitableExt};\n-use rustc_target::abi::{Pointer, VariantIdx};\n+use rustc_target::abi::{FieldIdx, Pointer, VariantIdx};\n \n use super::FnCtxt;\n \n@@ -28,7 +28,7 @@ fn unpack_option_like<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Ty<'tcx> {\n         }\n \n         if def.variant(data_idx).fields.len() == 1 {\n-            return def.variant(data_idx).fields[0].ty(tcx, substs);\n+            return def.variant(data_idx).fields[FieldIdx::from_u32(0)].ty(tcx, substs);\n         }\n     }\n "}, {"sha": "6c861b5930a1ebe48f4605a14592d64e96df22aa", "filename": "compiler/rustc_hir_typeck/src/mem_categorization.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmem_categorization.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -61,7 +61,7 @@ use rustc_hir::pat_util::EnumerateAndAdjustIterator;\n use rustc_hir::PatKind;\n use rustc_infer::infer::InferCtxt;\n use rustc_span::Span;\n-use rustc_target::abi::{VariantIdx, FIRST_VARIANT};\n+use rustc_target::abi::{FieldIdx, VariantIdx, FIRST_VARIANT};\n use rustc_trait_selection::infer::InferCtxtExt;\n \n pub(crate) trait HirNode {\n@@ -330,7 +330,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n                     expr,\n                     base,\n                     expr_ty,\n-                    ProjectionKind::Field(field_idx as u32, FIRST_VARIANT),\n+                    ProjectionKind::Field(field_idx, FIRST_VARIANT),\n                 ))\n             }\n \n@@ -674,7 +674,8 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n \n                 for (i, subpat) in subpats.iter().enumerate_and_adjust(total_fields, dots_pos) {\n                     let subpat_ty = self.pat_ty_adjusted(subpat)?;\n-                    let projection_kind = ProjectionKind::Field(i as u32, FIRST_VARIANT);\n+                    let projection_kind =\n+                        ProjectionKind::Field(FieldIdx::from_usize(i), FIRST_VARIANT);\n                     let sub_place =\n                         self.cat_projection(pat, place_with_id.clone(), subpat_ty, projection_kind);\n                     self.cat_pattern_(sub_place, subpat, op)?;\n@@ -689,7 +690,8 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n \n                 for (i, subpat) in subpats.iter().enumerate_and_adjust(total_fields, dots_pos) {\n                     let subpat_ty = self.pat_ty_adjusted(subpat)?;\n-                    let projection_kind = ProjectionKind::Field(i as u32, variant_index);\n+                    let projection_kind =\n+                        ProjectionKind::Field(FieldIdx::from_usize(i), variant_index);\n                     let sub_place =\n                         self.cat_projection(pat, place_with_id.clone(), subpat_ty, projection_kind);\n                     self.cat_pattern_(sub_place, subpat, op)?;\n@@ -714,7 +716,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n                         pat,\n                         place_with_id.clone(),\n                         field_ty,\n-                        ProjectionKind::Field(field_index as u32, variant_index),\n+                        ProjectionKind::Field(field_index, variant_index),\n                     );\n                     self.cat_pattern_(field_place, fp.pat, op)?;\n                 }"}, {"sha": "5c50619f4c3c407686e91e64ab1fd505908805d2", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -1815,7 +1815,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     .variants()\n                     .iter()\n                     .flat_map(|variant| {\n-                        let [field] = &variant.fields[..] else { return None; };\n+                        let [field] = &variant.fields.raw[..] else { return None; };\n                         let field_ty = field.ty(tcx, substs);\n \n                         // Skip `_`, since that'll just lead to ambiguity."}, {"sha": "241535b29c5f8eb85dce1905b756f24bbc88c31a", "filename": "compiler/rustc_hir_typeck/src/pat.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fpat.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -19,6 +19,7 @@ use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{BytePos, DUMMY_SP};\n+use rustc_target::abi::FieldIdx;\n use rustc_trait_selection::traits::{ObligationCause, Pattern};\n use ty::VariantDef;\n \n@@ -1091,19 +1092,21 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 bug!(\"unexpected pattern type {:?}\", pat_ty);\n             };\n             for (i, subpat) in subpats.iter().enumerate_and_adjust(variant.fields.len(), ddpos) {\n-                let field_ty = self.field_ty(subpat.span, &variant.fields[i], substs);\n+                let field = &variant.fields[FieldIdx::from_usize(i)];\n+                let field_ty = self.field_ty(subpat.span, field, substs);\n                 self.check_pat(subpat, field_ty, def_bm, ti);\n \n                 self.tcx.check_stability(\n-                    variant.fields[i].did,\n+                    variant.fields[FieldIdx::from_usize(i)].did,\n                     Some(pat.hir_id),\n                     subpat.span,\n                     None,\n                 );\n             }\n         } else {\n             // Pattern has wrong number of fields.\n-            let e = self.e0023(pat.span, res, qpath, subpats, &variant.fields, expected, had_err);\n+            let e =\n+                self.e0023(pat.span, res, qpath, subpats, &variant.fields.raw, expected, had_err);\n             on_error(e);\n             return tcx.ty_error(e);\n         }\n@@ -1333,8 +1336,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         // Index the struct fields' types.\n         let field_map = variant\n             .fields\n-            .iter()\n-            .enumerate()\n+            .iter_enumerated()\n             .map(|(i, field)| (field.ident(self.tcx).normalize_to_macros_2_0(), (i, field)))\n             .collect::<FxHashMap<_, _>>();\n "}, {"sha": "504da7dc090c91498ec1fb5a6f00d01ea571ef3f", "filename": "compiler/rustc_hir_typeck/src/upvar.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fupvar.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -1405,15 +1405,15 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         ProjectionKind::Field(..)\n                     ))\n                 );\n-                def.variants().get(FIRST_VARIANT).unwrap().fields.iter().enumerate().any(\n+                def.variants().get(FIRST_VARIANT).unwrap().fields.iter_enumerated().any(\n                     |(i, field)| {\n                         let paths_using_field = captured_by_move_projs\n                             .iter()\n                             .filter_map(|projs| {\n                                 if let ProjectionKind::Field(field_idx, _) =\n                                     projs.first().unwrap().kind\n                                 {\n-                                    if (field_idx as usize) == i { Some(&projs[1..]) } else { None }\n+                                    if field_idx == i { Some(&projs[1..]) } else { None }\n                                 } else {\n                                     unreachable!();\n                                 }\n@@ -1446,7 +1446,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .filter_map(|projs| {\n                             if let ProjectionKind::Field(field_idx, _) = projs.first().unwrap().kind\n                             {\n-                                if (field_idx as usize) == i { Some(&projs[1..]) } else { None }\n+                                if field_idx.index() == i { Some(&projs[1..]) } else { None }\n                             } else {\n                                 unreachable!();\n                             }"}, {"sha": "8ad143247e8138daf79d7a03d79e673dc4fdaffa", "filename": "compiler/rustc_infer/src/infer/error_reporting/suggest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fsuggest.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -10,6 +10,7 @@ use rustc_middle::traits::{\n use rustc_middle::ty::print::with_no_trimmed_paths;\n use rustc_middle::ty::{self as ty, IsSuggestable, Ty, TypeVisitableExt};\n use rustc_span::{sym, BytePos, Span};\n+use rustc_target::abi::FieldIdx;\n \n use crate::errors::{\n     ConsiderAddingAwait, SuggAddLetForLetChains, SuggestRemoveSemiOrReturnBinding,\n@@ -109,7 +110,7 @@ impl<'tcx> TypeErrCtxt<'_, 'tcx> {\n                         variant.fields.len() == 1 && variant.ctor_kind() == Some(CtorKind::Fn)\n                     })\n                     .filter_map(|variant| {\n-                        let sole_field = &variant.fields[0];\n+                        let sole_field = &variant.fields[FieldIdx::from_u32(0)];\n                         let sole_field_ty = sole_field.ty(self.tcx, substs);\n                         if self.same_type_modulo_infer(sole_field_ty, exp_found.found) {\n                             let variant_path ="}, {"sha": "a6ba742201a3b2bcb67581cc8a5a68eabb8c2aca", "filename": "compiler/rustc_lint/src/types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ftypes.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -770,7 +770,7 @@ pub(crate) fn repr_nullable_ptr<'tcx>(\n     debug!(\"is_repr_nullable_ptr(cx, ty = {:?})\", ty);\n     if let ty::Adt(ty_def, substs) = ty.kind() {\n         let field_ty = match &ty_def.variants().raw[..] {\n-            [var_one, var_two] => match (&var_one.fields[..], &var_two.fields[..]) {\n+            [var_one, var_two] => match (&var_one.fields.raw[..], &var_two.fields.raw[..]) {\n                 ([], [field]) | ([field], []) => field.ty(cx.tcx, substs),\n                 _ => return None,\n             },"}, {"sha": "80b4c964ce402b2b0c1e78475ae4ce7f267d1032", "filename": "compiler/rustc_middle/src/hir/place.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fplace.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -2,7 +2,7 @@ use crate::ty;\n use crate::ty::Ty;\n \n use rustc_hir::HirId;\n-use rustc_target::abi::VariantIdx;\n+use rustc_target::abi::{FieldIdx, VariantIdx};\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n #[derive(TypeFoldable, TypeVisitable)]\n@@ -27,7 +27,7 @@ pub enum ProjectionKind {\n     /// the field. The field is identified by which variant\n     /// it appears in along with a field index. The variant\n     /// is used for enums.\n-    Field(u32, VariantIdx),\n+    Field(FieldIdx, VariantIdx),\n \n     /// Some index like `B[x]`, where `B` is the base\n     /// expression. We don't preserve the index `x` because"}, {"sha": "ac28ef5276cf82b162a009408d5f1dcc456881ec", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -43,7 +43,7 @@ impl<'tcx> PlaceTy<'tcx> {\n                         &adt_def.variant(variant_index)\n                     }\n                 };\n-                let field_def = &variant_def.fields[f.index()];\n+                let field_def = &variant_def.fields[f];\n                 field_def.ty(tcx, substs)\n             }\n             ty::Tuple(tys) => tys[f.index()],"}, {"sha": "82a7cf785173439daa484a8994bf19fda4984a96", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -784,7 +784,7 @@ impl<'tcx> fmt::Display for Pat<'tcx> {\n                             if let PatKind::Wild = p.pattern.kind {\n                                 continue;\n                             }\n-                            let name = variant.fields[p.field.index()].name;\n+                            let name = variant.fields[p.field].name;\n                             write!(f, \"{}{}: {}\", start_or_comma(), name, p.pattern)?;\n                             printed += 1;\n                         }"}, {"sha": "cd0f7e8daf1d6d64ccf714fd2c5e43e0cfb54b4b", "filename": "compiler/rustc_middle/src/ty/adjustment.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -3,6 +3,7 @@ use rustc_hir as hir;\n use rustc_hir::lang_items::LangItem;\n use rustc_macros::HashStable;\n use rustc_span::Span;\n+use rustc_target::abi::FieldIdx;\n \n #[derive(Clone, Copy, Debug, PartialEq, Eq, TyEncodable, TyDecodable, Hash, HashStable)]\n pub enum PointerCast {\n@@ -208,5 +209,5 @@ pub struct CoerceUnsizedInfo {\n #[derive(Clone, Copy, TyEncodable, TyDecodable, Debug, HashStable)]\n pub enum CustomCoerceUnsized {\n     /// Records the index of the field being coerced.\n-    Struct(usize),\n+    Struct(FieldIdx),\n }"}, {"sha": "f29bf92b0ed9df01761d61a7a578a3c1c2f03526", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -158,12 +158,12 @@ impl<'tcx> CapturedPlace<'tcx> {\n         for proj in self.place.projections.iter() {\n             match proj.kind {\n                 HirProjectionKind::Field(idx, variant) => match ty.kind() {\n-                    ty::Tuple(_) => write!(&mut symbol, \"__{}\", idx).unwrap(),\n+                    ty::Tuple(_) => write!(&mut symbol, \"__{}\", idx.index()).unwrap(),\n                     ty::Adt(def, ..) => {\n                         write!(\n                             &mut symbol,\n                             \"__{}\",\n-                            def.variant(variant).fields[idx as usize].name.as_str(),\n+                            def.variant(variant).fields[idx].name.as_str(),\n                         )\n                         .unwrap();\n                     }\n@@ -356,11 +356,11 @@ pub fn place_to_string_for_capture<'tcx>(tcx: TyCtxt<'tcx>, place: &HirPlace<'tc\n                     curr_string = format!(\n                         \"{}.{}\",\n                         curr_string,\n-                        def.variant(variant).fields[idx as usize].name.as_str()\n+                        def.variant(variant).fields[idx].name.as_str()\n                     );\n                 }\n                 ty::Tuple(_) => {\n-                    curr_string = format!(\"{}.{}\", curr_string, idx);\n+                    curr_string = format!(\"{}.{}\", curr_string, idx.index());\n                 }\n                 _ => {\n                     bug!("}, {"sha": "0f70b315aa6ee10db8117de47607bc8a46092d81", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -5,7 +5,6 @@ use crate::ty::{self, ReprOptions, Ty, TyCtxt, TypeVisitableExt};\n use rustc_errors::{DiagnosticBuilder, Handler, IntoDiagnostic};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n-use rustc_index::vec::Idx;\n use rustc_session::config::OptLevel;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n@@ -335,7 +334,7 @@ impl<'tcx> SizeSkeleton<'tcx> {\n \n                 // Get a zero-sized variant or a pointer newtype.\n                 let zero_or_ptr_variant = |i| {\n-                    let i = VariantIdx::new(i);\n+                    let i = VariantIdx::from_usize(i);\n                     let fields =\n                         def.variant(i).fields.iter().map(|field| {\n                             SizeSkeleton::compute(field.ty(tcx, substs), tcx, param_env)\n@@ -798,7 +797,8 @@ where\n                 ty::Adt(def, substs) => {\n                     match this.variants {\n                         Variants::Single { index } => {\n-                            TyMaybeWithLayout::Ty(def.variant(index).fields[i].ty(tcx, substs))\n+                            let field = &def.variant(index).fields[FieldIdx::from_usize(i)];\n+                            TyMaybeWithLayout::Ty(field.ty(tcx, substs))\n                         }\n \n                         // Discriminant field for enums (where applicable)."}, {"sha": "800a230b6544faa370b7e9c03ede2807175d7241", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -50,7 +50,7 @@ pub use rustc_session::lint::RegisteredTools;\n use rustc_span::hygiene::MacroKind;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{ExpnId, ExpnKind, Span};\n-use rustc_target::abi::{Align, Integer, IntegerType, VariantIdx};\n+use rustc_target::abi::{Align, FieldIdx, Integer, IntegerType, VariantIdx};\n pub use rustc_target::abi::{ReprFlags, ReprOptions};\n use rustc_type_ir::WithCachedTypeInfo;\n pub use subst::*;\n@@ -1891,7 +1891,7 @@ pub struct VariantDef {\n     /// Discriminant of this variant.\n     pub discr: VariantDiscr,\n     /// Fields of this variant.\n-    pub fields: Vec<FieldDef>,\n+    pub fields: IndexVec<FieldIdx, FieldDef>,\n     /// Flags of the variant (e.g. is field list non-exhaustive)?\n     flags: VariantFlags,\n }\n@@ -1918,7 +1918,7 @@ impl VariantDef {\n         variant_did: Option<DefId>,\n         ctor: Option<(CtorKind, DefId)>,\n         discr: VariantDiscr,\n-        fields: Vec<FieldDef>,\n+        fields: IndexVec<FieldIdx, FieldDef>,\n         adt_kind: AdtKind,\n         parent_did: DefId,\n         recovered: bool,\n@@ -2270,11 +2270,10 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<usize> {\n-        variant\n-            .fields\n-            .iter()\n-            .position(|field| self.hygienic_eq(ident, field.ident(self), variant.def_id))\n+    pub fn find_field_index(self, ident: Ident, variant: &VariantDef) -> Option<FieldIdx> {\n+        variant.fields.iter_enumerated().find_map(|(i, field)| {\n+            self.hygienic_eq(ident, field.ident(self), variant.def_id).then_some(i)\n+        })\n     }\n \n     /// Returns `true` if the impls are the same polarity and the trait either"}, {"sha": "5ea77833af25522fc6553d483dc85d7e84cfc907", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -22,7 +22,7 @@ use rustc_index::vec::Idx;\n use rustc_macros::HashStable;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::Span;\n-use rustc_target::abi::{VariantIdx, FIRST_VARIANT};\n+use rustc_target::abi::{FieldIdx, VariantIdx, FIRST_VARIANT};\n use rustc_target::spec::abi::{self, Abi};\n use std::borrow::Cow;\n use std::cmp::Ordering;\n@@ -1903,7 +1903,7 @@ impl<'tcx> Ty<'tcx> {\n             Adt(def, substs) => {\n                 assert!(def.repr().simd(), \"`simd_size_and_type` called on non-SIMD type\");\n                 let variant = def.non_enum_variant();\n-                let f0_ty = variant.fields[0].ty(tcx, substs);\n+                let f0_ty = variant.fields[FieldIdx::from_u32(0)].ty(tcx, substs);\n \n                 match f0_ty.kind() {\n                     // If the first field is an array, we assume it is the only field and its"}, {"sha": "47943b94c3b18b883029efceeb92f2669f779f9c", "filename": "compiler/rustc_middle/src/ty/typeck_results.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ftypeck_results.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -25,6 +25,7 @@ use rustc_macros::HashStable;\n use rustc_middle::mir::FakeReadCause;\n use rustc_session::Session;\n use rustc_span::Span;\n+use rustc_target::abi::FieldIdx;\n use std::{collections::hash_map::Entry, hash::Hash, iter};\n \n use super::RvalueScopes;\n@@ -42,7 +43,7 @@ pub struct TypeckResults<'tcx> {\n     /// or patterns (`S { field }`). The index is often useful by itself, but to learn more\n     /// about the field you also need definition of the variant to which the field\n     /// belongs, but it may not exist if it's a tuple field (`tuple.0`).\n-    field_indices: ItemLocalMap<usize>,\n+    field_indices: ItemLocalMap<FieldIdx>,\n \n     /// Stores the types for various nodes in the AST. Note that this table\n     /// is not guaranteed to be populated outside inference. See\n@@ -313,19 +314,19 @@ impl<'tcx> TypeckResults<'tcx> {\n         LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.type_dependent_defs }\n     }\n \n-    pub fn field_indices(&self) -> LocalTableInContext<'_, usize> {\n+    pub fn field_indices(&self) -> LocalTableInContext<'_, FieldIdx> {\n         LocalTableInContext { hir_owner: self.hir_owner, data: &self.field_indices }\n     }\n \n-    pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, usize> {\n+    pub fn field_indices_mut(&mut self) -> LocalTableInContextMut<'_, FieldIdx> {\n         LocalTableInContextMut { hir_owner: self.hir_owner, data: &mut self.field_indices }\n     }\n \n-    pub fn field_index(&self, id: hir::HirId) -> usize {\n+    pub fn field_index(&self, id: hir::HirId) -> FieldIdx {\n         self.field_indices().get(id).cloned().expect(\"no index for a field\")\n     }\n \n-    pub fn opt_field_index(&self, id: hir::HirId) -> Option<usize> {\n+    pub fn opt_field_index(&self, id: hir::HirId) -> Option<FieldIdx> {\n         self.field_indices().get(id).cloned()\n     }\n "}, {"sha": "d3565b28ae5f9df63c4db3cfba570531f32d7aa1", "filename": "compiler/rustc_middle/src/ty/util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Futil.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -235,7 +235,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                     if !def.is_struct() {\n                         break;\n                     }\n-                    match def.non_enum_variant().fields.last() {\n+                    match def.non_enum_variant().fields.raw.last() {\n                         Some(field) => {\n                             f();\n                             ty = field.ty(self, substs);\n@@ -309,7 +309,7 @@ impl<'tcx> TyCtxt<'tcx> {\n                 (&ty::Adt(a_def, a_substs), &ty::Adt(b_def, b_substs))\n                     if a_def == b_def && a_def.is_struct() =>\n                 {\n-                    if let Some(f) = a_def.non_enum_variant().fields.last() {\n+                    if let Some(f) = a_def.non_enum_variant().fields.raw.last() {\n                         a = f.ty(self, a_substs);\n                         b = f.ty(self, b_substs);\n                     } else {"}, {"sha": "fb775766c654101198be466400f1ce35d3299f3c", "filename": "compiler/rustc_mir_build/src/build/expr/as_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fexpr%2Fas_place.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -90,7 +90,7 @@ fn convert_to_hir_projections_and_truncate_for_capture(\n             ProjectionElem::Deref => HirProjectionKind::Deref,\n             ProjectionElem::Field(field, _) => {\n                 let variant = variant.unwrap_or(FIRST_VARIANT);\n-                HirProjectionKind::Field(field.index() as u32, variant)\n+                HirProjectionKind::Field(*field, variant)\n             }\n             ProjectionElem::Downcast(.., idx) => {\n                 // We don't expect to see multi-variant enums here, as earlier"}, {"sha": "8e2e92e6f6a9478a1a576eeba0d16ac6ea1ba2c4", "filename": "compiler/rustc_mir_build/src/thir/cx/expr.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fcx%2Fexpr.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -733,7 +733,7 @@ impl<'tcx> Cx<'tcx> {\n             hir::ExprKind::Field(ref source, ..) => ExprKind::Field {\n                 lhs: self.mirror_expr(source),\n                 variant_index: FIRST_VARIANT,\n-                name: FieldIdx::new(self.typeck_results.field_index(expr.hir_id)),\n+                name: self.typeck_results.field_index(expr.hir_id),\n             },\n             hir::ExprKind::Cast(ref source, ref cast_ty) => {\n                 // Check for a user-given type annotation on this `cast`\n@@ -1053,7 +1053,7 @@ impl<'tcx> Cx<'tcx> {\n                 HirProjectionKind::Field(field, variant_index) => ExprKind::Field {\n                     lhs: self.thir.exprs.push(captured_place_expr),\n                     variant_index,\n-                    name: FieldIdx::new(field as usize),\n+                    name: field,\n                 },\n                 HirProjectionKind::Index | HirProjectionKind::Subslice => {\n                     // We don't capture these projections, so we can ignore them here\n@@ -1107,7 +1107,7 @@ impl<'tcx> Cx<'tcx> {\n         fields\n             .iter()\n             .map(|field| FieldExpr {\n-                name: FieldIdx::new(self.typeck_results.field_index(field.hir_id)),\n+                name: self.typeck_results.field_index(field.hir_id),\n                 expr: self.mirror_expr(field.expr),\n             })\n             .collect()"}, {"sha": "9ac92f6e0a611ec90bca4704a366f1de2bd29ec8", "filename": "compiler/rustc_mir_build/src/thir/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fmod.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -357,7 +357,7 @@ impl<'a, 'tcx> PatCtxt<'a, 'tcx> {\n                 let subpatterns = fields\n                     .iter()\n                     .map(|field| FieldPat {\n-                        field: FieldIdx::new(self.typeck_results.field_index(field.hir_id)),\n+                        field: self.typeck_results.field_index(field.hir_id),\n                         pattern: self.lower_pattern(&field.pat),\n                     })\n                     .collect();"}, {"sha": "c8661bbcc44c00a6bb7703175dbf7e8a1106f728", "filename": "compiler/rustc_mir_dataflow/src/elaborate_drops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Felaborate_drops.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -411,9 +411,9 @@ where\n     fn open_drop_for_box(&mut self, adt: ty::AdtDef<'tcx>, substs: SubstsRef<'tcx>) -> BasicBlock {\n         // drop glue is sent straight to codegen\n         // box cannot be directly dereferenced\n-        let unique_ty = adt.non_enum_variant().fields[0].ty(self.tcx(), substs);\n-        let nonnull_ty =\n-            unique_ty.ty_adt_def().unwrap().non_enum_variant().fields[0].ty(self.tcx(), substs);\n+        let unique_ty = adt.non_enum_variant().fields[FieldIdx::new(0)].ty(self.tcx(), substs);\n+        let unique_variant = unique_ty.ty_adt_def().unwrap().non_enum_variant();\n+        let nonnull_ty = unique_variant.fields[FieldIdx::from_u32(0)].ty(self.tcx(), substs);\n         let ptr_ty = self.tcx().mk_imm_ptr(substs[0].expect_ty());\n \n         let unique_place = self.tcx().mk_place_field(self.place, FieldIdx::new(0), unique_ty);"}, {"sha": "85623499439b273020f4c00e2050df6cbce44dd3", "filename": "compiler/rustc_mir_transform/src/elaborate_box_derefs.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Felaborate_box_derefs.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -92,13 +92,14 @@ pub struct ElaborateBoxDerefs;\n impl<'tcx> MirPass<'tcx> for ElaborateBoxDerefs {\n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n         if let Some(def_id) = tcx.lang_items().owned_box() {\n-            let unique_did = tcx.adt_def(def_id).non_enum_variant().fields[0].did;\n+            let unique_did =\n+                tcx.adt_def(def_id).non_enum_variant().fields[FieldIdx::from_u32(0)].did;\n \n             let Some(nonnull_def) = tcx.type_of(unique_did).subst_identity().ty_adt_def() else {\n                 span_bug!(tcx.def_span(unique_did), \"expected Box to contain Unique\")\n             };\n \n-            let nonnull_did = nonnull_def.non_enum_variant().fields[0].did;\n+            let nonnull_did = nonnull_def.non_enum_variant().fields[FieldIdx::from_u32(0)].did;\n \n             let patch = MirPatch::new(body);\n "}, {"sha": "15b31d383944bacc8e19fb30285f443d503b312e", "filename": "compiler/rustc_mir_transform/src/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finline.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -907,7 +907,7 @@ impl<'tcx> Visitor<'tcx> for CostChecker<'_, 'tcx> {\n                 }\n                 ty::Adt(adt_def, substs) => {\n                     let var = parent_ty.variant_index.unwrap_or(FIRST_VARIANT);\n-                    let Some(field) = adt_def.variant(var).fields.get(f.as_usize()) else {\n+                    let Some(field) = adt_def.variant(var).fields.get(f) else {\n                         self.validation = Err(\"malformed MIR\");\n                         return;\n                     };"}, {"sha": "3f07126d244724703563aed84901ae867eaba12c", "filename": "compiler/rustc_monomorphize/src/collector.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fcollector.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -1119,7 +1119,8 @@ fn find_vtable_types_for_unsizing<'tcx>(\n             let target_fields = &target_adt_def.non_enum_variant().fields;\n \n             assert!(\n-                coerce_index < source_fields.len() && source_fields.len() == target_fields.len()\n+                coerce_index.index() < source_fields.len()\n+                    && source_fields.len() == target_fields.len()\n             );\n \n             find_vtable_types_for_unsizing("}, {"sha": "91483fe3de77453be6fd8f07cd5d5e32cb0f005f", "filename": "compiler/rustc_passes/src/dead.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_passes%2Fsrc%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fdead.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -16,6 +16,7 @@ use rustc_middle::ty::query::Providers;\n use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint;\n use rustc_span::symbol::{sym, Symbol};\n+use rustc_target::abi::FieldIdx;\n use std::mem;\n \n use crate::errors::{\n@@ -232,7 +233,7 @@ impl<'tcx> MarkSymbolVisitor<'tcx> {\n             if let PatKind::Wild = pat.kind {\n                 continue;\n             }\n-            self.insert_def_id(variant.fields[idx].did);\n+            self.insert_def_id(variant.fields[FieldIdx::from_usize(idx)].did);\n         }\n     }\n "}, {"sha": "fed9dfa5c6701fb3db169e8106249b2750db9040", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -1082,7 +1082,7 @@ impl<'tcx> Visitor<'tcx> for NamePrivacyVisitor<'tcx> {\n                 // If the expression uses FRU we need to make sure all the unmentioned fields\n                 // are checked for privacy (RFC 736). Rather than computing the set of\n                 // unmentioned fields, just check them all.\n-                for (vf_index, variant_field) in variant.fields.iter().enumerate() {\n+                for (vf_index, variant_field) in variant.fields.iter_enumerated() {\n                     let field = fields\n                         .iter()\n                         .find(|f| self.typeck_results().field_index(f.hir_id) == vf_index);"}, {"sha": "90d28c620eac582bc9b3d4ce60aaa686223f3573", "filename": "compiler/rustc_trait_selection/src/solve/project_goals.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Fproject_goals.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -351,7 +351,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for ProjectionPredicate<'tcx> {\n                 }\n \n                 ty::Adt(def, substs) if def.is_struct() => {\n-                    match def.non_enum_variant().fields.last() {\n+                    match def.non_enum_variant().fields.raw.last() {\n                         None => tcx.types.unit,\n                         Some(field_def) => {\n                             let self_ty = field_def.ty(tcx, substs);"}, {"sha": "ce3db83d33dd8a2ac2d0dfdb79bf45bae4b83350", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -407,6 +407,7 @@ impl<'tcx> assembly::GoalKind<'tcx> for TraitPredicate<'tcx> {\n                     let tail_field = a_def\n                         .non_enum_variant()\n                         .fields\n+                        .raw\n                         .last()\n                         .expect(\"expected unsized ADT to have a tail field\");\n                     let tail_field_ty = tcx.type_of(tail_field.did);"}, {"sha": "5e60bc01bb644f348f0e5387d09887aa381279fd", "filename": "compiler/rustc_trait_selection/src/traits/select/confirmation.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fconfirmation.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -1078,6 +1078,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                 let tail_field = def\n                     .non_enum_variant()\n                     .fields\n+                    .raw\n                     .last()\n                     .expect(\"expected unsized ADT to have a tail field\");\n                 let tail_field_ty = tcx.type_of(tail_field.did);"}, {"sha": "73f86f74d14f110c6f2d695e1cb312e23099c756", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -320,7 +320,7 @@ fn layout_of_uncached<'tcx>(\n             }\n \n             // Type of the first ADT field:\n-            let f0_ty = def.non_enum_variant().fields[0].ty(tcx, substs);\n+            let f0_ty = def.non_enum_variant().fields[FieldIdx::from_u32(0)].ty(tcx, substs);\n \n             // Heterogeneous SIMD vectors are not supported:\n             // (should be caught by typeck)\n@@ -456,7 +456,8 @@ fn layout_of_uncached<'tcx>(\n                     {\n                         let param_env = tcx.param_env(def.did());\n                         def.is_struct()\n-                            && match def.variants().iter().next().and_then(|x| x.fields.last()) {\n+                            && match def.variants().iter().next().and_then(|x| x.fields.raw.last())\n+                            {\n                                 Some(last_field) => tcx\n                                     .type_of(last_field.did)\n                                     .subst_identity()"}, {"sha": "cb06c7acff02a3e33a6a34f25d3ea07e1f7c1522", "filename": "compiler/rustc_ty_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4abb45552992da2c30df9626c1b522b3d10f789b/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fty.rs?ref=4abb45552992da2c30df9626c1b522b3d10f789b", "patch": "@@ -107,7 +107,7 @@ fn adt_sized_constraint(tcx: TyCtxt<'_>, def_id: DefId) -> &[Ty<'_>] {\n     let result = tcx.mk_type_list_from_iter(\n         def.variants()\n             .iter()\n-            .flat_map(|v| v.fields.last())\n+            .filter_map(|v| v.fields.raw.last())\n             .flat_map(|f| sized_constraint_for_ty(tcx, def, tcx.type_of(f.did).subst_identity())),\n     );\n \n@@ -542,7 +542,7 @@ fn unsizing_params_for_adt<'tcx>(tcx: TyCtxt<'tcx>, def_id: DefId) -> BitSet<u32\n \n     // The last field of the structure has to exist and contain type/const parameters.\n     let Some((tail_field, prefix_fields)) =\n-        def.non_enum_variant().fields.split_last() else\n+        def.non_enum_variant().fields.raw.split_last() else\n     {\n         return BitSet::new_empty(num_params);\n     };"}]}