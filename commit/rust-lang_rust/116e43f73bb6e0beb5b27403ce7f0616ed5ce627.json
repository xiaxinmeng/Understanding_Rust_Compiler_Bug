{"sha": "116e43f73bb6e0beb5b27403ce7f0616ed5ce627", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExNmU0M2Y3M2JiNmUwYmViNWIyNzQwM2NlN2YwNjE2ZWQ1Y2U2Mjc=", "commit": {"author": {"name": "Maik Klein", "email": "maikklein@googlemail.com", "date": "2017-11-23T14:06:18Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-18T15:08:49Z"}, "message": "Prefer type_of().substs over instance::ty()", "tree": {"sha": "21afa8944d2846e31aae68ec6eeac61a63cc71b2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21afa8944d2846e31aae68ec6eeac61a63cc71b2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/116e43f73bb6e0beb5b27403ce7f0616ed5ce627", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/116e43f73bb6e0beb5b27403ce7f0616ed5ce627", "html_url": "https://github.com/rust-lang/rust/commit/116e43f73bb6e0beb5b27403ce7f0616ed5ce627", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/116e43f73bb6e0beb5b27403ce7f0616ed5ce627/comments", "author": {"login": "MaikKlein", "id": 1994306, "node_id": "MDQ6VXNlcjE5OTQzMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/1994306?v=4", "gravatar_id": "", "url": "https://api.github.com/users/MaikKlein", "html_url": "https://github.com/MaikKlein", "followers_url": "https://api.github.com/users/MaikKlein/followers", "following_url": "https://api.github.com/users/MaikKlein/following{/other_user}", "gists_url": "https://api.github.com/users/MaikKlein/gists{/gist_id}", "starred_url": "https://api.github.com/users/MaikKlein/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/MaikKlein/subscriptions", "organizations_url": "https://api.github.com/users/MaikKlein/orgs", "repos_url": "https://api.github.com/users/MaikKlein/repos", "events_url": "https://api.github.com/users/MaikKlein/events{/privacy}", "received_events_url": "https://api.github.com/users/MaikKlein/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "282b231af2c7194215330588d1e5af15e5ab8990", "url": "https://api.github.com/repos/rust-lang/rust/commits/282b231af2c7194215330588d1e5af15e5ab8990", "html_url": "https://github.com/rust-lang/rust/commit/282b231af2c7194215330588d1e5af15e5ab8990"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "7b892c9057ecd3af28f7c49d4b9a381b6b965fbe", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/116e43f73bb6e0beb5b27403ce7f0616ed5ce627/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e43f73bb6e0beb5b27403ce7f0616ed5ce627/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=116e43f73bb6e0beb5b27403ce7f0616ed5ce627", "patch": "@@ -24,7 +24,7 @@ use llvm;\n use llvm::{ModuleRef, ContextRef, ValueRef};\n use llvm::debuginfo::{DIFile, DIType, DIScope, DIBuilderRef, DISubprogram, DIArray, DIFlags};\n use rustc::hir::def_id::{DefId, CrateNum};\n-use rustc::ty::subst::Substs;\n+use rustc::ty::subst::{Subst, Substs};\n \n use abi::Abi;\n use common::CrateContext;\n@@ -428,7 +428,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>,\n             // If the method does *not* belong to a trait, proceed\n             if cx.tcx().trait_id_of_impl(impl_def_id).is_none() {\n                 let impl_self_ty =\n-                    Instance::new(impl_def_id, instance.substs).ty(cx.tcx());\n+                    cx.tcx().type_of(impl_def_id).subst(cx.tcx(), instance.substs);\n \n                 // Only \"class\" methods are generally understood by LLVM,\n                 // so avoid methods on other types (e.g. `<*mut T>::null`)."}, {"sha": "6897a4aa5a516ba871d835920fd697f7740cce56", "filename": "src/librustc_trans/partitioning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/116e43f73bb6e0beb5b27403ce7f0616ed5ce627/src%2Flibrustc_trans%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/116e43f73bb6e0beb5b27403ce7f0616ed5ce627/src%2Flibrustc_trans%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fpartitioning.rs?ref=116e43f73bb6e0beb5b27403ce7f0616ed5ce627", "patch": "@@ -114,7 +114,7 @@ use std::collections::hash_map::Entry;\n use syntax::ast::NodeId;\n use syntax::symbol::{Symbol, InternedString};\n use trans_item::{MonoItem, BaseMonoItemExt, MonoItemExt, InstantiationMode};\n-use rustc::ty::Instance;\n+use rustc::ty::subst::Subst;\n \n pub use rustc::mir::mono::CodegenUnit;\n \n@@ -575,7 +575,7 @@ fn characteristic_def_id_of_trans_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             if let Some(impl_def_id) = tcx.impl_of_method(def_id) {\n                 // This is a method within an inherent impl, find out what the\n                 // self-type is:\n-                let impl_self_ty = Instance::new(impl_def_id, instance.substs).ty(tcx);\n+                let impl_self_ty = tcx.type_of(impl_def_id).subst(tcx, instance.substs);\n                 if let Some(def_id) = characteristic_def_id_of_type(impl_self_ty) {\n                     return Some(def_id);\n                 }"}]}