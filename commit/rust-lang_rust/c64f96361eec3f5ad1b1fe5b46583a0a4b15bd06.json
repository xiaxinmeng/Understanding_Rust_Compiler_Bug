{"sha": "c64f96361eec3f5ad1b1fe5b46583a0a4b15bd06", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2NGY5NjM2MWVlYzNmNWFkMWIxZmU1YjQ2NTgzYTBhNGIxNWJkMDY=", "commit": {"author": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-08-06T02:20:37Z"}, "committer": {"name": "Kevin Ballard", "email": "kevin@sb.org", "date": "2013-08-19T04:58:56Z"}, "message": "Implement .size_hint() on new vec iterators", "tree": {"sha": "119f7a7df2a0e911343414ee76d8356d24449ab3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/119f7a7df2a0e911343414ee76d8356d24449ab3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c64f96361eec3f5ad1b1fe5b46583a0a4b15bd06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c64f96361eec3f5ad1b1fe5b46583a0a4b15bd06", "html_url": "https://github.com/rust-lang/rust/commit/c64f96361eec3f5ad1b1fe5b46583a0a4b15bd06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c64f96361eec3f5ad1b1fe5b46583a0a4b15bd06/comments", "author": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lilyball", "id": 714, "node_id": "MDQ6VXNlcjcxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/714?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lilyball", "html_url": "https://github.com/lilyball", "followers_url": "https://api.github.com/users/lilyball/followers", "following_url": "https://api.github.com/users/lilyball/following{/other_user}", "gists_url": "https://api.github.com/users/lilyball/gists{/gist_id}", "starred_url": "https://api.github.com/users/lilyball/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lilyball/subscriptions", "organizations_url": "https://api.github.com/users/lilyball/orgs", "repos_url": "https://api.github.com/users/lilyball/repos", "events_url": "https://api.github.com/users/lilyball/events{/privacy}", "received_events_url": "https://api.github.com/users/lilyball/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8fff3f40f290df5bcd25bcefdc0e19f74d0af0a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/8fff3f40f290df5bcd25bcefdc0e19f74d0af0a5", "html_url": "https://github.com/rust-lang/rust/commit/8fff3f40f290df5bcd25bcefdc0e19f74d0af0a5"}], "stats": {"total": 70, "additions": 69, "deletions": 1}, "files": [{"sha": "e69cb1341bf9d4e50fcfa3defe679733c9784423", "filename": "src/libstd/vec.rs", "status": "modified", "additions": 69, "deletions": 1, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/c64f96361eec3f5ad1b1fe5b46583a0a4b15bd06/src%2Flibstd%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c64f96361eec3f5ad1b1fe5b46583a0a4b15bd06/src%2Flibstd%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fvec.rs?ref=c64f96361eec3f5ad1b1fe5b46583a0a4b15bd06", "patch": "@@ -65,7 +65,7 @@ use cmp::{Eq, TotalOrd, Ordering, Less, Equal, Greater};\n use cmp;\n use iterator::*;\n use libc::c_void;\n-use num::Zero;\n+use num::{Integer, Zero, CheckedAdd, Saturating};\n use option::{None, Option, Some};\n use ptr::to_unsafe_ptr;\n use ptr;\n@@ -209,6 +209,7 @@ pub struct SplitIterator<'self, T> {\n }\n \n impl<'self, T> Iterator<&'self [T]> for SplitIterator<'self, T> {\n+    #[inline]\n     fn next(&mut self) -> Option<&'self [T]> {\n         if self.finished { return None; }\n \n@@ -230,6 +231,21 @@ impl<'self, T> Iterator<&'self [T]> for SplitIterator<'self, T> {\n             }\n         }\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        if self.finished {\n+            return (0, Some(0))\n+        }\n+        // if the predicate doesn't match anything, we yield one slice\n+        // if it matches every element, we yield N+1 empty slices where\n+        // N is either the number of elements or the number of splits.\n+        match (self.v.len(), self.n) {\n+            (0,_) => (1, Some(1)),\n+            (_,0) => (1, Some(1)),\n+            (l,n) => (1, cmp::min(l,n).checked_add(&1u))\n+        }\n+    }\n }\n \n /// An iterator over the slices of a vector separated by elements that\n@@ -242,6 +258,7 @@ pub struct RSplitIterator<'self, T> {\n }\n \n impl<'self, T> Iterator<&'self [T]> for RSplitIterator<'self, T> {\n+    #[inline]\n     fn next(&mut self) -> Option<&'self [T]> {\n         if self.finished { return None; }\n \n@@ -263,6 +280,18 @@ impl<'self, T> Iterator<&'self [T]> for RSplitIterator<'self, T> {\n             }\n         }\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        if self.finished {\n+            return (0, Some(0))\n+        }\n+        match (self.v.len(), self.n) {\n+            (0,_) => (1, Some(1)),\n+            (_,0) => (1, Some(1)),\n+            (l,n) => (1, cmp::min(l,n).checked_add(&1u))\n+        }\n+    }\n }\n \n // Appending\n@@ -453,6 +482,7 @@ pub struct WindowIter<'self, T> {\n }\n \n impl<'self, T> Iterator<&'self [T]> for WindowIter<'self, T> {\n+    #[inline]\n     fn next(&mut self) -> Option<&'self [T]> {\n         if self.size > self.v.len() {\n             None\n@@ -462,6 +492,16 @@ impl<'self, T> Iterator<&'self [T]> for WindowIter<'self, T> {\n             ret\n         }\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        if self.size > self.v.len() {\n+            (0, Some(0))\n+        } else {\n+            let x = self.v.len() - self.size;\n+            (x.saturating_add(1), x.checked_add(&1u))\n+        }\n+    }\n }\n \n /// An iterator over a vector in (non-overlapping) chunks (`size`\n@@ -476,6 +516,7 @@ pub struct ChunkIter<'self, T> {\n }\n \n impl<'self, T> Iterator<&'self [T]> for ChunkIter<'self, T> {\n+    #[inline]\n     fn next(&mut self) -> Option<&'self [T]> {\n         if self.v.len() == 0 {\n             None\n@@ -487,9 +528,21 @@ impl<'self, T> Iterator<&'self [T]> for ChunkIter<'self, T> {\n             Some(fst)\n         }\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        if self.v.len() == 0 {\n+            (0, Some(0))\n+        } else {\n+            let (n, rem) = self.v.len().div_rem(&self.size);\n+            let n = if rem > 0 { n+1 } else { n };\n+            (n, Some(n))\n+        }\n+    }\n }\n \n impl<'self, T> DoubleEndedIterator<&'self [T]> for ChunkIter<'self, T> {\n+    #[inline]\n     fn next_back(&mut self) -> Option<&'self [T]> {\n         if self.v.len() == 0 {\n             None\n@@ -2223,6 +2276,7 @@ impl<'self, T> RandomAccessIterator<&'self T> for VecIterator<'self, T> {\n         exact\n     }\n \n+    #[inline]\n     fn idx(&self, index: uint) -> Option<&'self T> {\n         unsafe {\n             if index < self.indexable() {\n@@ -2268,6 +2322,7 @@ pub struct MoveIterator<T> {\n }\n \n impl<T> Iterator<T> for MoveIterator<T> {\n+    #[inline]\n     fn next(&mut self) -> Option<T> {\n         // this is peculiar, but is required for safety with respect\n         // to dtors. It traverses the first half of the vec, and\n@@ -2285,6 +2340,12 @@ impl<T> Iterator<T> for MoveIterator<T> {\n \n         self.v.pop_opt()\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let l = self.v.len();\n+        (l, Some(l))\n+    }\n }\n \n /// An iterator that moves out of a vector in reverse order.\n@@ -2294,9 +2355,16 @@ pub struct MoveRevIterator<T> {\n }\n \n impl<T> Iterator<T> for MoveRevIterator<T> {\n+    #[inline]\n     fn next(&mut self) -> Option<T> {\n         self.v.pop_opt()\n     }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        let l = self.v.len();\n+        (l, Some(l))\n+    }\n }\n \n impl<A> FromIterator<A> for ~[A] {"}]}