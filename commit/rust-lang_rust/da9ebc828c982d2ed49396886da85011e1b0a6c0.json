{"sha": "da9ebc828c982d2ed49396886da85011e1b0a6c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhOWViYzgyOGM5ODJkMmVkNDkzOTY4ODZkYTg1MDExZTFiMGE2YzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-03T08:28:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-06-03T08:28:27Z"}, "message": "Auto merge of #61062 - mark-i-m:mono-mv, r=eddyb,oli-obk\n\nRemove _all_ codegen dependencies on `rustc_mir` :tada:\n\n~This code is pretty self-contained. It has no references to the rest of `rustc_mir`. Moving it to its own crate means that almost all of the references from `rustc_codegen_*` to `rustc_mir` are instead moved to `rustc_monomorphize`, which should help improve compile times for the compiler a bit...~\n\nWith the help of eddyb and oli-obk, all of the dependencies of `librustc_codegen_*` on `librustc_mir` have been removed:\n- dependencies on `rustc_mir::monomorphize` were moved to `rustc::mir::mono`\n- `rustc_mir::const_eval::const_field` is made into a query.\n- `rustc_mir::interpret::type_name` is made into a query.\n\nThis should help reduce compile time when working on `rustc_mir` :clock1:\n\ncc #47849\n\nr? @eddyb", "tree": {"sha": "73fa625c505e38ec9c3de913b3a51e72d16dfb8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73fa625c505e38ec9c3de913b3a51e72d16dfb8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/da9ebc828c982d2ed49396886da85011e1b0a6c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/da9ebc828c982d2ed49396886da85011e1b0a6c0", "html_url": "https://github.com/rust-lang/rust/commit/da9ebc828c982d2ed49396886da85011e1b0a6c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/da9ebc828c982d2ed49396886da85011e1b0a6c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c57ed9d9478dcd12c854a0ef4e83c7f384ade060", "url": "https://api.github.com/repos/rust-lang/rust/commits/c57ed9d9478dcd12c854a0ef4e83c7f384ade060", "html_url": "https://github.com/rust-lang/rust/commit/c57ed9d9478dcd12c854a0ef4e83c7f384ade060"}, {"sha": "0f822d775f046df87713edf8ffb4e308fc77b3ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/0f822d775f046df87713edf8ffb4e308fc77b3ef", "html_url": "https://github.com/rust-lang/rust/commit/0f822d775f046df87713edf8ffb4e308fc77b3ef"}], "stats": {"total": 1369, "additions": 733, "deletions": 636}, "files": [{"sha": "d7191743c36f6c50f468f25e76fccb44db1eb01b", "filename": "Cargo.lock", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -2684,7 +2684,6 @@ dependencies = [\n  \"rustc_errors 0.0.0\",\n  \"rustc_fs_util 0.0.0\",\n  \"rustc_incremental 0.0.0\",\n- \"rustc_mir 0.0.0\",\n  \"rustc_target 0.0.0\",\n  \"serialize 0.0.0\",\n  \"syntax 0.0.0\",\n@@ -2703,7 +2702,6 @@ dependencies = [\n  \"rustc-demangle 0.1.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc_data_structures 0.0.0\",\n  \"rustc_metadata 0.0.0\",\n- \"rustc_mir 0.0.0\",\n  \"rustc_target 0.0.0\",\n  \"syntax 0.0.0\",\n  \"syntax_pos 0.0.0\","}, {"sha": "a364a6da2e497ff598ae3e60b90e55f567385c2b", "filename": "src/librustc/dep_graph/dep_node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fdep_node.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -49,6 +49,7 @@\n //! user of the `DepNode` API of having to know how to compute the expected\n //! fingerprint for a given set of node parameters.\n \n+use crate::mir;\n use crate::mir::interpret::GlobalId;\n use crate::hir::def_id::{CrateNum, DefId, DefIndex, CRATE_DEF_INDEX};\n use crate::hir::map::DefPathHash;"}, {"sha": "79228a5c56f2d3fa016c5a114526b8b95a474e36", "filename": "src/librustc/mir/mono.rs", "status": "modified", "additions": 258, "deletions": 1, "changes": 259, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmono.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -1,15 +1,45 @@\n use crate::hir::def_id::{DefId, CrateNum, LOCAL_CRATE};\n use crate::hir::HirId;\n use syntax::symbol::InternedString;\n-use crate::ty::{Instance, TyCtxt};\n+use syntax::attr::InlineAttr;\n+use syntax::source_map::Span;\n+use crate::ty::{Instance, InstanceDef, TyCtxt, SymbolName, subst::InternalSubsts};\n use crate::util::nodemap::FxHashMap;\n+use crate::ty::print::obsolete::DefPathBasedNames;\n+use crate::dep_graph::{WorkProductId, DepNode, WorkProduct, DepConstructor};\n use rustc_data_structures::base_n;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasherResult,\n                                            StableHasher};\n use crate::ich::{Fingerprint, StableHashingContext, NodeIdHashingMode};\n+use crate::session::config::OptLevel;\n use std::fmt;\n use std::hash::Hash;\n \n+/// Describes how a monomorphization will be instantiated in object files.\n+#[derive(PartialEq, Eq, Clone, Copy, Debug, Hash)]\n+pub enum InstantiationMode {\n+    /// There will be exactly one instance of the given MonoItem. It will have\n+    /// external linkage so that it can be linked to from other codegen units.\n+    GloballyShared {\n+        /// In some compilation scenarios we may decide to take functions that\n+        /// are typically `LocalCopy` and instead move them to `GloballyShared`\n+        /// to avoid codegenning them a bunch of times. In this situation,\n+        /// however, our local copy may conflict with other crates also\n+        /// inlining the same function.\n+        ///\n+        /// This flag indicates that this situation is occurring, and informs\n+        /// symbol name calculation that some extra mangling is needed to\n+        /// avoid conflicts. Note that this may eventually go away entirely if\n+        /// ThinLTO enables us to *always* have a globally shared instance of a\n+        /// function within one crate's compilation.\n+        may_conflict: bool,\n+    },\n+\n+    /// Each codegen unit containing a reference to the given MonoItem will\n+    /// have its own private copy of the function (with internal linkage).\n+    LocalCopy,\n+}\n+\n #[derive(PartialEq, Eq, Clone, Copy, Debug, Hash)]\n pub enum MonoItem<'tcx> {\n     Fn(Instance<'tcx>),\n@@ -31,6 +61,166 @@ impl<'tcx> MonoItem<'tcx> {\n             MonoItem::GlobalAsm(_) => 1,\n         }\n     }\n+\n+    pub fn is_generic_fn(&self) -> bool {\n+        match *self {\n+            MonoItem::Fn(ref instance) => {\n+                instance.substs.non_erasable_generics().next().is_some()\n+            }\n+            MonoItem::Static(..) |\n+            MonoItem::GlobalAsm(..) => false,\n+        }\n+    }\n+\n+    pub fn symbol_name(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> SymbolName {\n+        match *self {\n+            MonoItem::Fn(instance) => tcx.symbol_name(instance),\n+            MonoItem::Static(def_id) => {\n+                tcx.symbol_name(Instance::mono(tcx, def_id))\n+            }\n+            MonoItem::GlobalAsm(hir_id) => {\n+                let def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n+                SymbolName {\n+                    name: InternedString::intern(&format!(\"global_asm_{:?}\", def_id))\n+                }\n+            }\n+        }\n+    }\n+\n+    pub fn instantiation_mode(&self,\n+                          tcx: TyCtxt<'a, 'tcx, 'tcx>)\n+                          -> InstantiationMode {\n+        let inline_in_all_cgus =\n+            tcx.sess.opts.debugging_opts.inline_in_all_cgus.unwrap_or_else(|| {\n+                tcx.sess.opts.optimize != OptLevel::No\n+            }) && !tcx.sess.opts.cg.link_dead_code;\n+\n+        match *self {\n+            MonoItem::Fn(ref instance) => {\n+                let entry_def_id = tcx.entry_fn(LOCAL_CRATE).map(|(id, _)| id);\n+                // If this function isn't inlined or otherwise has explicit\n+                // linkage, then we'll be creating a globally shared version.\n+                if self.explicit_linkage(tcx).is_some() ||\n+                    !instance.def.requires_local(tcx) ||\n+                    Some(instance.def_id()) == entry_def_id\n+                {\n+                    return InstantiationMode::GloballyShared  { may_conflict: false }\n+                }\n+\n+                // At this point we don't have explicit linkage and we're an\n+                // inlined function. If we're inlining into all CGUs then we'll\n+                // be creating a local copy per CGU\n+                if inline_in_all_cgus {\n+                    return InstantiationMode::LocalCopy\n+                }\n+\n+                // Finally, if this is `#[inline(always)]` we're sure to respect\n+                // that with an inline copy per CGU, but otherwise we'll be\n+                // creating one copy of this `#[inline]` function which may\n+                // conflict with upstream crates as it could be an exported\n+                // symbol.\n+                match tcx.codegen_fn_attrs(instance.def_id()).inline {\n+                    InlineAttr::Always => InstantiationMode::LocalCopy,\n+                    _ => {\n+                        InstantiationMode::GloballyShared  { may_conflict: true }\n+                    }\n+                }\n+            }\n+            MonoItem::Static(..) |\n+            MonoItem::GlobalAsm(..) => {\n+                InstantiationMode::GloballyShared { may_conflict: false }\n+            }\n+        }\n+    }\n+\n+    pub fn explicit_linkage(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<Linkage> {\n+        let def_id = match *self {\n+            MonoItem::Fn(ref instance) => instance.def_id(),\n+            MonoItem::Static(def_id) => def_id,\n+            MonoItem::GlobalAsm(..) => return None,\n+        };\n+\n+        let codegen_fn_attrs = tcx.codegen_fn_attrs(def_id);\n+        codegen_fn_attrs.linkage\n+    }\n+\n+    /// Returns `true` if this instance is instantiable - whether it has no unsatisfied\n+    /// predicates.\n+    ///\n+    /// In order to codegen an item, all of its predicates must hold, because\n+    /// otherwise the item does not make sense. Type-checking ensures that\n+    /// the predicates of every item that is *used by* a valid item *do*\n+    /// hold, so we can rely on that.\n+    ///\n+    /// However, we codegen collector roots (reachable items) and functions\n+    /// in vtables when they are seen, even if they are not used, and so they\n+    /// might not be instantiable. For example, a programmer can define this\n+    /// public function:\n+    ///\n+    ///     pub fn foo<'a>(s: &'a mut ()) where &'a mut (): Clone {\n+    ///         <&mut () as Clone>::clone(&s);\n+    ///     }\n+    ///\n+    /// That function can't be codegened, because the method `<&mut () as Clone>::clone`\n+    /// does not exist. Luckily for us, that function can't ever be used,\n+    /// because that would require for `&'a mut (): Clone` to hold, so we\n+    /// can just not emit any code, or even a linker reference for it.\n+    ///\n+    /// Similarly, if a vtable method has such a signature, and therefore can't\n+    /// be used, we can just not emit it and have a placeholder (a null pointer,\n+    /// which will never be accessed) in its place.\n+    pub fn is_instantiable(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> bool {\n+        debug!(\"is_instantiable({:?})\", self);\n+        let (def_id, substs) = match *self {\n+            MonoItem::Fn(ref instance) => (instance.def_id(), instance.substs),\n+            MonoItem::Static(def_id) => (def_id, InternalSubsts::empty()),\n+            // global asm never has predicates\n+            MonoItem::GlobalAsm(..) => return true\n+        };\n+\n+        tcx.substitute_normalize_and_test_predicates((def_id, &substs))\n+    }\n+\n+    pub fn to_string(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>, debug: bool) -> String {\n+        return match *self {\n+            MonoItem::Fn(instance) => {\n+                to_string_internal(tcx, \"fn \", instance, debug)\n+            },\n+            MonoItem::Static(def_id) => {\n+                let instance = Instance::new(def_id, tcx.intern_substs(&[]));\n+                to_string_internal(tcx, \"static \", instance, debug)\n+            },\n+            MonoItem::GlobalAsm(..) => {\n+                \"global_asm\".to_string()\n+            }\n+        };\n+\n+        fn to_string_internal<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                        prefix: &str,\n+                                        instance: Instance<'tcx>,\n+                                        debug: bool)\n+                                        -> String {\n+            let mut result = String::with_capacity(32);\n+            result.push_str(prefix);\n+            let printer = DefPathBasedNames::new(tcx, false, false);\n+            printer.push_instance_as_string(instance, &mut result, debug);\n+            result\n+        }\n+    }\n+\n+    pub fn local_span(&self, tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Option<Span> {\n+        match *self {\n+            MonoItem::Fn(Instance { def, .. }) => {\n+                tcx.hir().as_local_hir_id(def.def_id())\n+            }\n+            MonoItem::Static(def_id) => {\n+                tcx.hir().as_local_hir_id(def_id)\n+            }\n+            MonoItem::GlobalAsm(hir_id) => {\n+                Some(hir_id)\n+            }\n+        }.map(|hir_id| tcx.hir().span_by_hir_id(hir_id))\n+    }\n }\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for MonoItem<'tcx> {\n@@ -161,6 +351,73 @@ impl<'tcx> CodegenUnit<'tcx> {\n             self.size_estimate = Some(size_estimate + delta);\n         }\n     }\n+\n+    pub fn contains_item(&self, item: &MonoItem<'tcx>) -> bool {\n+        self.items().contains_key(item)\n+    }\n+\n+    pub fn work_product_id(&self) -> WorkProductId {\n+        WorkProductId::from_cgu_name(&self.name().as_str())\n+    }\n+\n+    pub fn work_product(&self, tcx: TyCtxt<'_, '_, '_>) -> WorkProduct {\n+        let work_product_id = self.work_product_id();\n+        tcx.dep_graph\n+           .previous_work_product(&work_product_id)\n+           .unwrap_or_else(|| {\n+                panic!(\"Could not find work-product for CGU `{}`\", self.name())\n+            })\n+    }\n+\n+    pub fn items_in_deterministic_order<'a>(&self,\n+                                        tcx: TyCtxt<'a, 'tcx, 'tcx>)\n+                                        -> Vec<(MonoItem<'tcx>,\n+                                                (Linkage, Visibility))> {\n+        // The codegen tests rely on items being process in the same order as\n+        // they appear in the file, so for local items, we sort by node_id first\n+        #[derive(PartialEq, Eq, PartialOrd, Ord)]\n+        pub struct ItemSortKey(Option<HirId>, SymbolName);\n+\n+        fn item_sort_key<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                                   item: MonoItem<'tcx>) -> ItemSortKey {\n+            ItemSortKey(match item {\n+                MonoItem::Fn(ref instance) => {\n+                    match instance.def {\n+                        // We only want to take HirIds of user-defined\n+                        // instances into account. The others don't matter for\n+                        // the codegen tests and can even make item order\n+                        // unstable.\n+                        InstanceDef::Item(def_id) => {\n+                            tcx.hir().as_local_hir_id(def_id)\n+                        }\n+                        InstanceDef::VtableShim(..) |\n+                        InstanceDef::Intrinsic(..) |\n+                        InstanceDef::FnPtrShim(..) |\n+                        InstanceDef::Virtual(..) |\n+                        InstanceDef::ClosureOnceShim { .. } |\n+                        InstanceDef::DropGlue(..) |\n+                        InstanceDef::CloneShim(..) => {\n+                            None\n+                        }\n+                    }\n+                }\n+                MonoItem::Static(def_id) => {\n+                    tcx.hir().as_local_hir_id(def_id)\n+                }\n+                MonoItem::GlobalAsm(hir_id) => {\n+                    Some(hir_id)\n+                }\n+            }, item.symbol_name(tcx))\n+        }\n+\n+        let mut items: Vec<_> = self.items().iter().map(|(&i, &l)| (i, l)).collect();\n+        items.sort_by_cached_key(|&(i, _)| item_sort_key(tcx, i));\n+        items\n+    }\n+\n+    pub fn codegen_dep_node(&self, tcx: TyCtxt<'_, 'tcx, 'tcx>) -> DepNode {\n+        DepNode::new(tcx, DepConstructor::CompileCodegenUnit(self.name().clone()))\n+    }\n }\n \n impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for CodegenUnit<'tcx> {"}, {"sha": "10efef54526a6d49a905927f24de082a9169d40f", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -4,6 +4,7 @@ use crate::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n use crate::ty::subst::SubstsRef;\n use crate::dep_graph::SerializedDepNodeIndex;\n use crate::hir::def_id::{CrateNum, DefId, DefIndex};\n+use crate::mir;\n use crate::mir::interpret::GlobalId;\n use crate::traits;\n use crate::traits::query::{\n@@ -431,6 +432,24 @@ rustc_queries! {\n                 tcx.queries.on_disk_cache.try_load_query_result(tcx, id).map(Ok)\n             }\n         }\n+\n+        /// Extracts a field of a (variant of a) const.\n+        query const_field(\n+            key: ty::ParamEnvAnd<'tcx, (&'tcx ty::Const<'tcx>, mir::Field)>\n+        ) -> &'tcx ty::Const<'tcx> {\n+            eval_always\n+            no_force\n+            desc { \"extract field of const\" }\n+        }\n+\n+        /// Produces an absolute path representation of the given type. See also the documentation\n+        /// on `std::any::type_name`.\n+        query type_name(key: Ty<'tcx>) -> &'tcx ty::Const<'tcx> {\n+            eval_always\n+            no_force\n+            desc { \"get absolute path of type\" }\n+        }\n+\n     }\n \n     TypeChecking {"}, {"sha": "f0251917074d44f6ec5c4f30240c5721349a1249", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 38, "deletions": 27, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -4,6 +4,7 @@ use crate::hir::def_id::DefId;\n use crate::ty::{self, Ty, PolyFnSig, TypeFoldable, SubstsRef, TyCtxt};\n use crate::ty::print::{FmtPrinter, Printer};\n use crate::traits;\n+use crate::middle::lang_items::DropInPlaceFnLangItem;\n use rustc_target::spec::abi::Abi;\n use rustc_macros::HashStable;\n \n@@ -325,11 +326,47 @@ impl<'a, 'b, 'tcx> Instance<'tcx> {\n         let actual_kind = substs.closure_kind(def_id, tcx);\n \n         match needs_fn_once_adapter_shim(actual_kind, requested_kind) {\n-            Ok(true) => fn_once_adapter_instance(tcx, def_id, substs),\n+            Ok(true) => Instance::fn_once_adapter_instance(tcx, def_id, substs),\n             _ => Instance::new(def_id, substs.substs)\n         }\n     }\n \n+    pub fn resolve_drop_in_place(\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        ty: Ty<'tcx>)\n+        -> ty::Instance<'tcx>\n+    {\n+        let def_id = tcx.require_lang_item(DropInPlaceFnLangItem);\n+        let substs = tcx.intern_substs(&[ty.into()]);\n+        Instance::resolve(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap()\n+    }\n+\n+    pub fn fn_once_adapter_instance(\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        closure_did: DefId,\n+        substs: ty::ClosureSubsts<'tcx>)\n+        -> Instance<'tcx>\n+    {\n+        debug!(\"fn_once_adapter_shim({:?}, {:?})\",\n+               closure_did,\n+               substs);\n+        let fn_once = tcx.lang_items().fn_once_trait().unwrap();\n+        let call_once = tcx.associated_items(fn_once)\n+            .find(|it| it.kind == ty::AssocKind::Method)\n+            .unwrap().def_id;\n+        let def = ty::InstanceDef::ClosureOnceShim { call_once };\n+\n+        let self_ty = tcx.mk_closure(closure_did, substs);\n+\n+        let sig = substs.closure_sig(closure_did, tcx);\n+        let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n+        assert_eq!(sig.inputs().len(), 1);\n+        let substs = tcx.mk_substs_trait(self_ty, &[sig.inputs()[0].into()]);\n+\n+        debug!(\"fn_once_adapter_shim: self_ty={:?} sig={:?}\", self_ty, sig);\n+        Instance { def, substs }\n+    }\n+\n     pub fn is_vtable_shim(&self) -> bool {\n         if let InstanceDef::VtableShim(..) = self.def {\n             true\n@@ -438,29 +475,3 @@ fn needs_fn_once_adapter_shim<'a, 'tcx>(actual_closure_kind: ty::ClosureKind,\n         (ty::ClosureKind::FnOnce, _) => Err(())\n     }\n }\n-\n-fn fn_once_adapter_instance<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    closure_did: DefId,\n-    substs: ty::ClosureSubsts<'tcx>)\n-    -> Instance<'tcx>\n-{\n-    debug!(\"fn_once_adapter_shim({:?}, {:?})\",\n-           closure_did,\n-           substs);\n-    let fn_once = tcx.lang_items().fn_once_trait().unwrap();\n-    let call_once = tcx.associated_items(fn_once)\n-        .find(|it| it.kind == ty::AssocKind::Method)\n-        .unwrap().def_id;\n-    let def = ty::InstanceDef::ClosureOnceShim { call_once };\n-\n-    let self_ty = tcx.mk_closure(closure_did, substs);\n-\n-    let sig = substs.closure_sig(closure_did, tcx);\n-    let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n-    assert_eq!(sig.inputs().len(), 1);\n-    let substs = tcx.mk_substs_trait(self_ty, &[sig.inputs()[0].into()]);\n-\n-    debug!(\"fn_once_adapter_shim: self_ty={:?} sig={:?}\", self_ty, sig);\n-    Instance { def, substs }\n-}"}, {"sha": "a7cb7bd3956f00457b30c76b636bc204fe40d574", "filename": "src/librustc/ty/print/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fmod.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -9,6 +9,8 @@ use rustc_data_structures::fx::FxHashSet;\n mod pretty;\n pub use self::pretty::*;\n \n+pub mod obsolete;\n+\n pub trait Print<'gcx, 'tcx, P> {\n     type Output;\n     type Error;"}, {"sha": "85d338699b0e02c526efa66cf40ee8e6f52547dd", "filename": "src/librustc/ty/print/obsolete.rs", "status": "added", "additions": 286, "deletions": 0, "changes": 286, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fobsolete.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -0,0 +1,286 @@\n+//! Allows for producing a unique string key for a mono item.\n+//! These keys are used by the handwritten auto-tests, so they need to be\n+//! predictable and human-readable.\n+//!\n+//! Note: A lot of this could looks very similar to what's already in `ty::print`.\n+//! FIXME(eddyb) implement a custom `PrettyPrinter` for this.\n+\n+use rustc::hir::def_id::DefId;\n+use rustc::mir::interpret::ConstValue;\n+use rustc::ty::subst::SubstsRef;\n+use rustc::ty::{self, ClosureSubsts, Const, GeneratorSubsts, Instance, Ty, TyCtxt};\n+use rustc::{bug, hir};\n+use std::fmt::Write;\n+use std::iter;\n+use syntax::ast;\n+\n+/// Same as `unique_type_name()` but with the result pushed onto the given\n+/// `output` parameter.\n+pub struct DefPathBasedNames<'a, 'tcx: 'a> {\n+    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+    omit_disambiguators: bool,\n+    omit_local_crate_name: bool,\n+}\n+\n+impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n+    pub fn new(\n+        tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+        omit_disambiguators: bool,\n+        omit_local_crate_name: bool,\n+    ) -> Self {\n+        DefPathBasedNames { tcx, omit_disambiguators, omit_local_crate_name }\n+    }\n+\n+    // Pushes the type name of the specified type to the provided string.\n+    // If `debug` is true, printing normally unprintable types is allowed\n+    // (e.g. `ty::GeneratorWitness`). This parameter should only be set when\n+    // this method is being used for logging purposes (e.g. with `debug!` or `info!`)\n+    // When being used for codegen purposes, `debug` should be set to `false`\n+    // in order to catch unexpected types that should never end up in a type name.\n+    pub fn push_type_name(&self, t: Ty<'tcx>, output: &mut String, debug: bool) {\n+        match t.sty {\n+            ty::Bool => output.push_str(\"bool\"),\n+            ty::Char => output.push_str(\"char\"),\n+            ty::Str => output.push_str(\"str\"),\n+            ty::Never => output.push_str(\"!\"),\n+            ty::Int(ast::IntTy::Isize) => output.push_str(\"isize\"),\n+            ty::Int(ast::IntTy::I8) => output.push_str(\"i8\"),\n+            ty::Int(ast::IntTy::I16) => output.push_str(\"i16\"),\n+            ty::Int(ast::IntTy::I32) => output.push_str(\"i32\"),\n+            ty::Int(ast::IntTy::I64) => output.push_str(\"i64\"),\n+            ty::Int(ast::IntTy::I128) => output.push_str(\"i128\"),\n+            ty::Uint(ast::UintTy::Usize) => output.push_str(\"usize\"),\n+            ty::Uint(ast::UintTy::U8) => output.push_str(\"u8\"),\n+            ty::Uint(ast::UintTy::U16) => output.push_str(\"u16\"),\n+            ty::Uint(ast::UintTy::U32) => output.push_str(\"u32\"),\n+            ty::Uint(ast::UintTy::U64) => output.push_str(\"u64\"),\n+            ty::Uint(ast::UintTy::U128) => output.push_str(\"u128\"),\n+            ty::Float(ast::FloatTy::F32) => output.push_str(\"f32\"),\n+            ty::Float(ast::FloatTy::F64) => output.push_str(\"f64\"),\n+            ty::Adt(adt_def, substs) => {\n+                self.push_def_path(adt_def.did, output);\n+                self.push_generic_params(substs, iter::empty(), output, debug);\n+            }\n+            ty::Tuple(component_types) => {\n+                output.push('(');\n+                for &component_type in component_types {\n+                    self.push_type_name(component_type.expect_ty(), output, debug);\n+                    output.push_str(\", \");\n+                }\n+                if !component_types.is_empty() {\n+                    output.pop();\n+                    output.pop();\n+                }\n+                output.push(')');\n+            }\n+            ty::RawPtr(ty::TypeAndMut { ty: inner_type, mutbl }) => {\n+                output.push('*');\n+                match mutbl {\n+                    hir::MutImmutable => output.push_str(\"const \"),\n+                    hir::MutMutable => output.push_str(\"mut \"),\n+                }\n+\n+                self.push_type_name(inner_type, output, debug);\n+            }\n+            ty::Ref(_, inner_type, mutbl) => {\n+                output.push('&');\n+                if mutbl == hir::MutMutable {\n+                    output.push_str(\"mut \");\n+                }\n+\n+                self.push_type_name(inner_type, output, debug);\n+            }\n+            ty::Array(inner_type, len) => {\n+                output.push('[');\n+                self.push_type_name(inner_type, output, debug);\n+                write!(output, \"; {}\", len.unwrap_usize(self.tcx)).unwrap();\n+                output.push(']');\n+            }\n+            ty::Slice(inner_type) => {\n+                output.push('[');\n+                self.push_type_name(inner_type, output, debug);\n+                output.push(']');\n+            }\n+            ty::Dynamic(ref trait_data, ..) => {\n+                if let Some(principal) = trait_data.principal() {\n+                    self.push_def_path(principal.def_id(), output);\n+                    self.push_generic_params(\n+                        principal.skip_binder().substs,\n+                        trait_data.projection_bounds(),\n+                        output,\n+                        debug,\n+                    );\n+                } else {\n+                    output.push_str(\"dyn '_\");\n+                }\n+            }\n+            ty::Foreign(did) => self.push_def_path(did, output),\n+            ty::FnDef(..) | ty::FnPtr(_) => {\n+                let sig = t.fn_sig(self.tcx);\n+                if sig.unsafety() == hir::Unsafety::Unsafe {\n+                    output.push_str(\"unsafe \");\n+                }\n+\n+                let abi = sig.abi();\n+                if abi != ::rustc_target::spec::abi::Abi::Rust {\n+                    output.push_str(\"extern \\\"\");\n+                    output.push_str(abi.name());\n+                    output.push_str(\"\\\" \");\n+                }\n+\n+                output.push_str(\"fn(\");\n+\n+                let sig =\n+                    self.tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n+\n+                if !sig.inputs().is_empty() {\n+                    for &parameter_type in sig.inputs() {\n+                        self.push_type_name(parameter_type, output, debug);\n+                        output.push_str(\", \");\n+                    }\n+                    output.pop();\n+                    output.pop();\n+                }\n+\n+                if sig.c_variadic {\n+                    if !sig.inputs().is_empty() {\n+                        output.push_str(\", ...\");\n+                    } else {\n+                        output.push_str(\"...\");\n+                    }\n+                }\n+\n+                output.push(')');\n+\n+                if !sig.output().is_unit() {\n+                    output.push_str(\" -> \");\n+                    self.push_type_name(sig.output(), output, debug);\n+                }\n+            }\n+            ty::Generator(def_id, GeneratorSubsts { ref substs }, _)\n+            | ty::Closure(def_id, ClosureSubsts { ref substs }) => {\n+                self.push_def_path(def_id, output);\n+                let generics = self.tcx.generics_of(self.tcx.closure_base_def_id(def_id));\n+                let substs = substs.truncate_to(self.tcx, generics);\n+                self.push_generic_params(substs, iter::empty(), output, debug);\n+            }\n+            ty::Error\n+            | ty::Bound(..)\n+            | ty::Infer(_)\n+            | ty::Placeholder(..)\n+            | ty::UnnormalizedProjection(..)\n+            | ty::Projection(..)\n+            | ty::Param(_)\n+            | ty::GeneratorWitness(_)\n+            | ty::Opaque(..) => {\n+                if debug {\n+                    output.push_str(&format!(\"`{:?}`\", t));\n+                } else {\n+                    bug!(\n+                        \"DefPathBasedNames: trying to create type name for unexpected type: {:?}\",\n+                        t,\n+                    );\n+                }\n+            }\n+        }\n+    }\n+\n+    // Pushes the the name of the specified const to the provided string.\n+    // If `debug` is true, usually-unprintable consts (such as `Infer`) will be printed,\n+    // as well as the unprintable types of constants (see `push_type_name` for more details).\n+    pub fn push_const_name(&self, c: &Const<'tcx>, output: &mut String, debug: bool) {\n+        match c.val {\n+            ConstValue::Scalar(..) | ConstValue::Slice { .. } | ConstValue::ByRef(..) => {\n+                // FIXME(const_generics): we could probably do a better job here.\n+                write!(output, \"{:?}\", c).unwrap()\n+            }\n+            _ => {\n+                if debug {\n+                    write!(output, \"{:?}\", c).unwrap()\n+                } else {\n+                    bug!(\n+                        \"DefPathBasedNames: trying to create const name for unexpected const: {:?}\",\n+                        c,\n+                    );\n+                }\n+            }\n+        }\n+        output.push_str(\": \");\n+        self.push_type_name(c.ty, output, debug);\n+    }\n+\n+    pub fn push_def_path(&self, def_id: DefId, output: &mut String) {\n+        let def_path = self.tcx.def_path(def_id);\n+\n+        // some_crate::\n+        if !(self.omit_local_crate_name && def_id.is_local()) {\n+            output.push_str(&self.tcx.crate_name(def_path.krate).as_str());\n+            output.push_str(\"::\");\n+        }\n+\n+        // foo::bar::ItemName::\n+        for part in self.tcx.def_path(def_id).data {\n+            if self.omit_disambiguators {\n+                write!(output, \"{}::\", part.data.as_interned_str()).unwrap();\n+            } else {\n+                write!(output, \"{}[{}]::\", part.data.as_interned_str(), part.disambiguator)\n+                    .unwrap();\n+            }\n+        }\n+\n+        // remove final \"::\"\n+        output.pop();\n+        output.pop();\n+    }\n+\n+    fn push_generic_params<I>(\n+        &self,\n+        substs: SubstsRef<'tcx>,\n+        projections: I,\n+        output: &mut String,\n+        debug: bool,\n+    ) where\n+        I: Iterator<Item = ty::PolyExistentialProjection<'tcx>>,\n+    {\n+        let mut projections = projections.peekable();\n+        if substs.non_erasable_generics().next().is_none() && projections.peek().is_none() {\n+            return;\n+        }\n+\n+        output.push('<');\n+\n+        for type_parameter in substs.types() {\n+            self.push_type_name(type_parameter, output, debug);\n+            output.push_str(\", \");\n+        }\n+\n+        for projection in projections {\n+            let projection = projection.skip_binder();\n+            let name = &self.tcx.associated_item(projection.item_def_id).ident.as_str();\n+            output.push_str(name);\n+            output.push_str(\"=\");\n+            self.push_type_name(projection.ty, output, debug);\n+            output.push_str(\", \");\n+        }\n+\n+        for const_parameter in substs.consts() {\n+            self.push_const_name(const_parameter, output, debug);\n+            output.push_str(\", \");\n+        }\n+\n+        output.pop();\n+        output.pop();\n+\n+        output.push('>');\n+    }\n+\n+    pub fn push_instance_as_string(\n+        &self,\n+        instance: Instance<'tcx>,\n+        output: &mut String,\n+        debug: bool,\n+    ) {\n+        self.push_def_path(instance.def_id(), output);\n+        self.push_generic_params(instance.substs, iter::empty(), output, debug);\n+    }\n+}"}, {"sha": "27b0e8e881df9b3700d482c775c5814ed9c28347", "filename": "src/librustc/ty/query/keys.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fkeys.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -127,6 +127,15 @@ impl<'tcx> Key for (ty::ParamEnv<'tcx>, ty::PolyTraitRef<'tcx>) {\n     }\n }\n \n+impl<'tcx> Key for (&'tcx ty::Const<'tcx>, mir::Field) {\n+    fn query_crate(&self) -> CrateNum {\n+        LOCAL_CRATE\n+    }\n+    fn default_span(&self, _: TyCtxt<'_, '_, '_>) -> Span {\n+        DUMMY_SP\n+    }\n+}\n+\n impl<'tcx> Key for ty::PolyTraitRef<'tcx>{\n     fn query_crate(&self) -> CrateNum {\n         self.def_id().krate"}, {"sha": "62374eb21039ad4d6397a39a18f56f016af1c153", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -22,7 +22,6 @@ use crate::metadata;\n use crate::builder::Builder;\n use crate::common;\n use crate::context::CodegenCx;\n-use crate::monomorphize::partitioning::CodegenUnitExt;\n use rustc::dep_graph;\n use rustc::mir::mono::{Linkage, Visibility};\n use rustc::middle::cstore::{EncodedMetadata};"}, {"sha": "2c0a6f631b73948622249f3a46efacf9af782474", "filename": "src/librustc_codegen_llvm/callee.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcallee.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -6,12 +6,11 @@\n \n use crate::attributes;\n use crate::llvm;\n-use crate::monomorphize::Instance;\n use crate::context::CodegenCx;\n use crate::value::Value;\n use rustc_codegen_ssa::traits::*;\n \n-use rustc::ty::TypeFoldable;\n+use rustc::ty::{TypeFoldable, Instance};\n use rustc::ty::layout::{LayoutOf, HasTyCtxt};\n \n /// Codegens a reference to a fn/method item, monomorphizing and"}, {"sha": "eb059ac453c3d8319ca5b8c2a81463f250acfb25", "filename": "src/librustc_codegen_llvm/consts.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fconsts.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -1,8 +1,6 @@\n use crate::llvm::{self, SetUnnamedAddr, True};\n use crate::debuginfo;\n-use crate::monomorphize::MonoItem;\n use crate::common::CodegenCx;\n-use crate::monomorphize::Instance;\n use crate::base;\n use crate::type_::Type;\n use crate::type_of::LayoutLlvmExt;\n@@ -11,12 +9,13 @@ use libc::c_uint;\n use rustc::hir::def_id::DefId;\n use rustc::mir::interpret::{ConstValue, Allocation, read_target_uint,\n     Pointer, ErrorHandled, GlobalId};\n+use rustc::mir::mono::MonoItem;\n use rustc::hir::Node;\n use syntax_pos::Span;\n use rustc_target::abi::HasDataLayout;\n use syntax::symbol::sym;\n use syntax_pos::symbol::LocalInternedString;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, Instance};\n use rustc_codegen_ssa::traits::*;\n \n use rustc::ty::layout::{self, Size, Align, LayoutOf};"}, {"sha": "ead9bad656db5605d2138cdcc8ae2ba97bc1bcca", "filename": "src/librustc_codegen_llvm/context.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcontext.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -1,23 +1,22 @@\n use crate::attributes;\n use crate::llvm;\n use crate::debuginfo;\n-use crate::monomorphize::Instance;\n use crate::value::Value;\n use rustc::dep_graph::DepGraphSafe;\n use rustc::hir;\n \n-use crate::monomorphize::partitioning::CodegenUnit;\n use crate::type_::Type;\n use rustc_codegen_ssa::traits::*;\n \n use rustc_data_structures::base_n;\n use rustc_data_structures::small_c_str::SmallCStr;\n+use rustc::mir::mono::CodegenUnit;\n use rustc::session::config::{self, DebugInfo};\n use rustc::session::Session;\n use rustc::ty::layout::{\n     LayoutError, LayoutOf, PointeeInfo, Size, TyLayout, VariantIdx, HasParamEnv\n };\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::ty::{self, Ty, TyCtxt, Instance};\n use rustc::util::nodemap::FxHashMap;\n use rustc_target::spec::{HasTargetSpec, Target};\n use rustc_codegen_ssa::callee::resolve_and_get_fn;"}, {"sha": "548ea0b1036e0e564e6e96c009c8bda5ff9b0e31", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -20,9 +20,8 @@ use rustc::ty::subst::{SubstsRef, UnpackedKind};\n use crate::abi::Abi;\n use crate::common::CodegenCx;\n use crate::builder::Builder;\n-use crate::monomorphize::Instance;\n use crate::value::Value;\n-use rustc::ty::{self, ParamEnv, Ty, InstanceDef};\n+use rustc::ty::{self, ParamEnv, Ty, InstanceDef, Instance};\n use rustc::mir;\n use rustc::session::config::{self, DebugInfo};\n use rustc::util::nodemap::{DefIdMap, FxHashMap, FxHashSet};"}, {"sha": "889984749fdf7aa94558e8344e1d781776ae2371", "filename": "src/librustc_codegen_llvm/debuginfo/namespace.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fnamespace.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -2,8 +2,7 @@\n \n use super::metadata::{unknown_file_metadata, UNKNOWN_LINE_NUMBER};\n use super::utils::{DIB, debug_context};\n-use crate::monomorphize::Instance;\n-use rustc::ty;\n+use rustc::ty::{self, Instance};\n \n use crate::llvm;\n use crate::llvm::debuginfo::DIScope;"}, {"sha": "98a829b2affecf044eebac96f9a3adad09284608", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -212,7 +212,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n             }\n             \"type_name\" => {\n                 let tp_ty = substs.type_at(0);\n-                let ty_name = rustc_mir::interpret::type_name(self.tcx, tp_ty);\n+                let ty_name = self.tcx.type_name(tp_ty);\n                 OperandRef::from_const(self, ty_name).immediate_or_packed_pair(self)\n             }\n             \"type_id\" => {"}, {"sha": "0fdd326a1882e667fb681bd4147a36c2d09b01d1", "filename": "src/librustc_codegen_llvm/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Flib.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -32,7 +32,6 @@ extern crate flate2;\n #[macro_use] extern crate bitflags;\n extern crate libc;\n #[macro_use] extern crate rustc;\n-extern crate rustc_mir;\n extern crate rustc_allocator;\n extern crate rustc_target;\n #[macro_use] extern crate rustc_data_structures;\n@@ -64,7 +63,6 @@ use rustc::session::Session;\n use rustc::session::config::{OutputFilenames, OutputType, PrintRequest, OptLevel};\n use rustc::ty::{self, TyCtxt};\n use rustc::util::common::ErrorReported;\n-use rustc_mir::monomorphize;\n use rustc_codegen_ssa::ModuleCodegen;\n use rustc_codegen_utils::codegen_backend::CodegenBackend;\n "}, {"sha": "c1703ffd0c753524ab53284ec78320349ab1cfa3", "filename": "src/librustc_codegen_llvm/mono_item.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmono_item.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -2,11 +2,10 @@ use crate::attributes;\n use crate::base;\n use crate::context::CodegenCx;\n use crate::llvm;\n-use crate::monomorphize::Instance;\n use crate::type_of::LayoutLlvmExt;\n use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::mono::{Linkage, Visibility};\n-use rustc::ty::TypeFoldable;\n+use rustc::ty::{TypeFoldable, Instance};\n use rustc::ty::layout::{LayoutOf, HasTyCtxt};\n use rustc_codegen_ssa::traits::*;\n "}, {"sha": "7a82fd731f60483d1fdb5df533eea33faf0e675f", "filename": "src/librustc_codegen_llvm/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_llvm%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Ftype_of.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -4,7 +4,7 @@ use crate::type_::Type;\n use rustc::ty::{self, Ty, TypeFoldable};\n use rustc::ty::layout::{self, Align, LayoutOf, FnTypeExt, PointeeInfo, Size, TyLayout};\n use rustc_target::abi::{FloatTy, TyLayoutMethods};\n-use rustc_mir::monomorphize::item::DefPathBasedNames;\n+use rustc::ty::print::obsolete::DefPathBasedNames;\n use rustc_codegen_ssa::traits::*;\n \n use std::fmt::Write;"}, {"sha": "a4cb517fafed6af5327b9b0237dec80c7ea94915", "filename": "src/librustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2FCargo.toml?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -33,5 +33,4 @@ rustc_data_structures = { path = \"../librustc_data_structures\"}\n rustc_errors = { path = \"../librustc_errors\" }\n rustc_fs_util = { path = \"../librustc_fs_util\" }\n rustc_incremental = { path = \"../librustc_incremental\" }\n-rustc_mir = { path = \"../librustc_mir\" }\n rustc_target = { path = \"../librustc_target\" }"}, {"sha": "0cd29e0213ee7b2ca73ba20b9ca5ce862ce5cf54", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -20,16 +20,14 @@ use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::middle::cstore::EncodedMetadata;\n use rustc::middle::lang_items::StartFnLangItem;\n use rustc::middle::weak_lang_items;\n-use rustc::mir::mono::CodegenUnitNameBuilder;\n-use rustc::ty::{self, Ty, TyCtxt};\n+use rustc::mir::mono::{CodegenUnitNameBuilder, CodegenUnit, MonoItem};\n+use rustc::ty::{self, Ty, TyCtxt, Instance};\n use rustc::ty::layout::{self, Align, TyLayout, LayoutOf, VariantIdx, HasTyCtxt};\n use rustc::ty::query::Providers;\n use rustc::middle::cstore::{self, LinkagePreference};\n use rustc::util::common::{time, print_time_passes_entry};\n use rustc::session::config::{self, EntryFnType, Lto};\n use rustc::session::Session;\n-use rustc_mir::monomorphize::Instance;\n-use rustc_mir::monomorphize::partitioning::{CodegenUnit, CodegenUnitExt};\n use rustc::util::nodemap::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc_codegen_utils::{symbol_names_test, check_for_rustc_errors_attr};\n@@ -42,7 +40,6 @@ use crate::callee;\n use crate::common::{RealPredicate, TypeKind, IntPredicate};\n use crate::meth;\n use crate::mir;\n-use crate::mono_item::MonoItem;\n \n use crate::traits::*;\n "}, {"sha": "d38e434d98ce81cfc4ba73002dcb463b293b7d92", "filename": "src/librustc_codegen_ssa/meth.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmeth.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -1,10 +1,9 @@\n use rustc_target::abi::call::FnType;\n-use rustc_mir::monomorphize;\n \n use crate::callee;\n use crate::traits::*;\n \n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, Instance};\n \n #[derive(Copy, Clone, Debug)]\n pub struct VirtualIndex(u64);\n@@ -103,7 +102,7 @@ pub fn get_vtable<'tcx, Cx: CodegenMethods<'tcx>>(\n     // `get_vtable` in rust_mir/interpret/traits.rs\n     // /////////////////////////////////////////////////////////////////////////////////////////////\n     let components: Vec<_> = [\n-        cx.get_fn(monomorphize::resolve_drop_in_place(cx.tcx(), ty)),\n+        cx.get_fn(Instance::resolve_drop_in_place(cx.tcx(), ty)),\n         cx.const_usize(layout.size.bytes()),\n         cx.const_usize(layout.align.abi.bytes())\n     ].iter().cloned().chain(methods).collect();"}, {"sha": "4c9313a3309210387780431d6146768874ddba52", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -1,11 +1,10 @@\n use rustc::middle::lang_items;\n-use rustc::ty::{self, Ty, TypeFoldable};\n+use rustc::ty::{self, Ty, TypeFoldable, Instance};\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt, FnTypeExt};\n use rustc::mir::{self, Place, PlaceBase, Static, StaticKind};\n use rustc::mir::interpret::InterpError;\n use rustc_target::abi::call::{ArgType, FnType, PassMode, IgnoreMode};\n use rustc_target::spec::abi::Abi;\n-use rustc_mir::monomorphize;\n use crate::base;\n use crate::MemFlags;\n use crate::common::{self, IntPredicate};\n@@ -310,7 +309,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n     ) {\n         let ty = location.ty(self.mir, bx.tcx()).ty;\n         let ty = self.monomorphize(&ty);\n-        let drop_fn = monomorphize::resolve_drop_in_place(bx.tcx(), ty);\n+        let drop_fn = Instance::resolve_drop_in_place(bx.tcx(), ty);\n \n         if let ty::InstanceDef::DropGlue(_, None) = drop_fn.def {\n             // we don't actually need to drop anything."}, {"sha": "78c22206ab7a54d24d48a3fc080d1528b9b85f7c", "filename": "src/librustc_codegen_ssa/mir/constant.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fconstant.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -1,5 +1,4 @@\n use rustc::mir::interpret::ErrorHandled;\n-use rustc_mir::const_eval::const_field;\n use rustc::mir;\n use rustc_data_structures::indexed_vec::Idx;\n use rustc::ty::{self, Ty};\n@@ -46,12 +45,8 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     _ => bug!(\"invalid simd shuffle type: {}\", c.ty),\n                 };\n                 let values: Vec<_> = (0..fields).map(|field| {\n-                    let field = const_field(\n-                        bx.tcx(),\n-                        ty::ParamEnv::reveal_all(),\n-                        None,\n-                        mir::Field::new(field as usize),\n-                        c,\n+                    let field = bx.tcx().const_field(\n+                        ty::ParamEnv::reveal_all().and((&c, mir::Field::new(field as usize)))\n                     );\n                     if let Some(prim) = field.val.try_to_scalar() {\n                         let layout = bx.layout_of(field_ty);"}, {"sha": "1d40d004e2ddcfcd08b20898270c32af7dc60f5b", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -1,8 +1,7 @@\n-use rustc::ty::{self, Ty, TypeFoldable, UpvarSubsts};\n+use rustc::ty::{self, Ty, TypeFoldable, UpvarSubsts, Instance};\n use rustc::ty::layout::{TyLayout, HasTyCtxt, FnTypeExt};\n use rustc::mir::{self, Body};\n use rustc::session::config::DebugInfo;\n-use rustc_mir::monomorphize::Instance;\n use rustc_target::abi::call::{FnType, PassMode, IgnoreMode};\n use rustc_target::abi::{Variants, VariantIdx};\n use crate::base;"}, {"sha": "7a2bd18df4ec9a67dac551df2f42a48d100242c9", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -1,4 +1,4 @@\n-use rustc::ty::{self, Ty, adjustment::{PointerCast}};\n+use rustc::ty::{self, Ty, adjustment::{PointerCast}, Instance};\n use rustc::ty::cast::{CastTy, IntTy};\n use rustc::ty::layout::{self, LayoutOf, HasTyCtxt};\n use rustc::mir;\n@@ -11,7 +11,6 @@ use crate::base;\n use crate::MemFlags;\n use crate::callee;\n use crate::common::{self, RealPredicate, IntPredicate};\n-use rustc_mir::monomorphize;\n \n use crate::traits::*;\n \n@@ -196,7 +195,7 @@ impl<'a, 'tcx: 'a, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                     mir::CastKind::Pointer(PointerCast::ClosureFnPointer(_)) => {\n                         match operand.layout.ty.sty {\n                             ty::Closure(def_id, substs) => {\n-                                let instance = monomorphize::resolve_closure(\n+                                let instance = Instance::resolve_closure(\n                                     bx.cx().tcx(), def_id, substs, ty::ClosureKind::FnOnce);\n                                 OperandValue::Immediate(bx.cx().get_fn(instance))\n                             }"}, {"sha": "11e9a48133d9a2aff18b6b54fcdd60e0d26aedd3", "filename": "src/librustc_codegen_ssa/mono_item.rs", "status": "modified", "additions": 15, "deletions": 9, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Fmono_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmono_item.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -1,22 +1,30 @@\n use rustc::hir;\n use rustc::mir::mono::{Linkage, Visibility};\n use rustc::ty::layout::HasTyCtxt;\n-use std::fmt;\n use crate::base;\n use crate::traits::*;\n \n-pub use rustc::mir::mono::MonoItem;\n+use rustc::mir::mono::MonoItem;\n \n-pub use rustc_mir::monomorphize::item::MonoItemExt as BaseMonoItemExt;\n+pub trait MonoItemExt<'a, 'tcx: 'a> {\n+    fn define<Bx: BuilderMethods<'a, 'tcx>>(&self, cx: &'a Bx::CodegenCx);\n+    fn predefine<Bx: BuilderMethods<'a, 'tcx>>(\n+        &self,\n+        cx: &'a Bx::CodegenCx,\n+        linkage: Linkage,\n+        visibility: Visibility\n+    );\n+    fn to_raw_string(&self) -> String;\n+}\n \n-pub trait MonoItemExt<'a, 'tcx: 'a>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n+impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n     fn define<Bx: BuilderMethods<'a, 'tcx>>(&self, cx: &'a Bx::CodegenCx) {\n         debug!(\"BEGIN IMPLEMENTING '{} ({})' in cgu {}\",\n                self.to_string(cx.tcx(), true),\n                self.to_raw_string(),\n                cx.codegen_unit().name());\n \n-        match *self.as_mono_item() {\n+        match *self {\n             MonoItem::Static(def_id) => {\n                 cx.codegen_static(def_id, cx.tcx().is_mutable_static(def_id));\n             }\n@@ -54,7 +62,7 @@ pub trait MonoItemExt<'a, 'tcx: 'a>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n \n         debug!(\"symbol {}\", &symbol_name);\n \n-        match *self.as_mono_item() {\n+        match *self {\n             MonoItem::Static(def_id) => {\n                 cx.predefine_static(def_id, linkage, visibility, &symbol_name);\n             }\n@@ -71,7 +79,7 @@ pub trait MonoItemExt<'a, 'tcx: 'a>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n     }\n \n     fn to_raw_string(&self) -> String {\n-        match *self.as_mono_item() {\n+        match *self {\n             MonoItem::Fn(instance) => {\n                 format!(\"Fn({:?}, {})\",\n                         instance.def,\n@@ -86,5 +94,3 @@ pub trait MonoItemExt<'a, 'tcx: 'a>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n         }\n     }\n }\n-\n-impl<'a, 'tcx: 'a> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {}"}, {"sha": "be2fa7279aa7cbec2dfa853a39a238b92afaef96", "filename": "src/librustc_codegen_ssa/traits/debuginfo.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdebuginfo.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -2,9 +2,8 @@ use super::BackendTypes;\n use crate::debuginfo::{FunctionDebugContext, MirDebugScope, VariableAccess, VariableKind};\n use rustc::hir::def_id::CrateNum;\n use rustc::mir;\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, Instance};\n use rustc_data_structures::indexed_vec::IndexVec;\n-use rustc_mir::monomorphize::Instance;\n use syntax::ast::Name;\n use syntax_pos::{SourceFile, Span};\n "}, {"sha": "624a982b619ee7b2d26f298779897df95c444b39", "filename": "src/librustc_codegen_ssa/traits/declare.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdeclare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdeclare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fdeclare.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -1,8 +1,7 @@\n use super::BackendTypes;\n use rustc::hir::def_id::DefId;\n use rustc::mir::mono::{Linkage, Visibility};\n-use rustc::ty;\n-use rustc_mir::monomorphize::Instance;\n+use rustc::ty::{self, Instance};\n \n pub trait DeclareMethods<'tcx>: BackendTypes {\n     /// Declare a global value."}, {"sha": "46c88a6113ebe486e853728ea09fefd6605749cd", "filename": "src/librustc_codegen_ssa/traits/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fmisc.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -1,8 +1,8 @@\n use super::BackendTypes;\n+use rustc::mir::mono::CodegenUnit;\n use rustc::session::Session;\n use rustc::ty::{self, Instance, Ty};\n use rustc::util::nodemap::FxHashMap;\n-use rustc_mir::monomorphize::partitioning::CodegenUnit;\n use std::cell::RefCell;\n use std::sync::Arc;\n "}, {"sha": "b218d18a06ba73824166f9bed06e5a3e7796be6a", "filename": "src/librustc_codegen_utils/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2FCargo.toml?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -22,4 +22,3 @@ rustc = { path = \"../librustc\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_metadata = { path = \"../librustc_metadata\" }\n-rustc_mir = { path = \"../librustc_mir\" }"}, {"sha": "47dc4e5b2cafe231448b162600b712d6ee4b2c20", "filename": "src/librustc_codegen_utils/symbol_names.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -92,9 +92,8 @@ use rustc::hir::Node;\n use rustc::hir::CodegenFnAttrFlags;\n use rustc::session::config::SymbolManglingVersion;\n use rustc::ty::query::Providers;\n-use rustc::ty::{self, TyCtxt};\n-use rustc_mir::monomorphize::item::{InstantiationMode, MonoItem, MonoItemExt};\n-use rustc_mir::monomorphize::Instance;\n+use rustc::ty::{self, TyCtxt, Instance};\n+use rustc::mir::mono::{MonoItem, InstantiationMode};\n \n use syntax_pos::symbol::InternedString;\n "}, {"sha": "b6ece06fa6c5d592eb5699fda1173575fb99103c", "filename": "src/librustc_codegen_utils/symbol_names/legacy.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -4,10 +4,9 @@ use rustc::ich::NodeIdHashingMode;\n use rustc::mir::interpret::{ConstValue, Scalar};\n use rustc::ty::print::{PrettyPrinter, Printer, Print};\n use rustc::ty::subst::{Kind, UnpackedKind};\n-use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc::ty::{self, Ty, TyCtxt, TypeFoldable, Instance};\n use rustc::util::common::record_time;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_mir::monomorphize::Instance;\n \n use log::debug;\n "}, {"sha": "d83d7e5244e6570a90a4f47f7e379f9ee45c3362", "filename": "src/librustc_codegen_utils/symbol_names/v0.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Fv0.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -1,12 +1,11 @@\n use rustc::hir;\n use rustc::hir::def_id::{CrateNum, DefId};\n use rustc::hir::map::{DefPathData, DisambiguatedDefPathData};\n-use rustc::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use rustc::ty::{self, Ty, TyCtxt, TypeFoldable, Instance};\n use rustc::ty::print::{Printer, Print};\n use rustc::ty::subst::{Kind, Subst, UnpackedKind};\n use rustc_data_structures::base_n;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n-use rustc_mir::monomorphize::Instance;\n use rustc_target::spec::abi::Abi;\n use syntax::ast::{IntTy, UintTy, FloatTy};\n "}, {"sha": "9f7e483395244c6641234719f7ef5df7ca23f116", "filename": "src/librustc_codegen_utils/symbol_names_test.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -5,8 +5,7 @@\n //! paths etc in all kinds of annoying scenarios.\n \n use rustc::hir;\n-use rustc::ty::TyCtxt;\n-use rustc_mir::monomorphize::Instance;\n+use rustc::ty::{TyCtxt, Instance};\n use syntax::symbol::{Symbol, sym};\n \n const SYMBOL_NAME: Symbol = sym::rustc_symbol_name;"}, {"sha": "d118a61bcc6ce06f03b9776f9f3cafea56b08218", "filename": "src/librustc_mir/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -470,7 +470,7 @@ impl<'a, 'mir, 'tcx> interpret::Machine<'a, 'mir, 'tcx>\n     }\n }\n \n-/// Projects to a field of a (variant of a) const.\n+/// Extracts a field of a (variant of a) const.\n // this function uses `unwrap` copiously, because an already validated constant must have valid\n // fields and can thus never fail outside of compiler bugs\n pub fn const_field<'a, 'tcx>("}, {"sha": "716838b4fc597c4078641bd013371122d13c098a", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -5,7 +5,7 @@ mod check_match;\n \n pub(crate) use self::check_match::check_match;\n \n-use crate::const_eval::{const_field, const_variant_index};\n+use crate::const_eval::const_variant_index;\n \n use crate::hair::util::UserAnnotatedTyHelpers;\n use crate::hair::constant::*;\n@@ -949,7 +949,9 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n         debug!(\"const_to_pat: cv={:#?} id={:?}\", cv, id);\n         let adt_subpattern = |i, variant_opt| {\n             let field = Field::new(i);\n-            let val = const_field(self.tcx, self.param_env, variant_opt, field, cv);\n+            let val = crate::const_eval::const_field(\n+                self.tcx, self.param_env, variant_opt, field, cv\n+            );\n             self.const_to_pat(instance, val, id, span)\n         };\n         let adt_subpatterns = |n, variant_opt| {"}, {"sha": "d59bee6943a51fa45a0b0e2a91e9c7ddf9345b73", "filename": "src/librustc_mir/interpret/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmod.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -33,4 +33,4 @@ pub use self::visitor::{ValueVisitor, MutValueVisitor};\n \n pub use self::validity::RefTracking;\n \n-pub use self::intrinsics::type_name;\n+pub(super) use self::intrinsics::type_name;"}, {"sha": "a39af9640ac343bd6254de6692fc2a8863c99aa4", "filename": "src/librustc_mir/interpret/terminator.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fterminator.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -1,6 +1,7 @@\n use std::borrow::Cow;\n \n use rustc::{mir, ty};\n+use rustc::ty::Instance;\n use rustc::ty::layout::{self, TyLayout, LayoutOf};\n use syntax::source_map::Span;\n use rustc_target::spec::abi::Abi;\n@@ -112,7 +113,7 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n                 let ty = place.layout.ty;\n                 trace!(\"TerminatorKind::drop: {:?}, type {}\", location, ty);\n \n-                let instance = crate::monomorphize::resolve_drop_in_place(*self.tcx, ty);\n+                let instance = Instance::resolve_drop_in_place(*self.tcx, ty);\n                 self.drop_in_place(\n                     place,\n                     instance,"}, {"sha": "33cb1a097175d5df2755c16c98a34e8349c907a0", "filename": "src/librustc_mir/interpret/traits.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Ftraits.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -1,4 +1,4 @@\n-use rustc::ty::{self, Ty};\n+use rustc::ty::{self, Ty, Instance};\n use rustc::ty::layout::{Size, Align, LayoutOf};\n use rustc::mir::interpret::{Scalar, Pointer, EvalResult, PointerArithmetic};\n \n@@ -55,8 +55,9 @@ impl<'a, 'mir, 'tcx, M: Machine<'a, 'mir, 'tcx>> InterpretCx<'a, 'mir, 'tcx, M>\n         );\n         let tcx = &*self.tcx;\n \n-        let drop = crate::monomorphize::resolve_drop_in_place(*tcx, ty);\n+        let drop = Instance::resolve_drop_in_place(*tcx, ty);\n         let drop = self.memory.create_fn_alloc(drop);\n+\n         // no need to do any alignment checks on the memory accesses below, because we know the\n         // allocation is correctly aligned as we created it above. Also we're only offsetting by\n         // multiples of `ptr_align`, which means that it will stay aligned to `ptr_align`."}, {"sha": "9213a009ea740374641900fa189a332c0c2b5f1e", "filename": "src/librustc_mir/lib.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Flib.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -63,6 +63,11 @@ pub fn provide(providers: &mut Providers<'_>) {\n     providers.const_eval = const_eval::const_eval_provider;\n     providers.const_eval_raw = const_eval::const_eval_raw_provider;\n     providers.check_match = hair::pattern::check_match;\n+    providers.const_field = |tcx, param_env_and_value| {\n+        let (param_env, (value, field)) = param_env_and_value.into_parts();\n+        const_eval::const_field(tcx, param_env, None, field, value)\n+    };\n+    providers.type_name = interpret::type_name;\n }\n \n __build_diagnostic_array! { librustc_mir, DIAGNOSTICS }"}, {"sha": "eed051449e155637663f2a581bb3712d97e156d2", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -181,20 +181,19 @@ use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n use rustc::ty::subst::{InternalSubsts, SubstsRef};\n-use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind};\n+use rustc::ty::{self, TypeFoldable, Ty, TyCtxt, GenericParamDefKind, Instance};\n+use rustc::ty::print::obsolete::DefPathBasedNames;\n use rustc::ty::adjustment::{CustomCoerceUnsized, PointerCast};\n use rustc::session::config::EntryFnType;\n use rustc::mir::{self, Location, Place, PlaceBase, Promoted, Static, StaticKind};\n use rustc::mir::visit::Visitor as MirVisitor;\n-use rustc::mir::mono::MonoItem;\n+use rustc::mir::mono::{MonoItem, InstantiationMode};\n use rustc::mir::interpret::{Scalar, GlobalId, GlobalAlloc, ErrorHandled};\n \n-use crate::monomorphize::{self, Instance};\n+use crate::monomorphize;\n use rustc::util::nodemap::{FxHashSet, FxHashMap, DefIdMap};\n use rustc::util::common::time;\n \n-use crate::monomorphize::item::{MonoItemExt, DefPathBasedNames, InstantiationMode};\n-\n use rustc_data_structures::bit_set::GrowableBitSet;\n use rustc_data_structures::sync::{MTRef, MTLock, ParallelIterator, par_iter};\n \n@@ -580,7 +579,7 @@ impl<'a, 'tcx> MirVisitor<'tcx> for MirNeighborCollector<'a, 'tcx> {\n                 );\n                 match source_ty.sty {\n                     ty::Closure(def_id, substs) => {\n-                        let instance = monomorphize::resolve_closure(\n+                        let instance = Instance::resolve_closure(\n                             self.tcx, def_id, substs, ty::ClosureKind::FnOnce);\n                         if should_monomorphize_locally(self.tcx, &instance) {\n                             self.output.push(create_fn_mono_item(instance));\n@@ -684,7 +683,7 @@ fn visit_drop_use<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             is_direct_call: bool,\n                             output: &mut Vec<MonoItem<'tcx>>)\n {\n-    let instance = monomorphize::resolve_drop_in_place(tcx, ty);\n+    let instance = Instance::resolve_drop_in_place(tcx, ty);\n     visit_instance_use(tcx, instance, is_direct_call, output);\n }\n "}, {"sha": "d60d0fe9114d36de15bd88058d1f03956cb0b146", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 6, "deletions": 297, "changes": 303, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -1,18 +1,14 @@\n-use crate::monomorphize::Instance;\n-use rustc::hir;\n-use rustc::hir::def_id::{DefId, LOCAL_CRATE};\n-use rustc::mir::interpret::ConstValue;\n+use rustc::hir::def_id::LOCAL_CRATE;\n+use rustc::mir::mono::MonoItem;\n use rustc::session::config::OptLevel;\n-use rustc::ty::{self, Ty, TyCtxt, Const, ClosureSubsts, GeneratorSubsts};\n-use rustc::ty::subst::{SubstsRef, InternalSubsts};\n-use syntax::ast;\n+use rustc::ty::{self, TyCtxt, Instance};\n+use rustc::ty::subst::InternalSubsts;\n+use rustc::ty::print::obsolete::DefPathBasedNames;\n use syntax::attr::InlineAttr;\n-use std::fmt::{self, Write};\n-use std::iter;\n+use std::fmt;\n use rustc::mir::mono::Linkage;\n use syntax_pos::symbol::InternedString;\n use syntax::source_map::Span;\n-pub use rustc::mir::mono::MonoItem;\n \n /// Describes how a monomorphization will be instantiated in object files.\n #[derive(PartialEq, Eq, Clone, Copy, Debug, Hash)]\n@@ -207,290 +203,3 @@ impl<'a, 'tcx> MonoItemExt<'a, 'tcx> for MonoItem<'tcx> {\n         self\n     }\n }\n-\n-//=-----------------------------------------------------------------------------\n-// MonoItem String Keys\n-//=-----------------------------------------------------------------------------\n-\n-// The code below allows for producing a unique string key for a mono item.\n-// These keys are used by the handwritten auto-tests, so they need to be\n-// predictable and human-readable.\n-//\n-// Note: A lot of this could looks very similar to what's already in `ty::print`.\n-// FIXME(eddyb) implement a custom `PrettyPrinter` for this.\n-\n-/// Same as `unique_type_name()` but with the result pushed onto the given\n-/// `output` parameter.\n-pub struct DefPathBasedNames<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    omit_disambiguators: bool,\n-    omit_local_crate_name: bool,\n-}\n-\n-impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-               omit_disambiguators: bool,\n-               omit_local_crate_name: bool)\n-               -> Self {\n-        DefPathBasedNames {\n-            tcx,\n-            omit_disambiguators,\n-            omit_local_crate_name,\n-        }\n-    }\n-\n-    // Pushes the type name of the specified type to the provided string.\n-    // If `debug` is true, printing normally unprintable types is allowed\n-    // (e.g. `ty::GeneratorWitness`). This parameter should only be set when\n-    // this method is being used for logging purposes (e.g. with `debug!` or `info!`)\n-    // When being used for codegen purposes, `debug` should be set to `false`\n-    // in order to catch unexpected types that should never end up in a type name.\n-    pub fn push_type_name(&self, t: Ty<'tcx>, output: &mut String, debug: bool) {\n-        match t.sty {\n-            ty::Bool              => output.push_str(\"bool\"),\n-            ty::Char              => output.push_str(\"char\"),\n-            ty::Str               => output.push_str(\"str\"),\n-            ty::Never             => output.push_str(\"!\"),\n-            ty::Int(ast::IntTy::Isize)    => output.push_str(\"isize\"),\n-            ty::Int(ast::IntTy::I8)    => output.push_str(\"i8\"),\n-            ty::Int(ast::IntTy::I16)   => output.push_str(\"i16\"),\n-            ty::Int(ast::IntTy::I32)   => output.push_str(\"i32\"),\n-            ty::Int(ast::IntTy::I64)   => output.push_str(\"i64\"),\n-            ty::Int(ast::IntTy::I128)   => output.push_str(\"i128\"),\n-            ty::Uint(ast::UintTy::Usize)   => output.push_str(\"usize\"),\n-            ty::Uint(ast::UintTy::U8)   => output.push_str(\"u8\"),\n-            ty::Uint(ast::UintTy::U16)  => output.push_str(\"u16\"),\n-            ty::Uint(ast::UintTy::U32)  => output.push_str(\"u32\"),\n-            ty::Uint(ast::UintTy::U64)  => output.push_str(\"u64\"),\n-            ty::Uint(ast::UintTy::U128)  => output.push_str(\"u128\"),\n-            ty::Float(ast::FloatTy::F32) => output.push_str(\"f32\"),\n-            ty::Float(ast::FloatTy::F64) => output.push_str(\"f64\"),\n-            ty::Adt(adt_def, substs) => {\n-                self.push_def_path(adt_def.did, output);\n-                self.push_generic_params(substs, iter::empty(), output, debug);\n-            },\n-            ty::Tuple(component_types) => {\n-                output.push('(');\n-                for &component_type in component_types {\n-                    self.push_type_name(component_type.expect_ty(), output, debug);\n-                    output.push_str(\", \");\n-                }\n-                if !component_types.is_empty() {\n-                    output.pop();\n-                    output.pop();\n-                }\n-                output.push(')');\n-            },\n-            ty::RawPtr(ty::TypeAndMut { ty: inner_type, mutbl } ) => {\n-                output.push('*');\n-                match mutbl {\n-                    hir::MutImmutable => output.push_str(\"const \"),\n-                    hir::MutMutable => output.push_str(\"mut \"),\n-                }\n-\n-                self.push_type_name(inner_type, output, debug);\n-            },\n-            ty::Ref(_, inner_type, mutbl) => {\n-                output.push('&');\n-                if mutbl == hir::MutMutable {\n-                    output.push_str(\"mut \");\n-                }\n-\n-                self.push_type_name(inner_type, output, debug);\n-            },\n-            ty::Array(inner_type, len) => {\n-                output.push('[');\n-                self.push_type_name(inner_type, output, debug);\n-                write!(output, \"; {}\", len.unwrap_usize(self.tcx)).unwrap();\n-                output.push(']');\n-            },\n-            ty::Slice(inner_type) => {\n-                output.push('[');\n-                self.push_type_name(inner_type, output, debug);\n-                output.push(']');\n-            },\n-            ty::Dynamic(ref trait_data, ..) => {\n-                if let Some(principal) = trait_data.principal() {\n-                    self.push_def_path(principal.def_id(), output);\n-                    self.push_generic_params(\n-                        principal.skip_binder().substs,\n-                        trait_data.projection_bounds(),\n-                        output,\n-                        debug\n-                    );\n-                } else {\n-                    output.push_str(\"dyn '_\");\n-                }\n-            },\n-            ty::Foreign(did) => self.push_def_path(did, output),\n-            ty::FnDef(..) |\n-            ty::FnPtr(_) => {\n-                let sig = t.fn_sig(self.tcx);\n-                if sig.unsafety() == hir::Unsafety::Unsafe {\n-                    output.push_str(\"unsafe \");\n-                }\n-\n-                let abi = sig.abi();\n-                if abi != ::rustc_target::spec::abi::Abi::Rust {\n-                    output.push_str(\"extern \\\"\");\n-                    output.push_str(abi.name());\n-                    output.push_str(\"\\\" \");\n-                }\n-\n-                output.push_str(\"fn(\");\n-\n-                let sig = self.tcx.normalize_erasing_late_bound_regions(\n-                    ty::ParamEnv::reveal_all(),\n-                    &sig,\n-                );\n-\n-                if !sig.inputs().is_empty() {\n-                    for &parameter_type in sig.inputs() {\n-                        self.push_type_name(parameter_type, output, debug);\n-                        output.push_str(\", \");\n-                    }\n-                    output.pop();\n-                    output.pop();\n-                }\n-\n-                if sig.c_variadic {\n-                    if !sig.inputs().is_empty() {\n-                        output.push_str(\", ...\");\n-                    } else {\n-                        output.push_str(\"...\");\n-                    }\n-                }\n-\n-                output.push(')');\n-\n-                if !sig.output().is_unit() {\n-                    output.push_str(\" -> \");\n-                    self.push_type_name(sig.output(), output, debug);\n-                }\n-            },\n-            ty::Generator(def_id, GeneratorSubsts { ref substs }, _) |\n-            ty::Closure(def_id, ClosureSubsts { ref substs }) => {\n-                self.push_def_path(def_id, output);\n-                let generics = self.tcx.generics_of(self.tcx.closure_base_def_id(def_id));\n-                let substs = substs.truncate_to(self.tcx, generics);\n-                self.push_generic_params(substs, iter::empty(), output, debug);\n-            }\n-            ty::Error |\n-            ty::Bound(..) |\n-            ty::Infer(_) |\n-            ty::Placeholder(..) |\n-            ty::UnnormalizedProjection(..) |\n-            ty::Projection(..) |\n-            ty::Param(_) |\n-            ty::GeneratorWitness(_) |\n-            ty::Opaque(..) => {\n-                if debug {\n-                    output.push_str(&format!(\"`{:?}`\", t));\n-                } else {\n-                    bug!(\n-                        \"DefPathBasedNames: trying to create type name for unexpected type: {:?}\",\n-                        t,\n-                    );\n-                }\n-            }\n-        }\n-    }\n-\n-    // Pushes the the name of the specified const to the provided string.\n-    // If `debug` is true, usually-unprintable consts (such as `Infer`) will be printed,\n-    // as well as the unprintable types of constants (see `push_type_name` for more details).\n-    pub fn push_const_name(&self, c: &Const<'tcx>, output: &mut String, debug: bool) {\n-        match c.val {\n-            ConstValue::Scalar(..) | ConstValue::Slice { .. } | ConstValue::ByRef(..) => {\n-                // FIXME(const_generics): we could probably do a better job here.\n-                write!(output, \"{:?}\", c).unwrap()\n-            }\n-            _ => {\n-                if debug {\n-                    write!(output, \"{:?}\", c).unwrap()\n-                } else {\n-                    bug!(\n-                        \"DefPathBasedNames: trying to create const name for unexpected const: {:?}\",\n-                        c,\n-                    );\n-                }\n-            }\n-        }\n-        output.push_str(\": \");\n-        self.push_type_name(c.ty, output, debug);\n-    }\n-\n-    pub fn push_def_path(&self,\n-                         def_id: DefId,\n-                         output: &mut String) {\n-        let def_path = self.tcx.def_path(def_id);\n-\n-        // some_crate::\n-        if !(self.omit_local_crate_name && def_id.is_local()) {\n-            output.push_str(&self.tcx.crate_name(def_path.krate).as_str());\n-            output.push_str(\"::\");\n-        }\n-\n-        // foo::bar::ItemName::\n-        for part in self.tcx.def_path(def_id).data {\n-            if self.omit_disambiguators {\n-                write!(output, \"{}::\", part.data.as_interned_str()).unwrap();\n-            } else {\n-                write!(output, \"{}[{}]::\",\n-                       part.data.as_interned_str(),\n-                       part.disambiguator).unwrap();\n-            }\n-        }\n-\n-        // remove final \"::\"\n-        output.pop();\n-        output.pop();\n-    }\n-\n-    fn push_generic_params<I>(\n-        &self,\n-        substs: SubstsRef<'tcx>,\n-        projections: I,\n-        output: &mut String,\n-        debug: bool,\n-    ) where I: Iterator<Item=ty::PolyExistentialProjection<'tcx>> {\n-        let mut projections = projections.peekable();\n-        if substs.non_erasable_generics().next().is_none() && projections.peek().is_none() {\n-            return;\n-        }\n-\n-        output.push('<');\n-\n-        for type_parameter in substs.types() {\n-            self.push_type_name(type_parameter, output, debug);\n-            output.push_str(\", \");\n-        }\n-\n-        for projection in projections {\n-            let projection = projection.skip_binder();\n-            let name = &self.tcx.associated_item(projection.item_def_id).ident.as_str();\n-            output.push_str(name);\n-            output.push_str(\"=\");\n-            self.push_type_name(projection.ty, output, debug);\n-            output.push_str(\", \");\n-        }\n-\n-        for const_parameter in substs.consts() {\n-            self.push_const_name(const_parameter, output, debug);\n-            output.push_str(\", \");\n-        }\n-\n-        output.pop();\n-        output.pop();\n-\n-        output.push('>');\n-    }\n-\n-    pub fn push_instance_as_string(&self,\n-                                   instance: Instance<'tcx>,\n-                                   output: &mut String,\n-                                   debug: bool) {\n-        self.push_def_path(instance.def_id(), output);\n-        self.push_generic_params(instance.substs, iter::empty(), output, debug);\n-    }\n-}"}, {"sha": "51bcbff7f3236472e95dc955b6f7e0d2cc971a2c", "filename": "src/librustc_mir/monomorphize/mod.rs", "status": "modified", "additions": 0, "deletions": 133, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fmod.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -1,143 +1,10 @@\n-use rustc::hir::def_id::DefId;\n-use rustc::middle::lang_items::DropInPlaceFnLangItem;\n use rustc::traits;\n use rustc::ty::adjustment::CustomCoerceUnsized;\n use rustc::ty::{self, Ty, TyCtxt};\n \n-pub use rustc::ty::Instance;\n-pub use self::item::{MonoItem, MonoItemExt};\n-\n pub mod collector;\n-pub mod item;\n pub mod partitioning;\n \n-#[inline(never)] // give this a place in the profiler\n-pub fn assert_symbols_are_distinct<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mono_items: I)\n-    where I: Iterator<Item=&'a MonoItem<'tcx>>\n-{\n-    let mut symbols: Vec<_> = mono_items.map(|mono_item| {\n-        (mono_item, mono_item.symbol_name(tcx))\n-    }).collect();\n-\n-    symbols.sort_by_key(|sym| sym.1);\n-\n-    for pair in symbols.windows(2) {\n-        let sym1 = &pair[0].1;\n-        let sym2 = &pair[1].1;\n-\n-        if sym1 == sym2 {\n-            let mono_item1 = pair[0].0;\n-            let mono_item2 = pair[1].0;\n-\n-            let span1 = mono_item1.local_span(tcx);\n-            let span2 = mono_item2.local_span(tcx);\n-\n-            // Deterministically select one of the spans for error reporting\n-            let span = match (span1, span2) {\n-                (Some(span1), Some(span2)) => {\n-                    Some(if span1.lo().0 > span2.lo().0 {\n-                        span1\n-                    } else {\n-                        span2\n-                    })\n-                }\n-                (span1, span2) => span1.or(span2),\n-            };\n-\n-            let error_message = format!(\"symbol `{}` is already defined\", sym1);\n-\n-            if let Some(span) = span {\n-                tcx.sess.span_fatal(span, &error_message)\n-            } else {\n-                tcx.sess.fatal(&error_message)\n-            }\n-        }\n-    }\n-}\n-\n-fn fn_once_adapter_instance<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    closure_did: DefId,\n-    substs: ty::ClosureSubsts<'tcx>,\n-    ) -> Instance<'tcx> {\n-    debug!(\"fn_once_adapter_shim({:?}, {:?})\",\n-           closure_did,\n-           substs);\n-    let fn_once = tcx.lang_items().fn_once_trait().unwrap();\n-    let call_once = tcx.associated_items(fn_once)\n-        .find(|it| it.kind == ty::AssocKind::Method)\n-        .unwrap().def_id;\n-    let def = ty::InstanceDef::ClosureOnceShim { call_once };\n-\n-    let self_ty = tcx.mk_closure(closure_did, substs);\n-\n-    let sig = substs.closure_sig(closure_did, tcx);\n-    let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n-    assert_eq!(sig.inputs().len(), 1);\n-    let substs = tcx.mk_substs_trait(self_ty, &[sig.inputs()[0].into()]);\n-\n-    debug!(\"fn_once_adapter_shim: self_ty={:?} sig={:?}\", self_ty, sig);\n-    Instance { def, substs }\n-}\n-\n-fn needs_fn_once_adapter_shim(actual_closure_kind: ty::ClosureKind,\n-                              trait_closure_kind: ty::ClosureKind)\n-                              -> Result<bool, ()>\n-{\n-    match (actual_closure_kind, trait_closure_kind) {\n-        (ty::ClosureKind::Fn, ty::ClosureKind::Fn) |\n-        (ty::ClosureKind::FnMut, ty::ClosureKind::FnMut) |\n-        (ty::ClosureKind::FnOnce, ty::ClosureKind::FnOnce) => {\n-            // No adapter needed.\n-           Ok(false)\n-        }\n-        (ty::ClosureKind::Fn, ty::ClosureKind::FnMut) => {\n-            // The closure fn `llfn` is a `fn(&self, ...)`.  We want a\n-            // `fn(&mut self, ...)`. In fact, at codegen time, these are\n-            // basically the same thing, so we can just return llfn.\n-            Ok(false)\n-        }\n-        (ty::ClosureKind::Fn, ty::ClosureKind::FnOnce) |\n-        (ty::ClosureKind::FnMut, ty::ClosureKind::FnOnce) => {\n-            // The closure fn `llfn` is a `fn(&self, ...)` or `fn(&mut\n-            // self, ...)`.  We want a `fn(self, ...)`. We can produce\n-            // this by doing something like:\n-            //\n-            //     fn call_once(self, ...) { call_mut(&self, ...) }\n-            //     fn call_once(mut self, ...) { call_mut(&mut self, ...) }\n-            //\n-            // These are both the same at codegen time.\n-            Ok(true)\n-        }\n-        _ => Err(()),\n-    }\n-}\n-\n-pub fn resolve_closure<'a, 'tcx> (\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    def_id: DefId,\n-    substs: ty::ClosureSubsts<'tcx>,\n-    requested_kind: ty::ClosureKind)\n-    -> Instance<'tcx>\n-{\n-    let actual_kind = substs.closure_kind(def_id, tcx);\n-\n-    match needs_fn_once_adapter_shim(actual_kind, requested_kind) {\n-        Ok(true) => fn_once_adapter_instance(tcx, def_id, substs),\n-        _ => Instance::new(def_id, substs.substs)\n-    }\n-}\n-\n-pub fn resolve_drop_in_place<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    ty: Ty<'tcx>)\n-    -> ty::Instance<'tcx>\n-{\n-    let def_id = tcx.require_lang_item(DropInPlaceFnLangItem);\n-    let substs = tcx.intern_substs(&[ty.into()]);\n-    Instance::resolve(tcx, ty::ParamEnv::reveal_all(), def_id, substs).unwrap()\n-}\n-\n pub fn custom_coerce_unsize_info<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                            source_ty: Ty<'tcx>,\n                                            target_ty: Ty<'tcx>)"}, {"sha": "1895d4871552e2dd4d32a3cb9fc6815dc9dad39a", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 48, "deletions": 95, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/da9ebc828c982d2ed49396886da85011e1b0a6c0/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=da9ebc828c982d2ed49396886da85011e1b0a6c0", "patch": "@@ -97,24 +97,20 @@ use std::cmp;\n use std::sync::Arc;\n \n use syntax::symbol::InternedString;\n-use rustc::dep_graph::{WorkProductId, WorkProduct, DepNode, DepConstructor};\n-use rustc::hir::{CodegenFnAttrFlags, HirId};\n+use rustc::hir::CodegenFnAttrFlags;\n use rustc::hir::def::DefKind;\n use rustc::hir::def_id::{CrateNum, DefId, LOCAL_CRATE, CRATE_DEF_INDEX};\n-use rustc::mir::mono::{Linkage, Visibility, CodegenUnitNameBuilder};\n+use rustc::mir::mono::{Linkage, Visibility, CodegenUnitNameBuilder, CodegenUnit};\n use rustc::middle::exported_symbols::SymbolExportLevel;\n use rustc::ty::{self, DefIdTree, TyCtxt, InstanceDef};\n use rustc::ty::print::characteristic_def_id_of_type;\n use rustc::ty::query::Providers;\n use rustc::util::common::time;\n use rustc::util::nodemap::{DefIdSet, FxHashMap, FxHashSet};\n-use rustc::mir::mono::MonoItem;\n+use rustc::mir::mono::{MonoItem, InstantiationMode};\n \n use crate::monomorphize::collector::InliningMap;\n use crate::monomorphize::collector::{self, MonoItemCollectionMode};\n-use crate::monomorphize::item::{MonoItemExt, InstantiationMode};\n-\n-pub use rustc::mir::mono::CodegenUnit;\n \n pub enum PartitioningStrategy {\n     /// Generates one codegen unit per source-level module.\n@@ -124,93 +120,6 @@ pub enum PartitioningStrategy {\n     FixedUnitCount(usize)\n }\n \n-pub trait CodegenUnitExt<'tcx> {\n-    fn as_codegen_unit(&self) -> &CodegenUnit<'tcx>;\n-\n-    fn contains_item(&self, item: &MonoItem<'tcx>) -> bool {\n-        self.items().contains_key(item)\n-    }\n-\n-    fn name<'a>(&'a self) -> &'a InternedString\n-        where 'tcx: 'a,\n-    {\n-        &self.as_codegen_unit().name()\n-    }\n-\n-    fn items(&self) -> &FxHashMap<MonoItem<'tcx>, (Linkage, Visibility)> {\n-        &self.as_codegen_unit().items()\n-    }\n-\n-    fn work_product_id(&self) -> WorkProductId {\n-        WorkProductId::from_cgu_name(&self.name().as_str())\n-    }\n-\n-    fn work_product(&self, tcx: TyCtxt<'_, '_, '_>) -> WorkProduct {\n-        let work_product_id = self.work_product_id();\n-        tcx.dep_graph\n-           .previous_work_product(&work_product_id)\n-           .unwrap_or_else(|| {\n-                panic!(\"Could not find work-product for CGU `{}`\", self.name())\n-            })\n-    }\n-\n-    fn items_in_deterministic_order<'a>(&self,\n-                                        tcx: TyCtxt<'a, 'tcx, 'tcx>)\n-                                        -> Vec<(MonoItem<'tcx>,\n-                                                (Linkage, Visibility))> {\n-        // The codegen tests rely on items being process in the same order as\n-        // they appear in the file, so for local items, we sort by node_id first\n-        #[derive(PartialEq, Eq, PartialOrd, Ord)]\n-        pub struct ItemSortKey(Option<HirId>, ty::SymbolName);\n-\n-        fn item_sort_key<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-                                   item: MonoItem<'tcx>) -> ItemSortKey {\n-            ItemSortKey(match item {\n-                MonoItem::Fn(ref instance) => {\n-                    match instance.def {\n-                        // We only want to take HirIds of user-defined\n-                        // instances into account. The others don't matter for\n-                        // the codegen tests and can even make item order\n-                        // unstable.\n-                        InstanceDef::Item(def_id) => {\n-                            tcx.hir().as_local_hir_id(def_id)\n-                        }\n-                        InstanceDef::VtableShim(..) |\n-                        InstanceDef::Intrinsic(..) |\n-                        InstanceDef::FnPtrShim(..) |\n-                        InstanceDef::Virtual(..) |\n-                        InstanceDef::ClosureOnceShim { .. } |\n-                        InstanceDef::DropGlue(..) |\n-                        InstanceDef::CloneShim(..) => {\n-                            None\n-                        }\n-                    }\n-                }\n-                MonoItem::Static(def_id) => {\n-                    tcx.hir().as_local_hir_id(def_id)\n-                }\n-                MonoItem::GlobalAsm(hir_id) => {\n-                    Some(hir_id)\n-                }\n-            }, item.symbol_name(tcx))\n-        }\n-\n-        let mut items: Vec<_> = self.items().iter().map(|(&i, &l)| (i, l)).collect();\n-        items.sort_by_cached_key(|&(i, _)| item_sort_key(tcx, i));\n-        items\n-    }\n-\n-    fn codegen_dep_node(&self, tcx: TyCtxt<'_, 'tcx, 'tcx>) -> DepNode {\n-        DepNode::new(tcx, DepConstructor::CompileCodegenUnit(self.name().clone()))\n-    }\n-}\n-\n-impl<'tcx> CodegenUnitExt<'tcx> for CodegenUnit<'tcx> {\n-    fn as_codegen_unit(&self) -> &CodegenUnit<'tcx> {\n-        self\n-    }\n-}\n-\n // Anything we can't find a proper codegen unit for goes into this.\n fn fallback_cgu_name(name_builder: &mut CodegenUnitNameBuilder<'_, '_, '_>) -> InternedString {\n     name_builder.build_cgu_name(LOCAL_CRATE, &[\"fallback\"], Some(\"cgu\"))\n@@ -882,6 +791,50 @@ fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     }\n }\n \n+#[inline(never)] // give this a place in the profiler\n+fn assert_symbols_are_distinct<'a, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mono_items: I)\n+    where I: Iterator<Item=&'a MonoItem<'tcx>>\n+{\n+    let mut symbols: Vec<_> = mono_items.map(|mono_item| {\n+        (mono_item, mono_item.symbol_name(tcx))\n+    }).collect();\n+\n+    symbols.sort_by_key(|sym| sym.1);\n+\n+    for pair in symbols.windows(2) {\n+        let sym1 = &pair[0].1;\n+        let sym2 = &pair[1].1;\n+\n+        if sym1 == sym2 {\n+            let mono_item1 = pair[0].0;\n+            let mono_item2 = pair[1].0;\n+\n+            let span1 = mono_item1.local_span(tcx);\n+            let span2 = mono_item2.local_span(tcx);\n+\n+            // Deterministically select one of the spans for error reporting\n+            let span = match (span1, span2) {\n+                (Some(span1), Some(span2)) => {\n+                    Some(if span1.lo().0 > span2.lo().0 {\n+                        span1\n+                    } else {\n+                        span2\n+                    })\n+                }\n+                (span1, span2) => span1.or(span2),\n+            };\n+\n+            let error_message = format!(\"symbol `{}` is already defined\", sym1);\n+\n+            if let Some(span) = span {\n+                tcx.sess.span_fatal(span, &error_message)\n+            } else {\n+                tcx.sess.fatal(&error_message)\n+            }\n+        }\n+    }\n+}\n+\n fn collect_and_partition_mono_items<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     cnum: CrateNum,\n@@ -922,7 +875,7 @@ fn collect_and_partition_mono_items<'a, 'tcx>(\n \n     tcx.sess.abort_if_errors();\n \n-    crate::monomorphize::assert_symbols_are_distinct(tcx, items.iter());\n+    assert_symbols_are_distinct(tcx, items.iter());\n \n     let strategy = if tcx.sess.opts.incremental.is_some() {\n         PartitioningStrategy::PerModule"}]}